
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0802f240  0802f240  0003f240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fad0  0802fad0  000414ac  2**0
                  CONTENTS
  4 .ARM          00000008  0802fad0  0802fad0  0003fad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fad8  0802fad8  000414ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fad8  0802fad8  0003fad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fadc  0802fadc  0003fadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  0802fae0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000414ac  2**0
                  CONTENTS
 10 .bss          0001d9c4  200014b0  200014b0  000414b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ee74  2001ee74  000414b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000414ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005c8e9  00000000  00000000  000414dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fcc  00000000  00000000  0009ddc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000054d8  00000000  00000000  000a7d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004f50  00000000  00000000  000ad270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c88c  00000000  00000000  000b21c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043585  00000000  00000000  000dea4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001017cf  00000000  00000000  00121fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  002237a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000171fc  00000000  00000000  00223868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802f228 	.word	0x0802f228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	0802f228 	.word	0x0802f228

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001edc0 	.word	0x2001edc0

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff0b 	bl	8000ac0 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc81 	bl	80005dc <__aeabi_dmul>
 8000cda:	f7ff ff57 	bl	8000b8c <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc02 	bl	80004e8 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc78 	bl	80005dc <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff faba 	bl	800026c <__aeabi_dsub>
 8000cf8:	f7ff ff48 	bl	8000b8c <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	80fb      	strh	r3, [r7, #6]
 8001008:	460b      	mov	r3, r1
 800100a:	717b      	strb	r3, [r7, #5]
 800100c:	4613      	mov	r3, r2
 800100e:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	4013      	ands	r3, r2
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	460b      	mov	r3, r1
 8001038:	717b      	strb	r3, [r7, #5]
 800103a:	4613      	mov	r3, r2
 800103c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	fa42 f303 	asr.w	r3, r2, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	460b      	mov	r3, r1
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	4013      	ands	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	460b      	mov	r3, r1
 8001096:	71bb      	strb	r3, [r7, #6]
 8001098:	4613      	mov	r3, r2
 800109a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	4013      	ands	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	fa42 f303 	asr.w	r3, r2, r3
 80010dc:	b29b      	uxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d802      	bhi.n	8001102 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 80010fc:	f06f 0315 	mvn.w	r3, #21
 8001100:	e0fa      	b.n	80012f8 <can1_ams_status_1_pack+0x20e>
    }

    memset(&dst_p[0], 0, 8);
 8001102:	2208      	movs	r2, #8
 8001104:	2100      	movs	r1, #0
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f02d faa2 	bl	802e650 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2203      	movs	r2, #3
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5b 	bl	8000fd0 <pack_left_shift_u8>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2204      	movs	r2, #4
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff4c 	bl	8000fd0 <pack_left_shift_u8>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4313      	orrs	r3, r2
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2208      	movs	r2, #8
 800114e:	2103      	movs	r1, #3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2210      	movs	r2, #16
 800116c:	2104      	movs	r1, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff2e 	bl	8000fd0 <pack_left_shift_u8>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2220      	movs	r2, #32
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff1f 	bl	8000fd0 <pack_left_shift_u8>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2106      	movs	r1, #6
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff10 	bl	8000fd0 <pack_left_shift_u8>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	799b      	ldrb	r3, [r3, #6]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	2107      	movs	r1, #7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff01 	bl	8000fd0 <pack_left_shift_u8>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0xffu);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	79db      	ldrb	r3, [r3, #7]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fef2 	bl	8000fd0 <pack_left_shift_u8>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->min_cell_voltage, 0u, 0xffu);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	7a1b      	ldrb	r3, [r3, #8]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fee1 	bl	8000fd0 <pack_left_shift_u8>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3302      	adds	r3, #2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->max_cell_voltage, 0u, 0xffu);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	7a5b      	ldrb	r3, [r3, #9]
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fed0 	bl	8000fd0 <pack_left_shift_u8>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3303      	adds	r3, #3
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3303      	adds	r3, #3
 800123e:	430a      	orrs	r2, r1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
    min_cell_temperature = (uint16_t)src_p->min_cell_temperature;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800124a:	82fb      	strh	r3, [r7, #22]
    dst_p[4] |= pack_left_shift_u16(min_cell_temperature, 0u, 0xffu);
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fed3 	bl	8000ffe <pack_left_shift_u16>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3304      	adds	r3, #4
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(min_cell_temperature, 8u, 0x0fu);
 800126c:	8afb      	ldrh	r3, [r7, #22]
 800126e:	220f      	movs	r2, #15
 8001270:	2108      	movs	r1, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff feda 	bl	800102c <pack_right_shift_u16>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3305      	adds	r3, #5
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3305      	adds	r3, #5
 8001286:	430a      	orrs	r2, r1
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    max_cell_temperature = (uint16_t)src_p->max_cell_temperature;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p[5] |= pack_left_shift_u16(max_cell_temperature, 4u, 0xf0u);
 8001294:	8abb      	ldrh	r3, [r7, #20]
 8001296:	22f0      	movs	r2, #240	; 0xf0
 8001298:	2104      	movs	r1, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff feaf 	bl	8000ffe <pack_left_shift_u16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3305      	adds	r3, #5
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3305      	adds	r3, #5
 80012ae:	430a      	orrs	r2, r1
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u16(max_cell_temperature, 4u, 0xffu);
 80012b4:	8abb      	ldrh	r3, [r7, #20]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb6 	bl	800102c <pack_right_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3306      	adds	r3, #6
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3306      	adds	r3, #6
 80012ce:	430a      	orrs	r2, r1
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0xffu);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	7b9b      	ldrb	r3, [r3, #14]
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe77 	bl	8000fd0 <pack_left_shift_u8>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3307      	adds	r3, #7
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3307      	adds	r3, #7
 80012f0:	430a      	orrs	r2, r1
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    return (8);
 80012f6:	2308      	movs	r3, #8
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <can1_ams_status_1_unpack>:

int can1_ams_status_1_unpack(
    struct can1_ams_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d802      	bhi.n	8001318 <can1_ams_status_1_unpack+0x18>
        return (-EINVAL);
 8001312:	f06f 0315 	mvn.w	r3, #21
 8001316:	e0c9      	b.n	80014ac <can1_ams_status_1_unpack+0x1ac>
    }

    dst_p->charging_status = unpack_right_shift_u8(src_p[0], 0u, 0x03u);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feb2 	bl	800108a <unpack_right_shift_u8>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	701a      	strb	r2, [r3, #0]
    dst_p->air1_closed = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2204      	movs	r2, #4
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fea7 	bl	800108a <unpack_right_shift_u8>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	705a      	strb	r2, [r3, #1]
    dst_p->air2_closed = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	2103      	movs	r1, #3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe9c 	bl	800108a <unpack_right_shift_u8>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	709a      	strb	r2, [r3, #2]
    dst_p->sc_closed = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	2104      	movs	r1, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe91 	bl	800108a <unpack_right_shift_u8>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	70da      	strb	r2, [r3, #3]
    dst_p->pre_charge_status = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2220      	movs	r2, #32
 8001376:	2105      	movs	r1, #5
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe86 	bl	800108a <unpack_right_shift_u8>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	711a      	strb	r2, [r3, #4]
    dst_p->ams_error = unpack_right_shift_u8(src_p[0], 6u, 0x40u);
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	2106      	movs	r1, #6
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe7b 	bl	800108a <unpack_right_shift_u8>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	715a      	strb	r2, [r3, #5]
    dst_p->imd_error = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	2107      	movs	r1, #7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe70 	bl	800108a <unpack_right_shift_u8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	719a      	strb	r2, [r3, #6]
    dst_p->state_of_charge = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe64 	bl	800108a <unpack_right_shift_u8>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	71da      	strb	r2, [r3, #7]
    dst_p->min_cell_voltage = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3302      	adds	r3, #2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe58 	bl	800108a <unpack_right_shift_u8>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	721a      	strb	r2, [r3, #8]
    dst_p->max_cell_voltage = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe4c 	bl	800108a <unpack_right_shift_u8>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	725a      	strb	r2, [r3, #9]
    min_cell_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3304      	adds	r3, #4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe58 	bl	80010ba <unpack_right_shift_u16>
 800140a:	4603      	mov	r3, r0
 800140c:	82bb      	strh	r3, [r7, #20]
    min_cell_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0x0fu);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3305      	adds	r3, #5
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	220f      	movs	r2, #15
 8001416:	2108      	movs	r1, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe1e 	bl	800105a <unpack_left_shift_u16>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	8abb      	ldrh	r3, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	82bb      	strh	r3, [r7, #20]

    if ((min_cell_temperature & (1u << 11)) != 0u) {
 8001428:	8abb      	ldrh	r3, [r7, #20]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <can1_ams_status_1_unpack+0x13e>
        min_cell_temperature |= 0xf000u;
 8001432:	8abb      	ldrh	r3, [r7, #20]
 8001434:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001438:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800143c:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->min_cell_temperature = (int16_t)min_cell_temperature;
 800143e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	815a      	strh	r2, [r3, #10]
    max_cell_temperature = unpack_right_shift_u16(src_p[5], 4u, 0xf0u);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	22f0      	movs	r2, #240	; 0xf0
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe32 	bl	80010ba <unpack_right_shift_u16>
 8001456:	4603      	mov	r3, r0
 8001458:	82fb      	strh	r3, [r7, #22]
    max_cell_temperature |= unpack_left_shift_u16(src_p[6], 4u, 0xffu);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3306      	adds	r3, #6
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2104      	movs	r1, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fdf8 	bl	800105a <unpack_left_shift_u16>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	4313      	orrs	r3, r2
 8001472:	82fb      	strh	r3, [r7, #22]

    if ((max_cell_temperature & (1u << 11)) != 0u) {
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <can1_ams_status_1_unpack+0x18a>
        max_cell_temperature |= 0xf000u;
 800147e:	8afb      	ldrh	r3, [r7, #22]
 8001480:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001484:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001488:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->max_cell_temperature = (int16_t)max_cell_temperature;
 800148a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	819a      	strh	r2, [r3, #12]
    dst_p->fan_speed = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3307      	adds	r3, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdf4 	bl	800108a <unpack_right_shift_u8>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	739a      	strb	r2, [r3, #14]

    return (0);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <can1_ams_status_1_charging_status_encode>:

uint8_t can1_ams_status_1_charging_status_encode(double value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80014be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c2:	f7ff fb63 	bl	8000b8c <__aeabi_d2uiz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <can1_ams_status_1_charging_status_decode>:

double can1_ams_status_1_charging_status_decode(uint8_t value)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f802 	bl	80004e8 <__aeabi_ui2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ec:	eeb0 0a47 	vmov.f32	s0, s14
 80014f0:	eef0 0a67 	vmov.f32	s1, s15
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <can1_ams_status_1_air1_closed_encode>:
{
    return (value <= 3u);
}

uint8_t can1_ams_status_1_air1_closed_encode(double value)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7ff fb40 	bl	8000b8c <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <can1_ams_status_1_air1_closed_decode>:

double can1_ams_status_1_air1_closed_decode(uint8_t value)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffdf 	bl	80004e8 <__aeabi_ui2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001532:	eeb0 0a47 	vmov.f32	s0, s14
 8001536:	eef0 0a67 	vmov.f32	s1, s15
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <can1_ams_status_1_air2_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_air2_closed_encode(double value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800154a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154e:	f7ff fb1d 	bl	8000b8c <__aeabi_d2uiz>
 8001552:	4603      	mov	r3, r0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <can1_ams_status_1_air2_closed_decode>:

double can1_ams_status_1_air2_closed_decode(uint8_t value)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffbc 	bl	80004e8 <__aeabi_ui2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b17 	vmov	d7, r2, r3
}
 8001578:	eeb0 0a47 	vmov.f32	s0, s14
 800157c:	eef0 0a67 	vmov.f32	s1, s15
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <can1_ams_status_1_sc_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_sc_closed_encode(double value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001594:	f7ff fafa 	bl	8000b8c <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <can1_ams_status_1_sc_closed_decode>:

double can1_ams_status_1_sc_closed_decode(uint8_t value)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff99 	bl	80004e8 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80015be:	eeb0 0a47 	vmov.f32	s0, s14
 80015c2:	eef0 0a67 	vmov.f32	s1, s15
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <can1_ams_status_1_pre_charge_status_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_pre_charge_status_encode(double value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80015d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015da:	f7ff fad7 	bl	8000b8c <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b2db      	uxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <can1_ams_status_1_pre_charge_status_decode>:

double can1_ams_status_1_pre_charge_status_decode(uint8_t value)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff76 	bl	80004e8 <__aeabi_ui2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b17 	vmov	d7, r2, r3
}
 8001604:	eeb0 0a47 	vmov.f32	s0, s14
 8001608:	eef0 0a67 	vmov.f32	s1, s15
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <can1_ams_status_1_ams_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_ams_error_encode(double value)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001620:	f7ff fab4 	bl	8000b8c <__aeabi_d2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b2db      	uxtb	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <can1_ams_status_1_ams_error_decode>:

double can1_ams_status_1_ams_error_decode(uint8_t value)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff53 	bl	80004e8 <__aeabi_ui2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
}
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <can1_ams_status_1_imd_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_imd_error_encode(double value)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7ff fa91 	bl	8000b8c <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <can1_ams_status_1_imd_error_decode>:

double can1_ams_status_1_imd_error_decode(uint8_t value)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff30 	bl	80004e8 <__aeabi_ui2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <can1_ams_status_1_state_of_charge_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_state_of_charge_encode(double value)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80016a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ac:	f7ff fa6e 	bl	8000b8c <__aeabi_d2uiz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <can1_ams_status_1_state_of_charge_decode>:

double can1_ams_status_1_state_of_charge_decode(uint8_t value)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff0d 	bl	80004e8 <__aeabi_ui2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d6:	eeb0 0a47 	vmov.f32	s0, s14
 80016da:	eef0 0a67 	vmov.f32	s1, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 100u);
}

uint8_t can1_ams_status_1_min_cell_voltage_encode(double value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <can1_ams_status_1_min_cell_voltage_encode+0x50>)
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7fe fdb6 	bl	800026c <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a309      	add	r3, pc, #36	; (adr r3, 8001730 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f88f 	bl	8000830 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa37 	bl	8000b8c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	b2db      	uxtb	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	fcce1c58 	.word	0xfcce1c58
 8001734:	3f800e6a 	.word	0x3f800e6a
 8001738:	40040000 	.word	0x40040000
 800173c:	00000000 	.word	0x00000000

08001740 <can1_ams_status_1_min_cell_voltage_decode>:

double can1_ams_status_1_min_cell_voltage_decode(uint8_t value)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fecb 	bl	80004e8 <__aeabi_ui2d>
 8001752:	a30e      	add	r3, pc, #56	; (adr r3, 800178c <can1_ams_status_1_min_cell_voltage_decode+0x4c>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff40 	bl	80005dc <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <can1_ams_status_1_min_cell_voltage_decode+0x48>)
 800176a:	f7fe fd81 	bl	8000270 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	ec43 2b17 	vmov	d7, r2, r3
}
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	40040000 	.word	0x40040000
 800178c:	fcce1c58 	.word	0xfcce1c58
 8001790:	3f800e6a 	.word	0x3f800e6a
 8001794:	00000000 	.word	0x00000000

08001798 <can1_ams_status_1_max_cell_voltage_encode>:

    return (true);
}

uint8_t can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <can1_ams_status_1_max_cell_voltage_encode+0x50>)
 80017a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ac:	f7fe fd5e 	bl	800026c <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	fcce1c58 	.word	0xfcce1c58
 80017e4:	3f800e6a 	.word	0x3f800e6a
 80017e8:	40040000 	.word	0x40040000
 80017ec:	00000000 	.word	0x00000000

080017f0 <can1_ams_status_1_max_cell_voltage_decode>:

double can1_ams_status_1_max_cell_voltage_decode(uint8_t value)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe73 	bl	80004e8 <__aeabi_ui2d>
 8001802:	a30e      	add	r3, pc, #56	; (adr r3, 800183c <can1_ams_status_1_max_cell_voltage_decode+0x4c>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fee8 	bl	80005dc <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <can1_ams_status_1_max_cell_voltage_decode+0x48>)
 800181a:	f7fe fd29 	bl	8000270 <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b17 	vmov	d7, r2, r3
}
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	40040000 	.word	0x40040000
 800183c:	fcce1c58 	.word	0xfcce1c58
 8001840:	3f800e6a 	.word	0x3f800e6a
 8001844:	00000000 	.word	0x00000000

08001848 <can1_ams_status_1_min_cell_temperature_encode>:

    return (true);
}

int16_t can1_ams_status_1_min_cell_temperature_encode(double value)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <can1_ams_status_1_min_cell_temperature_encode+0x50>)
 8001858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185c:	f7fe fd08 	bl	8000270 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a309      	add	r3, pc, #36	; (adr r3, 8001890 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe ffdf 	bl	8000830 <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f95f 	bl	8000b3c <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	b21b      	sxth	r3, r3
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	757928e1 	.word	0x757928e1
 8001894:	3fa9018e 	.word	0x3fa9018e
 8001898:	40240000 	.word	0x40240000
 800189c:	00000000 	.word	0x00000000

080018a0 <can1_ams_status_1_min_cell_temperature_decode>:

double can1_ams_status_1_min_cell_temperature_decode(int16_t value)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe2a 	bl	8000508 <__aeabi_i2d>
 80018b4:	a30d      	add	r3, pc, #52	; (adr r3, 80018ec <can1_ams_status_1_min_cell_temperature_decode+0x4c>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe8f 	bl	80005dc <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <can1_ams_status_1_min_cell_temperature_decode+0x48>)
 80018cc:	f7fe fcce 	bl	800026c <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40240000 	.word	0x40240000
 80018ec:	757928e1 	.word	0x757928e1
 80018f0:	3fa9018e 	.word	0x3fa9018e
 80018f4:	00000000 	.word	0x00000000

080018f8 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_status_1_max_cell_temperature_encode(double value)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <can1_ams_status_1_max_cell_temperature_encode+0x50>)
 8001908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190c:	f7fe fcb0 	bl	8000270 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	a309      	add	r3, pc, #36	; (adr r3, 8001940 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe ff87 	bl	8000830 <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f907 	bl	8000b3c <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	b21b      	sxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	757928e1 	.word	0x757928e1
 8001944:	3fa9018e 	.word	0x3fa9018e
 8001948:	40240000 	.word	0x40240000
 800194c:	00000000 	.word	0x00000000

08001950 <can1_ams_status_1_max_cell_temperature_decode>:

double can1_ams_status_1_max_cell_temperature_decode(int16_t value)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdd2 	bl	8000508 <__aeabi_i2d>
 8001964:	a30d      	add	r3, pc, #52	; (adr r3, 800199c <can1_ams_status_1_max_cell_temperature_decode+0x4c>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fe37 	bl	80005dc <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <can1_ams_status_1_max_cell_temperature_decode+0x48>)
 800197c:	f7fe fc76 	bl	800026c <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b17 	vmov	d7, r2, r3
}
 8001988:	eeb0 0a47 	vmov.f32	s0, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40240000 	.word	0x40240000
 800199c:	757928e1 	.word	0x757928e1
 80019a0:	3fa9018e 	.word	0x3fa9018e

080019a4 <can1_ams_status_1_fan_speed_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

uint8_t can1_ams_status_1_fan_speed_encode(double value)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	f7ff f8eb 	bl	8000b8c <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <can1_ams_status_1_fan_speed_decode>:

double can1_ams_status_1_fan_speed_decode(uint8_t value)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd8a 	bl	80004e8 <__aeabi_ui2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019dc:	eeb0 0a47 	vmov.f32	s0, s14
 80019e0:	eef0 0a67 	vmov.f32	s1, s15
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <can1_dbu_status_1_pack>:

int can1_dbu_status_1_pack(
    uint8_t *dst_p,
    const struct can1_dbu_status_1_t *src_p,
    size_t size)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d802      	bhi.n	8001a02 <can1_dbu_status_1_pack+0x18>
        return (-EINVAL);
 80019fc:	f06f 0315 	mvn.w	r3, #21
 8001a00:	e045      	b.n	8001a8e <can1_dbu_status_1_pack+0xa4>
    }

    memset(&dst_p[0], 0, 8);
 8001a02:	2208      	movs	r2, #8
 8001a04:	2100      	movs	r1, #0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f02c fe22 	bl	802e650 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->activate_ts_button, 0u, 0x01u);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fadb 	bl	8000fd0 <pack_left_shift_u8>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ready_to_drive_button, 1u, 0x02u);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff facc 	bl	8000fd0 <pack_left_shift_u8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]
    dbu_temperature = (uint16_t)src_p->dbu_temperature;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a4e:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(dbu_temperature, 4u, 0xf0u);
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	22f0      	movs	r2, #240	; 0xf0
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fad1 	bl	8000ffe <pack_left_shift_u16>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(dbu_temperature, 4u, 0xffu);
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	2104      	movs	r1, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fada 	bl	800102c <pack_right_shift_u16>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

    return (8);
 8001a8c:	2308      	movs	r3, #8
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d802      	bhi.n	8001aae <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001aa8:	f06f 0315 	mvn.w	r3, #21
 8001aac:	e03b      	b.n	8001b26 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fae7 	bl	800108a <unpack_right_shift_u8>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fadc 	bl	800108a <unpack_right_shift_u8>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fae9 	bl	80010ba <unpack_right_shift_u16>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff faaf 	bl	800105a <unpack_left_shift_u16>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001b06:	8afb      	ldrh	r3, [r7, #22]
 8001b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001b16:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001b1a:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8001b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	805a      	strh	r2, [r3, #2]

    return (0);
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <can1_dbu_status_1_activate_ts_button_encode>:

uint8_t can1_dbu_status_1_activate_ts_button_encode(double value)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f7ff f826 	bl	8000b8c <__aeabi_d2uiz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b2db      	uxtb	r3, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <can1_dbu_status_1_activate_ts_button_decode>:

double can1_dbu_status_1_activate_ts_button_decode(uint8_t value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcc5 	bl	80004e8 <__aeabi_ui2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b66:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6a:	eef0 0a67 	vmov.f32	s1, s15
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <can1_dbu_status_1_ready_to_drive_button_encode>:
{
    return (value <= 1u);
}

uint8_t can1_dbu_status_1_ready_to_drive_button_encode(double value)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b82:	f7ff f803 	bl	8000b8c <__aeabi_d2uiz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <can1_dbu_status_1_ready_to_drive_button_decode>:

double can1_dbu_status_1_ready_to_drive_button_decode(uint8_t value)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fca2 	bl	80004e8 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	0000      	movs	r0, r0
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <can1_dbu_status_1_dbu_temperature_encode>:
{
    return (value <= 1u);
}

int16_t can1_dbu_status_1_dbu_temperature_encode(double value)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <can1_dbu_status_1_dbu_temperature_encode+0x50>)
 8001bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd4:	f7fe fb4c 	bl	8000270 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	a309      	add	r3, pc, #36	; (adr r3, 8001c08 <can1_dbu_status_1_dbu_temperature_encode+0x48>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fe23 	bl	8000830 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ffa3 	bl	8000b3c <__aeabi_d2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b21b      	sxth	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	757928e1 	.word	0x757928e1
 8001c0c:	3fa9018e 	.word	0x3fa9018e
 8001c10:	40240000 	.word	0x40240000
 8001c14:	00000000 	.word	0x00000000

08001c18 <can1_dbu_status_1_dbu_temperature_decode>:

double can1_dbu_status_1_dbu_temperature_decode(int16_t value)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc6e 	bl	8000508 <__aeabi_i2d>
 8001c2c:	a30d      	add	r3, pc, #52	; (adr r3, 8001c64 <can1_dbu_status_1_dbu_temperature_decode+0x4c>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fcd3 	bl	80005dc <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <can1_dbu_status_1_dbu_temperature_decode+0x48>)
 8001c44:	f7fe fb12 	bl	800026c <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c50:	eeb0 0a47 	vmov.f32	s0, s14
 8001c54:	eef0 0a67 	vmov.f32	s1, s15
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40240000 	.word	0x40240000
 8001c64:	757928e1 	.word	0x757928e1
 8001c68:	3fa9018e 	.word	0x3fa9018e

08001c6c <can1_ams_temperatures_pack>:

int can1_ams_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_temperatures_t *src_p,
    size_t size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d802      	bhi.n	8001c84 <can1_ams_temperatures_pack+0x18>
        return (-EINVAL);
 8001c7e:	f06f 0315 	mvn.w	r3, #21
 8001c82:	e093      	b.n	8001dac <can1_ams_temperatures_pack+0x140>
    }

    memset(&dst_p[0], 0, 6);
 8001c84:	2206      	movs	r2, #6
 8001c86:	2100      	movs	r1, #0
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f02c fce1 	bl	802e650 <memset>

    pre_charge_resistor_temperature = (uint16_t)src_p->pre_charge_resistor_temperature;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(pre_charge_resistor_temperature, 0u, 0xffu);
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f9ae 	bl	8000ffe <pack_left_shift_u16>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(pre_charge_resistor_temperature, 8u, 0x0fu);
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f9b7 	bl	800102c <pack_right_shift_u16>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    fuse_resistor_temperature = (uint16_t)src_p->fuse_resistor_temperature;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cd8:	82bb      	strh	r3, [r7, #20]
    dst_p[1] |= pack_left_shift_u16(fuse_resistor_temperature, 4u, 0xf0u);
 8001cda:	8abb      	ldrh	r3, [r7, #20]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f98c 	bl	8000ffe <pack_left_shift_u16>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u16(fuse_resistor_temperature, 4u, 0xffu);
 8001cfa:	8abb      	ldrh	r3, [r7, #20]
 8001cfc:	22ff      	movs	r2, #255	; 0xff
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f993 	bl	800102c <pack_right_shift_u16>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3302      	adds	r3, #2
 8001d14:	430a      	orrs	r2, r1
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aux_1_temperature = (uint16_t)src_p->aux_1_temperature;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d20:	827b      	strh	r3, [r7, #18]
    dst_p[3] |= pack_left_shift_u16(aux_1_temperature, 0u, 0xffu);
 8001d22:	8a7b      	ldrh	r3, [r7, #18]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f968 	bl	8000ffe <pack_left_shift_u16>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3303      	adds	r3, #3
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u16(aux_1_temperature, 8u, 0x0fu);
 8001d42:	8a7b      	ldrh	r3, [r7, #18]
 8001d44:	220f      	movs	r2, #15
 8001d46:	2108      	movs	r1, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f96f 	bl	800102c <pack_right_shift_u16>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3304      	adds	r3, #4
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    aux_2_temperature = (uint16_t)src_p->aux_2_temperature;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d68:	823b      	strh	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u16(aux_2_temperature, 4u, 0xf0u);
 8001d6a:	8a3b      	ldrh	r3, [r7, #16]
 8001d6c:	22f0      	movs	r2, #240	; 0xf0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f944 	bl	8000ffe <pack_left_shift_u16>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3304      	adds	r3, #4
 8001d84:	430a      	orrs	r2, r1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(aux_2_temperature, 4u, 0xffu);
 8001d8a:	8a3b      	ldrh	r3, [r7, #16]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f94b 	bl	800102c <pack_right_shift_u16>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3305      	adds	r3, #5
 8001da4:	430a      	orrs	r2, r1
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    return (6);
 8001daa:	2306      	movs	r3, #6
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <can1_ams_temperatures_unpack>:

int can1_ams_temperatures_unpack(
    struct can1_ams_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d802      	bhi.n	8001dcc <can1_ams_temperatures_unpack+0x18>
        return (-EINVAL);
 8001dc6:	f06f 0315 	mvn.w	r3, #21
 8001dca:	e097      	b.n	8001efc <can1_ams_temperatures_unpack+0x148>
    }

    pre_charge_resistor_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f970 	bl	80010ba <unpack_right_shift_u16>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	823b      	strh	r3, [r7, #16]
    pre_charge_resistor_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	220f      	movs	r2, #15
 8001de6:	2108      	movs	r1, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f936 	bl	800105a <unpack_left_shift_u16>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	8a3b      	ldrh	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	823b      	strh	r3, [r7, #16]

    if ((pre_charge_resistor_temperature & (1u << 11)) != 0u) {
 8001df8:	8a3b      	ldrh	r3, [r7, #16]
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <can1_ams_temperatures_unpack+0x5a>
        pre_charge_resistor_temperature |= 0xf000u;
 8001e02:	8a3b      	ldrh	r3, [r7, #16]
 8001e04:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e08:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e0c:	823b      	strh	r3, [r7, #16]
    }

    dst_p->pre_charge_resistor_temperature = (int16_t)pre_charge_resistor_temperature;
 8001e0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	801a      	strh	r2, [r3, #0]
    fuse_resistor_temperature = unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	22f0      	movs	r2, #240	; 0xf0
 8001e1e:	2104      	movs	r1, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f94a 	bl	80010ba <unpack_right_shift_u16>
 8001e26:	4603      	mov	r3, r0
 8001e28:	827b      	strh	r3, [r7, #18]
    fuse_resistor_temperature |= unpack_left_shift_u16(src_p[2], 4u, 0xffu);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	2104      	movs	r1, #4
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f910 	bl	800105a <unpack_left_shift_u16>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	827b      	strh	r3, [r7, #18]

    if ((fuse_resistor_temperature & (1u << 11)) != 0u) {
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <can1_ams_temperatures_unpack+0xa6>
        fuse_resistor_temperature |= 0xf000u;
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e54:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e58:	827b      	strh	r3, [r7, #18]
    }

    dst_p->fuse_resistor_temperature = (int16_t)fuse_resistor_temperature;
 8001e5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	805a      	strh	r2, [r3, #2]
    aux_1_temperature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3303      	adds	r3, #3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	22ff      	movs	r2, #255	; 0xff
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f924 	bl	80010ba <unpack_right_shift_u16>
 8001e72:	4603      	mov	r3, r0
 8001e74:	82fb      	strh	r3, [r7, #22]
    aux_1_temperature |= unpack_left_shift_u16(src_p[4], 8u, 0x0fu);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f8ea 	bl	800105a <unpack_left_shift_u16>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	82fb      	strh	r3, [r7, #22]

    if ((aux_1_temperature & (1u << 11)) != 0u) {
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <can1_ams_temperatures_unpack+0xf2>
        aux_1_temperature |= 0xf000u;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001ea0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ea4:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->aux_1_temperature = (int16_t)aux_1_temperature;
 8001ea6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	809a      	strh	r2, [r3, #4]
    aux_2_temperature = unpack_right_shift_u16(src_p[4], 4u, 0xf0u);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f8fe 	bl	80010ba <unpack_right_shift_u16>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	82bb      	strh	r3, [r7, #20]
    aux_2_temperature |= unpack_left_shift_u16(src_p[5], 4u, 0xffu);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3305      	adds	r3, #5
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f8c4 	bl	800105a <unpack_left_shift_u16>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	82bb      	strh	r3, [r7, #20]

    if ((aux_2_temperature & (1u << 11)) != 0u) {
 8001edc:	8abb      	ldrh	r3, [r7, #20]
 8001ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <can1_ams_temperatures_unpack+0x13e>
        aux_2_temperature |= 0xf000u;
 8001ee6:	8abb      	ldrh	r3, [r7, #20]
 8001ee8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001eec:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ef0:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->aux_2_temperature = (int16_t)aux_2_temperature;
 8001ef2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	80da      	strh	r2, [r3, #6]

    return (0);
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>:

int16_t can1_ams_temperatures_pre_charge_resistor_temperature_encode(double value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x50>)
 8001f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1c:	f7fe f9a8 	bl	8000270 <__adddf3>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	a309      	add	r3, pc, #36	; (adr r3, 8001f50 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x48>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fc7f 	bl	8000830 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fdff 	bl	8000b3c <__aeabi_d2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b21b      	sxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	757928e1 	.word	0x757928e1
 8001f54:	3fa9018e 	.word	0x3fa9018e
 8001f58:	40240000 	.word	0x40240000
 8001f5c:	00000000 	.word	0x00000000

08001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>:

double can1_ams_temperatures_pre_charge_resistor_temperature_decode(int16_t value)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faca 	bl	8000508 <__aeabi_i2d>
 8001f74:	a30d      	add	r3, pc, #52	; (adr r3, 8001fac <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x4c>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb2f 	bl	80005dc <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x48>)
 8001f8c:	f7fe f96e 	bl	800026c <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f98:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9c:	eef0 0a67 	vmov.f32	s1, s15
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40240000 	.word	0x40240000
 8001fac:	757928e1 	.word	0x757928e1
 8001fb0:	3fa9018e 	.word	0x3fa9018e
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_fuse_resistor_temperature_encode(double value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x50>)
 8001fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fcc:	f7fe f950 	bl	8000270 <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	a309      	add	r3, pc, #36	; (adr r3, 8002000 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x48>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fc27 	bl	8000830 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fda7 	bl	8000b3c <__aeabi_d2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b21b      	sxth	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	757928e1 	.word	0x757928e1
 8002004:	3fa9018e 	.word	0x3fa9018e
 8002008:	40240000 	.word	0x40240000
 800200c:	00000000 	.word	0x00000000

08002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>:

double can1_ams_temperatures_fuse_resistor_temperature_decode(int16_t value)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa72 	bl	8000508 <__aeabi_i2d>
 8002024:	a30d      	add	r3, pc, #52	; (adr r3, 800205c <can1_ams_temperatures_fuse_resistor_temperature_decode+0x4c>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fad7 	bl	80005dc <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <can1_ams_temperatures_fuse_resistor_temperature_decode+0x48>)
 800203c:	f7fe f916 	bl	800026c <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
}
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40240000 	.word	0x40240000
 800205c:	757928e1 	.word	0x757928e1
 8002060:	3fa9018e 	.word	0x3fa9018e
 8002064:	00000000 	.word	0x00000000

08002068 <can1_ams_temperatures_aux_1_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_1_temperature_encode(double value)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <can1_ams_temperatures_aux_1_temperature_encode+0x50>)
 8002078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207c:	f7fe f8f8 	bl	8000270 <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	a309      	add	r3, pc, #36	; (adr r3, 80020b0 <can1_ams_temperatures_aux_1_temperature_encode+0x48>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fbcf 	bl	8000830 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd4f 	bl	8000b3c <__aeabi_d2iz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b21b      	sxth	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	757928e1 	.word	0x757928e1
 80020b4:	3fa9018e 	.word	0x3fa9018e
 80020b8:	40240000 	.word	0x40240000
 80020bc:	00000000 	.word	0x00000000

080020c0 <can1_ams_temperatures_aux_1_temperature_decode>:

double can1_ams_temperatures_aux_1_temperature_decode(int16_t value)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa1a 	bl	8000508 <__aeabi_i2d>
 80020d4:	a30d      	add	r3, pc, #52	; (adr r3, 800210c <can1_ams_temperatures_aux_1_temperature_decode+0x4c>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe fa7f 	bl	80005dc <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <can1_ams_temperatures_aux_1_temperature_decode+0x48>)
 80020ec:	f7fe f8be 	bl	800026c <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40240000 	.word	0x40240000
 800210c:	757928e1 	.word	0x757928e1
 8002110:	3fa9018e 	.word	0x3fa9018e
 8002114:	00000000 	.word	0x00000000

08002118 <can1_ams_temperatures_aux_2_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_2_temperature_encode(double value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <can1_ams_temperatures_aux_2_temperature_encode+0x50>)
 8002128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800212c:	f7fe f8a0 	bl	8000270 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	a309      	add	r3, pc, #36	; (adr r3, 8002160 <can1_ams_temperatures_aux_2_temperature_encode+0x48>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fb77 	bl	8000830 <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fcf7 	bl	8000b3c <__aeabi_d2iz>
 800214e:	4603      	mov	r3, r0
 8002150:	b21b      	sxth	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w
 8002160:	757928e1 	.word	0x757928e1
 8002164:	3fa9018e 	.word	0x3fa9018e
 8002168:	40240000 	.word	0x40240000
 800216c:	00000000 	.word	0x00000000

08002170 <can1_ams_temperatures_aux_2_temperature_decode>:

double can1_ams_temperatures_aux_2_temperature_decode(int16_t value)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9c2 	bl	8000508 <__aeabi_i2d>
 8002184:	a30d      	add	r3, pc, #52	; (adr r3, 80021bc <can1_ams_temperatures_aux_2_temperature_decode+0x4c>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa27 	bl	80005dc <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <can1_ams_temperatures_aux_2_temperature_decode+0x48>)
 800219c:	f7fe f866 	bl	800026c <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ac:	eef0 0a67 	vmov.f32	s1, s15
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40240000 	.word	0x40240000
 80021bc:	757928e1 	.word	0x757928e1
 80021c0:	3fa9018e 	.word	0x3fa9018e

080021c4 <can1_ams_cell_voltages_pack>:

int can1_ams_cell_voltages_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_voltages_t *src_p,
    size_t size)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d803      	bhi.n	80021de <can1_ams_cell_voltages_pack+0x1a>
        return (-EINVAL);
 80021d6:	f06f 0315 	mvn.w	r3, #21
 80021da:	f001 b931 	b.w	8003440 <can1_ams_cell_voltages_pack+0x127c>
    }

    memset(&dst_p[0], 0, 7);
 80021de:	2207      	movs	r2, #7
 80021e0:	2100      	movs	r1, #0
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f02c fa34 	bl	802e650 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->voltage_multiplexor, 0u, 0xffu);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe feed 	bl	8000fd0 <pack_left_shift_u8>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

    switch (src_p->voltage_multiplexor) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b17      	cmp	r3, #23
 800220c:	f201 8116 	bhi.w	800343c <can1_ams_cell_voltages_pack+0x1278>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <can1_ams_cell_voltages_pack+0x54>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002279 	.word	0x08002279
 800221c:	08002351 	.word	0x08002351
 8002220:	08002405 	.word	0x08002405
 8002224:	080024dd 	.word	0x080024dd
 8002228:	0800256d 	.word	0x0800256d
 800222c:	08002645 	.word	0x08002645
 8002230:	080026f9 	.word	0x080026f9
 8002234:	080027d1 	.word	0x080027d1
 8002238:	08002863 	.word	0x08002863
 800223c:	0800293d 	.word	0x0800293d
 8002240:	080029f3 	.word	0x080029f3
 8002244:	08002acd 	.word	0x08002acd
 8002248:	08002b5f 	.word	0x08002b5f
 800224c:	08002c39 	.word	0x08002c39
 8002250:	08002ced 	.word	0x08002ced
 8002254:	08002dc5 	.word	0x08002dc5
 8002258:	08002e55 	.word	0x08002e55
 800225c:	08002f2d 	.word	0x08002f2d
 8002260:	08002fe1 	.word	0x08002fe1
 8002264:	080030b9 	.word	0x080030b9
 8002268:	08003149 	.word	0x08003149
 800226c:	08003221 	.word	0x08003221
 8002270:	080032d5 	.word	0x080032d5
 8002274:	080033ad 	.word	0x080033ad

    case 0:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s1, 0u, 0xffu);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fea5 	bl	8000fd0 <pack_left_shift_u8>
 8002286:	4603      	mov	r3, r0
 8002288:	4619      	mov	r1, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s1, 0u, 0xffu);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	7e5b      	ldrb	r3, [r3, #25]
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe94 	bl	8000fd0 <pack_left_shift_u8>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3302      	adds	r3, #2
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3302      	adds	r3, #2
 80022b6:	430a      	orrs	r2, r1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s1, 0u, 0xffu);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fe82 	bl	8000fd0 <pack_left_shift_u8>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3303      	adds	r3, #3
 80022da:	430a      	orrs	r2, r1
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s1, 0u, 0xffu);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022e6:	22ff      	movs	r2, #255	; 0xff
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fe70 	bl	8000fd0 <pack_left_shift_u8>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3304      	adds	r3, #4
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s1, 0u, 0xffu);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe5e 	bl	8000fd0 <pack_left_shift_u8>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3305      	adds	r3, #5
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3305      	adds	r3, #5
 8002322:	430a      	orrs	r2, r1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s1, 0u, 0xffu);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fe4c 	bl	8000fd0 <pack_left_shift_u8>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3306      	adds	r3, #6
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3306      	adds	r3, #6
 8002346:	430a      	orrs	r2, r1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
        break;
 800234c:	f001 b877 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 1:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s1, 0u, 0xffu);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe39 	bl	8000fd0 <pack_left_shift_u8>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s1, 0u, 0xffu);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	7e9b      	ldrb	r3, [r3, #26]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fe28 	bl	8000fd0 <pack_left_shift_u8>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3302      	adds	r3, #2
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3302      	adds	r3, #2
 800238e:	430a      	orrs	r2, r1
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s1, 0u, 0xffu);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe16 	bl	8000fd0 <pack_left_shift_u8>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3303      	adds	r3, #3
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3303      	adds	r3, #3
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s1, 0u, 0xffu);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe04 	bl	8000fd0 <pack_left_shift_u8>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3304      	adds	r3, #4
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3304      	adds	r3, #4
 80023d6:	430a      	orrs	r2, r1
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s1, 0u, 0xffu);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fdf2 	bl	8000fd0 <pack_left_shift_u8>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3305      	adds	r3, #5
 80023fa:	430a      	orrs	r2, r1
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        break;
 8002400:	f001 b81d 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 2:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s2, 0u, 0xffu);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	78db      	ldrb	r3, [r3, #3]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fddf 	bl	8000fd0 <pack_left_shift_u8>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s2, 0u, 0xffu);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fdce 	bl	8000fd0 <pack_left_shift_u8>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3302      	adds	r3, #2
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3302      	adds	r3, #2
 8002442:	430a      	orrs	r2, r1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s2, 0u, 0xffu);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fdbc 	bl	8000fd0 <pack_left_shift_u8>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3303      	adds	r3, #3
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3303      	adds	r3, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s2, 0u, 0xffu);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fdaa 	bl	8000fd0 <pack_left_shift_u8>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3304      	adds	r3, #4
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s2, 0u, 0xffu);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd98 	bl	8000fd0 <pack_left_shift_u8>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3305      	adds	r3, #5
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3305      	adds	r3, #5
 80024ae:	430a      	orrs	r2, r1
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s2, 0u, 0xffu);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd86 	bl	8000fd0 <pack_left_shift_u8>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3306      	adds	r3, #6
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3306      	adds	r3, #6
 80024d2:	430a      	orrs	r2, r1
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        break;
 80024d8:	f000 bfb1 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 3:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s2, 0u, 0xffu);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd73 	bl	8000fd0 <pack_left_shift_u8>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s2, 0u, 0xffu);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd62 	bl	8000fd0 <pack_left_shift_u8>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3302      	adds	r3, #2
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	430a      	orrs	r2, r1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s2, 0u, 0xffu);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd50 	bl	8000fd0 <pack_left_shift_u8>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3303      	adds	r3, #3
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3303      	adds	r3, #3
 800253e:	430a      	orrs	r2, r1
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s2, 0u, 0xffu);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd3e 	bl	8000fd0 <pack_left_shift_u8>
 8002554:	4603      	mov	r3, r0
 8002556:	4619      	mov	r1, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3304      	adds	r3, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
        break;
 8002568:	f000 bf69 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 4:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s3, 0u, 0xffu);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd2b 	bl	8000fd0 <pack_left_shift_u8>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3301      	adds	r3, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s3, 0u, 0xffu);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	7f5b      	ldrb	r3, [r3, #29]
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd1a 	bl	8000fd0 <pack_left_shift_u8>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3302      	adds	r3, #2
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3302      	adds	r3, #2
 80025aa:	430a      	orrs	r2, r1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s3, 0u, 0xffu);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd08 	bl	8000fd0 <pack_left_shift_u8>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4619      	mov	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3303      	adds	r3, #3
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3303      	adds	r3, #3
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s3, 0u, 0xffu);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fcf6 	bl	8000fd0 <pack_left_shift_u8>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4619      	mov	r1, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3304      	adds	r3, #4
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s3, 0u, 0xffu);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fce4 	bl	8000fd0 <pack_left_shift_u8>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3305      	adds	r3, #5
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3305      	adds	r3, #5
 8002616:	430a      	orrs	r2, r1
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s3, 0u, 0xffu);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fcd2 	bl	8000fd0 <pack_left_shift_u8>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3306      	adds	r3, #6
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3306      	adds	r3, #6
 800263a:	430a      	orrs	r2, r1
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
        break;
 8002640:	f000 befd 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 5:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s3, 0u, 0xffu);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	799b      	ldrb	r3, [r3, #6]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fcbf 	bl	8000fd0 <pack_left_shift_u8>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s3, 0u, 0xffu);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	7f9b      	ldrb	r3, [r3, #30]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fcae 	bl	8000fd0 <pack_left_shift_u8>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3302      	adds	r3, #2
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3302      	adds	r3, #2
 8002682:	430a      	orrs	r2, r1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s3, 0u, 0xffu);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc9c 	bl	8000fd0 <pack_left_shift_u8>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3303      	adds	r3, #3
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3303      	adds	r3, #3
 80026a6:	430a      	orrs	r2, r1
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s3, 0u, 0xffu);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc8a 	bl	8000fd0 <pack_left_shift_u8>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3304      	adds	r3, #4
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s3, 0u, 0xffu);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80026d6:	22ff      	movs	r2, #255	; 0xff
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc78 	bl	8000fd0 <pack_left_shift_u8>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3305      	adds	r3, #5
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3305      	adds	r3, #5
 80026ee:	430a      	orrs	r2, r1
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
        break;
 80026f4:	f000 bea3 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 6:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s4, 0u, 0xffu);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	79db      	ldrb	r3, [r3, #7]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fc65 	bl	8000fd0 <pack_left_shift_u8>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s4, 0u, 0xffu);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	7fdb      	ldrb	r3, [r3, #31]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc54 	bl	8000fd0 <pack_left_shift_u8>
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3302      	adds	r3, #2
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3302      	adds	r3, #2
 8002736:	430a      	orrs	r2, r1
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s4, 0u, 0xffu);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fc42 	bl	8000fd0 <pack_left_shift_u8>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3303      	adds	r3, #3
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3303      	adds	r3, #3
 800275a:	430a      	orrs	r2, r1
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s4, 0u, 0xffu);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8002766:	22ff      	movs	r2, #255	; 0xff
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fc30 	bl	8000fd0 <pack_left_shift_u8>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	430a      	orrs	r2, r1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s4, 0u, 0xffu);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc1e 	bl	8000fd0 <pack_left_shift_u8>
 8002794:	4603      	mov	r3, r0
 8002796:	4619      	mov	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3305      	adds	r3, #5
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3305      	adds	r3, #5
 80027a2:	430a      	orrs	r2, r1
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s4, 0u, 0xffu);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fc0c 	bl	8000fd0 <pack_left_shift_u8>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3306      	adds	r3, #6
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3306      	adds	r3, #6
 80027c6:	430a      	orrs	r2, r1
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
        break;
 80027cc:	f000 be37 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 7:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s4, 0u, 0xffu);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fbf9 	bl	8000fd0 <pack_left_shift_u8>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s4, 0u, 0xffu);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fbe7 	bl	8000fd0 <pack_left_shift_u8>
 8002802:	4603      	mov	r3, r0
 8002804:	4619      	mov	r1, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3302      	adds	r3, #2
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3302      	adds	r3, #2
 8002810:	430a      	orrs	r2, r1
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s4, 0u, 0xffu);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fbd5 	bl	8000fd0 <pack_left_shift_u8>
 8002826:	4603      	mov	r3, r0
 8002828:	4619      	mov	r1, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3303      	adds	r3, #3
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3303      	adds	r3, #3
 8002834:	430a      	orrs	r2, r1
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s4, 0u, 0xffu);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fbc3 	bl	8000fd0 <pack_left_shift_u8>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3304      	adds	r3, #4
 8002858:	430a      	orrs	r2, r1
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
        break;
 800285e:	f000 bdee 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 8:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s5, 0u, 0xffu);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	7a5b      	ldrb	r3, [r3, #9]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fbb0 	bl	8000fd0 <pack_left_shift_u8>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s5, 0u, 0xffu);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fb9e 	bl	8000fd0 <pack_left_shift_u8>
 8002894:	4603      	mov	r3, r0
 8002896:	4619      	mov	r1, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3302      	adds	r3, #2
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3302      	adds	r3, #2
 80028a2:	430a      	orrs	r2, r1
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s5, 0u, 0xffu);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb8c 	bl	8000fd0 <pack_left_shift_u8>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3303      	adds	r3, #3
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3303      	adds	r3, #3
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s5, 0u, 0xffu);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fb7a 	bl	8000fd0 <pack_left_shift_u8>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s5, 0u, 0xffu);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb68 	bl	8000fd0 <pack_left_shift_u8>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3305      	adds	r3, #5
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3305      	adds	r3, #5
 800290e:	430a      	orrs	r2, r1
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s5, 0u, 0xffu);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800291a:	22ff      	movs	r2, #255	; 0xff
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb56 	bl	8000fd0 <pack_left_shift_u8>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3306      	adds	r3, #6
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3306      	adds	r3, #6
 8002932:	430a      	orrs	r2, r1
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
        break;
 8002938:	f000 bd81 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 9:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s5, 0u, 0xffu);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	7a9b      	ldrb	r3, [r3, #10]
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fb43 	bl	8000fd0 <pack_left_shift_u8>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s5, 0u, 0xffu);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fb31 	bl	8000fd0 <pack_left_shift_u8>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3302      	adds	r3, #2
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3302      	adds	r3, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s5, 0u, 0xffu);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb1f 	bl	8000fd0 <pack_left_shift_u8>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3303      	adds	r3, #3
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3303      	adds	r3, #3
 80029a0:	430a      	orrs	r2, r1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s5, 0u, 0xffu);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fb0d 	bl	8000fd0 <pack_left_shift_u8>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3304      	adds	r3, #4
 80029c4:	430a      	orrs	r2, r1
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s5, 0u, 0xffu);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fafb 	bl	8000fd0 <pack_left_shift_u8>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3305      	adds	r3, #5
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3305      	adds	r3, #5
 80029e8:	430a      	orrs	r2, r1
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
        break;
 80029ee:	f000 bd26 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 10:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s6, 0u, 0xffu);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	7adb      	ldrb	r3, [r3, #11]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fae8 	bl	8000fd0 <pack_left_shift_u8>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s6, 0u, 0xffu);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fad6 	bl	8000fd0 <pack_left_shift_u8>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3302      	adds	r3, #2
 8002a32:	430a      	orrs	r2, r1
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s6, 0u, 0xffu);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002a3e:	22ff      	movs	r2, #255	; 0xff
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fac4 	bl	8000fd0 <pack_left_shift_u8>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3303      	adds	r3, #3
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3303      	adds	r3, #3
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s6, 0u, 0xffu);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fab2 	bl	8000fd0 <pack_left_shift_u8>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3304      	adds	r3, #4
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s6, 0u, 0xffu);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002a86:	22ff      	movs	r2, #255	; 0xff
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe faa0 	bl	8000fd0 <pack_left_shift_u8>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3305      	adds	r3, #5
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s6, 0u, 0xffu);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fa8e 	bl	8000fd0 <pack_left_shift_u8>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3306      	adds	r3, #6
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
        break;
 8002ac8:	f000 bcb9 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 11:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s6, 0u, 0xffu);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fa7b 	bl	8000fd0 <pack_left_shift_u8>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s6, 0u, 0xffu);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fa69 	bl	8000fd0 <pack_left_shift_u8>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3302      	adds	r3, #2
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s6, 0u, 0xffu);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fa57 	bl	8000fd0 <pack_left_shift_u8>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	430a      	orrs	r2, r1
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s6, 0u, 0xffu);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fa45 	bl	8000fd0 <pack_left_shift_u8>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3304      	adds	r3, #4
 8002b54:	430a      	orrs	r2, r1
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	f000 bc70 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 12:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s7, 0u, 0xffu);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	7b5b      	ldrb	r3, [r3, #13]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa32 	bl	8000fd0 <pack_left_shift_u8>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s7, 0u, 0xffu);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa20 	bl	8000fd0 <pack_left_shift_u8>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3302      	adds	r3, #2
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s7, 0u, 0xffu);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa0e 	bl	8000fd0 <pack_left_shift_u8>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s7, 0u, 0xffu);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f9fc 	bl	8000fd0 <pack_left_shift_u8>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3304      	adds	r3, #4
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3304      	adds	r3, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s7, 0u, 0xffu);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f9ea 	bl	8000fd0 <pack_left_shift_u8>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3305      	adds	r3, #5
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s7, 0u, 0xffu);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe f9d8 	bl	8000fd0 <pack_left_shift_u8>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4619      	mov	r1, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3306      	adds	r3, #6
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3306      	adds	r3, #6
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
        break;
 8002c34:	f000 bc03 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 13:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s7, 0u, 0xffu);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	7b9b      	ldrb	r3, [r3, #14]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f9c5 	bl	8000fd0 <pack_left_shift_u8>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s7, 0u, 0xffu);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe f9b3 	bl	8000fd0 <pack_left_shift_u8>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3302      	adds	r3, #2
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3302      	adds	r3, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s7, 0u, 0xffu);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f9a1 	bl	8000fd0 <pack_left_shift_u8>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4619      	mov	r1, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3303      	adds	r3, #3
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3303      	adds	r3, #3
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s7, 0u, 0xffu);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f98f 	bl	8000fd0 <pack_left_shift_u8>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s7, 0u, 0xffu);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f97d 	bl	8000fd0 <pack_left_shift_u8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3305      	adds	r3, #5
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3305      	adds	r3, #5
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
        break;
 8002cea:	e3a8      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 14:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s8, 0u, 0xffu);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	7bdb      	ldrb	r3, [r3, #15]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f96b 	bl	8000fd0 <pack_left_shift_u8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s8, 0u, 0xffu);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f959 	bl	8000fd0 <pack_left_shift_u8>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3302      	adds	r3, #2
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s8, 0u, 0xffu);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f947 	bl	8000fd0 <pack_left_shift_u8>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	430a      	orrs	r2, r1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s8, 0u, 0xffu);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f935 	bl	8000fd0 <pack_left_shift_u8>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3304      	adds	r3, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s8, 0u, 0xffu);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f923 	bl	8000fd0 <pack_left_shift_u8>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3305      	adds	r3, #5
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3305      	adds	r3, #5
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s8, 0u, 0xffu);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f911 	bl	8000fd0 <pack_left_shift_u8>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3306      	adds	r3, #6
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3306      	adds	r3, #6
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
        break;
 8002dc2:	e33c      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 15:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s8, 0u, 0xffu);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	7c1b      	ldrb	r3, [r3, #16]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8ff 	bl	8000fd0 <pack_left_shift_u8>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s8, 0u, 0xffu);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f8ed 	bl	8000fd0 <pack_left_shift_u8>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3302      	adds	r3, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s8, 0u, 0xffu);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8db 	bl	8000fd0 <pack_left_shift_u8>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3303      	adds	r3, #3
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3303      	adds	r3, #3
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s8, 0u, 0xffu);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f8c9 	bl	8000fd0 <pack_left_shift_u8>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3304      	adds	r3, #4
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        break;
 8002e52:	e2f4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 16:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s9, 0u, 0xffu);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	7c5b      	ldrb	r3, [r3, #17]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f8b7 	bl	8000fd0 <pack_left_shift_u8>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s9, 0u, 0xffu);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f8a5 	bl	8000fd0 <pack_left_shift_u8>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3302      	adds	r3, #2
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s9, 0u, 0xffu);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f893 	bl	8000fd0 <pack_left_shift_u8>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s9, 0u, 0xffu);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f881 	bl	8000fd0 <pack_left_shift_u8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3304      	adds	r3, #4
 8002edc:	430a      	orrs	r2, r1
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s9, 0u, 0xffu);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f86f 	bl	8000fd0 <pack_left_shift_u8>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3305      	adds	r3, #5
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3305      	adds	r3, #5
 8002f00:	430a      	orrs	r2, r1
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s9, 0u, 0xffu);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f85d 	bl	8000fd0 <pack_left_shift_u8>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3306      	adds	r3, #6
 8002f24:	430a      	orrs	r2, r1
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
        break;
 8002f2a:	e288      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 17:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s9, 0u, 0xffu);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	7c9b      	ldrb	r3, [r3, #18]
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f84b 	bl	8000fd0 <pack_left_shift_u8>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s9, 0u, 0xffu);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f839 	bl	8000fd0 <pack_left_shift_u8>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3302      	adds	r3, #2
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s9, 0u, 0xffu);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f827 	bl	8000fd0 <pack_left_shift_u8>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4619      	mov	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3303      	adds	r3, #3
 8002f90:	430a      	orrs	r2, r1
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s9, 0u, 0xffu);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f815 	bl	8000fd0 <pack_left_shift_u8>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3304      	adds	r3, #4
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s9, 0u, 0xffu);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f803 	bl	8000fd0 <pack_left_shift_u8>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3305      	adds	r3, #5
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e22e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 18:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s10, 0u, 0xffu);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	7cdb      	ldrb	r3, [r3, #19]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fff1 	bl	8000fd0 <pack_left_shift_u8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s10, 0u, 0xffu);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ffdf 	bl	8000fd0 <pack_left_shift_u8>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3302      	adds	r3, #2
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3302      	adds	r3, #2
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s10, 0u, 0xffu);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd ffcd 	bl	8000fd0 <pack_left_shift_u8>
 8003036:	4603      	mov	r3, r0
 8003038:	4619      	mov	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3303      	adds	r3, #3
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3303      	adds	r3, #3
 8003044:	430a      	orrs	r2, r1
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s10, 0u, 0xffu);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd ffbb 	bl	8000fd0 <pack_left_shift_u8>
 800305a:	4603      	mov	r3, r0
 800305c:	4619      	mov	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	430a      	orrs	r2, r1
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s10, 0u, 0xffu);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd ffa9 	bl	8000fd0 <pack_left_shift_u8>
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3305      	adds	r3, #5
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3305      	adds	r3, #5
 800308c:	430a      	orrs	r2, r1
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s10, 0u, 0xffu);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd ff97 	bl	8000fd0 <pack_left_shift_u8>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3306      	adds	r3, #6
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3306      	adds	r3, #6
 80030b0:	430a      	orrs	r2, r1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e1c2      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 19:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s10, 0u, 0xffu);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	7d1b      	ldrb	r3, [r3, #20]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd ff85 	bl	8000fd0 <pack_left_shift_u8>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s10, 0u, 0xffu);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd ff73 	bl	8000fd0 <pack_left_shift_u8>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3302      	adds	r3, #2
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3302      	adds	r3, #2
 80030f8:	430a      	orrs	r2, r1
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s10, 0u, 0xffu);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd ff61 	bl	8000fd0 <pack_left_shift_u8>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3303      	adds	r3, #3
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3303      	adds	r3, #3
 800311c:	430a      	orrs	r2, r1
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s10, 0u, 0xffu);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd ff4f 	bl	8000fd0 <pack_left_shift_u8>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	430a      	orrs	r2, r1
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
        break;
 8003146:	e17a      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 20:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s11, 0u, 0xffu);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	7d5b      	ldrb	r3, [r3, #21]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s11, 0u, 0xffu);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd ff2b 	bl	8000fd0 <pack_left_shift_u8>
 800317a:	4603      	mov	r3, r0
 800317c:	4619      	mov	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3302      	adds	r3, #2
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3302      	adds	r3, #2
 8003188:	430a      	orrs	r2, r1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s11, 0u, 0xffu);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd ff19 	bl	8000fd0 <pack_left_shift_u8>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3303      	adds	r3, #3
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3303      	adds	r3, #3
 80031ac:	430a      	orrs	r2, r1
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s11, 0u, 0xffu);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff07 	bl	8000fd0 <pack_left_shift_u8>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s11, 0u, 0xffu);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fef5 	bl	8000fd0 <pack_left_shift_u8>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3305      	adds	r3, #5
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3305      	adds	r3, #5
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s11, 0u, 0xffu);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fee3 	bl	8000fd0 <pack_left_shift_u8>
 800320a:	4603      	mov	r3, r0
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3306      	adds	r3, #6
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3306      	adds	r3, #6
 8003218:	430a      	orrs	r2, r1
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
        break;
 800321e:	e10e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 21:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s11, 0u, 0xffu);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	7d9b      	ldrb	r3, [r3, #22]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fed1 	bl	8000fd0 <pack_left_shift_u8>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3301      	adds	r3, #1
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s11, 0u, 0xffu);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd febf 	bl	8000fd0 <pack_left_shift_u8>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3302      	adds	r3, #2
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3302      	adds	r3, #2
 8003260:	430a      	orrs	r2, r1
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s11, 0u, 0xffu);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fead 	bl	8000fd0 <pack_left_shift_u8>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3303      	adds	r3, #3
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3303      	adds	r3, #3
 8003284:	430a      	orrs	r2, r1
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s11, 0u, 0xffu);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fe9b 	bl	8000fd0 <pack_left_shift_u8>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3304      	adds	r3, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s11, 0u, 0xffu);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fe89 	bl	8000fd0 <pack_left_shift_u8>
 80032be:	4603      	mov	r3, r0
 80032c0:	4619      	mov	r1, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3305      	adds	r3, #5
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3305      	adds	r3, #5
 80032cc:	430a      	orrs	r2, r1
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	e0b4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 22:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s12, 0u, 0xffu);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	7ddb      	ldrb	r3, [r3, #23]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fe77 	bl	8000fd0 <pack_left_shift_u8>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s12, 0u, 0xffu);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fe65 	bl	8000fd0 <pack_left_shift_u8>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3302      	adds	r3, #2
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3302      	adds	r3, #2
 8003314:	430a      	orrs	r2, r1
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s12, 0u, 0xffu);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fe53 	bl	8000fd0 <pack_left_shift_u8>
 800332a:	4603      	mov	r3, r0
 800332c:	4619      	mov	r1, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3303      	adds	r3, #3
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3303      	adds	r3, #3
 8003338:	430a      	orrs	r2, r1
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s12, 0u, 0xffu);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fe41 	bl	8000fd0 <pack_left_shift_u8>
 800334e:	4603      	mov	r3, r0
 8003350:	4619      	mov	r1, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3304      	adds	r3, #4
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3304      	adds	r3, #4
 800335c:	430a      	orrs	r2, r1
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s12, 0u, 0xffu);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fe2f 	bl	8000fd0 <pack_left_shift_u8>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3305      	adds	r3, #5
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3305      	adds	r3, #5
 8003380:	430a      	orrs	r2, r1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s12, 0u, 0xffu);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fe1d 	bl	8000fd0 <pack_left_shift_u8>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3306      	adds	r3, #6
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3306      	adds	r3, #6
 80033a4:	430a      	orrs	r2, r1
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	e048      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 23:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s12, 0u, 0xffu);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd fe0b 	bl	8000fd0 <pack_left_shift_u8>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4619      	mov	r1, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s12, 0u, 0xffu);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fdf9 	bl	8000fd0 <pack_left_shift_u8>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3302      	adds	r3, #2
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s12, 0u, 0xffu);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fde7 	bl	8000fd0 <pack_left_shift_u8>
 8003402:	4603      	mov	r3, r0
 8003404:	4619      	mov	r1, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3303      	adds	r3, #3
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3303      	adds	r3, #3
 8003410:	430a      	orrs	r2, r1
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s12, 0u, 0xffu);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fdd5 	bl	8000fd0 <pack_left_shift_u8>
 8003426:	4603      	mov	r3, r0
 8003428:	4619      	mov	r1, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e000      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    default:
        break;
 800343c:	bf00      	nop
    }

    return (7);
 800343e:	2307      	movs	r3, #7
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <can1_ams_cell_voltages_unpack>:

int can1_ams_cell_voltages_unpack(
    struct can1_ams_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d803      	bhi.n	8003462 <can1_ams_cell_voltages_unpack+0x1a>
        return (-EINVAL);
 800345a:	f06f 0315 	mvn.w	r3, #21
 800345e:	f000 beac 	b.w	80041ba <can1_ams_cell_voltages_unpack+0xd72>
    }

    dst_p->voltage_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fe0d 	bl	800108a <unpack_right_shift_u8>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

    switch (dst_p->voltage_multiplexor) {
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b17      	cmp	r3, #23
 800347e:	f200 869a 	bhi.w	80041b6 <can1_ams_cell_voltages_unpack+0xd6e>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <can1_ams_cell_voltages_unpack+0x40>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034e9 	.word	0x080034e9
 800348c:	08003585 	.word	0x08003585
 8003490:	08003607 	.word	0x08003607
 8003494:	080036a3 	.word	0x080036a3
 8003498:	0800370b 	.word	0x0800370b
 800349c:	080037a7 	.word	0x080037a7
 80034a0:	08003829 	.word	0x08003829
 80034a4:	080038c5 	.word	0x080038c5
 80034a8:	0800392f 	.word	0x0800392f
 80034ac:	080039cb 	.word	0x080039cb
 80034b0:	08003a4d 	.word	0x08003a4d
 80034b4:	08003ae9 	.word	0x08003ae9
 80034b8:	08003b51 	.word	0x08003b51
 80034bc:	08003bed 	.word	0x08003bed
 80034c0:	08003c6f 	.word	0x08003c6f
 80034c4:	08003d0b 	.word	0x08003d0b
 80034c8:	08003d73 	.word	0x08003d73
 80034cc:	08003e0f 	.word	0x08003e0f
 80034d0:	08003e91 	.word	0x08003e91
 80034d4:	08003f2d 	.word	0x08003f2d
 80034d8:	08003f95 	.word	0x08003f95
 80034dc:	08004031 	.word	0x08004031
 80034e0:	080040b3 	.word	0x080040b3
 80034e4:	0800414f 	.word	0x0800414f

    case 0:
        dst_p->v1s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fdc9 	bl	800108a <unpack_right_shift_u8>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	705a      	strb	r2, [r3, #1]
        dst_p->v2s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3302      	adds	r3, #2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fdbd 	bl	800108a <unpack_right_shift_u8>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	765a      	strb	r2, [r3, #25]
        dst_p->v3s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3303      	adds	r3, #3
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fdb1 	bl	800108a <unpack_right_shift_u8>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        dst_p->v4s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fda4 	bl	800108a <unpack_right_shift_u8>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        dst_p->v5s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3305      	adds	r3, #5
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fd97 	bl	800108a <unpack_right_shift_u8>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        dst_p->v6s1 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3306      	adds	r3, #6
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	22ff      	movs	r2, #255	; 0xff
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fd8a 	bl	800108a <unpack_right_shift_u8>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        break;
 8003580:	f000 be1a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 1:
        dst_p->v7s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fd7b 	bl	800108a <unpack_right_shift_u8>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	709a      	strb	r2, [r3, #2]
        dst_p->v8s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3302      	adds	r3, #2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fd6f 	bl	800108a <unpack_right_shift_u8>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	769a      	strb	r2, [r3, #26]
        dst_p->v9s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	3303      	adds	r3, #3
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fd63 	bl	800108a <unpack_right_shift_u8>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        dst_p->v10s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3304      	adds	r3, #4
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fd56 	bl	800108a <unpack_right_shift_u8>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        dst_p->v11s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3305      	adds	r3, #5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	22ff      	movs	r2, #255	; 0xff
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fd49 	bl	800108a <unpack_right_shift_u8>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8003602:	f000 bdd9 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 2:
        dst_p->v1s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fd3a 	bl	800108a <unpack_right_shift_u8>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	70da      	strb	r2, [r3, #3]
        dst_p->v2s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3302      	adds	r3, #2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd2e 	bl	800108a <unpack_right_shift_u8>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	76da      	strb	r2, [r3, #27]
        dst_p->v3s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3303      	adds	r3, #3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fd22 	bl	800108a <unpack_right_shift_u8>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        dst_p->v4s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3304      	adds	r3, #4
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fd15 	bl	800108a <unpack_right_shift_u8>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        dst_p->v5s2 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3305      	adds	r3, #5
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd08 	bl	800108a <unpack_right_shift_u8>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        dst_p->v6s2 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3306      	adds	r3, #6
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	22ff      	movs	r2, #255	; 0xff
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fcfb 	bl	800108a <unpack_right_shift_u8>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        break;
 800369e:	f000 bd8b 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 3:
        dst_p->v7s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3301      	adds	r3, #1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fcec 	bl	800108a <unpack_right_shift_u8>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	711a      	strb	r2, [r3, #4]
        dst_p->v8s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3302      	adds	r3, #2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fce0 	bl	800108a <unpack_right_shift_u8>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	771a      	strb	r2, [r3, #28]
        dst_p->v9s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3303      	adds	r3, #3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fcd4 	bl	800108a <unpack_right_shift_u8>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        dst_p->v10s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3304      	adds	r3, #4
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fcc7 	bl	800108a <unpack_right_shift_u8>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8003706:	f000 bd57 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 4:
        dst_p->v1s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fcb8 	bl	800108a <unpack_right_shift_u8>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	715a      	strb	r2, [r3, #5]
        dst_p->v2s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fcac 	bl	800108a <unpack_right_shift_u8>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	775a      	strb	r2, [r3, #29]
        dst_p->v3s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3303      	adds	r3, #3
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fca0 	bl	800108a <unpack_right_shift_u8>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dst_p->v4s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fc93 	bl	800108a <unpack_right_shift_u8>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        dst_p->v5s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3305      	adds	r3, #5
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fc86 	bl	800108a <unpack_right_shift_u8>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        dst_p->v6s3 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3306      	adds	r3, #6
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fc79 	bl	800108a <unpack_right_shift_u8>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        break;
 80037a2:	f000 bd09 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 5:
        dst_p->v7s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fc6a 	bl	800108a <unpack_right_shift_u8>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	719a      	strb	r2, [r3, #6]
        dst_p->v8s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3302      	adds	r3, #2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fc5e 	bl	800108a <unpack_right_shift_u8>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	779a      	strb	r2, [r3, #30]
        dst_p->v9s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3303      	adds	r3, #3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc52 	bl	800108a <unpack_right_shift_u8>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        dst_p->v10s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3304      	adds	r3, #4
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fc45 	bl	800108a <unpack_right_shift_u8>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        dst_p->v11s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3305      	adds	r3, #5
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fc38 	bl	800108a <unpack_right_shift_u8>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        break;
 8003824:	f000 bcc8 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 6:
        dst_p->v1s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fc29 	bl	800108a <unpack_right_shift_u8>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	71da      	strb	r2, [r3, #7]
        dst_p->v2s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3302      	adds	r3, #2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fc1d 	bl	800108a <unpack_right_shift_u8>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	77da      	strb	r2, [r3, #31]
        dst_p->v3s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3303      	adds	r3, #3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc11 	bl	800108a <unpack_right_shift_u8>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
        dst_p->v4s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3304      	adds	r3, #4
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fc04 	bl	800108a <unpack_right_shift_u8>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        dst_p->v5s4 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3305      	adds	r3, #5
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fbf7 	bl	800108a <unpack_right_shift_u8>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        dst_p->v6s4 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3306      	adds	r3, #6
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fbea 	bl	800108a <unpack_right_shift_u8>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        break;
 80038c0:	f000 bc7a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 7:
        dst_p->v7s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fbdb 	bl	800108a <unpack_right_shift_u8>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	721a      	strb	r2, [r3, #8]
        dst_p->v8s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3302      	adds	r3, #2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	22ff      	movs	r2, #255	; 0xff
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fbcf 	bl	800108a <unpack_right_shift_u8>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]
        dst_p->v9s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3303      	adds	r3, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fbc2 	bl	800108a <unpack_right_shift_u8>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dst_p->v10s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3304      	adds	r3, #4
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fbb5 	bl	800108a <unpack_right_shift_u8>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 800392a:	f000 bc45 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 8:
        dst_p->v1s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fba6 	bl	800108a <unpack_right_shift_u8>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	725a      	strb	r2, [r3, #9]
        dst_p->v2s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3302      	adds	r3, #2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fb9a 	bl	800108a <unpack_right_shift_u8>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        dst_p->v3s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3303      	adds	r3, #3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fb8d 	bl	800108a <unpack_right_shift_u8>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        dst_p->v4s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3304      	adds	r3, #4
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fb80 	bl	800108a <unpack_right_shift_u8>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        dst_p->v5s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3305      	adds	r3, #5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fb73 	bl	800108a <unpack_right_shift_u8>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        dst_p->v6s5 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3306      	adds	r3, #6
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fb66 	bl	800108a <unpack_right_shift_u8>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        break;
 80039c8:	e3f6      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 9:
        dst_p->v7s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fb58 	bl	800108a <unpack_right_shift_u8>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	729a      	strb	r2, [r3, #10]
        dst_p->v8s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3302      	adds	r3, #2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fb4c 	bl	800108a <unpack_right_shift_u8>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        dst_p->v9s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3303      	adds	r3, #3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fb3f 	bl	800108a <unpack_right_shift_u8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        dst_p->v10s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fb32 	bl	800108a <unpack_right_shift_u8>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        dst_p->v11s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3305      	adds	r3, #5
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fb25 	bl	800108a <unpack_right_shift_u8>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        break;
 8003a4a:	e3b5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 10:
        dst_p->v1s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fb17 	bl	800108a <unpack_right_shift_u8>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	72da      	strb	r2, [r3, #11]
        dst_p->v2s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3302      	adds	r3, #2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fb0b 	bl	800108a <unpack_right_shift_u8>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        dst_p->v3s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3303      	adds	r3, #3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fafe 	bl	800108a <unpack_right_shift_u8>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        dst_p->v4s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd faf1 	bl	800108a <unpack_right_shift_u8>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
        dst_p->v5s6 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3305      	adds	r3, #5
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fae4 	bl	800108a <unpack_right_shift_u8>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        dst_p->v6s6 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3306      	adds	r3, #6
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fad7 	bl	800108a <unpack_right_shift_u8>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        break;
 8003ae6:	e367      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 11:
        dst_p->v7s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fac9 	bl	800108a <unpack_right_shift_u8>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	731a      	strb	r2, [r3, #12]
        dst_p->v8s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3302      	adds	r3, #2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fabd 	bl	800108a <unpack_right_shift_u8>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        dst_p->v9s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fab0 	bl	800108a <unpack_right_shift_u8>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dst_p->v10s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3304      	adds	r3, #4
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd faa3 	bl	800108a <unpack_right_shift_u8>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8003b4e:	e333      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 12:
        dst_p->v1s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3301      	adds	r3, #1
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fa95 	bl	800108a <unpack_right_shift_u8>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	735a      	strb	r2, [r3, #13]
        dst_p->v2s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fa89 	bl	800108a <unpack_right_shift_u8>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        dst_p->v3s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3303      	adds	r3, #3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fa7c 	bl	800108a <unpack_right_shift_u8>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dst_p->v4s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	22ff      	movs	r2, #255	; 0xff
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fa6f 	bl	800108a <unpack_right_shift_u8>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        dst_p->v5s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3305      	adds	r3, #5
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fa62 	bl	800108a <unpack_right_shift_u8>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        dst_p->v6s7 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fa55 	bl	800108a <unpack_right_shift_u8>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        break;
 8003bea:	e2e5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 13:
        dst_p->v7s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fa47 	bl	800108a <unpack_right_shift_u8>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	739a      	strb	r2, [r3, #14]
        dst_p->v8s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3302      	adds	r3, #2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fa3b 	bl	800108a <unpack_right_shift_u8>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        dst_p->v9s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3303      	adds	r3, #3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fa2e 	bl	800108a <unpack_right_shift_u8>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        dst_p->v10s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fa21 	bl	800108a <unpack_right_shift_u8>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        dst_p->v11s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3305      	adds	r3, #5
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fa14 	bl	800108a <unpack_right_shift_u8>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        break;
 8003c6c:	e2a4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 14:
        dst_p->v1s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa06 	bl	800108a <unpack_right_shift_u8>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	73da      	strb	r2, [r3, #15]
        dst_p->v2s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f9fa 	bl	800108a <unpack_right_shift_u8>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        dst_p->v3s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f9ed 	bl	800108a <unpack_right_shift_u8>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        dst_p->v4s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd f9e0 	bl	800108a <unpack_right_shift_u8>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        dst_p->v5s8 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd f9d3 	bl	800108a <unpack_right_shift_u8>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        dst_p->v6s8 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd f9c6 	bl	800108a <unpack_right_shift_u8>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        break;
 8003d08:	e256      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 15:
        dst_p->v7s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f9b8 	bl	800108a <unpack_right_shift_u8>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	741a      	strb	r2, [r3, #16]
        dst_p->v8s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3302      	adds	r3, #2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f9ac 	bl	800108a <unpack_right_shift_u8>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dst_p->v9s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	22ff      	movs	r2, #255	; 0xff
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f99f 	bl	800108a <unpack_right_shift_u8>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        dst_p->v10s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	22ff      	movs	r2, #255	; 0xff
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f992 	bl	800108a <unpack_right_shift_u8>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        break;
 8003d70:	e222      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 16:
        dst_p->v1s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd f984 	bl	800108a <unpack_right_shift_u8>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	745a      	strb	r2, [r3, #17]
        dst_p->v2s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd f978 	bl	800108a <unpack_right_shift_u8>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        dst_p->v3s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3303      	adds	r3, #3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f96b 	bl	800108a <unpack_right_shift_u8>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        dst_p->v4s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f95e 	bl	800108a <unpack_right_shift_u8>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        dst_p->v5s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3305      	adds	r3, #5
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f951 	bl	800108a <unpack_right_shift_u8>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        dst_p->v6s9 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3306      	adds	r3, #6
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd f944 	bl	800108a <unpack_right_shift_u8>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        break;
 8003e0c:	e1d4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 17:
        dst_p->v7s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f936 	bl	800108a <unpack_right_shift_u8>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	749a      	strb	r2, [r3, #18]
        dst_p->v8s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd f92a 	bl	800108a <unpack_right_shift_u8>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        dst_p->v9s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3303      	adds	r3, #3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f91d 	bl	800108a <unpack_right_shift_u8>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        dst_p->v10s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f910 	bl	800108a <unpack_right_shift_u8>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        dst_p->v11s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3305      	adds	r3, #5
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd f903 	bl	800108a <unpack_right_shift_u8>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        break;
 8003e8e:	e193      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 18:
        dst_p->v1s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3301      	adds	r3, #1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd f8f5 	bl	800108a <unpack_right_shift_u8>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	74da      	strb	r2, [r3, #19]
        dst_p->v2s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	22ff      	movs	r2, #255	; 0xff
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd f8e9 	bl	800108a <unpack_right_shift_u8>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        dst_p->v3s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd f8dc 	bl	800108a <unpack_right_shift_u8>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        dst_p->v4s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd f8cf 	bl	800108a <unpack_right_shift_u8>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        dst_p->v5s10 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3305      	adds	r3, #5
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd f8c2 	bl	800108a <unpack_right_shift_u8>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        dst_p->v6s10 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3306      	adds	r3, #6
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f8b5 	bl	800108a <unpack_right_shift_u8>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8003f2a:	e145      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 19:
        dst_p->v7s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd f8a7 	bl	800108a <unpack_right_shift_u8>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	751a      	strb	r2, [r3, #20]
        dst_p->v8s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3302      	adds	r3, #2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f89b 	bl	800108a <unpack_right_shift_u8>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        dst_p->v9s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3303      	adds	r3, #3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd f88e 	bl	800108a <unpack_right_shift_u8>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        dst_p->v10s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd f881 	bl	800108a <unpack_right_shift_u8>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        break;
 8003f92:	e111      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 20:
        dst_p->v1s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3301      	adds	r3, #1
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f873 	bl	800108a <unpack_right_shift_u8>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	755a      	strb	r2, [r3, #21]
        dst_p->v2s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f867 	bl	800108a <unpack_right_shift_u8>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        dst_p->v3s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3303      	adds	r3, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f85a 	bl	800108a <unpack_right_shift_u8>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        dst_p->v4s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f84d 	bl	800108a <unpack_right_shift_u8>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        dst_p->v5s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3305      	adds	r3, #5
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd f840 	bl	800108a <unpack_right_shift_u8>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        dst_p->v6s11 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3306      	adds	r3, #6
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd f833 	bl	800108a <unpack_right_shift_u8>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        break;
 800402e:	e0c3      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 21:
        dst_p->v7s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd f825 	bl	800108a <unpack_right_shift_u8>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	759a      	strb	r2, [r3, #22]
        dst_p->v8s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f819 	bl	800108a <unpack_right_shift_u8>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dst_p->v9s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3303      	adds	r3, #3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f80c 	bl	800108a <unpack_right_shift_u8>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        dst_p->v10s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3304      	adds	r3, #4
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	22ff      	movs	r2, #255	; 0xff
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc ffff 	bl	800108a <unpack_right_shift_u8>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        dst_p->v11s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3305      	adds	r3, #5
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fff2 	bl	800108a <unpack_right_shift_u8>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        break;
 80040b0:	e082      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 22:
        dst_p->v1s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc ffe4 	bl	800108a <unpack_right_shift_u8>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	75da      	strb	r2, [r3, #23]
        dst_p->v2s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3302      	adds	r3, #2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc ffd8 	bl	800108a <unpack_right_shift_u8>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dst_p->v3s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3303      	adds	r3, #3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc ffcb 	bl	800108a <unpack_right_shift_u8>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        dst_p->v4s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc ffbe 	bl	800108a <unpack_right_shift_u8>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        dst_p->v5s12 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3305      	adds	r3, #5
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ffb1 	bl	800108a <unpack_right_shift_u8>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        dst_p->v6s12 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3306      	adds	r3, #6
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc ffa4 	bl	800108a <unpack_right_shift_u8>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        break;
 800414c:	e034      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 23:
        dst_p->v7s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3301      	adds	r3, #1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc ff96 	bl	800108a <unpack_right_shift_u8>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	761a      	strb	r2, [r3, #24]
        dst_p->v8s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3302      	adds	r3, #2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc ff8a 	bl	800108a <unpack_right_shift_u8>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        dst_p->v9s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3303      	adds	r3, #3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc ff7d 	bl	800108a <unpack_right_shift_u8>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        dst_p->v10s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3304      	adds	r3, #4
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc ff70 	bl	800108a <unpack_right_shift_u8>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        break;
 80041b4:	e000      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    default:
        break;
 80041b6:	bf00      	nop
    }

    return (0);
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>:

uint8_t can1_ams_cell_voltages_voltage_multiplexor_encode(double value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80041ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041d2:	f7fc fcdb 	bl	8000b8c <__aeabi_d2uiz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	b2db      	uxtb	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	0000      	movs	r0, r0
 80041e4:	0000      	movs	r0, r0
	...

080041e8 <can1_ams_cell_voltages_v1s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s1_encode(double value)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <can1_ams_cell_voltages_v1s1_encode+0x50>)
 80041f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041fc:	f7fc f836 	bl	800026c <__aeabi_dsub>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	a309      	add	r3, pc, #36	; (adr r3, 8004230 <can1_ams_cell_voltages_v1s1_encode+0x48>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fb0f 	bl	8000830 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fc fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800421e:	4603      	mov	r3, r0
 8004220:	b2db      	uxtb	r3, r3
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w
 8004230:	fcce1c58 	.word	0xfcce1c58
 8004234:	3f800e6a 	.word	0x3f800e6a
 8004238:	40040000 	.word	0x40040000
 800423c:	00000000 	.word	0x00000000

08004240 <can1_ams_cell_voltages_v1s1_decode>:

double can1_ams_cell_voltages_v1s1_decode(uint8_t value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f94b 	bl	80004e8 <__aeabi_ui2d>
 8004252:	a30e      	add	r3, pc, #56	; (adr r3, 800428c <can1_ams_cell_voltages_v1s1_decode+0x4c>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fc f9c0 	bl	80005dc <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <can1_ams_cell_voltages_v1s1_decode+0x48>)
 800426a:	f7fc f801 	bl	8000270 <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	ec43 2b17 	vmov	d7, r2, r3
}
 8004276:	eeb0 0a47 	vmov.f32	s0, s14
 800427a:	eef0 0a67 	vmov.f32	s1, s15
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	f3af 8000 	nop.w
 8004288:	40040000 	.word	0x40040000
 800428c:	fcce1c58 	.word	0xfcce1c58
 8004290:	3f800e6a 	.word	0x3f800e6a
 8004294:	00000000 	.word	0x00000000

08004298 <can1_ams_cell_voltages_v7s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s1_encode(double value)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <can1_ams_cell_voltages_v7s1_encode+0x50>)
 80042a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ac:	f7fb ffde 	bl	800026c <__aeabi_dsub>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	a309      	add	r3, pc, #36	; (adr r3, 80042e0 <can1_ams_cell_voltages_v7s1_encode+0x48>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc fab7 	bl	8000830 <__aeabi_ddiv>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc fc5f 	bl	8000b8c <__aeabi_d2uiz>
 80042ce:	4603      	mov	r3, r0
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	fcce1c58 	.word	0xfcce1c58
 80042e4:	3f800e6a 	.word	0x3f800e6a
 80042e8:	40040000 	.word	0x40040000
 80042ec:	00000000 	.word	0x00000000

080042f0 <can1_ams_cell_voltages_v7s1_decode>:

double can1_ams_cell_voltages_v7s1_decode(uint8_t value)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f8f3 	bl	80004e8 <__aeabi_ui2d>
 8004302:	a30e      	add	r3, pc, #56	; (adr r3, 800433c <can1_ams_cell_voltages_v7s1_decode+0x4c>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fc f968 	bl	80005dc <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <can1_ams_cell_voltages_v7s1_decode+0x48>)
 800431a:	f7fb ffa9 	bl	8000270 <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ec43 2b17 	vmov	d7, r2, r3
}
 8004326:	eeb0 0a47 	vmov.f32	s0, s14
 800432a:	eef0 0a67 	vmov.f32	s1, s15
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f3af 8000 	nop.w
 8004338:	40040000 	.word	0x40040000
 800433c:	fcce1c58 	.word	0xfcce1c58
 8004340:	3f800e6a 	.word	0x3f800e6a
 8004344:	00000000 	.word	0x00000000

08004348 <can1_ams_cell_voltages_v1s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s2_encode(double value)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <can1_ams_cell_voltages_v1s2_encode+0x50>)
 8004358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435c:	f7fb ff86 	bl	800026c <__aeabi_dsub>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	a309      	add	r3, pc, #36	; (adr r3, 8004390 <can1_ams_cell_voltages_v1s2_encode+0x48>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc fa5f 	bl	8000830 <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fc07 	bl	8000b8c <__aeabi_d2uiz>
 800437e:	4603      	mov	r3, r0
 8004380:	b2db      	uxtb	r3, r3
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	fcce1c58 	.word	0xfcce1c58
 8004394:	3f800e6a 	.word	0x3f800e6a
 8004398:	40040000 	.word	0x40040000
 800439c:	00000000 	.word	0x00000000

080043a0 <can1_ams_cell_voltages_v1s2_decode>:

double can1_ams_cell_voltages_v1s2_decode(uint8_t value)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f89b 	bl	80004e8 <__aeabi_ui2d>
 80043b2:	a30e      	add	r3, pc, #56	; (adr r3, 80043ec <can1_ams_cell_voltages_v1s2_decode+0x4c>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f910 	bl	80005dc <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <can1_ams_cell_voltages_v1s2_decode+0x48>)
 80043ca:	f7fb ff51 	bl	8000270 <__adddf3>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80043d6:	eeb0 0a47 	vmov.f32	s0, s14
 80043da:	eef0 0a67 	vmov.f32	s1, s15
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	f3af 8000 	nop.w
 80043e8:	40040000 	.word	0x40040000
 80043ec:	fcce1c58 	.word	0xfcce1c58
 80043f0:	3f800e6a 	.word	0x3f800e6a
 80043f4:	00000000 	.word	0x00000000

080043f8 <can1_ams_cell_voltages_v7s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s2_encode(double value)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <can1_ams_cell_voltages_v7s2_encode+0x50>)
 8004408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440c:	f7fb ff2e 	bl	800026c <__aeabi_dsub>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	a309      	add	r3, pc, #36	; (adr r3, 8004440 <can1_ams_cell_voltages_v7s2_encode+0x48>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc fa07 	bl	8000830 <__aeabi_ddiv>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f7fc fbaf 	bl	8000b8c <__aeabi_d2uiz>
 800442e:	4603      	mov	r3, r0
 8004430:	b2db      	uxtb	r3, r3
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	fcce1c58 	.word	0xfcce1c58
 8004444:	3f800e6a 	.word	0x3f800e6a
 8004448:	40040000 	.word	0x40040000
 800444c:	00000000 	.word	0x00000000

08004450 <can1_ams_cell_voltages_v7s2_decode>:

double can1_ams_cell_voltages_v7s2_decode(uint8_t value)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f843 	bl	80004e8 <__aeabi_ui2d>
 8004462:	a30e      	add	r3, pc, #56	; (adr r3, 800449c <can1_ams_cell_voltages_v7s2_decode+0x4c>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f8b8 	bl	80005dc <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <can1_ams_cell_voltages_v7s2_decode+0x48>)
 800447a:	f7fb fef9 	bl	8000270 <__adddf3>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	ec43 2b17 	vmov	d7, r2, r3
}
 8004486:	eeb0 0a47 	vmov.f32	s0, s14
 800448a:	eef0 0a67 	vmov.f32	s1, s15
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	f3af 8000 	nop.w
 8004498:	40040000 	.word	0x40040000
 800449c:	fcce1c58 	.word	0xfcce1c58
 80044a0:	3f800e6a 	.word	0x3f800e6a
 80044a4:	00000000 	.word	0x00000000

080044a8 <can1_ams_cell_voltages_v1s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s3_encode(double value)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <can1_ams_cell_voltages_v1s3_encode+0x50>)
 80044b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044bc:	f7fb fed6 	bl	800026c <__aeabi_dsub>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	a309      	add	r3, pc, #36	; (adr r3, 80044f0 <can1_ams_cell_voltages_v1s3_encode+0x48>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f9af 	bl	8000830 <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb57 	bl	8000b8c <__aeabi_d2uiz>
 80044de:	4603      	mov	r3, r0
 80044e0:	b2db      	uxtb	r3, r3
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	fcce1c58 	.word	0xfcce1c58
 80044f4:	3f800e6a 	.word	0x3f800e6a
 80044f8:	40040000 	.word	0x40040000
 80044fc:	00000000 	.word	0x00000000

08004500 <can1_ams_cell_voltages_v1s3_decode>:

double can1_ams_cell_voltages_v1s3_decode(uint8_t value)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffeb 	bl	80004e8 <__aeabi_ui2d>
 8004512:	a30e      	add	r3, pc, #56	; (adr r3, 800454c <can1_ams_cell_voltages_v1s3_decode+0x4c>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f860 	bl	80005dc <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <can1_ams_cell_voltages_v1s3_decode+0x48>)
 800452a:	f7fb fea1 	bl	8000270 <__adddf3>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	ec43 2b17 	vmov	d7, r2, r3
}
 8004536:	eeb0 0a47 	vmov.f32	s0, s14
 800453a:	eef0 0a67 	vmov.f32	s1, s15
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f3af 8000 	nop.w
 8004548:	40040000 	.word	0x40040000
 800454c:	fcce1c58 	.word	0xfcce1c58
 8004550:	3f800e6a 	.word	0x3f800e6a
 8004554:	00000000 	.word	0x00000000

08004558 <can1_ams_cell_voltages_v7s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s3_encode(double value)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <can1_ams_cell_voltages_v7s3_encode+0x50>)
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f7fb fe7e 	bl	800026c <__aeabi_dsub>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	a309      	add	r3, pc, #36	; (adr r3, 80045a0 <can1_ams_cell_voltages_v7s3_encode+0x48>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f957 	bl	8000830 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc faff 	bl	8000b8c <__aeabi_d2uiz>
 800458e:	4603      	mov	r3, r0
 8004590:	b2db      	uxtb	r3, r3
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	fcce1c58 	.word	0xfcce1c58
 80045a4:	3f800e6a 	.word	0x3f800e6a
 80045a8:	40040000 	.word	0x40040000
 80045ac:	00000000 	.word	0x00000000

080045b0 <can1_ams_cell_voltages_v7s3_decode>:

double can1_ams_cell_voltages_v7s3_decode(uint8_t value)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ff93 	bl	80004e8 <__aeabi_ui2d>
 80045c2:	a30e      	add	r3, pc, #56	; (adr r3, 80045fc <can1_ams_cell_voltages_v7s3_decode+0x4c>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f808 	bl	80005dc <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <can1_ams_cell_voltages_v7s3_decode+0x48>)
 80045da:	f7fb fe49 	bl	8000270 <__adddf3>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80045e6:	eeb0 0a47 	vmov.f32	s0, s14
 80045ea:	eef0 0a67 	vmov.f32	s1, s15
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	f3af 8000 	nop.w
 80045f8:	40040000 	.word	0x40040000
 80045fc:	fcce1c58 	.word	0xfcce1c58
 8004600:	3f800e6a 	.word	0x3f800e6a
 8004604:	00000000 	.word	0x00000000

08004608 <can1_ams_cell_voltages_v1s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s4_encode(double value)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <can1_ams_cell_voltages_v1s4_encode+0x50>)
 8004618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800461c:	f7fb fe26 	bl	800026c <__aeabi_dsub>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	a309      	add	r3, pc, #36	; (adr r3, 8004650 <can1_ams_cell_voltages_v1s4_encode+0x48>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fc f8ff 	bl	8000830 <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7fc faa7 	bl	8000b8c <__aeabi_d2uiz>
 800463e:	4603      	mov	r3, r0
 8004640:	b2db      	uxtb	r3, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
 8004650:	fcce1c58 	.word	0xfcce1c58
 8004654:	3f800e6a 	.word	0x3f800e6a
 8004658:	40040000 	.word	0x40040000
 800465c:	00000000 	.word	0x00000000

08004660 <can1_ams_cell_voltages_v1s4_decode>:

double can1_ams_cell_voltages_v1s4_decode(uint8_t value)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fb ff3b 	bl	80004e8 <__aeabi_ui2d>
 8004672:	a30e      	add	r3, pc, #56	; (adr r3, 80046ac <can1_ams_cell_voltages_v1s4_decode+0x4c>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ffb0 	bl	80005dc <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <can1_ams_cell_voltages_v1s4_decode+0x48>)
 800468a:	f7fb fdf1 	bl	8000270 <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	ec43 2b17 	vmov	d7, r2, r3
}
 8004696:	eeb0 0a47 	vmov.f32	s0, s14
 800469a:	eef0 0a67 	vmov.f32	s1, s15
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	f3af 8000 	nop.w
 80046a8:	40040000 	.word	0x40040000
 80046ac:	fcce1c58 	.word	0xfcce1c58
 80046b0:	3f800e6a 	.word	0x3f800e6a
 80046b4:	00000000 	.word	0x00000000

080046b8 <can1_ams_cell_voltages_v7s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s4_encode(double value)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <can1_ams_cell_voltages_v7s4_encode+0x50>)
 80046c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046cc:	f7fb fdce 	bl	800026c <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	a309      	add	r3, pc, #36	; (adr r3, 8004700 <can1_ams_cell_voltages_v7s4_encode+0x48>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fc f8a7 	bl	8000830 <__aeabi_ddiv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fc fa4f 	bl	8000b8c <__aeabi_d2uiz>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b2db      	uxtb	r3, r3
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w
 8004700:	fcce1c58 	.word	0xfcce1c58
 8004704:	3f800e6a 	.word	0x3f800e6a
 8004708:	40040000 	.word	0x40040000
 800470c:	00000000 	.word	0x00000000

08004710 <can1_ams_cell_voltages_v7s4_decode>:

double can1_ams_cell_voltages_v7s4_decode(uint8_t value)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fb fee3 	bl	80004e8 <__aeabi_ui2d>
 8004722:	a30e      	add	r3, pc, #56	; (adr r3, 800475c <can1_ams_cell_voltages_v7s4_decode+0x4c>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff58 	bl	80005dc <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <can1_ams_cell_voltages_v7s4_decode+0x48>)
 800473a:	f7fb fd99 	bl	8000270 <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	ec43 2b17 	vmov	d7, r2, r3
}
 8004746:	eeb0 0a47 	vmov.f32	s0, s14
 800474a:	eef0 0a67 	vmov.f32	s1, s15
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	f3af 8000 	nop.w
 8004758:	40040000 	.word	0x40040000
 800475c:	fcce1c58 	.word	0xfcce1c58
 8004760:	3f800e6a 	.word	0x3f800e6a
 8004764:	00000000 	.word	0x00000000

08004768 <can1_ams_cell_voltages_v1s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s5_encode(double value)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <can1_ams_cell_voltages_v1s5_encode+0x50>)
 8004778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800477c:	f7fb fd76 	bl	800026c <__aeabi_dsub>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	a309      	add	r3, pc, #36	; (adr r3, 80047b0 <can1_ams_cell_voltages_v1s5_encode+0x48>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fc f84f 	bl	8000830 <__aeabi_ddiv>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fc f9f7 	bl	8000b8c <__aeabi_d2uiz>
 800479e:	4603      	mov	r3, r0
 80047a0:	b2db      	uxtb	r3, r3
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	fcce1c58 	.word	0xfcce1c58
 80047b4:	3f800e6a 	.word	0x3f800e6a
 80047b8:	40040000 	.word	0x40040000
 80047bc:	00000000 	.word	0x00000000

080047c0 <can1_ams_cell_voltages_v1s5_decode>:

double can1_ams_cell_voltages_v1s5_decode(uint8_t value)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fe8b 	bl	80004e8 <__aeabi_ui2d>
 80047d2:	a30e      	add	r3, pc, #56	; (adr r3, 800480c <can1_ams_cell_voltages_v1s5_decode+0x4c>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb ff00 	bl	80005dc <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <can1_ams_cell_voltages_v1s5_decode+0x48>)
 80047ea:	f7fb fd41 	bl	8000270 <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80047f6:	eeb0 0a47 	vmov.f32	s0, s14
 80047fa:	eef0 0a67 	vmov.f32	s1, s15
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	f3af 8000 	nop.w
 8004808:	40040000 	.word	0x40040000
 800480c:	fcce1c58 	.word	0xfcce1c58
 8004810:	3f800e6a 	.word	0x3f800e6a
 8004814:	00000000 	.word	0x00000000

08004818 <can1_ams_cell_voltages_v7s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s5_encode(double value)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <can1_ams_cell_voltages_v7s5_encode+0x50>)
 8004828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482c:	f7fb fd1e 	bl	800026c <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	a309      	add	r3, pc, #36	; (adr r3, 8004860 <can1_ams_cell_voltages_v7s5_encode+0x48>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fff7 	bl	8000830 <__aeabi_ddiv>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f7fc f99f 	bl	8000b8c <__aeabi_d2uiz>
 800484e:	4603      	mov	r3, r0
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	fcce1c58 	.word	0xfcce1c58
 8004864:	3f800e6a 	.word	0x3f800e6a
 8004868:	40040000 	.word	0x40040000
 800486c:	00000000 	.word	0x00000000

08004870 <can1_ams_cell_voltages_v7s5_decode>:

double can1_ams_cell_voltages_v7s5_decode(uint8_t value)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe33 	bl	80004e8 <__aeabi_ui2d>
 8004882:	a30e      	add	r3, pc, #56	; (adr r3, 80048bc <can1_ams_cell_voltages_v7s5_decode+0x4c>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fea8 	bl	80005dc <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <can1_ams_cell_voltages_v7s5_decode+0x48>)
 800489a:	f7fb fce9 	bl	8000270 <__adddf3>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80048a6:	eeb0 0a47 	vmov.f32	s0, s14
 80048aa:	eef0 0a67 	vmov.f32	s1, s15
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	f3af 8000 	nop.w
 80048b8:	40040000 	.word	0x40040000
 80048bc:	fcce1c58 	.word	0xfcce1c58
 80048c0:	3f800e6a 	.word	0x3f800e6a
 80048c4:	00000000 	.word	0x00000000

080048c8 <can1_ams_cell_voltages_v1s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s6_encode(double value)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <can1_ams_cell_voltages_v1s6_encode+0x50>)
 80048d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048dc:	f7fb fcc6 	bl	800026c <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	a309      	add	r3, pc, #36	; (adr r3, 8004910 <can1_ams_cell_voltages_v1s6_encode+0x48>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb ff9f 	bl	8000830 <__aeabi_ddiv>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f7fc f947 	bl	8000b8c <__aeabi_d2uiz>
 80048fe:	4603      	mov	r3, r0
 8004900:	b2db      	uxtb	r3, r3
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	fcce1c58 	.word	0xfcce1c58
 8004914:	3f800e6a 	.word	0x3f800e6a
 8004918:	40040000 	.word	0x40040000
 800491c:	00000000 	.word	0x00000000

08004920 <can1_ams_cell_voltages_v1s6_decode>:

double can1_ams_cell_voltages_v1s6_decode(uint8_t value)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fddb 	bl	80004e8 <__aeabi_ui2d>
 8004932:	a30e      	add	r3, pc, #56	; (adr r3, 800496c <can1_ams_cell_voltages_v1s6_decode+0x4c>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe50 	bl	80005dc <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <can1_ams_cell_voltages_v1s6_decode+0x48>)
 800494a:	f7fb fc91 	bl	8000270 <__adddf3>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	ec43 2b17 	vmov	d7, r2, r3
}
 8004956:	eeb0 0a47 	vmov.f32	s0, s14
 800495a:	eef0 0a67 	vmov.f32	s1, s15
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f3af 8000 	nop.w
 8004968:	40040000 	.word	0x40040000
 800496c:	fcce1c58 	.word	0xfcce1c58
 8004970:	3f800e6a 	.word	0x3f800e6a
 8004974:	00000000 	.word	0x00000000

08004978 <can1_ams_cell_voltages_v7s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s6_encode(double value)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <can1_ams_cell_voltages_v7s6_encode+0x50>)
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	f7fb fc6e 	bl	800026c <__aeabi_dsub>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	a309      	add	r3, pc, #36	; (adr r3, 80049c0 <can1_ams_cell_voltages_v7s6_encode+0x48>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb ff47 	bl	8000830 <__aeabi_ddiv>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fc f8ef 	bl	8000b8c <__aeabi_d2uiz>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	fcce1c58 	.word	0xfcce1c58
 80049c4:	3f800e6a 	.word	0x3f800e6a
 80049c8:	40040000 	.word	0x40040000
 80049cc:	00000000 	.word	0x00000000

080049d0 <can1_ams_cell_voltages_v7s6_decode>:

double can1_ams_cell_voltages_v7s6_decode(uint8_t value)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fd83 	bl	80004e8 <__aeabi_ui2d>
 80049e2:	a30e      	add	r3, pc, #56	; (adr r3, 8004a1c <can1_ams_cell_voltages_v7s6_decode+0x4c>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fb fdf8 	bl	80005dc <__aeabi_dmul>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <can1_ams_cell_voltages_v7s6_decode+0x48>)
 80049fa:	f7fb fc39 	bl	8000270 <__adddf3>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a06:	eeb0 0a47 	vmov.f32	s0, s14
 8004a0a:	eef0 0a67 	vmov.f32	s1, s15
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	f3af 8000 	nop.w
 8004a18:	40040000 	.word	0x40040000
 8004a1c:	fcce1c58 	.word	0xfcce1c58
 8004a20:	3f800e6a 	.word	0x3f800e6a
 8004a24:	00000000 	.word	0x00000000

08004a28 <can1_ams_cell_voltages_v1s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s7_encode(double value)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <can1_ams_cell_voltages_v1s7_encode+0x50>)
 8004a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a3c:	f7fb fc16 	bl	800026c <__aeabi_dsub>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	a309      	add	r3, pc, #36	; (adr r3, 8004a70 <can1_ams_cell_voltages_v1s7_encode+0x48>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb feef 	bl	8000830 <__aeabi_ddiv>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f897 	bl	8000b8c <__aeabi_d2uiz>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	b2db      	uxtb	r3, r3
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	f3af 8000 	nop.w
 8004a70:	fcce1c58 	.word	0xfcce1c58
 8004a74:	3f800e6a 	.word	0x3f800e6a
 8004a78:	40040000 	.word	0x40040000
 8004a7c:	00000000 	.word	0x00000000

08004a80 <can1_ams_cell_voltages_v1s7_decode>:

double can1_ams_cell_voltages_v1s7_decode(uint8_t value)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fd2b 	bl	80004e8 <__aeabi_ui2d>
 8004a92:	a30e      	add	r3, pc, #56	; (adr r3, 8004acc <can1_ams_cell_voltages_v1s7_decode+0x4c>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fda0 	bl	80005dc <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <can1_ams_cell_voltages_v1s7_decode+0x48>)
 8004aaa:	f7fb fbe1 	bl	8000270 <__adddf3>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aba:	eef0 0a67 	vmov.f32	s1, s15
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	40040000 	.word	0x40040000
 8004acc:	fcce1c58 	.word	0xfcce1c58
 8004ad0:	3f800e6a 	.word	0x3f800e6a
 8004ad4:	00000000 	.word	0x00000000

08004ad8 <can1_ams_cell_voltages_v7s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s7_encode(double value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <can1_ams_cell_voltages_v7s7_encode+0x50>)
 8004ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aec:	f7fb fbbe 	bl	800026c <__aeabi_dsub>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	a309      	add	r3, pc, #36	; (adr r3, 8004b20 <can1_ams_cell_voltages_v7s7_encode+0x48>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fe97 	bl	8000830 <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fc f83f 	bl	8000b8c <__aeabi_d2uiz>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w
 8004b20:	fcce1c58 	.word	0xfcce1c58
 8004b24:	3f800e6a 	.word	0x3f800e6a
 8004b28:	40040000 	.word	0x40040000
 8004b2c:	00000000 	.word	0x00000000

08004b30 <can1_ams_cell_voltages_v7s7_decode>:

double can1_ams_cell_voltages_v7s7_decode(uint8_t value)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcd3 	bl	80004e8 <__aeabi_ui2d>
 8004b42:	a30e      	add	r3, pc, #56	; (adr r3, 8004b7c <can1_ams_cell_voltages_v7s7_decode+0x4c>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fd48 	bl	80005dc <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <can1_ams_cell_voltages_v7s7_decode+0x48>)
 8004b5a:	f7fb fb89 	bl	8000270 <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b66:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6a:	eef0 0a67 	vmov.f32	s1, s15
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	f3af 8000 	nop.w
 8004b78:	40040000 	.word	0x40040000
 8004b7c:	fcce1c58 	.word	0xfcce1c58
 8004b80:	3f800e6a 	.word	0x3f800e6a
 8004b84:	00000000 	.word	0x00000000

08004b88 <can1_ams_cell_voltages_v1s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s8_encode(double value)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <can1_ams_cell_voltages_v1s8_encode+0x50>)
 8004b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9c:	f7fb fb66 	bl	800026c <__aeabi_dsub>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	a309      	add	r3, pc, #36	; (adr r3, 8004bd0 <can1_ams_cell_voltages_v1s8_encode+0x48>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fe3f 	bl	8000830 <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fb ffe7 	bl	8000b8c <__aeabi_d2uiz>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	fcce1c58 	.word	0xfcce1c58
 8004bd4:	3f800e6a 	.word	0x3f800e6a
 8004bd8:	40040000 	.word	0x40040000
 8004bdc:	00000000 	.word	0x00000000

08004be0 <can1_ams_cell_voltages_v1s8_decode>:

double can1_ams_cell_voltages_v1s8_decode(uint8_t value)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc7b 	bl	80004e8 <__aeabi_ui2d>
 8004bf2:	a30e      	add	r3, pc, #56	; (adr r3, 8004c2c <can1_ams_cell_voltages_v1s8_decode+0x4c>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fcf0 	bl	80005dc <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <can1_ams_cell_voltages_v1s8_decode+0x48>)
 8004c0a:	f7fb fb31 	bl	8000270 <__adddf3>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c16:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1a:	eef0 0a67 	vmov.f32	s1, s15
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	f3af 8000 	nop.w
 8004c28:	40040000 	.word	0x40040000
 8004c2c:	fcce1c58 	.word	0xfcce1c58
 8004c30:	3f800e6a 	.word	0x3f800e6a
 8004c34:	00000000 	.word	0x00000000

08004c38 <can1_ams_cell_voltages_v7s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s8_encode(double value)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <can1_ams_cell_voltages_v7s8_encode+0x50>)
 8004c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c4c:	f7fb fb0e 	bl	800026c <__aeabi_dsub>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	a309      	add	r3, pc, #36	; (adr r3, 8004c80 <can1_ams_cell_voltages_v7s8_encode+0x48>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fde7 	bl	8000830 <__aeabi_ddiv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ff8f 	bl	8000b8c <__aeabi_d2uiz>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	b2db      	uxtb	r3, r3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	fcce1c58 	.word	0xfcce1c58
 8004c84:	3f800e6a 	.word	0x3f800e6a
 8004c88:	40040000 	.word	0x40040000
 8004c8c:	00000000 	.word	0x00000000

08004c90 <can1_ams_cell_voltages_v7s8_decode>:

double can1_ams_cell_voltages_v7s8_decode(uint8_t value)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc23 	bl	80004e8 <__aeabi_ui2d>
 8004ca2:	a30e      	add	r3, pc, #56	; (adr r3, 8004cdc <can1_ams_cell_voltages_v7s8_decode+0x4c>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fc98 	bl	80005dc <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <can1_ams_cell_voltages_v7s8_decode+0x48>)
 8004cba:	f7fb fad9 	bl	8000270 <__adddf3>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cca:	eef0 0a67 	vmov.f32	s1, s15
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	40040000 	.word	0x40040000
 8004cdc:	fcce1c58 	.word	0xfcce1c58
 8004ce0:	3f800e6a 	.word	0x3f800e6a
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <can1_ams_cell_voltages_v1s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s9_encode(double value)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <can1_ams_cell_voltages_v1s9_encode+0x50>)
 8004cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cfc:	f7fb fab6 	bl	800026c <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	a309      	add	r3, pc, #36	; (adr r3, 8004d30 <can1_ams_cell_voltages_v1s9_encode+0x48>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fd8f 	bl	8000830 <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb ff37 	bl	8000b8c <__aeabi_d2uiz>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b2db      	uxtb	r3, r3
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	fcce1c58 	.word	0xfcce1c58
 8004d34:	3f800e6a 	.word	0x3f800e6a
 8004d38:	40040000 	.word	0x40040000
 8004d3c:	00000000 	.word	0x00000000

08004d40 <can1_ams_cell_voltages_v1s9_decode>:

double can1_ams_cell_voltages_v1s9_decode(uint8_t value)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fbcb 	bl	80004e8 <__aeabi_ui2d>
 8004d52:	a30e      	add	r3, pc, #56	; (adr r3, 8004d8c <can1_ams_cell_voltages_v1s9_decode+0x4c>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc40 	bl	80005dc <__aeabi_dmul>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <can1_ams_cell_voltages_v1s9_decode+0x48>)
 8004d6a:	f7fb fa81 	bl	8000270 <__adddf3>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d76:	eeb0 0a47 	vmov.f32	s0, s14
 8004d7a:	eef0 0a67 	vmov.f32	s1, s15
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	f3af 8000 	nop.w
 8004d88:	40040000 	.word	0x40040000
 8004d8c:	fcce1c58 	.word	0xfcce1c58
 8004d90:	3f800e6a 	.word	0x3f800e6a
 8004d94:	00000000 	.word	0x00000000

08004d98 <can1_ams_cell_voltages_v7s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s9_encode(double value)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <can1_ams_cell_voltages_v7s9_encode+0x50>)
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f7fb fa5e 	bl	800026c <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	a309      	add	r3, pc, #36	; (adr r3, 8004de0 <can1_ams_cell_voltages_v7s9_encode+0x48>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fd37 	bl	8000830 <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7fb fedf 	bl	8000b8c <__aeabi_d2uiz>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	b2db      	uxtb	r3, r3
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w
 8004de0:	fcce1c58 	.word	0xfcce1c58
 8004de4:	3f800e6a 	.word	0x3f800e6a
 8004de8:	40040000 	.word	0x40040000
 8004dec:	00000000 	.word	0x00000000

08004df0 <can1_ams_cell_voltages_v7s9_decode>:

double can1_ams_cell_voltages_v7s9_decode(uint8_t value)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fb73 	bl	80004e8 <__aeabi_ui2d>
 8004e02:	a30e      	add	r3, pc, #56	; (adr r3, 8004e3c <can1_ams_cell_voltages_v7s9_decode+0x4c>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fbe8 	bl	80005dc <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <can1_ams_cell_voltages_v7s9_decode+0x48>)
 8004e1a:	f7fb fa29 	bl	8000270 <__adddf3>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e26:	eeb0 0a47 	vmov.f32	s0, s14
 8004e2a:	eef0 0a67 	vmov.f32	s1, s15
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	f3af 8000 	nop.w
 8004e38:	40040000 	.word	0x40040000
 8004e3c:	fcce1c58 	.word	0xfcce1c58
 8004e40:	3f800e6a 	.word	0x3f800e6a
 8004e44:	00000000 	.word	0x00000000

08004e48 <can1_ams_cell_voltages_v1s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s10_encode(double value)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <can1_ams_cell_voltages_v1s10_encode+0x50>)
 8004e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e5c:	f7fb fa06 	bl	800026c <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	a309      	add	r3, pc, #36	; (adr r3, 8004e90 <can1_ams_cell_voltages_v1s10_encode+0x48>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fcdf 	bl	8000830 <__aeabi_ddiv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fb fe87 	bl	8000b8c <__aeabi_d2uiz>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	b2db      	uxtb	r3, r3
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w
 8004e90:	fcce1c58 	.word	0xfcce1c58
 8004e94:	3f800e6a 	.word	0x3f800e6a
 8004e98:	40040000 	.word	0x40040000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <can1_ams_cell_voltages_v1s10_decode>:

double can1_ams_cell_voltages_v1s10_decode(uint8_t value)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fb1b 	bl	80004e8 <__aeabi_ui2d>
 8004eb2:	a30e      	add	r3, pc, #56	; (adr r3, 8004eec <can1_ams_cell_voltages_v1s10_decode+0x4c>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb90 	bl	80005dc <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <can1_ams_cell_voltages_v1s10_decode+0x48>)
 8004eca:	f7fb f9d1 	bl	8000270 <__adddf3>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	40040000 	.word	0x40040000
 8004eec:	fcce1c58 	.word	0xfcce1c58
 8004ef0:	3f800e6a 	.word	0x3f800e6a
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <can1_ams_cell_voltages_v7s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s10_encode(double value)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <can1_ams_cell_voltages_v7s10_encode+0x50>)
 8004f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f0c:	f7fb f9ae 	bl	800026c <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	a309      	add	r3, pc, #36	; (adr r3, 8004f40 <can1_ams_cell_voltages_v7s10_encode+0x48>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fc87 	bl	8000830 <__aeabi_ddiv>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fb fe2f 	bl	8000b8c <__aeabi_d2uiz>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b2db      	uxtb	r3, r3
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w
 8004f40:	fcce1c58 	.word	0xfcce1c58
 8004f44:	3f800e6a 	.word	0x3f800e6a
 8004f48:	40040000 	.word	0x40040000
 8004f4c:	00000000 	.word	0x00000000

08004f50 <can1_ams_cell_voltages_v7s10_decode>:

double can1_ams_cell_voltages_v7s10_decode(uint8_t value)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb fac3 	bl	80004e8 <__aeabi_ui2d>
 8004f62:	a30e      	add	r3, pc, #56	; (adr r3, 8004f9c <can1_ams_cell_voltages_v7s10_decode+0x4c>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb fb38 	bl	80005dc <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <can1_ams_cell_voltages_v7s10_decode+0x48>)
 8004f7a:	f7fb f979 	bl	8000270 <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f86:	eeb0 0a47 	vmov.f32	s0, s14
 8004f8a:	eef0 0a67 	vmov.f32	s1, s15
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	f3af 8000 	nop.w
 8004f98:	40040000 	.word	0x40040000
 8004f9c:	fcce1c58 	.word	0xfcce1c58
 8004fa0:	3f800e6a 	.word	0x3f800e6a
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <can1_ams_cell_voltages_v1s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s11_encode(double value)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <can1_ams_cell_voltages_v1s11_encode+0x50>)
 8004fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fbc:	f7fb f956 	bl	800026c <__aeabi_dsub>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	a309      	add	r3, pc, #36	; (adr r3, 8004ff0 <can1_ams_cell_voltages_v1s11_encode+0x48>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fc2f 	bl	8000830 <__aeabi_ddiv>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7fb fdd7 	bl	8000b8c <__aeabi_d2uiz>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	b2db      	uxtb	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w
 8004ff0:	fcce1c58 	.word	0xfcce1c58
 8004ff4:	3f800e6a 	.word	0x3f800e6a
 8004ff8:	40040000 	.word	0x40040000
 8004ffc:	00000000 	.word	0x00000000

08005000 <can1_ams_cell_voltages_v1s11_decode>:

double can1_ams_cell_voltages_v1s11_decode(uint8_t value)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fa6b 	bl	80004e8 <__aeabi_ui2d>
 8005012:	a30e      	add	r3, pc, #56	; (adr r3, 800504c <can1_ams_cell_voltages_v1s11_decode+0x4c>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb fae0 	bl	80005dc <__aeabi_dmul>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <can1_ams_cell_voltages_v1s11_decode+0x48>)
 800502a:	f7fb f921 	bl	8000270 <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	ec43 2b17 	vmov	d7, r2, r3
}
 8005036:	eeb0 0a47 	vmov.f32	s0, s14
 800503a:	eef0 0a67 	vmov.f32	s1, s15
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	f3af 8000 	nop.w
 8005048:	40040000 	.word	0x40040000
 800504c:	fcce1c58 	.word	0xfcce1c58
 8005050:	3f800e6a 	.word	0x3f800e6a
 8005054:	00000000 	.word	0x00000000

08005058 <can1_ams_cell_voltages_v7s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s11_encode(double value)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <can1_ams_cell_voltages_v7s11_encode+0x50>)
 8005068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800506c:	f7fb f8fe 	bl	800026c <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	a309      	add	r3, pc, #36	; (adr r3, 80050a0 <can1_ams_cell_voltages_v7s11_encode+0x48>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fbd7 	bl	8000830 <__aeabi_ddiv>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fd7f 	bl	8000b8c <__aeabi_d2uiz>
 800508e:	4603      	mov	r3, r0
 8005090:	b2db      	uxtb	r3, r3
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w
 80050a0:	fcce1c58 	.word	0xfcce1c58
 80050a4:	3f800e6a 	.word	0x3f800e6a
 80050a8:	40040000 	.word	0x40040000
 80050ac:	00000000 	.word	0x00000000

080050b0 <can1_ams_cell_voltages_v7s11_decode>:

double can1_ams_cell_voltages_v7s11_decode(uint8_t value)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fb fa13 	bl	80004e8 <__aeabi_ui2d>
 80050c2:	a30e      	add	r3, pc, #56	; (adr r3, 80050fc <can1_ams_cell_voltages_v7s11_decode+0x4c>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa88 	bl	80005dc <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <can1_ams_cell_voltages_v7s11_decode+0x48>)
 80050da:	f7fb f8c9 	bl	8000270 <__adddf3>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80050e6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ea:	eef0 0a67 	vmov.f32	s1, s15
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	f3af 8000 	nop.w
 80050f8:	40040000 	.word	0x40040000
 80050fc:	fcce1c58 	.word	0xfcce1c58
 8005100:	3f800e6a 	.word	0x3f800e6a
 8005104:	00000000 	.word	0x00000000

08005108 <can1_ams_cell_voltages_v1s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s12_encode(double value)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <can1_ams_cell_voltages_v1s12_encode+0x50>)
 8005118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511c:	f7fb f8a6 	bl	800026c <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	a309      	add	r3, pc, #36	; (adr r3, 8005150 <can1_ams_cell_voltages_v1s12_encode+0x48>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fb7f 	bl	8000830 <__aeabi_ddiv>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f7fb fd27 	bl	8000b8c <__aeabi_d2uiz>
 800513e:	4603      	mov	r3, r0
 8005140:	b2db      	uxtb	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	fcce1c58 	.word	0xfcce1c58
 8005154:	3f800e6a 	.word	0x3f800e6a
 8005158:	40040000 	.word	0x40040000
 800515c:	00000000 	.word	0x00000000

08005160 <can1_ams_cell_voltages_v1s12_decode>:

double can1_ams_cell_voltages_v1s12_decode(uint8_t value)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb f9bb 	bl	80004e8 <__aeabi_ui2d>
 8005172:	a30e      	add	r3, pc, #56	; (adr r3, 80051ac <can1_ams_cell_voltages_v1s12_decode+0x4c>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa30 	bl	80005dc <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <can1_ams_cell_voltages_v1s12_decode+0x48>)
 800518a:	f7fb f871 	bl	8000270 <__adddf3>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	ec43 2b17 	vmov	d7, r2, r3
}
 8005196:	eeb0 0a47 	vmov.f32	s0, s14
 800519a:	eef0 0a67 	vmov.f32	s1, s15
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	f3af 8000 	nop.w
 80051a8:	40040000 	.word	0x40040000
 80051ac:	fcce1c58 	.word	0xfcce1c58
 80051b0:	3f800e6a 	.word	0x3f800e6a
 80051b4:	00000000 	.word	0x00000000

080051b8 <can1_ams_cell_voltages_v7s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s12_encode(double value)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <can1_ams_cell_voltages_v7s12_encode+0x50>)
 80051c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051cc:	f7fb f84e 	bl	800026c <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <can1_ams_cell_voltages_v7s12_encode+0x48>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fb27 	bl	8000830 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7fb fccf 	bl	8000b8c <__aeabi_d2uiz>
 80051ee:	4603      	mov	r3, r0
 80051f0:	b2db      	uxtb	r3, r3
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w
 8005200:	fcce1c58 	.word	0xfcce1c58
 8005204:	3f800e6a 	.word	0x3f800e6a
 8005208:	40040000 	.word	0x40040000
 800520c:	00000000 	.word	0x00000000

08005210 <can1_ams_cell_voltages_v7s12_decode>:

double can1_ams_cell_voltages_v7s12_decode(uint8_t value)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f963 	bl	80004e8 <__aeabi_ui2d>
 8005222:	a30e      	add	r3, pc, #56	; (adr r3, 800525c <can1_ams_cell_voltages_v7s12_decode+0x4c>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9d8 	bl	80005dc <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <can1_ams_cell_voltages_v7s12_decode+0x48>)
 800523a:	f7fb f819 	bl	8000270 <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	ec43 2b17 	vmov	d7, r2, r3
}
 8005246:	eeb0 0a47 	vmov.f32	s0, s14
 800524a:	eef0 0a67 	vmov.f32	s1, s15
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	f3af 8000 	nop.w
 8005258:	40040000 	.word	0x40040000
 800525c:	fcce1c58 	.word	0xfcce1c58
 8005260:	3f800e6a 	.word	0x3f800e6a
 8005264:	00000000 	.word	0x00000000

08005268 <can1_ams_cell_voltages_v2s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s1_encode(double value)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <can1_ams_cell_voltages_v2s1_encode+0x50>)
 8005278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527c:	f7fa fff6 	bl	800026c <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	a309      	add	r3, pc, #36	; (adr r3, 80052b0 <can1_ams_cell_voltages_v2s1_encode+0x48>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb facf 	bl	8000830 <__aeabi_ddiv>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	f7fb fc77 	bl	8000b8c <__aeabi_d2uiz>
 800529e:	4603      	mov	r3, r0
 80052a0:	b2db      	uxtb	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w
 80052b0:	fcce1c58 	.word	0xfcce1c58
 80052b4:	3f800e6a 	.word	0x3f800e6a
 80052b8:	40040000 	.word	0x40040000
 80052bc:	00000000 	.word	0x00000000

080052c0 <can1_ams_cell_voltages_v2s1_decode>:

double can1_ams_cell_voltages_v2s1_decode(uint8_t value)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb f90b 	bl	80004e8 <__aeabi_ui2d>
 80052d2:	a30e      	add	r3, pc, #56	; (adr r3, 800530c <can1_ams_cell_voltages_v2s1_decode+0x4c>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fb f980 	bl	80005dc <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <can1_ams_cell_voltages_v2s1_decode+0x48>)
 80052ea:	f7fa ffc1 	bl	8000270 <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052f6:	eeb0 0a47 	vmov.f32	s0, s14
 80052fa:	eef0 0a67 	vmov.f32	s1, s15
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	f3af 8000 	nop.w
 8005308:	40040000 	.word	0x40040000
 800530c:	fcce1c58 	.word	0xfcce1c58
 8005310:	3f800e6a 	.word	0x3f800e6a
 8005314:	00000000 	.word	0x00000000

08005318 <can1_ams_cell_voltages_v8s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s1_encode(double value)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <can1_ams_cell_voltages_v8s1_encode+0x50>)
 8005328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800532c:	f7fa ff9e 	bl	800026c <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	a309      	add	r3, pc, #36	; (adr r3, 8005360 <can1_ams_cell_voltages_v8s1_encode+0x48>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb fa77 	bl	8000830 <__aeabi_ddiv>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fc1f 	bl	8000b8c <__aeabi_d2uiz>
 800534e:	4603      	mov	r3, r0
 8005350:	b2db      	uxtb	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w
 8005360:	fcce1c58 	.word	0xfcce1c58
 8005364:	3f800e6a 	.word	0x3f800e6a
 8005368:	40040000 	.word	0x40040000
 800536c:	00000000 	.word	0x00000000

08005370 <can1_ams_cell_voltages_v8s1_decode>:

double can1_ams_cell_voltages_v8s1_decode(uint8_t value)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f8b3 	bl	80004e8 <__aeabi_ui2d>
 8005382:	a30e      	add	r3, pc, #56	; (adr r3, 80053bc <can1_ams_cell_voltages_v8s1_decode+0x4c>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f928 	bl	80005dc <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <can1_ams_cell_voltages_v8s1_decode+0x48>)
 800539a:	f7fa ff69 	bl	8000270 <__adddf3>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053a6:	eeb0 0a47 	vmov.f32	s0, s14
 80053aa:	eef0 0a67 	vmov.f32	s1, s15
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	f3af 8000 	nop.w
 80053b8:	40040000 	.word	0x40040000
 80053bc:	fcce1c58 	.word	0xfcce1c58
 80053c0:	3f800e6a 	.word	0x3f800e6a
 80053c4:	00000000 	.word	0x00000000

080053c8 <can1_ams_cell_voltages_v2s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s2_encode(double value)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <can1_ams_cell_voltages_v2s2_encode+0x50>)
 80053d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053dc:	f7fa ff46 	bl	800026c <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	a309      	add	r3, pc, #36	; (adr r3, 8005410 <can1_ams_cell_voltages_v2s2_encode+0x48>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb fa1f 	bl	8000830 <__aeabi_ddiv>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fbc7 	bl	8000b8c <__aeabi_d2uiz>
 80053fe:	4603      	mov	r3, r0
 8005400:	b2db      	uxtb	r3, r3
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w
 8005410:	fcce1c58 	.word	0xfcce1c58
 8005414:	3f800e6a 	.word	0x3f800e6a
 8005418:	40040000 	.word	0x40040000
 800541c:	00000000 	.word	0x00000000

08005420 <can1_ams_cell_voltages_v2s2_decode>:

double can1_ams_cell_voltages_v2s2_decode(uint8_t value)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb f85b 	bl	80004e8 <__aeabi_ui2d>
 8005432:	a30e      	add	r3, pc, #56	; (adr r3, 800546c <can1_ams_cell_voltages_v2s2_decode+0x4c>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fb f8d0 	bl	80005dc <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	4b07      	ldr	r3, [pc, #28]	; (8005468 <can1_ams_cell_voltages_v2s2_decode+0x48>)
 800544a:	f7fa ff11 	bl	8000270 <__adddf3>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	ec43 2b17 	vmov	d7, r2, r3
}
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	f3af 8000 	nop.w
 8005468:	40040000 	.word	0x40040000
 800546c:	fcce1c58 	.word	0xfcce1c58
 8005470:	3f800e6a 	.word	0x3f800e6a
 8005474:	00000000 	.word	0x00000000

08005478 <can1_ams_cell_voltages_v8s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s2_encode(double value)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <can1_ams_cell_voltages_v8s2_encode+0x50>)
 8005488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548c:	f7fa feee 	bl	800026c <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	a309      	add	r3, pc, #36	; (adr r3, 80054c0 <can1_ams_cell_voltages_v8s2_encode+0x48>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f9c7 	bl	8000830 <__aeabi_ddiv>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fb6f 	bl	8000b8c <__aeabi_d2uiz>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	fcce1c58 	.word	0xfcce1c58
 80054c4:	3f800e6a 	.word	0x3f800e6a
 80054c8:	40040000 	.word	0x40040000
 80054cc:	00000000 	.word	0x00000000

080054d0 <can1_ams_cell_voltages_v8s2_decode>:

double can1_ams_cell_voltages_v8s2_decode(uint8_t value)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f803 	bl	80004e8 <__aeabi_ui2d>
 80054e2:	a30e      	add	r3, pc, #56	; (adr r3, 800551c <can1_ams_cell_voltages_v8s2_decode+0x4c>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f878 	bl	80005dc <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <can1_ams_cell_voltages_v8s2_decode+0x48>)
 80054fa:	f7fa feb9 	bl	8000270 <__adddf3>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	ec43 2b17 	vmov	d7, r2, r3
}
 8005506:	eeb0 0a47 	vmov.f32	s0, s14
 800550a:	eef0 0a67 	vmov.f32	s1, s15
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	f3af 8000 	nop.w
 8005518:	40040000 	.word	0x40040000
 800551c:	fcce1c58 	.word	0xfcce1c58
 8005520:	3f800e6a 	.word	0x3f800e6a
 8005524:	00000000 	.word	0x00000000

08005528 <can1_ams_cell_voltages_v2s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s3_encode(double value)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <can1_ams_cell_voltages_v2s3_encode+0x50>)
 8005538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553c:	f7fa fe96 	bl	800026c <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	a309      	add	r3, pc, #36	; (adr r3, 8005570 <can1_ams_cell_voltages_v2s3_encode+0x48>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f96f 	bl	8000830 <__aeabi_ddiv>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fb fb17 	bl	8000b8c <__aeabi_d2uiz>
 800555e:	4603      	mov	r3, r0
 8005560:	b2db      	uxtb	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	fcce1c58 	.word	0xfcce1c58
 8005574:	3f800e6a 	.word	0x3f800e6a
 8005578:	40040000 	.word	0x40040000
 800557c:	00000000 	.word	0x00000000

08005580 <can1_ams_cell_voltages_v2s3_decode>:

double can1_ams_cell_voltages_v2s3_decode(uint8_t value)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffab 	bl	80004e8 <__aeabi_ui2d>
 8005592:	a30e      	add	r3, pc, #56	; (adr r3, 80055cc <can1_ams_cell_voltages_v2s3_decode+0x4c>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fb f820 	bl	80005dc <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <can1_ams_cell_voltages_v2s3_decode+0x48>)
 80055aa:	f7fa fe61 	bl	8000270 <__adddf3>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	f3af 8000 	nop.w
 80055c8:	40040000 	.word	0x40040000
 80055cc:	fcce1c58 	.word	0xfcce1c58
 80055d0:	3f800e6a 	.word	0x3f800e6a
 80055d4:	00000000 	.word	0x00000000

080055d8 <can1_ams_cell_voltages_v8s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s3_encode(double value)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <can1_ams_cell_voltages_v8s3_encode+0x50>)
 80055e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ec:	f7fa fe3e 	bl	800026c <__aeabi_dsub>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	a309      	add	r3, pc, #36	; (adr r3, 8005620 <can1_ams_cell_voltages_v8s3_encode+0x48>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb f917 	bl	8000830 <__aeabi_ddiv>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f7fb fabf 	bl	8000b8c <__aeabi_d2uiz>
 800560e:	4603      	mov	r3, r0
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	fcce1c58 	.word	0xfcce1c58
 8005624:	3f800e6a 	.word	0x3f800e6a
 8005628:	40040000 	.word	0x40040000
 800562c:	00000000 	.word	0x00000000

08005630 <can1_ams_cell_voltages_v8s3_decode>:

double can1_ams_cell_voltages_v8s3_decode(uint8_t value)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff53 	bl	80004e8 <__aeabi_ui2d>
 8005642:	a30e      	add	r3, pc, #56	; (adr r3, 800567c <can1_ams_cell_voltages_v8s3_decode+0x4c>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ffc8 	bl	80005dc <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <can1_ams_cell_voltages_v8s3_decode+0x48>)
 800565a:	f7fa fe09 	bl	8000270 <__adddf3>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	ec43 2b17 	vmov	d7, r2, r3
}
 8005666:	eeb0 0a47 	vmov.f32	s0, s14
 800566a:	eef0 0a67 	vmov.f32	s1, s15
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	f3af 8000 	nop.w
 8005678:	40040000 	.word	0x40040000
 800567c:	fcce1c58 	.word	0xfcce1c58
 8005680:	3f800e6a 	.word	0x3f800e6a
 8005684:	00000000 	.word	0x00000000

08005688 <can1_ams_cell_voltages_v2s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s4_encode(double value)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <can1_ams_cell_voltages_v2s4_encode+0x50>)
 8005698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800569c:	f7fa fde6 	bl	800026c <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	a309      	add	r3, pc, #36	; (adr r3, 80056d0 <can1_ams_cell_voltages_v2s4_encode+0x48>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fb f8bf 	bl	8000830 <__aeabi_ddiv>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb fa67 	bl	8000b8c <__aeabi_d2uiz>
 80056be:	4603      	mov	r3, r0
 80056c0:	b2db      	uxtb	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	f3af 8000 	nop.w
 80056d0:	fcce1c58 	.word	0xfcce1c58
 80056d4:	3f800e6a 	.word	0x3f800e6a
 80056d8:	40040000 	.word	0x40040000
 80056dc:	00000000 	.word	0x00000000

080056e0 <can1_ams_cell_voltages_v2s4_decode>:

double can1_ams_cell_voltages_v2s4_decode(uint8_t value)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fefb 	bl	80004e8 <__aeabi_ui2d>
 80056f2:	a30e      	add	r3, pc, #56	; (adr r3, 800572c <can1_ams_cell_voltages_v2s4_decode+0x4c>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa ff70 	bl	80005dc <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <can1_ams_cell_voltages_v2s4_decode+0x48>)
 800570a:	f7fa fdb1 	bl	8000270 <__adddf3>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b17 	vmov	d7, r2, r3
}
 8005716:	eeb0 0a47 	vmov.f32	s0, s14
 800571a:	eef0 0a67 	vmov.f32	s1, s15
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	f3af 8000 	nop.w
 8005728:	40040000 	.word	0x40040000
 800572c:	fcce1c58 	.word	0xfcce1c58
 8005730:	3f800e6a 	.word	0x3f800e6a
 8005734:	00000000 	.word	0x00000000

08005738 <can1_ams_cell_voltages_v8s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s4_encode(double value)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <can1_ams_cell_voltages_v8s4_encode+0x50>)
 8005748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574c:	f7fa fd8e 	bl	800026c <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	a309      	add	r3, pc, #36	; (adr r3, 8005780 <can1_ams_cell_voltages_v8s4_encode+0x48>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fb f867 	bl	8000830 <__aeabi_ddiv>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb fa0f 	bl	8000b8c <__aeabi_d2uiz>
 800576e:	4603      	mov	r3, r0
 8005770:	b2db      	uxtb	r3, r3
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	fcce1c58 	.word	0xfcce1c58
 8005784:	3f800e6a 	.word	0x3f800e6a
 8005788:	40040000 	.word	0x40040000
 800578c:	00000000 	.word	0x00000000

08005790 <can1_ams_cell_voltages_v8s4_decode>:

double can1_ams_cell_voltages_v8s4_decode(uint8_t value)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fea3 	bl	80004e8 <__aeabi_ui2d>
 80057a2:	a30e      	add	r3, pc, #56	; (adr r3, 80057dc <can1_ams_cell_voltages_v8s4_decode+0x4c>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa ff18 	bl	80005dc <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <can1_ams_cell_voltages_v8s4_decode+0x48>)
 80057ba:	f7fa fd59 	bl	8000270 <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80057c6:	eeb0 0a47 	vmov.f32	s0, s14
 80057ca:	eef0 0a67 	vmov.f32	s1, s15
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	f3af 8000 	nop.w
 80057d8:	40040000 	.word	0x40040000
 80057dc:	fcce1c58 	.word	0xfcce1c58
 80057e0:	3f800e6a 	.word	0x3f800e6a
 80057e4:	00000000 	.word	0x00000000

080057e8 <can1_ams_cell_voltages_v2s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s5_encode(double value)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <can1_ams_cell_voltages_v2s5_encode+0x50>)
 80057f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057fc:	f7fa fd36 	bl	800026c <__aeabi_dsub>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	a309      	add	r3, pc, #36	; (adr r3, 8005830 <can1_ams_cell_voltages_v2s5_encode+0x48>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fb f80f 	bl	8000830 <__aeabi_ddiv>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	f7fb f9b7 	bl	8000b8c <__aeabi_d2uiz>
 800581e:	4603      	mov	r3, r0
 8005820:	b2db      	uxtb	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	f3af 8000 	nop.w
 8005830:	fcce1c58 	.word	0xfcce1c58
 8005834:	3f800e6a 	.word	0x3f800e6a
 8005838:	40040000 	.word	0x40040000
 800583c:	00000000 	.word	0x00000000

08005840 <can1_ams_cell_voltages_v2s5_decode>:

double can1_ams_cell_voltages_v2s5_decode(uint8_t value)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fe4b 	bl	80004e8 <__aeabi_ui2d>
 8005852:	a30e      	add	r3, pc, #56	; (adr r3, 800588c <can1_ams_cell_voltages_v2s5_decode+0x4c>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fec0 	bl	80005dc <__aeabi_dmul>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <can1_ams_cell_voltages_v2s5_decode+0x48>)
 800586a:	f7fa fd01 	bl	8000270 <__adddf3>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	ec43 2b17 	vmov	d7, r2, r3
}
 8005876:	eeb0 0a47 	vmov.f32	s0, s14
 800587a:	eef0 0a67 	vmov.f32	s1, s15
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	f3af 8000 	nop.w
 8005888:	40040000 	.word	0x40040000
 800588c:	fcce1c58 	.word	0xfcce1c58
 8005890:	3f800e6a 	.word	0x3f800e6a
 8005894:	00000000 	.word	0x00000000

08005898 <can1_ams_cell_voltages_v8s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s5_encode(double value)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <can1_ams_cell_voltages_v8s5_encode+0x50>)
 80058a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ac:	f7fa fcde 	bl	800026c <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	a309      	add	r3, pc, #36	; (adr r3, 80058e0 <can1_ams_cell_voltages_v8s5_encode+0x48>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa ffb7 	bl	8000830 <__aeabi_ddiv>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fb f95f 	bl	8000b8c <__aeabi_d2uiz>
 80058ce:	4603      	mov	r3, r0
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	fcce1c58 	.word	0xfcce1c58
 80058e4:	3f800e6a 	.word	0x3f800e6a
 80058e8:	40040000 	.word	0x40040000
 80058ec:	00000000 	.word	0x00000000

080058f0 <can1_ams_cell_voltages_v8s5_decode>:

double can1_ams_cell_voltages_v8s5_decode(uint8_t value)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fa fdf3 	bl	80004e8 <__aeabi_ui2d>
 8005902:	a30e      	add	r3, pc, #56	; (adr r3, 800593c <can1_ams_cell_voltages_v8s5_decode+0x4c>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fe68 	bl	80005dc <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <can1_ams_cell_voltages_v8s5_decode+0x48>)
 800591a:	f7fa fca9 	bl	8000270 <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ec43 2b17 	vmov	d7, r2, r3
}
 8005926:	eeb0 0a47 	vmov.f32	s0, s14
 800592a:	eef0 0a67 	vmov.f32	s1, s15
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	f3af 8000 	nop.w
 8005938:	40040000 	.word	0x40040000
 800593c:	fcce1c58 	.word	0xfcce1c58
 8005940:	3f800e6a 	.word	0x3f800e6a
 8005944:	00000000 	.word	0x00000000

08005948 <can1_ams_cell_voltages_v2s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s6_encode(double value)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <can1_ams_cell_voltages_v2s6_encode+0x50>)
 8005958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595c:	f7fa fc86 	bl	800026c <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	a309      	add	r3, pc, #36	; (adr r3, 8005990 <can1_ams_cell_voltages_v2s6_encode+0x48>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa ff5f 	bl	8000830 <__aeabi_ddiv>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fb f907 	bl	8000b8c <__aeabi_d2uiz>
 800597e:	4603      	mov	r3, r0
 8005980:	b2db      	uxtb	r3, r3
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	fcce1c58 	.word	0xfcce1c58
 8005994:	3f800e6a 	.word	0x3f800e6a
 8005998:	40040000 	.word	0x40040000
 800599c:	00000000 	.word	0x00000000

080059a0 <can1_ams_cell_voltages_v2s6_decode>:

double can1_ams_cell_voltages_v2s6_decode(uint8_t value)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fa fd9b 	bl	80004e8 <__aeabi_ui2d>
 80059b2:	a30e      	add	r3, pc, #56	; (adr r3, 80059ec <can1_ams_cell_voltages_v2s6_decode+0x4c>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fe10 	bl	80005dc <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <can1_ams_cell_voltages_v2s6_decode+0x48>)
 80059ca:	f7fa fc51 	bl	8000270 <__adddf3>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80059d6:	eeb0 0a47 	vmov.f32	s0, s14
 80059da:	eef0 0a67 	vmov.f32	s1, s15
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	f3af 8000 	nop.w
 80059e8:	40040000 	.word	0x40040000
 80059ec:	fcce1c58 	.word	0xfcce1c58
 80059f0:	3f800e6a 	.word	0x3f800e6a
 80059f4:	00000000 	.word	0x00000000

080059f8 <can1_ams_cell_voltages_v8s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s6_encode(double value)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <can1_ams_cell_voltages_v8s6_encode+0x50>)
 8005a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0c:	f7fa fc2e 	bl	800026c <__aeabi_dsub>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	a309      	add	r3, pc, #36	; (adr r3, 8005a40 <can1_ams_cell_voltages_v8s6_encode+0x48>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa ff07 	bl	8000830 <__aeabi_ddiv>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7fb f8af 	bl	8000b8c <__aeabi_d2uiz>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w
 8005a40:	fcce1c58 	.word	0xfcce1c58
 8005a44:	3f800e6a 	.word	0x3f800e6a
 8005a48:	40040000 	.word	0x40040000
 8005a4c:	00000000 	.word	0x00000000

08005a50 <can1_ams_cell_voltages_v8s6_decode>:

double can1_ams_cell_voltages_v8s6_decode(uint8_t value)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd43 	bl	80004e8 <__aeabi_ui2d>
 8005a62:	a30e      	add	r3, pc, #56	; (adr r3, 8005a9c <can1_ams_cell_voltages_v8s6_decode+0x4c>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fdb8 	bl	80005dc <__aeabi_dmul>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <can1_ams_cell_voltages_v8s6_decode+0x48>)
 8005a7a:	f7fa fbf9 	bl	8000270 <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a86:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8a:	eef0 0a67 	vmov.f32	s1, s15
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	f3af 8000 	nop.w
 8005a98:	40040000 	.word	0x40040000
 8005a9c:	fcce1c58 	.word	0xfcce1c58
 8005aa0:	3f800e6a 	.word	0x3f800e6a
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <can1_ams_cell_voltages_v2s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s7_encode(double value)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <can1_ams_cell_voltages_v2s7_encode+0x50>)
 8005ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abc:	f7fa fbd6 	bl	800026c <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	a309      	add	r3, pc, #36	; (adr r3, 8005af0 <can1_ams_cell_voltages_v2s7_encode+0x48>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa feaf 	bl	8000830 <__aeabi_ddiv>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fb f857 	bl	8000b8c <__aeabi_d2uiz>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	b2db      	uxtb	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w
 8005af0:	fcce1c58 	.word	0xfcce1c58
 8005af4:	3f800e6a 	.word	0x3f800e6a
 8005af8:	40040000 	.word	0x40040000
 8005afc:	00000000 	.word	0x00000000

08005b00 <can1_ams_cell_voltages_v2s7_decode>:

double can1_ams_cell_voltages_v2s7_decode(uint8_t value)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fceb 	bl	80004e8 <__aeabi_ui2d>
 8005b12:	a30e      	add	r3, pc, #56	; (adr r3, 8005b4c <can1_ams_cell_voltages_v2s7_decode+0x4c>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fd60 	bl	80005dc <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <can1_ams_cell_voltages_v2s7_decode+0x48>)
 8005b2a:	f7fa fba1 	bl	8000270 <__adddf3>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b36:	eeb0 0a47 	vmov.f32	s0, s14
 8005b3a:	eef0 0a67 	vmov.f32	s1, s15
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	f3af 8000 	nop.w
 8005b48:	40040000 	.word	0x40040000
 8005b4c:	fcce1c58 	.word	0xfcce1c58
 8005b50:	3f800e6a 	.word	0x3f800e6a
 8005b54:	00000000 	.word	0x00000000

08005b58 <can1_ams_cell_voltages_v8s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s7_encode(double value)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <can1_ams_cell_voltages_v8s7_encode+0x50>)
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	f7fa fb7e 	bl	800026c <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	a309      	add	r3, pc, #36	; (adr r3, 8005ba0 <can1_ams_cell_voltages_v8s7_encode+0x48>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fe57 	bl	8000830 <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fa ffff 	bl	8000b8c <__aeabi_d2uiz>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	b2db      	uxtb	r3, r3
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	fcce1c58 	.word	0xfcce1c58
 8005ba4:	3f800e6a 	.word	0x3f800e6a
 8005ba8:	40040000 	.word	0x40040000
 8005bac:	00000000 	.word	0x00000000

08005bb0 <can1_ams_cell_voltages_v8s7_decode>:

double can1_ams_cell_voltages_v8s7_decode(uint8_t value)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fc93 	bl	80004e8 <__aeabi_ui2d>
 8005bc2:	a30e      	add	r3, pc, #56	; (adr r3, 8005bfc <can1_ams_cell_voltages_v8s7_decode+0x4c>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd08 	bl	80005dc <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <can1_ams_cell_voltages_v8s7_decode+0x48>)
 8005bda:	f7fa fb49 	bl	8000270 <__adddf3>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005be6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bea:	eef0 0a67 	vmov.f32	s1, s15
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	40040000 	.word	0x40040000
 8005bfc:	fcce1c58 	.word	0xfcce1c58
 8005c00:	3f800e6a 	.word	0x3f800e6a
 8005c04:	00000000 	.word	0x00000000

08005c08 <can1_ams_cell_voltages_v2s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s8_encode(double value)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <can1_ams_cell_voltages_v2s8_encode+0x50>)
 8005c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1c:	f7fa fb26 	bl	800026c <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4610      	mov	r0, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	a309      	add	r3, pc, #36	; (adr r3, 8005c50 <can1_ams_cell_voltages_v2s8_encode+0x48>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fdff 	bl	8000830 <__aeabi_ddiv>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fa ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	fcce1c58 	.word	0xfcce1c58
 8005c54:	3f800e6a 	.word	0x3f800e6a
 8005c58:	40040000 	.word	0x40040000
 8005c5c:	00000000 	.word	0x00000000

08005c60 <can1_ams_cell_voltages_v2s8_decode>:

double can1_ams_cell_voltages_v2s8_decode(uint8_t value)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fc3b 	bl	80004e8 <__aeabi_ui2d>
 8005c72:	a30e      	add	r3, pc, #56	; (adr r3, 8005cac <can1_ams_cell_voltages_v2s8_decode+0x4c>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fcb0 	bl	80005dc <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <can1_ams_cell_voltages_v2s8_decode+0x48>)
 8005c8a:	f7fa faf1 	bl	8000270 <__adddf3>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c96:	eeb0 0a47 	vmov.f32	s0, s14
 8005c9a:	eef0 0a67 	vmov.f32	s1, s15
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	40040000 	.word	0x40040000
 8005cac:	fcce1c58 	.word	0xfcce1c58
 8005cb0:	3f800e6a 	.word	0x3f800e6a
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <can1_ams_cell_voltages_v8s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s8_encode(double value)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <can1_ams_cell_voltages_v8s8_encode+0x50>)
 8005cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ccc:	f7fa face 	bl	800026c <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	a309      	add	r3, pc, #36	; (adr r3, 8005d00 <can1_ams_cell_voltages_v8s8_encode+0x48>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fda7 	bl	8000830 <__aeabi_ddiv>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f7fa ff4f 	bl	8000b8c <__aeabi_d2uiz>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	b2db      	uxtb	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	fcce1c58 	.word	0xfcce1c58
 8005d04:	3f800e6a 	.word	0x3f800e6a
 8005d08:	40040000 	.word	0x40040000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <can1_ams_cell_voltages_v8s8_decode>:

double can1_ams_cell_voltages_v8s8_decode(uint8_t value)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fbe3 	bl	80004e8 <__aeabi_ui2d>
 8005d22:	a30e      	add	r3, pc, #56	; (adr r3, 8005d5c <can1_ams_cell_voltages_v8s8_decode+0x4c>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fc58 	bl	80005dc <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <can1_ams_cell_voltages_v8s8_decode+0x48>)
 8005d3a:	f7fa fa99 	bl	8000270 <__adddf3>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	ec43 2b17 	vmov	d7, r2, r3
}
 8005d46:	eeb0 0a47 	vmov.f32	s0, s14
 8005d4a:	eef0 0a67 	vmov.f32	s1, s15
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	f3af 8000 	nop.w
 8005d58:	40040000 	.word	0x40040000
 8005d5c:	fcce1c58 	.word	0xfcce1c58
 8005d60:	3f800e6a 	.word	0x3f800e6a
 8005d64:	00000000 	.word	0x00000000

08005d68 <can1_ams_cell_voltages_v2s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s9_encode(double value)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <can1_ams_cell_voltages_v2s9_encode+0x50>)
 8005d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7c:	f7fa fa76 	bl	800026c <__aeabi_dsub>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	a309      	add	r3, pc, #36	; (adr r3, 8005db0 <can1_ams_cell_voltages_v2s9_encode+0x48>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fd4f 	bl	8000830 <__aeabi_ddiv>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f7fa fef7 	bl	8000b8c <__aeabi_d2uiz>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b2db      	uxtb	r3, r3
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	fcce1c58 	.word	0xfcce1c58
 8005db4:	3f800e6a 	.word	0x3f800e6a
 8005db8:	40040000 	.word	0x40040000
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <can1_ams_cell_voltages_v2s9_decode>:

double can1_ams_cell_voltages_v2s9_decode(uint8_t value)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa fb8b 	bl	80004e8 <__aeabi_ui2d>
 8005dd2:	a30e      	add	r3, pc, #56	; (adr r3, 8005e0c <can1_ams_cell_voltages_v2s9_decode+0x4c>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fc00 	bl	80005dc <__aeabi_dmul>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <can1_ams_cell_voltages_v2s9_decode+0x48>)
 8005dea:	f7fa fa41 	bl	8000270 <__adddf3>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005df6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dfa:	eef0 0a67 	vmov.f32	s1, s15
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	f3af 8000 	nop.w
 8005e08:	40040000 	.word	0x40040000
 8005e0c:	fcce1c58 	.word	0xfcce1c58
 8005e10:	3f800e6a 	.word	0x3f800e6a
 8005e14:	00000000 	.word	0x00000000

08005e18 <can1_ams_cell_voltages_v8s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s9_encode(double value)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <can1_ams_cell_voltages_v8s9_encode+0x50>)
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	f7fa fa1e 	bl	800026c <__aeabi_dsub>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	a309      	add	r3, pc, #36	; (adr r3, 8005e60 <can1_ams_cell_voltages_v8s9_encode+0x48>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fcf7 	bl	8000830 <__aeabi_ddiv>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa fe9f 	bl	8000b8c <__aeabi_d2uiz>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	b2db      	uxtb	r3, r3
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w
 8005e60:	fcce1c58 	.word	0xfcce1c58
 8005e64:	3f800e6a 	.word	0x3f800e6a
 8005e68:	40040000 	.word	0x40040000
 8005e6c:	00000000 	.word	0x00000000

08005e70 <can1_ams_cell_voltages_v8s9_decode>:

double can1_ams_cell_voltages_v8s9_decode(uint8_t value)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fb33 	bl	80004e8 <__aeabi_ui2d>
 8005e82:	a30e      	add	r3, pc, #56	; (adr r3, 8005ebc <can1_ams_cell_voltages_v8s9_decode+0x4c>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fba8 	bl	80005dc <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <can1_ams_cell_voltages_v8s9_decode+0x48>)
 8005e9a:	f7fa f9e9 	bl	8000270 <__adddf3>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8005eaa:	eef0 0a67 	vmov.f32	s1, s15
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	40040000 	.word	0x40040000
 8005ebc:	fcce1c58 	.word	0xfcce1c58
 8005ec0:	3f800e6a 	.word	0x3f800e6a
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <can1_ams_cell_voltages_v2s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s10_encode(double value)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <can1_ams_cell_voltages_v2s10_encode+0x50>)
 8005ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005edc:	f7fa f9c6 	bl	800026c <__aeabi_dsub>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	a309      	add	r3, pc, #36	; (adr r3, 8005f10 <can1_ams_cell_voltages_v2s10_encode+0x48>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fc9f 	bl	8000830 <__aeabi_ddiv>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7fa fe47 	bl	8000b8c <__aeabi_d2uiz>
 8005efe:	4603      	mov	r3, r0
 8005f00:	b2db      	uxtb	r3, r3
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	fcce1c58 	.word	0xfcce1c58
 8005f14:	3f800e6a 	.word	0x3f800e6a
 8005f18:	40040000 	.word	0x40040000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <can1_ams_cell_voltages_v2s10_decode>:

double can1_ams_cell_voltages_v2s10_decode(uint8_t value)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fadb 	bl	80004e8 <__aeabi_ui2d>
 8005f32:	a30e      	add	r3, pc, #56	; (adr r3, 8005f6c <can1_ams_cell_voltages_v2s10_decode+0x4c>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fb50 	bl	80005dc <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <can1_ams_cell_voltages_v2s10_decode+0x48>)
 8005f4a:	f7fa f991 	bl	8000270 <__adddf3>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f56:	eeb0 0a47 	vmov.f32	s0, s14
 8005f5a:	eef0 0a67 	vmov.f32	s1, s15
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	f3af 8000 	nop.w
 8005f68:	40040000 	.word	0x40040000
 8005f6c:	fcce1c58 	.word	0xfcce1c58
 8005f70:	3f800e6a 	.word	0x3f800e6a
 8005f74:	00000000 	.word	0x00000000

08005f78 <can1_ams_cell_voltages_v8s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s10_encode(double value)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <can1_ams_cell_voltages_v8s10_encode+0x50>)
 8005f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8c:	f7fa f96e 	bl	800026c <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	a309      	add	r3, pc, #36	; (adr r3, 8005fc0 <can1_ams_cell_voltages_v8s10_encode+0x48>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fc47 	bl	8000830 <__aeabi_ddiv>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fa fdef 	bl	8000b8c <__aeabi_d2uiz>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b2db      	uxtb	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	fcce1c58 	.word	0xfcce1c58
 8005fc4:	3f800e6a 	.word	0x3f800e6a
 8005fc8:	40040000 	.word	0x40040000
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <can1_ams_cell_voltages_v8s10_decode>:

double can1_ams_cell_voltages_v8s10_decode(uint8_t value)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fa83 	bl	80004e8 <__aeabi_ui2d>
 8005fe2:	a30e      	add	r3, pc, #56	; (adr r3, 800601c <can1_ams_cell_voltages_v8s10_decode+0x4c>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa faf8 	bl	80005dc <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <can1_ams_cell_voltages_v8s10_decode+0x48>)
 8005ffa:	f7fa f939 	bl	8000270 <__adddf3>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	ec43 2b17 	vmov	d7, r2, r3
}
 8006006:	eeb0 0a47 	vmov.f32	s0, s14
 800600a:	eef0 0a67 	vmov.f32	s1, s15
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	f3af 8000 	nop.w
 8006018:	40040000 	.word	0x40040000
 800601c:	fcce1c58 	.word	0xfcce1c58
 8006020:	3f800e6a 	.word	0x3f800e6a
 8006024:	00000000 	.word	0x00000000

08006028 <can1_ams_cell_voltages_v2s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s11_encode(double value)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <can1_ams_cell_voltages_v2s11_encode+0x50>)
 8006038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603c:	f7fa f916 	bl	800026c <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	a309      	add	r3, pc, #36	; (adr r3, 8006070 <can1_ams_cell_voltages_v2s11_encode+0x48>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fbef 	bl	8000830 <__aeabi_ddiv>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	f7fa fd97 	bl	8000b8c <__aeabi_d2uiz>
 800605e:	4603      	mov	r3, r0
 8006060:	b2db      	uxtb	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	fcce1c58 	.word	0xfcce1c58
 8006074:	3f800e6a 	.word	0x3f800e6a
 8006078:	40040000 	.word	0x40040000
 800607c:	00000000 	.word	0x00000000

08006080 <can1_ams_cell_voltages_v2s11_decode>:

double can1_ams_cell_voltages_v2s11_decode(uint8_t value)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa2b 	bl	80004e8 <__aeabi_ui2d>
 8006092:	a30e      	add	r3, pc, #56	; (adr r3, 80060cc <can1_ams_cell_voltages_v2s11_decode+0x4c>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa faa0 	bl	80005dc <__aeabi_dmul>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <can1_ams_cell_voltages_v2s11_decode+0x48>)
 80060aa:	f7fa f8e1 	bl	8000270 <__adddf3>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80060b6:	eeb0 0a47 	vmov.f32	s0, s14
 80060ba:	eef0 0a67 	vmov.f32	s1, s15
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	f3af 8000 	nop.w
 80060c8:	40040000 	.word	0x40040000
 80060cc:	fcce1c58 	.word	0xfcce1c58
 80060d0:	3f800e6a 	.word	0x3f800e6a
 80060d4:	00000000 	.word	0x00000000

080060d8 <can1_ams_cell_voltages_v8s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s11_encode(double value)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <can1_ams_cell_voltages_v8s11_encode+0x50>)
 80060e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ec:	f7fa f8be 	bl	800026c <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	a309      	add	r3, pc, #36	; (adr r3, 8006120 <can1_ams_cell_voltages_v8s11_encode+0x48>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fb97 	bl	8000830 <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f7fa fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800610e:	4603      	mov	r3, r0
 8006110:	b2db      	uxtb	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	fcce1c58 	.word	0xfcce1c58
 8006124:	3f800e6a 	.word	0x3f800e6a
 8006128:	40040000 	.word	0x40040000
 800612c:	00000000 	.word	0x00000000

08006130 <can1_ams_cell_voltages_v8s11_decode>:

double can1_ams_cell_voltages_v8s11_decode(uint8_t value)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa f9d3 	bl	80004e8 <__aeabi_ui2d>
 8006142:	a30e      	add	r3, pc, #56	; (adr r3, 800617c <can1_ams_cell_voltages_v8s11_decode+0x4c>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa48 	bl	80005dc <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <can1_ams_cell_voltages_v8s11_decode+0x48>)
 800615a:	f7fa f889 	bl	8000270 <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	ec43 2b17 	vmov	d7, r2, r3
}
 8006166:	eeb0 0a47 	vmov.f32	s0, s14
 800616a:	eef0 0a67 	vmov.f32	s1, s15
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	f3af 8000 	nop.w
 8006178:	40040000 	.word	0x40040000
 800617c:	fcce1c58 	.word	0xfcce1c58
 8006180:	3f800e6a 	.word	0x3f800e6a
 8006184:	00000000 	.word	0x00000000

08006188 <can1_ams_cell_voltages_v2s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s12_encode(double value)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <can1_ams_cell_voltages_v2s12_encode+0x50>)
 8006198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619c:	f7fa f866 	bl	800026c <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	a309      	add	r3, pc, #36	; (adr r3, 80061d0 <can1_ams_cell_voltages_v2s12_encode+0x48>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa fb3f 	bl	8000830 <__aeabi_ddiv>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa fce7 	bl	8000b8c <__aeabi_d2uiz>
 80061be:	4603      	mov	r3, r0
 80061c0:	b2db      	uxtb	r3, r3
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	fcce1c58 	.word	0xfcce1c58
 80061d4:	3f800e6a 	.word	0x3f800e6a
 80061d8:	40040000 	.word	0x40040000
 80061dc:	00000000 	.word	0x00000000

080061e0 <can1_ams_cell_voltages_v2s12_decode>:

double can1_ams_cell_voltages_v2s12_decode(uint8_t value)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa f97b 	bl	80004e8 <__aeabi_ui2d>
 80061f2:	a30e      	add	r3, pc, #56	; (adr r3, 800622c <can1_ams_cell_voltages_v2s12_decode+0x4c>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9f0 	bl	80005dc <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <can1_ams_cell_voltages_v2s12_decode+0x48>)
 800620a:	f7fa f831 	bl	8000270 <__adddf3>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec43 2b17 	vmov	d7, r2, r3
}
 8006216:	eeb0 0a47 	vmov.f32	s0, s14
 800621a:	eef0 0a67 	vmov.f32	s1, s15
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	f3af 8000 	nop.w
 8006228:	40040000 	.word	0x40040000
 800622c:	fcce1c58 	.word	0xfcce1c58
 8006230:	3f800e6a 	.word	0x3f800e6a
 8006234:	00000000 	.word	0x00000000

08006238 <can1_ams_cell_voltages_v8s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s12_encode(double value)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <can1_ams_cell_voltages_v8s12_encode+0x50>)
 8006248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800624c:	f7fa f80e 	bl	800026c <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	a309      	add	r3, pc, #36	; (adr r3, 8006280 <can1_ams_cell_voltages_v8s12_encode+0x48>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa fae7 	bl	8000830 <__aeabi_ddiv>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	f7fa fc8f 	bl	8000b8c <__aeabi_d2uiz>
 800626e:	4603      	mov	r3, r0
 8006270:	b2db      	uxtb	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	f3af 8000 	nop.w
 8006280:	fcce1c58 	.word	0xfcce1c58
 8006284:	3f800e6a 	.word	0x3f800e6a
 8006288:	40040000 	.word	0x40040000
 800628c:	00000000 	.word	0x00000000

08006290 <can1_ams_cell_voltages_v8s12_decode>:

double can1_ams_cell_voltages_v8s12_decode(uint8_t value)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f923 	bl	80004e8 <__aeabi_ui2d>
 80062a2:	a30e      	add	r3, pc, #56	; (adr r3, 80062dc <can1_ams_cell_voltages_v8s12_decode+0x4c>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f998 	bl	80005dc <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <can1_ams_cell_voltages_v8s12_decode+0x48>)
 80062ba:	f7f9 ffd9 	bl	8000270 <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80062c6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ca:	eef0 0a67 	vmov.f32	s1, s15
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	f3af 8000 	nop.w
 80062d8:	40040000 	.word	0x40040000
 80062dc:	fcce1c58 	.word	0xfcce1c58
 80062e0:	3f800e6a 	.word	0x3f800e6a
 80062e4:	00000000 	.word	0x00000000

080062e8 <can1_ams_cell_voltages_v3s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s1_encode(double value)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <can1_ams_cell_voltages_v3s1_encode+0x50>)
 80062f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fc:	f7f9 ffb6 	bl	800026c <__aeabi_dsub>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	a309      	add	r3, pc, #36	; (adr r3, 8006330 <can1_ams_cell_voltages_v3s1_encode+0x48>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa fa8f 	bl	8000830 <__aeabi_ddiv>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	f7fa fc37 	bl	8000b8c <__aeabi_d2uiz>
 800631e:	4603      	mov	r3, r0
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	fcce1c58 	.word	0xfcce1c58
 8006334:	3f800e6a 	.word	0x3f800e6a
 8006338:	40040000 	.word	0x40040000
 800633c:	00000000 	.word	0x00000000

08006340 <can1_ams_cell_voltages_v3s1_decode>:

double can1_ams_cell_voltages_v3s1_decode(uint8_t value)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa f8cb 	bl	80004e8 <__aeabi_ui2d>
 8006352:	a30e      	add	r3, pc, #56	; (adr r3, 800638c <can1_ams_cell_voltages_v3s1_decode+0x4c>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f940 	bl	80005dc <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <can1_ams_cell_voltages_v3s1_decode+0x48>)
 800636a:	f7f9 ff81 	bl	8000270 <__adddf3>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ec43 2b17 	vmov	d7, r2, r3
}
 8006376:	eeb0 0a47 	vmov.f32	s0, s14
 800637a:	eef0 0a67 	vmov.f32	s1, s15
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f3af 8000 	nop.w
 8006388:	40040000 	.word	0x40040000
 800638c:	fcce1c58 	.word	0xfcce1c58
 8006390:	3f800e6a 	.word	0x3f800e6a
 8006394:	00000000 	.word	0x00000000

08006398 <can1_ams_cell_voltages_v9s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s1_encode(double value)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <can1_ams_cell_voltages_v9s1_encode+0x50>)
 80063a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ac:	f7f9 ff5e 	bl	800026c <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	a309      	add	r3, pc, #36	; (adr r3, 80063e0 <can1_ams_cell_voltages_v9s1_encode+0x48>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa fa37 	bl	8000830 <__aeabi_ddiv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fa fbdf 	bl	8000b8c <__aeabi_d2uiz>
 80063ce:	4603      	mov	r3, r0
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w
 80063e0:	fcce1c58 	.word	0xfcce1c58
 80063e4:	3f800e6a 	.word	0x3f800e6a
 80063e8:	40040000 	.word	0x40040000
 80063ec:	00000000 	.word	0x00000000

080063f0 <can1_ams_cell_voltages_v9s1_decode>:

double can1_ams_cell_voltages_v9s1_decode(uint8_t value)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fa f873 	bl	80004e8 <__aeabi_ui2d>
 8006402:	a30e      	add	r3, pc, #56	; (adr r3, 800643c <can1_ams_cell_voltages_v9s1_decode+0x4c>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8e8 	bl	80005dc <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <can1_ams_cell_voltages_v9s1_decode+0x48>)
 800641a:	f7f9 ff29 	bl	8000270 <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ec43 2b17 	vmov	d7, r2, r3
}
 8006426:	eeb0 0a47 	vmov.f32	s0, s14
 800642a:	eef0 0a67 	vmov.f32	s1, s15
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	f3af 8000 	nop.w
 8006438:	40040000 	.word	0x40040000
 800643c:	fcce1c58 	.word	0xfcce1c58
 8006440:	3f800e6a 	.word	0x3f800e6a
 8006444:	00000000 	.word	0x00000000

08006448 <can1_ams_cell_voltages_v3s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s2_encode(double value)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <can1_ams_cell_voltages_v3s2_encode+0x50>)
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f7f9 ff06 	bl	800026c <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	a309      	add	r3, pc, #36	; (adr r3, 8006490 <can1_ams_cell_voltages_v3s2_encode+0x48>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f9df 	bl	8000830 <__aeabi_ddiv>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	f7fa fb87 	bl	8000b8c <__aeabi_d2uiz>
 800647e:	4603      	mov	r3, r0
 8006480:	b2db      	uxtb	r3, r3
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w
 8006490:	fcce1c58 	.word	0xfcce1c58
 8006494:	3f800e6a 	.word	0x3f800e6a
 8006498:	40040000 	.word	0x40040000
 800649c:	00000000 	.word	0x00000000

080064a0 <can1_ams_cell_voltages_v3s2_decode>:

double can1_ams_cell_voltages_v3s2_decode(uint8_t value)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa f81b 	bl	80004e8 <__aeabi_ui2d>
 80064b2:	a30e      	add	r3, pc, #56	; (adr r3, 80064ec <can1_ams_cell_voltages_v3s2_decode+0x4c>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f890 	bl	80005dc <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <can1_ams_cell_voltages_v3s2_decode+0x48>)
 80064ca:	f7f9 fed1 	bl	8000270 <__adddf3>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80064d6:	eeb0 0a47 	vmov.f32	s0, s14
 80064da:	eef0 0a67 	vmov.f32	s1, s15
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	f3af 8000 	nop.w
 80064e8:	40040000 	.word	0x40040000
 80064ec:	fcce1c58 	.word	0xfcce1c58
 80064f0:	3f800e6a 	.word	0x3f800e6a
 80064f4:	00000000 	.word	0x00000000

080064f8 <can1_ams_cell_voltages_v9s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s2_encode(double value)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <can1_ams_cell_voltages_v9s2_encode+0x50>)
 8006508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800650c:	f7f9 feae 	bl	800026c <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	a309      	add	r3, pc, #36	; (adr r3, 8006540 <can1_ams_cell_voltages_v9s2_encode+0x48>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f987 	bl	8000830 <__aeabi_ddiv>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f7fa fb2f 	bl	8000b8c <__aeabi_d2uiz>
 800652e:	4603      	mov	r3, r0
 8006530:	b2db      	uxtb	r3, r3
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	fcce1c58 	.word	0xfcce1c58
 8006544:	3f800e6a 	.word	0x3f800e6a
 8006548:	40040000 	.word	0x40040000
 800654c:	00000000 	.word	0x00000000

08006550 <can1_ams_cell_voltages_v9s2_decode>:

double can1_ams_cell_voltages_v9s2_decode(uint8_t value)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	4618      	mov	r0, r3
 800655e:	f7f9 ffc3 	bl	80004e8 <__aeabi_ui2d>
 8006562:	a30e      	add	r3, pc, #56	; (adr r3, 800659c <can1_ams_cell_voltages_v9s2_decode+0x4c>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f838 	bl	80005dc <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <can1_ams_cell_voltages_v9s2_decode+0x48>)
 800657a:	f7f9 fe79 	bl	8000270 <__adddf3>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	ec43 2b17 	vmov	d7, r2, r3
}
 8006586:	eeb0 0a47 	vmov.f32	s0, s14
 800658a:	eef0 0a67 	vmov.f32	s1, s15
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	f3af 8000 	nop.w
 8006598:	40040000 	.word	0x40040000
 800659c:	fcce1c58 	.word	0xfcce1c58
 80065a0:	3f800e6a 	.word	0x3f800e6a
 80065a4:	00000000 	.word	0x00000000

080065a8 <can1_ams_cell_voltages_v3s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s3_encode(double value)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <can1_ams_cell_voltages_v3s3_encode+0x50>)
 80065b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065bc:	f7f9 fe56 	bl	800026c <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	a309      	add	r3, pc, #36	; (adr r3, 80065f0 <can1_ams_cell_voltages_v3s3_encode+0x48>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f92f 	bl	8000830 <__aeabi_ddiv>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fad7 	bl	8000b8c <__aeabi_d2uiz>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2db      	uxtb	r3, r3
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w
 80065f0:	fcce1c58 	.word	0xfcce1c58
 80065f4:	3f800e6a 	.word	0x3f800e6a
 80065f8:	40040000 	.word	0x40040000
 80065fc:	00000000 	.word	0x00000000

08006600 <can1_ams_cell_voltages_v3s3_decode>:

double can1_ams_cell_voltages_v3s3_decode(uint8_t value)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	4618      	mov	r0, r3
 800660e:	f7f9 ff6b 	bl	80004e8 <__aeabi_ui2d>
 8006612:	a30e      	add	r3, pc, #56	; (adr r3, 800664c <can1_ams_cell_voltages_v3s3_decode+0x4c>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 ffe0 	bl	80005dc <__aeabi_dmul>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <can1_ams_cell_voltages_v3s3_decode+0x48>)
 800662a:	f7f9 fe21 	bl	8000270 <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	ec43 2b17 	vmov	d7, r2, r3
}
 8006636:	eeb0 0a47 	vmov.f32	s0, s14
 800663a:	eef0 0a67 	vmov.f32	s1, s15
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	f3af 8000 	nop.w
 8006648:	40040000 	.word	0x40040000
 800664c:	fcce1c58 	.word	0xfcce1c58
 8006650:	3f800e6a 	.word	0x3f800e6a
 8006654:	00000000 	.word	0x00000000

08006658 <can1_ams_cell_voltages_v9s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s3_encode(double value)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <can1_ams_cell_voltages_v9s3_encode+0x50>)
 8006668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666c:	f7f9 fdfe 	bl	800026c <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	a309      	add	r3, pc, #36	; (adr r3, 80066a0 <can1_ams_cell_voltages_v9s3_encode+0x48>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7fa f8d7 	bl	8000830 <__aeabi_ddiv>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fa7f 	bl	8000b8c <__aeabi_d2uiz>
 800668e:	4603      	mov	r3, r0
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	fcce1c58 	.word	0xfcce1c58
 80066a4:	3f800e6a 	.word	0x3f800e6a
 80066a8:	40040000 	.word	0x40040000
 80066ac:	00000000 	.word	0x00000000

080066b0 <can1_ams_cell_voltages_v9s3_decode>:

double can1_ams_cell_voltages_v9s3_decode(uint8_t value)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff13 	bl	80004e8 <__aeabi_ui2d>
 80066c2:	a30e      	add	r3, pc, #56	; (adr r3, 80066fc <can1_ams_cell_voltages_v9s3_decode+0x4c>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff88 	bl	80005dc <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <can1_ams_cell_voltages_v9s3_decode+0x48>)
 80066da:	f7f9 fdc9 	bl	8000270 <__adddf3>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80066e6:	eeb0 0a47 	vmov.f32	s0, s14
 80066ea:	eef0 0a67 	vmov.f32	s1, s15
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	f3af 8000 	nop.w
 80066f8:	40040000 	.word	0x40040000
 80066fc:	fcce1c58 	.word	0xfcce1c58
 8006700:	3f800e6a 	.word	0x3f800e6a
 8006704:	00000000 	.word	0x00000000

08006708 <can1_ams_cell_voltages_v3s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s4_encode(double value)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <can1_ams_cell_voltages_v3s4_encode+0x50>)
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f7f9 fda6 	bl	800026c <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	a309      	add	r3, pc, #36	; (adr r3, 8006750 <can1_ams_cell_voltages_v3s4_encode+0x48>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7fa f87f 	bl	8000830 <__aeabi_ddiv>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa fa27 	bl	8000b8c <__aeabi_d2uiz>
 800673e:	4603      	mov	r3, r0
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	fcce1c58 	.word	0xfcce1c58
 8006754:	3f800e6a 	.word	0x3f800e6a
 8006758:	40040000 	.word	0x40040000
 800675c:	00000000 	.word	0x00000000

08006760 <can1_ams_cell_voltages_v3s4_decode>:

double can1_ams_cell_voltages_v3s4_decode(uint8_t value)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 febb 	bl	80004e8 <__aeabi_ui2d>
 8006772:	a30e      	add	r3, pc, #56	; (adr r3, 80067ac <can1_ams_cell_voltages_v3s4_decode+0x4c>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 ff30 	bl	80005dc <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4610      	mov	r0, r2
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <can1_ams_cell_voltages_v3s4_decode+0x48>)
 800678a:	f7f9 fd71 	bl	8000270 <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	ec43 2b17 	vmov	d7, r2, r3
}
 8006796:	eeb0 0a47 	vmov.f32	s0, s14
 800679a:	eef0 0a67 	vmov.f32	s1, s15
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	f3af 8000 	nop.w
 80067a8:	40040000 	.word	0x40040000
 80067ac:	fcce1c58 	.word	0xfcce1c58
 80067b0:	3f800e6a 	.word	0x3f800e6a
 80067b4:	00000000 	.word	0x00000000

080067b8 <can1_ams_cell_voltages_v9s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s4_encode(double value)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <can1_ams_cell_voltages_v9s4_encode+0x50>)
 80067c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067cc:	f7f9 fd4e 	bl	800026c <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	a309      	add	r3, pc, #36	; (adr r3, 8006800 <can1_ams_cell_voltages_v9s4_encode+0x48>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7fa f827 	bl	8000830 <__aeabi_ddiv>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fa f9cf 	bl	8000b8c <__aeabi_d2uiz>
 80067ee:	4603      	mov	r3, r0
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
 8006800:	fcce1c58 	.word	0xfcce1c58
 8006804:	3f800e6a 	.word	0x3f800e6a
 8006808:	40040000 	.word	0x40040000
 800680c:	00000000 	.word	0x00000000

08006810 <can1_ams_cell_voltages_v9s4_decode>:

double can1_ams_cell_voltages_v9s4_decode(uint8_t value)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe63 	bl	80004e8 <__aeabi_ui2d>
 8006822:	a30e      	add	r3, pc, #56	; (adr r3, 800685c <can1_ams_cell_voltages_v9s4_decode+0x4c>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fed8 	bl	80005dc <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <can1_ams_cell_voltages_v9s4_decode+0x48>)
 800683a:	f7f9 fd19 	bl	8000270 <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	ec43 2b17 	vmov	d7, r2, r3
}
 8006846:	eeb0 0a47 	vmov.f32	s0, s14
 800684a:	eef0 0a67 	vmov.f32	s1, s15
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	f3af 8000 	nop.w
 8006858:	40040000 	.word	0x40040000
 800685c:	fcce1c58 	.word	0xfcce1c58
 8006860:	3f800e6a 	.word	0x3f800e6a
 8006864:	00000000 	.word	0x00000000

08006868 <can1_ams_cell_voltages_v3s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s5_encode(double value)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <can1_ams_cell_voltages_v3s5_encode+0x50>)
 8006878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687c:	f7f9 fcf6 	bl	800026c <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	a309      	add	r3, pc, #36	; (adr r3, 80068b0 <can1_ams_cell_voltages_v3s5_encode+0x48>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 ffcf 	bl	8000830 <__aeabi_ddiv>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f977 	bl	8000b8c <__aeabi_d2uiz>
 800689e:	4603      	mov	r3, r0
 80068a0:	b2db      	uxtb	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w
 80068b0:	fcce1c58 	.word	0xfcce1c58
 80068b4:	3f800e6a 	.word	0x3f800e6a
 80068b8:	40040000 	.word	0x40040000
 80068bc:	00000000 	.word	0x00000000

080068c0 <can1_ams_cell_voltages_v3s5_decode>:

double can1_ams_cell_voltages_v3s5_decode(uint8_t value)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7f9 fe0b 	bl	80004e8 <__aeabi_ui2d>
 80068d2:	a30e      	add	r3, pc, #56	; (adr r3, 800690c <can1_ams_cell_voltages_v3s5_decode+0x4c>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fe80 	bl	80005dc <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4610      	mov	r0, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <can1_ams_cell_voltages_v3s5_decode+0x48>)
 80068ea:	f7f9 fcc1 	bl	8000270 <__adddf3>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80068f6:	eeb0 0a47 	vmov.f32	s0, s14
 80068fa:	eef0 0a67 	vmov.f32	s1, s15
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	f3af 8000 	nop.w
 8006908:	40040000 	.word	0x40040000
 800690c:	fcce1c58 	.word	0xfcce1c58
 8006910:	3f800e6a 	.word	0x3f800e6a
 8006914:	00000000 	.word	0x00000000

08006918 <can1_ams_cell_voltages_v9s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s5_encode(double value)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <can1_ams_cell_voltages_v9s5_encode+0x50>)
 8006928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692c:	f7f9 fc9e 	bl	800026c <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	a309      	add	r3, pc, #36	; (adr r3, 8006960 <can1_ams_cell_voltages_v9s5_encode+0x48>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 ff77 	bl	8000830 <__aeabi_ddiv>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	f7fa f91f 	bl	8000b8c <__aeabi_d2uiz>
 800694e:	4603      	mov	r3, r0
 8006950:	b2db      	uxtb	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	fcce1c58 	.word	0xfcce1c58
 8006964:	3f800e6a 	.word	0x3f800e6a
 8006968:	40040000 	.word	0x40040000
 800696c:	00000000 	.word	0x00000000

08006970 <can1_ams_cell_voltages_v9s5_decode>:

double can1_ams_cell_voltages_v9s5_decode(uint8_t value)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	4618      	mov	r0, r3
 800697e:	f7f9 fdb3 	bl	80004e8 <__aeabi_ui2d>
 8006982:	a30e      	add	r3, pc, #56	; (adr r3, 80069bc <can1_ams_cell_voltages_v9s5_decode+0x4c>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fe28 	bl	80005dc <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <can1_ams_cell_voltages_v9s5_decode+0x48>)
 800699a:	f7f9 fc69 	bl	8000270 <__adddf3>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80069a6:	eeb0 0a47 	vmov.f32	s0, s14
 80069aa:	eef0 0a67 	vmov.f32	s1, s15
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	f3af 8000 	nop.w
 80069b8:	40040000 	.word	0x40040000
 80069bc:	fcce1c58 	.word	0xfcce1c58
 80069c0:	3f800e6a 	.word	0x3f800e6a
 80069c4:	00000000 	.word	0x00000000

080069c8 <can1_ams_cell_voltages_v3s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s6_encode(double value)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <can1_ams_cell_voltages_v3s6_encode+0x50>)
 80069d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069dc:	f7f9 fc46 	bl	800026c <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	a309      	add	r3, pc, #36	; (adr r3, 8006a10 <can1_ams_cell_voltages_v3s6_encode+0x48>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 ff1f 	bl	8000830 <__aeabi_ddiv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7fa f8c7 	bl	8000b8c <__aeabi_d2uiz>
 80069fe:	4603      	mov	r3, r0
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w
 8006a10:	fcce1c58 	.word	0xfcce1c58
 8006a14:	3f800e6a 	.word	0x3f800e6a
 8006a18:	40040000 	.word	0x40040000
 8006a1c:	00000000 	.word	0x00000000

08006a20 <can1_ams_cell_voltages_v3s6_decode>:

double can1_ams_cell_voltages_v3s6_decode(uint8_t value)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fd5b 	bl	80004e8 <__aeabi_ui2d>
 8006a32:	a30e      	add	r3, pc, #56	; (adr r3, 8006a6c <can1_ams_cell_voltages_v3s6_decode+0x4c>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fdd0 	bl	80005dc <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <can1_ams_cell_voltages_v3s6_decode+0x48>)
 8006a4a:	f7f9 fc11 	bl	8000270 <__adddf3>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8006a56:	eeb0 0a47 	vmov.f32	s0, s14
 8006a5a:	eef0 0a67 	vmov.f32	s1, s15
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	f3af 8000 	nop.w
 8006a68:	40040000 	.word	0x40040000
 8006a6c:	fcce1c58 	.word	0xfcce1c58
 8006a70:	3f800e6a 	.word	0x3f800e6a
 8006a74:	00000000 	.word	0x00000000

08006a78 <can1_ams_cell_voltages_v9s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s6_encode(double value)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <can1_ams_cell_voltages_v9s6_encode+0x50>)
 8006a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8c:	f7f9 fbee 	bl	800026c <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	a309      	add	r3, pc, #36	; (adr r3, 8006ac0 <can1_ams_cell_voltages_v9s6_encode+0x48>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fec7 	bl	8000830 <__aeabi_ddiv>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f7fa f86f 	bl	8000b8c <__aeabi_d2uiz>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	b2db      	uxtb	r3, r3
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	fcce1c58 	.word	0xfcce1c58
 8006ac4:	3f800e6a 	.word	0x3f800e6a
 8006ac8:	40040000 	.word	0x40040000
 8006acc:	00000000 	.word	0x00000000

08006ad0 <can1_ams_cell_voltages_v9s6_decode>:

double can1_ams_cell_voltages_v9s6_decode(uint8_t value)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7f9 fd03 	bl	80004e8 <__aeabi_ui2d>
 8006ae2:	a30e      	add	r3, pc, #56	; (adr r3, 8006b1c <can1_ams_cell_voltages_v9s6_decode+0x4c>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd78 	bl	80005dc <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4610      	mov	r0, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <can1_ams_cell_voltages_v9s6_decode+0x48>)
 8006afa:	f7f9 fbb9 	bl	8000270 <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b06:	eeb0 0a47 	vmov.f32	s0, s14
 8006b0a:	eef0 0a67 	vmov.f32	s1, s15
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	f3af 8000 	nop.w
 8006b18:	40040000 	.word	0x40040000
 8006b1c:	fcce1c58 	.word	0xfcce1c58
 8006b20:	3f800e6a 	.word	0x3f800e6a
 8006b24:	00000000 	.word	0x00000000

08006b28 <can1_ams_cell_voltages_v3s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s7_encode(double value)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <can1_ams_cell_voltages_v3s7_encode+0x50>)
 8006b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3c:	f7f9 fb96 	bl	800026c <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	a309      	add	r3, pc, #36	; (adr r3, 8006b70 <can1_ams_cell_voltages_v3s7_encode+0x48>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fe6f 	bl	8000830 <__aeabi_ddiv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fa f817 	bl	8000b8c <__aeabi_d2uiz>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	b2db      	uxtb	r3, r3
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	fcce1c58 	.word	0xfcce1c58
 8006b74:	3f800e6a 	.word	0x3f800e6a
 8006b78:	40040000 	.word	0x40040000
 8006b7c:	00000000 	.word	0x00000000

08006b80 <can1_ams_cell_voltages_v3s7_decode>:

double can1_ams_cell_voltages_v3s7_decode(uint8_t value)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7f9 fcab 	bl	80004e8 <__aeabi_ui2d>
 8006b92:	a30e      	add	r3, pc, #56	; (adr r3, 8006bcc <can1_ams_cell_voltages_v3s7_decode+0x4c>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fd20 	bl	80005dc <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <can1_ams_cell_voltages_v3s7_decode+0x48>)
 8006baa:	f7f9 fb61 	bl	8000270 <__adddf3>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8006bba:	eef0 0a67 	vmov.f32	s1, s15
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	40040000 	.word	0x40040000
 8006bcc:	fcce1c58 	.word	0xfcce1c58
 8006bd0:	3f800e6a 	.word	0x3f800e6a
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <can1_ams_cell_voltages_v9s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s7_encode(double value)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <can1_ams_cell_voltages_v9s7_encode+0x50>)
 8006be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bec:	f7f9 fb3e 	bl	800026c <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	a309      	add	r3, pc, #36	; (adr r3, 8006c20 <can1_ams_cell_voltages_v9s7_encode+0x48>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fe17 	bl	8000830 <__aeabi_ddiv>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7f9 ffbf 	bl	8000b8c <__aeabi_d2uiz>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	b2db      	uxtb	r3, r3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w
 8006c20:	fcce1c58 	.word	0xfcce1c58
 8006c24:	3f800e6a 	.word	0x3f800e6a
 8006c28:	40040000 	.word	0x40040000
 8006c2c:	00000000 	.word	0x00000000

08006c30 <can1_ams_cell_voltages_v9s7_decode>:

double can1_ams_cell_voltages_v9s7_decode(uint8_t value)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fc53 	bl	80004e8 <__aeabi_ui2d>
 8006c42:	a30e      	add	r3, pc, #56	; (adr r3, 8006c7c <can1_ams_cell_voltages_v9s7_decode+0x4c>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fcc8 	bl	80005dc <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <can1_ams_cell_voltages_v9s7_decode+0x48>)
 8006c5a:	f7f9 fb09 	bl	8000270 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c66:	eeb0 0a47 	vmov.f32	s0, s14
 8006c6a:	eef0 0a67 	vmov.f32	s1, s15
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	f3af 8000 	nop.w
 8006c78:	40040000 	.word	0x40040000
 8006c7c:	fcce1c58 	.word	0xfcce1c58
 8006c80:	3f800e6a 	.word	0x3f800e6a
 8006c84:	00000000 	.word	0x00000000

08006c88 <can1_ams_cell_voltages_v3s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s8_encode(double value)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <can1_ams_cell_voltages_v3s8_encode+0x50>)
 8006c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9c:	f7f9 fae6 	bl	800026c <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	a309      	add	r3, pc, #36	; (adr r3, 8006cd0 <can1_ams_cell_voltages_v3s8_encode+0x48>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fdbf 	bl	8000830 <__aeabi_ddiv>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7f9 ff67 	bl	8000b8c <__aeabi_d2uiz>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	b2db      	uxtb	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
 8006cd0:	fcce1c58 	.word	0xfcce1c58
 8006cd4:	3f800e6a 	.word	0x3f800e6a
 8006cd8:	40040000 	.word	0x40040000
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <can1_ams_cell_voltages_v3s8_decode>:

double can1_ams_cell_voltages_v3s8_decode(uint8_t value)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7f9 fbfb 	bl	80004e8 <__aeabi_ui2d>
 8006cf2:	a30e      	add	r3, pc, #56	; (adr r3, 8006d2c <can1_ams_cell_voltages_v3s8_decode+0x4c>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fc70 	bl	80005dc <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <can1_ams_cell_voltages_v3s8_decode+0x48>)
 8006d0a:	f7f9 fab1 	bl	8000270 <__adddf3>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d16:	eeb0 0a47 	vmov.f32	s0, s14
 8006d1a:	eef0 0a67 	vmov.f32	s1, s15
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	f3af 8000 	nop.w
 8006d28:	40040000 	.word	0x40040000
 8006d2c:	fcce1c58 	.word	0xfcce1c58
 8006d30:	3f800e6a 	.word	0x3f800e6a
 8006d34:	00000000 	.word	0x00000000

08006d38 <can1_ams_cell_voltages_v9s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s8_encode(double value)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <can1_ams_cell_voltages_v9s8_encode+0x50>)
 8006d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4c:	f7f9 fa8e 	bl	800026c <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	a309      	add	r3, pc, #36	; (adr r3, 8006d80 <can1_ams_cell_voltages_v9s8_encode+0x48>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fd67 	bl	8000830 <__aeabi_ddiv>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 ff0f 	bl	8000b8c <__aeabi_d2uiz>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	b2db      	uxtb	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	f3af 8000 	nop.w
 8006d80:	fcce1c58 	.word	0xfcce1c58
 8006d84:	3f800e6a 	.word	0x3f800e6a
 8006d88:	40040000 	.word	0x40040000
 8006d8c:	00000000 	.word	0x00000000

08006d90 <can1_ams_cell_voltages_v9s8_decode>:

double can1_ams_cell_voltages_v9s8_decode(uint8_t value)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7f9 fba3 	bl	80004e8 <__aeabi_ui2d>
 8006da2:	a30e      	add	r3, pc, #56	; (adr r3, 8006ddc <can1_ams_cell_voltages_v9s8_decode+0x4c>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fc18 	bl	80005dc <__aeabi_dmul>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <can1_ams_cell_voltages_v9s8_decode+0x48>)
 8006dba:	f7f9 fa59 	bl	8000270 <__adddf3>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8006dca:	eef0 0a67 	vmov.f32	s1, s15
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	40040000 	.word	0x40040000
 8006ddc:	fcce1c58 	.word	0xfcce1c58
 8006de0:	3f800e6a 	.word	0x3f800e6a
 8006de4:	00000000 	.word	0x00000000

08006de8 <can1_ams_cell_voltages_v3s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s9_encode(double value)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <can1_ams_cell_voltages_v3s9_encode+0x50>)
 8006df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfc:	f7f9 fa36 	bl	800026c <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4610      	mov	r0, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	a309      	add	r3, pc, #36	; (adr r3, 8006e30 <can1_ams_cell_voltages_v3s9_encode+0x48>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fd0f 	bl	8000830 <__aeabi_ddiv>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7f9 feb7 	bl	8000b8c <__aeabi_d2uiz>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	fcce1c58 	.word	0xfcce1c58
 8006e34:	3f800e6a 	.word	0x3f800e6a
 8006e38:	40040000 	.word	0x40040000
 8006e3c:	00000000 	.word	0x00000000

08006e40 <can1_ams_cell_voltages_v3s9_decode>:

double can1_ams_cell_voltages_v3s9_decode(uint8_t value)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fb4b 	bl	80004e8 <__aeabi_ui2d>
 8006e52:	a30e      	add	r3, pc, #56	; (adr r3, 8006e8c <can1_ams_cell_voltages_v3s9_decode+0x4c>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fbc0 	bl	80005dc <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <can1_ams_cell_voltages_v3s9_decode+0x48>)
 8006e6a:	f7f9 fa01 	bl	8000270 <__adddf3>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e76:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7a:	eef0 0a67 	vmov.f32	s1, s15
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	f3af 8000 	nop.w
 8006e88:	40040000 	.word	0x40040000
 8006e8c:	fcce1c58 	.word	0xfcce1c58
 8006e90:	3f800e6a 	.word	0x3f800e6a
 8006e94:	00000000 	.word	0x00000000

08006e98 <can1_ams_cell_voltages_v9s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s9_encode(double value)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <can1_ams_cell_voltages_v9s9_encode+0x50>)
 8006ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eac:	f7f9 f9de 	bl	800026c <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	a309      	add	r3, pc, #36	; (adr r3, 8006ee0 <can1_ams_cell_voltages_v9s9_encode+0x48>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fcb7 	bl	8000830 <__aeabi_ddiv>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 fe5f 	bl	8000b8c <__aeabi_d2uiz>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	b2db      	uxtb	r3, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	fcce1c58 	.word	0xfcce1c58
 8006ee4:	3f800e6a 	.word	0x3f800e6a
 8006ee8:	40040000 	.word	0x40040000
 8006eec:	00000000 	.word	0x00000000

08006ef0 <can1_ams_cell_voltages_v9s9_decode>:

double can1_ams_cell_voltages_v9s9_decode(uint8_t value)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7f9 faf3 	bl	80004e8 <__aeabi_ui2d>
 8006f02:	a30e      	add	r3, pc, #56	; (adr r3, 8006f3c <can1_ams_cell_voltages_v9s9_decode+0x4c>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 fb68 	bl	80005dc <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <can1_ams_cell_voltages_v9s9_decode+0x48>)
 8006f1a:	f7f9 f9a9 	bl	8000270 <__adddf3>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f26:	eeb0 0a47 	vmov.f32	s0, s14
 8006f2a:	eef0 0a67 	vmov.f32	s1, s15
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	f3af 8000 	nop.w
 8006f38:	40040000 	.word	0x40040000
 8006f3c:	fcce1c58 	.word	0xfcce1c58
 8006f40:	3f800e6a 	.word	0x3f800e6a
 8006f44:	00000000 	.word	0x00000000

08006f48 <can1_ams_cell_voltages_v3s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s10_encode(double value)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <can1_ams_cell_voltages_v3s10_encode+0x50>)
 8006f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5c:	f7f9 f986 	bl	800026c <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	a309      	add	r3, pc, #36	; (adr r3, 8006f90 <can1_ams_cell_voltages_v3s10_encode+0x48>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 fc5f 	bl	8000830 <__aeabi_ddiv>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7f9 fe07 	bl	8000b8c <__aeabi_d2uiz>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	b2db      	uxtb	r3, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	fcce1c58 	.word	0xfcce1c58
 8006f94:	3f800e6a 	.word	0x3f800e6a
 8006f98:	40040000 	.word	0x40040000
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <can1_ams_cell_voltages_v3s10_decode>:

double can1_ams_cell_voltages_v3s10_decode(uint8_t value)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7f9 fa9b 	bl	80004e8 <__aeabi_ui2d>
 8006fb2:	a30e      	add	r3, pc, #56	; (adr r3, 8006fec <can1_ams_cell_voltages_v3s10_decode+0x4c>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 fb10 	bl	80005dc <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <can1_ams_cell_voltages_v3s10_decode+0x48>)
 8006fca:	f7f9 f951 	bl	8000270 <__adddf3>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8006fda:	eef0 0a67 	vmov.f32	s1, s15
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	40040000 	.word	0x40040000
 8006fec:	fcce1c58 	.word	0xfcce1c58
 8006ff0:	3f800e6a 	.word	0x3f800e6a
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <can1_ams_cell_voltages_v9s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s10_encode(double value)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <can1_ams_cell_voltages_v9s10_encode+0x50>)
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700c:	f7f9 f92e 	bl	800026c <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	a309      	add	r3, pc, #36	; (adr r3, 8007040 <can1_ams_cell_voltages_v9s10_encode+0x48>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fc07 	bl	8000830 <__aeabi_ddiv>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f7f9 fdaf 	bl	8000b8c <__aeabi_d2uiz>
 800702e:	4603      	mov	r3, r0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	fcce1c58 	.word	0xfcce1c58
 8007044:	3f800e6a 	.word	0x3f800e6a
 8007048:	40040000 	.word	0x40040000
 800704c:	00000000 	.word	0x00000000

08007050 <can1_ams_cell_voltages_v9s10_decode>:

double can1_ams_cell_voltages_v9s10_decode(uint8_t value)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7f9 fa43 	bl	80004e8 <__aeabi_ui2d>
 8007062:	a30e      	add	r3, pc, #56	; (adr r3, 800709c <can1_ams_cell_voltages_v9s10_decode+0x4c>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7f9 fab8 	bl	80005dc <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4610      	mov	r0, r2
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <can1_ams_cell_voltages_v9s10_decode+0x48>)
 800707a:	f7f9 f8f9 	bl	8000270 <__adddf3>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	ec43 2b17 	vmov	d7, r2, r3
}
 8007086:	eeb0 0a47 	vmov.f32	s0, s14
 800708a:	eef0 0a67 	vmov.f32	s1, s15
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	f3af 8000 	nop.w
 8007098:	40040000 	.word	0x40040000
 800709c:	fcce1c58 	.word	0xfcce1c58
 80070a0:	3f800e6a 	.word	0x3f800e6a
 80070a4:	00000000 	.word	0x00000000

080070a8 <can1_ams_cell_voltages_v3s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s11_encode(double value)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <can1_ams_cell_voltages_v3s11_encode+0x50>)
 80070b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070bc:	f7f9 f8d6 	bl	800026c <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	a309      	add	r3, pc, #36	; (adr r3, 80070f0 <can1_ams_cell_voltages_v3s11_encode+0x48>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fbaf 	bl	8000830 <__aeabi_ddiv>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f7f9 fd57 	bl	8000b8c <__aeabi_d2uiz>
 80070de:	4603      	mov	r3, r0
 80070e0:	b2db      	uxtb	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w
 80070f0:	fcce1c58 	.word	0xfcce1c58
 80070f4:	3f800e6a 	.word	0x3f800e6a
 80070f8:	40040000 	.word	0x40040000
 80070fc:	00000000 	.word	0x00000000

08007100 <can1_ams_cell_voltages_v3s11_decode>:

double can1_ams_cell_voltages_v3s11_decode(uint8_t value)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 f9eb 	bl	80004e8 <__aeabi_ui2d>
 8007112:	a30e      	add	r3, pc, #56	; (adr r3, 800714c <can1_ams_cell_voltages_v3s11_decode+0x4c>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fa60 	bl	80005dc <__aeabi_dmul>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4610      	mov	r0, r2
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <can1_ams_cell_voltages_v3s11_decode+0x48>)
 800712a:	f7f9 f8a1 	bl	8000270 <__adddf3>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	ec43 2b17 	vmov	d7, r2, r3
}
 8007136:	eeb0 0a47 	vmov.f32	s0, s14
 800713a:	eef0 0a67 	vmov.f32	s1, s15
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	f3af 8000 	nop.w
 8007148:	40040000 	.word	0x40040000
 800714c:	fcce1c58 	.word	0xfcce1c58
 8007150:	3f800e6a 	.word	0x3f800e6a
 8007154:	00000000 	.word	0x00000000

08007158 <can1_ams_cell_voltages_v9s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s11_encode(double value)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <can1_ams_cell_voltages_v9s11_encode+0x50>)
 8007168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716c:	f7f9 f87e 	bl	800026c <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4610      	mov	r0, r2
 8007176:	4619      	mov	r1, r3
 8007178:	a309      	add	r3, pc, #36	; (adr r3, 80071a0 <can1_ams_cell_voltages_v9s11_encode+0x48>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f7f9 fb57 	bl	8000830 <__aeabi_ddiv>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	f7f9 fcff 	bl	8000b8c <__aeabi_d2uiz>
 800718e:	4603      	mov	r3, r0
 8007190:	b2db      	uxtb	r3, r3
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w
 80071a0:	fcce1c58 	.word	0xfcce1c58
 80071a4:	3f800e6a 	.word	0x3f800e6a
 80071a8:	40040000 	.word	0x40040000
 80071ac:	00000000 	.word	0x00000000

080071b0 <can1_ams_cell_voltages_v9s11_decode>:

double can1_ams_cell_voltages_v9s11_decode(uint8_t value)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f993 	bl	80004e8 <__aeabi_ui2d>
 80071c2:	a30e      	add	r3, pc, #56	; (adr r3, 80071fc <can1_ams_cell_voltages_v9s11_decode+0x4c>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa08 	bl	80005dc <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <can1_ams_cell_voltages_v9s11_decode+0x48>)
 80071da:	f7f9 f849 	bl	8000270 <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80071e6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ea:	eef0 0a67 	vmov.f32	s1, s15
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	f3af 8000 	nop.w
 80071f8:	40040000 	.word	0x40040000
 80071fc:	fcce1c58 	.word	0xfcce1c58
 8007200:	3f800e6a 	.word	0x3f800e6a
 8007204:	00000000 	.word	0x00000000

08007208 <can1_ams_cell_voltages_v3s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s12_encode(double value)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <can1_ams_cell_voltages_v3s12_encode+0x50>)
 8007218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800721c:	f7f9 f826 	bl	800026c <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	a309      	add	r3, pc, #36	; (adr r3, 8007250 <can1_ams_cell_voltages_v3s12_encode+0x48>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f7f9 faff 	bl	8000830 <__aeabi_ddiv>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	f7f9 fca7 	bl	8000b8c <__aeabi_d2uiz>
 800723e:	4603      	mov	r3, r0
 8007240:	b2db      	uxtb	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	fcce1c58 	.word	0xfcce1c58
 8007254:	3f800e6a 	.word	0x3f800e6a
 8007258:	40040000 	.word	0x40040000
 800725c:	00000000 	.word	0x00000000

08007260 <can1_ams_cell_voltages_v3s12_decode>:

double can1_ams_cell_voltages_v3s12_decode(uint8_t value)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f93b 	bl	80004e8 <__aeabi_ui2d>
 8007272:	a30e      	add	r3, pc, #56	; (adr r3, 80072ac <can1_ams_cell_voltages_v3s12_decode+0x4c>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9b0 	bl	80005dc <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <can1_ams_cell_voltages_v3s12_decode+0x48>)
 800728a:	f7f8 fff1 	bl	8000270 <__adddf3>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	ec43 2b17 	vmov	d7, r2, r3
}
 8007296:	eeb0 0a47 	vmov.f32	s0, s14
 800729a:	eef0 0a67 	vmov.f32	s1, s15
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	f3af 8000 	nop.w
 80072a8:	40040000 	.word	0x40040000
 80072ac:	fcce1c58 	.word	0xfcce1c58
 80072b0:	3f800e6a 	.word	0x3f800e6a
 80072b4:	00000000 	.word	0x00000000

080072b8 <can1_ams_cell_voltages_v9s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s12_encode(double value)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <can1_ams_cell_voltages_v9s12_encode+0x50>)
 80072c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072cc:	f7f8 ffce 	bl	800026c <__aeabi_dsub>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	a309      	add	r3, pc, #36	; (adr r3, 8007300 <can1_ams_cell_voltages_v9s12_encode+0x48>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f9 faa7 	bl	8000830 <__aeabi_ddiv>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 fc4f 	bl	8000b8c <__aeabi_d2uiz>
 80072ee:	4603      	mov	r3, r0
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w
 8007300:	fcce1c58 	.word	0xfcce1c58
 8007304:	3f800e6a 	.word	0x3f800e6a
 8007308:	40040000 	.word	0x40040000
 800730c:	00000000 	.word	0x00000000

08007310 <can1_ams_cell_voltages_v9s12_decode>:

double can1_ams_cell_voltages_v9s12_decode(uint8_t value)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4618      	mov	r0, r3
 800731e:	f7f9 f8e3 	bl	80004e8 <__aeabi_ui2d>
 8007322:	a30e      	add	r3, pc, #56	; (adr r3, 800735c <can1_ams_cell_voltages_v9s12_decode+0x4c>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f958 	bl	80005dc <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4610      	mov	r0, r2
 8007332:	4619      	mov	r1, r3
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <can1_ams_cell_voltages_v9s12_decode+0x48>)
 800733a:	f7f8 ff99 	bl	8000270 <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	ec43 2b17 	vmov	d7, r2, r3
}
 8007346:	eeb0 0a47 	vmov.f32	s0, s14
 800734a:	eef0 0a67 	vmov.f32	s1, s15
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	f3af 8000 	nop.w
 8007358:	40040000 	.word	0x40040000
 800735c:	fcce1c58 	.word	0xfcce1c58
 8007360:	3f800e6a 	.word	0x3f800e6a
 8007364:	00000000 	.word	0x00000000

08007368 <can1_ams_cell_voltages_v4s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s1_encode(double value)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <can1_ams_cell_voltages_v4s1_encode+0x50>)
 8007378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800737c:	f7f8 ff76 	bl	800026c <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	a309      	add	r3, pc, #36	; (adr r3, 80073b0 <can1_ams_cell_voltages_v4s1_encode+0x48>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 fa4f 	bl	8000830 <__aeabi_ddiv>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4610      	mov	r0, r2
 8007398:	4619      	mov	r1, r3
 800739a:	f7f9 fbf7 	bl	8000b8c <__aeabi_d2uiz>
 800739e:	4603      	mov	r3, r0
 80073a0:	b2db      	uxtb	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	f3af 8000 	nop.w
 80073b0:	fcce1c58 	.word	0xfcce1c58
 80073b4:	3f800e6a 	.word	0x3f800e6a
 80073b8:	40040000 	.word	0x40040000
 80073bc:	00000000 	.word	0x00000000

080073c0 <can1_ams_cell_voltages_v4s1_decode>:

double can1_ams_cell_voltages_v4s1_decode(uint8_t value)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7f9 f88b 	bl	80004e8 <__aeabi_ui2d>
 80073d2:	a30e      	add	r3, pc, #56	; (adr r3, 800740c <can1_ams_cell_voltages_v4s1_decode+0x4c>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f900 	bl	80005dc <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <can1_ams_cell_voltages_v4s1_decode+0x48>)
 80073ea:	f7f8 ff41 	bl	8000270 <__adddf3>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80073f6:	eeb0 0a47 	vmov.f32	s0, s14
 80073fa:	eef0 0a67 	vmov.f32	s1, s15
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	f3af 8000 	nop.w
 8007408:	40040000 	.word	0x40040000
 800740c:	fcce1c58 	.word	0xfcce1c58
 8007410:	3f800e6a 	.word	0x3f800e6a
 8007414:	00000000 	.word	0x00000000

08007418 <can1_ams_cell_voltages_v10s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s1_encode(double value)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <can1_ams_cell_voltages_v10s1_encode+0x50>)
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	f7f8 ff1e 	bl	800026c <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	a309      	add	r3, pc, #36	; (adr r3, 8007460 <can1_ams_cell_voltages_v10s1_encode+0x48>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f9f7 	bl	8000830 <__aeabi_ddiv>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	f7f9 fb9f 	bl	8000b8c <__aeabi_d2uiz>
 800744e:	4603      	mov	r3, r0
 8007450:	b2db      	uxtb	r3, r3
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w
 8007460:	fcce1c58 	.word	0xfcce1c58
 8007464:	3f800e6a 	.word	0x3f800e6a
 8007468:	40040000 	.word	0x40040000
 800746c:	00000000 	.word	0x00000000

08007470 <can1_ams_cell_voltages_v10s1_decode>:

double can1_ams_cell_voltages_v10s1_decode(uint8_t value)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	4618      	mov	r0, r3
 800747e:	f7f9 f833 	bl	80004e8 <__aeabi_ui2d>
 8007482:	a30e      	add	r3, pc, #56	; (adr r3, 80074bc <can1_ams_cell_voltages_v10s1_decode+0x4c>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f9 f8a8 	bl	80005dc <__aeabi_dmul>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4610      	mov	r0, r2
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <can1_ams_cell_voltages_v10s1_decode+0x48>)
 800749a:	f7f8 fee9 	bl	8000270 <__adddf3>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80074a6:	eeb0 0a47 	vmov.f32	s0, s14
 80074aa:	eef0 0a67 	vmov.f32	s1, s15
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	f3af 8000 	nop.w
 80074b8:	40040000 	.word	0x40040000
 80074bc:	fcce1c58 	.word	0xfcce1c58
 80074c0:	3f800e6a 	.word	0x3f800e6a
 80074c4:	00000000 	.word	0x00000000

080074c8 <can1_ams_cell_voltages_v4s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s2_encode(double value)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <can1_ams_cell_voltages_v4s2_encode+0x50>)
 80074d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074dc:	f7f8 fec6 	bl	800026c <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	a309      	add	r3, pc, #36	; (adr r3, 8007510 <can1_ams_cell_voltages_v4s2_encode+0x48>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f99f 	bl	8000830 <__aeabi_ddiv>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7f9 fb47 	bl	8000b8c <__aeabi_d2uiz>
 80074fe:	4603      	mov	r3, r0
 8007500:	b2db      	uxtb	r3, r3
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	fcce1c58 	.word	0xfcce1c58
 8007514:	3f800e6a 	.word	0x3f800e6a
 8007518:	40040000 	.word	0x40040000
 800751c:	00000000 	.word	0x00000000

08007520 <can1_ams_cell_voltages_v4s2_decode>:

double can1_ams_cell_voltages_v4s2_decode(uint8_t value)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	4618      	mov	r0, r3
 800752e:	f7f8 ffdb 	bl	80004e8 <__aeabi_ui2d>
 8007532:	a30e      	add	r3, pc, #56	; (adr r3, 800756c <can1_ams_cell_voltages_v4s2_decode+0x4c>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f9 f850 	bl	80005dc <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <can1_ams_cell_voltages_v4s2_decode+0x48>)
 800754a:	f7f8 fe91 	bl	8000270 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	ec43 2b17 	vmov	d7, r2, r3
}
 8007556:	eeb0 0a47 	vmov.f32	s0, s14
 800755a:	eef0 0a67 	vmov.f32	s1, s15
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	f3af 8000 	nop.w
 8007568:	40040000 	.word	0x40040000
 800756c:	fcce1c58 	.word	0xfcce1c58
 8007570:	3f800e6a 	.word	0x3f800e6a
 8007574:	00000000 	.word	0x00000000

08007578 <can1_ams_cell_voltages_v10s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s2_encode(double value)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <can1_ams_cell_voltages_v10s2_encode+0x50>)
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	f7f8 fe6e 	bl	800026c <__aeabi_dsub>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	a309      	add	r3, pc, #36	; (adr r3, 80075c0 <can1_ams_cell_voltages_v10s2_encode+0x48>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f947 	bl	8000830 <__aeabi_ddiv>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7f9 faef 	bl	8000b8c <__aeabi_d2uiz>
 80075ae:	4603      	mov	r3, r0
 80075b0:	b2db      	uxtb	r3, r3
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	fcce1c58 	.word	0xfcce1c58
 80075c4:	3f800e6a 	.word	0x3f800e6a
 80075c8:	40040000 	.word	0x40040000
 80075cc:	00000000 	.word	0x00000000

080075d0 <can1_ams_cell_voltages_v10s2_decode>:

double can1_ams_cell_voltages_v10s2_decode(uint8_t value)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ff83 	bl	80004e8 <__aeabi_ui2d>
 80075e2:	a30e      	add	r3, pc, #56	; (adr r3, 800761c <can1_ams_cell_voltages_v10s2_decode+0x4c>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fff8 	bl	80005dc <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <can1_ams_cell_voltages_v10s2_decode+0x48>)
 80075fa:	f7f8 fe39 	bl	8000270 <__adddf3>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	ec43 2b17 	vmov	d7, r2, r3
}
 8007606:	eeb0 0a47 	vmov.f32	s0, s14
 800760a:	eef0 0a67 	vmov.f32	s1, s15
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	f3af 8000 	nop.w
 8007618:	40040000 	.word	0x40040000
 800761c:	fcce1c58 	.word	0xfcce1c58
 8007620:	3f800e6a 	.word	0x3f800e6a
 8007624:	00000000 	.word	0x00000000

08007628 <can1_ams_cell_voltages_v4s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s3_encode(double value)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <can1_ams_cell_voltages_v4s3_encode+0x50>)
 8007638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763c:	f7f8 fe16 	bl	800026c <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	a309      	add	r3, pc, #36	; (adr r3, 8007670 <can1_ams_cell_voltages_v4s3_encode+0x48>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 f8ef 	bl	8000830 <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f7f9 fa97 	bl	8000b8c <__aeabi_d2uiz>
 800765e:	4603      	mov	r3, r0
 8007660:	b2db      	uxtb	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
 8007670:	fcce1c58 	.word	0xfcce1c58
 8007674:	3f800e6a 	.word	0x3f800e6a
 8007678:	40040000 	.word	0x40040000
 800767c:	00000000 	.word	0x00000000

08007680 <can1_ams_cell_voltages_v4s3_decode>:

double can1_ams_cell_voltages_v4s3_decode(uint8_t value)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	4618      	mov	r0, r3
 800768e:	f7f8 ff2b 	bl	80004e8 <__aeabi_ui2d>
 8007692:	a30e      	add	r3, pc, #56	; (adr r3, 80076cc <can1_ams_cell_voltages_v4s3_decode+0x4c>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 ffa0 	bl	80005dc <__aeabi_dmul>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <can1_ams_cell_voltages_v4s3_decode+0x48>)
 80076aa:	f7f8 fde1 	bl	8000270 <__adddf3>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80076b6:	eeb0 0a47 	vmov.f32	s0, s14
 80076ba:	eef0 0a67 	vmov.f32	s1, s15
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	f3af 8000 	nop.w
 80076c8:	40040000 	.word	0x40040000
 80076cc:	fcce1c58 	.word	0xfcce1c58
 80076d0:	3f800e6a 	.word	0x3f800e6a
 80076d4:	00000000 	.word	0x00000000

080076d8 <can1_ams_cell_voltages_v10s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s3_encode(double value)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <can1_ams_cell_voltages_v10s3_encode+0x50>)
 80076e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ec:	f7f8 fdbe 	bl	800026c <__aeabi_dsub>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4610      	mov	r0, r2
 80076f6:	4619      	mov	r1, r3
 80076f8:	a309      	add	r3, pc, #36	; (adr r3, 8007720 <can1_ams_cell_voltages_v10s3_encode+0x48>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f9 f897 	bl	8000830 <__aeabi_ddiv>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	f7f9 fa3f 	bl	8000b8c <__aeabi_d2uiz>
 800770e:	4603      	mov	r3, r0
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	fcce1c58 	.word	0xfcce1c58
 8007724:	3f800e6a 	.word	0x3f800e6a
 8007728:	40040000 	.word	0x40040000
 800772c:	00000000 	.word	0x00000000

08007730 <can1_ams_cell_voltages_v10s3_decode>:

double can1_ams_cell_voltages_v10s3_decode(uint8_t value)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7f8 fed3 	bl	80004e8 <__aeabi_ui2d>
 8007742:	a30e      	add	r3, pc, #56	; (adr r3, 800777c <can1_ams_cell_voltages_v10s3_decode+0x4c>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 ff48 	bl	80005dc <__aeabi_dmul>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4610      	mov	r0, r2
 8007752:	4619      	mov	r1, r3
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <can1_ams_cell_voltages_v10s3_decode+0x48>)
 800775a:	f7f8 fd89 	bl	8000270 <__adddf3>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	ec43 2b17 	vmov	d7, r2, r3
}
 8007766:	eeb0 0a47 	vmov.f32	s0, s14
 800776a:	eef0 0a67 	vmov.f32	s1, s15
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	f3af 8000 	nop.w
 8007778:	40040000 	.word	0x40040000
 800777c:	fcce1c58 	.word	0xfcce1c58
 8007780:	3f800e6a 	.word	0x3f800e6a
 8007784:	00000000 	.word	0x00000000

08007788 <can1_ams_cell_voltages_v4s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s4_encode(double value)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <can1_ams_cell_voltages_v4s4_encode+0x50>)
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	f7f8 fd66 	bl	800026c <__aeabi_dsub>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4610      	mov	r0, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	a309      	add	r3, pc, #36	; (adr r3, 80077d0 <can1_ams_cell_voltages_v4s4_encode+0x48>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f9 f83f 	bl	8000830 <__aeabi_ddiv>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7f9 f9e7 	bl	8000b8c <__aeabi_d2uiz>
 80077be:	4603      	mov	r3, r0
 80077c0:	b2db      	uxtb	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	fcce1c58 	.word	0xfcce1c58
 80077d4:	3f800e6a 	.word	0x3f800e6a
 80077d8:	40040000 	.word	0x40040000
 80077dc:	00000000 	.word	0x00000000

080077e0 <can1_ams_cell_voltages_v4s4_decode>:

double can1_ams_cell_voltages_v4s4_decode(uint8_t value)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 fe7b 	bl	80004e8 <__aeabi_ui2d>
 80077f2:	a30e      	add	r3, pc, #56	; (adr r3, 800782c <can1_ams_cell_voltages_v4s4_decode+0x4c>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fef0 	bl	80005dc <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <can1_ams_cell_voltages_v4s4_decode+0x48>)
 800780a:	f7f8 fd31 	bl	8000270 <__adddf3>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	ec43 2b17 	vmov	d7, r2, r3
}
 8007816:	eeb0 0a47 	vmov.f32	s0, s14
 800781a:	eef0 0a67 	vmov.f32	s1, s15
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	f3af 8000 	nop.w
 8007828:	40040000 	.word	0x40040000
 800782c:	fcce1c58 	.word	0xfcce1c58
 8007830:	3f800e6a 	.word	0x3f800e6a
 8007834:	00000000 	.word	0x00000000

08007838 <can1_ams_cell_voltages_v10s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s4_encode(double value)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <can1_ams_cell_voltages_v10s4_encode+0x50>)
 8007848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784c:	f7f8 fd0e 	bl	800026c <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4610      	mov	r0, r2
 8007856:	4619      	mov	r1, r3
 8007858:	a309      	add	r3, pc, #36	; (adr r3, 8007880 <can1_ams_cell_voltages_v10s4_encode+0x48>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 ffe7 	bl	8000830 <__aeabi_ddiv>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	f7f9 f98f 	bl	8000b8c <__aeabi_d2uiz>
 800786e:	4603      	mov	r3, r0
 8007870:	b2db      	uxtb	r3, r3
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w
 8007880:	fcce1c58 	.word	0xfcce1c58
 8007884:	3f800e6a 	.word	0x3f800e6a
 8007888:	40040000 	.word	0x40040000
 800788c:	00000000 	.word	0x00000000

08007890 <can1_ams_cell_voltages_v10s4_decode>:

double can1_ams_cell_voltages_v10s4_decode(uint8_t value)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f7f8 fe23 	bl	80004e8 <__aeabi_ui2d>
 80078a2:	a30e      	add	r3, pc, #56	; (adr r3, 80078dc <can1_ams_cell_voltages_v10s4_decode+0x4c>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fe98 	bl	80005dc <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <can1_ams_cell_voltages_v10s4_decode+0x48>)
 80078ba:	f7f8 fcd9 	bl	8000270 <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80078c6:	eeb0 0a47 	vmov.f32	s0, s14
 80078ca:	eef0 0a67 	vmov.f32	s1, s15
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	f3af 8000 	nop.w
 80078d8:	40040000 	.word	0x40040000
 80078dc:	fcce1c58 	.word	0xfcce1c58
 80078e0:	3f800e6a 	.word	0x3f800e6a
 80078e4:	00000000 	.word	0x00000000

080078e8 <can1_ams_cell_voltages_v4s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s5_encode(double value)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	4b10      	ldr	r3, [pc, #64]	; (8007938 <can1_ams_cell_voltages_v4s5_encode+0x50>)
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f7f8 fcb6 	bl	800026c <__aeabi_dsub>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	a309      	add	r3, pc, #36	; (adr r3, 8007930 <can1_ams_cell_voltages_v4s5_encode+0x48>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 ff8f 	bl	8000830 <__aeabi_ddiv>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	f7f9 f937 	bl	8000b8c <__aeabi_d2uiz>
 800791e:	4603      	mov	r3, r0
 8007920:	b2db      	uxtb	r3, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	fcce1c58 	.word	0xfcce1c58
 8007934:	3f800e6a 	.word	0x3f800e6a
 8007938:	40040000 	.word	0x40040000
 800793c:	00000000 	.word	0x00000000

08007940 <can1_ams_cell_voltages_v4s5_decode>:

double can1_ams_cell_voltages_v4s5_decode(uint8_t value)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	4618      	mov	r0, r3
 800794e:	f7f8 fdcb 	bl	80004e8 <__aeabi_ui2d>
 8007952:	a30e      	add	r3, pc, #56	; (adr r3, 800798c <can1_ams_cell_voltages_v4s5_decode+0x4c>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fe40 	bl	80005dc <__aeabi_dmul>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4610      	mov	r0, r2
 8007962:	4619      	mov	r1, r3
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <can1_ams_cell_voltages_v4s5_decode+0x48>)
 800796a:	f7f8 fc81 	bl	8000270 <__adddf3>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	ec43 2b17 	vmov	d7, r2, r3
}
 8007976:	eeb0 0a47 	vmov.f32	s0, s14
 800797a:	eef0 0a67 	vmov.f32	s1, s15
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	f3af 8000 	nop.w
 8007988:	40040000 	.word	0x40040000
 800798c:	fcce1c58 	.word	0xfcce1c58
 8007990:	3f800e6a 	.word	0x3f800e6a
 8007994:	00000000 	.word	0x00000000

08007998 <can1_ams_cell_voltages_v10s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s5_encode(double value)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <can1_ams_cell_voltages_v10s5_encode+0x50>)
 80079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ac:	f7f8 fc5e 	bl	800026c <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	a309      	add	r3, pc, #36	; (adr r3, 80079e0 <can1_ams_cell_voltages_v10s5_encode+0x48>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 ff37 	bl	8000830 <__aeabi_ddiv>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7f9 f8df 	bl	8000b8c <__aeabi_d2uiz>
 80079ce:	4603      	mov	r3, r0
 80079d0:	b2db      	uxtb	r3, r3
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	fcce1c58 	.word	0xfcce1c58
 80079e4:	3f800e6a 	.word	0x3f800e6a
 80079e8:	40040000 	.word	0x40040000
 80079ec:	00000000 	.word	0x00000000

080079f0 <can1_ams_cell_voltages_v10s5_decode>:

double can1_ams_cell_voltages_v10s5_decode(uint8_t value)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f8 fd73 	bl	80004e8 <__aeabi_ui2d>
 8007a02:	a30e      	add	r3, pc, #56	; (adr r3, 8007a3c <can1_ams_cell_voltages_v10s5_decode+0x4c>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fde8 	bl	80005dc <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <can1_ams_cell_voltages_v10s5_decode+0x48>)
 8007a1a:	f7f8 fc29 	bl	8000270 <__adddf3>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec43 2b17 	vmov	d7, r2, r3
}
 8007a26:	eeb0 0a47 	vmov.f32	s0, s14
 8007a2a:	eef0 0a67 	vmov.f32	s1, s15
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	f3af 8000 	nop.w
 8007a38:	40040000 	.word	0x40040000
 8007a3c:	fcce1c58 	.word	0xfcce1c58
 8007a40:	3f800e6a 	.word	0x3f800e6a
 8007a44:	00000000 	.word	0x00000000

08007a48 <can1_ams_cell_voltages_v4s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s6_encode(double value)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <can1_ams_cell_voltages_v4s6_encode+0x50>)
 8007a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5c:	f7f8 fc06 	bl	800026c <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	a309      	add	r3, pc, #36	; (adr r3, 8007a90 <can1_ams_cell_voltages_v4s6_encode+0x48>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fedf 	bl	8000830 <__aeabi_ddiv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7f9 f887 	bl	8000b8c <__aeabi_d2uiz>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	b2db      	uxtb	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w
 8007a90:	fcce1c58 	.word	0xfcce1c58
 8007a94:	3f800e6a 	.word	0x3f800e6a
 8007a98:	40040000 	.word	0x40040000
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <can1_ams_cell_voltages_v4s6_decode>:

double can1_ams_cell_voltages_v4s6_decode(uint8_t value)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd1b 	bl	80004e8 <__aeabi_ui2d>
 8007ab2:	a30e      	add	r3, pc, #56	; (adr r3, 8007aec <can1_ams_cell_voltages_v4s6_decode+0x4c>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fd90 	bl	80005dc <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <can1_ams_cell_voltages_v4s6_decode+0x48>)
 8007aca:	f7f8 fbd1 	bl	8000270 <__adddf3>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8007ada:	eef0 0a67 	vmov.f32	s1, s15
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	40040000 	.word	0x40040000
 8007aec:	fcce1c58 	.word	0xfcce1c58
 8007af0:	3f800e6a 	.word	0x3f800e6a
 8007af4:	00000000 	.word	0x00000000

08007af8 <can1_ams_cell_voltages_v10s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s6_encode(double value)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <can1_ams_cell_voltages_v10s6_encode+0x50>)
 8007b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0c:	f7f8 fbae 	bl	800026c <__aeabi_dsub>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4610      	mov	r0, r2
 8007b16:	4619      	mov	r1, r3
 8007b18:	a309      	add	r3, pc, #36	; (adr r3, 8007b40 <can1_ams_cell_voltages_v10s6_encode+0x48>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fe87 	bl	8000830 <__aeabi_ddiv>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f7f9 f82f 	bl	8000b8c <__aeabi_d2uiz>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	b2db      	uxtb	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	fcce1c58 	.word	0xfcce1c58
 8007b44:	3f800e6a 	.word	0x3f800e6a
 8007b48:	40040000 	.word	0x40040000
 8007b4c:	00000000 	.word	0x00000000

08007b50 <can1_ams_cell_voltages_v10s6_decode>:

double can1_ams_cell_voltages_v10s6_decode(uint8_t value)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7f8 fcc3 	bl	80004e8 <__aeabi_ui2d>
 8007b62:	a30e      	add	r3, pc, #56	; (adr r3, 8007b9c <can1_ams_cell_voltages_v10s6_decode+0x4c>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fd38 	bl	80005dc <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4610      	mov	r0, r2
 8007b72:	4619      	mov	r1, r3
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <can1_ams_cell_voltages_v10s6_decode+0x48>)
 8007b7a:	f7f8 fb79 	bl	8000270 <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	ec43 2b17 	vmov	d7, r2, r3
}
 8007b86:	eeb0 0a47 	vmov.f32	s0, s14
 8007b8a:	eef0 0a67 	vmov.f32	s1, s15
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	f3af 8000 	nop.w
 8007b98:	40040000 	.word	0x40040000
 8007b9c:	fcce1c58 	.word	0xfcce1c58
 8007ba0:	3f800e6a 	.word	0x3f800e6a
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <can1_ams_cell_voltages_v4s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s7_encode(double value)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <can1_ams_cell_voltages_v4s7_encode+0x50>)
 8007bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bbc:	f7f8 fb56 	bl	800026c <__aeabi_dsub>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	a309      	add	r3, pc, #36	; (adr r3, 8007bf0 <can1_ams_cell_voltages_v4s7_encode+0x48>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fe2f 	bl	8000830 <__aeabi_ddiv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 ffd7 	bl	8000b8c <__aeabi_d2uiz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	fcce1c58 	.word	0xfcce1c58
 8007bf4:	3f800e6a 	.word	0x3f800e6a
 8007bf8:	40040000 	.word	0x40040000
 8007bfc:	00000000 	.word	0x00000000

08007c00 <can1_ams_cell_voltages_v4s7_decode>:

double can1_ams_cell_voltages_v4s7_decode(uint8_t value)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc6b 	bl	80004e8 <__aeabi_ui2d>
 8007c12:	a30e      	add	r3, pc, #56	; (adr r3, 8007c4c <can1_ams_cell_voltages_v4s7_decode+0x4c>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fce0 	bl	80005dc <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <can1_ams_cell_voltages_v4s7_decode+0x48>)
 8007c2a:	f7f8 fb21 	bl	8000270 <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	ec43 2b17 	vmov	d7, r2, r3
}
 8007c36:	eeb0 0a47 	vmov.f32	s0, s14
 8007c3a:	eef0 0a67 	vmov.f32	s1, s15
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	f3af 8000 	nop.w
 8007c48:	40040000 	.word	0x40040000
 8007c4c:	fcce1c58 	.word	0xfcce1c58
 8007c50:	3f800e6a 	.word	0x3f800e6a
 8007c54:	00000000 	.word	0x00000000

08007c58 <can1_ams_cell_voltages_v10s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s7_encode(double value)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <can1_ams_cell_voltages_v10s7_encode+0x50>)
 8007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6c:	f7f8 fafe 	bl	800026c <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	a309      	add	r3, pc, #36	; (adr r3, 8007ca0 <can1_ams_cell_voltages_v10s7_encode+0x48>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fdd7 	bl	8000830 <__aeabi_ddiv>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 ff7f 	bl	8000b8c <__aeabi_d2uiz>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	fcce1c58 	.word	0xfcce1c58
 8007ca4:	3f800e6a 	.word	0x3f800e6a
 8007ca8:	40040000 	.word	0x40040000
 8007cac:	00000000 	.word	0x00000000

08007cb0 <can1_ams_cell_voltages_v10s7_decode>:

double can1_ams_cell_voltages_v10s7_decode(uint8_t value)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fc13 	bl	80004e8 <__aeabi_ui2d>
 8007cc2:	a30e      	add	r3, pc, #56	; (adr r3, 8007cfc <can1_ams_cell_voltages_v10s7_decode+0x4c>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc88 	bl	80005dc <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <can1_ams_cell_voltages_v10s7_decode+0x48>)
 8007cda:	f7f8 fac9 	bl	8000270 <__adddf3>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8007cea:	eef0 0a67 	vmov.f32	s1, s15
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	40040000 	.word	0x40040000
 8007cfc:	fcce1c58 	.word	0xfcce1c58
 8007d00:	3f800e6a 	.word	0x3f800e6a
 8007d04:	00000000 	.word	0x00000000

08007d08 <can1_ams_cell_voltages_v4s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s8_encode(double value)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <can1_ams_cell_voltages_v4s8_encode+0x50>)
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f7f8 faa6 	bl	800026c <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4610      	mov	r0, r2
 8007d26:	4619      	mov	r1, r3
 8007d28:	a309      	add	r3, pc, #36	; (adr r3, 8007d50 <can1_ams_cell_voltages_v4s8_encode+0x48>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fd7f 	bl	8000830 <__aeabi_ddiv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7f8 ff27 	bl	8000b8c <__aeabi_d2uiz>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	fcce1c58 	.word	0xfcce1c58
 8007d54:	3f800e6a 	.word	0x3f800e6a
 8007d58:	40040000 	.word	0x40040000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <can1_ams_cell_voltages_v4s8_decode>:

double can1_ams_cell_voltages_v4s8_decode(uint8_t value)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f8 fbbb 	bl	80004e8 <__aeabi_ui2d>
 8007d72:	a30e      	add	r3, pc, #56	; (adr r3, 8007dac <can1_ams_cell_voltages_v4s8_decode+0x4c>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f7f8 fc30 	bl	80005dc <__aeabi_dmul>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <can1_ams_cell_voltages_v4s8_decode+0x48>)
 8007d8a:	f7f8 fa71 	bl	8000270 <__adddf3>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d96:	eeb0 0a47 	vmov.f32	s0, s14
 8007d9a:	eef0 0a67 	vmov.f32	s1, s15
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	f3af 8000 	nop.w
 8007da8:	40040000 	.word	0x40040000
 8007dac:	fcce1c58 	.word	0xfcce1c58
 8007db0:	3f800e6a 	.word	0x3f800e6a
 8007db4:	00000000 	.word	0x00000000

08007db8 <can1_ams_cell_voltages_v10s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s8_encode(double value)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <can1_ams_cell_voltages_v10s8_encode+0x50>)
 8007dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dcc:	f7f8 fa4e 	bl	800026c <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	a309      	add	r3, pc, #36	; (adr r3, 8007e00 <can1_ams_cell_voltages_v10s8_encode+0x48>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fd27 	bl	8000830 <__aeabi_ddiv>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 fecf 	bl	8000b8c <__aeabi_d2uiz>
 8007dee:	4603      	mov	r3, r0
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w
 8007e00:	fcce1c58 	.word	0xfcce1c58
 8007e04:	3f800e6a 	.word	0x3f800e6a
 8007e08:	40040000 	.word	0x40040000
 8007e0c:	00000000 	.word	0x00000000

08007e10 <can1_ams_cell_voltages_v10s8_decode>:

double can1_ams_cell_voltages_v10s8_decode(uint8_t value)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f8 fb63 	bl	80004e8 <__aeabi_ui2d>
 8007e22:	a30e      	add	r3, pc, #56	; (adr r3, 8007e5c <can1_ams_cell_voltages_v10s8_decode+0x4c>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fbd8 	bl	80005dc <__aeabi_dmul>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4610      	mov	r0, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <can1_ams_cell_voltages_v10s8_decode+0x48>)
 8007e3a:	f7f8 fa19 	bl	8000270 <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	ec43 2b17 	vmov	d7, r2, r3
}
 8007e46:	eeb0 0a47 	vmov.f32	s0, s14
 8007e4a:	eef0 0a67 	vmov.f32	s1, s15
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	f3af 8000 	nop.w
 8007e58:	40040000 	.word	0x40040000
 8007e5c:	fcce1c58 	.word	0xfcce1c58
 8007e60:	3f800e6a 	.word	0x3f800e6a
 8007e64:	00000000 	.word	0x00000000

08007e68 <can1_ams_cell_voltages_v4s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s9_encode(double value)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <can1_ams_cell_voltages_v4s9_encode+0x50>)
 8007e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7c:	f7f8 f9f6 	bl	800026c <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	a309      	add	r3, pc, #36	; (adr r3, 8007eb0 <can1_ams_cell_voltages_v4s9_encode+0x48>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fccf 	bl	8000830 <__aeabi_ddiv>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4610      	mov	r0, r2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7f8 fe77 	bl	8000b8c <__aeabi_d2uiz>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w
 8007eb0:	fcce1c58 	.word	0xfcce1c58
 8007eb4:	3f800e6a 	.word	0x3f800e6a
 8007eb8:	40040000 	.word	0x40040000
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <can1_ams_cell_voltages_v4s9_decode>:

double can1_ams_cell_voltages_v4s9_decode(uint8_t value)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb0b 	bl	80004e8 <__aeabi_ui2d>
 8007ed2:	a30e      	add	r3, pc, #56	; (adr r3, 8007f0c <can1_ams_cell_voltages_v4s9_decode+0x4c>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fb80 	bl	80005dc <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <can1_ams_cell_voltages_v4s9_decode+0x48>)
 8007eea:	f7f8 f9c1 	bl	8000270 <__adddf3>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8007efa:	eef0 0a67 	vmov.f32	s1, s15
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	f3af 8000 	nop.w
 8007f08:	40040000 	.word	0x40040000
 8007f0c:	fcce1c58 	.word	0xfcce1c58
 8007f10:	3f800e6a 	.word	0x3f800e6a
 8007f14:	00000000 	.word	0x00000000

08007f18 <can1_ams_cell_voltages_v10s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s9_encode(double value)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <can1_ams_cell_voltages_v10s9_encode+0x50>)
 8007f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2c:	f7f8 f99e 	bl	800026c <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	a309      	add	r3, pc, #36	; (adr r3, 8007f60 <can1_ams_cell_voltages_v10s9_encode+0x48>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fc77 	bl	8000830 <__aeabi_ddiv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f7f8 fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	b2db      	uxtb	r3, r3
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	fcce1c58 	.word	0xfcce1c58
 8007f64:	3f800e6a 	.word	0x3f800e6a
 8007f68:	40040000 	.word	0x40040000
 8007f6c:	00000000 	.word	0x00000000

08007f70 <can1_ams_cell_voltages_v10s9_decode>:

double can1_ams_cell_voltages_v10s9_decode(uint8_t value)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f8 fab3 	bl	80004e8 <__aeabi_ui2d>
 8007f82:	a30e      	add	r3, pc, #56	; (adr r3, 8007fbc <can1_ams_cell_voltages_v10s9_decode+0x4c>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fb28 	bl	80005dc <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <can1_ams_cell_voltages_v10s9_decode+0x48>)
 8007f9a:	f7f8 f969 	bl	8000270 <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8007faa:	eef0 0a67 	vmov.f32	s1, s15
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	40040000 	.word	0x40040000
 8007fbc:	fcce1c58 	.word	0xfcce1c58
 8007fc0:	3f800e6a 	.word	0x3f800e6a
 8007fc4:	00000000 	.word	0x00000000

08007fc8 <can1_ams_cell_voltages_v4s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s10_encode(double value)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <can1_ams_cell_voltages_v4s10_encode+0x50>)
 8007fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fdc:	f7f8 f946 	bl	800026c <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	a309      	add	r3, pc, #36	; (adr r3, 8008010 <can1_ams_cell_voltages_v4s10_encode+0x48>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fc1f 	bl	8000830 <__aeabi_ddiv>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7f8 fdc7 	bl	8000b8c <__aeabi_d2uiz>
 8007ffe:	4603      	mov	r3, r0
 8008000:	b2db      	uxtb	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w
 8008010:	fcce1c58 	.word	0xfcce1c58
 8008014:	3f800e6a 	.word	0x3f800e6a
 8008018:	40040000 	.word	0x40040000
 800801c:	00000000 	.word	0x00000000

08008020 <can1_ams_cell_voltages_v4s10_decode>:

double can1_ams_cell_voltages_v4s10_decode(uint8_t value)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	4618      	mov	r0, r3
 800802e:	f7f8 fa5b 	bl	80004e8 <__aeabi_ui2d>
 8008032:	a30e      	add	r3, pc, #56	; (adr r3, 800806c <can1_ams_cell_voltages_v4s10_decode+0x4c>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fad0 	bl	80005dc <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	4b07      	ldr	r3, [pc, #28]	; (8008068 <can1_ams_cell_voltages_v4s10_decode+0x48>)
 800804a:	f7f8 f911 	bl	8000270 <__adddf3>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	ec43 2b17 	vmov	d7, r2, r3
}
 8008056:	eeb0 0a47 	vmov.f32	s0, s14
 800805a:	eef0 0a67 	vmov.f32	s1, s15
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	f3af 8000 	nop.w
 8008068:	40040000 	.word	0x40040000
 800806c:	fcce1c58 	.word	0xfcce1c58
 8008070:	3f800e6a 	.word	0x3f800e6a
 8008074:	00000000 	.word	0x00000000

08008078 <can1_ams_cell_voltages_v10s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s10_encode(double value)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <can1_ams_cell_voltages_v10s10_encode+0x50>)
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	f7f8 f8ee 	bl	800026c <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	a309      	add	r3, pc, #36	; (adr r3, 80080c0 <can1_ams_cell_voltages_v10s10_encode+0x48>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 fbc7 	bl	8000830 <__aeabi_ddiv>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7f8 fd6f 	bl	8000b8c <__aeabi_d2uiz>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b2db      	uxtb	r3, r3
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w
 80080c0:	fcce1c58 	.word	0xfcce1c58
 80080c4:	3f800e6a 	.word	0x3f800e6a
 80080c8:	40040000 	.word	0x40040000
 80080cc:	00000000 	.word	0x00000000

080080d0 <can1_ams_cell_voltages_v10s10_decode>:

double can1_ams_cell_voltages_v10s10_decode(uint8_t value)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f8 fa03 	bl	80004e8 <__aeabi_ui2d>
 80080e2:	a30e      	add	r3, pc, #56	; (adr r3, 800811c <can1_ams_cell_voltages_v10s10_decode+0x4c>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 fa78 	bl	80005dc <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	4b07      	ldr	r3, [pc, #28]	; (8008118 <can1_ams_cell_voltages_v10s10_decode+0x48>)
 80080fa:	f7f8 f8b9 	bl	8000270 <__adddf3>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	ec43 2b17 	vmov	d7, r2, r3
}
 8008106:	eeb0 0a47 	vmov.f32	s0, s14
 800810a:	eef0 0a67 	vmov.f32	s1, s15
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	f3af 8000 	nop.w
 8008118:	40040000 	.word	0x40040000
 800811c:	fcce1c58 	.word	0xfcce1c58
 8008120:	3f800e6a 	.word	0x3f800e6a
 8008124:	00000000 	.word	0x00000000

08008128 <can1_ams_cell_voltages_v4s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s11_encode(double value)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <can1_ams_cell_voltages_v4s11_encode+0x50>)
 8008138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813c:	f7f8 f896 	bl	800026c <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	a309      	add	r3, pc, #36	; (adr r3, 8008170 <can1_ams_cell_voltages_v4s11_encode+0x48>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 fb6f 	bl	8000830 <__aeabi_ddiv>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	f7f8 fd17 	bl	8000b8c <__aeabi_d2uiz>
 800815e:	4603      	mov	r3, r0
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w
 8008170:	fcce1c58 	.word	0xfcce1c58
 8008174:	3f800e6a 	.word	0x3f800e6a
 8008178:	40040000 	.word	0x40040000
 800817c:	00000000 	.word	0x00000000

08008180 <can1_ams_cell_voltages_v4s11_decode>:

double can1_ams_cell_voltages_v4s11_decode(uint8_t value)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	4618      	mov	r0, r3
 800818e:	f7f8 f9ab 	bl	80004e8 <__aeabi_ui2d>
 8008192:	a30e      	add	r3, pc, #56	; (adr r3, 80081cc <can1_ams_cell_voltages_v4s11_decode+0x4c>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 fa20 	bl	80005dc <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <can1_ams_cell_voltages_v4s11_decode+0x48>)
 80081aa:	f7f8 f861 	bl	8000270 <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80081b6:	eeb0 0a47 	vmov.f32	s0, s14
 80081ba:	eef0 0a67 	vmov.f32	s1, s15
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	f3af 8000 	nop.w
 80081c8:	40040000 	.word	0x40040000
 80081cc:	fcce1c58 	.word	0xfcce1c58
 80081d0:	3f800e6a 	.word	0x3f800e6a
 80081d4:	00000000 	.word	0x00000000

080081d8 <can1_ams_cell_voltages_v10s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s11_encode(double value)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <can1_ams_cell_voltages_v10s11_encode+0x50>)
 80081e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ec:	f7f8 f83e 	bl	800026c <__aeabi_dsub>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	a309      	add	r3, pc, #36	; (adr r3, 8008220 <can1_ams_cell_voltages_v10s11_encode+0x48>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 fb17 	bl	8000830 <__aeabi_ddiv>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	f7f8 fcbf 	bl	8000b8c <__aeabi_d2uiz>
 800820e:	4603      	mov	r3, r0
 8008210:	b2db      	uxtb	r3, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w
 8008220:	fcce1c58 	.word	0xfcce1c58
 8008224:	3f800e6a 	.word	0x3f800e6a
 8008228:	40040000 	.word	0x40040000
 800822c:	00000000 	.word	0x00000000

08008230 <can1_ams_cell_voltages_v10s11_decode>:

double can1_ams_cell_voltages_v10s11_decode(uint8_t value)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	4618      	mov	r0, r3
 800823e:	f7f8 f953 	bl	80004e8 <__aeabi_ui2d>
 8008242:	a30e      	add	r3, pc, #56	; (adr r3, 800827c <can1_ams_cell_voltages_v10s11_decode+0x4c>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9c8 	bl	80005dc <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <can1_ams_cell_voltages_v10s11_decode+0x48>)
 800825a:	f7f8 f809 	bl	8000270 <__adddf3>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	ec43 2b17 	vmov	d7, r2, r3
}
 8008266:	eeb0 0a47 	vmov.f32	s0, s14
 800826a:	eef0 0a67 	vmov.f32	s1, s15
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	f3af 8000 	nop.w
 8008278:	40040000 	.word	0x40040000
 800827c:	fcce1c58 	.word	0xfcce1c58
 8008280:	3f800e6a 	.word	0x3f800e6a
 8008284:	00000000 	.word	0x00000000

08008288 <can1_ams_cell_voltages_v4s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s12_encode(double value)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <can1_ams_cell_voltages_v4s12_encode+0x50>)
 8008298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829c:	f7f7 ffe6 	bl	800026c <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4610      	mov	r0, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	a309      	add	r3, pc, #36	; (adr r3, 80082d0 <can1_ams_cell_voltages_v4s12_encode+0x48>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 fabf 	bl	8000830 <__aeabi_ddiv>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4610      	mov	r0, r2
 80082b8:	4619      	mov	r1, r3
 80082ba:	f7f8 fc67 	bl	8000b8c <__aeabi_d2uiz>
 80082be:	4603      	mov	r3, r0
 80082c0:	b2db      	uxtb	r3, r3
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w
 80082d0:	fcce1c58 	.word	0xfcce1c58
 80082d4:	3f800e6a 	.word	0x3f800e6a
 80082d8:	40040000 	.word	0x40040000
 80082dc:	00000000 	.word	0x00000000

080082e0 <can1_ams_cell_voltages_v4s12_decode>:

double can1_ams_cell_voltages_v4s12_decode(uint8_t value)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7f8 f8fb 	bl	80004e8 <__aeabi_ui2d>
 80082f2:	a30e      	add	r3, pc, #56	; (adr r3, 800832c <can1_ams_cell_voltages_v4s12_decode+0x4c>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f970 	bl	80005dc <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <can1_ams_cell_voltages_v4s12_decode+0x48>)
 800830a:	f7f7 ffb1 	bl	8000270 <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	ec43 2b17 	vmov	d7, r2, r3
}
 8008316:	eeb0 0a47 	vmov.f32	s0, s14
 800831a:	eef0 0a67 	vmov.f32	s1, s15
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	f3af 8000 	nop.w
 8008328:	40040000 	.word	0x40040000
 800832c:	fcce1c58 	.word	0xfcce1c58
 8008330:	3f800e6a 	.word	0x3f800e6a
 8008334:	00000000 	.word	0x00000000

08008338 <can1_ams_cell_voltages_v10s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s12_encode(double value)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <can1_ams_cell_voltages_v10s12_encode+0x50>)
 8008348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800834c:	f7f7 ff8e 	bl	800026c <__aeabi_dsub>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4610      	mov	r0, r2
 8008356:	4619      	mov	r1, r3
 8008358:	a309      	add	r3, pc, #36	; (adr r3, 8008380 <can1_ams_cell_voltages_v10s12_encode+0x48>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 fa67 	bl	8000830 <__aeabi_ddiv>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f7f8 fc0f 	bl	8000b8c <__aeabi_d2uiz>
 800836e:	4603      	mov	r3, r0
 8008370:	b2db      	uxtb	r3, r3
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	fcce1c58 	.word	0xfcce1c58
 8008384:	3f800e6a 	.word	0x3f800e6a
 8008388:	40040000 	.word	0x40040000
 800838c:	00000000 	.word	0x00000000

08008390 <can1_ams_cell_voltages_v10s12_decode>:

double can1_ams_cell_voltages_v10s12_decode(uint8_t value)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4618      	mov	r0, r3
 800839e:	f7f8 f8a3 	bl	80004e8 <__aeabi_ui2d>
 80083a2:	a30e      	add	r3, pc, #56	; (adr r3, 80083dc <can1_ams_cell_voltages_v10s12_decode+0x4c>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 f918 	bl	80005dc <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4610      	mov	r0, r2
 80083b2:	4619      	mov	r1, r3
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <can1_ams_cell_voltages_v10s12_decode+0x48>)
 80083ba:	f7f7 ff59 	bl	8000270 <__adddf3>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80083c6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ca:	eef0 0a67 	vmov.f32	s1, s15
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	f3af 8000 	nop.w
 80083d8:	40040000 	.word	0x40040000
 80083dc:	fcce1c58 	.word	0xfcce1c58
 80083e0:	3f800e6a 	.word	0x3f800e6a
 80083e4:	00000000 	.word	0x00000000

080083e8 <can1_ams_cell_voltages_v5s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s1_encode(double value)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <can1_ams_cell_voltages_v5s1_encode+0x50>)
 80083f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fc:	f7f7 ff36 	bl	800026c <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	a309      	add	r3, pc, #36	; (adr r3, 8008430 <can1_ams_cell_voltages_v5s1_encode+0x48>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 fa0f 	bl	8000830 <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 fbb7 	bl	8000b8c <__aeabi_d2uiz>
 800841e:	4603      	mov	r3, r0
 8008420:	b2db      	uxtb	r3, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	fcce1c58 	.word	0xfcce1c58
 8008434:	3f800e6a 	.word	0x3f800e6a
 8008438:	40040000 	.word	0x40040000
 800843c:	00000000 	.word	0x00000000

08008440 <can1_ams_cell_voltages_v5s1_decode>:

double can1_ams_cell_voltages_v5s1_decode(uint8_t value)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	4618      	mov	r0, r3
 800844e:	f7f8 f84b 	bl	80004e8 <__aeabi_ui2d>
 8008452:	a30e      	add	r3, pc, #56	; (adr r3, 800848c <can1_ams_cell_voltages_v5s1_decode+0x4c>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f7f8 f8c0 	bl	80005dc <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4610      	mov	r0, r2
 8008462:	4619      	mov	r1, r3
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <can1_ams_cell_voltages_v5s1_decode+0x48>)
 800846a:	f7f7 ff01 	bl	8000270 <__adddf3>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	ec43 2b17 	vmov	d7, r2, r3
}
 8008476:	eeb0 0a47 	vmov.f32	s0, s14
 800847a:	eef0 0a67 	vmov.f32	s1, s15
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	f3af 8000 	nop.w
 8008488:	40040000 	.word	0x40040000
 800848c:	fcce1c58 	.word	0xfcce1c58
 8008490:	3f800e6a 	.word	0x3f800e6a
 8008494:	00000000 	.word	0x00000000

08008498 <can1_ams_cell_voltages_v11s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s1_encode(double value)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <can1_ams_cell_voltages_v11s1_encode+0x50>)
 80084a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ac:	f7f7 fede 	bl	800026c <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	a309      	add	r3, pc, #36	; (adr r3, 80084e0 <can1_ams_cell_voltages_v11s1_encode+0x48>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f8 f9b7 	bl	8000830 <__aeabi_ddiv>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7f8 fb5f 	bl	8000b8c <__aeabi_d2uiz>
 80084ce:	4603      	mov	r3, r0
 80084d0:	b2db      	uxtb	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	fcce1c58 	.word	0xfcce1c58
 80084e4:	3f800e6a 	.word	0x3f800e6a
 80084e8:	40040000 	.word	0x40040000
 80084ec:	00000000 	.word	0x00000000

080084f0 <can1_ams_cell_voltages_v11s1_decode>:

double can1_ams_cell_voltages_v11s1_decode(uint8_t value)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f7 fff3 	bl	80004e8 <__aeabi_ui2d>
 8008502:	a30e      	add	r3, pc, #56	; (adr r3, 800853c <can1_ams_cell_voltages_v11s1_decode+0x4c>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f8 f868 	bl	80005dc <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <can1_ams_cell_voltages_v11s1_decode+0x48>)
 800851a:	f7f7 fea9 	bl	8000270 <__adddf3>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	ec43 2b17 	vmov	d7, r2, r3
}
 8008526:	eeb0 0a47 	vmov.f32	s0, s14
 800852a:	eef0 0a67 	vmov.f32	s1, s15
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	f3af 8000 	nop.w
 8008538:	40040000 	.word	0x40040000
 800853c:	fcce1c58 	.word	0xfcce1c58
 8008540:	3f800e6a 	.word	0x3f800e6a
 8008544:	00000000 	.word	0x00000000

08008548 <can1_ams_cell_voltages_v5s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s2_encode(double value)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <can1_ams_cell_voltages_v5s2_encode+0x50>)
 8008558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800855c:	f7f7 fe86 	bl	800026c <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	a309      	add	r3, pc, #36	; (adr r3, 8008590 <can1_ams_cell_voltages_v5s2_encode+0x48>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 f95f 	bl	8000830 <__aeabi_ddiv>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 fb07 	bl	8000b8c <__aeabi_d2uiz>
 800857e:	4603      	mov	r3, r0
 8008580:	b2db      	uxtb	r3, r3
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	fcce1c58 	.word	0xfcce1c58
 8008594:	3f800e6a 	.word	0x3f800e6a
 8008598:	40040000 	.word	0x40040000
 800859c:	00000000 	.word	0x00000000

080085a0 <can1_ams_cell_voltages_v5s2_decode>:

double can1_ams_cell_voltages_v5s2_decode(uint8_t value)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 ff9b 	bl	80004e8 <__aeabi_ui2d>
 80085b2:	a30e      	add	r3, pc, #56	; (adr r3, 80085ec <can1_ams_cell_voltages_v5s2_decode+0x4c>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f8 f810 	bl	80005dc <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4610      	mov	r0, r2
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <can1_ams_cell_voltages_v5s2_decode+0x48>)
 80085ca:	f7f7 fe51 	bl	8000270 <__adddf3>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80085d6:	eeb0 0a47 	vmov.f32	s0, s14
 80085da:	eef0 0a67 	vmov.f32	s1, s15
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	f3af 8000 	nop.w
 80085e8:	40040000 	.word	0x40040000
 80085ec:	fcce1c58 	.word	0xfcce1c58
 80085f0:	3f800e6a 	.word	0x3f800e6a
 80085f4:	00000000 	.word	0x00000000

080085f8 <can1_ams_cell_voltages_v5s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s3_encode(double value)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <can1_ams_cell_voltages_v5s3_encode+0x50>)
 8008608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800860c:	f7f7 fe2e 	bl	800026c <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4610      	mov	r0, r2
 8008616:	4619      	mov	r1, r3
 8008618:	a309      	add	r3, pc, #36	; (adr r3, 8008640 <can1_ams_cell_voltages_v5s3_encode+0x48>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f907 	bl	8000830 <__aeabi_ddiv>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	f7f8 faaf 	bl	8000b8c <__aeabi_d2uiz>
 800862e:	4603      	mov	r3, r0
 8008630:	b2db      	uxtb	r3, r3
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w
 8008640:	fcce1c58 	.word	0xfcce1c58
 8008644:	3f800e6a 	.word	0x3f800e6a
 8008648:	40040000 	.word	0x40040000
 800864c:	00000000 	.word	0x00000000

08008650 <can1_ams_cell_voltages_v5s3_decode>:

double can1_ams_cell_voltages_v5s3_decode(uint8_t value)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 ff43 	bl	80004e8 <__aeabi_ui2d>
 8008662:	a30e      	add	r3, pc, #56	; (adr r3, 800869c <can1_ams_cell_voltages_v5s3_decode+0x4c>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffb8 	bl	80005dc <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <can1_ams_cell_voltages_v5s3_decode+0x48>)
 800867a:	f7f7 fdf9 	bl	8000270 <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	ec43 2b17 	vmov	d7, r2, r3
}
 8008686:	eeb0 0a47 	vmov.f32	s0, s14
 800868a:	eef0 0a67 	vmov.f32	s1, s15
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	f3af 8000 	nop.w
 8008698:	40040000 	.word	0x40040000
 800869c:	fcce1c58 	.word	0xfcce1c58
 80086a0:	3f800e6a 	.word	0x3f800e6a
 80086a4:	00000000 	.word	0x00000000

080086a8 <can1_ams_cell_voltages_v11s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s3_encode(double value)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <can1_ams_cell_voltages_v11s3_encode+0x50>)
 80086b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086bc:	f7f7 fdd6 	bl	800026c <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	a309      	add	r3, pc, #36	; (adr r3, 80086f0 <can1_ams_cell_voltages_v11s3_encode+0x48>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f8 f8af 	bl	8000830 <__aeabi_ddiv>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	f7f8 fa57 	bl	8000b8c <__aeabi_d2uiz>
 80086de:	4603      	mov	r3, r0
 80086e0:	b2db      	uxtb	r3, r3
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w
 80086f0:	fcce1c58 	.word	0xfcce1c58
 80086f4:	3f800e6a 	.word	0x3f800e6a
 80086f8:	40040000 	.word	0x40040000
 80086fc:	00000000 	.word	0x00000000

08008700 <can1_ams_cell_voltages_v11s3_decode>:

double can1_ams_cell_voltages_v11s3_decode(uint8_t value)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 feeb 	bl	80004e8 <__aeabi_ui2d>
 8008712:	a30e      	add	r3, pc, #56	; (adr r3, 800874c <can1_ams_cell_voltages_v11s3_decode+0x4c>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 ff60 	bl	80005dc <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4610      	mov	r0, r2
 8008722:	4619      	mov	r1, r3
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <can1_ams_cell_voltages_v11s3_decode+0x48>)
 800872a:	f7f7 fda1 	bl	8000270 <__adddf3>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ec43 2b17 	vmov	d7, r2, r3
}
 8008736:	eeb0 0a47 	vmov.f32	s0, s14
 800873a:	eef0 0a67 	vmov.f32	s1, s15
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	f3af 8000 	nop.w
 8008748:	40040000 	.word	0x40040000
 800874c:	fcce1c58 	.word	0xfcce1c58
 8008750:	3f800e6a 	.word	0x3f800e6a
 8008754:	00000000 	.word	0x00000000

08008758 <can1_ams_cell_voltages_v5s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s4_encode(double value)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <can1_ams_cell_voltages_v5s4_encode+0x50>)
 8008768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800876c:	f7f7 fd7e 	bl	800026c <__aeabi_dsub>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	a309      	add	r3, pc, #36	; (adr r3, 80087a0 <can1_ams_cell_voltages_v5s4_encode+0x48>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f8 f857 	bl	8000830 <__aeabi_ddiv>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	f7f8 f9ff 	bl	8000b8c <__aeabi_d2uiz>
 800878e:	4603      	mov	r3, r0
 8008790:	b2db      	uxtb	r3, r3
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w
 80087a0:	fcce1c58 	.word	0xfcce1c58
 80087a4:	3f800e6a 	.word	0x3f800e6a
 80087a8:	40040000 	.word	0x40040000
 80087ac:	00000000 	.word	0x00000000

080087b0 <can1_ams_cell_voltages_v5s4_decode>:

double can1_ams_cell_voltages_v5s4_decode(uint8_t value)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f7 fe93 	bl	80004e8 <__aeabi_ui2d>
 80087c2:	a30e      	add	r3, pc, #56	; (adr r3, 80087fc <can1_ams_cell_voltages_v5s4_decode+0x4c>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 ff08 	bl	80005dc <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4610      	mov	r0, r2
 80087d2:	4619      	mov	r1, r3
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <can1_ams_cell_voltages_v5s4_decode+0x48>)
 80087da:	f7f7 fd49 	bl	8000270 <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80087e6:	eeb0 0a47 	vmov.f32	s0, s14
 80087ea:	eef0 0a67 	vmov.f32	s1, s15
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	f3af 8000 	nop.w
 80087f8:	40040000 	.word	0x40040000
 80087fc:	fcce1c58 	.word	0xfcce1c58
 8008800:	3f800e6a 	.word	0x3f800e6a
 8008804:	00000000 	.word	0x00000000

08008808 <can1_ams_cell_voltages_v5s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s5_encode(double value)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <can1_ams_cell_voltages_v5s5_encode+0x50>)
 8008818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800881c:	f7f7 fd26 	bl	800026c <__aeabi_dsub>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4610      	mov	r0, r2
 8008826:	4619      	mov	r1, r3
 8008828:	a309      	add	r3, pc, #36	; (adr r3, 8008850 <can1_ams_cell_voltages_v5s5_encode+0x48>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 ffff 	bl	8000830 <__aeabi_ddiv>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f8 f9a7 	bl	8000b8c <__aeabi_d2uiz>
 800883e:	4603      	mov	r3, r0
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	fcce1c58 	.word	0xfcce1c58
 8008854:	3f800e6a 	.word	0x3f800e6a
 8008858:	40040000 	.word	0x40040000
 800885c:	00000000 	.word	0x00000000

08008860 <can1_ams_cell_voltages_v5s5_decode>:

double can1_ams_cell_voltages_v5s5_decode(uint8_t value)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4618      	mov	r0, r3
 800886e:	f7f7 fe3b 	bl	80004e8 <__aeabi_ui2d>
 8008872:	a30e      	add	r3, pc, #56	; (adr r3, 80088ac <can1_ams_cell_voltages_v5s5_decode+0x4c>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 feb0 	bl	80005dc <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <can1_ams_cell_voltages_v5s5_decode+0x48>)
 800888a:	f7f7 fcf1 	bl	8000270 <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	ec43 2b17 	vmov	d7, r2, r3
}
 8008896:	eeb0 0a47 	vmov.f32	s0, s14
 800889a:	eef0 0a67 	vmov.f32	s1, s15
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	f3af 8000 	nop.w
 80088a8:	40040000 	.word	0x40040000
 80088ac:	fcce1c58 	.word	0xfcce1c58
 80088b0:	3f800e6a 	.word	0x3f800e6a
 80088b4:	00000000 	.word	0x00000000

080088b8 <can1_ams_cell_voltages_v11s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s5_encode(double value)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <can1_ams_cell_voltages_v11s5_encode+0x50>)
 80088c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088cc:	f7f7 fcce 	bl	800026c <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	a309      	add	r3, pc, #36	; (adr r3, 8008900 <can1_ams_cell_voltages_v11s5_encode+0x48>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 ffa7 	bl	8000830 <__aeabi_ddiv>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f94f 	bl	8000b8c <__aeabi_d2uiz>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	fcce1c58 	.word	0xfcce1c58
 8008904:	3f800e6a 	.word	0x3f800e6a
 8008908:	40040000 	.word	0x40040000
 800890c:	00000000 	.word	0x00000000

08008910 <can1_ams_cell_voltages_v11s5_decode>:

double can1_ams_cell_voltages_v11s5_decode(uint8_t value)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	4618      	mov	r0, r3
 800891e:	f7f7 fde3 	bl	80004e8 <__aeabi_ui2d>
 8008922:	a30e      	add	r3, pc, #56	; (adr r3, 800895c <can1_ams_cell_voltages_v11s5_decode+0x4c>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe58 	bl	80005dc <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <can1_ams_cell_voltages_v11s5_decode+0x48>)
 800893a:	f7f7 fc99 	bl	8000270 <__adddf3>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	ec43 2b17 	vmov	d7, r2, r3
}
 8008946:	eeb0 0a47 	vmov.f32	s0, s14
 800894a:	eef0 0a67 	vmov.f32	s1, s15
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	f3af 8000 	nop.w
 8008958:	40040000 	.word	0x40040000
 800895c:	fcce1c58 	.word	0xfcce1c58
 8008960:	3f800e6a 	.word	0x3f800e6a
 8008964:	00000000 	.word	0x00000000

08008968 <can1_ams_cell_voltages_v5s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s6_encode(double value)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <can1_ams_cell_voltages_v5s6_encode+0x50>)
 8008978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897c:	f7f7 fc76 	bl	800026c <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4610      	mov	r0, r2
 8008986:	4619      	mov	r1, r3
 8008988:	a309      	add	r3, pc, #36	; (adr r3, 80089b0 <can1_ams_cell_voltages_v5s6_encode+0x48>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 ff4f 	bl	8000830 <__aeabi_ddiv>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	f7f8 f8f7 	bl	8000b8c <__aeabi_d2uiz>
 800899e:	4603      	mov	r3, r0
 80089a0:	b2db      	uxtb	r3, r3
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w
 80089b0:	fcce1c58 	.word	0xfcce1c58
 80089b4:	3f800e6a 	.word	0x3f800e6a
 80089b8:	40040000 	.word	0x40040000
 80089bc:	00000000 	.word	0x00000000

080089c0 <can1_ams_cell_voltages_v5s6_decode>:

double can1_ams_cell_voltages_v5s6_decode(uint8_t value)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f7 fd8b 	bl	80004e8 <__aeabi_ui2d>
 80089d2:	a30e      	add	r3, pc, #56	; (adr r3, 8008a0c <can1_ams_cell_voltages_v5s6_decode+0x4c>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe00 	bl	80005dc <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4610      	mov	r0, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <can1_ams_cell_voltages_v5s6_decode+0x48>)
 80089ea:	f7f7 fc41 	bl	8000270 <__adddf3>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80089f6:	eeb0 0a47 	vmov.f32	s0, s14
 80089fa:	eef0 0a67 	vmov.f32	s1, s15
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	f3af 8000 	nop.w
 8008a08:	40040000 	.word	0x40040000
 8008a0c:	fcce1c58 	.word	0xfcce1c58
 8008a10:	3f800e6a 	.word	0x3f800e6a
 8008a14:	00000000 	.word	0x00000000

08008a18 <can1_ams_cell_voltages_v5s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s7_encode(double value)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <can1_ams_cell_voltages_v5s7_encode+0x50>)
 8008a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a2c:	f7f7 fc1e 	bl	800026c <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4610      	mov	r0, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	a309      	add	r3, pc, #36	; (adr r3, 8008a60 <can1_ams_cell_voltages_v5s7_encode+0x48>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fef7 	bl	8000830 <__aeabi_ddiv>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f89f 	bl	8000b8c <__aeabi_d2uiz>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	b2db      	uxtb	r3, r3
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	fcce1c58 	.word	0xfcce1c58
 8008a64:	3f800e6a 	.word	0x3f800e6a
 8008a68:	40040000 	.word	0x40040000
 8008a6c:	00000000 	.word	0x00000000

08008a70 <can1_ams_cell_voltages_v5s7_decode>:

double can1_ams_cell_voltages_v5s7_decode(uint8_t value)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f7 fd33 	bl	80004e8 <__aeabi_ui2d>
 8008a82:	a30e      	add	r3, pc, #56	; (adr r3, 8008abc <can1_ams_cell_voltages_v5s7_decode+0x4c>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fda8 	bl	80005dc <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4610      	mov	r0, r2
 8008a92:	4619      	mov	r1, r3
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <can1_ams_cell_voltages_v5s7_decode+0x48>)
 8008a9a:	f7f7 fbe9 	bl	8000270 <__adddf3>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8008aaa:	eef0 0a67 	vmov.f32	s1, s15
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	40040000 	.word	0x40040000
 8008abc:	fcce1c58 	.word	0xfcce1c58
 8008ac0:	3f800e6a 	.word	0x3f800e6a
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <can1_ams_cell_voltages_v11s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s7_encode(double value)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <can1_ams_cell_voltages_v11s7_encode+0x50>)
 8008ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008adc:	f7f7 fbc6 	bl	800026c <__aeabi_dsub>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	a309      	add	r3, pc, #36	; (adr r3, 8008b10 <can1_ams_cell_voltages_v11s7_encode+0x48>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fe9f 	bl	8000830 <__aeabi_ddiv>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7f8 f847 	bl	8000b8c <__aeabi_d2uiz>
 8008afe:	4603      	mov	r3, r0
 8008b00:	b2db      	uxtb	r3, r3
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	fcce1c58 	.word	0xfcce1c58
 8008b14:	3f800e6a 	.word	0x3f800e6a
 8008b18:	40040000 	.word	0x40040000
 8008b1c:	00000000 	.word	0x00000000

08008b20 <can1_ams_cell_voltages_v11s7_decode>:

double can1_ams_cell_voltages_v11s7_decode(uint8_t value)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f7 fcdb 	bl	80004e8 <__aeabi_ui2d>
 8008b32:	a30e      	add	r3, pc, #56	; (adr r3, 8008b6c <can1_ams_cell_voltages_v11s7_decode+0x4c>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd50 	bl	80005dc <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <can1_ams_cell_voltages_v11s7_decode+0x48>)
 8008b4a:	f7f7 fb91 	bl	8000270 <__adddf3>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	ec43 2b17 	vmov	d7, r2, r3
}
 8008b56:	eeb0 0a47 	vmov.f32	s0, s14
 8008b5a:	eef0 0a67 	vmov.f32	s1, s15
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	f3af 8000 	nop.w
 8008b68:	40040000 	.word	0x40040000
 8008b6c:	fcce1c58 	.word	0xfcce1c58
 8008b70:	3f800e6a 	.word	0x3f800e6a
 8008b74:	00000000 	.word	0x00000000

08008b78 <can1_ams_cell_voltages_v5s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s8_encode(double value)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <can1_ams_cell_voltages_v5s8_encode+0x50>)
 8008b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b8c:	f7f7 fb6e 	bl	800026c <__aeabi_dsub>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	a309      	add	r3, pc, #36	; (adr r3, 8008bc0 <can1_ams_cell_voltages_v5s8_encode+0x48>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fe47 	bl	8000830 <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f7 ffef 	bl	8000b8c <__aeabi_d2uiz>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b2db      	uxtb	r3, r3
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	fcce1c58 	.word	0xfcce1c58
 8008bc4:	3f800e6a 	.word	0x3f800e6a
 8008bc8:	40040000 	.word	0x40040000
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <can1_ams_cell_voltages_v5s8_decode>:

double can1_ams_cell_voltages_v5s8_decode(uint8_t value)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fc83 	bl	80004e8 <__aeabi_ui2d>
 8008be2:	a30e      	add	r3, pc, #56	; (adr r3, 8008c1c <can1_ams_cell_voltages_v5s8_decode+0x4c>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fcf8 	bl	80005dc <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <can1_ams_cell_voltages_v5s8_decode+0x48>)
 8008bfa:	f7f7 fb39 	bl	8000270 <__adddf3>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c06:	eeb0 0a47 	vmov.f32	s0, s14
 8008c0a:	eef0 0a67 	vmov.f32	s1, s15
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	f3af 8000 	nop.w
 8008c18:	40040000 	.word	0x40040000
 8008c1c:	fcce1c58 	.word	0xfcce1c58
 8008c20:	3f800e6a 	.word	0x3f800e6a
 8008c24:	00000000 	.word	0x00000000

08008c28 <can1_ams_cell_voltages_v5s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s9_encode(double value)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <can1_ams_cell_voltages_v5s9_encode+0x50>)
 8008c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c3c:	f7f7 fb16 	bl	800026c <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	a309      	add	r3, pc, #36	; (adr r3, 8008c70 <can1_ams_cell_voltages_v5s9_encode+0x48>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fdef 	bl	8000830 <__aeabi_ddiv>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7f7 ff97 	bl	8000b8c <__aeabi_d2uiz>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	b2db      	uxtb	r3, r3
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w
 8008c70:	fcce1c58 	.word	0xfcce1c58
 8008c74:	3f800e6a 	.word	0x3f800e6a
 8008c78:	40040000 	.word	0x40040000
 8008c7c:	00000000 	.word	0x00000000

08008c80 <can1_ams_cell_voltages_v5s9_decode>:

double can1_ams_cell_voltages_v5s9_decode(uint8_t value)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fc2b 	bl	80004e8 <__aeabi_ui2d>
 8008c92:	a30e      	add	r3, pc, #56	; (adr r3, 8008ccc <can1_ams_cell_voltages_v5s9_decode+0x4c>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fca0 	bl	80005dc <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <can1_ams_cell_voltages_v5s9_decode+0x48>)
 8008caa:	f7f7 fae1 	bl	8000270 <__adddf3>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008cba:	eef0 0a67 	vmov.f32	s1, s15
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	f3af 8000 	nop.w
 8008cc8:	40040000 	.word	0x40040000
 8008ccc:	fcce1c58 	.word	0xfcce1c58
 8008cd0:	3f800e6a 	.word	0x3f800e6a
 8008cd4:	00000000 	.word	0x00000000

08008cd8 <can1_ams_cell_voltages_v11s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s9_encode(double value)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <can1_ams_cell_voltages_v11s9_encode+0x50>)
 8008ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cec:	f7f7 fabe 	bl	800026c <__aeabi_dsub>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	a309      	add	r3, pc, #36	; (adr r3, 8008d20 <can1_ams_cell_voltages_v11s9_encode+0x48>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fd97 	bl	8000830 <__aeabi_ddiv>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff3f 	bl	8000b8c <__aeabi_d2uiz>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b2db      	uxtb	r3, r3
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	fcce1c58 	.word	0xfcce1c58
 8008d24:	3f800e6a 	.word	0x3f800e6a
 8008d28:	40040000 	.word	0x40040000
 8008d2c:	00000000 	.word	0x00000000

08008d30 <can1_ams_cell_voltages_v11s9_decode>:

double can1_ams_cell_voltages_v11s9_decode(uint8_t value)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f7 fbd3 	bl	80004e8 <__aeabi_ui2d>
 8008d42:	a30e      	add	r3, pc, #56	; (adr r3, 8008d7c <can1_ams_cell_voltages_v11s9_decode+0x4c>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fc48 	bl	80005dc <__aeabi_dmul>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4610      	mov	r0, r2
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <can1_ams_cell_voltages_v11s9_decode+0x48>)
 8008d5a:	f7f7 fa89 	bl	8000270 <__adddf3>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	ec43 2b17 	vmov	d7, r2, r3
}
 8008d66:	eeb0 0a47 	vmov.f32	s0, s14
 8008d6a:	eef0 0a67 	vmov.f32	s1, s15
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	f3af 8000 	nop.w
 8008d78:	40040000 	.word	0x40040000
 8008d7c:	fcce1c58 	.word	0xfcce1c58
 8008d80:	3f800e6a 	.word	0x3f800e6a
 8008d84:	00000000 	.word	0x00000000

08008d88 <can1_ams_cell_voltages_v5s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s10_encode(double value)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <can1_ams_cell_voltages_v5s10_encode+0x50>)
 8008d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d9c:	f7f7 fa66 	bl	800026c <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	a309      	add	r3, pc, #36	; (adr r3, 8008dd0 <can1_ams_cell_voltages_v5s10_encode+0x48>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fd3f 	bl	8000830 <__aeabi_ddiv>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7f7 fee7 	bl	8000b8c <__aeabi_d2uiz>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b2db      	uxtb	r3, r3
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	fcce1c58 	.word	0xfcce1c58
 8008dd4:	3f800e6a 	.word	0x3f800e6a
 8008dd8:	40040000 	.word	0x40040000
 8008ddc:	00000000 	.word	0x00000000

08008de0 <can1_ams_cell_voltages_v5s10_decode>:

double can1_ams_cell_voltages_v5s10_decode(uint8_t value)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fb7b 	bl	80004e8 <__aeabi_ui2d>
 8008df2:	a30e      	add	r3, pc, #56	; (adr r3, 8008e2c <can1_ams_cell_voltages_v5s10_decode+0x4c>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fbf0 	bl	80005dc <__aeabi_dmul>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4610      	mov	r0, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <can1_ams_cell_voltages_v5s10_decode+0x48>)
 8008e0a:	f7f7 fa31 	bl	8000270 <__adddf3>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e16:	eeb0 0a47 	vmov.f32	s0, s14
 8008e1a:	eef0 0a67 	vmov.f32	s1, s15
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	f3af 8000 	nop.w
 8008e28:	40040000 	.word	0x40040000
 8008e2c:	fcce1c58 	.word	0xfcce1c58
 8008e30:	3f800e6a 	.word	0x3f800e6a
 8008e34:	00000000 	.word	0x00000000

08008e38 <can1_ams_cell_voltages_v5s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s11_encode(double value)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <can1_ams_cell_voltages_v5s11_encode+0x50>)
 8008e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e4c:	f7f7 fa0e 	bl	800026c <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	a309      	add	r3, pc, #36	; (adr r3, 8008e80 <can1_ams_cell_voltages_v5s11_encode+0x48>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fce7 	bl	8000830 <__aeabi_ddiv>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7f7 fe8f 	bl	8000b8c <__aeabi_d2uiz>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b2db      	uxtb	r3, r3
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
 8008e80:	fcce1c58 	.word	0xfcce1c58
 8008e84:	3f800e6a 	.word	0x3f800e6a
 8008e88:	40040000 	.word	0x40040000
 8008e8c:	00000000 	.word	0x00000000

08008e90 <can1_ams_cell_voltages_v5s11_decode>:

double can1_ams_cell_voltages_v5s11_decode(uint8_t value)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f7 fb23 	bl	80004e8 <__aeabi_ui2d>
 8008ea2:	a30e      	add	r3, pc, #56	; (adr r3, 8008edc <can1_ams_cell_voltages_v5s11_decode+0x4c>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	f7f7 fb98 	bl	80005dc <__aeabi_dmul>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <can1_ams_cell_voltages_v5s11_decode+0x48>)
 8008eba:	f7f7 f9d9 	bl	8000270 <__adddf3>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eca:	eef0 0a67 	vmov.f32	s1, s15
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	40040000 	.word	0x40040000
 8008edc:	fcce1c58 	.word	0xfcce1c58
 8008ee0:	3f800e6a 	.word	0x3f800e6a
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <can1_ams_cell_voltages_v11s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s11_encode(double value)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <can1_ams_cell_voltages_v11s11_encode+0x50>)
 8008ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efc:	f7f7 f9b6 	bl	800026c <__aeabi_dsub>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4610      	mov	r0, r2
 8008f06:	4619      	mov	r1, r3
 8008f08:	a309      	add	r3, pc, #36	; (adr r3, 8008f30 <can1_ams_cell_voltages_v11s11_encode+0x48>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fc8f 	bl	8000830 <__aeabi_ddiv>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f7f7 fe37 	bl	8000b8c <__aeabi_d2uiz>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	f3af 8000 	nop.w
 8008f30:	fcce1c58 	.word	0xfcce1c58
 8008f34:	3f800e6a 	.word	0x3f800e6a
 8008f38:	40040000 	.word	0x40040000
 8008f3c:	00000000 	.word	0x00000000

08008f40 <can1_ams_cell_voltages_v11s11_decode>:

double can1_ams_cell_voltages_v11s11_decode(uint8_t value)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 facb 	bl	80004e8 <__aeabi_ui2d>
 8008f52:	a30e      	add	r3, pc, #56	; (adr r3, 8008f8c <can1_ams_cell_voltages_v11s11_decode+0x4c>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 fb40 	bl	80005dc <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <can1_ams_cell_voltages_v11s11_decode+0x48>)
 8008f6a:	f7f7 f981 	bl	8000270 <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	ec43 2b17 	vmov	d7, r2, r3
}
 8008f76:	eeb0 0a47 	vmov.f32	s0, s14
 8008f7a:	eef0 0a67 	vmov.f32	s1, s15
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	f3af 8000 	nop.w
 8008f88:	40040000 	.word	0x40040000
 8008f8c:	fcce1c58 	.word	0xfcce1c58
 8008f90:	3f800e6a 	.word	0x3f800e6a
 8008f94:	00000000 	.word	0x00000000

08008f98 <can1_ams_cell_voltages_v5s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s12_encode(double value)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008fa2:	f04f 0200 	mov.w	r2, #0
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <can1_ams_cell_voltages_v5s12_encode+0x50>)
 8008fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fac:	f7f7 f95e 	bl	800026c <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	a309      	add	r3, pc, #36	; (adr r3, 8008fe0 <can1_ams_cell_voltages_v5s12_encode+0x48>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 fc37 	bl	8000830 <__aeabi_ddiv>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7f7 fddf 	bl	8000b8c <__aeabi_d2uiz>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	b2db      	uxtb	r3, r3
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	fcce1c58 	.word	0xfcce1c58
 8008fe4:	3f800e6a 	.word	0x3f800e6a
 8008fe8:	40040000 	.word	0x40040000
 8008fec:	00000000 	.word	0x00000000

08008ff0 <can1_ams_cell_voltages_v5s12_decode>:

double can1_ams_cell_voltages_v5s12_decode(uint8_t value)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f7 fa73 	bl	80004e8 <__aeabi_ui2d>
 8009002:	a30e      	add	r3, pc, #56	; (adr r3, 800903c <can1_ams_cell_voltages_v5s12_decode+0x4c>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 fae8 	bl	80005dc <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4610      	mov	r0, r2
 8009012:	4619      	mov	r1, r3
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <can1_ams_cell_voltages_v5s12_decode+0x48>)
 800901a:	f7f7 f929 	bl	8000270 <__adddf3>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	ec43 2b17 	vmov	d7, r2, r3
}
 8009026:	eeb0 0a47 	vmov.f32	s0, s14
 800902a:	eef0 0a67 	vmov.f32	s1, s15
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	f3af 8000 	nop.w
 8009038:	40040000 	.word	0x40040000
 800903c:	fcce1c58 	.word	0xfcce1c58
 8009040:	3f800e6a 	.word	0x3f800e6a
 8009044:	00000000 	.word	0x00000000

08009048 <can1_ams_cell_voltages_v6s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s1_encode(double value)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	4b10      	ldr	r3, [pc, #64]	; (8009098 <can1_ams_cell_voltages_v6s1_encode+0x50>)
 8009058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905c:	f7f7 f906 	bl	800026c <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	a309      	add	r3, pc, #36	; (adr r3, 8009090 <can1_ams_cell_voltages_v6s1_encode+0x48>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fbdf 	bl	8000830 <__aeabi_ddiv>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4610      	mov	r0, r2
 8009078:	4619      	mov	r1, r3
 800907a:	f7f7 fd87 	bl	8000b8c <__aeabi_d2uiz>
 800907e:	4603      	mov	r3, r0
 8009080:	b2db      	uxtb	r3, r3
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	f3af 8000 	nop.w
 8009090:	fcce1c58 	.word	0xfcce1c58
 8009094:	3f800e6a 	.word	0x3f800e6a
 8009098:	40040000 	.word	0x40040000
 800909c:	00000000 	.word	0x00000000

080090a0 <can1_ams_cell_voltages_v6s1_decode>:

double can1_ams_cell_voltages_v6s1_decode(uint8_t value)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 fa1b 	bl	80004e8 <__aeabi_ui2d>
 80090b2:	a30e      	add	r3, pc, #56	; (adr r3, 80090ec <can1_ams_cell_voltages_v6s1_decode+0x4c>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 fa90 	bl	80005dc <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4610      	mov	r0, r2
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <can1_ams_cell_voltages_v6s1_decode+0x48>)
 80090ca:	f7f7 f8d1 	bl	8000270 <__adddf3>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80090d6:	eeb0 0a47 	vmov.f32	s0, s14
 80090da:	eef0 0a67 	vmov.f32	s1, s15
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	f3af 8000 	nop.w
 80090e8:	40040000 	.word	0x40040000
 80090ec:	fcce1c58 	.word	0xfcce1c58
 80090f0:	3f800e6a 	.word	0x3f800e6a
 80090f4:	00000000 	.word	0x00000000

080090f8 <can1_ams_cell_voltages_v6s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s2_encode(double value)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <can1_ams_cell_voltages_v6s2_encode+0x50>)
 8009108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800910c:	f7f7 f8ae 	bl	800026c <__aeabi_dsub>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	a309      	add	r3, pc, #36	; (adr r3, 8009140 <can1_ams_cell_voltages_v6s2_encode+0x48>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fb87 	bl	8000830 <__aeabi_ddiv>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4610      	mov	r0, r2
 8009128:	4619      	mov	r1, r3
 800912a:	f7f7 fd2f 	bl	8000b8c <__aeabi_d2uiz>
 800912e:	4603      	mov	r3, r0
 8009130:	b2db      	uxtb	r3, r3
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	fcce1c58 	.word	0xfcce1c58
 8009144:	3f800e6a 	.word	0x3f800e6a
 8009148:	40040000 	.word	0x40040000
 800914c:	00000000 	.word	0x00000000

08009150 <can1_ams_cell_voltages_v6s2_decode>:

double can1_ams_cell_voltages_v6s2_decode(uint8_t value)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	4618      	mov	r0, r3
 800915e:	f7f7 f9c3 	bl	80004e8 <__aeabi_ui2d>
 8009162:	a30e      	add	r3, pc, #56	; (adr r3, 800919c <can1_ams_cell_voltages_v6s2_decode+0x4c>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa38 	bl	80005dc <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4610      	mov	r0, r2
 8009172:	4619      	mov	r1, r3
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <can1_ams_cell_voltages_v6s2_decode+0x48>)
 800917a:	f7f7 f879 	bl	8000270 <__adddf3>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	ec43 2b17 	vmov	d7, r2, r3
}
 8009186:	eeb0 0a47 	vmov.f32	s0, s14
 800918a:	eef0 0a67 	vmov.f32	s1, s15
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	f3af 8000 	nop.w
 8009198:	40040000 	.word	0x40040000
 800919c:	fcce1c58 	.word	0xfcce1c58
 80091a0:	3f800e6a 	.word	0x3f800e6a
 80091a4:	00000000 	.word	0x00000000

080091a8 <can1_ams_cell_voltages_v6s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s3_encode(double value)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <can1_ams_cell_voltages_v6s3_encode+0x50>)
 80091b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091bc:	f7f7 f856 	bl	800026c <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4610      	mov	r0, r2
 80091c6:	4619      	mov	r1, r3
 80091c8:	a309      	add	r3, pc, #36	; (adr r3, 80091f0 <can1_ams_cell_voltages_v6s3_encode+0x48>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fb2f 	bl	8000830 <__aeabi_ddiv>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	f7f7 fcd7 	bl	8000b8c <__aeabi_d2uiz>
 80091de:	4603      	mov	r3, r0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w
 80091f0:	fcce1c58 	.word	0xfcce1c58
 80091f4:	3f800e6a 	.word	0x3f800e6a
 80091f8:	40040000 	.word	0x40040000
 80091fc:	00000000 	.word	0x00000000

08009200 <can1_ams_cell_voltages_v6s3_decode>:

double can1_ams_cell_voltages_v6s3_decode(uint8_t value)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4618      	mov	r0, r3
 800920e:	f7f7 f96b 	bl	80004e8 <__aeabi_ui2d>
 8009212:	a30e      	add	r3, pc, #56	; (adr r3, 800924c <can1_ams_cell_voltages_v6s3_decode+0x4c>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f9e0 	bl	80005dc <__aeabi_dmul>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <can1_ams_cell_voltages_v6s3_decode+0x48>)
 800922a:	f7f7 f821 	bl	8000270 <__adddf3>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	ec43 2b17 	vmov	d7, r2, r3
}
 8009236:	eeb0 0a47 	vmov.f32	s0, s14
 800923a:	eef0 0a67 	vmov.f32	s1, s15
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	f3af 8000 	nop.w
 8009248:	40040000 	.word	0x40040000
 800924c:	fcce1c58 	.word	0xfcce1c58
 8009250:	3f800e6a 	.word	0x3f800e6a
 8009254:	00000000 	.word	0x00000000

08009258 <can1_ams_cell_voltages_v6s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s4_encode(double value)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <can1_ams_cell_voltages_v6s4_encode+0x50>)
 8009268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800926c:	f7f6 fffe 	bl	800026c <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4610      	mov	r0, r2
 8009276:	4619      	mov	r1, r3
 8009278:	a309      	add	r3, pc, #36	; (adr r3, 80092a0 <can1_ams_cell_voltages_v6s4_encode+0x48>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 fad7 	bl	8000830 <__aeabi_ddiv>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 fc7f 	bl	8000b8c <__aeabi_d2uiz>
 800928e:	4603      	mov	r3, r0
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
 80092a0:	fcce1c58 	.word	0xfcce1c58
 80092a4:	3f800e6a 	.word	0x3f800e6a
 80092a8:	40040000 	.word	0x40040000
 80092ac:	00000000 	.word	0x00000000

080092b0 <can1_ams_cell_voltages_v6s4_decode>:

double can1_ams_cell_voltages_v6s4_decode(uint8_t value)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f7 f913 	bl	80004e8 <__aeabi_ui2d>
 80092c2:	a30e      	add	r3, pc, #56	; (adr r3, 80092fc <can1_ams_cell_voltages_v6s4_decode+0x4c>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f7 f988 	bl	80005dc <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <can1_ams_cell_voltages_v6s4_decode+0x48>)
 80092da:	f7f6 ffc9 	bl	8000270 <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80092e6:	eeb0 0a47 	vmov.f32	s0, s14
 80092ea:	eef0 0a67 	vmov.f32	s1, s15
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	f3af 8000 	nop.w
 80092f8:	40040000 	.word	0x40040000
 80092fc:	fcce1c58 	.word	0xfcce1c58
 8009300:	3f800e6a 	.word	0x3f800e6a
 8009304:	00000000 	.word	0x00000000

08009308 <can1_ams_cell_voltages_v6s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s5_encode(double value)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <can1_ams_cell_voltages_v6s5_encode+0x50>)
 8009318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931c:	f7f6 ffa6 	bl	800026c <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	a309      	add	r3, pc, #36	; (adr r3, 8009350 <can1_ams_cell_voltages_v6s5_encode+0x48>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f7 fa7f 	bl	8000830 <__aeabi_ddiv>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f7f7 fc27 	bl	8000b8c <__aeabi_d2uiz>
 800933e:	4603      	mov	r3, r0
 8009340:	b2db      	uxtb	r3, r3
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	fcce1c58 	.word	0xfcce1c58
 8009354:	3f800e6a 	.word	0x3f800e6a
 8009358:	40040000 	.word	0x40040000
 800935c:	00000000 	.word	0x00000000

08009360 <can1_ams_cell_voltages_v6s5_decode>:

double can1_ams_cell_voltages_v6s5_decode(uint8_t value)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	4618      	mov	r0, r3
 800936e:	f7f7 f8bb 	bl	80004e8 <__aeabi_ui2d>
 8009372:	a30e      	add	r3, pc, #56	; (adr r3, 80093ac <can1_ams_cell_voltages_v6s5_decode+0x4c>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 f930 	bl	80005dc <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <can1_ams_cell_voltages_v6s5_decode+0x48>)
 800938a:	f7f6 ff71 	bl	8000270 <__adddf3>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ec43 2b17 	vmov	d7, r2, r3
}
 8009396:	eeb0 0a47 	vmov.f32	s0, s14
 800939a:	eef0 0a67 	vmov.f32	s1, s15
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	f3af 8000 	nop.w
 80093a8:	40040000 	.word	0x40040000
 80093ac:	fcce1c58 	.word	0xfcce1c58
 80093b0:	3f800e6a 	.word	0x3f800e6a
 80093b4:	00000000 	.word	0x00000000

080093b8 <can1_ams_cell_voltages_v6s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s6_encode(double value)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <can1_ams_cell_voltages_v6s6_encode+0x50>)
 80093c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093cc:	f7f6 ff4e 	bl	800026c <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4610      	mov	r0, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	a309      	add	r3, pc, #36	; (adr r3, 8009400 <can1_ams_cell_voltages_v6s6_encode+0x48>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 fa27 	bl	8000830 <__aeabi_ddiv>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7f7 fbcf 	bl	8000b8c <__aeabi_d2uiz>
 80093ee:	4603      	mov	r3, r0
 80093f0:	b2db      	uxtb	r3, r3
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	fcce1c58 	.word	0xfcce1c58
 8009404:	3f800e6a 	.word	0x3f800e6a
 8009408:	40040000 	.word	0x40040000
 800940c:	00000000 	.word	0x00000000

08009410 <can1_ams_cell_voltages_v6s6_decode>:

double can1_ams_cell_voltages_v6s6_decode(uint8_t value)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	4618      	mov	r0, r3
 800941e:	f7f7 f863 	bl	80004e8 <__aeabi_ui2d>
 8009422:	a30e      	add	r3, pc, #56	; (adr r3, 800945c <can1_ams_cell_voltages_v6s6_decode+0x4c>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8d8 	bl	80005dc <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	4b07      	ldr	r3, [pc, #28]	; (8009458 <can1_ams_cell_voltages_v6s6_decode+0x48>)
 800943a:	f7f6 ff19 	bl	8000270 <__adddf3>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	ec43 2b17 	vmov	d7, r2, r3
}
 8009446:	eeb0 0a47 	vmov.f32	s0, s14
 800944a:	eef0 0a67 	vmov.f32	s1, s15
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	f3af 8000 	nop.w
 8009458:	40040000 	.word	0x40040000
 800945c:	fcce1c58 	.word	0xfcce1c58
 8009460:	3f800e6a 	.word	0x3f800e6a
 8009464:	00000000 	.word	0x00000000

08009468 <can1_ams_cell_voltages_v6s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s7_encode(double value)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <can1_ams_cell_voltages_v6s7_encode+0x50>)
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	f7f6 fef6 	bl	800026c <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	a309      	add	r3, pc, #36	; (adr r3, 80094b0 <can1_ams_cell_voltages_v6s7_encode+0x48>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f9cf 	bl	8000830 <__aeabi_ddiv>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4610      	mov	r0, r2
 8009498:	4619      	mov	r1, r3
 800949a:	f7f7 fb77 	bl	8000b8c <__aeabi_d2uiz>
 800949e:	4603      	mov	r3, r0
 80094a0:	b2db      	uxtb	r3, r3
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
 80094b0:	fcce1c58 	.word	0xfcce1c58
 80094b4:	3f800e6a 	.word	0x3f800e6a
 80094b8:	40040000 	.word	0x40040000
 80094bc:	00000000 	.word	0x00000000

080094c0 <can1_ams_cell_voltages_v6s7_decode>:

double can1_ams_cell_voltages_v6s7_decode(uint8_t value)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f7 f80b 	bl	80004e8 <__aeabi_ui2d>
 80094d2:	a30e      	add	r3, pc, #56	; (adr r3, 800950c <can1_ams_cell_voltages_v6s7_decode+0x4c>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f7 f880 	bl	80005dc <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4610      	mov	r0, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <can1_ams_cell_voltages_v6s7_decode+0x48>)
 80094ea:	f7f6 fec1 	bl	8000270 <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80094f6:	eeb0 0a47 	vmov.f32	s0, s14
 80094fa:	eef0 0a67 	vmov.f32	s1, s15
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	f3af 8000 	nop.w
 8009508:	40040000 	.word	0x40040000
 800950c:	fcce1c58 	.word	0xfcce1c58
 8009510:	3f800e6a 	.word	0x3f800e6a
 8009514:	00000000 	.word	0x00000000

08009518 <can1_ams_cell_voltages_v6s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s8_encode(double value)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	4b10      	ldr	r3, [pc, #64]	; (8009568 <can1_ams_cell_voltages_v6s8_encode+0x50>)
 8009528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800952c:	f7f6 fe9e 	bl	800026c <__aeabi_dsub>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	a309      	add	r3, pc, #36	; (adr r3, 8009560 <can1_ams_cell_voltages_v6s8_encode+0x48>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f977 	bl	8000830 <__aeabi_ddiv>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4610      	mov	r0, r2
 8009548:	4619      	mov	r1, r3
 800954a:	f7f7 fb1f 	bl	8000b8c <__aeabi_d2uiz>
 800954e:	4603      	mov	r3, r0
 8009550:	b2db      	uxtb	r3, r3
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	fcce1c58 	.word	0xfcce1c58
 8009564:	3f800e6a 	.word	0x3f800e6a
 8009568:	40040000 	.word	0x40040000
 800956c:	00000000 	.word	0x00000000

08009570 <can1_ams_cell_voltages_v6s8_decode>:

double can1_ams_cell_voltages_v6s8_decode(uint8_t value)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 ffb3 	bl	80004e8 <__aeabi_ui2d>
 8009582:	a30e      	add	r3, pc, #56	; (adr r3, 80095bc <can1_ams_cell_voltages_v6s8_decode+0x4c>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f7 f828 	bl	80005dc <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4610      	mov	r0, r2
 8009592:	4619      	mov	r1, r3
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <can1_ams_cell_voltages_v6s8_decode+0x48>)
 800959a:	f7f6 fe69 	bl	8000270 <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80095a6:	eeb0 0a47 	vmov.f32	s0, s14
 80095aa:	eef0 0a67 	vmov.f32	s1, s15
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	f3af 8000 	nop.w
 80095b8:	40040000 	.word	0x40040000
 80095bc:	fcce1c58 	.word	0xfcce1c58
 80095c0:	3f800e6a 	.word	0x3f800e6a
 80095c4:	00000000 	.word	0x00000000

080095c8 <can1_ams_cell_voltages_v6s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s9_encode(double value)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <can1_ams_cell_voltages_v6s9_encode+0x50>)
 80095d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095dc:	f7f6 fe46 	bl	800026c <__aeabi_dsub>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	a309      	add	r3, pc, #36	; (adr r3, 8009610 <can1_ams_cell_voltages_v6s9_encode+0x48>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f7 f91f 	bl	8000830 <__aeabi_ddiv>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	f7f7 fac7 	bl	8000b8c <__aeabi_d2uiz>
 80095fe:	4603      	mov	r3, r0
 8009600:	b2db      	uxtb	r3, r3
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w
 8009610:	fcce1c58 	.word	0xfcce1c58
 8009614:	3f800e6a 	.word	0x3f800e6a
 8009618:	40040000 	.word	0x40040000
 800961c:	00000000 	.word	0x00000000

08009620 <can1_ams_cell_voltages_v6s9_decode>:

double can1_ams_cell_voltages_v6s9_decode(uint8_t value)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	4618      	mov	r0, r3
 800962e:	f7f6 ff5b 	bl	80004e8 <__aeabi_ui2d>
 8009632:	a30e      	add	r3, pc, #56	; (adr r3, 800966c <can1_ams_cell_voltages_v6s9_decode+0x4c>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 ffd0 	bl	80005dc <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4610      	mov	r0, r2
 8009642:	4619      	mov	r1, r3
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <can1_ams_cell_voltages_v6s9_decode+0x48>)
 800964a:	f7f6 fe11 	bl	8000270 <__adddf3>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	ec43 2b17 	vmov	d7, r2, r3
}
 8009656:	eeb0 0a47 	vmov.f32	s0, s14
 800965a:	eef0 0a67 	vmov.f32	s1, s15
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	f3af 8000 	nop.w
 8009668:	40040000 	.word	0x40040000
 800966c:	fcce1c58 	.word	0xfcce1c58
 8009670:	3f800e6a 	.word	0x3f800e6a
 8009674:	00000000 	.word	0x00000000

08009678 <can1_ams_cell_voltages_v6s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s10_encode(double value)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <can1_ams_cell_voltages_v6s10_encode+0x50>)
 8009688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968c:	f7f6 fdee 	bl	800026c <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4610      	mov	r0, r2
 8009696:	4619      	mov	r1, r3
 8009698:	a309      	add	r3, pc, #36	; (adr r3, 80096c0 <can1_ams_cell_voltages_v6s10_encode+0x48>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 f8c7 	bl	8000830 <__aeabi_ddiv>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7f7 fa6f 	bl	8000b8c <__aeabi_d2uiz>
 80096ae:	4603      	mov	r3, r0
 80096b0:	b2db      	uxtb	r3, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	fcce1c58 	.word	0xfcce1c58
 80096c4:	3f800e6a 	.word	0x3f800e6a
 80096c8:	40040000 	.word	0x40040000
 80096cc:	00000000 	.word	0x00000000

080096d0 <can1_ams_cell_voltages_v6s10_decode>:

double can1_ams_cell_voltages_v6s10_decode(uint8_t value)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f6 ff03 	bl	80004e8 <__aeabi_ui2d>
 80096e2:	a30e      	add	r3, pc, #56	; (adr r3, 800971c <can1_ams_cell_voltages_v6s10_decode+0x4c>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 ff78 	bl	80005dc <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <can1_ams_cell_voltages_v6s10_decode+0x48>)
 80096fa:	f7f6 fdb9 	bl	8000270 <__adddf3>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	ec43 2b17 	vmov	d7, r2, r3
}
 8009706:	eeb0 0a47 	vmov.f32	s0, s14
 800970a:	eef0 0a67 	vmov.f32	s1, s15
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	f3af 8000 	nop.w
 8009718:	40040000 	.word	0x40040000
 800971c:	fcce1c58 	.word	0xfcce1c58
 8009720:	3f800e6a 	.word	0x3f800e6a
 8009724:	00000000 	.word	0x00000000

08009728 <can1_ams_cell_voltages_v6s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s11_encode(double value)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <can1_ams_cell_voltages_v6s11_encode+0x50>)
 8009738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800973c:	f7f6 fd96 	bl	800026c <__aeabi_dsub>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4610      	mov	r0, r2
 8009746:	4619      	mov	r1, r3
 8009748:	a309      	add	r3, pc, #36	; (adr r3, 8009770 <can1_ams_cell_voltages_v6s11_encode+0x48>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f86f 	bl	8000830 <__aeabi_ddiv>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	f7f7 fa17 	bl	8000b8c <__aeabi_d2uiz>
 800975e:	4603      	mov	r3, r0
 8009760:	b2db      	uxtb	r3, r3
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	fcce1c58 	.word	0xfcce1c58
 8009774:	3f800e6a 	.word	0x3f800e6a
 8009778:	40040000 	.word	0x40040000
 800977c:	00000000 	.word	0x00000000

08009780 <can1_ams_cell_voltages_v6s11_decode>:

double can1_ams_cell_voltages_v6s11_decode(uint8_t value)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4618      	mov	r0, r3
 800978e:	f7f6 feab 	bl	80004e8 <__aeabi_ui2d>
 8009792:	a30e      	add	r3, pc, #56	; (adr r3, 80097cc <can1_ams_cell_voltages_v6s11_decode+0x4c>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 ff20 	bl	80005dc <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4610      	mov	r0, r2
 80097a2:	4619      	mov	r1, r3
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <can1_ams_cell_voltages_v6s11_decode+0x48>)
 80097aa:	f7f6 fd61 	bl	8000270 <__adddf3>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80097b6:	eeb0 0a47 	vmov.f32	s0, s14
 80097ba:	eef0 0a67 	vmov.f32	s1, s15
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	f3af 8000 	nop.w
 80097c8:	40040000 	.word	0x40040000
 80097cc:	fcce1c58 	.word	0xfcce1c58
 80097d0:	3f800e6a 	.word	0x3f800e6a
 80097d4:	00000000 	.word	0x00000000

080097d8 <can1_ams_cell_voltages_v6s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s12_encode(double value)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <can1_ams_cell_voltages_v6s12_encode+0x50>)
 80097e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ec:	f7f6 fd3e 	bl	800026c <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	a309      	add	r3, pc, #36	; (adr r3, 8009820 <can1_ams_cell_voltages_v6s12_encode+0x48>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f7 f817 	bl	8000830 <__aeabi_ddiv>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f9bf 	bl	8000b8c <__aeabi_d2uiz>
 800980e:	4603      	mov	r3, r0
 8009810:	b2db      	uxtb	r3, r3
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	fcce1c58 	.word	0xfcce1c58
 8009824:	3f800e6a 	.word	0x3f800e6a
 8009828:	40040000 	.word	0x40040000
 800982c:	00000000 	.word	0x00000000

08009830 <can1_ams_cell_voltages_v6s12_decode>:

double can1_ams_cell_voltages_v6s12_decode(uint8_t value)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 fe53 	bl	80004e8 <__aeabi_ui2d>
 8009842:	a30e      	add	r3, pc, #56	; (adr r3, 800987c <can1_ams_cell_voltages_v6s12_decode+0x4c>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fec8 	bl	80005dc <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f04f 0200 	mov.w	r2, #0
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <can1_ams_cell_voltages_v6s12_decode+0x48>)
 800985a:	f7f6 fd09 	bl	8000270 <__adddf3>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	ec43 2b17 	vmov	d7, r2, r3
}
 8009866:	eeb0 0a47 	vmov.f32	s0, s14
 800986a:	eef0 0a67 	vmov.f32	s1, s15
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	f3af 8000 	nop.w
 8009878:	40040000 	.word	0x40040000
 800987c:	fcce1c58 	.word	0xfcce1c58
 8009880:	3f800e6a 	.word	0x3f800e6a

08009884 <can1_ams_cell_temperatures_pack>:

int can1_ams_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_temperatures_t *src_p,
    size_t size)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b0a2      	sub	sp, #136	; 0x88
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b07      	cmp	r3, #7
 8009894:	d803      	bhi.n	800989e <can1_ams_cell_temperatures_pack+0x1a>
        return (-EINVAL);
 8009896:	f06f 0315 	mvn.w	r3, #21
 800989a:	f001 b90d 	b.w	800aab8 <can1_ams_cell_temperatures_pack+0x1234>
    }

    memset(&dst_p[0], 0, 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f024 fed4 	bl	802e650 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->temperature_multiplexor, 0u, 0x0fu);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	220f      	movs	r2, #15
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f7 fb8d 	bl	8000fd0 <pack_left_shift_u8>
 80098b6:	4603      	mov	r3, r0
 80098b8:	461a      	mov	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4313      	orrs	r3, r2
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	701a      	strb	r2, [r3, #0]

    switch (src_p->temperature_multiplexor) {
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b0b      	cmp	r3, #11
 80098cc:	f201 80f2 	bhi.w	800aab4 <can1_ams_cell_temperatures_pack+0x1230>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <can1_ams_cell_temperatures_pack+0x54>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009909 	.word	0x08009909
 80098dc:	08009a71 	.word	0x08009a71
 80098e0:	08009bd9 	.word	0x08009bd9
 80098e4:	08009d41 	.word	0x08009d41
 80098e8:	08009ea9 	.word	0x08009ea9
 80098ec:	0800a017 	.word	0x0800a017
 80098f0:	0800a19d 	.word	0x0800a19d
 80098f4:	0800a321 	.word	0x0800a321
 80098f8:	0800a4a5 	.word	0x0800a4a5
 80098fc:	0800a629 	.word	0x0800a629
 8009900:	0800a7ad 	.word	0x0800a7ad
 8009904:	0800a931 	.word	0x0800a931

    case 0:
        t1s1 = (uint16_t)src_p->t1s1;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800990e:	833b      	strh	r3, [r7, #24]
        dst_p[0] |= pack_left_shift_u16(t1s1, 4u, 0xf0u);
 8009910:	8b3b      	ldrh	r3, [r7, #24]
 8009912:	22f0      	movs	r2, #240	; 0xf0
 8009914:	2104      	movs	r1, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7f7 fb71 	bl	8000ffe <pack_left_shift_u16>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	4313      	orrs	r3, r2
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s1, 4u, 0xffu);
 800992c:	8b3b      	ldrh	r3, [r7, #24]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	2104      	movs	r1, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 fb7a 	bl	800102c <pack_right_shift_u16>
 8009938:	4603      	mov	r3, r0
 800993a:	4619      	mov	r1, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	430a      	orrs	r2, r1
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]
        t2s1 = (uint16_t)src_p->t2s1;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009952:	82fb      	strh	r3, [r7, #22]
        dst_p[2] |= pack_left_shift_u16(t2s1, 0u, 0xffu);
 8009954:	8afb      	ldrh	r3, [r7, #22]
 8009956:	22ff      	movs	r2, #255	; 0xff
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 fb4f 	bl	8000ffe <pack_left_shift_u16>
 8009960:	4603      	mov	r3, r0
 8009962:	4619      	mov	r1, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3302      	adds	r3, #2
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3302      	adds	r3, #2
 800996e:	430a      	orrs	r2, r1
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s1, 8u, 0x0fu);
 8009974:	8afb      	ldrh	r3, [r7, #22]
 8009976:	220f      	movs	r2, #15
 8009978:	2108      	movs	r1, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7f7 fb56 	bl	800102c <pack_right_shift_u16>
 8009980:	4603      	mov	r3, r0
 8009982:	4619      	mov	r1, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3303      	adds	r3, #3
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3303      	adds	r3, #3
 800998e:	430a      	orrs	r2, r1
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
        t3s1 = (uint16_t)src_p->t3s1;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800999a:	82bb      	strh	r3, [r7, #20]
        dst_p[3] |= pack_left_shift_u16(t3s1, 4u, 0xf0u);
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	22f0      	movs	r2, #240	; 0xf0
 80099a0:	2104      	movs	r1, #4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f7 fb2b 	bl	8000ffe <pack_left_shift_u16>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4619      	mov	r1, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3303      	adds	r3, #3
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3303      	adds	r3, #3
 80099b6:	430a      	orrs	r2, r1
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s1, 4u, 0xffu);
 80099bc:	8abb      	ldrh	r3, [r7, #20]
 80099be:	22ff      	movs	r2, #255	; 0xff
 80099c0:	2104      	movs	r1, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 fb32 	bl	800102c <pack_right_shift_u16>
 80099c8:	4603      	mov	r3, r0
 80099ca:	4619      	mov	r1, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3304      	adds	r3, #4
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3304      	adds	r3, #4
 80099d6:	430a      	orrs	r2, r1
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
        t4s1 = (uint16_t)src_p->t4s1;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80099e2:	827b      	strh	r3, [r7, #18]
        dst_p[5] |= pack_left_shift_u16(t4s1, 0u, 0xffu);
 80099e4:	8a7b      	ldrh	r3, [r7, #18]
 80099e6:	22ff      	movs	r2, #255	; 0xff
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fb07 	bl	8000ffe <pack_left_shift_u16>
 80099f0:	4603      	mov	r3, r0
 80099f2:	4619      	mov	r1, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3305      	adds	r3, #5
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3305      	adds	r3, #5
 80099fe:	430a      	orrs	r2, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s1, 8u, 0x0fu);
 8009a04:	8a7b      	ldrh	r3, [r7, #18]
 8009a06:	220f      	movs	r2, #15
 8009a08:	2108      	movs	r1, #8
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f7 fb0e 	bl	800102c <pack_right_shift_u16>
 8009a10:	4603      	mov	r3, r0
 8009a12:	4619      	mov	r1, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3306      	adds	r3, #6
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3306      	adds	r3, #6
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
        t5s1 = (uint16_t)src_p->t5s1;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8009a2a:	823b      	strh	r3, [r7, #16]
        dst_p[6] |= pack_left_shift_u16(t5s1, 4u, 0xf0u);
 8009a2c:	8a3b      	ldrh	r3, [r7, #16]
 8009a2e:	22f0      	movs	r2, #240	; 0xf0
 8009a30:	2104      	movs	r1, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f7 fae3 	bl	8000ffe <pack_left_shift_u16>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3306      	adds	r3, #6
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3306      	adds	r3, #6
 8009a46:	430a      	orrs	r2, r1
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s1, 4u, 0xffu);
 8009a4c:	8a3b      	ldrh	r3, [r7, #16]
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	2104      	movs	r1, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f7 faea 	bl	800102c <pack_right_shift_u16>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	430a      	orrs	r2, r1
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
        break;
 8009a6c:	f001 b823 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 1:
        t1s2 = (uint16_t)src_p->t1s2;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009a76:	847b      	strh	r3, [r7, #34]	; 0x22
        dst_p[0] |= pack_left_shift_u16(t1s2, 4u, 0xf0u);
 8009a78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a7a:	22f0      	movs	r2, #240	; 0xf0
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f7 fabd 	bl	8000ffe <pack_left_shift_u16>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s2, 4u, 0xffu);
 8009a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f7 fac6 	bl	800102c <pack_right_shift_u16>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
        t2s2 = (uint16_t)src_p->t2s2;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009aba:	843b      	strh	r3, [r7, #32]
        dst_p[2] |= pack_left_shift_u16(t2s2, 0u, 0xffu);
 8009abc:	8c3b      	ldrh	r3, [r7, #32]
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f7 fa9b 	bl	8000ffe <pack_left_shift_u16>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4619      	mov	r1, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s2, 8u, 0x0fu);
 8009adc:	8c3b      	ldrh	r3, [r7, #32]
 8009ade:	220f      	movs	r2, #15
 8009ae0:	2108      	movs	r1, #8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7f7 faa2 	bl	800102c <pack_right_shift_u16>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4619      	mov	r1, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3303      	adds	r3, #3
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3303      	adds	r3, #3
 8009af6:	430a      	orrs	r2, r1
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
        t3s2 = (uint16_t)src_p->t3s2;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009b02:	83fb      	strh	r3, [r7, #30]
        dst_p[3] |= pack_left_shift_u16(t3s2, 4u, 0xf0u);
 8009b04:	8bfb      	ldrh	r3, [r7, #30]
 8009b06:	22f0      	movs	r2, #240	; 0xf0
 8009b08:	2104      	movs	r1, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f7 fa77 	bl	8000ffe <pack_left_shift_u16>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4619      	mov	r1, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3303      	adds	r3, #3
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s2, 4u, 0xffu);
 8009b24:	8bfb      	ldrh	r3, [r7, #30]
 8009b26:	22ff      	movs	r2, #255	; 0xff
 8009b28:	2104      	movs	r1, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f7 fa7e 	bl	800102c <pack_right_shift_u16>
 8009b30:	4603      	mov	r3, r0
 8009b32:	4619      	mov	r1, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3304      	adds	r3, #4
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
        t4s2 = (uint16_t)src_p->t4s2;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8009b4a:	83bb      	strh	r3, [r7, #28]
        dst_p[5] |= pack_left_shift_u16(t4s2, 0u, 0xffu);
 8009b4c:	8bbb      	ldrh	r3, [r7, #28]
 8009b4e:	22ff      	movs	r2, #255	; 0xff
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 fa53 	bl	8000ffe <pack_left_shift_u16>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3305      	adds	r3, #5
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3305      	adds	r3, #5
 8009b66:	430a      	orrs	r2, r1
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s2, 8u, 0x0fu);
 8009b6c:	8bbb      	ldrh	r3, [r7, #28]
 8009b6e:	220f      	movs	r2, #15
 8009b70:	2108      	movs	r1, #8
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f7 fa5a 	bl	800102c <pack_right_shift_u16>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3306      	adds	r3, #6
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3306      	adds	r3, #6
 8009b86:	430a      	orrs	r2, r1
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
        t5s2 = (uint16_t)src_p->t5s2;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8009b92:	837b      	strh	r3, [r7, #26]
        dst_p[6] |= pack_left_shift_u16(t5s2, 4u, 0xf0u);
 8009b94:	8b7b      	ldrh	r3, [r7, #26]
 8009b96:	22f0      	movs	r2, #240	; 0xf0
 8009b98:	2104      	movs	r1, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f7 fa2f 	bl	8000ffe <pack_left_shift_u16>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3306      	adds	r3, #6
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3306      	adds	r3, #6
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s2, 4u, 0xffu);
 8009bb4:	8b7b      	ldrh	r3, [r7, #26]
 8009bb6:	22ff      	movs	r2, #255	; 0xff
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 fa36 	bl	800102c <pack_right_shift_u16>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3307      	adds	r3, #7
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
        break;
 8009bd4:	f000 bf6f 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 2:
        t1s3 = (uint16_t)src_p->t1s3;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
        dst_p[0] |= pack_left_shift_u16(t1s3, 4u, 0xf0u);
 8009be0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009be2:	22f0      	movs	r2, #240	; 0xf0
 8009be4:	2104      	movs	r1, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f7 fa09 	bl	8000ffe <pack_left_shift_u16>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s3, 4u, 0xffu);
 8009bfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	2104      	movs	r1, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f7 fa12 	bl	800102c <pack_right_shift_u16>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	430a      	orrs	r2, r1
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]
        t2s3 = (uint16_t)src_p->t2s3;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009c22:	857b      	strh	r3, [r7, #42]	; 0x2a
        dst_p[2] |= pack_left_shift_u16(t2s3, 0u, 0xffu);
 8009c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f7 f9e7 	bl	8000ffe <pack_left_shift_u16>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4619      	mov	r1, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3302      	adds	r3, #2
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s3, 8u, 0x0fu);
 8009c44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c46:	220f      	movs	r2, #15
 8009c48:	2108      	movs	r1, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f7 f9ee 	bl	800102c <pack_right_shift_u16>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4619      	mov	r1, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3303      	adds	r3, #3
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3303      	adds	r3, #3
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        t3s3 = (uint16_t)src_p->t3s3;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8009c6a:	853b      	strh	r3, [r7, #40]	; 0x28
        dst_p[3] |= pack_left_shift_u16(t3s3, 4u, 0xf0u);
 8009c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c6e:	22f0      	movs	r2, #240	; 0xf0
 8009c70:	2104      	movs	r1, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f7 f9c3 	bl	8000ffe <pack_left_shift_u16>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3303      	adds	r3, #3
 8009c86:	430a      	orrs	r2, r1
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s3, 4u, 0xffu);
 8009c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	2104      	movs	r1, #4
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f7 f9ca 	bl	800102c <pack_right_shift_u16>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
        t4s3 = (uint16_t)src_p->t4s3;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8009cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        dst_p[5] |= pack_left_shift_u16(t4s3, 0u, 0xffu);
 8009cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cb6:	22ff      	movs	r2, #255	; 0xff
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f7 f99f 	bl	8000ffe <pack_left_shift_u16>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3305      	adds	r3, #5
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3305      	adds	r3, #5
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s3, 8u, 0x0fu);
 8009cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cd6:	220f      	movs	r2, #15
 8009cd8:	2108      	movs	r1, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f7 f9a6 	bl	800102c <pack_right_shift_u16>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3306      	adds	r3, #6
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3306      	adds	r3, #6
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
        t5s3 = (uint16_t)src_p->t5s3;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8009cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
        dst_p[6] |= pack_left_shift_u16(t5s3, 4u, 0xf0u);
 8009cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfe:	22f0      	movs	r2, #240	; 0xf0
 8009d00:	2104      	movs	r1, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f7 f97b 	bl	8000ffe <pack_left_shift_u16>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3306      	adds	r3, #6
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3306      	adds	r3, #6
 8009d16:	430a      	orrs	r2, r1
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s3, 4u, 0xffu);
 8009d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	2104      	movs	r1, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f7 f982 	bl	800102c <pack_right_shift_u16>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3307      	adds	r3, #7
 8009d36:	430a      	orrs	r2, r1
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
        break;
 8009d3c:	f000 bebb 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 3:
        t1s4 = (uint16_t)src_p->t1s4;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d46:	86fb      	strh	r3, [r7, #54]	; 0x36
        dst_p[0] |= pack_left_shift_u16(t1s4, 4u, 0xf0u);
 8009d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d4a:	22f0      	movs	r2, #240	; 0xf0
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f7 f955 	bl	8000ffe <pack_left_shift_u16>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s4, 4u, 0xffu);
 8009d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d66:	22ff      	movs	r2, #255	; 0xff
 8009d68:	2104      	movs	r1, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f7 f95e 	bl	800102c <pack_right_shift_u16>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4619      	mov	r1, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3301      	adds	r3, #1
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	b2d2      	uxtb	r2, r2
 8009d82:	701a      	strb	r2, [r3, #0]
        t2s4 = (uint16_t)src_p->t2s4;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009d8a:	86bb      	strh	r3, [r7, #52]	; 0x34
        dst_p[2] |= pack_left_shift_u16(t2s4, 0u, 0xffu);
 8009d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d8e:	22ff      	movs	r2, #255	; 0xff
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f7 f933 	bl	8000ffe <pack_left_shift_u16>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3302      	adds	r3, #2
 8009da6:	430a      	orrs	r2, r1
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s4, 8u, 0x0fu);
 8009dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dae:	220f      	movs	r2, #15
 8009db0:	2108      	movs	r1, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f7 f93a 	bl	800102c <pack_right_shift_u16>
 8009db8:	4603      	mov	r3, r0
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3303      	adds	r3, #3
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3303      	adds	r3, #3
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	b2d2      	uxtb	r2, r2
 8009dca:	701a      	strb	r2, [r3, #0]
        t3s4 = (uint16_t)src_p->t3s4;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8009dd2:	867b      	strh	r3, [r7, #50]	; 0x32
        dst_p[3] |= pack_left_shift_u16(t3s4, 4u, 0xf0u);
 8009dd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dd6:	22f0      	movs	r2, #240	; 0xf0
 8009dd8:	2104      	movs	r1, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f7 f90f 	bl	8000ffe <pack_left_shift_u16>
 8009de0:	4603      	mov	r3, r0
 8009de2:	4619      	mov	r1, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3303      	adds	r3, #3
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3303      	adds	r3, #3
 8009dee:	430a      	orrs	r2, r1
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s4, 4u, 0xffu);
 8009df4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009df6:	22ff      	movs	r2, #255	; 0xff
 8009df8:	2104      	movs	r1, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f7 f916 	bl	800102c <pack_right_shift_u16>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4619      	mov	r1, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3304      	adds	r3, #4
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
        t4s4 = (uint16_t)src_p->t4s4;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009e1a:	863b      	strh	r3, [r7, #48]	; 0x30
        dst_p[5] |= pack_left_shift_u16(t4s4, 0u, 0xffu);
 8009e1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e1e:	22ff      	movs	r2, #255	; 0xff
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f7 f8eb 	bl	8000ffe <pack_left_shift_u16>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3305      	adds	r3, #5
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3305      	adds	r3, #5
 8009e36:	430a      	orrs	r2, r1
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s4, 8u, 0x0fu);
 8009e3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e3e:	220f      	movs	r2, #15
 8009e40:	2108      	movs	r1, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f7 f8f2 	bl	800102c <pack_right_shift_u16>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3306      	adds	r3, #6
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3306      	adds	r3, #6
 8009e56:	430a      	orrs	r2, r1
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]
        t5s4 = (uint16_t)src_p->t5s4;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8009e62:	85fb      	strh	r3, [r7, #46]	; 0x2e
        dst_p[6] |= pack_left_shift_u16(t5s4, 4u, 0xf0u);
 8009e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e66:	22f0      	movs	r2, #240	; 0xf0
 8009e68:	2104      	movs	r1, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f7 f8c7 	bl	8000ffe <pack_left_shift_u16>
 8009e70:	4603      	mov	r3, r0
 8009e72:	4619      	mov	r1, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3306      	adds	r3, #6
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3306      	adds	r3, #6
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s4, 4u, 0xffu);
 8009e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e86:	22ff      	movs	r2, #255	; 0xff
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f7 f8ce 	bl	800102c <pack_right_shift_u16>
 8009e90:	4603      	mov	r3, r0
 8009e92:	4619      	mov	r1, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3307      	adds	r3, #7
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]
        break;
 8009ea4:	f000 be07 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 4:
        t1s5 = (uint16_t)src_p->t1s5;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009eae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        dst_p[0] |= pack_left_shift_u16(t1s5, 4u, 0xf0u);
 8009eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009eb6:	22f0      	movs	r2, #240	; 0xf0
 8009eb8:	2104      	movs	r1, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f7 f89f 	bl	8000ffe <pack_left_shift_u16>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s5, 4u, 0xffu);
 8009ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	2104      	movs	r1, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f7 f8a7 	bl	800102c <pack_right_shift_u16>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	430a      	orrs	r2, r1
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]
        t2s5 = (uint16_t)src_p->t2s5;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        dst_p[2] |= pack_left_shift_u16(t2s5, 0u, 0xffu);
 8009efa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009efc:	22ff      	movs	r2, #255	; 0xff
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7f7 f87c 	bl	8000ffe <pack_left_shift_u16>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3302      	adds	r3, #2
 8009f14:	430a      	orrs	r2, r1
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s5, 8u, 0x0fu);
 8009f1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f1c:	220f      	movs	r2, #15
 8009f1e:	2108      	movs	r1, #8
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f7 f883 	bl	800102c <pack_right_shift_u16>
 8009f26:	4603      	mov	r3, r0
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3303      	adds	r3, #3
 8009f34:	430a      	orrs	r2, r1
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
        t3s5 = (uint16_t)src_p->t3s5;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8009f40:	87bb      	strh	r3, [r7, #60]	; 0x3c
        dst_p[3] |= pack_left_shift_u16(t3s5, 4u, 0xf0u);
 8009f42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f44:	22f0      	movs	r2, #240	; 0xf0
 8009f46:	2104      	movs	r1, #4
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f7 f858 	bl	8000ffe <pack_left_shift_u16>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4619      	mov	r1, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3303      	adds	r3, #3
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3303      	adds	r3, #3
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s5, 4u, 0xffu);
 8009f62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	2104      	movs	r1, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f7 f85f 	bl	800102c <pack_right_shift_u16>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4619      	mov	r1, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3304      	adds	r3, #4
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
        t4s5 = (uint16_t)src_p->t4s5;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009f88:	877b      	strh	r3, [r7, #58]	; 0x3a
        dst_p[5] |= pack_left_shift_u16(t4s5, 0u, 0xffu);
 8009f8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f7 f834 	bl	8000ffe <pack_left_shift_u16>
 8009f96:	4603      	mov	r3, r0
 8009f98:	4619      	mov	r1, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3305      	adds	r3, #5
 8009f9e:	781a      	ldrb	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3305      	adds	r3, #5
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s5, 8u, 0x0fu);
 8009faa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009fac:	220f      	movs	r2, #15
 8009fae:	2108      	movs	r1, #8
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7f7 f83b 	bl	800102c <pack_right_shift_u16>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3306      	adds	r3, #6
 8009fbe:	781a      	ldrb	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3306      	adds	r3, #6
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
        t5s5 = (uint16_t)src_p->t5s5;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8009fd0:	873b      	strh	r3, [r7, #56]	; 0x38
        dst_p[6] |= pack_left_shift_u16(t5s5, 4u, 0xf0u);
 8009fd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009fd4:	22f0      	movs	r2, #240	; 0xf0
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f7 f810 	bl	8000ffe <pack_left_shift_u16>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3306      	adds	r3, #6
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3306      	adds	r3, #6
 8009fec:	430a      	orrs	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s5, 4u, 0xffu);
 8009ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f7 f817 	bl	800102c <pack_right_shift_u16>
 8009ffe:	4603      	mov	r3, r0
 800a000:	4619      	mov	r1, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3307      	adds	r3, #7
 800a00c:	430a      	orrs	r2, r1
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
        break;
 800a012:	f000 bd50 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 5:
        t1s6 = (uint16_t)src_p->t1s6;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a01c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        dst_p[0] |= pack_left_shift_u16(t1s6, 4u, 0xf0u);
 800a020:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a024:	22f0      	movs	r2, #240	; 0xf0
 800a026:	2104      	movs	r1, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 ffe8 	bl	8000ffe <pack_left_shift_u16>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4313      	orrs	r3, r2
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s6, 4u, 0xffu);
 800a03e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a042:	22ff      	movs	r2, #255	; 0xff
 800a044:	2104      	movs	r1, #4
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 fff0 	bl	800102c <pack_right_shift_u16>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4619      	mov	r1, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	430a      	orrs	r2, r1
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
        t2s6 = (uint16_t)src_p->t2s6;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800a066:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        dst_p[2] |= pack_left_shift_u16(t2s6, 0u, 0xffu);
 800a06a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 ffc3 	bl	8000ffe <pack_left_shift_u16>
 800a078:	4603      	mov	r3, r0
 800a07a:	4619      	mov	r1, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3302      	adds	r3, #2
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3302      	adds	r3, #2
 800a086:	430a      	orrs	r2, r1
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s6, 8u, 0x0fu);
 800a08c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a090:	220f      	movs	r2, #15
 800a092:	2108      	movs	r1, #8
 800a094:	4618      	mov	r0, r3
 800a096:	f7f6 ffc9 	bl	800102c <pack_right_shift_u16>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4619      	mov	r1, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3303      	adds	r3, #3
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]
        t3s6 = (uint16_t)src_p->t3s6;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        dst_p[3] |= pack_left_shift_u16(t3s6, 4u, 0xf0u);
 800a0b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0bc:	22f0      	movs	r2, #240	; 0xf0
 800a0be:	2104      	movs	r1, #4
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f6 ff9c 	bl	8000ffe <pack_left_shift_u16>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s6, 4u, 0xffu);
 800a0da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0de:	22ff      	movs	r2, #255	; 0xff
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 ffa2 	bl	800102c <pack_right_shift_u16>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	701a      	strb	r2, [r3, #0]
        t4s6 = (uint16_t)src_p->t4s6;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800a102:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        dst_p[5] |= pack_left_shift_u16(t4s6, 0u, 0xffu);
 800a106:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a10a:	22ff      	movs	r2, #255	; 0xff
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f6 ff75 	bl	8000ffe <pack_left_shift_u16>
 800a114:	4603      	mov	r3, r0
 800a116:	4619      	mov	r1, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3305      	adds	r3, #5
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3305      	adds	r3, #5
 800a122:	430a      	orrs	r2, r1
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s6, 8u, 0x0fu);
 800a128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a12c:	220f      	movs	r2, #15
 800a12e:	2108      	movs	r1, #8
 800a130:	4618      	mov	r0, r3
 800a132:	f7f6 ff7b 	bl	800102c <pack_right_shift_u16>
 800a136:	4603      	mov	r3, r0
 800a138:	4619      	mov	r1, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3306      	adds	r3, #6
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3306      	adds	r3, #6
 800a144:	430a      	orrs	r2, r1
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
        t5s6 = (uint16_t)src_p->t5s6;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800a150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        dst_p[6] |= pack_left_shift_u16(t5s6, 4u, 0xf0u);
 800a154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a158:	22f0      	movs	r2, #240	; 0xf0
 800a15a:	2104      	movs	r1, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 ff4e 	bl	8000ffe <pack_left_shift_u16>
 800a162:	4603      	mov	r3, r0
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3306      	adds	r3, #6
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3306      	adds	r3, #6
 800a170:	430a      	orrs	r2, r1
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s6, 4u, 0xffu);
 800a176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a17a:	22ff      	movs	r2, #255	; 0xff
 800a17c:	2104      	movs	r1, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f7f6 ff54 	bl	800102c <pack_right_shift_u16>
 800a184:	4603      	mov	r3, r0
 800a186:	4619      	mov	r1, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3307      	adds	r3, #7
 800a192:	430a      	orrs	r2, r1
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
        break;
 800a198:	f000 bc8d 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 6:
        t1s7 = (uint16_t)src_p->t1s7;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a1a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        dst_p[0] |= pack_left_shift_u16(t1s7, 4u, 0xf0u);
 800a1a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1aa:	22f0      	movs	r2, #240	; 0xf0
 800a1ac:	2104      	movs	r1, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 ff25 	bl	8000ffe <pack_left_shift_u16>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s7, 4u, 0xffu);
 800a1c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 ff2d 	bl	800102c <pack_right_shift_u16>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
        t2s7 = (uint16_t)src_p->t2s7;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a1ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        dst_p[2] |= pack_left_shift_u16(t2s7, 0u, 0xffu);
 800a1f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f6 ff00 	bl	8000ffe <pack_left_shift_u16>
 800a1fe:	4603      	mov	r3, r0
 800a200:	4619      	mov	r1, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3302      	adds	r3, #2
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3302      	adds	r3, #2
 800a20c:	430a      	orrs	r2, r1
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s7, 8u, 0x0fu);
 800a212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a216:	220f      	movs	r2, #15
 800a218:	2108      	movs	r1, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 ff06 	bl	800102c <pack_right_shift_u16>
 800a220:	4603      	mov	r3, r0
 800a222:	4619      	mov	r1, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3303      	adds	r3, #3
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3303      	adds	r3, #3
 800a22e:	430a      	orrs	r2, r1
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
        t3s7 = (uint16_t)src_p->t3s7;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a23a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        dst_p[3] |= pack_left_shift_u16(t3s7, 4u, 0xf0u);
 800a23e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a242:	22f0      	movs	r2, #240	; 0xf0
 800a244:	2104      	movs	r1, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7f6 fed9 	bl	8000ffe <pack_left_shift_u16>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4619      	mov	r1, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3303      	adds	r3, #3
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3303      	adds	r3, #3
 800a25a:	430a      	orrs	r2, r1
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s7, 4u, 0xffu);
 800a260:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	2104      	movs	r1, #4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f6 fedf 	bl	800102c <pack_right_shift_u16>
 800a26e:	4603      	mov	r3, r0
 800a270:	4619      	mov	r1, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3304      	adds	r3, #4
 800a27c:	430a      	orrs	r2, r1
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
        t4s7 = (uint16_t)src_p->t4s7;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        dst_p[5] |= pack_left_shift_u16(t4s7, 0u, 0xffu);
 800a28c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f7f6 feb2 	bl	8000ffe <pack_left_shift_u16>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4619      	mov	r1, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3305      	adds	r3, #5
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3305      	adds	r3, #5
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s7, 8u, 0x0fu);
 800a2ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b2:	220f      	movs	r2, #15
 800a2b4:	2108      	movs	r1, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 feb8 	bl	800102c <pack_right_shift_u16>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3306      	adds	r3, #6
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3306      	adds	r3, #6
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
        t5s7 = (uint16_t)src_p->t5s7;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 800a2d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        dst_p[6] |= pack_left_shift_u16(t5s7, 4u, 0xf0u);
 800a2da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a2de:	22f0      	movs	r2, #240	; 0xf0
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f6 fe8b 	bl	8000ffe <pack_left_shift_u16>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3306      	adds	r3, #6
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3306      	adds	r3, #6
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s7, 4u, 0xffu);
 800a2fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	2104      	movs	r1, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7f6 fe91 	bl	800102c <pack_right_shift_u16>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4619      	mov	r1, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3307      	adds	r3, #7
 800a318:	430a      	orrs	r2, r1
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
        break;
 800a31e:	e3ca      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 7:
        t1s8 = (uint16_t)src_p->t1s8;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a326:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        dst_p[0] |= pack_left_shift_u16(t1s8, 4u, 0xf0u);
 800a32a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a32e:	22f0      	movs	r2, #240	; 0xf0
 800a330:	2104      	movs	r1, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 fe63 	bl	8000ffe <pack_left_shift_u16>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	b2da      	uxtb	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s8, 4u, 0xffu);
 800a348:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	2104      	movs	r1, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fe6b 	bl	800102c <pack_right_shift_u16>
 800a356:	4603      	mov	r3, r0
 800a358:	4619      	mov	r1, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	430a      	orrs	r2, r1
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
        t2s8 = (uint16_t)src_p->t2s8;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800a370:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        dst_p[2] |= pack_left_shift_u16(t2s8, 0u, 0xffu);
 800a374:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a378:	22ff      	movs	r2, #255	; 0xff
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f6 fe3e 	bl	8000ffe <pack_left_shift_u16>
 800a382:	4603      	mov	r3, r0
 800a384:	4619      	mov	r1, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3302      	adds	r3, #2
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3302      	adds	r3, #2
 800a390:	430a      	orrs	r2, r1
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s8, 8u, 0x0fu);
 800a396:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a39a:	220f      	movs	r2, #15
 800a39c:	2108      	movs	r1, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fe44 	bl	800102c <pack_right_shift_u16>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
        t3s8 = (uint16_t)src_p->t3s8;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        dst_p[3] |= pack_left_shift_u16(t3s8, 4u, 0xf0u);
 800a3c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3c6:	22f0      	movs	r2, #240	; 0xf0
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 fe17 	bl	8000ffe <pack_left_shift_u16>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3303      	adds	r3, #3
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s8, 4u, 0xffu);
 800a3e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3e8:	22ff      	movs	r2, #255	; 0xff
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 fe1d 	bl	800102c <pack_right_shift_u16>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3304      	adds	r3, #4
 800a400:	430a      	orrs	r2, r1
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
        t4s8 = (uint16_t)src_p->t4s8;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a40c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        dst_p[5] |= pack_left_shift_u16(t4s8, 0u, 0xffu);
 800a410:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f7f6 fdf0 	bl	8000ffe <pack_left_shift_u16>
 800a41e:	4603      	mov	r3, r0
 800a420:	4619      	mov	r1, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3305      	adds	r3, #5
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3305      	adds	r3, #5
 800a42c:	430a      	orrs	r2, r1
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s8, 8u, 0x0fu);
 800a432:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a436:	220f      	movs	r2, #15
 800a438:	2108      	movs	r1, #8
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 fdf6 	bl	800102c <pack_right_shift_u16>
 800a440:	4603      	mov	r3, r0
 800a442:	4619      	mov	r1, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3306      	adds	r3, #6
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3306      	adds	r3, #6
 800a44e:	430a      	orrs	r2, r1
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
        t5s8 = (uint16_t)src_p->t5s8;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800a45a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        dst_p[6] |= pack_left_shift_u16(t5s8, 4u, 0xf0u);
 800a45e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a462:	22f0      	movs	r2, #240	; 0xf0
 800a464:	2104      	movs	r1, #4
 800a466:	4618      	mov	r0, r3
 800a468:	f7f6 fdc9 	bl	8000ffe <pack_left_shift_u16>
 800a46c:	4603      	mov	r3, r0
 800a46e:	4619      	mov	r1, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3306      	adds	r3, #6
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3306      	adds	r3, #6
 800a47a:	430a      	orrs	r2, r1
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s8, 4u, 0xffu);
 800a480:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a484:	22ff      	movs	r2, #255	; 0xff
 800a486:	2104      	movs	r1, #4
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f6 fdcf 	bl	800102c <pack_right_shift_u16>
 800a48e:	4603      	mov	r3, r0
 800a490:	4619      	mov	r1, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3307      	adds	r3, #7
 800a496:	781a      	ldrb	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3307      	adds	r3, #7
 800a49c:	430a      	orrs	r2, r1
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
        break;
 800a4a2:	e308      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 8:
        t1s9 = (uint16_t)src_p->t1s9;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4aa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        dst_p[0] |= pack_left_shift_u16(t1s9, 4u, 0xf0u);
 800a4ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4b2:	22f0      	movs	r2, #240	; 0xf0
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f6 fda1 	bl	8000ffe <pack_left_shift_u16>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s9, 4u, 0xffu);
 800a4cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	2104      	movs	r1, #4
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fda9 	bl	800102c <pack_right_shift_u16>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
        t2s9 = (uint16_t)src_p->t2s9;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a4f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        dst_p[2] |= pack_left_shift_u16(t2s9, 0u, 0xffu);
 800a4f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f7f6 fd7c 	bl	8000ffe <pack_left_shift_u16>
 800a506:	4603      	mov	r3, r0
 800a508:	4619      	mov	r1, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3302      	adds	r3, #2
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3302      	adds	r3, #2
 800a514:	430a      	orrs	r2, r1
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s9, 8u, 0x0fu);
 800a51a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a51e:	220f      	movs	r2, #15
 800a520:	2108      	movs	r1, #8
 800a522:	4618      	mov	r0, r3
 800a524:	f7f6 fd82 	bl	800102c <pack_right_shift_u16>
 800a528:	4603      	mov	r3, r0
 800a52a:	4619      	mov	r1, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3303      	adds	r3, #3
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3303      	adds	r3, #3
 800a536:	430a      	orrs	r2, r1
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
        t3s9 = (uint16_t)src_p->t3s9;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800a542:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        dst_p[3] |= pack_left_shift_u16(t3s9, 4u, 0xf0u);
 800a546:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a54a:	22f0      	movs	r2, #240	; 0xf0
 800a54c:	2104      	movs	r1, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 fd55 	bl	8000ffe <pack_left_shift_u16>
 800a554:	4603      	mov	r3, r0
 800a556:	4619      	mov	r1, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3303      	adds	r3, #3
 800a55c:	781a      	ldrb	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3303      	adds	r3, #3
 800a562:	430a      	orrs	r2, r1
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s9, 4u, 0xffu);
 800a568:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a56c:	22ff      	movs	r2, #255	; 0xff
 800a56e:	2104      	movs	r1, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7f6 fd5b 	bl	800102c <pack_right_shift_u16>
 800a576:	4603      	mov	r3, r0
 800a578:	4619      	mov	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3304      	adds	r3, #4
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3304      	adds	r3, #4
 800a584:	430a      	orrs	r2, r1
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
        t4s9 = (uint16_t)src_p->t4s9;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800a590:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        dst_p[5] |= pack_left_shift_u16(t4s9, 0u, 0xffu);
 800a594:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f6 fd2e 	bl	8000ffe <pack_left_shift_u16>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3305      	adds	r3, #5
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3305      	adds	r3, #5
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s9, 8u, 0x0fu);
 800a5b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a5ba:	220f      	movs	r2, #15
 800a5bc:	2108      	movs	r1, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f6 fd34 	bl	800102c <pack_right_shift_u16>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3306      	adds	r3, #6
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3306      	adds	r3, #6
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
        t5s9 = (uint16_t)src_p->t5s9;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800a5de:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        dst_p[6] |= pack_left_shift_u16(t5s9, 4u, 0xf0u);
 800a5e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a5e6:	22f0      	movs	r2, #240	; 0xf0
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f6 fd07 	bl	8000ffe <pack_left_shift_u16>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3306      	adds	r3, #6
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3306      	adds	r3, #6
 800a5fe:	430a      	orrs	r2, r1
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s9, 4u, 0xffu);
 800a604:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	2104      	movs	r1, #4
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7f6 fd0d 	bl	800102c <pack_right_shift_u16>
 800a612:	4603      	mov	r3, r0
 800a614:	4619      	mov	r1, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3307      	adds	r3, #7
 800a620:	430a      	orrs	r2, r1
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
        break;
 800a626:	e246      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 9:
        t1s10 = (uint16_t)src_p->t1s10;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a62e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        dst_p[0] |= pack_left_shift_u16(t1s10, 4u, 0xf0u);
 800a632:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a636:	22f0      	movs	r2, #240	; 0xf0
 800a638:	2104      	movs	r1, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f6 fcdf 	bl	8000ffe <pack_left_shift_u16>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4313      	orrs	r3, r2
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s10, 4u, 0xffu);
 800a650:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	2104      	movs	r1, #4
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f6 fce7 	bl	800102c <pack_right_shift_u16>
 800a65e:	4603      	mov	r3, r0
 800a660:	4619      	mov	r1, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3301      	adds	r3, #1
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	430a      	orrs	r2, r1
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]
        t2s10 = (uint16_t)src_p->t2s10;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800a678:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        dst_p[2] |= pack_left_shift_u16(t2s10, 0u, 0xffu);
 800a67c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a680:	22ff      	movs	r2, #255	; 0xff
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f7f6 fcba 	bl	8000ffe <pack_left_shift_u16>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4619      	mov	r1, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3302      	adds	r3, #2
 800a692:	781a      	ldrb	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3302      	adds	r3, #2
 800a698:	430a      	orrs	r2, r1
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s10, 8u, 0x0fu);
 800a69e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a6a2:	220f      	movs	r2, #15
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f6 fcc0 	bl	800102c <pack_right_shift_u16>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3303      	adds	r3, #3
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
        t3s10 = (uint16_t)src_p->t3s10;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a6c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        dst_p[3] |= pack_left_shift_u16(t3s10, 4u, 0xf0u);
 800a6ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6ce:	22f0      	movs	r2, #240	; 0xf0
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f6 fc93 	bl	8000ffe <pack_left_shift_u16>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4619      	mov	r1, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3303      	adds	r3, #3
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3303      	adds	r3, #3
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s10, 4u, 0xffu);
 800a6ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f6 fc99 	bl	800102c <pack_right_shift_u16>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3304      	adds	r3, #4
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3304      	adds	r3, #4
 800a708:	430a      	orrs	r2, r1
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
        t4s10 = (uint16_t)src_p->t4s10;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800a714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        dst_p[5] |= pack_left_shift_u16(t4s10, 0u, 0xffu);
 800a718:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f7f6 fc6c 	bl	8000ffe <pack_left_shift_u16>
 800a726:	4603      	mov	r3, r0
 800a728:	4619      	mov	r1, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3305      	adds	r3, #5
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3305      	adds	r3, #5
 800a734:	430a      	orrs	r2, r1
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s10, 8u, 0x0fu);
 800a73a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a73e:	220f      	movs	r2, #15
 800a740:	2108      	movs	r1, #8
 800a742:	4618      	mov	r0, r3
 800a744:	f7f6 fc72 	bl	800102c <pack_right_shift_u16>
 800a748:	4603      	mov	r3, r0
 800a74a:	4619      	mov	r1, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3306      	adds	r3, #6
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3306      	adds	r3, #6
 800a756:	430a      	orrs	r2, r1
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
        t5s10 = (uint16_t)src_p->t5s10;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800a762:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        dst_p[6] |= pack_left_shift_u16(t5s10, 4u, 0xf0u);
 800a766:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a76a:	22f0      	movs	r2, #240	; 0xf0
 800a76c:	2104      	movs	r1, #4
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f6 fc45 	bl	8000ffe <pack_left_shift_u16>
 800a774:	4603      	mov	r3, r0
 800a776:	4619      	mov	r1, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3306      	adds	r3, #6
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3306      	adds	r3, #6
 800a782:	430a      	orrs	r2, r1
 800a784:	b2d2      	uxtb	r2, r2
 800a786:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s10, 4u, 0xffu);
 800a788:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a78c:	22ff      	movs	r2, #255	; 0xff
 800a78e:	2104      	movs	r1, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7f6 fc4b 	bl	800102c <pack_right_shift_u16>
 800a796:	4603      	mov	r3, r0
 800a798:	4619      	mov	r1, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
        break;
 800a7aa:	e184      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 10:
        t1s11 = (uint16_t)src_p->t1s11;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a7b2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        dst_p[0] |= pack_left_shift_u16(t1s11, 4u, 0xf0u);
 800a7b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7ba:	22f0      	movs	r2, #240	; 0xf0
 800a7bc:	2104      	movs	r1, #4
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f6 fc1d 	bl	8000ffe <pack_left_shift_u16>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s11, 4u, 0xffu);
 800a7d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7d8:	22ff      	movs	r2, #255	; 0xff
 800a7da:	2104      	movs	r1, #4
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f6 fc25 	bl	800102c <pack_right_shift_u16>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
        t2s11 = (uint16_t)src_p->t2s11;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a7fc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        dst_p[2] |= pack_left_shift_u16(t2s11, 0u, 0xffu);
 800a800:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a804:	22ff      	movs	r2, #255	; 0xff
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f6 fbf8 	bl	8000ffe <pack_left_shift_u16>
 800a80e:	4603      	mov	r3, r0
 800a810:	4619      	mov	r1, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3302      	adds	r3, #2
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3302      	adds	r3, #2
 800a81c:	430a      	orrs	r2, r1
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s11, 8u, 0x0fu);
 800a822:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a826:	220f      	movs	r2, #15
 800a828:	2108      	movs	r1, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fbfe 	bl	800102c <pack_right_shift_u16>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3303      	adds	r3, #3
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3303      	adds	r3, #3
 800a83e:	430a      	orrs	r2, r1
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]
        t3s11 = (uint16_t)src_p->t3s11;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a84a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        dst_p[3] |= pack_left_shift_u16(t3s11, 4u, 0xf0u);
 800a84e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a852:	22f0      	movs	r2, #240	; 0xf0
 800a854:	2104      	movs	r1, #4
 800a856:	4618      	mov	r0, r3
 800a858:	f7f6 fbd1 	bl	8000ffe <pack_left_shift_u16>
 800a85c:	4603      	mov	r3, r0
 800a85e:	4619      	mov	r1, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3303      	adds	r3, #3
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3303      	adds	r3, #3
 800a86a:	430a      	orrs	r2, r1
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s11, 4u, 0xffu);
 800a870:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	2104      	movs	r1, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f6 fbd7 	bl	800102c <pack_right_shift_u16>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3304      	adds	r3, #4
 800a88c:	430a      	orrs	r2, r1
 800a88e:	b2d2      	uxtb	r2, r2
 800a890:	701a      	strb	r2, [r3, #0]
        t4s11 = (uint16_t)src_p->t4s11;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800a898:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        dst_p[5] |= pack_left_shift_u16(t4s11, 0u, 0xffu);
 800a89c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8a0:	22ff      	movs	r2, #255	; 0xff
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7f6 fbaa 	bl	8000ffe <pack_left_shift_u16>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3305      	adds	r3, #5
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3305      	adds	r3, #5
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s11, 8u, 0x0fu);
 800a8be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8c2:	220f      	movs	r2, #15
 800a8c4:	2108      	movs	r1, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f6 fbb0 	bl	800102c <pack_right_shift_u16>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3306      	adds	r3, #6
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
        t5s11 = (uint16_t)src_p->t5s11;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800a8e6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        dst_p[6] |= pack_left_shift_u16(t5s11, 4u, 0xf0u);
 800a8ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a8ee:	22f0      	movs	r2, #240	; 0xf0
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7f6 fb83 	bl	8000ffe <pack_left_shift_u16>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3306      	adds	r3, #6
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3306      	adds	r3, #6
 800a906:	430a      	orrs	r2, r1
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s11, 4u, 0xffu);
 800a90c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	2104      	movs	r1, #4
 800a914:	4618      	mov	r0, r3
 800a916:	f7f6 fb89 	bl	800102c <pack_right_shift_u16>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4619      	mov	r1, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3307      	adds	r3, #7
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3307      	adds	r3, #7
 800a928:	430a      	orrs	r2, r1
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]
        break;
 800a92e:	e0c2      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 11:
        t1s12 = (uint16_t)src_p->t1s12;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a936:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        dst_p[0] |= pack_left_shift_u16(t1s12, 4u, 0xf0u);
 800a93a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a93e:	22f0      	movs	r2, #240	; 0xf0
 800a940:	2104      	movs	r1, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7f6 fb5b 	bl	8000ffe <pack_left_shift_u16>
 800a948:	4603      	mov	r3, r0
 800a94a:	461a      	mov	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	b2da      	uxtb	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s12, 4u, 0xffu);
 800a958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	2104      	movs	r1, #4
 800a960:	4618      	mov	r0, r3
 800a962:	f7f6 fb63 	bl	800102c <pack_right_shift_u16>
 800a966:	4603      	mov	r3, r0
 800a968:	4619      	mov	r1, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3301      	adds	r3, #1
 800a96e:	781a      	ldrb	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	430a      	orrs	r2, r1
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
        t2s12 = (uint16_t)src_p->t2s12;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a980:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        dst_p[2] |= pack_left_shift_u16(t2s12, 0u, 0xffu);
 800a984:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f6 fb36 	bl	8000ffe <pack_left_shift_u16>
 800a992:	4603      	mov	r3, r0
 800a994:	4619      	mov	r1, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3302      	adds	r3, #2
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3302      	adds	r3, #2
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s12, 8u, 0x0fu);
 800a9a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a9aa:	220f      	movs	r2, #15
 800a9ac:	2108      	movs	r1, #8
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f6 fb3c 	bl	800102c <pack_right_shift_u16>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	b2d2      	uxtb	r2, r2
 800a9c6:	701a      	strb	r2, [r3, #0]
        t3s12 = (uint16_t)src_p->t3s12;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a9ce:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        dst_p[3] |= pack_left_shift_u16(t3s12, 4u, 0xf0u);
 800a9d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9d6:	22f0      	movs	r2, #240	; 0xf0
 800a9d8:	2104      	movs	r1, #4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f6 fb0f 	bl	8000ffe <pack_left_shift_u16>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3303      	adds	r3, #3
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3303      	adds	r3, #3
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s12, 4u, 0xffu);
 800a9f4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 fb15 	bl	800102c <pack_right_shift_u16>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4619      	mov	r1, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	781a      	ldrb	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	430a      	orrs	r2, r1
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	701a      	strb	r2, [r3, #0]
        t4s12 = (uint16_t)src_p->t4s12;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800aa1c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        dst_p[5] |= pack_left_shift_u16(t4s12, 0u, 0xffu);
 800aa20:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa24:	22ff      	movs	r2, #255	; 0xff
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7f6 fae8 	bl	8000ffe <pack_left_shift_u16>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4619      	mov	r1, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3305      	adds	r3, #5
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3305      	adds	r3, #5
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s12, 8u, 0x0fu);
 800aa42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa46:	220f      	movs	r2, #15
 800aa48:	2108      	movs	r1, #8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f6 faee 	bl	800102c <pack_right_shift_u16>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4619      	mov	r1, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3306      	adds	r3, #6
 800aa58:	781a      	ldrb	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3306      	adds	r3, #6
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	701a      	strb	r2, [r3, #0]
        t5s12 = (uint16_t)src_p->t5s12;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800aa6a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        dst_p[6] |= pack_left_shift_u16(t5s12, 4u, 0xf0u);
 800aa6e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa72:	22f0      	movs	r2, #240	; 0xf0
 800aa74:	2104      	movs	r1, #4
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f6 fac1 	bl	8000ffe <pack_left_shift_u16>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3306      	adds	r3, #6
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3306      	adds	r3, #6
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s12, 4u, 0xffu);
 800aa90:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	2104      	movs	r1, #4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 fac7 	bl	800102c <pack_right_shift_u16>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3307      	adds	r3, #7
 800aaac:	430a      	orrs	r2, r1
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
        break;
 800aab2:	e000      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    default:
        break;
 800aab4:	bf00      	nop
    }

    return (8);
 800aab6:	2308      	movs	r3, #8
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3788      	adds	r7, #136	; 0x88
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <can1_ams_cell_temperatures_unpack>:

int can1_ams_cell_temperatures_unpack(
    struct can1_ams_cell_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b0a2      	sub	sp, #136	; 0x88
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d803      	bhi.n	800aada <can1_ams_cell_temperatures_unpack+0x1a>
        return (-EINVAL);
 800aad2:	f06f 0315 	mvn.w	r3, #21
 800aad6:	f001 ba11 	b.w	800befc <can1_ams_cell_temperatures_unpack+0x143c>
    }

    dst_p->temperature_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	220f      	movs	r2, #15
 800aae0:	2100      	movs	r1, #0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f6 fad1 	bl	800108a <unpack_right_shift_u8>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	701a      	strb	r2, [r3, #0]

    switch (dst_p->temperature_multiplexor) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b0b      	cmp	r3, #11
 800aaf6:	f201 81ff 	bhi.w	800bef8 <can1_ams_cell_temperatures_unpack+0x1438>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <can1_ams_cell_temperatures_unpack+0x40>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab31 	.word	0x0800ab31
 800ab04:	0800acd7 	.word	0x0800acd7
 800ab08:	0800ae7d 	.word	0x0800ae7d
 800ab0c:	0800b023 	.word	0x0800b023
 800ab10:	0800b1c9 	.word	0x0800b1c9
 800ab14:	0800b36f 	.word	0x0800b36f
 800ab18:	0800b515 	.word	0x0800b515
 800ab1c:	0800b6bb 	.word	0x0800b6bb
 800ab20:	0800b861 	.word	0x0800b861
 800ab24:	0800ba07 	.word	0x0800ba07
 800ab28:	0800bbad 	.word	0x0800bbad
 800ab2c:	0800bd53 	.word	0x0800bd53

    case 0:
        t1s1 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	22f0      	movs	r2, #240	; 0xf0
 800ab36:	2104      	movs	r1, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f6 fabe 	bl	80010ba <unpack_right_shift_u16>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        t1s1 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3301      	adds	r3, #1
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	22ff      	movs	r2, #255	; 0xff
 800ab4c:	2104      	movs	r1, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7f6 fa83 	bl	800105a <unpack_left_shift_u16>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

        if ((t1s1 & (1u << 11)) != 0u) {
 800ab62:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d007      	beq.n	800ab7e <can1_ams_cell_temperatures_unpack+0xbe>
            t1s1 |= 0xf000u;
 800ab6e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab72:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ab76:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ab7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        }

        dst_p->t1s1 = (int16_t)t1s1;
 800ab7e:	f9b7 2080 	ldrsh.w	r2, [r7, #128]	; 0x80
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	805a      	strh	r2, [r3, #2]
        t2s1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	3302      	adds	r3, #2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	22ff      	movs	r2, #255	; 0xff
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f6 fa92 	bl	80010ba <unpack_right_shift_u16>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        t2s1 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3303      	adds	r3, #3
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	220f      	movs	r2, #15
 800aba4:	2108      	movs	r1, #8
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f6 fa57 	bl	800105a <unpack_left_shift_u16>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        if ((t2s1 & (1u << 11)) != 0u) {
 800abba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <can1_ams_cell_temperatures_unpack+0x116>
            t2s1 |= 0xf000u;
 800abc6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800abce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800abd2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        }

        dst_p->t2s1 = (int16_t)t2s1;
 800abd6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	835a      	strh	r2, [r3, #26]
        t3s1 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	3303      	adds	r3, #3
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	22f0      	movs	r2, #240	; 0xf0
 800abe6:	2104      	movs	r1, #4
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f6 fa66 	bl	80010ba <unpack_right_shift_u16>
 800abee:	4603      	mov	r3, r0
 800abf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        t3s1 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3304      	adds	r3, #4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	22ff      	movs	r2, #255	; 0xff
 800abfc:	2104      	movs	r1, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f6 fa2b 	bl	800105a <unpack_left_shift_u16>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

        if ((t3s1 & (1u << 11)) != 0u) {
 800ac12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <can1_ams_cell_temperatures_unpack+0x16e>
            t3s1 |= 0xf000u;
 800ac1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac22:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac26:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        }

        dst_p->t3s1 = (int16_t)t3s1;
 800ac2e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	865a      	strh	r2, [r3, #50]	; 0x32
        t4s1 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3305      	adds	r3, #5
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f6 fa3a 	bl	80010ba <unpack_right_shift_u16>
 800ac46:	4603      	mov	r3, r0
 800ac48:	873b      	strh	r3, [r7, #56]	; 0x38
        t4s1 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3306      	adds	r3, #6
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	220f      	movs	r2, #15
 800ac52:	2108      	movs	r1, #8
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7f6 fa00 	bl	800105a <unpack_left_shift_u16>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac60:	4313      	orrs	r3, r2
 800ac62:	873b      	strh	r3, [r7, #56]	; 0x38

        if ((t4s1 & (1u << 11)) != 0u) {
 800ac64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <can1_ams_cell_temperatures_unpack+0x1ba>
            t4s1 |= 0xf000u;
 800ac6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac78:	873b      	strh	r3, [r7, #56]	; 0x38
        }

        dst_p->t4s1 = (int16_t)t4s1;
 800ac7a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        t5s1 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3306      	adds	r3, #6
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	22f0      	movs	r2, #240	; 0xf0
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f6 fa13 	bl	80010ba <unpack_right_shift_u16>
 800ac94:	4603      	mov	r3, r0
 800ac96:	843b      	strh	r3, [r7, #32]
        t5s1 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	3307      	adds	r3, #7
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	22ff      	movs	r2, #255	; 0xff
 800aca0:	2104      	movs	r1, #4
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f6 f9d9 	bl	800105a <unpack_left_shift_u16>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	8c3b      	ldrh	r3, [r7, #32]
 800acae:	4313      	orrs	r3, r2
 800acb0:	843b      	strh	r3, [r7, #32]

        if ((t5s1 & (1u << 11)) != 0u) {
 800acb2:	8c3b      	ldrh	r3, [r7, #32]
 800acb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <can1_ams_cell_temperatures_unpack+0x208>
            t5s1 |= 0xf000u;
 800acbc:	8c3b      	ldrh	r3, [r7, #32]
 800acbe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800acc2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800acc6:	843b      	strh	r3, [r7, #32]
        }

        dst_p->t5s1 = (int16_t)t5s1;
 800acc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        break;
 800acd2:	f001 b912 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 1:
        t1s2 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	22f0      	movs	r2, #240	; 0xf0
 800acdc:	2104      	movs	r1, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f6 f9eb 	bl	80010ba <unpack_right_shift_u16>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        t1s2 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	3301      	adds	r3, #1
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	22ff      	movs	r2, #255	; 0xff
 800acf2:	2104      	movs	r1, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f6 f9b0 	bl	800105a <unpack_left_shift_u16>
 800acfa:	4603      	mov	r3, r0
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if ((t1s2 & (1u << 11)) != 0u) {
 800ad08:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <can1_ams_cell_temperatures_unpack+0x264>
            t1s2 |= 0xf000u;
 800ad14:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad18:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad1c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        }

        dst_p->t1s2 = (int16_t)t1s2;
 800ad24:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	809a      	strh	r2, [r3, #4]
        t2s2 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3302      	adds	r3, #2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	22ff      	movs	r2, #255	; 0xff
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f6 f9bf 	bl	80010ba <unpack_right_shift_u16>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        t2s2 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3303      	adds	r3, #3
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	220f      	movs	r2, #15
 800ad4a:	2108      	movs	r1, #8
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f6 f984 	bl	800105a <unpack_left_shift_u16>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        if ((t2s2 & (1u << 11)) != 0u) {
 800ad60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <can1_ams_cell_temperatures_unpack+0x2bc>
            t2s2 |= 0xf000u;
 800ad6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        }

        dst_p->t2s2 = (int16_t)t2s2;
 800ad7c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	839a      	strh	r2, [r3, #28]
        t3s2 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	3303      	adds	r3, #3
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	22f0      	movs	r2, #240	; 0xf0
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f6 f993 	bl	80010ba <unpack_right_shift_u16>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        t3s2 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	2104      	movs	r1, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f6 f958 	bl	800105a <unpack_left_shift_u16>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        if ((t3s2 & (1u << 11)) != 0u) {
 800adb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <can1_ams_cell_temperatures_unpack+0x314>
            t3s2 |= 0xf000u;
 800adc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adc8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800adcc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800add0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        dst_p->t3s2 = (int16_t)t3s2;
 800add4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	869a      	strh	r2, [r3, #52]	; 0x34
        t4s2 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3305      	adds	r3, #5
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	22ff      	movs	r2, #255	; 0xff
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f6 f967 	bl	80010ba <unpack_right_shift_u16>
 800adec:	4603      	mov	r3, r0
 800adee:	86fb      	strh	r3, [r7, #54]	; 0x36
        t4s2 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3306      	adds	r3, #6
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	220f      	movs	r2, #15
 800adf8:	2108      	movs	r1, #8
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f6 f92d 	bl	800105a <unpack_left_shift_u16>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae06:	4313      	orrs	r3, r2
 800ae08:	86fb      	strh	r3, [r7, #54]	; 0x36

        if ((t4s2 & (1u << 11)) != 0u) {
 800ae0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <can1_ams_cell_temperatures_unpack+0x360>
            t4s2 |= 0xf000u;
 800ae14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        dst_p->t4s2 = (int16_t)t4s2;
 800ae20:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        t5s2 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3306      	adds	r3, #6
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	22f0      	movs	r2, #240	; 0xf0
 800ae32:	2104      	movs	r1, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f6 f940 	bl	80010ba <unpack_right_shift_u16>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	83fb      	strh	r3, [r7, #30]
        t5s2 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	3307      	adds	r3, #7
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	22ff      	movs	r2, #255	; 0xff
 800ae46:	2104      	movs	r1, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f6 f906 	bl	800105a <unpack_left_shift_u16>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	8bfb      	ldrh	r3, [r7, #30]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	83fb      	strh	r3, [r7, #30]

        if ((t5s2 & (1u << 11)) != 0u) {
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <can1_ams_cell_temperatures_unpack+0x3ae>
            t5s2 |= 0xf000u;
 800ae62:	8bfb      	ldrh	r3, [r7, #30]
 800ae64:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae68:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae6c:	83fb      	strh	r3, [r7, #30]
        }

        dst_p->t5s2 = (int16_t)t5s2;
 800ae6e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        break;
 800ae78:	f001 b83f 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 2:
        t1s3 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	22f0      	movs	r2, #240	; 0xf0
 800ae82:	2104      	movs	r1, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f6 f918 	bl	80010ba <unpack_right_shift_u16>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        t1s3 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	3301      	adds	r3, #1
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	22ff      	movs	r2, #255	; 0xff
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f6 f8dd 	bl	800105a <unpack_left_shift_u16>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

        if ((t1s3 & (1u << 11)) != 0u) {
 800aeae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aeb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <can1_ams_cell_temperatures_unpack+0x40a>
            t1s3 |= 0xf000u;
 800aeba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aebe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aec2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aec6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        }

        dst_p->t1s3 = (int16_t)t1s3;
 800aeca:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	80da      	strh	r2, [r3, #6]
        t2s3 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	3302      	adds	r3, #2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	22ff      	movs	r2, #255	; 0xff
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f6 f8ec 	bl	80010ba <unpack_right_shift_u16>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        t2s3 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	3303      	adds	r3, #3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	220f      	movs	r2, #15
 800aef0:	2108      	movs	r1, #8
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f6 f8b1 	bl	800105a <unpack_left_shift_u16>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af00:	4313      	orrs	r3, r2
 800af02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

        if ((t2s3 & (1u << 11)) != 0u) {
 800af06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d007      	beq.n	800af22 <can1_ams_cell_temperatures_unpack+0x462>
            t2s3 |= 0xf000u;
 800af12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        }

        dst_p->t2s3 = (int16_t)t2s3;
 800af22:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	83da      	strh	r2, [r3, #30]
        t3s3 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3303      	adds	r3, #3
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	22f0      	movs	r2, #240	; 0xf0
 800af32:	2104      	movs	r1, #4
 800af34:	4618      	mov	r0, r3
 800af36:	f7f6 f8c0 	bl	80010ba <unpack_right_shift_u16>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        t3s3 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3304      	adds	r3, #4
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	22ff      	movs	r2, #255	; 0xff
 800af48:	2104      	movs	r1, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f6 f885 	bl	800105a <unpack_left_shift_u16>
 800af50:	4603      	mov	r3, r0
 800af52:	461a      	mov	r2, r3
 800af54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af58:	4313      	orrs	r3, r2
 800af5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((t3s3 & (1u << 11)) != 0u) {
 800af5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <can1_ams_cell_temperatures_unpack+0x4ba>
            t3s3 |= 0xf000u;
 800af6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af6e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af72:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        }

        dst_p->t3s3 = (int16_t)t3s3;
 800af7a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	86da      	strh	r2, [r3, #54]	; 0x36
        t4s3 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3305      	adds	r3, #5
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	22ff      	movs	r2, #255	; 0xff
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7f6 f894 	bl	80010ba <unpack_right_shift_u16>
 800af92:	4603      	mov	r3, r0
 800af94:	86bb      	strh	r3, [r7, #52]	; 0x34
        t4s3 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3306      	adds	r3, #6
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	220f      	movs	r2, #15
 800af9e:	2108      	movs	r1, #8
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7f6 f85a 	bl	800105a <unpack_left_shift_u16>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afac:	4313      	orrs	r3, r2
 800afae:	86bb      	strh	r3, [r7, #52]	; 0x34

        if ((t4s3 & (1u << 11)) != 0u) {
 800afb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <can1_ams_cell_temperatures_unpack+0x506>
            t4s3 |= 0xf000u;
 800afba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afbc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800afc0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800afc4:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        dst_p->t4s3 = (int16_t)t4s3;
 800afc6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        t5s3 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3306      	adds	r3, #6
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	22f0      	movs	r2, #240	; 0xf0
 800afd8:	2104      	movs	r1, #4
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f6 f86d 	bl	80010ba <unpack_right_shift_u16>
 800afe0:	4603      	mov	r3, r0
 800afe2:	83bb      	strh	r3, [r7, #28]
        t5s3 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	3307      	adds	r3, #7
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	22ff      	movs	r2, #255	; 0xff
 800afec:	2104      	movs	r1, #4
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f6 f833 	bl	800105a <unpack_left_shift_u16>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	4313      	orrs	r3, r2
 800affc:	83bb      	strh	r3, [r7, #28]

        if ((t5s3 & (1u << 11)) != 0u) {
 800affe:	8bbb      	ldrh	r3, [r7, #28]
 800b000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <can1_ams_cell_temperatures_unpack+0x554>
            t5s3 |= 0xf000u;
 800b008:	8bbb      	ldrh	r3, [r7, #28]
 800b00a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b00e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b012:	83bb      	strh	r3, [r7, #28]
        }

        dst_p->t5s3 = (int16_t)t5s3;
 800b014:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        break;
 800b01e:	f000 bf6c 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 3:
        t1s4 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	22f0      	movs	r2, #240	; 0xf0
 800b028:	2104      	movs	r1, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f6 f845 	bl	80010ba <unpack_right_shift_u16>
 800b030:	4603      	mov	r3, r0
 800b032:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        t1s4 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	22ff      	movs	r2, #255	; 0xff
 800b03e:	2104      	movs	r1, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7f6 f80a 	bl	800105a <unpack_left_shift_u16>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b04e:	4313      	orrs	r3, r2
 800b050:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

        if ((t1s4 & (1u << 11)) != 0u) {
 800b054:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <can1_ams_cell_temperatures_unpack+0x5b0>
            t1s4 |= 0xf000u;
 800b060:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b064:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b068:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b06c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        }

        dst_p->t1s4 = (int16_t)t1s4;
 800b070:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	811a      	strh	r2, [r3, #8]
        t2s4 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3302      	adds	r3, #2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	22ff      	movs	r2, #255	; 0xff
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7f6 f819 	bl	80010ba <unpack_right_shift_u16>
 800b088:	4603      	mov	r3, r0
 800b08a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        t2s4 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	3303      	adds	r3, #3
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	220f      	movs	r2, #15
 800b096:	2108      	movs	r1, #8
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f5 ffde 	bl	800105a <unpack_left_shift_u16>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        if ((t2s4 & (1u << 11)) != 0u) {
 800b0ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <can1_ams_cell_temperatures_unpack+0x608>
            t2s4 |= 0xf000u;
 800b0b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0bc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b0c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b0c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }

        dst_p->t2s4 = (int16_t)t2s4;
 800b0c8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	841a      	strh	r2, [r3, #32]
        t3s4 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3303      	adds	r3, #3
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	22f0      	movs	r2, #240	; 0xf0
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f5 ffed 	bl	80010ba <unpack_right_shift_u16>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        t3s4 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 ffb2 	bl	800105a <unpack_left_shift_u16>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((t3s4 & (1u << 11)) != 0u) {
 800b104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <can1_ams_cell_temperatures_unpack+0x660>
            t3s4 |= 0xf000u;
 800b110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b114:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b118:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b11c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        dst_p->t3s4 = (int16_t)t3s4;
 800b120:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	871a      	strh	r2, [r3, #56]	; 0x38
        t4s4 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3305      	adds	r3, #5
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	22ff      	movs	r2, #255	; 0xff
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f7f5 ffc1 	bl	80010ba <unpack_right_shift_u16>
 800b138:	4603      	mov	r3, r0
 800b13a:	867b      	strh	r3, [r7, #50]	; 0x32
        t4s4 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3306      	adds	r3, #6
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	220f      	movs	r2, #15
 800b144:	2108      	movs	r1, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f7f5 ff87 	bl	800105a <unpack_left_shift_u16>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b152:	4313      	orrs	r3, r2
 800b154:	867b      	strh	r3, [r7, #50]	; 0x32

        if ((t4s4 & (1u << 11)) != 0u) {
 800b156:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <can1_ams_cell_temperatures_unpack+0x6ac>
            t4s4 |= 0xf000u;
 800b160:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b162:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b166:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b16a:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        dst_p->t4s4 = (int16_t)t4s4;
 800b16c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        t5s4 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3306      	adds	r3, #6
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	22f0      	movs	r2, #240	; 0xf0
 800b17e:	2104      	movs	r1, #4
 800b180:	4618      	mov	r0, r3
 800b182:	f7f5 ff9a 	bl	80010ba <unpack_right_shift_u16>
 800b186:	4603      	mov	r3, r0
 800b188:	837b      	strh	r3, [r7, #26]
        t5s4 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3307      	adds	r3, #7
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	2104      	movs	r1, #4
 800b194:	4618      	mov	r0, r3
 800b196:	f7f5 ff60 	bl	800105a <unpack_left_shift_u16>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	8b7b      	ldrh	r3, [r7, #26]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	837b      	strh	r3, [r7, #26]

        if ((t5s4 & (1u << 11)) != 0u) {
 800b1a4:	8b7b      	ldrh	r3, [r7, #26]
 800b1a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <can1_ams_cell_temperatures_unpack+0x6fa>
            t5s4 |= 0xf000u;
 800b1ae:	8b7b      	ldrh	r3, [r7, #26]
 800b1b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b1b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b1b8:	837b      	strh	r3, [r7, #26]
        }

        dst_p->t5s4 = (int16_t)t5s4;
 800b1ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        break;
 800b1c4:	f000 be99 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 4:
        t1s5 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	22f0      	movs	r2, #240	; 0xf0
 800b1ce:	2104      	movs	r1, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f5 ff72 	bl	80010ba <unpack_right_shift_u16>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        t1s5 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f5 ff37 	bl	800105a <unpack_left_shift_u16>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

        if ((t1s5 & (1u << 11)) != 0u) {
 800b1fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <can1_ams_cell_temperatures_unpack+0x756>
            t1s5 |= 0xf000u;
 800b206:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b20a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b20e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b212:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        }

        dst_p->t1s5 = (int16_t)t1s5;
 800b216:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	815a      	strh	r2, [r3, #10]
        t2s5 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	3302      	adds	r3, #2
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	2100      	movs	r1, #0
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f5 ff46 	bl	80010ba <unpack_right_shift_u16>
 800b22e:	4603      	mov	r3, r0
 800b230:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        t2s5 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	3303      	adds	r3, #3
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	220f      	movs	r2, #15
 800b23c:	2108      	movs	r1, #8
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f5 ff0b 	bl	800105a <unpack_left_shift_u16>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

        if ((t2s5 & (1u << 11)) != 0u) {
 800b252:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <can1_ams_cell_temperatures_unpack+0x7ae>
            t2s5 |= 0xf000u;
 800b25e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b262:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b266:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b26a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        }

        dst_p->t2s5 = (int16_t)t2s5;
 800b26e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	845a      	strh	r2, [r3, #34]	; 0x22
        t3s5 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	3303      	adds	r3, #3
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	22f0      	movs	r2, #240	; 0xf0
 800b27e:	2104      	movs	r1, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7f5 ff1a 	bl	80010ba <unpack_right_shift_u16>
 800b286:	4603      	mov	r3, r0
 800b288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        t3s5 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3304      	adds	r3, #4
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	22ff      	movs	r2, #255	; 0xff
 800b294:	2104      	movs	r1, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7f5 fedf 	bl	800105a <unpack_left_shift_u16>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        if ((t3s5 & (1u << 11)) != 0u) {
 800b2aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d007      	beq.n	800b2c6 <can1_ams_cell_temperatures_unpack+0x806>
            t3s5 |= 0xf000u;
 800b2b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b2be:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b2c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        }

        dst_p->t3s5 = (int16_t)t3s5;
 800b2c6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	875a      	strh	r2, [r3, #58]	; 0x3a
        t4s5 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3305      	adds	r3, #5
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f5 feee 	bl	80010ba <unpack_right_shift_u16>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	863b      	strh	r3, [r7, #48]	; 0x30
        t4s5 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	3306      	adds	r3, #6
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	220f      	movs	r2, #15
 800b2ea:	2108      	movs	r1, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f5 feb4 	bl	800105a <unpack_left_shift_u16>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	863b      	strh	r3, [r7, #48]	; 0x30

        if ((t4s5 & (1u << 11)) != 0u) {
 800b2fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <can1_ams_cell_temperatures_unpack+0x852>
            t4s5 |= 0xf000u;
 800b306:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b308:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b30c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b310:	863b      	strh	r3, [r7, #48]	; 0x30
        }

        dst_p->t4s5 = (int16_t)t4s5;
 800b312:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        t5s5 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3306      	adds	r3, #6
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	22f0      	movs	r2, #240	; 0xf0
 800b324:	2104      	movs	r1, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7f5 fec7 	bl	80010ba <unpack_right_shift_u16>
 800b32c:	4603      	mov	r3, r0
 800b32e:	833b      	strh	r3, [r7, #24]
        t5s5 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3307      	adds	r3, #7
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	22ff      	movs	r2, #255	; 0xff
 800b338:	2104      	movs	r1, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7f5 fe8d 	bl	800105a <unpack_left_shift_u16>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	8b3b      	ldrh	r3, [r7, #24]
 800b346:	4313      	orrs	r3, r2
 800b348:	833b      	strh	r3, [r7, #24]

        if ((t5s5 & (1u << 11)) != 0u) {
 800b34a:	8b3b      	ldrh	r3, [r7, #24]
 800b34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <can1_ams_cell_temperatures_unpack+0x8a0>
            t5s5 |= 0xf000u;
 800b354:	8b3b      	ldrh	r3, [r7, #24]
 800b356:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b35a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b35e:	833b      	strh	r3, [r7, #24]
        }

        dst_p->t5s5 = (int16_t)t5s5;
 800b360:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        break;
 800b36a:	f000 bdc6 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 5:
        t1s6 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	22f0      	movs	r2, #240	; 0xf0
 800b374:	2104      	movs	r1, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7f5 fe9f 	bl	80010ba <unpack_right_shift_u16>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        t1s6 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	3301      	adds	r3, #1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f5 fe64 	bl	800105a <unpack_left_shift_u16>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        if ((t1s6 & (1u << 11)) != 0u) {
 800b3a0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <can1_ams_cell_temperatures_unpack+0x8fc>
            t1s6 |= 0xf000u;
 800b3ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b3b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b3b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        }

        dst_p->t1s6 = (int16_t)t1s6;
 800b3bc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	819a      	strh	r2, [r3, #12]
        t2s6 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	22ff      	movs	r2, #255	; 0xff
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7f5 fe73 	bl	80010ba <unpack_right_shift_u16>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        t2s6 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	220f      	movs	r2, #15
 800b3e2:	2108      	movs	r1, #8
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f5 fe38 	bl	800105a <unpack_left_shift_u16>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if ((t2s6 & (1u << 11)) != 0u) {
 800b3f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b400:	2b00      	cmp	r3, #0
 800b402:	d007      	beq.n	800b414 <can1_ams_cell_temperatures_unpack+0x954>
            t2s6 |= 0xf000u;
 800b404:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b408:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b40c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b410:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        }

        dst_p->t2s6 = (int16_t)t2s6;
 800b414:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	849a      	strh	r2, [r3, #36]	; 0x24
        t3s6 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	22f0      	movs	r2, #240	; 0xf0
 800b424:	2104      	movs	r1, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 fe47 	bl	80010ba <unpack_right_shift_u16>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        t3s6 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	22ff      	movs	r2, #255	; 0xff
 800b43a:	2104      	movs	r1, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f5 fe0c 	bl	800105a <unpack_left_shift_u16>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b44a:	4313      	orrs	r3, r2
 800b44c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        if ((t3s6 & (1u << 11)) != 0u) {
 800b450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <can1_ams_cell_temperatures_unpack+0x9ac>
            t3s6 |= 0xf000u;
 800b45c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b460:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b464:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b468:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }

        dst_p->t3s6 = (int16_t)t3s6;
 800b46c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	879a      	strh	r2, [r3, #60]	; 0x3c
        t4s6 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3305      	adds	r3, #5
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	22ff      	movs	r2, #255	; 0xff
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f5 fe1b 	bl	80010ba <unpack_right_shift_u16>
 800b484:	4603      	mov	r3, r0
 800b486:	85fb      	strh	r3, [r7, #46]	; 0x2e
        t4s6 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3306      	adds	r3, #6
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	220f      	movs	r2, #15
 800b490:	2108      	movs	r1, #8
 800b492:	4618      	mov	r0, r3
 800b494:	f7f5 fde1 	bl	800105a <unpack_left_shift_u16>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if ((t4s6 & (1u << 11)) != 0u) {
 800b4a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <can1_ams_cell_temperatures_unpack+0x9f8>
            t4s6 |= 0xf000u;
 800b4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b4b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }

        dst_p->t4s6 = (int16_t)t4s6;
 800b4b8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        t5s6 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3306      	adds	r3, #6
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	22f0      	movs	r2, #240	; 0xf0
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 fdf4 	bl	80010ba <unpack_right_shift_u16>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	82fb      	strh	r3, [r7, #22]
        t5s6 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	22ff      	movs	r2, #255	; 0xff
 800b4de:	2104      	movs	r1, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f5 fdba 	bl	800105a <unpack_left_shift_u16>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	8afb      	ldrh	r3, [r7, #22]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	82fb      	strh	r3, [r7, #22]

        if ((t5s6 & (1u << 11)) != 0u) {
 800b4f0:	8afb      	ldrh	r3, [r7, #22]
 800b4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <can1_ams_cell_temperatures_unpack+0xa46>
            t5s6 |= 0xf000u;
 800b4fa:	8afb      	ldrh	r3, [r7, #22]
 800b4fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b500:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b504:	82fb      	strh	r3, [r7, #22]
        }

        dst_p->t5s6 = (int16_t)t5s6;
 800b506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        break;
 800b510:	f000 bcf3 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 6:
        t1s7 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	22f0      	movs	r2, #240	; 0xf0
 800b51a:	2104      	movs	r1, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f5 fdcc 	bl	80010ba <unpack_right_shift_u16>
 800b522:	4603      	mov	r3, r0
 800b524:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        t1s7 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3301      	adds	r3, #1
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	22ff      	movs	r2, #255	; 0xff
 800b530:	2104      	movs	r1, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f7f5 fd91 	bl	800105a <unpack_left_shift_u16>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b540:	4313      	orrs	r3, r2
 800b542:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        if ((t1s7 & (1u << 11)) != 0u) {
 800b546:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b54a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <can1_ams_cell_temperatures_unpack+0xaa2>
            t1s7 |= 0xf000u;
 800b552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b556:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b55a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b55e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        }

        dst_p->t1s7 = (int16_t)t1s7;
 800b562:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	81da      	strh	r2, [r3, #14]
        t2s7 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	3302      	adds	r3, #2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	22ff      	movs	r2, #255	; 0xff
 800b572:	2100      	movs	r1, #0
 800b574:	4618      	mov	r0, r3
 800b576:	f7f5 fda0 	bl	80010ba <unpack_right_shift_u16>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        t2s7 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3303      	adds	r3, #3
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	220f      	movs	r2, #15
 800b588:	2108      	movs	r1, #8
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f5 fd65 	bl	800105a <unpack_left_shift_u16>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b598:	4313      	orrs	r3, r2
 800b59a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        if ((t2s7 & (1u << 11)) != 0u) {
 800b59e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d007      	beq.n	800b5ba <can1_ams_cell_temperatures_unpack+0xafa>
            t2s7 |= 0xf000u;
 800b5aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b5b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b5b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        dst_p->t2s7 = (int16_t)t2s7;
 800b5ba:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	84da      	strh	r2, [r3, #38]	; 0x26
        t3s7 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	3303      	adds	r3, #3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	22f0      	movs	r2, #240	; 0xf0
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f5 fd74 	bl	80010ba <unpack_right_shift_u16>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        t3s7 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	22ff      	movs	r2, #255	; 0xff
 800b5e0:	2104      	movs	r1, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f5 fd39 	bl	800105a <unpack_left_shift_u16>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if ((t3s7 & (1u << 11)) != 0u) {
 800b5f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <can1_ams_cell_temperatures_unpack+0xb52>
            t3s7 |= 0xf000u;
 800b602:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b606:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b60a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b60e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        dst_p->t3s7 = (int16_t)t3s7;
 800b612:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	87da      	strh	r2, [r3, #62]	; 0x3e
        t4s7 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	3305      	adds	r3, #5
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	22ff      	movs	r2, #255	; 0xff
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7f5 fd48 	bl	80010ba <unpack_right_shift_u16>
 800b62a:	4603      	mov	r3, r0
 800b62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        t4s7 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3306      	adds	r3, #6
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	220f      	movs	r2, #15
 800b636:	2108      	movs	r1, #8
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f5 fd0e 	bl	800105a <unpack_left_shift_u16>
 800b63e:	4603      	mov	r3, r0
 800b640:	461a      	mov	r2, r3
 800b642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b644:	4313      	orrs	r3, r2
 800b646:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if ((t4s7 & (1u << 11)) != 0u) {
 800b648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b64a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <can1_ams_cell_temperatures_unpack+0xb9e>
            t4s7 |= 0xf000u;
 800b652:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b654:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b658:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b65c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        dst_p->t4s7 = (int16_t)t4s7;
 800b65e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        t5s7 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3306      	adds	r3, #6
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	22f0      	movs	r2, #240	; 0xf0
 800b670:	2104      	movs	r1, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7f5 fd21 	bl	80010ba <unpack_right_shift_u16>
 800b678:	4603      	mov	r3, r0
 800b67a:	82bb      	strh	r3, [r7, #20]
        t5s7 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3307      	adds	r3, #7
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	22ff      	movs	r2, #255	; 0xff
 800b684:	2104      	movs	r1, #4
 800b686:	4618      	mov	r0, r3
 800b688:	f7f5 fce7 	bl	800105a <unpack_left_shift_u16>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	8abb      	ldrh	r3, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	82bb      	strh	r3, [r7, #20]

        if ((t5s7 & (1u << 11)) != 0u) {
 800b696:	8abb      	ldrh	r3, [r7, #20]
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <can1_ams_cell_temperatures_unpack+0xbec>
            t5s7 |= 0xf000u;
 800b6a0:	8abb      	ldrh	r3, [r7, #20]
 800b6a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b6a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b6aa:	82bb      	strh	r3, [r7, #20]
        }

        dst_p->t5s7 = (int16_t)t5s7;
 800b6ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        break;
 800b6b6:	f000 bc20 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 7:
        t1s8 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	22f0      	movs	r2, #240	; 0xf0
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f5 fcf9 	bl	80010ba <unpack_right_shift_u16>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        t1s8 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	22ff      	movs	r2, #255	; 0xff
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f5 fcbe 	bl	800105a <unpack_left_shift_u16>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        if ((t1s8 & (1u << 11)) != 0u) {
 800b6ec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d007      	beq.n	800b708 <can1_ams_cell_temperatures_unpack+0xc48>
            t1s8 |= 0xf000u;
 800b6f8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b700:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b704:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        }

        dst_p->t1s8 = (int16_t)t1s8;
 800b708:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	821a      	strh	r2, [r3, #16]
        t2s8 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	3302      	adds	r3, #2
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	22ff      	movs	r2, #255	; 0xff
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f5 fccd 	bl	80010ba <unpack_right_shift_u16>
 800b720:	4603      	mov	r3, r0
 800b722:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        t2s8 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3303      	adds	r3, #3
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	220f      	movs	r2, #15
 800b72e:	2108      	movs	r1, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f7f5 fc92 	bl	800105a <unpack_left_shift_u16>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b73e:	4313      	orrs	r3, r2
 800b740:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if ((t2s8 & (1u << 11)) != 0u) {
 800b744:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <can1_ams_cell_temperatures_unpack+0xca0>
            t2s8 |= 0xf000u;
 800b750:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b754:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b758:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b75c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        }

        dst_p->t2s8 = (int16_t)t2s8;
 800b760:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	851a      	strh	r2, [r3, #40]	; 0x28
        t3s8 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	3303      	adds	r3, #3
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	22f0      	movs	r2, #240	; 0xf0
 800b770:	2104      	movs	r1, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7f5 fca1 	bl	80010ba <unpack_right_shift_u16>
 800b778:	4603      	mov	r3, r0
 800b77a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        t3s8 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	3304      	adds	r3, #4
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	22ff      	movs	r2, #255	; 0xff
 800b786:	2104      	movs	r1, #4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f5 fc66 	bl	800105a <unpack_left_shift_u16>
 800b78e:	4603      	mov	r3, r0
 800b790:	461a      	mov	r2, r3
 800b792:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b796:	4313      	orrs	r3, r2
 800b798:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if ((t3s8 & (1u << 11)) != 0u) {
 800b79c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <can1_ams_cell_temperatures_unpack+0xcf8>
            t3s8 |= 0xf000u;
 800b7a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7ac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b7b0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b7b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }

        dst_p->t3s8 = (int16_t)t3s8;
 800b7b8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        t4s8 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3305      	adds	r3, #5
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	22ff      	movs	r2, #255	; 0xff
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f5 fc74 	bl	80010ba <unpack_right_shift_u16>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	857b      	strh	r3, [r7, #42]	; 0x2a
        t4s8 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	3306      	adds	r3, #6
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	220f      	movs	r2, #15
 800b7de:	2108      	movs	r1, #8
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f5 fc3a 	bl	800105a <unpack_left_shift_u16>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((t4s8 & (1u << 11)) != 0u) {
 800b7f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <can1_ams_cell_temperatures_unpack+0xd46>
            t4s8 |= 0xf000u;
 800b7fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b800:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b804:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        dst_p->t4s8 = (int16_t)t4s8;
 800b806:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        t5s8 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	3306      	adds	r3, #6
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	22f0      	movs	r2, #240	; 0xf0
 800b818:	2104      	movs	r1, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f5 fc4d 	bl	80010ba <unpack_right_shift_u16>
 800b820:	4603      	mov	r3, r0
 800b822:	827b      	strh	r3, [r7, #18]
        t5s8 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	3307      	adds	r3, #7
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	22ff      	movs	r2, #255	; 0xff
 800b82c:	2104      	movs	r1, #4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f5 fc13 	bl	800105a <unpack_left_shift_u16>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	8a7b      	ldrh	r3, [r7, #18]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	827b      	strh	r3, [r7, #18]

        if ((t5s8 & (1u << 11)) != 0u) {
 800b83e:	8a7b      	ldrh	r3, [r7, #18]
 800b840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <can1_ams_cell_temperatures_unpack+0xd94>
            t5s8 |= 0xf000u;
 800b848:	8a7b      	ldrh	r3, [r7, #18]
 800b84a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b84e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b852:	827b      	strh	r3, [r7, #18]
        }

        dst_p->t5s8 = (int16_t)t5s8;
 800b854:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        break;
 800b85e:	e34c      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 8:
        t1s9 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	22f0      	movs	r2, #240	; 0xf0
 800b866:	2104      	movs	r1, #4
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f5 fc26 	bl	80010ba <unpack_right_shift_u16>
 800b86e:	4603      	mov	r3, r0
 800b870:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        t1s9 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	3301      	adds	r3, #1
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	22ff      	movs	r2, #255	; 0xff
 800b87c:	2104      	movs	r1, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f5 fbeb 	bl	800105a <unpack_left_shift_u16>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

        if ((t1s9 & (1u << 11)) != 0u) {
 800b892:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <can1_ams_cell_temperatures_unpack+0xdee>
            t1s9 |= 0xf000u;
 800b89e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b8a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

        dst_p->t1s9 = (int16_t)t1s9;
 800b8ae:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	825a      	strh	r2, [r3, #18]
        t2s9 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	3302      	adds	r3, #2
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	22ff      	movs	r2, #255	; 0xff
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f5 fbfa 	bl	80010ba <unpack_right_shift_u16>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        t2s9 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3303      	adds	r3, #3
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	220f      	movs	r2, #15
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f5 fbbf 	bl	800105a <unpack_left_shift_u16>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        if ((t2s9 & (1u << 11)) != 0u) {
 800b8ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <can1_ams_cell_temperatures_unpack+0xe46>
            t2s9 |= 0xf000u;
 800b8f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b902:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        }

        dst_p->t2s9 = (int16_t)t2s9;
 800b906:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	855a      	strh	r2, [r3, #42]	; 0x2a
        t3s9 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3303      	adds	r3, #3
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	22f0      	movs	r2, #240	; 0xf0
 800b916:	2104      	movs	r1, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f5 fbce 	bl	80010ba <unpack_right_shift_u16>
 800b91e:	4603      	mov	r3, r0
 800b920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        t3s9 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	22ff      	movs	r2, #255	; 0xff
 800b92c:	2104      	movs	r1, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f5 fb93 	bl	800105a <unpack_left_shift_u16>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        if ((t3s9 & (1u << 11)) != 0u) {
 800b942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <can1_ams_cell_temperatures_unpack+0xe9e>
            t3s9 |= 0xf000u;
 800b94e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b952:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b956:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b95a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }

        dst_p->t3s9 = (int16_t)t3s9;
 800b95e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        t4s9 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3305      	adds	r3, #5
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	22ff      	movs	r2, #255	; 0xff
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f7f5 fba1 	bl	80010ba <unpack_right_shift_u16>
 800b978:	4603      	mov	r3, r0
 800b97a:	853b      	strh	r3, [r7, #40]	; 0x28
        t4s9 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	3306      	adds	r3, #6
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	220f      	movs	r2, #15
 800b984:	2108      	movs	r1, #8
 800b986:	4618      	mov	r0, r3
 800b988:	f7f5 fb67 	bl	800105a <unpack_left_shift_u16>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b992:	4313      	orrs	r3, r2
 800b994:	853b      	strh	r3, [r7, #40]	; 0x28

        if ((t4s9 & (1u << 11)) != 0u) {
 800b996:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <can1_ams_cell_temperatures_unpack+0xeec>
            t4s9 |= 0xf000u;
 800b9a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9aa:	853b      	strh	r3, [r7, #40]	; 0x28
        }

        dst_p->t4s9 = (int16_t)t4s9;
 800b9ac:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        t5s9 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	3306      	adds	r3, #6
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	22f0      	movs	r2, #240	; 0xf0
 800b9be:	2104      	movs	r1, #4
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f5 fb7a 	bl	80010ba <unpack_right_shift_u16>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	823b      	strh	r3, [r7, #16]
        t5s9 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3307      	adds	r3, #7
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	22ff      	movs	r2, #255	; 0xff
 800b9d2:	2104      	movs	r1, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f5 fb40 	bl	800105a <unpack_left_shift_u16>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	8a3b      	ldrh	r3, [r7, #16]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	823b      	strh	r3, [r7, #16]

        if ((t5s9 & (1u << 11)) != 0u) {
 800b9e4:	8a3b      	ldrh	r3, [r7, #16]
 800b9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <can1_ams_cell_temperatures_unpack+0xf3a>
            t5s9 |= 0xf000u;
 800b9ee:	8a3b      	ldrh	r3, [r7, #16]
 800b9f0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9f8:	823b      	strh	r3, [r7, #16]
        }

        dst_p->t5s9 = (int16_t)t5s9;
 800b9fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        break;
 800ba04:	e279      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 9:
        t1s10 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	22f0      	movs	r2, #240	; 0xf0
 800ba0c:	2104      	movs	r1, #4
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f5 fb53 	bl	80010ba <unpack_right_shift_u16>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        t1s10 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	22ff      	movs	r2, #255	; 0xff
 800ba22:	2104      	movs	r1, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fb18 	bl	800105a <unpack_left_shift_u16>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba32:	4313      	orrs	r3, r2
 800ba34:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if ((t1s10 & (1u << 11)) != 0u) {
 800ba38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <can1_ams_cell_temperatures_unpack+0xf94>
            t1s10 |= 0xf000u;
 800ba44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ba4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ba50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        }

        dst_p->t1s10 = (int16_t)t1s10;
 800ba54:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	829a      	strh	r2, [r3, #20]
        t2s10 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3302      	adds	r3, #2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	22ff      	movs	r2, #255	; 0xff
 800ba64:	2100      	movs	r1, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f5 fb27 	bl	80010ba <unpack_right_shift_u16>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        t2s10 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	3303      	adds	r3, #3
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	220f      	movs	r2, #15
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f5 faec 	bl	800105a <unpack_left_shift_u16>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if ((t2s10 & (1u << 11)) != 0u) {
 800ba90:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d007      	beq.n	800baac <can1_ams_cell_temperatures_unpack+0xfec>
            t2s10 |= 0xf000u;
 800ba9c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800baa0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800baa4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800baa8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        }

        dst_p->t2s10 = (int16_t)t2s10;
 800baac:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	859a      	strh	r2, [r3, #44]	; 0x2c
        t3s10 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3303      	adds	r3, #3
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	22f0      	movs	r2, #240	; 0xf0
 800babc:	2104      	movs	r1, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f5 fafb 	bl	80010ba <unpack_right_shift_u16>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        t3s10 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3304      	adds	r3, #4
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	2104      	movs	r1, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f5 fac0 	bl	800105a <unpack_left_shift_u16>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

        if ((t3s10 & (1u << 11)) != 0u) {
 800bae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <can1_ams_cell_temperatures_unpack+0x1044>
            t3s10 |= 0xf000u;
 800baf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baf8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bafc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }

        dst_p->t3s10 = (int16_t)t3s10;
 800bb04:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        t4s10 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	3305      	adds	r3, #5
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f5 face 	bl	80010ba <unpack_right_shift_u16>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        t4s10 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	3306      	adds	r3, #6
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	220f      	movs	r2, #15
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f5 fa94 	bl	800105a <unpack_left_shift_u16>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	87fb      	strh	r3, [r7, #62]	; 0x3e

        if ((t4s10 & (1u << 11)) != 0u) {
 800bb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <can1_ams_cell_temperatures_unpack+0x1092>
            t4s10 |= 0xf000u;
 800bb46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb50:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        dst_p->t4s10 = (int16_t)t4s10;
 800bb52:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        t5s10 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	3306      	adds	r3, #6
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	22f0      	movs	r2, #240	; 0xf0
 800bb64:	2104      	movs	r1, #4
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f5 faa7 	bl	80010ba <unpack_right_shift_u16>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        t5s10 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	3307      	adds	r3, #7
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	22ff      	movs	r2, #255	; 0xff
 800bb78:	2104      	movs	r1, #4
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f5 fa6d 	bl	800105a <unpack_left_shift_u16>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb86:	4313      	orrs	r3, r2
 800bb88:	84fb      	strh	r3, [r7, #38]	; 0x26

        if ((t5s10 & (1u << 11)) != 0u) {
 800bb8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <can1_ams_cell_temperatures_unpack+0x10e0>
            t5s10 |= 0xf000u;
 800bb94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        dst_p->t5s10 = (int16_t)t5s10;
 800bba0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        break;
 800bbaa:	e1a6      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 10:
        t1s11 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	22f0      	movs	r2, #240	; 0xf0
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f5 fa80 	bl	80010ba <unpack_right_shift_u16>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        t1s11 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	22ff      	movs	r2, #255	; 0xff
 800bbc8:	2104      	movs	r1, #4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f5 fa45 	bl	800105a <unpack_left_shift_u16>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        if ((t1s11 & (1u << 11)) != 0u) {
 800bbde:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <can1_ams_cell_temperatures_unpack+0x113a>
            t1s11 |= 0xf000u;
 800bbea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bbf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bbf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        dst_p->t1s11 = (int16_t)t1s11;
 800bbfa:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	82da      	strh	r2, [r3, #22]
        t2s11 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3302      	adds	r3, #2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	22ff      	movs	r2, #255	; 0xff
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f5 fa54 	bl	80010ba <unpack_right_shift_u16>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        t2s11 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3303      	adds	r3, #3
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	220f      	movs	r2, #15
 800bc20:	2108      	movs	r1, #8
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f5 fa19 	bl	800105a <unpack_left_shift_u16>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

        if ((t2s11 & (1u << 11)) != 0u) {
 800bc36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <can1_ams_cell_temperatures_unpack+0x1192>
            t2s11 |= 0xf000u;
 800bc42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bc4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bc4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        dst_p->t2s11 = (int16_t)t2s11;
 800bc52:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	85da      	strh	r2, [r3, #46]	; 0x2e
        t3s11 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	3303      	adds	r3, #3
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	22f0      	movs	r2, #240	; 0xf0
 800bc62:	2104      	movs	r1, #4
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f5 fa28 	bl	80010ba <unpack_right_shift_u16>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        t3s11 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3304      	adds	r3, #4
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	22ff      	movs	r2, #255	; 0xff
 800bc78:	2104      	movs	r1, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f5 f9ed 	bl	800105a <unpack_left_shift_u16>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

        if ((t3s11 & (1u << 11)) != 0u) {
 800bc8e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <can1_ams_cell_temperatures_unpack+0x11ea>
            t3s11 |= 0xf000u;
 800bc9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc9e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bca2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bca6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        dst_p->t3s11 = (int16_t)t3s11;
 800bcaa:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        t4s11 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	3305      	adds	r3, #5
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	22ff      	movs	r2, #255	; 0xff
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f5 f9fb 	bl	80010ba <unpack_right_shift_u16>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        t4s11 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3306      	adds	r3, #6
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	220f      	movs	r2, #15
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f5 f9c1 	bl	800105a <unpack_left_shift_u16>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcde:	4313      	orrs	r3, r2
 800bce0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        if ((t4s11 & (1u << 11)) != 0u) {
 800bce2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <can1_ams_cell_temperatures_unpack+0x1238>
            t4s11 |= 0xf000u;
 800bcec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bcf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bcf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        }

        dst_p->t4s11 = (int16_t)t4s11;
 800bcf8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        t5s11 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3306      	adds	r3, #6
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	22f0      	movs	r2, #240	; 0xf0
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f5 f9d4 	bl	80010ba <unpack_right_shift_u16>
 800bd12:	4603      	mov	r3, r0
 800bd14:	84bb      	strh	r3, [r7, #36]	; 0x24
        t5s11 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3307      	adds	r3, #7
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	22ff      	movs	r2, #255	; 0xff
 800bd1e:	2104      	movs	r1, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f5 f99a 	bl	800105a <unpack_left_shift_u16>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	84bb      	strh	r3, [r7, #36]	; 0x24

        if ((t5s11 & (1u << 11)) != 0u) {
 800bd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <can1_ams_cell_temperatures_unpack+0x1286>
            t5s11 |= 0xf000u;
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd40:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd44:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        dst_p->t5s11 = (int16_t)t5s11;
 800bd46:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        break;
 800bd50:	e0d3      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 11:
        t1s12 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	22f0      	movs	r2, #240	; 0xf0
 800bd58:	2104      	movs	r1, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f5 f9ad 	bl	80010ba <unpack_right_shift_u16>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        t1s12 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	22ff      	movs	r2, #255	; 0xff
 800bd6e:	2104      	movs	r1, #4
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f5 f972 	bl	800105a <unpack_left_shift_u16>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        if ((t1s12 & (1u << 11)) != 0u) {
 800bd84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <can1_ams_cell_temperatures_unpack+0x12e0>
            t1s12 |= 0xf000u;
 800bd90:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd9c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        }

        dst_p->t1s12 = (int16_t)t1s12;
 800bda0:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	831a      	strh	r2, [r3, #24]
        t2s12 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	3302      	adds	r3, #2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	22ff      	movs	r2, #255	; 0xff
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f5 f981 	bl	80010ba <unpack_right_shift_u16>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        t2s12 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3303      	adds	r3, #3
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	220f      	movs	r2, #15
 800bdc6:	2108      	movs	r1, #8
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f5 f946 	bl	800105a <unpack_left_shift_u16>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        if ((t2s12 & (1u << 11)) != 0u) {
 800bddc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bde0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d007      	beq.n	800bdf8 <can1_ams_cell_temperatures_unpack+0x1338>
            t2s12 |= 0xf000u;
 800bde8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bdf0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bdf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        }

        dst_p->t2s12 = (int16_t)t2s12;
 800bdf8:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	861a      	strh	r2, [r3, #48]	; 0x30
        t3s12 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3303      	adds	r3, #3
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	22f0      	movs	r2, #240	; 0xf0
 800be08:	2104      	movs	r1, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f5 f955 	bl	80010ba <unpack_right_shift_u16>
 800be10:	4603      	mov	r3, r0
 800be12:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        t3s12 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3304      	adds	r3, #4
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	22ff      	movs	r2, #255	; 0xff
 800be1e:	2104      	movs	r1, #4
 800be20:	4618      	mov	r0, r3
 800be22:	f7f5 f91a 	bl	800105a <unpack_left_shift_u16>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((t3s12 & (1u << 11)) != 0u) {
 800be34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <can1_ams_cell_temperatures_unpack+0x1390>
            t3s12 |= 0xf000u;
 800be40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be44:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be48:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        }

        dst_p->t3s12 = (int16_t)t3s12;
 800be50:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        t4s12 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3305      	adds	r3, #5
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	22ff      	movs	r2, #255	; 0xff
 800be62:	2100      	movs	r1, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f7f5 f928 	bl	80010ba <unpack_right_shift_u16>
 800be6a:	4603      	mov	r3, r0
 800be6c:	877b      	strh	r3, [r7, #58]	; 0x3a
        t4s12 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	3306      	adds	r3, #6
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	220f      	movs	r2, #15
 800be76:	2108      	movs	r1, #8
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f5 f8ee 	bl	800105a <unpack_left_shift_u16>
 800be7e:	4603      	mov	r3, r0
 800be80:	461a      	mov	r2, r3
 800be82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be84:	4313      	orrs	r3, r2
 800be86:	877b      	strh	r3, [r7, #58]	; 0x3a

        if ((t4s12 & (1u << 11)) != 0u) {
 800be88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <can1_ams_cell_temperatures_unpack+0x13de>
            t4s12 |= 0xf000u;
 800be92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be9c:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        dst_p->t4s12 = (int16_t)t4s12;
 800be9e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        t5s12 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	3306      	adds	r3, #6
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	22f0      	movs	r2, #240	; 0xf0
 800beb0:	2104      	movs	r1, #4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f5 f901 	bl	80010ba <unpack_right_shift_u16>
 800beb8:	4603      	mov	r3, r0
 800beba:	847b      	strh	r3, [r7, #34]	; 0x22
        t5s12 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3307      	adds	r3, #7
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	22ff      	movs	r2, #255	; 0xff
 800bec4:	2104      	movs	r1, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f5 f8c7 	bl	800105a <unpack_left_shift_u16>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed2:	4313      	orrs	r3, r2
 800bed4:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((t5s12 & (1u << 11)) != 0u) {
 800bed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <can1_ams_cell_temperatures_unpack+0x142c>
            t5s12 |= 0xf000u;
 800bee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bee2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bee6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800beea:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        dst_p->t5s12 = (int16_t)t5s12;
 800beec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        break;
 800bef6:	e000      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    default:
        break;
 800bef8:	bf00      	nop
    }

    return (0);
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3788      	adds	r7, #136	; 0x88
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>:

uint8_t can1_ams_cell_temperatures_temperature_multiplexor_encode(double value)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800bf0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf12:	f7f4 fe3b 	bl	8000b8c <__aeabi_d2uiz>
 800bf16:	4603      	mov	r3, r0
 800bf18:	b2db      	uxtb	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	0000      	movs	r0, r0
 800bf24:	0000      	movs	r0, r0
	...

0800bf28 <can1_ams_cell_temperatures_t1s1_encode>:
{
    return (value <= 15u);
}

int16_t can1_ams_cell_temperatures_t1s1_encode(double value)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <can1_ams_cell_temperatures_t1s1_encode+0x50>)
 800bf38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf3c:	f7f4 f998 	bl	8000270 <__adddf3>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4610      	mov	r0, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	a309      	add	r3, pc, #36	; (adr r3, 800bf70 <can1_ams_cell_temperatures_t1s1_encode+0x48>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fc6f 	bl	8000830 <__aeabi_ddiv>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4610      	mov	r0, r2
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7f4 fdef 	bl	8000b3c <__aeabi_d2iz>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b21b      	sxth	r3, r3
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	757928e1 	.word	0x757928e1
 800bf74:	3fa9018e 	.word	0x3fa9018e
 800bf78:	40240000 	.word	0x40240000
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <can1_ams_cell_temperatures_t1s1_decode>:

double can1_ams_cell_temperatures_t1s1_decode(int16_t value)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bf8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f4 faba 	bl	8000508 <__aeabi_i2d>
 800bf94:	a30d      	add	r3, pc, #52	; (adr r3, 800bfcc <can1_ams_cell_temperatures_t1s1_decode+0x4c>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fb1f 	bl	80005dc <__aeabi_dmul>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <can1_ams_cell_temperatures_t1s1_decode+0x48>)
 800bfac:	f7f4 f95e 	bl	800026c <__aeabi_dsub>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800bfb8:	eeb0 0a47 	vmov.f32	s0, s14
 800bfbc:	eef0 0a67 	vmov.f32	s1, s15
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	40240000 	.word	0x40240000
 800bfcc:	757928e1 	.word	0x757928e1
 800bfd0:	3fa9018e 	.word	0x3fa9018e
 800bfd4:	00000000 	.word	0x00000000

0800bfd8 <can1_ams_cell_temperatures_t1s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s2_encode(double value)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <can1_ams_cell_temperatures_t1s2_encode+0x50>)
 800bfe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfec:	f7f4 f940 	bl	8000270 <__adddf3>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4610      	mov	r0, r2
 800bff6:	4619      	mov	r1, r3
 800bff8:	a309      	add	r3, pc, #36	; (adr r3, 800c020 <can1_ams_cell_temperatures_t1s2_encode+0x48>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f7f4 fc17 	bl	8000830 <__aeabi_ddiv>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4610      	mov	r0, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	f7f4 fd97 	bl	8000b3c <__aeabi_d2iz>
 800c00e:	4603      	mov	r3, r0
 800c010:	b21b      	sxth	r3, r3
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	f3af 8000 	nop.w
 800c020:	757928e1 	.word	0x757928e1
 800c024:	3fa9018e 	.word	0x3fa9018e
 800c028:	40240000 	.word	0x40240000
 800c02c:	00000000 	.word	0x00000000

0800c030 <can1_ams_cell_temperatures_t1s2_decode>:

double can1_ams_cell_temperatures_t1s2_decode(int16_t value)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c03a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f4 fa62 	bl	8000508 <__aeabi_i2d>
 800c044:	a30d      	add	r3, pc, #52	; (adr r3, 800c07c <can1_ams_cell_temperatures_t1s2_decode+0x4c>)
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	f7f4 fac7 	bl	80005dc <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4610      	mov	r0, r2
 800c054:	4619      	mov	r1, r3
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	4b07      	ldr	r3, [pc, #28]	; (800c078 <can1_ams_cell_temperatures_t1s2_decode+0x48>)
 800c05c:	f7f4 f906 	bl	800026c <__aeabi_dsub>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	ec43 2b17 	vmov	d7, r2, r3
}
 800c068:	eeb0 0a47 	vmov.f32	s0, s14
 800c06c:	eef0 0a67 	vmov.f32	s1, s15
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40240000 	.word	0x40240000
 800c07c:	757928e1 	.word	0x757928e1
 800c080:	3fa9018e 	.word	0x3fa9018e
 800c084:	00000000 	.word	0x00000000

0800c088 <can1_ams_cell_temperatures_t1s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s3_encode(double value)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c092:	f04f 0200 	mov.w	r2, #0
 800c096:	4b10      	ldr	r3, [pc, #64]	; (800c0d8 <can1_ams_cell_temperatures_t1s3_encode+0x50>)
 800c098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c09c:	f7f4 f8e8 	bl	8000270 <__adddf3>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	a309      	add	r3, pc, #36	; (adr r3, 800c0d0 <can1_ams_cell_temperatures_t1s3_encode+0x48>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 fbbf 	bl	8000830 <__aeabi_ddiv>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f7f4 fd3f 	bl	8000b3c <__aeabi_d2iz>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b21b      	sxth	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	757928e1 	.word	0x757928e1
 800c0d4:	3fa9018e 	.word	0x3fa9018e
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	00000000 	.word	0x00000000

0800c0e0 <can1_ams_cell_temperatures_t1s3_decode>:

double can1_ams_cell_temperatures_t1s3_decode(int16_t value)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c0ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f4 fa0a 	bl	8000508 <__aeabi_i2d>
 800c0f4:	a30d      	add	r3, pc, #52	; (adr r3, 800c12c <can1_ams_cell_temperatures_t1s3_decode+0x4c>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 fa6f 	bl	80005dc <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4610      	mov	r0, r2
 800c104:	4619      	mov	r1, r3
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <can1_ams_cell_temperatures_t1s3_decode+0x48>)
 800c10c:	f7f4 f8ae 	bl	800026c <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	ec43 2b17 	vmov	d7, r2, r3
}
 800c118:	eeb0 0a47 	vmov.f32	s0, s14
 800c11c:	eef0 0a67 	vmov.f32	s1, s15
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	40240000 	.word	0x40240000
 800c12c:	757928e1 	.word	0x757928e1
 800c130:	3fa9018e 	.word	0x3fa9018e
 800c134:	00000000 	.word	0x00000000

0800c138 <can1_ams_cell_temperatures_t1s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s4_encode(double value)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	4b10      	ldr	r3, [pc, #64]	; (800c188 <can1_ams_cell_temperatures_t1s4_encode+0x50>)
 800c148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c14c:	f7f4 f890 	bl	8000270 <__adddf3>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4610      	mov	r0, r2
 800c156:	4619      	mov	r1, r3
 800c158:	a309      	add	r3, pc, #36	; (adr r3, 800c180 <can1_ams_cell_temperatures_t1s4_encode+0x48>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 fb67 	bl	8000830 <__aeabi_ddiv>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4610      	mov	r0, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	f7f4 fce7 	bl	8000b3c <__aeabi_d2iz>
 800c16e:	4603      	mov	r3, r0
 800c170:	b21b      	sxth	r3, r3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	f3af 8000 	nop.w
 800c180:	757928e1 	.word	0x757928e1
 800c184:	3fa9018e 	.word	0x3fa9018e
 800c188:	40240000 	.word	0x40240000
 800c18c:	00000000 	.word	0x00000000

0800c190 <can1_ams_cell_temperatures_t1s4_decode>:

double can1_ams_cell_temperatures_t1s4_decode(int16_t value)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c19a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f4 f9b2 	bl	8000508 <__aeabi_i2d>
 800c1a4:	a30d      	add	r3, pc, #52	; (adr r3, 800c1dc <can1_ams_cell_temperatures_t1s4_decode+0x4c>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 fa17 	bl	80005dc <__aeabi_dmul>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f04f 0200 	mov.w	r2, #0
 800c1ba:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <can1_ams_cell_temperatures_t1s4_decode+0x48>)
 800c1bc:	f7f4 f856 	bl	800026c <__aeabi_dsub>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800c1cc:	eef0 0a67 	vmov.f32	s1, s15
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	40240000 	.word	0x40240000
 800c1dc:	757928e1 	.word	0x757928e1
 800c1e0:	3fa9018e 	.word	0x3fa9018e
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <can1_ams_cell_temperatures_t1s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s5_encode(double value)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <can1_ams_cell_temperatures_t1s5_encode+0x50>)
 800c1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1fc:	f7f4 f838 	bl	8000270 <__adddf3>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4610      	mov	r0, r2
 800c206:	4619      	mov	r1, r3
 800c208:	a309      	add	r3, pc, #36	; (adr r3, 800c230 <can1_ams_cell_temperatures_t1s5_encode+0x48>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 fb0f 	bl	8000830 <__aeabi_ddiv>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4610      	mov	r0, r2
 800c218:	4619      	mov	r1, r3
 800c21a:	f7f4 fc8f 	bl	8000b3c <__aeabi_d2iz>
 800c21e:	4603      	mov	r3, r0
 800c220:	b21b      	sxth	r3, r3
}
 800c222:	4618      	mov	r0, r3
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	757928e1 	.word	0x757928e1
 800c234:	3fa9018e 	.word	0x3fa9018e
 800c238:	40240000 	.word	0x40240000
 800c23c:	00000000 	.word	0x00000000

0800c240 <can1_ams_cell_temperatures_t1s5_decode>:

double can1_ams_cell_temperatures_t1s5_decode(int16_t value)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f4 f95a 	bl	8000508 <__aeabi_i2d>
 800c254:	a30d      	add	r3, pc, #52	; (adr r3, 800c28c <can1_ams_cell_temperatures_t1s5_decode+0x4c>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f9bf 	bl	80005dc <__aeabi_dmul>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4610      	mov	r0, r2
 800c264:	4619      	mov	r1, r3
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <can1_ams_cell_temperatures_t1s5_decode+0x48>)
 800c26c:	f7f3 fffe 	bl	800026c <__aeabi_dsub>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	ec43 2b17 	vmov	d7, r2, r3
}
 800c278:	eeb0 0a47 	vmov.f32	s0, s14
 800c27c:	eef0 0a67 	vmov.f32	s1, s15
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40240000 	.word	0x40240000
 800c28c:	757928e1 	.word	0x757928e1
 800c290:	3fa9018e 	.word	0x3fa9018e
 800c294:	00000000 	.word	0x00000000

0800c298 <can1_ams_cell_temperatures_t1s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s6_encode(double value)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <can1_ams_cell_temperatures_t1s6_encode+0x50>)
 800c2a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ac:	f7f3 ffe0 	bl	8000270 <__adddf3>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	a309      	add	r3, pc, #36	; (adr r3, 800c2e0 <can1_ams_cell_temperatures_t1s6_encode+0x48>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f4 fab7 	bl	8000830 <__aeabi_ddiv>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f7f4 fc37 	bl	8000b3c <__aeabi_d2iz>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	b21b      	sxth	r3, r3
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	757928e1 	.word	0x757928e1
 800c2e4:	3fa9018e 	.word	0x3fa9018e
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <can1_ams_cell_temperatures_t1s6_decode>:

double can1_ams_cell_temperatures_t1s6_decode(int16_t value)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f4 f902 	bl	8000508 <__aeabi_i2d>
 800c304:	a30d      	add	r3, pc, #52	; (adr r3, 800c33c <can1_ams_cell_temperatures_t1s6_decode+0x4c>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f4 f967 	bl	80005dc <__aeabi_dmul>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f04f 0200 	mov.w	r2, #0
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <can1_ams_cell_temperatures_t1s6_decode+0x48>)
 800c31c:	f7f3 ffa6 	bl	800026c <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	ec43 2b17 	vmov	d7, r2, r3
}
 800c328:	eeb0 0a47 	vmov.f32	s0, s14
 800c32c:	eef0 0a67 	vmov.f32	s1, s15
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40240000 	.word	0x40240000
 800c33c:	757928e1 	.word	0x757928e1
 800c340:	3fa9018e 	.word	0x3fa9018e
 800c344:	00000000 	.word	0x00000000

0800c348 <can1_ams_cell_temperatures_t1s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s7_encode(double value)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	4b10      	ldr	r3, [pc, #64]	; (800c398 <can1_ams_cell_temperatures_t1s7_encode+0x50>)
 800c358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c35c:	f7f3 ff88 	bl	8000270 <__adddf3>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4610      	mov	r0, r2
 800c366:	4619      	mov	r1, r3
 800c368:	a309      	add	r3, pc, #36	; (adr r3, 800c390 <can1_ams_cell_temperatures_t1s7_encode+0x48>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f4 fa5f 	bl	8000830 <__aeabi_ddiv>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	f7f4 fbdf 	bl	8000b3c <__aeabi_d2iz>
 800c37e:	4603      	mov	r3, r0
 800c380:	b21b      	sxth	r3, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	757928e1 	.word	0x757928e1
 800c394:	3fa9018e 	.word	0x3fa9018e
 800c398:	40240000 	.word	0x40240000
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <can1_ams_cell_temperatures_t1s7_decode>:

double can1_ams_cell_temperatures_t1s7_decode(int16_t value)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c3aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 f8aa 	bl	8000508 <__aeabi_i2d>
 800c3b4:	a30d      	add	r3, pc, #52	; (adr r3, 800c3ec <can1_ams_cell_temperatures_t1s7_decode+0x4c>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f4 f90f 	bl	80005dc <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <can1_ams_cell_temperatures_t1s7_decode+0x48>)
 800c3cc:	f7f3 ff4e 	bl	800026c <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c3d8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3dc:	eef0 0a67 	vmov.f32	s1, s15
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	757928e1 	.word	0x757928e1
 800c3f0:	3fa9018e 	.word	0x3fa9018e
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <can1_ams_cell_temperatures_t1s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s8_encode(double value)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	4b10      	ldr	r3, [pc, #64]	; (800c448 <can1_ams_cell_temperatures_t1s8_encode+0x50>)
 800c408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c40c:	f7f3 ff30 	bl	8000270 <__adddf3>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4610      	mov	r0, r2
 800c416:	4619      	mov	r1, r3
 800c418:	a309      	add	r3, pc, #36	; (adr r3, 800c440 <can1_ams_cell_temperatures_t1s8_encode+0x48>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f4 fa07 	bl	8000830 <__aeabi_ddiv>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fb87 	bl	8000b3c <__aeabi_d2iz>
 800c42e:	4603      	mov	r3, r0
 800c430:	b21b      	sxth	r3, r3
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	757928e1 	.word	0x757928e1
 800c444:	3fa9018e 	.word	0x3fa9018e
 800c448:	40240000 	.word	0x40240000
 800c44c:	00000000 	.word	0x00000000

0800c450 <can1_ams_cell_temperatures_t1s8_decode>:

double can1_ams_cell_temperatures_t1s8_decode(int16_t value)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c45a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f4 f852 	bl	8000508 <__aeabi_i2d>
 800c464:	a30d      	add	r3, pc, #52	; (adr r3, 800c49c <can1_ams_cell_temperatures_t1s8_decode+0x4c>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f4 f8b7 	bl	80005dc <__aeabi_dmul>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4610      	mov	r0, r2
 800c474:	4619      	mov	r1, r3
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <can1_ams_cell_temperatures_t1s8_decode+0x48>)
 800c47c:	f7f3 fef6 	bl	800026c <__aeabi_dsub>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	ec43 2b17 	vmov	d7, r2, r3
}
 800c488:	eeb0 0a47 	vmov.f32	s0, s14
 800c48c:	eef0 0a67 	vmov.f32	s1, s15
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	40240000 	.word	0x40240000
 800c49c:	757928e1 	.word	0x757928e1
 800c4a0:	3fa9018e 	.word	0x3fa9018e
 800c4a4:	00000000 	.word	0x00000000

0800c4a8 <can1_ams_cell_temperatures_t1s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s9_encode(double value)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <can1_ams_cell_temperatures_t1s9_encode+0x50>)
 800c4b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4bc:	f7f3 fed8 	bl	8000270 <__adddf3>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	a309      	add	r3, pc, #36	; (adr r3, 800c4f0 <can1_ams_cell_temperatures_t1s9_encode+0x48>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f9af 	bl	8000830 <__aeabi_ddiv>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f7f4 fb2f 	bl	8000b3c <__aeabi_d2iz>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	b21b      	sxth	r3, r3
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	757928e1 	.word	0x757928e1
 800c4f4:	3fa9018e 	.word	0x3fa9018e
 800c4f8:	40240000 	.word	0x40240000
 800c4fc:	00000000 	.word	0x00000000

0800c500 <can1_ams_cell_temperatures_t1s9_decode>:

double can1_ams_cell_temperatures_t1s9_decode(int16_t value)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f3 fffa 	bl	8000508 <__aeabi_i2d>
 800c514:	a30d      	add	r3, pc, #52	; (adr r3, 800c54c <can1_ams_cell_temperatures_t1s9_decode+0x4c>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 f85f 	bl	80005dc <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4610      	mov	r0, r2
 800c524:	4619      	mov	r1, r3
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <can1_ams_cell_temperatures_t1s9_decode+0x48>)
 800c52c:	f7f3 fe9e 	bl	800026c <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	ec43 2b17 	vmov	d7, r2, r3
}
 800c538:	eeb0 0a47 	vmov.f32	s0, s14
 800c53c:	eef0 0a67 	vmov.f32	s1, s15
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	40240000 	.word	0x40240000
 800c54c:	757928e1 	.word	0x757928e1
 800c550:	3fa9018e 	.word	0x3fa9018e
 800c554:	00000000 	.word	0x00000000

0800c558 <can1_ams_cell_temperatures_t1s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s10_encode(double value)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <can1_ams_cell_temperatures_t1s10_encode+0x50>)
 800c568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c56c:	f7f3 fe80 	bl	8000270 <__adddf3>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4610      	mov	r0, r2
 800c576:	4619      	mov	r1, r3
 800c578:	a309      	add	r3, pc, #36	; (adr r3, 800c5a0 <can1_ams_cell_temperatures_t1s10_encode+0x48>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f4 f957 	bl	8000830 <__aeabi_ddiv>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4610      	mov	r0, r2
 800c588:	4619      	mov	r1, r3
 800c58a:	f7f4 fad7 	bl	8000b3c <__aeabi_d2iz>
 800c58e:	4603      	mov	r3, r0
 800c590:	b21b      	sxth	r3, r3
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	f3af 8000 	nop.w
 800c5a0:	757928e1 	.word	0x757928e1
 800c5a4:	3fa9018e 	.word	0x3fa9018e
 800c5a8:	40240000 	.word	0x40240000
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <can1_ams_cell_temperatures_t1s10_decode>:

double can1_ams_cell_temperatures_t1s10_decode(int16_t value)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c5ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f3 ffa2 	bl	8000508 <__aeabi_i2d>
 800c5c4:	a30d      	add	r3, pc, #52	; (adr r3, 800c5fc <can1_ams_cell_temperatures_t1s10_decode+0x4c>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f4 f807 	bl	80005dc <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f04f 0200 	mov.w	r2, #0
 800c5da:	4b07      	ldr	r3, [pc, #28]	; (800c5f8 <can1_ams_cell_temperatures_t1s10_decode+0x48>)
 800c5dc:	f7f3 fe46 	bl	800026c <__aeabi_dsub>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c5e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c5ec:	eef0 0a67 	vmov.f32	s1, s15
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	757928e1 	.word	0x757928e1
 800c600:	3fa9018e 	.word	0x3fa9018e
 800c604:	00000000 	.word	0x00000000

0800c608 <can1_ams_cell_temperatures_t1s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s11_encode(double value)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	4b10      	ldr	r3, [pc, #64]	; (800c658 <can1_ams_cell_temperatures_t1s11_encode+0x50>)
 800c618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c61c:	f7f3 fe28 	bl	8000270 <__adddf3>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	a309      	add	r3, pc, #36	; (adr r3, 800c650 <can1_ams_cell_temperatures_t1s11_encode+0x48>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f4 f8ff 	bl	8000830 <__aeabi_ddiv>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4610      	mov	r0, r2
 800c638:	4619      	mov	r1, r3
 800c63a:	f7f4 fa7f 	bl	8000b3c <__aeabi_d2iz>
 800c63e:	4603      	mov	r3, r0
 800c640:	b21b      	sxth	r3, r3
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w
 800c650:	757928e1 	.word	0x757928e1
 800c654:	3fa9018e 	.word	0x3fa9018e
 800c658:	40240000 	.word	0x40240000
 800c65c:	00000000 	.word	0x00000000

0800c660 <can1_ams_cell_temperatures_t1s11_decode>:

double can1_ams_cell_temperatures_t1s11_decode(int16_t value)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c66a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f3 ff4a 	bl	8000508 <__aeabi_i2d>
 800c674:	a30d      	add	r3, pc, #52	; (adr r3, 800c6ac <can1_ams_cell_temperatures_t1s11_decode+0x4c>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 ffaf 	bl	80005dc <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4610      	mov	r0, r2
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <can1_ams_cell_temperatures_t1s11_decode+0x48>)
 800c68c:	f7f3 fdee 	bl	800026c <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	ec43 2b17 	vmov	d7, r2, r3
}
 800c698:	eeb0 0a47 	vmov.f32	s0, s14
 800c69c:	eef0 0a67 	vmov.f32	s1, s15
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	757928e1 	.word	0x757928e1
 800c6b0:	3fa9018e 	.word	0x3fa9018e
 800c6b4:	00000000 	.word	0x00000000

0800c6b8 <can1_ams_cell_temperatures_t1s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s12_encode(double value)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	4b10      	ldr	r3, [pc, #64]	; (800c708 <can1_ams_cell_temperatures_t1s12_encode+0x50>)
 800c6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6cc:	f7f3 fdd0 	bl	8000270 <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	a309      	add	r3, pc, #36	; (adr r3, 800c700 <can1_ams_cell_temperatures_t1s12_encode+0x48>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f4 f8a7 	bl	8000830 <__aeabi_ddiv>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f7f4 fa27 	bl	8000b3c <__aeabi_d2iz>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	b21b      	sxth	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w
 800c700:	757928e1 	.word	0x757928e1
 800c704:	3fa9018e 	.word	0x3fa9018e
 800c708:	40240000 	.word	0x40240000
 800c70c:	00000000 	.word	0x00000000

0800c710 <can1_ams_cell_temperatures_t1s12_decode>:

double can1_ams_cell_temperatures_t1s12_decode(int16_t value)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c71a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 fef2 	bl	8000508 <__aeabi_i2d>
 800c724:	a30d      	add	r3, pc, #52	; (adr r3, 800c75c <can1_ams_cell_temperatures_t1s12_decode+0x4c>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 ff57 	bl	80005dc <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4610      	mov	r0, r2
 800c734:	4619      	mov	r1, r3
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <can1_ams_cell_temperatures_t1s12_decode+0x48>)
 800c73c:	f7f3 fd96 	bl	800026c <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	ec43 2b17 	vmov	d7, r2, r3
}
 800c748:	eeb0 0a47 	vmov.f32	s0, s14
 800c74c:	eef0 0a67 	vmov.f32	s1, s15
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	40240000 	.word	0x40240000
 800c75c:	757928e1 	.word	0x757928e1
 800c760:	3fa9018e 	.word	0x3fa9018e
 800c764:	00000000 	.word	0x00000000

0800c768 <can1_ams_cell_temperatures_t2s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s1_encode(double value)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <can1_ams_cell_temperatures_t2s1_encode+0x50>)
 800c778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c77c:	f7f3 fd78 	bl	8000270 <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4610      	mov	r0, r2
 800c786:	4619      	mov	r1, r3
 800c788:	a309      	add	r3, pc, #36	; (adr r3, 800c7b0 <can1_ams_cell_temperatures_t2s1_encode+0x48>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f7f4 f84f 	bl	8000830 <__aeabi_ddiv>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	f7f4 f9cf 	bl	8000b3c <__aeabi_d2iz>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	b21b      	sxth	r3, r3
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	757928e1 	.word	0x757928e1
 800c7b4:	3fa9018e 	.word	0x3fa9018e
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	00000000 	.word	0x00000000

0800c7c0 <can1_ams_cell_temperatures_t2s1_decode>:

double can1_ams_cell_temperatures_t2s1_decode(int16_t value)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c7ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 fe9a 	bl	8000508 <__aeabi_i2d>
 800c7d4:	a30d      	add	r3, pc, #52	; (adr r3, 800c80c <can1_ams_cell_temperatures_t2s1_decode+0x4c>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 feff 	bl	80005dc <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <can1_ams_cell_temperatures_t2s1_decode+0x48>)
 800c7ec:	f7f3 fd3e 	bl	800026c <__aeabi_dsub>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c7f8:	eeb0 0a47 	vmov.f32	s0, s14
 800c7fc:	eef0 0a67 	vmov.f32	s1, s15
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	40240000 	.word	0x40240000
 800c80c:	757928e1 	.word	0x757928e1
 800c810:	3fa9018e 	.word	0x3fa9018e
 800c814:	00000000 	.word	0x00000000

0800c818 <can1_ams_cell_temperatures_t2s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s2_encode(double value)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c822:	f04f 0200 	mov.w	r2, #0
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <can1_ams_cell_temperatures_t2s2_encode+0x50>)
 800c828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82c:	f7f3 fd20 	bl	8000270 <__adddf3>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4610      	mov	r0, r2
 800c836:	4619      	mov	r1, r3
 800c838:	a309      	add	r3, pc, #36	; (adr r3, 800c860 <can1_ams_cell_temperatures_t2s2_encode+0x48>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fff7 	bl	8000830 <__aeabi_ddiv>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f977 	bl	8000b3c <__aeabi_d2iz>
 800c84e:	4603      	mov	r3, r0
 800c850:	b21b      	sxth	r3, r3
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
 800c860:	757928e1 	.word	0x757928e1
 800c864:	3fa9018e 	.word	0x3fa9018e
 800c868:	40240000 	.word	0x40240000
 800c86c:	00000000 	.word	0x00000000

0800c870 <can1_ams_cell_temperatures_t2s2_decode>:

double can1_ams_cell_temperatures_t2s2_decode(int16_t value)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f3 fe42 	bl	8000508 <__aeabi_i2d>
 800c884:	a30d      	add	r3, pc, #52	; (adr r3, 800c8bc <can1_ams_cell_temperatures_t2s2_decode+0x4c>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fea7 	bl	80005dc <__aeabi_dmul>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4610      	mov	r0, r2
 800c894:	4619      	mov	r1, r3
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <can1_ams_cell_temperatures_t2s2_decode+0x48>)
 800c89c:	f7f3 fce6 	bl	800026c <__aeabi_dsub>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c8a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ac:	eef0 0a67 	vmov.f32	s1, s15
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40240000 	.word	0x40240000
 800c8bc:	757928e1 	.word	0x757928e1
 800c8c0:	3fa9018e 	.word	0x3fa9018e
 800c8c4:	00000000 	.word	0x00000000

0800c8c8 <can1_ams_cell_temperatures_t2s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s3_encode(double value)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <can1_ams_cell_temperatures_t2s3_encode+0x50>)
 800c8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8dc:	f7f3 fcc8 	bl	8000270 <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	a309      	add	r3, pc, #36	; (adr r3, 800c910 <can1_ams_cell_temperatures_t2s3_encode+0x48>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 ff9f 	bl	8000830 <__aeabi_ddiv>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7f4 f91f 	bl	8000b3c <__aeabi_d2iz>
 800c8fe:	4603      	mov	r3, r0
 800c900:	b21b      	sxth	r3, r3
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	f3af 8000 	nop.w
 800c910:	757928e1 	.word	0x757928e1
 800c914:	3fa9018e 	.word	0x3fa9018e
 800c918:	40240000 	.word	0x40240000
 800c91c:	00000000 	.word	0x00000000

0800c920 <can1_ams_cell_temperatures_t2s3_decode>:

double can1_ams_cell_temperatures_t2s3_decode(int16_t value)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c92a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f3 fdea 	bl	8000508 <__aeabi_i2d>
 800c934:	a30d      	add	r3, pc, #52	; (adr r3, 800c96c <can1_ams_cell_temperatures_t2s3_decode+0x4c>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fe4f 	bl	80005dc <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4610      	mov	r0, r2
 800c944:	4619      	mov	r1, r3
 800c946:	f04f 0200 	mov.w	r2, #0
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <can1_ams_cell_temperatures_t2s3_decode+0x48>)
 800c94c:	f7f3 fc8e 	bl	800026c <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	ec43 2b17 	vmov	d7, r2, r3
}
 800c958:	eeb0 0a47 	vmov.f32	s0, s14
 800c95c:	eef0 0a67 	vmov.f32	s1, s15
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	40240000 	.word	0x40240000
 800c96c:	757928e1 	.word	0x757928e1
 800c970:	3fa9018e 	.word	0x3fa9018e
 800c974:	00000000 	.word	0x00000000

0800c978 <can1_ams_cell_temperatures_t2s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s4_encode(double value)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c982:	f04f 0200 	mov.w	r2, #0
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <can1_ams_cell_temperatures_t2s4_encode+0x50>)
 800c988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c98c:	f7f3 fc70 	bl	8000270 <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	a309      	add	r3, pc, #36	; (adr r3, 800c9c0 <can1_ams_cell_temperatures_t2s4_encode+0x48>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 ff47 	bl	8000830 <__aeabi_ddiv>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f7f4 f8c7 	bl	8000b3c <__aeabi_d2iz>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	b21b      	sxth	r3, r3
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	757928e1 	.word	0x757928e1
 800c9c4:	3fa9018e 	.word	0x3fa9018e
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <can1_ams_cell_temperatures_t2s4_decode>:

double can1_ams_cell_temperatures_t2s4_decode(int16_t value)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c9da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fd92 	bl	8000508 <__aeabi_i2d>
 800c9e4:	a30d      	add	r3, pc, #52	; (adr r3, 800ca1c <can1_ams_cell_temperatures_t2s4_decode+0x4c>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fdf7 	bl	80005dc <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <can1_ams_cell_temperatures_t2s4_decode+0x48>)
 800c9fc:	f7f3 fc36 	bl	800026c <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	ec43 2b17 	vmov	d7, r2, r3
}
 800ca08:	eeb0 0a47 	vmov.f32	s0, s14
 800ca0c:	eef0 0a67 	vmov.f32	s1, s15
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	40240000 	.word	0x40240000
 800ca1c:	757928e1 	.word	0x757928e1
 800ca20:	3fa9018e 	.word	0x3fa9018e
 800ca24:	00000000 	.word	0x00000000

0800ca28 <can1_ams_cell_temperatures_t2s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s5_encode(double value)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <can1_ams_cell_temperatures_t2s5_encode+0x50>)
 800ca38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3c:	f7f3 fc18 	bl	8000270 <__adddf3>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	a309      	add	r3, pc, #36	; (adr r3, 800ca70 <can1_ams_cell_temperatures_t2s5_encode+0x48>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 feef 	bl	8000830 <__aeabi_ddiv>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4610      	mov	r0, r2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f7f4 f86f 	bl	8000b3c <__aeabi_d2iz>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	b21b      	sxth	r3, r3
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
 800ca70:	757928e1 	.word	0x757928e1
 800ca74:	3fa9018e 	.word	0x3fa9018e
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	00000000 	.word	0x00000000

0800ca80 <can1_ams_cell_temperatures_t2s5_decode>:

double can1_ams_cell_temperatures_t2s5_decode(int16_t value)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ca8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f3 fd3a 	bl	8000508 <__aeabi_i2d>
 800ca94:	a30d      	add	r3, pc, #52	; (adr r3, 800cacc <can1_ams_cell_temperatures_t2s5_decode+0x4c>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fd9f 	bl	80005dc <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4610      	mov	r0, r2
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <can1_ams_cell_temperatures_t2s5_decode+0x48>)
 800caac:	f7f3 fbde 	bl	800026c <__aeabi_dsub>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cab8:	eeb0 0a47 	vmov.f32	s0, s14
 800cabc:	eef0 0a67 	vmov.f32	s1, s15
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	40240000 	.word	0x40240000
 800cacc:	757928e1 	.word	0x757928e1
 800cad0:	3fa9018e 	.word	0x3fa9018e
 800cad4:	00000000 	.word	0x00000000

0800cad8 <can1_ams_cell_temperatures_t2s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s6_encode(double value)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cae2:	f04f 0200 	mov.w	r2, #0
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <can1_ams_cell_temperatures_t2s6_encode+0x50>)
 800cae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caec:	f7f3 fbc0 	bl	8000270 <__adddf3>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4610      	mov	r0, r2
 800caf6:	4619      	mov	r1, r3
 800caf8:	a309      	add	r3, pc, #36	; (adr r3, 800cb20 <can1_ams_cell_temperatures_t2s6_encode+0x48>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fe97 	bl	8000830 <__aeabi_ddiv>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4610      	mov	r0, r2
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f7f4 f817 	bl	8000b3c <__aeabi_d2iz>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	b21b      	sxth	r3, r3
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	f3af 8000 	nop.w
 800cb20:	757928e1 	.word	0x757928e1
 800cb24:	3fa9018e 	.word	0x3fa9018e
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <can1_ams_cell_temperatures_t2s6_decode>:

double can1_ams_cell_temperatures_t2s6_decode(int16_t value)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cb3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f3 fce2 	bl	8000508 <__aeabi_i2d>
 800cb44:	a30d      	add	r3, pc, #52	; (adr r3, 800cb7c <can1_ams_cell_temperatures_t2s6_decode+0x4c>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fd47 	bl	80005dc <__aeabi_dmul>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4610      	mov	r0, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	f04f 0200 	mov.w	r2, #0
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <can1_ams_cell_temperatures_t2s6_decode+0x48>)
 800cb5c:	f7f3 fb86 	bl	800026c <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	ec43 2b17 	vmov	d7, r2, r3
}
 800cb68:	eeb0 0a47 	vmov.f32	s0, s14
 800cb6c:	eef0 0a67 	vmov.f32	s1, s15
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	40240000 	.word	0x40240000
 800cb7c:	757928e1 	.word	0x757928e1
 800cb80:	3fa9018e 	.word	0x3fa9018e
 800cb84:	00000000 	.word	0x00000000

0800cb88 <can1_ams_cell_temperatures_t2s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s7_encode(double value)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <can1_ams_cell_temperatures_t2s7_encode+0x50>)
 800cb98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb9c:	f7f3 fb68 	bl	8000270 <__adddf3>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4610      	mov	r0, r2
 800cba6:	4619      	mov	r1, r3
 800cba8:	a309      	add	r3, pc, #36	; (adr r3, 800cbd0 <can1_ams_cell_temperatures_t2s7_encode+0x48>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fe3f 	bl	8000830 <__aeabi_ddiv>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f7f3 ffbf 	bl	8000b3c <__aeabi_d2iz>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	b21b      	sxth	r3, r3
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	f3af 8000 	nop.w
 800cbd0:	757928e1 	.word	0x757928e1
 800cbd4:	3fa9018e 	.word	0x3fa9018e
 800cbd8:	40240000 	.word	0x40240000
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <can1_ams_cell_temperatures_t2s7_decode>:

double can1_ams_cell_temperatures_t2s7_decode(int16_t value)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f3 fc8a 	bl	8000508 <__aeabi_i2d>
 800cbf4:	a30d      	add	r3, pc, #52	; (adr r3, 800cc2c <can1_ams_cell_temperatures_t2s7_decode+0x4c>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fcef 	bl	80005dc <__aeabi_dmul>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4610      	mov	r0, r2
 800cc04:	4619      	mov	r1, r3
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <can1_ams_cell_temperatures_t2s7_decode+0x48>)
 800cc0c:	f7f3 fb2e 	bl	800026c <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	ec43 2b17 	vmov	d7, r2, r3
}
 800cc18:	eeb0 0a47 	vmov.f32	s0, s14
 800cc1c:	eef0 0a67 	vmov.f32	s1, s15
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	40240000 	.word	0x40240000
 800cc2c:	757928e1 	.word	0x757928e1
 800cc30:	3fa9018e 	.word	0x3fa9018e
 800cc34:	00000000 	.word	0x00000000

0800cc38 <can1_ams_cell_temperatures_t2s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s8_encode(double value)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cc42:	f04f 0200 	mov.w	r2, #0
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <can1_ams_cell_temperatures_t2s8_encode+0x50>)
 800cc48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc4c:	f7f3 fb10 	bl	8000270 <__adddf3>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4610      	mov	r0, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	a309      	add	r3, pc, #36	; (adr r3, 800cc80 <can1_ams_cell_temperatures_t2s8_encode+0x48>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fde7 	bl	8000830 <__aeabi_ddiv>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4610      	mov	r0, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f7f3 ff67 	bl	8000b3c <__aeabi_d2iz>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	b21b      	sxth	r3, r3
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w
 800cc80:	757928e1 	.word	0x757928e1
 800cc84:	3fa9018e 	.word	0x3fa9018e
 800cc88:	40240000 	.word	0x40240000
 800cc8c:	00000000 	.word	0x00000000

0800cc90 <can1_ams_cell_temperatures_t2s8_decode>:

double can1_ams_cell_temperatures_t2s8_decode(int16_t value)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cc9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f3 fc32 	bl	8000508 <__aeabi_i2d>
 800cca4:	a30d      	add	r3, pc, #52	; (adr r3, 800ccdc <can1_ams_cell_temperatures_t2s8_decode+0x4c>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fc97 	bl	80005dc <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <can1_ams_cell_temperatures_t2s8_decode+0x48>)
 800ccbc:	f7f3 fad6 	bl	800026c <__aeabi_dsub>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ccc8:	eeb0 0a47 	vmov.f32	s0, s14
 800cccc:	eef0 0a67 	vmov.f32	s1, s15
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40240000 	.word	0x40240000
 800ccdc:	757928e1 	.word	0x757928e1
 800cce0:	3fa9018e 	.word	0x3fa9018e
 800cce4:	00000000 	.word	0x00000000

0800cce8 <can1_ams_cell_temperatures_t2s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s9_encode(double value)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <can1_ams_cell_temperatures_t2s9_encode+0x50>)
 800ccf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccfc:	f7f3 fab8 	bl	8000270 <__adddf3>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4610      	mov	r0, r2
 800cd06:	4619      	mov	r1, r3
 800cd08:	a309      	add	r3, pc, #36	; (adr r3, 800cd30 <can1_ams_cell_temperatures_t2s9_encode+0x48>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fd8f 	bl	8000830 <__aeabi_ddiv>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4610      	mov	r0, r2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f7f3 ff0f 	bl	8000b3c <__aeabi_d2iz>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	b21b      	sxth	r3, r3
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
 800cd30:	757928e1 	.word	0x757928e1
 800cd34:	3fa9018e 	.word	0x3fa9018e
 800cd38:	40240000 	.word	0x40240000
 800cd3c:	00000000 	.word	0x00000000

0800cd40 <can1_ams_cell_temperatures_t2s9_decode>:

double can1_ams_cell_temperatures_t2s9_decode(int16_t value)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cd4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f3 fbda 	bl	8000508 <__aeabi_i2d>
 800cd54:	a30d      	add	r3, pc, #52	; (adr r3, 800cd8c <can1_ams_cell_temperatures_t2s9_decode+0x4c>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fc3f 	bl	80005dc <__aeabi_dmul>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4610      	mov	r0, r2
 800cd64:	4619      	mov	r1, r3
 800cd66:	f04f 0200 	mov.w	r2, #0
 800cd6a:	4b07      	ldr	r3, [pc, #28]	; (800cd88 <can1_ams_cell_temperatures_t2s9_decode+0x48>)
 800cd6c:	f7f3 fa7e 	bl	800026c <__aeabi_dsub>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	ec43 2b17 	vmov	d7, r2, r3
}
 800cd78:	eeb0 0a47 	vmov.f32	s0, s14
 800cd7c:	eef0 0a67 	vmov.f32	s1, s15
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	40240000 	.word	0x40240000
 800cd8c:	757928e1 	.word	0x757928e1
 800cd90:	3fa9018e 	.word	0x3fa9018e
 800cd94:	00000000 	.word	0x00000000

0800cd98 <can1_ams_cell_temperatures_t2s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s10_encode(double value)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cda2:	f04f 0200 	mov.w	r2, #0
 800cda6:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <can1_ams_cell_temperatures_t2s10_encode+0x50>)
 800cda8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdac:	f7f3 fa60 	bl	8000270 <__adddf3>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	a309      	add	r3, pc, #36	; (adr r3, 800cde0 <can1_ams_cell_temperatures_t2s10_encode+0x48>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 fd37 	bl	8000830 <__aeabi_ddiv>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f7f3 feb7 	bl	8000b3c <__aeabi_d2iz>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	b21b      	sxth	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
 800cde0:	757928e1 	.word	0x757928e1
 800cde4:	3fa9018e 	.word	0x3fa9018e
 800cde8:	40240000 	.word	0x40240000
 800cdec:	00000000 	.word	0x00000000

0800cdf0 <can1_ams_cell_temperatures_t2s10_decode>:

double can1_ams_cell_temperatures_t2s10_decode(int16_t value)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cdfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f3 fb82 	bl	8000508 <__aeabi_i2d>
 800ce04:	a30d      	add	r3, pc, #52	; (adr r3, 800ce3c <can1_ams_cell_temperatures_t2s10_decode+0x4c>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fbe7 	bl	80005dc <__aeabi_dmul>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4610      	mov	r0, r2
 800ce14:	4619      	mov	r1, r3
 800ce16:	f04f 0200 	mov.w	r2, #0
 800ce1a:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <can1_ams_cell_temperatures_t2s10_decode+0x48>)
 800ce1c:	f7f3 fa26 	bl	800026c <__aeabi_dsub>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce28:	eeb0 0a47 	vmov.f32	s0, s14
 800ce2c:	eef0 0a67 	vmov.f32	s1, s15
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40240000 	.word	0x40240000
 800ce3c:	757928e1 	.word	0x757928e1
 800ce40:	3fa9018e 	.word	0x3fa9018e
 800ce44:	00000000 	.word	0x00000000

0800ce48 <can1_ams_cell_temperatures_t2s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s11_encode(double value)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <can1_ams_cell_temperatures_t2s11_encode+0x50>)
 800ce58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce5c:	f7f3 fa08 	bl	8000270 <__adddf3>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	4610      	mov	r0, r2
 800ce66:	4619      	mov	r1, r3
 800ce68:	a309      	add	r3, pc, #36	; (adr r3, 800ce90 <can1_ams_cell_temperatures_t2s11_encode+0x48>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fcdf 	bl	8000830 <__aeabi_ddiv>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4610      	mov	r0, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7f3 fe5f 	bl	8000b3c <__aeabi_d2iz>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	b21b      	sxth	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w
 800ce90:	757928e1 	.word	0x757928e1
 800ce94:	3fa9018e 	.word	0x3fa9018e
 800ce98:	40240000 	.word	0x40240000
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <can1_ams_cell_temperatures_t2s11_decode>:

double can1_ams_cell_temperatures_t2s11_decode(int16_t value)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ceaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f3 fb2a 	bl	8000508 <__aeabi_i2d>
 800ceb4:	a30d      	add	r3, pc, #52	; (adr r3, 800ceec <can1_ams_cell_temperatures_t2s11_decode+0x4c>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fb8f 	bl	80005dc <__aeabi_dmul>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4610      	mov	r0, r2
 800cec4:	4619      	mov	r1, r3
 800cec6:	f04f 0200 	mov.w	r2, #0
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <can1_ams_cell_temperatures_t2s11_decode+0x48>)
 800cecc:	f7f3 f9ce 	bl	800026c <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ced8:	eeb0 0a47 	vmov.f32	s0, s14
 800cedc:	eef0 0a67 	vmov.f32	s1, s15
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	40240000 	.word	0x40240000
 800ceec:	757928e1 	.word	0x757928e1
 800cef0:	3fa9018e 	.word	0x3fa9018e
 800cef4:	00000000 	.word	0x00000000

0800cef8 <can1_ams_cell_temperatures_t2s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s12_encode(double value)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cf02:	f04f 0200 	mov.w	r2, #0
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <can1_ams_cell_temperatures_t2s12_encode+0x50>)
 800cf08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf0c:	f7f3 f9b0 	bl	8000270 <__adddf3>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	a309      	add	r3, pc, #36	; (adr r3, 800cf40 <can1_ams_cell_temperatures_t2s12_encode+0x48>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 fc87 	bl	8000830 <__aeabi_ddiv>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f7f3 fe07 	bl	8000b3c <__aeabi_d2iz>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	b21b      	sxth	r3, r3
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w
 800cf40:	757928e1 	.word	0x757928e1
 800cf44:	3fa9018e 	.word	0x3fa9018e
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <can1_ams_cell_temperatures_t2s12_decode>:

double can1_ams_cell_temperatures_t2s12_decode(int16_t value)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cf5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f3 fad2 	bl	8000508 <__aeabi_i2d>
 800cf64:	a30d      	add	r3, pc, #52	; (adr r3, 800cf9c <can1_ams_cell_temperatures_t2s12_decode+0x4c>)
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f3 fb37 	bl	80005dc <__aeabi_dmul>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4610      	mov	r0, r2
 800cf74:	4619      	mov	r1, r3
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	4b07      	ldr	r3, [pc, #28]	; (800cf98 <can1_ams_cell_temperatures_t2s12_decode+0x48>)
 800cf7c:	f7f3 f976 	bl	800026c <__aeabi_dsub>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf88:	eeb0 0a47 	vmov.f32	s0, s14
 800cf8c:	eef0 0a67 	vmov.f32	s1, s15
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	40240000 	.word	0x40240000
 800cf9c:	757928e1 	.word	0x757928e1
 800cfa0:	3fa9018e 	.word	0x3fa9018e
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <can1_ams_cell_temperatures_t3s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s1_encode(double value)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <can1_ams_cell_temperatures_t3s1_encode+0x50>)
 800cfb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfbc:	f7f3 f958 	bl	8000270 <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	a309      	add	r3, pc, #36	; (adr r3, 800cff0 <can1_ams_cell_temperatures_t3s1_encode+0x48>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 fc2f 	bl	8000830 <__aeabi_ddiv>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f7f3 fdaf 	bl	8000b3c <__aeabi_d2iz>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	b21b      	sxth	r3, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w
 800cff0:	757928e1 	.word	0x757928e1
 800cff4:	3fa9018e 	.word	0x3fa9018e
 800cff8:	40240000 	.word	0x40240000
 800cffc:	00000000 	.word	0x00000000

0800d000 <can1_ams_cell_temperatures_t3s1_decode>:

double can1_ams_cell_temperatures_t3s1_decode(int16_t value)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d00a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f3 fa7a 	bl	8000508 <__aeabi_i2d>
 800d014:	a30d      	add	r3, pc, #52	; (adr r3, 800d04c <can1_ams_cell_temperatures_t3s1_decode+0x4c>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 fadf 	bl	80005dc <__aeabi_dmul>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <can1_ams_cell_temperatures_t3s1_decode+0x48>)
 800d02c:	f7f3 f91e 	bl	800026c <__aeabi_dsub>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	ec43 2b17 	vmov	d7, r2, r3
}
 800d038:	eeb0 0a47 	vmov.f32	s0, s14
 800d03c:	eef0 0a67 	vmov.f32	s1, s15
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	40240000 	.word	0x40240000
 800d04c:	757928e1 	.word	0x757928e1
 800d050:	3fa9018e 	.word	0x3fa9018e
 800d054:	00000000 	.word	0x00000000

0800d058 <can1_ams_cell_temperatures_t3s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s2_encode(double value)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d062:	f04f 0200 	mov.w	r2, #0
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <can1_ams_cell_temperatures_t3s2_encode+0x50>)
 800d068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d06c:	f7f3 f900 	bl	8000270 <__adddf3>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4610      	mov	r0, r2
 800d076:	4619      	mov	r1, r3
 800d078:	a309      	add	r3, pc, #36	; (adr r3, 800d0a0 <can1_ams_cell_temperatures_t3s2_encode+0x48>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 fbd7 	bl	8000830 <__aeabi_ddiv>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4610      	mov	r0, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	f7f3 fd57 	bl	8000b3c <__aeabi_d2iz>
 800d08e:	4603      	mov	r3, r0
 800d090:	b21b      	sxth	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
 800d0a0:	757928e1 	.word	0x757928e1
 800d0a4:	3fa9018e 	.word	0x3fa9018e
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <can1_ams_cell_temperatures_t3s2_decode>:

double can1_ams_cell_temperatures_t3s2_decode(int16_t value)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f3 fa22 	bl	8000508 <__aeabi_i2d>
 800d0c4:	a30d      	add	r3, pc, #52	; (adr r3, 800d0fc <can1_ams_cell_temperatures_t3s2_decode+0x4c>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 fa87 	bl	80005dc <__aeabi_dmul>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f04f 0200 	mov.w	r2, #0
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <can1_ams_cell_temperatures_t3s2_decode+0x48>)
 800d0dc:	f7f3 f8c6 	bl	800026c <__aeabi_dsub>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d0e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d0ec:	eef0 0a67 	vmov.f32	s1, s15
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	40240000 	.word	0x40240000
 800d0fc:	757928e1 	.word	0x757928e1
 800d100:	3fa9018e 	.word	0x3fa9018e
 800d104:	00000000 	.word	0x00000000

0800d108 <can1_ams_cell_temperatures_t3s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s3_encode(double value)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d112:	f04f 0200 	mov.w	r2, #0
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <can1_ams_cell_temperatures_t3s3_encode+0x50>)
 800d118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d11c:	f7f3 f8a8 	bl	8000270 <__adddf3>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4610      	mov	r0, r2
 800d126:	4619      	mov	r1, r3
 800d128:	a309      	add	r3, pc, #36	; (adr r3, 800d150 <can1_ams_cell_temperatures_t3s3_encode+0x48>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 fb7f 	bl	8000830 <__aeabi_ddiv>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4610      	mov	r0, r2
 800d138:	4619      	mov	r1, r3
 800d13a:	f7f3 fcff 	bl	8000b3c <__aeabi_d2iz>
 800d13e:	4603      	mov	r3, r0
 800d140:	b21b      	sxth	r3, r3
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	f3af 8000 	nop.w
 800d150:	757928e1 	.word	0x757928e1
 800d154:	3fa9018e 	.word	0x3fa9018e
 800d158:	40240000 	.word	0x40240000
 800d15c:	00000000 	.word	0x00000000

0800d160 <can1_ams_cell_temperatures_t3s3_decode>:

double can1_ams_cell_temperatures_t3s3_decode(int16_t value)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d16a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9ca 	bl	8000508 <__aeabi_i2d>
 800d174:	a30d      	add	r3, pc, #52	; (adr r3, 800d1ac <can1_ams_cell_temperatures_t3s3_decode+0x4c>)
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f7f3 fa2f 	bl	80005dc <__aeabi_dmul>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4610      	mov	r0, r2
 800d184:	4619      	mov	r1, r3
 800d186:	f04f 0200 	mov.w	r2, #0
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <can1_ams_cell_temperatures_t3s3_decode+0x48>)
 800d18c:	f7f3 f86e 	bl	800026c <__aeabi_dsub>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	ec43 2b17 	vmov	d7, r2, r3
}
 800d198:	eeb0 0a47 	vmov.f32	s0, s14
 800d19c:	eef0 0a67 	vmov.f32	s1, s15
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40240000 	.word	0x40240000
 800d1ac:	757928e1 	.word	0x757928e1
 800d1b0:	3fa9018e 	.word	0x3fa9018e
 800d1b4:	00000000 	.word	0x00000000

0800d1b8 <can1_ams_cell_temperatures_t3s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s4_encode(double value)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d1c2:	f04f 0200 	mov.w	r2, #0
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <can1_ams_cell_temperatures_t3s4_encode+0x50>)
 800d1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1cc:	f7f3 f850 	bl	8000270 <__adddf3>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	a309      	add	r3, pc, #36	; (adr r3, 800d200 <can1_ams_cell_temperatures_t3s4_encode+0x48>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 fb27 	bl	8000830 <__aeabi_ddiv>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	f7f3 fca7 	bl	8000b3c <__aeabi_d2iz>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	b21b      	sxth	r3, r3
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	757928e1 	.word	0x757928e1
 800d204:	3fa9018e 	.word	0x3fa9018e
 800d208:	40240000 	.word	0x40240000
 800d20c:	00000000 	.word	0x00000000

0800d210 <can1_ams_cell_temperatures_t3s4_decode>:

double can1_ams_cell_temperatures_t3s4_decode(int16_t value)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d21a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f3 f972 	bl	8000508 <__aeabi_i2d>
 800d224:	a30d      	add	r3, pc, #52	; (adr r3, 800d25c <can1_ams_cell_temperatures_t3s4_decode+0x4c>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f3 f9d7 	bl	80005dc <__aeabi_dmul>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <can1_ams_cell_temperatures_t3s4_decode+0x48>)
 800d23c:	f7f3 f816 	bl	800026c <__aeabi_dsub>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	ec43 2b17 	vmov	d7, r2, r3
}
 800d248:	eeb0 0a47 	vmov.f32	s0, s14
 800d24c:	eef0 0a67 	vmov.f32	s1, s15
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	40240000 	.word	0x40240000
 800d25c:	757928e1 	.word	0x757928e1
 800d260:	3fa9018e 	.word	0x3fa9018e
 800d264:	00000000 	.word	0x00000000

0800d268 <can1_ams_cell_temperatures_t3s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s5_encode(double value)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d272:	f04f 0200 	mov.w	r2, #0
 800d276:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <can1_ams_cell_temperatures_t3s5_encode+0x50>)
 800d278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d27c:	f7f2 fff8 	bl	8000270 <__adddf3>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4610      	mov	r0, r2
 800d286:	4619      	mov	r1, r3
 800d288:	a309      	add	r3, pc, #36	; (adr r3, 800d2b0 <can1_ams_cell_temperatures_t3s5_encode+0x48>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f7f3 facf 	bl	8000830 <__aeabi_ddiv>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4610      	mov	r0, r2
 800d298:	4619      	mov	r1, r3
 800d29a:	f7f3 fc4f 	bl	8000b3c <__aeabi_d2iz>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	b21b      	sxth	r3, r3
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	757928e1 	.word	0x757928e1
 800d2b4:	3fa9018e 	.word	0x3fa9018e
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	00000000 	.word	0x00000000

0800d2c0 <can1_ams_cell_temperatures_t3s5_decode>:

double can1_ams_cell_temperatures_t3s5_decode(int16_t value)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f3 f91a 	bl	8000508 <__aeabi_i2d>
 800d2d4:	a30d      	add	r3, pc, #52	; (adr r3, 800d30c <can1_ams_cell_temperatures_t3s5_decode+0x4c>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f3 f97f 	bl	80005dc <__aeabi_dmul>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f04f 0200 	mov.w	r2, #0
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <can1_ams_cell_temperatures_t3s5_decode+0x48>)
 800d2ec:	f7f2 ffbe 	bl	800026c <__aeabi_dsub>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d2f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d2fc:	eef0 0a67 	vmov.f32	s1, s15
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	40240000 	.word	0x40240000
 800d30c:	757928e1 	.word	0x757928e1
 800d310:	3fa9018e 	.word	0x3fa9018e
 800d314:	00000000 	.word	0x00000000

0800d318 <can1_ams_cell_temperatures_t3s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s6_encode(double value)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	4b10      	ldr	r3, [pc, #64]	; (800d368 <can1_ams_cell_temperatures_t3s6_encode+0x50>)
 800d328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d32c:	f7f2 ffa0 	bl	8000270 <__adddf3>
 800d330:	4602      	mov	r2, r0
 800d332:	460b      	mov	r3, r1
 800d334:	4610      	mov	r0, r2
 800d336:	4619      	mov	r1, r3
 800d338:	a309      	add	r3, pc, #36	; (adr r3, 800d360 <can1_ams_cell_temperatures_t3s6_encode+0x48>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f7f3 fa77 	bl	8000830 <__aeabi_ddiv>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4610      	mov	r0, r2
 800d348:	4619      	mov	r1, r3
 800d34a:	f7f3 fbf7 	bl	8000b3c <__aeabi_d2iz>
 800d34e:	4603      	mov	r3, r0
 800d350:	b21b      	sxth	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	f3af 8000 	nop.w
 800d360:	757928e1 	.word	0x757928e1
 800d364:	3fa9018e 	.word	0x3fa9018e
 800d368:	40240000 	.word	0x40240000
 800d36c:	00000000 	.word	0x00000000

0800d370 <can1_ams_cell_temperatures_t3s6_decode>:

double can1_ams_cell_temperatures_t3s6_decode(int16_t value)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d37a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f3 f8c2 	bl	8000508 <__aeabi_i2d>
 800d384:	a30d      	add	r3, pc, #52	; (adr r3, 800d3bc <can1_ams_cell_temperatures_t3s6_decode+0x4c>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f3 f927 	bl	80005dc <__aeabi_dmul>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4610      	mov	r0, r2
 800d394:	4619      	mov	r1, r3
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <can1_ams_cell_temperatures_t3s6_decode+0x48>)
 800d39c:	f7f2 ff66 	bl	800026c <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d3a8:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ac:	eef0 0a67 	vmov.f32	s1, s15
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	757928e1 	.word	0x757928e1
 800d3c0:	3fa9018e 	.word	0x3fa9018e
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <can1_ams_cell_temperatures_t3s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s7_encode(double value)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d3d2:	f04f 0200 	mov.w	r2, #0
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <can1_ams_cell_temperatures_t3s7_encode+0x50>)
 800d3d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3dc:	f7f2 ff48 	bl	8000270 <__adddf3>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	a309      	add	r3, pc, #36	; (adr r3, 800d410 <can1_ams_cell_temperatures_t3s7_encode+0x48>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 fa1f 	bl	8000830 <__aeabi_ddiv>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f7f3 fb9f 	bl	8000b3c <__aeabi_d2iz>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b21b      	sxth	r3, r3
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	f3af 8000 	nop.w
 800d410:	757928e1 	.word	0x757928e1
 800d414:	3fa9018e 	.word	0x3fa9018e
 800d418:	40240000 	.word	0x40240000
 800d41c:	00000000 	.word	0x00000000

0800d420 <can1_ams_cell_temperatures_t3s7_decode>:

double can1_ams_cell_temperatures_t3s7_decode(int16_t value)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d42a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f3 f86a 	bl	8000508 <__aeabi_i2d>
 800d434:	a30d      	add	r3, pc, #52	; (adr r3, 800d46c <can1_ams_cell_temperatures_t3s7_decode+0x4c>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f3 f8cf 	bl	80005dc <__aeabi_dmul>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4610      	mov	r0, r2
 800d444:	4619      	mov	r1, r3
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <can1_ams_cell_temperatures_t3s7_decode+0x48>)
 800d44c:	f7f2 ff0e 	bl	800026c <__aeabi_dsub>
 800d450:	4602      	mov	r2, r0
 800d452:	460b      	mov	r3, r1
 800d454:	ec43 2b17 	vmov	d7, r2, r3
}
 800d458:	eeb0 0a47 	vmov.f32	s0, s14
 800d45c:	eef0 0a67 	vmov.f32	s1, s15
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	40240000 	.word	0x40240000
 800d46c:	757928e1 	.word	0x757928e1
 800d470:	3fa9018e 	.word	0x3fa9018e
 800d474:	00000000 	.word	0x00000000

0800d478 <can1_ams_cell_temperatures_t3s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s8_encode(double value)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <can1_ams_cell_temperatures_t3s8_encode+0x50>)
 800d488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d48c:	f7f2 fef0 	bl	8000270 <__adddf3>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4610      	mov	r0, r2
 800d496:	4619      	mov	r1, r3
 800d498:	a309      	add	r3, pc, #36	; (adr r3, 800d4c0 <can1_ams_cell_temperatures_t3s8_encode+0x48>)
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	f7f3 f9c7 	bl	8000830 <__aeabi_ddiv>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7f3 fb47 	bl	8000b3c <__aeabi_d2iz>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b21b      	sxth	r3, r3
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	757928e1 	.word	0x757928e1
 800d4c4:	3fa9018e 	.word	0x3fa9018e
 800d4c8:	40240000 	.word	0x40240000
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <can1_ams_cell_temperatures_t3s8_decode>:

double can1_ams_cell_temperatures_t3s8_decode(int16_t value)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d4da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f3 f812 	bl	8000508 <__aeabi_i2d>
 800d4e4:	a30d      	add	r3, pc, #52	; (adr r3, 800d51c <can1_ams_cell_temperatures_t3s8_decode+0x4c>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f3 f877 	bl	80005dc <__aeabi_dmul>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f04f 0200 	mov.w	r2, #0
 800d4fa:	4b07      	ldr	r3, [pc, #28]	; (800d518 <can1_ams_cell_temperatures_t3s8_decode+0x48>)
 800d4fc:	f7f2 feb6 	bl	800026c <__aeabi_dsub>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	ec43 2b17 	vmov	d7, r2, r3
}
 800d508:	eeb0 0a47 	vmov.f32	s0, s14
 800d50c:	eef0 0a67 	vmov.f32	s1, s15
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	40240000 	.word	0x40240000
 800d51c:	757928e1 	.word	0x757928e1
 800d520:	3fa9018e 	.word	0x3fa9018e
 800d524:	00000000 	.word	0x00000000

0800d528 <can1_ams_cell_temperatures_t3s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s9_encode(double value)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <can1_ams_cell_temperatures_t3s9_encode+0x50>)
 800d538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d53c:	f7f2 fe98 	bl	8000270 <__adddf3>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4610      	mov	r0, r2
 800d546:	4619      	mov	r1, r3
 800d548:	a309      	add	r3, pc, #36	; (adr r3, 800d570 <can1_ams_cell_temperatures_t3s9_encode+0x48>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f3 f96f 	bl	8000830 <__aeabi_ddiv>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4610      	mov	r0, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	f7f3 faef 	bl	8000b3c <__aeabi_d2iz>
 800d55e:	4603      	mov	r3, r0
 800d560:	b21b      	sxth	r3, r3
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	f3af 8000 	nop.w
 800d570:	757928e1 	.word	0x757928e1
 800d574:	3fa9018e 	.word	0x3fa9018e
 800d578:	40240000 	.word	0x40240000
 800d57c:	00000000 	.word	0x00000000

0800d580 <can1_ams_cell_temperatures_t3s9_decode>:

double can1_ams_cell_temperatures_t3s9_decode(int16_t value)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f2 ffba 	bl	8000508 <__aeabi_i2d>
 800d594:	a30d      	add	r3, pc, #52	; (adr r3, 800d5cc <can1_ams_cell_temperatures_t3s9_decode+0x4c>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 f81f 	bl	80005dc <__aeabi_dmul>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <can1_ams_cell_temperatures_t3s9_decode+0x48>)
 800d5ac:	f7f2 fe5e 	bl	800026c <__aeabi_dsub>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d5b8:	eeb0 0a47 	vmov.f32	s0, s14
 800d5bc:	eef0 0a67 	vmov.f32	s1, s15
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	40240000 	.word	0x40240000
 800d5cc:	757928e1 	.word	0x757928e1
 800d5d0:	3fa9018e 	.word	0x3fa9018e
 800d5d4:	00000000 	.word	0x00000000

0800d5d8 <can1_ams_cell_temperatures_t3s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s10_encode(double value)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	4b10      	ldr	r3, [pc, #64]	; (800d628 <can1_ams_cell_temperatures_t3s10_encode+0x50>)
 800d5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5ec:	f7f2 fe40 	bl	8000270 <__adddf3>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	a309      	add	r3, pc, #36	; (adr r3, 800d620 <can1_ams_cell_temperatures_t3s10_encode+0x48>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f3 f917 	bl	8000830 <__aeabi_ddiv>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4610      	mov	r0, r2
 800d608:	4619      	mov	r1, r3
 800d60a:	f7f3 fa97 	bl	8000b3c <__aeabi_d2iz>
 800d60e:	4603      	mov	r3, r0
 800d610:	b21b      	sxth	r3, r3
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w
 800d620:	757928e1 	.word	0x757928e1
 800d624:	3fa9018e 	.word	0x3fa9018e
 800d628:	40240000 	.word	0x40240000
 800d62c:	00000000 	.word	0x00000000

0800d630 <can1_ams_cell_temperatures_t3s10_decode>:

double can1_ams_cell_temperatures_t3s10_decode(int16_t value)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d63a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f2 ff62 	bl	8000508 <__aeabi_i2d>
 800d644:	a30d      	add	r3, pc, #52	; (adr r3, 800d67c <can1_ams_cell_temperatures_t3s10_decode+0x4c>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 ffc7 	bl	80005dc <__aeabi_dmul>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	4b07      	ldr	r3, [pc, #28]	; (800d678 <can1_ams_cell_temperatures_t3s10_decode+0x48>)
 800d65c:	f7f2 fe06 	bl	800026c <__aeabi_dsub>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	ec43 2b17 	vmov	d7, r2, r3
}
 800d668:	eeb0 0a47 	vmov.f32	s0, s14
 800d66c:	eef0 0a67 	vmov.f32	s1, s15
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40240000 	.word	0x40240000
 800d67c:	757928e1 	.word	0x757928e1
 800d680:	3fa9018e 	.word	0x3fa9018e
 800d684:	00000000 	.word	0x00000000

0800d688 <can1_ams_cell_temperatures_t3s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s11_encode(double value)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <can1_ams_cell_temperatures_t3s11_encode+0x50>)
 800d698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d69c:	f7f2 fde8 	bl	8000270 <__adddf3>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	a309      	add	r3, pc, #36	; (adr r3, 800d6d0 <can1_ams_cell_temperatures_t3s11_encode+0x48>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f3 f8bf 	bl	8000830 <__aeabi_ddiv>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f7f3 fa3f 	bl	8000b3c <__aeabi_d2iz>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	b21b      	sxth	r3, r3
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	757928e1 	.word	0x757928e1
 800d6d4:	3fa9018e 	.word	0x3fa9018e
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <can1_ams_cell_temperatures_t3s11_decode>:

double can1_ams_cell_temperatures_t3s11_decode(int16_t value)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d6ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f2 ff0a 	bl	8000508 <__aeabi_i2d>
 800d6f4:	a30d      	add	r3, pc, #52	; (adr r3, 800d72c <can1_ams_cell_temperatures_t3s11_decode+0x4c>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 ff6f 	bl	80005dc <__aeabi_dmul>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4610      	mov	r0, r2
 800d704:	4619      	mov	r1, r3
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <can1_ams_cell_temperatures_t3s11_decode+0x48>)
 800d70c:	f7f2 fdae 	bl	800026c <__aeabi_dsub>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	ec43 2b17 	vmov	d7, r2, r3
}
 800d718:	eeb0 0a47 	vmov.f32	s0, s14
 800d71c:	eef0 0a67 	vmov.f32	s1, s15
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40240000 	.word	0x40240000
 800d72c:	757928e1 	.word	0x757928e1
 800d730:	3fa9018e 	.word	0x3fa9018e
 800d734:	00000000 	.word	0x00000000

0800d738 <can1_ams_cell_temperatures_t3s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s12_encode(double value)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <can1_ams_cell_temperatures_t3s12_encode+0x50>)
 800d748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d74c:	f7f2 fd90 	bl	8000270 <__adddf3>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4610      	mov	r0, r2
 800d756:	4619      	mov	r1, r3
 800d758:	a309      	add	r3, pc, #36	; (adr r3, 800d780 <can1_ams_cell_temperatures_t3s12_encode+0x48>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f3 f867 	bl	8000830 <__aeabi_ddiv>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	f7f3 f9e7 	bl	8000b3c <__aeabi_d2iz>
 800d76e:	4603      	mov	r3, r0
 800d770:	b21b      	sxth	r3, r3
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w
 800d780:	757928e1 	.word	0x757928e1
 800d784:	3fa9018e 	.word	0x3fa9018e
 800d788:	40240000 	.word	0x40240000
 800d78c:	00000000 	.word	0x00000000

0800d790 <can1_ams_cell_temperatures_t3s12_decode>:

double can1_ams_cell_temperatures_t3s12_decode(int16_t value)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d79a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f2 feb2 	bl	8000508 <__aeabi_i2d>
 800d7a4:	a30d      	add	r3, pc, #52	; (adr r3, 800d7dc <can1_ams_cell_temperatures_t3s12_decode+0x4c>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 ff17 	bl	80005dc <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <can1_ams_cell_temperatures_t3s12_decode+0x48>)
 800d7bc:	f7f2 fd56 	bl	800026c <__aeabi_dsub>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d7c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7cc:	eef0 0a67 	vmov.f32	s1, s15
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	757928e1 	.word	0x757928e1
 800d7e0:	3fa9018e 	.word	0x3fa9018e
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <can1_ams_cell_temperatures_t4s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s1_encode(double value)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	4b10      	ldr	r3, [pc, #64]	; (800d838 <can1_ams_cell_temperatures_t4s1_encode+0x50>)
 800d7f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7fc:	f7f2 fd38 	bl	8000270 <__adddf3>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4610      	mov	r0, r2
 800d806:	4619      	mov	r1, r3
 800d808:	a309      	add	r3, pc, #36	; (adr r3, 800d830 <can1_ams_cell_temperatures_t4s1_encode+0x48>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f3 f80f 	bl	8000830 <__aeabi_ddiv>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4610      	mov	r0, r2
 800d818:	4619      	mov	r1, r3
 800d81a:	f7f3 f98f 	bl	8000b3c <__aeabi_d2iz>
 800d81e:	4603      	mov	r3, r0
 800d820:	b21b      	sxth	r3, r3
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w
 800d830:	757928e1 	.word	0x757928e1
 800d834:	3fa9018e 	.word	0x3fa9018e
 800d838:	40240000 	.word	0x40240000
 800d83c:	00000000 	.word	0x00000000

0800d840 <can1_ams_cell_temperatures_t4s1_decode>:

double can1_ams_cell_temperatures_t4s1_decode(int16_t value)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d84a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f2 fe5a 	bl	8000508 <__aeabi_i2d>
 800d854:	a30d      	add	r3, pc, #52	; (adr r3, 800d88c <can1_ams_cell_temperatures_t4s1_decode+0x4c>)
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f7f2 febf 	bl	80005dc <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0200 	mov.w	r2, #0
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <can1_ams_cell_temperatures_t4s1_decode+0x48>)
 800d86c:	f7f2 fcfe 	bl	800026c <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	ec43 2b17 	vmov	d7, r2, r3
}
 800d878:	eeb0 0a47 	vmov.f32	s0, s14
 800d87c:	eef0 0a67 	vmov.f32	s1, s15
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	40240000 	.word	0x40240000
 800d88c:	757928e1 	.word	0x757928e1
 800d890:	3fa9018e 	.word	0x3fa9018e
 800d894:	00000000 	.word	0x00000000

0800d898 <can1_ams_cell_temperatures_t4s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s2_encode(double value)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <can1_ams_cell_temperatures_t4s2_encode+0x50>)
 800d8a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ac:	f7f2 fce0 	bl	8000270 <__adddf3>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	a309      	add	r3, pc, #36	; (adr r3, 800d8e0 <can1_ams_cell_temperatures_t4s2_encode+0x48>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 ffb7 	bl	8000830 <__aeabi_ddiv>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7f3 f937 	bl	8000b3c <__aeabi_d2iz>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	b21b      	sxth	r3, r3
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	757928e1 	.word	0x757928e1
 800d8e4:	3fa9018e 	.word	0x3fa9018e
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <can1_ams_cell_temperatures_t4s2_decode>:

double can1_ams_cell_temperatures_t4s2_decode(int16_t value)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f2 fe02 	bl	8000508 <__aeabi_i2d>
 800d904:	a30d      	add	r3, pc, #52	; (adr r3, 800d93c <can1_ams_cell_temperatures_t4s2_decode+0x4c>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fe67 	bl	80005dc <__aeabi_dmul>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <can1_ams_cell_temperatures_t4s2_decode+0x48>)
 800d91c:	f7f2 fca6 	bl	800026c <__aeabi_dsub>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	ec43 2b17 	vmov	d7, r2, r3
}
 800d928:	eeb0 0a47 	vmov.f32	s0, s14
 800d92c:	eef0 0a67 	vmov.f32	s1, s15
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	40240000 	.word	0x40240000
 800d93c:	757928e1 	.word	0x757928e1
 800d940:	3fa9018e 	.word	0x3fa9018e
 800d944:	00000000 	.word	0x00000000

0800d948 <can1_ams_cell_temperatures_t4s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s3_encode(double value)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <can1_ams_cell_temperatures_t4s3_encode+0x50>)
 800d958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d95c:	f7f2 fc88 	bl	8000270 <__adddf3>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	a309      	add	r3, pc, #36	; (adr r3, 800d990 <can1_ams_cell_temperatures_t4s3_encode+0x48>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 ff5f 	bl	8000830 <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4610      	mov	r0, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	f7f3 f8df 	bl	8000b3c <__aeabi_d2iz>
 800d97e:	4603      	mov	r3, r0
 800d980:	b21b      	sxth	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	757928e1 	.word	0x757928e1
 800d994:	3fa9018e 	.word	0x3fa9018e
 800d998:	40240000 	.word	0x40240000
 800d99c:	00000000 	.word	0x00000000

0800d9a0 <can1_ams_cell_temperatures_t4s3_decode>:

double can1_ams_cell_temperatures_t4s3_decode(int16_t value)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d9aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f2 fdaa 	bl	8000508 <__aeabi_i2d>
 800d9b4:	a30d      	add	r3, pc, #52	; (adr r3, 800d9ec <can1_ams_cell_temperatures_t4s3_decode+0x4c>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fe0f 	bl	80005dc <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <can1_ams_cell_temperatures_t4s3_decode+0x48>)
 800d9cc:	f7f2 fc4e 	bl	800026c <__aeabi_dsub>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d9d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d9dc:	eef0 0a67 	vmov.f32	s1, s15
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	40240000 	.word	0x40240000
 800d9ec:	757928e1 	.word	0x757928e1
 800d9f0:	3fa9018e 	.word	0x3fa9018e
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <can1_ams_cell_temperatures_t4s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s4_encode(double value)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <can1_ams_cell_temperatures_t4s4_encode+0x50>)
 800da08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da0c:	f7f2 fc30 	bl	8000270 <__adddf3>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4610      	mov	r0, r2
 800da16:	4619      	mov	r1, r3
 800da18:	a309      	add	r3, pc, #36	; (adr r3, 800da40 <can1_ams_cell_temperatures_t4s4_encode+0x48>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 ff07 	bl	8000830 <__aeabi_ddiv>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4610      	mov	r0, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	f7f3 f887 	bl	8000b3c <__aeabi_d2iz>
 800da2e:	4603      	mov	r3, r0
 800da30:	b21b      	sxth	r3, r3
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	f3af 8000 	nop.w
 800da40:	757928e1 	.word	0x757928e1
 800da44:	3fa9018e 	.word	0x3fa9018e
 800da48:	40240000 	.word	0x40240000
 800da4c:	00000000 	.word	0x00000000

0800da50 <can1_ams_cell_temperatures_t4s4_decode>:

double can1_ams_cell_temperatures_t4s4_decode(int16_t value)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800da5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fd52 	bl	8000508 <__aeabi_i2d>
 800da64:	a30d      	add	r3, pc, #52	; (adr r3, 800da9c <can1_ams_cell_temperatures_t4s4_decode+0x4c>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	f7f2 fdb7 	bl	80005dc <__aeabi_dmul>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4610      	mov	r0, r2
 800da74:	4619      	mov	r1, r3
 800da76:	f04f 0200 	mov.w	r2, #0
 800da7a:	4b07      	ldr	r3, [pc, #28]	; (800da98 <can1_ams_cell_temperatures_t4s4_decode+0x48>)
 800da7c:	f7f2 fbf6 	bl	800026c <__aeabi_dsub>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	ec43 2b17 	vmov	d7, r2, r3
}
 800da88:	eeb0 0a47 	vmov.f32	s0, s14
 800da8c:	eef0 0a67 	vmov.f32	s1, s15
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	40240000 	.word	0x40240000
 800da9c:	757928e1 	.word	0x757928e1
 800daa0:	3fa9018e 	.word	0x3fa9018e
 800daa4:	00000000 	.word	0x00000000

0800daa8 <can1_ams_cell_temperatures_t4s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s5_encode(double value)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <can1_ams_cell_temperatures_t4s5_encode+0x50>)
 800dab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dabc:	f7f2 fbd8 	bl	8000270 <__adddf3>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4610      	mov	r0, r2
 800dac6:	4619      	mov	r1, r3
 800dac8:	a309      	add	r3, pc, #36	; (adr r3, 800daf0 <can1_ams_cell_temperatures_t4s5_encode+0x48>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 feaf 	bl	8000830 <__aeabi_ddiv>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4610      	mov	r0, r2
 800dad8:	4619      	mov	r1, r3
 800dada:	f7f3 f82f 	bl	8000b3c <__aeabi_d2iz>
 800dade:	4603      	mov	r3, r0
 800dae0:	b21b      	sxth	r3, r3
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	757928e1 	.word	0x757928e1
 800daf4:	3fa9018e 	.word	0x3fa9018e
 800daf8:	40240000 	.word	0x40240000
 800dafc:	00000000 	.word	0x00000000

0800db00 <can1_ams_cell_temperatures_t4s5_decode>:

double can1_ams_cell_temperatures_t4s5_decode(int16_t value)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	4603      	mov	r3, r0
 800db08:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800db0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f2 fcfa 	bl	8000508 <__aeabi_i2d>
 800db14:	a30d      	add	r3, pc, #52	; (adr r3, 800db4c <can1_ams_cell_temperatures_t4s5_decode+0x4c>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fd5f 	bl	80005dc <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4610      	mov	r0, r2
 800db24:	4619      	mov	r1, r3
 800db26:	f04f 0200 	mov.w	r2, #0
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <can1_ams_cell_temperatures_t4s5_decode+0x48>)
 800db2c:	f7f2 fb9e 	bl	800026c <__aeabi_dsub>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	ec43 2b17 	vmov	d7, r2, r3
}
 800db38:	eeb0 0a47 	vmov.f32	s0, s14
 800db3c:	eef0 0a67 	vmov.f32	s1, s15
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	40240000 	.word	0x40240000
 800db4c:	757928e1 	.word	0x757928e1
 800db50:	3fa9018e 	.word	0x3fa9018e
 800db54:	00000000 	.word	0x00000000

0800db58 <can1_ams_cell_temperatures_t4s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s6_encode(double value)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800db62:	f04f 0200 	mov.w	r2, #0
 800db66:	4b10      	ldr	r3, [pc, #64]	; (800dba8 <can1_ams_cell_temperatures_t4s6_encode+0x50>)
 800db68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db6c:	f7f2 fb80 	bl	8000270 <__adddf3>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4610      	mov	r0, r2
 800db76:	4619      	mov	r1, r3
 800db78:	a309      	add	r3, pc, #36	; (adr r3, 800dba0 <can1_ams_cell_temperatures_t4s6_encode+0x48>)
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f7f2 fe57 	bl	8000830 <__aeabi_ddiv>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4610      	mov	r0, r2
 800db88:	4619      	mov	r1, r3
 800db8a:	f7f2 ffd7 	bl	8000b3c <__aeabi_d2iz>
 800db8e:	4603      	mov	r3, r0
 800db90:	b21b      	sxth	r3, r3
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w
 800dba0:	757928e1 	.word	0x757928e1
 800dba4:	3fa9018e 	.word	0x3fa9018e
 800dba8:	40240000 	.word	0x40240000
 800dbac:	00000000 	.word	0x00000000

0800dbb0 <can1_ams_cell_temperatures_t4s6_decode>:

double can1_ams_cell_temperatures_t4s6_decode(int16_t value)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dbba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f2 fca2 	bl	8000508 <__aeabi_i2d>
 800dbc4:	a30d      	add	r3, pc, #52	; (adr r3, 800dbfc <can1_ams_cell_temperatures_t4s6_decode+0x4c>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fd07 	bl	80005dc <__aeabi_dmul>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f04f 0200 	mov.w	r2, #0
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <can1_ams_cell_temperatures_t4s6_decode+0x48>)
 800dbdc:	f7f2 fb46 	bl	800026c <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dbe8:	eeb0 0a47 	vmov.f32	s0, s14
 800dbec:	eef0 0a67 	vmov.f32	s1, s15
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	40240000 	.word	0x40240000
 800dbfc:	757928e1 	.word	0x757928e1
 800dc00:	3fa9018e 	.word	0x3fa9018e
 800dc04:	00000000 	.word	0x00000000

0800dc08 <can1_ams_cell_temperatures_t4s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s7_encode(double value)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <can1_ams_cell_temperatures_t4s7_encode+0x50>)
 800dc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc1c:	f7f2 fb28 	bl	8000270 <__adddf3>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4610      	mov	r0, r2
 800dc26:	4619      	mov	r1, r3
 800dc28:	a309      	add	r3, pc, #36	; (adr r3, 800dc50 <can1_ams_cell_temperatures_t4s7_encode+0x48>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fdff 	bl	8000830 <__aeabi_ddiv>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4610      	mov	r0, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7f2 ff7f 	bl	8000b3c <__aeabi_d2iz>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	b21b      	sxth	r3, r3
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w
 800dc50:	757928e1 	.word	0x757928e1
 800dc54:	3fa9018e 	.word	0x3fa9018e
 800dc58:	40240000 	.word	0x40240000
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <can1_ams_cell_temperatures_t4s7_decode>:

double can1_ams_cell_temperatures_t4s7_decode(int16_t value)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dc6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f2 fc4a 	bl	8000508 <__aeabi_i2d>
 800dc74:	a30d      	add	r3, pc, #52	; (adr r3, 800dcac <can1_ams_cell_temperatures_t4s7_decode+0x4c>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fcaf 	bl	80005dc <__aeabi_dmul>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	4610      	mov	r0, r2
 800dc84:	4619      	mov	r1, r3
 800dc86:	f04f 0200 	mov.w	r2, #0
 800dc8a:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <can1_ams_cell_temperatures_t4s7_decode+0x48>)
 800dc8c:	f7f2 faee 	bl	800026c <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	ec43 2b17 	vmov	d7, r2, r3
}
 800dc98:	eeb0 0a47 	vmov.f32	s0, s14
 800dc9c:	eef0 0a67 	vmov.f32	s1, s15
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	40240000 	.word	0x40240000
 800dcac:	757928e1 	.word	0x757928e1
 800dcb0:	3fa9018e 	.word	0x3fa9018e
 800dcb4:	00000000 	.word	0x00000000

0800dcb8 <can1_ams_cell_temperatures_t4s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s8_encode(double value)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <can1_ams_cell_temperatures_t4s8_encode+0x50>)
 800dcc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dccc:	f7f2 fad0 	bl	8000270 <__adddf3>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	a309      	add	r3, pc, #36	; (adr r3, 800dd00 <can1_ams_cell_temperatures_t4s8_encode+0x48>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fda7 	bl	8000830 <__aeabi_ddiv>
 800dce2:	4602      	mov	r2, r0
 800dce4:	460b      	mov	r3, r1
 800dce6:	4610      	mov	r0, r2
 800dce8:	4619      	mov	r1, r3
 800dcea:	f7f2 ff27 	bl	8000b3c <__aeabi_d2iz>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b21b      	sxth	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w
 800dd00:	757928e1 	.word	0x757928e1
 800dd04:	3fa9018e 	.word	0x3fa9018e
 800dd08:	40240000 	.word	0x40240000
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <can1_ams_cell_temperatures_t4s8_decode>:

double can1_ams_cell_temperatures_t4s8_decode(int16_t value)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dd1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fbf2 	bl	8000508 <__aeabi_i2d>
 800dd24:	a30d      	add	r3, pc, #52	; (adr r3, 800dd5c <can1_ams_cell_temperatures_t4s8_decode+0x4c>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fc57 	bl	80005dc <__aeabi_dmul>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4610      	mov	r0, r2
 800dd34:	4619      	mov	r1, r3
 800dd36:	f04f 0200 	mov.w	r2, #0
 800dd3a:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <can1_ams_cell_temperatures_t4s8_decode+0x48>)
 800dd3c:	f7f2 fa96 	bl	800026c <__aeabi_dsub>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	ec43 2b17 	vmov	d7, r2, r3
}
 800dd48:	eeb0 0a47 	vmov.f32	s0, s14
 800dd4c:	eef0 0a67 	vmov.f32	s1, s15
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	40240000 	.word	0x40240000
 800dd5c:	757928e1 	.word	0x757928e1
 800dd60:	3fa9018e 	.word	0x3fa9018e
 800dd64:	00000000 	.word	0x00000000

0800dd68 <can1_ams_cell_temperatures_t4s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s9_encode(double value)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dd72:	f04f 0200 	mov.w	r2, #0
 800dd76:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <can1_ams_cell_temperatures_t4s9_encode+0x50>)
 800dd78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd7c:	f7f2 fa78 	bl	8000270 <__adddf3>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4610      	mov	r0, r2
 800dd86:	4619      	mov	r1, r3
 800dd88:	a309      	add	r3, pc, #36	; (adr r3, 800ddb0 <can1_ams_cell_temperatures_t4s9_encode+0x48>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fd4f 	bl	8000830 <__aeabi_ddiv>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4610      	mov	r0, r2
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7f2 fecf 	bl	8000b3c <__aeabi_d2iz>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	b21b      	sxth	r3, r3
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	757928e1 	.word	0x757928e1
 800ddb4:	3fa9018e 	.word	0x3fa9018e
 800ddb8:	40240000 	.word	0x40240000
 800ddbc:	00000000 	.word	0x00000000

0800ddc0 <can1_ams_cell_temperatures_t4s9_decode>:

double can1_ams_cell_temperatures_t4s9_decode(int16_t value)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ddca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 fb9a 	bl	8000508 <__aeabi_i2d>
 800ddd4:	a30d      	add	r3, pc, #52	; (adr r3, 800de0c <can1_ams_cell_temperatures_t4s9_decode+0x4c>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	f7f2 fbff 	bl	80005dc <__aeabi_dmul>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4610      	mov	r0, r2
 800dde4:	4619      	mov	r1, r3
 800dde6:	f04f 0200 	mov.w	r2, #0
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <can1_ams_cell_temperatures_t4s9_decode+0x48>)
 800ddec:	f7f2 fa3e 	bl	800026c <__aeabi_dsub>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ddf8:	eeb0 0a47 	vmov.f32	s0, s14
 800ddfc:	eef0 0a67 	vmov.f32	s1, s15
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	40240000 	.word	0x40240000
 800de0c:	757928e1 	.word	0x757928e1
 800de10:	3fa9018e 	.word	0x3fa9018e
 800de14:	00000000 	.word	0x00000000

0800de18 <can1_ams_cell_temperatures_t4s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s10_encode(double value)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	4b10      	ldr	r3, [pc, #64]	; (800de68 <can1_ams_cell_temperatures_t4s10_encode+0x50>)
 800de28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de2c:	f7f2 fa20 	bl	8000270 <__adddf3>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4610      	mov	r0, r2
 800de36:	4619      	mov	r1, r3
 800de38:	a309      	add	r3, pc, #36	; (adr r3, 800de60 <can1_ams_cell_temperatures_t4s10_encode+0x48>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fcf7 	bl	8000830 <__aeabi_ddiv>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4610      	mov	r0, r2
 800de48:	4619      	mov	r1, r3
 800de4a:	f7f2 fe77 	bl	8000b3c <__aeabi_d2iz>
 800de4e:	4603      	mov	r3, r0
 800de50:	b21b      	sxth	r3, r3
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	f3af 8000 	nop.w
 800de60:	757928e1 	.word	0x757928e1
 800de64:	3fa9018e 	.word	0x3fa9018e
 800de68:	40240000 	.word	0x40240000
 800de6c:	00000000 	.word	0x00000000

0800de70 <can1_ams_cell_temperatures_t4s10_decode>:

double can1_ams_cell_temperatures_t4s10_decode(int16_t value)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	4603      	mov	r3, r0
 800de78:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800de7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fb42 	bl	8000508 <__aeabi_i2d>
 800de84:	a30d      	add	r3, pc, #52	; (adr r3, 800debc <can1_ams_cell_temperatures_t4s10_decode+0x4c>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	f7f2 fba7 	bl	80005dc <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4610      	mov	r0, r2
 800de94:	4619      	mov	r1, r3
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <can1_ams_cell_temperatures_t4s10_decode+0x48>)
 800de9c:	f7f2 f9e6 	bl	800026c <__aeabi_dsub>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dea8:	eeb0 0a47 	vmov.f32	s0, s14
 800deac:	eef0 0a67 	vmov.f32	s1, s15
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	40240000 	.word	0x40240000
 800debc:	757928e1 	.word	0x757928e1
 800dec0:	3fa9018e 	.word	0x3fa9018e
 800dec4:	00000000 	.word	0x00000000

0800dec8 <can1_ams_cell_temperatures_t4s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s11_encode(double value)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ded2:	f04f 0200 	mov.w	r2, #0
 800ded6:	4b10      	ldr	r3, [pc, #64]	; (800df18 <can1_ams_cell_temperatures_t4s11_encode+0x50>)
 800ded8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dedc:	f7f2 f9c8 	bl	8000270 <__adddf3>
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4610      	mov	r0, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	a309      	add	r3, pc, #36	; (adr r3, 800df10 <can1_ams_cell_temperatures_t4s11_encode+0x48>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fc9f 	bl	8000830 <__aeabi_ddiv>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4610      	mov	r0, r2
 800def8:	4619      	mov	r1, r3
 800defa:	f7f2 fe1f 	bl	8000b3c <__aeabi_d2iz>
 800defe:	4603      	mov	r3, r0
 800df00:	b21b      	sxth	r3, r3
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	757928e1 	.word	0x757928e1
 800df14:	3fa9018e 	.word	0x3fa9018e
 800df18:	40240000 	.word	0x40240000
 800df1c:	00000000 	.word	0x00000000

0800df20 <can1_ams_cell_temperatures_t4s11_decode>:

double can1_ams_cell_temperatures_t4s11_decode(int16_t value)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	4603      	mov	r3, r0
 800df28:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800df2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f2 faea 	bl	8000508 <__aeabi_i2d>
 800df34:	a30d      	add	r3, pc, #52	; (adr r3, 800df6c <can1_ams_cell_temperatures_t4s11_decode+0x4c>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f7f2 fb4f 	bl	80005dc <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4610      	mov	r0, r2
 800df44:	4619      	mov	r1, r3
 800df46:	f04f 0200 	mov.w	r2, #0
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <can1_ams_cell_temperatures_t4s11_decode+0x48>)
 800df4c:	f7f2 f98e 	bl	800026c <__aeabi_dsub>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	ec43 2b17 	vmov	d7, r2, r3
}
 800df58:	eeb0 0a47 	vmov.f32	s0, s14
 800df5c:	eef0 0a67 	vmov.f32	s1, s15
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40240000 	.word	0x40240000
 800df6c:	757928e1 	.word	0x757928e1
 800df70:	3fa9018e 	.word	0x3fa9018e
 800df74:	00000000 	.word	0x00000000

0800df78 <can1_ams_cell_temperatures_t4s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s12_encode(double value)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <can1_ams_cell_temperatures_t4s12_encode+0x50>)
 800df88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df8c:	f7f2 f970 	bl	8000270 <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4610      	mov	r0, r2
 800df96:	4619      	mov	r1, r3
 800df98:	a309      	add	r3, pc, #36	; (adr r3, 800dfc0 <can1_ams_cell_temperatures_t4s12_encode+0x48>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 fc47 	bl	8000830 <__aeabi_ddiv>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f7f2 fdc7 	bl	8000b3c <__aeabi_d2iz>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	b21b      	sxth	r3, r3
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	757928e1 	.word	0x757928e1
 800dfc4:	3fa9018e 	.word	0x3fa9018e
 800dfc8:	40240000 	.word	0x40240000
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <can1_ams_cell_temperatures_t4s12_decode>:

double can1_ams_cell_temperatures_t4s12_decode(int16_t value)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dfda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f2 fa92 	bl	8000508 <__aeabi_i2d>
 800dfe4:	a30d      	add	r3, pc, #52	; (adr r3, 800e01c <can1_ams_cell_temperatures_t4s12_decode+0x4c>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 faf7 	bl	80005dc <__aeabi_dmul>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4610      	mov	r0, r2
 800dff4:	4619      	mov	r1, r3
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	4b07      	ldr	r3, [pc, #28]	; (800e018 <can1_ams_cell_temperatures_t4s12_decode+0x48>)
 800dffc:	f7f2 f936 	bl	800026c <__aeabi_dsub>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	ec43 2b17 	vmov	d7, r2, r3
}
 800e008:	eeb0 0a47 	vmov.f32	s0, s14
 800e00c:	eef0 0a67 	vmov.f32	s1, s15
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40240000 	.word	0x40240000
 800e01c:	757928e1 	.word	0x757928e1
 800e020:	3fa9018e 	.word	0x3fa9018e
 800e024:	00000000 	.word	0x00000000

0800e028 <can1_ams_cell_temperatures_t5s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s1_encode(double value)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e032:	f04f 0200 	mov.w	r2, #0
 800e036:	4b10      	ldr	r3, [pc, #64]	; (800e078 <can1_ams_cell_temperatures_t5s1_encode+0x50>)
 800e038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e03c:	f7f2 f918 	bl	8000270 <__adddf3>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4610      	mov	r0, r2
 800e046:	4619      	mov	r1, r3
 800e048:	a309      	add	r3, pc, #36	; (adr r3, 800e070 <can1_ams_cell_temperatures_t5s1_encode+0x48>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 fbef 	bl	8000830 <__aeabi_ddiv>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fd6f 	bl	8000b3c <__aeabi_d2iz>
 800e05e:	4603      	mov	r3, r0
 800e060:	b21b      	sxth	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w
 800e070:	757928e1 	.word	0x757928e1
 800e074:	3fa9018e 	.word	0x3fa9018e
 800e078:	40240000 	.word	0x40240000
 800e07c:	00000000 	.word	0x00000000

0800e080 <can1_ams_cell_temperatures_t5s1_decode>:

double can1_ams_cell_temperatures_t5s1_decode(int16_t value)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7f2 fa3a 	bl	8000508 <__aeabi_i2d>
 800e094:	a30d      	add	r3, pc, #52	; (adr r3, 800e0cc <can1_ams_cell_temperatures_t5s1_decode+0x4c>)
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	f7f2 fa9f 	bl	80005dc <__aeabi_dmul>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <can1_ams_cell_temperatures_t5s1_decode+0x48>)
 800e0ac:	f7f2 f8de 	bl	800026c <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e0b8:	eeb0 0a47 	vmov.f32	s0, s14
 800e0bc:	eef0 0a67 	vmov.f32	s1, s15
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	757928e1 	.word	0x757928e1
 800e0d0:	3fa9018e 	.word	0x3fa9018e
 800e0d4:	00000000 	.word	0x00000000

0800e0d8 <can1_ams_cell_temperatures_t5s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s2_encode(double value)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e0e2:	f04f 0200 	mov.w	r2, #0
 800e0e6:	4b10      	ldr	r3, [pc, #64]	; (800e128 <can1_ams_cell_temperatures_t5s2_encode+0x50>)
 800e0e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e0ec:	f7f2 f8c0 	bl	8000270 <__adddf3>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	a309      	add	r3, pc, #36	; (adr r3, 800e120 <can1_ams_cell_temperatures_t5s2_encode+0x48>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 fb97 	bl	8000830 <__aeabi_ddiv>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4610      	mov	r0, r2
 800e108:	4619      	mov	r1, r3
 800e10a:	f7f2 fd17 	bl	8000b3c <__aeabi_d2iz>
 800e10e:	4603      	mov	r3, r0
 800e110:	b21b      	sxth	r3, r3
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	757928e1 	.word	0x757928e1
 800e124:	3fa9018e 	.word	0x3fa9018e
 800e128:	40240000 	.word	0x40240000
 800e12c:	00000000 	.word	0x00000000

0800e130 <can1_ams_cell_temperatures_t5s2_decode>:

double can1_ams_cell_temperatures_t5s2_decode(int16_t value)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e13a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f2 f9e2 	bl	8000508 <__aeabi_i2d>
 800e144:	a30d      	add	r3, pc, #52	; (adr r3, 800e17c <can1_ams_cell_temperatures_t5s2_decode+0x4c>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f7f2 fa47 	bl	80005dc <__aeabi_dmul>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4610      	mov	r0, r2
 800e154:	4619      	mov	r1, r3
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <can1_ams_cell_temperatures_t5s2_decode+0x48>)
 800e15c:	f7f2 f886 	bl	800026c <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	ec43 2b17 	vmov	d7, r2, r3
}
 800e168:	eeb0 0a47 	vmov.f32	s0, s14
 800e16c:	eef0 0a67 	vmov.f32	s1, s15
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	40240000 	.word	0x40240000
 800e17c:	757928e1 	.word	0x757928e1
 800e180:	3fa9018e 	.word	0x3fa9018e
 800e184:	00000000 	.word	0x00000000

0800e188 <can1_ams_cell_temperatures_t5s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s3_encode(double value)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <can1_ams_cell_temperatures_t5s3_encode+0x50>)
 800e198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e19c:	f7f2 f868 	bl	8000270 <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	a309      	add	r3, pc, #36	; (adr r3, 800e1d0 <can1_ams_cell_temperatures_t5s3_encode+0x48>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 fb3f 	bl	8000830 <__aeabi_ddiv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7f2 fcbf 	bl	8000b3c <__aeabi_d2iz>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b21b      	sxth	r3, r3
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	757928e1 	.word	0x757928e1
 800e1d4:	3fa9018e 	.word	0x3fa9018e
 800e1d8:	40240000 	.word	0x40240000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <can1_ams_cell_temperatures_t5s3_decode>:

double can1_ams_cell_temperatures_t5s3_decode(int16_t value)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f2 f98a 	bl	8000508 <__aeabi_i2d>
 800e1f4:	a30d      	add	r3, pc, #52	; (adr r3, 800e22c <can1_ams_cell_temperatures_t5s3_decode+0x4c>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f9ef 	bl	80005dc <__aeabi_dmul>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4610      	mov	r0, r2
 800e204:	4619      	mov	r1, r3
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	4b07      	ldr	r3, [pc, #28]	; (800e228 <can1_ams_cell_temperatures_t5s3_decode+0x48>)
 800e20c:	f7f2 f82e 	bl	800026c <__aeabi_dsub>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	ec43 2b17 	vmov	d7, r2, r3
}
 800e218:	eeb0 0a47 	vmov.f32	s0, s14
 800e21c:	eef0 0a67 	vmov.f32	s1, s15
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	40240000 	.word	0x40240000
 800e22c:	757928e1 	.word	0x757928e1
 800e230:	3fa9018e 	.word	0x3fa9018e
 800e234:	00000000 	.word	0x00000000

0800e238 <can1_ams_cell_temperatures_t5s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s4_encode(double value)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e242:	f04f 0200 	mov.w	r2, #0
 800e246:	4b10      	ldr	r3, [pc, #64]	; (800e288 <can1_ams_cell_temperatures_t5s4_encode+0x50>)
 800e248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e24c:	f7f2 f810 	bl	8000270 <__adddf3>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4610      	mov	r0, r2
 800e256:	4619      	mov	r1, r3
 800e258:	a309      	add	r3, pc, #36	; (adr r3, 800e280 <can1_ams_cell_temperatures_t5s4_encode+0x48>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 fae7 	bl	8000830 <__aeabi_ddiv>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	f7f2 fc67 	bl	8000b3c <__aeabi_d2iz>
 800e26e:	4603      	mov	r3, r0
 800e270:	b21b      	sxth	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	757928e1 	.word	0x757928e1
 800e284:	3fa9018e 	.word	0x3fa9018e
 800e288:	40240000 	.word	0x40240000
 800e28c:	00000000 	.word	0x00000000

0800e290 <can1_ams_cell_temperatures_t5s4_decode>:

double can1_ams_cell_temperatures_t5s4_decode(int16_t value)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e29a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f2 f932 	bl	8000508 <__aeabi_i2d>
 800e2a4:	a30d      	add	r3, pc, #52	; (adr r3, 800e2dc <can1_ams_cell_temperatures_t5s4_decode+0x4c>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f2 f997 	bl	80005dc <__aeabi_dmul>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f04f 0200 	mov.w	r2, #0
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <can1_ams_cell_temperatures_t5s4_decode+0x48>)
 800e2bc:	f7f1 ffd6 	bl	800026c <__aeabi_dsub>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e2c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e2cc:	eef0 0a67 	vmov.f32	s1, s15
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	40240000 	.word	0x40240000
 800e2dc:	757928e1 	.word	0x757928e1
 800e2e0:	3fa9018e 	.word	0x3fa9018e
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <can1_ams_cell_temperatures_t5s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s5_encode(double value)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	4b10      	ldr	r3, [pc, #64]	; (800e338 <can1_ams_cell_temperatures_t5s5_encode+0x50>)
 800e2f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2fc:	f7f1 ffb8 	bl	8000270 <__adddf3>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4610      	mov	r0, r2
 800e306:	4619      	mov	r1, r3
 800e308:	a309      	add	r3, pc, #36	; (adr r3, 800e330 <can1_ams_cell_temperatures_t5s5_encode+0x48>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f7f2 fa8f 	bl	8000830 <__aeabi_ddiv>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4610      	mov	r0, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	f7f2 fc0f 	bl	8000b3c <__aeabi_d2iz>
 800e31e:	4603      	mov	r3, r0
 800e320:	b21b      	sxth	r3, r3
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	757928e1 	.word	0x757928e1
 800e334:	3fa9018e 	.word	0x3fa9018e
 800e338:	40240000 	.word	0x40240000
 800e33c:	00000000 	.word	0x00000000

0800e340 <can1_ams_cell_temperatures_t5s5_decode>:

double can1_ams_cell_temperatures_t5s5_decode(int16_t value)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e34a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f2 f8da 	bl	8000508 <__aeabi_i2d>
 800e354:	a30d      	add	r3, pc, #52	; (adr r3, 800e38c <can1_ams_cell_temperatures_t5s5_decode+0x4c>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f2 f93f 	bl	80005dc <__aeabi_dmul>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4610      	mov	r0, r2
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	4b07      	ldr	r3, [pc, #28]	; (800e388 <can1_ams_cell_temperatures_t5s5_decode+0x48>)
 800e36c:	f7f1 ff7e 	bl	800026c <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	ec43 2b17 	vmov	d7, r2, r3
}
 800e378:	eeb0 0a47 	vmov.f32	s0, s14
 800e37c:	eef0 0a67 	vmov.f32	s1, s15
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	40240000 	.word	0x40240000
 800e38c:	757928e1 	.word	0x757928e1
 800e390:	3fa9018e 	.word	0x3fa9018e
 800e394:	00000000 	.word	0x00000000

0800e398 <can1_ams_cell_temperatures_t5s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s6_encode(double value)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e3a2:	f04f 0200 	mov.w	r2, #0
 800e3a6:	4b10      	ldr	r3, [pc, #64]	; (800e3e8 <can1_ams_cell_temperatures_t5s6_encode+0x50>)
 800e3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ac:	f7f1 ff60 	bl	8000270 <__adddf3>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	a309      	add	r3, pc, #36	; (adr r3, 800e3e0 <can1_ams_cell_temperatures_t5s6_encode+0x48>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	f7f2 fa37 	bl	8000830 <__aeabi_ddiv>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7f2 fbb7 	bl	8000b3c <__aeabi_d2iz>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b21b      	sxth	r3, r3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	757928e1 	.word	0x757928e1
 800e3e4:	3fa9018e 	.word	0x3fa9018e
 800e3e8:	40240000 	.word	0x40240000
 800e3ec:	00000000 	.word	0x00000000

0800e3f0 <can1_ams_cell_temperatures_t5s6_decode>:

double can1_ams_cell_temperatures_t5s6_decode(int16_t value)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e3fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f2 f882 	bl	8000508 <__aeabi_i2d>
 800e404:	a30d      	add	r3, pc, #52	; (adr r3, 800e43c <can1_ams_cell_temperatures_t5s6_decode+0x4c>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	f7f2 f8e7 	bl	80005dc <__aeabi_dmul>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4610      	mov	r0, r2
 800e414:	4619      	mov	r1, r3
 800e416:	f04f 0200 	mov.w	r2, #0
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <can1_ams_cell_temperatures_t5s6_decode+0x48>)
 800e41c:	f7f1 ff26 	bl	800026c <__aeabi_dsub>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	ec43 2b17 	vmov	d7, r2, r3
}
 800e428:	eeb0 0a47 	vmov.f32	s0, s14
 800e42c:	eef0 0a67 	vmov.f32	s1, s15
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	40240000 	.word	0x40240000
 800e43c:	757928e1 	.word	0x757928e1
 800e440:	3fa9018e 	.word	0x3fa9018e
 800e444:	00000000 	.word	0x00000000

0800e448 <can1_ams_cell_temperatures_t5s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s7_encode(double value)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	4b10      	ldr	r3, [pc, #64]	; (800e498 <can1_ams_cell_temperatures_t5s7_encode+0x50>)
 800e458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e45c:	f7f1 ff08 	bl	8000270 <__adddf3>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4610      	mov	r0, r2
 800e466:	4619      	mov	r1, r3
 800e468:	a309      	add	r3, pc, #36	; (adr r3, 800e490 <can1_ams_cell_temperatures_t5s7_encode+0x48>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f2 f9df 	bl	8000830 <__aeabi_ddiv>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4610      	mov	r0, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	f7f2 fb5f 	bl	8000b3c <__aeabi_d2iz>
 800e47e:	4603      	mov	r3, r0
 800e480:	b21b      	sxth	r3, r3
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w
 800e490:	757928e1 	.word	0x757928e1
 800e494:	3fa9018e 	.word	0x3fa9018e
 800e498:	40240000 	.word	0x40240000
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <can1_ams_cell_temperatures_t5s7_decode>:

double can1_ams_cell_temperatures_t5s7_decode(int16_t value)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f2 f82a 	bl	8000508 <__aeabi_i2d>
 800e4b4:	a30d      	add	r3, pc, #52	; (adr r3, 800e4ec <can1_ams_cell_temperatures_t5s7_decode+0x4c>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f7f2 f88f 	bl	80005dc <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	f04f 0200 	mov.w	r2, #0
 800e4ca:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <can1_ams_cell_temperatures_t5s7_decode+0x48>)
 800e4cc:	f7f1 fece 	bl	800026c <__aeabi_dsub>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e4d8:	eeb0 0a47 	vmov.f32	s0, s14
 800e4dc:	eef0 0a67 	vmov.f32	s1, s15
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	40240000 	.word	0x40240000
 800e4ec:	757928e1 	.word	0x757928e1
 800e4f0:	3fa9018e 	.word	0x3fa9018e
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <can1_ams_cell_temperatures_t5s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s8_encode(double value)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e502:	f04f 0200 	mov.w	r2, #0
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <can1_ams_cell_temperatures_t5s8_encode+0x50>)
 800e508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e50c:	f7f1 feb0 	bl	8000270 <__adddf3>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4610      	mov	r0, r2
 800e516:	4619      	mov	r1, r3
 800e518:	a309      	add	r3, pc, #36	; (adr r3, 800e540 <can1_ams_cell_temperatures_t5s8_encode+0x48>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f2 f987 	bl	8000830 <__aeabi_ddiv>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	4610      	mov	r0, r2
 800e528:	4619      	mov	r1, r3
 800e52a:	f7f2 fb07 	bl	8000b3c <__aeabi_d2iz>
 800e52e:	4603      	mov	r3, r0
 800e530:	b21b      	sxth	r3, r3
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	757928e1 	.word	0x757928e1
 800e544:	3fa9018e 	.word	0x3fa9018e
 800e548:	40240000 	.word	0x40240000
 800e54c:	00000000 	.word	0x00000000

0800e550 <can1_ams_cell_temperatures_t5s8_decode>:

double can1_ams_cell_temperatures_t5s8_decode(int16_t value)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e55a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f1 ffd2 	bl	8000508 <__aeabi_i2d>
 800e564:	a30d      	add	r3, pc, #52	; (adr r3, 800e59c <can1_ams_cell_temperatures_t5s8_decode+0x4c>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f7f2 f837 	bl	80005dc <__aeabi_dmul>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4610      	mov	r0, r2
 800e574:	4619      	mov	r1, r3
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <can1_ams_cell_temperatures_t5s8_decode+0x48>)
 800e57c:	f7f1 fe76 	bl	800026c <__aeabi_dsub>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	ec43 2b17 	vmov	d7, r2, r3
}
 800e588:	eeb0 0a47 	vmov.f32	s0, s14
 800e58c:	eef0 0a67 	vmov.f32	s1, s15
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	40240000 	.word	0x40240000
 800e59c:	757928e1 	.word	0x757928e1
 800e5a0:	3fa9018e 	.word	0x3fa9018e
 800e5a4:	00000000 	.word	0x00000000

0800e5a8 <can1_ams_cell_temperatures_t5s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s9_encode(double value)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <can1_ams_cell_temperatures_t5s9_encode+0x50>)
 800e5b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5bc:	f7f1 fe58 	bl	8000270 <__adddf3>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	a309      	add	r3, pc, #36	; (adr r3, 800e5f0 <can1_ams_cell_temperatures_t5s9_encode+0x48>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f2 f92f 	bl	8000830 <__aeabi_ddiv>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	4619      	mov	r1, r3
 800e5da:	f7f2 faaf 	bl	8000b3c <__aeabi_d2iz>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	b21b      	sxth	r3, r3
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	757928e1 	.word	0x757928e1
 800e5f4:	3fa9018e 	.word	0x3fa9018e
 800e5f8:	40240000 	.word	0x40240000
 800e5fc:	00000000 	.word	0x00000000

0800e600 <can1_ams_cell_temperatures_t5s9_decode>:

double can1_ams_cell_temperatures_t5s9_decode(int16_t value)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e60a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f1 ff7a 	bl	8000508 <__aeabi_i2d>
 800e614:	a30d      	add	r3, pc, #52	; (adr r3, 800e64c <can1_ams_cell_temperatures_t5s9_decode+0x4c>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f1 ffdf 	bl	80005dc <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4610      	mov	r0, r2
 800e624:	4619      	mov	r1, r3
 800e626:	f04f 0200 	mov.w	r2, #0
 800e62a:	4b07      	ldr	r3, [pc, #28]	; (800e648 <can1_ams_cell_temperatures_t5s9_decode+0x48>)
 800e62c:	f7f1 fe1e 	bl	800026c <__aeabi_dsub>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	ec43 2b17 	vmov	d7, r2, r3
}
 800e638:	eeb0 0a47 	vmov.f32	s0, s14
 800e63c:	eef0 0a67 	vmov.f32	s1, s15
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	40240000 	.word	0x40240000
 800e64c:	757928e1 	.word	0x757928e1
 800e650:	3fa9018e 	.word	0x3fa9018e
 800e654:	00000000 	.word	0x00000000

0800e658 <can1_ams_cell_temperatures_t5s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s10_encode(double value)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e662:	f04f 0200 	mov.w	r2, #0
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <can1_ams_cell_temperatures_t5s10_encode+0x50>)
 800e668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e66c:	f7f1 fe00 	bl	8000270 <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	a309      	add	r3, pc, #36	; (adr r3, 800e6a0 <can1_ams_cell_temperatures_t5s10_encode+0x48>)
 800e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67e:	f7f2 f8d7 	bl	8000830 <__aeabi_ddiv>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4610      	mov	r0, r2
 800e688:	4619      	mov	r1, r3
 800e68a:	f7f2 fa57 	bl	8000b3c <__aeabi_d2iz>
 800e68e:	4603      	mov	r3, r0
 800e690:	b21b      	sxth	r3, r3
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	f3af 8000 	nop.w
 800e6a0:	757928e1 	.word	0x757928e1
 800e6a4:	3fa9018e 	.word	0x3fa9018e
 800e6a8:	40240000 	.word	0x40240000
 800e6ac:	00000000 	.word	0x00000000

0800e6b0 <can1_ams_cell_temperatures_t5s10_decode>:

double can1_ams_cell_temperatures_t5s10_decode(int16_t value)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e6ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f1 ff22 	bl	8000508 <__aeabi_i2d>
 800e6c4:	a30d      	add	r3, pc, #52	; (adr r3, 800e6fc <can1_ams_cell_temperatures_t5s10_decode+0x4c>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7f1 ff87 	bl	80005dc <__aeabi_dmul>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	4b07      	ldr	r3, [pc, #28]	; (800e6f8 <can1_ams_cell_temperatures_t5s10_decode+0x48>)
 800e6dc:	f7f1 fdc6 	bl	800026c <__aeabi_dsub>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e6e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e6ec:	eef0 0a67 	vmov.f32	s1, s15
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	757928e1 	.word	0x757928e1
 800e700:	3fa9018e 	.word	0x3fa9018e
 800e704:	00000000 	.word	0x00000000

0800e708 <can1_ams_cell_temperatures_t5s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s11_encode(double value)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e712:	f04f 0200 	mov.w	r2, #0
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <can1_ams_cell_temperatures_t5s11_encode+0x50>)
 800e718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e71c:	f7f1 fda8 	bl	8000270 <__adddf3>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4610      	mov	r0, r2
 800e726:	4619      	mov	r1, r3
 800e728:	a309      	add	r3, pc, #36	; (adr r3, 800e750 <can1_ams_cell_temperatures_t5s11_encode+0x48>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f2 f87f 	bl	8000830 <__aeabi_ddiv>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4610      	mov	r0, r2
 800e738:	4619      	mov	r1, r3
 800e73a:	f7f2 f9ff 	bl	8000b3c <__aeabi_d2iz>
 800e73e:	4603      	mov	r3, r0
 800e740:	b21b      	sxth	r3, r3
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	f3af 8000 	nop.w
 800e750:	757928e1 	.word	0x757928e1
 800e754:	3fa9018e 	.word	0x3fa9018e
 800e758:	40240000 	.word	0x40240000
 800e75c:	00000000 	.word	0x00000000

0800e760 <can1_ams_cell_temperatures_t5s11_decode>:

double can1_ams_cell_temperatures_t5s11_decode(int16_t value)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e76a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f1 feca 	bl	8000508 <__aeabi_i2d>
 800e774:	a30d      	add	r3, pc, #52	; (adr r3, 800e7ac <can1_ams_cell_temperatures_t5s11_decode+0x4c>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 ff2f 	bl	80005dc <__aeabi_dmul>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4610      	mov	r0, r2
 800e784:	4619      	mov	r1, r3
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <can1_ams_cell_temperatures_t5s11_decode+0x48>)
 800e78c:	f7f1 fd6e 	bl	800026c <__aeabi_dsub>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	ec43 2b17 	vmov	d7, r2, r3
}
 800e798:	eeb0 0a47 	vmov.f32	s0, s14
 800e79c:	eef0 0a67 	vmov.f32	s1, s15
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	40240000 	.word	0x40240000
 800e7ac:	757928e1 	.word	0x757928e1
 800e7b0:	3fa9018e 	.word	0x3fa9018e
 800e7b4:	00000000 	.word	0x00000000

0800e7b8 <can1_ams_cell_temperatures_t5s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s12_encode(double value)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <can1_ams_cell_temperatures_t5s12_encode+0x50>)
 800e7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7cc:	f7f1 fd50 	bl	8000270 <__adddf3>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	a309      	add	r3, pc, #36	; (adr r3, 800e800 <can1_ams_cell_temperatures_t5s12_encode+0x48>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f7f2 f827 	bl	8000830 <__aeabi_ddiv>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f7f2 f9a7 	bl	8000b3c <__aeabi_d2iz>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	b21b      	sxth	r3, r3
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
 800e800:	757928e1 	.word	0x757928e1
 800e804:	3fa9018e 	.word	0x3fa9018e
 800e808:	40240000 	.word	0x40240000
 800e80c:	00000000 	.word	0x00000000

0800e810 <can1_ams_cell_temperatures_t5s12_decode>:

double can1_ams_cell_temperatures_t5s12_decode(int16_t value)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e81a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f1 fe72 	bl	8000508 <__aeabi_i2d>
 800e824:	a30d      	add	r3, pc, #52	; (adr r3, 800e85c <can1_ams_cell_temperatures_t5s12_decode+0x4c>)
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	f7f1 fed7 	bl	80005dc <__aeabi_dmul>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4610      	mov	r0, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	4b07      	ldr	r3, [pc, #28]	; (800e858 <can1_ams_cell_temperatures_t5s12_decode+0x48>)
 800e83c:	f7f1 fd16 	bl	800026c <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	ec43 2b17 	vmov	d7, r2, r3
}
 800e848:	eeb0 0a47 	vmov.f32	s0, s14
 800e84c:	eef0 0a67 	vmov.f32	s1, s15
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	40240000 	.word	0x40240000
 800e85c:	757928e1 	.word	0x757928e1
 800e860:	3fa9018e 	.word	0x3fa9018e

0800e864 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]
 800e86e:	460b      	mov	r3, r1
 800e870:	71bb      	strb	r3, [r7, #6]
 800e872:	4613      	mov	r3, r2
 800e874:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e876:	79fa      	ldrb	r2, [r7, #7]
 800e878:	79bb      	ldrb	r3, [r7, #6]
 800e87a:	fa02 f303 	lsl.w	r3, r2, r3
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	797b      	ldrb	r3, [r7, #5]
 800e882:	4013      	ands	r3, r2
 800e884:	b2db      	uxtb	r3, r3
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	4603      	mov	r3, r0
 800e89a:	80fb      	strh	r3, [r7, #6]
 800e89c:	460b      	mov	r3, r1
 800e89e:	717b      	strb	r3, [r7, #5]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8a4:	88fa      	ldrh	r2, [r7, #6]
 800e8a6:	797b      	ldrb	r3, [r7, #5]
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	793b      	ldrb	r3, [r7, #4]
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	b2db      	uxtb	r3, r3
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e8c0:	b4f0      	push	{r4, r5, r6, r7}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	71fb      	strb	r3, [r7, #7]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8d6:	79f9      	ldrb	r1, [r7, #7]
 800e8d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8dc:	f1a1 0620 	sub.w	r6, r1, #32
 800e8e0:	f1c1 0020 	rsb	r0, r1, #32
 800e8e4:	fa03 f501 	lsl.w	r5, r3, r1
 800e8e8:	fa02 f606 	lsl.w	r6, r2, r6
 800e8ec:	4335      	orrs	r5, r6
 800e8ee:	fa22 f000 	lsr.w	r0, r2, r0
 800e8f2:	4305      	orrs	r5, r0
 800e8f4:	fa02 f401 	lsl.w	r4, r2, r1
 800e8f8:	b2e2      	uxtb	r2, r4
 800e8fa:	79bb      	ldrb	r3, [r7, #6]
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	b2db      	uxtb	r3, r3
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bcf0      	pop	{r4, r5, r6, r7}
 800e908:	4770      	bx	lr

0800e90a <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	4603      	mov	r3, r0
 800e912:	80fb      	strh	r3, [r7, #6]
 800e914:	460b      	mov	r3, r1
 800e916:	717b      	strb	r3, [r7, #5]
 800e918:	4613      	mov	r3, r2
 800e91a:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	797b      	ldrb	r3, [r7, #5]
 800e920:	fa42 f303 	asr.w	r3, r2, r3
 800e924:	b2da      	uxtb	r2, r3
 800e926:	793b      	ldrb	r3, [r7, #4]
 800e928:	4013      	ands	r3, r2
 800e92a:	b2db      	uxtb	r3, r3
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e938:	b4f0      	push	{r4, r5, r6, r7}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	460b      	mov	r3, r1
 800e948:	71fb      	strb	r3, [r7, #7]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e94e:	79f9      	ldrb	r1, [r7, #7]
 800e950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e954:	f1c1 0620 	rsb	r6, r1, #32
 800e958:	f1a1 0020 	sub.w	r0, r1, #32
 800e95c:	fa22 f401 	lsr.w	r4, r2, r1
 800e960:	fa03 f606 	lsl.w	r6, r3, r6
 800e964:	4334      	orrs	r4, r6
 800e966:	fa23 f000 	lsr.w	r0, r3, r0
 800e96a:	4304      	orrs	r4, r0
 800e96c:	fa23 f501 	lsr.w	r5, r3, r1
 800e970:	b2e2      	uxtb	r2, r4
 800e972:	79bb      	ldrb	r3, [r7, #6]
 800e974:	4013      	ands	r3, r2
 800e976:	b2db      	uxtb	r3, r3
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bcf0      	pop	{r4, r5, r6, r7}
 800e980:	4770      	bx	lr

0800e982 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	4603      	mov	r3, r0
 800e98a:	71fb      	strb	r3, [r7, #7]
 800e98c:	460b      	mov	r3, r1
 800e98e:	71bb      	strb	r3, [r7, #6]
 800e990:	4613      	mov	r3, r2
 800e992:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800e994:	79fa      	ldrb	r2, [r7, #7]
 800e996:	797b      	ldrb	r3, [r7, #5]
 800e998:	4013      	ands	r3, r2
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	461a      	mov	r2, r3
 800e99e:	79bb      	ldrb	r3, [r7, #6]
 800e9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a4:	b29b      	uxth	r3, r3
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e9b2:	b4f0      	push	{r4, r5, r6, r7}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	71fb      	strb	r3, [r7, #7]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	71bb      	strb	r3, [r7, #6]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 800e9c4:	79fa      	ldrb	r2, [r7, #7]
 800e9c6:	797b      	ldrb	r3, [r7, #5]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	f04f 0300 	mov.w	r3, #0
 800e9d2:	79b9      	ldrb	r1, [r7, #6]
 800e9d4:	f1a1 0620 	sub.w	r6, r1, #32
 800e9d8:	f1c1 0020 	rsb	r0, r1, #32
 800e9dc:	fa03 f501 	lsl.w	r5, r3, r1
 800e9e0:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e4:	4335      	orrs	r5, r6
 800e9e6:	fa22 f000 	lsr.w	r0, r2, r0
 800e9ea:	4305      	orrs	r5, r0
 800e9ec:	fa02 f401 	lsl.w	r4, r2, r1
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
}
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bcf0      	pop	{r4, r5, r6, r7}
 800e9fe:	4770      	bx	lr

0800ea00 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	71bb      	strb	r3, [r7, #6]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800ea12:	79fa      	ldrb	r2, [r7, #7]
 800ea14:	797b      	ldrb	r3, [r7, #5]
 800ea16:	4013      	ands	r3, r2
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	79bb      	ldrb	r3, [r7, #6]
 800ea1e:	fa42 f303 	asr.w	r3, r2, r3
 800ea22:	b2db      	uxtb	r3, r3
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	71bb      	strb	r3, [r7, #6]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800ea42:	79fa      	ldrb	r2, [r7, #7]
 800ea44:	797b      	ldrb	r3, [r7, #5]
 800ea46:	4013      	ands	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	79bb      	ldrb	r3, [r7, #6]
 800ea4e:	fa42 f303 	asr.w	r3, r2, r3
 800ea52:	b29b      	uxth	r3, r3
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea60:	b4f0      	push	{r4, r5, r6, r7}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	71fb      	strb	r3, [r7, #7]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	71bb      	strb	r3, [r7, #6]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800ea72:	79fa      	ldrb	r2, [r7, #7]
 800ea74:	797b      	ldrb	r3, [r7, #5]
 800ea76:	4013      	ands	r3, r2
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	f04f 0300 	mov.w	r3, #0
 800ea80:	79b9      	ldrb	r1, [r7, #6]
 800ea82:	f1c1 0620 	rsb	r6, r1, #32
 800ea86:	f1a1 0020 	sub.w	r0, r1, #32
 800ea8a:	fa22 f401 	lsr.w	r4, r2, r1
 800ea8e:	fa03 f606 	lsl.w	r6, r3, r6
 800ea92:	4334      	orrs	r4, r6
 800ea94:	fa23 f000 	lsr.w	r0, r3, r0
 800ea98:	4304      	orrs	r4, r0
 800ea9a:	fa23 f501 	lsr.w	r5, r3, r1
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
}
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bcf0      	pop	{r4, r5, r6, r7}
 800eaac:	4770      	bx	lr

0800eaae <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b07      	cmp	r3, #7
 800eabe:	d802      	bhi.n	800eac6 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 800eac0:	f06f 0315 	mvn.w	r3, #21
 800eac4:	e081      	b.n	800ebca <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	3301      	adds	r3, #1
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2201      	movs	r2, #1
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff ff95 	bl	800ea00 <unpack_right_shift_u8>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	3301      	adds	r3, #1
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2202      	movs	r2, #2
 800eae6:	2101      	movs	r1, #1
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff ff89 	bl	800ea00 <unpack_right_shift_u8>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2204      	movs	r2, #4
 800eafe:	2102      	movs	r1, #2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff ff7d 	bl	800ea00 <unpack_right_shift_u8>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	3301      	adds	r3, #1
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2208      	movs	r2, #8
 800eb16:	2103      	movs	r1, #3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff71 	bl	800ea00 <unpack_right_shift_u8>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3302      	adds	r3, #2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	22ff      	movs	r2, #255	; 0xff
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff ff7d 	bl	800ea30 <unpack_right_shift_u16>
 800eb36:	4603      	mov	r3, r0
 800eb38:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	3303      	adds	r3, #3
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	22ff      	movs	r2, #255	; 0xff
 800eb42:	2108      	movs	r1, #8
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff1c 	bl	800e982 <unpack_left_shift_u16>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	8afb      	ldrh	r3, [r7, #22]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800eb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	22ff      	movs	r2, #255	; 0xff
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ff62 	bl	800ea30 <unpack_right_shift_u16>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	3305      	adds	r3, #5
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	22ff      	movs	r2, #255	; 0xff
 800eb78:	2108      	movs	r1, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ff01 	bl	800e982 <unpack_left_shift_u16>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	8abb      	ldrh	r3, [r7, #20]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 800eb8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	3306      	adds	r3, #6
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	22ff      	movs	r2, #255	; 0xff
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff47 	bl	800ea30 <unpack_right_shift_u16>
 800eba2:	4603      	mov	r3, r0
 800eba4:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	3307      	adds	r3, #7
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	22ff      	movs	r2, #255	; 0xff
 800ebae:	2108      	movs	r1, #8
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff fee6 	bl	800e982 <unpack_left_shift_u16>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461a      	mov	r2, r3
 800ebba:	8a7b      	ldrh	r3, [r7, #18]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 800ebc0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	811a      	strh	r2, [r3, #8]

    return (0);
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_inverter_on_decode(uint8_t value)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	4603      	mov	r3, r0
 800ebda:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f1 fc82 	bl	80004e8 <__aeabi_ui2d>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	ec43 2b17 	vmov	d7, r2, r3
}
 800ebec:	eeb0 0a47 	vmov.f32	s0, s14
 800ebf0:	eef0 0a67 	vmov.f32	s1, s15
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_dc_on_decode(uint8_t value)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	4603      	mov	r3, r0
 800ec02:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f1 fc6e 	bl	80004e8 <__aeabi_ui2d>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec14:	eeb0 0a47 	vmov.f32	s0, s14
 800ec18:	eef0 0a67 	vmov.f32	s1, s15
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_enable_decode(uint8_t value)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	4603      	mov	r3, r0
 800ec2a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f1 fc5a 	bl	80004e8 <__aeabi_ui2d>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ec40:	eef0 0a67 	vmov.f32	s1, s15
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_error_reset_decode(uint8_t value)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	4603      	mov	r3, r0
 800ec52:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f1 fc46 	bl	80004e8 <__aeabi_ui2d>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec64:	eeb0 0a47 	vmov.f32	s0, s14
 800ec68:	eef0 0a67 	vmov.f32	s1, s15
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_target_velocity_decode(int16_t value)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	4603      	mov	r3, r0
 800ec7a:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ec7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f1 fc41 	bl	8000508 <__aeabi_i2d>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ec92:	eef0 0a67 	vmov.f32	s1, s15
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(int16_t value)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800eca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f1 fc2c 	bl	8000508 <__aeabi_i2d>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ecb8:	eeb0 0a47 	vmov.f32	s0, s14
 800ecbc:	eef0 0a67 	vmov.f32	s1, s15
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(int16_t value)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	4603      	mov	r3, r0
 800ecce:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ecd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f1 fc17 	bl	8000508 <__aeabi_i2d>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	ec43 2b17 	vmov	d7, r2, r3
}
 800ece2:	eeb0 0a47 	vmov.f32	s0, s14
 800ece6:	eef0 0a67 	vmov.f32	s1, s15
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <can2_ivt_msg_result_i_pack>:

int can2_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_i_t *src_p,
    size_t size)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
    uint64_t i_ts;

    if (size < 6u) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b05      	cmp	r3, #5
 800ed00:	d802      	bhi.n	800ed08 <can2_ivt_msg_result_i_pack+0x18>
        return (-EINVAL);
 800ed02:	f06f 0315 	mvn.w	r3, #21
 800ed06:	e068      	b.n	800edda <can2_ivt_msg_result_i_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800ed08:	2206      	movs	r2, #6
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f01f fc9f 	bl	802e650 <memset>

    i_ts = (uint64_t)src_p->i_ts;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(i_ts, 40u, 0xffu);
 800ed1c:	23ff      	movs	r3, #255	; 0xff
 800ed1e:	2228      	movs	r2, #40	; 0x28
 800ed20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed24:	f7ff fe08 	bl	800e938 <pack_right_shift_u64>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(i_ts, 32u, 0xffu);
 800ed38:	23ff      	movs	r3, #255	; 0xff
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed40:	f7ff fdfa 	bl	800e938 <pack_right_shift_u64>
 800ed44:	4603      	mov	r3, r0
 800ed46:	4619      	mov	r1, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3301      	adds	r3, #1
 800ed52:	430a      	orrs	r2, r1
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(i_ts, 24u, 0xffu);
 800ed58:	23ff      	movs	r3, #255	; 0xff
 800ed5a:	2218      	movs	r2, #24
 800ed5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed60:	f7ff fdea 	bl	800e938 <pack_right_shift_u64>
 800ed64:	4603      	mov	r3, r0
 800ed66:	4619      	mov	r1, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3302      	adds	r3, #2
 800ed72:	430a      	orrs	r2, r1
 800ed74:	b2d2      	uxtb	r2, r2
 800ed76:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(i_ts, 16u, 0xffu);
 800ed78:	23ff      	movs	r3, #255	; 0xff
 800ed7a:	2210      	movs	r2, #16
 800ed7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed80:	f7ff fdda 	bl	800e938 <pack_right_shift_u64>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4619      	mov	r1, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3303      	adds	r3, #3
 800ed8c:	781a      	ldrb	r2, [r3, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3303      	adds	r3, #3
 800ed92:	430a      	orrs	r2, r1
 800ed94:	b2d2      	uxtb	r2, r2
 800ed96:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(i_ts, 8u, 0xffu);
 800ed98:	23ff      	movs	r3, #255	; 0xff
 800ed9a:	2208      	movs	r2, #8
 800ed9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eda0:	f7ff fdca 	bl	800e938 <pack_right_shift_u64>
 800eda4:	4603      	mov	r3, r0
 800eda6:	4619      	mov	r1, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3304      	adds	r3, #4
 800edac:	781a      	ldrb	r2, [r3, #0]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3304      	adds	r3, #4
 800edb2:	430a      	orrs	r2, r1
 800edb4:	b2d2      	uxtb	r2, r2
 800edb6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(i_ts, 0u, 0xffu);
 800edb8:	23ff      	movs	r3, #255	; 0xff
 800edba:	2200      	movs	r2, #0
 800edbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800edc0:	f7ff fd7e 	bl	800e8c0 <pack_left_shift_u64>
 800edc4:	4603      	mov	r3, r0
 800edc6:	4619      	mov	r1, r3
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	3305      	adds	r3, #5
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3305      	adds	r3, #5
 800edd2:	430a      	orrs	r2, r1
 800edd4:	b2d2      	uxtb	r2, r2
 800edd6:	701a      	strb	r2, [r3, #0]

    return (6);
 800edd8:	2306      	movs	r3, #6
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ede4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ede8:	b08e      	sub	sp, #56	; 0x38
 800edea:	af00      	add	r7, sp, #0
 800edec:	62f8      	str	r0, [r7, #44]	; 0x2c
 800edee:	62b9      	str	r1, [r7, #40]	; 0x28
 800edf0:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2b05      	cmp	r3, #5
 800edf6:	d802      	bhi.n	800edfe <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 800edf8:	f06f 0315 	mvn.w	r3, #21
 800edfc:	e081      	b.n	800ef02 <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	22ff      	movs	r2, #255	; 0xff
 800ee04:	2128      	movs	r1, #40	; 0x28
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fdd3 	bl	800e9b2 <unpack_left_shift_u64>
 800ee0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	3301      	adds	r3, #1
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	22ff      	movs	r2, #255	; 0xff
 800ee18:	2120      	movs	r1, #32
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fdc9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee24:	ea42 0400 	orr.w	r4, r2, r0
 800ee28:	ea43 0501 	orr.w	r5, r3, r1
 800ee2c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	3302      	adds	r3, #2
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	22ff      	movs	r2, #255	; 0xff
 800ee38:	2118      	movs	r1, #24
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff fdb9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee44:	ea42 0800 	orr.w	r8, r2, r0
 800ee48:	ea43 0901 	orr.w	r9, r3, r1
 800ee4c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	3303      	adds	r3, #3
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	22ff      	movs	r2, #255	; 0xff
 800ee58:	2110      	movs	r1, #16
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fda9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee64:	ea42 0400 	orr.w	r4, r2, r0
 800ee68:	613c      	str	r4, [r7, #16]
 800ee6a:	430b      	orrs	r3, r1
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ee72:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	3304      	adds	r3, #4
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	22ff      	movs	r2, #255	; 0xff
 800ee7e:	2108      	movs	r1, #8
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fd96 	bl	800e9b2 <unpack_left_shift_u64>
 800ee86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee8a:	ea42 0400 	orr.w	r4, r2, r0
 800ee8e:	60bc      	str	r4, [r7, #8]
 800ee90:	430b      	orrs	r3, r1
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ee98:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	3305      	adds	r3, #5
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	22ff      	movs	r2, #255	; 0xff
 800eea4:	2100      	movs	r1, #0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fdda 	bl	800ea60 <unpack_right_shift_u64>
 800eeac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eeb0:	ea42 0400 	orr.w	r4, r2, r0
 800eeb4:	603c      	str	r4, [r7, #0]
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eebe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 800eec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eec6:	f04f 0000 	mov.w	r0, #0
 800eeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eece:	ea02 0400 	and.w	r4, r2, r0
 800eed2:	61bc      	str	r4, [r7, #24]
 800eed4:	400b      	ands	r3, r1
 800eed6:	61fb      	str	r3, [r7, #28]
 800eed8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eedc:	4323      	orrs	r3, r4
 800eede:	d00a      	beq.n	800eef6 <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 800eee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eee4:	f04f 0000 	mov.w	r0, #0
 800eee8:	4908      	ldr	r1, [pc, #32]	; (800ef0c <can2_ivt_msg_result_i_unpack+0x128>)
 800eeea:	ea42 0a00 	orr.w	sl, r2, r0
 800eeee:	ea43 0b01 	orr.w	fp, r3, r1
 800eef2:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 800eef6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eefa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefc:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3738      	adds	r7, #56	; 0x38
 800ef06:	46bd      	mov	sp, r7
 800ef08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef0c:	ffff0000 	.word	0xffff0000

0800ef10 <can2_ivt_msg_result_i_i_ts_encode>:

int64_t can2_ivt_msg_result_i_i_ts_encode(double value)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800ef1a:	a30b      	add	r3, pc, #44	; (adr r3, 800ef48 <can2_ivt_msg_result_i_i_ts_encode+0x38>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef24:	f7f1 fc84 	bl	8000830 <__aeabi_ddiv>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f7f1 feb4 	bl	8000c9c <__aeabi_d2lz>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
}
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef4c:	3f50624d 	.word	0x3f50624d

0800ef50 <can2_ivt_msg_result_i_i_ts_decode>:

double can2_ivt_msg_result_i_i_ts_decode(int64_t value)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800ef5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef5e:	f7f1 fb0f 	bl	8000580 <__aeabi_l2d>
 800ef62:	a309      	add	r3, pc, #36	; (adr r3, 800ef88 <can2_ivt_msg_result_i_i_ts_decode+0x38>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f7f1 fb38 	bl	80005dc <__aeabi_dmul>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef74:	eeb0 0a47 	vmov.f32	s0, s14
 800ef78:	eef0 0a67 	vmov.f32	s1, s15
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef8c:	3f50624d 	.word	0x3f50624d

0800ef90 <can2_ivt_msg_result_u1_pack>:

int can2_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u1_t *src_p,
    size_t size)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    uint64_t u_cells;

    if (size < 6u) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b05      	cmp	r3, #5
 800efa0:	d802      	bhi.n	800efa8 <can2_ivt_msg_result_u1_pack+0x18>
        return (-EINVAL);
 800efa2:	f06f 0315 	mvn.w	r3, #21
 800efa6:	e068      	b.n	800f07a <can2_ivt_msg_result_u1_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800efa8:	2206      	movs	r2, #6
 800efaa:	2100      	movs	r1, #0
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f01f fb4f 	bl	802e650 <memset>

    u_cells = (uint64_t)src_p->u_cells;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_cells, 40u, 0xffu);
 800efbc:	23ff      	movs	r3, #255	; 0xff
 800efbe:	2228      	movs	r2, #40	; 0x28
 800efc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efc4:	f7ff fcb8 	bl	800e938 <pack_right_shift_u64>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_cells, 32u, 0xffu);
 800efd8:	23ff      	movs	r3, #255	; 0xff
 800efda:	2220      	movs	r2, #32
 800efdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efe0:	f7ff fcaa 	bl	800e938 <pack_right_shift_u64>
 800efe4:	4603      	mov	r3, r0
 800efe6:	4619      	mov	r1, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3301      	adds	r3, #1
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3301      	adds	r3, #1
 800eff2:	430a      	orrs	r2, r1
 800eff4:	b2d2      	uxtb	r2, r2
 800eff6:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_cells, 24u, 0xffu);
 800eff8:	23ff      	movs	r3, #255	; 0xff
 800effa:	2218      	movs	r2, #24
 800effc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f000:	f7ff fc9a 	bl	800e938 <pack_right_shift_u64>
 800f004:	4603      	mov	r3, r0
 800f006:	4619      	mov	r1, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3302      	adds	r3, #2
 800f00c:	781a      	ldrb	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3302      	adds	r3, #2
 800f012:	430a      	orrs	r2, r1
 800f014:	b2d2      	uxtb	r2, r2
 800f016:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_cells, 16u, 0xffu);
 800f018:	23ff      	movs	r3, #255	; 0xff
 800f01a:	2210      	movs	r2, #16
 800f01c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f020:	f7ff fc8a 	bl	800e938 <pack_right_shift_u64>
 800f024:	4603      	mov	r3, r0
 800f026:	4619      	mov	r1, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3303      	adds	r3, #3
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3303      	adds	r3, #3
 800f032:	430a      	orrs	r2, r1
 800f034:	b2d2      	uxtb	r2, r2
 800f036:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_cells, 8u, 0xffu);
 800f038:	23ff      	movs	r3, #255	; 0xff
 800f03a:	2208      	movs	r2, #8
 800f03c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f040:	f7ff fc7a 	bl	800e938 <pack_right_shift_u64>
 800f044:	4603      	mov	r3, r0
 800f046:	4619      	mov	r1, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3304      	adds	r3, #4
 800f052:	430a      	orrs	r2, r1
 800f054:	b2d2      	uxtb	r2, r2
 800f056:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_cells, 0u, 0xffu);
 800f058:	23ff      	movs	r3, #255	; 0xff
 800f05a:	2200      	movs	r2, #0
 800f05c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f060:	f7ff fc2e 	bl	800e8c0 <pack_left_shift_u64>
 800f064:	4603      	mov	r3, r0
 800f066:	4619      	mov	r1, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3305      	adds	r3, #5
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3305      	adds	r3, #5
 800f072:	430a      	orrs	r2, r1
 800f074:	b2d2      	uxtb	r2, r2
 800f076:	701a      	strb	r2, [r3, #0]

    return (6);
 800f078:	2306      	movs	r3, #6
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f088:	b08e      	sub	sp, #56	; 0x38
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f08e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f090:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 800f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f094:	2b05      	cmp	r3, #5
 800f096:	d802      	bhi.n	800f09e <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800f098:	f06f 0315 	mvn.w	r3, #21
 800f09c:	e081      	b.n	800f1a2 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	22ff      	movs	r2, #255	; 0xff
 800f0a4:	2128      	movs	r1, #40	; 0x28
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc83 	bl	800e9b2 <unpack_left_shift_u64>
 800f0ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	22ff      	movs	r2, #255	; 0xff
 800f0b8:	2120      	movs	r1, #32
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fc79 	bl	800e9b2 <unpack_left_shift_u64>
 800f0c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0c4:	ea42 0400 	orr.w	r4, r2, r0
 800f0c8:	ea43 0501 	orr.w	r5, r3, r1
 800f0cc:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	3302      	adds	r3, #2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	22ff      	movs	r2, #255	; 0xff
 800f0d8:	2118      	movs	r1, #24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fc69 	bl	800e9b2 <unpack_left_shift_u64>
 800f0e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0e4:	ea42 0800 	orr.w	r8, r2, r0
 800f0e8:	ea43 0901 	orr.w	r9, r3, r1
 800f0ec:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	3303      	adds	r3, #3
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	22ff      	movs	r2, #255	; 0xff
 800f0f8:	2110      	movs	r1, #16
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fc59 	bl	800e9b2 <unpack_left_shift_u64>
 800f100:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f104:	ea42 0400 	orr.w	r4, r2, r0
 800f108:	613c      	str	r4, [r7, #16]
 800f10a:	430b      	orrs	r3, r1
 800f10c:	617b      	str	r3, [r7, #20]
 800f10e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f112:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	3304      	adds	r3, #4
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	22ff      	movs	r2, #255	; 0xff
 800f11e:	2108      	movs	r1, #8
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc46 	bl	800e9b2 <unpack_left_shift_u64>
 800f126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f12a:	ea42 0400 	orr.w	r4, r2, r0
 800f12e:	60bc      	str	r4, [r7, #8]
 800f130:	430b      	orrs	r3, r1
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f138:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	3305      	adds	r3, #5
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	22ff      	movs	r2, #255	; 0xff
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff fc8a 	bl	800ea60 <unpack_right_shift_u64>
 800f14c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f150:	ea42 0400 	orr.w	r4, r2, r0
 800f154:	603c      	str	r4, [r7, #0]
 800f156:	430b      	orrs	r3, r1
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f15e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 800f162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f166:	f04f 0000 	mov.w	r0, #0
 800f16a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f16e:	ea02 0400 	and.w	r4, r2, r0
 800f172:	61bc      	str	r4, [r7, #24]
 800f174:	400b      	ands	r3, r1
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f17c:	4323      	orrs	r3, r4
 800f17e:	d00a      	beq.n	800f196 <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 800f180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f184:	f04f 0000 	mov.w	r0, #0
 800f188:	4908      	ldr	r1, [pc, #32]	; (800f1ac <can2_ivt_msg_result_u1_unpack+0x128>)
 800f18a:	ea42 0a00 	orr.w	sl, r2, r0
 800f18e:	ea43 0b01 	orr.w	fp, r3, r1
 800f192:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800f196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f19c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3738      	adds	r7, #56	; 0x38
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1ac:	ffff0000 	.word	0xffff0000

0800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>:

int64_t can2_ivt_msg_result_u1_u_cells_encode(double value)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f1ba:	a30b      	add	r3, pc, #44	; (adr r3, 800f1e8 <can2_ivt_msg_result_u1_u_cells_encode+0x38>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1c4:	f7f1 fb34 	bl	8000830 <__aeabi_ddiv>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	f7f1 fd64 	bl	8000c9c <__aeabi_d2lz>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
}
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4619      	mov	r1, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f1ec:	3f50624d 	.word	0x3f50624d

0800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>:

double can2_ivt_msg_result_u1_u_cells_decode(int64_t value)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f1fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1fe:	f7f1 f9bf 	bl	8000580 <__aeabi_l2d>
 800f202:	a309      	add	r3, pc, #36	; (adr r3, 800f228 <can2_ivt_msg_result_u1_u_cells_decode+0x38>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9e8 	bl	80005dc <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	ec43 2b17 	vmov	d7, r2, r3
}
 800f214:	eeb0 0a47 	vmov.f32	s0, s14
 800f218:	eef0 0a67 	vmov.f32	s1, s15
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	f3af 8000 	nop.w
 800f228:	d2f1a9fc 	.word	0xd2f1a9fc
 800f22c:	3f50624d 	.word	0x3f50624d

0800f230 <can2_ivt_msg_result_u3_pack>:

int can2_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u3_t *src_p,
    size_t size)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
    uint64_t u_vehicle;

    if (size < 6u) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b05      	cmp	r3, #5
 800f240:	d802      	bhi.n	800f248 <can2_ivt_msg_result_u3_pack+0x18>
        return (-EINVAL);
 800f242:	f06f 0315 	mvn.w	r3, #21
 800f246:	e068      	b.n	800f31a <can2_ivt_msg_result_u3_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800f248:	2206      	movs	r2, #6
 800f24a:	2100      	movs	r1, #0
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f01f f9ff 	bl	802e650 <memset>

    u_vehicle = (uint64_t)src_p->u_vehicle;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_vehicle, 40u, 0xffu);
 800f25c:	23ff      	movs	r3, #255	; 0xff
 800f25e:	2228      	movs	r2, #40	; 0x28
 800f260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f264:	f7ff fb68 	bl	800e938 <pack_right_shift_u64>
 800f268:	4603      	mov	r3, r0
 800f26a:	461a      	mov	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	4313      	orrs	r3, r2
 800f272:	b2da      	uxtb	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_vehicle, 32u, 0xffu);
 800f278:	23ff      	movs	r3, #255	; 0xff
 800f27a:	2220      	movs	r2, #32
 800f27c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f280:	f7ff fb5a 	bl	800e938 <pack_right_shift_u64>
 800f284:	4603      	mov	r3, r0
 800f286:	4619      	mov	r1, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3301      	adds	r3, #1
 800f292:	430a      	orrs	r2, r1
 800f294:	b2d2      	uxtb	r2, r2
 800f296:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_vehicle, 24u, 0xffu);
 800f298:	23ff      	movs	r3, #255	; 0xff
 800f29a:	2218      	movs	r2, #24
 800f29c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2a0:	f7ff fb4a 	bl	800e938 <pack_right_shift_u64>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	b2d2      	uxtb	r2, r2
 800f2b6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_vehicle, 16u, 0xffu);
 800f2b8:	23ff      	movs	r3, #255	; 0xff
 800f2ba:	2210      	movs	r2, #16
 800f2bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2c0:	f7ff fb3a 	bl	800e938 <pack_right_shift_u64>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	3303      	adds	r3, #3
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3303      	adds	r3, #3
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_vehicle, 8u, 0xffu);
 800f2d8:	23ff      	movs	r3, #255	; 0xff
 800f2da:	2208      	movs	r2, #8
 800f2dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2e0:	f7ff fb2a 	bl	800e938 <pack_right_shift_u64>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	781a      	ldrb	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	430a      	orrs	r2, r1
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_vehicle, 0u, 0xffu);
 800f2f8:	23ff      	movs	r3, #255	; 0xff
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f300:	f7ff fade 	bl	800e8c0 <pack_left_shift_u64>
 800f304:	4603      	mov	r3, r0
 800f306:	4619      	mov	r1, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3305      	adds	r3, #5
 800f30c:	781a      	ldrb	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3305      	adds	r3, #5
 800f312:	430a      	orrs	r2, r1
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]

    return (6);
 800f318:	2306      	movs	r3, #6
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f328:	b08e      	sub	sp, #56	; 0x38
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f32e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f330:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	2b05      	cmp	r3, #5
 800f336:	d802      	bhi.n	800f33e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 800f338:	f06f 0315 	mvn.w	r3, #21
 800f33c:	e081      	b.n	800f442 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	22ff      	movs	r2, #255	; 0xff
 800f344:	2128      	movs	r1, #40	; 0x28
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff fb33 	bl	800e9b2 <unpack_left_shift_u64>
 800f34c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	3301      	adds	r3, #1
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	22ff      	movs	r2, #255	; 0xff
 800f358:	2120      	movs	r1, #32
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff fb29 	bl	800e9b2 <unpack_left_shift_u64>
 800f360:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f364:	ea42 0400 	orr.w	r4, r2, r0
 800f368:	ea43 0501 	orr.w	r5, r3, r1
 800f36c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	3302      	adds	r3, #2
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	22ff      	movs	r2, #255	; 0xff
 800f378:	2118      	movs	r1, #24
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fb19 	bl	800e9b2 <unpack_left_shift_u64>
 800f380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f384:	ea42 0800 	orr.w	r8, r2, r0
 800f388:	ea43 0901 	orr.w	r9, r3, r1
 800f38c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	3303      	adds	r3, #3
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	22ff      	movs	r2, #255	; 0xff
 800f398:	2110      	movs	r1, #16
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fb09 	bl	800e9b2 <unpack_left_shift_u64>
 800f3a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3a4:	ea42 0400 	orr.w	r4, r2, r0
 800f3a8:	613c      	str	r4, [r7, #16]
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	617b      	str	r3, [r7, #20]
 800f3ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f3b2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	22ff      	movs	r2, #255	; 0xff
 800f3be:	2108      	movs	r1, #8
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff faf6 	bl	800e9b2 <unpack_left_shift_u64>
 800f3c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3ca:	ea42 0400 	orr.w	r4, r2, r0
 800f3ce:	60bc      	str	r4, [r7, #8]
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f3d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	3305      	adds	r3, #5
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	22ff      	movs	r2, #255	; 0xff
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff fb3a 	bl	800ea60 <unpack_right_shift_u64>
 800f3ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3f0:	ea42 0400 	orr.w	r4, r2, r0
 800f3f4:	603c      	str	r4, [r7, #0]
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	607b      	str	r3, [r7, #4]
 800f3fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f3fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 800f402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f406:	f04f 0000 	mov.w	r0, #0
 800f40a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f40e:	ea02 0400 	and.w	r4, r2, r0
 800f412:	61bc      	str	r4, [r7, #24]
 800f414:	400b      	ands	r3, r1
 800f416:	61fb      	str	r3, [r7, #28]
 800f418:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f41c:	4323      	orrs	r3, r4
 800f41e:	d00a      	beq.n	800f436 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 800f420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f424:	f04f 0000 	mov.w	r0, #0
 800f428:	4908      	ldr	r1, [pc, #32]	; (800f44c <can2_ivt_msg_result_u3_unpack+0x128>)
 800f42a:	ea42 0a00 	orr.w	sl, r2, r0
 800f42e:	ea43 0b01 	orr.w	fp, r3, r1
 800f432:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 800f436:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f43c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3738      	adds	r7, #56	; 0x38
 800f446:	46bd      	mov	sp, r7
 800f448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f44c:	ffff0000 	.word	0xffff0000

0800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>:

int64_t can2_ivt_msg_result_u3_u_vehicle_encode(double value)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f45a:	a30b      	add	r3, pc, #44	; (adr r3, 800f488 <can2_ivt_msg_result_u3_u_vehicle_encode+0x38>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f464:	f7f1 f9e4 	bl	8000830 <__aeabi_ddiv>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4610      	mov	r0, r2
 800f46e:	4619      	mov	r1, r3
 800f470:	f7f1 fc14 	bl	8000c9c <__aeabi_d2lz>
 800f474:	4602      	mov	r2, r0
 800f476:	460b      	mov	r3, r1
}
 800f478:	4610      	mov	r0, r2
 800f47a:	4619      	mov	r1, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	d2f1a9fc 	.word	0xd2f1a9fc
 800f48c:	3f50624d 	.word	0x3f50624d

0800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>:

double can2_ivt_msg_result_u3_u_vehicle_decode(int64_t value)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f49e:	f7f1 f86f 	bl	8000580 <__aeabi_l2d>
 800f4a2:	a309      	add	r3, pc, #36	; (adr r3, 800f4c8 <can2_ivt_msg_result_u3_u_vehicle_decode+0x38>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f898 	bl	80005dc <__aeabi_dmul>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f4b4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4b8:	eef0 0a67 	vmov.f32	s1, s15
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	f3af 8000 	nop.w
 800f4c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f4cc:	3f50624d 	.word	0x3f50624d

0800f4d0 <can2_charger_config_pack>:

int can2_charger_config_pack(
    uint8_t *dst_p,
    const struct can2_charger_config_t *src_p,
    size_t size)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b03      	cmp	r3, #3
 800f4e0:	d802      	bhi.n	800f4e8 <can2_charger_config_pack+0x18>
        return (-EINVAL);
 800f4e2:	f06f 0315 	mvn.w	r3, #21
 800f4e6:	e0b5      	b.n	800f654 <can2_charger_config_pack+0x184>
    }

    memset(&dst_p[0], 0, 4);
 800f4e8:	2204      	movs	r2, #4
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f01f f8af 	bl	802e650 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->set_mux, 0u, 0xffu);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff f9b2 	bl	800e864 <pack_left_shift_u8>
 800f500:	4603      	mov	r3, r0
 800f502:	461a      	mov	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	4313      	orrs	r3, r2
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	701a      	strb	r2, [r3, #0]

    switch (src_p->set_mux) {
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	3b40      	subs	r3, #64	; 0x40
 800f516:	2b04      	cmp	r3, #4
 800f518:	f200 809a 	bhi.w	800f650 <can2_charger_config_pack+0x180>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <can2_charger_config_pack+0x54>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f539 	.word	0x0800f539
 800f528:	0800f57f 	.word	0x0800f57f
 800f52c:	0800f5c5 	.word	0x0800f5c5
 800f530:	0800f651 	.word	0x0800f651
 800f534:	0800f60b 	.word	0x0800f60b

    case 64:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_voltage_limit, 8u, 0xffu);
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	885b      	ldrh	r3, [r3, #2]
 800f53c:	22ff      	movs	r2, #255	; 0xff
 800f53e:	2108      	movs	r1, #8
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff f9e2 	bl	800e90a <pack_right_shift_u16>
 800f546:	4603      	mov	r3, r0
 800f548:	4619      	mov	r1, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3301      	adds	r3, #1
 800f54e:	781a      	ldrb	r2, [r3, #0]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	430a      	orrs	r2, r1
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_voltage_limit, 0u, 0xffu);
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	885b      	ldrh	r3, [r3, #2]
 800f55e:	22ff      	movs	r2, #255	; 0xff
 800f560:	2100      	movs	r1, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff f995 	bl	800e892 <pack_left_shift_u16>
 800f568:	4603      	mov	r3, r0
 800f56a:	4619      	mov	r1, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3302      	adds	r3, #2
 800f570:	781a      	ldrb	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3302      	adds	r3, #2
 800f576:	430a      	orrs	r2, r1
 800f578:	b2d2      	uxtb	r2, r2
 800f57a:	701a      	strb	r2, [r3, #0]
        break;
 800f57c:	e069      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 65:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_current_limit, 8u, 0xffu);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	889b      	ldrh	r3, [r3, #4]
 800f582:	22ff      	movs	r2, #255	; 0xff
 800f584:	2108      	movs	r1, #8
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff f9bf 	bl	800e90a <pack_right_shift_u16>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4619      	mov	r1, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	3301      	adds	r3, #1
 800f594:	781a      	ldrb	r2, [r3, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3301      	adds	r3, #1
 800f59a:	430a      	orrs	r2, r1
 800f59c:	b2d2      	uxtb	r2, r2
 800f59e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_current_limit, 0u, 0xffu);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	889b      	ldrh	r3, [r3, #4]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff f972 	bl	800e892 <pack_left_shift_u16>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	b2d2      	uxtb	r2, r2
 800f5c0:	701a      	strb	r2, [r3, #0]
        break;
 800f5c2:	e046      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 66:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_power_limit, 8u, 0xffu);
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	88db      	ldrh	r3, [r3, #6]
 800f5c8:	22ff      	movs	r2, #255	; 0xff
 800f5ca:	2108      	movs	r1, #8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff f99c 	bl	800e90a <pack_right_shift_u16>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	b2d2      	uxtb	r2, r2
 800f5e4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_power_limit, 0u, 0xffu);
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	88db      	ldrh	r3, [r3, #6]
 800f5ea:	22ff      	movs	r2, #255	; 0xff
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff f94f 	bl	800e892 <pack_left_shift_u16>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3302      	adds	r3, #2
 800f602:	430a      	orrs	r2, r1
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	701a      	strb	r2, [r3, #0]
        break;
 800f608:	e023      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 68:
        dst_p[2] |= pack_left_shift_u8(src_p->msg_set_enabled, 0u, 0xffu);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7a1b      	ldrb	r3, [r3, #8]
 800f60e:	22ff      	movs	r2, #255	; 0xff
 800f610:	2100      	movs	r1, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f7ff f926 	bl	800e864 <pack_left_shift_u8>
 800f618:	4603      	mov	r3, r0
 800f61a:	4619      	mov	r1, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3302      	adds	r3, #2
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3302      	adds	r3, #2
 800f626:	430a      	orrs	r2, r1
 800f628:	b2d2      	uxtb	r2, r2
 800f62a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->msg_set_time_out, 0u, 0xffu);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	7a5b      	ldrb	r3, [r3, #9]
 800f630:	22ff      	movs	r2, #255	; 0xff
 800f632:	2100      	movs	r1, #0
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff f915 	bl	800e864 <pack_left_shift_u8>
 800f63a:	4603      	mov	r3, r0
 800f63c:	4619      	mov	r1, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3303      	adds	r3, #3
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3303      	adds	r3, #3
 800f648:	430a      	orrs	r2, r1
 800f64a:	b2d2      	uxtb	r2, r2
 800f64c:	701a      	strb	r2, [r3, #0]
        break;
 800f64e:	e000      	b.n	800f652 <can2_charger_config_pack+0x182>

    default:
        break;
 800f650:	bf00      	nop
    }

    return (4);
 800f652:	2304      	movs	r3, #4
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <can2_charger_config_unpack>:

int can2_charger_config_unpack(
    struct can2_charger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d802      	bhi.n	800f674 <can2_charger_config_unpack+0x18>
        return (-EINVAL);
 800f66e:	f06f 0315 	mvn.w	r3, #21
 800f672:	e08f      	b.n	800f794 <can2_charger_config_unpack+0x138>
    }

    dst_p->set_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	22ff      	movs	r2, #255	; 0xff
 800f67a:	2100      	movs	r1, #0
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff f9bf 	bl	800ea00 <unpack_right_shift_u8>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	701a      	strb	r2, [r3, #0]

    switch (dst_p->set_mux) {
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	3b40      	subs	r3, #64	; 0x40
 800f690:	2b04      	cmp	r3, #4
 800f692:	d87d      	bhi.n	800f790 <can2_charger_config_unpack+0x134>
 800f694:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <can2_charger_config_unpack+0x40>)
 800f696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69a:	bf00      	nop
 800f69c:	0800f6b1 	.word	0x0800f6b1
 800f6a0:	0800f6eb 	.word	0x0800f6eb
 800f6a4:	0800f725 	.word	0x0800f725
 800f6a8:	0800f791 	.word	0x0800f791
 800f6ac:	0800f75f 	.word	0x0800f75f

    case 64:
        dst_p->msg_set_voltage_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	22ff      	movs	r2, #255	; 0xff
 800f6b8:	2108      	movs	r1, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff f961 	bl	800e982 <unpack_left_shift_u16>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	805a      	strh	r2, [r3, #2]
        dst_p->msg_set_voltage_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	22ff      	movs	r2, #255	; 0xff
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff f9ac 	bl	800ea30 <unpack_right_shift_u16>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	885b      	ldrh	r3, [r3, #2]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	805a      	strh	r2, [r3, #2]
        break;
 800f6e8:	e053      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 65:
        dst_p->msg_set_current_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	22ff      	movs	r2, #255	; 0xff
 800f6f2:	2108      	movs	r1, #8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff f944 	bl	800e982 <unpack_left_shift_u16>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	809a      	strh	r2, [r3, #4]
        dst_p->msg_set_current_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	3302      	adds	r3, #2
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	22ff      	movs	r2, #255	; 0xff
 800f70a:	2100      	movs	r1, #0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff f98f 	bl	800ea30 <unpack_right_shift_u16>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	889b      	ldrh	r3, [r3, #4]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	809a      	strh	r2, [r3, #4]
        break;
 800f722:	e036      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 66:
        dst_p->msg_set_power_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	3301      	adds	r3, #1
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	22ff      	movs	r2, #255	; 0xff
 800f72c:	2108      	movs	r1, #8
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff f927 	bl	800e982 <unpack_left_shift_u16>
 800f734:	4603      	mov	r3, r0
 800f736:	461a      	mov	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	80da      	strh	r2, [r3, #6]
        dst_p->msg_set_power_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3302      	adds	r3, #2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	22ff      	movs	r2, #255	; 0xff
 800f744:	2100      	movs	r1, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff f972 	bl	800ea30 <unpack_right_shift_u16>
 800f74c:	4603      	mov	r3, r0
 800f74e:	461a      	mov	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	88db      	ldrh	r3, [r3, #6]
 800f754:	4313      	orrs	r3, r2
 800f756:	b29a      	uxth	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	80da      	strh	r2, [r3, #6]
        break;
 800f75c:	e019      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 68:
        dst_p->msg_set_enabled = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3302      	adds	r3, #2
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	2100      	movs	r1, #0
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff f949 	bl	800ea00 <unpack_right_shift_u8>
 800f76e:	4603      	mov	r3, r0
 800f770:	461a      	mov	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	721a      	strb	r2, [r3, #8]
        dst_p->msg_set_time_out = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	3303      	adds	r3, #3
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	22ff      	movs	r2, #255	; 0xff
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff f93d 	bl	800ea00 <unpack_right_shift_u8>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	725a      	strb	r2, [r3, #9]
        break;
 800f78e:	e000      	b.n	800f792 <can2_charger_config_unpack+0x136>

    default:
        break;
 800f790:	bf00      	nop
    }

    return (0);
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <can2_charger_config_set_mux_encode>:

uint8_t can2_charger_config_set_mux_encode(double value)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f7a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7aa:	f7f1 f9ef 	bl	8000b8c <__aeabi_d2uiz>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <can2_charger_config_msg_set_voltage_limit_encode>:

    return (true);
}

uint16_t can2_charger_config_msg_set_voltage_limit_encode(double value)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f7c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7c8:	f7f1 f9e0 	bl	8000b8c <__aeabi_d2uiz>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	b29b      	uxth	r3, r3
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>:

double can2_charger_config_msg_set_voltage_limit_decode(uint16_t value)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f7e2:	88fb      	ldrh	r3, [r7, #6]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f0 fe7f 	bl	80004e8 <__aeabi_ui2d>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	ec43 2b17 	vmov	d7, r2, r3
}
 800f7f2:	eeb0 0a47 	vmov.f32	s0, s14
 800f7f6:	eef0 0a67 	vmov.f32	s1, s15
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <can2_charger_config_msg_set_current_limit_encode>:
{
    return (value <= 900u);
}

uint16_t can2_charger_config_msg_set_current_limit_encode(double value)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value / 0.1);
 800f80a:	a309      	add	r3, pc, #36	; (adr r3, 800f830 <can2_charger_config_msg_set_current_limit_encode+0x30>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f814:	f7f1 f80c 	bl	8000830 <__aeabi_ddiv>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4610      	mov	r0, r2
 800f81e:	4619      	mov	r1, r3
 800f820:	f7f1 f9b4 	bl	8000b8c <__aeabi_d2uiz>
 800f824:	4603      	mov	r3, r0
 800f826:	b29b      	uxth	r3, r3
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	9999999a 	.word	0x9999999a
 800f834:	3fb99999 	.word	0x3fb99999

0800f838 <can2_charger_config_msg_set_current_limit_decode>:

double can2_charger_config_msg_set_current_limit_decode(uint16_t value)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	80fb      	strh	r3, [r7, #6]
    return ((double)value * 0.1);
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	4618      	mov	r0, r3
 800f846:	f7f0 fe4f 	bl	80004e8 <__aeabi_ui2d>
 800f84a:	a309      	add	r3, pc, #36	; (adr r3, 800f870 <can2_charger_config_msg_set_current_limit_decode+0x38>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 fec4 	bl	80005dc <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	ec43 2b17 	vmov	d7, r2, r3
}
 800f85c:	eeb0 0a47 	vmov.f32	s0, s14
 800f860:	eef0 0a67 	vmov.f32	s1, s15
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	f3af 8000 	nop.w
 800f870:	9999999a 	.word	0x9999999a
 800f874:	3fb99999 	.word	0x3fb99999

0800f878 <can2_charger_config_msg_set_power_limit_encode>:
{
    return (value <= 133u);
}

uint16_t can2_charger_config_msg_set_power_limit_encode(double value)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f882:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f886:	f7f1 f981 	bl	8000b8c <__aeabi_d2uiz>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b29b      	uxth	r3, r3
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <can2_charger_config_msg_set_power_limit_decode>:

double can2_charger_config_msg_set_power_limit_decode(uint16_t value)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b082      	sub	sp, #8
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	4603      	mov	r3, r0
 800f89e:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f0 fe20 	bl	80004e8 <__aeabi_ui2d>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8b0:	eeb0 0a47 	vmov.f32	s0, s14
 800f8b4:	eef0 0a67 	vmov.f32	s1, s15
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <can2_charger_config_msg_set_enabled_encode>:
{
    return (value <= 2559u);
}

uint8_t can2_charger_config_msg_set_enabled_encode(double value)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f8c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8cc:	f7f1 f95e 	bl	8000b8c <__aeabi_d2uiz>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	b2db      	uxtb	r3, r3
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <can2_charger_config_msg_set_enabled_decode>:

double can2_charger_config_msg_set_enabled_decode(uint8_t value)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f0 fdfd 	bl	80004e8 <__aeabi_ui2d>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8f6:	eeb0 0a47 	vmov.f32	s0, s14
 800f8fa:	eef0 0a67 	vmov.f32	s1, s15
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <can2_charger_config_msg_set_time_out_encode>:
{
    return (value <= 1u);
}

uint8_t can2_charger_config_msg_set_time_out_encode(double value)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f90e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f912:	f7f1 f93b 	bl	8000b8c <__aeabi_d2uiz>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <can2_charger_config_msg_set_time_out_decode>:

double can2_charger_config_msg_set_time_out_decode(uint8_t value)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	4603      	mov	r3, r0
 800f92a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f0 fdda 	bl	80004e8 <__aeabi_ui2d>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	ec43 2b17 	vmov	d7, r2, r3
}
 800f93c:	eeb0 0a47 	vmov.f32	s0, s14
 800f940:	eef0 0a67 	vmov.f32	s1, s15
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d102      	bne.n	800f962 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 800f95c:	f06f 0315 	mvn.w	r3, #21
 800f960:	e00b      	b.n	800f97a <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	2201      	movs	r2, #1
 800f968:	2100      	movs	r1, #0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff f848 	bl	800ea00 <unpack_right_shift_u8>
 800f970:	4603      	mov	r3, r0
 800f972:	461a      	mov	r2, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	701a      	strb	r2, [r3, #0]

    return (0);
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <can2_cc_status_enable_ams_charging_decode>:
{
    return (uint8_t)(value);
}

double can2_cc_status_enable_ams_charging_decode(uint8_t value)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	4603      	mov	r3, r0
 800f98a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f98c:	79fb      	ldrb	r3, [r7, #7]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f0 fdaa 	bl	80004e8 <__aeabi_ui2d>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	ec43 2b17 	vmov	d7, r2, r3
}
 800f99c:	eeb0 0a47 	vmov.f32	s0, s14
 800f9a0:	eef0 0a67 	vmov.f32	s1, s15
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <can1_ams_status_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_status_1_rx_callback(ams_status_1_t* ams_status_1) {
 800f9aa:	b480      	push	{r7}
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]

}
 800f9b2:	bf00      	nop
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <can1_ams_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_temperatures_rx_callback(ams_temperatures_t* ams_temperatures) {
 800f9be:	b480      	push	{r7}
 800f9c0:	b083      	sub	sp, #12
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]

}
 800f9c6:	bf00      	nop
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr

0800f9d2 <can1_ams_cell_voltages_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_voltages_rx_callback(ams_cell_voltages_t* ams_cell_voltages) {
 800f9d2:	b480      	push	{r7}
 800f9d4:	b083      	sub	sp, #12
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]

}
 800f9da:	bf00      	nop
 800f9dc:	370c      	adds	r7, #12
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <can1_ams_cell_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_temperatures_rx_callback(ams_cell_temperatures_t* ams_cell_temperatures) {
 800f9e6:	b480      	push	{r7}
 800f9e8:	b083      	sub	sp, #12
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]

}
 800f9ee:	bf00      	nop
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <can2_amk1_setpoints_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can2_amk1_setpoints_1_rx_callback(amk1_setpoints_1_t* amk1_setpoints_1) {
 800f9fa:	b480      	push	{r7}
 800f9fc:	b083      	sub	sp, #12
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]

}
 800fa02:	bf00      	nop
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
	...

0800fa10 <can1_ams_cell_voltages_array_raise>:
static uint8_t can2_cc_status_flag = 0;

static CAN_HandleTypeDef* _hcan1;
static CAN_HandleTypeDef* _hcan2;

static void can1_ams_cell_voltages_array_raise(uint8_t index) {
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	4603      	mov	r3, r0
 800fa18:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  23 / 8];
    static uint8_t count = 0;

    if(index < 23) {
 800fa1a:	79fb      	ldrb	r3, [r7, #7]
 800fa1c:	2b16      	cmp	r3, #22
 800fa1e:	d844      	bhi.n	800faaa <can1_ams_cell_voltages_array_raise+0x9a>
        uint8_t div = index / 8;
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	08db      	lsrs	r3, r3, #3
 800fa24:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	f003 0307 	and.w	r3, r3, #7
 800fa2c:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800fa2e:	7abb      	ldrb	r3, [r7, #10]
 800fa30:	2201      	movs	r2, #1
 800fa32:	fa02 f303 	lsl.w	r3, r2, r3
 800fa36:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800fa38:	7afb      	ldrb	r3, [r7, #11]
 800fa3a:	4a1f      	ldr	r2, [pc, #124]	; (800fab8 <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa3c:	5cd2      	ldrb	r2, [r2, r3]
 800fa3e:	7a7b      	ldrb	r3, [r7, #9]
 800fa40:	4013      	ands	r3, r2
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d130      	bne.n	800faaa <can1_ams_cell_voltages_array_raise+0x9a>
            array[div] |= flag;
 800fa48:	7afb      	ldrb	r3, [r7, #11]
 800fa4a:	4a1b      	ldr	r2, [pc, #108]	; (800fab8 <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa4c:	5cd1      	ldrb	r1, [r2, r3]
 800fa4e:	7afb      	ldrb	r3, [r7, #11]
 800fa50:	7a7a      	ldrb	r2, [r7, #9]
 800fa52:	430a      	orrs	r2, r1
 800fa54:	b2d1      	uxtb	r1, r2
 800fa56:	4a18      	ldr	r2, [pc, #96]	; (800fab8 <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa58:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 23;
 800fa5a:	4b18      	ldr	r3, [pc, #96]	; (800fabc <can1_ams_cell_voltages_array_raise+0xac>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	1c5a      	adds	r2, r3, #1
 800fa60:	4b17      	ldr	r3, [pc, #92]	; (800fac0 <can1_ams_cell_voltages_array_raise+0xb0>)
 800fa62:	fb83 1302 	smull	r1, r3, r3, r2
 800fa66:	4413      	add	r3, r2
 800fa68:	1119      	asrs	r1, r3, #4
 800fa6a:	17d3      	asrs	r3, r2, #31
 800fa6c:	1ac9      	subs	r1, r1, r3
 800fa6e:	460b      	mov	r3, r1
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	440b      	add	r3, r1
 800fa74:	00db      	lsls	r3, r3, #3
 800fa76:	1a5b      	subs	r3, r3, r1
 800fa78:	1ad1      	subs	r1, r2, r3
 800fa7a:	b2ca      	uxtb	r2, r1
 800fa7c:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <can1_ams_cell_voltages_array_raise+0xac>)
 800fa7e:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fa80:	4b0e      	ldr	r3, [pc, #56]	; (800fabc <can1_ams_cell_voltages_array_raise+0xac>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d110      	bne.n	800faaa <can1_ams_cell_voltages_array_raise+0x9a>
                for(int i = 0; i < (1 + 23 / 8); i++) {
 800fa88:	2300      	movs	r3, #0
 800fa8a:	60fb      	str	r3, [r7, #12]
 800fa8c:	e007      	b.n	800fa9e <can1_ams_cell_voltages_array_raise+0x8e>
                    array[i] = 0;
 800fa8e:	4a0a      	ldr	r2, [pc, #40]	; (800fab8 <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	2200      	movs	r2, #0
 800fa96:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 23 / 8); i++) {
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	60fb      	str	r3, [r7, #12]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	ddf4      	ble.n	800fa8e <can1_ams_cell_voltages_array_raise+0x7e>
                }
                can1_ams_cell_voltages_flag = 1;
 800faa4:	4b07      	ldr	r3, [pc, #28]	; (800fac4 <can1_ams_cell_voltages_array_raise+0xb4>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800faaa:	bf00      	nop
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	20001638 	.word	0x20001638
 800fabc:	2000163b 	.word	0x2000163b
 800fac0:	b21642c9 	.word	0xb21642c9
 800fac4:	20001628 	.word	0x20001628

0800fac8 <can1_ams_cell_temperatures_array_raise>:
static void can1_ams_cell_temperatures_array_raise(uint8_t index) {
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	4603      	mov	r3, r0
 800fad0:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  11 / 8];
    static uint8_t count = 0;

    if(index < 11) {
 800fad2:	79fb      	ldrb	r3, [r7, #7]
 800fad4:	2b0a      	cmp	r3, #10
 800fad6:	d843      	bhi.n	800fb60 <can1_ams_cell_temperatures_array_raise+0x98>
        uint8_t div = index / 8;
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	08db      	lsrs	r3, r3, #3
 800fadc:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	f003 0307 	and.w	r3, r3, #7
 800fae4:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800fae6:	7abb      	ldrb	r3, [r7, #10]
 800fae8:	2201      	movs	r2, #1
 800faea:	fa02 f303 	lsl.w	r3, r2, r3
 800faee:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800faf0:	7afb      	ldrb	r3, [r7, #11]
 800faf2:	4a1e      	ldr	r2, [pc, #120]	; (800fb6c <can1_ams_cell_temperatures_array_raise+0xa4>)
 800faf4:	5cd2      	ldrb	r2, [r2, r3]
 800faf6:	7a7b      	ldrb	r3, [r7, #9]
 800faf8:	4013      	ands	r3, r2
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d12f      	bne.n	800fb60 <can1_ams_cell_temperatures_array_raise+0x98>
            array[div] |= flag;
 800fb00:	7afb      	ldrb	r3, [r7, #11]
 800fb02:	4a1a      	ldr	r2, [pc, #104]	; (800fb6c <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb04:	5cd1      	ldrb	r1, [r2, r3]
 800fb06:	7afb      	ldrb	r3, [r7, #11]
 800fb08:	7a7a      	ldrb	r2, [r7, #9]
 800fb0a:	430a      	orrs	r2, r1
 800fb0c:	b2d1      	uxtb	r1, r2
 800fb0e:	4a17      	ldr	r2, [pc, #92]	; (800fb6c <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb10:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 11;
 800fb12:	4b17      	ldr	r3, [pc, #92]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	1c59      	adds	r1, r3, #1
 800fb18:	4b16      	ldr	r3, [pc, #88]	; (800fb74 <can1_ams_cell_temperatures_array_raise+0xac>)
 800fb1a:	fb83 2301 	smull	r2, r3, r3, r1
 800fb1e:	105a      	asrs	r2, r3, #1
 800fb20:	17cb      	asrs	r3, r1, #31
 800fb22:	1ad2      	subs	r2, r2, r3
 800fb24:	4613      	mov	r3, r2
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	4413      	add	r3, r2
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	1aca      	subs	r2, r1, r3
 800fb30:	b2d2      	uxtb	r2, r2
 800fb32:	4b0f      	ldr	r3, [pc, #60]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb34:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fb36:	4b0e      	ldr	r3, [pc, #56]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d110      	bne.n	800fb60 <can1_ams_cell_temperatures_array_raise+0x98>
                for(int i = 0; i < (1 + 11 / 8); i++) {
 800fb3e:	2300      	movs	r3, #0
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	e007      	b.n	800fb54 <can1_ams_cell_temperatures_array_raise+0x8c>
                    array[i] = 0;
 800fb44:	4a09      	ldr	r2, [pc, #36]	; (800fb6c <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	4413      	add	r3, r2
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 11 / 8); i++) {
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3301      	adds	r3, #1
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	ddf4      	ble.n	800fb44 <can1_ams_cell_temperatures_array_raise+0x7c>
                }
                can1_ams_cell_temperatures_flag = 1;
 800fb5a:	4b07      	ldr	r3, [pc, #28]	; (800fb78 <can1_ams_cell_temperatures_array_raise+0xb0>)
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800fb60:	bf00      	nop
 800fb62:	3714      	adds	r7, #20
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	2000163c 	.word	0x2000163c
 800fb70:	2000163e 	.word	0x2000163e
 800fb74:	2e8ba2e9 	.word	0x2e8ba2e9
 800fb78:	20001629 	.word	0x20001629

0800fb7c <can2_charger_config_array_raise>:
static void can2_charger_config_array_raise(uint8_t index) {
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	4603      	mov	r3, r0
 800fb84:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  68 / 8];
    static uint8_t count = 0;

    if(index < 68) {
 800fb86:	79fb      	ldrb	r3, [r7, #7]
 800fb88:	2b43      	cmp	r3, #67	; 0x43
 800fb8a:	d842      	bhi.n	800fc12 <can2_charger_config_array_raise+0x96>
        uint8_t div = index / 8;
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	08db      	lsrs	r3, r3, #3
 800fb90:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fb92:	79fb      	ldrb	r3, [r7, #7]
 800fb94:	f003 0307 	and.w	r3, r3, #7
 800fb98:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800fb9a:	7abb      	ldrb	r3, [r7, #10]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800fba2:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800fba4:	7afb      	ldrb	r3, [r7, #11]
 800fba6:	4a1e      	ldr	r2, [pc, #120]	; (800fc20 <can2_charger_config_array_raise+0xa4>)
 800fba8:	5cd2      	ldrb	r2, [r2, r3]
 800fbaa:	7a7b      	ldrb	r3, [r7, #9]
 800fbac:	4013      	ands	r3, r2
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d12e      	bne.n	800fc12 <can2_charger_config_array_raise+0x96>
            array[div] |= flag;
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	4a1a      	ldr	r2, [pc, #104]	; (800fc20 <can2_charger_config_array_raise+0xa4>)
 800fbb8:	5cd1      	ldrb	r1, [r2, r3]
 800fbba:	7afb      	ldrb	r3, [r7, #11]
 800fbbc:	7a7a      	ldrb	r2, [r7, #9]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	b2d1      	uxtb	r1, r2
 800fbc2:	4a17      	ldr	r2, [pc, #92]	; (800fc20 <can2_charger_config_array_raise+0xa4>)
 800fbc4:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 68;
 800fbc6:	4b17      	ldr	r3, [pc, #92]	; (800fc24 <can2_charger_config_array_raise+0xa8>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	1c5a      	adds	r2, r3, #1
 800fbcc:	4b16      	ldr	r3, [pc, #88]	; (800fc28 <can2_charger_config_array_raise+0xac>)
 800fbce:	fb83 1302 	smull	r1, r3, r3, r2
 800fbd2:	1159      	asrs	r1, r3, #5
 800fbd4:	17d3      	asrs	r3, r2, #31
 800fbd6:	1ac9      	subs	r1, r1, r3
 800fbd8:	460b      	mov	r3, r1
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	440b      	add	r3, r1
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	1ad1      	subs	r1, r2, r3
 800fbe2:	b2ca      	uxtb	r2, r1
 800fbe4:	4b0f      	ldr	r3, [pc, #60]	; (800fc24 <can2_charger_config_array_raise+0xa8>)
 800fbe6:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fbe8:	4b0e      	ldr	r3, [pc, #56]	; (800fc24 <can2_charger_config_array_raise+0xa8>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d110      	bne.n	800fc12 <can2_charger_config_array_raise+0x96>
                for(int i = 0; i < (1 + 68 / 8); i++) {
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	e007      	b.n	800fc06 <can2_charger_config_array_raise+0x8a>
                    array[i] = 0;
 800fbf6:	4a0a      	ldr	r2, [pc, #40]	; (800fc20 <can2_charger_config_array_raise+0xa4>)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 68 / 8); i++) {
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	60fb      	str	r3, [r7, #12]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b08      	cmp	r3, #8
 800fc0a:	ddf4      	ble.n	800fbf6 <can2_charger_config_array_raise+0x7a>
                }
                can2_charger_config_flag = 1;
 800fc0c:	4b07      	ldr	r3, [pc, #28]	; (800fc2c <can2_charger_config_array_raise+0xb0>)
 800fc0e:	2201      	movs	r2, #1
 800fc10:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800fc12:	bf00      	nop
 800fc14:	3714      	adds	r7, #20
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	20001640 	.word	0x20001640
 800fc24:	20001649 	.word	0x20001649
 800fc28:	78787879 	.word	0x78787879
 800fc2c:	2000162e 	.word	0x2000162e

0800fc30 <can1_ams_status_1_decode>:
/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_decode() {
 800fc30:	b580      	push	{r7, lr}
 800fc32:	af00      	add	r7, sp, #0
   can1_ams_status_1_unpack(&can1_ams_status_1, rx_data, 8);
 800fc34:	2208      	movs	r2, #8
 800fc36:	4905      	ldr	r1, [pc, #20]	; (800fc4c <can1_ams_status_1_decode+0x1c>)
 800fc38:	4805      	ldr	r0, [pc, #20]	; (800fc50 <can1_ams_status_1_decode+0x20>)
 800fc3a:	f7f1 fb61 	bl	8001300 <can1_ams_status_1_unpack>
   can1_ams_status_1_flag = 1;
 800fc3e:	4b05      	ldr	r3, [pc, #20]	; (800fc54 <can1_ams_status_1_decode+0x24>)
 800fc40:	2201      	movs	r2, #1
 800fc42:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1_receive();
 800fc44:	f002 fb84 	bl	8012350 <can1_ams_status_1_receive>
}
 800fc48:	bf00      	nop
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	200014d0 	.word	0x200014d0
 800fc50:	200014d8 	.word	0x200014d8
 800fc54:	20001625 	.word	0x20001625

0800fc58 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800fc5c:	2208      	movs	r2, #8
 800fc5e:	4905      	ldr	r1, [pc, #20]	; (800fc74 <can1_dbu_status_1_decode+0x1c>)
 800fc60:	4805      	ldr	r0, [pc, #20]	; (800fc78 <can1_dbu_status_1_decode+0x20>)
 800fc62:	f7f1 ff18 	bl	8001a96 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 800fc66:	4b05      	ldr	r3, [pc, #20]	; (800fc7c <can1_dbu_status_1_decode+0x24>)
 800fc68:	2201      	movs	r2, #1
 800fc6a:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1_receive();
 800fc6c:	f002 fc30 	bl	80124d0 <can1_dbu_status_1_receive>
}
 800fc70:	bf00      	nop
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	200014d0 	.word	0x200014d0
 800fc78:	200014e8 	.word	0x200014e8
 800fc7c:	20001626 	.word	0x20001626

0800fc80 <can1_ams_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_decode() {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	af00      	add	r7, sp, #0
   can1_ams_temperatures_unpack(&can1_ams_temperatures, rx_data, 6);
 800fc84:	2206      	movs	r2, #6
 800fc86:	4905      	ldr	r1, [pc, #20]	; (800fc9c <can1_ams_temperatures_decode+0x1c>)
 800fc88:	4805      	ldr	r0, [pc, #20]	; (800fca0 <can1_ams_temperatures_decode+0x20>)
 800fc8a:	f7f2 f893 	bl	8001db4 <can1_ams_temperatures_unpack>
   can1_ams_temperatures_flag = 1;
 800fc8e:	4b05      	ldr	r3, [pc, #20]	; (800fca4 <can1_ams_temperatures_decode+0x24>)
 800fc90:	2201      	movs	r2, #1
 800fc92:	701a      	strb	r2, [r3, #0]
   can1_ams_temperatures_receive();
 800fc94:	f002 fc5a 	bl	801254c <can1_ams_temperatures_receive>
}
 800fc98:	bf00      	nop
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	200014d0 	.word	0x200014d0
 800fca0:	200014ec 	.word	0x200014ec
 800fca4:	20001627 	.word	0x20001627

0800fca8 <can1_ams_cell_voltages_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_decode() {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	af00      	add	r7, sp, #0
   can1_ams_cell_voltages_unpack(&can1_ams_cell_voltages, rx_data, 7);
 800fcac:	2207      	movs	r2, #7
 800fcae:	4906      	ldr	r1, [pc, #24]	; (800fcc8 <can1_ams_cell_voltages_decode+0x20>)
 800fcb0:	4806      	ldr	r0, [pc, #24]	; (800fccc <can1_ams_cell_voltages_decode+0x24>)
 800fcb2:	f7f3 fbc9 	bl	8003448 <can1_ams_cell_voltages_unpack>
   can1_ams_cell_voltages_array_raise(can1_ams_cell_voltages.voltage_multiplexor);
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <can1_ams_cell_voltages_decode+0x24>)
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff fea8 	bl	800fa10 <can1_ams_cell_voltages_array_raise>
   can1_ams_cell_voltages_receive();
 800fcc0:	f002 fc8a 	bl	80125d8 <can1_ams_cell_voltages_receive>
}
 800fcc4:	bf00      	nop
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	200014d0 	.word	0x200014d0
 800fccc:	200014f4 	.word	0x200014f4

0800fcd0 <can1_ams_cell_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_decode() {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	af00      	add	r7, sp, #0
   can1_ams_cell_temperatures_unpack(&can1_ams_cell_temperatures, rx_data, 8);
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	4906      	ldr	r1, [pc, #24]	; (800fcf0 <can1_ams_cell_temperatures_decode+0x20>)
 800fcd8:	4806      	ldr	r0, [pc, #24]	; (800fcf4 <can1_ams_cell_temperatures_decode+0x24>)
 800fcda:	f7fa fef1 	bl	800aac0 <can1_ams_cell_temperatures_unpack>
   can1_ams_cell_temperatures_array_raise(can1_ams_cell_temperatures.temperature_multiplexor);
 800fcde:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <can1_ams_cell_temperatures_decode+0x24>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fef0 	bl	800fac8 <can1_ams_cell_temperatures_array_raise>
   can1_ams_cell_temperatures_receive();
 800fce8:	f003 fae2 	bl	80132b0 <can1_ams_cell_temperatures_receive>
}
 800fcec:	bf00      	nop
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	200014d0 	.word	0x200014d0
 800fcf4:	20001574 	.word	0x20001574

0800fcf8 <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	4905      	ldr	r1, [pc, #20]	; (800fd14 <can2_amk1_setpoints_1_decode+0x1c>)
 800fd00:	4805      	ldr	r0, [pc, #20]	; (800fd18 <can2_amk1_setpoints_1_decode+0x20>)
 800fd02:	f7fe fed4 	bl	800eaae <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 800fd06:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <can2_amk1_setpoints_1_decode+0x24>)
 800fd08:	2201      	movs	r2, #1
 800fd0a:	701a      	strb	r2, [r3, #0]
   can2_amk1_setpoints_1_receive();
 800fd0c:	f003 fdfa 	bl	8013904 <can2_amk1_setpoints_1_receive>
}
 800fd10:	bf00      	nop
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	200014d0 	.word	0x200014d0
 800fd18:	200015f0 	.word	0x200015f0
 800fd1c:	2000162a 	.word	0x2000162a

0800fd20 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 800fd20:	b580      	push	{r7, lr}
 800fd22:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 800fd24:	2206      	movs	r2, #6
 800fd26:	4905      	ldr	r1, [pc, #20]	; (800fd3c <can2_ivt_msg_result_i_decode+0x1c>)
 800fd28:	4805      	ldr	r0, [pc, #20]	; (800fd40 <can2_ivt_msg_result_i_decode+0x20>)
 800fd2a:	f7ff f85b 	bl	800ede4 <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 800fd2e:	4b05      	ldr	r3, [pc, #20]	; (800fd44 <can2_ivt_msg_result_i_decode+0x24>)
 800fd30:	2201      	movs	r2, #1
 800fd32:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_i_receive();
 800fd34:	f003 fe62 	bl	80139fc <can2_ivt_msg_result_i_receive>
}
 800fd38:	bf00      	nop
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	200014d0 	.word	0x200014d0
 800fd40:	20001600 	.word	0x20001600
 800fd44:	2000162b 	.word	0x2000162b

0800fd48 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 800fd4c:	2206      	movs	r2, #6
 800fd4e:	4905      	ldr	r1, [pc, #20]	; (800fd64 <can2_ivt_msg_result_u1_decode+0x1c>)
 800fd50:	4805      	ldr	r0, [pc, #20]	; (800fd68 <can2_ivt_msg_result_u1_decode+0x20>)
 800fd52:	f7ff f997 	bl	800f084 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 800fd56:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <can2_ivt_msg_result_u1_decode+0x24>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u1_receive();
 800fd5c:	f003 fe72 	bl	8013a44 <can2_ivt_msg_result_u1_receive>
}
 800fd60:	bf00      	nop
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	200014d0 	.word	0x200014d0
 800fd68:	20001608 	.word	0x20001608
 800fd6c:	2000162c 	.word	0x2000162c

0800fd70 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800fd74:	2206      	movs	r2, #6
 800fd76:	4905      	ldr	r1, [pc, #20]	; (800fd8c <can2_ivt_msg_result_u3_decode+0x1c>)
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <can2_ivt_msg_result_u3_decode+0x20>)
 800fd7a:	f7ff fad3 	bl	800f324 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 800fd7e:	4b05      	ldr	r3, [pc, #20]	; (800fd94 <can2_ivt_msg_result_u3_decode+0x24>)
 800fd80:	2201      	movs	r2, #1
 800fd82:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u3_receive();
 800fd84:	f003 fe82 	bl	8013a8c <can2_ivt_msg_result_u3_receive>
}
 800fd88:	bf00      	nop
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	200014d0 	.word	0x200014d0
 800fd90:	20001610 	.word	0x20001610
 800fd94:	2000162d 	.word	0x2000162d

0800fd98 <can2_charger_config_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_decode() {
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	af00      	add	r7, sp, #0
   can2_charger_config_unpack(&can2_charger_config, rx_data, 4);
 800fd9c:	2204      	movs	r2, #4
 800fd9e:	4906      	ldr	r1, [pc, #24]	; (800fdb8 <can2_charger_config_decode+0x20>)
 800fda0:	4806      	ldr	r0, [pc, #24]	; (800fdbc <can2_charger_config_decode+0x24>)
 800fda2:	f7ff fc5b 	bl	800f65c <can2_charger_config_unpack>
   can2_charger_config_array_raise(can2_charger_config.set_mux);
 800fda6:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <can2_charger_config_decode+0x24>)
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7ff fee6 	bl	800fb7c <can2_charger_config_array_raise>
   can2_charger_config_receive();
 800fdb0:	f003 fe90 	bl	8013ad4 <can2_charger_config_receive>
}
 800fdb4:	bf00      	nop
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	200014d0 	.word	0x200014d0
 800fdbc:	20001618 	.word	0x20001618

0800fdc0 <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	4905      	ldr	r1, [pc, #20]	; (800fddc <can2_cc_status_decode+0x1c>)
 800fdc8:	4805      	ldr	r0, [pc, #20]	; (800fde0 <can2_cc_status_decode+0x20>)
 800fdca:	f7ff fdbe 	bl	800f94a <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <can2_cc_status_decode+0x24>)
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	701a      	strb	r2, [r3, #0]
   can2_cc_status_receive();
 800fdd4:	f003 fed2 	bl	8013b7c <can2_cc_status_receive>
}
 800fdd8:	bf00      	nop
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	200014d0 	.word	0x200014d0
 800fde0:	20001624 	.word	0x20001624
 800fde4:	2000162f 	.word	0x2000162f

0800fde8 <can1_ams_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_transmit() {
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b09a      	sub	sp, #104	; 0x68
 800fdec:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800fdee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	605a      	str	r2, [r3, #4]
 800fdf8:	609a      	str	r2, [r3, #8]
 800fdfa:	60da      	str	r2, [r3, #12]
 800fdfc:	611a      	str	r2, [r3, #16]
 800fdfe:	615a      	str	r2, [r3, #20]
 800fe00:	2320      	movs	r3, #32
 800fe02:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe04:	2308      	movs	r3, #8
 800fe06:	65bb      	str	r3, [r7, #88]	; 0x58
       .StdId = 32,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_status_1_t ams_status_1;
   can1_ams_status_1_tx_callback(&ams_status_1);
 800fe08:	463b      	mov	r3, r7
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f005 fa24 	bl	8015258 <can1_ams_status_1_tx_callback>

   can1_ams_status_1.charging_status = can1_ams_status_1_charging_status_encode(ams_status_1.charging_status);
 800fe10:	78fb      	ldrb	r3, [r7, #3]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f0 fb68 	bl	80004e8 <__aeabi_ui2d>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	ec43 2b10 	vmov	d0, r2, r3
 800fe20:	f7f1 fb48 	bl	80014b4 <can1_ams_status_1_charging_status_encode>
 800fe24:	4603      	mov	r3, r0
 800fe26:	461a      	mov	r2, r3
 800fe28:	4b61      	ldr	r3, [pc, #388]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fe2a:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1.air1_closed = can1_ams_status_1_air1_closed_encode(ams_status_1.air1_closed);
 800fe2c:	783b      	ldrb	r3, [r7, #0]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7f0 fb5a 	bl	80004e8 <__aeabi_ui2d>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	ec43 2b10 	vmov	d0, r2, r3
 800fe3c:	f7f1 fb5d 	bl	80014fa <can1_ams_status_1_air1_closed_encode>
 800fe40:	4603      	mov	r3, r0
 800fe42:	461a      	mov	r2, r3
 800fe44:	4b5a      	ldr	r3, [pc, #360]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fe46:	705a      	strb	r2, [r3, #1]
   can1_ams_status_1.air2_closed = can1_ams_status_1_air2_closed_encode(ams_status_1.air2_closed);
 800fe48:	787b      	ldrb	r3, [r7, #1]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f0 fb4c 	bl	80004e8 <__aeabi_ui2d>
 800fe50:	4602      	mov	r2, r0
 800fe52:	460b      	mov	r3, r1
 800fe54:	ec43 2b10 	vmov	d0, r2, r3
 800fe58:	f7f1 fb72 	bl	8001540 <can1_ams_status_1_air2_closed_encode>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	461a      	mov	r2, r3
 800fe60:	4b53      	ldr	r3, [pc, #332]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fe62:	709a      	strb	r2, [r3, #2]
   can1_ams_status_1.sc_closed = can1_ams_status_1_sc_closed_encode(ams_status_1.sc_closed);
 800fe64:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f0 fb3d 	bl	80004e8 <__aeabi_ui2d>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	460b      	mov	r3, r1
 800fe72:	ec43 2b10 	vmov	d0, r2, r3
 800fe76:	f7f1 fb86 	bl	8001586 <can1_ams_status_1_sc_closed_encode>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4b4c      	ldr	r3, [pc, #304]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fe80:	70da      	strb	r2, [r3, #3]
   can1_ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_encode(ams_status_1.pre_charge_status);
 800fe82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f0 fb2e 	bl	80004e8 <__aeabi_ui2d>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	ec43 2b10 	vmov	d0, r2, r3
 800fe94:	f7f1 fb9a 	bl	80015cc <can1_ams_status_1_pre_charge_status_encode>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	4b44      	ldr	r3, [pc, #272]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fe9e:	711a      	strb	r2, [r3, #4]
   can1_ams_status_1.ams_error = can1_ams_status_1_ams_error_encode(ams_status_1.ams_error);
 800fea0:	78bb      	ldrb	r3, [r7, #2]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7f0 fb20 	bl	80004e8 <__aeabi_ui2d>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	ec43 2b10 	vmov	d0, r2, r3
 800feb0:	f7f1 fbaf 	bl	8001612 <can1_ams_status_1_ams_error_encode>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	4b3d      	ldr	r3, [pc, #244]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800feba:	715a      	strb	r2, [r3, #5]
   can1_ams_status_1.imd_error = can1_ams_status_1_imd_error_encode(ams_status_1.imd_error);
 800febc:	7c3b      	ldrb	r3, [r7, #16]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7f0 fb12 	bl	80004e8 <__aeabi_ui2d>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	ec43 2b10 	vmov	d0, r2, r3
 800fecc:	f7f1 fbc4 	bl	8001658 <can1_ams_status_1_imd_error_encode>
 800fed0:	4603      	mov	r3, r0
 800fed2:	461a      	mov	r2, r3
 800fed4:	4b36      	ldr	r3, [pc, #216]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800fed6:	719a      	strb	r2, [r3, #6]
   can1_ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_encode(ams_status_1.state_of_charge);
 800fed8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800fedc:	eeb0 0a47 	vmov.f32	s0, s14
 800fee0:	eef0 0a67 	vmov.f32	s1, s15
 800fee4:	f7f1 fbdb 	bl	800169e <can1_ams_status_1_state_of_charge_encode>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
 800feec:	4b30      	ldr	r3, [pc, #192]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800feee:	71da      	strb	r2, [r3, #7]
   can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode(ams_status_1.min_cell_voltage);
 800fef0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800fef4:	eeb0 0a47 	vmov.f32	s0, s14
 800fef8:	eef0 0a67 	vmov.f32	s1, s15
 800fefc:	f7f1 fbf4 	bl	80016e8 <can1_ams_status_1_min_cell_voltage_encode>
 800ff00:	4603      	mov	r3, r0
 800ff02:	461a      	mov	r2, r3
 800ff04:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff06:	721a      	strb	r2, [r3, #8]
   can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode(ams_status_1.max_cell_voltage);
 800ff08:	ed97 7b08 	vldr	d7, [r7, #32]
 800ff0c:	eeb0 0a47 	vmov.f32	s0, s14
 800ff10:	eef0 0a67 	vmov.f32	s1, s15
 800ff14:	f7f1 fc40 	bl	8001798 <can1_ams_status_1_max_cell_voltage_encode>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4b24      	ldr	r3, [pc, #144]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff1e:	725a      	strb	r2, [r3, #9]
   can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(ams_status_1.min_cell_temperature);
 800ff20:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800ff24:	eeb0 0a47 	vmov.f32	s0, s14
 800ff28:	eef0 0a67 	vmov.f32	s1, s15
 800ff2c:	f7f1 fc8c 	bl	8001848 <can1_ams_status_1_min_cell_temperature_encode>
 800ff30:	4603      	mov	r3, r0
 800ff32:	461a      	mov	r2, r3
 800ff34:	4b1e      	ldr	r3, [pc, #120]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff36:	815a      	strh	r2, [r3, #10]
   can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(ams_status_1.max_cell_temperature);
 800ff38:	ed97 7b06 	vldr	d7, [r7, #24]
 800ff3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ff40:	eef0 0a67 	vmov.f32	s1, s15
 800ff44:	f7f1 fcd8 	bl	80018f8 <can1_ams_status_1_max_cell_temperature_encode>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	4b18      	ldr	r3, [pc, #96]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff4e:	819a      	strh	r2, [r3, #12]
   can1_ams_status_1.fan_speed = can1_ams_status_1_fan_speed_encode(ams_status_1.fan_speed);
 800ff50:	ed97 7b02 	vldr	d7, [r7, #8]
 800ff54:	eeb0 0a47 	vmov.f32	s0, s14
 800ff58:	eef0 0a67 	vmov.f32	s1, s15
 800ff5c:	f7f1 fd22 	bl	80019a4 <can1_ams_status_1_fan_speed_encode>
 800ff60:	4603      	mov	r3, r0
 800ff62:	461a      	mov	r2, r3
 800ff64:	4b12      	ldr	r3, [pc, #72]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff66:	739a      	strb	r2, [r3, #14]

   can1_ams_status_1_pack(tx_data, &can1_ams_status_1, 8);
 800ff68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ff6c:	2208      	movs	r2, #8
 800ff6e:	4910      	ldr	r1, [pc, #64]	; (800ffb0 <can1_ams_status_1_transmit+0x1c8>)
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7f1 f8ba 	bl	80010ea <can1_ams_status_1_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 800ff76:	e00d      	b.n	800ff94 <can1_ams_status_1_transmit+0x1ac>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 800ff78:	4b0e      	ldr	r3, [pc, #56]	; (800ffb4 <can1_ams_status_1_transmit+0x1cc>)
 800ff7a:	6818      	ldr	r0, [r3, #0]
 800ff7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ff80:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <can1_ams_status_1_transmit+0x1d0>)
 800ff86:	f015 fbab 	bl	80256e0 <HAL_CAN_AddTxMessage>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <can1_ams_status_1_transmit+0x1ac>
       Error_Handler();
 800ff90:	f007 f844 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 800ff94:	4b07      	ldr	r3, [pc, #28]	; (800ffb4 <can1_ams_status_1_transmit+0x1cc>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f015 fc7c 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1e9      	bne.n	800ff78 <can1_ams_status_1_transmit+0x190>
       }
   }
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop
 800ffa8:	3768      	adds	r7, #104	; 0x68
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	200014d8 	.word	0x200014d8
 800ffb4:	20001630 	.word	0x20001630
 800ffb8:	200014cc 	.word	0x200014cc

0800ffbc <can1_dbu_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_transmit() {
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b08e      	sub	sp, #56	; 0x38
 800ffc0:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800ffc2:	f107 0318 	add.w	r3, r7, #24
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	605a      	str	r2, [r3, #4]
 800ffcc:	609a      	str	r2, [r3, #8]
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	611a      	str	r2, [r3, #16]
 800ffd2:	615a      	str	r2, [r3, #20]
 800ffd4:	2340      	movs	r3, #64	; 0x40
 800ffd6:	61bb      	str	r3, [r7, #24]
 800ffd8:	2308      	movs	r3, #8
 800ffda:	62bb      	str	r3, [r7, #40]	; 0x28
       .StdId = 64,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   dbu_status_1_t dbu_status_1;
   can1_dbu_status_1_tx_callback(&dbu_status_1);
 800ffdc:	463b      	mov	r3, r7
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f005 fabc 	bl	801555c <can1_dbu_status_1_tx_callback>

   can1_dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_encode(dbu_status_1.activate_ts_button);
 800ffe4:	783b      	ldrb	r3, [r7, #0]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7f0 fa7e 	bl	80004e8 <__aeabi_ui2d>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	ec43 2b10 	vmov	d0, r2, r3
 800fff4:	f7f1 fd9b 	bl	8001b2e <can1_dbu_status_1_activate_ts_button_encode>
 800fff8:	4603      	mov	r3, r0
 800fffa:	461a      	mov	r2, r3
 800fffc:	4b1f      	ldr	r3, [pc, #124]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 800fffe:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_encode(dbu_status_1.ready_to_drive_button);
 8010000:	7c3b      	ldrb	r3, [r7, #16]
 8010002:	4618      	mov	r0, r3
 8010004:	f7f0 fa70 	bl	80004e8 <__aeabi_ui2d>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	ec43 2b10 	vmov	d0, r2, r3
 8010010:	f7f1 fdb0 	bl	8001b74 <can1_dbu_status_1_ready_to_drive_button_encode>
 8010014:	4603      	mov	r3, r0
 8010016:	461a      	mov	r2, r3
 8010018:	4b18      	ldr	r3, [pc, #96]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 801001a:	705a      	strb	r2, [r3, #1]
   can1_dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_encode(dbu_status_1.dbu_temperature);
 801001c:	ed97 7b02 	vldr	d7, [r7, #8]
 8010020:	eeb0 0a47 	vmov.f32	s0, s14
 8010024:	eef0 0a67 	vmov.f32	s1, s15
 8010028:	f7f1 fdca 	bl	8001bc0 <can1_dbu_status_1_dbu_temperature_encode>
 801002c:	4603      	mov	r3, r0
 801002e:	461a      	mov	r2, r3
 8010030:	4b12      	ldr	r3, [pc, #72]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 8010032:	805a      	strh	r2, [r3, #2]

   can1_dbu_status_1_pack(tx_data, &can1_dbu_status_1, 8);
 8010034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010038:	2208      	movs	r2, #8
 801003a:	4910      	ldr	r1, [pc, #64]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 801003c:	4618      	mov	r0, r3
 801003e:	f7f1 fcd4 	bl	80019ea <can1_dbu_status_1_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010042:	e00d      	b.n	8010060 <can1_dbu_status_1_transmit+0xa4>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010044:	4b0e      	ldr	r3, [pc, #56]	; (8010080 <can1_dbu_status_1_transmit+0xc4>)
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801004c:	f107 0118 	add.w	r1, r7, #24
 8010050:	4b0c      	ldr	r3, [pc, #48]	; (8010084 <can1_dbu_status_1_transmit+0xc8>)
 8010052:	f015 fb45 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <can1_dbu_status_1_transmit+0xa4>
       Error_Handler();
 801005c:	f006 ffde 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010060:	4b07      	ldr	r3, [pc, #28]	; (8010080 <can1_dbu_status_1_transmit+0xc4>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4618      	mov	r0, r3
 8010066:	f015 fc16 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e9      	bne.n	8010044 <can1_dbu_status_1_transmit+0x88>
       }
   }
}
 8010070:	bf00      	nop
 8010072:	bf00      	nop
 8010074:	3738      	adds	r7, #56	; 0x38
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200014e8 	.word	0x200014e8
 8010080:	20001630 	.word	0x20001630
 8010084:	200014cc 	.word	0x200014cc

08010088 <can1_ams_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_transmit() {
 8010088:	b580      	push	{r7, lr}
 801008a:	b090      	sub	sp, #64	; 0x40
 801008c:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801008e:	f107 0320 	add.w	r3, r7, #32
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
 8010096:	605a      	str	r2, [r3, #4]
 8010098:	609a      	str	r2, [r3, #8]
 801009a:	60da      	str	r2, [r3, #12]
 801009c:	611a      	str	r2, [r3, #16]
 801009e:	615a      	str	r2, [r3, #20]
 80100a0:	2323      	movs	r3, #35	; 0x23
 80100a2:	623b      	str	r3, [r7, #32]
 80100a4:	2306      	movs	r3, #6
 80100a6:	633b      	str	r3, [r7, #48]	; 0x30
       .StdId = 35,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_temperatures_t ams_temperatures;
   can1_ams_temperatures_tx_callback(&ams_temperatures);
 80100a8:	463b      	mov	r3, r7
 80100aa:	4618      	mov	r0, r3
 80100ac:	f005 f9de 	bl	801546c <can1_ams_temperatures_tx_callback>

   can1_ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_encode(ams_temperatures.pre_charge_resistor_temperature);
 80100b0:	ed97 7b06 	vldr	d7, [r7, #24]
 80100b4:	eeb0 0a47 	vmov.f32	s0, s14
 80100b8:	eef0 0a67 	vmov.f32	s1, s15
 80100bc:	f7f1 ff24 	bl	8001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>
 80100c0:	4603      	mov	r3, r0
 80100c2:	461a      	mov	r2, r3
 80100c4:	4b24      	ldr	r3, [pc, #144]	; (8010158 <can1_ams_temperatures_transmit+0xd0>)
 80100c6:	801a      	strh	r2, [r3, #0]
   can1_ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_encode(ams_temperatures.fuse_resistor_temperature);
 80100c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80100cc:	eeb0 0a47 	vmov.f32	s0, s14
 80100d0:	eef0 0a67 	vmov.f32	s1, s15
 80100d4:	f7f1 ff70 	bl	8001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>
 80100d8:	4603      	mov	r3, r0
 80100da:	461a      	mov	r2, r3
 80100dc:	4b1e      	ldr	r3, [pc, #120]	; (8010158 <can1_ams_temperatures_transmit+0xd0>)
 80100de:	805a      	strh	r2, [r3, #2]
   can1_ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_encode(ams_temperatures.aux_1_temperature);
 80100e0:	ed97 7b00 	vldr	d7, [r7]
 80100e4:	eeb0 0a47 	vmov.f32	s0, s14
 80100e8:	eef0 0a67 	vmov.f32	s1, s15
 80100ec:	f7f1 ffbc 	bl	8002068 <can1_ams_temperatures_aux_1_temperature_encode>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	4b18      	ldr	r3, [pc, #96]	; (8010158 <can1_ams_temperatures_transmit+0xd0>)
 80100f6:	809a      	strh	r2, [r3, #4]
   can1_ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_encode(ams_temperatures.aux_2_temperature);
 80100f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80100fc:	eeb0 0a47 	vmov.f32	s0, s14
 8010100:	eef0 0a67 	vmov.f32	s1, s15
 8010104:	f7f2 f808 	bl	8002118 <can1_ams_temperatures_aux_2_temperature_encode>
 8010108:	4603      	mov	r3, r0
 801010a:	461a      	mov	r2, r3
 801010c:	4b12      	ldr	r3, [pc, #72]	; (8010158 <can1_ams_temperatures_transmit+0xd0>)
 801010e:	80da      	strh	r2, [r3, #6]

   can1_ams_temperatures_pack(tx_data, &can1_ams_temperatures, 6);
 8010110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010114:	2206      	movs	r2, #6
 8010116:	4910      	ldr	r1, [pc, #64]	; (8010158 <can1_ams_temperatures_transmit+0xd0>)
 8010118:	4618      	mov	r0, r3
 801011a:	f7f1 fda7 	bl	8001c6c <can1_ams_temperatures_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801011e:	e00d      	b.n	801013c <can1_ams_temperatures_transmit+0xb4>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010120:	4b0e      	ldr	r3, [pc, #56]	; (801015c <can1_ams_temperatures_transmit+0xd4>)
 8010122:	6818      	ldr	r0, [r3, #0]
 8010124:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010128:	f107 0120 	add.w	r1, r7, #32
 801012c:	4b0c      	ldr	r3, [pc, #48]	; (8010160 <can1_ams_temperatures_transmit+0xd8>)
 801012e:	f015 fad7 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <can1_ams_temperatures_transmit+0xb4>
       Error_Handler();
 8010138:	f006 ff70 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801013c:	4b07      	ldr	r3, [pc, #28]	; (801015c <can1_ams_temperatures_transmit+0xd4>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4618      	mov	r0, r3
 8010142:	f015 fba8 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1e9      	bne.n	8010120 <can1_ams_temperatures_transmit+0x98>
       }
   }
}
 801014c:	bf00      	nop
 801014e:	bf00      	nop
 8010150:	3740      	adds	r7, #64	; 0x40
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	200014ec 	.word	0x200014ec
 801015c:	20001630 	.word	0x20001630
 8010160:	200014cc 	.word	0x200014cc

08010164 <can1_ams_cell_voltages_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_transmit() {
 8010164:	b580      	push	{r7, lr}
 8010166:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801016a:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801016c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8010170:	2200      	movs	r2, #0
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	605a      	str	r2, [r3, #4]
 8010176:	609a      	str	r2, [r3, #8]
 8010178:	60da      	str	r2, [r3, #12]
 801017a:	611a      	str	r2, [r3, #16]
 801017c:	615a      	str	r2, [r3, #20]
 801017e:	2321      	movs	r3, #33	; 0x21
 8010180:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8010184:	2307      	movs	r3, #7
 8010186:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
       .StdId = 33,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_voltages_t ams_cell_voltages;
   can1_ams_cell_voltages_tx_callback(&ams_cell_voltages);
 801018a:	463b      	mov	r3, r7
 801018c:	4618      	mov	r0, r3
 801018e:	f005 f981 	bl	8015494 <can1_ams_cell_voltages_tx_callback>

   can1_ams_cell_voltages.voltage_multiplexor = can1_ams_cell_voltages_voltage_multiplexor_encode(ams_cell_voltages.voltage_multiplexor);
 8010192:	463b      	mov	r3, r7
 8010194:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8010198:	4618      	mov	r0, r3
 801019a:	f7f0 f9a5 	bl	80004e8 <__aeabi_ui2d>
 801019e:	4602      	mov	r2, r0
 80101a0:	460b      	mov	r3, r1
 80101a2:	ec43 2b10 	vmov	d0, r2, r3
 80101a6:	f7f4 f80d 	bl	80041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>
 80101aa:	4603      	mov	r3, r0
 80101ac:	461a      	mov	r2, r3
 80101ae:	4bec      	ldr	r3, [pc, #944]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101b0:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_encode(ams_cell_voltages.v1s1);
 80101b2:	463b      	mov	r3, r7
 80101b4:	ed93 7b00 	vldr	d7, [r3]
 80101b8:	eeb0 0a47 	vmov.f32	s0, s14
 80101bc:	eef0 0a67 	vmov.f32	s1, s15
 80101c0:	f7f4 f812 	bl	80041e8 <can1_ams_cell_voltages_v1s1_encode>
 80101c4:	4603      	mov	r3, r0
 80101c6:	461a      	mov	r2, r3
 80101c8:	4be5      	ldr	r3, [pc, #916]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101ca:	705a      	strb	r2, [r3, #1]
   can1_ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_encode(ams_cell_voltages.v7s1);
 80101cc:	463b      	mov	r3, r7
 80101ce:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 80101d2:	eeb0 0a47 	vmov.f32	s0, s14
 80101d6:	eef0 0a67 	vmov.f32	s1, s15
 80101da:	f7f4 f85d 	bl	8004298 <can1_ams_cell_voltages_v7s1_encode>
 80101de:	4603      	mov	r3, r0
 80101e0:	461a      	mov	r2, r3
 80101e2:	4bdf      	ldr	r3, [pc, #892]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101e4:	709a      	strb	r2, [r3, #2]
   can1_ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_encode(ams_cell_voltages.v1s2);
 80101e6:	463b      	mov	r3, r7
 80101e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80101ec:	eeb0 0a47 	vmov.f32	s0, s14
 80101f0:	eef0 0a67 	vmov.f32	s1, s15
 80101f4:	f7f4 f8a8 	bl	8004348 <can1_ams_cell_voltages_v1s2_encode>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
 80101fc:	4bd8      	ldr	r3, [pc, #864]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101fe:	70da      	strb	r2, [r3, #3]
   can1_ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_encode(ams_cell_voltages.v7s2);
 8010200:	463b      	mov	r3, r7
 8010202:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 8010206:	eeb0 0a47 	vmov.f32	s0, s14
 801020a:	eef0 0a67 	vmov.f32	s1, s15
 801020e:	f7f4 f8f3 	bl	80043f8 <can1_ams_cell_voltages_v7s2_encode>
 8010212:	4603      	mov	r3, r0
 8010214:	461a      	mov	r2, r3
 8010216:	4bd2      	ldr	r3, [pc, #840]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010218:	711a      	strb	r2, [r3, #4]
   can1_ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_encode(ams_cell_voltages.v1s3);
 801021a:	463b      	mov	r3, r7
 801021c:	ed93 7b04 	vldr	d7, [r3, #16]
 8010220:	eeb0 0a47 	vmov.f32	s0, s14
 8010224:	eef0 0a67 	vmov.f32	s1, s15
 8010228:	f7f4 f93e 	bl	80044a8 <can1_ams_cell_voltages_v1s3_encode>
 801022c:	4603      	mov	r3, r0
 801022e:	461a      	mov	r2, r3
 8010230:	4bcb      	ldr	r3, [pc, #812]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010232:	715a      	strb	r2, [r3, #5]
   can1_ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_encode(ams_cell_voltages.v7s3);
 8010234:	463b      	mov	r3, r7
 8010236:	ed93 7b94 	vldr	d7, [r3, #592]	; 0x250
 801023a:	eeb0 0a47 	vmov.f32	s0, s14
 801023e:	eef0 0a67 	vmov.f32	s1, s15
 8010242:	f7f4 f989 	bl	8004558 <can1_ams_cell_voltages_v7s3_encode>
 8010246:	4603      	mov	r3, r0
 8010248:	461a      	mov	r2, r3
 801024a:	4bc5      	ldr	r3, [pc, #788]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801024c:	719a      	strb	r2, [r3, #6]
   can1_ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_encode(ams_cell_voltages.v1s4);
 801024e:	463b      	mov	r3, r7
 8010250:	ed93 7b06 	vldr	d7, [r3, #24]
 8010254:	eeb0 0a47 	vmov.f32	s0, s14
 8010258:	eef0 0a67 	vmov.f32	s1, s15
 801025c:	f7f4 f9d4 	bl	8004608 <can1_ams_cell_voltages_v1s4_encode>
 8010260:	4603      	mov	r3, r0
 8010262:	461a      	mov	r2, r3
 8010264:	4bbe      	ldr	r3, [pc, #760]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010266:	71da      	strb	r2, [r3, #7]
   can1_ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_encode(ams_cell_voltages.v7s4);
 8010268:	463b      	mov	r3, r7
 801026a:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
 801026e:	eeb0 0a47 	vmov.f32	s0, s14
 8010272:	eef0 0a67 	vmov.f32	s1, s15
 8010276:	f7f4 fa1f 	bl	80046b8 <can1_ams_cell_voltages_v7s4_encode>
 801027a:	4603      	mov	r3, r0
 801027c:	461a      	mov	r2, r3
 801027e:	4bb8      	ldr	r3, [pc, #736]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010280:	721a      	strb	r2, [r3, #8]
   can1_ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_encode(ams_cell_voltages.v1s5);
 8010282:	463b      	mov	r3, r7
 8010284:	ed93 7b08 	vldr	d7, [r3, #32]
 8010288:	eeb0 0a47 	vmov.f32	s0, s14
 801028c:	eef0 0a67 	vmov.f32	s1, s15
 8010290:	f7f4 fa6a 	bl	8004768 <can1_ams_cell_voltages_v1s5_encode>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	4bb1      	ldr	r3, [pc, #708]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801029a:	725a      	strb	r2, [r3, #9]
   can1_ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_encode(ams_cell_voltages.v7s5);
 801029c:	463b      	mov	r3, r7
 801029e:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 80102a2:	eeb0 0a47 	vmov.f32	s0, s14
 80102a6:	eef0 0a67 	vmov.f32	s1, s15
 80102aa:	f7f4 fab5 	bl	8004818 <can1_ams_cell_voltages_v7s5_encode>
 80102ae:	4603      	mov	r3, r0
 80102b0:	461a      	mov	r2, r3
 80102b2:	4bab      	ldr	r3, [pc, #684]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102b4:	729a      	strb	r2, [r3, #10]
   can1_ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_encode(ams_cell_voltages.v1s6);
 80102b6:	463b      	mov	r3, r7
 80102b8:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80102bc:	eeb0 0a47 	vmov.f32	s0, s14
 80102c0:	eef0 0a67 	vmov.f32	s1, s15
 80102c4:	f7f4 fb00 	bl	80048c8 <can1_ams_cell_voltages_v1s6_encode>
 80102c8:	4603      	mov	r3, r0
 80102ca:	461a      	mov	r2, r3
 80102cc:	4ba4      	ldr	r3, [pc, #656]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102ce:	72da      	strb	r2, [r3, #11]
   can1_ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_encode(ams_cell_voltages.v7s6);
 80102d0:	463b      	mov	r3, r7
 80102d2:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 80102d6:	eeb0 0a47 	vmov.f32	s0, s14
 80102da:	eef0 0a67 	vmov.f32	s1, s15
 80102de:	f7f4 fb4b 	bl	8004978 <can1_ams_cell_voltages_v7s6_encode>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b9e      	ldr	r3, [pc, #632]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102e8:	731a      	strb	r2, [r3, #12]
   can1_ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_encode(ams_cell_voltages.v1s7);
 80102ea:	463b      	mov	r3, r7
 80102ec:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80102f0:	eeb0 0a47 	vmov.f32	s0, s14
 80102f4:	eef0 0a67 	vmov.f32	s1, s15
 80102f8:	f7f4 fb96 	bl	8004a28 <can1_ams_cell_voltages_v1s7_encode>
 80102fc:	4603      	mov	r3, r0
 80102fe:	461a      	mov	r2, r3
 8010300:	4b97      	ldr	r3, [pc, #604]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010302:	735a      	strb	r2, [r3, #13]
   can1_ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_encode(ams_cell_voltages.v7s7);
 8010304:	463b      	mov	r3, r7
 8010306:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 801030a:	eeb0 0a47 	vmov.f32	s0, s14
 801030e:	eef0 0a67 	vmov.f32	s1, s15
 8010312:	f7f4 fbe1 	bl	8004ad8 <can1_ams_cell_voltages_v7s7_encode>
 8010316:	4603      	mov	r3, r0
 8010318:	461a      	mov	r2, r3
 801031a:	4b91      	ldr	r3, [pc, #580]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801031c:	739a      	strb	r2, [r3, #14]
   can1_ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_encode(ams_cell_voltages.v1s8);
 801031e:	463b      	mov	r3, r7
 8010320:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8010324:	eeb0 0a47 	vmov.f32	s0, s14
 8010328:	eef0 0a67 	vmov.f32	s1, s15
 801032c:	f7f4 fc2c 	bl	8004b88 <can1_ams_cell_voltages_v1s8_encode>
 8010330:	4603      	mov	r3, r0
 8010332:	461a      	mov	r2, r3
 8010334:	4b8a      	ldr	r3, [pc, #552]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010336:	73da      	strb	r2, [r3, #15]
   can1_ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_encode(ams_cell_voltages.v7s8);
 8010338:	463b      	mov	r3, r7
 801033a:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 801033e:	eeb0 0a47 	vmov.f32	s0, s14
 8010342:	eef0 0a67 	vmov.f32	s1, s15
 8010346:	f7f4 fc77 	bl	8004c38 <can1_ams_cell_voltages_v7s8_encode>
 801034a:	4603      	mov	r3, r0
 801034c:	461a      	mov	r2, r3
 801034e:	4b84      	ldr	r3, [pc, #528]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010350:	741a      	strb	r2, [r3, #16]
   can1_ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_encode(ams_cell_voltages.v1s9);
 8010352:	463b      	mov	r3, r7
 8010354:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8010358:	eeb0 0a47 	vmov.f32	s0, s14
 801035c:	eef0 0a67 	vmov.f32	s1, s15
 8010360:	f7f4 fcc2 	bl	8004ce8 <can1_ams_cell_voltages_v1s9_encode>
 8010364:	4603      	mov	r3, r0
 8010366:	461a      	mov	r2, r3
 8010368:	4b7d      	ldr	r3, [pc, #500]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801036a:	745a      	strb	r2, [r3, #17]
   can1_ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_encode(ams_cell_voltages.v7s9);
 801036c:	463b      	mov	r3, r7
 801036e:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8010372:	eeb0 0a47 	vmov.f32	s0, s14
 8010376:	eef0 0a67 	vmov.f32	s1, s15
 801037a:	f7f4 fd0d 	bl	8004d98 <can1_ams_cell_voltages_v7s9_encode>
 801037e:	4603      	mov	r3, r0
 8010380:	461a      	mov	r2, r3
 8010382:	4b77      	ldr	r3, [pc, #476]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010384:	749a      	strb	r2, [r3, #18]
   can1_ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_encode(ams_cell_voltages.v1s10);
 8010386:	463b      	mov	r3, r7
 8010388:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 801038c:	eeb0 0a47 	vmov.f32	s0, s14
 8010390:	eef0 0a67 	vmov.f32	s1, s15
 8010394:	f7f4 fd58 	bl	8004e48 <can1_ams_cell_voltages_v1s10_encode>
 8010398:	4603      	mov	r3, r0
 801039a:	461a      	mov	r2, r3
 801039c:	4b70      	ldr	r3, [pc, #448]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801039e:	74da      	strb	r2, [r3, #19]
   can1_ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_encode(ams_cell_voltages.v7s10);
 80103a0:	463b      	mov	r3, r7
 80103a2:	ed93 7ba2 	vldr	d7, [r3, #648]	; 0x288
 80103a6:	eeb0 0a47 	vmov.f32	s0, s14
 80103aa:	eef0 0a67 	vmov.f32	s1, s15
 80103ae:	f7f4 fda3 	bl	8004ef8 <can1_ams_cell_voltages_v7s10_encode>
 80103b2:	4603      	mov	r3, r0
 80103b4:	461a      	mov	r2, r3
 80103b6:	4b6a      	ldr	r3, [pc, #424]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103b8:	751a      	strb	r2, [r3, #20]
   can1_ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_encode(ams_cell_voltages.v1s11);
 80103ba:	463b      	mov	r3, r7
 80103bc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80103c0:	eeb0 0a47 	vmov.f32	s0, s14
 80103c4:	eef0 0a67 	vmov.f32	s1, s15
 80103c8:	f7f4 fdee 	bl	8004fa8 <can1_ams_cell_voltages_v1s11_encode>
 80103cc:	4603      	mov	r3, r0
 80103ce:	461a      	mov	r2, r3
 80103d0:	4b63      	ldr	r3, [pc, #396]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103d2:	755a      	strb	r2, [r3, #21]
   can1_ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_encode(ams_cell_voltages.v7s11);
 80103d4:	463b      	mov	r3, r7
 80103d6:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
 80103da:	eeb0 0a47 	vmov.f32	s0, s14
 80103de:	eef0 0a67 	vmov.f32	s1, s15
 80103e2:	f7f4 fe39 	bl	8005058 <can1_ams_cell_voltages_v7s11_encode>
 80103e6:	4603      	mov	r3, r0
 80103e8:	461a      	mov	r2, r3
 80103ea:	4b5d      	ldr	r3, [pc, #372]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103ec:	759a      	strb	r2, [r3, #22]
   can1_ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_encode(ams_cell_voltages.v1s12);
 80103ee:	463b      	mov	r3, r7
 80103f0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80103f4:	eeb0 0a47 	vmov.f32	s0, s14
 80103f8:	eef0 0a67 	vmov.f32	s1, s15
 80103fc:	f7f4 fe84 	bl	8005108 <can1_ams_cell_voltages_v1s12_encode>
 8010400:	4603      	mov	r3, r0
 8010402:	461a      	mov	r2, r3
 8010404:	4b56      	ldr	r3, [pc, #344]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010406:	75da      	strb	r2, [r3, #23]
   can1_ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_encode(ams_cell_voltages.v7s12);
 8010408:	463b      	mov	r3, r7
 801040a:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 801040e:	eeb0 0a47 	vmov.f32	s0, s14
 8010412:	eef0 0a67 	vmov.f32	s1, s15
 8010416:	f7f4 fecf 	bl	80051b8 <can1_ams_cell_voltages_v7s12_encode>
 801041a:	4603      	mov	r3, r0
 801041c:	461a      	mov	r2, r3
 801041e:	4b50      	ldr	r3, [pc, #320]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010420:	761a      	strb	r2, [r3, #24]
   can1_ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_encode(ams_cell_voltages.v2s1);
 8010422:	463b      	mov	r3, r7
 8010424:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8010428:	eeb0 0a47 	vmov.f32	s0, s14
 801042c:	eef0 0a67 	vmov.f32	s1, s15
 8010430:	f7f4 ff1a 	bl	8005268 <can1_ams_cell_voltages_v2s1_encode>
 8010434:	4603      	mov	r3, r0
 8010436:	461a      	mov	r2, r3
 8010438:	4b49      	ldr	r3, [pc, #292]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801043a:	765a      	strb	r2, [r3, #25]
   can1_ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_encode(ams_cell_voltages.v8s1);
 801043c:	463b      	mov	r3, r7
 801043e:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 8010442:	eeb0 0a47 	vmov.f32	s0, s14
 8010446:	eef0 0a67 	vmov.f32	s1, s15
 801044a:	f7f4 ff65 	bl	8005318 <can1_ams_cell_voltages_v8s1_encode>
 801044e:	4603      	mov	r3, r0
 8010450:	461a      	mov	r2, r3
 8010452:	4b43      	ldr	r3, [pc, #268]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010454:	769a      	strb	r2, [r3, #26]
   can1_ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_encode(ams_cell_voltages.v2s2);
 8010456:	463b      	mov	r3, r7
 8010458:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 801045c:	eeb0 0a47 	vmov.f32	s0, s14
 8010460:	eef0 0a67 	vmov.f32	s1, s15
 8010464:	f7f4 ffb0 	bl	80053c8 <can1_ams_cell_voltages_v2s2_encode>
 8010468:	4603      	mov	r3, r0
 801046a:	461a      	mov	r2, r3
 801046c:	4b3c      	ldr	r3, [pc, #240]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801046e:	76da      	strb	r2, [r3, #27]
   can1_ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_encode(ams_cell_voltages.v8s2);
 8010470:	463b      	mov	r3, r7
 8010472:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 8010476:	eeb0 0a47 	vmov.f32	s0, s14
 801047a:	eef0 0a67 	vmov.f32	s1, s15
 801047e:	f7f4 fffb 	bl	8005478 <can1_ams_cell_voltages_v8s2_encode>
 8010482:	4603      	mov	r3, r0
 8010484:	461a      	mov	r2, r3
 8010486:	4b36      	ldr	r3, [pc, #216]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010488:	771a      	strb	r2, [r3, #28]
   can1_ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_encode(ams_cell_voltages.v2s3);
 801048a:	463b      	mov	r3, r7
 801048c:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8010490:	eeb0 0a47 	vmov.f32	s0, s14
 8010494:	eef0 0a67 	vmov.f32	s1, s15
 8010498:	f7f5 f846 	bl	8005528 <can1_ams_cell_voltages_v2s3_encode>
 801049c:	4603      	mov	r3, r0
 801049e:	461a      	mov	r2, r3
 80104a0:	4b2f      	ldr	r3, [pc, #188]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104a2:	775a      	strb	r2, [r3, #29]
   can1_ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_encode(ams_cell_voltages.v8s3);
 80104a4:	463b      	mov	r3, r7
 80104a6:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 80104aa:	eeb0 0a47 	vmov.f32	s0, s14
 80104ae:	eef0 0a67 	vmov.f32	s1, s15
 80104b2:	f7f5 f891 	bl	80055d8 <can1_ams_cell_voltages_v8s3_encode>
 80104b6:	4603      	mov	r3, r0
 80104b8:	461a      	mov	r2, r3
 80104ba:	4b29      	ldr	r3, [pc, #164]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104bc:	779a      	strb	r2, [r3, #30]
   can1_ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_encode(ams_cell_voltages.v2s4);
 80104be:	463b      	mov	r3, r7
 80104c0:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80104c4:	eeb0 0a47 	vmov.f32	s0, s14
 80104c8:	eef0 0a67 	vmov.f32	s1, s15
 80104cc:	f7f5 f8dc 	bl	8005688 <can1_ams_cell_voltages_v2s4_encode>
 80104d0:	4603      	mov	r3, r0
 80104d2:	461a      	mov	r2, r3
 80104d4:	4b22      	ldr	r3, [pc, #136]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104d6:	77da      	strb	r2, [r3, #31]
   can1_ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_encode(ams_cell_voltages.v8s4);
 80104d8:	463b      	mov	r3, r7
 80104da:	ed93 7bae 	vldr	d7, [r3, #696]	; 0x2b8
 80104de:	eeb0 0a47 	vmov.f32	s0, s14
 80104e2:	eef0 0a67 	vmov.f32	s1, s15
 80104e6:	f7f5 f927 	bl	8005738 <can1_ams_cell_voltages_v8s4_encode>
 80104ea:	4603      	mov	r3, r0
 80104ec:	461a      	mov	r2, r3
 80104ee:	4b1c      	ldr	r3, [pc, #112]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104f0:	f883 2020 	strb.w	r2, [r3, #32]
   can1_ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_encode(ams_cell_voltages.v2s5);
 80104f4:	463b      	mov	r3, r7
 80104f6:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80104fa:	eeb0 0a47 	vmov.f32	s0, s14
 80104fe:	eef0 0a67 	vmov.f32	s1, s15
 8010502:	f7f5 f971 	bl	80057e8 <can1_ams_cell_voltages_v2s5_encode>
 8010506:	4603      	mov	r3, r0
 8010508:	461a      	mov	r2, r3
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 801050c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   can1_ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_encode(ams_cell_voltages.v8s5);
 8010510:	463b      	mov	r3, r7
 8010512:	ed93 7bb0 	vldr	d7, [r3, #704]	; 0x2c0
 8010516:	eeb0 0a47 	vmov.f32	s0, s14
 801051a:	eef0 0a67 	vmov.f32	s1, s15
 801051e:	f7f5 f9bb 	bl	8005898 <can1_ams_cell_voltages_v8s5_encode>
 8010522:	4603      	mov	r3, r0
 8010524:	461a      	mov	r2, r3
 8010526:	4b0e      	ldr	r3, [pc, #56]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010528:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   can1_ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_encode(ams_cell_voltages.v2s6);
 801052c:	463b      	mov	r3, r7
 801052e:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8010532:	eeb0 0a47 	vmov.f32	s0, s14
 8010536:	eef0 0a67 	vmov.f32	s1, s15
 801053a:	f7f5 fa05 	bl	8005948 <can1_ams_cell_voltages_v2s6_encode>
 801053e:	4603      	mov	r3, r0
 8010540:	461a      	mov	r2, r3
 8010542:	4b07      	ldr	r3, [pc, #28]	; (8010560 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010544:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   can1_ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_encode(ams_cell_voltages.v8s6);
 8010548:	463b      	mov	r3, r7
 801054a:	ed93 7bb2 	vldr	d7, [r3, #712]	; 0x2c8
 801054e:	eeb0 0a47 	vmov.f32	s0, s14
 8010552:	eef0 0a67 	vmov.f32	s1, s15
 8010556:	f7f5 fa4f 	bl	80059f8 <can1_ams_cell_voltages_v8s6_encode>
 801055a:	4603      	mov	r3, r0
 801055c:	461a      	mov	r2, r3
 801055e:	e001      	b.n	8010564 <can1_ams_cell_voltages_transmit+0x400>
 8010560:	200014f4 	.word	0x200014f4
 8010564:	4bed      	ldr	r3, [pc, #948]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   can1_ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_encode(ams_cell_voltages.v2s7);
 801056a:	463b      	mov	r3, r7
 801056c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8010570:	eeb0 0a47 	vmov.f32	s0, s14
 8010574:	eef0 0a67 	vmov.f32	s1, s15
 8010578:	f7f5 fa96 	bl	8005aa8 <can1_ams_cell_voltages_v2s7_encode>
 801057c:	4603      	mov	r3, r0
 801057e:	461a      	mov	r2, r3
 8010580:	4be6      	ldr	r3, [pc, #920]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   can1_ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_encode(ams_cell_voltages.v8s7);
 8010586:	463b      	mov	r3, r7
 8010588:	ed93 7bb4 	vldr	d7, [r3, #720]	; 0x2d0
 801058c:	eeb0 0a47 	vmov.f32	s0, s14
 8010590:	eef0 0a67 	vmov.f32	s1, s15
 8010594:	f7f5 fae0 	bl	8005b58 <can1_ams_cell_voltages_v8s7_encode>
 8010598:	4603      	mov	r3, r0
 801059a:	461a      	mov	r2, r3
 801059c:	4bdf      	ldr	r3, [pc, #892]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801059e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   can1_ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_encode(ams_cell_voltages.v2s8);
 80105a2:	463b      	mov	r3, r7
 80105a4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80105a8:	eeb0 0a47 	vmov.f32	s0, s14
 80105ac:	eef0 0a67 	vmov.f32	s1, s15
 80105b0:	f7f5 fb2a 	bl	8005c08 <can1_ams_cell_voltages_v2s8_encode>
 80105b4:	4603      	mov	r3, r0
 80105b6:	461a      	mov	r2, r3
 80105b8:	4bd8      	ldr	r3, [pc, #864]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80105ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   can1_ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_encode(ams_cell_voltages.v8s8);
 80105be:	463b      	mov	r3, r7
 80105c0:	ed93 7bb6 	vldr	d7, [r3, #728]	; 0x2d8
 80105c4:	eeb0 0a47 	vmov.f32	s0, s14
 80105c8:	eef0 0a67 	vmov.f32	s1, s15
 80105cc:	f7f5 fb74 	bl	8005cb8 <can1_ams_cell_voltages_v8s8_encode>
 80105d0:	4603      	mov	r3, r0
 80105d2:	461a      	mov	r2, r3
 80105d4:	4bd1      	ldr	r3, [pc, #836]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80105d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   can1_ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_encode(ams_cell_voltages.v2s9);
 80105da:	463b      	mov	r3, r7
 80105dc:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80105e0:	eeb0 0a47 	vmov.f32	s0, s14
 80105e4:	eef0 0a67 	vmov.f32	s1, s15
 80105e8:	f7f5 fbbe 	bl	8005d68 <can1_ams_cell_voltages_v2s9_encode>
 80105ec:	4603      	mov	r3, r0
 80105ee:	461a      	mov	r2, r3
 80105f0:	4bca      	ldr	r3, [pc, #808]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80105f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   can1_ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_encode(ams_cell_voltages.v8s9);
 80105f6:	463b      	mov	r3, r7
 80105f8:	ed93 7bb8 	vldr	d7, [r3, #736]	; 0x2e0
 80105fc:	eeb0 0a47 	vmov.f32	s0, s14
 8010600:	eef0 0a67 	vmov.f32	s1, s15
 8010604:	f7f5 fc08 	bl	8005e18 <can1_ams_cell_voltages_v8s9_encode>
 8010608:	4603      	mov	r3, r0
 801060a:	461a      	mov	r2, r3
 801060c:	4bc3      	ldr	r3, [pc, #780]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801060e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   can1_ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_encode(ams_cell_voltages.v2s10);
 8010612:	463b      	mov	r3, r7
 8010614:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8010618:	eeb0 0a47 	vmov.f32	s0, s14
 801061c:	eef0 0a67 	vmov.f32	s1, s15
 8010620:	f7f5 fc52 	bl	8005ec8 <can1_ams_cell_voltages_v2s10_encode>
 8010624:	4603      	mov	r3, r0
 8010626:	461a      	mov	r2, r3
 8010628:	4bbc      	ldr	r3, [pc, #752]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801062a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   can1_ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_encode(ams_cell_voltages.v8s10);
 801062e:	463b      	mov	r3, r7
 8010630:	ed93 7bba 	vldr	d7, [r3, #744]	; 0x2e8
 8010634:	eeb0 0a47 	vmov.f32	s0, s14
 8010638:	eef0 0a67 	vmov.f32	s1, s15
 801063c:	f7f5 fc9c 	bl	8005f78 <can1_ams_cell_voltages_v8s10_encode>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
 8010644:	4bb5      	ldr	r3, [pc, #724]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010646:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   can1_ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_encode(ams_cell_voltages.v2s11);
 801064a:	463b      	mov	r3, r7
 801064c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8010650:	eeb0 0a47 	vmov.f32	s0, s14
 8010654:	eef0 0a67 	vmov.f32	s1, s15
 8010658:	f7f5 fce6 	bl	8006028 <can1_ams_cell_voltages_v2s11_encode>
 801065c:	4603      	mov	r3, r0
 801065e:	461a      	mov	r2, r3
 8010660:	4bae      	ldr	r3, [pc, #696]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   can1_ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_encode(ams_cell_voltages.v8s11);
 8010666:	463b      	mov	r3, r7
 8010668:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 801066c:	eeb0 0a47 	vmov.f32	s0, s14
 8010670:	eef0 0a67 	vmov.f32	s1, s15
 8010674:	f7f5 fd30 	bl	80060d8 <can1_ams_cell_voltages_v8s11_encode>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	4ba7      	ldr	r3, [pc, #668]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801067e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   can1_ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_encode(ams_cell_voltages.v2s12);
 8010682:	463b      	mov	r3, r7
 8010684:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8010688:	eeb0 0a47 	vmov.f32	s0, s14
 801068c:	eef0 0a67 	vmov.f32	s1, s15
 8010690:	f7f5 fd7a 	bl	8006188 <can1_ams_cell_voltages_v2s12_encode>
 8010694:	4603      	mov	r3, r0
 8010696:	461a      	mov	r2, r3
 8010698:	4ba0      	ldr	r3, [pc, #640]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801069a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   can1_ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_encode(ams_cell_voltages.v8s12);
 801069e:	463b      	mov	r3, r7
 80106a0:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 80106a4:	eeb0 0a47 	vmov.f32	s0, s14
 80106a8:	eef0 0a67 	vmov.f32	s1, s15
 80106ac:	f7f5 fdc4 	bl	8006238 <can1_ams_cell_voltages_v8s12_encode>
 80106b0:	4603      	mov	r3, r0
 80106b2:	461a      	mov	r2, r3
 80106b4:	4b99      	ldr	r3, [pc, #612]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80106b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   can1_ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_encode(ams_cell_voltages.v3s1);
 80106ba:	463b      	mov	r3, r7
 80106bc:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 80106c0:	eeb0 0a47 	vmov.f32	s0, s14
 80106c4:	eef0 0a67 	vmov.f32	s1, s15
 80106c8:	f7f5 fe0e 	bl	80062e8 <can1_ams_cell_voltages_v3s1_encode>
 80106cc:	4603      	mov	r3, r0
 80106ce:	461a      	mov	r2, r3
 80106d0:	4b92      	ldr	r3, [pc, #584]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80106d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   can1_ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_encode(ams_cell_voltages.v9s1);
 80106d6:	463b      	mov	r3, r7
 80106d8:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 80106dc:	eeb0 0a47 	vmov.f32	s0, s14
 80106e0:	eef0 0a67 	vmov.f32	s1, s15
 80106e4:	f7f5 fe58 	bl	8006398 <can1_ams_cell_voltages_v9s1_encode>
 80106e8:	4603      	mov	r3, r0
 80106ea:	461a      	mov	r2, r3
 80106ec:	4b8b      	ldr	r3, [pc, #556]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80106ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   can1_ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_encode(ams_cell_voltages.v3s2);
 80106f2:	463b      	mov	r3, r7
 80106f4:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80106f8:	eeb0 0a47 	vmov.f32	s0, s14
 80106fc:	eef0 0a67 	vmov.f32	s1, s15
 8010700:	f7f5 fea2 	bl	8006448 <can1_ams_cell_voltages_v3s2_encode>
 8010704:	4603      	mov	r3, r0
 8010706:	461a      	mov	r2, r3
 8010708:	4b84      	ldr	r3, [pc, #528]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801070a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   can1_ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_encode(ams_cell_voltages.v9s2);
 801070e:	463b      	mov	r3, r7
 8010710:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 8010714:	eeb0 0a47 	vmov.f32	s0, s14
 8010718:	eef0 0a67 	vmov.f32	s1, s15
 801071c:	f7f5 feec 	bl	80064f8 <can1_ams_cell_voltages_v9s2_encode>
 8010720:	4603      	mov	r3, r0
 8010722:	461a      	mov	r2, r3
 8010724:	4b7d      	ldr	r3, [pc, #500]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   can1_ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_encode(ams_cell_voltages.v3s3);
 801072a:	463b      	mov	r3, r7
 801072c:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8010730:	eeb0 0a47 	vmov.f32	s0, s14
 8010734:	eef0 0a67 	vmov.f32	s1, s15
 8010738:	f7f5 ff36 	bl	80065a8 <can1_ams_cell_voltages_v3s3_encode>
 801073c:	4603      	mov	r3, r0
 801073e:	461a      	mov	r2, r3
 8010740:	4b76      	ldr	r3, [pc, #472]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   can1_ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_encode(ams_cell_voltages.v9s3);
 8010746:	463b      	mov	r3, r7
 8010748:	ed93 7bc4 	vldr	d7, [r3, #784]	; 0x310
 801074c:	eeb0 0a47 	vmov.f32	s0, s14
 8010750:	eef0 0a67 	vmov.f32	s1, s15
 8010754:	f7f5 ff80 	bl	8006658 <can1_ams_cell_voltages_v9s3_encode>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	4b6f      	ldr	r3, [pc, #444]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801075e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   can1_ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_encode(ams_cell_voltages.v3s4);
 8010762:	463b      	mov	r3, r7
 8010764:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8010768:	eeb0 0a47 	vmov.f32	s0, s14
 801076c:	eef0 0a67 	vmov.f32	s1, s15
 8010770:	f7f5 ffca 	bl	8006708 <can1_ams_cell_voltages_v3s4_encode>
 8010774:	4603      	mov	r3, r0
 8010776:	461a      	mov	r2, r3
 8010778:	4b68      	ldr	r3, [pc, #416]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801077a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   can1_ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_encode(ams_cell_voltages.v9s4);
 801077e:	463b      	mov	r3, r7
 8010780:	ed93 7bc6 	vldr	d7, [r3, #792]	; 0x318
 8010784:	eeb0 0a47 	vmov.f32	s0, s14
 8010788:	eef0 0a67 	vmov.f32	s1, s15
 801078c:	f7f6 f814 	bl	80067b8 <can1_ams_cell_voltages_v9s4_encode>
 8010790:	4603      	mov	r3, r0
 8010792:	461a      	mov	r2, r3
 8010794:	4b61      	ldr	r3, [pc, #388]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   can1_ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_encode(ams_cell_voltages.v3s5);
 801079a:	463b      	mov	r3, r7
 801079c:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80107a0:	eeb0 0a47 	vmov.f32	s0, s14
 80107a4:	eef0 0a67 	vmov.f32	s1, s15
 80107a8:	f7f6 f85e 	bl	8006868 <can1_ams_cell_voltages_v3s5_encode>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	4b5a      	ldr	r3, [pc, #360]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80107b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   can1_ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_encode(ams_cell_voltages.v9s5);
 80107b6:	463b      	mov	r3, r7
 80107b8:	ed93 7bc8 	vldr	d7, [r3, #800]	; 0x320
 80107bc:	eeb0 0a47 	vmov.f32	s0, s14
 80107c0:	eef0 0a67 	vmov.f32	s1, s15
 80107c4:	f7f6 f8a8 	bl	8006918 <can1_ams_cell_voltages_v9s5_encode>
 80107c8:	4603      	mov	r3, r0
 80107ca:	461a      	mov	r2, r3
 80107cc:	4b53      	ldr	r3, [pc, #332]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80107ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   can1_ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_encode(ams_cell_voltages.v3s6);
 80107d2:	463b      	mov	r3, r7
 80107d4:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 80107d8:	eeb0 0a47 	vmov.f32	s0, s14
 80107dc:	eef0 0a67 	vmov.f32	s1, s15
 80107e0:	f7f6 f8f2 	bl	80069c8 <can1_ams_cell_voltages_v3s6_encode>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	4b4c      	ldr	r3, [pc, #304]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80107ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   can1_ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_encode(ams_cell_voltages.v9s6);
 80107ee:	463b      	mov	r3, r7
 80107f0:	ed93 7bca 	vldr	d7, [r3, #808]	; 0x328
 80107f4:	eeb0 0a47 	vmov.f32	s0, s14
 80107f8:	eef0 0a67 	vmov.f32	s1, s15
 80107fc:	f7f6 f93c 	bl	8006a78 <can1_ams_cell_voltages_v9s6_encode>
 8010800:	4603      	mov	r3, r0
 8010802:	461a      	mov	r2, r3
 8010804:	4b45      	ldr	r3, [pc, #276]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   can1_ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_encode(ams_cell_voltages.v3s7);
 801080a:	463b      	mov	r3, r7
 801080c:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8010810:	eeb0 0a47 	vmov.f32	s0, s14
 8010814:	eef0 0a67 	vmov.f32	s1, s15
 8010818:	f7f6 f986 	bl	8006b28 <can1_ams_cell_voltages_v3s7_encode>
 801081c:	4603      	mov	r3, r0
 801081e:	461a      	mov	r2, r3
 8010820:	4b3e      	ldr	r3, [pc, #248]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   can1_ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_encode(ams_cell_voltages.v9s7);
 8010826:	463b      	mov	r3, r7
 8010828:	ed93 7bcc 	vldr	d7, [r3, #816]	; 0x330
 801082c:	eeb0 0a47 	vmov.f32	s0, s14
 8010830:	eef0 0a67 	vmov.f32	s1, s15
 8010834:	f7f6 f9d0 	bl	8006bd8 <can1_ams_cell_voltages_v9s7_encode>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	4b37      	ldr	r3, [pc, #220]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801083e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   can1_ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_encode(ams_cell_voltages.v3s8);
 8010842:	463b      	mov	r3, r7
 8010844:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8010848:	eeb0 0a47 	vmov.f32	s0, s14
 801084c:	eef0 0a67 	vmov.f32	s1, s15
 8010850:	f7f6 fa1a 	bl	8006c88 <can1_ams_cell_voltages_v3s8_encode>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	4b30      	ldr	r3, [pc, #192]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 801085a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   can1_ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_encode(ams_cell_voltages.v9s8);
 801085e:	463b      	mov	r3, r7
 8010860:	ed93 7bce 	vldr	d7, [r3, #824]	; 0x338
 8010864:	eeb0 0a47 	vmov.f32	s0, s14
 8010868:	eef0 0a67 	vmov.f32	s1, s15
 801086c:	f7f6 fa64 	bl	8006d38 <can1_ams_cell_voltages_v9s8_encode>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	4b29      	ldr	r3, [pc, #164]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_encode(ams_cell_voltages.v3s9);
 801087a:	463b      	mov	r3, r7
 801087c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010880:	eeb0 0a47 	vmov.f32	s0, s14
 8010884:	eef0 0a67 	vmov.f32	s1, s15
 8010888:	f7f6 faae 	bl	8006de8 <can1_ams_cell_voltages_v3s9_encode>
 801088c:	4603      	mov	r3, r0
 801088e:	461a      	mov	r2, r3
 8010890:	4b22      	ldr	r3, [pc, #136]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   can1_ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_encode(ams_cell_voltages.v9s9);
 8010896:	463b      	mov	r3, r7
 8010898:	ed93 7bd0 	vldr	d7, [r3, #832]	; 0x340
 801089c:	eeb0 0a47 	vmov.f32	s0, s14
 80108a0:	eef0 0a67 	vmov.f32	s1, s15
 80108a4:	f7f6 faf8 	bl	8006e98 <can1_ams_cell_voltages_v9s9_encode>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	4b1b      	ldr	r3, [pc, #108]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80108ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_encode(ams_cell_voltages.v3s10);
 80108b2:	463b      	mov	r3, r7
 80108b4:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80108b8:	eeb0 0a47 	vmov.f32	s0, s14
 80108bc:	eef0 0a67 	vmov.f32	s1, s15
 80108c0:	f7f6 fb42 	bl	8006f48 <can1_ams_cell_voltages_v3s10_encode>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461a      	mov	r2, r3
 80108c8:	4b14      	ldr	r3, [pc, #80]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80108ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   can1_ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_encode(ams_cell_voltages.v9s10);
 80108ce:	463b      	mov	r3, r7
 80108d0:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 80108d4:	eeb0 0a47 	vmov.f32	s0, s14
 80108d8:	eef0 0a67 	vmov.f32	s1, s15
 80108dc:	f7f6 fb8c 	bl	8006ff8 <can1_ams_cell_voltages_v9s10_encode>
 80108e0:	4603      	mov	r3, r0
 80108e2:	461a      	mov	r2, r3
 80108e4:	4b0d      	ldr	r3, [pc, #52]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 80108e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_encode(ams_cell_voltages.v3s11);
 80108ea:	463b      	mov	r3, r7
 80108ec:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 80108f0:	eeb0 0a47 	vmov.f32	s0, s14
 80108f4:	eef0 0a67 	vmov.f32	s1, s15
 80108f8:	f7f6 fbd6 	bl	80070a8 <can1_ams_cell_voltages_v3s11_encode>
 80108fc:	4603      	mov	r3, r0
 80108fe:	461a      	mov	r2, r3
 8010900:	4b06      	ldr	r3, [pc, #24]	; (801091c <can1_ams_cell_voltages_transmit+0x7b8>)
 8010902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   can1_ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_encode(ams_cell_voltages.v9s11);
 8010906:	463b      	mov	r3, r7
 8010908:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
 801090c:	eeb0 0a47 	vmov.f32	s0, s14
 8010910:	eef0 0a67 	vmov.f32	s1, s15
 8010914:	f7f6 fc20 	bl	8007158 <can1_ams_cell_voltages_v9s11_encode>
 8010918:	e002      	b.n	8010920 <can1_ams_cell_voltages_transmit+0x7bc>
 801091a:	bf00      	nop
 801091c:	200014f4 	.word	0x200014f4
 8010920:	4603      	mov	r3, r0
 8010922:	461a      	mov	r2, r3
 8010924:	4bed      	ldr	r3, [pc, #948]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_encode(ams_cell_voltages.v3s12);
 801092a:	463b      	mov	r3, r7
 801092c:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8010930:	eeb0 0a47 	vmov.f32	s0, s14
 8010934:	eef0 0a67 	vmov.f32	s1, s15
 8010938:	f7f6 fc66 	bl	8007208 <can1_ams_cell_voltages_v3s12_encode>
 801093c:	4603      	mov	r3, r0
 801093e:	461a      	mov	r2, r3
 8010940:	4be6      	ldr	r3, [pc, #920]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   can1_ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_encode(ams_cell_voltages.v9s12);
 8010946:	463b      	mov	r3, r7
 8010948:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 801094c:	eeb0 0a47 	vmov.f32	s0, s14
 8010950:	eef0 0a67 	vmov.f32	s1, s15
 8010954:	f7f6 fcb0 	bl	80072b8 <can1_ams_cell_voltages_v9s12_encode>
 8010958:	4603      	mov	r3, r0
 801095a:	461a      	mov	r2, r3
 801095c:	4bdf      	ldr	r3, [pc, #892]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 801095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_encode(ams_cell_voltages.v4s1);
 8010962:	463b      	mov	r3, r7
 8010964:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8010968:	eeb0 0a47 	vmov.f32	s0, s14
 801096c:	eef0 0a67 	vmov.f32	s1, s15
 8010970:	f7f6 fcfa 	bl	8007368 <can1_ams_cell_voltages_v4s1_encode>
 8010974:	4603      	mov	r3, r0
 8010976:	461a      	mov	r2, r3
 8010978:	4bd8      	ldr	r3, [pc, #864]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 801097a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   can1_ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_encode(ams_cell_voltages.v10s1);
 801097e:	463b      	mov	r3, r7
 8010980:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
 8010984:	eeb0 0a47 	vmov.f32	s0, s14
 8010988:	eef0 0a67 	vmov.f32	s1, s15
 801098c:	f7f6 fd44 	bl	8007418 <can1_ams_cell_voltages_v10s1_encode>
 8010990:	4603      	mov	r3, r0
 8010992:	461a      	mov	r2, r3
 8010994:	4bd1      	ldr	r3, [pc, #836]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010996:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_encode(ams_cell_voltages.v4s2);
 801099a:	463b      	mov	r3, r7
 801099c:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 80109a0:	eeb0 0a47 	vmov.f32	s0, s14
 80109a4:	eef0 0a67 	vmov.f32	s1, s15
 80109a8:	f7f6 fd8e 	bl	80074c8 <can1_ams_cell_voltages_v4s2_encode>
 80109ac:	4603      	mov	r3, r0
 80109ae:	461a      	mov	r2, r3
 80109b0:	4bca      	ldr	r3, [pc, #808]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 80109b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
   can1_ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_encode(ams_cell_voltages.v10s2);
 80109b6:	463b      	mov	r3, r7
 80109b8:	ed93 7bda 	vldr	d7, [r3, #872]	; 0x368
 80109bc:	eeb0 0a47 	vmov.f32	s0, s14
 80109c0:	eef0 0a67 	vmov.f32	s1, s15
 80109c4:	f7f6 fdd8 	bl	8007578 <can1_ams_cell_voltages_v10s2_encode>
 80109c8:	4603      	mov	r3, r0
 80109ca:	461a      	mov	r2, r3
 80109cc:	4bc3      	ldr	r3, [pc, #780]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 80109ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_encode(ams_cell_voltages.v4s3);
 80109d2:	463b      	mov	r3, r7
 80109d4:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80109d8:	eeb0 0a47 	vmov.f32	s0, s14
 80109dc:	eef0 0a67 	vmov.f32	s1, s15
 80109e0:	f7f6 fe22 	bl	8007628 <can1_ams_cell_voltages_v4s3_encode>
 80109e4:	4603      	mov	r3, r0
 80109e6:	461a      	mov	r2, r3
 80109e8:	4bbc      	ldr	r3, [pc, #752]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 80109ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
   can1_ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_encode(ams_cell_voltages.v10s3);
 80109ee:	463b      	mov	r3, r7
 80109f0:	ed93 7bdc 	vldr	d7, [r3, #880]	; 0x370
 80109f4:	eeb0 0a47 	vmov.f32	s0, s14
 80109f8:	eef0 0a67 	vmov.f32	s1, s15
 80109fc:	f7f6 fe6c 	bl	80076d8 <can1_ams_cell_voltages_v10s3_encode>
 8010a00:	4603      	mov	r3, r0
 8010a02:	461a      	mov	r2, r3
 8010a04:	4bb5      	ldr	r3, [pc, #724]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_encode(ams_cell_voltages.v4s4);
 8010a0a:	463b      	mov	r3, r7
 8010a0c:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8010a10:	eeb0 0a47 	vmov.f32	s0, s14
 8010a14:	eef0 0a67 	vmov.f32	s1, s15
 8010a18:	f7f6 feb6 	bl	8007788 <can1_ams_cell_voltages_v4s4_encode>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4bae      	ldr	r3, [pc, #696]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a22:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
   can1_ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_encode(ams_cell_voltages.v10s4);
 8010a26:	463b      	mov	r3, r7
 8010a28:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
 8010a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8010a30:	eef0 0a67 	vmov.f32	s1, s15
 8010a34:	f7f6 ff00 	bl	8007838 <can1_ams_cell_voltages_v10s4_encode>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	4ba7      	ldr	r3, [pc, #668]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_encode(ams_cell_voltages.v4s5);
 8010a42:	463b      	mov	r3, r7
 8010a44:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8010a48:	eeb0 0a47 	vmov.f32	s0, s14
 8010a4c:	eef0 0a67 	vmov.f32	s1, s15
 8010a50:	f7f6 ff4a 	bl	80078e8 <can1_ams_cell_voltages_v4s5_encode>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461a      	mov	r2, r3
 8010a58:	4ba0      	ldr	r3, [pc, #640]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
   can1_ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_encode(ams_cell_voltages.v10s5);
 8010a5e:	463b      	mov	r3, r7
 8010a60:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8010a64:	eeb0 0a47 	vmov.f32	s0, s14
 8010a68:	eef0 0a67 	vmov.f32	s1, s15
 8010a6c:	f7f6 ff94 	bl	8007998 <can1_ams_cell_voltages_v10s5_encode>
 8010a70:	4603      	mov	r3, r0
 8010a72:	461a      	mov	r2, r3
 8010a74:	4b99      	ldr	r3, [pc, #612]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_encode(ams_cell_voltages.v4s6);
 8010a7a:	463b      	mov	r3, r7
 8010a7c:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8010a80:	eeb0 0a47 	vmov.f32	s0, s14
 8010a84:	eef0 0a67 	vmov.f32	s1, s15
 8010a88:	f7f6 ffde 	bl	8007a48 <can1_ams_cell_voltages_v4s6_encode>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	461a      	mov	r2, r3
 8010a90:	4b92      	ldr	r3, [pc, #584]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010a92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   can1_ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_encode(ams_cell_voltages.v10s6);
 8010a96:	463b      	mov	r3, r7
 8010a98:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8010a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8010aa0:	eef0 0a67 	vmov.f32	s1, s15
 8010aa4:	f7f7 f828 	bl	8007af8 <can1_ams_cell_voltages_v10s6_encode>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4b8b      	ldr	r3, [pc, #556]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010aae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_encode(ams_cell_voltages.v4s7);
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8010ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8010abc:	eef0 0a67 	vmov.f32	s1, s15
 8010ac0:	f7f7 f872 	bl	8007ba8 <can1_ams_cell_voltages_v4s7_encode>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	4b84      	ldr	r3, [pc, #528]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010aca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
   can1_ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_encode(ams_cell_voltages.v10s7);
 8010ace:	463b      	mov	r3, r7
 8010ad0:	ed93 7be4 	vldr	d7, [r3, #912]	; 0x390
 8010ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8010ad8:	eef0 0a67 	vmov.f32	s1, s15
 8010adc:	f7f7 f8bc 	bl	8007c58 <can1_ams_cell_voltages_v10s7_encode>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	4b7d      	ldr	r3, [pc, #500]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_encode(ams_cell_voltages.v4s8);
 8010aea:	463b      	mov	r3, r7
 8010aec:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8010af0:	eeb0 0a47 	vmov.f32	s0, s14
 8010af4:	eef0 0a67 	vmov.f32	s1, s15
 8010af8:	f7f7 f906 	bl	8007d08 <can1_ams_cell_voltages_v4s8_encode>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	4b76      	ldr	r3, [pc, #472]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b02:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
   can1_ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_encode(ams_cell_voltages.v10s8);
 8010b06:	463b      	mov	r3, r7
 8010b08:	ed93 7be6 	vldr	d7, [r3, #920]	; 0x398
 8010b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b10:	eef0 0a67 	vmov.f32	s1, s15
 8010b14:	f7f7 f950 	bl	8007db8 <can1_ams_cell_voltages_v10s8_encode>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	4b6f      	ldr	r3, [pc, #444]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_encode(ams_cell_voltages.v4s9);
 8010b22:	463b      	mov	r3, r7
 8010b24:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8010b28:	eeb0 0a47 	vmov.f32	s0, s14
 8010b2c:	eef0 0a67 	vmov.f32	s1, s15
 8010b30:	f7f7 f99a 	bl	8007e68 <can1_ams_cell_voltages_v4s9_encode>
 8010b34:	4603      	mov	r3, r0
 8010b36:	461a      	mov	r2, r3
 8010b38:	4b68      	ldr	r3, [pc, #416]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
   can1_ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_encode(ams_cell_voltages.v10s9);
 8010b3e:	463b      	mov	r3, r7
 8010b40:	ed93 7be8 	vldr	d7, [r3, #928]	; 0x3a0
 8010b44:	eeb0 0a47 	vmov.f32	s0, s14
 8010b48:	eef0 0a67 	vmov.f32	s1, s15
 8010b4c:	f7f7 f9e4 	bl	8007f18 <can1_ams_cell_voltages_v10s9_encode>
 8010b50:	4603      	mov	r3, r0
 8010b52:	461a      	mov	r2, r3
 8010b54:	4b61      	ldr	r3, [pc, #388]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b56:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_encode(ams_cell_voltages.v4s10);
 8010b5a:	463b      	mov	r3, r7
 8010b5c:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8010b60:	eeb0 0a47 	vmov.f32	s0, s14
 8010b64:	eef0 0a67 	vmov.f32	s1, s15
 8010b68:	f7f7 fa2e 	bl	8007fc8 <can1_ams_cell_voltages_v4s10_encode>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	461a      	mov	r2, r3
 8010b70:	4b5a      	ldr	r3, [pc, #360]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b72:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
   can1_ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_encode(ams_cell_voltages.v10s10);
 8010b76:	463b      	mov	r3, r7
 8010b78:	ed93 7bea 	vldr	d7, [r3, #936]	; 0x3a8
 8010b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b80:	eef0 0a67 	vmov.f32	s1, s15
 8010b84:	f7f7 fa78 	bl	8008078 <can1_ams_cell_voltages_v10s10_encode>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	4b53      	ldr	r3, [pc, #332]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_encode(ams_cell_voltages.v4s11);
 8010b92:	463b      	mov	r3, r7
 8010b94:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8010b98:	eeb0 0a47 	vmov.f32	s0, s14
 8010b9c:	eef0 0a67 	vmov.f32	s1, s15
 8010ba0:	f7f7 fac2 	bl	8008128 <can1_ams_cell_voltages_v4s11_encode>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	4b4c      	ldr	r3, [pc, #304]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   can1_ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_encode(ams_cell_voltages.v10s11);
 8010bae:	463b      	mov	r3, r7
 8010bb0:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8010bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8010bb8:	eef0 0a67 	vmov.f32	s1, s15
 8010bbc:	f7f7 fb0c 	bl	80081d8 <can1_ams_cell_voltages_v10s11_encode>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	4b45      	ldr	r3, [pc, #276]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010bc6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_encode(ams_cell_voltages.v4s12);
 8010bca:	463b      	mov	r3, r7
 8010bcc:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8010bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8010bd4:	eef0 0a67 	vmov.f32	s1, s15
 8010bd8:	f7f7 fb56 	bl	8008288 <can1_ams_cell_voltages_v4s12_encode>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	461a      	mov	r2, r3
 8010be0:	4b3e      	ldr	r3, [pc, #248]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010be2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   can1_ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_encode(ams_cell_voltages.v10s12);
 8010be6:	463b      	mov	r3, r7
 8010be8:	ed93 7bee 	vldr	d7, [r3, #952]	; 0x3b8
 8010bec:	eeb0 0a47 	vmov.f32	s0, s14
 8010bf0:	eef0 0a67 	vmov.f32	s1, s15
 8010bf4:	f7f7 fba0 	bl	8008338 <can1_ams_cell_voltages_v10s12_encode>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	4b37      	ldr	r3, [pc, #220]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010bfe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_encode(ams_cell_voltages.v5s1);
 8010c02:	463b      	mov	r3, r7
 8010c04:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8010c08:	eeb0 0a47 	vmov.f32	s0, s14
 8010c0c:	eef0 0a67 	vmov.f32	s1, s15
 8010c10:	f7f7 fbea 	bl	80083e8 <can1_ams_cell_voltages_v5s1_encode>
 8010c14:	4603      	mov	r3, r0
 8010c16:	461a      	mov	r2, r3
 8010c18:	4b30      	ldr	r3, [pc, #192]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010c1a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
   can1_ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_encode(ams_cell_voltages.v11s1);
 8010c1e:	463b      	mov	r3, r7
 8010c20:	ed93 7bf0 	vldr	d7, [r3, #960]	; 0x3c0
 8010c24:	eeb0 0a47 	vmov.f32	s0, s14
 8010c28:	eef0 0a67 	vmov.f32	s1, s15
 8010c2c:	f7f7 fc34 	bl	8008498 <can1_ams_cell_voltages_v11s1_encode>
 8010c30:	4603      	mov	r3, r0
 8010c32:	461a      	mov	r2, r3
 8010c34:	4b29      	ldr	r3, [pc, #164]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010c36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_encode(ams_cell_voltages.v5s2);
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8010c40:	eeb0 0a47 	vmov.f32	s0, s14
 8010c44:	eef0 0a67 	vmov.f32	s1, s15
 8010c48:	f7f7 fc7e 	bl	8008548 <can1_ams_cell_voltages_v5s2_encode>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	461a      	mov	r2, r3
 8010c50:	4b22      	ldr	r3, [pc, #136]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010c52:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
   can1_ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_encode(ams_cell_voltages.v5s3);
 8010c56:	463b      	mov	r3, r7
 8010c58:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8010c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c60:	eef0 0a67 	vmov.f32	s1, s15
 8010c64:	f7f7 fcc8 	bl	80085f8 <can1_ams_cell_voltages_v5s3_encode>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4b1b      	ldr	r3, [pc, #108]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010c6e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_encode(ams_cell_voltages.v11s3);
 8010c72:	463b      	mov	r3, r7
 8010c74:	ed93 7bf2 	vldr	d7, [r3, #968]	; 0x3c8
 8010c78:	eeb0 0a47 	vmov.f32	s0, s14
 8010c7c:	eef0 0a67 	vmov.f32	s1, s15
 8010c80:	f7f7 fd12 	bl	80086a8 <can1_ams_cell_voltages_v11s3_encode>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	4b14      	ldr	r3, [pc, #80]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010c8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   can1_ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_encode(ams_cell_voltages.v5s4);
 8010c8e:	463b      	mov	r3, r7
 8010c90:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8010c94:	eeb0 0a47 	vmov.f32	s0, s14
 8010c98:	eef0 0a67 	vmov.f32	s1, s15
 8010c9c:	f7f7 fd5c 	bl	8008758 <can1_ams_cell_voltages_v5s4_encode>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010ca6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_encode(ams_cell_voltages.v5s5);
 8010caa:	463b      	mov	r3, r7
 8010cac:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8010cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8010cb4:	eef0 0a67 	vmov.f32	s1, s15
 8010cb8:	f7f7 fda6 	bl	8008808 <can1_ams_cell_voltages_v5s5_encode>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4b06      	ldr	r3, [pc, #24]	; (8010cdc <can1_ams_cell_voltages_transmit+0xb78>)
 8010cc2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   can1_ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_encode(ams_cell_voltages.v11s5);
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	ed93 7bf4 	vldr	d7, [r3, #976]	; 0x3d0
 8010ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8010cd0:	eef0 0a67 	vmov.f32	s1, s15
 8010cd4:	f7f7 fdf0 	bl	80088b8 <can1_ams_cell_voltages_v11s5_encode>
 8010cd8:	e002      	b.n	8010ce0 <can1_ams_cell_voltages_transmit+0xb7c>
 8010cda:	bf00      	nop
 8010cdc:	200014f4 	.word	0x200014f4
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	4bd2      	ldr	r3, [pc, #840]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010ce6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_encode(ams_cell_voltages.v5s6);
 8010cea:	463b      	mov	r3, r7
 8010cec:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8010cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8010cf4:	eef0 0a67 	vmov.f32	s1, s15
 8010cf8:	f7f7 fe36 	bl	8008968 <can1_ams_cell_voltages_v5s6_encode>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	461a      	mov	r2, r3
 8010d00:	4bcb      	ldr	r3, [pc, #812]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   can1_ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_encode(ams_cell_voltages.v5s7);
 8010d06:	463b      	mov	r3, r7
 8010d08:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8010d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d10:	eef0 0a67 	vmov.f32	s1, s15
 8010d14:	f7f7 fe80 	bl	8008a18 <can1_ams_cell_voltages_v5s7_encode>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	4bc4      	ldr	r3, [pc, #784]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_encode(ams_cell_voltages.v11s7);
 8010d22:	463b      	mov	r3, r7
 8010d24:	ed93 7bf6 	vldr	d7, [r3, #984]	; 0x3d8
 8010d28:	eeb0 0a47 	vmov.f32	s0, s14
 8010d2c:	eef0 0a67 	vmov.f32	s1, s15
 8010d30:	f7f7 feca 	bl	8008ac8 <can1_ams_cell_voltages_v11s7_encode>
 8010d34:	4603      	mov	r3, r0
 8010d36:	461a      	mov	r2, r3
 8010d38:	4bbd      	ldr	r3, [pc, #756]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d3a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
   can1_ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_encode(ams_cell_voltages.v5s8);
 8010d3e:	463b      	mov	r3, r7
 8010d40:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8010d44:	eeb0 0a47 	vmov.f32	s0, s14
 8010d48:	eef0 0a67 	vmov.f32	s1, s15
 8010d4c:	f7f7 ff14 	bl	8008b78 <can1_ams_cell_voltages_v5s8_encode>
 8010d50:	4603      	mov	r3, r0
 8010d52:	461a      	mov	r2, r3
 8010d54:	4bb6      	ldr	r3, [pc, #728]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d56:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_encode(ams_cell_voltages.v5s9);
 8010d5a:	463b      	mov	r3, r7
 8010d5c:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8010d60:	eeb0 0a47 	vmov.f32	s0, s14
 8010d64:	eef0 0a67 	vmov.f32	s1, s15
 8010d68:	f7f7 ff5e 	bl	8008c28 <can1_ams_cell_voltages_v5s9_encode>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4baf      	ldr	r3, [pc, #700]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d72:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
   can1_ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_encode(ams_cell_voltages.v11s9);
 8010d76:	463b      	mov	r3, r7
 8010d78:	ed93 7bf8 	vldr	d7, [r3, #992]	; 0x3e0
 8010d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d80:	eef0 0a67 	vmov.f32	s1, s15
 8010d84:	f7f7 ffa8 	bl	8008cd8 <can1_ams_cell_voltages_v11s9_encode>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4ba8      	ldr	r3, [pc, #672]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010d8e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_encode(ams_cell_voltages.v5s10);
 8010d92:	463b      	mov	r3, r7
 8010d94:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8010d98:	eeb0 0a47 	vmov.f32	s0, s14
 8010d9c:	eef0 0a67 	vmov.f32	s1, s15
 8010da0:	f7f7 fff2 	bl	8008d88 <can1_ams_cell_voltages_v5s10_encode>
 8010da4:	4603      	mov	r3, r0
 8010da6:	461a      	mov	r2, r3
 8010da8:	4ba1      	ldr	r3, [pc, #644]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010daa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
   can1_ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_encode(ams_cell_voltages.v5s11);
 8010dae:	463b      	mov	r3, r7
 8010db0:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8010db4:	eeb0 0a47 	vmov.f32	s0, s14
 8010db8:	eef0 0a67 	vmov.f32	s1, s15
 8010dbc:	f7f8 f83c 	bl	8008e38 <can1_ams_cell_voltages_v5s11_encode>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	4b9a      	ldr	r3, [pc, #616]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010dc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_encode(ams_cell_voltages.v11s11);
 8010dca:	463b      	mov	r3, r7
 8010dcc:	ed93 7bfa 	vldr	d7, [r3, #1000]	; 0x3e8
 8010dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8010dd4:	eef0 0a67 	vmov.f32	s1, s15
 8010dd8:	f7f8 f886 	bl	8008ee8 <can1_ams_cell_voltages_v11s11_encode>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	4b93      	ldr	r3, [pc, #588]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010de2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
   can1_ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_encode(ams_cell_voltages.v5s12);
 8010de6:	463b      	mov	r3, r7
 8010de8:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8010dec:	eeb0 0a47 	vmov.f32	s0, s14
 8010df0:	eef0 0a67 	vmov.f32	s1, s15
 8010df4:	f7f8 f8d0 	bl	8008f98 <can1_ams_cell_voltages_v5s12_encode>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	4b8c      	ldr	r3, [pc, #560]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010dfe:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_encode(ams_cell_voltages.v6s1);
 8010e02:	463b      	mov	r3, r7
 8010e04:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8010e08:	eeb0 0a47 	vmov.f32	s0, s14
 8010e0c:	eef0 0a67 	vmov.f32	s1, s15
 8010e10:	f7f8 f91a 	bl	8009048 <can1_ams_cell_voltages_v6s1_encode>
 8010e14:	4603      	mov	r3, r0
 8010e16:	461a      	mov	r2, r3
 8010e18:	4b85      	ldr	r3, [pc, #532]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010e1a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
   can1_ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_encode(ams_cell_voltages.v6s2);
 8010e1e:	463b      	mov	r3, r7
 8010e20:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8010e24:	eeb0 0a47 	vmov.f32	s0, s14
 8010e28:	eef0 0a67 	vmov.f32	s1, s15
 8010e2c:	f7f8 f964 	bl	80090f8 <can1_ams_cell_voltages_v6s2_encode>
 8010e30:	4603      	mov	r3, r0
 8010e32:	461a      	mov	r2, r3
 8010e34:	4b7e      	ldr	r3, [pc, #504]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_encode(ams_cell_voltages.v6s3);
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8010e40:	eeb0 0a47 	vmov.f32	s0, s14
 8010e44:	eef0 0a67 	vmov.f32	s1, s15
 8010e48:	f7f8 f9ae 	bl	80091a8 <can1_ams_cell_voltages_v6s3_encode>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	4b77      	ldr	r3, [pc, #476]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010e52:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   can1_ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_encode(ams_cell_voltages.v6s4);
 8010e56:	463b      	mov	r3, r7
 8010e58:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8010e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e60:	eef0 0a67 	vmov.f32	s1, s15
 8010e64:	f7f8 f9f8 	bl	8009258 <can1_ams_cell_voltages_v6s4_encode>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	4b70      	ldr	r3, [pc, #448]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010e6e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_encode(ams_cell_voltages.v6s5);
 8010e72:	463b      	mov	r3, r7
 8010e74:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 8010e78:	eeb0 0a47 	vmov.f32	s0, s14
 8010e7c:	eef0 0a67 	vmov.f32	s1, s15
 8010e80:	f7f8 fa42 	bl	8009308 <can1_ams_cell_voltages_v6s5_encode>
 8010e84:	4603      	mov	r3, r0
 8010e86:	461a      	mov	r2, r3
 8010e88:	4b69      	ldr	r3, [pc, #420]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010e8a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
   can1_ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_encode(ams_cell_voltages.v6s6);
 8010e8e:	463b      	mov	r3, r7
 8010e90:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
 8010e94:	eeb0 0a47 	vmov.f32	s0, s14
 8010e98:	eef0 0a67 	vmov.f32	s1, s15
 8010e9c:	f7f8 fa8c 	bl	80093b8 <can1_ams_cell_voltages_v6s6_encode>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	4b62      	ldr	r3, [pc, #392]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   can1_ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_encode(ams_cell_voltages.v6s7);
 8010eaa:	463b      	mov	r3, r7
 8010eac:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8010eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8010eb4:	eef0 0a67 	vmov.f32	s1, s15
 8010eb8:	f7f8 fad6 	bl	8009468 <can1_ams_cell_voltages_v6s7_encode>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	4b5b      	ldr	r3, [pc, #364]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010ec2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   can1_ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_encode(ams_cell_voltages.v6s8);
 8010ec6:	463b      	mov	r3, r7
 8010ec8:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 8010ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8010ed0:	eef0 0a67 	vmov.f32	s1, s15
 8010ed4:	f7f8 fb20 	bl	8009518 <can1_ams_cell_voltages_v6s8_encode>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	461a      	mov	r2, r3
 8010edc:	4b54      	ldr	r3, [pc, #336]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010ede:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   can1_ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_encode(ams_cell_voltages.v6s9);
 8010ee2:	463b      	mov	r3, r7
 8010ee4:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8010ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8010eec:	eef0 0a67 	vmov.f32	s1, s15
 8010ef0:	f7f8 fb6a 	bl	80095c8 <can1_ams_cell_voltages_v6s9_encode>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	4b4d      	ldr	r3, [pc, #308]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010efa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   can1_ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_encode(ams_cell_voltages.v6s10);
 8010efe:	463b      	mov	r3, r7
 8010f00:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 8010f04:	eeb0 0a47 	vmov.f32	s0, s14
 8010f08:	eef0 0a67 	vmov.f32	s1, s15
 8010f0c:	f7f8 fbb4 	bl	8009678 <can1_ams_cell_voltages_v6s10_encode>
 8010f10:	4603      	mov	r3, r0
 8010f12:	461a      	mov	r2, r3
 8010f14:	4b46      	ldr	r3, [pc, #280]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   can1_ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_encode(ams_cell_voltages.v6s11);
 8010f1a:	463b      	mov	r3, r7
 8010f1c:	ed93 7b8c 	vldr	d7, [r3, #560]	; 0x230
 8010f20:	eeb0 0a47 	vmov.f32	s0, s14
 8010f24:	eef0 0a67 	vmov.f32	s1, s15
 8010f28:	f7f8 fbfe 	bl	8009728 <can1_ams_cell_voltages_v6s11_encode>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4b3f      	ldr	r3, [pc, #252]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f32:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   can1_ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_encode(ams_cell_voltages.v6s12);
 8010f36:	463b      	mov	r3, r7
 8010f38:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 8010f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010f40:	eef0 0a67 	vmov.f32	s1, s15
 8010f44:	f7f8 fc48 	bl	80097d8 <can1_ams_cell_voltages_v6s12_encode>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	4b38      	ldr	r3, [pc, #224]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f4e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

       can1_ams_cell_voltages.voltage_multiplexor = 0;
 8010f52:	4b37      	ldr	r3, [pc, #220]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f54:	2200      	movs	r2, #0
 8010f56:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010f58:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f5c:	2207      	movs	r2, #7
 8010f5e:	4934      	ldr	r1, [pc, #208]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f1 f92f 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010f66:	e00d      	b.n	8010f84 <can1_ams_cell_voltages_transmit+0xe20>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010f68:	4b32      	ldr	r3, [pc, #200]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 8010f6a:	6818      	ldr	r0, [r3, #0]
 8010f6c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010f70:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010f74:	4b30      	ldr	r3, [pc, #192]	; (8011038 <can1_ams_cell_voltages_transmit+0xed4>)
 8010f76:	f014 fbb3 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <can1_ams_cell_voltages_transmit+0xe20>
           Error_Handler();
 8010f80:	f006 f84c 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010f84:	4b2b      	ldr	r3, [pc, #172]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f014 fc84 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1e9      	bne.n	8010f68 <can1_ams_cell_voltages_transmit+0xe04>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 1;
 8010f94:	4b26      	ldr	r3, [pc, #152]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010f96:	2201      	movs	r2, #1
 8010f98:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010f9a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f9e:	2207      	movs	r2, #7
 8010fa0:	4923      	ldr	r1, [pc, #140]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7f1 f90e 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010fa8:	e00d      	b.n	8010fc6 <can1_ams_cell_voltages_transmit+0xe62>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010faa:	4b22      	ldr	r3, [pc, #136]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010fb2:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010fb6:	4b20      	ldr	r3, [pc, #128]	; (8011038 <can1_ams_cell_voltages_transmit+0xed4>)
 8010fb8:	f014 fb92 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <can1_ams_cell_voltages_transmit+0xe62>
           Error_Handler();
 8010fc2:	f006 f82b 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010fc6:	4b1b      	ldr	r3, [pc, #108]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f014 fc63 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d1e9      	bne.n	8010faa <can1_ams_cell_voltages_transmit+0xe46>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 2;
 8010fd6:	4b16      	ldr	r3, [pc, #88]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010fd8:	2202      	movs	r2, #2
 8010fda:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010fdc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010fe0:	2207      	movs	r2, #7
 8010fe2:	4913      	ldr	r1, [pc, #76]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7f1 f8ed 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8010fea:	e00d      	b.n	8011008 <can1_ams_cell_voltages_transmit+0xea4>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010fec:	4b11      	ldr	r3, [pc, #68]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 8010fee:	6818      	ldr	r0, [r3, #0]
 8010ff0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010ff4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	; (8011038 <can1_ams_cell_voltages_transmit+0xed4>)
 8010ffa:	f014 fb71 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <can1_ams_cell_voltages_transmit+0xea4>
           Error_Handler();
 8011004:	f006 f80a 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <can1_ams_cell_voltages_transmit+0xed0>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4618      	mov	r0, r3
 801100e:	f014 fc42 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d1e9      	bne.n	8010fec <can1_ams_cell_voltages_transmit+0xe88>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 3;
 8011018:	4b05      	ldr	r3, [pc, #20]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 801101a:	2203      	movs	r2, #3
 801101c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801101e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011022:	2207      	movs	r2, #7
 8011024:	4902      	ldr	r1, [pc, #8]	; (8011030 <can1_ams_cell_voltages_transmit+0xecc>)
 8011026:	4618      	mov	r0, r3
 8011028:	f7f1 f8cc 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801102c:	e014      	b.n	8011058 <can1_ams_cell_voltages_transmit+0xef4>
 801102e:	bf00      	nop
 8011030:	200014f4 	.word	0x200014f4
 8011034:	20001630 	.word	0x20001630
 8011038:	200014cc 	.word	0x200014cc
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801103c:	4bb5      	ldr	r3, [pc, #724]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801103e:	6818      	ldr	r0, [r3, #0]
 8011040:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011044:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011048:	4bb3      	ldr	r3, [pc, #716]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 801104a:	f014 fb49 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d001      	beq.n	8011058 <can1_ams_cell_voltages_transmit+0xef4>
           Error_Handler();
 8011054:	f005 ffe2 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011058:	4bae      	ldr	r3, [pc, #696]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	4618      	mov	r0, r3
 801105e:	f014 fc1a 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1e9      	bne.n	801103c <can1_ams_cell_voltages_transmit+0xed8>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 4;
 8011068:	4bac      	ldr	r3, [pc, #688]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 801106a:	2204      	movs	r2, #4
 801106c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801106e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011072:	2207      	movs	r2, #7
 8011074:	49a9      	ldr	r1, [pc, #676]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011076:	4618      	mov	r0, r3
 8011078:	f7f1 f8a4 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801107c:	e00d      	b.n	801109a <can1_ams_cell_voltages_transmit+0xf36>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801107e:	4ba5      	ldr	r3, [pc, #660]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011080:	6818      	ldr	r0, [r3, #0]
 8011082:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011086:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801108a:	4ba3      	ldr	r3, [pc, #652]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 801108c:	f014 fb28 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d001      	beq.n	801109a <can1_ams_cell_voltages_transmit+0xf36>
           Error_Handler();
 8011096:	f005 ffc1 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801109a:	4b9e      	ldr	r3, [pc, #632]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4618      	mov	r0, r3
 80110a0:	f014 fbf9 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1e9      	bne.n	801107e <can1_ams_cell_voltages_transmit+0xf1a>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 5;
 80110aa:	4b9c      	ldr	r3, [pc, #624]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80110ac:	2205      	movs	r2, #5
 80110ae:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80110b0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80110b4:	2207      	movs	r2, #7
 80110b6:	4999      	ldr	r1, [pc, #612]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7f1 f883 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80110be:	e00d      	b.n	80110dc <can1_ams_cell_voltages_transmit+0xf78>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80110c0:	4b94      	ldr	r3, [pc, #592]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80110c2:	6818      	ldr	r0, [r3, #0]
 80110c4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80110c8:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80110cc:	4b92      	ldr	r3, [pc, #584]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 80110ce:	f014 fb07 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <can1_ams_cell_voltages_transmit+0xf78>
           Error_Handler();
 80110d8:	f005 ffa0 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80110dc:	4b8d      	ldr	r3, [pc, #564]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f014 fbd8 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1e9      	bne.n	80110c0 <can1_ams_cell_voltages_transmit+0xf5c>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 6;
 80110ec:	4b8b      	ldr	r3, [pc, #556]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80110ee:	2206      	movs	r2, #6
 80110f0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80110f2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80110f6:	2207      	movs	r2, #7
 80110f8:	4988      	ldr	r1, [pc, #544]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7f1 f862 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011100:	e00d      	b.n	801111e <can1_ams_cell_voltages_transmit+0xfba>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011102:	4b84      	ldr	r3, [pc, #528]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011104:	6818      	ldr	r0, [r3, #0]
 8011106:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801110a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801110e:	4b82      	ldr	r3, [pc, #520]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 8011110:	f014 fae6 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011114:	4603      	mov	r3, r0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d001      	beq.n	801111e <can1_ams_cell_voltages_transmit+0xfba>
           Error_Handler();
 801111a:	f005 ff7f 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801111e:	4b7d      	ldr	r3, [pc, #500]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4618      	mov	r0, r3
 8011124:	f014 fbb7 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1e9      	bne.n	8011102 <can1_ams_cell_voltages_transmit+0xf9e>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 7;
 801112e:	4b7b      	ldr	r3, [pc, #492]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011130:	2207      	movs	r2, #7
 8011132:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011134:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011138:	2207      	movs	r2, #7
 801113a:	4978      	ldr	r1, [pc, #480]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 801113c:	4618      	mov	r0, r3
 801113e:	f7f1 f841 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011142:	e00d      	b.n	8011160 <can1_ams_cell_voltages_transmit+0xffc>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011144:	4b73      	ldr	r3, [pc, #460]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011146:	6818      	ldr	r0, [r3, #0]
 8011148:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801114c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011150:	4b71      	ldr	r3, [pc, #452]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 8011152:	f014 fac5 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d001      	beq.n	8011160 <can1_ams_cell_voltages_transmit+0xffc>
           Error_Handler();
 801115c:	f005 ff5e 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011160:	4b6c      	ldr	r3, [pc, #432]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4618      	mov	r0, r3
 8011166:	f014 fb96 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801116a:	4603      	mov	r3, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e9      	bne.n	8011144 <can1_ams_cell_voltages_transmit+0xfe0>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 8;
 8011170:	4b6a      	ldr	r3, [pc, #424]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011172:	2208      	movs	r2, #8
 8011174:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011176:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801117a:	2207      	movs	r2, #7
 801117c:	4967      	ldr	r1, [pc, #412]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 801117e:	4618      	mov	r0, r3
 8011180:	f7f1 f820 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011184:	e00d      	b.n	80111a2 <can1_ams_cell_voltages_transmit+0x103e>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011186:	4b63      	ldr	r3, [pc, #396]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011188:	6818      	ldr	r0, [r3, #0]
 801118a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801118e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011192:	4b61      	ldr	r3, [pc, #388]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 8011194:	f014 faa4 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <can1_ams_cell_voltages_transmit+0x103e>
           Error_Handler();
 801119e:	f005 ff3d 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80111a2:	4b5c      	ldr	r3, [pc, #368]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f014 fb75 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1e9      	bne.n	8011186 <can1_ams_cell_voltages_transmit+0x1022>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 9;
 80111b2:	4b5a      	ldr	r3, [pc, #360]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80111b4:	2209      	movs	r2, #9
 80111b6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80111b8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111bc:	2207      	movs	r2, #7
 80111be:	4957      	ldr	r1, [pc, #348]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f0 ffff 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80111c6:	e00d      	b.n	80111e4 <can1_ams_cell_voltages_transmit+0x1080>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111c8:	4b52      	ldr	r3, [pc, #328]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80111ca:	6818      	ldr	r0, [r3, #0]
 80111cc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80111d0:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80111d4:	4b50      	ldr	r3, [pc, #320]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 80111d6:	f014 fa83 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d001      	beq.n	80111e4 <can1_ams_cell_voltages_transmit+0x1080>
           Error_Handler();
 80111e0:	f005 ff1c 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80111e4:	4b4b      	ldr	r3, [pc, #300]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f014 fb54 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d1e9      	bne.n	80111c8 <can1_ams_cell_voltages_transmit+0x1064>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 10;
 80111f4:	4b49      	ldr	r3, [pc, #292]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80111f6:	220a      	movs	r2, #10
 80111f8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80111fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111fe:	2207      	movs	r2, #7
 8011200:	4946      	ldr	r1, [pc, #280]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011202:	4618      	mov	r0, r3
 8011204:	f7f0 ffde 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011208:	e00d      	b.n	8011226 <can1_ams_cell_voltages_transmit+0x10c2>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801120a:	4b42      	ldr	r3, [pc, #264]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801120c:	6818      	ldr	r0, [r3, #0]
 801120e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011212:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011216:	4b40      	ldr	r3, [pc, #256]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 8011218:	f014 fa62 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <can1_ams_cell_voltages_transmit+0x10c2>
           Error_Handler();
 8011222:	f005 fefb 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011226:	4b3b      	ldr	r3, [pc, #236]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	4618      	mov	r0, r3
 801122c:	f014 fb33 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1e9      	bne.n	801120a <can1_ams_cell_voltages_transmit+0x10a6>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 11;
 8011236:	4b39      	ldr	r3, [pc, #228]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011238:	220b      	movs	r2, #11
 801123a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801123c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011240:	2207      	movs	r2, #7
 8011242:	4936      	ldr	r1, [pc, #216]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011244:	4618      	mov	r0, r3
 8011246:	f7f0 ffbd 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801124a:	e00d      	b.n	8011268 <can1_ams_cell_voltages_transmit+0x1104>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801124c:	4b31      	ldr	r3, [pc, #196]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801124e:	6818      	ldr	r0, [r3, #0]
 8011250:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011254:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011258:	4b2f      	ldr	r3, [pc, #188]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 801125a:	f014 fa41 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d001      	beq.n	8011268 <can1_ams_cell_voltages_transmit+0x1104>
           Error_Handler();
 8011264:	f005 feda 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011268:	4b2a      	ldr	r3, [pc, #168]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4618      	mov	r0, r3
 801126e:	f014 fb12 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1e9      	bne.n	801124c <can1_ams_cell_voltages_transmit+0x10e8>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 12;
 8011278:	4b28      	ldr	r3, [pc, #160]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 801127a:	220c      	movs	r2, #12
 801127c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801127e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011282:	2207      	movs	r2, #7
 8011284:	4925      	ldr	r1, [pc, #148]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 8011286:	4618      	mov	r0, r3
 8011288:	f7f0 ff9c 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801128c:	e00d      	b.n	80112aa <can1_ams_cell_voltages_transmit+0x1146>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801128e:	4b21      	ldr	r3, [pc, #132]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 8011290:	6818      	ldr	r0, [r3, #0]
 8011292:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011296:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801129a:	4b1f      	ldr	r3, [pc, #124]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 801129c:	f014 fa20 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <can1_ams_cell_voltages_transmit+0x1146>
           Error_Handler();
 80112a6:	f005 feb9 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80112aa:	4b1a      	ldr	r3, [pc, #104]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f014 faf1 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1e9      	bne.n	801128e <can1_ams_cell_voltages_transmit+0x112a>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 13;
 80112ba:	4b18      	ldr	r3, [pc, #96]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80112bc:	220d      	movs	r2, #13
 80112be:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80112c0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112c4:	2207      	movs	r2, #7
 80112c6:	4915      	ldr	r1, [pc, #84]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f0 ff7b 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80112ce:	e00d      	b.n	80112ec <can1_ams_cell_voltages_transmit+0x1188>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80112d0:	4b10      	ldr	r3, [pc, #64]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80112d2:	6818      	ldr	r0, [r3, #0]
 80112d4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80112d8:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80112dc:	4b0e      	ldr	r3, [pc, #56]	; (8011318 <can1_ams_cell_voltages_transmit+0x11b4>)
 80112de:	f014 f9ff 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d001      	beq.n	80112ec <can1_ams_cell_voltages_transmit+0x1188>
           Error_Handler();
 80112e8:	f005 fe98 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80112ec:	4b09      	ldr	r3, [pc, #36]	; (8011314 <can1_ams_cell_voltages_transmit+0x11b0>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f014 fad0 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1e9      	bne.n	80112d0 <can1_ams_cell_voltages_transmit+0x116c>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 14;
 80112fc:	4b07      	ldr	r3, [pc, #28]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 80112fe:	220e      	movs	r2, #14
 8011300:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011302:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011306:	2207      	movs	r2, #7
 8011308:	4904      	ldr	r1, [pc, #16]	; (801131c <can1_ams_cell_voltages_transmit+0x11b8>)
 801130a:	4618      	mov	r0, r3
 801130c:	f7f0 ff5a 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011310:	e014      	b.n	801133c <can1_ams_cell_voltages_transmit+0x11d8>
 8011312:	bf00      	nop
 8011314:	20001630 	.word	0x20001630
 8011318:	200014cc 	.word	0x200014cc
 801131c:	200014f4 	.word	0x200014f4
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011320:	4ba2      	ldr	r3, [pc, #648]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011322:	6818      	ldr	r0, [r3, #0]
 8011324:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011328:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801132c:	4ba0      	ldr	r3, [pc, #640]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 801132e:	f014 f9d7 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <can1_ams_cell_voltages_transmit+0x11d8>
           Error_Handler();
 8011338:	f005 fe70 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801133c:	4b9b      	ldr	r3, [pc, #620]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4618      	mov	r0, r3
 8011342:	f014 faa8 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d1e9      	bne.n	8011320 <can1_ams_cell_voltages_transmit+0x11bc>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 15;
 801134c:	4b99      	ldr	r3, [pc, #612]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801134e:	220f      	movs	r2, #15
 8011350:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011352:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011356:	2207      	movs	r2, #7
 8011358:	4996      	ldr	r1, [pc, #600]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801135a:	4618      	mov	r0, r3
 801135c:	f7f0 ff32 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011360:	e00d      	b.n	801137e <can1_ams_cell_voltages_transmit+0x121a>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011362:	4b92      	ldr	r3, [pc, #584]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011364:	6818      	ldr	r0, [r3, #0]
 8011366:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801136a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801136e:	4b90      	ldr	r3, [pc, #576]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 8011370:	f014 f9b6 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <can1_ams_cell_voltages_transmit+0x121a>
           Error_Handler();
 801137a:	f005 fe4f 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801137e:	4b8b      	ldr	r3, [pc, #556]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4618      	mov	r0, r3
 8011384:	f014 fa87 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1e9      	bne.n	8011362 <can1_ams_cell_voltages_transmit+0x11fe>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 16;
 801138e:	4b89      	ldr	r3, [pc, #548]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011390:	2210      	movs	r2, #16
 8011392:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011394:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011398:	2207      	movs	r2, #7
 801139a:	4986      	ldr	r1, [pc, #536]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801139c:	4618      	mov	r0, r3
 801139e:	f7f0 ff11 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80113a2:	e00d      	b.n	80113c0 <can1_ams_cell_voltages_transmit+0x125c>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113a4:	4b81      	ldr	r3, [pc, #516]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80113a6:	6818      	ldr	r0, [r3, #0]
 80113a8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113ac:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113b0:	4b7f      	ldr	r3, [pc, #508]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 80113b2:	f014 f995 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d001      	beq.n	80113c0 <can1_ams_cell_voltages_transmit+0x125c>
           Error_Handler();
 80113bc:	f005 fe2e 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80113c0:	4b7a      	ldr	r3, [pc, #488]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f014 fa66 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1e9      	bne.n	80113a4 <can1_ams_cell_voltages_transmit+0x1240>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 17;
 80113d0:	4b78      	ldr	r3, [pc, #480]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 80113d2:	2211      	movs	r2, #17
 80113d4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80113d6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113da:	2207      	movs	r2, #7
 80113dc:	4975      	ldr	r1, [pc, #468]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 80113de:	4618      	mov	r0, r3
 80113e0:	f7f0 fef0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80113e4:	e00d      	b.n	8011402 <can1_ams_cell_voltages_transmit+0x129e>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113e6:	4b71      	ldr	r3, [pc, #452]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113ee:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113f2:	4b6f      	ldr	r3, [pc, #444]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 80113f4:	f014 f974 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <can1_ams_cell_voltages_transmit+0x129e>
           Error_Handler();
 80113fe:	f005 fe0d 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011402:	4b6a      	ldr	r3, [pc, #424]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4618      	mov	r0, r3
 8011408:	f014 fa45 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1e9      	bne.n	80113e6 <can1_ams_cell_voltages_transmit+0x1282>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 18;
 8011412:	4b68      	ldr	r3, [pc, #416]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011414:	2212      	movs	r2, #18
 8011416:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011418:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801141c:	2207      	movs	r2, #7
 801141e:	4965      	ldr	r1, [pc, #404]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011420:	4618      	mov	r0, r3
 8011422:	f7f0 fecf 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011426:	e00d      	b.n	8011444 <can1_ams_cell_voltages_transmit+0x12e0>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011428:	4b60      	ldr	r3, [pc, #384]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011430:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011434:	4b5e      	ldr	r3, [pc, #376]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 8011436:	f014 f953 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <can1_ams_cell_voltages_transmit+0x12e0>
           Error_Handler();
 8011440:	f005 fdec 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011444:	4b59      	ldr	r3, [pc, #356]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4618      	mov	r0, r3
 801144a:	f014 fa24 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d1e9      	bne.n	8011428 <can1_ams_cell_voltages_transmit+0x12c4>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 19;
 8011454:	4b57      	ldr	r3, [pc, #348]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011456:	2213      	movs	r2, #19
 8011458:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801145a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801145e:	2207      	movs	r2, #7
 8011460:	4954      	ldr	r1, [pc, #336]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011462:	4618      	mov	r0, r3
 8011464:	f7f0 feae 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011468:	e00d      	b.n	8011486 <can1_ams_cell_voltages_transmit+0x1322>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801146a:	4b50      	ldr	r3, [pc, #320]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 801146c:	6818      	ldr	r0, [r3, #0]
 801146e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011472:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011476:	4b4e      	ldr	r3, [pc, #312]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 8011478:	f014 f932 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d001      	beq.n	8011486 <can1_ams_cell_voltages_transmit+0x1322>
           Error_Handler();
 8011482:	f005 fdcb 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011486:	4b49      	ldr	r3, [pc, #292]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4618      	mov	r0, r3
 801148c:	f014 fa03 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1e9      	bne.n	801146a <can1_ams_cell_voltages_transmit+0x1306>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 20;
 8011496:	4b47      	ldr	r3, [pc, #284]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011498:	2214      	movs	r2, #20
 801149a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801149c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80114a0:	2207      	movs	r2, #7
 80114a2:	4944      	ldr	r1, [pc, #272]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7f0 fe8d 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80114aa:	e00d      	b.n	80114c8 <can1_ams_cell_voltages_transmit+0x1364>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80114ac:	4b3f      	ldr	r3, [pc, #252]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80114ae:	6818      	ldr	r0, [r3, #0]
 80114b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114b4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114b8:	4b3d      	ldr	r3, [pc, #244]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 80114ba:	f014 f911 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <can1_ams_cell_voltages_transmit+0x1364>
           Error_Handler();
 80114c4:	f005 fdaa 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80114c8:	4b38      	ldr	r3, [pc, #224]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f014 f9e2 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1e9      	bne.n	80114ac <can1_ams_cell_voltages_transmit+0x1348>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 21;
 80114d8:	4b36      	ldr	r3, [pc, #216]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 80114da:	2215      	movs	r2, #21
 80114dc:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80114de:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80114e2:	2207      	movs	r2, #7
 80114e4:	4933      	ldr	r1, [pc, #204]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7f0 fe6c 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 80114ec:	e00d      	b.n	801150a <can1_ams_cell_voltages_transmit+0x13a6>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80114ee:	4b2f      	ldr	r3, [pc, #188]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 80114f0:	6818      	ldr	r0, [r3, #0]
 80114f2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114f6:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114fa:	4b2d      	ldr	r3, [pc, #180]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 80114fc:	f014 f8f0 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011500:	4603      	mov	r3, r0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d001      	beq.n	801150a <can1_ams_cell_voltages_transmit+0x13a6>
           Error_Handler();
 8011506:	f005 fd89 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801150a:	4b28      	ldr	r3, [pc, #160]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4618      	mov	r0, r3
 8011510:	f014 f9c1 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1e9      	bne.n	80114ee <can1_ams_cell_voltages_transmit+0x138a>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 22;
 801151a:	4b26      	ldr	r3, [pc, #152]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801151c:	2216      	movs	r2, #22
 801151e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011520:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011524:	2207      	movs	r2, #7
 8011526:	4923      	ldr	r1, [pc, #140]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 8011528:	4618      	mov	r0, r3
 801152a:	f7f0 fe4b 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801152e:	e00d      	b.n	801154c <can1_ams_cell_voltages_transmit+0x13e8>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011530:	4b1e      	ldr	r3, [pc, #120]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011532:	6818      	ldr	r0, [r3, #0]
 8011534:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011538:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801153c:	4b1c      	ldr	r3, [pc, #112]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 801153e:	f014 f8cf 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <can1_ams_cell_voltages_transmit+0x13e8>
           Error_Handler();
 8011548:	f005 fd68 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801154c:	4b17      	ldr	r3, [pc, #92]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4618      	mov	r0, r3
 8011552:	f014 f9a0 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d1e9      	bne.n	8011530 <can1_ams_cell_voltages_transmit+0x13cc>
           }
       }
       can1_ams_cell_voltages.voltage_multiplexor = 23;
 801155c:	4b15      	ldr	r3, [pc, #84]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801155e:	2217      	movs	r2, #23
 8011560:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011562:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011566:	2207      	movs	r2, #7
 8011568:	4912      	ldr	r1, [pc, #72]	; (80115b4 <can1_ams_cell_voltages_transmit+0x1450>)
 801156a:	4618      	mov	r0, r3
 801156c:	f7f0 fe2a 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011570:	e00d      	b.n	801158e <can1_ams_cell_voltages_transmit+0x142a>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011572:	4b0e      	ldr	r3, [pc, #56]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801157a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801157e:	4b0c      	ldr	r3, [pc, #48]	; (80115b0 <can1_ams_cell_voltages_transmit+0x144c>)
 8011580:	f014 f8ae 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d001      	beq.n	801158e <can1_ams_cell_voltages_transmit+0x142a>
           Error_Handler();
 801158a:	f005 fd47 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 801158e:	4b07      	ldr	r3, [pc, #28]	; (80115ac <can1_ams_cell_voltages_transmit+0x1448>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4618      	mov	r0, r3
 8011594:	f014 f97f 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e9      	bne.n	8011572 <can1_ams_cell_voltages_transmit+0x140e>
           }
       }
}
 801159e:	bf00      	nop
 80115a0:	bf00      	nop
 80115a2:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	20001630 	.word	0x20001630
 80115b0:	200014cc 	.word	0x200014cc
 80115b4:	200014f4 	.word	0x200014f4

080115b8 <can1_ams_cell_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_transmit() {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80115be:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80115c0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80115c4:	2200      	movs	r2, #0
 80115c6:	601a      	str	r2, [r3, #0]
 80115c8:	605a      	str	r2, [r3, #4]
 80115ca:	609a      	str	r2, [r3, #8]
 80115cc:	60da      	str	r2, [r3, #12]
 80115ce:	611a      	str	r2, [r3, #16]
 80115d0:	615a      	str	r2, [r3, #20]
 80115d2:	2322      	movs	r3, #34	; 0x22
 80115d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80115d8:	2308      	movs	r3, #8
 80115da:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
       .StdId = 34,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_temperatures_t ams_cell_temperatures;
   can1_ams_cell_temperatures_tx_callback(&ams_cell_temperatures);
 80115de:	463b      	mov	r3, r7
 80115e0:	4618      	mov	r0, r3
 80115e2:	f003 ff6b 	bl	80154bc <can1_ams_cell_temperatures_tx_callback>

   can1_ams_cell_temperatures.temperature_multiplexor = can1_ams_cell_temperatures_temperature_multiplexor_encode(ams_cell_temperatures.temperature_multiplexor);
 80115e6:	463b      	mov	r3, r7
 80115e8:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7ee ff7b 	bl	80004e8 <__aeabi_ui2d>
 80115f2:	4602      	mov	r2, r0
 80115f4:	460b      	mov	r3, r1
 80115f6:	ec43 2b10 	vmov	d0, r2, r3
 80115fa:	f7fa fc83 	bl	800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>
 80115fe:	4603      	mov	r3, r0
 8011600:	461a      	mov	r2, r3
 8011602:	4bde      	ldr	r3, [pc, #888]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011604:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(ams_cell_temperatures.t1s1);
 8011606:	463b      	mov	r3, r7
 8011608:	ed93 7b00 	vldr	d7, [r3]
 801160c:	eeb0 0a47 	vmov.f32	s0, s14
 8011610:	eef0 0a67 	vmov.f32	s1, s15
 8011614:	f7fa fc88 	bl	800bf28 <can1_ams_cell_temperatures_t1s1_encode>
 8011618:	4603      	mov	r3, r0
 801161a:	461a      	mov	r2, r3
 801161c:	4bd7      	ldr	r3, [pc, #860]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801161e:	805a      	strh	r2, [r3, #2]
   can1_ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_encode(ams_cell_temperatures.t1s2);
 8011620:	463b      	mov	r3, r7
 8011622:	ed93 7b02 	vldr	d7, [r3, #8]
 8011626:	eeb0 0a47 	vmov.f32	s0, s14
 801162a:	eef0 0a67 	vmov.f32	s1, s15
 801162e:	f7fa fcd3 	bl	800bfd8 <can1_ams_cell_temperatures_t1s2_encode>
 8011632:	4603      	mov	r3, r0
 8011634:	461a      	mov	r2, r3
 8011636:	4bd1      	ldr	r3, [pc, #836]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011638:	809a      	strh	r2, [r3, #4]
   can1_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(ams_cell_temperatures.t1s3);
 801163a:	463b      	mov	r3, r7
 801163c:	ed93 7b04 	vldr	d7, [r3, #16]
 8011640:	eeb0 0a47 	vmov.f32	s0, s14
 8011644:	eef0 0a67 	vmov.f32	s1, s15
 8011648:	f7fa fd1e 	bl	800c088 <can1_ams_cell_temperatures_t1s3_encode>
 801164c:	4603      	mov	r3, r0
 801164e:	461a      	mov	r2, r3
 8011650:	4bca      	ldr	r3, [pc, #808]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011652:	80da      	strh	r2, [r3, #6]
   can1_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(ams_cell_temperatures.t1s4);
 8011654:	463b      	mov	r3, r7
 8011656:	ed93 7b06 	vldr	d7, [r3, #24]
 801165a:	eeb0 0a47 	vmov.f32	s0, s14
 801165e:	eef0 0a67 	vmov.f32	s1, s15
 8011662:	f7fa fd69 	bl	800c138 <can1_ams_cell_temperatures_t1s4_encode>
 8011666:	4603      	mov	r3, r0
 8011668:	461a      	mov	r2, r3
 801166a:	4bc4      	ldr	r3, [pc, #784]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801166c:	811a      	strh	r2, [r3, #8]
   can1_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(ams_cell_temperatures.t1s5);
 801166e:	463b      	mov	r3, r7
 8011670:	ed93 7b08 	vldr	d7, [r3, #32]
 8011674:	eeb0 0a47 	vmov.f32	s0, s14
 8011678:	eef0 0a67 	vmov.f32	s1, s15
 801167c:	f7fa fdb4 	bl	800c1e8 <can1_ams_cell_temperatures_t1s5_encode>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	4bbd      	ldr	r3, [pc, #756]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011686:	815a      	strh	r2, [r3, #10]
   can1_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(ams_cell_temperatures.t1s6);
 8011688:	463b      	mov	r3, r7
 801168a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801168e:	eeb0 0a47 	vmov.f32	s0, s14
 8011692:	eef0 0a67 	vmov.f32	s1, s15
 8011696:	f7fa fdff 	bl	800c298 <can1_ams_cell_temperatures_t1s6_encode>
 801169a:	4603      	mov	r3, r0
 801169c:	461a      	mov	r2, r3
 801169e:	4bb7      	ldr	r3, [pc, #732]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116a0:	819a      	strh	r2, [r3, #12]
   can1_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(ams_cell_temperatures.t1s7);
 80116a2:	463b      	mov	r3, r7
 80116a4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80116a8:	eeb0 0a47 	vmov.f32	s0, s14
 80116ac:	eef0 0a67 	vmov.f32	s1, s15
 80116b0:	f7fa fe4a 	bl	800c348 <can1_ams_cell_temperatures_t1s7_encode>
 80116b4:	4603      	mov	r3, r0
 80116b6:	461a      	mov	r2, r3
 80116b8:	4bb0      	ldr	r3, [pc, #704]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116ba:	81da      	strh	r2, [r3, #14]
   can1_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(ams_cell_temperatures.t1s8);
 80116bc:	463b      	mov	r3, r7
 80116be:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80116c2:	eeb0 0a47 	vmov.f32	s0, s14
 80116c6:	eef0 0a67 	vmov.f32	s1, s15
 80116ca:	f7fa fe95 	bl	800c3f8 <can1_ams_cell_temperatures_t1s8_encode>
 80116ce:	4603      	mov	r3, r0
 80116d0:	461a      	mov	r2, r3
 80116d2:	4baa      	ldr	r3, [pc, #680]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116d4:	821a      	strh	r2, [r3, #16]
   can1_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(ams_cell_temperatures.t1s9);
 80116d6:	463b      	mov	r3, r7
 80116d8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80116dc:	eeb0 0a47 	vmov.f32	s0, s14
 80116e0:	eef0 0a67 	vmov.f32	s1, s15
 80116e4:	f7fa fee0 	bl	800c4a8 <can1_ams_cell_temperatures_t1s9_encode>
 80116e8:	4603      	mov	r3, r0
 80116ea:	461a      	mov	r2, r3
 80116ec:	4ba3      	ldr	r3, [pc, #652]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116ee:	825a      	strh	r2, [r3, #18]
   can1_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(ams_cell_temperatures.t1s10);
 80116f0:	463b      	mov	r3, r7
 80116f2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80116f6:	eeb0 0a47 	vmov.f32	s0, s14
 80116fa:	eef0 0a67 	vmov.f32	s1, s15
 80116fe:	f7fa ff2b 	bl	800c558 <can1_ams_cell_temperatures_t1s10_encode>
 8011702:	4603      	mov	r3, r0
 8011704:	461a      	mov	r2, r3
 8011706:	4b9d      	ldr	r3, [pc, #628]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011708:	829a      	strh	r2, [r3, #20]
   can1_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(ams_cell_temperatures.t1s11);
 801170a:	463b      	mov	r3, r7
 801170c:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8011710:	eeb0 0a47 	vmov.f32	s0, s14
 8011714:	eef0 0a67 	vmov.f32	s1, s15
 8011718:	f7fa ff76 	bl	800c608 <can1_ams_cell_temperatures_t1s11_encode>
 801171c:	4603      	mov	r3, r0
 801171e:	461a      	mov	r2, r3
 8011720:	4b96      	ldr	r3, [pc, #600]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011722:	82da      	strh	r2, [r3, #22]
   can1_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(ams_cell_temperatures.t1s12);
 8011724:	463b      	mov	r3, r7
 8011726:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 801172a:	eeb0 0a47 	vmov.f32	s0, s14
 801172e:	eef0 0a67 	vmov.f32	s1, s15
 8011732:	f7fa ffc1 	bl	800c6b8 <can1_ams_cell_temperatures_t1s12_encode>
 8011736:	4603      	mov	r3, r0
 8011738:	461a      	mov	r2, r3
 801173a:	4b90      	ldr	r3, [pc, #576]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801173c:	831a      	strh	r2, [r3, #24]
   can1_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_encode(ams_cell_temperatures.t2s1);
 801173e:	463b      	mov	r3, r7
 8011740:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8011744:	eeb0 0a47 	vmov.f32	s0, s14
 8011748:	eef0 0a67 	vmov.f32	s1, s15
 801174c:	f7fb f80c 	bl	800c768 <can1_ams_cell_temperatures_t2s1_encode>
 8011750:	4603      	mov	r3, r0
 8011752:	461a      	mov	r2, r3
 8011754:	4b89      	ldr	r3, [pc, #548]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011756:	835a      	strh	r2, [r3, #26]
   can1_ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_encode(ams_cell_temperatures.t2s2);
 8011758:	463b      	mov	r3, r7
 801175a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 801175e:	eeb0 0a47 	vmov.f32	s0, s14
 8011762:	eef0 0a67 	vmov.f32	s1, s15
 8011766:	f7fb f857 	bl	800c818 <can1_ams_cell_temperatures_t2s2_encode>
 801176a:	4603      	mov	r3, r0
 801176c:	461a      	mov	r2, r3
 801176e:	4b83      	ldr	r3, [pc, #524]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011770:	839a      	strh	r2, [r3, #28]
   can1_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(ams_cell_temperatures.t2s3);
 8011772:	463b      	mov	r3, r7
 8011774:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8011778:	eeb0 0a47 	vmov.f32	s0, s14
 801177c:	eef0 0a67 	vmov.f32	s1, s15
 8011780:	f7fb f8a2 	bl	800c8c8 <can1_ams_cell_temperatures_t2s3_encode>
 8011784:	4603      	mov	r3, r0
 8011786:	461a      	mov	r2, r3
 8011788:	4b7c      	ldr	r3, [pc, #496]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801178a:	83da      	strh	r2, [r3, #30]
   can1_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(ams_cell_temperatures.t2s4);
 801178c:	463b      	mov	r3, r7
 801178e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8011792:	eeb0 0a47 	vmov.f32	s0, s14
 8011796:	eef0 0a67 	vmov.f32	s1, s15
 801179a:	f7fb f8ed 	bl	800c978 <can1_ams_cell_temperatures_t2s4_encode>
 801179e:	4603      	mov	r3, r0
 80117a0:	461a      	mov	r2, r3
 80117a2:	4b76      	ldr	r3, [pc, #472]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117a4:	841a      	strh	r2, [r3, #32]
   can1_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(ams_cell_temperatures.t2s5);
 80117a6:	463b      	mov	r3, r7
 80117a8:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80117ac:	eeb0 0a47 	vmov.f32	s0, s14
 80117b0:	eef0 0a67 	vmov.f32	s1, s15
 80117b4:	f7fb f938 	bl	800ca28 <can1_ams_cell_temperatures_t2s5_encode>
 80117b8:	4603      	mov	r3, r0
 80117ba:	461a      	mov	r2, r3
 80117bc:	4b6f      	ldr	r3, [pc, #444]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117be:	845a      	strh	r2, [r3, #34]	; 0x22
   can1_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(ams_cell_temperatures.t2s6);
 80117c0:	463b      	mov	r3, r7
 80117c2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80117c6:	eeb0 0a47 	vmov.f32	s0, s14
 80117ca:	eef0 0a67 	vmov.f32	s1, s15
 80117ce:	f7fb f983 	bl	800cad8 <can1_ams_cell_temperatures_t2s6_encode>
 80117d2:	4603      	mov	r3, r0
 80117d4:	461a      	mov	r2, r3
 80117d6:	4b69      	ldr	r3, [pc, #420]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117d8:	849a      	strh	r2, [r3, #36]	; 0x24
   can1_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(ams_cell_temperatures.t2s7);
 80117da:	463b      	mov	r3, r7
 80117dc:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80117e0:	eeb0 0a47 	vmov.f32	s0, s14
 80117e4:	eef0 0a67 	vmov.f32	s1, s15
 80117e8:	f7fb f9ce 	bl	800cb88 <can1_ams_cell_temperatures_t2s7_encode>
 80117ec:	4603      	mov	r3, r0
 80117ee:	461a      	mov	r2, r3
 80117f0:	4b62      	ldr	r3, [pc, #392]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117f2:	84da      	strh	r2, [r3, #38]	; 0x26
   can1_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(ams_cell_temperatures.t2s8);
 80117f4:	463b      	mov	r3, r7
 80117f6:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80117fa:	eeb0 0a47 	vmov.f32	s0, s14
 80117fe:	eef0 0a67 	vmov.f32	s1, s15
 8011802:	f7fb fa19 	bl	800cc38 <can1_ams_cell_temperatures_t2s8_encode>
 8011806:	4603      	mov	r3, r0
 8011808:	461a      	mov	r2, r3
 801180a:	4b5c      	ldr	r3, [pc, #368]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801180c:	851a      	strh	r2, [r3, #40]	; 0x28
   can1_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(ams_cell_temperatures.t2s9);
 801180e:	463b      	mov	r3, r7
 8011810:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8011814:	eeb0 0a47 	vmov.f32	s0, s14
 8011818:	eef0 0a67 	vmov.f32	s1, s15
 801181c:	f7fb fa64 	bl	800cce8 <can1_ams_cell_temperatures_t2s9_encode>
 8011820:	4603      	mov	r3, r0
 8011822:	461a      	mov	r2, r3
 8011824:	4b55      	ldr	r3, [pc, #340]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011826:	855a      	strh	r2, [r3, #42]	; 0x2a
   can1_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(ams_cell_temperatures.t2s10);
 8011828:	463b      	mov	r3, r7
 801182a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 801182e:	eeb0 0a47 	vmov.f32	s0, s14
 8011832:	eef0 0a67 	vmov.f32	s1, s15
 8011836:	f7fb faaf 	bl	800cd98 <can1_ams_cell_temperatures_t2s10_encode>
 801183a:	4603      	mov	r3, r0
 801183c:	461a      	mov	r2, r3
 801183e:	4b4f      	ldr	r3, [pc, #316]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011840:	859a      	strh	r2, [r3, #44]	; 0x2c
   can1_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(ams_cell_temperatures.t2s11);
 8011842:	463b      	mov	r3, r7
 8011844:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8011848:	eeb0 0a47 	vmov.f32	s0, s14
 801184c:	eef0 0a67 	vmov.f32	s1, s15
 8011850:	f7fb fafa 	bl	800ce48 <can1_ams_cell_temperatures_t2s11_encode>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	4b48      	ldr	r3, [pc, #288]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801185a:	85da      	strh	r2, [r3, #46]	; 0x2e
   can1_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(ams_cell_temperatures.t2s12);
 801185c:	463b      	mov	r3, r7
 801185e:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8011862:	eeb0 0a47 	vmov.f32	s0, s14
 8011866:	eef0 0a67 	vmov.f32	s1, s15
 801186a:	f7fb fb45 	bl	800cef8 <can1_ams_cell_temperatures_t2s12_encode>
 801186e:	4603      	mov	r3, r0
 8011870:	461a      	mov	r2, r3
 8011872:	4b42      	ldr	r3, [pc, #264]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011874:	861a      	strh	r2, [r3, #48]	; 0x30
   can1_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_encode(ams_cell_temperatures.t3s1);
 8011876:	463b      	mov	r3, r7
 8011878:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 801187c:	eeb0 0a47 	vmov.f32	s0, s14
 8011880:	eef0 0a67 	vmov.f32	s1, s15
 8011884:	f7fb fb90 	bl	800cfa8 <can1_ams_cell_temperatures_t3s1_encode>
 8011888:	4603      	mov	r3, r0
 801188a:	461a      	mov	r2, r3
 801188c:	4b3b      	ldr	r3, [pc, #236]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801188e:	865a      	strh	r2, [r3, #50]	; 0x32
   can1_ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_encode(ams_cell_temperatures.t3s2);
 8011890:	463b      	mov	r3, r7
 8011892:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8011896:	eeb0 0a47 	vmov.f32	s0, s14
 801189a:	eef0 0a67 	vmov.f32	s1, s15
 801189e:	f7fb fbdb 	bl	800d058 <can1_ams_cell_temperatures_t3s2_encode>
 80118a2:	4603      	mov	r3, r0
 80118a4:	461a      	mov	r2, r3
 80118a6:	4b35      	ldr	r3, [pc, #212]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118a8:	869a      	strh	r2, [r3, #52]	; 0x34
   can1_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(ams_cell_temperatures.t3s3);
 80118aa:	463b      	mov	r3, r7
 80118ac:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80118b0:	eeb0 0a47 	vmov.f32	s0, s14
 80118b4:	eef0 0a67 	vmov.f32	s1, s15
 80118b8:	f7fb fc26 	bl	800d108 <can1_ams_cell_temperatures_t3s3_encode>
 80118bc:	4603      	mov	r3, r0
 80118be:	461a      	mov	r2, r3
 80118c0:	4b2e      	ldr	r3, [pc, #184]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118c2:	86da      	strh	r2, [r3, #54]	; 0x36
   can1_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(ams_cell_temperatures.t3s4);
 80118c4:	463b      	mov	r3, r7
 80118c6:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 80118ca:	eeb0 0a47 	vmov.f32	s0, s14
 80118ce:	eef0 0a67 	vmov.f32	s1, s15
 80118d2:	f7fb fc71 	bl	800d1b8 <can1_ams_cell_temperatures_t3s4_encode>
 80118d6:	4603      	mov	r3, r0
 80118d8:	461a      	mov	r2, r3
 80118da:	4b28      	ldr	r3, [pc, #160]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118dc:	871a      	strh	r2, [r3, #56]	; 0x38
   can1_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(ams_cell_temperatures.t3s5);
 80118de:	463b      	mov	r3, r7
 80118e0:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80118e4:	eeb0 0a47 	vmov.f32	s0, s14
 80118e8:	eef0 0a67 	vmov.f32	s1, s15
 80118ec:	f7fb fcbc 	bl	800d268 <can1_ams_cell_temperatures_t3s5_encode>
 80118f0:	4603      	mov	r3, r0
 80118f2:	461a      	mov	r2, r3
 80118f4:	4b21      	ldr	r3, [pc, #132]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118f6:	875a      	strh	r2, [r3, #58]	; 0x3a
   can1_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(ams_cell_temperatures.t3s6);
 80118f8:	463b      	mov	r3, r7
 80118fa:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 80118fe:	eeb0 0a47 	vmov.f32	s0, s14
 8011902:	eef0 0a67 	vmov.f32	s1, s15
 8011906:	f7fb fd07 	bl	800d318 <can1_ams_cell_temperatures_t3s6_encode>
 801190a:	4603      	mov	r3, r0
 801190c:	461a      	mov	r2, r3
 801190e:	4b1b      	ldr	r3, [pc, #108]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011910:	879a      	strh	r2, [r3, #60]	; 0x3c
   can1_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(ams_cell_temperatures.t3s7);
 8011912:	463b      	mov	r3, r7
 8011914:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8011918:	eeb0 0a47 	vmov.f32	s0, s14
 801191c:	eef0 0a67 	vmov.f32	s1, s15
 8011920:	f7fb fd52 	bl	800d3c8 <can1_ams_cell_temperatures_t3s7_encode>
 8011924:	4603      	mov	r3, r0
 8011926:	461a      	mov	r2, r3
 8011928:	4b14      	ldr	r3, [pc, #80]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 801192a:	87da      	strh	r2, [r3, #62]	; 0x3e
   can1_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(ams_cell_temperatures.t3s8);
 801192c:	463b      	mov	r3, r7
 801192e:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8011932:	eeb0 0a47 	vmov.f32	s0, s14
 8011936:	eef0 0a67 	vmov.f32	s1, s15
 801193a:	f7fb fd9d 	bl	800d478 <can1_ams_cell_temperatures_t3s8_encode>
 801193e:	4603      	mov	r3, r0
 8011940:	461a      	mov	r2, r3
 8011942:	4b0e      	ldr	r3, [pc, #56]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011944:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(ams_cell_temperatures.t3s9);
 8011948:	463b      	mov	r3, r7
 801194a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801194e:	eeb0 0a47 	vmov.f32	s0, s14
 8011952:	eef0 0a67 	vmov.f32	s1, s15
 8011956:	f7fb fde7 	bl	800d528 <can1_ams_cell_temperatures_t3s9_encode>
 801195a:	4603      	mov	r3, r0
 801195c:	461a      	mov	r2, r3
 801195e:	4b07      	ldr	r3, [pc, #28]	; (801197c <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011960:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(ams_cell_temperatures.t3s10);
 8011964:	463b      	mov	r3, r7
 8011966:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 801196a:	eeb0 0a47 	vmov.f32	s0, s14
 801196e:	eef0 0a67 	vmov.f32	s1, s15
 8011972:	f7fb fe31 	bl	800d5d8 <can1_ams_cell_temperatures_t3s10_encode>
 8011976:	4603      	mov	r3, r0
 8011978:	e002      	b.n	8011980 <can1_ams_cell_temperatures_transmit+0x3c8>
 801197a:	bf00      	nop
 801197c:	20001574 	.word	0x20001574
 8011980:	461a      	mov	r2, r3
 8011982:	4bde      	ldr	r3, [pc, #888]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(ams_cell_temperatures.t3s11);
 8011988:	463b      	mov	r3, r7
 801198a:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 801198e:	eeb0 0a47 	vmov.f32	s0, s14
 8011992:	eef0 0a67 	vmov.f32	s1, s15
 8011996:	f7fb fe77 	bl	800d688 <can1_ams_cell_temperatures_t3s11_encode>
 801199a:	4603      	mov	r3, r0
 801199c:	461a      	mov	r2, r3
 801199e:	4bd7      	ldr	r3, [pc, #860]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 80119a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(ams_cell_temperatures.t3s12);
 80119a4:	463b      	mov	r3, r7
 80119a6:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 80119aa:	eeb0 0a47 	vmov.f32	s0, s14
 80119ae:	eef0 0a67 	vmov.f32	s1, s15
 80119b2:	f7fb fec1 	bl	800d738 <can1_ams_cell_temperatures_t3s12_encode>
 80119b6:	4603      	mov	r3, r0
 80119b8:	461a      	mov	r2, r3
 80119ba:	4bd0      	ldr	r3, [pc, #832]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 80119bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_encode(ams_cell_temperatures.t4s1);
 80119c0:	463b      	mov	r3, r7
 80119c2:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80119c6:	eeb0 0a47 	vmov.f32	s0, s14
 80119ca:	eef0 0a67 	vmov.f32	s1, s15
 80119ce:	f7fb ff0b 	bl	800d7e8 <can1_ams_cell_temperatures_t4s1_encode>
 80119d2:	4603      	mov	r3, r0
 80119d4:	461a      	mov	r2, r3
 80119d6:	4bc9      	ldr	r3, [pc, #804]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 80119d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_encode(ams_cell_temperatures.t4s2);
 80119dc:	463b      	mov	r3, r7
 80119de:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 80119e2:	eeb0 0a47 	vmov.f32	s0, s14
 80119e6:	eef0 0a67 	vmov.f32	s1, s15
 80119ea:	f7fb ff55 	bl	800d898 <can1_ams_cell_temperatures_t4s2_encode>
 80119ee:	4603      	mov	r3, r0
 80119f0:	461a      	mov	r2, r3
 80119f2:	4bc2      	ldr	r3, [pc, #776]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 80119f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(ams_cell_temperatures.t4s3);
 80119f8:	463b      	mov	r3, r7
 80119fa:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80119fe:	eeb0 0a47 	vmov.f32	s0, s14
 8011a02:	eef0 0a67 	vmov.f32	s1, s15
 8011a06:	f7fb ff9f 	bl	800d948 <can1_ams_cell_temperatures_t4s3_encode>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	4bbb      	ldr	r3, [pc, #748]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(ams_cell_temperatures.t4s4);
 8011a14:	463b      	mov	r3, r7
 8011a16:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8011a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a1e:	eef0 0a67 	vmov.f32	s1, s15
 8011a22:	f7fb ffe9 	bl	800d9f8 <can1_ams_cell_temperatures_t4s4_encode>
 8011a26:	4603      	mov	r3, r0
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4bb4      	ldr	r3, [pc, #720]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(ams_cell_temperatures.t4s5);
 8011a30:	463b      	mov	r3, r7
 8011a32:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8011a36:	eeb0 0a47 	vmov.f32	s0, s14
 8011a3a:	eef0 0a67 	vmov.f32	s1, s15
 8011a3e:	f7fc f833 	bl	800daa8 <can1_ams_cell_temperatures_t4s5_encode>
 8011a42:	4603      	mov	r3, r0
 8011a44:	461a      	mov	r2, r3
 8011a46:	4bad      	ldr	r3, [pc, #692]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(ams_cell_temperatures.t4s6);
 8011a4c:	463b      	mov	r3, r7
 8011a4e:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8011a52:	eeb0 0a47 	vmov.f32	s0, s14
 8011a56:	eef0 0a67 	vmov.f32	s1, s15
 8011a5a:	f7fc f87d 	bl	800db58 <can1_ams_cell_temperatures_t4s6_encode>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	461a      	mov	r2, r3
 8011a62:	4ba6      	ldr	r3, [pc, #664]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(ams_cell_temperatures.t4s7);
 8011a68:	463b      	mov	r3, r7
 8011a6a:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8011a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a72:	eef0 0a67 	vmov.f32	s1, s15
 8011a76:	f7fc f8c7 	bl	800dc08 <can1_ams_cell_temperatures_t4s7_encode>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	4b9f      	ldr	r3, [pc, #636]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(ams_cell_temperatures.t4s8);
 8011a84:	463b      	mov	r3, r7
 8011a86:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8011a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a8e:	eef0 0a67 	vmov.f32	s1, s15
 8011a92:	f7fc f911 	bl	800dcb8 <can1_ams_cell_temperatures_t4s8_encode>
 8011a96:	4603      	mov	r3, r0
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b98      	ldr	r3, [pc, #608]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011a9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(ams_cell_temperatures.t4s9);
 8011aa0:	463b      	mov	r3, r7
 8011aa2:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8011aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8011aaa:	eef0 0a67 	vmov.f32	s1, s15
 8011aae:	f7fc f95b 	bl	800dd68 <can1_ams_cell_temperatures_t4s9_encode>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	4b91      	ldr	r3, [pc, #580]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011ab8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(ams_cell_temperatures.t4s10);
 8011abc:	463b      	mov	r3, r7
 8011abe:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8011ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8011ac6:	eef0 0a67 	vmov.f32	s1, s15
 8011aca:	f7fc f9a5 	bl	800de18 <can1_ams_cell_temperatures_t4s10_encode>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	4b8a      	ldr	r3, [pc, #552]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(ams_cell_temperatures.t4s11);
 8011ad8:	463b      	mov	r3, r7
 8011ada:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8011ade:	eeb0 0a47 	vmov.f32	s0, s14
 8011ae2:	eef0 0a67 	vmov.f32	s1, s15
 8011ae6:	f7fc f9ef 	bl	800dec8 <can1_ams_cell_temperatures_t4s11_encode>
 8011aea:	4603      	mov	r3, r0
 8011aec:	461a      	mov	r2, r3
 8011aee:	4b83      	ldr	r3, [pc, #524]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(ams_cell_temperatures.t4s12);
 8011af4:	463b      	mov	r3, r7
 8011af6:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8011afa:	eeb0 0a47 	vmov.f32	s0, s14
 8011afe:	eef0 0a67 	vmov.f32	s1, s15
 8011b02:	f7fc fa39 	bl	800df78 <can1_ams_cell_temperatures_t4s12_encode>
 8011b06:	4603      	mov	r3, r0
 8011b08:	461a      	mov	r2, r3
 8011b0a:	4b7c      	ldr	r3, [pc, #496]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_encode(ams_cell_temperatures.t5s1);
 8011b10:	463b      	mov	r3, r7
 8011b12:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8011b16:	eeb0 0a47 	vmov.f32	s0, s14
 8011b1a:	eef0 0a67 	vmov.f32	s1, s15
 8011b1e:	f7fc fa83 	bl	800e028 <can1_ams_cell_temperatures_t5s1_encode>
 8011b22:	4603      	mov	r3, r0
 8011b24:	461a      	mov	r2, r3
 8011b26:	4b75      	ldr	r3, [pc, #468]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_encode(ams_cell_temperatures.t5s2);
 8011b2c:	463b      	mov	r3, r7
 8011b2e:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8011b32:	eeb0 0a47 	vmov.f32	s0, s14
 8011b36:	eef0 0a67 	vmov.f32	s1, s15
 8011b3a:	f7fc facd 	bl	800e0d8 <can1_ams_cell_temperatures_t5s2_encode>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	461a      	mov	r2, r3
 8011b42:	4b6e      	ldr	r3, [pc, #440]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(ams_cell_temperatures.t5s3);
 8011b48:	463b      	mov	r3, r7
 8011b4a:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8011b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b52:	eef0 0a67 	vmov.f32	s1, s15
 8011b56:	f7fc fb17 	bl	800e188 <can1_ams_cell_temperatures_t5s3_encode>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	4b67      	ldr	r3, [pc, #412]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(ams_cell_temperatures.t5s4);
 8011b64:	463b      	mov	r3, r7
 8011b66:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8011b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b6e:	eef0 0a67 	vmov.f32	s1, s15
 8011b72:	f7fc fb61 	bl	800e238 <can1_ams_cell_temperatures_t5s4_encode>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4b60      	ldr	r3, [pc, #384]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(ams_cell_temperatures.t5s5);
 8011b80:	463b      	mov	r3, r7
 8011b82:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8011b86:	eeb0 0a47 	vmov.f32	s0, s14
 8011b8a:	eef0 0a67 	vmov.f32	s1, s15
 8011b8e:	f7fc fbab 	bl	800e2e8 <can1_ams_cell_temperatures_t5s5_encode>
 8011b92:	4603      	mov	r3, r0
 8011b94:	461a      	mov	r2, r3
 8011b96:	4b59      	ldr	r3, [pc, #356]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(ams_cell_temperatures.t5s6);
 8011b9c:	463b      	mov	r3, r7
 8011b9e:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8011ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8011ba6:	eef0 0a67 	vmov.f32	s1, s15
 8011baa:	f7fc fbf5 	bl	800e398 <can1_ams_cell_temperatures_t5s6_encode>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	4b52      	ldr	r3, [pc, #328]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011bb4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(ams_cell_temperatures.t5s7);
 8011bb8:	463b      	mov	r3, r7
 8011bba:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8011bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8011bc2:	eef0 0a67 	vmov.f32	s1, s15
 8011bc6:	f7fc fc3f 	bl	800e448 <can1_ams_cell_temperatures_t5s7_encode>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	461a      	mov	r2, r3
 8011bce:	4b4b      	ldr	r3, [pc, #300]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011bd0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(ams_cell_temperatures.t5s8);
 8011bd4:	463b      	mov	r3, r7
 8011bd6:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8011bda:	eeb0 0a47 	vmov.f32	s0, s14
 8011bde:	eef0 0a67 	vmov.f32	s1, s15
 8011be2:	f7fc fc89 	bl	800e4f8 <can1_ams_cell_temperatures_t5s8_encode>
 8011be6:	4603      	mov	r3, r0
 8011be8:	461a      	mov	r2, r3
 8011bea:	4b44      	ldr	r3, [pc, #272]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011bec:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(ams_cell_temperatures.t5s9);
 8011bf0:	463b      	mov	r3, r7
 8011bf2:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8011bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8011bfa:	eef0 0a67 	vmov.f32	s1, s15
 8011bfe:	f7fc fcd3 	bl	800e5a8 <can1_ams_cell_temperatures_t5s9_encode>
 8011c02:	4603      	mov	r3, r0
 8011c04:	461a      	mov	r2, r3
 8011c06:	4b3d      	ldr	r3, [pc, #244]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c08:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(ams_cell_temperatures.t5s10);
 8011c0c:	463b      	mov	r3, r7
 8011c0e:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8011c12:	eeb0 0a47 	vmov.f32	s0, s14
 8011c16:	eef0 0a67 	vmov.f32	s1, s15
 8011c1a:	f7fc fd1d 	bl	800e658 <can1_ams_cell_temperatures_t5s10_encode>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	461a      	mov	r2, r3
 8011c22:	4b36      	ldr	r3, [pc, #216]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c24:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(ams_cell_temperatures.t5s11);
 8011c28:	463b      	mov	r3, r7
 8011c2a:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8011c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8011c32:	eef0 0a67 	vmov.f32	s1, s15
 8011c36:	f7fc fd67 	bl	800e708 <can1_ams_cell_temperatures_t5s11_encode>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4b2f      	ldr	r3, [pc, #188]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c40:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(ams_cell_temperatures.t5s12);
 8011c44:	463b      	mov	r3, r7
 8011c46:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8011c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8011c4e:	eef0 0a67 	vmov.f32	s1, s15
 8011c52:	f7fc fdb1 	bl	800e7b8 <can1_ams_cell_temperatures_t5s12_encode>
 8011c56:	4603      	mov	r3, r0
 8011c58:	461a      	mov	r2, r3
 8011c5a:	4b28      	ldr	r3, [pc, #160]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c5c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

       can1_ams_cell_temperatures.temperature_multiplexor = 0;
 8011c60:	4b26      	ldr	r3, [pc, #152]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011c6a:	2208      	movs	r2, #8
 8011c6c:	4923      	ldr	r1, [pc, #140]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7f7 fe08 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011c74:	e00d      	b.n	8011c92 <can1_ams_cell_temperatures_transmit+0x6da>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011c76:	4b22      	ldr	r3, [pc, #136]	; (8011d00 <can1_ams_cell_temperatures_transmit+0x748>)
 8011c78:	6818      	ldr	r0, [r3, #0]
 8011c7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011c7e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011c82:	4b20      	ldr	r3, [pc, #128]	; (8011d04 <can1_ams_cell_temperatures_transmit+0x74c>)
 8011c84:	f013 fd2c 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <can1_ams_cell_temperatures_transmit+0x6da>
           Error_Handler();
 8011c8e:	f005 f9c5 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011c92:	4b1b      	ldr	r3, [pc, #108]	; (8011d00 <can1_ams_cell_temperatures_transmit+0x748>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f013 fdfd 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1e9      	bne.n	8011c76 <can1_ams_cell_temperatures_transmit+0x6be>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 1;
 8011ca2:	4b16      	ldr	r3, [pc, #88]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011cac:	2208      	movs	r2, #8
 8011cae:	4913      	ldr	r1, [pc, #76]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7f7 fde7 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011cb6:	e00d      	b.n	8011cd4 <can1_ams_cell_temperatures_transmit+0x71c>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011cb8:	4b11      	ldr	r3, [pc, #68]	; (8011d00 <can1_ams_cell_temperatures_transmit+0x748>)
 8011cba:	6818      	ldr	r0, [r3, #0]
 8011cbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011cc0:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011cc4:	4b0f      	ldr	r3, [pc, #60]	; (8011d04 <can1_ams_cell_temperatures_transmit+0x74c>)
 8011cc6:	f013 fd0b 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <can1_ams_cell_temperatures_transmit+0x71c>
           Error_Handler();
 8011cd0:	f005 f9a4 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011cd4:	4b0a      	ldr	r3, [pc, #40]	; (8011d00 <can1_ams_cell_temperatures_transmit+0x748>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f013 fddc 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1e9      	bne.n	8011cb8 <can1_ams_cell_temperatures_transmit+0x700>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 2;
 8011ce4:	4b05      	ldr	r3, [pc, #20]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011ce6:	2202      	movs	r2, #2
 8011ce8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011cee:	2208      	movs	r2, #8
 8011cf0:	4902      	ldr	r1, [pc, #8]	; (8011cfc <can1_ams_cell_temperatures_transmit+0x744>)
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7f7 fdc6 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011cf8:	e014      	b.n	8011d24 <can1_ams_cell_temperatures_transmit+0x76c>
 8011cfa:	bf00      	nop
 8011cfc:	20001574 	.word	0x20001574
 8011d00:	20001630 	.word	0x20001630
 8011d04:	200014cc 	.word	0x200014cc
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d08:	4ba2      	ldr	r3, [pc, #648]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d0a:	6818      	ldr	r0, [r3, #0]
 8011d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d10:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d14:	4ba0      	ldr	r3, [pc, #640]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d16:	f013 fce3 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d001      	beq.n	8011d24 <can1_ams_cell_temperatures_transmit+0x76c>
           Error_Handler();
 8011d20:	f005 f97c 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011d24:	4b9b      	ldr	r3, [pc, #620]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f013 fdb4 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1e9      	bne.n	8011d08 <can1_ams_cell_temperatures_transmit+0x750>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 3;
 8011d34:	4b99      	ldr	r3, [pc, #612]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011d36:	2203      	movs	r2, #3
 8011d38:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d3e:	2208      	movs	r2, #8
 8011d40:	4996      	ldr	r1, [pc, #600]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7f7 fd9e 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011d48:	e00d      	b.n	8011d66 <can1_ams_cell_temperatures_transmit+0x7ae>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d4a:	4b92      	ldr	r3, [pc, #584]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d4c:	6818      	ldr	r0, [r3, #0]
 8011d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d52:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d56:	4b90      	ldr	r3, [pc, #576]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d58:	f013 fcc2 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <can1_ams_cell_temperatures_transmit+0x7ae>
           Error_Handler();
 8011d62:	f005 f95b 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011d66:	4b8b      	ldr	r3, [pc, #556]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f013 fd93 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1e9      	bne.n	8011d4a <can1_ams_cell_temperatures_transmit+0x792>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 4;
 8011d76:	4b89      	ldr	r3, [pc, #548]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011d78:	2204      	movs	r2, #4
 8011d7a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d80:	2208      	movs	r2, #8
 8011d82:	4986      	ldr	r1, [pc, #536]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7f7 fd7d 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011d8a:	e00d      	b.n	8011da8 <can1_ams_cell_temperatures_transmit+0x7f0>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d8c:	4b81      	ldr	r3, [pc, #516]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d8e:	6818      	ldr	r0, [r3, #0]
 8011d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d94:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d98:	4b7f      	ldr	r3, [pc, #508]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d9a:	f013 fca1 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d001      	beq.n	8011da8 <can1_ams_cell_temperatures_transmit+0x7f0>
           Error_Handler();
 8011da4:	f005 f93a 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011da8:	4b7a      	ldr	r3, [pc, #488]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f013 fd72 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1e9      	bne.n	8011d8c <can1_ams_cell_temperatures_transmit+0x7d4>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 5;
 8011db8:	4b78      	ldr	r3, [pc, #480]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011dba:	2205      	movs	r2, #5
 8011dbc:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011dc2:	2208      	movs	r2, #8
 8011dc4:	4975      	ldr	r1, [pc, #468]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f7 fd5c 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011dcc:	e00d      	b.n	8011dea <can1_ams_cell_temperatures_transmit+0x832>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011dce:	4b71      	ldr	r3, [pc, #452]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011dd0:	6818      	ldr	r0, [r3, #0]
 8011dd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011dd6:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011dda:	4b6f      	ldr	r3, [pc, #444]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ddc:	f013 fc80 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d001      	beq.n	8011dea <can1_ams_cell_temperatures_transmit+0x832>
           Error_Handler();
 8011de6:	f005 f919 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011dea:	4b6a      	ldr	r3, [pc, #424]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	4618      	mov	r0, r3
 8011df0:	f013 fd51 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1e9      	bne.n	8011dce <can1_ams_cell_temperatures_transmit+0x816>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 6;
 8011dfa:	4b68      	ldr	r3, [pc, #416]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011dfc:	2206      	movs	r2, #6
 8011dfe:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e04:	2208      	movs	r2, #8
 8011e06:	4965      	ldr	r1, [pc, #404]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7f7 fd3b 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011e0e:	e00d      	b.n	8011e2c <can1_ams_cell_temperatures_transmit+0x874>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e10:	4b60      	ldr	r3, [pc, #384]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e12:	6818      	ldr	r0, [r3, #0]
 8011e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e18:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e1c:	4b5e      	ldr	r3, [pc, #376]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e1e:	f013 fc5f 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d001      	beq.n	8011e2c <can1_ams_cell_temperatures_transmit+0x874>
           Error_Handler();
 8011e28:	f005 f8f8 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011e2c:	4b59      	ldr	r3, [pc, #356]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f013 fd30 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d1e9      	bne.n	8011e10 <can1_ams_cell_temperatures_transmit+0x858>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 7;
 8011e3c:	4b57      	ldr	r3, [pc, #348]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011e3e:	2207      	movs	r2, #7
 8011e40:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e46:	2208      	movs	r2, #8
 8011e48:	4954      	ldr	r1, [pc, #336]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f7 fd1a 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011e50:	e00d      	b.n	8011e6e <can1_ams_cell_temperatures_transmit+0x8b6>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e52:	4b50      	ldr	r3, [pc, #320]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e5a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e5e:	4b4e      	ldr	r3, [pc, #312]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e60:	f013 fc3e 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d001      	beq.n	8011e6e <can1_ams_cell_temperatures_transmit+0x8b6>
           Error_Handler();
 8011e6a:	f005 f8d7 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011e6e:	4b49      	ldr	r3, [pc, #292]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f013 fd0f 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1e9      	bne.n	8011e52 <can1_ams_cell_temperatures_transmit+0x89a>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 8;
 8011e7e:	4b47      	ldr	r3, [pc, #284]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011e80:	2208      	movs	r2, #8
 8011e82:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e88:	2208      	movs	r2, #8
 8011e8a:	4944      	ldr	r1, [pc, #272]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7f7 fcf9 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011e92:	e00d      	b.n	8011eb0 <can1_ams_cell_temperatures_transmit+0x8f8>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e94:	4b3f      	ldr	r3, [pc, #252]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e96:	6818      	ldr	r0, [r3, #0]
 8011e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e9c:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011ea0:	4b3d      	ldr	r3, [pc, #244]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ea2:	f013 fc1d 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d001      	beq.n	8011eb0 <can1_ams_cell_temperatures_transmit+0x8f8>
           Error_Handler();
 8011eac:	f005 f8b6 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011eb0:	4b38      	ldr	r3, [pc, #224]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f013 fcee 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1e9      	bne.n	8011e94 <can1_ams_cell_temperatures_transmit+0x8dc>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 9;
 8011ec0:	4b36      	ldr	r3, [pc, #216]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011ec2:	2209      	movs	r2, #9
 8011ec4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011eca:	2208      	movs	r2, #8
 8011ecc:	4933      	ldr	r1, [pc, #204]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7f7 fcd8 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011ed4:	e00d      	b.n	8011ef2 <can1_ams_cell_temperatures_transmit+0x93a>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011ed6:	4b2f      	ldr	r3, [pc, #188]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011ed8:	6818      	ldr	r0, [r3, #0]
 8011eda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011ede:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011ee2:	4b2d      	ldr	r3, [pc, #180]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ee4:	f013 fbfc 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <can1_ams_cell_temperatures_transmit+0x93a>
           Error_Handler();
 8011eee:	f005 f895 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011ef2:	4b28      	ldr	r3, [pc, #160]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f013 fccd 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1e9      	bne.n	8011ed6 <can1_ams_cell_temperatures_transmit+0x91e>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 10;
 8011f02:	4b26      	ldr	r3, [pc, #152]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011f04:	220a      	movs	r2, #10
 8011f06:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f0c:	2208      	movs	r2, #8
 8011f0e:	4923      	ldr	r1, [pc, #140]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f7 fcb7 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011f16:	e00d      	b.n	8011f34 <can1_ams_cell_temperatures_transmit+0x97c>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f18:	4b1e      	ldr	r3, [pc, #120]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f1a:	6818      	ldr	r0, [r3, #0]
 8011f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f20:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f24:	4b1c      	ldr	r3, [pc, #112]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f26:	f013 fbdb 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <can1_ams_cell_temperatures_transmit+0x97c>
           Error_Handler();
 8011f30:	f005 f874 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011f34:	4b17      	ldr	r3, [pc, #92]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f013 fcac 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1e9      	bne.n	8011f18 <can1_ams_cell_temperatures_transmit+0x960>
           }
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 11;
 8011f44:	4b15      	ldr	r3, [pc, #84]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011f46:	220b      	movs	r2, #11
 8011f48:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f4e:	2208      	movs	r2, #8
 8011f50:	4912      	ldr	r1, [pc, #72]	; (8011f9c <can1_ams_cell_temperatures_transmit+0x9e4>)
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7f7 fc96 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011f58:	e00d      	b.n	8011f76 <can1_ams_cell_temperatures_transmit+0x9be>
           if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f5a:	4b0e      	ldr	r3, [pc, #56]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f5c:	6818      	ldr	r0, [r3, #0]
 8011f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f62:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f66:	4b0c      	ldr	r3, [pc, #48]	; (8011f98 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f68:	f013 fbba 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <can1_ams_cell_temperatures_transmit+0x9be>
           Error_Handler();
 8011f72:	f005 f853 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan1)) {
 8011f76:	4b07      	ldr	r3, [pc, #28]	; (8011f94 <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f013 fc8b 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1e9      	bne.n	8011f5a <can1_ams_cell_temperatures_transmit+0x9a2>
           }
       }
}
 8011f86:	bf00      	nop
 8011f88:	bf00      	nop
 8011f8a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	20001630 	.word	0x20001630
 8011f98:	200014cc 	.word	0x200014cc
 8011f9c:	20001574 	.word	0x20001574

08011fa0 <can2_ivt_msg_result_i_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_transmit() {
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b08a      	sub	sp, #40	; 0x28
 8011fa4:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8011fa6:	f107 0308 	add.w	r3, r7, #8
 8011faa:	2200      	movs	r2, #0
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	605a      	str	r2, [r3, #4]
 8011fb0:	609a      	str	r2, [r3, #8]
 8011fb2:	60da      	str	r2, [r3, #12]
 8011fb4:	611a      	str	r2, [r3, #16]
 8011fb6:	615a      	str	r2, [r3, #20]
 8011fb8:	f240 5321 	movw	r3, #1313	; 0x521
 8011fbc:	60bb      	str	r3, [r7, #8]
 8011fbe:	2306      	movs	r3, #6
 8011fc0:	61bb      	str	r3, [r7, #24]
       .StdId = 1313,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_i_t ivt_msg_result_i;
   can2_ivt_msg_result_i_tx_callback(&ivt_msg_result_i);
 8011fc2:	463b      	mov	r3, r7
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f003 fa8d 	bl	80154e4 <can2_ivt_msg_result_i_tx_callback>

   can2_ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_encode(ivt_msg_result_i.i_ts);
 8011fca:	ed97 7b00 	vldr	d7, [r7]
 8011fce:	eeb0 0a47 	vmov.f32	s0, s14
 8011fd2:	eef0 0a67 	vmov.f32	s1, s15
 8011fd6:	f7fc ff9b 	bl	800ef10 <can2_ivt_msg_result_i_i_ts_encode>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	460b      	mov	r3, r1
 8011fde:	4913      	ldr	r1, [pc, #76]	; (801202c <can2_ivt_msg_result_i_transmit+0x8c>)
 8011fe0:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_i_pack(tx_data, &can2_ivt_msg_result_i, 6);
 8011fe4:	f107 0320 	add.w	r3, r7, #32
 8011fe8:	2206      	movs	r2, #6
 8011fea:	4910      	ldr	r1, [pc, #64]	; (801202c <can2_ivt_msg_result_i_transmit+0x8c>)
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fc fe7f 	bl	800ecf0 <can2_ivt_msg_result_i_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8011ff2:	e00d      	b.n	8012010 <can2_ivt_msg_result_i_transmit+0x70>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011ff4:	4b0e      	ldr	r3, [pc, #56]	; (8012030 <can2_ivt_msg_result_i_transmit+0x90>)
 8011ff6:	6818      	ldr	r0, [r3, #0]
 8011ff8:	f107 0220 	add.w	r2, r7, #32
 8011ffc:	f107 0108 	add.w	r1, r7, #8
 8012000:	4b0c      	ldr	r3, [pc, #48]	; (8012034 <can2_ivt_msg_result_i_transmit+0x94>)
 8012002:	f013 fb6d 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d001      	beq.n	8012010 <can2_ivt_msg_result_i_transmit+0x70>
       Error_Handler();
 801200c:	f005 f806 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012010:	4b07      	ldr	r3, [pc, #28]	; (8012030 <can2_ivt_msg_result_i_transmit+0x90>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4618      	mov	r0, r3
 8012016:	f013 fc3e 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1e9      	bne.n	8011ff4 <can2_ivt_msg_result_i_transmit+0x54>
       }
   }
}
 8012020:	bf00      	nop
 8012022:	bf00      	nop
 8012024:	3728      	adds	r7, #40	; 0x28
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	20001600 	.word	0x20001600
 8012030:	20001634 	.word	0x20001634
 8012034:	200014cc 	.word	0x200014cc

08012038 <can2_ivt_msg_result_u1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_transmit() {
 8012038:	b580      	push	{r7, lr}
 801203a:	b08a      	sub	sp, #40	; 0x28
 801203c:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801203e:	f107 0308 	add.w	r3, r7, #8
 8012042:	2200      	movs	r2, #0
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	605a      	str	r2, [r3, #4]
 8012048:	609a      	str	r2, [r3, #8]
 801204a:	60da      	str	r2, [r3, #12]
 801204c:	611a      	str	r2, [r3, #16]
 801204e:	615a      	str	r2, [r3, #20]
 8012050:	f240 5322 	movw	r3, #1314	; 0x522
 8012054:	60bb      	str	r3, [r7, #8]
 8012056:	2306      	movs	r3, #6
 8012058:	61bb      	str	r3, [r7, #24]
       .StdId = 1314,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u1_t ivt_msg_result_u1;
   can2_ivt_msg_result_u1_tx_callback(&ivt_msg_result_u1);
 801205a:	463b      	mov	r3, r7
 801205c:	4618      	mov	r0, r3
 801205e:	f003 fa55 	bl	801550c <can2_ivt_msg_result_u1_tx_callback>

   can2_ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_encode(ivt_msg_result_u1.u_cells);
 8012062:	ed97 7b00 	vldr	d7, [r7]
 8012066:	eeb0 0a47 	vmov.f32	s0, s14
 801206a:	eef0 0a67 	vmov.f32	s1, s15
 801206e:	f7fd f89f 	bl	800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4913      	ldr	r1, [pc, #76]	; (80120c4 <can2_ivt_msg_result_u1_transmit+0x8c>)
 8012078:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u1_pack(tx_data, &can2_ivt_msg_result_u1, 6);
 801207c:	f107 0320 	add.w	r3, r7, #32
 8012080:	2206      	movs	r2, #6
 8012082:	4910      	ldr	r1, [pc, #64]	; (80120c4 <can2_ivt_msg_result_u1_transmit+0x8c>)
 8012084:	4618      	mov	r0, r3
 8012086:	f7fc ff83 	bl	800ef90 <can2_ivt_msg_result_u1_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 801208a:	e00d      	b.n	80120a8 <can2_ivt_msg_result_u1_transmit+0x70>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801208c:	4b0e      	ldr	r3, [pc, #56]	; (80120c8 <can2_ivt_msg_result_u1_transmit+0x90>)
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	f107 0220 	add.w	r2, r7, #32
 8012094:	f107 0108 	add.w	r1, r7, #8
 8012098:	4b0c      	ldr	r3, [pc, #48]	; (80120cc <can2_ivt_msg_result_u1_transmit+0x94>)
 801209a:	f013 fb21 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801209e:	4603      	mov	r3, r0
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <can2_ivt_msg_result_u1_transmit+0x70>
       Error_Handler();
 80120a4:	f004 ffba 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 80120a8:	4b07      	ldr	r3, [pc, #28]	; (80120c8 <can2_ivt_msg_result_u1_transmit+0x90>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f013 fbf2 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1e9      	bne.n	801208c <can2_ivt_msg_result_u1_transmit+0x54>
       }
   }
}
 80120b8:	bf00      	nop
 80120ba:	bf00      	nop
 80120bc:	3728      	adds	r7, #40	; 0x28
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	20001608 	.word	0x20001608
 80120c8:	20001634 	.word	0x20001634
 80120cc:	200014cc 	.word	0x200014cc

080120d0 <can2_ivt_msg_result_u3_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_transmit() {
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b08a      	sub	sp, #40	; 0x28
 80120d4:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80120d6:	f107 0308 	add.w	r3, r7, #8
 80120da:	2200      	movs	r2, #0
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	605a      	str	r2, [r3, #4]
 80120e0:	609a      	str	r2, [r3, #8]
 80120e2:	60da      	str	r2, [r3, #12]
 80120e4:	611a      	str	r2, [r3, #16]
 80120e6:	615a      	str	r2, [r3, #20]
 80120e8:	f240 5324 	movw	r3, #1316	; 0x524
 80120ec:	60bb      	str	r3, [r7, #8]
 80120ee:	2306      	movs	r3, #6
 80120f0:	61bb      	str	r3, [r7, #24]
       .StdId = 1316,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u3_t ivt_msg_result_u3;
   can2_ivt_msg_result_u3_tx_callback(&ivt_msg_result_u3);
 80120f2:	463b      	mov	r3, r7
 80120f4:	4618      	mov	r0, r3
 80120f6:	f003 fa1d 	bl	8015534 <can2_ivt_msg_result_u3_tx_callback>

   can2_ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_encode(ivt_msg_result_u3.u_vehicle);
 80120fa:	ed97 7b00 	vldr	d7, [r7]
 80120fe:	eeb0 0a47 	vmov.f32	s0, s14
 8012102:	eef0 0a67 	vmov.f32	s1, s15
 8012106:	f7fd f9a3 	bl	800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	4913      	ldr	r1, [pc, #76]	; (801215c <can2_ivt_msg_result_u3_transmit+0x8c>)
 8012110:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u3_pack(tx_data, &can2_ivt_msg_result_u3, 6);
 8012114:	f107 0320 	add.w	r3, r7, #32
 8012118:	2206      	movs	r2, #6
 801211a:	4910      	ldr	r1, [pc, #64]	; (801215c <can2_ivt_msg_result_u3_transmit+0x8c>)
 801211c:	4618      	mov	r0, r3
 801211e:	f7fd f887 	bl	800f230 <can2_ivt_msg_result_u3_pack>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012122:	e00d      	b.n	8012140 <can2_ivt_msg_result_u3_transmit+0x70>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012124:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <can2_ivt_msg_result_u3_transmit+0x90>)
 8012126:	6818      	ldr	r0, [r3, #0]
 8012128:	f107 0220 	add.w	r2, r7, #32
 801212c:	f107 0108 	add.w	r1, r7, #8
 8012130:	4b0c      	ldr	r3, [pc, #48]	; (8012164 <can2_ivt_msg_result_u3_transmit+0x94>)
 8012132:	f013 fad5 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <can2_ivt_msg_result_u3_transmit+0x70>
       Error_Handler();
 801213c:	f004 ff6e 	bl	801701c <Error_Handler>
   while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012140:	4b07      	ldr	r3, [pc, #28]	; (8012160 <can2_ivt_msg_result_u3_transmit+0x90>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4618      	mov	r0, r3
 8012146:	f013 fba6 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e9      	bne.n	8012124 <can2_ivt_msg_result_u3_transmit+0x54>
       }
   }
}
 8012150:	bf00      	nop
 8012152:	bf00      	nop
 8012154:	3728      	adds	r7, #40	; 0x28
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	20001610 	.word	0x20001610
 8012160:	20001634 	.word	0x20001634
 8012164:	200014cc 	.word	0x200014cc

08012168 <can2_charger_config_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_transmit() {
 8012168:	b580      	push	{r7, lr}
 801216a:	b094      	sub	sp, #80	; 0x50
 801216c:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801216e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]
 8012176:	605a      	str	r2, [r3, #4]
 8012178:	609a      	str	r2, [r3, #8]
 801217a:	60da      	str	r2, [r3, #12]
 801217c:	611a      	str	r2, [r3, #16]
 801217e:	615a      	str	r2, [r3, #20]
 8012180:	f44f 731c 	mov.w	r3, #624	; 0x270
 8012184:	633b      	str	r3, [r7, #48]	; 0x30
 8012186:	2304      	movs	r3, #4
 8012188:	643b      	str	r3, [r7, #64]	; 0x40
       .StdId = 624,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   charger_config_t charger_config;
   can2_charger_config_tx_callback(&charger_config);
 801218a:	463b      	mov	r3, r7
 801218c:	4618      	mov	r0, r3
 801218e:	f003 f831 	bl	80151f4 <can2_charger_config_tx_callback>

   can2_charger_config.set_mux = can2_charger_config_set_mux_encode(charger_config.set_mux);
 8012192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012196:	4618      	mov	r0, r3
 8012198:	f7ee f9a6 	bl	80004e8 <__aeabi_ui2d>
 801219c:	4602      	mov	r2, r0
 801219e:	460b      	mov	r3, r1
 80121a0:	ec43 2b10 	vmov	d0, r2, r3
 80121a4:	f7fd fafa 	bl	800f79c <can2_charger_config_set_mux_encode>
 80121a8:	4603      	mov	r3, r0
 80121aa:	461a      	mov	r2, r3
 80121ac:	4b65      	ldr	r3, [pc, #404]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80121ae:	701a      	strb	r2, [r3, #0]
   can2_charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_encode(charger_config.msg_set_voltage_limit);
 80121b0:	ed97 7b08 	vldr	d7, [r7, #32]
 80121b4:	eeb0 0a47 	vmov.f32	s0, s14
 80121b8:	eef0 0a67 	vmov.f32	s1, s15
 80121bc:	f7fd fafd 	bl	800f7ba <can2_charger_config_msg_set_voltage_limit_encode>
 80121c0:	4603      	mov	r3, r0
 80121c2:	461a      	mov	r2, r3
 80121c4:	4b5f      	ldr	r3, [pc, #380]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80121c6:	805a      	strh	r2, [r3, #2]
   can2_charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_encode(charger_config.msg_set_current_limit);
 80121c8:	ed97 7b00 	vldr	d7, [r7]
 80121cc:	eeb0 0a47 	vmov.f32	s0, s14
 80121d0:	eef0 0a67 	vmov.f32	s1, s15
 80121d4:	f7fd fb14 	bl	800f800 <can2_charger_config_msg_set_current_limit_encode>
 80121d8:	4603      	mov	r3, r0
 80121da:	461a      	mov	r2, r3
 80121dc:	4b59      	ldr	r3, [pc, #356]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80121de:	809a      	strh	r2, [r3, #4]
   can2_charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_encode(charger_config.msg_set_power_limit);
 80121e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80121e4:	eeb0 0a47 	vmov.f32	s0, s14
 80121e8:	eef0 0a67 	vmov.f32	s1, s15
 80121ec:	f7fd fb44 	bl	800f878 <can2_charger_config_msg_set_power_limit_encode>
 80121f0:	4603      	mov	r3, r0
 80121f2:	461a      	mov	r2, r3
 80121f4:	4b53      	ldr	r3, [pc, #332]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80121f6:	80da      	strh	r2, [r3, #6]
   can2_charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_encode(charger_config.msg_set_enabled);
 80121f8:	7a3b      	ldrb	r3, [r7, #8]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7ee f974 	bl	80004e8 <__aeabi_ui2d>
 8012200:	4602      	mov	r2, r0
 8012202:	460b      	mov	r3, r1
 8012204:	ec43 2b10 	vmov	d0, r2, r3
 8012208:	f7fd fb59 	bl	800f8be <can2_charger_config_msg_set_enabled_encode>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	4b4c      	ldr	r3, [pc, #304]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 8012212:	721a      	strb	r2, [r3, #8]
   can2_charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_encode(charger_config.msg_set_time_out);
 8012214:	7e3b      	ldrb	r3, [r7, #24]
 8012216:	4618      	mov	r0, r3
 8012218:	f7ee f966 	bl	80004e8 <__aeabi_ui2d>
 801221c:	4602      	mov	r2, r0
 801221e:	460b      	mov	r3, r1
 8012220:	ec43 2b10 	vmov	d0, r2, r3
 8012224:	f7fd fb6e 	bl	800f904 <can2_charger_config_msg_set_time_out_encode>
 8012228:	4603      	mov	r3, r0
 801222a:	461a      	mov	r2, r3
 801222c:	4b45      	ldr	r3, [pc, #276]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 801222e:	725a      	strb	r2, [r3, #9]

       can2_charger_config.set_mux = 64;
 8012230:	4b44      	ldr	r3, [pc, #272]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 8012232:	2240      	movs	r2, #64	; 0x40
 8012234:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 8012236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801223a:	2204      	movs	r2, #4
 801223c:	4941      	ldr	r1, [pc, #260]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 801223e:	4618      	mov	r0, r3
 8012240:	f7fd f946 	bl	800f4d0 <can2_charger_config_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012244:	e00d      	b.n	8012262 <can2_charger_config_transmit+0xfa>
           if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012246:	4b40      	ldr	r3, [pc, #256]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801224e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012252:	4b3e      	ldr	r3, [pc, #248]	; (801234c <can2_charger_config_transmit+0x1e4>)
 8012254:	f013 fa44 	bl	80256e0 <HAL_CAN_AddTxMessage>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <can2_charger_config_transmit+0xfa>
           Error_Handler();
 801225e:	f004 fedd 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012262:	4b39      	ldr	r3, [pc, #228]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	4618      	mov	r0, r3
 8012268:	f013 fb15 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1e9      	bne.n	8012246 <can2_charger_config_transmit+0xde>
           }
       }
       can2_charger_config.set_mux = 65;
 8012272:	4b34      	ldr	r3, [pc, #208]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 8012274:	2241      	movs	r2, #65	; 0x41
 8012276:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 8012278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801227c:	2204      	movs	r2, #4
 801227e:	4931      	ldr	r1, [pc, #196]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 8012280:	4618      	mov	r0, r3
 8012282:	f7fd f925 	bl	800f4d0 <can2_charger_config_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012286:	e00d      	b.n	80122a4 <can2_charger_config_transmit+0x13c>
           if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012288:	4b2f      	ldr	r3, [pc, #188]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 801228a:	6818      	ldr	r0, [r3, #0]
 801228c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012290:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012294:	4b2d      	ldr	r3, [pc, #180]	; (801234c <can2_charger_config_transmit+0x1e4>)
 8012296:	f013 fa23 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <can2_charger_config_transmit+0x13c>
           Error_Handler();
 80122a0:	f004 febc 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 80122a4:	4b28      	ldr	r3, [pc, #160]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f013 faf4 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d1e9      	bne.n	8012288 <can2_charger_config_transmit+0x120>
           }
       }
       can2_charger_config.set_mux = 66;
 80122b4:	4b23      	ldr	r3, [pc, #140]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80122b6:	2242      	movs	r2, #66	; 0x42
 80122b8:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80122ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122be:	2204      	movs	r2, #4
 80122c0:	4920      	ldr	r1, [pc, #128]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd f904 	bl	800f4d0 <can2_charger_config_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 80122c8:	e00d      	b.n	80122e6 <can2_charger_config_transmit+0x17e>
           if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80122ca:	4b1f      	ldr	r3, [pc, #124]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80122d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80122d6:	4b1d      	ldr	r3, [pc, #116]	; (801234c <can2_charger_config_transmit+0x1e4>)
 80122d8:	f013 fa02 	bl	80256e0 <HAL_CAN_AddTxMessage>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d001      	beq.n	80122e6 <can2_charger_config_transmit+0x17e>
           Error_Handler();
 80122e2:	f004 fe9b 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 80122e6:	4b18      	ldr	r3, [pc, #96]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f013 fad3 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d1e9      	bne.n	80122ca <can2_charger_config_transmit+0x162>
           }
       }
       can2_charger_config.set_mux = 68;
 80122f6:	4b13      	ldr	r3, [pc, #76]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 80122f8:	2244      	movs	r2, #68	; 0x44
 80122fa:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80122fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012300:	2204      	movs	r2, #4
 8012302:	4910      	ldr	r1, [pc, #64]	; (8012344 <can2_charger_config_transmit+0x1dc>)
 8012304:	4618      	mov	r0, r3
 8012306:	f7fd f8e3 	bl	800f4d0 <can2_charger_config_pack>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 801230a:	e00d      	b.n	8012328 <can2_charger_config_transmit+0x1c0>
           if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801230c:	4b0e      	ldr	r3, [pc, #56]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 801230e:	6818      	ldr	r0, [r3, #0]
 8012310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012314:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012318:	4b0c      	ldr	r3, [pc, #48]	; (801234c <can2_charger_config_transmit+0x1e4>)
 801231a:	f013 f9e1 	bl	80256e0 <HAL_CAN_AddTxMessage>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d001      	beq.n	8012328 <can2_charger_config_transmit+0x1c0>
           Error_Handler();
 8012324:	f004 fe7a 	bl	801701c <Error_Handler>
       while(0 < HAL_CAN_GetTxMailboxesFreeLevel(_hcan2)) {
 8012328:	4b07      	ldr	r3, [pc, #28]	; (8012348 <can2_charger_config_transmit+0x1e0>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4618      	mov	r0, r3
 801232e:	f013 fab2 	bl	8025896 <HAL_CAN_GetTxMailboxesFreeLevel>
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d1e9      	bne.n	801230c <can2_charger_config_transmit+0x1a4>
           }
       }
}
 8012338:	bf00      	nop
 801233a:	bf00      	nop
 801233c:	3750      	adds	r7, #80	; 0x50
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	20001618 	.word	0x20001618
 8012348:	20001634 	.word	0x20001634
 801234c:	200014cc 	.word	0x200014cc

08012350 <can1_ams_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_receive() {
 8012350:	b580      	push	{r7, lr}
 8012352:	b092      	sub	sp, #72	; 0x48
 8012354:	af00      	add	r7, sp, #0
   if(can1_ams_status_1_flag) {
 8012356:	4b5c      	ldr	r3, [pc, #368]	; (80124c8 <can1_ams_status_1_receive+0x178>)
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	2b00      	cmp	r3, #0
 801235c:	f000 80af 	beq.w	80124be <can1_ams_status_1_receive+0x16e>
       ams_status_1_t ams_status_1;
       ams_status_1.charging_status = can1_ams_status_1_charging_status_decode(can1_ams_status_1.charging_status);
 8012360:	4b5a      	ldr	r3, [pc, #360]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	4618      	mov	r0, r3
 8012366:	f7ef f8b4 	bl	80014d2 <can1_ams_status_1_charging_status_decode>
 801236a:	ec53 2b10 	vmov	r2, r3, d0
 801236e:	4610      	mov	r0, r2
 8012370:	4619      	mov	r1, r3
 8012372:	f7ee fc0b 	bl	8000b8c <__aeabi_d2uiz>
 8012376:	4603      	mov	r3, r0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	70fb      	strb	r3, [r7, #3]
       ams_status_1.air1_closed = can1_ams_status_1_air1_closed_decode(can1_ams_status_1.air1_closed);
 801237c:	4b53      	ldr	r3, [pc, #332]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801237e:	785b      	ldrb	r3, [r3, #1]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ef f8c9 	bl	8001518 <can1_ams_status_1_air1_closed_decode>
 8012386:	ec53 2b10 	vmov	r2, r3, d0
 801238a:	4610      	mov	r0, r2
 801238c:	4619      	mov	r1, r3
 801238e:	f7ee fbfd 	bl	8000b8c <__aeabi_d2uiz>
 8012392:	4603      	mov	r3, r0
 8012394:	b2db      	uxtb	r3, r3
 8012396:	703b      	strb	r3, [r7, #0]
       ams_status_1.air2_closed = can1_ams_status_1_air2_closed_decode(can1_ams_status_1.air2_closed);
 8012398:	4b4c      	ldr	r3, [pc, #304]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801239a:	789b      	ldrb	r3, [r3, #2]
 801239c:	4618      	mov	r0, r3
 801239e:	f7ef f8de 	bl	800155e <can1_ams_status_1_air2_closed_decode>
 80123a2:	ec53 2b10 	vmov	r2, r3, d0
 80123a6:	4610      	mov	r0, r2
 80123a8:	4619      	mov	r1, r3
 80123aa:	f7ee fbef 	bl	8000b8c <__aeabi_d2uiz>
 80123ae:	4603      	mov	r3, r0
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	707b      	strb	r3, [r7, #1]
       ams_status_1.sc_closed = can1_ams_status_1_sc_closed_decode(can1_ams_status_1.sc_closed);
 80123b4:	4b45      	ldr	r3, [pc, #276]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 80123b6:	78db      	ldrb	r3, [r3, #3]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7ef f8f3 	bl	80015a4 <can1_ams_status_1_sc_closed_decode>
 80123be:	ec53 2b10 	vmov	r2, r3, d0
 80123c2:	4610      	mov	r0, r2
 80123c4:	4619      	mov	r1, r3
 80123c6:	f7ee fbe1 	bl	8000b8c <__aeabi_d2uiz>
 80123ca:	4603      	mov	r3, r0
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
       ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_decode(can1_ams_status_1.pre_charge_status);
 80123d2:	4b3e      	ldr	r3, [pc, #248]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 80123d4:	791b      	ldrb	r3, [r3, #4]
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7ef f907 	bl	80015ea <can1_ams_status_1_pre_charge_status_decode>
 80123dc:	ec53 2b10 	vmov	r2, r3, d0
 80123e0:	4610      	mov	r0, r2
 80123e2:	4619      	mov	r1, r3
 80123e4:	f7ee fbd2 	bl	8000b8c <__aeabi_d2uiz>
 80123e8:	4603      	mov	r3, r0
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
       ams_status_1.ams_error = can1_ams_status_1_ams_error_decode(can1_ams_status_1.ams_error);
 80123f0:	4b36      	ldr	r3, [pc, #216]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 80123f2:	795b      	ldrb	r3, [r3, #5]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ef f91b 	bl	8001630 <can1_ams_status_1_ams_error_decode>
 80123fa:	ec53 2b10 	vmov	r2, r3, d0
 80123fe:	4610      	mov	r0, r2
 8012400:	4619      	mov	r1, r3
 8012402:	f7ee fbc3 	bl	8000b8c <__aeabi_d2uiz>
 8012406:	4603      	mov	r3, r0
 8012408:	b2db      	uxtb	r3, r3
 801240a:	70bb      	strb	r3, [r7, #2]
       ams_status_1.imd_error = can1_ams_status_1_imd_error_decode(can1_ams_status_1.imd_error);
 801240c:	4b2f      	ldr	r3, [pc, #188]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801240e:	799b      	ldrb	r3, [r3, #6]
 8012410:	4618      	mov	r0, r3
 8012412:	f7ef f930 	bl	8001676 <can1_ams_status_1_imd_error_decode>
 8012416:	ec53 2b10 	vmov	r2, r3, d0
 801241a:	4610      	mov	r0, r2
 801241c:	4619      	mov	r1, r3
 801241e:	f7ee fbb5 	bl	8000b8c <__aeabi_d2uiz>
 8012422:	4603      	mov	r3, r0
 8012424:	b2db      	uxtb	r3, r3
 8012426:	743b      	strb	r3, [r7, #16]
       ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_decode(can1_ams_status_1.state_of_charge);
 8012428:	4b28      	ldr	r3, [pc, #160]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801242a:	79db      	ldrb	r3, [r3, #7]
 801242c:	4618      	mov	r0, r3
 801242e:	f7ef f945 	bl	80016bc <can1_ams_status_1_state_of_charge_decode>
 8012432:	eeb0 7a40 	vmov.f32	s14, s0
 8012436:	eef0 7a60 	vmov.f32	s15, s1
 801243a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
       ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_decode(can1_ams_status_1.min_cell_voltage);
 801243e:	4b23      	ldr	r3, [pc, #140]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 8012440:	7a1b      	ldrb	r3, [r3, #8]
 8012442:	4618      	mov	r0, r3
 8012444:	f7ef f97c 	bl	8001740 <can1_ams_status_1_min_cell_voltage_decode>
 8012448:	eeb0 7a40 	vmov.f32	s14, s0
 801244c:	eef0 7a60 	vmov.f32	s15, s1
 8012450:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
       ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_decode(can1_ams_status_1.max_cell_voltage);
 8012454:	4b1d      	ldr	r3, [pc, #116]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 8012456:	7a5b      	ldrb	r3, [r3, #9]
 8012458:	4618      	mov	r0, r3
 801245a:	f7ef f9c9 	bl	80017f0 <can1_ams_status_1_max_cell_voltage_decode>
 801245e:	eeb0 7a40 	vmov.f32	s14, s0
 8012462:	eef0 7a60 	vmov.f32	s15, s1
 8012466:	ed87 7b08 	vstr	d7, [r7, #32]
       ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_decode(can1_ams_status_1.min_cell_temperature);
 801246a:	4b18      	ldr	r3, [pc, #96]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801246c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012470:	4618      	mov	r0, r3
 8012472:	f7ef fa15 	bl	80018a0 <can1_ams_status_1_min_cell_temperature_decode>
 8012476:	eeb0 7a40 	vmov.f32	s14, s0
 801247a:	eef0 7a60 	vmov.f32	s15, s1
 801247e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
       ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_decode(can1_ams_status_1.max_cell_temperature);
 8012482:	4b12      	ldr	r3, [pc, #72]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 8012484:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012488:	4618      	mov	r0, r3
 801248a:	f7ef fa61 	bl	8001950 <can1_ams_status_1_max_cell_temperature_decode>
 801248e:	eeb0 7a40 	vmov.f32	s14, s0
 8012492:	eef0 7a60 	vmov.f32	s15, s1
 8012496:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_status_1.fan_speed = can1_ams_status_1_fan_speed_decode(can1_ams_status_1.fan_speed);
 801249a:	4b0c      	ldr	r3, [pc, #48]	; (80124cc <can1_ams_status_1_receive+0x17c>)
 801249c:	7b9b      	ldrb	r3, [r3, #14]
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ef fa8f 	bl	80019c2 <can1_ams_status_1_fan_speed_decode>
 80124a4:	eeb0 7a40 	vmov.f32	s14, s0
 80124a8:	eef0 7a60 	vmov.f32	s15, s1
 80124ac:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_status_1_rx_callback(&ams_status_1);
 80124b0:	463b      	mov	r3, r7
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fd fa79 	bl	800f9aa <can1_ams_status_1_rx_callback>
       can1_ams_status_1_flag = 0;
 80124b8:	4b03      	ldr	r3, [pc, #12]	; (80124c8 <can1_ams_status_1_receive+0x178>)
 80124ba:	2200      	movs	r2, #0
 80124bc:	701a      	strb	r2, [r3, #0]
   }
}
 80124be:	bf00      	nop
 80124c0:	3748      	adds	r7, #72	; 0x48
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	20001625 	.word	0x20001625
 80124cc:	200014d8 	.word	0x200014d8

080124d0 <can1_dbu_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_receive() {
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
   if(can1_dbu_status_1_flag) {
 80124d6:	4b1b      	ldr	r3, [pc, #108]	; (8012544 <can1_dbu_status_1_receive+0x74>)
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d02e      	beq.n	801253c <can1_dbu_status_1_receive+0x6c>
       dbu_status_1_t dbu_status_1;
       dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_decode(can1_dbu_status_1.activate_ts_button);
 80124de:	4b1a      	ldr	r3, [pc, #104]	; (8012548 <can1_dbu_status_1_receive+0x78>)
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7ef fb32 	bl	8001b4c <can1_dbu_status_1_activate_ts_button_decode>
 80124e8:	ec53 2b10 	vmov	r2, r3, d0
 80124ec:	4610      	mov	r0, r2
 80124ee:	4619      	mov	r1, r3
 80124f0:	f7ee fb4c 	bl	8000b8c <__aeabi_d2uiz>
 80124f4:	4603      	mov	r3, r0
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	703b      	strb	r3, [r7, #0]
       dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_decode(can1_dbu_status_1.ready_to_drive_button);
 80124fa:	4b13      	ldr	r3, [pc, #76]	; (8012548 <can1_dbu_status_1_receive+0x78>)
 80124fc:	785b      	ldrb	r3, [r3, #1]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ef fb47 	bl	8001b92 <can1_dbu_status_1_ready_to_drive_button_decode>
 8012504:	ec53 2b10 	vmov	r2, r3, d0
 8012508:	4610      	mov	r0, r2
 801250a:	4619      	mov	r1, r3
 801250c:	f7ee fb3e 	bl	8000b8c <__aeabi_d2uiz>
 8012510:	4603      	mov	r3, r0
 8012512:	b2db      	uxtb	r3, r3
 8012514:	743b      	strb	r3, [r7, #16]
       dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_decode(can1_dbu_status_1.dbu_temperature);
 8012516:	4b0c      	ldr	r3, [pc, #48]	; (8012548 <can1_dbu_status_1_receive+0x78>)
 8012518:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801251c:	4618      	mov	r0, r3
 801251e:	f7ef fb7b 	bl	8001c18 <can1_dbu_status_1_dbu_temperature_decode>
 8012522:	eeb0 7a40 	vmov.f32	s14, s0
 8012526:	eef0 7a60 	vmov.f32	s15, s1
 801252a:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_dbu_status_1_rx_callback(&dbu_status_1);
 801252e:	463b      	mov	r3, r7
 8012530:	4618      	mov	r0, r3
 8012532:	f002 fdb3 	bl	801509c <can1_dbu_status_1_rx_callback>
       can1_dbu_status_1_flag = 0;
 8012536:	4b03      	ldr	r3, [pc, #12]	; (8012544 <can1_dbu_status_1_receive+0x74>)
 8012538:	2200      	movs	r2, #0
 801253a:	701a      	strb	r2, [r3, #0]
   }
}
 801253c:	bf00      	nop
 801253e:	3718      	adds	r7, #24
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	20001626 	.word	0x20001626
 8012548:	200014e8 	.word	0x200014e8

0801254c <can1_ams_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_receive() {
 801254c:	b580      	push	{r7, lr}
 801254e:	b088      	sub	sp, #32
 8012550:	af00      	add	r7, sp, #0
   if(can1_ams_temperatures_flag) {
 8012552:	4b1f      	ldr	r3, [pc, #124]	; (80125d0 <can1_ams_temperatures_receive+0x84>)
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d036      	beq.n	80125c8 <can1_ams_temperatures_receive+0x7c>
       ams_temperatures_t ams_temperatures;
       ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_decode(can1_ams_temperatures.pre_charge_resistor_temperature);
 801255a:	4b1e      	ldr	r3, [pc, #120]	; (80125d4 <can1_ams_temperatures_receive+0x88>)
 801255c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012560:	4618      	mov	r0, r3
 8012562:	f7ef fcfd 	bl	8001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>
 8012566:	eeb0 7a40 	vmov.f32	s14, s0
 801256a:	eef0 7a60 	vmov.f32	s15, s1
 801256e:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_decode(can1_ams_temperatures.fuse_resistor_temperature);
 8012572:	4b18      	ldr	r3, [pc, #96]	; (80125d4 <can1_ams_temperatures_receive+0x88>)
 8012574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012578:	4618      	mov	r0, r3
 801257a:	f7ef fd49 	bl	8002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>
 801257e:	eeb0 7a40 	vmov.f32	s14, s0
 8012582:	eef0 7a60 	vmov.f32	s15, s1
 8012586:	ed87 7b04 	vstr	d7, [r7, #16]
       ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_decode(can1_ams_temperatures.aux_1_temperature);
 801258a:	4b12      	ldr	r3, [pc, #72]	; (80125d4 <can1_ams_temperatures_receive+0x88>)
 801258c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012590:	4618      	mov	r0, r3
 8012592:	f7ef fd95 	bl	80020c0 <can1_ams_temperatures_aux_1_temperature_decode>
 8012596:	eeb0 7a40 	vmov.f32	s14, s0
 801259a:	eef0 7a60 	vmov.f32	s15, s1
 801259e:	ed87 7b00 	vstr	d7, [r7]
       ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_decode(can1_ams_temperatures.aux_2_temperature);
 80125a2:	4b0c      	ldr	r3, [pc, #48]	; (80125d4 <can1_ams_temperatures_receive+0x88>)
 80125a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7ef fde1 	bl	8002170 <can1_ams_temperatures_aux_2_temperature_decode>
 80125ae:	eeb0 7a40 	vmov.f32	s14, s0
 80125b2:	eef0 7a60 	vmov.f32	s15, s1
 80125b6:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_temperatures_rx_callback(&ams_temperatures);
 80125ba:	463b      	mov	r3, r7
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fd f9fe 	bl	800f9be <can1_ams_temperatures_rx_callback>
       can1_ams_temperatures_flag = 0;
 80125c2:	4b03      	ldr	r3, [pc, #12]	; (80125d0 <can1_ams_temperatures_receive+0x84>)
 80125c4:	2200      	movs	r2, #0
 80125c6:	701a      	strb	r2, [r3, #0]
   }
}
 80125c8:	bf00      	nop
 80125ca:	3720      	adds	r7, #32
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	20001627 	.word	0x20001627
 80125d4:	200014ec 	.word	0x200014ec

080125d8 <can1_ams_cell_voltages_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_receive() {
 80125d8:	b580      	push	{r7, lr}
 80125da:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80125de:	af00      	add	r7, sp, #0
   if(can1_ams_cell_voltages_flag) {
 80125e0:	4bdb      	ldr	r3, [pc, #876]	; (8012950 <can1_ams_cell_voltages_receive+0x378>)
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f000 865a 	beq.w	801329e <can1_ams_cell_voltages_receive+0xcc6>
       ams_cell_voltages_t ams_cell_voltages;
       ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_decode(can1_ams_cell_voltages.v1s1);
 80125ea:	4bda      	ldr	r3, [pc, #872]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80125ec:	785b      	ldrb	r3, [r3, #1]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f1 fe26 	bl	8004240 <can1_ams_cell_voltages_v1s1_decode>
 80125f4:	eeb0 7a40 	vmov.f32	s14, s0
 80125f8:	eef0 7a60 	vmov.f32	s15, s1
 80125fc:	463b      	mov	r3, r7
 80125fe:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_decode(can1_ams_cell_voltages.v7s1);
 8012602:	4bd4      	ldr	r3, [pc, #848]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012604:	789b      	ldrb	r3, [r3, #2]
 8012606:	4618      	mov	r0, r3
 8012608:	f7f1 fe72 	bl	80042f0 <can1_ams_cell_voltages_v7s1_decode>
 801260c:	eeb0 7a40 	vmov.f32	s14, s0
 8012610:	eef0 7a60 	vmov.f32	s15, s1
 8012614:	463b      	mov	r3, r7
 8012616:	ed83 7b90 	vstr	d7, [r3, #576]	; 0x240
       ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_decode(can1_ams_cell_voltages.v1s2);
 801261a:	4bce      	ldr	r3, [pc, #824]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801261c:	78db      	ldrb	r3, [r3, #3]
 801261e:	4618      	mov	r0, r3
 8012620:	f7f1 febe 	bl	80043a0 <can1_ams_cell_voltages_v1s2_decode>
 8012624:	eeb0 7a40 	vmov.f32	s14, s0
 8012628:	eef0 7a60 	vmov.f32	s15, s1
 801262c:	463b      	mov	r3, r7
 801262e:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_decode(can1_ams_cell_voltages.v7s2);
 8012632:	4bc8      	ldr	r3, [pc, #800]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012634:	791b      	ldrb	r3, [r3, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	f7f1 ff0a 	bl	8004450 <can1_ams_cell_voltages_v7s2_decode>
 801263c:	eeb0 7a40 	vmov.f32	s14, s0
 8012640:	eef0 7a60 	vmov.f32	s15, s1
 8012644:	463b      	mov	r3, r7
 8012646:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248
       ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_decode(can1_ams_cell_voltages.v1s3);
 801264a:	4bc2      	ldr	r3, [pc, #776]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801264c:	795b      	ldrb	r3, [r3, #5]
 801264e:	4618      	mov	r0, r3
 8012650:	f7f1 ff56 	bl	8004500 <can1_ams_cell_voltages_v1s3_decode>
 8012654:	eeb0 7a40 	vmov.f32	s14, s0
 8012658:	eef0 7a60 	vmov.f32	s15, s1
 801265c:	463b      	mov	r3, r7
 801265e:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_decode(can1_ams_cell_voltages.v7s3);
 8012662:	4bbc      	ldr	r3, [pc, #752]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012664:	799b      	ldrb	r3, [r3, #6]
 8012666:	4618      	mov	r0, r3
 8012668:	f7f1 ffa2 	bl	80045b0 <can1_ams_cell_voltages_v7s3_decode>
 801266c:	eeb0 7a40 	vmov.f32	s14, s0
 8012670:	eef0 7a60 	vmov.f32	s15, s1
 8012674:	463b      	mov	r3, r7
 8012676:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250
       ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_decode(can1_ams_cell_voltages.v1s4);
 801267a:	4bb6      	ldr	r3, [pc, #728]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801267c:	79db      	ldrb	r3, [r3, #7]
 801267e:	4618      	mov	r0, r3
 8012680:	f7f1 ffee 	bl	8004660 <can1_ams_cell_voltages_v1s4_decode>
 8012684:	eeb0 7a40 	vmov.f32	s14, s0
 8012688:	eef0 7a60 	vmov.f32	s15, s1
 801268c:	463b      	mov	r3, r7
 801268e:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_decode(can1_ams_cell_voltages.v7s4);
 8012692:	4bb0      	ldr	r3, [pc, #704]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012694:	7a1b      	ldrb	r3, [r3, #8]
 8012696:	4618      	mov	r0, r3
 8012698:	f7f2 f83a 	bl	8004710 <can1_ams_cell_voltages_v7s4_decode>
 801269c:	eeb0 7a40 	vmov.f32	s14, s0
 80126a0:	eef0 7a60 	vmov.f32	s15, s1
 80126a4:	463b      	mov	r3, r7
 80126a6:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
       ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_decode(can1_ams_cell_voltages.v1s5);
 80126aa:	4baa      	ldr	r3, [pc, #680]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80126ac:	7a5b      	ldrb	r3, [r3, #9]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f2 f886 	bl	80047c0 <can1_ams_cell_voltages_v1s5_decode>
 80126b4:	eeb0 7a40 	vmov.f32	s14, s0
 80126b8:	eef0 7a60 	vmov.f32	s15, s1
 80126bc:	463b      	mov	r3, r7
 80126be:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_decode(can1_ams_cell_voltages.v7s5);
 80126c2:	4ba4      	ldr	r3, [pc, #656]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80126c4:	7a9b      	ldrb	r3, [r3, #10]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7f2 f8d2 	bl	8004870 <can1_ams_cell_voltages_v7s5_decode>
 80126cc:	eeb0 7a40 	vmov.f32	s14, s0
 80126d0:	eef0 7a60 	vmov.f32	s15, s1
 80126d4:	463b      	mov	r3, r7
 80126d6:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
       ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_decode(can1_ams_cell_voltages.v1s6);
 80126da:	4b9e      	ldr	r3, [pc, #632]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80126dc:	7adb      	ldrb	r3, [r3, #11]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7f2 f91e 	bl	8004920 <can1_ams_cell_voltages_v1s6_decode>
 80126e4:	eeb0 7a40 	vmov.f32	s14, s0
 80126e8:	eef0 7a60 	vmov.f32	s15, s1
 80126ec:	463b      	mov	r3, r7
 80126ee:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_decode(can1_ams_cell_voltages.v7s6);
 80126f2:	4b98      	ldr	r3, [pc, #608]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80126f4:	7b1b      	ldrb	r3, [r3, #12]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7f2 f96a 	bl	80049d0 <can1_ams_cell_voltages_v7s6_decode>
 80126fc:	eeb0 7a40 	vmov.f32	s14, s0
 8012700:	eef0 7a60 	vmov.f32	s15, s1
 8012704:	463b      	mov	r3, r7
 8012706:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268
       ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_decode(can1_ams_cell_voltages.v1s7);
 801270a:	4b92      	ldr	r3, [pc, #584]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801270c:	7b5b      	ldrb	r3, [r3, #13]
 801270e:	4618      	mov	r0, r3
 8012710:	f7f2 f9b6 	bl	8004a80 <can1_ams_cell_voltages_v1s7_decode>
 8012714:	eeb0 7a40 	vmov.f32	s14, s0
 8012718:	eef0 7a60 	vmov.f32	s15, s1
 801271c:	463b      	mov	r3, r7
 801271e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_decode(can1_ams_cell_voltages.v7s7);
 8012722:	4b8c      	ldr	r3, [pc, #560]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012724:	7b9b      	ldrb	r3, [r3, #14]
 8012726:	4618      	mov	r0, r3
 8012728:	f7f2 fa02 	bl	8004b30 <can1_ams_cell_voltages_v7s7_decode>
 801272c:	eeb0 7a40 	vmov.f32	s14, s0
 8012730:	eef0 7a60 	vmov.f32	s15, s1
 8012734:	463b      	mov	r3, r7
 8012736:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270
       ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_decode(can1_ams_cell_voltages.v1s8);
 801273a:	4b86      	ldr	r3, [pc, #536]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801273c:	7bdb      	ldrb	r3, [r3, #15]
 801273e:	4618      	mov	r0, r3
 8012740:	f7f2 fa4e 	bl	8004be0 <can1_ams_cell_voltages_v1s8_decode>
 8012744:	eeb0 7a40 	vmov.f32	s14, s0
 8012748:	eef0 7a60 	vmov.f32	s15, s1
 801274c:	463b      	mov	r3, r7
 801274e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_decode(can1_ams_cell_voltages.v7s8);
 8012752:	4b80      	ldr	r3, [pc, #512]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012754:	7c1b      	ldrb	r3, [r3, #16]
 8012756:	4618      	mov	r0, r3
 8012758:	f7f2 fa9a 	bl	8004c90 <can1_ams_cell_voltages_v7s8_decode>
 801275c:	eeb0 7a40 	vmov.f32	s14, s0
 8012760:	eef0 7a60 	vmov.f32	s15, s1
 8012764:	463b      	mov	r3, r7
 8012766:	ed83 7b9e 	vstr	d7, [r3, #632]	; 0x278
       ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_decode(can1_ams_cell_voltages.v1s9);
 801276a:	4b7a      	ldr	r3, [pc, #488]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801276c:	7c5b      	ldrb	r3, [r3, #17]
 801276e:	4618      	mov	r0, r3
 8012770:	f7f2 fae6 	bl	8004d40 <can1_ams_cell_voltages_v1s9_decode>
 8012774:	eeb0 7a40 	vmov.f32	s14, s0
 8012778:	eef0 7a60 	vmov.f32	s15, s1
 801277c:	463b      	mov	r3, r7
 801277e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_decode(can1_ams_cell_voltages.v7s9);
 8012782:	4b74      	ldr	r3, [pc, #464]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012784:	7c9b      	ldrb	r3, [r3, #18]
 8012786:	4618      	mov	r0, r3
 8012788:	f7f2 fb32 	bl	8004df0 <can1_ams_cell_voltages_v7s9_decode>
 801278c:	eeb0 7a40 	vmov.f32	s14, s0
 8012790:	eef0 7a60 	vmov.f32	s15, s1
 8012794:	463b      	mov	r3, r7
 8012796:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280
       ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_decode(can1_ams_cell_voltages.v1s10);
 801279a:	4b6e      	ldr	r3, [pc, #440]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801279c:	7cdb      	ldrb	r3, [r3, #19]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f2 fb7e 	bl	8004ea0 <can1_ams_cell_voltages_v1s10_decode>
 80127a4:	eeb0 7a40 	vmov.f32	s14, s0
 80127a8:	eef0 7a60 	vmov.f32	s15, s1
 80127ac:	463b      	mov	r3, r7
 80127ae:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_decode(can1_ams_cell_voltages.v7s10);
 80127b2:	4b68      	ldr	r3, [pc, #416]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80127b4:	7d1b      	ldrb	r3, [r3, #20]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7f2 fbca 	bl	8004f50 <can1_ams_cell_voltages_v7s10_decode>
 80127bc:	eeb0 7a40 	vmov.f32	s14, s0
 80127c0:	eef0 7a60 	vmov.f32	s15, s1
 80127c4:	463b      	mov	r3, r7
 80127c6:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288
       ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_decode(can1_ams_cell_voltages.v1s11);
 80127ca:	4b62      	ldr	r3, [pc, #392]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80127cc:	7d5b      	ldrb	r3, [r3, #21]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7f2 fc16 	bl	8005000 <can1_ams_cell_voltages_v1s11_decode>
 80127d4:	eeb0 7a40 	vmov.f32	s14, s0
 80127d8:	eef0 7a60 	vmov.f32	s15, s1
 80127dc:	463b      	mov	r3, r7
 80127de:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_decode(can1_ams_cell_voltages.v7s11);
 80127e2:	4b5c      	ldr	r3, [pc, #368]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80127e4:	7d9b      	ldrb	r3, [r3, #22]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7f2 fc62 	bl	80050b0 <can1_ams_cell_voltages_v7s11_decode>
 80127ec:	eeb0 7a40 	vmov.f32	s14, s0
 80127f0:	eef0 7a60 	vmov.f32	s15, s1
 80127f4:	463b      	mov	r3, r7
 80127f6:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
       ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_decode(can1_ams_cell_voltages.v1s12);
 80127fa:	4b56      	ldr	r3, [pc, #344]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80127fc:	7ddb      	ldrb	r3, [r3, #23]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f2 fcae 	bl	8005160 <can1_ams_cell_voltages_v1s12_decode>
 8012804:	eeb0 7a40 	vmov.f32	s14, s0
 8012808:	eef0 7a60 	vmov.f32	s15, s1
 801280c:	463b      	mov	r3, r7
 801280e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_decode(can1_ams_cell_voltages.v7s12);
 8012812:	4b50      	ldr	r3, [pc, #320]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012814:	7e1b      	ldrb	r3, [r3, #24]
 8012816:	4618      	mov	r0, r3
 8012818:	f7f2 fcfa 	bl	8005210 <can1_ams_cell_voltages_v7s12_decode>
 801281c:	eeb0 7a40 	vmov.f32	s14, s0
 8012820:	eef0 7a60 	vmov.f32	s15, s1
 8012824:	463b      	mov	r3, r7
 8012826:	ed83 7ba6 	vstr	d7, [r3, #664]	; 0x298
       ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_decode(can1_ams_cell_voltages.v2s1);
 801282a:	4b4a      	ldr	r3, [pc, #296]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801282c:	7e5b      	ldrb	r3, [r3, #25]
 801282e:	4618      	mov	r0, r3
 8012830:	f7f2 fd46 	bl	80052c0 <can1_ams_cell_voltages_v2s1_decode>
 8012834:	eeb0 7a40 	vmov.f32	s14, s0
 8012838:	eef0 7a60 	vmov.f32	s15, s1
 801283c:	463b      	mov	r3, r7
 801283e:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_decode(can1_ams_cell_voltages.v8s1);
 8012842:	4b44      	ldr	r3, [pc, #272]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012844:	7e9b      	ldrb	r3, [r3, #26]
 8012846:	4618      	mov	r0, r3
 8012848:	f7f2 fd92 	bl	8005370 <can1_ams_cell_voltages_v8s1_decode>
 801284c:	eeb0 7a40 	vmov.f32	s14, s0
 8012850:	eef0 7a60 	vmov.f32	s15, s1
 8012854:	463b      	mov	r3, r7
 8012856:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0
       ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_decode(can1_ams_cell_voltages.v2s2);
 801285a:	4b3e      	ldr	r3, [pc, #248]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801285c:	7edb      	ldrb	r3, [r3, #27]
 801285e:	4618      	mov	r0, r3
 8012860:	f7f2 fdde 	bl	8005420 <can1_ams_cell_voltages_v2s2_decode>
 8012864:	eeb0 7a40 	vmov.f32	s14, s0
 8012868:	eef0 7a60 	vmov.f32	s15, s1
 801286c:	463b      	mov	r3, r7
 801286e:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_decode(can1_ams_cell_voltages.v8s2);
 8012872:	4b38      	ldr	r3, [pc, #224]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012874:	7f1b      	ldrb	r3, [r3, #28]
 8012876:	4618      	mov	r0, r3
 8012878:	f7f2 fe2a 	bl	80054d0 <can1_ams_cell_voltages_v8s2_decode>
 801287c:	eeb0 7a40 	vmov.f32	s14, s0
 8012880:	eef0 7a60 	vmov.f32	s15, s1
 8012884:	463b      	mov	r3, r7
 8012886:	ed83 7baa 	vstr	d7, [r3, #680]	; 0x2a8
       ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_decode(can1_ams_cell_voltages.v2s3);
 801288a:	4b32      	ldr	r3, [pc, #200]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801288c:	7f5b      	ldrb	r3, [r3, #29]
 801288e:	4618      	mov	r0, r3
 8012890:	f7f2 fe76 	bl	8005580 <can1_ams_cell_voltages_v2s3_decode>
 8012894:	eeb0 7a40 	vmov.f32	s14, s0
 8012898:	eef0 7a60 	vmov.f32	s15, s1
 801289c:	463b      	mov	r3, r7
 801289e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_decode(can1_ams_cell_voltages.v8s3);
 80128a2:	4b2c      	ldr	r3, [pc, #176]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80128a4:	7f9b      	ldrb	r3, [r3, #30]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f2 fec2 	bl	8005630 <can1_ams_cell_voltages_v8s3_decode>
 80128ac:	eeb0 7a40 	vmov.f32	s14, s0
 80128b0:	eef0 7a60 	vmov.f32	s15, s1
 80128b4:	463b      	mov	r3, r7
 80128b6:	ed83 7bac 	vstr	d7, [r3, #688]	; 0x2b0
       ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_decode(can1_ams_cell_voltages.v2s4);
 80128ba:	4b26      	ldr	r3, [pc, #152]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80128bc:	7fdb      	ldrb	r3, [r3, #31]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7f2 ff0e 	bl	80056e0 <can1_ams_cell_voltages_v2s4_decode>
 80128c4:	eeb0 7a40 	vmov.f32	s14, s0
 80128c8:	eef0 7a60 	vmov.f32	s15, s1
 80128cc:	463b      	mov	r3, r7
 80128ce:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_decode(can1_ams_cell_voltages.v8s4);
 80128d2:	4b20      	ldr	r3, [pc, #128]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80128d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128d8:	4618      	mov	r0, r3
 80128da:	f7f2 ff59 	bl	8005790 <can1_ams_cell_voltages_v8s4_decode>
 80128de:	eeb0 7a40 	vmov.f32	s14, s0
 80128e2:	eef0 7a60 	vmov.f32	s15, s1
 80128e6:	463b      	mov	r3, r7
 80128e8:	ed83 7bae 	vstr	d7, [r3, #696]	; 0x2b8
       ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_decode(can1_ams_cell_voltages.v2s5);
 80128ec:	4b19      	ldr	r3, [pc, #100]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 80128ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7f2 ffa4 	bl	8005840 <can1_ams_cell_voltages_v2s5_decode>
 80128f8:	eeb0 7a40 	vmov.f32	s14, s0
 80128fc:	eef0 7a60 	vmov.f32	s15, s1
 8012900:	463b      	mov	r3, r7
 8012902:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_decode(can1_ams_cell_voltages.v8s5);
 8012906:	4b13      	ldr	r3, [pc, #76]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012908:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801290c:	4618      	mov	r0, r3
 801290e:	f7f2 ffef 	bl	80058f0 <can1_ams_cell_voltages_v8s5_decode>
 8012912:	eeb0 7a40 	vmov.f32	s14, s0
 8012916:	eef0 7a60 	vmov.f32	s15, s1
 801291a:	463b      	mov	r3, r7
 801291c:	ed83 7bb0 	vstr	d7, [r3, #704]	; 0x2c0
       ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_decode(can1_ams_cell_voltages.v2s6);
 8012920:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 8012922:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012926:	4618      	mov	r0, r3
 8012928:	f7f3 f83a 	bl	80059a0 <can1_ams_cell_voltages_v2s6_decode>
 801292c:	eeb0 7a40 	vmov.f32	s14, s0
 8012930:	eef0 7a60 	vmov.f32	s15, s1
 8012934:	463b      	mov	r3, r7
 8012936:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_decode(can1_ams_cell_voltages.v8s6);
 801293a:	4b06      	ldr	r3, [pc, #24]	; (8012954 <can1_ams_cell_voltages_receive+0x37c>)
 801293c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012940:	4618      	mov	r0, r3
 8012942:	f7f3 f885 	bl	8005a50 <can1_ams_cell_voltages_v8s6_decode>
 8012946:	eeb0 7a40 	vmov.f32	s14, s0
 801294a:	eef0 7a60 	vmov.f32	s15, s1
 801294e:	e003      	b.n	8012958 <can1_ams_cell_voltages_receive+0x380>
 8012950:	20001628 	.word	0x20001628
 8012954:	200014f4 	.word	0x200014f4
 8012958:	463b      	mov	r3, r7
 801295a:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8
       ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_decode(can1_ams_cell_voltages.v2s7);
 801295e:	4bec      	ldr	r3, [pc, #944]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012960:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012964:	4618      	mov	r0, r3
 8012966:	f7f3 f8cb 	bl	8005b00 <can1_ams_cell_voltages_v2s7_decode>
 801296a:	eeb0 7a40 	vmov.f32	s14, s0
 801296e:	eef0 7a60 	vmov.f32	s15, s1
 8012972:	463b      	mov	r3, r7
 8012974:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_decode(can1_ams_cell_voltages.v8s7);
 8012978:	4be5      	ldr	r3, [pc, #916]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 801297a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801297e:	4618      	mov	r0, r3
 8012980:	f7f3 f916 	bl	8005bb0 <can1_ams_cell_voltages_v8s7_decode>
 8012984:	eeb0 7a40 	vmov.f32	s14, s0
 8012988:	eef0 7a60 	vmov.f32	s15, s1
 801298c:	463b      	mov	r3, r7
 801298e:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0
       ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_decode(can1_ams_cell_voltages.v2s8);
 8012992:	4bdf      	ldr	r3, [pc, #892]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012994:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012998:	4618      	mov	r0, r3
 801299a:	f7f3 f961 	bl	8005c60 <can1_ams_cell_voltages_v2s8_decode>
 801299e:	eeb0 7a40 	vmov.f32	s14, s0
 80129a2:	eef0 7a60 	vmov.f32	s15, s1
 80129a6:	463b      	mov	r3, r7
 80129a8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_decode(can1_ams_cell_voltages.v8s8);
 80129ac:	4bd8      	ldr	r3, [pc, #864]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 80129ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7f3 f9ac 	bl	8005d10 <can1_ams_cell_voltages_v8s8_decode>
 80129b8:	eeb0 7a40 	vmov.f32	s14, s0
 80129bc:	eef0 7a60 	vmov.f32	s15, s1
 80129c0:	463b      	mov	r3, r7
 80129c2:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8
       ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_decode(can1_ams_cell_voltages.v2s9);
 80129c6:	4bd2      	ldr	r3, [pc, #840]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 80129c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f3 f9f7 	bl	8005dc0 <can1_ams_cell_voltages_v2s9_decode>
 80129d2:	eeb0 7a40 	vmov.f32	s14, s0
 80129d6:	eef0 7a60 	vmov.f32	s15, s1
 80129da:	463b      	mov	r3, r7
 80129dc:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_decode(can1_ams_cell_voltages.v8s9);
 80129e0:	4bcb      	ldr	r3, [pc, #812]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 80129e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f3 fa42 	bl	8005e70 <can1_ams_cell_voltages_v8s9_decode>
 80129ec:	eeb0 7a40 	vmov.f32	s14, s0
 80129f0:	eef0 7a60 	vmov.f32	s15, s1
 80129f4:	463b      	mov	r3, r7
 80129f6:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0
       ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_decode(can1_ams_cell_voltages.v2s10);
 80129fa:	4bc5      	ldr	r3, [pc, #788]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 80129fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f3 fa8d 	bl	8005f20 <can1_ams_cell_voltages_v2s10_decode>
 8012a06:	eeb0 7a40 	vmov.f32	s14, s0
 8012a0a:	eef0 7a60 	vmov.f32	s15, s1
 8012a0e:	463b      	mov	r3, r7
 8012a10:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_decode(can1_ams_cell_voltages.v8s10);
 8012a14:	4bbe      	ldr	r3, [pc, #760]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7f3 fad8 	bl	8005fd0 <can1_ams_cell_voltages_v8s10_decode>
 8012a20:	eeb0 7a40 	vmov.f32	s14, s0
 8012a24:	eef0 7a60 	vmov.f32	s15, s1
 8012a28:	463b      	mov	r3, r7
 8012a2a:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8
       ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_decode(can1_ams_cell_voltages.v2s11);
 8012a2e:	4bb8      	ldr	r3, [pc, #736]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7f3 fb23 	bl	8006080 <can1_ams_cell_voltages_v2s11_decode>
 8012a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8012a3e:	eef0 7a60 	vmov.f32	s15, s1
 8012a42:	463b      	mov	r3, r7
 8012a44:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_decode(can1_ams_cell_voltages.v8s11);
 8012a48:	4bb1      	ldr	r3, [pc, #708]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7f3 fb6e 	bl	8006130 <can1_ams_cell_voltages_v8s11_decode>
 8012a54:	eeb0 7a40 	vmov.f32	s14, s0
 8012a58:	eef0 7a60 	vmov.f32	s15, s1
 8012a5c:	463b      	mov	r3, r7
 8012a5e:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0
       ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_decode(can1_ams_cell_voltages.v2s12);
 8012a62:	4bab      	ldr	r3, [pc, #684]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f3 fbb9 	bl	80061e0 <can1_ams_cell_voltages_v2s12_decode>
 8012a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8012a72:	eef0 7a60 	vmov.f32	s15, s1
 8012a76:	463b      	mov	r3, r7
 8012a78:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_decode(can1_ams_cell_voltages.v8s12);
 8012a7c:	4ba4      	ldr	r3, [pc, #656]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f3 fc04 	bl	8006290 <can1_ams_cell_voltages_v8s12_decode>
 8012a88:	eeb0 7a40 	vmov.f32	s14, s0
 8012a8c:	eef0 7a60 	vmov.f32	s15, s1
 8012a90:	463b      	mov	r3, r7
 8012a92:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8
       ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_decode(can1_ams_cell_voltages.v3s1);
 8012a96:	4b9e      	ldr	r3, [pc, #632]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012a98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7f3 fc4f 	bl	8006340 <can1_ams_cell_voltages_v3s1_decode>
 8012aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8012aa6:	eef0 7a60 	vmov.f32	s15, s1
 8012aaa:	463b      	mov	r3, r7
 8012aac:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_decode(can1_ams_cell_voltages.v9s1);
 8012ab0:	4b97      	ldr	r3, [pc, #604]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012ab2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f3 fc9a 	bl	80063f0 <can1_ams_cell_voltages_v9s1_decode>
 8012abc:	eeb0 7a40 	vmov.f32	s14, s0
 8012ac0:	eef0 7a60 	vmov.f32	s15, s1
 8012ac4:	463b      	mov	r3, r7
 8012ac6:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300
       ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_decode(can1_ams_cell_voltages.v3s2);
 8012aca:	4b91      	ldr	r3, [pc, #580]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012acc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7f3 fce5 	bl	80064a0 <can1_ams_cell_voltages_v3s2_decode>
 8012ad6:	eeb0 7a40 	vmov.f32	s14, s0
 8012ada:	eef0 7a60 	vmov.f32	s15, s1
 8012ade:	463b      	mov	r3, r7
 8012ae0:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_decode(can1_ams_cell_voltages.v9s2);
 8012ae4:	4b8a      	ldr	r3, [pc, #552]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7f3 fd30 	bl	8006550 <can1_ams_cell_voltages_v9s2_decode>
 8012af0:	eeb0 7a40 	vmov.f32	s14, s0
 8012af4:	eef0 7a60 	vmov.f32	s15, s1
 8012af8:	463b      	mov	r3, r7
 8012afa:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308
       ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_decode(can1_ams_cell_voltages.v3s3);
 8012afe:	4b84      	ldr	r3, [pc, #528]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7f3 fd7b 	bl	8006600 <can1_ams_cell_voltages_v3s3_decode>
 8012b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8012b0e:	eef0 7a60 	vmov.f32	s15, s1
 8012b12:	463b      	mov	r3, r7
 8012b14:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_decode(can1_ams_cell_voltages.v9s3);
 8012b18:	4b7d      	ldr	r3, [pc, #500]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7f3 fdc6 	bl	80066b0 <can1_ams_cell_voltages_v9s3_decode>
 8012b24:	eeb0 7a40 	vmov.f32	s14, s0
 8012b28:	eef0 7a60 	vmov.f32	s15, s1
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310
       ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_decode(can1_ams_cell_voltages.v3s4);
 8012b32:	4b77      	ldr	r3, [pc, #476]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b34:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7f3 fe11 	bl	8006760 <can1_ams_cell_voltages_v3s4_decode>
 8012b3e:	eeb0 7a40 	vmov.f32	s14, s0
 8012b42:	eef0 7a60 	vmov.f32	s15, s1
 8012b46:	463b      	mov	r3, r7
 8012b48:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_decode(can1_ams_cell_voltages.v9s4);
 8012b4c:	4b70      	ldr	r3, [pc, #448]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7f3 fe5c 	bl	8006810 <can1_ams_cell_voltages_v9s4_decode>
 8012b58:	eeb0 7a40 	vmov.f32	s14, s0
 8012b5c:	eef0 7a60 	vmov.f32	s15, s1
 8012b60:	463b      	mov	r3, r7
 8012b62:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318
       ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_decode(can1_ams_cell_voltages.v3s5);
 8012b66:	4b6a      	ldr	r3, [pc, #424]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7f3 fea7 	bl	80068c0 <can1_ams_cell_voltages_v3s5_decode>
 8012b72:	eeb0 7a40 	vmov.f32	s14, s0
 8012b76:	eef0 7a60 	vmov.f32	s15, s1
 8012b7a:	463b      	mov	r3, r7
 8012b7c:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_decode(can1_ams_cell_voltages.v9s5);
 8012b80:	4b63      	ldr	r3, [pc, #396]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7f3 fef2 	bl	8006970 <can1_ams_cell_voltages_v9s5_decode>
 8012b8c:	eeb0 7a40 	vmov.f32	s14, s0
 8012b90:	eef0 7a60 	vmov.f32	s15, s1
 8012b94:	463b      	mov	r3, r7
 8012b96:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
       ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_decode(can1_ams_cell_voltages.v3s6);
 8012b9a:	4b5d      	ldr	r3, [pc, #372]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012b9c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7f3 ff3d 	bl	8006a20 <can1_ams_cell_voltages_v3s6_decode>
 8012ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8012baa:	eef0 7a60 	vmov.f32	s15, s1
 8012bae:	463b      	mov	r3, r7
 8012bb0:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_decode(can1_ams_cell_voltages.v9s6);
 8012bb4:	4b56      	ldr	r3, [pc, #344]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f3 ff88 	bl	8006ad0 <can1_ams_cell_voltages_v9s6_decode>
 8012bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8012bc4:	eef0 7a60 	vmov.f32	s15, s1
 8012bc8:	463b      	mov	r3, r7
 8012bca:	ed83 7bca 	vstr	d7, [r3, #808]	; 0x328
       ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_decode(can1_ams_cell_voltages.v3s7);
 8012bce:	4b50      	ldr	r3, [pc, #320]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f3 ffd3 	bl	8006b80 <can1_ams_cell_voltages_v3s7_decode>
 8012bda:	eeb0 7a40 	vmov.f32	s14, s0
 8012bde:	eef0 7a60 	vmov.f32	s15, s1
 8012be2:	463b      	mov	r3, r7
 8012be4:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_decode(can1_ams_cell_voltages.v9s7);
 8012be8:	4b49      	ldr	r3, [pc, #292]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7f4 f81e 	bl	8006c30 <can1_ams_cell_voltages_v9s7_decode>
 8012bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8012bf8:	eef0 7a60 	vmov.f32	s15, s1
 8012bfc:	463b      	mov	r3, r7
 8012bfe:	ed83 7bcc 	vstr	d7, [r3, #816]	; 0x330
       ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_decode(can1_ams_cell_voltages.v3s8);
 8012c02:	4b43      	ldr	r3, [pc, #268]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f4 f869 	bl	8006ce0 <can1_ams_cell_voltages_v3s8_decode>
 8012c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8012c12:	eef0 7a60 	vmov.f32	s15, s1
 8012c16:	463b      	mov	r3, r7
 8012c18:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_decode(can1_ams_cell_voltages.v9s8);
 8012c1c:	4b3c      	ldr	r3, [pc, #240]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f4 f8b4 	bl	8006d90 <can1_ams_cell_voltages_v9s8_decode>
 8012c28:	eeb0 7a40 	vmov.f32	s14, s0
 8012c2c:	eef0 7a60 	vmov.f32	s15, s1
 8012c30:	463b      	mov	r3, r7
 8012c32:	ed83 7bce 	vstr	d7, [r3, #824]	; 0x338
       ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_decode(can1_ams_cell_voltages.v3s9);
 8012c36:	4b36      	ldr	r3, [pc, #216]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f4 f8ff 	bl	8006e40 <can1_ams_cell_voltages_v3s9_decode>
 8012c42:	eeb0 7a40 	vmov.f32	s14, s0
 8012c46:	eef0 7a60 	vmov.f32	s15, s1
 8012c4a:	463b      	mov	r3, r7
 8012c4c:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_decode(can1_ams_cell_voltages.v9s9);
 8012c50:	4b2f      	ldr	r3, [pc, #188]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f4 f94a 	bl	8006ef0 <can1_ams_cell_voltages_v9s9_decode>
 8012c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8012c60:	eef0 7a60 	vmov.f32	s15, s1
 8012c64:	463b      	mov	r3, r7
 8012c66:	ed83 7bd0 	vstr	d7, [r3, #832]	; 0x340
       ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_decode(can1_ams_cell_voltages.v3s10);
 8012c6a:	4b29      	ldr	r3, [pc, #164]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7f4 f995 	bl	8006fa0 <can1_ams_cell_voltages_v3s10_decode>
 8012c76:	eeb0 7a40 	vmov.f32	s14, s0
 8012c7a:	eef0 7a60 	vmov.f32	s15, s1
 8012c7e:	463b      	mov	r3, r7
 8012c80:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_decode(can1_ams_cell_voltages.v9s10);
 8012c84:	4b22      	ldr	r3, [pc, #136]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f4 f9e0 	bl	8007050 <can1_ams_cell_voltages_v9s10_decode>
 8012c90:	eeb0 7a40 	vmov.f32	s14, s0
 8012c94:	eef0 7a60 	vmov.f32	s15, s1
 8012c98:	463b      	mov	r3, r7
 8012c9a:	ed83 7bd2 	vstr	d7, [r3, #840]	; 0x348
       ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_decode(can1_ams_cell_voltages.v3s11);
 8012c9e:	4b1c      	ldr	r3, [pc, #112]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f4 fa2b 	bl	8007100 <can1_ams_cell_voltages_v3s11_decode>
 8012caa:	eeb0 7a40 	vmov.f32	s14, s0
 8012cae:	eef0 7a60 	vmov.f32	s15, s1
 8012cb2:	463b      	mov	r3, r7
 8012cb4:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_decode(can1_ams_cell_voltages.v9s11);
 8012cb8:	4b15      	ldr	r3, [pc, #84]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012cba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7f4 fa76 	bl	80071b0 <can1_ams_cell_voltages_v9s11_decode>
 8012cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8012cc8:	eef0 7a60 	vmov.f32	s15, s1
 8012ccc:	463b      	mov	r3, r7
 8012cce:	ed83 7bd4 	vstr	d7, [r3, #848]	; 0x350
       ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_decode(can1_ams_cell_voltages.v3s12);
 8012cd2:	4b0f      	ldr	r3, [pc, #60]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012cd4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7f4 fac1 	bl	8007260 <can1_ams_cell_voltages_v3s12_decode>
 8012cde:	eeb0 7a40 	vmov.f32	s14, s0
 8012ce2:	eef0 7a60 	vmov.f32	s15, s1
 8012ce6:	463b      	mov	r3, r7
 8012ce8:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_decode(can1_ams_cell_voltages.v9s12);
 8012cec:	4b08      	ldr	r3, [pc, #32]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012cee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f4 fb0c 	bl	8007310 <can1_ams_cell_voltages_v9s12_decode>
 8012cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8012cfc:	eef0 7a60 	vmov.f32	s15, s1
 8012d00:	463b      	mov	r3, r7
 8012d02:	ed83 7bd6 	vstr	d7, [r3, #856]	; 0x358
       ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_decode(can1_ams_cell_voltages.v4s1);
 8012d06:	4b02      	ldr	r3, [pc, #8]	; (8012d10 <can1_ams_cell_voltages_receive+0x738>)
 8012d08:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012d0c:	e002      	b.n	8012d14 <can1_ams_cell_voltages_receive+0x73c>
 8012d0e:	bf00      	nop
 8012d10:	200014f4 	.word	0x200014f4
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7f4 fb53 	bl	80073c0 <can1_ams_cell_voltages_v4s1_decode>
 8012d1a:	eeb0 7a40 	vmov.f32	s14, s0
 8012d1e:	eef0 7a60 	vmov.f32	s15, s1
 8012d22:	463b      	mov	r3, r7
 8012d24:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_decode(can1_ams_cell_voltages.v10s1);
 8012d28:	4beb      	ldr	r3, [pc, #940]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012d2a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7f4 fb9e 	bl	8007470 <can1_ams_cell_voltages_v10s1_decode>
 8012d34:	eeb0 7a40 	vmov.f32	s14, s0
 8012d38:	eef0 7a60 	vmov.f32	s15, s1
 8012d3c:	463b      	mov	r3, r7
 8012d3e:	ed83 7bd8 	vstr	d7, [r3, #864]	; 0x360
       ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_decode(can1_ams_cell_voltages.v4s2);
 8012d42:	4be5      	ldr	r3, [pc, #916]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012d44:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f4 fbe9 	bl	8007520 <can1_ams_cell_voltages_v4s2_decode>
 8012d4e:	eeb0 7a40 	vmov.f32	s14, s0
 8012d52:	eef0 7a60 	vmov.f32	s15, s1
 8012d56:	463b      	mov	r3, r7
 8012d58:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_decode(can1_ams_cell_voltages.v10s2);
 8012d5c:	4bde      	ldr	r3, [pc, #888]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012d5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f4 fc34 	bl	80075d0 <can1_ams_cell_voltages_v10s2_decode>
 8012d68:	eeb0 7a40 	vmov.f32	s14, s0
 8012d6c:	eef0 7a60 	vmov.f32	s15, s1
 8012d70:	463b      	mov	r3, r7
 8012d72:	ed83 7bda 	vstr	d7, [r3, #872]	; 0x368
       ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_decode(can1_ams_cell_voltages.v4s3);
 8012d76:	4bd8      	ldr	r3, [pc, #864]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012d78:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f4 fc7f 	bl	8007680 <can1_ams_cell_voltages_v4s3_decode>
 8012d82:	eeb0 7a40 	vmov.f32	s14, s0
 8012d86:	eef0 7a60 	vmov.f32	s15, s1
 8012d8a:	463b      	mov	r3, r7
 8012d8c:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_decode(can1_ams_cell_voltages.v10s3);
 8012d90:	4bd1      	ldr	r3, [pc, #836]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012d92:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f4 fcca 	bl	8007730 <can1_ams_cell_voltages_v10s3_decode>
 8012d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8012da0:	eef0 7a60 	vmov.f32	s15, s1
 8012da4:	463b      	mov	r3, r7
 8012da6:	ed83 7bdc 	vstr	d7, [r3, #880]	; 0x370
       ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_decode(can1_ams_cell_voltages.v4s4);
 8012daa:	4bcb      	ldr	r3, [pc, #812]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012dac:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7f4 fd15 	bl	80077e0 <can1_ams_cell_voltages_v4s4_decode>
 8012db6:	eeb0 7a40 	vmov.f32	s14, s0
 8012dba:	eef0 7a60 	vmov.f32	s15, s1
 8012dbe:	463b      	mov	r3, r7
 8012dc0:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_decode(can1_ams_cell_voltages.v10s4);
 8012dc4:	4bc4      	ldr	r3, [pc, #784]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7f4 fd60 	bl	8007890 <can1_ams_cell_voltages_v10s4_decode>
 8012dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8012dd4:	eef0 7a60 	vmov.f32	s15, s1
 8012dd8:	463b      	mov	r3, r7
 8012dda:	ed83 7bde 	vstr	d7, [r3, #888]	; 0x378
       ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_decode(can1_ams_cell_voltages.v4s5);
 8012dde:	4bbe      	ldr	r3, [pc, #760]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f4 fdab 	bl	8007940 <can1_ams_cell_voltages_v4s5_decode>
 8012dea:	eeb0 7a40 	vmov.f32	s14, s0
 8012dee:	eef0 7a60 	vmov.f32	s15, s1
 8012df2:	463b      	mov	r3, r7
 8012df4:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_decode(can1_ams_cell_voltages.v10s5);
 8012df8:	4bb7      	ldr	r3, [pc, #732]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012dfa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f4 fdf6 	bl	80079f0 <can1_ams_cell_voltages_v10s5_decode>
 8012e04:	eeb0 7a40 	vmov.f32	s14, s0
 8012e08:	eef0 7a60 	vmov.f32	s15, s1
 8012e0c:	463b      	mov	r3, r7
 8012e0e:	ed83 7be0 	vstr	d7, [r3, #896]	; 0x380
       ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_decode(can1_ams_cell_voltages.v4s6);
 8012e12:	4bb1      	ldr	r3, [pc, #708]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f4 fe41 	bl	8007aa0 <can1_ams_cell_voltages_v4s6_decode>
 8012e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8012e22:	eef0 7a60 	vmov.f32	s15, s1
 8012e26:	463b      	mov	r3, r7
 8012e28:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_decode(can1_ams_cell_voltages.v10s6);
 8012e2c:	4baa      	ldr	r3, [pc, #680]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7f4 fe8c 	bl	8007b50 <can1_ams_cell_voltages_v10s6_decode>
 8012e38:	eeb0 7a40 	vmov.f32	s14, s0
 8012e3c:	eef0 7a60 	vmov.f32	s15, s1
 8012e40:	463b      	mov	r3, r7
 8012e42:	ed83 7be2 	vstr	d7, [r3, #904]	; 0x388
       ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_decode(can1_ams_cell_voltages.v4s7);
 8012e46:	4ba4      	ldr	r3, [pc, #656]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e48:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7f4 fed7 	bl	8007c00 <can1_ams_cell_voltages_v4s7_decode>
 8012e52:	eeb0 7a40 	vmov.f32	s14, s0
 8012e56:	eef0 7a60 	vmov.f32	s15, s1
 8012e5a:	463b      	mov	r3, r7
 8012e5c:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_decode(can1_ams_cell_voltages.v10s7);
 8012e60:	4b9d      	ldr	r3, [pc, #628]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7f4 ff22 	bl	8007cb0 <can1_ams_cell_voltages_v10s7_decode>
 8012e6c:	eeb0 7a40 	vmov.f32	s14, s0
 8012e70:	eef0 7a60 	vmov.f32	s15, s1
 8012e74:	463b      	mov	r3, r7
 8012e76:	ed83 7be4 	vstr	d7, [r3, #912]	; 0x390
       ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_decode(can1_ams_cell_voltages.v4s8);
 8012e7a:	4b97      	ldr	r3, [pc, #604]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e7c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7f4 ff6d 	bl	8007d60 <can1_ams_cell_voltages_v4s8_decode>
 8012e86:	eeb0 7a40 	vmov.f32	s14, s0
 8012e8a:	eef0 7a60 	vmov.f32	s15, s1
 8012e8e:	463b      	mov	r3, r7
 8012e90:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_decode(can1_ams_cell_voltages.v10s8);
 8012e94:	4b90      	ldr	r3, [pc, #576]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f4 ffb8 	bl	8007e10 <can1_ams_cell_voltages_v10s8_decode>
 8012ea0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ea4:	eef0 7a60 	vmov.f32	s15, s1
 8012ea8:	463b      	mov	r3, r7
 8012eaa:	ed83 7be6 	vstr	d7, [r3, #920]	; 0x398
       ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_decode(can1_ams_cell_voltages.v4s9);
 8012eae:	4b8a      	ldr	r3, [pc, #552]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7f5 f803 	bl	8007ec0 <can1_ams_cell_voltages_v4s9_decode>
 8012eba:	eeb0 7a40 	vmov.f32	s14, s0
 8012ebe:	eef0 7a60 	vmov.f32	s15, s1
 8012ec2:	463b      	mov	r3, r7
 8012ec4:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_decode(can1_ams_cell_voltages.v10s9);
 8012ec8:	4b83      	ldr	r3, [pc, #524]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012eca:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f5 f84e 	bl	8007f70 <can1_ams_cell_voltages_v10s9_decode>
 8012ed4:	eeb0 7a40 	vmov.f32	s14, s0
 8012ed8:	eef0 7a60 	vmov.f32	s15, s1
 8012edc:	463b      	mov	r3, r7
 8012ede:	ed83 7be8 	vstr	d7, [r3, #928]	; 0x3a0
       ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_decode(can1_ams_cell_voltages.v4s10);
 8012ee2:	4b7d      	ldr	r3, [pc, #500]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012ee4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7f5 f899 	bl	8008020 <can1_ams_cell_voltages_v4s10_decode>
 8012eee:	eeb0 7a40 	vmov.f32	s14, s0
 8012ef2:	eef0 7a60 	vmov.f32	s15, s1
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_decode(can1_ams_cell_voltages.v10s10);
 8012efc:	4b76      	ldr	r3, [pc, #472]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012efe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f5 f8e4 	bl	80080d0 <can1_ams_cell_voltages_v10s10_decode>
 8012f08:	eeb0 7a40 	vmov.f32	s14, s0
 8012f0c:	eef0 7a60 	vmov.f32	s15, s1
 8012f10:	463b      	mov	r3, r7
 8012f12:	ed83 7bea 	vstr	d7, [r3, #936]	; 0x3a8
       ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_decode(can1_ams_cell_voltages.v4s11);
 8012f16:	4b70      	ldr	r3, [pc, #448]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f5 f92f 	bl	8008180 <can1_ams_cell_voltages_v4s11_decode>
 8012f22:	eeb0 7a40 	vmov.f32	s14, s0
 8012f26:	eef0 7a60 	vmov.f32	s15, s1
 8012f2a:	463b      	mov	r3, r7
 8012f2c:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_decode(can1_ams_cell_voltages.v10s11);
 8012f30:	4b69      	ldr	r3, [pc, #420]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f32:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7f5 f97a 	bl	8008230 <can1_ams_cell_voltages_v10s11_decode>
 8012f3c:	eeb0 7a40 	vmov.f32	s14, s0
 8012f40:	eef0 7a60 	vmov.f32	s15, s1
 8012f44:	463b      	mov	r3, r7
 8012f46:	ed83 7bec 	vstr	d7, [r3, #944]	; 0x3b0
       ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_decode(can1_ams_cell_voltages.v4s12);
 8012f4a:	4b63      	ldr	r3, [pc, #396]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f4c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f5 f9c5 	bl	80082e0 <can1_ams_cell_voltages_v4s12_decode>
 8012f56:	eeb0 7a40 	vmov.f32	s14, s0
 8012f5a:	eef0 7a60 	vmov.f32	s15, s1
 8012f5e:	463b      	mov	r3, r7
 8012f60:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_decode(can1_ams_cell_voltages.v10s12);
 8012f64:	4b5c      	ldr	r3, [pc, #368]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f66:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f5 fa10 	bl	8008390 <can1_ams_cell_voltages_v10s12_decode>
 8012f70:	eeb0 7a40 	vmov.f32	s14, s0
 8012f74:	eef0 7a60 	vmov.f32	s15, s1
 8012f78:	463b      	mov	r3, r7
 8012f7a:	ed83 7bee 	vstr	d7, [r3, #952]	; 0x3b8
       ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_decode(can1_ams_cell_voltages.v5s1);
 8012f7e:	4b56      	ldr	r3, [pc, #344]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f5 fa5b 	bl	8008440 <can1_ams_cell_voltages_v5s1_decode>
 8012f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8012f8e:	eef0 7a60 	vmov.f32	s15, s1
 8012f92:	463b      	mov	r3, r7
 8012f94:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_decode(can1_ams_cell_voltages.v11s1);
 8012f98:	4b4f      	ldr	r3, [pc, #316]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012f9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f5 faa6 	bl	80084f0 <can1_ams_cell_voltages_v11s1_decode>
 8012fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8012fa8:	eef0 7a60 	vmov.f32	s15, s1
 8012fac:	463b      	mov	r3, r7
 8012fae:	ed83 7bf0 	vstr	d7, [r3, #960]	; 0x3c0
       ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_decode(can1_ams_cell_voltages.v5s2);
 8012fb2:	4b49      	ldr	r3, [pc, #292]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012fb4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7f5 faf1 	bl	80085a0 <can1_ams_cell_voltages_v5s2_decode>
 8012fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8012fc2:	eef0 7a60 	vmov.f32	s15, s1
 8012fc6:	463b      	mov	r3, r7
 8012fc8:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_decode(can1_ams_cell_voltages.v5s3);
 8012fcc:	4b42      	ldr	r3, [pc, #264]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012fce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f5 fb3c 	bl	8008650 <can1_ams_cell_voltages_v5s3_decode>
 8012fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8012fdc:	eef0 7a60 	vmov.f32	s15, s1
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_decode(can1_ams_cell_voltages.v11s3);
 8012fe6:	4b3c      	ldr	r3, [pc, #240]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8012fe8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7f5 fb87 	bl	8008700 <can1_ams_cell_voltages_v11s3_decode>
 8012ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8012ff6:	eef0 7a60 	vmov.f32	s15, s1
 8012ffa:	463b      	mov	r3, r7
 8012ffc:	ed83 7bf2 	vstr	d7, [r3, #968]	; 0x3c8
       ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_decode(can1_ams_cell_voltages.v5s4);
 8013000:	4b35      	ldr	r3, [pc, #212]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8013002:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013006:	4618      	mov	r0, r3
 8013008:	f7f5 fbd2 	bl	80087b0 <can1_ams_cell_voltages_v5s4_decode>
 801300c:	eeb0 7a40 	vmov.f32	s14, s0
 8013010:	eef0 7a60 	vmov.f32	s15, s1
 8013014:	463b      	mov	r3, r7
 8013016:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_decode(can1_ams_cell_voltages.v5s5);
 801301a:	4b2f      	ldr	r3, [pc, #188]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 801301c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8013020:	4618      	mov	r0, r3
 8013022:	f7f5 fc1d 	bl	8008860 <can1_ams_cell_voltages_v5s5_decode>
 8013026:	eeb0 7a40 	vmov.f32	s14, s0
 801302a:	eef0 7a60 	vmov.f32	s15, s1
 801302e:	463b      	mov	r3, r7
 8013030:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_decode(can1_ams_cell_voltages.v11s5);
 8013034:	4b28      	ldr	r3, [pc, #160]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8013036:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801303a:	4618      	mov	r0, r3
 801303c:	f7f5 fc68 	bl	8008910 <can1_ams_cell_voltages_v11s5_decode>
 8013040:	eeb0 7a40 	vmov.f32	s14, s0
 8013044:	eef0 7a60 	vmov.f32	s15, s1
 8013048:	463b      	mov	r3, r7
 801304a:	ed83 7bf4 	vstr	d7, [r3, #976]	; 0x3d0
       ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_decode(can1_ams_cell_voltages.v5s6);
 801304e:	4b22      	ldr	r3, [pc, #136]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8013050:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013054:	4618      	mov	r0, r3
 8013056:	f7f5 fcb3 	bl	80089c0 <can1_ams_cell_voltages_v5s6_decode>
 801305a:	eeb0 7a40 	vmov.f32	s14, s0
 801305e:	eef0 7a60 	vmov.f32	s15, s1
 8013062:	463b      	mov	r3, r7
 8013064:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_decode(can1_ams_cell_voltages.v5s7);
 8013068:	4b1b      	ldr	r3, [pc, #108]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 801306a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801306e:	4618      	mov	r0, r3
 8013070:	f7f5 fcfe 	bl	8008a70 <can1_ams_cell_voltages_v5s7_decode>
 8013074:	eeb0 7a40 	vmov.f32	s14, s0
 8013078:	eef0 7a60 	vmov.f32	s15, s1
 801307c:	463b      	mov	r3, r7
 801307e:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_decode(can1_ams_cell_voltages.v11s7);
 8013082:	4b15      	ldr	r3, [pc, #84]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 8013084:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8013088:	4618      	mov	r0, r3
 801308a:	f7f5 fd49 	bl	8008b20 <can1_ams_cell_voltages_v11s7_decode>
 801308e:	eeb0 7a40 	vmov.f32	s14, s0
 8013092:	eef0 7a60 	vmov.f32	s15, s1
 8013096:	463b      	mov	r3, r7
 8013098:	ed83 7bf6 	vstr	d7, [r3, #984]	; 0x3d8
       ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_decode(can1_ams_cell_voltages.v5s8);
 801309c:	4b0e      	ldr	r3, [pc, #56]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 801309e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7f5 fd94 	bl	8008bd0 <can1_ams_cell_voltages_v5s8_decode>
 80130a8:	eeb0 7a40 	vmov.f32	s14, s0
 80130ac:	eef0 7a60 	vmov.f32	s15, s1
 80130b0:	463b      	mov	r3, r7
 80130b2:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_decode(can1_ams_cell_voltages.v5s9);
 80130b6:	4b08      	ldr	r3, [pc, #32]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 80130b8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f5 fddf 	bl	8008c80 <can1_ams_cell_voltages_v5s9_decode>
 80130c2:	eeb0 7a40 	vmov.f32	s14, s0
 80130c6:	eef0 7a60 	vmov.f32	s15, s1
 80130ca:	463b      	mov	r3, r7
 80130cc:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_decode(can1_ams_cell_voltages.v11s9);
 80130d0:	4b01      	ldr	r3, [pc, #4]	; (80130d8 <can1_ams_cell_voltages_receive+0xb00>)
 80130d2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80130d6:	e001      	b.n	80130dc <can1_ams_cell_voltages_receive+0xb04>
 80130d8:	200014f4 	.word	0x200014f4
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f5 fe27 	bl	8008d30 <can1_ams_cell_voltages_v11s9_decode>
 80130e2:	eeb0 7a40 	vmov.f32	s14, s0
 80130e6:	eef0 7a60 	vmov.f32	s15, s1
 80130ea:	463b      	mov	r3, r7
 80130ec:	ed83 7bf8 	vstr	d7, [r3, #992]	; 0x3e0
       ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_decode(can1_ams_cell_voltages.v5s10);
 80130f0:	4b6d      	ldr	r3, [pc, #436]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 80130f2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7f5 fe72 	bl	8008de0 <can1_ams_cell_voltages_v5s10_decode>
 80130fc:	eeb0 7a40 	vmov.f32	s14, s0
 8013100:	eef0 7a60 	vmov.f32	s15, s1
 8013104:	463b      	mov	r3, r7
 8013106:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_decode(can1_ams_cell_voltages.v5s11);
 801310a:	4b67      	ldr	r3, [pc, #412]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 801310c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013110:	4618      	mov	r0, r3
 8013112:	f7f5 febd 	bl	8008e90 <can1_ams_cell_voltages_v5s11_decode>
 8013116:	eeb0 7a40 	vmov.f32	s14, s0
 801311a:	eef0 7a60 	vmov.f32	s15, s1
 801311e:	463b      	mov	r3, r7
 8013120:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_decode(can1_ams_cell_voltages.v11s11);
 8013124:	4b60      	ldr	r3, [pc, #384]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013126:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801312a:	4618      	mov	r0, r3
 801312c:	f7f5 ff08 	bl	8008f40 <can1_ams_cell_voltages_v11s11_decode>
 8013130:	eeb0 7a40 	vmov.f32	s14, s0
 8013134:	eef0 7a60 	vmov.f32	s15, s1
 8013138:	463b      	mov	r3, r7
 801313a:	ed83 7bfa 	vstr	d7, [r3, #1000]	; 0x3e8
       ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_decode(can1_ams_cell_voltages.v5s12);
 801313e:	4b5a      	ldr	r3, [pc, #360]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013140:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8013144:	4618      	mov	r0, r3
 8013146:	f7f5 ff53 	bl	8008ff0 <can1_ams_cell_voltages_v5s12_decode>
 801314a:	eeb0 7a40 	vmov.f32	s14, s0
 801314e:	eef0 7a60 	vmov.f32	s15, s1
 8013152:	463b      	mov	r3, r7
 8013154:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_decode(can1_ams_cell_voltages.v6s1);
 8013158:	4b53      	ldr	r3, [pc, #332]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 801315a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 801315e:	4618      	mov	r0, r3
 8013160:	f7f5 ff9e 	bl	80090a0 <can1_ams_cell_voltages_v6s1_decode>
 8013164:	eeb0 7a40 	vmov.f32	s14, s0
 8013168:	eef0 7a60 	vmov.f32	s15, s1
 801316c:	463b      	mov	r3, r7
 801316e:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
       ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_decode(can1_ams_cell_voltages.v6s2);
 8013172:	4b4d      	ldr	r3, [pc, #308]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013178:	4618      	mov	r0, r3
 801317a:	f7f5 ffe9 	bl	8009150 <can1_ams_cell_voltages_v6s2_decode>
 801317e:	eeb0 7a40 	vmov.f32	s14, s0
 8013182:	eef0 7a60 	vmov.f32	s15, s1
 8013186:	463b      	mov	r3, r7
 8013188:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
       ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_decode(can1_ams_cell_voltages.v6s3);
 801318c:	4b46      	ldr	r3, [pc, #280]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 801318e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8013192:	4618      	mov	r0, r3
 8013194:	f7f6 f834 	bl	8009200 <can1_ams_cell_voltages_v6s3_decode>
 8013198:	eeb0 7a40 	vmov.f32	s14, s0
 801319c:	eef0 7a60 	vmov.f32	s15, s1
 80131a0:	463b      	mov	r3, r7
 80131a2:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
       ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_decode(can1_ams_cell_voltages.v6s4);
 80131a6:	4b40      	ldr	r3, [pc, #256]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 80131a8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7f6 f87f 	bl	80092b0 <can1_ams_cell_voltages_v6s4_decode>
 80131b2:	eeb0 7a40 	vmov.f32	s14, s0
 80131b6:	eef0 7a60 	vmov.f32	s15, s1
 80131ba:	463b      	mov	r3, r7
 80131bc:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
       ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_decode(can1_ams_cell_voltages.v6s5);
 80131c0:	4b39      	ldr	r3, [pc, #228]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 80131c2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7f6 f8ca 	bl	8009360 <can1_ams_cell_voltages_v6s5_decode>
 80131cc:	eeb0 7a40 	vmov.f32	s14, s0
 80131d0:	eef0 7a60 	vmov.f32	s15, s1
 80131d4:	463b      	mov	r3, r7
 80131d6:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200
       ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_decode(can1_ams_cell_voltages.v6s6);
 80131da:	4b33      	ldr	r3, [pc, #204]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 80131dc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f6 f915 	bl	8009410 <can1_ams_cell_voltages_v6s6_decode>
 80131e6:	eeb0 7a40 	vmov.f32	s14, s0
 80131ea:	eef0 7a60 	vmov.f32	s15, s1
 80131ee:	463b      	mov	r3, r7
 80131f0:	ed83 7b82 	vstr	d7, [r3, #520]	; 0x208
       ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_decode(can1_ams_cell_voltages.v6s7);
 80131f4:	4b2c      	ldr	r3, [pc, #176]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 80131f6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7f6 f960 	bl	80094c0 <can1_ams_cell_voltages_v6s7_decode>
 8013200:	eeb0 7a40 	vmov.f32	s14, s0
 8013204:	eef0 7a60 	vmov.f32	s15, s1
 8013208:	463b      	mov	r3, r7
 801320a:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210
       ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_decode(can1_ams_cell_voltages.v6s8);
 801320e:	4b26      	ldr	r3, [pc, #152]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013210:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8013214:	4618      	mov	r0, r3
 8013216:	f7f6 f9ab 	bl	8009570 <can1_ams_cell_voltages_v6s8_decode>
 801321a:	eeb0 7a40 	vmov.f32	s14, s0
 801321e:	eef0 7a60 	vmov.f32	s15, s1
 8013222:	463b      	mov	r3, r7
 8013224:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
       ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_decode(can1_ams_cell_voltages.v6s9);
 8013228:	4b1f      	ldr	r3, [pc, #124]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 801322a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801322e:	4618      	mov	r0, r3
 8013230:	f7f6 f9f6 	bl	8009620 <can1_ams_cell_voltages_v6s9_decode>
 8013234:	eeb0 7a40 	vmov.f32	s14, s0
 8013238:	eef0 7a60 	vmov.f32	s15, s1
 801323c:	463b      	mov	r3, r7
 801323e:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
       ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_decode(can1_ams_cell_voltages.v6s10);
 8013242:	4b19      	ldr	r3, [pc, #100]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013244:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013248:	4618      	mov	r0, r3
 801324a:	f7f6 fa41 	bl	80096d0 <can1_ams_cell_voltages_v6s10_decode>
 801324e:	eeb0 7a40 	vmov.f32	s14, s0
 8013252:	eef0 7a60 	vmov.f32	s15, s1
 8013256:	463b      	mov	r3, r7
 8013258:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
       ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_decode(can1_ams_cell_voltages.v6s11);
 801325c:	4b12      	ldr	r3, [pc, #72]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 801325e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013262:	4618      	mov	r0, r3
 8013264:	f7f6 fa8c 	bl	8009780 <can1_ams_cell_voltages_v6s11_decode>
 8013268:	eeb0 7a40 	vmov.f32	s14, s0
 801326c:	eef0 7a60 	vmov.f32	s15, s1
 8013270:	463b      	mov	r3, r7
 8013272:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230
       ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_decode(can1_ams_cell_voltages.v6s12);
 8013276:	4b0c      	ldr	r3, [pc, #48]	; (80132a8 <can1_ams_cell_voltages_receive+0xcd0>)
 8013278:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801327c:	4618      	mov	r0, r3
 801327e:	f7f6 fad7 	bl	8009830 <can1_ams_cell_voltages_v6s12_decode>
 8013282:	eeb0 7a40 	vmov.f32	s14, s0
 8013286:	eef0 7a60 	vmov.f32	s15, s1
 801328a:	463b      	mov	r3, r7
 801328c:	ed83 7b8e 	vstr	d7, [r3, #568]	; 0x238
       can1_ams_cell_voltages_rx_callback(&ams_cell_voltages);
 8013290:	463b      	mov	r3, r7
 8013292:	4618      	mov	r0, r3
 8013294:	f7fc fb9d 	bl	800f9d2 <can1_ams_cell_voltages_rx_callback>
       can1_ams_cell_voltages_flag = 0;
 8013298:	4b04      	ldr	r3, [pc, #16]	; (80132ac <can1_ams_cell_voltages_receive+0xcd4>)
 801329a:	2200      	movs	r2, #0
 801329c:	701a      	strb	r2, [r3, #0]
   }
}
 801329e:	bf00      	nop
 80132a0:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	200014f4 	.word	0x200014f4
 80132ac:	20001628 	.word	0x20001628

080132b0 <can1_ams_cell_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_receive() {
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b0fa      	sub	sp, #488	; 0x1e8
 80132b4:	af00      	add	r7, sp, #0
   if(can1_ams_cell_temperatures_flag) {
 80132b6:	4beb      	ldr	r3, [pc, #940]	; (8013664 <can1_ams_cell_temperatures_receive+0x3b4>)
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f000 8318 	beq.w	80138f0 <can1_ams_cell_temperatures_receive+0x640>
       ams_cell_temperatures_t ams_cell_temperatures;
       ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_decode(can1_ams_cell_temperatures.t1s1);
 80132c0:	4be9      	ldr	r3, [pc, #932]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7f8 fe5a 	bl	800bf80 <can1_ams_cell_temperatures_t1s1_decode>
 80132cc:	eeb0 7a40 	vmov.f32	s14, s0
 80132d0:	eef0 7a60 	vmov.f32	s15, s1
 80132d4:	463b      	mov	r3, r7
 80132d6:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_decode(can1_ams_cell_temperatures.t1s2);
 80132da:	4be3      	ldr	r3, [pc, #908]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7f8 fea5 	bl	800c030 <can1_ams_cell_temperatures_t1s2_decode>
 80132e6:	eeb0 7a40 	vmov.f32	s14, s0
 80132ea:	eef0 7a60 	vmov.f32	s15, s1
 80132ee:	463b      	mov	r3, r7
 80132f0:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_decode(can1_ams_cell_temperatures.t1s3);
 80132f4:	4bdc      	ldr	r3, [pc, #880]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80132f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7f8 fef0 	bl	800c0e0 <can1_ams_cell_temperatures_t1s3_decode>
 8013300:	eeb0 7a40 	vmov.f32	s14, s0
 8013304:	eef0 7a60 	vmov.f32	s15, s1
 8013308:	463b      	mov	r3, r7
 801330a:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_decode(can1_ams_cell_temperatures.t1s4);
 801330e:	4bd6      	ldr	r3, [pc, #856]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013314:	4618      	mov	r0, r3
 8013316:	f7f8 ff3b 	bl	800c190 <can1_ams_cell_temperatures_t1s4_decode>
 801331a:	eeb0 7a40 	vmov.f32	s14, s0
 801331e:	eef0 7a60 	vmov.f32	s15, s1
 8013322:	463b      	mov	r3, r7
 8013324:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_decode(can1_ams_cell_temperatures.t1s5);
 8013328:	4bcf      	ldr	r3, [pc, #828]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801332a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801332e:	4618      	mov	r0, r3
 8013330:	f7f8 ff86 	bl	800c240 <can1_ams_cell_temperatures_t1s5_decode>
 8013334:	eeb0 7a40 	vmov.f32	s14, s0
 8013338:	eef0 7a60 	vmov.f32	s15, s1
 801333c:	463b      	mov	r3, r7
 801333e:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_decode(can1_ams_cell_temperatures.t1s6);
 8013342:	4bc9      	ldr	r3, [pc, #804]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013344:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013348:	4618      	mov	r0, r3
 801334a:	f7f8 ffd1 	bl	800c2f0 <can1_ams_cell_temperatures_t1s6_decode>
 801334e:	eeb0 7a40 	vmov.f32	s14, s0
 8013352:	eef0 7a60 	vmov.f32	s15, s1
 8013356:	463b      	mov	r3, r7
 8013358:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_decode(can1_ams_cell_temperatures.t1s7);
 801335c:	4bc2      	ldr	r3, [pc, #776]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801335e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013362:	4618      	mov	r0, r3
 8013364:	f7f9 f81c 	bl	800c3a0 <can1_ams_cell_temperatures_t1s7_decode>
 8013368:	eeb0 7a40 	vmov.f32	s14, s0
 801336c:	eef0 7a60 	vmov.f32	s15, s1
 8013370:	463b      	mov	r3, r7
 8013372:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_decode(can1_ams_cell_temperatures.t1s8);
 8013376:	4bbc      	ldr	r3, [pc, #752]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013378:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801337c:	4618      	mov	r0, r3
 801337e:	f7f9 f867 	bl	800c450 <can1_ams_cell_temperatures_t1s8_decode>
 8013382:	eeb0 7a40 	vmov.f32	s14, s0
 8013386:	eef0 7a60 	vmov.f32	s15, s1
 801338a:	463b      	mov	r3, r7
 801338c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_decode(can1_ams_cell_temperatures.t1s9);
 8013390:	4bb5      	ldr	r3, [pc, #724]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013392:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013396:	4618      	mov	r0, r3
 8013398:	f7f9 f8b2 	bl	800c500 <can1_ams_cell_temperatures_t1s9_decode>
 801339c:	eeb0 7a40 	vmov.f32	s14, s0
 80133a0:	eef0 7a60 	vmov.f32	s15, s1
 80133a4:	463b      	mov	r3, r7
 80133a6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_decode(can1_ams_cell_temperatures.t1s10);
 80133aa:	4baf      	ldr	r3, [pc, #700]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f9 f8fd 	bl	800c5b0 <can1_ams_cell_temperatures_t1s10_decode>
 80133b6:	eeb0 7a40 	vmov.f32	s14, s0
 80133ba:	eef0 7a60 	vmov.f32	s15, s1
 80133be:	463b      	mov	r3, r7
 80133c0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_decode(can1_ams_cell_temperatures.t1s11);
 80133c4:	4ba8      	ldr	r3, [pc, #672]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7f9 f948 	bl	800c660 <can1_ams_cell_temperatures_t1s11_decode>
 80133d0:	eeb0 7a40 	vmov.f32	s14, s0
 80133d4:	eef0 7a60 	vmov.f32	s15, s1
 80133d8:	463b      	mov	r3, r7
 80133da:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_decode(can1_ams_cell_temperatures.t1s12);
 80133de:	4ba2      	ldr	r3, [pc, #648]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133e0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f9 f993 	bl	800c710 <can1_ams_cell_temperatures_t1s12_decode>
 80133ea:	eeb0 7a40 	vmov.f32	s14, s0
 80133ee:	eef0 7a60 	vmov.f32	s15, s1
 80133f2:	463b      	mov	r3, r7
 80133f4:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_decode(can1_ams_cell_temperatures.t2s1);
 80133f8:	4b9b      	ldr	r3, [pc, #620]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80133fe:	4618      	mov	r0, r3
 8013400:	f7f9 f9de 	bl	800c7c0 <can1_ams_cell_temperatures_t2s1_decode>
 8013404:	eeb0 7a40 	vmov.f32	s14, s0
 8013408:	eef0 7a60 	vmov.f32	s15, s1
 801340c:	463b      	mov	r3, r7
 801340e:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_decode(can1_ams_cell_temperatures.t2s2);
 8013412:	4b95      	ldr	r3, [pc, #596]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013414:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013418:	4618      	mov	r0, r3
 801341a:	f7f9 fa29 	bl	800c870 <can1_ams_cell_temperatures_t2s2_decode>
 801341e:	eeb0 7a40 	vmov.f32	s14, s0
 8013422:	eef0 7a60 	vmov.f32	s15, s1
 8013426:	463b      	mov	r3, r7
 8013428:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_decode(can1_ams_cell_temperatures.t2s3);
 801342c:	4b8e      	ldr	r3, [pc, #568]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801342e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013432:	4618      	mov	r0, r3
 8013434:	f7f9 fa74 	bl	800c920 <can1_ams_cell_temperatures_t2s3_decode>
 8013438:	eeb0 7a40 	vmov.f32	s14, s0
 801343c:	eef0 7a60 	vmov.f32	s15, s1
 8013440:	463b      	mov	r3, r7
 8013442:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_decode(can1_ams_cell_temperatures.t2s4);
 8013446:	4b88      	ldr	r3, [pc, #544]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013448:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801344c:	4618      	mov	r0, r3
 801344e:	f7f9 fabf 	bl	800c9d0 <can1_ams_cell_temperatures_t2s4_decode>
 8013452:	eeb0 7a40 	vmov.f32	s14, s0
 8013456:	eef0 7a60 	vmov.f32	s15, s1
 801345a:	463b      	mov	r3, r7
 801345c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_decode(can1_ams_cell_temperatures.t2s5);
 8013460:	4b81      	ldr	r3, [pc, #516]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013462:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8013466:	4618      	mov	r0, r3
 8013468:	f7f9 fb0a 	bl	800ca80 <can1_ams_cell_temperatures_t2s5_decode>
 801346c:	eeb0 7a40 	vmov.f32	s14, s0
 8013470:	eef0 7a60 	vmov.f32	s15, s1
 8013474:	463b      	mov	r3, r7
 8013476:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_decode(can1_ams_cell_temperatures.t2s6);
 801347a:	4b7b      	ldr	r3, [pc, #492]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801347c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013480:	4618      	mov	r0, r3
 8013482:	f7f9 fb55 	bl	800cb30 <can1_ams_cell_temperatures_t2s6_decode>
 8013486:	eeb0 7a40 	vmov.f32	s14, s0
 801348a:	eef0 7a60 	vmov.f32	s15, s1
 801348e:	463b      	mov	r3, r7
 8013490:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_decode(can1_ams_cell_temperatures.t2s7);
 8013494:	4b74      	ldr	r3, [pc, #464]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013496:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801349a:	4618      	mov	r0, r3
 801349c:	f7f9 fba0 	bl	800cbe0 <can1_ams_cell_temperatures_t2s7_decode>
 80134a0:	eeb0 7a40 	vmov.f32	s14, s0
 80134a4:	eef0 7a60 	vmov.f32	s15, s1
 80134a8:	463b      	mov	r3, r7
 80134aa:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_decode(can1_ams_cell_temperatures.t2s8);
 80134ae:	4b6e      	ldr	r3, [pc, #440]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7f9 fbeb 	bl	800cc90 <can1_ams_cell_temperatures_t2s8_decode>
 80134ba:	eeb0 7a40 	vmov.f32	s14, s0
 80134be:	eef0 7a60 	vmov.f32	s15, s1
 80134c2:	463b      	mov	r3, r7
 80134c4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_decode(can1_ams_cell_temperatures.t2s9);
 80134c8:	4b67      	ldr	r3, [pc, #412]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134ca:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f9 fc36 	bl	800cd40 <can1_ams_cell_temperatures_t2s9_decode>
 80134d4:	eeb0 7a40 	vmov.f32	s14, s0
 80134d8:	eef0 7a60 	vmov.f32	s15, s1
 80134dc:	463b      	mov	r3, r7
 80134de:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_decode(can1_ams_cell_temperatures.t2s10);
 80134e2:	4b61      	ldr	r3, [pc, #388]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134e4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7f9 fc81 	bl	800cdf0 <can1_ams_cell_temperatures_t2s10_decode>
 80134ee:	eeb0 7a40 	vmov.f32	s14, s0
 80134f2:	eef0 7a60 	vmov.f32	s15, s1
 80134f6:	463b      	mov	r3, r7
 80134f8:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_decode(can1_ams_cell_temperatures.t2s11);
 80134fc:	4b5a      	ldr	r3, [pc, #360]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134fe:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8013502:	4618      	mov	r0, r3
 8013504:	f7f9 fccc 	bl	800cea0 <can1_ams_cell_temperatures_t2s11_decode>
 8013508:	eeb0 7a40 	vmov.f32	s14, s0
 801350c:	eef0 7a60 	vmov.f32	s15, s1
 8013510:	463b      	mov	r3, r7
 8013512:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_decode(can1_ams_cell_temperatures.t2s12);
 8013516:	4b54      	ldr	r3, [pc, #336]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013518:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801351c:	4618      	mov	r0, r3
 801351e:	f7f9 fd17 	bl	800cf50 <can1_ams_cell_temperatures_t2s12_decode>
 8013522:	eeb0 7a40 	vmov.f32	s14, s0
 8013526:	eef0 7a60 	vmov.f32	s15, s1
 801352a:	463b      	mov	r3, r7
 801352c:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_decode(can1_ams_cell_temperatures.t3s1);
 8013530:	4b4d      	ldr	r3, [pc, #308]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013532:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8013536:	4618      	mov	r0, r3
 8013538:	f7f9 fd62 	bl	800d000 <can1_ams_cell_temperatures_t3s1_decode>
 801353c:	eeb0 7a40 	vmov.f32	s14, s0
 8013540:	eef0 7a60 	vmov.f32	s15, s1
 8013544:	463b      	mov	r3, r7
 8013546:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_decode(can1_ams_cell_temperatures.t3s2);
 801354a:	4b47      	ldr	r3, [pc, #284]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801354c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013550:	4618      	mov	r0, r3
 8013552:	f7f9 fdad 	bl	800d0b0 <can1_ams_cell_temperatures_t3s2_decode>
 8013556:	eeb0 7a40 	vmov.f32	s14, s0
 801355a:	eef0 7a60 	vmov.f32	s15, s1
 801355e:	463b      	mov	r3, r7
 8013560:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_decode(can1_ams_cell_temperatures.t3s3);
 8013564:	4b40      	ldr	r3, [pc, #256]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013566:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 801356a:	4618      	mov	r0, r3
 801356c:	f7f9 fdf8 	bl	800d160 <can1_ams_cell_temperatures_t3s3_decode>
 8013570:	eeb0 7a40 	vmov.f32	s14, s0
 8013574:	eef0 7a60 	vmov.f32	s15, s1
 8013578:	463b      	mov	r3, r7
 801357a:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_decode(can1_ams_cell_temperatures.t3s4);
 801357e:	4b3a      	ldr	r3, [pc, #232]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013580:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8013584:	4618      	mov	r0, r3
 8013586:	f7f9 fe43 	bl	800d210 <can1_ams_cell_temperatures_t3s4_decode>
 801358a:	eeb0 7a40 	vmov.f32	s14, s0
 801358e:	eef0 7a60 	vmov.f32	s15, s1
 8013592:	463b      	mov	r3, r7
 8013594:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_decode(can1_ams_cell_temperatures.t3s5);
 8013598:	4b33      	ldr	r3, [pc, #204]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801359a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 801359e:	4618      	mov	r0, r3
 80135a0:	f7f9 fe8e 	bl	800d2c0 <can1_ams_cell_temperatures_t3s5_decode>
 80135a4:	eeb0 7a40 	vmov.f32	s14, s0
 80135a8:	eef0 7a60 	vmov.f32	s15, s1
 80135ac:	463b      	mov	r3, r7
 80135ae:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_decode(can1_ams_cell_temperatures.t3s6);
 80135b2:	4b2d      	ldr	r3, [pc, #180]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f9 fed9 	bl	800d370 <can1_ams_cell_temperatures_t3s6_decode>
 80135be:	eeb0 7a40 	vmov.f32	s14, s0
 80135c2:	eef0 7a60 	vmov.f32	s15, s1
 80135c6:	463b      	mov	r3, r7
 80135c8:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_decode(can1_ams_cell_temperatures.t3s7);
 80135cc:	4b26      	ldr	r3, [pc, #152]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7f9 ff24 	bl	800d420 <can1_ams_cell_temperatures_t3s7_decode>
 80135d8:	eeb0 7a40 	vmov.f32	s14, s0
 80135dc:	eef0 7a60 	vmov.f32	s15, s1
 80135e0:	463b      	mov	r3, r7
 80135e2:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_decode(can1_ams_cell_temperatures.t3s8);
 80135e6:	4b20      	ldr	r3, [pc, #128]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7f9 ff6f 	bl	800d4d0 <can1_ams_cell_temperatures_t3s8_decode>
 80135f2:	eeb0 7a40 	vmov.f32	s14, s0
 80135f6:	eef0 7a60 	vmov.f32	s15, s1
 80135fa:	463b      	mov	r3, r7
 80135fc:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_decode(can1_ams_cell_temperatures.t3s9);
 8013600:	4b19      	ldr	r3, [pc, #100]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013602:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8013606:	4618      	mov	r0, r3
 8013608:	f7f9 ffba 	bl	800d580 <can1_ams_cell_temperatures_t3s9_decode>
 801360c:	eeb0 7a40 	vmov.f32	s14, s0
 8013610:	eef0 7a60 	vmov.f32	s15, s1
 8013614:	463b      	mov	r3, r7
 8013616:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_decode(can1_ams_cell_temperatures.t3s10);
 801361a:	4b13      	ldr	r3, [pc, #76]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 801361c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013620:	4618      	mov	r0, r3
 8013622:	f7fa f805 	bl	800d630 <can1_ams_cell_temperatures_t3s10_decode>
 8013626:	eeb0 7a40 	vmov.f32	s14, s0
 801362a:	eef0 7a60 	vmov.f32	s15, s1
 801362e:	463b      	mov	r3, r7
 8013630:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_decode(can1_ams_cell_temperatures.t3s11);
 8013634:	4b0c      	ldr	r3, [pc, #48]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013636:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801363a:	4618      	mov	r0, r3
 801363c:	f7fa f850 	bl	800d6e0 <can1_ams_cell_temperatures_t3s11_decode>
 8013640:	eeb0 7a40 	vmov.f32	s14, s0
 8013644:	eef0 7a60 	vmov.f32	s15, s1
 8013648:	463b      	mov	r3, r7
 801364a:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_decode(can1_ams_cell_temperatures.t3s12);
 801364e:	4b06      	ldr	r3, [pc, #24]	; (8013668 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013650:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8013654:	4618      	mov	r0, r3
 8013656:	f7fa f89b 	bl	800d790 <can1_ams_cell_temperatures_t3s12_decode>
 801365a:	eeb0 7a40 	vmov.f32	s14, s0
 801365e:	eef0 7a60 	vmov.f32	s15, s1
 8013662:	e003      	b.n	801366c <can1_ams_cell_temperatures_receive+0x3bc>
 8013664:	20001629 	.word	0x20001629
 8013668:	20001574 	.word	0x20001574
 801366c:	463b      	mov	r3, r7
 801366e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_decode(can1_ams_cell_temperatures.t4s1);
 8013672:	4ba2      	ldr	r3, [pc, #648]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013674:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8013678:	4618      	mov	r0, r3
 801367a:	f7fa f8e1 	bl	800d840 <can1_ams_cell_temperatures_t4s1_decode>
 801367e:	eeb0 7a40 	vmov.f32	s14, s0
 8013682:	eef0 7a60 	vmov.f32	s15, s1
 8013686:	463b      	mov	r3, r7
 8013688:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_decode(can1_ams_cell_temperatures.t4s2);
 801368c:	4b9b      	ldr	r3, [pc, #620]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 801368e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013692:	4618      	mov	r0, r3
 8013694:	f7fa f92c 	bl	800d8f0 <can1_ams_cell_temperatures_t4s2_decode>
 8013698:	eeb0 7a40 	vmov.f32	s14, s0
 801369c:	eef0 7a60 	vmov.f32	s15, s1
 80136a0:	463b      	mov	r3, r7
 80136a2:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_decode(can1_ams_cell_temperatures.t4s3);
 80136a6:	4b95      	ldr	r3, [pc, #596]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80136a8:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7fa f977 	bl	800d9a0 <can1_ams_cell_temperatures_t4s3_decode>
 80136b2:	eeb0 7a40 	vmov.f32	s14, s0
 80136b6:	eef0 7a60 	vmov.f32	s15, s1
 80136ba:	463b      	mov	r3, r7
 80136bc:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_decode(can1_ams_cell_temperatures.t4s4);
 80136c0:	4b8e      	ldr	r3, [pc, #568]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80136c2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fa f9c2 	bl	800da50 <can1_ams_cell_temperatures_t4s4_decode>
 80136cc:	eeb0 7a40 	vmov.f32	s14, s0
 80136d0:	eef0 7a60 	vmov.f32	s15, s1
 80136d4:	463b      	mov	r3, r7
 80136d6:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_decode(can1_ams_cell_temperatures.t4s5);
 80136da:	4b88      	ldr	r3, [pc, #544]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80136dc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fa fa0d 	bl	800db00 <can1_ams_cell_temperatures_t4s5_decode>
 80136e6:	eeb0 7a40 	vmov.f32	s14, s0
 80136ea:	eef0 7a60 	vmov.f32	s15, s1
 80136ee:	463b      	mov	r3, r7
 80136f0:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_decode(can1_ams_cell_temperatures.t4s6);
 80136f4:	4b81      	ldr	r3, [pc, #516]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80136f6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fa fa58 	bl	800dbb0 <can1_ams_cell_temperatures_t4s6_decode>
 8013700:	eeb0 7a40 	vmov.f32	s14, s0
 8013704:	eef0 7a60 	vmov.f32	s15, s1
 8013708:	463b      	mov	r3, r7
 801370a:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_decode(can1_ams_cell_temperatures.t4s7);
 801370e:	4b7b      	ldr	r3, [pc, #492]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013710:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8013714:	4618      	mov	r0, r3
 8013716:	f7fa faa3 	bl	800dc60 <can1_ams_cell_temperatures_t4s7_decode>
 801371a:	eeb0 7a40 	vmov.f32	s14, s0
 801371e:	eef0 7a60 	vmov.f32	s15, s1
 8013722:	463b      	mov	r3, r7
 8013724:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_decode(can1_ams_cell_temperatures.t4s8);
 8013728:	4b74      	ldr	r3, [pc, #464]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 801372a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 801372e:	4618      	mov	r0, r3
 8013730:	f7fa faee 	bl	800dd10 <can1_ams_cell_temperatures_t4s8_decode>
 8013734:	eeb0 7a40 	vmov.f32	s14, s0
 8013738:	eef0 7a60 	vmov.f32	s15, s1
 801373c:	463b      	mov	r3, r7
 801373e:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_decode(can1_ams_cell_temperatures.t4s9);
 8013742:	4b6e      	ldr	r3, [pc, #440]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013744:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8013748:	4618      	mov	r0, r3
 801374a:	f7fa fb39 	bl	800ddc0 <can1_ams_cell_temperatures_t4s9_decode>
 801374e:	eeb0 7a40 	vmov.f32	s14, s0
 8013752:	eef0 7a60 	vmov.f32	s15, s1
 8013756:	463b      	mov	r3, r7
 8013758:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_decode(can1_ams_cell_temperatures.t4s10);
 801375c:	4b67      	ldr	r3, [pc, #412]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 801375e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013762:	4618      	mov	r0, r3
 8013764:	f7fa fb84 	bl	800de70 <can1_ams_cell_temperatures_t4s10_decode>
 8013768:	eeb0 7a40 	vmov.f32	s14, s0
 801376c:	eef0 7a60 	vmov.f32	s15, s1
 8013770:	463b      	mov	r3, r7
 8013772:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_decode(can1_ams_cell_temperatures.t4s11);
 8013776:	4b61      	ldr	r3, [pc, #388]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013778:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801377c:	4618      	mov	r0, r3
 801377e:	f7fa fbcf 	bl	800df20 <can1_ams_cell_temperatures_t4s11_decode>
 8013782:	eeb0 7a40 	vmov.f32	s14, s0
 8013786:	eef0 7a60 	vmov.f32	s15, s1
 801378a:	463b      	mov	r3, r7
 801378c:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_decode(can1_ams_cell_temperatures.t4s12);
 8013790:	4b5a      	ldr	r3, [pc, #360]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013792:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8013796:	4618      	mov	r0, r3
 8013798:	f7fa fc1a 	bl	800dfd0 <can1_ams_cell_temperatures_t4s12_decode>
 801379c:	eeb0 7a40 	vmov.f32	s14, s0
 80137a0:	eef0 7a60 	vmov.f32	s15, s1
 80137a4:	463b      	mov	r3, r7
 80137a6:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_decode(can1_ams_cell_temperatures.t5s1);
 80137aa:	4b54      	ldr	r3, [pc, #336]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80137ac:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fa fc65 	bl	800e080 <can1_ams_cell_temperatures_t5s1_decode>
 80137b6:	eeb0 7a40 	vmov.f32	s14, s0
 80137ba:	eef0 7a60 	vmov.f32	s15, s1
 80137be:	463b      	mov	r3, r7
 80137c0:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_decode(can1_ams_cell_temperatures.t5s2);
 80137c4:	4b4d      	ldr	r3, [pc, #308]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80137c6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fa fcb0 	bl	800e130 <can1_ams_cell_temperatures_t5s2_decode>
 80137d0:	eeb0 7a40 	vmov.f32	s14, s0
 80137d4:	eef0 7a60 	vmov.f32	s15, s1
 80137d8:	463b      	mov	r3, r7
 80137da:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_decode(can1_ams_cell_temperatures.t5s3);
 80137de:	4b47      	ldr	r3, [pc, #284]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80137e0:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fa fcfb 	bl	800e1e0 <can1_ams_cell_temperatures_t5s3_decode>
 80137ea:	eeb0 7a40 	vmov.f32	s14, s0
 80137ee:	eef0 7a60 	vmov.f32	s15, s1
 80137f2:	463b      	mov	r3, r7
 80137f4:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_decode(can1_ams_cell_temperatures.t5s4);
 80137f8:	4b40      	ldr	r3, [pc, #256]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80137fa:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fa fd46 	bl	800e290 <can1_ams_cell_temperatures_t5s4_decode>
 8013804:	eeb0 7a40 	vmov.f32	s14, s0
 8013808:	eef0 7a60 	vmov.f32	s15, s1
 801380c:	463b      	mov	r3, r7
 801380e:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_decode(can1_ams_cell_temperatures.t5s5);
 8013812:	4b3a      	ldr	r3, [pc, #232]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013814:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8013818:	4618      	mov	r0, r3
 801381a:	f7fa fd91 	bl	800e340 <can1_ams_cell_temperatures_t5s5_decode>
 801381e:	eeb0 7a40 	vmov.f32	s14, s0
 8013822:	eef0 7a60 	vmov.f32	s15, s1
 8013826:	463b      	mov	r3, r7
 8013828:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_decode(can1_ams_cell_temperatures.t5s6);
 801382c:	4b33      	ldr	r3, [pc, #204]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 801382e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8013832:	4618      	mov	r0, r3
 8013834:	f7fa fddc 	bl	800e3f0 <can1_ams_cell_temperatures_t5s6_decode>
 8013838:	eeb0 7a40 	vmov.f32	s14, s0
 801383c:	eef0 7a60 	vmov.f32	s15, s1
 8013840:	463b      	mov	r3, r7
 8013842:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_decode(can1_ams_cell_temperatures.t5s7);
 8013846:	4b2d      	ldr	r3, [pc, #180]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013848:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 801384c:	4618      	mov	r0, r3
 801384e:	f7fa fe27 	bl	800e4a0 <can1_ams_cell_temperatures_t5s7_decode>
 8013852:	eeb0 7a40 	vmov.f32	s14, s0
 8013856:	eef0 7a60 	vmov.f32	s15, s1
 801385a:	463b      	mov	r3, r7
 801385c:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_decode(can1_ams_cell_temperatures.t5s8);
 8013860:	4b26      	ldr	r3, [pc, #152]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013862:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8013866:	4618      	mov	r0, r3
 8013868:	f7fa fe72 	bl	800e550 <can1_ams_cell_temperatures_t5s8_decode>
 801386c:	eeb0 7a40 	vmov.f32	s14, s0
 8013870:	eef0 7a60 	vmov.f32	s15, s1
 8013874:	463b      	mov	r3, r7
 8013876:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_decode(can1_ams_cell_temperatures.t5s9);
 801387a:	4b20      	ldr	r3, [pc, #128]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 801387c:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8013880:	4618      	mov	r0, r3
 8013882:	f7fa febd 	bl	800e600 <can1_ams_cell_temperatures_t5s9_decode>
 8013886:	eeb0 7a40 	vmov.f32	s14, s0
 801388a:	eef0 7a60 	vmov.f32	s15, s1
 801388e:	463b      	mov	r3, r7
 8013890:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_decode(can1_ams_cell_temperatures.t5s10);
 8013894:	4b19      	ldr	r3, [pc, #100]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 8013896:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 801389a:	4618      	mov	r0, r3
 801389c:	f7fa ff08 	bl	800e6b0 <can1_ams_cell_temperatures_t5s10_decode>
 80138a0:	eeb0 7a40 	vmov.f32	s14, s0
 80138a4:	eef0 7a60 	vmov.f32	s15, s1
 80138a8:	463b      	mov	r3, r7
 80138aa:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_decode(can1_ams_cell_temperatures.t5s11);
 80138ae:	4b13      	ldr	r3, [pc, #76]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80138b0:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7fa ff53 	bl	800e760 <can1_ams_cell_temperatures_t5s11_decode>
 80138ba:	eeb0 7a40 	vmov.f32	s14, s0
 80138be:	eef0 7a60 	vmov.f32	s15, s1
 80138c2:	463b      	mov	r3, r7
 80138c4:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_decode(can1_ams_cell_temperatures.t5s12);
 80138c8:	4b0c      	ldr	r3, [pc, #48]	; (80138fc <can1_ams_cell_temperatures_receive+0x64c>)
 80138ca:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fa ff9e 	bl	800e810 <can1_ams_cell_temperatures_t5s12_decode>
 80138d4:	eeb0 7a40 	vmov.f32	s14, s0
 80138d8:	eef0 7a60 	vmov.f32	s15, s1
 80138dc:	463b      	mov	r3, r7
 80138de:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       can1_ams_cell_temperatures_rx_callback(&ams_cell_temperatures);
 80138e2:	463b      	mov	r3, r7
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7fc f87e 	bl	800f9e6 <can1_ams_cell_temperatures_rx_callback>
       can1_ams_cell_temperatures_flag = 0;
 80138ea:	4b05      	ldr	r3, [pc, #20]	; (8013900 <can1_ams_cell_temperatures_receive+0x650>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	701a      	strb	r2, [r3, #0]
   }
}
 80138f0:	bf00      	nop
 80138f2:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop
 80138fc:	20001574 	.word	0x20001574
 8013900:	20001629 	.word	0x20001629

08013904 <can2_amk1_setpoints_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_receive() {
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
   if(can2_amk1_setpoints_1_flag) {
 801390a:	4b3a      	ldr	r3, [pc, #232]	; (80139f4 <can2_amk1_setpoints_1_receive+0xf0>)
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d06b      	beq.n	80139ea <can2_amk1_setpoints_1_receive+0xe6>
       amk1_setpoints_1_t amk1_setpoints_1;
       amk1_setpoints_1.amk1_control_inverter_on = can2_amk1_setpoints_1_amk1_control_inverter_on_decode(can2_amk1_setpoints_1.amk1_control_inverter_on);
 8013912:	4b39      	ldr	r3, [pc, #228]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	4618      	mov	r0, r3
 8013918:	f7fb f95b 	bl	800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>
 801391c:	ec53 2b10 	vmov	r2, r3, d0
 8013920:	4610      	mov	r0, r2
 8013922:	4619      	mov	r1, r3
 8013924:	f7ed f932 	bl	8000b8c <__aeabi_d2uiz>
 8013928:	4603      	mov	r3, r0
 801392a:	b2db      	uxtb	r3, r3
 801392c:	71fb      	strb	r3, [r7, #7]
       amk1_setpoints_1.amk1_control_dc_on = can2_amk1_setpoints_1_amk1_control_dc_on_decode(can2_amk1_setpoints_1.amk1_control_dc_on);
 801392e:	4b32      	ldr	r3, [pc, #200]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 8013930:	785b      	ldrb	r3, [r3, #1]
 8013932:	4618      	mov	r0, r3
 8013934:	f7fb f961 	bl	800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>
 8013938:	ec53 2b10 	vmov	r2, r3, d0
 801393c:	4610      	mov	r0, r2
 801393e:	4619      	mov	r1, r3
 8013940:	f7ed f924 	bl	8000b8c <__aeabi_d2uiz>
 8013944:	4603      	mov	r3, r0
 8013946:	b2db      	uxtb	r3, r3
 8013948:	713b      	strb	r3, [r7, #4]
       amk1_setpoints_1.amk1_control_enable = can2_amk1_setpoints_1_amk1_control_enable_decode(can2_amk1_setpoints_1.amk1_control_enable);
 801394a:	4b2b      	ldr	r3, [pc, #172]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 801394c:	789b      	ldrb	r3, [r3, #2]
 801394e:	4618      	mov	r0, r3
 8013950:	f7fb f967 	bl	800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>
 8013954:	ec53 2b10 	vmov	r2, r3, d0
 8013958:	4610      	mov	r0, r2
 801395a:	4619      	mov	r1, r3
 801395c:	f7ed f916 	bl	8000b8c <__aeabi_d2uiz>
 8013960:	4603      	mov	r3, r0
 8013962:	b2db      	uxtb	r3, r3
 8013964:	717b      	strb	r3, [r7, #5]
       amk1_setpoints_1.amk1_control_error_reset = can2_amk1_setpoints_1_amk1_control_error_reset_decode(can2_amk1_setpoints_1.amk1_control_error_reset);
 8013966:	4b24      	ldr	r3, [pc, #144]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 8013968:	78db      	ldrb	r3, [r3, #3]
 801396a:	4618      	mov	r0, r3
 801396c:	f7fb f96d 	bl	800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>
 8013970:	ec53 2b10 	vmov	r2, r3, d0
 8013974:	4610      	mov	r0, r2
 8013976:	4619      	mov	r1, r3
 8013978:	f7ed f908 	bl	8000b8c <__aeabi_d2uiz>
 801397c:	4603      	mov	r3, r0
 801397e:	b2db      	uxtb	r3, r3
 8013980:	71bb      	strb	r3, [r7, #6]
       amk1_setpoints_1.amk1_target_velocity = can2_amk1_setpoints_1_amk1_target_velocity_decode(can2_amk1_setpoints_1.amk1_target_velocity);
 8013982:	4b1d      	ldr	r3, [pc, #116]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 8013984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013988:	4618      	mov	r0, r3
 801398a:	f7fb f972 	bl	800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>
 801398e:	ec53 2b10 	vmov	r2, r3, d0
 8013992:	4610      	mov	r0, r2
 8013994:	4619      	mov	r1, r3
 8013996:	f7ed f8d1 	bl	8000b3c <__aeabi_d2iz>
 801399a:	4603      	mov	r3, r0
 801399c:	b21b      	sxth	r3, r3
 801399e:	813b      	strh	r3, [r7, #8]
       amk1_setpoints_1.amk1_torque_limit_positiv = can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(can2_amk1_setpoints_1.amk1_torque_limit_positiv);
 80139a0:	4b15      	ldr	r3, [pc, #84]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 80139a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fb f978 	bl	800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>
 80139ac:	ec53 2b10 	vmov	r2, r3, d0
 80139b0:	4610      	mov	r0, r2
 80139b2:	4619      	mov	r1, r3
 80139b4:	f7ed f8c2 	bl	8000b3c <__aeabi_d2iz>
 80139b8:	4603      	mov	r3, r0
 80139ba:	b21b      	sxth	r3, r3
 80139bc:	81bb      	strh	r3, [r7, #12]
       amk1_setpoints_1.amk1_torque_limit_negativ = can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(can2_amk1_setpoints_1.amk1_torque_limit_negativ);
 80139be:	4b0e      	ldr	r3, [pc, #56]	; (80139f8 <can2_amk1_setpoints_1_receive+0xf4>)
 80139c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fb f97e 	bl	800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>
 80139ca:	ec53 2b10 	vmov	r2, r3, d0
 80139ce:	4610      	mov	r0, r2
 80139d0:	4619      	mov	r1, r3
 80139d2:	f7ed f8b3 	bl	8000b3c <__aeabi_d2iz>
 80139d6:	4603      	mov	r3, r0
 80139d8:	b21b      	sxth	r3, r3
 80139da:	817b      	strh	r3, [r7, #10]
       can2_amk1_setpoints_1_rx_callback(&amk1_setpoints_1);
 80139dc:	1d3b      	adds	r3, r7, #4
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fc f80b 	bl	800f9fa <can2_amk1_setpoints_1_rx_callback>
       can2_amk1_setpoints_1_flag = 0;
 80139e4:	4b03      	ldr	r3, [pc, #12]	; (80139f4 <can2_amk1_setpoints_1_receive+0xf0>)
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]
   }
}
 80139ea:	bf00      	nop
 80139ec:	3710      	adds	r7, #16
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	2000162a 	.word	0x2000162a
 80139f8:	200015f0 	.word	0x200015f0

080139fc <can2_ivt_msg_result_i_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_receive() {
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_i_flag) {
 8013a02:	4b0e      	ldr	r3, [pc, #56]	; (8013a3c <can2_ivt_msg_result_i_receive+0x40>)
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d013      	beq.n	8013a32 <can2_ivt_msg_result_i_receive+0x36>
       ivt_msg_result_i_t ivt_msg_result_i;
       ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_decode(can2_ivt_msg_result_i.i_ts);
 8013a0a:	4b0d      	ldr	r3, [pc, #52]	; (8013a40 <can2_ivt_msg_result_i_receive+0x44>)
 8013a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a10:	4610      	mov	r0, r2
 8013a12:	4619      	mov	r1, r3
 8013a14:	f7fb fa9c 	bl	800ef50 <can2_ivt_msg_result_i_i_ts_decode>
 8013a18:	eeb0 7a40 	vmov.f32	s14, s0
 8013a1c:	eef0 7a60 	vmov.f32	s15, s1
 8013a20:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_i_rx_callback(&ivt_msg_result_i);
 8013a24:	463b      	mov	r3, r7
 8013a26:	4618      	mov	r0, r3
 8013a28:	f001 fb5c 	bl	80150e4 <can2_ivt_msg_result_i_rx_callback>
       can2_ivt_msg_result_i_flag = 0;
 8013a2c:	4b03      	ldr	r3, [pc, #12]	; (8013a3c <can2_ivt_msg_result_i_receive+0x40>)
 8013a2e:	2200      	movs	r2, #0
 8013a30:	701a      	strb	r2, [r3, #0]
   }
}
 8013a32:	bf00      	nop
 8013a34:	3708      	adds	r7, #8
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	2000162b 	.word	0x2000162b
 8013a40:	20001600 	.word	0x20001600

08013a44 <can2_ivt_msg_result_u1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_receive() {
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u1_flag) {
 8013a4a:	4b0e      	ldr	r3, [pc, #56]	; (8013a84 <can2_ivt_msg_result_u1_receive+0x40>)
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d013      	beq.n	8013a7a <can2_ivt_msg_result_u1_receive+0x36>
       ivt_msg_result_u1_t ivt_msg_result_u1;
       ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_decode(can2_ivt_msg_result_u1.u_cells);
 8013a52:	4b0d      	ldr	r3, [pc, #52]	; (8013a88 <can2_ivt_msg_result_u1_receive+0x44>)
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	4610      	mov	r0, r2
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	f7fb fbc8 	bl	800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>
 8013a60:	eeb0 7a40 	vmov.f32	s14, s0
 8013a64:	eef0 7a60 	vmov.f32	s15, s1
 8013a68:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u1_rx_callback(&ivt_msg_result_u1);
 8013a6c:	463b      	mov	r3, r7
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 fb5a 	bl	8015128 <can2_ivt_msg_result_u1_rx_callback>
       can2_ivt_msg_result_u1_flag = 0;
 8013a74:	4b03      	ldr	r3, [pc, #12]	; (8013a84 <can2_ivt_msg_result_u1_receive+0x40>)
 8013a76:	2200      	movs	r2, #0
 8013a78:	701a      	strb	r2, [r3, #0]
   }
}
 8013a7a:	bf00      	nop
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	2000162c 	.word	0x2000162c
 8013a88:	20001608 	.word	0x20001608

08013a8c <can2_ivt_msg_result_u3_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_receive() {
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u3_flag) {
 8013a92:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <can2_ivt_msg_result_u3_receive+0x40>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d013      	beq.n	8013ac2 <can2_ivt_msg_result_u3_receive+0x36>
       ivt_msg_result_u3_t ivt_msg_result_u3;
       ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_decode(can2_ivt_msg_result_u3.u_vehicle);
 8013a9a:	4b0d      	ldr	r3, [pc, #52]	; (8013ad0 <can2_ivt_msg_result_u3_receive+0x44>)
 8013a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa0:	4610      	mov	r0, r2
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	f7fb fcf4 	bl	800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>
 8013aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8013aac:	eef0 7a60 	vmov.f32	s15, s1
 8013ab0:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u3_rx_callback(&ivt_msg_result_u3);
 8013ab4:	463b      	mov	r3, r7
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f001 fb58 	bl	801516c <can2_ivt_msg_result_u3_rx_callback>
       can2_ivt_msg_result_u3_flag = 0;
 8013abc:	4b03      	ldr	r3, [pc, #12]	; (8013acc <can2_ivt_msg_result_u3_receive+0x40>)
 8013abe:	2200      	movs	r2, #0
 8013ac0:	701a      	strb	r2, [r3, #0]
   }
}
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop
 8013acc:	2000162d 	.word	0x2000162d
 8013ad0:	20001610 	.word	0x20001610

08013ad4 <can2_charger_config_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_receive() {
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08c      	sub	sp, #48	; 0x30
 8013ad8:	af00      	add	r7, sp, #0
   if(can2_charger_config_flag) {
 8013ada:	4b26      	ldr	r3, [pc, #152]	; (8013b74 <can2_charger_config_receive+0xa0>)
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d043      	beq.n	8013b6a <can2_charger_config_receive+0x96>
       charger_config_t charger_config;
       charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_decode(can2_charger_config.msg_set_voltage_limit);
 8013ae2:	4b25      	ldr	r3, [pc, #148]	; (8013b78 <can2_charger_config_receive+0xa4>)
 8013ae4:	885b      	ldrh	r3, [r3, #2]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7fb fe76 	bl	800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>
 8013aec:	eeb0 7a40 	vmov.f32	s14, s0
 8013af0:	eef0 7a60 	vmov.f32	s15, s1
 8013af4:	ed87 7b08 	vstr	d7, [r7, #32]
       charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_decode(can2_charger_config.msg_set_current_limit);
 8013af8:	4b1f      	ldr	r3, [pc, #124]	; (8013b78 <can2_charger_config_receive+0xa4>)
 8013afa:	889b      	ldrh	r3, [r3, #4]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fb fe9b 	bl	800f838 <can2_charger_config_msg_set_current_limit_decode>
 8013b02:	eeb0 7a40 	vmov.f32	s14, s0
 8013b06:	eef0 7a60 	vmov.f32	s15, s1
 8013b0a:	ed87 7b00 	vstr	d7, [r7]
       charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_decode(can2_charger_config.msg_set_power_limit);
 8013b0e:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <can2_charger_config_receive+0xa4>)
 8013b10:	88db      	ldrh	r3, [r3, #6]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fb febf 	bl	800f896 <can2_charger_config_msg_set_power_limit_decode>
 8013b18:	eeb0 7a40 	vmov.f32	s14, s0
 8013b1c:	eef0 7a60 	vmov.f32	s15, s1
 8013b20:	ed87 7b04 	vstr	d7, [r7, #16]
       charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_decode(can2_charger_config.msg_set_enabled);
 8013b24:	4b14      	ldr	r3, [pc, #80]	; (8013b78 <can2_charger_config_receive+0xa4>)
 8013b26:	7a1b      	ldrb	r3, [r3, #8]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7fb fed7 	bl	800f8dc <can2_charger_config_msg_set_enabled_decode>
 8013b2e:	ec53 2b10 	vmov	r2, r3, d0
 8013b32:	4610      	mov	r0, r2
 8013b34:	4619      	mov	r1, r3
 8013b36:	f7ed f829 	bl	8000b8c <__aeabi_d2uiz>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	723b      	strb	r3, [r7, #8]
       charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_decode(can2_charger_config.msg_set_time_out);
 8013b40:	4b0d      	ldr	r3, [pc, #52]	; (8013b78 <can2_charger_config_receive+0xa4>)
 8013b42:	7a5b      	ldrb	r3, [r3, #9]
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fb feec 	bl	800f922 <can2_charger_config_msg_set_time_out_decode>
 8013b4a:	ec53 2b10 	vmov	r2, r3, d0
 8013b4e:	4610      	mov	r0, r2
 8013b50:	4619      	mov	r1, r3
 8013b52:	f7ed f81b 	bl	8000b8c <__aeabi_d2uiz>
 8013b56:	4603      	mov	r3, r0
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	763b      	strb	r3, [r7, #24]
       can2_charger_config_rx_callback(&charger_config);
 8013b5c:	463b      	mov	r3, r7
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f001 fd0a 	bl	8015578 <can2_charger_config_rx_callback>
       can2_charger_config_flag = 0;
 8013b64:	4b03      	ldr	r3, [pc, #12]	; (8013b74 <can2_charger_config_receive+0xa0>)
 8013b66:	2200      	movs	r2, #0
 8013b68:	701a      	strb	r2, [r3, #0]
   }
}
 8013b6a:	bf00      	nop
 8013b6c:	3730      	adds	r7, #48	; 0x30
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	2000162e 	.word	0x2000162e
 8013b78:	20001618 	.word	0x20001618

08013b7c <can2_cc_status_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_receive() {
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
   if(can2_cc_status_flag) {
 8013b82:	4b0e      	ldr	r3, [pc, #56]	; (8013bbc <can2_cc_status_receive+0x40>)
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d014      	beq.n	8013bb4 <can2_cc_status_receive+0x38>
       cc_status_t cc_status;
       cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_decode(can2_cc_status.enable_ams_charging);
 8013b8a:	4b0d      	ldr	r3, [pc, #52]	; (8013bc0 <can2_cc_status_receive+0x44>)
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fb fef7 	bl	800f982 <can2_cc_status_enable_ams_charging_decode>
 8013b94:	ec53 2b10 	vmov	r2, r3, d0
 8013b98:	4610      	mov	r0, r2
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	f7ec fff6 	bl	8000b8c <__aeabi_d2uiz>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	713b      	strb	r3, [r7, #4]
       can2_cc_status_rx_callback(&cc_status);
 8013ba6:	1d3b      	adds	r3, r7, #4
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f001 fb01 	bl	80151b0 <can2_cc_status_rx_callback>
       can2_cc_status_flag = 0;
 8013bae:	4b03      	ldr	r3, [pc, #12]	; (8013bbc <can2_cc_status_receive+0x40>)
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	701a      	strb	r2, [r3, #0]
   }
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	2000162f 	.word	0x2000162f
 8013bc0:	20001624 	.word	0x20001624

08013bc4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08a      	sub	sp, #40	; 0x28
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8013bcc:	f107 020c 	add.w	r2, r7, #12
 8013bd0:	4b53      	ldr	r3, [pc, #332]	; (8013d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f011 fe93 	bl	8025900 <HAL_CAN_GetRxMessage>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f040 809a 	bne.w	8013d16 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f240 5224 	movw	r2, #1316	; 0x524
 8013be8:	4293      	cmp	r3, r2
 8013bea:	f000 808b 	beq.w	8013d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
 8013bee:	f240 5224 	movw	r2, #1316	; 0x524
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	f200 8090 	bhi.w	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013bf8:	f240 5222 	movw	r2, #1314	; 0x522
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d07e      	beq.n	8013cfe <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8013c00:	f240 5222 	movw	r2, #1314	; 0x522
 8013c04:	4293      	cmp	r3, r2
 8013c06:	f200 8087 	bhi.w	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c0a:	f240 5221 	movw	r2, #1313	; 0x521
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d072      	beq.n	8013cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8013c12:	f240 5221 	movw	r2, #1313	; 0x521
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d87e      	bhi.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c1a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013c1e:	d074      	beq.n	8013d0a <HAL_CAN_RxFifo0MsgPendingCallback+0x146>
 8013c20:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013c24:	d878      	bhi.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c26:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c2a:	d071      	beq.n	8013d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
 8013c2c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c30:	d872      	bhi.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c32:	2b40      	cmp	r3, #64	; 0x40
 8013c34:	d84a      	bhi.n	8013ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 8013c36:	2b20      	cmp	r3, #32
 8013c38:	d36e      	bcc.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c3a:	3b20      	subs	r3, #32
 8013c3c:	2b20      	cmp	r3, #32
 8013c3e:	d86b      	bhi.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c40:	a201      	add	r2, pc, #4	; (adr r2, 8013c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8013c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c46:	bf00      	nop
 8013c48:	08013cd5 	.word	0x08013cd5
 8013c4c:	08013ce7 	.word	0x08013ce7
 8013c50:	08013ced 	.word	0x08013ced
 8013c54:	08013ce1 	.word	0x08013ce1
 8013c58:	08013d19 	.word	0x08013d19
 8013c5c:	08013d19 	.word	0x08013d19
 8013c60:	08013d19 	.word	0x08013d19
 8013c64:	08013d19 	.word	0x08013d19
 8013c68:	08013d19 	.word	0x08013d19
 8013c6c:	08013d19 	.word	0x08013d19
 8013c70:	08013d19 	.word	0x08013d19
 8013c74:	08013d19 	.word	0x08013d19
 8013c78:	08013d19 	.word	0x08013d19
 8013c7c:	08013d19 	.word	0x08013d19
 8013c80:	08013d19 	.word	0x08013d19
 8013c84:	08013d19 	.word	0x08013d19
 8013c88:	08013d19 	.word	0x08013d19
 8013c8c:	08013d19 	.word	0x08013d19
 8013c90:	08013d19 	.word	0x08013d19
 8013c94:	08013d19 	.word	0x08013d19
 8013c98:	08013d19 	.word	0x08013d19
 8013c9c:	08013d19 	.word	0x08013d19
 8013ca0:	08013d19 	.word	0x08013d19
 8013ca4:	08013d19 	.word	0x08013d19
 8013ca8:	08013d19 	.word	0x08013d19
 8013cac:	08013d19 	.word	0x08013d19
 8013cb0:	08013d19 	.word	0x08013d19
 8013cb4:	08013d19 	.word	0x08013d19
 8013cb8:	08013d19 	.word	0x08013d19
 8013cbc:	08013d19 	.word	0x08013d19
 8013cc0:	08013d19 	.word	0x08013d19
 8013cc4:	08013d19 	.word	0x08013d19
 8013cc8:	08013cdb 	.word	0x08013cdb
 8013ccc:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013cd0:	d00f      	beq.n	8013cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013cd2:	e021      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8013cd4:	f7fb ffac 	bl	800fc30 <can1_ams_status_1_decode>
               break;
 8013cd8:	e01e      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8013cda:	f7fb ffbd 	bl	800fc58 <can1_dbu_status_1_decode>
               break;
 8013cde:	e01b      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 8013ce0:	f7fb ffce 	bl	800fc80 <can1_ams_temperatures_decode>
               break;
 8013ce4:	e018      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8013ce6:	f7fb ffdf 	bl	800fca8 <can1_ams_cell_voltages_decode>
               break;
 8013cea:	e015      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8013cec:	f7fb fff0 	bl	800fcd0 <can1_ams_cell_temperatures_decode>
               break;
 8013cf0:	e012      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 8013cf2:	f7fc f801 	bl	800fcf8 <can2_amk1_setpoints_1_decode>
               break;
 8013cf6:	e00f      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8013cf8:	f7fc f812 	bl	800fd20 <can2_ivt_msg_result_i_decode>
               break;
 8013cfc:	e00c      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 8013cfe:	f7fc f823 	bl	800fd48 <can2_ivt_msg_result_u1_decode>
               break;
 8013d02:	e009      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 8013d04:	f7fc f834 	bl	800fd70 <can2_ivt_msg_result_u3_decode>
               break;
 8013d08:	e006      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_charger_config_decode();
 8013d0a:	f7fc f845 	bl	800fd98 <can2_charger_config_decode>
               break;
 8013d0e:	e003      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_cc_status_decode();
 8013d10:	f7fc f856 	bl	800fdc0 <can2_cc_status_decode>
               break;
 8013d14:	e000      	b.n	8013d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
    }
 8013d16:	bf00      	nop
}
 8013d18:	bf00      	nop
 8013d1a:	3728      	adds	r7, #40	; 0x28
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	2000164c 	.word	0x2000164c

08013d24 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b08a      	sub	sp, #40	; 0x28
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8013d2c:	f107 020c 	add.w	r2, r7, #12
 8013d30:	4b53      	ldr	r3, [pc, #332]	; (8013e80 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8013d32:	2101      	movs	r1, #1
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f011 fde3 	bl	8025900 <HAL_CAN_GetRxMessage>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	f040 809a 	bne.w	8013e76 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f240 5224 	movw	r2, #1316	; 0x524
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	f000 808b 	beq.w	8013e64 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>
 8013d4e:	f240 5224 	movw	r2, #1316	; 0x524
 8013d52:	4293      	cmp	r3, r2
 8013d54:	f200 8090 	bhi.w	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d58:	f240 5222 	movw	r2, #1314	; 0x522
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d07e      	beq.n	8013e5e <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 8013d60:	f240 5222 	movw	r2, #1314	; 0x522
 8013d64:	4293      	cmp	r3, r2
 8013d66:	f200 8087 	bhi.w	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d6a:	f240 5221 	movw	r2, #1313	; 0x521
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d072      	beq.n	8013e58 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
 8013d72:	f240 5221 	movw	r2, #1313	; 0x521
 8013d76:	4293      	cmp	r3, r2
 8013d78:	d87e      	bhi.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d7a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013d7e:	d074      	beq.n	8013e6a <HAL_CAN_RxFifo1MsgPendingCallback+0x146>
 8013d80:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013d84:	d878      	bhi.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d86:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013d8a:	d071      	beq.n	8013e70 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>
 8013d8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013d90:	d872      	bhi.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d92:	2b40      	cmp	r3, #64	; 0x40
 8013d94:	d84a      	bhi.n	8013e2c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>
 8013d96:	2b20      	cmp	r3, #32
 8013d98:	d36e      	bcc.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013d9a:	3b20      	subs	r3, #32
 8013d9c:	2b20      	cmp	r3, #32
 8013d9e:	d86b      	bhi.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013da0:	a201      	add	r2, pc, #4	; (adr r2, 8013da8 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8013da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013da6:	bf00      	nop
 8013da8:	08013e35 	.word	0x08013e35
 8013dac:	08013e47 	.word	0x08013e47
 8013db0:	08013e4d 	.word	0x08013e4d
 8013db4:	08013e41 	.word	0x08013e41
 8013db8:	08013e79 	.word	0x08013e79
 8013dbc:	08013e79 	.word	0x08013e79
 8013dc0:	08013e79 	.word	0x08013e79
 8013dc4:	08013e79 	.word	0x08013e79
 8013dc8:	08013e79 	.word	0x08013e79
 8013dcc:	08013e79 	.word	0x08013e79
 8013dd0:	08013e79 	.word	0x08013e79
 8013dd4:	08013e79 	.word	0x08013e79
 8013dd8:	08013e79 	.word	0x08013e79
 8013ddc:	08013e79 	.word	0x08013e79
 8013de0:	08013e79 	.word	0x08013e79
 8013de4:	08013e79 	.word	0x08013e79
 8013de8:	08013e79 	.word	0x08013e79
 8013dec:	08013e79 	.word	0x08013e79
 8013df0:	08013e79 	.word	0x08013e79
 8013df4:	08013e79 	.word	0x08013e79
 8013df8:	08013e79 	.word	0x08013e79
 8013dfc:	08013e79 	.word	0x08013e79
 8013e00:	08013e79 	.word	0x08013e79
 8013e04:	08013e79 	.word	0x08013e79
 8013e08:	08013e79 	.word	0x08013e79
 8013e0c:	08013e79 	.word	0x08013e79
 8013e10:	08013e79 	.word	0x08013e79
 8013e14:	08013e79 	.word	0x08013e79
 8013e18:	08013e79 	.word	0x08013e79
 8013e1c:	08013e79 	.word	0x08013e79
 8013e20:	08013e79 	.word	0x08013e79
 8013e24:	08013e79 	.word	0x08013e79
 8013e28:	08013e3b 	.word	0x08013e3b
 8013e2c:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013e30:	d00f      	beq.n	8013e52 <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013e32:	e021      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8013e34:	f7fb fefc 	bl	800fc30 <can1_ams_status_1_decode>
               break;
 8013e38:	e01e      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8013e3a:	f7fb ff0d 	bl	800fc58 <can1_dbu_status_1_decode>
               break;
 8013e3e:	e01b      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 8013e40:	f7fb ff1e 	bl	800fc80 <can1_ams_temperatures_decode>
               break;
 8013e44:	e018      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8013e46:	f7fb ff2f 	bl	800fca8 <can1_ams_cell_voltages_decode>
               break;
 8013e4a:	e015      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8013e4c:	f7fb ff40 	bl	800fcd0 <can1_ams_cell_temperatures_decode>
               break;
 8013e50:	e012      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 8013e52:	f7fb ff51 	bl	800fcf8 <can2_amk1_setpoints_1_decode>
               break;
 8013e56:	e00f      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8013e58:	f7fb ff62 	bl	800fd20 <can2_ivt_msg_result_i_decode>
               break;
 8013e5c:	e00c      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 8013e5e:	f7fb ff73 	bl	800fd48 <can2_ivt_msg_result_u1_decode>
               break;
 8013e62:	e009      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 8013e64:	f7fb ff84 	bl	800fd70 <can2_ivt_msg_result_u3_decode>
               break;
 8013e68:	e006      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_charger_config_decode();
 8013e6a:	f7fb ff95 	bl	800fd98 <can2_charger_config_decode>
               break;
 8013e6e:	e003      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_cc_status_decode();
 8013e70:	f7fb ffa6 	bl	800fdc0 <can2_cc_status_decode>
               break;
 8013e74:	e000      	b.n	8013e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
    }
 8013e76:	bf00      	nop
}
 8013e78:	bf00      	nop
 8013e7a:	3728      	adds	r7, #40	; 0x28
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	20001654 	.word	0x20001654

08013e84 <simple_filter>:

void simple_filter() {
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b08a      	sub	sp, #40	; 0x28
 8013e88:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   
   filter_config.FilterActivation = ENABLE;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	623b      	str	r3, [r7, #32]
   filter_config.FilterBank = 0;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	617b      	str	r3, [r7, #20]
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	61bb      	str	r3, [r7, #24]
   filter_config.FilterIdHigh = 0x0000;
 8013e96:	2300      	movs	r3, #0
 8013e98:	603b      	str	r3, [r7, #0]
   filter_config.FilterIdLow = 0x0000;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	607b      	str	r3, [r7, #4]
   filter_config.FilterMaskIdHigh = 0x0000;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	60bb      	str	r3, [r7, #8]
   filter_config.FilterMaskIdLow = 0x0000;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	60fb      	str	r3, [r7, #12]
   filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	61fb      	str	r3, [r7, #28]

   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013eae:	4b1d      	ldr	r3, [pc, #116]	; (8013f24 <simple_filter+0xa0>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	463a      	mov	r2, r7
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f011 faac 	bl	8025414 <HAL_CAN_ConfigFilter>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d001      	beq.n	8013ec6 <simple_filter+0x42>
       Error_Handler();
 8013ec2:	f003 f8ab 	bl	801701c <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013eca:	4b16      	ldr	r3, [pc, #88]	; (8013f24 <simple_filter+0xa0>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	463a      	mov	r2, r7
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f011 fa9e 	bl	8025414 <HAL_CAN_ConfigFilter>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d001      	beq.n	8013ee2 <simple_filter+0x5e>
       Error_Handler();
 8013ede:	f003 f89d 	bl	801701c <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013ee6:	4b10      	ldr	r3, [pc, #64]	; (8013f28 <simple_filter+0xa4>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	463a      	mov	r2, r7
 8013eec:	4611      	mov	r1, r2
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f011 fa90 	bl	8025414 <HAL_CAN_ConfigFilter>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d001      	beq.n	8013efe <simple_filter+0x7a>
       Error_Handler();
 8013efa:	f003 f88f 	bl	801701c <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013efe:	2301      	movs	r3, #1
 8013f00:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013f02:	4b09      	ldr	r3, [pc, #36]	; (8013f28 <simple_filter+0xa4>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	463a      	mov	r2, r7
 8013f08:	4611      	mov	r1, r2
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f011 fa82 	bl	8025414 <HAL_CAN_ConfigFilter>
 8013f10:	4603      	mov	r3, r0
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d001      	beq.n	8013f1a <simple_filter+0x96>
       Error_Handler();
 8013f16:	f003 f881 	bl	801701c <Error_Handler>
   }


}
 8013f1a:	bf00      	nop
 8013f1c:	3728      	adds	r7, #40	; 0x28
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	20001630 	.word	0x20001630
 8013f28:	20001634 	.word	0x20001634

08013f2c <initialize_CAN>:

void initialize_CAN(CAN_HandleTypeDef* __hcan1, CAN_HandleTypeDef* __hcan2) {
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	6039      	str	r1, [r7, #0]
   _hcan1 = __hcan1;
 8013f36:	4a25      	ldr	r2, [pc, #148]	; (8013fcc <initialize_CAN+0xa0>)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan1) != HAL_OK) {
 8013f3c:	4b23      	ldr	r3, [pc, #140]	; (8013fcc <initialize_CAN+0xa0>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4618      	mov	r0, r3
 8013f42:	f011 fb47 	bl	80255d4 <HAL_CAN_Start>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <initialize_CAN+0x24>
       Error_Handler();
 8013f4c:	f003 f866 	bl	801701c <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan1) != HAL_OK) {
 8013f50:	4b1e      	ldr	r3, [pc, #120]	; (8013fcc <initialize_CAN+0xa0>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f011 fb81 	bl	802565c <HAL_CAN_WakeUp>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <initialize_CAN+0x38>
       Error_Handler();
 8013f60:	f003 f85c 	bl	801701c <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8013f64:	4b19      	ldr	r3, [pc, #100]	; (8013fcc <initialize_CAN+0xa0>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2112      	movs	r1, #18
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f011 fdda 	bl	8025b24 <HAL_CAN_ActivateNotification>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <initialize_CAN+0x4e>
       Error_Handler();
 8013f76:	f003 f851 	bl	801701c <Error_Handler>
   }

   _hcan2 = __hcan2;
 8013f7a:	4a15      	ldr	r2, [pc, #84]	; (8013fd0 <initialize_CAN+0xa4>)
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan2) != HAL_OK) {
 8013f80:	4b13      	ldr	r3, [pc, #76]	; (8013fd0 <initialize_CAN+0xa4>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f011 fb25 	bl	80255d4 <HAL_CAN_Start>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d001      	beq.n	8013f94 <initialize_CAN+0x68>
       Error_Handler();
 8013f90:	f003 f844 	bl	801701c <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan2) != HAL_OK) {
 8013f94:	4b0e      	ldr	r3, [pc, #56]	; (8013fd0 <initialize_CAN+0xa4>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f011 fb5f 	bl	802565c <HAL_CAN_WakeUp>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d001      	beq.n	8013fa8 <initialize_CAN+0x7c>
       Error_Handler();
 8013fa4:	f003 f83a 	bl	801701c <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8013fa8:	4b09      	ldr	r3, [pc, #36]	; (8013fd0 <initialize_CAN+0xa4>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2112      	movs	r1, #18
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f011 fdb8 	bl	8025b24 <HAL_CAN_ActivateNotification>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <initialize_CAN+0x92>
       Error_Handler();
 8013fba:	f003 f82f 	bl	801701c <Error_Handler>
   }


   simple_filter();
 8013fbe:	f7ff ff61 	bl	8013e84 <simple_filter>

}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	20001630 	.word	0x20001630
 8013fd0:	20001634 	.word	0x20001634

08013fd4 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	6039      	str	r1, [r7, #0]
 8013fde:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d006      	beq.n	8013ff4 <inc_res+0x20>
		ptr[0]++;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	3301      	adds	r3, #1
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8013ff2:	e002      	b.n	8013ffa <inc_res+0x26>
		ptr[0] = 0;
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	701a      	strb	r2, [r3, #0]
}
 8013ffa:	bf00      	nop
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
	...

08014008 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 8014008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801400a:	b087      	sub	sp, #28
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	460b      	mov	r3, r1
 8014012:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 8014014:	4b2e      	ldr	r3, [pc, #184]	; (80140d0 <COM_voltages_ok+0xc8>)
 8014016:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8014018:	4b2e      	ldr	r3, [pc, #184]	; (80140d4 <COM_voltages_ok+0xcc>)
 801401a:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 801401c:	2300      	movs	r3, #0
 801401e:	617b      	str	r3, [r7, #20]
 8014020:	e04d      	b.n	80140be <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	00db      	lsls	r3, r3, #3
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	4413      	add	r3, r2
 801402a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801402e:	6938      	ldr	r0, [r7, #16]
 8014030:	f7ec fa7c 	bl	800052c <__aeabi_f2d>
 8014034:	4602      	mov	r2, r0
 8014036:	460b      	mov	r3, r1
 8014038:	2101      	movs	r1, #1
 801403a:	460e      	mov	r6, r1
 801403c:	4620      	mov	r0, r4
 801403e:	4629      	mov	r1, r5
 8014040:	f7ec fd5c 	bl	8000afc <__aeabi_dcmpgt>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d101      	bne.n	801404e <COM_voltages_ok+0x46>
 801404a:	2300      	movs	r3, #0
 801404c:	461e      	mov	r6, r3
 801404e:	b2f3      	uxtb	r3, r6
 8014050:	4618      	mov	r0, r3
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	4a20      	ldr	r2, [pc, #128]	; (80140d8 <COM_voltages_ok+0xd0>)
 8014056:	4413      	add	r3, r2
 8014058:	4619      	mov	r1, r3
 801405a:	f7ff ffbb 	bl	8013fd4 <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 801405e:	68f8      	ldr	r0, [r7, #12]
 8014060:	f7ec fa64 	bl	800052c <__aeabi_f2d>
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	00db      	lsls	r3, r3, #3
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	4413      	add	r3, r2
 801406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014070:	2401      	movs	r4, #1
 8014072:	f7ec fd43 	bl	8000afc <__aeabi_dcmpgt>
 8014076:	4603      	mov	r3, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <COM_voltages_ok+0x78>
 801407c:	2300      	movs	r3, #0
 801407e:	461c      	mov	r4, r3
 8014080:	b2e3      	uxtb	r3, r4
 8014082:	4618      	mov	r0, r3
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	4a15      	ldr	r2, [pc, #84]	; (80140dc <COM_voltages_ok+0xd4>)
 8014088:	4413      	add	r3, r2
 801408a:	4619      	mov	r1, r3
 801408c:	f7ff ffa2 	bl	8013fd4 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 8014090:	4a11      	ldr	r2, [pc, #68]	; (80140d8 <COM_voltages_ok+0xd0>)
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	4413      	add	r3, r2
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	b29b      	uxth	r3, r3
 801409a:	887a      	ldrh	r2, [r7, #2]
 801409c:	429a      	cmp	r2, r3
 801409e:	d201      	bcs.n	80140a4 <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 80140a0:	2316      	movs	r3, #22
 80140a2:	e010      	b.n	80140c6 <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 80140a4:	4a0d      	ldr	r2, [pc, #52]	; (80140dc <COM_voltages_ok+0xd4>)
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	4413      	add	r3, r2
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	887a      	ldrh	r2, [r7, #2]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d201      	bcs.n	80140b8 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 80140b4:	2315      	movs	r3, #21
 80140b6:	e006      	b.n	80140c6 <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	3301      	adds	r3, #1
 80140bc:	617b      	str	r3, [r7, #20]
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	2b7d      	cmp	r3, #125	; 0x7d
 80140c2:	ddae      	ble.n	8014022 <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 80140c4:	2300      	movs	r3, #0

}
 80140c6:	4618      	mov	r0, r3
 80140c8:	371c      	adds	r7, #28
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ce:	bf00      	nop
 80140d0:	4086147b 	.word	0x4086147b
 80140d4:	4033d70a 	.word	0x4033d70a
 80140d8:	2000165c 	.word	0x2000165c
 80140dc:	200016dc 	.word	0x200016dc

080140e0 <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 80140e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	460b      	mov	r3, r1
 80140ea:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 80140ec:	4b2e      	ldr	r3, [pc, #184]	; (80141a8 <COM_temperatures_ok+0xc8>)
 80140ee:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80140f0:	4b2e      	ldr	r3, [pc, #184]	; (80141ac <COM_temperatures_ok+0xcc>)
 80140f2:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80140f4:	2300      	movs	r3, #0
 80140f6:	617b      	str	r3, [r7, #20]
 80140f8:	e04d      	b.n	8014196 <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	4413      	add	r3, r2
 8014102:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014106:	6938      	ldr	r0, [r7, #16]
 8014108:	f7ec fa10 	bl	800052c <__aeabi_f2d>
 801410c:	4602      	mov	r2, r0
 801410e:	460b      	mov	r3, r1
 8014110:	2101      	movs	r1, #1
 8014112:	460e      	mov	r6, r1
 8014114:	4620      	mov	r0, r4
 8014116:	4629      	mov	r1, r5
 8014118:	f7ec fcf0 	bl	8000afc <__aeabi_dcmpgt>
 801411c:	4603      	mov	r3, r0
 801411e:	2b00      	cmp	r3, #0
 8014120:	d101      	bne.n	8014126 <COM_temperatures_ok+0x46>
 8014122:	2300      	movs	r3, #0
 8014124:	461e      	mov	r6, r3
 8014126:	b2f3      	uxtb	r3, r6
 8014128:	4618      	mov	r0, r3
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	4a20      	ldr	r2, [pc, #128]	; (80141b0 <COM_temperatures_ok+0xd0>)
 801412e:	4413      	add	r3, r2
 8014130:	4619      	mov	r1, r3
 8014132:	f7ff ff4f 	bl	8013fd4 <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f7ec f9f8 	bl	800052c <__aeabi_f2d>
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	4413      	add	r3, r2
 8014144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014148:	2401      	movs	r4, #1
 801414a:	f7ec fcd7 	bl	8000afc <__aeabi_dcmpgt>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <COM_temperatures_ok+0x78>
 8014154:	2300      	movs	r3, #0
 8014156:	461c      	mov	r4, r3
 8014158:	b2e3      	uxtb	r3, r4
 801415a:	4618      	mov	r0, r3
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	4a15      	ldr	r2, [pc, #84]	; (80141b4 <COM_temperatures_ok+0xd4>)
 8014160:	4413      	add	r3, r2
 8014162:	4619      	mov	r1, r3
 8014164:	f7ff ff36 	bl	8013fd4 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8014168:	4a11      	ldr	r2, [pc, #68]	; (80141b0 <COM_temperatures_ok+0xd0>)
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	4413      	add	r3, r2
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	b29b      	uxth	r3, r3
 8014172:	887a      	ldrh	r2, [r7, #2]
 8014174:	429a      	cmp	r2, r3
 8014176:	d201      	bcs.n	801417c <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8014178:	2318      	movs	r3, #24
 801417a:	e010      	b.n	801419e <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 801417c:	4a0d      	ldr	r2, [pc, #52]	; (80141b4 <COM_temperatures_ok+0xd4>)
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	4413      	add	r3, r2
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	b29b      	uxth	r3, r3
 8014186:	887a      	ldrh	r2, [r7, #2]
 8014188:	429a      	cmp	r2, r3
 801418a:	d201      	bcs.n	8014190 <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 801418c:	2317      	movs	r3, #23
 801418e:	e006      	b.n	801419e <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	3301      	adds	r3, #1
 8014194:	617b      	str	r3, [r7, #20]
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	2b3b      	cmp	r3, #59	; 0x3b
 801419a:	ddae      	ble.n	80140fa <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 801419c:	2300      	movs	r3, #0

}
 801419e:	4618      	mov	r0, r3
 80141a0:	371c      	adds	r7, #28
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141a6:	bf00      	nop
 80141a8:	42700000 	.word	0x42700000
 80141ac:	c1a00000 	.word	0xc1a00000
 80141b0:	2000175c 	.word	0x2000175c
 80141b4:	20001798 	.word	0x20001798

080141b8 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 80141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ba:	b085      	sub	sp, #20
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	460b      	mov	r3, r1
 80141c2:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 80141c4:	4b21      	ldr	r3, [pc, #132]	; (801424c <COM_current_ok+0x94>)
 80141c6:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 80141c8:	4b21      	ldr	r3, [pc, #132]	; (8014250 <COM_current_ok+0x98>)
 80141ca:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7ec f9aa 	bl	800052c <__aeabi_f2d>
 80141d8:	4602      	mov	r2, r0
 80141da:	460b      	mov	r3, r1
 80141dc:	2101      	movs	r1, #1
 80141de:	460e      	mov	r6, r1
 80141e0:	4620      	mov	r0, r4
 80141e2:	4629      	mov	r1, r5
 80141e4:	f7ec fc8a 	bl	8000afc <__aeabi_dcmpgt>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d101      	bne.n	80141f2 <COM_current_ok+0x3a>
 80141ee:	2300      	movs	r3, #0
 80141f0:	461e      	mov	r6, r3
 80141f2:	b2f3      	uxtb	r3, r6
 80141f4:	4917      	ldr	r1, [pc, #92]	; (8014254 <COM_current_ok+0x9c>)
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7ff feec 	bl	8013fd4 <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 80141fc:	68b8      	ldr	r0, [r7, #8]
 80141fe:	f7ec f995 	bl	800052c <__aeabi_f2d>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014208:	2401      	movs	r4, #1
 801420a:	f7ec fc77 	bl	8000afc <__aeabi_dcmpgt>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d101      	bne.n	8014218 <COM_current_ok+0x60>
 8014214:	2300      	movs	r3, #0
 8014216:	461c      	mov	r4, r3
 8014218:	b2e3      	uxtb	r3, r4
 801421a:	490f      	ldr	r1, [pc, #60]	; (8014258 <COM_current_ok+0xa0>)
 801421c:	4618      	mov	r0, r3
 801421e:	f7ff fed9 	bl	8013fd4 <inc_res>

	if (over_current > sample_constraint) {
 8014222:	4b0c      	ldr	r3, [pc, #48]	; (8014254 <COM_current_ok+0x9c>)
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	b29b      	uxth	r3, r3
 8014228:	887a      	ldrh	r2, [r7, #2]
 801422a:	429a      	cmp	r2, r3
 801422c:	d201      	bcs.n	8014232 <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 801422e:	2320      	movs	r3, #32
 8014230:	e008      	b.n	8014244 <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 8014232:	4b09      	ldr	r3, [pc, #36]	; (8014258 <COM_current_ok+0xa0>)
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	b29b      	uxth	r3, r3
 8014238:	887a      	ldrh	r2, [r7, #2]
 801423a:	429a      	cmp	r2, r3
 801423c:	d201      	bcs.n	8014242 <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 801423e:	231f      	movs	r3, #31
 8014240:	e000      	b.n	8014244 <COM_current_ok+0x8c>
	}

	return 0;
 8014242:	2300      	movs	r3, #0

}
 8014244:	4618      	mov	r0, r3
 8014246:	3714      	adds	r7, #20
 8014248:	46bd      	mov	sp, r7
 801424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801424c:	42c80000 	.word	0x42c80000
 8014250:	c2200000 	.word	0xc2200000
 8014254:	200017d4 	.word	0x200017d4
 8014258:	200017d5 	.word	0x200017d5

0801425c <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8014264:	4b10      	ldr	r3, [pc, #64]	; (80142a8 <FAN_initialize+0x4c>)
 8014266:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8014268:	eddf 6a10 	vldr	s13, [pc, #64]	; 80142ac <FAN_initialize+0x50>
 801426c:	ed97 7a03 	vldr	s14, [r7, #12]
 8014270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801427c:	ee17 2a90 	vmov	r2, s15
 8014280:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	0852      	lsrs	r2, r2, #1
 801428e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2200      	movs	r2, #0
 8014296:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8014298:	2108      	movs	r1, #8
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f014 f84e 	bl	802833c <HAL_TIM_PWM_Start>

}
 80142a0:	bf00      	nop
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	447a0000 	.word	0x447a0000
 80142ac:	477fff00 	.word	0x477fff00

080142b0 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 80142bc:	edd7 7a00 	vldr	s15, [r7]
 80142c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c8:	d502      	bpl.n	80142d0 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 80142ca:	f04f 0300 	mov.w	r3, #0
 80142ce:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 80142d0:	edd7 7a00 	vldr	s15, [r7]
 80142d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014328 <FAN_duty_cycle+0x78>
 80142d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	dd01      	ble.n	80142e6 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 80142e2:	4b12      	ldr	r3, [pc, #72]	; (801432c <FAN_duty_cycle+0x7c>)
 80142e4:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 80142e6:	edd7 7a00 	vldr	s15, [r7]
 80142ea:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8014328 <FAN_duty_cycle+0x78>
 80142ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f8:	ee07 3a90 	vmov	s15, r3
 80142fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801430c:	ee17 2a90 	vmov	r2, s15
 8014310:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2200      	movs	r2, #0
 8014318:	625a      	str	r2, [r3, #36]	; 0x24
}
 801431a:	bf00      	nop
 801431c:	370c      	adds	r7, #12
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop
 8014328:	42c80000 	.word	0x42c80000
 801432c:	42c80000 	.word	0x42c80000

08014330 <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8014330:	b580      	push	{r7, lr}
 8014332:	b086      	sub	sp, #24
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8014338:	f04f 0300 	mov.w	r3, #0
 801433c:	617b      	str	r3, [r7, #20]
	float conq = 0;
 801433e:	f04f 0300 	mov.w	r3, #0
 8014342:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014344:	2300      	movs	r3, #0
 8014346:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014350:	d148      	bne.n	80143e4 <HAL_TIM_IC_CaptureCallback+0xb4>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8014352:	2104      	movs	r1, #4
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f014 fe87 	bl	8029068 <HAL_TIM_ReadCapturedValue>
 801435a:	ee07 0a90 	vmov	s15, r0
 801435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014362:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8014366:	2100      	movs	r1, #0
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f014 fe7d 	bl	8029068 <HAL_TIM_ReadCapturedValue>
 801436e:	ee07 0a90 	vmov	s15, r0
 8014372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014376:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 801437a:	ed97 7a05 	vldr	s14, [r7, #20]
 801437e:	edd7 7a04 	vldr	s15, [r7, #16]
 8014382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014386:	ee16 0a90 	vmov	r0, s13
 801438a:	f7ec f8cf 	bl	800052c <__aeabi_f2d>
 801438e:	4602      	mov	r2, r0
 8014390:	460b      	mov	r3, r1
 8014392:	4916      	ldr	r1, [pc, #88]	; (80143ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 8014394:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 8014398:	edd7 7a04 	vldr	s15, [r7, #16]
 801439c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80143a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143a4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80143f0 <HAL_TIM_IC_CaptureCallback+0xc0>
 80143a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80143ac:	ee16 0a90 	vmov	r0, s13
 80143b0:	f7ec f8bc 	bl	800052c <__aeabi_f2d>
 80143b4:	4602      	mov	r2, r0
 80143b6:	460b      	mov	r3, r1
 80143b8:	490c      	ldr	r1, [pc, #48]	; (80143ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 80143ba:	e9c1 2302 	strd	r2, r3, [r1, #8]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 80143be:	4b0d      	ldr	r3, [pc, #52]	; (80143f4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80143c0:	6818      	ldr	r0, [r3, #0]
 80143c2:	f107 020c 	add.w	r2, r7, #12
 80143c6:	2302      	movs	r3, #2
 80143c8:	4908      	ldr	r1, [pc, #32]	; (80143ec <HAL_TIM_IC_CaptureCallback+0xbc>)
 80143ca:	f016 f92d 	bl	802a628 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d007      	beq.n	80143e4 <HAL_TIM_IC_CaptureCallback+0xb4>
 80143d4:	4b08      	ldr	r3, [pc, #32]	; (80143f8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80143d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143da:	601a      	str	r2, [r3, #0]
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	f3bf 8f6f 	isb	sy
	}
}
 80143e4:	bf00      	nop
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	200017d8 	.word	0x200017d8
 80143f0:	4cbebc20 	.word	0x4cbebc20
 80143f4:	2001b734 	.word	0x2001b734
 80143f8:	e000ed04 	.word	0xe000ed04

080143fc <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4a0b      	ldr	r2, [pc, #44]	; (8014438 <initialize_IMD+0x3c>)
 801440a:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 801440c:	2100      	movs	r1, #0
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f014 f992 	bl	8028738 <HAL_TIM_IC_Start_IT>
 8014414:	4603      	mov	r3, r0
 8014416:	2b00      	cmp	r3, #0
 8014418:	d001      	beq.n	801441e <initialize_IMD+0x22>
		Error_Handler();
 801441a:	f002 fdff 	bl	801701c <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 801441e:	2104      	movs	r1, #4
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f014 f8ad 	bl	8028580 <HAL_TIM_IC_Start>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d001      	beq.n	8014430 <initialize_IMD+0x34>
		Error_Handler();
 801442c:	f002 fdf6 	bl	801701c <Error_Handler>
	}
}
 8014430:	bf00      	nop
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}
 8014438:	0280de80 	.word	0x0280de80

0801443c <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 801443c:	b480      	push	{r7}
 801443e:	b087      	sub	sp, #28
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	683a      	ldr	r2, [r7, #0]
 801444c:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	ed93 7a01 	vldr	s14, [r3, #4]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	edd3 7a03 	vldr	s15, [r3, #12]
 801445a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f103 0218 	add.w	r2, r3, #24
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	617a      	str	r2, [r7, #20]
 8014470:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	ed93 7a00 	vldr	s14, [r3]
 8014478:	edd7 7a04 	vldr	s15, [r7, #16]
 801447c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	edd3 6a01 	vldr	s13, [r3, #4]
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	edd3 7a03 	vldr	s15, [r3, #12]
 801448c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8014490:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	edd3 6a02 	vldr	s13, [r3, #8]
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	edd3 7a04 	vldr	s15, [r3, #16]
 80144a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80144ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144b2:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	68da      	ldr	r2, [r3, #12]
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	693a      	ldr	r2, [r7, #16]
 80144c2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	68fa      	ldr	r2, [r7, #12]
 80144c8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80144dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	d503      	bpl.n	80144ee <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	695a      	ldr	r2, [r3, #20]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80144fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80144fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014502:	d503      	bpl.n	801450c <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	691a      	ldr	r2, [r3, #16]
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	609a      	str	r2, [r3, #8]
	}

	return 1;
 801450c:	2301      	movs	r3, #1
}
 801450e:	4618      	mov	r0, r3
 8014510:	371c      	adds	r7, #28
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr

0801451a <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 801451a:	b580      	push	{r7, lr}
 801451c:	b088      	sub	sp, #32
 801451e:	af00      	add	r7, sp, #0
 8014520:	61f8      	str	r0, [r7, #28]
 8014522:	ed87 0a06 	vstr	s0, [r7, #24]
 8014526:	edc7 0a05 	vstr	s1, [r7, #20]
 801452a:	ed87 1a04 	vstr	s2, [r7, #16]
 801452e:	edc7 1a03 	vstr	s3, [r7, #12]
 8014532:	ed87 2a02 	vstr	s4, [r7, #8]
 8014536:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 801453a:	ed97 7a01 	vldr	s14, [r7, #4]
 801453e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454a:	d501      	bpl.n	8014550 <PID_initialize+0x36>
		return 0;
 801454c:	2300      	movs	r3, #0
 801454e:	e024      	b.n	801459a <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	f04f 0200 	mov.w	r2, #0
 8014556:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	f04f 0200 	mov.w	r2, #0
 801455e:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	f04f 0200 	mov.w	r2, #0
 8014566:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	69ba      	ldr	r2, [r7, #24]
 801456c:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 801456e:	69fb      	ldr	r3, [r7, #28]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8014574:	69fb      	ldr	r3, [r7, #28]
 8014576:	68ba      	ldr	r2, [r7, #8]
 8014578:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	697a      	ldr	r2, [r7, #20]
 801457e:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	693a      	ldr	r2, [r7, #16]
 8014584:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	68fa      	ldr	r2, [r7, #12]
 801458a:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 801458c:	69fb      	ldr	r3, [r7, #28]
 801458e:	3318      	adds	r3, #24
 8014590:	2101      	movs	r1, #1
 8014592:	4618      	mov	r0, r3
 8014594:	f019 fff6 	bl	802e584 <arm_pid_init_f32>

	return 1;
 8014598:	2301      	movs	r3, #1
}
 801459a:	4618      	mov	r0, r3
 801459c:	3720      	adds	r7, #32
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
	...

080145a4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80145a8:	4803      	ldr	r0, [pc, #12]	; (80145b8 <_cbSendSystemDesc+0x14>)
 80145aa:	f019 fd57 	bl	802e05c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80145ae:	4803      	ldr	r0, [pc, #12]	; (80145bc <_cbSendSystemDesc+0x18>)
 80145b0:	f019 fd54 	bl	802e05c <SEGGER_SYSVIEW_SendSysDesc>
}
 80145b4:	bf00      	nop
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	0802f240 	.word	0x0802f240
 80145bc:	0802f26c 	.word	0x0802f26c

080145c0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80145c0:	b580      	push	{r7, lr}
 80145c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80145c4:	4b06      	ldr	r3, [pc, #24]	; (80145e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80145c6:	6818      	ldr	r0, [r3, #0]
 80145c8:	4b05      	ldr	r3, [pc, #20]	; (80145e0 <SEGGER_SYSVIEW_Conf+0x20>)
 80145ca:	6819      	ldr	r1, [r3, #0]
 80145cc:	4b05      	ldr	r3, [pc, #20]	; (80145e4 <SEGGER_SYSVIEW_Conf+0x24>)
 80145ce:	4a06      	ldr	r2, [pc, #24]	; (80145e8 <SEGGER_SYSVIEW_Conf+0x28>)
 80145d0:	f019 f8c2 	bl	802d758 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80145d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80145d8:	f019 f902 	bl	802d7e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80145dc:	bf00      	nop
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	20000084 	.word	0x20000084
 80145e4:	080145a5 	.word	0x080145a5
 80145e8:	0802f3d4 	.word	0x0802f3d4

080145ec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80145ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ee:	b085      	sub	sp, #20
 80145f0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80145f2:	2300      	movs	r3, #0
 80145f4:	607b      	str	r3, [r7, #4]
 80145f6:	e048      	b.n	801468a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80145f8:	4929      	ldr	r1, [pc, #164]	; (80146a0 <_cbSendTaskList+0xb4>)
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	4613      	mov	r3, r2
 80145fe:	009b      	lsls	r3, r3, #2
 8014600:	4413      	add	r3, r2
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	440b      	add	r3, r1
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	4618      	mov	r0, r3
 801460a:	f017 fb2f 	bl	802bc6c <uxTaskGetStackHighWaterMark>
 801460e:	4601      	mov	r1, r0
 8014610:	4823      	ldr	r0, [pc, #140]	; (80146a0 <_cbSendTaskList+0xb4>)
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	4613      	mov	r3, r2
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	4403      	add	r3, r0
 801461e:	3310      	adds	r3, #16
 8014620:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8014622:	491f      	ldr	r1, [pc, #124]	; (80146a0 <_cbSendTaskList+0xb4>)
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	4613      	mov	r3, r2
 8014628:	009b      	lsls	r3, r3, #2
 801462a:	4413      	add	r3, r2
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	440b      	add	r3, r1
 8014630:	6818      	ldr	r0, [r3, #0]
 8014632:	491b      	ldr	r1, [pc, #108]	; (80146a0 <_cbSendTaskList+0xb4>)
 8014634:	687a      	ldr	r2, [r7, #4]
 8014636:	4613      	mov	r3, r2
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4413      	add	r3, r2
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	440b      	add	r3, r1
 8014640:	3304      	adds	r3, #4
 8014642:	6819      	ldr	r1, [r3, #0]
 8014644:	4c16      	ldr	r4, [pc, #88]	; (80146a0 <_cbSendTaskList+0xb4>)
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	4423      	add	r3, r4
 8014652:	3308      	adds	r3, #8
 8014654:	681c      	ldr	r4, [r3, #0]
 8014656:	4d12      	ldr	r5, [pc, #72]	; (80146a0 <_cbSendTaskList+0xb4>)
 8014658:	687a      	ldr	r2, [r7, #4]
 801465a:	4613      	mov	r3, r2
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	442b      	add	r3, r5
 8014664:	330c      	adds	r3, #12
 8014666:	681d      	ldr	r5, [r3, #0]
 8014668:	4e0d      	ldr	r6, [pc, #52]	; (80146a0 <_cbSendTaskList+0xb4>)
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	4613      	mov	r3, r2
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	4413      	add	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4433      	add	r3, r6
 8014676:	3310      	adds	r3, #16
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	462b      	mov	r3, r5
 801467e:	4622      	mov	r2, r4
 8014680:	f000 f8b6 	bl	80147f0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	3301      	adds	r3, #1
 8014688:	607b      	str	r3, [r7, #4]
 801468a:	4b06      	ldr	r3, [pc, #24]	; (80146a4 <_cbSendTaskList+0xb8>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	429a      	cmp	r2, r3
 8014692:	d3b1      	bcc.n	80145f8 <_cbSendTaskList+0xc>
  }
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop
 8014698:	370c      	adds	r7, #12
 801469a:	46bd      	mov	sp, r7
 801469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801469e:	bf00      	nop
 80146a0:	200017e8 	.word	0x200017e8
 80146a4:	20001928 	.word	0x20001928

080146a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80146a8:	b5b0      	push	{r4, r5, r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80146ae:	f016 ffb5 	bl	802b61c <xTaskGetTickCountFromISR>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461a      	mov	r2, r3
 80146b6:	f04f 0300 	mov.w	r3, #0
 80146ba:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80146be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80146c2:	4602      	mov	r2, r0
 80146c4:	460b      	mov	r3, r1
 80146c6:	f04f 0400 	mov.w	r4, #0
 80146ca:	f04f 0500 	mov.w	r5, #0
 80146ce:	015d      	lsls	r5, r3, #5
 80146d0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80146d4:	0154      	lsls	r4, r2, #5
 80146d6:	4622      	mov	r2, r4
 80146d8:	462b      	mov	r3, r5
 80146da:	1a12      	subs	r2, r2, r0
 80146dc:	eb63 0301 	sbc.w	r3, r3, r1
 80146e0:	f04f 0400 	mov.w	r4, #0
 80146e4:	f04f 0500 	mov.w	r5, #0
 80146e8:	009d      	lsls	r5, r3, #2
 80146ea:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80146ee:	0094      	lsls	r4, r2, #2
 80146f0:	4622      	mov	r2, r4
 80146f2:	462b      	mov	r3, r5
 80146f4:	1812      	adds	r2, r2, r0
 80146f6:	eb41 0303 	adc.w	r3, r1, r3
 80146fa:	f04f 0000 	mov.w	r0, #0
 80146fe:	f04f 0100 	mov.w	r1, #0
 8014702:	00d9      	lsls	r1, r3, #3
 8014704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014708:	00d0      	lsls	r0, r2, #3
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
 801470e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8014712:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8014716:	4610      	mov	r0, r2
 8014718:	4619      	mov	r1, r3
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bdb0      	pop	{r4, r5, r7, pc}

08014720 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af02      	add	r7, sp, #8
 8014726:	60f8      	str	r0, [r7, #12]
 8014728:	60b9      	str	r1, [r7, #8]
 801472a:	607a      	str	r2, [r7, #4]
 801472c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 801472e:	2205      	movs	r2, #5
 8014730:	492b      	ldr	r1, [pc, #172]	; (80147e0 <SYSVIEW_AddTask+0xc0>)
 8014732:	68b8      	ldr	r0, [r7, #8]
 8014734:	f019 ff70 	bl	802e618 <memcmp>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d04b      	beq.n	80147d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 801473e:	4b29      	ldr	r3, [pc, #164]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2b0f      	cmp	r3, #15
 8014744:	d903      	bls.n	801474e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8014746:	4828      	ldr	r0, [pc, #160]	; (80147e8 <SYSVIEW_AddTask+0xc8>)
 8014748:	f019 fec0 	bl	802e4cc <SEGGER_SYSVIEW_Warn>
    return;
 801474c:	e044      	b.n	80147d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 801474e:	4b25      	ldr	r3, [pc, #148]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 8014750:	681a      	ldr	r2, [r3, #0]
 8014752:	4926      	ldr	r1, [pc, #152]	; (80147ec <SYSVIEW_AddTask+0xcc>)
 8014754:	4613      	mov	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	440b      	add	r3, r1
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8014762:	4b20      	ldr	r3, [pc, #128]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	4921      	ldr	r1, [pc, #132]	; (80147ec <SYSVIEW_AddTask+0xcc>)
 8014768:	4613      	mov	r3, r2
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	4413      	add	r3, r2
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	440b      	add	r3, r1
 8014772:	3304      	adds	r3, #4
 8014774:	68ba      	ldr	r2, [r7, #8]
 8014776:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8014778:	4b1a      	ldr	r3, [pc, #104]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	491b      	ldr	r1, [pc, #108]	; (80147ec <SYSVIEW_AddTask+0xcc>)
 801477e:	4613      	mov	r3, r2
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	4413      	add	r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	440b      	add	r3, r1
 8014788:	3308      	adds	r3, #8
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 801478e:	4b15      	ldr	r3, [pc, #84]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	4916      	ldr	r1, [pc, #88]	; (80147ec <SYSVIEW_AddTask+0xcc>)
 8014794:	4613      	mov	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	4413      	add	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	440b      	add	r3, r1
 801479e:	330c      	adds	r3, #12
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80147a4:	4b0f      	ldr	r3, [pc, #60]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	4910      	ldr	r1, [pc, #64]	; (80147ec <SYSVIEW_AddTask+0xcc>)
 80147aa:	4613      	mov	r3, r2
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	4413      	add	r3, r2
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	440b      	add	r3, r1
 80147b4:	3310      	adds	r3, #16
 80147b6:	69ba      	ldr	r2, [r7, #24]
 80147b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80147ba:	4b0a      	ldr	r3, [pc, #40]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	3301      	adds	r3, #1
 80147c0:	4a08      	ldr	r2, [pc, #32]	; (80147e4 <SYSVIEW_AddTask+0xc4>)
 80147c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	68b9      	ldr	r1, [r7, #8]
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f000 f80e 	bl	80147f0 <SYSVIEW_SendTaskInfo>
 80147d4:	e000      	b.n	80147d8 <SYSVIEW_AddTask+0xb8>
    return;
 80147d6:	bf00      	nop

}
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	0802f27c 	.word	0x0802f27c
 80147e4:	20001928 	.word	0x20001928
 80147e8:	0802f284 	.word	0x0802f284
 80147ec:	200017e8 	.word	0x200017e8

080147f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b08a      	sub	sp, #40	; 0x28
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80147fe:	f107 0314 	add.w	r3, r7, #20
 8014802:	2214      	movs	r2, #20
 8014804:	2100      	movs	r1, #0
 8014806:	4618      	mov	r0, r3
 8014808:	f019 ff22 	bl	802e650 <memset>
  TaskInfo.TaskID     = TaskID;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 801481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8014820:	f107 0314 	add.w	r3, r7, #20
 8014824:	4618      	mov	r0, r3
 8014826:	f019 fb21 	bl	802de6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 801482a:	bf00      	nop
 801482c:	3728      	adds	r7, #40	; 0x28
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
	...

08014834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801483a:	463b      	mov	r3, r7
 801483c:	2200      	movs	r2, #0
 801483e:	601a      	str	r2, [r3, #0]
 8014840:	605a      	str	r2, [r3, #4]
 8014842:	609a      	str	r2, [r3, #8]
 8014844:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8014846:	4b37      	ldr	r3, [pc, #220]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014848:	4a37      	ldr	r2, [pc, #220]	; (8014928 <MX_ADC1_Init+0xf4>)
 801484a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801484c:	4b35      	ldr	r3, [pc, #212]	; (8014924 <MX_ADC1_Init+0xf0>)
 801484e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014854:	4b33      	ldr	r3, [pc, #204]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014856:	2200      	movs	r2, #0
 8014858:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 801485a:	4b32      	ldr	r3, [pc, #200]	; (8014924 <MX_ADC1_Init+0xf0>)
 801485c:	2201      	movs	r2, #1
 801485e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8014860:	4b30      	ldr	r3, [pc, #192]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014862:	2200      	movs	r2, #0
 8014864:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014866:	4b2f      	ldr	r3, [pc, #188]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014868:	2200      	movs	r2, #0
 801486a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801486e:	4b2d      	ldr	r3, [pc, #180]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8014876:	4b2b      	ldr	r3, [pc, #172]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801487c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801487e:	4b29      	ldr	r3, [pc, #164]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014880:	2200      	movs	r2, #0
 8014882:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8014884:	4b27      	ldr	r3, [pc, #156]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014886:	2204      	movs	r2, #4
 8014888:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801488a:	4b26      	ldr	r3, [pc, #152]	; (8014924 <MX_ADC1_Init+0xf0>)
 801488c:	2200      	movs	r2, #0
 801488e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014892:	4b24      	ldr	r3, [pc, #144]	; (8014924 <MX_ADC1_Init+0xf0>)
 8014894:	2201      	movs	r2, #1
 8014896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014898:	4822      	ldr	r0, [pc, #136]	; (8014924 <MX_ADC1_Init+0xf0>)
 801489a:	f00f ff63 	bl	8024764 <HAL_ADC_Init>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d001      	beq.n	80148a8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80148a4:	f002 fbba 	bl	801701c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80148a8:	2301      	movs	r3, #1
 80148aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80148ac:	2301      	movs	r3, #1
 80148ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80148b0:	2302      	movs	r3, #2
 80148b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80148b4:	463b      	mov	r3, r7
 80148b6:	4619      	mov	r1, r3
 80148b8:	481a      	ldr	r0, [pc, #104]	; (8014924 <MX_ADC1_Init+0xf0>)
 80148ba:	f010 fa05 	bl	8024cc8 <HAL_ADC_ConfigChannel>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d001      	beq.n	80148c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80148c4:	f002 fbaa 	bl	801701c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80148c8:	2302      	movs	r3, #2
 80148ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80148cc:	2302      	movs	r3, #2
 80148ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80148d0:	463b      	mov	r3, r7
 80148d2:	4619      	mov	r1, r3
 80148d4:	4813      	ldr	r0, [pc, #76]	; (8014924 <MX_ADC1_Init+0xf0>)
 80148d6:	f010 f9f7 	bl	8024cc8 <HAL_ADC_ConfigChannel>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d001      	beq.n	80148e4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80148e0:	f002 fb9c 	bl	801701c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80148e4:	2303      	movs	r3, #3
 80148e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80148e8:	2303      	movs	r3, #3
 80148ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80148ec:	463b      	mov	r3, r7
 80148ee:	4619      	mov	r1, r3
 80148f0:	480c      	ldr	r0, [pc, #48]	; (8014924 <MX_ADC1_Init+0xf0>)
 80148f2:	f010 f9e9 	bl	8024cc8 <HAL_ADC_ConfigChannel>
 80148f6:	4603      	mov	r3, r0
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d001      	beq.n	8014900 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80148fc:	f002 fb8e 	bl	801701c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8014900:	2304      	movs	r3, #4
 8014902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8014904:	2304      	movs	r3, #4
 8014906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014908:	463b      	mov	r3, r7
 801490a:	4619      	mov	r1, r3
 801490c:	4805      	ldr	r0, [pc, #20]	; (8014924 <MX_ADC1_Init+0xf0>)
 801490e:	f010 f9db 	bl	8024cc8 <HAL_ADC_ConfigChannel>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8014918:	f002 fb80 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801491c:	bf00      	nop
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}
 8014924:	2001b760 	.word	0x2001b760
 8014928:	40012000 	.word	0x40012000

0801492c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08a      	sub	sp, #40	; 0x28
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014934:	f107 0314 	add.w	r3, r7, #20
 8014938:	2200      	movs	r2, #0
 801493a:	601a      	str	r2, [r3, #0]
 801493c:	605a      	str	r2, [r3, #4]
 801493e:	609a      	str	r2, [r3, #8]
 8014940:	60da      	str	r2, [r3, #12]
 8014942:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	4a33      	ldr	r2, [pc, #204]	; (8014a18 <HAL_ADC_MspInit+0xec>)
 801494a:	4293      	cmp	r3, r2
 801494c:	d15f      	bne.n	8014a0e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801494e:	2300      	movs	r3, #0
 8014950:	613b      	str	r3, [r7, #16]
 8014952:	4b32      	ldr	r3, [pc, #200]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 8014954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014956:	4a31      	ldr	r2, [pc, #196]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 8014958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801495c:	6453      	str	r3, [r2, #68]	; 0x44
 801495e:	4b2f      	ldr	r3, [pc, #188]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 8014960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014966:	613b      	str	r3, [r7, #16]
 8014968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801496a:	2300      	movs	r3, #0
 801496c:	60fb      	str	r3, [r7, #12]
 801496e:	4b2b      	ldr	r3, [pc, #172]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 8014970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014972:	4a2a      	ldr	r2, [pc, #168]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 8014974:	f043 0301 	orr.w	r3, r3, #1
 8014978:	6313      	str	r3, [r2, #48]	; 0x30
 801497a:	4b28      	ldr	r3, [pc, #160]	; (8014a1c <HAL_ADC_MspInit+0xf0>)
 801497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497e:	f003 0301 	and.w	r3, r3, #1
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8014986:	231e      	movs	r3, #30
 8014988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801498a:	2303      	movs	r3, #3
 801498c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801498e:	2300      	movs	r3, #0
 8014990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014992:	f107 0314 	add.w	r3, r7, #20
 8014996:	4619      	mov	r1, r3
 8014998:	4821      	ldr	r0, [pc, #132]	; (8014a20 <HAL_ADC_MspInit+0xf4>)
 801499a:	f011 ff61 	bl	8026860 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 801499e:	4b21      	ldr	r3, [pc, #132]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149a0:	4a21      	ldr	r2, [pc, #132]	; (8014a28 <HAL_ADC_MspInit+0xfc>)
 80149a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80149a4:	4b1f      	ldr	r3, [pc, #124]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149a6:	2200      	movs	r2, #0
 80149a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80149aa:	4b1e      	ldr	r3, [pc, #120]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149ac:	2200      	movs	r2, #0
 80149ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80149b0:	4b1c      	ldr	r3, [pc, #112]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149b2:	2200      	movs	r2, #0
 80149b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80149b6:	4b1b      	ldr	r3, [pc, #108]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80149bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80149be:	4b19      	ldr	r3, [pc, #100]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80149c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80149c6:	4b17      	ldr	r3, [pc, #92]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80149cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80149ce:	4b15      	ldr	r3, [pc, #84]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80149d4:	4b13      	ldr	r3, [pc, #76]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80149da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80149dc:	4b11      	ldr	r3, [pc, #68]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149de:	2200      	movs	r2, #0
 80149e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80149e2:	4810      	ldr	r0, [pc, #64]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149e4:	f011 fbcc 	bl	8026180 <HAL_DMA_Init>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d001      	beq.n	80149f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80149ee:	f002 fb15 	bl	801701c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	4a0b      	ldr	r2, [pc, #44]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149f6:	639a      	str	r2, [r3, #56]	; 0x38
 80149f8:	4a0a      	ldr	r2, [pc, #40]	; (8014a24 <HAL_ADC_MspInit+0xf8>)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80149fe:	2200      	movs	r2, #0
 8014a00:	2105      	movs	r1, #5
 8014a02:	2012      	movs	r0, #18
 8014a04:	f011 fb92 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8014a08:	2012      	movs	r0, #18
 8014a0a:	f011 fbab 	bl	8026164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8014a0e:	bf00      	nop
 8014a10:	3728      	adds	r7, #40	; 0x28
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
 8014a16:	bf00      	nop
 8014a18:	40012000 	.word	0x40012000
 8014a1c:	40023800 	.word	0x40023800
 8014a20:	40020000 	.word	0x40020000
 8014a24:	2001b7a8 	.word	0x2001b7a8
 8014a28:	40026410 	.word	0x40026410
 8014a2c:	00000000 	.word	0x00000000

08014a30 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8014a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014a34:	b08e      	sub	sp, #56	; 0x38
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	60f8      	str	r0, [r7, #12]
 8014a3a:	60b9      	str	r1, [r7, #8]
 8014a3c:	4613      	mov	r3, r2
 8014a3e:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8014a40:	4bd3      	ldr	r3, [pc, #844]	; (8014d90 <interpret_ADC_buffer+0x360>)
 8014a42:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 8014a44:	4bd3      	ldr	r3, [pc, #844]	; (8014d94 <interpret_ADC_buffer+0x364>)
 8014a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8014a48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014a4c:	eeb1 7a67 	vneg.f32	s14, s15
 8014a50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014a54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014a58:	ee16 0a90 	vmov	r0, s13
 8014a5c:	f7eb fd66 	bl	800052c <__aeabi_f2d>
 8014a60:	4602      	mov	r2, r0
 8014a62:	460b      	mov	r3, r1
 8014a64:	ec43 2b10 	vmov	d0, r2, r3
 8014a68:	f019 ff12 	bl	802e890 <exp>
 8014a6c:	ec51 0b10 	vmov	r0, r1, d0
 8014a70:	a3c3      	add	r3, pc, #780	; (adr r3, 8014d80 <interpret_ADC_buffer+0x350>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	f7eb fdb1 	bl	80005dc <__aeabi_dmul>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	4610      	mov	r0, r2
 8014a80:	4619      	mov	r1, r3
 8014a82:	f7ec f8a3 	bl	8000bcc <__aeabi_d2f>
 8014a86:	4603      	mov	r3, r0
 8014a88:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8014a8a:	4bc3      	ldr	r3, [pc, #780]	; (8014d98 <interpret_ADC_buffer+0x368>)
 8014a8c:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8014a8e:	4bc3      	ldr	r3, [pc, #780]	; (8014d9c <interpret_ADC_buffer+0x36c>)
 8014a90:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 8014a92:	2300      	movs	r3, #0
 8014a94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8014a96:	e063      	b.n	8014b60 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8014a98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014aa0:	4413      	add	r3, r2
 8014aa2:	3b28      	subs	r3, #40	; 0x28
 8014aa4:	f04f 0200 	mov.w	r2, #0
 8014aa8:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8014aaa:	2300      	movs	r3, #0
 8014aac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8014aae:	e020      	b.n	8014af2 <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8014ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014ab8:	4413      	add	r3, r2
 8014aba:	3b28      	subs	r3, #40	; 0x28
 8014abc:	ed93 7a00 	vldr	s14, [r3]
 8014ac0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ac2:	009a      	lsls	r2, r3, #2
 8014ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ac6:	4413      	add	r3, r2
 8014ac8:	005b      	lsls	r3, r3, #1
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	4413      	add	r3, r2
 8014ace:	881b      	ldrh	r3, [r3, #0]
 8014ad0:	ee07 3a90 	vmov	s15, r3
 8014ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014ae4:	4413      	add	r3, r2
 8014ae6:	3b28      	subs	r3, #40	; 0x28
 8014ae8:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 8014aec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014aee:	3301      	adds	r3, #1
 8014af0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8014af2:	79fb      	ldrb	r3, [r7, #7]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d3d9      	bcc.n	8014ab0 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 8014afc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014b04:	4413      	add	r3, r2
 8014b06:	3b28      	subs	r3, #40	; 0x28
 8014b08:	edd3 6a00 	vldr	s13, [r3]
 8014b0c:	79fb      	ldrb	r3, [r7, #7]
 8014b0e:	ee07 3a90 	vmov	s15, r3
 8014b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014b16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014b22:	4413      	add	r3, r2
 8014b24:	3b28      	subs	r3, #40	; 0x28
 8014b26:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8014b2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014b32:	4413      	add	r3, r2
 8014b34:	3b28      	subs	r3, #40	; 0x28
 8014b36:	edd3 7a00 	vldr	s15, [r3]
 8014b3a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8014b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b46:	d508      	bpl.n	8014b5a <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8014b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014b50:	4413      	add	r3, r2
 8014b52:	3b28      	subs	r3, #40	; 0x28
 8014b54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014b58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8014b5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8014b60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b62:	2b03      	cmp	r3, #3
 8014b64:	d998      	bls.n	8014a98 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 8014b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b68:	f7eb fce0 	bl	800052c <__aeabi_f2d>
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	460d      	mov	r5, r1
 8014b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8014b74:	edd7 6a08 	vldr	s13, [r7, #32]
 8014b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014b84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b8c:	ee17 0a90 	vmov	r0, s15
 8014b90:	f7eb fccc 	bl	800052c <__aeabi_f2d>
 8014b94:	4602      	mov	r2, r0
 8014b96:	460b      	mov	r3, r1
 8014b98:	ec43 2b10 	vmov	d0, r2, r3
 8014b9c:	f019 fec8 	bl	802e930 <log>
 8014ba0:	ec59 8b10 	vmov	r8, r9, d0
 8014ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ba6:	f7eb fcc1 	bl	800052c <__aeabi_f2d>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	ec43 2b10 	vmov	d0, r2, r3
 8014bb2:	f019 febd 	bl	802e930 <log>
 8014bb6:	ec53 2b10 	vmov	r2, r3, d0
 8014bba:	4640      	mov	r0, r8
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	f7eb fb55 	bl	800026c <__aeabi_dsub>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	4629      	mov	r1, r5
 8014bca:	f7eb fe31 	bl	8000830 <__aeabi_ddiv>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	460b      	mov	r3, r1
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	4619      	mov	r1, r3
			- 273.15;
 8014bd6:	a36c      	add	r3, pc, #432	; (adr r3, 8014d88 <interpret_ADC_buffer+0x358>)
 8014bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bdc:	f7eb fb46 	bl	800026c <__aeabi_dsub>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
	temperatures->precharge_resistor = beta
 8014be4:	68f9      	ldr	r1, [r7, #12]
 8014be6:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8014bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bec:	f7eb fc9e 	bl	800052c <__aeabi_f2d>
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	460d      	mov	r5, r1
 8014bf4:	ed97 7a05 	vldr	s14, [r7, #20]
 8014bf8:	edd7 6a08 	vldr	s13, [r7, #32]
 8014bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014c08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c10:	ee17 0a90 	vmov	r0, s15
 8014c14:	f7eb fc8a 	bl	800052c <__aeabi_f2d>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	ec43 2b10 	vmov	d0, r2, r3
 8014c20:	f019 fe86 	bl	802e930 <log>
 8014c24:	ec59 8b10 	vmov	r8, r9, d0
 8014c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c2a:	f7eb fc7f 	bl	800052c <__aeabi_f2d>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	460b      	mov	r3, r1
 8014c32:	ec43 2b10 	vmov	d0, r2, r3
 8014c36:	f019 fe7b 	bl	802e930 <log>
 8014c3a:	ec53 2b10 	vmov	r2, r3, d0
 8014c3e:	4640      	mov	r0, r8
 8014c40:	4649      	mov	r1, r9
 8014c42:	f7eb fb13 	bl	800026c <__aeabi_dsub>
 8014c46:	4602      	mov	r2, r0
 8014c48:	460b      	mov	r3, r1
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	4629      	mov	r1, r5
 8014c4e:	f7eb fdef 	bl	8000830 <__aeabi_ddiv>
 8014c52:	4602      	mov	r2, r0
 8014c54:	460b      	mov	r3, r1
 8014c56:	4610      	mov	r0, r2
 8014c58:	4619      	mov	r1, r3
			- 273.15;
 8014c5a:	a34b      	add	r3, pc, #300	; (adr r3, 8014d88 <interpret_ADC_buffer+0x358>)
 8014c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c60:	f7eb fb04 	bl	800026c <__aeabi_dsub>
 8014c64:	4602      	mov	r2, r0
 8014c66:	460b      	mov	r3, r1
	temperatures->fuse = beta
 8014c68:	68f9      	ldr	r1, [r7, #12]
 8014c6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8014c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c70:	f7eb fc5c 	bl	800052c <__aeabi_f2d>
 8014c74:	4604      	mov	r4, r0
 8014c76:	460d      	mov	r5, r1
 8014c78:	ed97 7a06 	vldr	s14, [r7, #24]
 8014c7c:	edd7 6a08 	vldr	s13, [r7, #32]
 8014c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014c8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c94:	ee17 0a90 	vmov	r0, s15
 8014c98:	f7eb fc48 	bl	800052c <__aeabi_f2d>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	ec43 2b10 	vmov	d0, r2, r3
 8014ca4:	f019 fe44 	bl	802e930 <log>
 8014ca8:	ec59 8b10 	vmov	r8, r9, d0
 8014cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cae:	f7eb fc3d 	bl	800052c <__aeabi_f2d>
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	ec43 2b10 	vmov	d0, r2, r3
 8014cba:	f019 fe39 	bl	802e930 <log>
 8014cbe:	ec53 2b10 	vmov	r2, r3, d0
 8014cc2:	4640      	mov	r0, r8
 8014cc4:	4649      	mov	r1, r9
 8014cc6:	f7eb fad1 	bl	800026c <__aeabi_dsub>
 8014cca:	4602      	mov	r2, r0
 8014ccc:	460b      	mov	r3, r1
 8014cce:	4620      	mov	r0, r4
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	f7eb fdad 	bl	8000830 <__aeabi_ddiv>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	4610      	mov	r0, r2
 8014cdc:	4619      	mov	r1, r3
			- 273.15;
 8014cde:	a32a      	add	r3, pc, #168	; (adr r3, 8014d88 <interpret_ADC_buffer+0x358>)
 8014ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce4:	f7eb fac2 	bl	800026c <__aeabi_dsub>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	460b      	mov	r3, r1
	temperatures->aux_1 = beta
 8014cec:	68f9      	ldr	r1, [r7, #12]
 8014cee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8014cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cf4:	f7eb fc1a 	bl	800052c <__aeabi_f2d>
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	460d      	mov	r5, r1
 8014cfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8014d00:	edd7 6a08 	vldr	s13, [r7, #32]
 8014d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014d10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d18:	ee17 0a90 	vmov	r0, s15
 8014d1c:	f7eb fc06 	bl	800052c <__aeabi_f2d>
 8014d20:	4602      	mov	r2, r0
 8014d22:	460b      	mov	r3, r1
 8014d24:	ec43 2b10 	vmov	d0, r2, r3
 8014d28:	f019 fe02 	bl	802e930 <log>
 8014d2c:	ec59 8b10 	vmov	r8, r9, d0
 8014d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d32:	f7eb fbfb 	bl	800052c <__aeabi_f2d>
 8014d36:	4602      	mov	r2, r0
 8014d38:	460b      	mov	r3, r1
 8014d3a:	ec43 2b10 	vmov	d0, r2, r3
 8014d3e:	f019 fdf7 	bl	802e930 <log>
 8014d42:	ec53 2b10 	vmov	r2, r3, d0
 8014d46:	4640      	mov	r0, r8
 8014d48:	4649      	mov	r1, r9
 8014d4a:	f7eb fa8f 	bl	800026c <__aeabi_dsub>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	460b      	mov	r3, r1
 8014d52:	4620      	mov	r0, r4
 8014d54:	4629      	mov	r1, r5
 8014d56:	f7eb fd6b 	bl	8000830 <__aeabi_ddiv>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	4610      	mov	r0, r2
 8014d60:	4619      	mov	r1, r3
			- 273.15;
 8014d62:	a309      	add	r3, pc, #36	; (adr r3, 8014d88 <interpret_ADC_buffer+0x358>)
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	f7eb fa80 	bl	800026c <__aeabi_dsub>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	460b      	mov	r3, r1
	temperatures->aux_2 = beta
 8014d70:	68f9      	ldr	r1, [r7, #12]
 8014d72:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8014d76:	bf00      	nop
 8014d78:	3738      	adds	r7, #56	; 0x38
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014d80:	00000000 	.word	0x00000000
 8014d84:	40c38800 	.word	0x40c38800
 8014d88:	66666666 	.word	0x66666666
 8014d8c:	40711266 	.word	0x40711266
 8014d90:	455ac000 	.word	0x455ac000
 8014d94:	43951333 	.word	0x43951333
 8014d98:	461c4000 	.word	0x461c4000
 8014d9c:	457ff000 	.word	0x457ff000

08014da0 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2241      	movs	r2, #65	; 0x41
 8014dae:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f013 f991 	bl	80280d8 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 8014db6:	4b03      	ldr	r3, [pc, #12]	; (8014dc4 <ADC_initialize+0x24>)
 8014db8:	2201      	movs	r2, #1
 8014dba:	801a      	strh	r2, [r3, #0]
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	20000000 	.word	0x20000000

08014dc8 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8014dd4:	4b08      	ldr	r3, [pc, #32]	; (8014df8 <ADC_step+0x30>)
 8014dd6:	881b      	ldrh	r3, [r3, #0]
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d108      	bne.n	8014dee <ADC_step+0x26>
		ADC_FLAG = 0;
 8014ddc:	4b06      	ldr	r3, [pc, #24]	; (8014df8 <ADC_step+0x30>)
 8014dde:	2200      	movs	r2, #0
 8014de0:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8014de2:	887b      	ldrh	r3, [r7, #2]
 8014de4:	461a      	mov	r2, r3
 8014de6:	6879      	ldr	r1, [r7, #4]
 8014de8:	4804      	ldr	r0, [pc, #16]	; (8014dfc <ADC_step+0x34>)
 8014dea:	f00f fe3f 	bl	8024a6c <HAL_ADC_Start_DMA>
	}
}
 8014dee:	bf00      	nop
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	20000000 	.word	0x20000000
 8014dfc:	2001b760 	.word	0x2001b760

08014e00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8014e08:	4b04      	ldr	r3, [pc, #16]	; (8014e1c <HAL_ADC_ConvCpltCallback+0x1c>)
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	801a      	strh	r2, [r3, #0]

}
 8014e0e:	bf00      	nop
 8014e10:	370c      	adds	r7, #12
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	20000000 	.word	0x20000000

08014e20 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8014e24:	4b17      	ldr	r3, [pc, #92]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e26:	4a18      	ldr	r2, [pc, #96]	; (8014e88 <MX_CAN1_Init+0x68>)
 8014e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8014e2a:	4b16      	ldr	r3, [pc, #88]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e2c:	2202      	movs	r2, #2
 8014e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8014e30:	4b14      	ldr	r3, [pc, #80]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014e36:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8014e38:	4b12      	ldr	r3, [pc, #72]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8014e3e:	4b11      	ldr	r3, [pc, #68]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e40:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8014e44:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8014e46:	4b0f      	ldr	r3, [pc, #60]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e48:	2200      	movs	r2, #0
 8014e4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8014e4c:	4b0d      	ldr	r3, [pc, #52]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8014e52:	4b0c      	ldr	r3, [pc, #48]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e54:	2200      	movs	r2, #0
 8014e56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8014e58:	4b0a      	ldr	r3, [pc, #40]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8014e5e:	4b09      	ldr	r3, [pc, #36]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e60:	2200      	movs	r2, #0
 8014e62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8014e64:	4b07      	ldr	r3, [pc, #28]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8014e6a:	4b06      	ldr	r3, [pc, #24]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8014e70:	4804      	ldr	r0, [pc, #16]	; (8014e84 <MX_CAN1_Init+0x64>)
 8014e72:	f010 f9d3 	bl	802521c <HAL_CAN_Init>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d001      	beq.n	8014e80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8014e7c:	f002 f8ce 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8014e80:	bf00      	nop
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	2001b830 	.word	0x2001b830
 8014e88:	40006400 	.word	0x40006400

08014e8c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8014e90:	4b17      	ldr	r3, [pc, #92]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014e92:	4a18      	ldr	r2, [pc, #96]	; (8014ef4 <MX_CAN2_Init+0x68>)
 8014e94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8014e96:	4b16      	ldr	r3, [pc, #88]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014e98:	2204      	movs	r2, #4
 8014e9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8014e9c:	4b14      	ldr	r3, [pc, #80]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014ea2:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8014ea4:	4b12      	ldr	r3, [pc, #72]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8014eaa:	4b11      	ldr	r3, [pc, #68]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014eac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8014eb0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8014eb2:	4b0f      	ldr	r3, [pc, #60]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8014eb8:	4b0d      	ldr	r3, [pc, #52]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8014ebe:	4b0c      	ldr	r3, [pc, #48]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8014ec4:	4b0a      	ldr	r3, [pc, #40]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8014eca:	4b09      	ldr	r3, [pc, #36]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ecc:	2200      	movs	r2, #0
 8014ece:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8014ed0:	4b07      	ldr	r3, [pc, #28]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8014ed6:	4b06      	ldr	r3, [pc, #24]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ed8:	2200      	movs	r2, #0
 8014eda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8014edc:	4804      	ldr	r0, [pc, #16]	; (8014ef0 <MX_CAN2_Init+0x64>)
 8014ede:	f010 f99d 	bl	802521c <HAL_CAN_Init>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d001      	beq.n	8014eec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8014ee8:	f002 f898 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8014eec:	bf00      	nop
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	2001b808 	.word	0x2001b808
 8014ef4:	40006800 	.word	0x40006800

08014ef8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b08c      	sub	sp, #48	; 0x30
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f00:	f107 031c 	add.w	r3, r7, #28
 8014f04:	2200      	movs	r2, #0
 8014f06:	601a      	str	r2, [r3, #0]
 8014f08:	605a      	str	r2, [r3, #4]
 8014f0a:	609a      	str	r2, [r3, #8]
 8014f0c:	60da      	str	r2, [r3, #12]
 8014f0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	4a5b      	ldr	r2, [pc, #364]	; (8015084 <HAL_CAN_MspInit+0x18c>)
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d14e      	bne.n	8014fb8 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8014f1a:	4b5b      	ldr	r3, [pc, #364]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	4a59      	ldr	r2, [pc, #356]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8014f24:	4b58      	ldr	r3, [pc, #352]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d10d      	bne.n	8014f48 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	61bb      	str	r3, [r7, #24]
 8014f30:	4b56      	ldr	r3, [pc, #344]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f34:	4a55      	ldr	r2, [pc, #340]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8014f3c:	4b53      	ldr	r3, [pc, #332]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f44:	61bb      	str	r3, [r7, #24]
 8014f46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f48:	2300      	movs	r3, #0
 8014f4a:	617b      	str	r3, [r7, #20]
 8014f4c:	4b4f      	ldr	r3, [pc, #316]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f50:	4a4e      	ldr	r2, [pc, #312]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f52:	f043 0301 	orr.w	r3, r3, #1
 8014f56:	6313      	str	r3, [r2, #48]	; 0x30
 8014f58:	4b4c      	ldr	r3, [pc, #304]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f5c:	f003 0301 	and.w	r3, r3, #1
 8014f60:	617b      	str	r3, [r7, #20]
 8014f62:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014f64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f6a:	2302      	movs	r3, #2
 8014f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f72:	2303      	movs	r3, #3
 8014f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8014f76:	2309      	movs	r3, #9
 8014f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f7a:	f107 031c 	add.w	r3, r7, #28
 8014f7e:	4619      	mov	r1, r3
 8014f80:	4843      	ldr	r0, [pc, #268]	; (8015090 <HAL_CAN_MspInit+0x198>)
 8014f82:	f011 fc6d 	bl	8026860 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8014f86:	2200      	movs	r2, #0
 8014f88:	2105      	movs	r1, #5
 8014f8a:	2013      	movs	r0, #19
 8014f8c:	f011 f8ce 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8014f90:	2013      	movs	r0, #19
 8014f92:	f011 f8e7 	bl	8026164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8014f96:	2200      	movs	r2, #0
 8014f98:	2105      	movs	r1, #5
 8014f9a:	2014      	movs	r0, #20
 8014f9c:	f011 f8c6 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8014fa0:	2014      	movs	r0, #20
 8014fa2:	f011 f8df 	bl	8026164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	2105      	movs	r1, #5
 8014faa:	2015      	movs	r0, #21
 8014fac:	f011 f8be 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8014fb0:	2015      	movs	r0, #21
 8014fb2:	f011 f8d7 	bl	8026164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8014fb6:	e060      	b.n	801507a <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	4a35      	ldr	r2, [pc, #212]	; (8015094 <HAL_CAN_MspInit+0x19c>)
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d15b      	bne.n	801507a <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	613b      	str	r3, [r7, #16]
 8014fc6:	4b31      	ldr	r3, [pc, #196]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fca:	4a30      	ldr	r2, [pc, #192]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8014fd2:	4b2e      	ldr	r3, [pc, #184]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014fda:	613b      	str	r3, [r7, #16]
 8014fdc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8014fde:	4b2a      	ldr	r3, [pc, #168]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	4a28      	ldr	r2, [pc, #160]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014fe6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8014fe8:	4b27      	ldr	r3, [pc, #156]	; (8015088 <HAL_CAN_MspInit+0x190>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d10d      	bne.n	801500c <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	60fb      	str	r3, [r7, #12]
 8014ff4:	4b25      	ldr	r3, [pc, #148]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff8:	4a24      	ldr	r2, [pc, #144]	; (801508c <HAL_CAN_MspInit+0x194>)
 8014ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8015000:	4b22      	ldr	r3, [pc, #136]	; (801508c <HAL_CAN_MspInit+0x194>)
 8015002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015008:	60fb      	str	r3, [r7, #12]
 801500a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801500c:	2300      	movs	r3, #0
 801500e:	60bb      	str	r3, [r7, #8]
 8015010:	4b1e      	ldr	r3, [pc, #120]	; (801508c <HAL_CAN_MspInit+0x194>)
 8015012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015014:	4a1d      	ldr	r2, [pc, #116]	; (801508c <HAL_CAN_MspInit+0x194>)
 8015016:	f043 0302 	orr.w	r3, r3, #2
 801501a:	6313      	str	r3, [r2, #48]	; 0x30
 801501c:	4b1b      	ldr	r3, [pc, #108]	; (801508c <HAL_CAN_MspInit+0x194>)
 801501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015020:	f003 0302 	and.w	r3, r3, #2
 8015024:	60bb      	str	r3, [r7, #8]
 8015026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8015028:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801502c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801502e:	2302      	movs	r3, #2
 8015030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015032:	2300      	movs	r3, #0
 8015034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015036:	2303      	movs	r3, #3
 8015038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 801503a:	2309      	movs	r3, #9
 801503c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801503e:	f107 031c 	add.w	r3, r7, #28
 8015042:	4619      	mov	r1, r3
 8015044:	4814      	ldr	r0, [pc, #80]	; (8015098 <HAL_CAN_MspInit+0x1a0>)
 8015046:	f011 fc0b 	bl	8026860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 801504a:	2200      	movs	r2, #0
 801504c:	2105      	movs	r1, #5
 801504e:	203f      	movs	r0, #63	; 0x3f
 8015050:	f011 f86c 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8015054:	203f      	movs	r0, #63	; 0x3f
 8015056:	f011 f885 	bl	8026164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 801505a:	2200      	movs	r2, #0
 801505c:	2105      	movs	r1, #5
 801505e:	2040      	movs	r0, #64	; 0x40
 8015060:	f011 f864 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8015064:	2040      	movs	r0, #64	; 0x40
 8015066:	f011 f87d 	bl	8026164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 801506a:	2200      	movs	r2, #0
 801506c:	2105      	movs	r1, #5
 801506e:	2041      	movs	r0, #65	; 0x41
 8015070:	f011 f85c 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8015074:	2041      	movs	r0, #65	; 0x41
 8015076:	f011 f875 	bl	8026164 <HAL_NVIC_EnableIRQ>
}
 801507a:	bf00      	nop
 801507c:	3730      	adds	r7, #48	; 0x30
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	40006400 	.word	0x40006400
 8015088:	2000192c 	.word	0x2000192c
 801508c:	40023800 	.word	0x40023800
 8015090:	40020000 	.word	0x40020000
 8015094:	40006800 	.word	0x40006800
 8015098:	40020400 	.word	0x40020400

0801509c <can1_dbu_status_1_rx_callback>:
#include "programme_functions.h"
#include "programme_queues.h"
#include "canlib_data.h"
#include "canlib_callbacks.h"

void can1_dbu_status_1_rx_callback(dbu_status_1_t *dbu_status_1) {
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80150a4:	2300      	movs	r3, #0
 80150a6:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_drive_queue,
 80150a8:	4b0c      	ldr	r3, [pc, #48]	; (80150dc <can1_dbu_status_1_rx_callback+0x40>)
 80150aa:	6818      	ldr	r0, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f103 0110 	add.w	r1, r3, #16
 80150b2:	f107 020c 	add.w	r2, r7, #12
 80150b6:	2302      	movs	r3, #2
 80150b8:	f015 fab6 	bl	802a628 <xQueueGenericSendFromISR>
			&dbu_status_1->ready_to_drive_button, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d007      	beq.n	80150d2 <can1_dbu_status_1_rx_callback+0x36>
 80150c2:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <can1_dbu_status_1_rx_callback+0x44>)
 80150c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150c8:	601a      	str	r2, [r3, #0]
 80150ca:	f3bf 8f4f 	dsb	sy
 80150ce:	f3bf 8f6f 	isb	sy
}
 80150d2:	bf00      	nop
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	2001b724 	.word	0x2001b724
 80150e0:	e000ed04 	.word	0xe000ed04

080150e4 <can2_ivt_msg_result_i_rx_callback>:

void can2_ivt_msg_result_i_rx_callback(ivt_msg_result_i_t *ivt_msg_result_i) {
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80150ec:	2300      	movs	r3, #0
 80150ee:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_current_queue, &ivt_msg_result_i->i_ts,
 80150f0:	4b0b      	ldr	r3, [pc, #44]	; (8015120 <can2_ivt_msg_result_i_rx_callback+0x3c>)
 80150f2:	6818      	ldr	r0, [r3, #0]
 80150f4:	6879      	ldr	r1, [r7, #4]
 80150f6:	f107 020c 	add.w	r2, r7, #12
 80150fa:	2302      	movs	r3, #2
 80150fc:	f015 fa94 	bl	802a628 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d007      	beq.n	8015116 <can2_ivt_msg_result_i_rx_callback+0x32>
 8015106:	4b07      	ldr	r3, [pc, #28]	; (8015124 <can2_ivt_msg_result_i_rx_callback+0x40>)
 8015108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801510c:	601a      	str	r2, [r3, #0]
 801510e:	f3bf 8f4f 	dsb	sy
 8015112:	f3bf 8f6f 	isb	sy
}
 8015116:	bf00      	nop
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	2001b75c 	.word	0x2001b75c
 8015124:	e000ed04 	.word	0xe000ed04

08015128 <can2_ivt_msg_result_u1_rx_callback>:

void can2_ivt_msg_result_u1_rx_callback(ivt_msg_result_u1_t *ivt_msg_result_u1) {
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015130:	2300      	movs	r3, #0
 8015132:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_voltage_queue,
 8015134:	4b0b      	ldr	r3, [pc, #44]	; (8015164 <can2_ivt_msg_result_u1_rx_callback+0x3c>)
 8015136:	6818      	ldr	r0, [r3, #0]
 8015138:	6879      	ldr	r1, [r7, #4]
 801513a:	f107 020c 	add.w	r2, r7, #12
 801513e:	2302      	movs	r3, #2
 8015140:	f015 fa72 	bl	802a628 <xQueueGenericSendFromISR>
			&ivt_msg_result_u1->u_cells, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d007      	beq.n	801515a <can2_ivt_msg_result_u1_rx_callback+0x32>
 801514a:	4b07      	ldr	r3, [pc, #28]	; (8015168 <can2_ivt_msg_result_u1_rx_callback+0x40>)
 801514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015150:	601a      	str	r2, [r3, #0]
 8015152:	f3bf 8f4f 	dsb	sy
 8015156:	f3bf 8f6f 	isb	sy
}
 801515a:	bf00      	nop
 801515c:	3710      	adds	r7, #16
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	2001b750 	.word	0x2001b750
 8015168:	e000ed04 	.word	0xe000ed04

0801516c <can2_ivt_msg_result_u3_rx_callback>:

void can2_ivt_msg_result_u3_rx_callback(ivt_msg_result_u3_t *ivt_msg_result_u3) {
 801516c:	b580      	push	{r7, lr}
 801516e:	b084      	sub	sp, #16
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015174:	2300      	movs	r3, #0
 8015176:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(vehicle_voltage_queue, &ivt_msg_result_u3->u_vehicle,
 8015178:	4b0b      	ldr	r3, [pc, #44]	; (80151a8 <can2_ivt_msg_result_u3_rx_callback+0x3c>)
 801517a:	6818      	ldr	r0, [r3, #0]
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	f107 020c 	add.w	r2, r7, #12
 8015182:	2302      	movs	r3, #2
 8015184:	f015 fa50 	bl	802a628 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d007      	beq.n	801519e <can2_ivt_msg_result_u3_rx_callback+0x32>
 801518e:	4b07      	ldr	r3, [pc, #28]	; (80151ac <can2_ivt_msg_result_u3_rx_callback+0x40>)
 8015190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015194:	601a      	str	r2, [r3, #0]
 8015196:	f3bf 8f4f 	dsb	sy
 801519a:	f3bf 8f6f 	isb	sy
}
 801519e:	bf00      	nop
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	2001b740 	.word	0x2001b740
 80151ac:	e000ed04 	.word	0xe000ed04

080151b0 <can2_cc_status_rx_callback>:

void can2_cc_status_rx_callback(cc_status_t *cc_status) {
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80151b8:	2300      	movs	r3, #0
 80151ba:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_charge_queue, &cc_status->enable_ams_charging,
 80151bc:	4b0b      	ldr	r3, [pc, #44]	; (80151ec <can2_cc_status_rx_callback+0x3c>)
 80151be:	6818      	ldr	r0, [r3, #0]
 80151c0:	6879      	ldr	r1, [r7, #4]
 80151c2:	f107 020c 	add.w	r2, r7, #12
 80151c6:	2302      	movs	r3, #2
 80151c8:	f015 fa2e 	bl	802a628 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d007      	beq.n	80151e2 <can2_cc_status_rx_callback+0x32>
 80151d2:	4b07      	ldr	r3, [pc, #28]	; (80151f0 <can2_cc_status_rx_callback+0x40>)
 80151d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151d8:	601a      	str	r2, [r3, #0]
 80151da:	f3bf 8f4f 	dsb	sy
 80151de:	f3bf 8f6f 	isb	sy
}
 80151e2:	bf00      	nop
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	2001b738 	.word	0x2001b738
 80151f0:	e000ed04 	.word	0xe000ed04

080151f4 <can2_charger_config_tx_callback>:

uint8_t can2_charger_config_tx_callback(charger_config_t *charger_config) {
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b088      	sub	sp, #32
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
	charger_t charger;
	if (xQueuePeek(charger_queue, &charger, 0)) {
 80151fc:	4b15      	ldr	r3, [pc, #84]	; (8015254 <can2_charger_config_tx_callback+0x60>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	f107 0108 	add.w	r1, r7, #8
 8015204:	2200      	movs	r2, #0
 8015206:	4618      	mov	r0, r3
 8015208:	f015 fbce 	bl	802a9a8 <xQueuePeek>
 801520c:	4603      	mov	r3, r0
 801520e:	2b00      	cmp	r3, #0
 8015210:	d01c      	beq.n	801524c <can2_charger_config_tx_callback+0x58>
		charger_config->msg_set_current_limit = charger.charger_current_limit;
 8015212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015216:	6879      	ldr	r1, [r7, #4]
 8015218:	e9c1 2300 	strd	r2, r3, [r1]
		charger_config->msg_set_voltage_limit = charger.charger_voltage_limit;
 801521c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015220:	6879      	ldr	r1, [r7, #4]
 8015222:	e9c1 2308 	strd	r2, r3, [r1, #32]
		charger_config->msg_set_power_limit = charger.charger_current_limit
 8015226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
				* charger.charger_voltage_limit;
 801522a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801522e:	f7eb f9d5 	bl	80005dc <__aeabi_dmul>
 8015232:	4602      	mov	r2, r0
 8015234:	460b      	mov	r3, r1
		charger_config->msg_set_power_limit = charger.charger_current_limit
 8015236:	6879      	ldr	r1, [r7, #4]
 8015238:	e9c1 2304 	strd	r2, r3, [r1, #16]
		charger_config->msg_set_time_out = 60;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	223c      	movs	r2, #60	; 0x3c
 8015240:	761a      	strb	r2, [r3, #24]
		charger_config->msg_set_enabled = charger.enable_charger;
 8015242:	7e3a      	ldrb	r2, [r7, #24]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	721a      	strb	r2, [r3, #8]
		return 1;
 8015248:	2301      	movs	r3, #1
 801524a:	e7ff      	b.n	801524c <can2_charger_config_tx_callback+0x58>
	}
}
 801524c:	4618      	mov	r0, r3
 801524e:	3720      	adds	r7, #32
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	2001b748 	.word	0x2001b748

08015258 <can1_ams_status_1_tx_callback>:

uint8_t can1_ams_status_1_tx_callback(ams_status_1_t *ams_status_1) {
 8015258:	b580      	push	{r7, lr}
 801525a:	b0a6      	sub	sp, #152	; 0x98
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
	charger_t charger;
	GPIO_t GPIO;
	pPID_t PID;
	CSE_t CSE;

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8015260:	4b7a      	ldr	r3, [pc, #488]	; (801544c <can1_ams_status_1_tx_callback+0x1f4>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8015268:	2200      	movs	r2, #0
 801526a:	4618      	mov	r0, r3
 801526c:	f015 fb9c 	bl	802a9a8 <xQueuePeek>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	f000 80e5 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)
 8015278:	4b75      	ldr	r3, [pc, #468]	; (8015450 <can1_ams_status_1_tx_callback+0x1f8>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015280:	2200      	movs	r2, #0
 8015282:	4618      	mov	r0, r3
 8015284:	f015 fb90 	bl	802a9a8 <xQueuePeek>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	f000 80d9 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(temperatures_queue, &temperatures, 0)
 8015290:	4b70      	ldr	r3, [pc, #448]	; (8015454 <can1_ams_status_1_tx_callback+0x1fc>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8015298:	2200      	movs	r2, #0
 801529a:	4618      	mov	r0, r3
 801529c:	f015 fb84 	bl	802a9a8 <xQueuePeek>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f000 80cd 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(charger_queue, &charger, 0)
 80152a8:	4b6b      	ldr	r3, [pc, #428]	; (8015458 <can1_ams_status_1_tx_callback+0x200>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80152b0:	2200      	movs	r2, #0
 80152b2:	4618      	mov	r0, r3
 80152b4:	f015 fb78 	bl	802a9a8 <xQueuePeek>
 80152b8:	4603      	mov	r3, r0
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 80c1 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(GPIO_queue, &GPIO, 0)
 80152c0:	4b66      	ldr	r3, [pc, #408]	; (801545c <can1_ams_status_1_tx_callback+0x204>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80152c8:	2200      	movs	r2, #0
 80152ca:	4618      	mov	r0, r3
 80152cc:	f015 fb6c 	bl	802a9a8 <xQueuePeek>
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 80b5 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(PID_queue, &PID, 0)
 80152d8:	4b61      	ldr	r3, [pc, #388]	; (8015460 <can1_ams_status_1_tx_callback+0x208>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	f107 0118 	add.w	r1, r7, #24
 80152e0:	2200      	movs	r2, #0
 80152e2:	4618      	mov	r0, r3
 80152e4:	f015 fb60 	bl	802a9a8 <xQueuePeek>
 80152e8:	4603      	mov	r3, r0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	f000 80a9 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(CSE_queue, &CSE, 0)) {
 80152f0:	4b5c      	ldr	r3, [pc, #368]	; (8015464 <can1_ams_status_1_tx_callback+0x20c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	f107 0108 	add.w	r1, r7, #8
 80152f8:	2200      	movs	r2, #0
 80152fa:	4618      	mov	r0, r3
 80152fc:	f015 fb54 	bl	802a9a8 <xQueuePeek>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	f000 809d 	beq.w	8015442 <can1_ams_status_1_tx_callback+0x1ea>
		maximum_cell_temperature = cell_temperatures[0];
 8015308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801530e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		minimum_cell_temperature = cell_temperatures[0];
 8015312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015318:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		maximum_cell_voltage = cell_voltages[0];
 801531c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015322:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		minimum_cell_voltage = cell_voltages[0];
 8015326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801532c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (int i = 0; i < 126; i++) {
 8015330:	2300      	movs	r3, #0
 8015332:	677b      	str	r3, [r7, #116]	; 0x74
 8015334:	e03e      	b.n	80153b4 <can1_ams_status_1_tx_callback+0x15c>
			if (maximum_cell_temperature < cell_temperatures[0]) {
 8015336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8015340:	f7eb fbbe 	bl	8000ac0 <__aeabi_dcmplt>
 8015344:	4603      	mov	r3, r0
 8015346:	2b00      	cmp	r3, #0
 8015348:	d004      	beq.n	8015354 <can1_ams_status_1_tx_callback+0xfc>
				maximum_cell_temperature = cell_temperatures[0];
 801534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015350:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			}
			if (minimum_cell_temperature > cell_temperatures[0]) {
 8015354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801535e:	f7eb fbcd 	bl	8000afc <__aeabi_dcmpgt>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d004      	beq.n	8015372 <can1_ams_status_1_tx_callback+0x11a>
				minimum_cell_temperature = cell_temperatures[0];
 8015368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			}
			if (maximum_cell_voltage < cell_voltages[0]) {
 8015372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015378:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801537c:	f7eb fba0 	bl	8000ac0 <__aeabi_dcmplt>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	d004      	beq.n	8015390 <can1_ams_status_1_tx_callback+0x138>
				maximum_cell_voltage = cell_voltages[0];
 8015386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			}
			if (minimum_cell_voltage > cell_voltages[0]) {
 8015390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015396:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801539a:	f7eb fbaf 	bl	8000afc <__aeabi_dcmpgt>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d004      	beq.n	80153ae <can1_ams_status_1_tx_callback+0x156>
				minimum_cell_voltage = cell_voltages[0];
 80153a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80153a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153aa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (int i = 0; i < 126; i++) {
 80153ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153b0:	3301      	adds	r3, #1
 80153b2:	677b      	str	r3, [r7, #116]	; 0x74
 80153b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153b6:	2b7d      	cmp	r3, #125	; 0x7d
 80153b8:	ddbd      	ble.n	8015336 <can1_ams_status_1_tx_callback+0xde>
			}

		}

		ams_status_1->air1_closed = GPIO.AIR_minus_closed;
 80153ba:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	701a      	strb	r2, [r3, #0]
		ams_status_1->air2_closed = GPIO.AIR_plus_closed;
 80153c2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	705a      	strb	r2, [r3, #1]
		ams_status_1->ams_error = GPIO.AMS_error_latched;
 80153ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	709a      	strb	r2, [r3, #2]
		ams_status_1->imd_error = GPIO.IMD_error_latched;
 80153d2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	741a      	strb	r2, [r3, #16]
		ams_status_1->charging_status = charger.enable_charger;
 80153da:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	70da      	strb	r2, [r3, #3]
		ams_status_1->fan_speed = PID.duty_cycle;
 80153e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ams_status_1->max_cell_temperature = maximum_cell_temperature;
 80153ec:	6879      	ldr	r1, [r7, #4]
 80153ee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80153f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ams_status_1->max_cell_voltage = maximum_cell_voltage;
 80153f6:	6879      	ldr	r1, [r7, #4]
 80153f8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80153fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_status_1->min_cell_temperature = minimum_cell_temperature;
 8015400:	6879      	ldr	r1, [r7, #4]
 8015402:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8015406:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_status_1->min_cell_voltage = minimum_cell_voltage;
 801540a:	6879      	ldr	r1, [r7, #4]
 801540c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8015410:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		ams_status_1->pre_charge_status = 1;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2201      	movs	r2, #1
 8015418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		ams_status_1->sc_closed = GPIO.SC_probe;
 801541c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		ams_status_1->state_of_charge = CSE.SOC * 100;
 8015426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801542a:	f04f 0200 	mov.w	r2, #0
 801542e:	4b0e      	ldr	r3, [pc, #56]	; (8015468 <can1_ams_status_1_tx_callback+0x210>)
 8015430:	f7eb f8d4 	bl	80005dc <__aeabi_dmul>
 8015434:	4602      	mov	r2, r0
 8015436:	460b      	mov	r3, r1
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		return 1;
 801543e:	2301      	movs	r3, #1
 8015440:	e000      	b.n	8015444 <can1_ams_status_1_tx_callback+0x1ec>
	} else {
		return 0;
 8015442:	2300      	movs	r3, #0
	}

}
 8015444:	4618      	mov	r0, r3
 8015446:	3798      	adds	r7, #152	; 0x98
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	2001b720 	.word	0x2001b720
 8015450:	2001b73c 	.word	0x2001b73c
 8015454:	2001b72c 	.word	0x2001b72c
 8015458:	2001b748 	.word	0x2001b748
 801545c:	2001b74c 	.word	0x2001b74c
 8015460:	2001b744 	.word	0x2001b744
 8015464:	2001b758 	.word	0x2001b758
 8015468:	40590000 	.word	0x40590000

0801546c <can1_ams_temperatures_tx_callback>:

uint8_t can1_ams_temperatures_tx_callback(ams_temperatures_t *ams_temperatures) {
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
	return xQueuePeek(temperatures_queue, &ams_temperatures->aux_1_temperature,
 8015474:	4b06      	ldr	r3, [pc, #24]	; (8015490 <can1_ams_temperatures_tx_callback+0x24>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	6879      	ldr	r1, [r7, #4]
 801547a:	2200      	movs	r2, #0
 801547c:	4618      	mov	r0, r3
 801547e:	f015 fa93 	bl	802a9a8 <xQueuePeek>
 8015482:	4603      	mov	r3, r0
 8015484:	b2db      	uxtb	r3, r3
			0);
}
 8015486:	4618      	mov	r0, r3
 8015488:	3708      	adds	r7, #8
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	2001b72c 	.word	0x2001b72c

08015494 <can1_ams_cell_voltages_tx_callback>:

uint8_t can1_ams_cell_voltages_tx_callback(
		ams_cell_voltages_t *ams_cell_voltages) {
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_voltages_queue, &ams_cell_voltages->v1s1, 0);
 801549c:	4b06      	ldr	r3, [pc, #24]	; (80154b8 <can1_ams_cell_voltages_tx_callback+0x24>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	4618      	mov	r0, r3
 80154a6:	f015 fa7f 	bl	802a9a8 <xQueuePeek>
 80154aa:	4603      	mov	r3, r0
 80154ac:	b2db      	uxtb	r3, r3
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3708      	adds	r7, #8
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	2001b720 	.word	0x2001b720

080154bc <can1_ams_cell_temperatures_tx_callback>:

uint8_t can1_ams_cell_temperatures_tx_callback(
		ams_cell_temperatures_t *ams_cell_temperatures) {
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_temperatures_queue, &ams_cell_temperatures->t1s1, 0);
 80154c4:	4b06      	ldr	r3, [pc, #24]	; (80154e0 <can1_ams_cell_temperatures_tx_callback+0x24>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	6879      	ldr	r1, [r7, #4]
 80154ca:	2200      	movs	r2, #0
 80154cc:	4618      	mov	r0, r3
 80154ce:	f015 fa6b 	bl	802a9a8 <xQueuePeek>
 80154d2:	4603      	mov	r3, r0
 80154d4:	b2db      	uxtb	r3, r3
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	2001b73c 	.word	0x2001b73c

080154e4 <can2_ivt_msg_result_i_tx_callback>:
#include "canlib_data.h"
#include "canlib_callbacks.h"
#include "SIM0.h"


uint8_t can2_ivt_msg_result_i_tx_callback(ivt_msg_result_i_t* ivt_msg_result_i){
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
	ivt_msg_result_i->i_ts = SIM0_Y.current;
 80154ec:	4b06      	ldr	r3, [pc, #24]	; (8015508 <can2_ivt_msg_result_i_tx_callback+0x24>)
 80154ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80154f2:	6879      	ldr	r1, [r7, #4]
 80154f4:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 80154f8:	2301      	movs	r3, #1
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	370c      	adds	r7, #12
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
 8015506:	bf00      	nop
 8015508:	2001db00 	.word	0x2001db00

0801550c <can2_ivt_msg_result_u1_tx_callback>:

uint8_t can2_ivt_msg_result_u1_tx_callback(ivt_msg_result_u1_t* ivt_msg_result_u1) {
 801550c:	b480      	push	{r7}
 801550e:	b083      	sub	sp, #12
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u1->u_cells = SIM0_Y.accumulator_voltage;
 8015514:	4b06      	ldr	r3, [pc, #24]	; (8015530 <can2_ivt_msg_result_u1_tx_callback+0x24>)
 8015516:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801551a:	6879      	ldr	r1, [r7, #4]
 801551c:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015520:	2301      	movs	r3, #1
}
 8015522:	4618      	mov	r0, r3
 8015524:	370c      	adds	r7, #12
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop
 8015530:	2001db00 	.word	0x2001db00

08015534 <can2_ivt_msg_result_u3_tx_callback>:

uint8_t can2_ivt_msg_result_u3_tx_callback(ivt_msg_result_u3_t* ivt_msg_result_u3) {
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u3->u_vehicle = SIM0_Y.vehicle_voltage;
 801553c:	4b06      	ldr	r3, [pc, #24]	; (8015558 <can2_ivt_msg_result_u3_tx_callback+0x24>)
 801553e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8015542:	6879      	ldr	r1, [r7, #4]
 8015544:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015548:	2301      	movs	r3, #1
}
 801554a:	4618      	mov	r0, r3
 801554c:	370c      	adds	r7, #12
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr
 8015556:	bf00      	nop
 8015558:	2001db00 	.word	0x2001db00

0801555c <can1_dbu_status_1_tx_callback>:
uint8_t can2_cc_status_tx_callback(cc_status_t* cc_status) {
	cc_status->enable_ams_charging = 0;
	return 1;
}

uint8_t can1_dbu_status_1_tx_callback(dbu_status_1_t* dbu_status_1) {
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
	dbu_status_1->activate_ts_button = 0;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2200      	movs	r2, #0
 8015568:	701a      	strb	r2, [r3, #0]
	return 1;
 801556a:	2301      	movs	r3, #1
}
 801556c:	4618      	mov	r0, r3
 801556e:	370c      	adds	r7, #12
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr

08015578 <can2_charger_config_rx_callback>:

void can2_charger_config_rx_callback(charger_config_t *charger_config) {
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
	SIM0_U.CurrentLimit = charger_config->msg_set_current_limit;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015586:	490b      	ldr	r1, [pc, #44]	; (80155b4 <can2_charger_config_rx_callback+0x3c>)
 8015588:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	SIM0_U.VoltageLimit = charger_config->msg_set_voltage_limit;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015592:	4908      	ldr	r1, [pc, #32]	; (80155b4 <can2_charger_config_rx_callback+0x3c>)
 8015594:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	SIM0_U.EnableCharge = charger_config->msg_set_enabled;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	7a1b      	ldrb	r3, [r3, #8]
 801559c:	4618      	mov	r0, r3
 801559e:	f7ea ffa3 	bl	80004e8 <__aeabi_ui2d>
 80155a2:	4602      	mov	r2, r0
 80155a4:	460b      	mov	r3, r1
 80155a6:	4903      	ldr	r1, [pc, #12]	; (80155b4 <can2_charger_config_rx_callback+0x3c>)
 80155a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80155ac:	bf00      	nop
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	2001e8f8 	.word	0x2001e8f8

080155b8 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 80155b8:	b480      	push	{r7}
 80155ba:	b085      	sub	sp, #20
 80155bc:	af00      	add	r7, sp, #0
 80155be:	4603      	mov	r3, r0
 80155c0:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 80155c2:	79fb      	ldrb	r3, [r7, #7]
 80155c4:	4a0a      	ldr	r2, [pc, #40]	; (80155f0 <swap+0x38>)
 80155c6:	5cd3      	ldrb	r3, [r2, r3]
 80155c8:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 80155ca:	79fb      	ldrb	r3, [r7, #7]
 80155cc:	1e5a      	subs	r2, r3, #1
 80155ce:	79fb      	ldrb	r3, [r7, #7]
 80155d0:	4907      	ldr	r1, [pc, #28]	; (80155f0 <swap+0x38>)
 80155d2:	5c89      	ldrb	r1, [r1, r2]
 80155d4:	4a06      	ldr	r2, [pc, #24]	; (80155f0 <swap+0x38>)
 80155d6:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 80155d8:	79fb      	ldrb	r3, [r7, #7]
 80155da:	3b01      	subs	r3, #1
 80155dc:	4904      	ldr	r1, [pc, #16]	; (80155f0 <swap+0x38>)
 80155de:	7bfa      	ldrb	r2, [r7, #15]
 80155e0:	54ca      	strb	r2, [r1, r3]
}
 80155e2:	bf00      	nop
 80155e4:	3714      	adds	r7, #20
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	20000004 	.word	0x20000004

080155f4 <compare>:

uint8_t compare(uint8_t g) {
 80155f4:	b590      	push	{r4, r7, lr}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	4603      	mov	r3, r0
 80155fc:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 80155fe:	4b10      	ldr	r3, [pc, #64]	; (8015640 <compare+0x4c>)
 8015600:	681a      	ldr	r2, [r3, #0]
 8015602:	79fb      	ldrb	r3, [r7, #7]
 8015604:	490f      	ldr	r1, [pc, #60]	; (8015644 <compare+0x50>)
 8015606:	5ccb      	ldrb	r3, [r1, r3]
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	4413      	add	r3, r2
 801560c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015610:	4b0b      	ldr	r3, [pc, #44]	; (8015640 <compare+0x4c>)
 8015612:	681a      	ldr	r2, [r3, #0]
 8015614:	79fb      	ldrb	r3, [r7, #7]
 8015616:	3b01      	subs	r3, #1
 8015618:	4c0a      	ldr	r4, [pc, #40]	; (8015644 <compare+0x50>)
 801561a:	5ce3      	ldrb	r3, [r4, r3]
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	4413      	add	r3, r2
 8015620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015624:	2401      	movs	r4, #1
 8015626:	f7eb fa4b 	bl	8000ac0 <__aeabi_dcmplt>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d101      	bne.n	8015634 <compare+0x40>
 8015630:	2300      	movs	r3, #0
 8015632:	461c      	mov	r4, r3
 8015634:	b2e3      	uxtb	r3, r4
}
 8015636:	4618      	mov	r0, r3
 8015638:	370c      	adds	r7, #12
 801563a:	46bd      	mov	sp, r7
 801563c:	bd90      	pop	{r4, r7, pc}
 801563e:	bf00      	nop
 8015640:	2001b8bc 	.word	0x2001b8bc
 8015644:	20000004 	.word	0x20000004

08015648 <gnome_sort>:

void gnome_sort() {
 8015648:	b580      	push	{r7, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 801564e:	2300      	movs	r3, #0
 8015650:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015652:	e014      	b.n	801567e <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8015654:	79fb      	ldrb	r3, [r7, #7]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d006      	beq.n	8015668 <gnome_sort+0x20>
 801565a:	79fb      	ldrb	r3, [r7, #7]
 801565c:	4618      	mov	r0, r3
 801565e:	f7ff ffc9 	bl	80155f4 <compare>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d003      	beq.n	8015670 <gnome_sort+0x28>
			gnome++;
 8015668:	79fb      	ldrb	r3, [r7, #7]
 801566a:	3301      	adds	r3, #1
 801566c:	71fb      	strb	r3, [r7, #7]
 801566e:	e006      	b.n	801567e <gnome_sort+0x36>
		} else {
			swap(gnome);
 8015670:	79fb      	ldrb	r3, [r7, #7]
 8015672:	4618      	mov	r0, r3
 8015674:	f7ff ffa0 	bl	80155b8 <swap>
			gnome--;
 8015678:	79fb      	ldrb	r3, [r7, #7]
 801567a:	3b01      	subs	r3, #1
 801567c:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 801567e:	79fb      	ldrb	r3, [r7, #7]
 8015680:	2b7d      	cmp	r3, #125	; 0x7d
 8015682:	d9e7      	bls.n	8015654 <gnome_sort+0xc>
		}
	}
}
 8015684:	bf00      	nop
 8015686:	bf00      	nop
 8015688:	3708      	adds	r7, #8
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
	...

08015690 <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8015696:	4b19      	ldr	r3, [pc, #100]	; (80156fc <do_cell_balancing+0x6c>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2200      	movs	r2, #0
 801569c:	4918      	ldr	r1, [pc, #96]	; (8015700 <do_cell_balancing+0x70>)
 801569e:	4618      	mov	r0, r3
 80156a0:	f015 f982 	bl	802a9a8 <xQueuePeek>
 80156a4:	4603      	mov	r3, r0
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d023      	beq.n	80156f2 <do_cell_balancing+0x62>
		gnome_sort();
 80156aa:	f7ff ffcd 	bl	8015648 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 80156ae:	2300      	movs	r3, #0
 80156b0:	607b      	str	r3, [r7, #4]
 80156b2:	e009      	b.n	80156c8 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	2200      	movs	r2, #0
 80156ba:	4619      	mov	r1, r3
 80156bc:	2000      	movs	r0, #0
 80156be:	f001 fda7 	bl	8017210 <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	3301      	adds	r3, #1
 80156c6:	607b      	str	r3, [r7, #4]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b7d      	cmp	r3, #125	; 0x7d
 80156cc:	ddf2      	ble.n	80156b4 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 80156ce:	2300      	movs	r3, #0
 80156d0:	603b      	str	r3, [r7, #0]
 80156d2:	e00b      	b.n	80156ec <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 80156d4:	4a0b      	ldr	r2, [pc, #44]	; (8015704 <do_cell_balancing+0x74>)
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	4413      	add	r3, r2
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	2200      	movs	r2, #0
 80156de:	4619      	mov	r1, r3
 80156e0:	2001      	movs	r0, #1
 80156e2:	f001 fd95 	bl	8017210 <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	3301      	adds	r3, #1
 80156ea:	603b      	str	r3, [r7, #0]
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	2b28      	cmp	r3, #40	; 0x28
 80156f0:	ddf0      	ble.n	80156d4 <do_cell_balancing+0x44>

		}
	}
	return 1;
 80156f2:	2301      	movs	r3, #1
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}
 80156fc:	2001b720 	.word	0x2001b720
 8015700:	2001b8bc 	.word	0x2001b8bc
 8015704:	20000004 	.word	0x20000004

08015708 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 801570e:	2300      	movs	r3, #0
 8015710:	607b      	str	r3, [r7, #4]
 8015712:	e009      	b.n	8015728 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	b2db      	uxtb	r3, r3
 8015718:	2200      	movs	r2, #0
 801571a:	4619      	mov	r1, r3
 801571c:	2000      	movs	r0, #0
 801571e:	f001 fd77 	bl	8017210 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	3301      	adds	r3, #1
 8015726:	607b      	str	r3, [r7, #4]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b7d      	cmp	r3, #125	; 0x7d
 801572c:	ddf2      	ble.n	8015714 <end_cell_balancing+0xc>
	}
	return 1;
 801572e:	2301      	movs	r3, #1
}
 8015730:	4618      	mov	r0, r3
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801573e:	2300      	movs	r3, #0
 8015740:	607b      	str	r3, [r7, #4]
 8015742:	4b0c      	ldr	r3, [pc, #48]	; (8015774 <MX_DMA_Init+0x3c>)
 8015744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015746:	4a0b      	ldr	r2, [pc, #44]	; (8015774 <MX_DMA_Init+0x3c>)
 8015748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801574c:	6313      	str	r3, [r2, #48]	; 0x30
 801574e:	4b09      	ldr	r3, [pc, #36]	; (8015774 <MX_DMA_Init+0x3c>)
 8015750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015756:	607b      	str	r3, [r7, #4]
 8015758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 801575a:	2200      	movs	r2, #0
 801575c:	2105      	movs	r1, #5
 801575e:	2038      	movs	r0, #56	; 0x38
 8015760:	f010 fce4 	bl	802612c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8015764:	2038      	movs	r0, #56	; 0x38
 8015766:	f010 fcfd 	bl	8026164 <HAL_NVIC_EnableIRQ>

}
 801576a:	bf00      	nop
 801576c:	3708      	adds	r7, #8
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
 8015772:	bf00      	nop
 8015774:	40023800 	.word	0x40023800

08015778 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b08a      	sub	sp, #40	; 0x28
 801577c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801577e:	f107 0314 	add.w	r3, r7, #20
 8015782:	2200      	movs	r2, #0
 8015784:	601a      	str	r2, [r3, #0]
 8015786:	605a      	str	r2, [r3, #4]
 8015788:	609a      	str	r2, [r3, #8]
 801578a:	60da      	str	r2, [r3, #12]
 801578c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801578e:	2300      	movs	r3, #0
 8015790:	613b      	str	r3, [r7, #16]
 8015792:	4b5c      	ldr	r3, [pc, #368]	; (8015904 <MX_GPIO_Init+0x18c>)
 8015794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015796:	4a5b      	ldr	r2, [pc, #364]	; (8015904 <MX_GPIO_Init+0x18c>)
 8015798:	f043 0310 	orr.w	r3, r3, #16
 801579c:	6313      	str	r3, [r2, #48]	; 0x30
 801579e:	4b59      	ldr	r3, [pc, #356]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a2:	f003 0310 	and.w	r3, r3, #16
 80157a6:	613b      	str	r3, [r7, #16]
 80157a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80157aa:	2300      	movs	r3, #0
 80157ac:	60fb      	str	r3, [r7, #12]
 80157ae:	4b55      	ldr	r3, [pc, #340]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157b2:	4a54      	ldr	r2, [pc, #336]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157b4:	f043 0304 	orr.w	r3, r3, #4
 80157b8:	6313      	str	r3, [r2, #48]	; 0x30
 80157ba:	4b52      	ldr	r3, [pc, #328]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157be:	f003 0304 	and.w	r3, r3, #4
 80157c2:	60fb      	str	r3, [r7, #12]
 80157c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80157c6:	2300      	movs	r3, #0
 80157c8:	60bb      	str	r3, [r7, #8]
 80157ca:	4b4e      	ldr	r3, [pc, #312]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ce:	4a4d      	ldr	r2, [pc, #308]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157d0:	f043 0301 	orr.w	r3, r3, #1
 80157d4:	6313      	str	r3, [r2, #48]	; 0x30
 80157d6:	4b4b      	ldr	r3, [pc, #300]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157da:	f003 0301 	and.w	r3, r3, #1
 80157de:	60bb      	str	r3, [r7, #8]
 80157e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80157e2:	2300      	movs	r3, #0
 80157e4:	607b      	str	r3, [r7, #4]
 80157e6:	4b47      	ldr	r3, [pc, #284]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ea:	4a46      	ldr	r2, [pc, #280]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157ec:	f043 0302 	orr.w	r3, r3, #2
 80157f0:	6313      	str	r3, [r2, #48]	; 0x30
 80157f2:	4b44      	ldr	r3, [pc, #272]	; (8015904 <MX_GPIO_Init+0x18c>)
 80157f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157f6:	f003 0302 	and.w	r3, r3, #2
 80157fa:	607b      	str	r3, [r7, #4]
 80157fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 80157fe:	2200      	movs	r2, #0
 8015800:	210e      	movs	r1, #14
 8015802:	4841      	ldr	r0, [pc, #260]	; (8015908 <MX_GPIO_Init+0x190>)
 8015804:	f011 f9c8 	bl	8026b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8015808:	2200      	movs	r2, #0
 801580a:	21e0      	movs	r1, #224	; 0xe0
 801580c:	483f      	ldr	r0, [pc, #252]	; (801590c <MX_GPIO_Init+0x194>)
 801580e:	f011 f9c3 	bl	8026b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8015812:	2200      	movs	r2, #0
 8015814:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8015818:	483d      	ldr	r0, [pc, #244]	; (8015910 <MX_GPIO_Init+0x198>)
 801581a:	f011 f9bd 	bl	8026b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 801581e:	230e      	movs	r3, #14
 8015820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015822:	2301      	movs	r3, #1
 8015824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015826:	2300      	movs	r3, #0
 8015828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801582a:	2300      	movs	r3, #0
 801582c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801582e:	f107 0314 	add.w	r3, r7, #20
 8015832:	4619      	mov	r1, r3
 8015834:	4834      	ldr	r0, [pc, #208]	; (8015908 <MX_GPIO_Init+0x190>)
 8015836:	f011 f813 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 801583a:	2370      	movs	r3, #112	; 0x70
 801583c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801583e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8015842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015844:	2300      	movs	r3, #0
 8015846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015848:	f107 0314 	add.w	r3, r7, #20
 801584c:	4619      	mov	r1, r3
 801584e:	482e      	ldr	r0, [pc, #184]	; (8015908 <MX_GPIO_Init+0x190>)
 8015850:	f011 f806 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8015854:	23e0      	movs	r3, #224	; 0xe0
 8015856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015858:	2301      	movs	r3, #1
 801585a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801585c:	2300      	movs	r3, #0
 801585e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015860:	2300      	movs	r3, #0
 8015862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015864:	f107 0314 	add.w	r3, r7, #20
 8015868:	4619      	mov	r1, r3
 801586a:	4828      	ldr	r0, [pc, #160]	; (801590c <MX_GPIO_Init+0x194>)
 801586c:	f010 fff8 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8015870:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8015874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015876:	2301      	movs	r3, #1
 8015878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801587a:	2300      	movs	r3, #0
 801587c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801587e:	2300      	movs	r3, #0
 8015880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015882:	f107 0314 	add.w	r3, r7, #20
 8015886:	4619      	mov	r1, r3
 8015888:	4821      	ldr	r0, [pc, #132]	; (8015910 <MX_GPIO_Init+0x198>)
 801588a:	f010 ffe9 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_probe_Pin;
 801588e:	2302      	movs	r3, #2
 8015890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015892:	2300      	movs	r3, #0
 8015894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015896:	2300      	movs	r3, #0
 8015898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC_probe_GPIO_Port, &GPIO_InitStruct);
 801589a:	f107 0314 	add.w	r3, r7, #20
 801589e:	4619      	mov	r1, r3
 80158a0:	481c      	ldr	r0, [pc, #112]	; (8015914 <MX_GPIO_Init+0x19c>)
 80158a2:	f010 ffdd 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_ok_Pin;
 80158a6:	2304      	movs	r3, #4
 80158a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80158aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80158ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158b0:	2300      	movs	r3, #0
 80158b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_ok_GPIO_Port, &GPIO_InitStruct);
 80158b4:	f107 0314 	add.w	r3, r7, #20
 80158b8:	4619      	mov	r1, r3
 80158ba:	4816      	ldr	r0, [pc, #88]	; (8015914 <MX_GPIO_Init+0x19c>)
 80158bc:	f010 ffd0 	bl	8026860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 80158c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80158c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80158c6:	2300      	movs	r3, #0
 80158c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158ca:	2300      	movs	r3, #0
 80158cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80158ce:	f107 0314 	add.w	r3, r7, #20
 80158d2:	4619      	mov	r1, r3
 80158d4:	480e      	ldr	r0, [pc, #56]	; (8015910 <MX_GPIO_Init+0x198>)
 80158d6:	f010 ffc3 	bl	8026860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80158da:	2200      	movs	r2, #0
 80158dc:	2105      	movs	r1, #5
 80158de:	200a      	movs	r0, #10
 80158e0:	f010 fc24 	bl	802612c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80158e4:	200a      	movs	r0, #10
 80158e6:	f010 fc3d 	bl	8026164 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80158ea:	2200      	movs	r2, #0
 80158ec:	2105      	movs	r1, #5
 80158ee:	2017      	movs	r0, #23
 80158f0:	f010 fc1c 	bl	802612c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80158f4:	2017      	movs	r0, #23
 80158f6:	f010 fc35 	bl	8026164 <HAL_NVIC_EnableIRQ>

}
 80158fa:	bf00      	nop
 80158fc:	3728      	adds	r7, #40	; 0x28
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	40023800 	.word	0x40023800
 8015908:	40021000 	.word	0x40021000
 801590c:	40020000 	.word	0x40020000
 8015910:	40020800 	.word	0x40020800
 8015914:	40020400 	.word	0x40020400

08015918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

/* RELAY MONITORING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	80fb      	strh	r3, [r7, #6]
#ifdef SIMULATION
	switch (GPIO_Pin) {
 8015922:	88fb      	ldrh	r3, [r7, #6]
 8015924:	2b40      	cmp	r3, #64	; 0x40
 8015926:	d014      	beq.n	8015952 <HAL_GPIO_EXTI_Callback+0x3a>
 8015928:	2b40      	cmp	r3, #64	; 0x40
 801592a:	dc56      	bgt.n	80159da <HAL_GPIO_EXTI_Callback+0xc2>
 801592c:	2b20      	cmp	r3, #32
 801592e:	d025      	beq.n	801597c <HAL_GPIO_EXTI_Callback+0x64>
 8015930:	2b20      	cmp	r3, #32
 8015932:	dc52      	bgt.n	80159da <HAL_GPIO_EXTI_Callback+0xc2>
 8015934:	2b04      	cmp	r3, #4
 8015936:	d002      	beq.n	801593e <HAL_GPIO_EXTI_Callback+0x26>
 8015938:	2b10      	cmp	r3, #16
 801593a:	d035      	beq.n	80159a8 <HAL_GPIO_EXTI_Callback+0x90>
			__raise_ams_error(ERROR_AIR_PLUS);
		}
		break;
	}
#endif
}
 801593c:	e04d      	b.n	80159da <HAL_GPIO_EXTI_Callback+0xc2>
		_GPIO.IMD_ok = get_imd_ok_ext();
 801593e:	f001 fc5f 	bl	8017200 <get_imd_ok_ext>
 8015942:	4603      	mov	r3, r0
 8015944:	b2da      	uxtb	r2, r3
 8015946:	4b27      	ldr	r3, [pc, #156]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015948:	70da      	strb	r2, [r3, #3]
		__raise_imd_error(ERROR_IMD);
 801594a:	2002      	movs	r0, #2
 801594c:	f000 faf6 	bl	8015f3c <__raise_imd_error>
		break;
 8015950:	e043      	b.n	80159da <HAL_GPIO_EXTI_Callback+0xc2>
		_GPIO.precharge_closed = get_precharge_ext();
 8015952:	f001 fbe5 	bl	8017120 <get_precharge_ext>
 8015956:	4603      	mov	r3, r0
 8015958:	b2da      	uxtb	r2, r3
 801595a:	4b22      	ldr	r3, [pc, #136]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 801595c:	711a      	strb	r2, [r3, #4]
		_GPIO.enable_AIR_minus = get_set_precharge_ext();
 801595e:	f001 fbef 	bl	8017140 <get_set_precharge_ext>
 8015962:	4603      	mov	r3, r0
 8015964:	b2da      	uxtb	r2, r3
 8015966:	4b1f      	ldr	r3, [pc, #124]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015968:	721a      	strb	r2, [r3, #8]
		if (_GPIO.precharge_closed != _GPIO.enable_precharge) {
 801596a:	4b1e      	ldr	r3, [pc, #120]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 801596c:	791a      	ldrb	r2, [r3, #4]
 801596e:	4b1d      	ldr	r3, [pc, #116]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015970:	79db      	ldrb	r3, [r3, #7]
 8015972:	429a      	cmp	r2, r3
 8015974:	d002      	beq.n	801597c <HAL_GPIO_EXTI_Callback+0x64>
			__raise_ams_error(ERROR_PRECHARGE);
 8015976:	202b      	movs	r0, #43	; 0x2b
 8015978:	f000 fac6 	bl	8015f08 <__raise_ams_error>
		_GPIO.AIR_minus_closed = get_air_minus_ext();
 801597c:	f001 fb9c 	bl	80170b8 <get_air_minus_ext>
 8015980:	4603      	mov	r3, r0
 8015982:	b2da      	uxtb	r2, r3
 8015984:	4b17      	ldr	r3, [pc, #92]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015986:	715a      	strb	r2, [r3, #5]
		_GPIO.enable_AIR_minus = get_set_air_minus_ext();
 8015988:	f001 fba6 	bl	80170d8 <get_set_air_minus_ext>
 801598c:	4603      	mov	r3, r0
 801598e:	b2da      	uxtb	r2, r3
 8015990:	4b14      	ldr	r3, [pc, #80]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015992:	721a      	strb	r2, [r3, #8]
		if (_GPIO.AIR_minus_closed != _GPIO.enable_AIR_minus) {
 8015994:	4b13      	ldr	r3, [pc, #76]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8015996:	795a      	ldrb	r2, [r3, #5]
 8015998:	4b12      	ldr	r3, [pc, #72]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 801599a:	7a1b      	ldrb	r3, [r3, #8]
 801599c:	429a      	cmp	r2, r3
 801599e:	d019      	beq.n	80159d4 <HAL_GPIO_EXTI_Callback+0xbc>
			__raise_ams_error(ERROR_AIR_MINUS);
 80159a0:	2029      	movs	r0, #41	; 0x29
 80159a2:	f000 fab1 	bl	8015f08 <__raise_ams_error>
		break;
 80159a6:	e015      	b.n	80159d4 <HAL_GPIO_EXTI_Callback+0xbc>
		_GPIO.AIR_plus_closed = get_air_plus_ext();
 80159a8:	f001 fb52 	bl	8017050 <get_air_plus_ext>
 80159ac:	4603      	mov	r3, r0
 80159ae:	b2da      	uxtb	r2, r3
 80159b0:	4b0c      	ldr	r3, [pc, #48]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80159b2:	719a      	strb	r2, [r3, #6]
		_GPIO.enable_AIR_plus = get_set_air_plus_ext();
 80159b4:	f001 fb5c 	bl	8017070 <get_set_air_plus_ext>
 80159b8:	4603      	mov	r3, r0
 80159ba:	b2da      	uxtb	r2, r3
 80159bc:	4b09      	ldr	r3, [pc, #36]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80159be:	725a      	strb	r2, [r3, #9]
		if (_GPIO.AIR_plus_closed != _GPIO.enable_AIR_plus) {
 80159c0:	4b08      	ldr	r3, [pc, #32]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80159c2:	799a      	ldrb	r2, [r3, #6]
 80159c4:	4b07      	ldr	r3, [pc, #28]	; (80159e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80159c6:	7a5b      	ldrb	r3, [r3, #9]
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d005      	beq.n	80159d8 <HAL_GPIO_EXTI_Callback+0xc0>
			__raise_ams_error(ERROR_AIR_PLUS);
 80159cc:	202a      	movs	r0, #42	; 0x2a
 80159ce:	f000 fa9b 	bl	8015f08 <__raise_ams_error>
		break;
 80159d2:	e001      	b.n	80159d8 <HAL_GPIO_EXTI_Callback+0xc0>
		break;
 80159d4:	bf00      	nop
 80159d6:	e000      	b.n	80159da <HAL_GPIO_EXTI_Callback+0xc2>
		break;
 80159d8:	bf00      	nop
}
 80159da:	bf00      	nop
 80159dc:	3708      	adds	r7, #8
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	2001b714 	.word	0x2001b714

080159e8 <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 80159e8:	b580      	push	{r7, lr}
 80159ea:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 80159ec:	f7fe fde8 	bl	80145c0 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 80159f0:	f00e fe52 	bl	8024698 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 80159f4:	f000 f99a 	bl	8015d2c <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 80159f8:	f7ff febe 	bl	8015778 <MX_GPIO_Init>
	MX_SPI2_Init();
 80159fc:	f001 fefc 	bl	80177f8 <MX_SPI2_Init>
	MX_CAN1_Init();
 8015a00:	f7ff fa0e 	bl	8014e20 <MX_CAN1_Init>
	MX_CAN2_Init();
 8015a04:	f7ff fa42 	bl	8014e8c <MX_CAN2_Init>
	MX_TIM1_Init();
 8015a08:	f002 f8c2 	bl	8017b90 <MX_TIM1_Init>
	MX_DMA_Init();
 8015a0c:	f7ff fe94 	bl	8015738 <MX_DMA_Init>
	MX_TIM3_Init();
 8015a10:	f002 f9fa 	bl	8017e08 <MX_TIM3_Init>
	MX_TIM2_Init();
 8015a14:	f002 f95c 	bl	8017cd0 <MX_TIM2_Init>
	MX_ADC1_Init();
 8015a18:	f7fe ff0c 	bl	8014834 <MX_ADC1_Init>

	initialize_CAN(&hcan1, &hcan2);
 8015a1c:	498e      	ldr	r1, [pc, #568]	; (8015c58 <main+0x270>)
 8015a1e:	488f      	ldr	r0, [pc, #572]	; (8015c5c <main+0x274>)
 8015a20:	f7fe fa84 	bl	8013f2c <initialize_CAN>
	initialize_LTC(&hspi2);
 8015a24:	488e      	ldr	r0, [pc, #568]	; (8015c60 <main+0x278>)
 8015a26:	f001 fc43 	bl	80172b0 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8015a2a:	f014 f971 	bl	8029d10 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8015a2e:	2301      	movs	r3, #1
 8015a30:	220a      	movs	r2, #10
 8015a32:	4611      	mov	r1, r2
 8015a34:	2200      	movs	r2, #0
 8015a36:	4618      	mov	r0, r3
 8015a38:	f014 fc6c 	bl	802a314 <xQueueGenericCreate>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	4a89      	ldr	r2, [pc, #548]	; (8015c64 <main+0x27c>)
 8015a40:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8015a42:	2301      	movs	r3, #1
 8015a44:	2210      	movs	r2, #16
 8015a46:	4611      	mov	r1, r2
 8015a48:	2200      	movs	r2, #0
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f014 fc62 	bl	802a314 <xQueueGenericCreate>
 8015a50:	4603      	mov	r3, r0
 8015a52:	4a85      	ldr	r2, [pc, #532]	; (8015c68 <main+0x280>)
 8015a54:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	CSE_queue = xQueueCreate(CSE_queue_info.element_count,
 8015a56:	2301      	movs	r3, #1
 8015a58:	2210      	movs	r2, #16
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f014 fc58 	bl	802a314 <xQueueGenericCreate>
 8015a64:	4603      	mov	r3, r0
 8015a66:	4a81      	ldr	r2, [pc, #516]	; (8015c6c <main+0x284>)
 8015a68:	6013      	str	r3, [r2, #0]
			CSE_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	2220      	movs	r2, #32
 8015a6e:	4611      	mov	r1, r2
 8015a70:	2200      	movs	r2, #0
 8015a72:	4618      	mov	r0, r3
 8015a74:	f014 fc4e 	bl	802a314 <xQueueGenericCreate>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	4a7d      	ldr	r2, [pc, #500]	; (8015c70 <main+0x288>)
 8015a7c:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	PID_queue = xQueueCreate(PID_queue_info.element_count,
 8015a7e:	2301      	movs	r3, #1
 8015a80:	2208      	movs	r2, #8
 8015a82:	4611      	mov	r1, r2
 8015a84:	2200      	movs	r2, #0
 8015a86:	4618      	mov	r0, r3
 8015a88:	f014 fc44 	bl	802a314 <xQueueGenericCreate>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	4a79      	ldr	r2, [pc, #484]	; (8015c74 <main+0x28c>)
 8015a90:	6013      	str	r3, [r2, #0]
			PID_queue_info.element_size);

	charger_queue = xQueueCreate(charger_queue_info.element_count,
 8015a92:	2301      	movs	r3, #1
 8015a94:	2218      	movs	r2, #24
 8015a96:	4611      	mov	r1, r2
 8015a98:	2200      	movs	r2, #0
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f014 fc3a 	bl	802a314 <xQueueGenericCreate>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	4a75      	ldr	r2, [pc, #468]	; (8015c78 <main+0x290>)
 8015aa4:	6013      	str	r3, [r2, #0]
			charger_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	2208      	movs	r2, #8
 8015aaa:	4611      	mov	r1, r2
 8015aac:	2200      	movs	r2, #0
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f014 fc30 	bl	802a314 <xQueueGenericCreate>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	4a71      	ldr	r2, [pc, #452]	; (8015c7c <main+0x294>)
 8015ab8:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8015aba:	2301      	movs	r3, #1
 8015abc:	2208      	movs	r2, #8
 8015abe:	4611      	mov	r1, r2
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f014 fc26 	bl	802a314 <xQueueGenericCreate>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	4a6d      	ldr	r2, [pc, #436]	; (8015c80 <main+0x298>)
 8015acc:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 8015ace:	2301      	movs	r3, #1
 8015ad0:	2208      	movs	r2, #8
 8015ad2:	4611      	mov	r1, r2
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f014 fc1c 	bl	802a314 <xQueueGenericCreate>
 8015adc:	4603      	mov	r3, r0
 8015ade:	4a69      	ldr	r2, [pc, #420]	; (8015c84 <main+0x29c>)
 8015ae0:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	2204      	movs	r2, #4
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	2200      	movs	r2, #0
 8015aea:	4618      	mov	r0, r3
 8015aec:	f014 fc12 	bl	802a314 <xQueueGenericCreate>
 8015af0:	4603      	mov	r3, r0
 8015af2:	4a65      	ldr	r2, [pc, #404]	; (8015c88 <main+0x2a0>)
 8015af4:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8015af6:	2301      	movs	r3, #1
 8015af8:	2204      	movs	r2, #4
 8015afa:	4611      	mov	r1, r2
 8015afc:	2200      	movs	r2, #0
 8015afe:	4618      	mov	r0, r3
 8015b00:	f014 fc08 	bl	802a314 <xQueueGenericCreate>
 8015b04:	4603      	mov	r3, r0
 8015b06:	4a61      	ldr	r2, [pc, #388]	; (8015c8c <main+0x2a4>)
 8015b08:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	4611      	mov	r1, r2
 8015b10:	2200      	movs	r2, #0
 8015b12:	4618      	mov	r0, r3
 8015b14:	f014 fbfe 	bl	802a314 <xQueueGenericCreate>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	4a5d      	ldr	r2, [pc, #372]	; (8015c90 <main+0x2a8>)
 8015b1c:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 8015b1e:	2301      	movs	r3, #1
 8015b20:	2201      	movs	r2, #1
 8015b22:	4611      	mov	r1, r2
 8015b24:	2200      	movs	r2, #0
 8015b26:	4618      	mov	r0, r3
 8015b28:	f014 fbf4 	bl	802a314 <xQueueGenericCreate>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	4a59      	ldr	r2, [pc, #356]	; (8015c94 <main+0x2ac>)
 8015b30:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8015b32:	2301      	movs	r3, #1
 8015b34:	2201      	movs	r2, #1
 8015b36:	4611      	mov	r1, r2
 8015b38:	2200      	movs	r2, #0
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f014 fbea 	bl	802a314 <xQueueGenericCreate>
 8015b40:	4603      	mov	r3, r0
 8015b42:	4a55      	ldr	r2, [pc, #340]	; (8015c98 <main+0x2b0>)
 8015b44:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 8015b46:	2301      	movs	r3, #1
 8015b48:	2201      	movs	r2, #1
 8015b4a:	4611      	mov	r1, r2
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f014 fbe0 	bl	802a314 <xQueueGenericCreate>
 8015b54:	4603      	mov	r3, r0
 8015b56:	4a51      	ldr	r2, [pc, #324]	; (8015c9c <main+0x2b4>)
 8015b58:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	4611      	mov	r1, r2
 8015b60:	2200      	movs	r2, #0
 8015b62:	4618      	mov	r0, r3
 8015b64:	f014 fbd6 	bl	802a314 <xQueueGenericCreate>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	4a4d      	ldr	r2, [pc, #308]	; (8015ca0 <main+0x2b8>)
 8015b6c:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8015b6e:	f014 f919 	bl	8029da4 <osKernelGetTickCount>
 8015b72:	4603      	mov	r3, r0
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ea fcb7 	bl	80004e8 <__aeabi_ui2d>
 8015b7a:	a335      	add	r3, pc, #212	; (adr r3, 8015c50 <main+0x268>)
 8015b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b80:	f7ea fb76 	bl	8000270 <__adddf3>
 8015b84:	4602      	mov	r2, r0
 8015b86:	460b      	mov	r3, r1
 8015b88:	4610      	mov	r0, r2
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	f7ea fffe 	bl	8000b8c <__aeabi_d2uiz>
 8015b90:	4603      	mov	r3, r0
 8015b92:	4a44      	ldr	r2, [pc, #272]	; (8015ca4 <main+0x2bc>)
 8015b94:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8015b96:	4a44      	ldr	r2, [pc, #272]	; (8015ca8 <main+0x2c0>)
 8015b98:	2100      	movs	r1, #0
 8015b9a:	4844      	ldr	r0, [pc, #272]	; (8015cac <main+0x2c4>)
 8015b9c:	f014 f917 	bl	8029dce <osThreadNew>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	4a43      	ldr	r2, [pc, #268]	; (8015cb0 <main+0x2c8>)
 8015ba4:	6013      	str	r3, [r2, #0]

#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8015ba6:	4a43      	ldr	r2, [pc, #268]	; (8015cb4 <main+0x2cc>)
 8015ba8:	2100      	movs	r1, #0
 8015baa:	4843      	ldr	r0, [pc, #268]	; (8015cb8 <main+0x2d0>)
 8015bac:	f014 f90f 	bl	8029dce <osThreadNew>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	4a42      	ldr	r2, [pc, #264]	; (8015cbc <main+0x2d4>)
 8015bb4:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8015bb6:	4a42      	ldr	r2, [pc, #264]	; (8015cc0 <main+0x2d8>)
 8015bb8:	2100      	movs	r1, #0
 8015bba:	4842      	ldr	r0, [pc, #264]	; (8015cc4 <main+0x2dc>)
 8015bbc:	f014 f907 	bl	8029dce <osThreadNew>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	4a41      	ldr	r2, [pc, #260]	; (8015cc8 <main+0x2e0>)
 8015bc4:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 8015bc6:	4a41      	ldr	r2, [pc, #260]	; (8015ccc <main+0x2e4>)
 8015bc8:	2100      	movs	r1, #0
 8015bca:	4841      	ldr	r0, [pc, #260]	; (8015cd0 <main+0x2e8>)
 8015bcc:	f014 f8ff 	bl	8029dce <osThreadNew>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	4a40      	ldr	r2, [pc, #256]	; (8015cd4 <main+0x2ec>)
 8015bd4:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8015bd6:	4a40      	ldr	r2, [pc, #256]	; (8015cd8 <main+0x2f0>)
 8015bd8:	2100      	movs	r1, #0
 8015bda:	4840      	ldr	r0, [pc, #256]	; (8015cdc <main+0x2f4>)
 8015bdc:	f014 f8f7 	bl	8029dce <osThreadNew>
 8015be0:	4603      	mov	r3, r0
 8015be2:	4a3f      	ldr	r2, [pc, #252]	; (8015ce0 <main+0x2f8>)
 8015be4:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 8015be6:	4a3f      	ldr	r2, [pc, #252]	; (8015ce4 <main+0x2fc>)
 8015be8:	2100      	movs	r1, #0
 8015bea:	483f      	ldr	r0, [pc, #252]	; (8015ce8 <main+0x300>)
 8015bec:	f014 f8ef 	bl	8029dce <osThreadNew>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	4a3e      	ldr	r2, [pc, #248]	; (8015cec <main+0x304>)
 8015bf4:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8015bf6:	4a3e      	ldr	r2, [pc, #248]	; (8015cf0 <main+0x308>)
 8015bf8:	2100      	movs	r1, #0
 8015bfa:	483e      	ldr	r0, [pc, #248]	; (8015cf4 <main+0x30c>)
 8015bfc:	f014 f8e7 	bl	8029dce <osThreadNew>
 8015c00:	4603      	mov	r3, r0
 8015c02:	4a3d      	ldr	r2, [pc, #244]	; (8015cf8 <main+0x310>)
 8015c04:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8015c06:	4a3d      	ldr	r2, [pc, #244]	; (8015cfc <main+0x314>)
 8015c08:	2100      	movs	r1, #0
 8015c0a:	483d      	ldr	r0, [pc, #244]	; (8015d00 <main+0x318>)
 8015c0c:	f014 f8df 	bl	8029dce <osThreadNew>
 8015c10:	4603      	mov	r3, r0
 8015c12:	4a3c      	ldr	r2, [pc, #240]	; (8015d04 <main+0x31c>)
 8015c14:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8015c16:	4a3c      	ldr	r2, [pc, #240]	; (8015d08 <main+0x320>)
 8015c18:	2100      	movs	r1, #0
 8015c1a:	483c      	ldr	r0, [pc, #240]	; (8015d0c <main+0x324>)
 8015c1c:	f014 f8d7 	bl	8029dce <osThreadNew>
 8015c20:	4603      	mov	r3, r0
 8015c22:	4a3b      	ldr	r2, [pc, #236]	; (8015d10 <main+0x328>)
 8015c24:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8015c26:	4a3b      	ldr	r2, [pc, #236]	; (8015d14 <main+0x32c>)
 8015c28:	2100      	movs	r1, #0
 8015c2a:	483b      	ldr	r0, [pc, #236]	; (8015d18 <main+0x330>)
 8015c2c:	f014 f8cf 	bl	8029dce <osThreadNew>
 8015c30:	4603      	mov	r3, r0
 8015c32:	4a3a      	ldr	r2, [pc, #232]	; (8015d1c <main+0x334>)
 8015c34:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8015c36:	4a3a      	ldr	r2, [pc, #232]	; (8015d20 <main+0x338>)
 8015c38:	2100      	movs	r1, #0
 8015c3a:	483a      	ldr	r0, [pc, #232]	; (8015d24 <main+0x33c>)
 8015c3c:	f014 f8c7 	bl	8029dce <osThreadNew>
 8015c40:	4603      	mov	r3, r0
 8015c42:	4a39      	ldr	r2, [pc, #228]	; (8015d28 <main+0x340>)
 8015c44:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8015c46:	f014 f887 	bl	8029d58 <osKernelStart>

	for (;;)
 8015c4a:	e7fe      	b.n	8015c4a <main+0x262>
 8015c4c:	f3af 8000 	nop.w
 8015c50:	aaaaaaab 	.word	0xaaaaaaab
 8015c54:	406a0aaa 	.word	0x406a0aaa
 8015c58:	2001b808 	.word	0x2001b808
 8015c5c:	2001b830 	.word	0x2001b830
 8015c60:	2001c0a8 	.word	0x2001c0a8
 8015c64:	2001b74c 	.word	0x2001b74c
 8015c68:	2001b734 	.word	0x2001b734
 8015c6c:	2001b758 	.word	0x2001b758
 8015c70:	2001b72c 	.word	0x2001b72c
 8015c74:	2001b744 	.word	0x2001b744
 8015c78:	2001b748 	.word	0x2001b748
 8015c7c:	2001b750 	.word	0x2001b750
 8015c80:	2001b740 	.word	0x2001b740
 8015c84:	2001b75c 	.word	0x2001b75c
 8015c88:	2001b720 	.word	0x2001b720
 8015c8c:	2001b73c 	.word	0x2001b73c
 8015c90:	2001b724 	.word	0x2001b724
 8015c94:	2001b738 	.word	0x2001b738
 8015c98:	2001b754 	.word	0x2001b754
 8015c9c:	2001b728 	.word	0x2001b728
 8015ca0:	2001b730 	.word	0x2001b730
 8015ca4:	2001b8f0 	.word	0x2001b8f0
 8015ca8:	0802f3dc 	.word	0x0802f3dc
 8015cac:	08015f71 	.word	0x08015f71
 8015cb0:	2001b8d8 	.word	0x2001b8d8
 8015cb4:	0802f40c 	.word	0x0802f40c
 8015cb8:	08016e71 	.word	0x08016e71
 8015cbc:	2001b8dc 	.word	0x2001b8dc
 8015cc0:	0802f46c 	.word	0x0802f46c
 8015cc4:	08016a31 	.word	0x08016a31
 8015cc8:	2001b8e4 	.word	0x2001b8e4
 8015ccc:	0802f55c 	.word	0x0802f55c
 8015cd0:	08016309 	.word	0x08016309
 8015cd4:	2001b8f8 	.word	0x2001b8f8
 8015cd8:	0802f52c 	.word	0x0802f52c
 8015cdc:	080163e9 	.word	0x080163e9
 8015ce0:	2001b8d4 	.word	0x2001b8d4
 8015ce4:	0802f4fc 	.word	0x0802f4fc
 8015ce8:	080164c9 	.word	0x080164c9
 8015cec:	2001b8e8 	.word	0x2001b8e8
 8015cf0:	0802f43c 	.word	0x0802f43c
 8015cf4:	08016bc1 	.word	0x08016bc1
 8015cf8:	2001b8e0 	.word	0x2001b8e0
 8015cfc:	0802f49c 	.word	0x0802f49c
 8015d00:	08016949 	.word	0x08016949
 8015d04:	2001b8ec 	.word	0x2001b8ec
 8015d08:	0802f4cc 	.word	0x0802f4cc
 8015d0c:	080165a9 	.word	0x080165a9
 8015d10:	2001b8d0 	.word	0x2001b8d0
 8015d14:	0802f5bc 	.word	0x0802f5bc
 8015d18:	08016db9 	.word	0x08016db9
 8015d1c:	2001b8f4 	.word	0x2001b8f4
 8015d20:	0802f58c 	.word	0x0802f58c
 8015d24:	08016d51 	.word	0x08016d51
 8015d28:	2001b8cc 	.word	0x2001b8cc

08015d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b094      	sub	sp, #80	; 0x50
 8015d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8015d32:	f107 0320 	add.w	r3, r7, #32
 8015d36:	2230      	movs	r2, #48	; 0x30
 8015d38:	2100      	movs	r1, #0
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f018 fc88 	bl	802e650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015d40:	f107 030c 	add.w	r3, r7, #12
 8015d44:	2200      	movs	r2, #0
 8015d46:	601a      	str	r2, [r3, #0]
 8015d48:	605a      	str	r2, [r3, #4]
 8015d4a:	609a      	str	r2, [r3, #8]
 8015d4c:	60da      	str	r2, [r3, #12]
 8015d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015d50:	2300      	movs	r3, #0
 8015d52:	60bb      	str	r3, [r7, #8]
 8015d54:	4b29      	ldr	r3, [pc, #164]	; (8015dfc <SystemClock_Config+0xd0>)
 8015d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d58:	4a28      	ldr	r2, [pc, #160]	; (8015dfc <SystemClock_Config+0xd0>)
 8015d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8015d60:	4b26      	ldr	r3, [pc, #152]	; (8015dfc <SystemClock_Config+0xd0>)
 8015d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015d68:	60bb      	str	r3, [r7, #8]
 8015d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	607b      	str	r3, [r7, #4]
 8015d70:	4b23      	ldr	r3, [pc, #140]	; (8015e00 <SystemClock_Config+0xd4>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a22      	ldr	r2, [pc, #136]	; (8015e00 <SystemClock_Config+0xd4>)
 8015d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d7a:	6013      	str	r3, [r2, #0]
 8015d7c:	4b20      	ldr	r3, [pc, #128]	; (8015e00 <SystemClock_Config+0xd4>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d84:	607b      	str	r3, [r7, #4]
 8015d86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8015d88:	230a      	movs	r3, #10
 8015d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8015d90:	2310      	movs	r3, #16
 8015d92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8015d94:	2301      	movs	r3, #1
 8015d96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015d98:	2302      	movs	r3, #2
 8015d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8015da0:	2308      	movs	r3, #8
 8015da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8015da4:	23a0      	movs	r3, #160	; 0xa0
 8015da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015da8:	2302      	movs	r3, #2
 8015daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8015dac:	2304      	movs	r3, #4
 8015dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015db0:	f107 0320 	add.w	r3, r7, #32
 8015db4:	4618      	mov	r0, r3
 8015db6:	f010 ff31 	bl	8026c1c <HAL_RCC_OscConfig>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8015dc0:	f001 f92c 	bl	801701c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015dc4:	230f      	movs	r3, #15
 8015dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015dc8:	2302      	movs	r3, #2
 8015dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8015dd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015dd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8015dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8015ddc:	f107 030c 	add.w	r3, r7, #12
 8015de0:	2105      	movs	r1, #5
 8015de2:	4618      	mov	r0, r3
 8015de4:	f011 f992 	bl	802710c <HAL_RCC_ClockConfig>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d001      	beq.n	8015df2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8015dee:	f001 f915 	bl	801701c <Error_Handler>
  }
}
 8015df2:	bf00      	nop
 8015df4:	3750      	adds	r7, #80	; 0x50
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	40023800 	.word	0x40023800
 8015e00:	40007000 	.word	0x40007000

08015e04 <__wait_for_data>:
#define WAIT_FOR_DRIVE					0x0020
#define WAIT_FOR_CHARGE					0x0040
#define WAIT_FOR_BALANCE				0x0080
#define WAIT_FOR_ALL 					0xFFFF

void __wait_for_data(uint16_t FLAGS) {
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b088      	sub	sp, #32
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = 1;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8015e12:	e067      	b.n	8015ee4 <__wait_for_data+0xe0>
		osDelay(0.500 * TICK2HZ);
 8015e14:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8015e18:	f014 f86b 	bl	8029ef2 <osDelay>
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
				&& xQueuePeek(cell_voltages_queue, &_dptr, 0));
 8015e1c:	4b35      	ldr	r3, [pc, #212]	; (8015ef4 <__wait_for_data+0xf0>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	f107 010c 	add.w	r1, r7, #12
 8015e24:	2200      	movs	r2, #0
 8015e26:	4618      	mov	r0, r3
 8015e28:	f014 fdbe 	bl	802a9a8 <xQueuePeek>
 8015e2c:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	bf0c      	ite	eq
 8015e32:	2301      	moveq	r3, #1
 8015e34:	2300      	movne	r3, #0
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	b25a      	sxtb	r2, r3
 8015e3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015e3e:	4013      	ands	r3, r2
 8015e40:	b25b      	sxtb	r3, r3
 8015e42:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
				&& xQueuePeek(cell_temperatures_queue, &_dptr, 0));
 8015e44:	4b2c      	ldr	r3, [pc, #176]	; (8015ef8 <__wait_for_data+0xf4>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	f107 010c 	add.w	r1, r7, #12
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f014 fdaa 	bl	802a9a8 <xQueuePeek>
 8015e54:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bf0c      	ite	eq
 8015e5a:	2301      	moveq	r3, #1
 8015e5c:	2300      	movne	r3, #0
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	b25a      	sxtb	r2, r3
 8015e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015e66:	4013      	ands	r3, r2
 8015e68:	b25b      	sxtb	r3, r3
 8015e6a:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
				&& xQueuePeek(accumulator_current_queue, &_d, 0));
 8015e6c:	4b23      	ldr	r3, [pc, #140]	; (8015efc <__wait_for_data+0xf8>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	f107 0110 	add.w	r1, r7, #16
 8015e74:	2200      	movs	r2, #0
 8015e76:	4618      	mov	r0, r3
 8015e78:	f014 fd96 	bl	802a9a8 <xQueuePeek>
 8015e7c:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	bf0c      	ite	eq
 8015e82:	2301      	moveq	r3, #1
 8015e84:	2300      	movne	r3, #0
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	b25a      	sxtb	r2, r3
 8015e8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015e8e:	4013      	ands	r3, r2
 8015e90:	b25b      	sxtb	r3, r3
 8015e92:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
				&& xQueuePeek(accumulator_voltage_queue, &_d, 0));
 8015e94:	4b1a      	ldr	r3, [pc, #104]	; (8015f00 <__wait_for_data+0xfc>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f107 0110 	add.w	r1, r7, #16
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f014 fd82 	bl	802a9a8 <xQueuePeek>
 8015ea4:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	bf0c      	ite	eq
 8015eaa:	2301      	moveq	r3, #1
 8015eac:	2300      	movne	r3, #0
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	b25a      	sxtb	r2, r3
 8015eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015eb6:	4013      	ands	r3, r2
 8015eb8:	b25b      	sxtb	r3, r3
 8015eba:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
				&& xQueuePeek(vehicle_voltage_queue, &_d, 0));
 8015ebc:	4b11      	ldr	r3, [pc, #68]	; (8015f04 <__wait_for_data+0x100>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f107 0110 	add.w	r1, r7, #16
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f014 fd6e 	bl	802a9a8 <xQueuePeek>
 8015ecc:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	bf0c      	ite	eq
 8015ed2:	2301      	moveq	r3, #1
 8015ed4:	2300      	movne	r3, #0
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	b25a      	sxtb	r2, r3
 8015eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015ede:	4013      	ands	r3, r2
 8015ee0:	b25b      	sxtb	r3, r3
 8015ee2:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 8015ee4:	7ffb      	ldrb	r3, [r7, #31]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d194      	bne.n	8015e14 <__wait_for_data+0x10>
	}
}
 8015eea:	bf00      	nop
 8015eec:	bf00      	nop
 8015eee:	3720      	adds	r7, #32
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	2001b720 	.word	0x2001b720
 8015ef8:	2001b73c 	.word	0x2001b73c
 8015efc:	2001b75c 	.word	0x2001b75c
 8015f00:	2001b750 	.word	0x2001b750
 8015f04:	2001b740 	.word	0x2001b740

08015f08 <__raise_ams_error>:

void __raise_ams_error(error_t error) {
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	4603      	mov	r3, r0
 8015f10:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 8015f12:	2001      	movs	r0, #1
 8015f14:	f001 f924 	bl	8017160 <set_ams_error_ext>
	__error = error;
 8015f18:	79fa      	ldrb	r2, [r7, #7]
 8015f1a:	4b06      	ldr	r3, [pc, #24]	; (8015f34 <__raise_ams_error+0x2c>)
 8015f1c:	701a      	strb	r2, [r3, #0]
	xQueueOverwrite(error_queue, &error);
 8015f1e:	4b06      	ldr	r3, [pc, #24]	; (8015f38 <__raise_ams_error+0x30>)
 8015f20:	6818      	ldr	r0, [r3, #0]
 8015f22:	1df9      	adds	r1, r7, #7
 8015f24:	2302      	movs	r3, #2
 8015f26:	2200      	movs	r2, #0
 8015f28:	f014 fa58 	bl	802a3dc <xQueueGenericSend>
}
 8015f2c:	bf00      	nop
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}
 8015f34:	2001b710 	.word	0x2001b710
 8015f38:	2001b730 	.word	0x2001b730

08015f3c <__raise_imd_error>:

void __raise_imd_error(error_t error) {
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	71fb      	strb	r3, [r7, #7]
	set_imd_error_ext(1);
 8015f46:	2001      	movs	r0, #1
 8015f48:	f001 f92a 	bl	80171a0 <set_imd_error_ext>
	__error = error;
 8015f4c:	79fa      	ldrb	r2, [r7, #7]
 8015f4e:	4b06      	ldr	r3, [pc, #24]	; (8015f68 <__raise_imd_error+0x2c>)
 8015f50:	701a      	strb	r2, [r3, #0]
	xQueueOverwrite(error_queue, &error);
 8015f52:	4b06      	ldr	r3, [pc, #24]	; (8015f6c <__raise_imd_error+0x30>)
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	1df9      	adds	r1, r7, #7
 8015f58:	2302      	movs	r3, #2
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f014 fa3e 	bl	802a3dc <xQueueGenericSend>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	2001b710 	.word	0x2001b710
 8015f6c:	2001b730 	.word	0x2001b730

08015f70 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8015f70:	b5b0      	push	{r4, r5, r7, lr}
 8015f72:	b09a      	sub	sp, #104	; 0x68
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8015f78:	f017 fdfe 	bl	802db78 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8015f7c:	4bac      	ldr	r3, [pc, #688]	; (8016230 <start_SM_task+0x2c0>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8015f82:	4bac      	ldr	r3, [pc, #688]	; (8016234 <start_SM_task+0x2c4>)
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7ea fad1 	bl	800052c <__aeabi_f2d>
 8015f8a:	a3a7      	add	r3, pc, #668	; (adr r3, 8016228 <start_SM_task+0x2b8>)
 8015f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f90:	f7ea fb24 	bl	80005dc <__aeabi_dmul>
 8015f94:	4602      	mov	r2, r0
 8015f96:	460b      	mov	r3, r1
 8015f98:	4610      	mov	r0, r2
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	f7ea fdf6 	bl	8000b8c <__aeabi_d2uiz>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Make task-specific structures */
	charger_t charger;
	ams_inputs.Ts = SM_task_info.periodicity;
 8015fa4:	4aa3      	ldr	r2, [pc, #652]	; (8016234 <start_SM_task+0x2c4>)
 8015fa6:	4ba4      	ldr	r3, [pc, #656]	; (8016238 <start_SM_task+0x2c8>)
 8015fa8:	64da      	str	r2, [r3, #76]	; 0x4c
	double mean;
	double variance;
	double maximum;

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8015faa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015fac:	f7ea fa9c 	bl	80004e8 <__aeabi_ui2d>
 8015fb0:	4604      	mov	r4, r0
 8015fb2:	460d      	mov	r5, r1
 8015fb4:	f04f 0300 	mov.w	r3, #0
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7ea fab7 	bl	800052c <__aeabi_f2d>
 8015fbe:	a39a      	add	r3, pc, #616	; (adr r3, 8016228 <start_SM_task+0x2b8>)
 8015fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc4:	f7ea fb0a 	bl	80005dc <__aeabi_dmul>
 8015fc8:	4602      	mov	r2, r0
 8015fca:	460b      	mov	r3, r1
 8015fcc:	4620      	mov	r0, r4
 8015fce:	4629      	mov	r1, r5
 8015fd0:	f7ea f94e 	bl	8000270 <__adddf3>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	4610      	mov	r0, r2
 8015fda:	4619      	mov	r1, r3
 8015fdc:	f7ea fdd6 	bl	8000b8c <__aeabi_d2uiz>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	667b      	str	r3, [r7, #100]	; 0x64
	osDelayUntil(next_tick);
 8015fe4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8015fe6:	f013 ff9f 	bl	8029f28 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8015fea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015fee:	f7ff ff09 	bl	8015e04 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8015ff2:	4b92      	ldr	r3, [pc, #584]	; (801623c <start_SM_task+0x2cc>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	f107 010c 	add.w	r1, r7, #12
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f014 fcd3 	bl	802a9a8 <xQueuePeek>
 8016002:	4603      	mov	r3, r0
 8016004:	2b00      	cmp	r3, #0
 8016006:	f000 8137 	beq.w	8016278 <start_SM_task+0x308>
				&& xQueuePeek(accumulator_current_queue,
 801600a:	4b8d      	ldr	r3, [pc, #564]	; (8016240 <start_SM_task+0x2d0>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2200      	movs	r2, #0
 8016010:	498c      	ldr	r1, [pc, #560]	; (8016244 <start_SM_task+0x2d4>)
 8016012:	4618      	mov	r0, r3
 8016014:	f014 fcc8 	bl	802a9a8 <xQueuePeek>
 8016018:	4603      	mov	r3, r0
 801601a:	2b00      	cmp	r3, #0
 801601c:	f000 812c 	beq.w	8016278 <start_SM_task+0x308>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 8016020:	4b89      	ldr	r3, [pc, #548]	; (8016248 <start_SM_task+0x2d8>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	2200      	movs	r2, #0
 8016026:	4989      	ldr	r1, [pc, #548]	; (801624c <start_SM_task+0x2dc>)
 8016028:	4618      	mov	r0, r3
 801602a:	f014 fcbd 	bl	802a9a8 <xQueuePeek>
 801602e:	4603      	mov	r3, r0
 8016030:	2b00      	cmp	r3, #0
 8016032:	f000 8121 	beq.w	8016278 <start_SM_task+0x308>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 8016036:	4b86      	ldr	r3, [pc, #536]	; (8016250 <start_SM_task+0x2e0>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2200      	movs	r2, #0
 801603c:	4985      	ldr	r1, [pc, #532]	; (8016254 <start_SM_task+0x2e4>)
 801603e:	4618      	mov	r0, r3
 8016040:	f014 fcb2 	bl	802a9a8 <xQueuePeek>
 8016044:	4603      	mov	r3, r0
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 8116 	beq.w	8016278 <start_SM_task+0x308>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 801604c:	f04f 0200 	mov.w	r2, #0
 8016050:	f04f 0300 	mov.w	r3, #0
 8016054:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				variance = 0;
 8016058:	f04f 0200 	mov.w	r2, #0
 801605c:	f04f 0300 	mov.w	r3, #0
 8016060:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				maximum = cell_voltages[0];
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801606a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				minimum = cell_voltages[0];
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016074:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 8016078:	2300      	movs	r3, #0
 801607a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801607c:	e03a      	b.n	80160f4 <start_SM_task+0x184>
					mean += cell_voltages[i];
 801607e:	68fa      	ldr	r2, [r7, #12]
 8016080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016082:	00db      	lsls	r3, r3, #3
 8016084:	4413      	add	r3, r2
 8016086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801608e:	f7ea f8ef 	bl	8000270 <__adddf3>
 8016092:	4602      	mov	r2, r0
 8016094:	460b      	mov	r3, r1
 8016096:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					if (cell_voltages[i] > maximum) {
 801609a:	68fa      	ldr	r2, [r7, #12]
 801609c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801609e:	00db      	lsls	r3, r3, #3
 80160a0:	4413      	add	r3, r2
 80160a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80160aa:	f7ea fd09 	bl	8000ac0 <__aeabi_dcmplt>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d007      	beq.n	80160c4 <start_SM_task+0x154>
						maximum = cell_voltages[i];
 80160b4:	68fa      	ldr	r2, [r7, #12]
 80160b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160b8:	00db      	lsls	r3, r3, #3
 80160ba:	4413      	add	r3, r2
 80160bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					}
					if (cell_voltages[i] < minimum) {
 80160c4:	68fa      	ldr	r2, [r7, #12]
 80160c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	4413      	add	r3, r2
 80160cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80160d4:	f7ea fd12 	bl	8000afc <__aeabi_dcmpgt>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d007      	beq.n	80160ee <start_SM_task+0x17e>
						minimum = cell_voltages[i];
 80160de:	68fa      	ldr	r2, [r7, #12]
 80160e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160e2:	00db      	lsls	r3, r3, #3
 80160e4:	4413      	add	r3, r2
 80160e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 80160ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f0:	3301      	adds	r3, #1
 80160f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f6:	2b7d      	cmp	r3, #125	; 0x7d
 80160f8:	ddc1      	ble.n	801607e <start_SM_task+0x10e>
					}
				}
				mean /= 126;
 80160fa:	f04f 0200 	mov.w	r2, #0
 80160fe:	4b56      	ldr	r3, [pc, #344]	; (8016258 <start_SM_task+0x2e8>)
 8016100:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016104:	f7ea fb94 	bl	8000830 <__aeabi_ddiv>
 8016108:	4602      	mov	r2, r0
 801610a:	460b      	mov	r3, r1
 801610c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				for (int i = 0; i < 126; i++) {
 8016110:	2300      	movs	r3, #0
 8016112:	63bb      	str	r3, [r7, #56]	; 0x38
 8016114:	e020      	b.n	8016158 <start_SM_task+0x1e8>
					double svar = cell_voltages[i] - mean;
 8016116:	68fa      	ldr	r2, [r7, #12]
 8016118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801611a:	00db      	lsls	r3, r3, #3
 801611c:	4413      	add	r3, r2
 801611e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016122:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016126:	f7ea f8a1 	bl	800026c <__aeabi_dsub>
 801612a:	4602      	mov	r2, r0
 801612c:	460b      	mov	r3, r1
 801612e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					variance += svar * svar;
 8016132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801613a:	f7ea fa4f 	bl	80005dc <__aeabi_dmul>
 801613e:	4602      	mov	r2, r0
 8016140:	460b      	mov	r3, r1
 8016142:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8016146:	f7ea f893 	bl	8000270 <__adddf3>
 801614a:	4602      	mov	r2, r0
 801614c:	460b      	mov	r3, r1
 801614e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				for (int i = 0; i < 126; i++) {
 8016152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016154:	3301      	adds	r3, #1
 8016156:	63bb      	str	r3, [r7, #56]	; 0x38
 8016158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801615a:	2b7d      	cmp	r3, #125	; 0x7d
 801615c:	dddb      	ble.n	8016116 <start_SM_task+0x1a6>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 801615e:	4936      	ldr	r1, [pc, #216]	; (8016238 <start_SM_task+0x2c8>)
 8016160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016164:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ams_inputs.maximum_cell_voltage = maximum;
 8016168:	4933      	ldr	r1, [pc, #204]	; (8016238 <start_SM_task+0x2c8>)
 801616a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801616e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			ams_inputs.minimum_cell_voltage = minimum;
 8016172:	4931      	ldr	r1, [pc, #196]	; (8016238 <start_SM_task+0x2c8>)
 8016174:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8016178:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ams_inputs.charger_is_awake = 1;
 801617c:	4b2e      	ldr	r3, [pc, #184]	; (8016238 <start_SM_task+0x2c8>)
 801617e:	2201      	movs	r2, #1
 8016180:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ams_inputs.ams_error = get_ams_error_latched_ext();
 8016184:	f001 f800 	bl	8017188 <get_ams_error_latched_ext>
 8016188:	4603      	mov	r3, r0
 801618a:	461a      	mov	r2, r3
 801618c:	4b2a      	ldr	r3, [pc, #168]	; (8016238 <start_SM_task+0x2c8>)
 801618e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			ams_inputs.imd_error = get_imd_error_latched_ext();
 8016192:	f001 f819 	bl	80171c8 <get_imd_error_latched_ext>
 8016196:	4603      	mov	r3, r0
 8016198:	461a      	mov	r2, r3
 801619a:	4b27      	ldr	r3, [pc, #156]	; (8016238 <start_SM_task+0x2c8>)
 801619c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			ams_inputs.air_minus_closed = get_air_minus_ext();
 80161a0:	f000 ff8a 	bl	80170b8 <get_air_minus_ext>
 80161a4:	4603      	mov	r3, r0
 80161a6:	461a      	mov	r2, r3
 80161a8:	4b23      	ldr	r3, [pc, #140]	; (8016238 <start_SM_task+0x2c8>)
 80161aa:	f883 2020 	strb.w	r2, [r3, #32]
			ams_inputs.air_plus_closed = get_air_plus_ext();
 80161ae:	f000 ff4f 	bl	8017050 <get_air_plus_ext>
 80161b2:	4603      	mov	r3, r0
 80161b4:	461a      	mov	r2, r3
 80161b6:	4b20      	ldr	r3, [pc, #128]	; (8016238 <start_SM_task+0x2c8>)
 80161b8:	741a      	strb	r2, [r3, #16]
			ams_inputs.precharge_closed = get_precharge_ext();
 80161ba:	f000 ffb1 	bl	8017120 <get_precharge_ext>
 80161be:	4603      	mov	r3, r0
 80161c0:	461a      	mov	r2, r3
 80161c2:	4b1d      	ldr	r3, [pc, #116]	; (8016238 <start_SM_task+0x2c8>)
 80161c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			ams_inputs.SC = get_sc_probe_ext();
 80161c8:	f001 f80a 	bl	80171e0 <get_sc_probe_ext>
 80161cc:	4603      	mov	r3, r0
 80161ce:	461a      	mov	r2, r3
 80161d0:	4b19      	ldr	r3, [pc, #100]	; (8016238 <start_SM_task+0x2c8>)
 80161d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			/* Try to get the trigger signals */
			if (!xQueueReceive(start_drive_queue, &ams_inputs.drive, 0)) {
 80161d6:	4b21      	ldr	r3, [pc, #132]	; (801625c <start_SM_task+0x2ec>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	2200      	movs	r2, #0
 80161dc:	4920      	ldr	r1, [pc, #128]	; (8016260 <start_SM_task+0x2f0>)
 80161de:	4618      	mov	r0, r3
 80161e0:	f014 fad2 	bl	802a788 <xQueueReceive>
				//ams_inputs.drive = 0;
			}
			if (!xQueueReceive(start_charge_queue, &ams_inputs.charge, 0)) {
 80161e4:	4b1f      	ldr	r3, [pc, #124]	; (8016264 <start_SM_task+0x2f4>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	2200      	movs	r2, #0
 80161ea:	491f      	ldr	r1, [pc, #124]	; (8016268 <start_SM_task+0x2f8>)
 80161ec:	4618      	mov	r0, r3
 80161ee:	f014 facb 	bl	802a788 <xQueueReceive>
				//ams_inputs.charge = 0;
			}
			if (!xQueueReceive(start_balance_queue, &ams_inputs.balance, 0)) {
 80161f2:	4b1e      	ldr	r3, [pc, #120]	; (801626c <start_SM_task+0x2fc>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2200      	movs	r2, #0
 80161f8:	490f      	ldr	r1, [pc, #60]	; (8016238 <start_SM_task+0x2c8>)
 80161fa:	4618      	mov	r0, r3
 80161fc:	f014 fac4 	bl	802a788 <xQueueReceive>
				//ams_inputs.balance = 0;
			}

			ams_state_t state = ams_function(); // _step
 8016200:	f00e f94e 	bl	80244a0 <ams_function>
 8016204:	4603      	mov	r3, r0
 8016206:	72fb      	strb	r3, [r7, #11]

#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("state %i", state);
 8016208:	7afb      	ldrb	r3, [r7, #11]
 801620a:	4619      	mov	r1, r3
 801620c:	4818      	ldr	r0, [pc, #96]	; (8016270 <start_SM_task+0x300>)
 801620e:	f018 f949 	bl	802e4a4 <SEGGER_SYSVIEW_PrintfHost>
#endif
			xQueueOverwrite(state_queue, &state);
 8016212:	4b18      	ldr	r3, [pc, #96]	; (8016274 <start_SM_task+0x304>)
 8016214:	6818      	ldr	r0, [r3, #0]
 8016216:	f107 010b 	add.w	r1, r7, #11
 801621a:	2302      	movs	r3, #2
 801621c:	2200      	movs	r2, #0
 801621e:	f014 f8dd 	bl	802a3dc <xQueueGenericSend>
						&ams_inputs.vehicle_voltage, 0)) {
 8016222:	e02c      	b.n	801627e <start_SM_task+0x30e>
 8016224:	f3af 8000 	nop.w
 8016228:	aaaaaaab 	.word	0xaaaaaaab
 801622c:	408a0aaa 	.word	0x408a0aaa
 8016230:	2001b8f0 	.word	0x2001b8f0
 8016234:	3dcccccd 	.word	0x3dcccccd
 8016238:	2001b858 	.word	0x2001b858
 801623c:	2001b720 	.word	0x2001b720
 8016240:	2001b75c 	.word	0x2001b75c
 8016244:	2001b860 	.word	0x2001b860
 8016248:	2001b750 	.word	0x2001b750
 801624c:	2001b890 	.word	0x2001b890
 8016250:	2001b740 	.word	0x2001b740
 8016254:	2001b898 	.word	0x2001b898
 8016258:	405f8000 	.word	0x405f8000
 801625c:	2001b724 	.word	0x2001b724
 8016260:	2001b87b 	.word	0x2001b87b
 8016264:	2001b738 	.word	0x2001b738
 8016268:	2001b8a9 	.word	0x2001b8a9
 801626c:	2001b754 	.word	0x2001b754
 8016270:	0802f35c 	.word	0x0802f35c
 8016274:	2001b728 	.word	0x2001b728
		} else {
			__raise_ams_error(ERROR_AMS);
 8016278:	2003      	movs	r0, #3
 801627a:	f7ff fe45 	bl	8015f08 <__raise_ams_error>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.error) {
 801627e:	4b20      	ldr	r3, [pc, #128]	; (8016300 <start_SM_task+0x390>)
 8016280:	799b      	ldrb	r3, [r3, #6]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d004      	beq.n	8016290 <start_SM_task+0x320>
			__raise_ams_error((error_t) ams_outputs.error);
 8016286:	4b1e      	ldr	r3, [pc, #120]	; (8016300 <start_SM_task+0x390>)
 8016288:	799b      	ldrb	r3, [r3, #6]
 801628a:	4618      	mov	r0, r3
 801628c:	f7ff fe3c 	bl	8015f08 <__raise_ams_error>
		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 8016290:	a317      	add	r3, pc, #92	; (adr r3, 80162f0 <start_SM_task+0x380>)
 8016292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016296:	e9c7 2304 	strd	r2, r3, [r7, #16]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times count of cells
 801629a:	a317      	add	r3, pc, #92	; (adr r3, 80162f8 <start_SM_task+0x388>)
 801629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		charger.enable_charger = ams_outputs.enable_charger;
 80162a4:	4b16      	ldr	r3, [pc, #88]	; (8016300 <start_SM_task+0x390>)
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	f887 3020 	strb.w	r3, [r7, #32]

		xQueueOverwrite(charger_queue, &charger);
 80162ac:	4b15      	ldr	r3, [pc, #84]	; (8016304 <start_SM_task+0x394>)
 80162ae:	6818      	ldr	r0, [r3, #0]
 80162b0:	f107 0110 	add.w	r1, r7, #16
 80162b4:	2302      	movs	r3, #2
 80162b6:	2200      	movs	r2, #0
 80162b8:	f014 f890 	bl	802a3dc <xQueueGenericSend>

		set_air_minus_ext(ams_outputs.close_air_minus);
 80162bc:	4b10      	ldr	r3, [pc, #64]	; (8016300 <start_SM_task+0x390>)
 80162be:	795b      	ldrb	r3, [r3, #5]
 80162c0:	4618      	mov	r0, r3
 80162c2:	f000 fee5 	bl	8017090 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 80162c6:	4b0e      	ldr	r3, [pc, #56]	; (8016300 <start_SM_task+0x390>)
 80162c8:	791b      	ldrb	r3, [r3, #4]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f000 feac 	bl	8017028 <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 80162d0:	4b0b      	ldr	r3, [pc, #44]	; (8016300 <start_SM_task+0x390>)
 80162d2:	79db      	ldrb	r3, [r3, #7]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f000 ff0f 	bl	80170f8 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 80162da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80162dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162de:	4413      	add	r3, r2
 80162e0:	667b      	str	r3, [r7, #100]	; 0x64
		osDelayUntil(next_tick);
 80162e2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80162e4:	f013 fe20 	bl	8029f28 <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80162e8:	e683      	b.n	8015ff2 <start_SM_task+0x82>
 80162ea:	bf00      	nop
 80162ec:	f3af 8000 	nop.w
 80162f0:	66666666 	.word	0x66666666
 80162f4:	402a6666 	.word	0x402a6666
 80162f8:	33333334 	.word	0x33333334
 80162fc:	40805733 	.word	0x40805733
 8016300:	2001b8b0 	.word	0x2001b8b0
 8016304:	2001b748 	.word	0x2001b748

08016308 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8016308:	b5b0      	push	{r4, r5, r7, lr}
 801630a:	b08a      	sub	sp, #40	; 0x28
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016310:	4b2f      	ldr	r3, [pc, #188]	; (80163d0 <start_IMD_task+0xc8>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8016316:	4b2f      	ldr	r3, [pc, #188]	; (80163d4 <start_IMD_task+0xcc>)
 8016318:	4618      	mov	r0, r3
 801631a:	f7ea f907 	bl	800052c <__aeabi_f2d>
 801631e:	a32a      	add	r3, pc, #168	; (adr r3, 80163c8 <start_IMD_task+0xc0>)
 8016320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016324:	f7ea f95a 	bl	80005dc <__aeabi_dmul>
 8016328:	4602      	mov	r2, r0
 801632a:	460b      	mov	r3, r1
 801632c:	4610      	mov	r0, r2
 801632e:	4619      	mov	r1, r3
 8016330:	f7ea fc2c 	bl	8000b8c <__aeabi_d2uiz>
 8016334:	4603      	mov	r3, r0
 8016336:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8016338:	4827      	ldr	r0, [pc, #156]	; (80163d8 <start_IMD_task+0xd0>)
 801633a:	f7fe f85f 	bl	80143fc <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 801633e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016340:	f7ea f8d2 	bl	80004e8 <__aeabi_ui2d>
 8016344:	4604      	mov	r4, r0
 8016346:	460d      	mov	r5, r1
 8016348:	f04f 0300 	mov.w	r3, #0
 801634c:	4618      	mov	r0, r3
 801634e:	f7ea f8ed 	bl	800052c <__aeabi_f2d>
 8016352:	a31d      	add	r3, pc, #116	; (adr r3, 80163c8 <start_IMD_task+0xc0>)
 8016354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016358:	f7ea f940 	bl	80005dc <__aeabi_dmul>
 801635c:	4602      	mov	r2, r0
 801635e:	460b      	mov	r3, r1
 8016360:	4620      	mov	r0, r4
 8016362:	4629      	mov	r1, r5
 8016364:	f7e9 ff84 	bl	8000270 <__adddf3>
 8016368:	4602      	mov	r2, r0
 801636a:	460b      	mov	r3, r1
 801636c:	4610      	mov	r0, r2
 801636e:	4619      	mov	r1, r3
 8016370:	f7ea fc0c 	bl	8000b8c <__aeabi_d2uiz>
 8016374:	4603      	mov	r3, r0
 8016376:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(next_tick);
 8016378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801637a:	f013 fdd5 	bl	8029f28 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 801637e:	4b17      	ldr	r3, [pc, #92]	; (80163dc <start_IMD_task+0xd4>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f107 0108 	add.w	r1, r7, #8
 8016386:	2200      	movs	r2, #0
 8016388:	4618      	mov	r0, r3
 801638a:	f014 fb0d 	bl	802a9a8 <xQueuePeek>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d00e      	beq.n	80163b2 <start_IMD_task+0xaa>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8016394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016398:	f04f 0200 	mov.w	r2, #0
 801639c:	4b10      	ldr	r3, [pc, #64]	; (80163e0 <start_IMD_task+0xd8>)
 801639e:	f7ea fa47 	bl	8000830 <__aeabi_ddiv>
 80163a2:	4602      	mov	r2, r0
 80163a4:	460b      	mov	r3, r1
 80163a6:	4610      	mov	r0, r2
 80163a8:	4619      	mov	r1, r3
 80163aa:	f7ea fbef 	bl	8000b8c <__aeabi_d2uiz>
 80163ae:	4603      	mov	r3, r0
 80163b0:	77fb      	strb	r3, [r7, #31]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 80163b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163b4:	6a3b      	ldr	r3, [r7, #32]
 80163b6:	4413      	add	r3, r2
 80163b8:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(next_tick);
 80163ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163bc:	f013 fdb4 	bl	8029f28 <osDelayUntil>
		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 80163c0:	e7dd      	b.n	801637e <start_IMD_task+0x76>
 80163c2:	bf00      	nop
 80163c4:	f3af 8000 	nop.w
 80163c8:	aaaaaaab 	.word	0xaaaaaaab
 80163cc:	408a0aaa 	.word	0x408a0aaa
 80163d0:	2001b8f0 	.word	0x2001b8f0
 80163d4:	3dcccccd 	.word	0x3dcccccd
 80163d8:	2001c1d8 	.word	0x2001c1d8
 80163dc:	2001b734 	.word	0x2001b734
 80163e0:	40240000 	.word	0x40240000
 80163e4:	00000000 	.word	0x00000000

080163e8 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80163e8:	b5b0      	push	{r4, r5, r7, lr}
 80163ea:	b088      	sub	sp, #32
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80163f0:	4b31      	ldr	r3, [pc, #196]	; (80164b8 <start_GPIO_task+0xd0>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 80163f6:	4b31      	ldr	r3, [pc, #196]	; (80164bc <start_GPIO_task+0xd4>)
 80163f8:	4618      	mov	r0, r3
 80163fa:	f7ea f897 	bl	800052c <__aeabi_f2d>
 80163fe:	a32c      	add	r3, pc, #176	; (adr r3, 80164b0 <start_GPIO_task+0xc8>)
 8016400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016404:	f7ea f8ea 	bl	80005dc <__aeabi_dmul>
 8016408:	4602      	mov	r2, r0
 801640a:	460b      	mov	r3, r1
 801640c:	4610      	mov	r0, r2
 801640e:	4619      	mov	r1, r3
 8016410:	f7ea fbbc 	bl	8000b8c <__aeabi_d2uiz>
 8016414:	4603      	mov	r3, r0
 8016416:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8016418:	69f8      	ldr	r0, [r7, #28]
 801641a:	f7ea f865 	bl	80004e8 <__aeabi_ui2d>
 801641e:	4604      	mov	r4, r0
 8016420:	460d      	mov	r5, r1
 8016422:	f04f 0300 	mov.w	r3, #0
 8016426:	4618      	mov	r0, r3
 8016428:	f7ea f880 	bl	800052c <__aeabi_f2d>
 801642c:	a320      	add	r3, pc, #128	; (adr r3, 80164b0 <start_GPIO_task+0xc8>)
 801642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016432:	f7ea f8d3 	bl	80005dc <__aeabi_dmul>
 8016436:	4602      	mov	r2, r0
 8016438:	460b      	mov	r3, r1
 801643a:	4620      	mov	r0, r4
 801643c:	4629      	mov	r1, r5
 801643e:	f7e9 ff17 	bl	8000270 <__adddf3>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	4610      	mov	r0, r2
 8016448:	4619      	mov	r1, r3
 801644a:	f7ea fb9f 	bl	8000b8c <__aeabi_d2uiz>
 801644e:	4603      	mov	r3, r0
 8016450:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8016452:	69f8      	ldr	r0, [r7, #28]
 8016454:	f013 fd68 	bl	8029f28 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8016458:	f000 fe96 	bl	8017188 <get_ams_error_latched_ext>
 801645c:	4603      	mov	r3, r0
 801645e:	733b      	strb	r3, [r7, #12]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8016460:	f000 feb2 	bl	80171c8 <get_imd_error_latched_ext>
 8016464:	4603      	mov	r3, r0
 8016466:	737b      	strb	r3, [r7, #13]
		GPIO.SC_probe = get_sc_probe_ext();
 8016468:	f000 feba 	bl	80171e0 <get_sc_probe_ext>
 801646c:	4603      	mov	r3, r0
 801646e:	73bb      	strb	r3, [r7, #14]
		GPIO.IMD_ok = get_imd_ok_ext();
 8016470:	f000 fec6 	bl	8017200 <get_imd_ok_ext>
 8016474:	4603      	mov	r3, r0
 8016476:	73fb      	strb	r3, [r7, #15]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8016478:	f000 fdea 	bl	8017050 <get_air_plus_ext>
 801647c:	4603      	mov	r3, r0
 801647e:	74bb      	strb	r3, [r7, #18]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8016480:	f000 fe1a 	bl	80170b8 <get_air_minus_ext>
 8016484:	4603      	mov	r3, r0
 8016486:	747b      	strb	r3, [r7, #17]
		GPIO.precharge_closed = get_precharge_ext();
 8016488:	f000 fe4a 	bl	8017120 <get_precharge_ext>
 801648c:	4603      	mov	r3, r0
 801648e:	743b      	strb	r3, [r7, #16]

		xQueueOverwrite(GPIO_queue, &GPIO);
 8016490:	4b0b      	ldr	r3, [pc, #44]	; (80164c0 <start_GPIO_task+0xd8>)
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	f107 010c 	add.w	r1, r7, #12
 8016498:	2302      	movs	r3, #2
 801649a:	2200      	movs	r2, #0
 801649c:	f013 ff9e 	bl	802a3dc <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80164a0:	69fa      	ldr	r2, [r7, #28]
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	4413      	add	r3, r2
 80164a6:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80164a8:	69f8      	ldr	r0, [r7, #28]
 80164aa:	f013 fd3d 	bl	8029f28 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 80164ae:	e7d3      	b.n	8016458 <start_GPIO_task+0x70>
 80164b0:	aaaaaaab 	.word	0xaaaaaaab
 80164b4:	408a0aaa 	.word	0x408a0aaa
 80164b8:	2001b8f0 	.word	0x2001b8f0
 80164bc:	3dcccccd 	.word	0x3dcccccd
 80164c0:	2001b74c 	.word	0x2001b74c
 80164c4:	00000000 	.word	0x00000000

080164c8 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 80164c8:	b5b0      	push	{r4, r5, r7, lr}
 80164ca:	b0ac      	sub	sp, #176	; 0xb0
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80164d0:	4b31      	ldr	r3, [pc, #196]	; (8016598 <start_ADC_task+0xd0>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 80164d8:	4b30      	ldr	r3, [pc, #192]	; (801659c <start_ADC_task+0xd4>)
 80164da:	4618      	mov	r0, r3
 80164dc:	f7ea f826 	bl	800052c <__aeabi_f2d>
 80164e0:	a32b      	add	r3, pc, #172	; (adr r3, 8016590 <start_ADC_task+0xc8>)
 80164e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e6:	f7ea f879 	bl	80005dc <__aeabi_dmul>
 80164ea:	4602      	mov	r2, r0
 80164ec:	460b      	mov	r3, r1
 80164ee:	4610      	mov	r0, r2
 80164f0:	4619      	mov	r1, r3
 80164f2:	f7ea fb4b 	bl	8000b8c <__aeabi_d2uiz>
 80164f6:	4603      	mov	r3, r0
 80164f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 80164fc:	4828      	ldr	r0, [pc, #160]	; (80165a0 <start_ADC_task+0xd8>)
 80164fe:	f7fe fc4f 	bl	8014da0 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 8016502:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016506:	f7e9 ffef 	bl	80004e8 <__aeabi_ui2d>
 801650a:	4604      	mov	r4, r0
 801650c:	460d      	mov	r5, r1
 801650e:	f04f 0300 	mov.w	r3, #0
 8016512:	4618      	mov	r0, r3
 8016514:	f7ea f80a 	bl	800052c <__aeabi_f2d>
 8016518:	a31d      	add	r3, pc, #116	; (adr r3, 8016590 <start_ADC_task+0xc8>)
 801651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801651e:	f7ea f85d 	bl	80005dc <__aeabi_dmul>
 8016522:	4602      	mov	r2, r0
 8016524:	460b      	mov	r3, r1
 8016526:	4620      	mov	r0, r4
 8016528:	4629      	mov	r1, r5
 801652a:	f7e9 fea1 	bl	8000270 <__adddf3>
 801652e:	4602      	mov	r2, r0
 8016530:	460b      	mov	r3, r1
 8016532:	4610      	mov	r0, r2
 8016534:	4619      	mov	r1, r3
 8016536:	f7ea fb29 	bl	8000b8c <__aeabi_d2uiz>
 801653a:	4603      	mov	r3, r0
 801653c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	osDelayUntil(next_tick);
 8016540:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016544:	f013 fcf0 	bl	8029f28 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8016548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801654c:	2104      	movs	r1, #4
 801654e:	4618      	mov	r0, r3
 8016550:	f7fe fc3a 	bl	8014dc8 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 8016554:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8016558:	f107 0308 	add.w	r3, r7, #8
 801655c:	2210      	movs	r2, #16
 801655e:	4618      	mov	r0, r3
 8016560:	f7fe fa66 	bl	8014a30 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 8016564:	4b0f      	ldr	r3, [pc, #60]	; (80165a4 <start_ADC_task+0xdc>)
 8016566:	6818      	ldr	r0, [r3, #0]
 8016568:	f107 0108 	add.w	r1, r7, #8
 801656c:	2302      	movs	r3, #2
 801656e:	2200      	movs	r2, #0
 8016570:	f013 ff34 	bl	802a3dc <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8016574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801657c:	4413      	add	r3, r2
 801657e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		osDelayUntil(next_tick);
 8016582:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016586:	f013 fccf 	bl	8029f28 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 801658a:	e7dd      	b.n	8016548 <start_ADC_task+0x80>
 801658c:	f3af 8000 	nop.w
 8016590:	aaaaaaab 	.word	0xaaaaaaab
 8016594:	408a0aaa 	.word	0x408a0aaa
 8016598:	2001b8f0 	.word	0x2001b8f0
 801659c:	3dcccccd 	.word	0x3dcccccd
 80165a0:	2001c148 	.word	0x2001c148
 80165a4:	2001b72c 	.word	0x2001b72c

080165a8 <start_COM_task>:

#ifdef STREAM_DATA
uint8_t __k = 0;
#endif

void start_COM_task(void *argument) {
 80165a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165ac:	b094      	sub	sp, #80	; 0x50
 80165ae:	af06      	add	r7, sp, #24
 80165b0:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80165b2:	4bb3      	ldr	r3, [pc, #716]	; (8016880 <start_COM_task+0x2d8>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 80165b8:	4bb2      	ldr	r3, [pc, #712]	; (8016884 <start_COM_task+0x2dc>)
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7e9 ffb6 	bl	800052c <__aeabi_f2d>
 80165c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8016870 <start_COM_task+0x2c8>)
 80165c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c6:	f7ea f809 	bl	80005dc <__aeabi_dmul>
 80165ca:	4602      	mov	r2, r0
 80165cc:	460b      	mov	r3, r1
 80165ce:	4610      	mov	r0, r2
 80165d0:	4619      	mov	r1, r3
 80165d2:	f7ea fadb 	bl	8000b8c <__aeabi_d2uiz>
 80165d6:	4603      	mov	r3, r0
 80165d8:	633b      	str	r3, [r7, #48]	; 0x30
	error_t cell_temperatures_error;
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

	const float voltage_time_constraint = 0.5;
 80165da:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80165de:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 80165e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80165e4:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 80165e6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80165ea:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t voltage_sample_constraint = 1 + (voltage_time_constraint
			/ COM_task_info.periodicity);
 80165ec:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8016888 <start_COM_task+0x2e0>
 80165f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80165f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = 1 + (voltage_time_constraint
 80165f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016604:	ee17 3a90 	vmov	r3, s15
 8016608:	847b      	strh	r3, [r7, #34]	; 0x22

	uint16_t temperature_sample_constraint = 1 + (temperature_time_constraint
			/ COM_task_info.periodicity);
 801660a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8016888 <start_COM_task+0x2e0>
 801660e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016612:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = 1 + (temperature_time_constraint
 8016616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801661a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801661e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016622:	ee17 3a90 	vmov	r3, s15
 8016626:	843b      	strh	r3, [r7, #32]

	uint16_t current_sample_constraint = 1 + (current_time_constraint
			/ COM_task_info.periodicity);
 8016628:	eddf 6a97 	vldr	s13, [pc, #604]	; 8016888 <start_COM_task+0x2e0>
 801662c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016630:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = 1 + (current_time_constraint
 8016634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016638:	ee77 7a87 	vadd.f32	s15, s15, s14
 801663c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016640:	ee17 3a90 	vmov	r3, s15
 8016644:	83fb      	strh	r3, [r7, #30]

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8016646:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016648:	f7e9 ff4e 	bl	80004e8 <__aeabi_ui2d>
 801664c:	4604      	mov	r4, r0
 801664e:	460d      	mov	r5, r1
 8016650:	f04f 0300 	mov.w	r3, #0
 8016654:	4618      	mov	r0, r3
 8016656:	f7e9 ff69 	bl	800052c <__aeabi_f2d>
 801665a:	a385      	add	r3, pc, #532	; (adr r3, 8016870 <start_COM_task+0x2c8>)
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	f7e9 ffbc 	bl	80005dc <__aeabi_dmul>
 8016664:	4602      	mov	r2, r0
 8016666:	460b      	mov	r3, r1
 8016668:	4620      	mov	r0, r4
 801666a:	4629      	mov	r1, r5
 801666c:	f7e9 fe00 	bl	8000270 <__adddf3>
 8016670:	4602      	mov	r2, r0
 8016672:	460b      	mov	r3, r1
 8016674:	4610      	mov	r0, r2
 8016676:	4619      	mov	r1, r3
 8016678:	f7ea fa88 	bl	8000b8c <__aeabi_d2uiz>
 801667c:	4603      	mov	r3, r0
 801667e:	637b      	str	r3, [r7, #52]	; 0x34
	osDelayUntil(next_tick);
 8016680:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016682:	f013 fc51 	bl	8029f28 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 8016686:	2008      	movs	r0, #8
 8016688:	f7ff fbbc 	bl	8015e04 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Take the queue elements so that other tasks may not */
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 801668c:	4b7f      	ldr	r3, [pc, #508]	; (801688c <start_COM_task+0x2e4>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	f107 0114 	add.w	r1, r7, #20
 8016694:	2200      	movs	r2, #0
 8016696:	4618      	mov	r0, r3
 8016698:	f014 f876 	bl	802a788 <xQueueReceive>
		xQueueReceive(cell_temperatures_queue, &cell_temperatures, 0);
 801669c:	4b7c      	ldr	r3, [pc, #496]	; (8016890 <start_COM_task+0x2e8>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	f107 0110 	add.w	r1, r7, #16
 80166a4:	2200      	movs	r2, #0
 80166a6:	4618      	mov	r0, r3
 80166a8:	f014 f86e 	bl	802a788 <xQueueReceive>

		/* Get new data (indirectly) form CAN */
		can2_ivt_msg_result_i_receive();
 80166ac:	f7fd f9a6 	bl	80139fc <can2_ivt_msg_result_i_receive>
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 80166b0:	4b78      	ldr	r3, [pc, #480]	; (8016894 <start_COM_task+0x2ec>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f107 0108 	add.w	r1, r7, #8
 80166b8:	2200      	movs	r2, #0
 80166ba:	4618      	mov	r0, r3
 80166bc:	f014 f974 	bl	802a9a8 <xQueuePeek>
 80166c0:	4603      	mov	r3, r0
 80166c2:	777b      	strb	r3, [r7, #29]
				&accumulator_current, 0);
		/* Get new data over isoSPI */
		LTC_acquire_data(1);
 80166c4:	2001      	movs	r0, #1
 80166c6:	f000 feef 	bl	80174a8 <LTC_acquire_data>

		/* Get data from the program */
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
 80166ca:	4b73      	ldr	r3, [pc, #460]	; (8016898 <start_COM_task+0x2f0>)
 80166cc:	617b      	str	r3, [r7, #20]
		cell_temperatures = SIM0_Y.cell_temperatures;
 80166ce:	4b73      	ldr	r3, [pc, #460]	; (801689c <start_COM_task+0x2f4>)
 80166d0:	613b      	str	r3, [r7, #16]
		cell_data_valid = 1;
 80166d2:	2301      	movs	r3, #1
 80166d4:	773b      	strb	r3, [r7, #28]
		cell_temperatures = cell_temperatures;
		cell_data_valid = cell_data_valid;
#endif

#ifdef STREAM_DATA
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 80166d6:	4b72      	ldr	r3, [pc, #456]	; (80168a0 <start_COM_task+0x2f8>)
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	4698      	mov	r8, r3
				(uint16_t) (10000 * cell_voltages[__k]),
 80166dc:	697a      	ldr	r2, [r7, #20]
 80166de:	4b70      	ldr	r3, [pc, #448]	; (80168a0 <start_COM_task+0x2f8>)
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	00db      	lsls	r3, r3, #3
 80166e4:	4413      	add	r3, r2
 80166e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166ea:	a363      	add	r3, pc, #396	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 80166ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f0:	f7e9 ff74 	bl	80005dc <__aeabi_dmul>
 80166f4:	4602      	mov	r2, r0
 80166f6:	460b      	mov	r3, r1
 80166f8:	4610      	mov	r0, r2
 80166fa:	4619      	mov	r1, r3
 80166fc:	f7ea fa46 	bl	8000b8c <__aeabi_d2uiz>
 8016700:	4603      	mov	r3, r0
 8016702:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016704:	4699      	mov	r9, r3
				(uint16_t) (10000 * cell_voltages[__k + 1]),
 8016706:	697a      	ldr	r2, [r7, #20]
 8016708:	4b65      	ldr	r3, [pc, #404]	; (80168a0 <start_COM_task+0x2f8>)
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	3301      	adds	r3, #1
 801670e:	00db      	lsls	r3, r3, #3
 8016710:	4413      	add	r3, r2
 8016712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016716:	a358      	add	r3, pc, #352	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 8016718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801671c:	f7e9 ff5e 	bl	80005dc <__aeabi_dmul>
 8016720:	4602      	mov	r2, r0
 8016722:	460b      	mov	r3, r1
 8016724:	4610      	mov	r0, r2
 8016726:	4619      	mov	r1, r3
 8016728:	f7ea fa30 	bl	8000b8c <__aeabi_d2uiz>
 801672c:	4603      	mov	r3, r0
 801672e:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016730:	469a      	mov	sl, r3
				(uint16_t) (10000 * cell_voltages[__k + 2]),
 8016732:	697a      	ldr	r2, [r7, #20]
 8016734:	4b5a      	ldr	r3, [pc, #360]	; (80168a0 <start_COM_task+0x2f8>)
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	3302      	adds	r3, #2
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	4413      	add	r3, r2
 801673e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016742:	a34d      	add	r3, pc, #308	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 8016744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016748:	f7e9 ff48 	bl	80005dc <__aeabi_dmul>
 801674c:	4602      	mov	r2, r0
 801674e:	460b      	mov	r3, r1
 8016750:	4610      	mov	r0, r2
 8016752:	4619      	mov	r1, r3
 8016754:	f7ea fa1a 	bl	8000b8c <__aeabi_d2uiz>
 8016758:	4603      	mov	r3, r0
 801675a:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 801675c:	461c      	mov	r4, r3
				(uint16_t) (10000 * cell_voltages[__k + 3]),
 801675e:	697a      	ldr	r2, [r7, #20]
 8016760:	4b4f      	ldr	r3, [pc, #316]	; (80168a0 <start_COM_task+0x2f8>)
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	3303      	adds	r3, #3
 8016766:	00db      	lsls	r3, r3, #3
 8016768:	4413      	add	r3, r2
 801676a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801676e:	a342      	add	r3, pc, #264	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 8016770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016774:	f7e9 ff32 	bl	80005dc <__aeabi_dmul>
 8016778:	4602      	mov	r2, r0
 801677a:	460b      	mov	r3, r1
 801677c:	4610      	mov	r0, r2
 801677e:	4619      	mov	r1, r3
 8016780:	f7ea fa04 	bl	8000b8c <__aeabi_d2uiz>
 8016784:	4603      	mov	r3, r0
 8016786:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8016788:	461d      	mov	r5, r3
				(uint16_t) (10000 * cell_voltages[__k + 4]),
 801678a:	697a      	ldr	r2, [r7, #20]
 801678c:	4b44      	ldr	r3, [pc, #272]	; (80168a0 <start_COM_task+0x2f8>)
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	3304      	adds	r3, #4
 8016792:	00db      	lsls	r3, r3, #3
 8016794:	4413      	add	r3, r2
 8016796:	e9d3 0100 	ldrd	r0, r1, [r3]
 801679a:	a337      	add	r3, pc, #220	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	f7e9 ff1c 	bl	80005dc <__aeabi_dmul>
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	4610      	mov	r0, r2
 80167aa:	4619      	mov	r1, r3
 80167ac:	f7ea f9ee 	bl	8000b8c <__aeabi_d2uiz>
 80167b0:	4603      	mov	r3, r0
 80167b2:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 80167b4:	461e      	mov	r6, r3
				(uint16_t) (10000 * cell_voltages[__k + 5]),
 80167b6:	697a      	ldr	r2, [r7, #20]
 80167b8:	4b39      	ldr	r3, [pc, #228]	; (80168a0 <start_COM_task+0x2f8>)
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	3305      	adds	r3, #5
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	4413      	add	r3, r2
 80167c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167c6:	a32c      	add	r3, pc, #176	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 80167c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167cc:	f7e9 ff06 	bl	80005dc <__aeabi_dmul>
 80167d0:	4602      	mov	r2, r0
 80167d2:	460b      	mov	r3, r1
 80167d4:	4610      	mov	r0, r2
 80167d6:	4619      	mov	r1, r3
 80167d8:	f7ea f9d8 	bl	8000b8c <__aeabi_d2uiz>
 80167dc:	4603      	mov	r3, r0
 80167de:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 80167e0:	603b      	str	r3, [r7, #0]
				(uint16_t) (10000 * cell_voltages[__k + 6]));
 80167e2:	697a      	ldr	r2, [r7, #20]
 80167e4:	4b2e      	ldr	r3, [pc, #184]	; (80168a0 <start_COM_task+0x2f8>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	3306      	adds	r3, #6
 80167ea:	00db      	lsls	r3, r3, #3
 80167ec:	4413      	add	r3, r2
 80167ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167f2:	a321      	add	r3, pc, #132	; (adr r3, 8016878 <start_COM_task+0x2d0>)
 80167f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f8:	f7e9 fef0 	bl	80005dc <__aeabi_dmul>
 80167fc:	4602      	mov	r2, r0
 80167fe:	460b      	mov	r3, r1
 8016800:	4610      	mov	r0, r2
 8016802:	4619      	mov	r1, r3
 8016804:	f7ea f9c2 	bl	8000b8c <__aeabi_d2uiz>
 8016808:	4603      	mov	r3, r0
 801680a:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 801680c:	9304      	str	r3, [sp, #16]
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	9303      	str	r3, [sp, #12]
 8016812:	9602      	str	r6, [sp, #8]
 8016814:	9501      	str	r5, [sp, #4]
 8016816:	9400      	str	r4, [sp, #0]
 8016818:	4653      	mov	r3, sl
 801681a:	464a      	mov	r2, r9
 801681c:	4641      	mov	r1, r8
 801681e:	4821      	ldr	r0, [pc, #132]	; (80168a4 <start_COM_task+0x2fc>)
 8016820:	f017 fe40 	bl	802e4a4 <SEGGER_SYSVIEW_PrintfHost>
		__k = (__k + 7) % 126;
 8016824:	4b1e      	ldr	r3, [pc, #120]	; (80168a0 <start_COM_task+0x2f8>)
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	1dda      	adds	r2, r3, #7
 801682a:	4b1f      	ldr	r3, [pc, #124]	; (80168a8 <start_COM_task+0x300>)
 801682c:	fb83 1302 	smull	r1, r3, r3, r2
 8016830:	4413      	add	r3, r2
 8016832:	1199      	asrs	r1, r3, #6
 8016834:	17d3      	asrs	r3, r2, #31
 8016836:	1ac9      	subs	r1, r1, r3
 8016838:	460b      	mov	r3, r1
 801683a:	019b      	lsls	r3, r3, #6
 801683c:	1a5b      	subs	r3, r3, r1
 801683e:	005b      	lsls	r3, r3, #1
 8016840:	1ad1      	subs	r1, r2, r3
 8016842:	b2ca      	uxtb	r2, r1
 8016844:	4b16      	ldr	r3, [pc, #88]	; (80168a0 <start_COM_task+0x2f8>)
 8016846:	701a      	strb	r2, [r3, #0]
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 8016848:	7f3b      	ldrb	r3, [r7, #28]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d02e      	beq.n	80168ac <start_COM_task+0x304>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 801684e:	4b0f      	ldr	r3, [pc, #60]	; (801688c <start_COM_task+0x2e4>)
 8016850:	6818      	ldr	r0, [r3, #0]
 8016852:	f107 0114 	add.w	r1, r7, #20
 8016856:	2302      	movs	r3, #2
 8016858:	2200      	movs	r2, #0
 801685a:	f013 fdbf 	bl	802a3dc <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 801685e:	4b0c      	ldr	r3, [pc, #48]	; (8016890 <start_COM_task+0x2e8>)
 8016860:	6818      	ldr	r0, [r3, #0]
 8016862:	f107 0110 	add.w	r1, r7, #16
 8016866:	2302      	movs	r3, #2
 8016868:	2200      	movs	r2, #0
 801686a:	f013 fdb7 	bl	802a3dc <xQueueGenericSend>
 801686e:	e020      	b.n	80168b2 <start_COM_task+0x30a>
 8016870:	aaaaaaab 	.word	0xaaaaaaab
 8016874:	408a0aaa 	.word	0x408a0aaa
 8016878:	00000000 	.word	0x00000000
 801687c:	40c38800 	.word	0x40c38800
 8016880:	2001b8f0 	.word	0x2001b8f0
 8016884:	3dcccccd 	.word	0x3dcccccd
 8016888:	3dcccccd 	.word	0x3dcccccd
 801688c:	2001b720 	.word	0x2001b720
 8016890:	2001b73c 	.word	0x2001b73c
 8016894:	2001b75c 	.word	0x2001b75c
 8016898:	2001db40 	.word	0x2001db40
 801689c:	2001e710 	.word	0x2001e710
 80168a0:	20001930 	.word	0x20001930
 80168a4:	0802f368 	.word	0x0802f368
 80168a8:	82082083 	.word	0x82082083
		} else {
			__raise_ams_error(ERROR_NO_LTC_DATA);
 80168ac:	200a      	movs	r0, #10
 80168ae:	f7ff fb2b 	bl	8015f08 <__raise_ams_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 80168b2:	697b      	ldr	r3, [r7, #20]
 80168b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80168b6:	4611      	mov	r1, r2
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7fd fba5 	bl	8014008 <COM_voltages_ok>
 80168be:	4603      	mov	r3, r0
 80168c0:	76fb      	strb	r3, [r7, #27]
				voltage_sample_constraint);

		if (cell_voltages_error) {
 80168c2:	7efb      	ldrb	r3, [r7, #27]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d003      	beq.n	80168d0 <start_COM_task+0x328>
			__raise_ams_error(cell_voltages_error);
 80168c8:	7efb      	ldrb	r3, [r7, #27]
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7ff fb1c 	bl	8015f08 <__raise_ams_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 80168d0:	693a      	ldr	r2, [r7, #16]
 80168d2:	8c3b      	ldrh	r3, [r7, #32]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	bf0c      	ite	eq
 80168d8:	2301      	moveq	r3, #1
 80168da:	2300      	movne	r3, #0
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	b29b      	uxth	r3, r3
 80168e0:	4619      	mov	r1, r3
 80168e2:	4610      	mov	r0, r2
 80168e4:	f7fd fbfc 	bl	80140e0 <COM_temperatures_ok>
 80168e8:	4603      	mov	r3, r0
 80168ea:	76bb      	strb	r3, [r7, #26]
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 80168ec:	7ebb      	ldrb	r3, [r7, #26]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d003      	beq.n	80168fa <start_COM_task+0x352>
			__raise_ams_error(cell_temperatures_error);
 80168f2:	7ebb      	ldrb	r3, [r7, #26]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ff fb07 	bl	8015f08 <__raise_ams_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 80168fa:	7f7b      	ldrb	r3, [r7, #29]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d102      	bne.n	8016906 <start_COM_task+0x35e>
			__raise_ams_error(ERROR_NO_CURRENT_DATA);
 8016900:	200b      	movs	r0, #11
 8016902:	f7ff fb01 	bl	8015f08 <__raise_ams_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8016906:	8bfa      	ldrh	r2, [r7, #30]
 8016908:	f107 0308 	add.w	r3, r7, #8
 801690c:	4611      	mov	r1, r2
 801690e:	4618      	mov	r0, r3
 8016910:	f7fd fc52 	bl	80141b8 <COM_current_ok>
 8016914:	4603      	mov	r3, r0
 8016916:	767b      	strb	r3, [r7, #25]
				current_sample_constraint);

		if (accumulator_current_error) {
 8016918:	7e7b      	ldrb	r3, [r7, #25]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d008      	beq.n	8016930 <start_COM_task+0x388>
			__raise_ams_error(accumulator_current_error);
 801691e:	7e7b      	ldrb	r3, [r7, #25]
 8016920:	4618      	mov	r0, r3
 8016922:	f7ff faf1 	bl	8015f08 <__raise_ams_error>
		}
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016926:	e003      	b.n	8016930 <start_COM_task+0x388>
			next_tick += tick_increment;
 8016928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692c:	4413      	add	r3, r2
 801692e:	637b      	str	r3, [r7, #52]	; 0x34
		while (next_tick < osKernelGetTickCount()) {
 8016930:	f013 fa38 	bl	8029da4 <osKernelGetTickCount>
 8016934:	4602      	mov	r2, r0
 8016936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016938:	4293      	cmp	r3, r2
 801693a:	d3f5      	bcc.n	8016928 <start_COM_task+0x380>
		}
		osDelayUntil(next_tick);
 801693c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801693e:	f013 faf3 	bl	8029f28 <osDelayUntil>
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8016942:	e6a3      	b.n	801668c <start_COM_task+0xe4>
 8016944:	0000      	movs	r0, r0
	...

08016948 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8016948:	b5b0      	push	{r4, r5, r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016950:	4b33      	ldr	r3, [pc, #204]	; (8016a20 <start_CAN_task+0xd8>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8016956:	4b33      	ldr	r3, [pc, #204]	; (8016a24 <start_CAN_task+0xdc>)
 8016958:	4618      	mov	r0, r3
 801695a:	f7e9 fde7 	bl	800052c <__aeabi_f2d>
 801695e:	a32e      	add	r3, pc, #184	; (adr r3, 8016a18 <start_CAN_task+0xd0>)
 8016960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016964:	f7e9 fe3a 	bl	80005dc <__aeabi_dmul>
 8016968:	4602      	mov	r2, r0
 801696a:	460b      	mov	r3, r1
 801696c:	4610      	mov	r0, r2
 801696e:	4619      	mov	r1, r3
 8016970:	f7ea f90c 	bl	8000b8c <__aeabi_d2uiz>
 8016974:	4603      	mov	r3, r0
 8016976:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	uint32_t k = 0;
 8016978:	2300      	movs	r3, #0
 801697a:	60fb      	str	r3, [r7, #12]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 801697c:	6978      	ldr	r0, [r7, #20]
 801697e:	f7e9 fdb3 	bl	80004e8 <__aeabi_ui2d>
 8016982:	4604      	mov	r4, r0
 8016984:	460d      	mov	r5, r1
 8016986:	f04f 0300 	mov.w	r3, #0
 801698a:	4618      	mov	r0, r3
 801698c:	f7e9 fdce 	bl	800052c <__aeabi_f2d>
 8016990:	a321      	add	r3, pc, #132	; (adr r3, 8016a18 <start_CAN_task+0xd0>)
 8016992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016996:	f7e9 fe21 	bl	80005dc <__aeabi_dmul>
 801699a:	4602      	mov	r2, r0
 801699c:	460b      	mov	r3, r1
 801699e:	4620      	mov	r0, r4
 80169a0:	4629      	mov	r1, r5
 80169a2:	f7e9 fc65 	bl	8000270 <__adddf3>
 80169a6:	4602      	mov	r2, r0
 80169a8:	460b      	mov	r3, r1
 80169aa:	4610      	mov	r0, r2
 80169ac:	4619      	mov	r1, r3
 80169ae:	f7ea f8ed 	bl	8000b8c <__aeabi_d2uiz>
 80169b2:	4603      	mov	r3, r0
 80169b4:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 80169b6:	6978      	ldr	r0, [r7, #20]
 80169b8:	f013 fab6 	bl	8029f28 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		if (!(k % 2)) {
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	f003 0301 	and.w	r3, r3, #1
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d103      	bne.n	80169ce <start_CAN_task+0x86>
			can1_ams_cell_temperatures_transmit();
 80169c6:	f7fa fdf7 	bl	80115b8 <can1_ams_cell_temperatures_transmit>
			can1_ams_status_1_transmit();
 80169ca:	f7f9 fa0d 	bl	800fde8 <can1_ams_status_1_transmit>
		}
		if (!(k % 3)) {
 80169ce:	68f9      	ldr	r1, [r7, #12]
 80169d0:	4b15      	ldr	r3, [pc, #84]	; (8016a28 <start_CAN_task+0xe0>)
 80169d2:	fba3 2301 	umull	r2, r3, r3, r1
 80169d6:	085a      	lsrs	r2, r3, #1
 80169d8:	4613      	mov	r3, r2
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	4413      	add	r3, r2
 80169de:	1aca      	subs	r2, r1, r3
 80169e0:	2a00      	cmp	r2, #0
 80169e2:	d101      	bne.n	80169e8 <start_CAN_task+0xa0>
			can2_charger_config_transmit();
 80169e4:	f7fb fbc0 	bl	8012168 <can2_charger_config_transmit>
		}
		if (!(k % 4)) {
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	f003 0303 	and.w	r3, r3, #3
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d108      	bne.n	8016a04 <start_CAN_task+0xbc>
			can1_ams_temperatures_transmit();
 80169f2:	f7f9 fb49 	bl	8010088 <can1_ams_temperatures_transmit>
			can1_ams_cell_voltages_transmit();
 80169f6:	f7f9 fbb5 	bl	8010164 <can1_ams_cell_voltages_transmit>
		}
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80169fa:	e003      	b.n	8016a04 <start_CAN_task+0xbc>
			next_tick += tick_increment;
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	4413      	add	r3, r2
 8016a02:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 8016a04:	f013 f9ce 	bl	8029da4 <osKernelGetTickCount>
 8016a08:	4602      	mov	r2, r0
 8016a0a:	697b      	ldr	r3, [r7, #20]
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	d3f5      	bcc.n	80169fc <start_CAN_task+0xb4>
		}
		osDelayUntil(next_tick);
 8016a10:	6978      	ldr	r0, [r7, #20]
 8016a12:	f013 fa89 	bl	8029f28 <osDelayUntil>
		if (!(k % 2)) {
 8016a16:	e7d1      	b.n	80169bc <start_CAN_task+0x74>
 8016a18:	aaaaaaab 	.word	0xaaaaaaab
 8016a1c:	408a0aaa 	.word	0x408a0aaa
 8016a20:	2001b8f0 	.word	0x2001b8f0
 8016a24:	3dcccccd 	.word	0x3dcccccd
 8016a28:	aaaaaaab 	.word	0xaaaaaaab
 8016a2c:	00000000 	.word	0x00000000

08016a30 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8016a30:	b5b0      	push	{r4, r5, r7, lr}
 8016a32:	b090      	sub	sp, #64	; 0x40
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016a38:	4b59      	ldr	r3, [pc, #356]	; (8016ba0 <start_CSE_task+0x170>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8016a3e:	4b59      	ldr	r3, [pc, #356]	; (8016ba4 <start_CSE_task+0x174>)
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7e9 fd73 	bl	800052c <__aeabi_f2d>
 8016a46:	a352      	add	r3, pc, #328	; (adr r3, 8016b90 <start_CSE_task+0x160>)
 8016a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4c:	f7e9 fdc6 	bl	80005dc <__aeabi_dmul>
 8016a50:	4602      	mov	r2, r0
 8016a52:	460b      	mov	r3, r1
 8016a54:	4610      	mov	r0, r2
 8016a56:	4619      	mov	r1, r3
 8016a58:	f7ea f898 	bl	8000b8c <__aeabi_d2uiz>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Make task-specific structures */
	CSE_initialize();
 8016a60:	f003 fa56 	bl	8019f10 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8016a64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016a66:	f7e9 fd3f 	bl	80004e8 <__aeabi_ui2d>
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	460d      	mov	r5, r1
 8016a6e:	f04f 0300 	mov.w	r3, #0
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7e9 fd5a 	bl	800052c <__aeabi_f2d>
 8016a78:	a345      	add	r3, pc, #276	; (adr r3, 8016b90 <start_CSE_task+0x160>)
 8016a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a7e:	f7e9 fdad 	bl	80005dc <__aeabi_dmul>
 8016a82:	4602      	mov	r2, r0
 8016a84:	460b      	mov	r3, r1
 8016a86:	4620      	mov	r0, r4
 8016a88:	4629      	mov	r1, r5
 8016a8a:	f7e9 fbf1 	bl	8000270 <__adddf3>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	460b      	mov	r3, r1
 8016a92:	4610      	mov	r0, r2
 8016a94:	4619      	mov	r1, r3
 8016a96:	f7ea f879 	bl	8000b8c <__aeabi_d2uiz>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 8016a9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016aa0:	f013 fa42 	bl	8029f28 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8016aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016aa8:	f7ff f9ac 	bl	8015e04 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8016aac:	4b3e      	ldr	r3, [pc, #248]	; (8016ba8 <start_CSE_task+0x178>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	f107 0108 	add.w	r1, r7, #8
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f013 ff76 	bl	802a9a8 <xQueuePeek>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d05c      	beq.n	8016b7c <start_CSE_task+0x14c>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8016ac2:	4b3a      	ldr	r3, [pc, #232]	; (8016bac <start_CSE_task+0x17c>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f107 0114 	add.w	r1, r7, #20
 8016aca:	2200      	movs	r2, #0
 8016acc:	4618      	mov	r0, r3
 8016ace:	f013 ff6b 	bl	802a9a8 <xQueuePeek>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d051      	beq.n	8016b7c <start_CSE_task+0x14c>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8016ad8:	f04f 0200 	mov.w	r2, #0
 8016adc:	f04f 0300 	mov.w	r3, #0
 8016ae0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ae8:	e010      	b.n	8016b0c <start_CSE_task+0xdc>
				mean_cell_voltage += cell_voltages[i];
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	4413      	add	r3, r2
 8016af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016afa:	f7e9 fbb9 	bl	8000270 <__adddf3>
 8016afe:	4602      	mov	r2, r0
 8016b00:	460b      	mov	r3, r1
 8016b02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8016b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b08:	3301      	adds	r3, #1
 8016b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b0e:	2b7d      	cmp	r3, #125	; 0x7d
 8016b10:	ddeb      	ble.n	8016aea <start_CSE_task+0xba>
			}
			mean_cell_voltage /= 126;
 8016b12:	f04f 0200 	mov.w	r2, #0
 8016b16:	4b26      	ldr	r3, [pc, #152]	; (8016bb0 <start_CSE_task+0x180>)
 8016b18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016b1c:	f7e9 fe88 	bl	8000830 <__aeabi_ddiv>
 8016b20:	4602      	mov	r2, r0
 8016b22:	460b      	mov	r3, r1
 8016b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			CSE_U.current = accumulator_current;
 8016b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016b2c:	4921      	ldr	r1, [pc, #132]	; (8016bb4 <start_CSE_task+0x184>)
 8016b2e:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 8016b32:	4920      	ldr	r1, [pc, #128]	; (8016bb4 <start_CSE_task+0x184>)
 8016b34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016b38:	e9c1 2302 	strd	r2, r3, [r1, #8]

			CSE_step();
 8016b3c:	f001 fee4 	bl	8018908 <CSE_step>

			CSE.SOC = CSE_Y.soc;
 8016b40:	4b1d      	ldr	r3, [pc, #116]	; (8016bb8 <start_CSE_task+0x188>)
 8016b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b46:	e9c7 2306 	strd	r2, r3, [r7, #24]
			CSE.SOH = CSE_Y.capacity / (6.6 * 3600);
 8016b4a:	4b1b      	ldr	r3, [pc, #108]	; (8016bb8 <start_CSE_task+0x188>)
 8016b4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8016b50:	a311      	add	r3, pc, #68	; (adr r3, 8016b98 <start_CSE_task+0x168>)
 8016b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b56:	f7e9 fe6b 	bl	8000830 <__aeabi_ddiv>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			xQueueOverwrite(CSE_queue, &CSE);
 8016b62:	4b16      	ldr	r3, [pc, #88]	; (8016bbc <start_CSE_task+0x18c>)
 8016b64:	6818      	ldr	r0, [r3, #0]
 8016b66:	f107 0118 	add.w	r1, r7, #24
 8016b6a:	2302      	movs	r3, #2
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	f013 fc35 	bl	802a3dc <xQueueGenericSend>

		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016b72:	e003      	b.n	8016b7c <start_CSE_task+0x14c>
			next_tick += tick_increment;
 8016b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b78:	4413      	add	r3, r2
 8016b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8016b7c:	f013 f912 	bl	8029da4 <osKernelGetTickCount>
 8016b80:	4602      	mov	r2, r0
 8016b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b84:	4293      	cmp	r3, r2
 8016b86:	d3f5      	bcc.n	8016b74 <start_CSE_task+0x144>
		}
		osDelayUntil(next_tick);
 8016b88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016b8a:	f013 f9cd 	bl	8029f28 <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8016b8e:	e78d      	b.n	8016aac <start_CSE_task+0x7c>
 8016b90:	aaaaaaab 	.word	0xaaaaaaab
 8016b94:	408a0aaa 	.word	0x408a0aaa
 8016b98:	00000000 	.word	0x00000000
 8016b9c:	40d73400 	.word	0x40d73400
 8016ba0:	2001b8f0 	.word	0x2001b8f0
 8016ba4:	3dcccccd 	.word	0x3dcccccd
 8016ba8:	2001b75c 	.word	0x2001b75c
 8016bac:	2001b720 	.word	0x2001b720
 8016bb0:	405f8000 	.word	0x405f8000
 8016bb4:	2001c230 	.word	0x2001c230
 8016bb8:	2001c220 	.word	0x2001c220
 8016bbc:	2001b758 	.word	0x2001b758

08016bc0 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8016bc0:	b5b0      	push	{r4, r5, r7, lr}
 8016bc2:	b09c      	sub	sp, #112	; 0x70
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016bc8:	4b59      	ldr	r3, [pc, #356]	; (8016d30 <start_COOL_task+0x170>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8016bce:	4b59      	ldr	r3, [pc, #356]	; (8016d34 <start_COOL_task+0x174>)
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7e9 fcab 	bl	800052c <__aeabi_f2d>
 8016bd6:	a354      	add	r3, pc, #336	; (adr r3, 8016d28 <start_COOL_task+0x168>)
 8016bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bdc:	f7e9 fcfe 	bl	80005dc <__aeabi_dmul>
 8016be0:	4602      	mov	r2, r0
 8016be2:	460b      	mov	r3, r1
 8016be4:	4610      	mov	r0, r2
 8016be6:	4619      	mov	r1, r3
 8016be8:	f7e9 ffd0 	bl	8000b8c <__aeabi_d2uiz>
 8016bec:	4603      	mov	r3, r0
 8016bee:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Make task-specific structures */
	PID_t PID;
	pPID_t pPID;

	PID_initialize(&PID, // *ptr
 8016bf0:	f107 031c 	add.w	r3, r7, #28
 8016bf4:	eddf 2a50 	vldr	s5, [pc, #320]	; 8016d38 <start_COOL_task+0x178>
 8016bf8:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8016bfc:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8016d3c <start_COOL_task+0x17c>
 8016c00:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8016d3c <start_COOL_task+0x17c>
 8016c04:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8016c08:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7fd fc84 	bl	801451a <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8016c12:	484b      	ldr	r0, [pc, #300]	; (8016d40 <start_COOL_task+0x180>)
 8016c14:	f7fd fb22 	bl	801425c <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8016c18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8016c1a:	f7e9 fc65 	bl	80004e8 <__aeabi_ui2d>
 8016c1e:	4604      	mov	r4, r0
 8016c20:	460d      	mov	r5, r1
 8016c22:	f04f 0300 	mov.w	r3, #0
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7e9 fc80 	bl	800052c <__aeabi_f2d>
 8016c2c:	a33e      	add	r3, pc, #248	; (adr r3, 8016d28 <start_COOL_task+0x168>)
 8016c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c32:	f7e9 fcd3 	bl	80005dc <__aeabi_dmul>
 8016c36:	4602      	mov	r2, r0
 8016c38:	460b      	mov	r3, r1
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	4629      	mov	r1, r5
 8016c3e:	f7e9 fb17 	bl	8000270 <__adddf3>
 8016c42:	4602      	mov	r2, r0
 8016c44:	460b      	mov	r3, r1
 8016c46:	4610      	mov	r0, r2
 8016c48:	4619      	mov	r1, r3
 8016c4a:	f7e9 ff9f 	bl	8000b8c <__aeabi_d2uiz>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	66fb      	str	r3, [r7, #108]	; 0x6c
	osDelayUntil(next_tick);
 8016c52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8016c54:	f013 f968 	bl	8029f28 <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 8016c58:	2002      	movs	r0, #2
 8016c5a:	f7ff f8d3 	bl	8015e04 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8016c5e:	4b39      	ldr	r3, [pc, #228]	; (8016d44 <start_COOL_task+0x184>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f107 010c 	add.w	r1, r7, #12
 8016c66:	2200      	movs	r2, #0
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f013 fe9d 	bl	802a9a8 <xQueuePeek>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d04f      	beq.n	8016d14 <start_COOL_task+0x154>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8016c74:	f04f 0200 	mov.w	r2, #0
 8016c78:	f04f 0300 	mov.w	r3, #0
 8016c7c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8016c80:	2300      	movs	r3, #0
 8016c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016c84:	e010      	b.n	8016ca8 <start_COOL_task+0xe8>
				max_cell_temperature += cell_temperatures[i];
 8016c86:	68fa      	ldr	r2, [r7, #12]
 8016c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	4413      	add	r3, r2
 8016c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c92:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016c96:	f7e9 faeb 	bl	8000270 <__adddf3>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8016ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016caa:	2b7d      	cmp	r3, #125	; 0x7d
 8016cac:	ddeb      	ble.n	8016c86 <start_COOL_task+0xc6>
			}
			max_cell_temperature /= 126;
 8016cae:	f04f 0200 	mov.w	r2, #0
 8016cb2:	4b25      	ldr	r3, [pc, #148]	; (8016d48 <start_COOL_task+0x188>)
 8016cb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016cb8:	f7e9 fdba 	bl	8000830 <__aeabi_ddiv>
 8016cbc:	4602      	mov	r2, r0
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 8016cc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016cc8:	f7e9 ff80 	bl	8000bcc <__aeabi_d2f>
 8016ccc:	4602      	mov	r2, r0
 8016cce:	f107 031c 	add.w	r3, r7, #28
 8016cd2:	ee00 2a10 	vmov	s0, r2
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7fd fbb0 	bl	801443c <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 8016cdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8016ce4:	4816      	ldr	r0, [pc, #88]	; (8016d40 <start_COOL_task+0x180>)
 8016ce6:	f7fd fae3 	bl	80142b0 <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 8016cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7e9 fc1d 	bl	800052c <__aeabi_f2d>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
			xQueueOverwrite(PID_queue, &pPID);
 8016cfa:	4b14      	ldr	r3, [pc, #80]	; (8016d4c <start_COOL_task+0x18c>)
 8016cfc:	6818      	ldr	r0, [r3, #0]
 8016cfe:	f107 0110 	add.w	r1, r7, #16
 8016d02:	2302      	movs	r3, #2
 8016d04:	2200      	movs	r2, #0
 8016d06:	f013 fb69 	bl	802a3dc <xQueueGenericSend>
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016d0a:	e003      	b.n	8016d14 <start_COOL_task+0x154>
			next_tick += tick_increment;
 8016d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d10:	4413      	add	r3, r2
 8016d12:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (next_tick < osKernelGetTickCount()) {
 8016d14:	f013 f846 	bl	8029da4 <osKernelGetTickCount>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d3f5      	bcc.n	8016d0c <start_COOL_task+0x14c>
		}
		osDelayUntil(next_tick);
 8016d20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8016d22:	f013 f901 	bl	8029f28 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8016d26:	e79a      	b.n	8016c5e <start_COOL_task+0x9e>
 8016d28:	aaaaaaab 	.word	0xaaaaaaab
 8016d2c:	408a0aaa 	.word	0x408a0aaa
 8016d30:	2001b8f0 	.word	0x2001b8f0
 8016d34:	3dcccccd 	.word	0x3dcccccd
 8016d38:	42c80000 	.word	0x42c80000
 8016d3c:	00000000 	.word	0x00000000
 8016d40:	2001c190 	.word	0x2001c190
 8016d44:	2001b73c 	.word	0x2001b73c
 8016d48:	405f8000 	.word	0x405f8000
 8016d4c:	2001b744 	.word	0x2001b744

08016d50 <start_event_handler_task>:
	}
}
void start_event_handler_task(void *argument) {
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
	__wait_for_data(WAIT_FOR_ALL);
 8016d58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016d5c:	f7ff f852 	bl	8015e04 <__wait_for_data>
	error_t error;

	for (;;) {
		/* Always unlatch the errors after this time has ended
		 * -- this will of course not affect the actual XXX_error_latched signal */
		set_ams_error_ext(0);
 8016d60:	2000      	movs	r0, #0
 8016d62:	f000 f9fd 	bl	8017160 <set_ams_error_ext>
		set_imd_error_ext(0);
 8016d66:	2000      	movs	r0, #0
 8016d68:	f000 fa1a 	bl	80171a0 <set_imd_error_ext>
		/* Wait forever for an error to be raised */
		if (xQueueReceive(error_queue, &error, portMAX_DELAY)) {
 8016d6c:	4b10      	ldr	r3, [pc, #64]	; (8016db0 <start_event_handler_task+0x60>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	f107 010f 	add.w	r1, r7, #15
 8016d74:	f04f 32ff 	mov.w	r2, #4294967295
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f013 fd05 	bl	802a788 <xQueueReceive>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d00f      	beq.n	8016da4 <start_event_handler_task+0x54>
			switch (error) {
 8016d84:	7bfb      	ldrb	r3, [r7, #15]
 8016d86:	2b02      	cmp	r3, #2
 8016d88:	d103      	bne.n	8016d92 <start_event_handler_task+0x42>
			case ERROR_IMD:
				set_imd_error_ext(1);
 8016d8a:	2001      	movs	r0, #1
 8016d8c:	f000 fa08 	bl	80171a0 <set_imd_error_ext>
				break;
 8016d90:	e003      	b.n	8016d9a <start_event_handler_task+0x4a>
			default:
				set_ams_error_ext(1);
 8016d92:	2001      	movs	r0, #1
 8016d94:	f000 f9e4 	bl	8017160 <set_ams_error_ext>
				break;
 8016d98:	bf00      	nop
			}
#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("error %i", error);
 8016d9a:	7bfb      	ldrb	r3, [r7, #15]
 8016d9c:	4619      	mov	r1, r3
 8016d9e:	4805      	ldr	r0, [pc, #20]	; (8016db4 <start_event_handler_task+0x64>)
 8016da0:	f017 fb80 	bl	802e4a4 <SEGGER_SYSVIEW_PrintfHost>
#endif
		}

		/* Latch the ams_error for 500 ms */
		osDelay(0.500 * TICK2HZ);
 8016da4:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8016da8:	f013 f8a3 	bl	8029ef2 <osDelay>
		set_ams_error_ext(0);
 8016dac:	e7d8      	b.n	8016d60 <start_event_handler_task+0x10>
 8016dae:	bf00      	nop
 8016db0:	2001b730 	.word	0x2001b730
 8016db4:	0802f390 	.word	0x0802f390

08016db8 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8016db8:	b5b0      	push	{r4, r5, r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016dc0:	4b27      	ldr	r3, [pc, #156]	; (8016e60 <start_IWDG_task+0xa8>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8016dc6:	4b27      	ldr	r3, [pc, #156]	; (8016e64 <start_IWDG_task+0xac>)
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7e9 fbaf 	bl	800052c <__aeabi_f2d>
 8016dce:	a322      	add	r3, pc, #136	; (adr r3, 8016e58 <start_IWDG_task+0xa0>)
 8016dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd4:	f7e9 fc02 	bl	80005dc <__aeabi_dmul>
 8016dd8:	4602      	mov	r2, r0
 8016dda:	460b      	mov	r3, r1
 8016ddc:	4610      	mov	r0, r2
 8016dde:	4619      	mov	r1, r3
 8016de0:	f7e9 fed4 	bl	8000b8c <__aeabi_d2uiz>
 8016de4:	4603      	mov	r3, r0
 8016de6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7e9 fb7d 	bl	80004e8 <__aeabi_ui2d>
 8016dee:	4604      	mov	r4, r0
 8016df0:	460d      	mov	r5, r1
 8016df2:	f04f 0300 	mov.w	r3, #0
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7e9 fb98 	bl	800052c <__aeabi_f2d>
 8016dfc:	a316      	add	r3, pc, #88	; (adr r3, 8016e58 <start_IWDG_task+0xa0>)
 8016dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e02:	f7e9 fbeb 	bl	80005dc <__aeabi_dmul>
 8016e06:	4602      	mov	r2, r0
 8016e08:	460b      	mov	r3, r1
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	4629      	mov	r1, r5
 8016e0e:	f7e9 fa2f 	bl	8000270 <__adddf3>
 8016e12:	4602      	mov	r2, r0
 8016e14:	460b      	mov	r3, r1
 8016e16:	4610      	mov	r0, r2
 8016e18:	4619      	mov	r1, r3
 8016e1a:	f7e9 feb7 	bl	8000b8c <__aeabi_d2uiz>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8016e22:	68f8      	ldr	r0, [r7, #12]
 8016e24:	f013 f880 	bl	8029f28 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8016e28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016e2c:	f7fe ffea 	bl	8015e04 <__wait_for_data>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8016e30:	480d      	ldr	r0, [pc, #52]	; (8016e68 <start_IWDG_task+0xb0>)
 8016e32:	f00f fee3 	bl	8026bfc <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016e36:	e003      	b.n	8016e40 <start_IWDG_task+0x88>
			next_tick += tick_increment;
 8016e38:	68fa      	ldr	r2, [r7, #12]
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 8016e40:	f012 ffb0 	bl	8029da4 <osKernelGetTickCount>
 8016e44:	4602      	mov	r2, r0
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	4293      	cmp	r3, r2
 8016e4a:	d3f5      	bcc.n	8016e38 <start_IWDG_task+0x80>
		}
		osDelayUntil(next_tick);
 8016e4c:	68f8      	ldr	r0, [r7, #12]
 8016e4e:	f013 f86b 	bl	8029f28 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 8016e52:	e7ed      	b.n	8016e30 <start_IWDG_task+0x78>
 8016e54:	f3af 8000 	nop.w
 8016e58:	aaaaaaab 	.word	0xaaaaaaab
 8016e5c:	408a0aaa 	.word	0x408a0aaa
 8016e60:	2001b8f0 	.word	0x2001b8f0
 8016e64:	3dcccccd 	.word	0x3dcccccd
 8016e68:	2001b8c0 	.word	0x2001b8c0
 8016e6c:	00000000 	.word	0x00000000

08016e70 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8016e70:	b5b0      	push	{r4, r5, r7, lr}
 8016e72:	b08c      	sub	sp, #48	; 0x30
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016e78:	4b59      	ldr	r3, [pc, #356]	; (8016fe0 <start_SIM_task+0x170>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8016e7e:	4b59      	ldr	r3, [pc, #356]	; (8016fe4 <start_SIM_task+0x174>)
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7e9 fb53 	bl	800052c <__aeabi_f2d>
 8016e86:	a354      	add	r3, pc, #336	; (adr r3, 8016fd8 <start_SIM_task+0x168>)
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	f7e9 fba6 	bl	80005dc <__aeabi_dmul>
 8016e90:	4602      	mov	r2, r0
 8016e92:	460b      	mov	r3, r1
 8016e94:	4610      	mov	r0, r2
 8016e96:	4619      	mov	r1, r3
 8016e98:	f7e9 fe78 	bl	8000b8c <__aeabi_d2uiz>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Make task-specific structures */
	SIM0_initialize();
 8016ea0:	f004 f96e 	bl	801b180 <SIM0_initialize>
	charger_t charger;
	uint16_t k = 0;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint8_t SC = 1;
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t start_drive = 1;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t start_charge = 0;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t start_balance = 0;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	SIM0_P.Ts = SIM_task_info.periodicity;
 8016ec0:	4b48      	ldr	r3, [pc, #288]	; (8016fe4 <start_SIM_task+0x174>)
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7e9 fb32 	bl	800052c <__aeabi_f2d>
 8016ec8:	4602      	mov	r2, r0
 8016eca:	460b      	mov	r3, r1
 8016ecc:	4946      	ldr	r1, [pc, #280]	; (8016fe8 <start_SIM_task+0x178>)
 8016ece:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = SC;
 8016ed2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7e9 fb06 	bl	80004e8 <__aeabi_ui2d>
 8016edc:	4602      	mov	r2, r0
 8016ede:	460b      	mov	r3, r1
 8016ee0:	4942      	ldr	r1, [pc, #264]	; (8016fec <start_SIM_task+0x17c>)
 8016ee2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = start_drive ^ start_balance;
 8016ee6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8016eea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016eee:	4053      	eors	r3, r2
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7e9 fb08 	bl	8000508 <__aeabi_i2d>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	460b      	mov	r3, r1
 8016efc:	493b      	ldr	r1, [pc, #236]	; (8016fec <start_SIM_task+0x17c>)
 8016efe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = start_charge ^ start_balance;
 8016f02:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016f06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016f0a:	4053      	eors	r3, r2
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7e9 fafa 	bl	8000508 <__aeabi_i2d>
 8016f14:	4602      	mov	r2, r0
 8016f16:	460b      	mov	r3, r1
 8016f18:	4934      	ldr	r1, [pc, #208]	; (8016fec <start_SIM_task+0x17c>)
 8016f1a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -10;
 8016f1e:	4b33      	ldr	r3, [pc, #204]	; (8016fec <start_SIM_task+0x17c>)
 8016f20:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 8016f24:	f04f 0200 	mov.w	r2, #0
 8016f28:	4b31      	ldr	r3, [pc, #196]	; (8016ff0 <start_SIM_task+0x180>)
 8016f2a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8016f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f30:	f7e9 fada 	bl	80004e8 <__aeabi_ui2d>
 8016f34:	4604      	mov	r4, r0
 8016f36:	460d      	mov	r5, r1
 8016f38:	f04f 0300 	mov.w	r3, #0
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7e9 faf5 	bl	800052c <__aeabi_f2d>
 8016f42:	a325      	add	r3, pc, #148	; (adr r3, 8016fd8 <start_SIM_task+0x168>)
 8016f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f48:	f7e9 fb48 	bl	80005dc <__aeabi_dmul>
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	460b      	mov	r3, r1
 8016f50:	4620      	mov	r0, r4
 8016f52:	4629      	mov	r1, r5
 8016f54:	f7e9 f98c 	bl	8000270 <__adddf3>
 8016f58:	4602      	mov	r2, r0
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	4610      	mov	r0, r2
 8016f5e:	4619      	mov	r1, r3
 8016f60:	f7e9 fe14 	bl	8000b8c <__aeabi_d2uiz>
 8016f64:	4603      	mov	r3, r0
 8016f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 8016f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f6a:	f012 ffdd 	bl	8029f28 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		xQueuePeek(charger_queue, &charger, 0);
 8016f6e:	4b21      	ldr	r3, [pc, #132]	; (8016ff4 <start_SIM_task+0x184>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f107 0108 	add.w	r1, r7, #8
 8016f76:	2200      	movs	r2, #0
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f013 fd15 	bl	802a9a8 <xQueuePeek>
		SIM0_U.CurrentLimit = charger.charger_current_limit;
 8016f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016f82:	491a      	ldr	r1, [pc, #104]	; (8016fec <start_SIM_task+0x17c>)
 8016f84:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		SIM0_U.VoltageLimit = charger.charger_voltage_limit;
 8016f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016f8c:	4917      	ldr	r1, [pc, #92]	; (8016fec <start_SIM_task+0x17c>)
 8016f8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		SIM0_U.EnableCharge = charger.enable_charger;
 8016f92:	7e3b      	ldrb	r3, [r7, #24]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7e9 faa7 	bl	80004e8 <__aeabi_ui2d>
 8016f9a:	4602      	mov	r2, r0
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	4913      	ldr	r1, [pc, #76]	; (8016fec <start_SIM_task+0x17c>)
 8016fa0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		SIM0_step();
 8016fa4:	f002 ffd8 	bl	8019f58 <SIM0_step>

		can1_dbu_status_1_transmit();
 8016fa8:	f7f9 f808 	bl	800ffbc <can1_dbu_status_1_transmit>
		can2_ivt_msg_result_i_transmit();
 8016fac:	f7fa fff8 	bl	8011fa0 <can2_ivt_msg_result_i_transmit>
		can2_ivt_msg_result_u1_transmit();
 8016fb0:	f7fb f842 	bl	8012038 <can2_ivt_msg_result_u1_transmit>
		can2_ivt_msg_result_u3_transmit();
 8016fb4:	f7fb f88c 	bl	80120d0 <can2_ivt_msg_result_u3_transmit>


		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016fb8:	e003      	b.n	8016fc2 <start_SIM_task+0x152>
			next_tick += tick_increment;
 8016fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbe:	4413      	add	r3, r2
 8016fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (next_tick < osKernelGetTickCount()) {
 8016fc2:	f012 feef 	bl	8029da4 <osKernelGetTickCount>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	4293      	cmp	r3, r2
 8016fcc:	d3f5      	bcc.n	8016fba <start_SIM_task+0x14a>
		}
		osDelayUntil(next_tick);
 8016fce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fd0:	f012 ffaa 	bl	8029f28 <osDelayUntil>
		xQueuePeek(charger_queue, &charger, 0);
 8016fd4:	e7cb      	b.n	8016f6e <start_SIM_task+0xfe>
 8016fd6:	bf00      	nop
 8016fd8:	aaaaaaab 	.word	0xaaaaaaab
 8016fdc:	408a0aaa 	.word	0x408a0aaa
 8016fe0:	2001b8f0 	.word	0x2001b8f0
 8016fe4:	3dcccccd 	.word	0x3dcccccd
 8016fe8:	20000360 	.word	0x20000360
 8016fec:	2001e8f8 	.word	0x2001e8f8
 8016ff0:	c0240000 	.word	0xc0240000
 8016ff4:	2001b748 	.word	0x2001b748

08016ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b082      	sub	sp, #8
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	4a04      	ldr	r2, [pc, #16]	; (8017018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8017006:	4293      	cmp	r3, r2
 8017008:	d101      	bne.n	801700e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801700a:	f00d fb67 	bl	80246dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801700e:	bf00      	nop
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	40000c00 	.word	0x40000c00

0801701c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801701c:	b480      	push	{r7}
 801701e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017020:	b672      	cpsid	i
}
 8017022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8017024:	e7fe      	b.n	8017024 <Error_Handler+0x8>
	...

08017028 <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
 801702e:	4603      	mov	r3, r0
 8017030:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
 8017032:	79fb      	ldrb	r3, [r7, #7]
 8017034:	4618      	mov	r0, r3
 8017036:	f7e9 fa57 	bl	80004e8 <__aeabi_ui2d>
 801703a:	4602      	mov	r2, r0
 801703c:	460b      	mov	r3, r1
 801703e:	4903      	ldr	r1, [pc, #12]	; (801704c <set_air_plus_ext+0x24>)
 8017040:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
#else
	HAL_GPIO_WritePin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin, closed);
#endif
}
 8017044:	bf00      	nop
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	2001e8f8 	.word	0x2001e8f8

08017050 <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 8017050:	b580      	push	{r7, lr}
 8017052:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
 8017054:	4b05      	ldr	r3, [pc, #20]	; (801706c <get_air_plus_ext+0x1c>)
 8017056:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801705a:	4610      	mov	r0, r2
 801705c:	4619      	mov	r1, r3
 801705e:	f7e9 fd95 	bl	8000b8c <__aeabi_d2uiz>
 8017062:	4603      	mov	r3, r0
 8017064:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port, AIR_plus_closed_Pin);
#endif
}
 8017066:	4618      	mov	r0, r3
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	2001db00 	.word	0x2001db00

08017070 <get_set_air_plus_ext>:

uint8_t get_set_air_plus_ext() {
 8017070:	b580      	push	{r7, lr}
 8017072:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirPlus;
 8017074:	4b05      	ldr	r3, [pc, #20]	; (801708c <get_set_air_plus_ext+0x1c>)
 8017076:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801707a:	4610      	mov	r0, r2
 801707c:	4619      	mov	r1, r3
 801707e:	f7e9 fd85 	bl	8000b8c <__aeabi_d2uiz>
 8017082:	4603      	mov	r3, r0
 8017084:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin);
#endif
}
 8017086:	4618      	mov	r0, r3
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	2001e8f8 	.word	0x2001e8f8

08017090 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	4603      	mov	r3, r0
 8017098:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
 801709a:	79fb      	ldrb	r3, [r7, #7]
 801709c:	4618      	mov	r0, r3
 801709e:	f7e9 fa23 	bl	80004e8 <__aeabi_ui2d>
 80170a2:	4602      	mov	r2, r0
 80170a4:	460b      	mov	r3, r1
 80170a6:	4903      	ldr	r1, [pc, #12]	; (80170b4 <set_air_minus_ext+0x24>)
 80170a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
#else
	HAL_GPIO_WritePin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin, closed);
#endif
}
 80170ac:	bf00      	nop
 80170ae:	3708      	adds	r7, #8
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	2001e8f8 	.word	0x2001e8f8

080170b8 <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 80170b8:	b580      	push	{r7, lr}
 80170ba:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
 80170bc:	4b05      	ldr	r3, [pc, #20]	; (80170d4 <get_air_minus_ext+0x1c>)
 80170be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80170c2:	4610      	mov	r0, r2
 80170c4:	4619      	mov	r1, r3
 80170c6:	f7e9 fd61 	bl	8000b8c <__aeabi_d2uiz>
 80170ca:	4603      	mov	r3, r0
 80170cc:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port, AIR_minus_closed_Pin);
#endif
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	bd80      	pop	{r7, pc}
 80170d2:	bf00      	nop
 80170d4:	2001db00 	.word	0x2001db00

080170d8 <get_set_air_minus_ext>:

uint8_t get_set_air_minus_ext() {
 80170d8:	b580      	push	{r7, lr}
 80170da:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirMinus;
 80170dc:	4b05      	ldr	r3, [pc, #20]	; (80170f4 <get_set_air_minus_ext+0x1c>)
 80170de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80170e2:	4610      	mov	r0, r2
 80170e4:	4619      	mov	r1, r3
 80170e6:	f7e9 fd51 	bl	8000b8c <__aeabi_d2uiz>
 80170ea:	4603      	mov	r3, r0
 80170ec:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin);
#endif
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	bd80      	pop	{r7, pc}
 80170f2:	bf00      	nop
 80170f4:	2001e8f8 	.word	0x2001e8f8

080170f8 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
 8017102:	79fb      	ldrb	r3, [r7, #7]
 8017104:	4618      	mov	r0, r3
 8017106:	f7e9 f9ef 	bl	80004e8 <__aeabi_ui2d>
 801710a:	4602      	mov	r2, r0
 801710c:	460b      	mov	r3, r1
 801710e:	4903      	ldr	r1, [pc, #12]	; (801711c <set_precharge_ext+0x24>)
 8017110:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#else
	HAL_GPIO_WritePin(enable_precharge_GPIO_Port, enable_precharge_Pin, closed);
#endif
}
 8017114:	bf00      	nop
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}
 801711c:	2001e8f8 	.word	0x2001e8f8

08017120 <get_precharge_ext>:

uint8_t get_precharge_ext() {
 8017120:	b580      	push	{r7, lr}
 8017122:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
 8017124:	4b05      	ldr	r3, [pc, #20]	; (801713c <get_precharge_ext+0x1c>)
 8017126:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801712a:	4610      	mov	r0, r2
 801712c:	4619      	mov	r1, r3
 801712e:	f7e9 fd2d 	bl	8000b8c <__aeabi_d2uiz>
 8017132:	4603      	mov	r3, r0
 8017134:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(precharge_closed_GPIO_Port, precharge_closed_Pin);
#endif

}
 8017136:	4618      	mov	r0, r3
 8017138:	bd80      	pop	{r7, pc}
 801713a:	bf00      	nop
 801713c:	2001db00 	.word	0x2001db00

08017140 <get_set_precharge_ext>:

uint8_t get_set_precharge_ext() {
 8017140:	b580      	push	{r7, lr}
 8017142:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnablePrecharge;
 8017144:	4b05      	ldr	r3, [pc, #20]	; (801715c <get_set_precharge_ext+0x1c>)
 8017146:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801714a:	4610      	mov	r0, r2
 801714c:	4619      	mov	r1, r3
 801714e:	f7e9 fd1d 	bl	8000b8c <__aeabi_d2uiz>
 8017152:	4603      	mov	r3, r0
 8017154:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_precharge_GPIO_Port, enable_precharge_Pin);
#endif
}
 8017156:	4618      	mov	r0, r3
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	2001e8f8 	.word	0x2001e8f8

08017160 <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	4603      	mov	r3, r0
 8017168:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
 801716a:	79fb      	ldrb	r3, [r7, #7]
 801716c:	4618      	mov	r0, r3
 801716e:	f7e9 f9bb 	bl	80004e8 <__aeabi_ui2d>
 8017172:	4602      	mov	r2, r0
 8017174:	460b      	mov	r3, r1
 8017176:	4903      	ldr	r1, [pc, #12]	; (8017184 <set_ams_error_ext+0x24>)
 8017178:	e9c1 2300 	strd	r2, r3, [r1]
#else
	HAL_GPIO_WritePin(AMS_error_GPIO_Port, AMS_error_Pin, raise_error);
#endif
}
 801717c:	bf00      	nop
 801717e:	3708      	adds	r7, #8
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}
 8017184:	2001e8f8 	.word	0x2001e8f8

08017188 <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 8017188:	b480      	push	{r7}
 801718a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
 801718c:	4b03      	ldr	r3, [pc, #12]	; (801719c <get_ams_error_latched_ext+0x14>)
 801718e:	781b      	ldrb	r3, [r3, #0]
#else
	return HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port, AMS_error_latched_Pin);
#endif
}
 8017190:	4618      	mov	r0, r3
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	2001db00 	.word	0x2001db00

080171a0 <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	4603      	mov	r3, r0
 80171a8:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
 80171aa:	79fb      	ldrb	r3, [r7, #7]
 80171ac:	4618      	mov	r0, r3
 80171ae:	f7e9 f99b 	bl	80004e8 <__aeabi_ui2d>
 80171b2:	4602      	mov	r2, r0
 80171b4:	460b      	mov	r3, r1
 80171b6:	4903      	ldr	r1, [pc, #12]	; (80171c4 <set_imd_error_ext+0x24>)
 80171b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
#else
	return HAL_GPIO_ReadPin(IMD_error_GPIO_Port, IMD_error_Pin);
#endif
}
 80171bc:	bf00      	nop
 80171be:	3708      	adds	r7, #8
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	2001e8f8 	.word	0x2001e8f8

080171c8 <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 80171c8:	b480      	push	{r7}
 80171ca:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
 80171cc:	4b03      	ldr	r3, [pc, #12]	; (80171dc <get_imd_error_latched_ext+0x14>)
 80171ce:	785b      	ldrb	r3, [r3, #1]
#else
	return HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port, IMD_error_latched_Pin);
#endif
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop
 80171dc:	2001db00 	.word	0x2001db00

080171e0 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 80171e0:	b580      	push	{r7, lr}
 80171e2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
 80171e4:	4b05      	ldr	r3, [pc, #20]	; (80171fc <get_sc_probe_ext+0x1c>)
 80171e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80171ea:	4610      	mov	r0, r2
 80171ec:	4619      	mov	r1, r3
 80171ee:	f7e9 fccd 	bl	8000b8c <__aeabi_d2uiz>
 80171f2:	4603      	mov	r3, r0
 80171f4:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
#endif
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	2001db00 	.word	0x2001db00

08017200 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext() {
 8017200:	b480      	push	{r7}
 8017202:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return 1;
 8017204:	2301      	movs	r3, #1
#else
	return HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
#endif
}
 8017206:	4618      	mov	r0, r3
 8017208:	46bd      	mov	sp, r7
 801720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720e:	4770      	bx	lr

08017210 <set_balance_ext>:


void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 8017210:	b590      	push	{r4, r7, lr}
 8017212:	b083      	sub	sp, #12
 8017214:	af00      	add	r7, sp, #0
 8017216:	4603      	mov	r3, r0
 8017218:	603a      	str	r2, [r7, #0]
 801721a:	71fb      	strb	r3, [r7, #7]
 801721c:	460b      	mov	r3, r1
 801721e:	71bb      	strb	r3, [r7, #6]
#ifdef SIMULATION
	SIM0_U.BalanceOut[index] = closed;
 8017220:	79bc      	ldrb	r4, [r7, #6]
 8017222:	79fb      	ldrb	r3, [r7, #7]
 8017224:	4618      	mov	r0, r3
 8017226:	f7e9 f95f 	bl	80004e8 <__aeabi_ui2d>
 801722a:	4602      	mov	r2, r0
 801722c:	460b      	mov	r3, r1
 801722e:	4805      	ldr	r0, [pc, #20]	; (8017244 <set_balance_ext+0x34>)
 8017230:	f104 010d 	add.w	r1, r4, #13
 8017234:	00c9      	lsls	r1, r1, #3
 8017236:	4401      	add	r1, r0
 8017238:	e9c1 2300 	strd	r2, r3, [r1]
#else

#endif

}
 801723c:	bf00      	nop
 801723e:	370c      	adds	r7, #12
 8017240:	46bd      	mov	sp, r7
 8017242:	bd90      	pop	{r4, r7, pc}
 8017244:	2001e8f8 	.word	0x2001e8f8

08017248 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 8017248:	b480      	push	{r7}
 801724a:	b085      	sub	sp, #20
 801724c:	af00      	add	r7, sp, #0
 801724e:	4603      	mov	r3, r0
 8017250:	6039      	str	r1, [r7, #0]
 8017252:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8017254:	2310      	movs	r3, #16
 8017256:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8017258:	2300      	movs	r3, #0
 801725a:	737b      	strb	r3, [r7, #13]
 801725c:	e018      	b.n	8017290 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	09db      	lsrs	r3, r3, #7
 8017262:	b29a      	uxth	r2, r3
 8017264:	7b7b      	ldrb	r3, [r7, #13]
 8017266:	6839      	ldr	r1, [r7, #0]
 8017268:	440b      	add	r3, r1
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	b29b      	uxth	r3, r3
 801726e:	4053      	eors	r3, r2
 8017270:	b29b      	uxth	r3, r3
 8017272:	b2db      	uxtb	r3, r3
 8017274:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8017276:	89fb      	ldrh	r3, [r7, #14]
 8017278:	021b      	lsls	r3, r3, #8
 801727a:	b29a      	uxth	r2, r3
 801727c:	897b      	ldrh	r3, [r7, #10]
 801727e:	490b      	ldr	r1, [pc, #44]	; (80172ac <pec15_calc+0x64>)
 8017280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017284:	b29b      	uxth	r3, r3
 8017286:	4053      	eors	r3, r2
 8017288:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 801728a:	7b7b      	ldrb	r3, [r7, #13]
 801728c:	3301      	adds	r3, #1
 801728e:	737b      	strb	r3, [r7, #13]
 8017290:	7b7a      	ldrb	r2, [r7, #13]
 8017292:	79fb      	ldrb	r3, [r7, #7]
 8017294:	429a      	cmp	r2, r3
 8017296:	d3e2      	bcc.n	801725e <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8017298:	89fb      	ldrh	r3, [r7, #14]
 801729a:	005b      	lsls	r3, r3, #1
 801729c:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3714      	adds	r7, #20
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop
 80172ac:	0802f5ec 	.word	0x0802f5ec

080172b0 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 80172b8:	4a04      	ldr	r2, [pc, #16]	; (80172cc <initialize_LTC+0x1c>)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6013      	str	r3, [r2, #0]
}
 80172be:	bf00      	nop
 80172c0:	370c      	adds	r7, #12
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	2001b90c 	.word	0x2001b90c

080172d0 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 80172d0:	b580      	push	{r7, lr}
 80172d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 80172d4:	2200      	movs	r2, #0
 80172d6:	2110      	movs	r1, #16
 80172d8:	4802      	ldr	r0, [pc, #8]	; (80172e4 <LTC_CS_select+0x14>)
 80172da:	f00f fc5d 	bl	8026b98 <HAL_GPIO_WritePin>
}
 80172de:	bf00      	nop
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	40020800 	.word	0x40020800

080172e8 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 80172e8:	b580      	push	{r7, lr}
 80172ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 80172ec:	2201      	movs	r2, #1
 80172ee:	2110      	movs	r1, #16
 80172f0:	4802      	ldr	r0, [pc, #8]	; (80172fc <LTC_CS_deselect+0x14>)
 80172f2:	f00f fc51 	bl	8026b98 <HAL_GPIO_WritePin>
}
 80172f6:	bf00      	nop
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	bf00      	nop
 80172fc:	40020800 	.word	0x40020800

08017300 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8017300:	b580      	push	{r7, lr}
 8017302:	b082      	sub	sp, #8
 8017304:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 8017306:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 801730a:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 801730c:	88fb      	ldrh	r3, [r7, #6]
 801730e:	0a1b      	lsrs	r3, r3, #8
 8017310:	b29b      	uxth	r3, r3
 8017312:	b2da      	uxtb	r2, r3
 8017314:	4b12      	ldr	r3, [pc, #72]	; (8017360 <LTC_wake+0x60>)
 8017316:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8017318:	88fb      	ldrh	r3, [r7, #6]
 801731a:	b2da      	uxtb	r2, r3
 801731c:	4b10      	ldr	r3, [pc, #64]	; (8017360 <LTC_wake+0x60>)
 801731e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8017320:	490f      	ldr	r1, [pc, #60]	; (8017360 <LTC_wake+0x60>)
 8017322:	2002      	movs	r0, #2
 8017324:	f7ff ff90 	bl	8017248 <pec15_calc>
 8017328:	4603      	mov	r3, r0
 801732a:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 801732c:	88bb      	ldrh	r3, [r7, #4]
 801732e:	0a1b      	lsrs	r3, r3, #8
 8017330:	b29b      	uxth	r3, r3
 8017332:	b2da      	uxtb	r2, r3
 8017334:	4b0a      	ldr	r3, [pc, #40]	; (8017360 <LTC_wake+0x60>)
 8017336:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8017338:	88bb      	ldrh	r3, [r7, #4]
 801733a:	b2da      	uxtb	r2, r3
 801733c:	4b08      	ldr	r3, [pc, #32]	; (8017360 <LTC_wake+0x60>)
 801733e:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8017340:	f7ff ffc6 	bl	80172d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8017344:	4b07      	ldr	r3, [pc, #28]	; (8017364 <LTC_wake+0x64>)
 8017346:	6818      	ldr	r0, [r3, #0]
 8017348:	2300      	movs	r3, #0
 801734a:	2204      	movs	r2, #4
 801734c:	4904      	ldr	r1, [pc, #16]	; (8017360 <LTC_wake+0x60>)
 801734e:	f010 f954 	bl	80275fa <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8017352:	f7ff ffc9 	bl	80172e8 <LTC_CS_deselect>

	return 1;
 8017356:	2301      	movs	r3, #1
}
 8017358:	4618      	mov	r0, r3
 801735a:	3708      	adds	r7, #8
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}
 8017360:	2001b920 	.word	0x2001b920
 8017364:	2001b90c 	.word	0x2001b90c

08017368 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 8017368:	b580      	push	{r7, lr}
 801736a:	b084      	sub	sp, #16
 801736c:	af00      	add	r7, sp, #0
 801736e:	4603      	mov	r3, r0
 8017370:	460a      	mov	r2, r1
 8017372:	71fb      	strb	r3, [r7, #7]
 8017374:	4613      	mov	r3, r2
 8017376:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8017378:	79fb      	ldrb	r3, [r7, #7]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d006      	beq.n	801738c <LTC_command+0x24>
		if (!LTC_wake()) {
 801737e:	f7ff ffbf 	bl	8017300 <LTC_wake>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d101      	bne.n	801738c <LTC_command+0x24>
			return 0;
 8017388:	2300      	movs	r3, #0
 801738a:	e025      	b.n	80173d8 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 801738c:	88bb      	ldrh	r3, [r7, #4]
 801738e:	0a1b      	lsrs	r3, r3, #8
 8017390:	b29b      	uxth	r3, r3
 8017392:	b2da      	uxtb	r2, r3
 8017394:	4b12      	ldr	r3, [pc, #72]	; (80173e0 <LTC_command+0x78>)
 8017396:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8017398:	88bb      	ldrh	r3, [r7, #4]
 801739a:	b2da      	uxtb	r2, r3
 801739c:	4b10      	ldr	r3, [pc, #64]	; (80173e0 <LTC_command+0x78>)
 801739e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 80173a0:	490f      	ldr	r1, [pc, #60]	; (80173e0 <LTC_command+0x78>)
 80173a2:	2002      	movs	r0, #2
 80173a4:	f7ff ff50 	bl	8017248 <pec15_calc>
 80173a8:	4603      	mov	r3, r0
 80173aa:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 80173ac:	89fb      	ldrh	r3, [r7, #14]
 80173ae:	0a1b      	lsrs	r3, r3, #8
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	b2da      	uxtb	r2, r3
 80173b4:	4b0a      	ldr	r3, [pc, #40]	; (80173e0 <LTC_command+0x78>)
 80173b6:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 80173b8:	89fb      	ldrh	r3, [r7, #14]
 80173ba:	b2da      	uxtb	r2, r3
 80173bc:	4b08      	ldr	r3, [pc, #32]	; (80173e0 <LTC_command+0x78>)
 80173be:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 80173c0:	f7ff ff86 	bl	80172d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80173c4:	4b07      	ldr	r3, [pc, #28]	; (80173e4 <LTC_command+0x7c>)
 80173c6:	6818      	ldr	r0, [r3, #0]
 80173c8:	2300      	movs	r3, #0
 80173ca:	2204      	movs	r2, #4
 80173cc:	4904      	ldr	r1, [pc, #16]	; (80173e0 <LTC_command+0x78>)
 80173ce:	f010 f914 	bl	80275fa <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80173d2:	f7ff ff89 	bl	80172e8 <LTC_CS_deselect>

	return 1;
 80173d6:	2301      	movs	r3, #1
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3710      	adds	r7, #16
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	2001b920 	.word	0x2001b920
 80173e4:	2001b90c 	.word	0x2001b90c

080173e8 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	4603      	mov	r3, r0
 80173f0:	460a      	mov	r2, r1
 80173f2:	71fb      	strb	r3, [r7, #7]
 80173f4:	4613      	mov	r3, r2
 80173f6:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80173f8:	79fb      	ldrb	r3, [r7, #7]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d006      	beq.n	801740c <LTC_read_command+0x24>
		if (!LTC_wake()) {
 80173fe:	f7ff ff7f 	bl	8017300 <LTC_wake>
 8017402:	4603      	mov	r3, r0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d101      	bne.n	801740c <LTC_read_command+0x24>
			return 0;
 8017408:	2300      	movs	r3, #0
 801740a:	e042      	b.n	8017492 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 801740c:	88bb      	ldrh	r3, [r7, #4]
 801740e:	0a1b      	lsrs	r3, r3, #8
 8017410:	b29b      	uxth	r3, r3
 8017412:	b2da      	uxtb	r2, r3
 8017414:	4b21      	ldr	r3, [pc, #132]	; (801749c <LTC_read_command+0xb4>)
 8017416:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8017418:	88bb      	ldrh	r3, [r7, #4]
 801741a:	b2da      	uxtb	r2, r3
 801741c:	4b1f      	ldr	r3, [pc, #124]	; (801749c <LTC_read_command+0xb4>)
 801741e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8017420:	491e      	ldr	r1, [pc, #120]	; (801749c <LTC_read_command+0xb4>)
 8017422:	2002      	movs	r0, #2
 8017424:	f7ff ff10 	bl	8017248 <pec15_calc>
 8017428:	4603      	mov	r3, r0
 801742a:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 801742c:	89fb      	ldrh	r3, [r7, #14]
 801742e:	0a1b      	lsrs	r3, r3, #8
 8017430:	b29b      	uxth	r3, r3
 8017432:	b2da      	uxtb	r2, r3
 8017434:	4b19      	ldr	r3, [pc, #100]	; (801749c <LTC_read_command+0xb4>)
 8017436:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8017438:	89fb      	ldrh	r3, [r7, #14]
 801743a:	b2da      	uxtb	r2, r3
 801743c:	4b17      	ldr	r3, [pc, #92]	; (801749c <LTC_read_command+0xb4>)
 801743e:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8017440:	f7ff ff46 	bl	80172d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8017444:	4b16      	ldr	r3, [pc, #88]	; (80174a0 <LTC_read_command+0xb8>)
 8017446:	6818      	ldr	r0, [r3, #0]
 8017448:	2300      	movs	r3, #0
 801744a:	2204      	movs	r2, #4
 801744c:	4913      	ldr	r1, [pc, #76]	; (801749c <LTC_read_command+0xb4>)
 801744e:	f010 f8d4 	bl	80275fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8017452:	4b13      	ldr	r3, [pc, #76]	; (80174a0 <LTC_read_command+0xb8>)
 8017454:	6818      	ldr	r0, [r3, #0]
 8017456:	2300      	movs	r3, #0
 8017458:	220a      	movs	r2, #10
 801745a:	4912      	ldr	r1, [pc, #72]	; (80174a4 <LTC_read_command+0xbc>)
 801745c:	f010 fa09 	bl	8027872 <HAL_SPI_Receive>
	LTC_CS_deselect();
 8017460:	f7ff ff42 	bl	80172e8 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8017464:	490f      	ldr	r1, [pc, #60]	; (80174a4 <LTC_read_command+0xbc>)
 8017466:	2008      	movs	r0, #8
 8017468:	f7ff feee 	bl	8017248 <pec15_calc>
 801746c:	4603      	mov	r3, r0
 801746e:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8017470:	89fb      	ldrh	r3, [r7, #14]
 8017472:	0a1b      	lsrs	r3, r3, #8
 8017474:	b29b      	uxth	r3, r3
 8017476:	b2db      	uxtb	r3, r3
 8017478:	4a0a      	ldr	r2, [pc, #40]	; (80174a4 <LTC_read_command+0xbc>)
 801747a:	7a12      	ldrb	r2, [r2, #8]
 801747c:	4293      	cmp	r3, r2
 801747e:	d005      	beq.n	801748c <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8017480:	89fb      	ldrh	r3, [r7, #14]
 8017482:	b2db      	uxtb	r3, r3
 8017484:	4a07      	ldr	r2, [pc, #28]	; (80174a4 <LTC_read_command+0xbc>)
 8017486:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8017488:	4293      	cmp	r3, r2
 801748a:	d101      	bne.n	8017490 <LTC_read_command+0xa8>
		return 0;
 801748c:	2300      	movs	r3, #0
 801748e:	e000      	b.n	8017492 <LTC_read_command+0xaa>
	}

	return 1;
 8017490:	2301      	movs	r3, #1
}
 8017492:	4618      	mov	r0, r3
 8017494:	3710      	adds	r7, #16
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}
 801749a:	bf00      	nop
 801749c:	2001b920 	.word	0x2001b920
 80174a0:	2001b90c 	.word	0x2001b90c
 80174a4:	2001b914 	.word	0x2001b914

080174a8 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b08a      	sub	sp, #40	; 0x28
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	4603      	mov	r3, r0
 80174b0:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;
	uint16_t all_read; /* LTC_data_valid[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_data_valid[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_data_valid[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */

	LTC_data_valid = 0;
 80174b2:	4b42      	ldr	r3, [pc, #264]	; (80175bc <LTC_acquire_data+0x114>)
 80174b4:	2200      	movs	r2, #0
 80174b6:	701a      	strb	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 80174b8:	f44f 735c 	mov.w	r3, #880	; 0x370
 80174bc:	613b      	str	r3, [r7, #16]

	LTC_command(wake, command);
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	79fb      	ldrb	r3, [r7, #7]
 80174c4:	4611      	mov	r1, r2
 80174c6:	4618      	mov	r0, r3
 80174c8:	f7ff ff4e 	bl	8017368 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80174cc:	2002      	movs	r0, #2
 80174ce:	f00d f925 	bl	802471c <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 80174d2:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80174d6:	613b      	str	r3, [r7, #16]

	LTC_command(0, command);
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	b29b      	uxth	r3, r3
 80174dc:	4619      	mov	r1, r3
 80174de:	2000      	movs	r0, #0
 80174e0:	f7ff ff42 	bl	8017368 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80174e4:	2002      	movs	r0, #2
 80174e6:	f00d f919 	bl	802471c <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 80174ee:	2300      	movs	r3, #0
 80174f0:	623b      	str	r3, [r7, #32]
 80174f2:	e056      	b.n	80175a2 <LTC_acquire_data+0xfa>
		all_read = 1;
 80174f4:	2301      	movs	r3, #1
 80174f6:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 80174f8:	2301      	movs	r3, #1
 80174fa:	81fb      	strh	r3, [r7, #14]
		all_ones = 1;
 80174fc:	2301      	movs	r3, #1
 80174fe:	81bb      	strh	r3, [r7, #12]

		for (i = 0; i < 6; i++) {
 8017500:	2300      	movs	r3, #0
 8017502:	61fb      	str	r3, [r7, #28]
 8017504:	e038      	b.n	8017578 <LTC_acquire_data+0xd0>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 8017506:	6a3b      	ldr	r3, [r7, #32]
 8017508:	02db      	lsls	r3, r3, #11
 801750a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801750e:	f043 0304 	orr.w	r3, r3, #4
 8017512:	613b      	str	r3, [r7, #16]
			command += 2 * i;
 8017514:	69fb      	ldr	r3, [r7, #28]
 8017516:	005b      	lsls	r3, r3, #1
 8017518:	693a      	ldr	r2, [r7, #16]
 801751a:	4413      	add	r3, r2
 801751c:	613b      	str	r3, [r7, #16]

			all_read &= LTC_read_command(0, command);
 801751e:	693b      	ldr	r3, [r7, #16]
 8017520:	b29b      	uxth	r3, r3
 8017522:	4619      	mov	r1, r3
 8017524:	2000      	movs	r0, #0
 8017526:	f7ff ff5f 	bl	80173e8 <LTC_read_command>
 801752a:	4603      	mov	r3, r0
 801752c:	b29a      	uxth	r2, r3
 801752e:	8afb      	ldrh	r3, [r7, #22]
 8017530:	4013      	ands	r3, r2
 8017532:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8017534:	2300      	movs	r3, #0
 8017536:	61bb      	str	r3, [r7, #24]
 8017538:	e018      	b.n	801756c <LTC_acquire_data+0xc4>
				LTC_data[p] = LTC_read_buffer[2 * j]
 801753a:	69bb      	ldr	r3, [r7, #24]
 801753c:	005b      	lsls	r3, r3, #1
 801753e:	4a20      	ldr	r2, [pc, #128]	; (80175c0 <LTC_acquire_data+0x118>)
 8017540:	5cd3      	ldrb	r3, [r2, r3]
 8017542:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8017544:	69bb      	ldr	r3, [r7, #24]
 8017546:	005b      	lsls	r3, r3, #1
 8017548:	3301      	adds	r3, #1
 801754a:	491d      	ldr	r1, [pc, #116]	; (80175c0 <LTC_acquire_data+0x118>)
 801754c:	5ccb      	ldrb	r3, [r1, r3]
 801754e:	021b      	lsls	r3, r3, #8
 8017550:	b21b      	sxth	r3, r3
 8017552:	4313      	orrs	r3, r2
 8017554:	b21b      	sxth	r3, r3
 8017556:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 8017558:	4a1a      	ldr	r2, [pc, #104]	; (80175c4 <LTC_acquire_data+0x11c>)
 801755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801755c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				//all_zeros &= (LTC_data[p] == 0);
				//all_ones &= (LTC_data[p] == -1);

				p++;
 8017560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017562:	3301      	adds	r3, #1
 8017564:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	3301      	adds	r3, #1
 801756a:	61bb      	str	r3, [r7, #24]
 801756c:	69bb      	ldr	r3, [r7, #24]
 801756e:	2b02      	cmp	r3, #2
 8017570:	dde3      	ble.n	801753a <LTC_acquire_data+0x92>
		for (i = 0; i < 6; i++) {
 8017572:	69fb      	ldr	r3, [r7, #28]
 8017574:	3301      	adds	r3, #1
 8017576:	61fb      	str	r3, [r7, #28]
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	2b05      	cmp	r3, #5
 801757c:	ddc3      	ble.n	8017506 <LTC_acquire_data+0x5e>
			}
		}

		LTC_data_valid = (all_read && !all_zeros && !all_ones);
 801757e:	8afb      	ldrh	r3, [r7, #22]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d007      	beq.n	8017594 <LTC_acquire_data+0xec>
 8017584:	89fb      	ldrh	r3, [r7, #14]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d104      	bne.n	8017594 <LTC_acquire_data+0xec>
 801758a:	89bb      	ldrh	r3, [r7, #12]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d101      	bne.n	8017594 <LTC_acquire_data+0xec>
 8017590:	2301      	movs	r3, #1
 8017592:	e000      	b.n	8017596 <LTC_acquire_data+0xee>
 8017594:	2300      	movs	r3, #0
 8017596:	b2da      	uxtb	r2, r3
 8017598:	4b08      	ldr	r3, [pc, #32]	; (80175bc <LTC_acquire_data+0x114>)
 801759a:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 801759c:	6a3b      	ldr	r3, [r7, #32]
 801759e:	3301      	adds	r3, #1
 80175a0:	623b      	str	r3, [r7, #32]
 80175a2:	6a3b      	ldr	r3, [r7, #32]
 80175a4:	2b0b      	cmp	r3, #11
 80175a6:	dda5      	ble.n	80174f4 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 80175a8:	f000 f80e 	bl	80175c8 <LTC_make_voltages>
	LTC_make_temperatures();
 80175ac:	f000 f854 	bl	8017658 <LTC_make_temperatures>

	return 1;
 80175b0:	2301      	movs	r3, #1
}
 80175b2:	4618      	mov	r0, r3
 80175b4:	3728      	adds	r7, #40	; 0x28
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}
 80175ba:	bf00      	nop
 80175bc:	2001b910 	.word	0x2001b910
 80175c0:	2001b914 	.word	0x2001b914
 80175c4:	2001bd18 	.word	0x2001bd18

080175c8 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 80175c8:	b590      	push	{r4, r7, lr}
 80175ca:	b083      	sub	sp, #12
 80175cc:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 80175ce:	2300      	movs	r3, #0
 80175d0:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80175d2:	2300      	movs	r3, #0
 80175d4:	80fb      	strh	r3, [r7, #6]
 80175d6:	e02e      	b.n	8017636 <LTC_make_voltages+0x6e>
		K = cellstack_voltage_count(cellstack);
 80175d8:	88fb      	ldrh	r3, [r7, #6]
 80175da:	f003 0301 	and.w	r3, r3, #1
 80175de:	b29b      	uxth	r3, r3
 80175e0:	f1c3 030b 	rsb	r3, r3, #11
 80175e4:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 80175e6:	2300      	movs	r3, #0
 80175e8:	80bb      	strh	r3, [r7, #4]
 80175ea:	e01d      	b.n	8017628 <LTC_make_voltages+0x60>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 80175ec:	88fa      	ldrh	r2, [r7, #6]
 80175ee:	4613      	mov	r3, r2
 80175f0:	00db      	lsls	r3, r3, #3
 80175f2:	4413      	add	r3, r2
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	461a      	mov	r2, r3
 80175f8:	88bb      	ldrh	r3, [r7, #4]
 80175fa:	4413      	add	r3, r2
 80175fc:	4a14      	ldr	r2, [pc, #80]	; (8017650 <LTC_make_voltages+0x88>)
 80175fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017602:	4618      	mov	r0, r3
 8017604:	f7e8 ff80 	bl	8000508 <__aeabi_i2d>
 8017608:	887c      	ldrh	r4, [r7, #2]
 801760a:	a30f      	add	r3, pc, #60	; (adr r3, 8017648 <LTC_make_voltages+0x80>)
 801760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017610:	f7e8 ffe4 	bl	80005dc <__aeabi_dmul>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	480e      	ldr	r0, [pc, #56]	; (8017654 <LTC_make_voltages+0x8c>)
 801761a:	00e1      	lsls	r1, r4, #3
 801761c:	4401      	add	r1, r0
 801761e:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8017622:	88bb      	ldrh	r3, [r7, #4]
 8017624:	3301      	adds	r3, #1
 8017626:	80bb      	strh	r3, [r7, #4]
 8017628:	88ba      	ldrh	r2, [r7, #4]
 801762a:	883b      	ldrh	r3, [r7, #0]
 801762c:	429a      	cmp	r2, r3
 801762e:	d3dd      	bcc.n	80175ec <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8017630:	88fb      	ldrh	r3, [r7, #6]
 8017632:	3301      	adds	r3, #1
 8017634:	80fb      	strh	r3, [r7, #6]
 8017636:	88fb      	ldrh	r3, [r7, #6]
 8017638:	2b0b      	cmp	r3, #11
 801763a:	d9cd      	bls.n	80175d8 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 801763c:	2301      	movs	r3, #1
}
 801763e:	4618      	mov	r0, r3
 8017640:	370c      	adds	r7, #12
 8017642:	46bd      	mov	sp, r7
 8017644:	bd90      	pop	{r4, r7, pc}
 8017646:	bf00      	nop
 8017648:	eb1c432d 	.word	0xeb1c432d
 801764c:	3f1a36e2 	.word	0x3f1a36e2
 8017650:	2001bd18 	.word	0x2001bd18
 8017654:	2001b928 	.word	0x2001b928

08017658 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8017658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801765c:	b08d      	sub	sp, #52	; 0x34
 801765e:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	double beta = 3500;
 8017660:	a35f      	add	r3, pc, #380	; (adr r3, 80177e0 <LTC_make_temperatures+0x188>)
 8017662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017666:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 801766a:	a35f      	add	r3, pc, #380	; (adr r3, 80177e8 <LTC_make_temperatures+0x190>)
 801766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017670:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 8017674:	6a38      	ldr	r0, [r7, #32]
 8017676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017678:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 801767c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017680:	f7e9 f8d6 	bl	8000830 <__aeabi_ddiv>
 8017684:	4602      	mov	r2, r0
 8017686:	460b      	mov	r3, r1
 8017688:	ec43 2b17 	vmov	d7, r2, r3
 801768c:	eeb0 0a47 	vmov.f32	s0, s14
 8017690:	eef0 0a67 	vmov.f32	s1, s15
 8017694:	f017 f8fc 	bl	802e890 <exp>
 8017698:	ec51 0b10 	vmov	r0, r1, d0
 801769c:	a354      	add	r3, pc, #336	; (adr r3, 80177f0 <LTC_make_temperatures+0x198>)
 801769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a2:	f7e8 ff9b 	bl	80005dc <__aeabi_dmul>
 80176a6:	4602      	mov	r2, r0
 80176a8:	460b      	mov	r3, r1
 80176aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 80176ae:	a350      	add	r3, pc, #320	; (adr r3, 80177f0 <LTC_make_temperatures+0x198>)
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 80176b8:	2300      	movs	r3, #0
 80176ba:	80fb      	strh	r3, [r7, #6]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80176bc:	2300      	movs	r3, #0
 80176be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80176c0:	e07b      	b.n	80177ba <LTC_make_temperatures+0x162>
		K = 5;
 80176c2:	2305      	movs	r3, #5
 80176c4:	80bb      	strh	r3, [r7, #4]

		for (k = 0; k < K; k++) {
 80176c6:	2300      	movs	r3, #0
 80176c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80176ca:	e06f      	b.n	80177ac <LTC_make_temperatures+0x154>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80176cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80176ce:	4613      	mov	r3, r2
 80176d0:	00db      	lsls	r3, r3, #3
 80176d2:	4413      	add	r3, r2
 80176d4:	005b      	lsls	r3, r3, #1
 80176d6:	f103 020c 	add.w	r2, r3, #12
 80176da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80176dc:	4413      	add	r3, r2
 80176de:	4a3e      	ldr	r2, [pc, #248]	; (80177d8 <LTC_make_temperatures+0x180>)
 80176e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80176e4:	4618      	mov	r0, r3
 80176e6:	f7e8 ff0f 	bl	8000508 <__aeabi_i2d>
 80176ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80176ee:	f7e8 ff75 	bl	80005dc <__aeabi_dmul>
 80176f2:	4602      	mov	r2, r0
 80176f4:	460b      	mov	r3, r1
 80176f6:	ec43 2b17 	vmov	d7, r2, r3
 80176fa:	eeb0 0a47 	vmov.f32	s0, s14
 80176fe:	eef0 0a67 	vmov.f32	s1, s15
 8017702:	f017 f915 	bl	802e930 <log>
 8017706:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 801770a:	693c      	ldr	r4, [r7, #16]
 801770c:	697b      	ldr	r3, [r7, #20]
 801770e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 8017712:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017714:	4613      	mov	r3, r2
 8017716:	00db      	lsls	r3, r3, #3
 8017718:	4413      	add	r3, r2
 801771a:	005b      	lsls	r3, r3, #1
 801771c:	f103 020c 	add.w	r2, r3, #12
 8017720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017722:	4413      	add	r3, r2
 8017724:	4a2c      	ldr	r2, [pc, #176]	; (80177d8 <LTC_make_temperatures+0x180>)
 8017726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801772a:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 801772c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801772e:	4613      	mov	r3, r2
 8017730:	00db      	lsls	r3, r3, #3
 8017732:	4413      	add	r3, r2
 8017734:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8017736:	f103 020c 	add.w	r2, r3, #12
 801773a:	88bb      	ldrh	r3, [r7, #4]
 801773c:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 801773e:	4a26      	ldr	r2, [pc, #152]	; (80177d8 <LTC_make_temperatures+0x180>)
 8017740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017744:	1acb      	subs	r3, r1, r3
							- log(
 8017746:	4618      	mov	r0, r3
 8017748:	f7e8 fede 	bl	8000508 <__aeabi_i2d>
 801774c:	4602      	mov	r2, r0
 801774e:	460b      	mov	r3, r1
 8017750:	4620      	mov	r0, r4
 8017752:	4629      	mov	r1, r5
 8017754:	f7e8 ff42 	bl	80005dc <__aeabi_dmul>
 8017758:	4602      	mov	r2, r0
 801775a:	460b      	mov	r3, r1
 801775c:	ec43 2b17 	vmov	d7, r2, r3
 8017760:	eeb0 0a47 	vmov.f32	s0, s14
 8017764:	eef0 0a67 	vmov.f32	s1, s15
 8017768:	f017 f8e2 	bl	802e930 <log>
 801776c:	ec53 2b10 	vmov	r2, r3, d0
 8017770:	4640      	mov	r0, r8
 8017772:	4649      	mov	r1, r9
 8017774:	f7e8 fd7a 	bl	800026c <__aeabi_dsub>
 8017778:	4602      	mov	r2, r0
 801777a:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 801777c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8017780:	f7e9 f856 	bl	8000830 <__aeabi_ddiv>
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	4610      	mov	r0, r2
 801778a:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 801778c:	88fe      	ldrh	r6, [r7, #6]
					- 273.15;
 801778e:	a310      	add	r3, pc, #64	; (adr r3, 80177d0 <LTC_make_temperatures+0x178>)
 8017790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017794:	f7e8 fd6a 	bl	800026c <__aeabi_dsub>
 8017798:	4602      	mov	r2, r0
 801779a:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 801779c:	480f      	ldr	r0, [pc, #60]	; (80177dc <LTC_make_temperatures+0x184>)
 801779e:	00f1      	lsls	r1, r6, #3
 80177a0:	4401      	add	r1, r0
 80177a2:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 80177a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80177a8:	3301      	adds	r3, #1
 80177aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80177ac:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80177ae:	88bb      	ldrh	r3, [r7, #4]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d38b      	bcc.n	80176cc <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 80177b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80177b6:	3301      	adds	r3, #1
 80177b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80177ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80177bc:	2b0b      	cmp	r3, #11
 80177be:	d980      	bls.n	80176c2 <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 80177c0:	2301      	movs	r3, #1
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	3734      	adds	r7, #52	; 0x34
 80177c6:	46bd      	mov	sp, r7
 80177c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177cc:	f3af 8000 	nop.w
 80177d0:	66666666 	.word	0x66666666
 80177d4:	40711266 	.word	0x40711266
 80177d8:	2001bd18 	.word	0x2001bd18
 80177dc:	2001bec8 	.word	0x2001bec8
 80177e0:	00000000 	.word	0x00000000
 80177e4:	40ab5800 	.word	0x40ab5800
 80177e8:	66666666 	.word	0x66666666
 80177ec:	4072a266 	.word	0x4072a266
 80177f0:	00000000 	.word	0x00000000
 80177f4:	40c38800 	.word	0x40c38800

080177f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80177fc:	4b17      	ldr	r3, [pc, #92]	; (801785c <MX_SPI2_Init+0x64>)
 80177fe:	4a18      	ldr	r2, [pc, #96]	; (8017860 <MX_SPI2_Init+0x68>)
 8017800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017802:	4b16      	ldr	r3, [pc, #88]	; (801785c <MX_SPI2_Init+0x64>)
 8017804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801780a:	4b14      	ldr	r3, [pc, #80]	; (801785c <MX_SPI2_Init+0x64>)
 801780c:	2200      	movs	r2, #0
 801780e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017810:	4b12      	ldr	r3, [pc, #72]	; (801785c <MX_SPI2_Init+0x64>)
 8017812:	2200      	movs	r2, #0
 8017814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017816:	4b11      	ldr	r3, [pc, #68]	; (801785c <MX_SPI2_Init+0x64>)
 8017818:	2200      	movs	r2, #0
 801781a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801781c:	4b0f      	ldr	r3, [pc, #60]	; (801785c <MX_SPI2_Init+0x64>)
 801781e:	2200      	movs	r2, #0
 8017820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017822:	4b0e      	ldr	r3, [pc, #56]	; (801785c <MX_SPI2_Init+0x64>)
 8017824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801782a:	4b0c      	ldr	r3, [pc, #48]	; (801785c <MX_SPI2_Init+0x64>)
 801782c:	2220      	movs	r2, #32
 801782e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017830:	4b0a      	ldr	r3, [pc, #40]	; (801785c <MX_SPI2_Init+0x64>)
 8017832:	2200      	movs	r2, #0
 8017834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017836:	4b09      	ldr	r3, [pc, #36]	; (801785c <MX_SPI2_Init+0x64>)
 8017838:	2200      	movs	r2, #0
 801783a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801783c:	4b07      	ldr	r3, [pc, #28]	; (801785c <MX_SPI2_Init+0x64>)
 801783e:	2200      	movs	r2, #0
 8017840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017842:	4b06      	ldr	r3, [pc, #24]	; (801785c <MX_SPI2_Init+0x64>)
 8017844:	220a      	movs	r2, #10
 8017846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017848:	4804      	ldr	r0, [pc, #16]	; (801785c <MX_SPI2_Init+0x64>)
 801784a:	f00f fe4d 	bl	80274e8 <HAL_SPI_Init>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d001      	beq.n	8017858 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017854:	f7ff fbe2 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017858:	bf00      	nop
 801785a:	bd80      	pop	{r7, pc}
 801785c:	2001c0a8 	.word	0x2001c0a8
 8017860:	40003800 	.word	0x40003800

08017864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b08a      	sub	sp, #40	; 0x28
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801786c:	f107 0314 	add.w	r3, r7, #20
 8017870:	2200      	movs	r2, #0
 8017872:	601a      	str	r2, [r3, #0]
 8017874:	605a      	str	r2, [r3, #4]
 8017876:	609a      	str	r2, [r3, #8]
 8017878:	60da      	str	r2, [r3, #12]
 801787a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	4a28      	ldr	r2, [pc, #160]	; (8017924 <HAL_SPI_MspInit+0xc0>)
 8017882:	4293      	cmp	r3, r2
 8017884:	d14a      	bne.n	801791c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017886:	2300      	movs	r3, #0
 8017888:	613b      	str	r3, [r7, #16]
 801788a:	4b27      	ldr	r3, [pc, #156]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 801788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788e:	4a26      	ldr	r2, [pc, #152]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 8017890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017894:	6413      	str	r3, [r2, #64]	; 0x40
 8017896:	4b24      	ldr	r3, [pc, #144]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 8017898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801789e:	613b      	str	r3, [r7, #16]
 80178a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80178a2:	2300      	movs	r3, #0
 80178a4:	60fb      	str	r3, [r7, #12]
 80178a6:	4b20      	ldr	r3, [pc, #128]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178aa:	4a1f      	ldr	r2, [pc, #124]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178ac:	f043 0304 	orr.w	r3, r3, #4
 80178b0:	6313      	str	r3, [r2, #48]	; 0x30
 80178b2:	4b1d      	ldr	r3, [pc, #116]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178b6:	f003 0304 	and.w	r3, r3, #4
 80178ba:	60fb      	str	r3, [r7, #12]
 80178bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178be:	2300      	movs	r3, #0
 80178c0:	60bb      	str	r3, [r7, #8]
 80178c2:	4b19      	ldr	r3, [pc, #100]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c6:	4a18      	ldr	r2, [pc, #96]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178c8:	f043 0302 	orr.w	r3, r3, #2
 80178cc:	6313      	str	r3, [r2, #48]	; 0x30
 80178ce:	4b16      	ldr	r3, [pc, #88]	; (8017928 <HAL_SPI_MspInit+0xc4>)
 80178d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178d2:	f003 0302 	and.w	r3, r3, #2
 80178d6:	60bb      	str	r3, [r7, #8]
 80178d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80178da:	230c      	movs	r3, #12
 80178dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178de:	2302      	movs	r3, #2
 80178e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178e2:	2300      	movs	r3, #0
 80178e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80178e6:	2303      	movs	r3, #3
 80178e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80178ea:	2305      	movs	r3, #5
 80178ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80178ee:	f107 0314 	add.w	r3, r7, #20
 80178f2:	4619      	mov	r1, r3
 80178f4:	480d      	ldr	r0, [pc, #52]	; (801792c <HAL_SPI_MspInit+0xc8>)
 80178f6:	f00e ffb3 	bl	8026860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80178fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017900:	2302      	movs	r3, #2
 8017902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017904:	2300      	movs	r3, #0
 8017906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017908:	2303      	movs	r3, #3
 801790a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801790c:	2305      	movs	r3, #5
 801790e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017910:	f107 0314 	add.w	r3, r7, #20
 8017914:	4619      	mov	r1, r3
 8017916:	4806      	ldr	r0, [pc, #24]	; (8017930 <HAL_SPI_MspInit+0xcc>)
 8017918:	f00e ffa2 	bl	8026860 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801791c:	bf00      	nop
 801791e:	3728      	adds	r7, #40	; 0x28
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	40003800 	.word	0x40003800
 8017928:	40023800 	.word	0x40023800
 801792c:	40020800 	.word	0x40020800
 8017930:	40020400 	.word	0x40020400

08017934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801793a:	2300      	movs	r3, #0
 801793c:	607b      	str	r3, [r7, #4]
 801793e:	4b12      	ldr	r3, [pc, #72]	; (8017988 <HAL_MspInit+0x54>)
 8017940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017942:	4a11      	ldr	r2, [pc, #68]	; (8017988 <HAL_MspInit+0x54>)
 8017944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017948:	6453      	str	r3, [r2, #68]	; 0x44
 801794a:	4b0f      	ldr	r3, [pc, #60]	; (8017988 <HAL_MspInit+0x54>)
 801794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801794e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017952:	607b      	str	r3, [r7, #4]
 8017954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017956:	2300      	movs	r3, #0
 8017958:	603b      	str	r3, [r7, #0]
 801795a:	4b0b      	ldr	r3, [pc, #44]	; (8017988 <HAL_MspInit+0x54>)
 801795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801795e:	4a0a      	ldr	r2, [pc, #40]	; (8017988 <HAL_MspInit+0x54>)
 8017960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017964:	6413      	str	r3, [r2, #64]	; 0x40
 8017966:	4b08      	ldr	r3, [pc, #32]	; (8017988 <HAL_MspInit+0x54>)
 8017968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801796a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801796e:	603b      	str	r3, [r7, #0]
 8017970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017972:	2200      	movs	r2, #0
 8017974:	210f      	movs	r1, #15
 8017976:	f06f 0001 	mvn.w	r0, #1
 801797a:	f00e fbd7 	bl	802612c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801797e:	bf00      	nop
 8017980:	3708      	adds	r7, #8
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
 8017986:	bf00      	nop
 8017988:	40023800 	.word	0x40023800

0801798c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b08c      	sub	sp, #48	; 0x30
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017994:	2300      	movs	r3, #0
 8017996:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017998:	2300      	movs	r3, #0
 801799a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 801799c:	2200      	movs	r2, #0
 801799e:	6879      	ldr	r1, [r7, #4]
 80179a0:	2032      	movs	r0, #50	; 0x32
 80179a2:	f00e fbc3 	bl	802612c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80179a6:	2032      	movs	r0, #50	; 0x32
 80179a8:	f00e fbdc 	bl	8026164 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80179ac:	2300      	movs	r3, #0
 80179ae:	60fb      	str	r3, [r7, #12]
 80179b0:	4b1f      	ldr	r3, [pc, #124]	; (8017a30 <HAL_InitTick+0xa4>)
 80179b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179b4:	4a1e      	ldr	r2, [pc, #120]	; (8017a30 <HAL_InitTick+0xa4>)
 80179b6:	f043 0308 	orr.w	r3, r3, #8
 80179ba:	6413      	str	r3, [r2, #64]	; 0x40
 80179bc:	4b1c      	ldr	r3, [pc, #112]	; (8017a30 <HAL_InitTick+0xa4>)
 80179be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179c0:	f003 0308 	and.w	r3, r3, #8
 80179c4:	60fb      	str	r3, [r7, #12]
 80179c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80179c8:	f107 0210 	add.w	r2, r7, #16
 80179cc:	f107 0314 	add.w	r3, r7, #20
 80179d0:	4611      	mov	r1, r2
 80179d2:	4618      	mov	r0, r3
 80179d4:	f00f fd56 	bl	8027484 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80179d8:	f00f fd40 	bl	802745c <HAL_RCC_GetPCLK1Freq>
 80179dc:	4603      	mov	r3, r0
 80179de:	005b      	lsls	r3, r3, #1
 80179e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80179e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e4:	4a13      	ldr	r2, [pc, #76]	; (8017a34 <HAL_InitTick+0xa8>)
 80179e6:	fba2 2303 	umull	r2, r3, r2, r3
 80179ea:	0c9b      	lsrs	r3, r3, #18
 80179ec:	3b01      	subs	r3, #1
 80179ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80179f0:	4b11      	ldr	r3, [pc, #68]	; (8017a38 <HAL_InitTick+0xac>)
 80179f2:	4a12      	ldr	r2, [pc, #72]	; (8017a3c <HAL_InitTick+0xb0>)
 80179f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80179f6:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <HAL_InitTick+0xac>)
 80179f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80179fc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80179fe:	4a0e      	ldr	r2, [pc, #56]	; (8017a38 <HAL_InitTick+0xac>)
 8017a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a02:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8017a04:	4b0c      	ldr	r3, [pc, #48]	; (8017a38 <HAL_InitTick+0xac>)
 8017a06:	2200      	movs	r2, #0
 8017a08:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017a0a:	4b0b      	ldr	r3, [pc, #44]	; (8017a38 <HAL_InitTick+0xac>)
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8017a10:	4809      	ldr	r0, [pc, #36]	; (8017a38 <HAL_InitTick+0xac>)
 8017a12:	f010 fb11 	bl	8028038 <HAL_TIM_Base_Init>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d104      	bne.n	8017a26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8017a1c:	4806      	ldr	r0, [pc, #24]	; (8017a38 <HAL_InitTick+0xac>)
 8017a1e:	f010 fbc3 	bl	80281a8 <HAL_TIM_Base_Start_IT>
 8017a22:	4603      	mov	r3, r0
 8017a24:	e000      	b.n	8017a28 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8017a26:	2301      	movs	r3, #1
}
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3730      	adds	r7, #48	; 0x30
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	40023800 	.word	0x40023800
 8017a34:	431bde83 	.word	0x431bde83
 8017a38:	2001c100 	.word	0x2001c100
 8017a3c:	40000c00 	.word	0x40000c00

08017a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017a40:	b480      	push	{r7}
 8017a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017a44:	e7fe      	b.n	8017a44 <NMI_Handler+0x4>

08017a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017a46:	b480      	push	{r7}
 8017a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017a4a:	e7fe      	b.n	8017a4a <HardFault_Handler+0x4>

08017a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017a50:	e7fe      	b.n	8017a50 <MemManage_Handler+0x4>

08017a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017a52:	b480      	push	{r7}
 8017a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017a56:	e7fe      	b.n	8017a56 <BusFault_Handler+0x4>

08017a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017a58:	b480      	push	{r7}
 8017a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017a5c:	e7fe      	b.n	8017a5c <UsageFault_Handler+0x4>

08017a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017a5e:	b480      	push	{r7}
 8017a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017a62:	bf00      	nop
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr

08017a6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_plus_closed_Pin);
 8017a70:	2010      	movs	r0, #16
 8017a72:	f00f f8ab 	bl	8026bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8017a76:	bf00      	nop
 8017a78:	bd80      	pop	{r7, pc}
	...

08017a7c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017a80:	4802      	ldr	r0, [pc, #8]	; (8017a8c <ADC_IRQHandler+0x10>)
 8017a82:	f00c feb2 	bl	80247ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8017a86:	bf00      	nop
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	2001b760 	.word	0x2001b760

08017a90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017a94:	4802      	ldr	r0, [pc, #8]	; (8017aa0 <CAN1_TX_IRQHandler+0x10>)
 8017a96:	f00e f86b 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8017a9a:	bf00      	nop
 8017a9c:	bd80      	pop	{r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	2001b830 	.word	0x2001b830

08017aa4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017aa8:	4802      	ldr	r0, [pc, #8]	; (8017ab4 <CAN1_RX0_IRQHandler+0x10>)
 8017aaa:	f00e f861 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8017aae:	bf00      	nop
 8017ab0:	bd80      	pop	{r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	2001b830 	.word	0x2001b830

08017ab8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017abc:	4802      	ldr	r0, [pc, #8]	; (8017ac8 <CAN1_RX1_IRQHandler+0x10>)
 8017abe:	f00e f857 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8017ac2:	bf00      	nop
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	2001b830 	.word	0x2001b830

08017acc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_minus_closed_Pin);
 8017ad0:	2020      	movs	r0, #32
 8017ad2:	f00f f87b 	bl	8026bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(precharge_closed_Pin);
 8017ad6:	2040      	movs	r0, #64	; 0x40
 8017ad8:	f00f f878 	bl	8026bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8017adc:	bf00      	nop
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8017ae4:	4802      	ldr	r0, [pc, #8]	; (8017af0 <TIM2_IRQHandler+0x10>)
 8017ae6:	f010 ff4f 	bl	8028988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8017aea:	bf00      	nop
 8017aec:	bd80      	pop	{r7, pc}
 8017aee:	bf00      	nop
 8017af0:	2001c1d8 	.word	0x2001c1d8

08017af4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017af8:	4802      	ldr	r0, [pc, #8]	; (8017b04 <TIM3_IRQHandler+0x10>)
 8017afa:	f010 ff45 	bl	8028988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017afe:	bf00      	nop
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	2001c148 	.word	0x2001c148

08017b08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017b0c:	4802      	ldr	r0, [pc, #8]	; (8017b18 <TIM5_IRQHandler+0x10>)
 8017b0e:	f010 ff3b 	bl	8028988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8017b12:	bf00      	nop
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	2001c100 	.word	0x2001c100

08017b1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017b20:	4802      	ldr	r0, [pc, #8]	; (8017b2c <DMA2_Stream0_IRQHandler+0x10>)
 8017b22:	f00e fc33 	bl	802638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017b26:	bf00      	nop
 8017b28:	bd80      	pop	{r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	2001b7a8 	.word	0x2001b7a8

08017b30 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017b34:	4802      	ldr	r0, [pc, #8]	; (8017b40 <CAN2_TX_IRQHandler+0x10>)
 8017b36:	f00e f81b 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8017b3a:	bf00      	nop
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	2001b808 	.word	0x2001b808

08017b44 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017b48:	4802      	ldr	r0, [pc, #8]	; (8017b54 <CAN2_RX0_IRQHandler+0x10>)
 8017b4a:	f00e f811 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8017b4e:	bf00      	nop
 8017b50:	bd80      	pop	{r7, pc}
 8017b52:	bf00      	nop
 8017b54:	2001b808 	.word	0x2001b808

08017b58 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017b5c:	4802      	ldr	r0, [pc, #8]	; (8017b68 <CAN2_RX1_IRQHandler+0x10>)
 8017b5e:	f00e f807 	bl	8025b70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8017b62:	bf00      	nop
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	2001b808 	.word	0x2001b808

08017b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017b70:	4b06      	ldr	r3, [pc, #24]	; (8017b8c <SystemInit+0x20>)
 8017b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b76:	4a05      	ldr	r2, [pc, #20]	; (8017b8c <SystemInit+0x20>)
 8017b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017b80:	bf00      	nop
 8017b82:	46bd      	mov	sp, r7
 8017b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b88:	4770      	bx	lr
 8017b8a:	bf00      	nop
 8017b8c:	e000ed00 	.word	0xe000ed00

08017b90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b096      	sub	sp, #88	; 0x58
 8017b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	601a      	str	r2, [r3, #0]
 8017b9e:	605a      	str	r2, [r3, #4]
 8017ba0:	609a      	str	r2, [r3, #8]
 8017ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017ba4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017ba8:	2200      	movs	r2, #0
 8017baa:	601a      	str	r2, [r3, #0]
 8017bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	601a      	str	r2, [r3, #0]
 8017bb6:	605a      	str	r2, [r3, #4]
 8017bb8:	609a      	str	r2, [r3, #8]
 8017bba:	60da      	str	r2, [r3, #12]
 8017bbc:	611a      	str	r2, [r3, #16]
 8017bbe:	615a      	str	r2, [r3, #20]
 8017bc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017bc2:	1d3b      	adds	r3, r7, #4
 8017bc4:	2220      	movs	r2, #32
 8017bc6:	2100      	movs	r1, #0
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f016 fd41 	bl	802e650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017bce:	4b3e      	ldr	r3, [pc, #248]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bd0:	4a3e      	ldr	r2, [pc, #248]	; (8017ccc <MX_TIM1_Init+0x13c>)
 8017bd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8017bd4:	4b3c      	ldr	r3, [pc, #240]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017bda:	4b3b      	ldr	r3, [pc, #236]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bdc:	2200      	movs	r2, #0
 8017bde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8017be0:	4b39      	ldr	r3, [pc, #228]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017be6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017be8:	4b37      	ldr	r3, [pc, #220]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bea:	2200      	movs	r2, #0
 8017bec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017bee:	4b36      	ldr	r3, [pc, #216]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017bf4:	4b34      	ldr	r3, [pc, #208]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017bfa:	4833      	ldr	r0, [pc, #204]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017bfc:	f010 fa1c 	bl	8028038 <HAL_TIM_Base_Init>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d001      	beq.n	8017c0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8017c06:	f7ff fa09 	bl	801701c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017c14:	4619      	mov	r1, r3
 8017c16:	482c      	ldr	r0, [pc, #176]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017c18:	f011 f91c 	bl	8028e54 <HAL_TIM_ConfigClockSource>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d001      	beq.n	8017c26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8017c22:	f7ff f9fb 	bl	801701c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8017c26:	4828      	ldr	r0, [pc, #160]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017c28:	f010 fb2e 	bl	8028288 <HAL_TIM_PWM_Init>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d001      	beq.n	8017c36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8017c32:	f7ff f9f3 	bl	801701c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017c36:	2300      	movs	r3, #0
 8017c38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017c42:	4619      	mov	r1, r3
 8017c44:	4820      	ldr	r0, [pc, #128]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017c46:	f011 ff3d 	bl	8029ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d001      	beq.n	8017c54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8017c50:	f7ff f9e4 	bl	801701c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017c54:	2360      	movs	r3, #96	; 0x60
 8017c56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017c60:	2300      	movs	r3, #0
 8017c62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017c64:	2300      	movs	r3, #0
 8017c66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8017c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c74:	2208      	movs	r2, #8
 8017c76:	4619      	mov	r1, r3
 8017c78:	4813      	ldr	r0, [pc, #76]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017c7a:	f011 f829 	bl	8028cd0 <HAL_TIM_PWM_ConfigChannel>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d001      	beq.n	8017c88 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8017c84:	f7ff f9ca 	bl	801701c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017c88:	2300      	movs	r3, #0
 8017c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017c90:	2300      	movs	r3, #0
 8017c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017c94:	2300      	movs	r3, #0
 8017c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8017ca6:	1d3b      	adds	r3, r7, #4
 8017ca8:	4619      	mov	r1, r3
 8017caa:	4807      	ldr	r0, [pc, #28]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017cac:	f011 ff86 	bl	8029bbc <HAL_TIMEx_ConfigBreakDeadTime>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d001      	beq.n	8017cba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8017cb6:	f7ff f9b1 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8017cba:	4803      	ldr	r0, [pc, #12]	; (8017cc8 <MX_TIM1_Init+0x138>)
 8017cbc:	f000 f974 	bl	8017fa8 <HAL_TIM_MspPostInit>

}
 8017cc0:	bf00      	nop
 8017cc2:	3758      	adds	r7, #88	; 0x58
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	2001c190 	.word	0x2001c190
 8017ccc:	40010000 	.word	0x40010000

08017cd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b090      	sub	sp, #64	; 0x40
 8017cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017cda:	2200      	movs	r2, #0
 8017cdc:	601a      	str	r2, [r3, #0]
 8017cde:	605a      	str	r2, [r3, #4]
 8017ce0:	609a      	str	r2, [r3, #8]
 8017ce2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8017ce4:	f107 031c 	add.w	r3, r7, #28
 8017ce8:	2200      	movs	r2, #0
 8017cea:	601a      	str	r2, [r3, #0]
 8017cec:	605a      	str	r2, [r3, #4]
 8017cee:	609a      	str	r2, [r3, #8]
 8017cf0:	60da      	str	r2, [r3, #12]
 8017cf2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8017cf4:	f107 030c 	add.w	r3, r7, #12
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	601a      	str	r2, [r3, #0]
 8017cfc:	605a      	str	r2, [r3, #4]
 8017cfe:	609a      	str	r2, [r3, #8]
 8017d00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017d02:	1d3b      	adds	r3, r7, #4
 8017d04:	2200      	movs	r2, #0
 8017d06:	601a      	str	r2, [r3, #0]
 8017d08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8017d0a:	4b3e      	ldr	r3, [pc, #248]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8017d12:	4b3c      	ldr	r3, [pc, #240]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d14:	2200      	movs	r2, #0
 8017d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d18:	4b3a      	ldr	r3, [pc, #232]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8017d1e:	4b39      	ldr	r3, [pc, #228]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d20:	f04f 32ff 	mov.w	r2, #4294967295
 8017d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017d26:	4b37      	ldr	r3, [pc, #220]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017d2c:	4b35      	ldr	r3, [pc, #212]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d2e:	2200      	movs	r2, #0
 8017d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8017d32:	4834      	ldr	r0, [pc, #208]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d34:	f010 f980 	bl	8028038 <HAL_TIM_Base_Init>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d001      	beq.n	8017d42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8017d3e:	f7ff f96d 	bl	801701c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8017d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	482d      	ldr	r0, [pc, #180]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d50:	f011 f880 	bl	8028e54 <HAL_TIM_ConfigClockSource>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d001      	beq.n	8017d5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8017d5a:	f7ff f95f 	bl	801701c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8017d5e:	4829      	ldr	r0, [pc, #164]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d60:	f010 fbb4 	bl	80284cc <HAL_TIM_IC_Init>
 8017d64:	4603      	mov	r3, r0
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d001      	beq.n	8017d6e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8017d6a:	f7ff f957 	bl	801701c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8017d6e:	2304      	movs	r3, #4
 8017d70:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8017d72:	2350      	movs	r3, #80	; 0x50
 8017d74:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017d76:	2300      	movs	r3, #0
 8017d78:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8017d82:	f107 031c 	add.w	r3, r7, #28
 8017d86:	4619      	mov	r1, r3
 8017d88:	481e      	ldr	r0, [pc, #120]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017d8a:	f011 f92a 	bl	8028fe2 <HAL_TIM_SlaveConfigSynchro>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d001      	beq.n	8017d98 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8017d94:	f7ff f942 	bl	801701c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8017d9c:	2301      	movs	r3, #1
 8017d9e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017da0:	2300      	movs	r3, #0
 8017da2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8017da8:	f107 030c 	add.w	r3, r7, #12
 8017dac:	2200      	movs	r2, #0
 8017dae:	4619      	mov	r1, r3
 8017db0:	4814      	ldr	r0, [pc, #80]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017db2:	f010 fef1 	bl	8028b98 <HAL_TIM_IC_ConfigChannel>
 8017db6:	4603      	mov	r3, r0
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d001      	beq.n	8017dc0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8017dbc:	f7ff f92e 	bl	801701c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8017dc0:	2302      	movs	r3, #2
 8017dc2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8017dc4:	2302      	movs	r3, #2
 8017dc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8017dc8:	f107 030c 	add.w	r3, r7, #12
 8017dcc:	2204      	movs	r2, #4
 8017dce:	4619      	mov	r1, r3
 8017dd0:	480c      	ldr	r0, [pc, #48]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017dd2:	f010 fee1 	bl	8028b98 <HAL_TIM_IC_ConfigChannel>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d001      	beq.n	8017de0 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8017ddc:	f7ff f91e 	bl	801701c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017de0:	2300      	movs	r3, #0
 8017de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017de4:	2300      	movs	r3, #0
 8017de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8017de8:	1d3b      	adds	r3, r7, #4
 8017dea:	4619      	mov	r1, r3
 8017dec:	4805      	ldr	r0, [pc, #20]	; (8017e04 <MX_TIM2_Init+0x134>)
 8017dee:	f011 fe69 	bl	8029ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8017df2:	4603      	mov	r3, r0
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d001      	beq.n	8017dfc <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8017df8:	f7ff f910 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8017dfc:	bf00      	nop
 8017dfe:	3740      	adds	r7, #64	; 0x40
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	2001c1d8 	.word	0x2001c1d8

08017e08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b086      	sub	sp, #24
 8017e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017e0e:	f107 0308 	add.w	r3, r7, #8
 8017e12:	2200      	movs	r2, #0
 8017e14:	601a      	str	r2, [r3, #0]
 8017e16:	605a      	str	r2, [r3, #4]
 8017e18:	609a      	str	r2, [r3, #8]
 8017e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017e1c:	463b      	mov	r3, r7
 8017e1e:	2200      	movs	r2, #0
 8017e20:	601a      	str	r2, [r3, #0]
 8017e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017e24:	4b1d      	ldr	r3, [pc, #116]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e26:	4a1e      	ldr	r2, [pc, #120]	; (8017ea0 <MX_TIM3_Init+0x98>)
 8017e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8017e2a:	4b1c      	ldr	r3, [pc, #112]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017e30:	4b1a      	ldr	r3, [pc, #104]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e32:	2200      	movs	r2, #0
 8017e34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8017e36:	4b19      	ldr	r3, [pc, #100]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017e3e:	4b17      	ldr	r3, [pc, #92]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e40:	2200      	movs	r2, #0
 8017e42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e44:	4b15      	ldr	r3, [pc, #84]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e46:	2200      	movs	r2, #0
 8017e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017e4a:	4814      	ldr	r0, [pc, #80]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e4c:	f010 f8f4 	bl	8028038 <HAL_TIM_Base_Init>
 8017e50:	4603      	mov	r3, r0
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d001      	beq.n	8017e5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8017e56:	f7ff f8e1 	bl	801701c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017e60:	f107 0308 	add.w	r3, r7, #8
 8017e64:	4619      	mov	r1, r3
 8017e66:	480d      	ldr	r0, [pc, #52]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e68:	f010 fff4 	bl	8028e54 <HAL_TIM_ConfigClockSource>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d001      	beq.n	8017e76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8017e72:	f7ff f8d3 	bl	801701c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017e76:	2320      	movs	r3, #32
 8017e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017e7e:	463b      	mov	r3, r7
 8017e80:	4619      	mov	r1, r3
 8017e82:	4806      	ldr	r0, [pc, #24]	; (8017e9c <MX_TIM3_Init+0x94>)
 8017e84:	f011 fe1e 	bl	8029ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d001      	beq.n	8017e92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8017e8e:	f7ff f8c5 	bl	801701c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8017e92:	bf00      	nop
 8017e94:	3718      	adds	r7, #24
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}
 8017e9a:	bf00      	nop
 8017e9c:	2001c148 	.word	0x2001c148
 8017ea0:	40000400 	.word	0x40000400

08017ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b08c      	sub	sp, #48	; 0x30
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017eac:	f107 031c 	add.w	r3, r7, #28
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	601a      	str	r2, [r3, #0]
 8017eb4:	605a      	str	r2, [r3, #4]
 8017eb6:	609a      	str	r2, [r3, #8]
 8017eb8:	60da      	str	r2, [r3, #12]
 8017eba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	4a35      	ldr	r2, [pc, #212]	; (8017f98 <HAL_TIM_Base_MspInit+0xf4>)
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	d10e      	bne.n	8017ee4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	61bb      	str	r3, [r7, #24]
 8017eca:	4b34      	ldr	r3, [pc, #208]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ece:	4a33      	ldr	r2, [pc, #204]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017ed0:	f043 0301 	orr.w	r3, r3, #1
 8017ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8017ed6:	4b31      	ldr	r3, [pc, #196]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017eda:	f003 0301 	and.w	r3, r3, #1
 8017ede:	61bb      	str	r3, [r7, #24]
 8017ee0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8017ee2:	e055      	b.n	8017f90 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017eec:	d135      	bne.n	8017f5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8017eee:	2300      	movs	r3, #0
 8017ef0:	617b      	str	r3, [r7, #20]
 8017ef2:	4b2a      	ldr	r3, [pc, #168]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ef6:	4a29      	ldr	r2, [pc, #164]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017ef8:	f043 0301 	orr.w	r3, r3, #1
 8017efc:	6413      	str	r3, [r2, #64]	; 0x40
 8017efe:	4b27      	ldr	r3, [pc, #156]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f02:	f003 0301 	and.w	r3, r3, #1
 8017f06:	617b      	str	r3, [r7, #20]
 8017f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	613b      	str	r3, [r7, #16]
 8017f0e:	4b23      	ldr	r3, [pc, #140]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f12:	4a22      	ldr	r2, [pc, #136]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f14:	f043 0301 	orr.w	r3, r3, #1
 8017f18:	6313      	str	r3, [r2, #48]	; 0x30
 8017f1a:	4b20      	ldr	r3, [pc, #128]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f1e:	f003 0301 	and.w	r3, r3, #1
 8017f22:	613b      	str	r3, [r7, #16]
 8017f24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8017f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f2c:	2302      	movs	r3, #2
 8017f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f30:	2300      	movs	r3, #0
 8017f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f34:	2300      	movs	r3, #0
 8017f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8017f38:	2301      	movs	r3, #1
 8017f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8017f3c:	f107 031c 	add.w	r3, r7, #28
 8017f40:	4619      	mov	r1, r3
 8017f42:	4817      	ldr	r0, [pc, #92]	; (8017fa0 <HAL_TIM_Base_MspInit+0xfc>)
 8017f44:	f00e fc8c 	bl	8026860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8017f48:	2200      	movs	r2, #0
 8017f4a:	2105      	movs	r1, #5
 8017f4c:	201c      	movs	r0, #28
 8017f4e:	f00e f8ed 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8017f52:	201c      	movs	r0, #28
 8017f54:	f00e f906 	bl	8026164 <HAL_NVIC_EnableIRQ>
}
 8017f58:	e01a      	b.n	8017f90 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	4a11      	ldr	r2, [pc, #68]	; (8017fa4 <HAL_TIM_Base_MspInit+0x100>)
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d115      	bne.n	8017f90 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017f64:	2300      	movs	r3, #0
 8017f66:	60fb      	str	r3, [r7, #12]
 8017f68:	4b0c      	ldr	r3, [pc, #48]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6c:	4a0b      	ldr	r2, [pc, #44]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f6e:	f043 0302 	orr.w	r3, r3, #2
 8017f72:	6413      	str	r3, [r2, #64]	; 0x40
 8017f74:	4b09      	ldr	r3, [pc, #36]	; (8017f9c <HAL_TIM_Base_MspInit+0xf8>)
 8017f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f78:	f003 0302 	and.w	r3, r3, #2
 8017f7c:	60fb      	str	r3, [r7, #12]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8017f80:	2200      	movs	r2, #0
 8017f82:	2105      	movs	r1, #5
 8017f84:	201d      	movs	r0, #29
 8017f86:	f00e f8d1 	bl	802612c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017f8a:	201d      	movs	r0, #29
 8017f8c:	f00e f8ea 	bl	8026164 <HAL_NVIC_EnableIRQ>
}
 8017f90:	bf00      	nop
 8017f92:	3730      	adds	r7, #48	; 0x30
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	40010000 	.word	0x40010000
 8017f9c:	40023800 	.word	0x40023800
 8017fa0:	40020000 	.word	0x40020000
 8017fa4:	40000400 	.word	0x40000400

08017fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b088      	sub	sp, #32
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017fb0:	f107 030c 	add.w	r3, r7, #12
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	601a      	str	r2, [r3, #0]
 8017fb8:	605a      	str	r2, [r3, #4]
 8017fba:	609a      	str	r2, [r3, #8]
 8017fbc:	60da      	str	r2, [r3, #12]
 8017fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a12      	ldr	r2, [pc, #72]	; (8018010 <HAL_TIM_MspPostInit+0x68>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d11e      	bne.n	8018008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017fca:	2300      	movs	r3, #0
 8017fcc:	60bb      	str	r3, [r7, #8]
 8017fce:	4b11      	ldr	r3, [pc, #68]	; (8018014 <HAL_TIM_MspPostInit+0x6c>)
 8017fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fd2:	4a10      	ldr	r2, [pc, #64]	; (8018014 <HAL_TIM_MspPostInit+0x6c>)
 8017fd4:	f043 0310 	orr.w	r3, r3, #16
 8017fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8017fda:	4b0e      	ldr	r3, [pc, #56]	; (8018014 <HAL_TIM_MspPostInit+0x6c>)
 8017fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fde:	f003 0310 	and.w	r3, r3, #16
 8017fe2:	60bb      	str	r3, [r7, #8]
 8017fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8017fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017fec:	2302      	movs	r3, #2
 8017fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8017ffc:	f107 030c 	add.w	r3, r7, #12
 8018000:	4619      	mov	r1, r3
 8018002:	4805      	ldr	r0, [pc, #20]	; (8018018 <HAL_TIM_MspPostInit+0x70>)
 8018004:	f00e fc2c 	bl	8026860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8018008:	bf00      	nop
 801800a:	3720      	adds	r7, #32
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}
 8018010:	40010000 	.word	0x40010000
 8018014:	40023800 	.word	0x40023800
 8018018:	40021000 	.word	0x40021000

0801801c <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 801801c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018020:	b086      	sub	sp, #24
 8018022:	af00      	add	r7, sp, #0
 8018024:	6078      	str	r0, [r7, #4]
 8018026:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	3308      	adds	r3, #8
 801802c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	3310      	adds	r3, #16
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	f7e8 fbfa 	bl	8000830 <__aeabi_ddiv>
 801803c:	4602      	mov	r2, r0
 801803e:	460b      	mov	r3, r1
 8018040:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8018044:	4b3e      	ldr	r3, [pc, #248]	; (8018140 <CSE_S_x+0x124>)
 8018046:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 801804a:	4614      	mov	r4, r2
 801804c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8018050:	220c      	movs	r2, #12
 8018052:	493c      	ldr	r1, [pc, #240]	; (8018144 <CSE_S_x+0x128>)
 8018054:	483c      	ldr	r0, [pc, #240]	; (8018148 <CSE_S_x+0x12c>)
 8018056:	ed97 0b04 	vldr	d0, [r7, #16]
 801805a:	f005 fb4d 	bl	801d6f8 <look1_binlxpw>
 801805e:	ec53 2b10 	vmov	r2, r3, d0
 8018062:	4620      	mov	r0, r4
 8018064:	4629      	mov	r1, r5
 8018066:	f7e8 fbe3 	bl	8000830 <__aeabi_ddiv>
 801806a:	4602      	mov	r2, r0
 801806c:	460b      	mov	r3, r1
 801806e:	ec43 2b17 	vmov	d7, r2, r3
 8018072:	eeb0 0a47 	vmov.f32	s0, s14
 8018076:	eef0 0a67 	vmov.f32	s1, s15
 801807a:	f016 fc09 	bl	802e890 <exp>
 801807e:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8018082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018086:	f04f 0000 	mov.w	r0, #0
 801808a:	4930      	ldr	r1, [pc, #192]	; (801814c <CSE_S_x+0x130>)
 801808c:	f7e8 f8ee 	bl	800026c <__aeabi_dsub>
 8018090:	4602      	mov	r2, r0
 8018092:	460b      	mov	r3, r1
 8018094:	4610      	mov	r0, r2
 8018096:	4619      	mov	r1, r3
 8018098:	4b2d      	ldr	r3, [pc, #180]	; (8018150 <CSE_S_x+0x134>)
 801809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801809e:	f7e8 fa9d 	bl	80005dc <__aeabi_dmul>
 80180a2:	4602      	mov	r2, r0
 80180a4:	460b      	mov	r3, r1
 80180a6:	4614      	mov	r4, r2
 80180a8:	461d      	mov	r5, r3
 80180aa:	220c      	movs	r2, #12
 80180ac:	4924      	ldr	r1, [pc, #144]	; (8018140 <CSE_S_x+0x124>)
 80180ae:	4826      	ldr	r0, [pc, #152]	; (8018148 <CSE_S_x+0x12c>)
 80180b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80180b4:	f005 fb20 	bl	801d6f8 <look1_binlxpw>
 80180b8:	ec53 2b10 	vmov	r2, r3, d0
 80180bc:	4620      	mov	r0, r4
 80180be:	4629      	mov	r1, r5
 80180c0:	f7e8 fa8c 	bl	80005dc <__aeabi_dmul>
 80180c4:	4602      	mov	r2, r0
 80180c6:	460b      	mov	r3, r1
 80180c8:	4614      	mov	r4, r2
 80180ca:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80180d6:	f7e8 fa81 	bl	80005dc <__aeabi_dmul>
 80180da:	4602      	mov	r2, r0
 80180dc:	460b      	mov	r3, r1
 80180de:	4620      	mov	r0, r4
 80180e0:	4629      	mov	r1, r5
 80180e2:	f7e8 f8c5 	bl	8000270 <__adddf3>
 80180e6:	4602      	mov	r2, r0
 80180e8:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80180ea:	6839      	ldr	r1, [r7, #0]
 80180ec:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80180f0:	4b17      	ldr	r3, [pc, #92]	; (8018150 <CSE_S_x+0x134>)
 80180f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180f6:	4b12      	ldr	r3, [pc, #72]	; (8018140 <CSE_S_x+0x124>)
 80180f8:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80180fc:	f7e8 fa6e 	bl	80005dc <__aeabi_dmul>
 8018100:	4602      	mov	r2, r0
 8018102:	460b      	mov	r3, r1
 8018104:	4690      	mov	r8, r2
 8018106:	4699      	mov	r9, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	3308      	adds	r3, #8
 801810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018110:	6839      	ldr	r1, [r7, #0]
 8018112:	f101 0408 	add.w	r4, r1, #8
 8018116:	4640      	mov	r0, r8
 8018118:	4649      	mov	r1, r9
 801811a:	f7e8 f8a9 	bl	8000270 <__adddf3>
 801811e:	4602      	mov	r2, r0
 8018120:	460b      	mov	r3, r1
 8018122:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8018126:	683b      	ldr	r3, [r7, #0]
 8018128:	f103 0110 	add.w	r1, r3, #16
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018132:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018136:	bf00      	nop
 8018138:	3718      	adds	r7, #24
 801813a:	46bd      	mov	sp, r7
 801813c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018140:	20000088 	.word	0x20000088
 8018144:	20000230 	.word	0x20000230
 8018148:	200001c8 	.word	0x200001c8
 801814c:	3ff00000 	.word	0x3ff00000
 8018150:	2001c230 	.word	0x2001c230

08018154 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8018154:	b5b0      	push	{r4, r5, r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	3308      	adds	r3, #8
 8018162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	3310      	adds	r3, #16
 801816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816e:	f7e8 fb5f 	bl	8000830 <__aeabi_ddiv>
 8018172:	4602      	mov	r2, r0
 8018174:	460b      	mov	r3, r1
 8018176:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 801817a:	4b19      	ldr	r3, [pc, #100]	; (80181e0 <CSE_M_x+0x8c>)
 801817c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018180:	220c      	movs	r2, #12
 8018182:	4918      	ldr	r1, [pc, #96]	; (80181e4 <CSE_M_x+0x90>)
 8018184:	4818      	ldr	r0, [pc, #96]	; (80181e8 <CSE_M_x+0x94>)
 8018186:	ed97 0b02 	vldr	d0, [r7, #8]
 801818a:	f005 fab5 	bl	801d6f8 <look1_binlxpw>
 801818e:	ec53 2b10 	vmov	r2, r3, d0
 8018192:	4620      	mov	r0, r4
 8018194:	4629      	mov	r1, r5
 8018196:	f7e8 fa21 	bl	80005dc <__aeabi_dmul>
 801819a:	4602      	mov	r2, r0
 801819c:	460b      	mov	r3, r1
 801819e:	4614      	mov	r4, r2
 80181a0:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 80181a2:	220c      	movs	r2, #12
 80181a4:	4911      	ldr	r1, [pc, #68]	; (80181ec <CSE_M_x+0x98>)
 80181a6:	4810      	ldr	r0, [pc, #64]	; (80181e8 <CSE_M_x+0x94>)
 80181a8:	ed97 0b02 	vldr	d0, [r7, #8]
 80181ac:	f005 faa4 	bl	801d6f8 <look1_binlxpw>
 80181b0:	ec53 2b10 	vmov	r2, r3, d0
 80181b4:	4620      	mov	r0, r4
 80181b6:	4629      	mov	r1, r5
 80181b8:	f7e8 f85a 	bl	8000270 <__adddf3>
 80181bc:	4602      	mov	r2, r0
 80181be:	460b      	mov	r3, r1
 80181c0:	4610      	mov	r0, r2
 80181c2:	4619      	mov	r1, r3
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ca:	f7e8 f851 	bl	8000270 <__adddf3>
 80181ce:	4602      	mov	r2, r0
 80181d0:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80181d2:	6839      	ldr	r1, [r7, #0]
 80181d4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80181d8:	bf00      	nop
 80181da:	3710      	adds	r7, #16
 80181dc:	46bd      	mov	sp, r7
 80181de:	bdb0      	pop	{r4, r5, r7, pc}
 80181e0:	2001c230 	.word	0x2001c230
 80181e4:	200000f0 	.word	0x200000f0
 80181e8:	200001c8 	.word	0x200001c8
 80181ec:	20000160 	.word	0x20000160

080181f0 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80181f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f4:	ed2d 8b02 	vpush	{d8}
 80181f8:	b0e1      	sub	sp, #388	; 0x184
 80181fa:	af04      	add	r7, sp, #16
 80181fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8018200:	ed84 0b00 	vstr	d0, [r4]
 8018204:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8018208:	6020      	str	r0, [r4, #0]
 801820a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801820e:	6001      	str	r1, [r0, #0]
 8018210:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018214:	ed81 1b00 	vstr	d1, [r1]
 8018218:	f107 0120 	add.w	r1, r7, #32
 801821c:	ed81 2b00 	vstr	d2, [r1]
 8018220:	f107 0118 	add.w	r1, r7, #24
 8018224:	ed81 3b00 	vstr	d3, [r1]
 8018228:	f107 0114 	add.w	r1, r7, #20
 801822c:	600a      	str	r2, [r1, #0]
 801822e:	f107 0210 	add.w	r2, r7, #16
 8018232:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8018234:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018238:	e9d1 2300 	ldrd	r2, r3, [r1]
 801823c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018240:	f7e8 f9cc 	bl	80005dc <__aeabi_dmul>
 8018244:	4602      	mov	r2, r0
 8018246:	460b      	mov	r3, r1
 8018248:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801824c:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8018250:	f107 0118 	add.w	r1, r7, #24
 8018254:	f04f 0200 	mov.w	r2, #0
 8018258:	4b96      	ldr	r3, [pc, #600]	; (80184b4 <UKFCorrectorAdditive_getPredict+0x2c4>)
 801825a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801825e:	f7e8 f807 	bl	8000270 <__adddf3>
 8018262:	4602      	mov	r2, r0
 8018264:	460b      	mov	r3, r1
 8018266:	4610      	mov	r0, r2
 8018268:	4619      	mov	r1, r3
 801826a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018272:	f7e8 f9b3 	bl	80005dc <__aeabi_dmul>
 8018276:	4602      	mov	r2, r0
 8018278:	460b      	mov	r3, r1
 801827a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801827e:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8018282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828a:	f04f 0000 	mov.w	r0, #0
 801828e:	4989      	ldr	r1, [pc, #548]	; (80184b4 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8018290:	f7e8 face 	bl	8000830 <__aeabi_ddiv>
 8018294:	4602      	mov	r2, r0
 8018296:	460b      	mov	r3, r1
 8018298:	f04f 0000 	mov.w	r0, #0
 801829c:	4986      	ldr	r1, [pc, #536]	; (80184b8 <UKFCorrectorAdditive_getPredict+0x2c8>)
 801829e:	f7e7 ffe5 	bl	800026c <__aeabi_dsub>
 80182a2:	4602      	mov	r2, r0
 80182a4:	460b      	mov	r3, r1
 80182a6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80182aa:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 80182ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80182b6:	4602      	mov	r2, r0
 80182b8:	460b      	mov	r3, r1
 80182ba:	f7e7 ffd9 	bl	8000270 <__adddf3>
 80182be:	4602      	mov	r2, r0
 80182c0:	460b      	mov	r3, r1
 80182c2:	f04f 0000 	mov.w	r0, #0
 80182c6:	497c      	ldr	r1, [pc, #496]	; (80184b8 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80182c8:	f7e8 fab2 	bl	8000830 <__aeabi_ddiv>
 80182cc:	4602      	mov	r2, r0
 80182ce:	460b      	mov	r3, r1
 80182d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80182d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80182d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80182dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e0:	f04f 0000 	mov.w	r0, #0
 80182e4:	4974      	ldr	r1, [pc, #464]	; (80184b8 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80182e6:	f7e7 ffc1 	bl	800026c <__aeabi_dsub>
 80182ea:	4602      	mov	r2, r0
 80182ec:	460b      	mov	r3, r1
 80182ee:	4610      	mov	r0, r2
 80182f0:	4619      	mov	r1, r3
 80182f2:	f107 0320 	add.w	r3, r7, #32
 80182f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182fa:	f7e7 ffb9 	bl	8000270 <__adddf3>
 80182fe:	4602      	mov	r2, r0
 8018300:	460b      	mov	r3, r1
 8018302:	4610      	mov	r0, r2
 8018304:	4619      	mov	r1, r3
 8018306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801830e:	f7e7 ffaf 	bl	8000270 <__adddf3>
 8018312:	4602      	mov	r2, r0
 8018314:	460b      	mov	r3, r1
 8018316:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801831a:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 801831e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018322:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018326:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801832a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 801832e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018336:	f04f 0200 	mov.w	r2, #0
 801833a:	f04f 0300 	mov.w	r3, #0
 801833e:	f7e8 fbb5 	bl	8000aac <__aeabi_dcmpeq>
 8018342:	4603      	mov	r3, r0
 8018344:	2b00      	cmp	r3, #0
 8018346:	d154      	bne.n	80183f2 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8018348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018350:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018354:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8018358:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018360:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018364:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8018368:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801836c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018370:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018378:	f7e8 fa5a 	bl	8000830 <__aeabi_ddiv>
 801837c:	4602      	mov	r2, r0
 801837e:	460b      	mov	r3, r1
 8018380:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8018384:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8018388:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801838c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018390:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018398:	f7e8 fa4a 	bl	8000830 <__aeabi_ddiv>
 801839c:	4602      	mov	r2, r0
 801839e:	460b      	mov	r3, r1
 80183a0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80183a4:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 80183a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80183b0:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 80183b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80183bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80183c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c4:	f7e8 fa34 	bl	8000830 <__aeabi_ddiv>
 80183c8:	4602      	mov	r2, r0
 80183ca:	460b      	mov	r3, r1
 80183cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80183d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80183d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80183d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183dc:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80183e0:	f7e8 fa26 	bl	8000830 <__aeabi_ddiv>
 80183e4:	4602      	mov	r2, r0
 80183e6:	460b      	mov	r3, r1
 80183e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80183ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80183f0:	e006      	b.n	8018400 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80183f2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80183f6:	f04f 0200 	mov.w	r2, #0
 80183fa:	4b2f      	ldr	r3, [pc, #188]	; (80184b8 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80183fc:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8018400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018404:	ed93 7b00 	vldr	d7, [r3]
 8018408:	eeb0 0a47 	vmov.f32	s0, s14
 801840c:	eef0 0a67 	vmov.f32	s1, s15
 8018410:	f016 fad6 	bl	802e9c0 <sqrt>
 8018414:	eeb0 7a40 	vmov.f32	s14, s0
 8018418:	eef0 7a60 	vmov.f32	s15, s1
 801841c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018420:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8018424:	2300      	movs	r3, #0
 8018426:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801842a:	e037      	b.n	801849c <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 801842c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018430:	00db      	lsls	r3, r3, #3
 8018432:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018436:	6812      	ldr	r2, [r2, #0]
 8018438:	4413      	add	r3, r2
 801843a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801843e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018446:	f7e8 f8c9 	bl	80005dc <__aeabi_dmul>
 801844a:	4602      	mov	r2, r0
 801844c:	460b      	mov	r3, r1
 801844e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018452:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8018456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801845e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8018462:	00c9      	lsls	r1, r1, #3
 8018464:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018468:	4401      	add	r1, r0
 801846a:	39a0      	subs	r1, #160	; 0xa0
 801846c:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8018470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018478:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 801847c:	3109      	adds	r1, #9
 801847e:	4690      	mov	r8, r2
 8018480:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8018484:	00cb      	lsls	r3, r1, #3
 8018486:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801848a:	4413      	add	r3, r2
 801848c:	3ba0      	subs	r3, #160	; 0xa0
 801848e:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8018492:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018496:	3301      	adds	r3, #1
 8018498:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801849c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80184a0:	2b08      	cmp	r3, #8
 80184a2:	ddc3      	ble.n	801842c <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 80184a4:	2300      	movs	r3, #0
 80184a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80184aa:	2300      	movs	r3, #0
 80184ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80184b0:	e065      	b.n	801857e <UKFCorrectorAdditive_getPredict+0x38e>
 80184b2:	bf00      	nop
 80184b4:	40080000 	.word	0x40080000
 80184b8:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 80184bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80184c6:	4413      	add	r3, r2
 80184c8:	3ba0      	subs	r3, #160	; 0xa0
 80184ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80184ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d8:	f7e7 feca 	bl	8000270 <__adddf3>
 80184dc:	4602      	mov	r2, r0
 80184de:	460b      	mov	r3, r1
 80184e0:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80184e4:	00c9      	lsls	r1, r1, #3
 80184e6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80184ea:	4401      	add	r1, r0
 80184ec:	39a0      	subs	r1, #160	; 0xa0
 80184ee:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80184f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80184f6:	3301      	adds	r3, #1
 80184f8:	00db      	lsls	r3, r3, #3
 80184fa:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80184fe:	4413      	add	r3, r2
 8018500:	3ba0      	subs	r3, #160	; 0xa0
 8018502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018506:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	3308      	adds	r3, #8
 801850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018512:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8018516:	3401      	adds	r4, #1
 8018518:	f7e7 feaa 	bl	8000270 <__adddf3>
 801851c:	4602      	mov	r2, r0
 801851e:	460b      	mov	r3, r1
 8018520:	00e1      	lsls	r1, r4, #3
 8018522:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018526:	4401      	add	r1, r0
 8018528:	39a0      	subs	r1, #160	; 0xa0
 801852a:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 801852e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018532:	3302      	adds	r3, #2
 8018534:	00db      	lsls	r3, r3, #3
 8018536:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801853a:	4413      	add	r3, r2
 801853c:	3ba0      	subs	r3, #160	; 0xa0
 801853e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	3310      	adds	r3, #16
 801854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801854e:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8018552:	3402      	adds	r4, #2
 8018554:	f7e7 fe8c 	bl	8000270 <__adddf3>
 8018558:	4602      	mov	r2, r0
 801855a:	460b      	mov	r3, r1
 801855c:	00e1      	lsls	r1, r4, #3
 801855e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018562:	4401      	add	r1, r0
 8018564:	39a0      	subs	r1, #160	; 0xa0
 8018566:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 801856a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801856e:	3303      	adds	r3, #3
 8018570:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8018574:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018578:	3301      	adds	r3, #1
 801857a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801857e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018582:	2b05      	cmp	r3, #5
 8018584:	dd9a      	ble.n	80184bc <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8018586:	2300      	movs	r3, #0
 8018588:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 801858c:	2300      	movs	r3, #0
 801858e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018592:	e018      	b.n	80185c6 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8018594:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8018598:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801859c:	00db      	lsls	r3, r3, #3
 801859e:	18d0      	adds	r0, r2, r3
 80185a0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80185a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185a8:	00db      	lsls	r3, r3, #3
 80185aa:	4413      	add	r3, r2
 80185ac:	4619      	mov	r1, r3
 80185ae:	f7ff fdd1 	bl	8018154 <CSE_M_x>
    knt_0 += 3;
 80185b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80185b6:	3303      	adds	r3, #3
 80185b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80185bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185c0:	3301      	adds	r3, #1
 80185c2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80185c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185ca:	2b05      	cmp	r3, #5
 80185cc:	dde2      	ble.n	8018594 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80185ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80185d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80185d6:	4611      	mov	r1, r2
 80185d8:	6818      	ldr	r0, [r3, #0]
 80185da:	f7ff fdbb 	bl	8018154 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80185de:	2300      	movs	r3, #0
 80185e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80185e4:	e027      	b.n	8018636 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80185e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80185ea:	00db      	lsls	r3, r3, #3
 80185ec:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80185f0:	4413      	add	r3, r2
 80185f2:	3bd0      	subs	r3, #208	; 0xd0
 80185f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80185fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018600:	f7e7 fe34 	bl	800026c <__aeabi_dsub>
 8018604:	4602      	mov	r2, r0
 8018606:	460b      	mov	r3, r1
 8018608:	4610      	mov	r0, r2
 801860a:	4619      	mov	r1, r3
 801860c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018614:	f7e7 fe2c 	bl	8000270 <__adddf3>
 8018618:	4602      	mov	r2, r0
 801861a:	460b      	mov	r3, r1
 801861c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8018620:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8018624:	00c9      	lsls	r1, r1, #3
 8018626:	4401      	add	r1, r0
 8018628:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801862c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018630:	3301      	adds	r3, #1
 8018632:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018636:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801863a:	2b05      	cmp	r3, #5
 801863c:	ddd3      	ble.n	80185e6 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 801863e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018642:	ed93 7b00 	vldr	d7, [r3]
 8018646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801864a:	ed93 6b00 	vldr	d6, [r3]
 801864e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018652:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8018656:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801865a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801865e:	f107 0210 	add.w	r2, r7, #16
 8018662:	6812      	ldr	r2, [r2, #0]
 8018664:	9203      	str	r2, [sp, #12]
 8018666:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801866a:	9202      	str	r2, [sp, #8]
 801866c:	f107 0214 	add.w	r2, r7, #20
 8018670:	6812      	ldr	r2, [r2, #0]
 8018672:	9201      	str	r2, [sp, #4]
 8018674:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8018678:	9200      	str	r2, [sp, #0]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4622      	mov	r2, r4
 801867e:	eeb0 1a46 	vmov.f32	s2, s12
 8018682:	eef0 1a66 	vmov.f32	s3, s13
 8018686:	eeb0 0a47 	vmov.f32	s0, s14
 801868a:	eef0 0a67 	vmov.f32	s1, s15
 801868e:	f004 fbd9 	bl	801ce44 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8018692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801869a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801869e:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 80186a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80186a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80186aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 80186b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80186b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ba:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80186be:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 80186c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80186c6:	2202      	movs	r2, #2
 80186c8:	4619      	mov	r1, r3
 80186ca:	2001      	movs	r0, #1
 80186cc:	f009 feea 	bl	80224a4 <xnrm2_Mnmxg9YT>
 80186d0:	eeb0 7a40 	vmov.f32	s14, s0
 80186d4:	eef0 7a60 	vmov.f32	s15, s1
 80186d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80186dc:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80186e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80186e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80186e8:	f04f 0200 	mov.w	r2, #0
 80186ec:	f04f 0300 	mov.w	r3, #0
 80186f0:	f7e8 f9dc 	bl	8000aac <__aeabi_dcmpeq>
 80186f4:	4603      	mov	r3, r0
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d000      	beq.n	80186fc <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80186fa:	e0fa      	b.n	80188f2 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80186fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018700:	ed93 7b00 	vldr	d7, [r3]
 8018704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018708:	ed93 6b00 	vldr	d6, [r3]
 801870c:	eeb0 1a46 	vmov.f32	s2, s12
 8018710:	eef0 1a66 	vmov.f32	s3, s13
 8018714:	eeb0 0a47 	vmov.f32	s0, s14
 8018718:	eef0 0a67 	vmov.f32	s1, s15
 801871c:	f007 fb38 	bl	801fd90 <rt_hypotd_snf>
 8018720:	eeb0 7a40 	vmov.f32	s14, s0
 8018724:	eef0 7a60 	vmov.f32	s15, s1
 8018728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801872c:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8018730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018738:	f04f 0200 	mov.w	r2, #0
 801873c:	f04f 0300 	mov.w	r3, #0
 8018740:	f7e8 f9d2 	bl	8000ae8 <__aeabi_dcmpge>
 8018744:	4603      	mov	r3, r0
 8018746:	2b00      	cmp	r3, #0
 8018748:	d00a      	beq.n	8018760 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 801874a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018752:	4615      	mov	r5, r2
 8018754:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8018758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801875c:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8018760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018768:	60ba      	str	r2, [r7, #8]
 801876a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801876e:	60fb      	str	r3, [r7, #12]
 8018770:	f04f 0200 	mov.w	r2, #0
 8018774:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801877c:	f7e8 f9a0 	bl	8000ac0 <__aeabi_dcmplt>
 8018780:	4603      	mov	r3, r0
 8018782:	2b00      	cmp	r3, #0
 8018784:	f000 80ad 	beq.w	80188e2 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8018788:	2300      	movs	r3, #0
 801878a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 801878e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018792:	3301      	adds	r3, #1
 8018794:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8018798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801879c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80187a0:	f04f 0200 	mov.w	r2, #0
 80187a4:	4b57      	ldr	r3, [pc, #348]	; (8018904 <UKFCorrectorAdditive_getPredict+0x714>)
 80187a6:	f7e7 ff19 	bl	80005dc <__aeabi_dmul>
 80187aa:	4602      	mov	r2, r0
 80187ac:	460b      	mov	r3, r1
 80187ae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80187b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 80187b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80187be:	f04f 0200 	mov.w	r2, #0
 80187c2:	4b50      	ldr	r3, [pc, #320]	; (8018904 <UKFCorrectorAdditive_getPredict+0x714>)
 80187c4:	f7e7 ff0a 	bl	80005dc <__aeabi_dmul>
 80187c8:	4602      	mov	r2, r0
 80187ca:	460b      	mov	r3, r1
 80187cc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80187d0:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 80187d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80187d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80187dc:	f04f 0200 	mov.w	r2, #0
 80187e0:	4b48      	ldr	r3, [pc, #288]	; (8018904 <UKFCorrectorAdditive_getPredict+0x714>)
 80187e2:	f7e7 fefb 	bl	80005dc <__aeabi_dmul>
 80187e6:	4602      	mov	r2, r0
 80187e8:	460b      	mov	r3, r1
 80187ea:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80187ee:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 80187f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187fa:	603a      	str	r2, [r7, #0]
 80187fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018800:	607b      	str	r3, [r7, #4]
 8018802:	f04f 0200 	mov.w	r2, #0
 8018806:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801880a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801880e:	f7e8 f957 	bl	8000ac0 <__aeabi_dcmplt>
 8018812:	4603      	mov	r3, r0
 8018814:	2b00      	cmp	r3, #0
 8018816:	d003      	beq.n	8018820 <UKFCorrectorAdditive_getPredict+0x630>
 8018818:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801881c:	2b13      	cmp	r3, #19
 801881e:	ddb6      	ble.n	801878e <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8018820:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018824:	ed93 8b00 	vldr	d8, [r3]
 8018828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801882c:	2202      	movs	r2, #2
 801882e:	4619      	mov	r1, r3
 8018830:	2001      	movs	r0, #1
 8018832:	f009 fe37 	bl	80224a4 <xnrm2_Mnmxg9YT>
 8018836:	eeb0 7a40 	vmov.f32	s14, s0
 801883a:	eef0 7a60 	vmov.f32	s15, s1
 801883e:	eeb0 1a47 	vmov.f32	s2, s14
 8018842:	eef0 1a67 	vmov.f32	s3, s15
 8018846:	eeb0 0a48 	vmov.f32	s0, s16
 801884a:	eef0 0a68 	vmov.f32	s1, s17
 801884e:	f007 fa9f 	bl	801fd90 <rt_hypotd_snf>
 8018852:	eeb0 7a40 	vmov.f32	s14, s0
 8018856:	eef0 7a60 	vmov.f32	s15, s1
 801885a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801885e:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8018862:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018866:	e9d3 0100 	ldrd	r0, r1, [r3]
 801886a:	f04f 0200 	mov.w	r2, #0
 801886e:	f04f 0300 	mov.w	r3, #0
 8018872:	f7e8 f939 	bl	8000ae8 <__aeabi_dcmpge>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d00a      	beq.n	8018892 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 801887c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018884:	4692      	mov	sl, r2
 8018886:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801888a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801888e:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8018892:	2300      	movs	r3, #0
 8018894:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8018898:	e014      	b.n	80188c4 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 801889a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801889e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80188a2:	f04f 0200 	mov.w	r2, #0
 80188a6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80188aa:	f7e7 fe97 	bl	80005dc <__aeabi_dmul>
 80188ae:	4602      	mov	r2, r0
 80188b0:	460b      	mov	r3, r1
 80188b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80188b6:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 80188ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80188be:	3301      	adds	r3, #1
 80188c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80188c4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80188c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80188cc:	429a      	cmp	r2, r3
 80188ce:	dbe4      	blt.n	801889a <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 80188d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80188dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80188e0:	e007      	b.n	80188f2 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 80188e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ea:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80188ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80188f2:	bf00      	nop
 80188f4:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80188f8:	46bd      	mov	sp, r7
 80188fa:	ecbd 8b02 	vpop	{d8}
 80188fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018902:	bf00      	nop
 8018904:	7c900000 	.word	0x7c900000

08018908 <CSE_step>:

void CSE_step(void)
{
 8018908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801890c:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8018910:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8018912:	4bb3      	ldr	r3, [pc, #716]	; (8018be0 <CSE_step+0x2d8>)
 8018914:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8018918:	2b00      	cmp	r3, #0
 801891a:	f001 803e 	beq.w	801999a <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801891e:	2300      	movs	r3, #0
 8018920:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8018924:	f107 0308 	add.w	r3, r7, #8
 8018928:	4619      	mov	r1, r3
 801892a:	48ae      	ldr	r0, [pc, #696]	; (8018be4 <CSE_step+0x2dc>)
 801892c:	f7ff fc12 	bl	8018154 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8018930:	4bab      	ldr	r3, [pc, #684]	; (8018be0 <CSE_step+0x2d8>)
 8018932:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8018936:	f107 0110 	add.w	r1, r7, #16
 801893a:	f107 0208 	add.w	r2, r7, #8
 801893e:	463b      	mov	r3, r7
 8018940:	9300      	str	r3, [sp, #0]
 8018942:	460b      	mov	r3, r1
 8018944:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8018bc8 <CSE_step+0x2c0>
 8018948:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8018bd0 <CSE_step+0x2c8>
 801894c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8018bd8 <CSE_step+0x2d0>
 8018950:	49a5      	ldr	r1, [pc, #660]	; (8018be8 <CSE_step+0x2e0>)
 8018952:	48a4      	ldr	r0, [pc, #656]	; (8018be4 <CSE_step+0x2dc>)
 8018954:	eeb0 0a47 	vmov.f32	s0, s14
 8018958:	eef0 0a67 	vmov.f32	s1, s15
 801895c:	f7ff fc48 	bl	80181f0 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8018960:	4ba2      	ldr	r3, [pc, #648]	; (8018bec <CSE_step+0x2e4>)
 8018962:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018966:	f107 0308 	add.w	r3, r7, #8
 801896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801896e:	f7e7 fc7d 	bl	800026c <__aeabi_dsub>
 8018972:	4602      	mov	r2, r0
 8018974:	460b      	mov	r3, r1
 8018976:	f107 0108 	add.w	r1, r7, #8
 801897a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 801897e:	2300      	movs	r3, #0
 8018980:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018984:	2300      	movs	r3, #0
 8018986:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801898a:	e04a      	b.n	8018a22 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 801898c:	4a96      	ldr	r2, [pc, #600]	; (8018be8 <CSE_step+0x2e0>)
 801898e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018992:	00db      	lsls	r3, r3, #3
 8018994:	4413      	add	r3, r2
 8018996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801899e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80189a2:	00c9      	lsls	r1, r1, #3
 80189a4:	4401      	add	r1, r0
 80189a6:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 80189aa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80189ae:	3303      	adds	r3, #3
 80189b0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80189b4:	1c51      	adds	r1, r2, #1
 80189b6:	4a8c      	ldr	r2, [pc, #560]	; (8018be8 <CSE_step+0x2e0>)
 80189b8:	00db      	lsls	r3, r3, #3
 80189ba:	4413      	add	r3, r2
 80189bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80189c4:	00c9      	lsls	r1, r1, #3
 80189c6:	4401      	add	r1, r0
 80189c8:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 80189cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80189d0:	3306      	adds	r3, #6
 80189d2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80189d6:	1c91      	adds	r1, r2, #2
 80189d8:	4a83      	ldr	r2, [pc, #524]	; (8018be8 <CSE_step+0x2e0>)
 80189da:	00db      	lsls	r3, r3, #3
 80189dc:	4413      	add	r3, r2
 80189de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80189e6:	00c9      	lsls	r1, r1, #3
 80189e8:	4401      	add	r1, r0
 80189ea:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 80189ee:	f107 0210 	add.w	r2, r7, #16
 80189f2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	4413      	add	r3, r2
 80189fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189fe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8018a02:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8018a06:	00c9      	lsls	r1, r1, #3
 8018a08:	4401      	add	r1, r0
 8018a0a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8018a0e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018a12:	3303      	adds	r3, #3
 8018a14:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018a18:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a1c:	3301      	adds	r3, #1
 8018a1e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018a22:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018a26:	2b02      	cmp	r3, #2
 8018a28:	ddb0      	ble.n	801898c <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8018a2a:	463b      	mov	r3, r7
 8018a2c:	ed93 7b00 	vldr	d7, [r3]
 8018a30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018a34:	4618      	mov	r0, r3
 8018a36:	eeb0 0a47 	vmov.f32	s0, s14
 8018a3a:	eef0 0a67 	vmov.f32	s1, s15
 8018a3e:	f009 f8cb 	bl	8021bd8 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8018a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a4a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018a4e:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8018a52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018a5a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018a5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8018a62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018a66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018a6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018a6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8018a72:	463b      	mov	r3, r7
 8018a74:	ed93 7b00 	vldr	d7, [r3]
 8018a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8018a82:	eef0 0a67 	vmov.f32	s1, s15
 8018a86:	f009 f8a7 	bl	8021bd8 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8018a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018a92:	463b      	mov	r3, r7
 8018a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a98:	f7e7 fda0 	bl	80005dc <__aeabi_dmul>
 8018a9c:	4602      	mov	r2, r0
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	f107 0110 	add.w	r1, r7, #16
 8018aa4:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018aae:	e011      	b.n	8018ad4 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8018ab0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018aba:	00db      	lsls	r3, r3, #3
 8018abc:	18d1      	adds	r1, r2, r3
 8018abe:	f04f 0200 	mov.w	r2, #0
 8018ac2:	f04f 0300 	mov.w	r3, #0
 8018ac6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018aca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018ace:	3301      	adds	r3, #1
 8018ad0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018ad4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018ad8:	2b01      	cmp	r3, #1
 8018ada:	dde9      	ble.n	8018ab0 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8018adc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018ae0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018ae4:	463b      	mov	r3, r7
 8018ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aea:	f7e7 fd77 	bl	80005dc <__aeabi_dmul>
 8018aee:	4602      	mov	r2, r0
 8018af0:	460b      	mov	r3, r1
 8018af2:	f107 0110 	add.w	r1, r7, #16
 8018af6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8018afa:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8018afe:	f04f 0200 	mov.w	r2, #0
 8018b02:	f04f 0300 	mov.w	r3, #0
 8018b06:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8018b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8018b12:	463b      	mov	r3, r7
 8018b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b18:	f7e7 fd60 	bl	80005dc <__aeabi_dmul>
 8018b1c:	4602      	mov	r2, r0
 8018b1e:	460b      	mov	r3, r1
 8018b20:	f107 0110 	add.w	r1, r7, #16
 8018b24:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8018b28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018b30:	2301      	movs	r3, #1
 8018b32:	461e      	mov	r6, r3
 8018b34:	f04f 0200 	mov.w	r2, #0
 8018b38:	f04f 0300 	mov.w	r3, #0
 8018b3c:	f7e7 ffb6 	bl	8000aac <__aeabi_dcmpeq>
 8018b40:	4603      	mov	r3, r0
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d101      	bne.n	8018b4a <CSE_step+0x242>
 8018b46:	2300      	movs	r3, #0
 8018b48:	461e      	mov	r6, r3
 8018b4a:	b2f3      	uxtb	r3, r6
 8018b4c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8018b50:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d113      	bne.n	8018b80 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8018b58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018b5c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8018b60:	2301      	movs	r3, #1
 8018b62:	461e      	mov	r6, r3
 8018b64:	f04f 0200 	mov.w	r2, #0
 8018b68:	f04f 0300 	mov.w	r3, #0
 8018b6c:	f7e7 ff9e 	bl	8000aac <__aeabi_dcmpeq>
 8018b70:	4603      	mov	r3, r0
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d101      	bne.n	8018b7a <CSE_step+0x272>
 8018b76:	2300      	movs	r3, #0
 8018b78:	461e      	mov	r6, r3
 8018b7a:	b2f3      	uxtb	r3, r6
 8018b7c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8018b80:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d113      	bne.n	8018bb0 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8018b88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018b8c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8018b90:	2301      	movs	r3, #1
 8018b92:	461e      	mov	r6, r3
 8018b94:	f04f 0200 	mov.w	r2, #0
 8018b98:	f04f 0300 	mov.w	r3, #0
 8018b9c:	f7e7 ff86 	bl	8000aac <__aeabi_dcmpeq>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d101      	bne.n	8018baa <CSE_step+0x2a2>
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	461e      	mov	r6, r3
 8018baa:	b2f3      	uxtb	r3, r6
 8018bac:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8018bb6:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d018      	beq.n	8018bf0 <CSE_step+0x2e8>
      guard1 = true;
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018bc4:	e395      	b.n	80192f2 <CSE_step+0x9ea>
 8018bc6:	bf00      	nop
	...
 8018bd4:	40000000 	.word	0x40000000
 8018bd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8018bdc:	3f50624d 	.word	0x3f50624d
 8018be0:	20000088 	.word	0x20000088
 8018be4:	2001c288 	.word	0x2001c288
 8018be8:	2001c240 	.word	0x2001c240
 8018bec:	2001c230 	.word	0x2001c230
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8018bf0:	f107 0310 	add.w	r3, r7, #16
 8018bf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018bf8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018bfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8018c00:	f107 0310 	add.w	r3, r7, #16
 8018c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018c08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c10:	f7e7 fe0e 	bl	8000830 <__aeabi_ddiv>
 8018c14:	4602      	mov	r2, r0
 8018c16:	460b      	mov	r3, r1
 8018c18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018c1c:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8018c20:	f107 0310 	add.w	r3, r7, #16
 8018c24:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8018c28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018c30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018c34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8018c38:	f7e7 fcd0 	bl	80005dc <__aeabi_dmul>
 8018c3c:	4602      	mov	r2, r0
 8018c3e:	460b      	mov	r3, r1
 8018c40:	4640      	mov	r0, r8
 8018c42:	4649      	mov	r1, r9
 8018c44:	f7e7 fb12 	bl	800026c <__aeabi_dsub>
 8018c48:	4602      	mov	r2, r0
 8018c4a:	460b      	mov	r3, r1
 8018c4c:	4610      	mov	r0, r2
 8018c4e:	4619      	mov	r1, r3
 8018c50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018c58:	f7e7 fdea 	bl	8000830 <__aeabi_ddiv>
 8018c5c:	4602      	mov	r2, r0
 8018c5e:	460b      	mov	r3, r1
 8018c60:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018c64:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8018c68:	f107 0310 	add.w	r3, r7, #16
 8018c6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018c70:	4639      	mov	r1, r7
 8018c72:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018c76:	2300      	movs	r3, #0
 8018c78:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018c7c:	e025      	b.n	8018cca <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8018c7e:	463b      	mov	r3, r7
 8018c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018c84:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c88:	3306      	adds	r3, #6
 8018c8a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018c8e:	00db      	lsls	r3, r3, #3
 8018c90:	4413      	add	r3, r2
 8018c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018c96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018c9a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c9e:	00db      	lsls	r3, r3, #3
 8018ca0:	4413      	add	r3, r2
 8018ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ca6:	f7e7 fc99 	bl	80005dc <__aeabi_dmul>
 8018caa:	4602      	mov	r2, r0
 8018cac:	460b      	mov	r3, r1
 8018cae:	4640      	mov	r0, r8
 8018cb0:	4649      	mov	r1, r9
 8018cb2:	f7e7 fadb 	bl	800026c <__aeabi_dsub>
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	460b      	mov	r3, r1
 8018cba:	4639      	mov	r1, r7
 8018cbc:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018cc0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018cca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018cce:	2b01      	cmp	r3, #1
 8018cd0:	ddd5      	ble.n	8018c7e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8018cd2:	463b      	mov	r3, r7
 8018cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018cd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018cdc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8018ce0:	f7e7 fda6 	bl	8000830 <__aeabi_ddiv>
 8018ce4:	4602      	mov	r2, r0
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018cec:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8018cf0:	f04f 0200 	mov.w	r2, #0
 8018cf4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018cf8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8018cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d04:	4611      	mov	r1, r2
 8018d06:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d0e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8018d12:	f04f 0200 	mov.w	r2, #0
 8018d16:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018d1a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018d1e:	f7e7 feed 	bl	8000afc <__aeabi_dcmpgt>
 8018d22:	4603      	mov	r3, r0
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d00a      	beq.n	8018d3e <CSE_step+0x436>
        temp = 1.0;
 8018d28:	4639      	mov	r1, r7
 8018d2a:	f04f 0200 	mov.w	r2, #0
 8018d2e:	4bbf      	ldr	r3, [pc, #764]	; (801902c <CSE_step+0x724>)
 8018d30:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018d34:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018d38:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018d3c:	e016      	b.n	8018d6c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8018d3e:	f04f 0200 	mov.w	r2, #0
 8018d42:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018d46:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018d4a:	f7e7 fd71 	bl	8000830 <__aeabi_ddiv>
 8018d4e:	4602      	mov	r2, r0
 8018d50:	460b      	mov	r3, r1
 8018d52:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8018d56:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018d5a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018d5e:	f7e7 fc3d 	bl	80005dc <__aeabi_dmul>
 8018d62:	4602      	mov	r2, r0
 8018d64:	460b      	mov	r3, r1
 8018d66:	4639      	mov	r1, r7
 8018d68:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8018d6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018d70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018d74:	4611      	mov	r1, r2
 8018d76:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d7e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8018d82:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018d86:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018d8a:	f7e7 feb7 	bl	8000afc <__aeabi_dcmpgt>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d02b      	beq.n	8018dec <CSE_step+0x4e4>
        t = scale / absxk;
 8018d94:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018d98:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8018d9c:	f7e7 fd48 	bl	8000830 <__aeabi_ddiv>
 8018da0:	4602      	mov	r2, r0
 8018da2:	460b      	mov	r3, r1
 8018da4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018da8:	463b      	mov	r3, r7
 8018daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018dae:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018db2:	f7e7 fc13 	bl	80005dc <__aeabi_dmul>
 8018db6:	4602      	mov	r2, r0
 8018db8:	460b      	mov	r3, r1
 8018dba:	4610      	mov	r0, r2
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018dc2:	f7e7 fc0b 	bl	80005dc <__aeabi_dmul>
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	460b      	mov	r3, r1
 8018dca:	4610      	mov	r0, r2
 8018dcc:	4619      	mov	r1, r3
 8018dce:	f04f 0200 	mov.w	r2, #0
 8018dd2:	4b96      	ldr	r3, [pc, #600]	; (801902c <CSE_step+0x724>)
 8018dd4:	f7e7 fa4c 	bl	8000270 <__adddf3>
 8018dd8:	4602      	mov	r2, r0
 8018dda:	460b      	mov	r3, r1
 8018ddc:	4639      	mov	r1, r7
 8018dde:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018de2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018de6:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018dea:	e01d      	b.n	8018e28 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8018dec:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018df0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018df4:	f7e7 fd1c 	bl	8000830 <__aeabi_ddiv>
 8018df8:	4602      	mov	r2, r0
 8018dfa:	460b      	mov	r3, r1
 8018dfc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018e00:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e04:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018e08:	f7e7 fbe8 	bl	80005dc <__aeabi_dmul>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	460b      	mov	r3, r1
 8018e10:	4610      	mov	r0, r2
 8018e12:	4619      	mov	r1, r3
 8018e14:	463b      	mov	r3, r7
 8018e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1a:	f7e7 fa29 	bl	8000270 <__adddf3>
 8018e1e:	4602      	mov	r2, r0
 8018e20:	460b      	mov	r3, r1
 8018e22:	4639      	mov	r1, r7
 8018e24:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8018e28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e30:	4611      	mov	r1, r2
 8018e32:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e3a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8018e3e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018e42:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018e46:	f7e7 fe59 	bl	8000afc <__aeabi_dcmpgt>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d02b      	beq.n	8018ea8 <CSE_step+0x5a0>
        t = scale / absxk;
 8018e50:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018e54:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8018e58:	f7e7 fcea 	bl	8000830 <__aeabi_ddiv>
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	460b      	mov	r3, r1
 8018e60:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018e64:	463b      	mov	r3, r7
 8018e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e6a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e6e:	f7e7 fbb5 	bl	80005dc <__aeabi_dmul>
 8018e72:	4602      	mov	r2, r0
 8018e74:	460b      	mov	r3, r1
 8018e76:	4610      	mov	r0, r2
 8018e78:	4619      	mov	r1, r3
 8018e7a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018e7e:	f7e7 fbad 	bl	80005dc <__aeabi_dmul>
 8018e82:	4602      	mov	r2, r0
 8018e84:	460b      	mov	r3, r1
 8018e86:	4610      	mov	r0, r2
 8018e88:	4619      	mov	r1, r3
 8018e8a:	f04f 0200 	mov.w	r2, #0
 8018e8e:	4b67      	ldr	r3, [pc, #412]	; (801902c <CSE_step+0x724>)
 8018e90:	f7e7 f9ee 	bl	8000270 <__adddf3>
 8018e94:	4602      	mov	r2, r0
 8018e96:	460b      	mov	r3, r1
 8018e98:	4639      	mov	r1, r7
 8018e9a:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018e9e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018ea2:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018ea6:	e01d      	b.n	8018ee4 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8018ea8:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018eac:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018eb0:	f7e7 fcbe 	bl	8000830 <__aeabi_ddiv>
 8018eb4:	4602      	mov	r2, r0
 8018eb6:	460b      	mov	r3, r1
 8018eb8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8018ebc:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018ec0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018ec4:	f7e7 fb8a 	bl	80005dc <__aeabi_dmul>
 8018ec8:	4602      	mov	r2, r0
 8018eca:	460b      	mov	r3, r1
 8018ecc:	4610      	mov	r0, r2
 8018ece:	4619      	mov	r1, r3
 8018ed0:	463b      	mov	r3, r7
 8018ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed6:	f7e7 f9cb 	bl	8000270 <__adddf3>
 8018eda:	4602      	mov	r2, r0
 8018edc:	460b      	mov	r3, r1
 8018ede:	4639      	mov	r1, r7
 8018ee0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8018ee4:	463b      	mov	r3, r7
 8018ee6:	ed93 7b00 	vldr	d7, [r3]
 8018eea:	eeb0 0a47 	vmov.f32	s0, s14
 8018eee:	eef0 0a67 	vmov.f32	s1, s15
 8018ef2:	f015 fd65 	bl	802e9c0 <sqrt>
 8018ef6:	ec51 0b10 	vmov	r0, r1, d0
 8018efa:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018efe:	f7e7 fb6d 	bl	80005dc <__aeabi_dmul>
 8018f02:	4602      	mov	r2, r0
 8018f04:	460b      	mov	r3, r1
 8018f06:	4639      	mov	r1, r7
 8018f08:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8018f0c:	463b      	mov	r3, r7
 8018f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f12:	f04f 0200 	mov.w	r2, #0
 8018f16:	4b45      	ldr	r3, [pc, #276]	; (801902c <CSE_step+0x724>)
 8018f18:	f7e7 fde6 	bl	8000ae8 <__aeabi_dcmpge>
 8018f1c:	4603      	mov	r3, r0
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d003      	beq.n	8018f2a <CSE_step+0x622>
        guard1 = true;
 8018f22:	2301      	movs	r3, #1
 8018f24:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018f28:	e1e3      	b.n	80192f2 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8018f2a:	463b      	mov	r3, r7
 8018f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f30:	463b      	mov	r3, r7
 8018f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f36:	f7e7 fb51 	bl	80005dc <__aeabi_dmul>
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	460b      	mov	r3, r1
 8018f3e:	f04f 0000 	mov.w	r0, #0
 8018f42:	493a      	ldr	r1, [pc, #232]	; (801902c <CSE_step+0x724>)
 8018f44:	f7e7 f992 	bl	800026c <__aeabi_dsub>
 8018f48:	4602      	mov	r2, r0
 8018f4a:	460b      	mov	r3, r1
 8018f4c:	ec43 2b17 	vmov	d7, r2, r3
 8018f50:	eeb0 0a47 	vmov.f32	s0, s14
 8018f54:	eef0 0a67 	vmov.f32	s1, s15
 8018f58:	f015 fd32 	bl	802e9c0 <sqrt>
 8018f5c:	eeb0 6a40 	vmov.f32	s12, s0
 8018f60:	eef0 6a60 	vmov.f32	s13, s1
 8018f64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018f68:	ed93 7b04 	vldr	d7, [r3, #16]
 8018f6c:	463a      	mov	r2, r7
 8018f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f72:	f103 0110 	add.w	r1, r3, #16
 8018f76:	f107 0310 	add.w	r3, r7, #16
 8018f7a:	3310      	adds	r3, #16
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	eeb0 1a47 	vmov.f32	s2, s14
 8018f82:	eef0 1a67 	vmov.f32	s3, s15
 8018f86:	eeb0 0a46 	vmov.f32	s0, s12
 8018f8a:	eef0 0a66 	vmov.f32	s1, s13
 8018f8e:	f006 fd75 	bl	801fa7c <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8018f92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018f96:	f04f 0200 	mov.w	r2, #0
 8018f9a:	f04f 0300 	mov.w	r3, #0
 8018f9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8018fa2:	463b      	mov	r3, r7
 8018fa4:	ed93 7b00 	vldr	d7, [r3]
 8018fa8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018fac:	ed93 6b02 	vldr	d6, [r3, #8]
 8018fb0:	463a      	mov	r2, r7
 8018fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018fb6:	f103 0108 	add.w	r1, r3, #8
 8018fba:	f107 0310 	add.w	r3, r7, #16
 8018fbe:	3308      	adds	r3, #8
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	eeb0 1a46 	vmov.f32	s2, s12
 8018fc6:	eef0 1a66 	vmov.f32	s3, s13
 8018fca:	eeb0 0a47 	vmov.f32	s0, s14
 8018fce:	eef0 0a67 	vmov.f32	s1, s15
 8018fd2:	f006 fd53 	bl	801fa7c <rotate_LZ7ctbe0>
        C[1] = 0.0;
 8018fd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018fda:	f04f 0200 	mov.w	r2, #0
 8018fde:	f04f 0300 	mov.w	r3, #0
 8018fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 8018fe6:	463b      	mov	r3, r7
 8018fe8:	ed93 7b00 	vldr	d7, [r3]
 8018fec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018ff0:	ed93 6b00 	vldr	d6, [r3]
 8018ff4:	463a      	mov	r2, r7
 8018ff6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018ffa:	f107 0310 	add.w	r3, r7, #16
 8018ffe:	4618      	mov	r0, r3
 8019000:	eeb0 1a46 	vmov.f32	s2, s12
 8019004:	eef0 1a66 	vmov.f32	s3, s13
 8019008:	eeb0 0a47 	vmov.f32	s0, s14
 801900c:	eef0 0a67 	vmov.f32	s1, s15
 8019010:	f006 fd34 	bl	801fa7c <rotate_LZ7ctbe0>
        C[0] = 0.0;
 8019014:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019018:	f04f 0200 	mov.w	r2, #0
 801901c:	f04f 0300 	mov.w	r3, #0
 8019020:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8019024:	2300      	movs	r3, #0
 8019026:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801902a:	e06e      	b.n	801910a <CSE_step+0x802>
 801902c:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8019030:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019034:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019038:	00db      	lsls	r3, r3, #3
 801903a:	4413      	add	r3, r2
 801903c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019040:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019044:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019048:	00db      	lsls	r3, r3, #3
 801904a:	4413      	add	r3, r2
 801904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019050:	f7e7 fac4 	bl	80005dc <__aeabi_dmul>
 8019054:	4602      	mov	r2, r0
 8019056:	460b      	mov	r3, r1
 8019058:	4639      	mov	r1, r7
 801905a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 801905e:	f107 0210 	add.w	r2, r7, #16
 8019062:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019066:	00db      	lsls	r3, r3, #3
 8019068:	4413      	add	r3, r2
 801906a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801906e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019072:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	4413      	add	r3, r2
 801907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801907e:	f7e7 faad 	bl	80005dc <__aeabi_dmul>
 8019082:	4602      	mov	r2, r0
 8019084:	460b      	mov	r3, r1
 8019086:	4690      	mov	r8, r2
 8019088:	4699      	mov	r9, r3
 801908a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801908e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	4413      	add	r3, r2
 8019096:	e9d3 0100 	ldrd	r0, r1, [r3]
 801909a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a2:	f7e7 fa9b 	bl	80005dc <__aeabi_dmul>
 80190a6:	4602      	mov	r2, r0
 80190a8:	460b      	mov	r3, r1
 80190aa:	4640      	mov	r0, r8
 80190ac:	4649      	mov	r1, r9
 80190ae:	f7e7 f8dd 	bl	800026c <__aeabi_dsub>
 80190b2:	4602      	mov	r2, r0
 80190b4:	460b      	mov	r3, r1
 80190b6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80190ba:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80190be:	00c9      	lsls	r1, r1, #3
 80190c0:	4401      	add	r1, r0
 80190c2:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80190c6:	f107 0210 	add.w	r2, r7, #16
 80190ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	4413      	add	r3, r2
 80190d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80190d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80190da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190de:	f7e7 fa7d 	bl	80005dc <__aeabi_dmul>
 80190e2:	4602      	mov	r2, r0
 80190e4:	460b      	mov	r3, r1
 80190e6:	4610      	mov	r0, r2
 80190e8:	4619      	mov	r1, r3
 80190ea:	463b      	mov	r3, r7
 80190ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f0:	f7e7 f8be 	bl	8000270 <__adddf3>
 80190f4:	4602      	mov	r2, r0
 80190f6:	460b      	mov	r3, r1
 80190f8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80190fc:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8019100:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019104:	3b01      	subs	r3, #1
 8019106:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801910a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801910e:	2b00      	cmp	r3, #0
 8019110:	da8e      	bge.n	8019030 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8019112:	2301      	movs	r3, #1
 8019114:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019118:	e06f      	b.n	80191fa <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 801911a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801911e:	3303      	adds	r3, #3
 8019120:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019124:	00db      	lsls	r3, r3, #3
 8019126:	4413      	add	r3, r2
 8019128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912c:	4639      	mov	r1, r7
 801912e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8019132:	f107 0210 	add.w	r2, r7, #16
 8019136:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801913a:	00db      	lsls	r3, r3, #3
 801913c:	4413      	add	r3, r2
 801913e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019142:	463b      	mov	r3, r7
 8019144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019148:	f7e7 fa48 	bl	80005dc <__aeabi_dmul>
 801914c:	4602      	mov	r2, r0
 801914e:	460b      	mov	r3, r1
 8019150:	4690      	mov	r8, r2
 8019152:	4699      	mov	r9, r3
 8019154:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019158:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801915c:	00db      	lsls	r3, r3, #3
 801915e:	4413      	add	r3, r2
 8019160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019164:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019168:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801916c:	f7e7 fa36 	bl	80005dc <__aeabi_dmul>
 8019170:	4602      	mov	r2, r0
 8019172:	460b      	mov	r3, r1
 8019174:	4610      	mov	r0, r2
 8019176:	4619      	mov	r1, r3
 8019178:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801917c:	1cde      	adds	r6, r3, #3
 801917e:	4602      	mov	r2, r0
 8019180:	460b      	mov	r3, r1
 8019182:	4640      	mov	r0, r8
 8019184:	4649      	mov	r1, r9
 8019186:	f7e7 f871 	bl	800026c <__aeabi_dsub>
 801918a:	4602      	mov	r2, r0
 801918c:	460b      	mov	r3, r1
 801918e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019192:	00f1      	lsls	r1, r6, #3
 8019194:	4401      	add	r1, r0
 8019196:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 801919a:	f107 0210 	add.w	r2, r7, #16
 801919e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191a2:	00db      	lsls	r3, r3, #3
 80191a4:	4413      	add	r3, r2
 80191a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80191aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80191ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80191b2:	f7e7 fa13 	bl	80005dc <__aeabi_dmul>
 80191b6:	4602      	mov	r2, r0
 80191b8:	460b      	mov	r3, r1
 80191ba:	4690      	mov	r8, r2
 80191bc:	4699      	mov	r9, r3
 80191be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80191c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191c6:	00db      	lsls	r3, r3, #3
 80191c8:	4413      	add	r3, r2
 80191ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80191ce:	463b      	mov	r3, r7
 80191d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d4:	f7e7 fa02 	bl	80005dc <__aeabi_dmul>
 80191d8:	4602      	mov	r2, r0
 80191da:	460b      	mov	r3, r1
 80191dc:	4640      	mov	r0, r8
 80191de:	4649      	mov	r1, r9
 80191e0:	f7e7 f846 	bl	8000270 <__adddf3>
 80191e4:	4602      	mov	r2, r0
 80191e6:	460b      	mov	r3, r1
 80191e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80191ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80191f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191f4:	3b01      	subs	r3, #1
 80191f6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80191fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80191fe:	2b00      	cmp	r3, #0
 8019200:	da8b      	bge.n	801911a <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8019202:	2302      	movs	r3, #2
 8019204:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019208:	e06f      	b.n	80192ea <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 801920a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801920e:	3306      	adds	r3, #6
 8019210:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019214:	00db      	lsls	r3, r3, #3
 8019216:	4413      	add	r3, r2
 8019218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801921c:	4639      	mov	r1, r7
 801921e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8019222:	f107 0210 	add.w	r2, r7, #16
 8019226:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801922a:	00db      	lsls	r3, r3, #3
 801922c:	4413      	add	r3, r2
 801922e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019232:	463b      	mov	r3, r7
 8019234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019238:	f7e7 f9d0 	bl	80005dc <__aeabi_dmul>
 801923c:	4602      	mov	r2, r0
 801923e:	460b      	mov	r3, r1
 8019240:	4690      	mov	r8, r2
 8019242:	4699      	mov	r9, r3
 8019244:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019248:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801924c:	00db      	lsls	r3, r3, #3
 801924e:	4413      	add	r3, r2
 8019250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019258:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801925c:	f7e7 f9be 	bl	80005dc <__aeabi_dmul>
 8019260:	4602      	mov	r2, r0
 8019262:	460b      	mov	r3, r1
 8019264:	4610      	mov	r0, r2
 8019266:	4619      	mov	r1, r3
 8019268:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801926c:	1d9e      	adds	r6, r3, #6
 801926e:	4602      	mov	r2, r0
 8019270:	460b      	mov	r3, r1
 8019272:	4640      	mov	r0, r8
 8019274:	4649      	mov	r1, r9
 8019276:	f7e6 fff9 	bl	800026c <__aeabi_dsub>
 801927a:	4602      	mov	r2, r0
 801927c:	460b      	mov	r3, r1
 801927e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019282:	00f1      	lsls	r1, r6, #3
 8019284:	4401      	add	r1, r0
 8019286:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 801928a:	f107 0210 	add.w	r2, r7, #16
 801928e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019292:	00db      	lsls	r3, r3, #3
 8019294:	4413      	add	r3, r2
 8019296:	e9d3 0100 	ldrd	r0, r1, [r3]
 801929a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801929e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80192a2:	f7e7 f99b 	bl	80005dc <__aeabi_dmul>
 80192a6:	4602      	mov	r2, r0
 80192a8:	460b      	mov	r3, r1
 80192aa:	4690      	mov	r8, r2
 80192ac:	4699      	mov	r9, r3
 80192ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80192b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192b6:	00db      	lsls	r3, r3, #3
 80192b8:	4413      	add	r3, r2
 80192ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192be:	463b      	mov	r3, r7
 80192c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c4:	f7e7 f98a 	bl	80005dc <__aeabi_dmul>
 80192c8:	4602      	mov	r2, r0
 80192ca:	460b      	mov	r3, r1
 80192cc:	4640      	mov	r0, r8
 80192ce:	4649      	mov	r1, r9
 80192d0:	f7e6 ffce 	bl	8000270 <__adddf3>
 80192d4:	4602      	mov	r2, r0
 80192d6:	460b      	mov	r3, r1
 80192d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80192dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80192e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192e4:	3b01      	subs	r3, #1
 80192e6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80192ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	da8b      	bge.n	801920a <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 80192f2:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	f000 82e1 	beq.w	80198be <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 80192fc:	2300      	movs	r3, #0
 80192fe:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8019302:	2300      	movs	r3, #0
 8019304:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019308:	e0d6      	b.n	80194b8 <CSE_step+0xbb0>
        coffset = 0;
 801930a:	2300      	movs	r3, #0
 801930c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019310:	2300      	movs	r3, #0
 8019312:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019316:	e0c0      	b.n	801949a <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8019318:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801931c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019320:	4413      	add	r3, r2
 8019322:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8019326:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801932a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801932e:	00db      	lsls	r3, r3, #3
 8019330:	18d1      	adds	r1, r2, r3
 8019332:	f04f 0200 	mov.w	r2, #0
 8019336:	f04f 0300 	mov.w	r3, #0
 801933a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 801933e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019342:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019346:	00db      	lsls	r3, r3, #3
 8019348:	4413      	add	r3, r2
 801934a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801934e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019352:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	4413      	add	r3, r2
 801935a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801935e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019362:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019366:	00db      	lsls	r3, r3, #3
 8019368:	4413      	add	r3, r2
 801936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936e:	f7e7 f935 	bl	80005dc <__aeabi_dmul>
 8019372:	4602      	mov	r2, r0
 8019374:	460b      	mov	r3, r1
 8019376:	4640      	mov	r0, r8
 8019378:	4649      	mov	r1, r9
 801937a:	f7e6 ff79 	bl	8000270 <__adddf3>
 801937e:	4602      	mov	r2, r0
 8019380:	460b      	mov	r3, r1
 8019382:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019386:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801938a:	00c9      	lsls	r1, r1, #3
 801938c:	4401      	add	r1, r0
 801938e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8019392:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019396:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801939a:	00db      	lsls	r3, r3, #3
 801939c:	4413      	add	r3, r2
 801939e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80193a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193a6:	3301      	adds	r3, #1
 80193a8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80193ac:	00db      	lsls	r3, r3, #3
 80193ae:	4413      	add	r3, r2
 80193b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80193b4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80193b8:	3301      	adds	r3, #1
 80193ba:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80193be:	00db      	lsls	r3, r3, #3
 80193c0:	4413      	add	r3, r2
 80193c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c6:	f7e7 f909 	bl	80005dc <__aeabi_dmul>
 80193ca:	4602      	mov	r2, r0
 80193cc:	460b      	mov	r3, r1
 80193ce:	4640      	mov	r0, r8
 80193d0:	4649      	mov	r1, r9
 80193d2:	f7e6 ff4d 	bl	8000270 <__adddf3>
 80193d6:	4602      	mov	r2, r0
 80193d8:	460b      	mov	r3, r1
 80193da:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80193de:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80193e2:	00c9      	lsls	r1, r1, #3
 80193e4:	4401      	add	r1, r0
 80193e6:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80193ea:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80193ee:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80193f2:	00db      	lsls	r3, r3, #3
 80193f4:	4413      	add	r3, r2
 80193f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80193fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193fe:	3302      	adds	r3, #2
 8019400:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019404:	00db      	lsls	r3, r3, #3
 8019406:	4413      	add	r3, r2
 8019408:	e9d3 0100 	ldrd	r0, r1, [r3]
 801940c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019410:	3302      	adds	r3, #2
 8019412:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019416:	00db      	lsls	r3, r3, #3
 8019418:	4413      	add	r3, r2
 801941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801941e:	f7e7 f8dd 	bl	80005dc <__aeabi_dmul>
 8019422:	4602      	mov	r2, r0
 8019424:	460b      	mov	r3, r1
 8019426:	4640      	mov	r0, r8
 8019428:	4649      	mov	r1, r9
 801942a:	f7e6 ff21 	bl	8000270 <__adddf3>
 801942e:	4602      	mov	r2, r0
 8019430:	460b      	mov	r3, r1
 8019432:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019436:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801943a:	00c9      	lsls	r1, r1, #3
 801943c:	4401      	add	r1, r0
 801943e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8019442:	f107 0210 	add.w	r2, r7, #16
 8019446:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801944a:	00db      	lsls	r3, r3, #3
 801944c:	4413      	add	r3, r2
 801944e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019452:	f107 0210 	add.w	r2, r7, #16
 8019456:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801945a:	00db      	lsls	r3, r3, #3
 801945c:	4413      	add	r3, r2
 801945e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019462:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8019466:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801946a:	4433      	add	r3, r6
 801946c:	461e      	mov	r6, r3
 801946e:	4642      	mov	r2, r8
 8019470:	464b      	mov	r3, r9
 8019472:	f7e7 f8b3 	bl	80005dc <__aeabi_dmul>
 8019476:	4602      	mov	r2, r0
 8019478:	460b      	mov	r3, r1
 801947a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801947e:	00f1      	lsls	r1, r6, #3
 8019480:	4401      	add	r1, r0
 8019482:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8019486:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801948a:	3303      	adds	r3, #3
 801948c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019490:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019494:	3301      	adds	r3, #1
 8019496:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801949a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801949e:	2b02      	cmp	r3, #2
 80194a0:	f77f af3a 	ble.w	8019318 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 80194a4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80194a8:	3303      	adds	r3, #3
 80194aa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80194ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194b2:	3301      	adds	r3, #1
 80194b4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80194b8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194bc:	2b02      	cmp	r3, #2
 80194be:	f77f af24 	ble.w	801930a <CSE_step+0xa02>
      }

      errorCondition = true;
 80194c2:	2301      	movs	r3, #1
 80194c4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80194c8:	2300      	movs	r3, #0
 80194ca:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80194ce:	e045      	b.n	801955c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80194d0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80194d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194d8:	00db      	lsls	r3, r3, #3
 80194da:	4413      	add	r3, r2
 80194dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80194e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80194e8:	00db      	lsls	r3, r3, #3
 80194ea:	4413      	add	r3, r2
 80194ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f0:	f7e6 febc 	bl	800026c <__aeabi_dsub>
 80194f4:	4602      	mov	r2, r0
 80194f6:	460b      	mov	r3, r1
 80194f8:	4639      	mov	r1, r7
 80194fa:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80194fe:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019502:	2b00      	cmp	r3, #0
 8019504:	d01a      	beq.n	801953c <CSE_step+0xc34>
 8019506:	463b      	mov	r3, r7
 8019508:	ed93 7b00 	vldr	d7, [r3]
 801950c:	eeb0 0a47 	vmov.f32	s0, s14
 8019510:	eef0 0a67 	vmov.f32	s1, s15
 8019514:	f006 fd26 	bl	801ff64 <rtIsInf>
 8019518:	4603      	mov	r3, r0
 801951a:	2b00      	cmp	r3, #0
 801951c:	d10b      	bne.n	8019536 <CSE_step+0xc2e>
 801951e:	463b      	mov	r3, r7
 8019520:	ed93 7b00 	vldr	d7, [r3]
 8019524:	eeb0 0a47 	vmov.f32	s0, s14
 8019528:	eef0 0a67 	vmov.f32	s1, s15
 801952c:	f006 fd3e 	bl	801ffac <rtIsNaN>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d002      	beq.n	801953c <CSE_step+0xc34>
          errorCondition = false;
 8019536:	2300      	movs	r3, #0
 8019538:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 801953c:	463b      	mov	r3, r7
 801953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019542:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8019546:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801954a:	00c9      	lsls	r1, r1, #3
 801954c:	4401      	add	r1, r0
 801954e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8019552:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019556:	3301      	adds	r3, #1
 8019558:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801955c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019560:	2b08      	cmp	r3, #8
 8019562:	ddb5      	ble.n	80194d0 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8019564:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019568:	2b00      	cmp	r3, #0
 801956a:	d00a      	beq.n	8019582 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 801956c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019570:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019574:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8019578:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 801957c:	f006 fd68 	bl	8020050 <svd_u3DvUgOe>
 8019580:	e02c      	b.n	80195dc <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8019582:	4bd2      	ldr	r3, [pc, #840]	; (80198cc <CSE_step+0xfc4>)
 8019584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019588:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801958c:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8019590:	4bce      	ldr	r3, [pc, #824]	; (80198cc <CSE_step+0xfc4>)
 8019592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019596:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801959a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 801959e:	4bcb      	ldr	r3, [pc, #812]	; (80198cc <CSE_step+0xfc4>)
 80195a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80195a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80195ac:	2300      	movs	r3, #0
 80195ae:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80195b2:	e00f      	b.n	80195d4 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 80195b4:	4bc5      	ldr	r3, [pc, #788]	; (80198cc <CSE_step+0xfc4>)
 80195b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ba:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80195be:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80195c2:	00c9      	lsls	r1, r1, #3
 80195c4:	4401      	add	r1, r0
 80195c6:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80195ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195ce:	3301      	adds	r3, #1
 80195d0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80195d4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195d8:	2b08      	cmp	r3, #8
 80195da:	ddeb      	ble.n	80195b4 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80195dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80195e0:	2248      	movs	r2, #72	; 0x48
 80195e2:	2100      	movs	r1, #0
 80195e4:	4618      	mov	r0, r3
 80195e6:	f015 f833 	bl	802e650 <memset>
      Ss[0] = s[0];
 80195ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80195ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80195f6:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80195fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80195fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019602:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019606:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801960a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801960e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019612:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019616:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801961a:	2300      	movs	r3, #0
 801961c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019620:	e01e      	b.n	8019660 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8019622:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019626:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	4413      	add	r3, r2
 801962e:	ed93 7b00 	vldr	d7, [r3]
 8019632:	eeb0 0a47 	vmov.f32	s0, s14
 8019636:	eef0 0a67 	vmov.f32	s1, s15
 801963a:	f015 f9c1 	bl	802e9c0 <sqrt>
 801963e:	eeb0 7a40 	vmov.f32	s14, s0
 8019642:	eef0 7a60 	vmov.f32	s15, s1
 8019646:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801964a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	4413      	add	r3, r2
 8019652:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019656:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801965a:	3301      	adds	r3, #1
 801965c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019660:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019664:	2b08      	cmp	r3, #8
 8019666:	dddc      	ble.n	8019622 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8019668:	2300      	movs	r3, #0
 801966a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801966e:	2300      	movs	r3, #0
 8019670:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019674:	e0b4      	b.n	80197e0 <CSE_step+0xed8>
        coffset = 0;
 8019676:	2300      	movs	r3, #0
 8019678:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 801967c:	2300      	movs	r3, #0
 801967e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019682:	e09e      	b.n	80197c2 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8019684:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019688:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801968c:	4413      	add	r3, r2
 801968e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8019692:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019696:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801969a:	00db      	lsls	r3, r3, #3
 801969c:	18d1      	adds	r1, r2, r3
 801969e:	f04f 0200 	mov.w	r2, #0
 80196a2:	f04f 0300 	mov.w	r3, #0
 80196a6:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 80196aa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80196ae:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80196b2:	00db      	lsls	r3, r3, #3
 80196b4:	4413      	add	r3, r2
 80196b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80196ba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80196be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196c2:	00db      	lsls	r3, r3, #3
 80196c4:	4413      	add	r3, r2
 80196c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80196ca:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80196ce:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80196d2:	00db      	lsls	r3, r3, #3
 80196d4:	4413      	add	r3, r2
 80196d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196da:	f7e6 ff7f 	bl	80005dc <__aeabi_dmul>
 80196de:	4602      	mov	r2, r0
 80196e0:	460b      	mov	r3, r1
 80196e2:	4640      	mov	r0, r8
 80196e4:	4649      	mov	r1, r9
 80196e6:	f7e6 fdc3 	bl	8000270 <__adddf3>
 80196ea:	4602      	mov	r2, r0
 80196ec:	460b      	mov	r3, r1
 80196ee:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80196f2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80196f6:	00c9      	lsls	r1, r1, #3
 80196f8:	4401      	add	r1, r0
 80196fa:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80196fe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019702:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019706:	00db      	lsls	r3, r3, #3
 8019708:	4413      	add	r3, r2
 801970a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801970e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019712:	3301      	adds	r3, #1
 8019714:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	4413      	add	r3, r2
 801971c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019720:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019724:	3303      	adds	r3, #3
 8019726:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801972a:	00db      	lsls	r3, r3, #3
 801972c:	4413      	add	r3, r2
 801972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019732:	f7e6 ff53 	bl	80005dc <__aeabi_dmul>
 8019736:	4602      	mov	r2, r0
 8019738:	460b      	mov	r3, r1
 801973a:	4640      	mov	r0, r8
 801973c:	4649      	mov	r1, r9
 801973e:	f7e6 fd97 	bl	8000270 <__adddf3>
 8019742:	4602      	mov	r2, r0
 8019744:	460b      	mov	r3, r1
 8019746:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801974a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801974e:	00c9      	lsls	r1, r1, #3
 8019750:	4401      	add	r1, r0
 8019752:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8019756:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801975a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801975e:	00db      	lsls	r3, r3, #3
 8019760:	4413      	add	r3, r2
 8019762:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019766:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801976a:	3302      	adds	r3, #2
 801976c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019770:	00db      	lsls	r3, r3, #3
 8019772:	4413      	add	r3, r2
 8019774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019778:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801977c:	3306      	adds	r3, #6
 801977e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019782:	00db      	lsls	r3, r3, #3
 8019784:	4413      	add	r3, r2
 8019786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978a:	f7e6 ff27 	bl	80005dc <__aeabi_dmul>
 801978e:	4602      	mov	r2, r0
 8019790:	460b      	mov	r3, r1
 8019792:	4640      	mov	r0, r8
 8019794:	4649      	mov	r1, r9
 8019796:	f7e6 fd6b 	bl	8000270 <__adddf3>
 801979a:	4602      	mov	r2, r0
 801979c:	460b      	mov	r3, r1
 801979e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80197a2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80197a6:	00c9      	lsls	r1, r1, #3
 80197a8:	4401      	add	r1, r0
 80197aa:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80197ae:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80197b2:	3303      	adds	r3, #3
 80197b4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80197b8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80197bc:	3301      	adds	r3, #1
 80197be:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80197c2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80197c6:	2b02      	cmp	r3, #2
 80197c8:	f77f af5c 	ble.w	8019684 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 80197cc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197d0:	3303      	adds	r3, #3
 80197d2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80197d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80197da:	3301      	adds	r3, #1
 80197dc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80197e0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80197e4:	2b02      	cmp	r3, #2
 80197e6:	f77f af46 	ble.w	8019676 <CSE_step+0xd6e>
      }

      errorCondition = true;
 80197ea:	2301      	movs	r3, #1
 80197ec:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 80197f0:	2300      	movs	r3, #0
 80197f2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 80197f6:	2300      	movs	r3, #0
 80197f8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80197fc:	e042      	b.n	8019884 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 80197fe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019802:	3301      	adds	r3, #1
 8019804:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8019808:	2300      	movs	r3, #0
 801980a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 801980e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019812:	2b02      	cmp	r3, #2
 8019814:	dc23      	bgt.n	801985e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8019816:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801981a:	4613      	mov	r3, r2
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	441a      	add	r2, r3
 8019820:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019824:	4413      	add	r3, r2
 8019826:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801982a:	00db      	lsls	r3, r3, #3
 801982c:	4413      	add	r3, r2
 801982e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019832:	f04f 0200 	mov.w	r2, #0
 8019836:	f04f 0300 	mov.w	r3, #0
 801983a:	f7e7 f937 	bl	8000aac <__aeabi_dcmpeq>
 801983e:	4603      	mov	r3, r0
 8019840:	2b00      	cmp	r3, #0
 8019842:	d106      	bne.n	8019852 <CSE_step+0xf4a>
              errorCondition = false;
 8019844:	2300      	movs	r3, #0
 8019846:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 801984a:	2301      	movs	r3, #1
 801984c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8019850:	e00d      	b.n	801986e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8019852:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019856:	3301      	adds	r3, #1
 8019858:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801985c:	e007      	b.n	801986e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 801985e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019862:	3301      	adds	r3, #1
 8019864:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8019868:	2302      	movs	r3, #2
 801986a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 801986e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8019872:	2b00      	cmp	r3, #0
 8019874:	d0c8      	beq.n	8019808 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8019876:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801987a:	2b01      	cmp	r3, #1
 801987c:	d102      	bne.n	8019884 <CSE_step+0xf7c>
          exitg2 = true;
 801987e:	2301      	movs	r3, #1
 8019880:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8019884:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8019888:	2b00      	cmp	r3, #0
 801988a:	d103      	bne.n	8019894 <CSE_step+0xf8c>
 801988c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019890:	2b02      	cmp	r3, #2
 8019892:	ddb4      	ble.n	80197fe <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8019894:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019898:	2b00      	cmp	r3, #0
 801989a:	d110      	bne.n	80198be <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 801989c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80198a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80198a4:	2248      	movs	r2, #72	; 0x48
 80198a6:	4618      	mov	r0, r3
 80198a8:	f014 fec4 	bl	802e634 <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 80198ac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80198b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80198b8:	4618      	mov	r0, r3
 80198ba:	f004 f807 	bl	801d8cc <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 80198be:	2300      	movs	r3, #0
 80198c0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 80198c4:	2300      	movs	r3, #0
 80198c6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80198ca:	e062      	b.n	8019992 <CSE_step+0x108a>
 80198cc:	2001ed68 	.word	0x2001ed68
      CSE_DW.P[iAcol_0] = R[iAcol];
 80198d0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198d8:	00db      	lsls	r3, r3, #3
 80198da:	4413      	add	r3, r2
 80198dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e0:	48a5      	ldr	r0, [pc, #660]	; (8019b78 <CSE_step+0x1270>)
 80198e2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80198e6:	00c9      	lsls	r1, r1, #3
 80198e8:	4401      	add	r1, r0
 80198ea:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80198ee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198f2:	3303      	adds	r3, #3
 80198f4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80198f8:	1c51      	adds	r1, r2, #1
 80198fa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198fe:	00db      	lsls	r3, r3, #3
 8019900:	4413      	add	r3, r2
 8019902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019906:	489c      	ldr	r0, [pc, #624]	; (8019b78 <CSE_step+0x1270>)
 8019908:	00c9      	lsls	r1, r1, #3
 801990a:	4401      	add	r1, r0
 801990c:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019910:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019914:	3306      	adds	r3, #6
 8019916:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801991a:	1c91      	adds	r1, r2, #2
 801991c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019920:	00db      	lsls	r3, r3, #3
 8019922:	4413      	add	r3, r2
 8019924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019928:	4893      	ldr	r0, [pc, #588]	; (8019b78 <CSE_step+0x1270>)
 801992a:	00c9      	lsls	r1, r1, #3
 801992c:	4401      	add	r1, r0
 801992e:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8019932:	4a91      	ldr	r2, [pc, #580]	; (8019b78 <CSE_step+0x1270>)
 8019934:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019938:	3309      	adds	r3, #9
 801993a:	00db      	lsls	r3, r3, #3
 801993c:	4413      	add	r3, r2
 801993e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019942:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019946:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801994a:	00db      	lsls	r3, r3, #3
 801994c:	4413      	add	r3, r2
 801994e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019952:	f107 0308 	add.w	r3, r7, #8
 8019956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801995a:	f7e6 fe3f 	bl	80005dc <__aeabi_dmul>
 801995e:	4602      	mov	r2, r0
 8019960:	460b      	mov	r3, r1
 8019962:	4640      	mov	r0, r8
 8019964:	4649      	mov	r1, r9
 8019966:	f7e6 fc83 	bl	8000270 <__adddf3>
 801996a:	4602      	mov	r2, r0
 801996c:	460b      	mov	r3, r1
 801996e:	4882      	ldr	r0, [pc, #520]	; (8019b78 <CSE_step+0x1270>)
 8019970:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8019974:	3109      	adds	r1, #9
 8019976:	00c9      	lsls	r1, r1, #3
 8019978:	4401      	add	r1, r0
 801997a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 801997e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019982:	3303      	adds	r3, #3
 8019984:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019988:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801998c:	3301      	adds	r3, #1
 801998e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019992:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019996:	2b02      	cmp	r3, #2
 8019998:	dd9a      	ble.n	80198d0 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 801999a:	4b77      	ldr	r3, [pc, #476]	; (8019b78 <CSE_step+0x1270>)
 801999c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80199a0:	4b75      	ldr	r3, [pc, #468]	; (8019b78 <CSE_step+0x1270>)
 80199a2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80199a6:	f7e6 ff43 	bl	8000830 <__aeabi_ddiv>
 80199aa:	4602      	mov	r2, r0
 80199ac:	460b      	mov	r3, r1
 80199ae:	4973      	ldr	r1, [pc, #460]	; (8019b7c <CSE_step+0x1274>)
 80199b0:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 80199b4:	4b70      	ldr	r3, [pc, #448]	; (8019b78 <CSE_step+0x1270>)
 80199b6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80199ba:	4970      	ldr	r1, [pc, #448]	; (8019b7c <CSE_step+0x1274>)
 80199bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 80199c0:	f107 0310 	add.w	r3, r7, #16
 80199c4:	4619      	mov	r1, r3
 80199c6:	486e      	ldr	r0, [pc, #440]	; (8019b80 <CSE_step+0x1278>)
 80199c8:	f7fe fb28 	bl	801801c <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80199cc:	2300      	movs	r3, #0
 80199ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80199d2:	e034      	b.n	8019a3e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 80199d4:	4a68      	ldr	r2, [pc, #416]	; (8019b78 <CSE_step+0x1270>)
 80199d6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80199da:	00db      	lsls	r3, r3, #3
 80199dc:	4413      	add	r3, r2
 80199de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80199e2:	a363      	add	r3, pc, #396	; (adr r3, 8019b70 <CSE_step+0x1268>)
 80199e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e8:	f7e6 fdf8 	bl	80005dc <__aeabi_dmul>
 80199ec:	4602      	mov	r2, r0
 80199ee:	460b      	mov	r3, r1
 80199f0:	f107 0108 	add.w	r1, r7, #8
 80199f4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 80199f8:	f107 0308 	add.w	r3, r7, #8
 80199fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a00:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019a04:	00c9      	lsls	r1, r1, #3
 8019a06:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019a0a:	4401      	add	r1, r0
 8019a0c:	39d0      	subs	r1, #208	; 0xd0
 8019a0e:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8019a12:	f107 0308 	add.w	r3, r7, #8
 8019a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019a1e:	3109      	adds	r1, #9
 8019a20:	4614      	mov	r4, r2
 8019a22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8019a26:	00cb      	lsls	r3, r1, #3
 8019a28:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019a2c:	4413      	add	r3, r2
 8019a2e:	3bd0      	subs	r3, #208	; 0xd0
 8019a30:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019a34:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a38:	3301      	adds	r3, #1
 8019a3a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019a3e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a42:	2b08      	cmp	r3, #8
 8019a44:	ddc6      	ble.n	80199d4 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8019a46:	2300      	movs	r3, #0
 8019a48:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019a52:	e058      	b.n	8019b06 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8019a54:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a58:	00db      	lsls	r3, r3, #3
 8019a5a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019a5e:	4413      	add	r3, r2
 8019a60:	3bd0      	subs	r3, #208	; 0xd0
 8019a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019a66:	4b44      	ldr	r3, [pc, #272]	; (8019b78 <CSE_step+0x1270>)
 8019a68:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8019a6c:	f7e6 fc00 	bl	8000270 <__adddf3>
 8019a70:	4602      	mov	r2, r0
 8019a72:	460b      	mov	r3, r1
 8019a74:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019a78:	00c9      	lsls	r1, r1, #3
 8019a7a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019a7e:	4401      	add	r1, r0
 8019a80:	39d0      	subs	r1, #208	; 0xd0
 8019a82:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8019a86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	00db      	lsls	r3, r3, #3
 8019a8e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019a92:	4413      	add	r3, r2
 8019a94:	3bd0      	subs	r3, #208	; 0xd0
 8019a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019a9a:	4b37      	ldr	r3, [pc, #220]	; (8019b78 <CSE_step+0x1270>)
 8019a9c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8019aa0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019aa4:	3401      	adds	r4, #1
 8019aa6:	f7e6 fbe3 	bl	8000270 <__adddf3>
 8019aaa:	4602      	mov	r2, r0
 8019aac:	460b      	mov	r3, r1
 8019aae:	00e1      	lsls	r1, r4, #3
 8019ab0:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019ab4:	4401      	add	r1, r0
 8019ab6:	39d0      	subs	r1, #208	; 0xd0
 8019ab8:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8019abc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ac0:	3302      	adds	r3, #2
 8019ac2:	00db      	lsls	r3, r3, #3
 8019ac4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019ac8:	4413      	add	r3, r2
 8019aca:	3bd0      	subs	r3, #208	; 0xd0
 8019acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019ad0:	4b29      	ldr	r3, [pc, #164]	; (8019b78 <CSE_step+0x1270>)
 8019ad2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019ad6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019ada:	3402      	adds	r4, #2
 8019adc:	f7e6 fbc8 	bl	8000270 <__adddf3>
 8019ae0:	4602      	mov	r2, r0
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	00e1      	lsls	r1, r4, #3
 8019ae6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019aea:	4401      	add	r1, r0
 8019aec:	39d0      	subs	r1, #208	; 0xd0
 8019aee:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019af2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019af6:	3303      	adds	r3, #3
 8019af8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019afc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b00:	3301      	adds	r3, #1
 8019b02:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019b06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b0a:	2b05      	cmp	r3, #5
 8019b0c:	dda2      	ble.n	8019a54 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8019b0e:	2300      	movs	r3, #0
 8019b10:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019b14:	2300      	movs	r3, #0
 8019b16:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019b1a:	e018      	b.n	8019b4e <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8019b1c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8019b20:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b24:	00db      	lsls	r3, r3, #3
 8019b26:	18d0      	adds	r0, r2, r3
 8019b28:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8019b2c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b30:	00db      	lsls	r3, r3, #3
 8019b32:	4413      	add	r3, r2
 8019b34:	4619      	mov	r1, r3
 8019b36:	f7fe fa71 	bl	801801c <CSE_S_x>
    iAcol_0 += 3;
 8019b3a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b3e:	3303      	adds	r3, #3
 8019b40:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019b44:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b48:	3301      	adds	r3, #1
 8019b4a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019b4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b52:	2b05      	cmp	r3, #5
 8019b54:	dde2      	ble.n	8019b1c <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8019b56:	f107 0310 	add.w	r3, r7, #16
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	4808      	ldr	r0, [pc, #32]	; (8019b80 <CSE_step+0x1278>)
 8019b5e:	f7fe fa5d 	bl	801801c <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019b62:	2300      	movs	r3, #0
 8019b64:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019b68:	e021      	b.n	8019bae <CSE_step+0x12a6>
 8019b6a:	bf00      	nop
 8019b6c:	f3af 8000 	nop.w
 8019b70:	64b487da 	.word	0x64b487da
 8019b74:	3f5c60bf 	.word	0x3f5c60bf
 8019b78:	2001c240 	.word	0x2001c240
 8019b7c:	2001c220 	.word	0x2001c220
 8019b80:	2001c288 	.word	0x2001c288
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8019b84:	4ab8      	ldr	r2, [pc, #736]	; (8019e68 <CSE_step+0x1560>)
 8019b86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019b8a:	3309      	adds	r3, #9
 8019b8c:	00db      	lsls	r3, r3, #3
 8019b8e:	4413      	add	r3, r2
 8019b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b94:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8019b98:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019b9c:	00c9      	lsls	r1, r1, #3
 8019b9e:	4401      	add	r1, r0
 8019ba0:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019ba4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ba8:	3301      	adds	r3, #1
 8019baa:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019bae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019bb2:	2b02      	cmp	r3, #2
 8019bb4:	dde6      	ble.n	8019b84 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8019bb6:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8019bba:	f107 0210 	add.w	r2, r7, #16
 8019bbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019bc2:	9304      	str	r3, [sp, #16]
 8019bc4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019bc8:	9303      	str	r3, [sp, #12]
 8019bca:	4ba8      	ldr	r3, [pc, #672]	; (8019e6c <CSE_step+0x1564>)
 8019bcc:	9302      	str	r3, [sp, #8]
 8019bce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8019bd2:	9301      	str	r3, [sp, #4]
 8019bd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019bd8:	9300      	str	r3, [sp, #0]
 8019bda:	460b      	mov	r3, r1
 8019bdc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8019e60 <CSE_step+0x1558>
 8019be0:	49a3      	ldr	r1, [pc, #652]	; (8019e70 <CSE_step+0x1568>)
 8019be2:	48a4      	ldr	r0, [pc, #656]	; (8019e74 <CSE_step+0x156c>)
 8019be4:	f001 fc42 	bl	801b46c <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8019be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019bec:	2248      	movs	r2, #72	; 0x48
 8019bee:	2100      	movs	r1, #0
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f014 fd2d 	bl	802e650 <memset>
  R[0] = 1.0;
 8019bf6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019bfa:	f04f 0200 	mov.w	r2, #0
 8019bfe:	4b9e      	ldr	r3, [pc, #632]	; (8019e78 <CSE_step+0x1570>)
 8019c00:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8019c04:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019c08:	f04f 0200 	mov.w	r2, #0
 8019c0c:	4b9a      	ldr	r3, [pc, #616]	; (8019e78 <CSE_step+0x1570>)
 8019c0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8019c12:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019c16:	f04f 0200 	mov.w	r2, #0
 8019c1a:	4b97      	ldr	r3, [pc, #604]	; (8019e78 <CSE_step+0x1570>)
 8019c1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019c20:	2300      	movs	r3, #0
 8019c22:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019c26:	e07e      	b.n	8019d26 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8019c28:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019c2c:	4613      	mov	r3, r2
 8019c2e:	005b      	lsls	r3, r3, #1
 8019c30:	4413      	add	r3, r2
 8019c32:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019c36:	2300      	movs	r3, #0
 8019c38:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019c3c:	e06a      	b.n	8019d14 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8019c3e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019c42:	4613      	mov	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019c4c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019c50:	3301      	adds	r3, #1
 8019c52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019c56:	00db      	lsls	r3, r3, #3
 8019c58:	4413      	add	r3, r2
 8019c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c5e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c62:	3303      	adds	r3, #3
 8019c64:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019c68:	00db      	lsls	r3, r3, #3
 8019c6a:	4413      	add	r3, r2
 8019c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c70:	f7e6 fcb4 	bl	80005dc <__aeabi_dmul>
 8019c74:	4602      	mov	r2, r0
 8019c76:	460b      	mov	r3, r1
 8019c78:	4614      	mov	r4, r2
 8019c7a:	461d      	mov	r5, r3
 8019c7c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019c80:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019c84:	00db      	lsls	r3, r3, #3
 8019c86:	4413      	add	r3, r2
 8019c88:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019c8c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019c90:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c94:	00db      	lsls	r3, r3, #3
 8019c96:	4413      	add	r3, r2
 8019c98:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019c9c:	f7e6 fc9e 	bl	80005dc <__aeabi_dmul>
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	4629      	mov	r1, r5
 8019ca8:	f7e6 fae2 	bl	8000270 <__adddf3>
 8019cac:	4602      	mov	r2, r0
 8019cae:	460b      	mov	r3, r1
 8019cb0:	4690      	mov	r8, r2
 8019cb2:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019cb4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019cb8:	3302      	adds	r3, #2
 8019cba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019cbe:	00db      	lsls	r3, r3, #3
 8019cc0:	4413      	add	r3, r2
 8019cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019cc6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019cca:	3306      	adds	r3, #6
 8019ccc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019cd0:	00db      	lsls	r3, r3, #3
 8019cd2:	4413      	add	r3, r2
 8019cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd8:	f7e6 fc80 	bl	80005dc <__aeabi_dmul>
 8019cdc:	4602      	mov	r2, r0
 8019cde:	460b      	mov	r3, r1
 8019ce0:	4610      	mov	r0, r2
 8019ce2:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019ce4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019ce8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019cec:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019cee:	4602      	mov	r2, r0
 8019cf0:	460b      	mov	r3, r1
 8019cf2:	4640      	mov	r0, r8
 8019cf4:	4649      	mov	r1, r9
 8019cf6:	f7e6 fabb 	bl	8000270 <__adddf3>
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019cfe:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019d02:	00e1      	lsls	r1, r4, #3
 8019d04:	4401      	add	r1, r0
 8019d06:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019d0a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d0e:	3301      	adds	r3, #1
 8019d10:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019d14:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d18:	2b02      	cmp	r3, #2
 8019d1a:	dd90      	ble.n	8019c3e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019d1c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d20:	3301      	adds	r3, #1
 8019d22:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019d26:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d2a:	2b02      	cmp	r3, #2
 8019d2c:	f77f af7c 	ble.w	8019c28 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8019d30:	2300      	movs	r3, #0
 8019d32:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8019d36:	2300      	movs	r3, #0
 8019d38:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019d42:	e077      	b.n	8019e34 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8019d44:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019d48:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d4c:	00db      	lsls	r3, r3, #3
 8019d4e:	4413      	add	r3, r2
 8019d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d54:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019d58:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019d5c:	00c9      	lsls	r1, r1, #3
 8019d5e:	4401      	add	r1, r0
 8019d60:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8019d64:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d68:	1cd9      	adds	r1, r3, #3
 8019d6a:	4a44      	ldr	r2, [pc, #272]	; (8019e7c <CSE_step+0x1574>)
 8019d6c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019d70:	3344      	adds	r3, #68	; 0x44
 8019d72:	00db      	lsls	r3, r3, #3
 8019d74:	4413      	add	r3, r2
 8019d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d7a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019d7e:	00c9      	lsls	r1, r1, #3
 8019d80:	4401      	add	r1, r0
 8019d82:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8019d86:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019d90:	1c51      	adds	r1, r2, #1
 8019d92:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019d96:	00db      	lsls	r3, r3, #3
 8019d98:	4413      	add	r3, r2
 8019d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d9e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019da2:	00c9      	lsls	r1, r1, #3
 8019da4:	4401      	add	r1, r0
 8019da6:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8019daa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019dae:	3303      	adds	r3, #3
 8019db0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019db4:	1d11      	adds	r1, r2, #4
 8019db6:	4a31      	ldr	r2, [pc, #196]	; (8019e7c <CSE_step+0x1574>)
 8019db8:	3344      	adds	r3, #68	; 0x44
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	4413      	add	r3, r2
 8019dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019dc6:	00c9      	lsls	r1, r1, #3
 8019dc8:	4401      	add	r1, r0
 8019dca:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8019dce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019dd2:	3302      	adds	r3, #2
 8019dd4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019dd8:	1c91      	adds	r1, r2, #2
 8019dda:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019dde:	00db      	lsls	r3, r3, #3
 8019de0:	4413      	add	r3, r2
 8019de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019de6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019dea:	00c9      	lsls	r1, r1, #3
 8019dec:	4401      	add	r1, r0
 8019dee:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8019df2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019df6:	3306      	adds	r3, #6
 8019df8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019dfc:	1d51      	adds	r1, r2, #5
 8019dfe:	4a1f      	ldr	r2, [pc, #124]	; (8019e7c <CSE_step+0x1574>)
 8019e00:	3344      	adds	r3, #68	; 0x44
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	4413      	add	r3, r2
 8019e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e0a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019e0e:	00c9      	lsls	r1, r1, #3
 8019e10:	4401      	add	r1, r0
 8019e12:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8019e16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019e1a:	3306      	adds	r3, #6
 8019e1c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8019e20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019e24:	3303      	adds	r3, #3
 8019e26:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8019e2a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019e2e:	3301      	adds	r3, #1
 8019e30:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019e34:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019e38:	2b02      	cmp	r3, #2
 8019e3a:	dd83      	ble.n	8019d44 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8019e3c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019e40:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8019e44:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f004 fcc7 	bl	801e7dc <qr_DvOBrgQi>
  iAcol_0 = 0;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019e54:	2300      	movs	r3, #0
 8019e56:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019e5a:	e04c      	b.n	8019ef6 <CSE_step+0x15ee>
 8019e5c:	f3af 8000 	nop.w
 8019e60:	00000000 	.word	0x00000000
 8019e64:	c12e847e 	.word	0xc12e847e
 8019e68:	2001c240 	.word	0x2001c240
 8019e6c:	2001c288 	.word	0x2001c288
 8019e70:	0802fa18 	.word	0x0802fa18
 8019e74:	0802fa08 	.word	0x0802fa08
 8019e78:	3ff00000 	.word	0x3ff00000
 8019e7c:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8019e80:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019e84:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019e88:	00db      	lsls	r3, r3, #3
 8019e8a:	4413      	add	r3, r2
 8019e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e90:	481e      	ldr	r0, [pc, #120]	; (8019f0c <CSE_step+0x1604>)
 8019e92:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019e96:	00c9      	lsls	r1, r1, #3
 8019e98:	4401      	add	r1, r0
 8019e9a:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8019e9e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019ea2:	3303      	adds	r3, #3
 8019ea4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019ea8:	1c51      	adds	r1, r2, #1
 8019eaa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019eae:	00db      	lsls	r3, r3, #3
 8019eb0:	4413      	add	r3, r2
 8019eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb6:	4815      	ldr	r0, [pc, #84]	; (8019f0c <CSE_step+0x1604>)
 8019eb8:	00c9      	lsls	r1, r1, #3
 8019eba:	4401      	add	r1, r0
 8019ebc:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019ec0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019ec4:	3306      	adds	r3, #6
 8019ec6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019eca:	1c91      	adds	r1, r2, #2
 8019ecc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019ed0:	00db      	lsls	r3, r3, #3
 8019ed2:	4413      	add	r3, r2
 8019ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed8:	480c      	ldr	r0, [pc, #48]	; (8019f0c <CSE_step+0x1604>)
 8019eda:	00c9      	lsls	r1, r1, #3
 8019edc:	4401      	add	r1, r0
 8019ede:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019ee2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ee6:	3303      	adds	r3, #3
 8019ee8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8019eec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019ef0:	3301      	adds	r3, #1
 8019ef2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019ef6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019efa:	2b02      	cmp	r3, #2
 8019efc:	ddc0      	ble.n	8019e80 <CSE_step+0x1578>
  }
}
 8019efe:	bf00      	nop
 8019f00:	bf00      	nop
 8019f02:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 8019f06:	46bd      	mov	sp, r7
 8019f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f0c:	2001c240 	.word	0x2001c240

08019f10 <CSE_initialize>:

void CSE_initialize(void)
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 8019f14:	2008      	movs	r0, #8
 8019f16:	f005 ffe1 	bl	801fedc <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8019f1a:	2248      	movs	r2, #72	; 0x48
 8019f1c:	490b      	ldr	r1, [pc, #44]	; (8019f4c <CSE_initialize+0x3c>)
 8019f1e:	480c      	ldr	r0, [pc, #48]	; (8019f50 <CSE_initialize+0x40>)
 8019f20:	f014 fb88 	bl	802e634 <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8019f24:	4b0b      	ldr	r3, [pc, #44]	; (8019f54 <CSE_initialize+0x44>)
 8019f26:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8019f2a:	4909      	ldr	r1, [pc, #36]	; (8019f50 <CSE_initialize+0x40>)
 8019f2c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8019f30:	4b08      	ldr	r3, [pc, #32]	; (8019f54 <CSE_initialize+0x44>)
 8019f32:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8019f36:	4906      	ldr	r1, [pc, #24]	; (8019f50 <CSE_initialize+0x40>)
 8019f38:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8019f3c:	4b05      	ldr	r3, [pc, #20]	; (8019f54 <CSE_initialize+0x44>)
 8019f3e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8019f42:	4903      	ldr	r1, [pc, #12]	; (8019f50 <CSE_initialize+0x40>)
 8019f44:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8019f48:	bf00      	nop
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	200002f8 	.word	0x200002f8
 8019f50:	2001c240 	.word	0x2001c240
 8019f54:	20000088 	.word	0x20000088

08019f58 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8019f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f5c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8019f60:	b087      	sub	sp, #28
 8019f62:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8019f64:	4b20      	ldr	r3, [pc, #128]	; (8019fe8 <SIM0_step+0x90>)
 8019f66:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8019f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8019f72:	f101 0118 	add.w	r1, r1, #24
 8019f76:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8019f7a:	4b1c      	ldr	r3, [pc, #112]	; (8019fec <SIM0_step+0x94>)
 8019f7c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8019f80:	4b1a      	ldr	r3, [pc, #104]	; (8019fec <SIM0_step+0x94>)
 8019f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019f86:	a316      	add	r3, pc, #88	; (adr r3, 8019fe0 <SIM0_step+0x88>)
 8019f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8c:	f7e6 fb26 	bl	80005dc <__aeabi_dmul>
 8019f90:	4602      	mov	r2, r0
 8019f92:	460b      	mov	r3, r1
 8019f94:	4650      	mov	r0, sl
 8019f96:	4659      	mov	r1, fp
 8019f98:	f7e6 fc4a 	bl	8000830 <__aeabi_ddiv>
 8019f9c:	4602      	mov	r2, r0
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	4610      	mov	r0, r2
 8019fa2:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 8019fa4:	4b10      	ldr	r3, [pc, #64]	; (8019fe8 <SIM0_step+0x90>)
 8019fa6:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8019fae:	f7e6 fb15 	bl	80005dc <__aeabi_dmul>
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	ec43 2b17 	vmov	d7, r2, r3
 8019fba:	eeb0 0a47 	vmov.f32	s0, s14
 8019fbe:	eef0 0a67 	vmov.f32	s1, s15
 8019fc2:	f014 fc65 	bl	802e890 <exp>
 8019fc6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8019fca:	f103 0308 	add.w	r3, r3, #8
 8019fce:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8019fd8:	f102 020c 	add.w	r2, r2, #12
 8019fdc:	6013      	str	r3, [r2, #0]
 8019fde:	e243      	b.n	801a468 <SIM0_step+0x510>
 8019fe0:	00000000 	.word	0x00000000
 8019fe4:	40ac2000 	.word	0x40ac2000
 8019fe8:	2001c2a0 	.word	0x2001c2a0
 8019fec:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 8019ff0:	4aca      	ldr	r2, [pc, #808]	; (801a31c <SIM0_step+0x3c4>)
 8019ff2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8019ff6:	f103 030c 	add.w	r3, r3, #12
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	3305      	adds	r3, #5
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	4413      	add	r3, r2
 801a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a006:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 801a00a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a00e:	f101 010c 	add.w	r1, r1, #12
 801a012:	6809      	ldr	r1, [r1, #0]
 801a014:	00c9      	lsls	r1, r1, #3
 801a016:	4401      	add	r1, r0
 801a018:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a01c:	4abf      	ldr	r2, [pc, #764]	; (801a31c <SIM0_step+0x3c4>)
 801a01e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a022:	f103 030c 	add.w	r3, r3, #12
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a02c:	00db      	lsls	r3, r3, #3
 801a02e:	4413      	add	r3, r2
 801a030:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 801a034:	4ab9      	ldr	r2, [pc, #740]	; (801a31c <SIM0_step+0x3c4>)
 801a036:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a03a:	f103 030c 	add.w	r3, r3, #12
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a044:	00db      	lsls	r3, r3, #3
 801a046:	4413      	add	r3, r2
 801a048:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a04c:	f7e6 fbf0 	bl	8000830 <__aeabi_ddiv>
 801a050:	4602      	mov	r2, r0
 801a052:	460b      	mov	r3, r1
 801a054:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a058:	f101 0108 	add.w	r1, r1, #8
 801a05c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 801a060:	220c      	movs	r2, #12
 801a062:	49af      	ldr	r1, [pc, #700]	; (801a320 <SIM0_step+0x3c8>)
 801a064:	48af      	ldr	r0, [pc, #700]	; (801a324 <SIM0_step+0x3cc>)
 801a066:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a06a:	f103 0308 	add.w	r3, r3, #8
 801a06e:	ed93 0b00 	vldr	d0, [r3]
 801a072:	f003 fb41 	bl	801d6f8 <look1_binlxpw>
 801a076:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a07a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 801a07e:	220c      	movs	r2, #12
 801a080:	49a9      	ldr	r1, [pc, #676]	; (801a328 <SIM0_step+0x3d0>)
 801a082:	48a8      	ldr	r0, [pc, #672]	; (801a324 <SIM0_step+0x3cc>)
 801a084:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a088:	f103 0308 	add.w	r3, r3, #8
 801a08c:	ed93 0b00 	vldr	d0, [r3]
 801a090:	f003 fb32 	bl	801d6f8 <look1_binlxpw>
 801a094:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a098:	f103 0318 	add.w	r3, r3, #24
 801a09c:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 801a0a0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a0a4:	f103 0318 	add.w	r3, r3, #24
 801a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ac:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0b4:	f7e6 fa92 	bl	80005dc <__aeabi_dmul>
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	460b      	mov	r3, r1
 801a0bc:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a0c0:	f101 0118 	add.w	r1, r1, #24
 801a0c4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a0c8:	220c      	movs	r2, #12
 801a0ca:	4998      	ldr	r1, [pc, #608]	; (801a32c <SIM0_step+0x3d4>)
 801a0cc:	4895      	ldr	r0, [pc, #596]	; (801a324 <SIM0_step+0x3cc>)
 801a0ce:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a0d2:	f103 0308 	add.w	r3, r3, #8
 801a0d6:	ed93 0b00 	vldr	d0, [r3]
 801a0da:	f003 fb0d 	bl	801d6f8 <look1_binlxpw>
 801a0de:	ec51 0b10 	vmov	r0, r1, d0
 801a0e2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0ea:	f7e6 f8c1 	bl	8000270 <__adddf3>
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	460b      	mov	r3, r1
 801a0f2:	4610      	mov	r0, r2
 801a0f4:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 801a0f6:	4b8e      	ldr	r3, [pc, #568]	; (801a330 <SIM0_step+0x3d8>)
 801a0f8:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a0fc:	f7e6 fa6e 	bl	80005dc <__aeabi_dmul>
 801a100:	4602      	mov	r2, r0
 801a102:	460b      	mov	r3, r1
 801a104:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a108:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a10c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a110:	f103 0318 	add.w	r3, r3, #24
 801a114:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a118:	4602      	mov	r2, r0
 801a11a:	460b      	mov	r3, r1
 801a11c:	f7e6 f8a8 	bl	8000270 <__adddf3>
 801a120:	4602      	mov	r2, r0
 801a122:	460b      	mov	r3, r1
 801a124:	4610      	mov	r0, r2
 801a126:	4619      	mov	r1, r3
 801a128:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a130:	f7e6 f89e 	bl	8000270 <__adddf3>
 801a134:	4602      	mov	r2, r0
 801a136:	460b      	mov	r3, r1
 801a138:	4610      	mov	r0, r2
 801a13a:	4619      	mov	r1, r3
 801a13c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a140:	f103 0318 	add.w	r3, r3, #24
 801a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a148:	f7e6 fa48 	bl	80005dc <__aeabi_dmul>
 801a14c:	4602      	mov	r2, r0
 801a14e:	460b      	mov	r3, r1
 801a150:	4692      	mov	sl, r2
 801a152:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a154:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a158:	f103 0318 	add.w	r3, r3, #24
 801a15c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a160:	4602      	mov	r2, r0
 801a162:	460b      	mov	r3, r1
 801a164:	f7e6 f884 	bl	8000270 <__adddf3>
 801a168:	4602      	mov	r2, r0
 801a16a:	460b      	mov	r3, r1
 801a16c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a174:	f7e6 f87a 	bl	800026c <__aeabi_dsub>
 801a178:	4602      	mov	r2, r0
 801a17a:	460b      	mov	r3, r1
 801a17c:	4610      	mov	r0, r2
 801a17e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a180:	4b66      	ldr	r3, [pc, #408]	; (801a31c <SIM0_step+0x3c4>)
 801a182:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801a186:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a18a:	f7e6 fa27 	bl	80005dc <__aeabi_dmul>
 801a18e:	4602      	mov	r2, r0
 801a190:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a192:	4650      	mov	r0, sl
 801a194:	4659      	mov	r1, fp
 801a196:	f7e6 f86b 	bl	8000270 <__adddf3>
 801a19a:	4602      	mov	r2, r0
 801a19c:	460b      	mov	r3, r1
 801a19e:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a1a2:	4b63      	ldr	r3, [pc, #396]	; (801a330 <SIM0_step+0x3d8>)
 801a1a4:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 801a1a8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a1ac:	f103 0318 	add.w	r3, r3, #24
 801a1b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a1b4:	4602      	mov	r2, r0
 801a1b6:	460b      	mov	r3, r1
 801a1b8:	f7e6 f85a 	bl	8000270 <__adddf3>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	4650      	mov	r0, sl
 801a1c2:	4659      	mov	r1, fp
 801a1c4:	f7e6 f852 	bl	800026c <__aeabi_dsub>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	460b      	mov	r3, r1
 801a1cc:	4610      	mov	r0, r2
 801a1ce:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a1d0:	4a52      	ldr	r2, [pc, #328]	; (801a31c <SIM0_step+0x3c4>)
 801a1d2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a1d6:	f103 030c 	add.w	r3, r3, #12
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	3383      	adds	r3, #131	; 0x83
 801a1de:	00db      	lsls	r3, r3, #3
 801a1e0:	4413      	add	r3, r2
 801a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e6:	f7e6 f9f9 	bl	80005dc <__aeabi_dmul>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a1ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a1f2:	f7e6 f83b 	bl	800026c <__aeabi_dsub>
 801a1f6:	4602      	mov	r2, r0
 801a1f8:	460b      	mov	r3, r1
 801a1fa:	4692      	mov	sl, r2
 801a1fc:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a1fe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a202:	f103 0318 	add.w	r3, r3, #24
 801a206:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a20a:	4602      	mov	r2, r0
 801a20c:	460b      	mov	r3, r1
 801a20e:	f7e6 f82f 	bl	8000270 <__adddf3>
 801a212:	4602      	mov	r2, r0
 801a214:	460b      	mov	r3, r1
 801a216:	4610      	mov	r0, r2
 801a218:	4619      	mov	r1, r3
      SIM0_P.Ts);
 801a21a:	4b45      	ldr	r3, [pc, #276]	; (801a330 <SIM0_step+0x3d8>)
 801a21c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a220:	f7e6 f826 	bl	8000270 <__adddf3>
 801a224:	4602      	mov	r2, r0
 801a226:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a228:	4650      	mov	r0, sl
 801a22a:	4659      	mov	r1, fp
 801a22c:	f7e6 fb00 	bl	8000830 <__aeabi_ddiv>
 801a230:	4602      	mov	r2, r0
 801a232:	460b      	mov	r3, r1
 801a234:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a238:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a23c:	220c      	movs	r2, #12
 801a23e:	493d      	ldr	r1, [pc, #244]	; (801a334 <SIM0_step+0x3dc>)
 801a240:	4838      	ldr	r0, [pc, #224]	; (801a324 <SIM0_step+0x3cc>)
 801a242:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a246:	f103 0308 	add.w	r3, r3, #8
 801a24a:	ed93 0b00 	vldr	d0, [r3]
 801a24e:	f003 fa53 	bl	801d6f8 <look1_binlxpw>
 801a252:	ec53 2b10 	vmov	r2, r3, d0
 801a256:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a25a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a25e:	f7e6 f807 	bl	8000270 <__adddf3>
 801a262:	4602      	mov	r2, r0
 801a264:	460b      	mov	r3, r1
 801a266:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a26a:	f101 0118 	add.w	r1, r1, #24
 801a26e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 801a272:	4a31      	ldr	r2, [pc, #196]	; (801a338 <SIM0_step+0x3e0>)
 801a274:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a278:	f103 030c 	add.w	r3, r3, #12
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	3308      	adds	r3, #8
 801a280:	00db      	lsls	r3, r3, #3
 801a282:	18d1      	adds	r1, r2, r3
 801a284:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a288:	f103 0318 	add.w	r3, r3, #24
 801a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a290:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 801a294:	4a28      	ldr	r2, [pc, #160]	; (801a338 <SIM0_step+0x3e0>)
 801a296:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a29a:	f103 030c 	add.w	r3, r3, #12
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	3386      	adds	r3, #134	; 0x86
 801a2a2:	00db      	lsls	r3, r3, #3
 801a2a4:	18d1      	adds	r1, r2, r3
 801a2a6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a2aa:	f103 0308 	add.w	r3, r3, #8
 801a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2b2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 801a2b6:	4a19      	ldr	r2, [pc, #100]	; (801a31c <SIM0_step+0x3c4>)
 801a2b8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a2bc:	f103 030c 	add.w	r3, r3, #12
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a2c6:	00db      	lsls	r3, r3, #3
 801a2c8:	4413      	add	r3, r2
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	481a      	ldr	r0, [pc, #104]	; (801a338 <SIM0_step+0x3e0>)
 801a2d0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a2d4:	f101 010c 	add.w	r1, r1, #12
 801a2d8:	6809      	ldr	r1, [r1, #0]
 801a2da:	f501 7182 	add.w	r1, r1, #260	; 0x104
 801a2de:	00c9      	lsls	r1, r1, #3
 801a2e0:	4401      	add	r1, r0
 801a2e2:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 801a2e6:	4a0d      	ldr	r2, [pc, #52]	; (801a31c <SIM0_step+0x3c4>)
 801a2e8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a2ec:	f103 030c 	add.w	r3, r3, #12
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a2f6:	00db      	lsls	r3, r3, #3
 801a2f8:	4413      	add	r3, r2
 801a2fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a2fe:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a302:	f103 0308 	add.w	r3, r3, #8
 801a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30a:	f7e6 f967 	bl	80005dc <__aeabi_dmul>
 801a30e:	4602      	mov	r2, r0
 801a310:	460b      	mov	r3, r1
 801a312:	f507 60fd 	add.w	r0, r7, #2024	; 0x7e8
 801a316:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a31a:	e00f      	b.n	801a33c <SIM0_step+0x3e4>
 801a31c:	2001c2a0 	.word	0x2001c2a0
 801a320:	200003e8 	.word	0x200003e8
 801a324:	20000e80 	.word	0x20000e80
 801a328:	20000ee8 	.word	0x20000ee8
 801a32c:	20000380 	.word	0x20000380
 801a330:	20000360 	.word	0x20000360
 801a334:	20000e18 	.word	0x20000e18
 801a338:	2001db00 	.word	0x2001db00
 801a33c:	f101 010c 	add.w	r1, r1, #12
 801a340:	6809      	ldr	r1, [r1, #0]
 801a342:	00c9      	lsls	r1, r1, #3
 801a344:	4401      	add	r1, r0
 801a346:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 801a34a:	f107 0318 	add.w	r3, r7, #24
 801a34e:	3b10      	subs	r3, #16
 801a350:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a354:	f102 020c 	add.w	r2, r2, #12
 801a358:	6812      	ldr	r2, [r2, #0]
 801a35a:	00d2      	lsls	r2, r2, #3
 801a35c:	1899      	adds	r1, r3, r2
 801a35e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a366:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a36a:	4aa2      	ldr	r2, [pc, #648]	; (801a5f4 <SIM0_step+0x69c>)
 801a36c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a370:	f103 030c 	add.w	r3, r3, #12
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a37a:	00db      	lsls	r3, r3, #3
 801a37c:	4413      	add	r3, r2
 801a37e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a382:	4b9d      	ldr	r3, [pc, #628]	; (801a5f8 <SIM0_step+0x6a0>)
 801a384:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a388:	f7e6 fa52 	bl	8000830 <__aeabi_ddiv>
 801a38c:	4602      	mov	r2, r0
 801a38e:	460b      	mov	r3, r1
 801a390:	4610      	mov	r0, r2
 801a392:	4619      	mov	r1, r3
                  * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain +
 801a394:	4a97      	ldr	r2, [pc, #604]	; (801a5f4 <SIM0_step+0x69c>)
 801a396:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a39a:	f103 030c 	add.w	r3, r3, #12
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a3a4:	00db      	lsls	r3, r3, #3
 801a3a6:	4413      	add	r3, r2
 801a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ac:	f7e6 f916 	bl	80005dc <__aeabi_dmul>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	460b      	mov	r3, r1
 801a3b4:	4610      	mov	r0, r2
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	4b8f      	ldr	r3, [pc, #572]	; (801a5f8 <SIM0_step+0x6a0>)
 801a3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3be:	3318      	adds	r3, #24
 801a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c4:	f7e6 f90a 	bl	80005dc <__aeabi_dmul>
 801a3c8:	4602      	mov	r2, r0
 801a3ca:	460b      	mov	r3, r1
 801a3cc:	4610      	mov	r0, r2
 801a3ce:	4619      	mov	r1, r3
 801a3d0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a3d4:	f103 0318 	add.w	r3, r3, #24
 801a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3dc:	f7e5 ff48 	bl	8000270 <__adddf3>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	460b      	mov	r3, r1
 801a3e4:	4610      	mov	r0, r2
 801a3e6:	4619      	mov	r1, r3
                  rtb_Memory20) * SIM0_P.Ts + SIM0_DW.Memory_PreviousInput[i];
 801a3e8:	4b83      	ldr	r3, [pc, #524]	; (801a5f8 <SIM0_step+0x6a0>)
 801a3ea:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 801a3ee:	f7e6 f8f5 	bl	80005dc <__aeabi_dmul>
 801a3f2:	4602      	mov	r2, r0
 801a3f4:	460b      	mov	r3, r1
 801a3f6:	4610      	mov	r0, r2
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	4a7e      	ldr	r2, [pc, #504]	; (801a5f4 <SIM0_step+0x69c>)
 801a3fc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a400:	f103 030c 	add.w	r3, r3, #12
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a40a:	00db      	lsls	r3, r3, #3
 801a40c:	4413      	add	r3, r2
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	f7e5 ff2d 	bl	8000270 <__adddf3>
 801a416:	4602      	mov	r2, r0
 801a418:	460b      	mov	r3, r1
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a41a:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 801a41e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a422:	f101 010c 	add.w	r1, r1, #12
 801a426:	6809      	ldr	r1, [r1, #0]
 801a428:	00c9      	lsls	r1, r1, #3
 801a42a:	4401      	add	r1, r0
 801a42c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory19[i] = rtb_is_drive;
 801a430:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801a434:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a438:	f103 030c 	add.w	r3, r3, #12
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	00db      	lsls	r3, r3, #3
 801a440:	18d1      	adds	r1, r2, r3
 801a442:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a446:	f103 0318 	add.w	r3, r3, #24
 801a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a44e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801a452:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a456:	f103 030c 	add.w	r3, r3, #12
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	3301      	adds	r3, #1
 801a45e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a462:	f102 020c 	add.w	r2, r2, #12
 801a466:	6013      	str	r3, [r2, #0]
 801a468:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a46c:	f103 030c 	add.w	r3, r3, #12
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	2b7d      	cmp	r3, #125	; 0x7d
 801a474:	f77f adbc 	ble.w	8019ff0 <SIM0_step+0x98>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a478:	4b5e      	ldr	r3, [pc, #376]	; (801a5f4 <SIM0_step+0x69c>)
 801a47a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a47e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a482:	f04f 0200 	mov.w	r2, #0
 801a486:	f04f 0300 	mov.w	r3, #0
 801a48a:	f7e6 fb0f 	bl	8000aac <__aeabi_dcmpeq>
 801a48e:	4603      	mov	r3, r0
 801a490:	2b00      	cmp	r3, #0
 801a492:	d101      	bne.n	801a498 <SIM0_step+0x540>
 801a494:	2602      	movs	r6, #2
 801a496:	e000      	b.n	801a49a <SIM0_step+0x542>
 801a498:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a49a:	4b56      	ldr	r3, [pc, #344]	; (801a5f4 <SIM0_step+0x69c>)
 801a49c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a4a0:	3308      	adds	r3, #8
 801a4a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	469a      	mov	sl, r3
 801a4aa:	f04f 0200 	mov.w	r2, #0
 801a4ae:	f04f 0300 	mov.w	r3, #0
 801a4b2:	f7e6 fafb 	bl	8000aac <__aeabi_dcmpeq>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d001      	beq.n	801a4c0 <SIM0_step+0x568>
 801a4bc:	2300      	movs	r3, #0
 801a4be:	469a      	mov	sl, r3
 801a4c0:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a4c4:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a4c6:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 801a4c8:	4b4a      	ldr	r3, [pc, #296]	; (801a5f4 <SIM0_step+0x69c>)
 801a4ca:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a4ce:	3318      	adds	r3, #24
 801a4d0:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a4d2:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a4d4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a4d8:	f102 020c 	add.w	r2, r2, #12
 801a4dc:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 801a4de:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4e2:	f103 030c 	add.w	r3, r3, #12
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	4a43      	ldr	r2, [pc, #268]	; (801a5f8 <SIM0_step+0x6a0>)
 801a4ea:	4413      	add	r3, r2
 801a4ec:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a4f0:	3318      	adds	r3, #24
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a4f8:	f102 0217 	add.w	r2, r2, #23
 801a4fc:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 801a4fe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a502:	f103 030c 	add.w	r3, r3, #12
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	3308      	adds	r3, #8
 801a50a:	4a3b      	ldr	r2, [pc, #236]	; (801a5f8 <SIM0_step+0x6a0>)
 801a50c:	4413      	add	r3, r2
 801a50e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a512:	3318      	adds	r3, #24
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a51a:	f102 0216 	add.w	r2, r2, #22
 801a51e:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 801a520:	4a36      	ldr	r2, [pc, #216]	; (801a5fc <SIM0_step+0x6a4>)
 801a522:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a526:	f103 0317 	add.w	r3, r3, #23
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a52e:	4b31      	ldr	r3, [pc, #196]	; (801a5f4 <SIM0_step+0x69c>)
 801a530:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a534:	3310      	adds	r3, #16
 801a536:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a53a:	f04f 0200 	mov.w	r2, #0
 801a53e:	f04f 0300 	mov.w	r3, #0
 801a542:	f7e6 fab3 	bl	8000aac <__aeabi_dcmpeq>
 801a546:	4603      	mov	r3, r0
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d101      	bne.n	801a550 <SIM0_step+0x5f8>
 801a54c:	2602      	movs	r6, #2
 801a54e:	e000      	b.n	801a552 <SIM0_step+0x5fa>
 801a550:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a552:	4b28      	ldr	r3, [pc, #160]	; (801a5f4 <SIM0_step+0x69c>)
 801a554:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a558:	3318      	adds	r3, #24
 801a55a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a55e:	2301      	movs	r3, #1
 801a560:	469a      	mov	sl, r3
 801a562:	f04f 0200 	mov.w	r2, #0
 801a566:	f04f 0300 	mov.w	r3, #0
 801a56a:	f7e6 fa9f 	bl	8000aac <__aeabi_dcmpeq>
 801a56e:	4603      	mov	r3, r0
 801a570:	2b00      	cmp	r3, #0
 801a572:	d001      	beq.n	801a578 <SIM0_step+0x620>
 801a574:	2300      	movs	r3, #0
 801a576:	469a      	mov	sl, r3
 801a578:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a57c:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a57e:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 801a580:	4b1c      	ldr	r3, [pc, #112]	; (801a5f4 <SIM0_step+0x69c>)
 801a582:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a586:	3319      	adds	r3, #25
 801a588:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a58a:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a58c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a590:	f102 020c 	add.w	r2, r2, #12
 801a594:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 801a596:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a59a:	f103 030c 	add.w	r3, r3, #12
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	4a15      	ldr	r2, [pc, #84]	; (801a5f8 <SIM0_step+0x6a0>)
 801a5a2:	4413      	add	r3, r2
 801a5a4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a5a8:	3308      	adds	r3, #8
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a5b0:	f102 0215 	add.w	r2, r2, #21
 801a5b4:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 801a5b6:	4a11      	ldr	r2, [pc, #68]	; (801a5fc <SIM0_step+0x6a4>)
 801a5b8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a5bc:	f103 0315 	add.w	r3, r3, #21
 801a5c0:	781b      	ldrb	r3, [r3, #0]
 801a5c2:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a5c4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a5c8:	f103 0316 	add.w	r3, r3, #22
 801a5cc:	781b      	ldrb	r3, [r3, #0]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d016      	beq.n	801a600 <SIM0_step+0x6a8>
 801a5d2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a5d6:	f103 030c 	add.w	r3, r3, #12
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	3308      	adds	r3, #8
 801a5de:	4a06      	ldr	r2, [pc, #24]	; (801a5f8 <SIM0_step+0x6a0>)
 801a5e0:	4413      	add	r3, r2
 801a5e2:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a5e6:	3308      	adds	r3, #8
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7e5 ff7c 	bl	80004e8 <__aeabi_ui2d>
 801a5f0:	e00a      	b.n	801a608 <SIM0_step+0x6b0>
 801a5f2:	bf00      	nop
 801a5f4:	2001c2a0 	.word	0x2001c2a0
 801a5f8:	20000360 	.word	0x20000360
 801a5fc:	2001db00 	.word	0x2001db00
 801a600:	f04f 0000 	mov.w	r0, #0
 801a604:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 801a608:	4bba      	ldr	r3, [pc, #744]	; (801a8f4 <SIM0_step+0x99c>)
 801a60a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a612:	f7e5 ffe3 	bl	80005dc <__aeabi_dmul>
 801a616:	4602      	mov	r2, r0
 801a618:	460b      	mov	r3, r1
 801a61a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a61e:	f101 0108 	add.w	r1, r1, #8
 801a622:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 801a626:	49b4      	ldr	r1, [pc, #720]	; (801a8f8 <SIM0_step+0x9a0>)
 801a628:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a62c:	f103 0308 	add.w	r3, r3, #8
 801a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a634:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 801a638:	4bae      	ldr	r3, [pc, #696]	; (801a8f4 <SIM0_step+0x99c>)
 801a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a642:	f101 0108 	add.w	r1, r1, #8
 801a646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a64a:	f7e5 ffc7 	bl	80005dc <__aeabi_dmul>
 801a64e:	4602      	mov	r2, r0
 801a650:	460b      	mov	r3, r1
 801a652:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a656:	f101 0108 	add.w	r1, r1, #8
 801a65a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 801a65e:	49a6      	ldr	r1, [pc, #664]	; (801a8f8 <SIM0_step+0x9a0>)
 801a660:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a664:	f103 0308 	add.w	r3, r3, #8
 801a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a66c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 801a670:	4ba0      	ldr	r3, [pc, #640]	; (801a8f4 <SIM0_step+0x99c>)
 801a672:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a676:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a67a:	f101 0108 	add.w	r1, r1, #8
 801a67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a682:	f7e5 ffab 	bl	80005dc <__aeabi_dmul>
 801a686:	4602      	mov	r2, r0
 801a688:	460b      	mov	r3, r1
 801a68a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a68e:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 801a692:	4b98      	ldr	r3, [pc, #608]	; (801a8f4 <SIM0_step+0x99c>)
 801a694:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a698:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a69c:	f101 0108 	add.w	r1, r1, #8
 801a6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6a4:	f7e5 ff9a 	bl	80005dc <__aeabi_dmul>
 801a6a8:	4602      	mov	r2, r0
 801a6aa:	460b      	mov	r3, r1
 801a6ac:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a6b0:	f101 0108 	add.w	r1, r1, #8
 801a6b4:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a6be:	f102 020c 	add.w	r2, r2, #12
 801a6c2:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a6ca:	f102 0204 	add.w	r2, r2, #4
 801a6ce:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 801a6d0:	f04f 0200 	mov.w	r2, #0
 801a6d4:	f04f 0300 	mov.w	r3, #0
 801a6d8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a6dc:	f101 0118 	add.w	r1, r1, #24
 801a6e0:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 801a6e4:	4b83      	ldr	r3, [pc, #524]	; (801a8f4 <SIM0_step+0x99c>)
 801a6e6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a6ea:	3308      	adds	r3, #8
 801a6ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a6f0:	f04f 0200 	mov.w	r2, #0
 801a6f4:	f04f 0300 	mov.w	r3, #0
 801a6f8:	f7e6 f9d8 	bl	8000aac <__aeabi_dcmpeq>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d10c      	bne.n	801a71c <SIM0_step+0x7c4>
    i = 2;
 801a702:	2302      	movs	r3, #2
 801a704:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a708:	f102 020c 	add.w	r2, r2, #12
 801a70c:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 801a70e:	2301      	movs	r3, #1
 801a710:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a714:	f102 0204 	add.w	r2, r2, #4
 801a718:	6013      	str	r3, [r2, #0]
 801a71a:	e01d      	b.n	801a758 <SIM0_step+0x800>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 801a71c:	4b75      	ldr	r3, [pc, #468]	; (801a8f4 <SIM0_step+0x99c>)
 801a71e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a722:	3310      	adds	r3, #16
 801a724:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a728:	f04f 0200 	mov.w	r2, #0
 801a72c:	f04f 0300 	mov.w	r3, #0
 801a730:	f7e6 f9bc 	bl	8000aac <__aeabi_dcmpeq>
 801a734:	4603      	mov	r3, r0
 801a736:	2b00      	cmp	r3, #0
 801a738:	d10e      	bne.n	801a758 <SIM0_step+0x800>
    i = 3;
 801a73a:	2303      	movs	r3, #3
 801a73c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a740:	f102 020c 	add.w	r2, r2, #12
 801a744:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 801a746:	f04f 0200 	mov.w	r2, #0
 801a74a:	4b6c      	ldr	r3, [pc, #432]	; (801a8fc <SIM0_step+0x9a4>)
 801a74c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a750:	f101 0118 	add.w	r1, r1, #24
 801a754:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 801a758:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a760:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a764:	f101 0108 	add.w	r1, r1, #8
 801a768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a76c:	f7e5 ff36 	bl	80005dc <__aeabi_dmul>
 801a770:	4602      	mov	r2, r0
 801a772:	460b      	mov	r3, r1
 801a774:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a778:	f101 0118 	add.w	r1, r1, #24
 801a77c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 801a780:	4b5c      	ldr	r3, [pc, #368]	; (801a8f4 <SIM0_step+0x99c>)
 801a782:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a786:	3318      	adds	r3, #24
 801a788:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a78c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a790:	f103 0318 	add.w	r3, r3, #24
 801a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a798:	f7e5 ff20 	bl	80005dc <__aeabi_dmul>
 801a79c:	4602      	mov	r2, r0
 801a79e:	460b      	mov	r3, r1
 801a7a0:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a7a4:	f101 0118 	add.w	r1, r1, #24
 801a7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7ac:	f7e5 ff16 	bl	80005dc <__aeabi_dmul>
 801a7b0:	4602      	mov	r2, r0
 801a7b2:	460b      	mov	r3, r1
 801a7b4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a7b8:	f101 0118 	add.w	r1, r1, #24
 801a7bc:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 801a7c0:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 801a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a7cc:	f101 0110 	add.w	r1, r1, #16
 801a7d0:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a7da:	f102 0208 	add.w	r2, r2, #8
 801a7de:	6013      	str	r3, [r2, #0]
 801a7e0:	e026      	b.n	801a830 <SIM0_step+0x8d8>
    rtb_y += rtb_Memory15[iU + 1];
 801a7e2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a7e6:	f103 0308 	add.w	r3, r3, #8
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	3301      	adds	r3, #1
 801a7ee:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 801a7f2:	00db      	lsls	r3, r3, #3
 801a7f4:	4413      	add	r3, r2
 801a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fa:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a7fe:	f101 0110 	add.w	r1, r1, #16
 801a802:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a806:	f7e5 fd33 	bl	8000270 <__adddf3>
 801a80a:	4602      	mov	r2, r0
 801a80c:	460b      	mov	r3, r1
 801a80e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a812:	f101 0110 	add.w	r1, r1, #16
 801a816:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801a81a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a81e:	f103 0308 	add.w	r3, r3, #8
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	3301      	adds	r3, #1
 801a826:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a82a:	f102 0208 	add.w	r2, r2, #8
 801a82e:	6013      	str	r3, [r2, #0]
 801a830:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a834:	f103 0308 	add.w	r3, r3, #8
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	2b7c      	cmp	r3, #124	; 0x7c
 801a83c:	ddd1      	ble.n	801a7e2 <SIM0_step+0x88a>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 801a83e:	4b2d      	ldr	r3, [pc, #180]	; (801a8f4 <SIM0_step+0x99c>)
 801a840:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a844:	3308      	adds	r3, #8
 801a846:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a84a:	f04f 0200 	mov.w	r2, #0
 801a84e:	f04f 0300 	mov.w	r3, #0
 801a852:	f7e6 f92b 	bl	8000aac <__aeabi_dcmpeq>
 801a856:	4603      	mov	r3, r0
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d151      	bne.n	801a900 <SIM0_step+0x9a8>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 801a85c:	4b25      	ldr	r3, [pc, #148]	; (801a8f4 <SIM0_step+0x99c>)
 801a85e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a862:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a866:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a86a:	f103 0310 	add.w	r3, r3, #16
 801a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a872:	f7e5 fcfb 	bl	800026c <__aeabi_dsub>
 801a876:	4602      	mov	r2, r0
 801a878:	460b      	mov	r3, r1
 801a87a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a87e:	f101 0110 	add.w	r1, r1, #16
 801a882:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 801a886:	f04f 0200 	mov.w	r2, #0
 801a88a:	f04f 0300 	mov.w	r3, #0
 801a88e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a892:	f101 0110 	add.w	r1, r1, #16
 801a896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a89a:	f7e6 f911 	bl	8000ac0 <__aeabi_dcmplt>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d009      	beq.n	801a8b8 <SIM0_step+0x960>
      rtb_Current = 0.0;
 801a8a4:	f04f 0200 	mov.w	r2, #0
 801a8a8:	f04f 0300 	mov.w	r3, #0
 801a8ac:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a8b0:	f101 0110 	add.w	r1, r1, #16
 801a8b4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 801a8b8:	4b0e      	ldr	r3, [pc, #56]	; (801a8f4 <SIM0_step+0x99c>)
 801a8ba:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a8be:	3310      	adds	r3, #16
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a8c8:	f101 0110 	add.w	r1, r1, #16
 801a8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8d0:	f7e6 f914 	bl	8000afc <__aeabi_dcmpgt>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d01c      	beq.n	801a914 <SIM0_step+0x9bc>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 801a8da:	4b06      	ldr	r3, [pc, #24]	; (801a8f4 <SIM0_step+0x99c>)
 801a8dc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a8e0:	3310      	adds	r3, #16
 801a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a8ea:	f101 0110 	add.w	r1, r1, #16
 801a8ee:	e9c1 2300 	strd	r2, r3, [r1]
 801a8f2:	e00f      	b.n	801a914 <SIM0_step+0x9bc>
 801a8f4:	2001c2a0 	.word	0x2001c2a0
 801a8f8:	2001db00 	.word	0x2001db00
 801a8fc:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 801a900:	f04f 0200 	mov.w	r2, #0
 801a904:	f04f 0300 	mov.w	r3, #0
 801a908:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a90c:	f101 0110 	add.w	r1, r1, #16
 801a910:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 801a914:	f04f 0200 	mov.w	r2, #0
 801a918:	f04f 0300 	mov.w	r3, #0
 801a91c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a920:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 801a924:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a928:	f103 030c 	add.w	r3, r3, #12
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	2b01      	cmp	r3, #1
 801a930:	d109      	bne.n	801a946 <SIM0_step+0x9ee>
    rtb_Exp = -1.0;
 801a932:	f04f 0200 	mov.w	r2, #0
 801a936:	4bc0      	ldr	r3, [pc, #768]	; (801ac38 <SIM0_step+0xce0>)
 801a938:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a93c:	f101 0108 	add.w	r1, r1, #8
 801a940:	e9c1 2300 	strd	r2, r3, [r1]
 801a944:	e1d3      	b.n	801acee <SIM0_step+0xd96>
  } else if (i == 2) {
 801a946:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a94a:	f103 030c 	add.w	r3, r3, #12
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	2b02      	cmp	r3, #2
 801a952:	f040 8099 	bne.w	801aa88 <SIM0_step+0xb30>
    if (rtb_Memory22 != 0.0) {
 801a956:	f04f 0200 	mov.w	r2, #0
 801a95a:	f04f 0300 	mov.w	r3, #0
 801a95e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a962:	f101 0108 	add.w	r1, r1, #8
 801a966:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a96a:	f7e6 f89f 	bl	8000aac <__aeabi_dcmpeq>
 801a96e:	4603      	mov	r3, r0
 801a970:	2b00      	cmp	r3, #0
 801a972:	d17f      	bne.n	801aa74 <SIM0_step+0xb1c>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 801a974:	f04f 0200 	mov.w	r2, #0
 801a978:	f04f 0300 	mov.w	r3, #0
 801a97c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a980:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a984:	f7e6 f892 	bl	8000aac <__aeabi_dcmpeq>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d00e      	beq.n	801a9ac <SIM0_step+0xa54>
 801a98e:	f04f 0200 	mov.w	r2, #0
 801a992:	f04f 0300 	mov.w	r3, #0
 801a996:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a99a:	f101 0108 	add.w	r1, r1, #8
 801a99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9a2:	f7e6 f883 	bl	8000aac <__aeabi_dcmpeq>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d141      	bne.n	801aa30 <SIM0_step+0xad8>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801a9ac:	4ba3      	ldr	r3, [pc, #652]	; (801ac3c <SIM0_step+0xce4>)
 801a9ae:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a9b2:	3318      	adds	r3, #24
 801a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a9bc:	f101 0110 	add.w	r1, r1, #16
 801a9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9c4:	f7e5 fc52 	bl	800026c <__aeabi_dsub>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	4610      	mov	r0, r2
 801a9ce:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801a9d0:	4b9a      	ldr	r3, [pc, #616]	; (801ac3c <SIM0_step+0xce4>)
 801a9d2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801a9d6:	3318      	adds	r3, #24
 801a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801a9dc:	f7e5 fc48 	bl	8000270 <__adddf3>
 801a9e0:	4602      	mov	r2, r0
 801a9e2:	460b      	mov	r3, r1
 801a9e4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a9e8:	f101 0108 	add.w	r1, r1, #8
 801a9ec:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 801a9f0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a9f4:	f103 0304 	add.w	r3, r3, #4
 801a9f8:	6818      	ldr	r0, [r3, #0]
 801a9fa:	f7e5 fd85 	bl	8000508 <__aeabi_i2d>
 801a9fe:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801aa02:	f103 0310 	add.w	r3, r3, #16
 801aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0a:	f7e5 fde7 	bl	80005dc <__aeabi_dmul>
 801aa0e:	4602      	mov	r2, r0
 801aa10:	460b      	mov	r3, r1
 801aa12:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801aa16:	f101 0118 	add.w	r1, r1, #24
 801aa1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa1e:	f7e5 fddd 	bl	80005dc <__aeabi_dmul>
 801aa22:	4602      	mov	r2, r0
 801aa24:	460b      	mov	r3, r1
 801aa26:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa2a:	e9c1 2300 	strd	r2, r3, [r1]
 801aa2e:	e15e      	b.n	801acee <SIM0_step+0xd96>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aa30:	4b82      	ldr	r3, [pc, #520]	; (801ac3c <SIM0_step+0xce4>)
 801aa32:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa36:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 801aa3a:	4b80      	ldr	r3, [pc, #512]	; (801ac3c <SIM0_step+0xce4>)
 801aa3c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa40:	3318      	adds	r3, #24
 801aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aa46:	f7e5 fc11 	bl	800026c <__aeabi_dsub>
 801aa4a:	4602      	mov	r2, r0
 801aa4c:	460b      	mov	r3, r1
 801aa4e:	4610      	mov	r0, r2
 801aa50:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801aa52:	4b7a      	ldr	r3, [pc, #488]	; (801ac3c <SIM0_step+0xce4>)
 801aa54:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa58:	3318      	adds	r3, #24
 801aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801aa5e:	f7e5 fc07 	bl	8000270 <__adddf3>
 801aa62:	4602      	mov	r2, r0
 801aa64:	460b      	mov	r3, r1
 801aa66:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa6a:	f101 0108 	add.w	r1, r1, #8
 801aa6e:	e9c1 2300 	strd	r2, r3, [r1]
 801aa72:	e13c      	b.n	801acee <SIM0_step+0xd96>
      }
    } else {
      rtb_Exp = -1.0;
 801aa74:	f04f 0200 	mov.w	r2, #0
 801aa78:	4b6f      	ldr	r3, [pc, #444]	; (801ac38 <SIM0_step+0xce0>)
 801aa7a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa7e:	f101 0108 	add.w	r1, r1, #8
 801aa82:	e9c1 2300 	strd	r2, r3, [r1]
 801aa86:	e132      	b.n	801acee <SIM0_step+0xd96>
    }
  } else if (rtb_Memory22 != 0.0) {
 801aa88:	f04f 0200 	mov.w	r2, #0
 801aa8c:	f04f 0300 	mov.w	r3, #0
 801aa90:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801aa94:	f101 0108 	add.w	r1, r1, #8
 801aa98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa9c:	f7e6 f806 	bl	8000aac <__aeabi_dcmpeq>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	f040 811a 	bne.w	801acdc <SIM0_step+0xd84>
    if (rtb_Product1_n != 0.0) {
 801aaa8:	f04f 0200 	mov.w	r2, #0
 801aaac:	f04f 0300 	mov.w	r3, #0
 801aab0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801aab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aab8:	f7e5 fff8 	bl	8000aac <__aeabi_dcmpeq>
 801aabc:	4603      	mov	r3, r0
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d152      	bne.n	801ab68 <SIM0_step+0xc10>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801aac2:	4b5e      	ldr	r3, [pc, #376]	; (801ac3c <SIM0_step+0xce4>)
 801aac4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aac8:	3318      	adds	r3, #24
 801aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aace:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aad2:	f101 0110 	add.w	r1, r1, #16
 801aad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aada:	f7e5 fbc7 	bl	800026c <__aeabi_dsub>
 801aade:	4602      	mov	r2, r0
 801aae0:	460b      	mov	r3, r1
 801aae2:	4610      	mov	r0, r2
 801aae4:	4619      	mov	r1, r3
 801aae6:	a352      	add	r3, pc, #328	; (adr r3, 801ac30 <SIM0_step+0xcd8>)
 801aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaec:	f7e5 fd76 	bl	80005dc <__aeabi_dmul>
 801aaf0:	4602      	mov	r2, r0
 801aaf2:	460b      	mov	r3, r1
 801aaf4:	4610      	mov	r0, r2
 801aaf6:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801aaf8:	4b50      	ldr	r3, [pc, #320]	; (801ac3c <SIM0_step+0xce4>)
 801aafa:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aafe:	3318      	adds	r3, #24
 801ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801ab04:	f7e5 fbb4 	bl	8000270 <__adddf3>
 801ab08:	4602      	mov	r2, r0
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab10:	f101 0108 	add.w	r1, r1, #8
 801ab14:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 801ab18:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ab1c:	f103 0308 	add.w	r3, r3, #8
 801ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab24:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ab28:	f101 0110 	add.w	r1, r1, #16
 801ab2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab30:	f7e5 fb9c 	bl	800026c <__aeabi_dsub>
 801ab34:	4602      	mov	r2, r0
 801ab36:	460b      	mov	r3, r1
 801ab38:	4610      	mov	r0, r2
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	f04f 0200 	mov.w	r2, #0
 801ab40:	4b3f      	ldr	r3, [pc, #252]	; (801ac40 <SIM0_step+0xce8>)
 801ab42:	f7e5 fe75 	bl	8000830 <__aeabi_ddiv>
 801ab46:	4602      	mov	r2, r0
 801ab48:	460b      	mov	r3, r1
 801ab4a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ab4e:	f101 0118 	add.w	r1, r1, #24
 801ab52:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab56:	f7e5 fb89 	bl	800026c <__aeabi_dsub>
 801ab5a:	4602      	mov	r2, r0
 801ab5c:	460b      	mov	r3, r1
 801ab5e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab62:	e9c1 2300 	strd	r2, r3, [r1]
 801ab66:	e0c2      	b.n	801acee <SIM0_step+0xd96>
    } else if (rtb_Exp != 0.0) {
 801ab68:	f04f 0200 	mov.w	r2, #0
 801ab6c:	f04f 0300 	mov.w	r3, #0
 801ab70:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab74:	f101 0108 	add.w	r1, r1, #8
 801ab78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab7c:	f7e5 ff96 	bl	8000aac <__aeabi_dcmpeq>
 801ab80:	4603      	mov	r3, r0
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d162      	bne.n	801ac4c <SIM0_step+0xcf4>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801ab86:	4b2d      	ldr	r3, [pc, #180]	; (801ac3c <SIM0_step+0xce4>)
 801ab88:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ab8c:	3318      	adds	r3, #24
 801ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab92:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ab96:	f101 0110 	add.w	r1, r1, #16
 801ab9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab9e:	f7e5 fb65 	bl	800026c <__aeabi_dsub>
 801aba2:	4602      	mov	r2, r0
 801aba4:	460b      	mov	r3, r1
 801aba6:	4610      	mov	r0, r2
 801aba8:	4619      	mov	r1, r3
 801abaa:	f04f 0200 	mov.w	r2, #0
 801abae:	4b25      	ldr	r3, [pc, #148]	; (801ac44 <SIM0_step+0xcec>)
 801abb0:	f7e5 fe3e 	bl	8000830 <__aeabi_ddiv>
 801abb4:	4602      	mov	r2, r0
 801abb6:	460b      	mov	r3, r1
 801abb8:	4610      	mov	r0, r2
 801abba:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801abbc:	4b1f      	ldr	r3, [pc, #124]	; (801ac3c <SIM0_step+0xce4>)
 801abbe:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801abc2:	3318      	adds	r3, #24
 801abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801abc8:	f7e5 fb52 	bl	8000270 <__adddf3>
 801abcc:	4602      	mov	r2, r0
 801abce:	460b      	mov	r3, r1
 801abd0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801abd4:	f101 0108 	add.w	r1, r1, #8
 801abd8:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 801abdc:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801abe0:	f103 0308 	add.w	r3, r3, #8
 801abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801abec:	f101 0110 	add.w	r1, r1, #16
 801abf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abf4:	f7e5 fb3a 	bl	800026c <__aeabi_dsub>
 801abf8:	4602      	mov	r2, r0
 801abfa:	460b      	mov	r3, r1
 801abfc:	4610      	mov	r0, r2
 801abfe:	4619      	mov	r1, r3
 801ac00:	f04f 0200 	mov.w	r2, #0
 801ac04:	4b10      	ldr	r3, [pc, #64]	; (801ac48 <SIM0_step+0xcf0>)
 801ac06:	f7e5 fe13 	bl	8000830 <__aeabi_ddiv>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ac12:	f101 0118 	add.w	r1, r1, #24
 801ac16:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac1a:	f7e5 fb27 	bl	800026c <__aeabi_dsub>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac26:	e9c1 2300 	strd	r2, r3, [r1]
 801ac2a:	e060      	b.n	801acee <SIM0_step+0xd96>
 801ac2c:	f3af 8000 	nop.w
 801ac30:	9999999a 	.word	0x9999999a
 801ac34:	3fe99999 	.word	0x3fe99999
 801ac38:	bff00000 	.word	0xbff00000
 801ac3c:	2001c2a0 	.word	0x2001c2a0
 801ac40:	3fe00000 	.word	0x3fe00000
 801ac44:	40490000 	.word	0x40490000
 801ac48:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801ac4c:	4bad      	ldr	r3, [pc, #692]	; (801af04 <SIM0_step+0xfac>)
 801ac4e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac52:	3318      	adds	r3, #24
 801ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac58:	f04f 0000 	mov.w	r0, #0
 801ac5c:	f04f 0100 	mov.w	r1, #0
 801ac60:	f7e5 fb04 	bl	800026c <__aeabi_dsub>
 801ac64:	4602      	mov	r2, r0
 801ac66:	460b      	mov	r3, r1
 801ac68:	4610      	mov	r0, r2
 801ac6a:	4619      	mov	r1, r3
 801ac6c:	f04f 0200 	mov.w	r2, #0
 801ac70:	4ba5      	ldr	r3, [pc, #660]	; (801af08 <SIM0_step+0xfb0>)
 801ac72:	f7e5 fddd 	bl	8000830 <__aeabi_ddiv>
 801ac76:	4602      	mov	r2, r0
 801ac78:	460b      	mov	r3, r1
 801ac7a:	4610      	mov	r0, r2
 801ac7c:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801ac7e:	4ba1      	ldr	r3, [pc, #644]	; (801af04 <SIM0_step+0xfac>)
 801ac80:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac84:	3318      	adds	r3, #24
 801ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801ac8a:	f7e5 faf1 	bl	8000270 <__adddf3>
 801ac8e:	4602      	mov	r2, r0
 801ac90:	460b      	mov	r3, r1
 801ac92:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac96:	f101 0108 	add.w	r1, r1, #8
 801ac9a:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 801ac9e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801aca2:	f103 0308 	add.w	r3, r3, #8
 801aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acaa:	f04f 0000 	mov.w	r0, #0
 801acae:	f04f 0100 	mov.w	r1, #0
 801acb2:	f7e5 fadb 	bl	800026c <__aeabi_dsub>
 801acb6:	4602      	mov	r2, r0
 801acb8:	460b      	mov	r3, r1
 801acba:	4690      	mov	r8, r2
 801acbc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801acc0:	f04f 0200 	mov.w	r2, #0
 801acc4:	4b91      	ldr	r3, [pc, #580]	; (801af0c <SIM0_step+0xfb4>)
 801acc6:	4640      	mov	r0, r8
 801acc8:	4649      	mov	r1, r9
 801acca:	f7e5 fdb1 	bl	8000830 <__aeabi_ddiv>
 801acce:	4602      	mov	r2, r0
 801acd0:	460b      	mov	r3, r1
 801acd2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801acd6:	e9c1 2300 	strd	r2, r3, [r1]
 801acda:	e008      	b.n	801acee <SIM0_step+0xd96>
    }
  } else {
    rtb_Exp = -1.0;
 801acdc:	f04f 0200 	mov.w	r2, #0
 801ace0:	4b8b      	ldr	r3, [pc, #556]	; (801af10 <SIM0_step+0xfb8>)
 801ace2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ace6:	f101 0108 	add.w	r1, r1, #8
 801acea:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 801acee:	4989      	ldr	r1, [pc, #548]	; (801af14 <SIM0_step+0xfbc>)
 801acf0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801acf4:	f103 0308 	add.w	r3, r3, #8
 801acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 801ad00:	4984      	ldr	r1, [pc, #528]	; (801af14 <SIM0_step+0xfbc>)
 801ad02:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 801ad0e:	4981      	ldr	r1, [pc, #516]	; (801af14 <SIM0_step+0xfbc>)
 801ad10:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ad14:	f103 0310 	add.w	r3, r3, #16
 801ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad1c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 801ad20:	497c      	ldr	r1, [pc, #496]	; (801af14 <SIM0_step+0xfbc>)
 801ad22:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ad26:	f103 0308 	add.w	r3, r3, #8
 801ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 801ad32:	4978      	ldr	r1, [pc, #480]	; (801af14 <SIM0_step+0xfbc>)
 801ad34:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 801ad40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ad44:	4974      	ldr	r1, [pc, #464]	; (801af18 <SIM0_step+0xfc0>)
 801ad46:	4875      	ldr	r0, [pc, #468]	; (801af1c <SIM0_step+0xfc4>)
 801ad48:	f013 fc74 	bl	802e634 <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 801ad4c:	4b74      	ldr	r3, [pc, #464]	; (801af20 <SIM0_step+0xfc8>)
 801ad4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ad52:	4970      	ldr	r1, [pc, #448]	; (801af14 <SIM0_step+0xfbc>)
 801ad54:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 801ad58:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 801ad5c:	4b69      	ldr	r3, [pc, #420]	; (801af04 <SIM0_step+0xfac>)
 801ad5e:	f603 0108 	addw	r1, r3, #2056	; 0x808
 801ad62:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad6a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 801ad6e:	4b65      	ldr	r3, [pc, #404]	; (801af04 <SIM0_step+0xfac>)
 801ad70:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 801ad74:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ad78:	f103 0318 	add.w	r3, r3, #24
 801ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad80:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 801ad84:	4b5f      	ldr	r3, [pc, #380]	; (801af04 <SIM0_step+0xfac>)
 801ad86:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801ad8a:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 801ad8e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ad92:	f103 0318 	add.w	r3, r3, #24
 801ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9a:	f7e5 fa69 	bl	8000270 <__adddf3>
 801ad9e:	4602      	mov	r2, r0
 801ada0:	460b      	mov	r3, r1
 801ada2:	4614      	mov	r4, r2
 801ada4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801ada8:	4b56      	ldr	r3, [pc, #344]	; (801af04 <SIM0_step+0xfac>)
 801adaa:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801adae:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 801adb2:	2300      	movs	r3, #0
 801adb4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801adb8:	f102 020c 	add.w	r2, r2, #12
 801adbc:	6013      	str	r3, [r2, #0]
 801adbe:	e109      	b.n	801afd4 <SIM0_step+0x107c>
    rtb_Memory22 = rtb_Memory21[i];
 801adc0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 801adc4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801adc8:	f103 030c 	add.w	r3, r3, #12
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	00db      	lsls	r3, r3, #3
 801add0:	4413      	add	r3, r2
 801add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801adda:	f101 0108 	add.w	r1, r1, #8
 801adde:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Rpz[i];
 801ade2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 801ade6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801adea:	f103 030c 	add.w	r3, r3, #12
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	00db      	lsls	r3, r3, #3
 801adf2:	4413      	add	r3, r2
 801adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801adfc:	f101 0118 	add.w	r1, r1, #24
 801ae00:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Memory19[i];
 801ae04:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801ae08:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae0c:	f103 030c 	add.w	r3, r3, #12
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	4413      	add	r3, r2
 801ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae1a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ae1e:	f101 0118 	add.w	r1, r1, #24
 801ae22:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 801ae26:	4a37      	ldr	r2, [pc, #220]	; (801af04 <SIM0_step+0xfac>)
 801ae28:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae2c:	f103 030c 	add.w	r3, r3, #12
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	3305      	adds	r3, #5
 801ae34:	00db      	lsls	r3, r3, #3
 801ae36:	18d1      	adds	r1, r2, r3
 801ae38:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae3c:	f103 0318 	add.w	r3, r3, #24
 801ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae44:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 801ae48:	f107 0318 	add.w	r3, r7, #24
 801ae4c:	3b10      	subs	r3, #16
 801ae4e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801ae52:	f102 020c 	add.w	r2, r2, #12
 801ae56:	6812      	ldr	r2, [r2, #0]
 801ae58:	00d2      	lsls	r2, r2, #3
 801ae5a:	4413      	add	r3, r2
 801ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae60:	4828      	ldr	r0, [pc, #160]	; (801af04 <SIM0_step+0xfac>)
 801ae62:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ae66:	f101 010c 	add.w	r1, r1, #12
 801ae6a:	6809      	ldr	r1, [r1, #0]
 801ae6c:	3183      	adds	r1, #131	; 0x83
 801ae6e:	00c9      	lsls	r1, r1, #3
 801ae70:	4401      	add	r1, r0
 801ae72:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 801ae76:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801ae7a:	f103 0308 	add.w	r3, r3, #8
 801ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae82:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ae86:	f101 0118 	add.w	r1, r1, #24
 801ae8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae8e:	f7e5 fe35 	bl	8000afc <__aeabi_dcmpgt>
 801ae92:	4603      	mov	r3, r0
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d012      	beq.n	801aebe <SIM0_step+0xf66>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 801ae98:	4a1a      	ldr	r2, [pc, #104]	; (801af04 <SIM0_step+0xfac>)
 801ae9a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ae9e:	f103 030c 	add.w	r3, r3, #12
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f203 1303 	addw	r3, r3, #259	; 0x103
 801aea8:	00db      	lsls	r3, r3, #3
 801aeaa:	18d1      	adds	r1, r2, r3
 801aeac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801aeb0:	f103 0308 	add.w	r3, r3, #8
 801aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb8:	e9c1 2300 	strd	r2, r3, [r1]
 801aebc:	e044      	b.n	801af48 <SIM0_step+0xff0>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 801aebe:	4b18      	ldr	r3, [pc, #96]	; (801af20 <SIM0_step+0xfc8>)
 801aec0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801aecc:	f101 0118 	add.w	r1, r1, #24
 801aed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aed4:	f7e5 fdf4 	bl	8000ac0 <__aeabi_dcmplt>
 801aed8:	4603      	mov	r3, r0
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d022      	beq.n	801af24 <SIM0_step+0xfcc>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 801aede:	4b10      	ldr	r3, [pc, #64]	; (801af20 <SIM0_step+0xfc8>)
 801aee0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee8:	4806      	ldr	r0, [pc, #24]	; (801af04 <SIM0_step+0xfac>)
 801aeea:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aeee:	f101 010c 	add.w	r1, r1, #12
 801aef2:	6809      	ldr	r1, [r1, #0]
 801aef4:	f201 1103 	addw	r1, r1, #259	; 0x103
 801aef8:	00c9      	lsls	r1, r1, #3
 801aefa:	4401      	add	r1, r0
 801aefc:	e9c1 2300 	strd	r2, r3, [r1]
 801af00:	e022      	b.n	801af48 <SIM0_step+0xff0>
 801af02:	bf00      	nop
 801af04:	2001c2a0 	.word	0x2001c2a0
 801af08:	40140000 	.word	0x40140000
 801af0c:	40240000 	.word	0x40240000
 801af10:	bff00000 	.word	0xbff00000
 801af14:	2001db00 	.word	0x2001db00
 801af18:	20000c38 	.word	0x20000c38
 801af1c:	2001e710 	.word	0x2001e710
 801af20:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 801af24:	4a94      	ldr	r2, [pc, #592]	; (801b178 <SIM0_step+0x1220>)
 801af26:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801af2a:	f103 030c 	add.w	r3, r3, #12
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f203 1303 	addw	r3, r3, #259	; 0x103
 801af34:	00db      	lsls	r3, r3, #3
 801af36:	18d1      	adds	r1, r2, r3
 801af38:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af3c:	f103 0318 	add.w	r3, r3, #24
 801af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af44:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 801af48:	4a8b      	ldr	r2, [pc, #556]	; (801b178 <SIM0_step+0x1220>)
 801af4a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801af4e:	f103 030c 	add.w	r3, r3, #12
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	f203 1381 	addw	r3, r3, #385	; 0x181
 801af58:	00db      	lsls	r3, r3, #3
 801af5a:	18d1      	adds	r1, r2, r3
 801af5c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af60:	f103 0308 	add.w	r3, r3, #8
 801af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af68:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 801af6c:	4a83      	ldr	r2, [pc, #524]	; (801b17c <SIM0_step+0x1224>)
 801af6e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801af72:	f103 030c 	add.w	r3, r3, #12
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	330d      	adds	r3, #13
 801af7a:	00db      	lsls	r3, r3, #3
 801af7c:	4413      	add	r3, r2
 801af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af82:	487d      	ldr	r0, [pc, #500]	; (801b178 <SIM0_step+0x1220>)
 801af84:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801af88:	f101 010c 	add.w	r1, r1, #12
 801af8c:	6809      	ldr	r1, [r1, #0]
 801af8e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801af92:	00c9      	lsls	r1, r1, #3
 801af94:	4401      	add	r1, r0
 801af96:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 801af9a:	4a77      	ldr	r2, [pc, #476]	; (801b178 <SIM0_step+0x1220>)
 801af9c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afa0:	f103 030c 	add.w	r3, r3, #12
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801afaa:	00db      	lsls	r3, r3, #3
 801afac:	18d1      	adds	r1, r2, r3
 801afae:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afb2:	f103 0318 	add.w	r3, r3, #24
 801afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afba:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801afbe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afc2:	f103 030c 	add.w	r3, r3, #12
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	3301      	adds	r3, #1
 801afca:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801afce:	f102 020c 	add.w	r2, r2, #12
 801afd2:	6013      	str	r3, [r2, #0]
 801afd4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afd8:	f103 030c 	add.w	r3, r3, #12
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	2b7d      	cmp	r3, #125	; 0x7d
 801afe0:	f77f aeee 	ble.w	801adc0 <SIM0_step+0xe68>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 801afe4:	4b65      	ldr	r3, [pc, #404]	; (801b17c <SIM0_step+0x1224>)
 801afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afea:	4963      	ldr	r1, [pc, #396]	; (801b178 <SIM0_step+0x1220>)
 801afec:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801aff0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 801aff4:	4b61      	ldr	r3, [pc, #388]	; (801b17c <SIM0_step+0x1224>)
 801aff6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801affa:	4b5f      	ldr	r3, [pc, #380]	; (801b178 <SIM0_step+0x1220>)
 801affc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b000:	3308      	adds	r3, #8
 801b002:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 801b006:	4b5c      	ldr	r3, [pc, #368]	; (801b178 <SIM0_step+0x1220>)
 801b008:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b00c:	3318      	adds	r3, #24
 801b00e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b012:	f102 0217 	add.w	r2, r2, #23
 801b016:	7812      	ldrb	r2, [r2, #0]
 801b018:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 801b01a:	4b58      	ldr	r3, [pc, #352]	; (801b17c <SIM0_step+0x1224>)
 801b01c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b020:	4b55      	ldr	r3, [pc, #340]	; (801b178 <SIM0_step+0x1220>)
 801b022:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b026:	3310      	adds	r3, #16
 801b028:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 801b02c:	4b53      	ldr	r3, [pc, #332]	; (801b17c <SIM0_step+0x1224>)
 801b02e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801b032:	4b51      	ldr	r3, [pc, #324]	; (801b178 <SIM0_step+0x1220>)
 801b034:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b038:	3318      	adds	r3, #24
 801b03a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 801b03e:	4b4e      	ldr	r3, [pc, #312]	; (801b178 <SIM0_step+0x1220>)
 801b040:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b044:	3319      	adds	r3, #25
 801b046:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b04a:	f102 0215 	add.w	r2, r2, #21
 801b04e:	7812      	ldrb	r2, [r2, #0]
 801b050:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 801b052:	4b4a      	ldr	r3, [pc, #296]	; (801b17c <SIM0_step+0x1224>)
 801b054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b058:	4947      	ldr	r1, [pc, #284]	; (801b178 <SIM0_step+0x1220>)
 801b05a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b05e:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 801b062:	4b45      	ldr	r3, [pc, #276]	; (801b178 <SIM0_step+0x1220>)
 801b064:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b068:	3308      	adds	r3, #8
 801b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06e:	4942      	ldr	r1, [pc, #264]	; (801b178 <SIM0_step+0x1220>)
 801b070:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 801b074:	4b40      	ldr	r3, [pc, #256]	; (801b178 <SIM0_step+0x1220>)
 801b076:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b07a:	493f      	ldr	r1, [pc, #252]	; (801b178 <SIM0_step+0x1220>)
 801b07c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 801b080:	4b3d      	ldr	r3, [pc, #244]	; (801b178 <SIM0_step+0x1220>)
 801b082:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b086:	3310      	adds	r3, #16
 801b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b08c:	493a      	ldr	r1, [pc, #232]	; (801b178 <SIM0_step+0x1220>)
 801b08e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 801b092:	4b39      	ldr	r3, [pc, #228]	; (801b178 <SIM0_step+0x1220>)
 801b094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b098:	4937      	ldr	r1, [pc, #220]	; (801b178 <SIM0_step+0x1220>)
 801b09a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 801b09e:	4b36      	ldr	r3, [pc, #216]	; (801b178 <SIM0_step+0x1220>)
 801b0a0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a8:	4933      	ldr	r1, [pc, #204]	; (801b178 <SIM0_step+0x1220>)
 801b0aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 801b0ae:	4b33      	ldr	r3, [pc, #204]	; (801b17c <SIM0_step+0x1224>)
 801b0b0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 801b0b4:	4b30      	ldr	r3, [pc, #192]	; (801b178 <SIM0_step+0x1220>)
 801b0b6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b0ba:	3308      	adds	r3, #8
 801b0bc:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 801b0c0:	4b2e      	ldr	r3, [pc, #184]	; (801b17c <SIM0_step+0x1224>)
 801b0c2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 801b0c6:	4b2c      	ldr	r3, [pc, #176]	; (801b178 <SIM0_step+0x1220>)
 801b0c8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b0cc:	3310      	adds	r3, #16
 801b0ce:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 801b0d2:	4b2a      	ldr	r3, [pc, #168]	; (801b17c <SIM0_step+0x1224>)
 801b0d4:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801b0d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b0dc:	4b26      	ldr	r3, [pc, #152]	; (801b178 <SIM0_step+0x1220>)
 801b0de:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b0e2:	3318      	adds	r3, #24
 801b0e4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 801b0e8:	4b24      	ldr	r3, [pc, #144]	; (801b17c <SIM0_step+0x1224>)
 801b0ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801b0ee:	4922      	ldr	r1, [pc, #136]	; (801b178 <SIM0_step+0x1220>)
 801b0f0:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b0f4:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 801b0f8:	4b20      	ldr	r3, [pc, #128]	; (801b17c <SIM0_step+0x1224>)
 801b0fa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 801b0fe:	4b1e      	ldr	r3, [pc, #120]	; (801b178 <SIM0_step+0x1220>)
 801b100:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b104:	3308      	adds	r3, #8
 801b106:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 801b10a:	4b1c      	ldr	r3, [pc, #112]	; (801b17c <SIM0_step+0x1224>)
 801b10c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b110:	4b19      	ldr	r3, [pc, #100]	; (801b178 <SIM0_step+0x1220>)
 801b112:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b116:	3310      	adds	r3, #16
 801b118:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 801b11c:	4b16      	ldr	r3, [pc, #88]	; (801b178 <SIM0_step+0x1220>)
 801b11e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b122:	3318      	adds	r3, #24
 801b124:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 801b128:	f102 0208 	add.w	r2, r2, #8
 801b12c:	e9d2 0100 	ldrd	r0, r1, [r2]
 801b130:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 801b134:	4b11      	ldr	r3, [pc, #68]	; (801b17c <SIM0_step+0x1224>)
 801b136:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801b13a:	490f      	ldr	r1, [pc, #60]	; (801b178 <SIM0_step+0x1220>)
 801b13c:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b140:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 801b144:	4b0d      	ldr	r3, [pc, #52]	; (801b17c <SIM0_step+0x1224>)
 801b146:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b14a:	4b0b      	ldr	r3, [pc, #44]	; (801b178 <SIM0_step+0x1220>)
 801b14c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b150:	3308      	adds	r3, #8
 801b152:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 801b156:	4b09      	ldr	r3, [pc, #36]	; (801b17c <SIM0_step+0x1224>)
 801b158:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801b15c:	4b06      	ldr	r3, [pc, #24]	; (801b178 <SIM0_step+0x1220>)
 801b15e:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b162:	3310      	adds	r3, #16
 801b164:	e9c3 0100 	strd	r0, r1, [r3]
}
 801b168:	bf00      	nop
 801b16a:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 801b16e:	371c      	adds	r7, #28
 801b170:	46bd      	mov	sp, r7
 801b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b176:	bf00      	nop
 801b178:	2001c2a0 	.word	0x2001c2a0
 801b17c:	2001e8f8 	.word	0x2001e8f8

0801b180 <SIM0_initialize>:

void SIM0_initialize(void)
{
 801b180:	b480      	push	{r7}
 801b182:	b083      	sub	sp, #12
 801b184:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 801b186:	4b10      	ldr	r3, [pc, #64]	; (801b1c8 <SIM0_initialize+0x48>)
 801b188:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 801b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b190:	490e      	ldr	r1, [pc, #56]	; (801b1cc <SIM0_initialize+0x4c>)
 801b192:	f601 0108 	addw	r1, r1, #2056	; 0x808
 801b196:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 801b19a:	4b0b      	ldr	r3, [pc, #44]	; (801b1c8 <SIM0_initialize+0x48>)
 801b19c:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a4:	4909      	ldr	r1, [pc, #36]	; (801b1cc <SIM0_initialize+0x4c>)
 801b1a6:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 801b1aa:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 801b1ae:	4b06      	ldr	r3, [pc, #24]	; (801b1c8 <SIM0_initialize+0x48>)
 801b1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b8:	4904      	ldr	r1, [pc, #16]	; (801b1cc <SIM0_initialize+0x4c>)
 801b1ba:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 801b1be:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	607b      	str	r3, [r7, #4]
 801b1c6:	e05b      	b.n	801b280 <SIM0_initialize+0x100>
 801b1c8:	20000360 	.word	0x20000360
 801b1cc:	2001c2a0 	.word	0x2001c2a0
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 801b1d0:	4ba4      	ldr	r3, [pc, #656]	; (801b464 <SIM0_initialize+0x2e4>)
 801b1d2:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 801b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1da:	48a3      	ldr	r0, [pc, #652]	; (801b468 <SIM0_initialize+0x2e8>)
 801b1dc:	6879      	ldr	r1, [r7, #4]
 801b1de:	3105      	adds	r1, #5
 801b1e0:	00c9      	lsls	r1, r1, #3
 801b1e2:	4401      	add	r1, r0
 801b1e4:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 801b1e8:	4a9e      	ldr	r2, [pc, #632]	; (801b464 <SIM0_initialize+0x2e4>)
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801b1f0:	00db      	lsls	r3, r3, #3
 801b1f2:	4413      	add	r3, r2
 801b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f8:	489b      	ldr	r0, [pc, #620]	; (801b468 <SIM0_initialize+0x2e8>)
 801b1fa:	6879      	ldr	r1, [r7, #4]
 801b1fc:	3183      	adds	r1, #131	; 0x83
 801b1fe:	00c9      	lsls	r1, r1, #3
 801b200:	4401      	add	r1, r0
 801b202:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 801b206:	4a97      	ldr	r2, [pc, #604]	; (801b464 <SIM0_initialize+0x2e4>)
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	339d      	adds	r3, #157	; 0x9d
 801b20c:	00db      	lsls	r3, r3, #3
 801b20e:	4413      	add	r3, r2
 801b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b214:	4894      	ldr	r0, [pc, #592]	; (801b468 <SIM0_initialize+0x2e8>)
 801b216:	6879      	ldr	r1, [r7, #4]
 801b218:	f201 1103 	addw	r1, r1, #259	; 0x103
 801b21c:	00c9      	lsls	r1, r1, #3
 801b21e:	4401      	add	r1, r0
 801b220:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 801b224:	4a8f      	ldr	r2, [pc, #572]	; (801b464 <SIM0_initialize+0x2e4>)
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	331f      	adds	r3, #31
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	4413      	add	r3, r2
 801b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b232:	488d      	ldr	r0, [pc, #564]	; (801b468 <SIM0_initialize+0x2e8>)
 801b234:	6879      	ldr	r1, [r7, #4]
 801b236:	f201 1181 	addw	r1, r1, #385	; 0x181
 801b23a:	00c9      	lsls	r1, r1, #3
 801b23c:	4401      	add	r1, r0
 801b23e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 801b242:	4b88      	ldr	r3, [pc, #544]	; (801b464 <SIM0_initialize+0x2e4>)
 801b244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b248:	3308      	adds	r3, #8
 801b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b24e:	4886      	ldr	r0, [pc, #536]	; (801b468 <SIM0_initialize+0x2e8>)
 801b250:	6879      	ldr	r1, [r7, #4]
 801b252:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801b256:	00c9      	lsls	r1, r1, #3
 801b258:	4401      	add	r1, r0
 801b25a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 801b25e:	4b81      	ldr	r3, [pc, #516]	; (801b464 <SIM0_initialize+0x2e4>)
 801b260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b264:	3310      	adds	r3, #16
 801b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b26a:	487f      	ldr	r0, [pc, #508]	; (801b468 <SIM0_initialize+0x2e8>)
 801b26c:	6879      	ldr	r1, [r7, #4]
 801b26e:	f201 217e 	addw	r1, r1, #638	; 0x27e
 801b272:	00c9      	lsls	r1, r1, #3
 801b274:	4401      	add	r1, r0
 801b276:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	3301      	adds	r3, #1
 801b27e:	607b      	str	r3, [r7, #4]
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	2b7d      	cmp	r3, #125	; 0x7d
 801b284:	dda4      	ble.n	801b1d0 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 801b286:	4b77      	ldr	r3, [pc, #476]	; (801b464 <SIM0_initialize+0x2e4>)
 801b288:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b28c:	3308      	adds	r3, #8
 801b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b292:	4975      	ldr	r1, [pc, #468]	; (801b468 <SIM0_initialize+0x2e8>)
 801b294:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801b298:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 801b29c:	4b71      	ldr	r3, [pc, #452]	; (801b464 <SIM0_initialize+0x2e4>)
 801b29e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b2a2:	3310      	adds	r3, #16
 801b2a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2a8:	4b6f      	ldr	r3, [pc, #444]	; (801b468 <SIM0_initialize+0x2e8>)
 801b2aa:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b2ae:	3308      	adds	r3, #8
 801b2b0:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 801b2b4:	4b6b      	ldr	r3, [pc, #428]	; (801b464 <SIM0_initialize+0x2e4>)
 801b2b6:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 801b2ba:	4b6b      	ldr	r3, [pc, #428]	; (801b468 <SIM0_initialize+0x2e8>)
 801b2bc:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b2c0:	3318      	adds	r3, #24
 801b2c2:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 801b2c4:	4b67      	ldr	r3, [pc, #412]	; (801b464 <SIM0_initialize+0x2e4>)
 801b2c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b2ca:	3318      	adds	r3, #24
 801b2cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2d0:	4b65      	ldr	r3, [pc, #404]	; (801b468 <SIM0_initialize+0x2e8>)
 801b2d2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b2d6:	3310      	adds	r3, #16
 801b2d8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 801b2dc:	4b61      	ldr	r3, [pc, #388]	; (801b464 <SIM0_initialize+0x2e4>)
 801b2de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b2e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2e6:	4b60      	ldr	r3, [pc, #384]	; (801b468 <SIM0_initialize+0x2e8>)
 801b2e8:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b2ec:	3318      	adds	r3, #24
 801b2ee:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 801b2f2:	4b5c      	ldr	r3, [pc, #368]	; (801b464 <SIM0_initialize+0x2e4>)
 801b2f4:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 801b2f8:	4b5b      	ldr	r3, [pc, #364]	; (801b468 <SIM0_initialize+0x2e8>)
 801b2fa:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b2fe:	3319      	adds	r3, #25
 801b300:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 801b302:	4b58      	ldr	r3, [pc, #352]	; (801b464 <SIM0_initialize+0x2e4>)
 801b304:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b308:	3308      	adds	r3, #8
 801b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b30e:	4956      	ldr	r1, [pc, #344]	; (801b468 <SIM0_initialize+0x2e8>)
 801b310:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b314:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 801b318:	4b52      	ldr	r3, [pc, #328]	; (801b464 <SIM0_initialize+0x2e4>)
 801b31a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b31e:	3310      	adds	r3, #16
 801b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b324:	4950      	ldr	r1, [pc, #320]	; (801b468 <SIM0_initialize+0x2e8>)
 801b326:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 801b32a:	4b4e      	ldr	r3, [pc, #312]	; (801b464 <SIM0_initialize+0x2e4>)
 801b32c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b330:	3318      	adds	r3, #24
 801b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b336:	494c      	ldr	r1, [pc, #304]	; (801b468 <SIM0_initialize+0x2e8>)
 801b338:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 801b33c:	4b49      	ldr	r3, [pc, #292]	; (801b464 <SIM0_initialize+0x2e4>)
 801b33e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b346:	4948      	ldr	r1, [pc, #288]	; (801b468 <SIM0_initialize+0x2e8>)
 801b348:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 801b34c:	4b45      	ldr	r3, [pc, #276]	; (801b464 <SIM0_initialize+0x2e4>)
 801b34e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b352:	3318      	adds	r3, #24
 801b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b358:	4943      	ldr	r1, [pc, #268]	; (801b468 <SIM0_initialize+0x2e8>)
 801b35a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 801b35e:	4b41      	ldr	r3, [pc, #260]	; (801b464 <SIM0_initialize+0x2e4>)
 801b360:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b368:	493f      	ldr	r1, [pc, #252]	; (801b468 <SIM0_initialize+0x2e8>)
 801b36a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 801b36e:	4b3d      	ldr	r3, [pc, #244]	; (801b464 <SIM0_initialize+0x2e4>)
 801b370:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b374:	3308      	adds	r3, #8
 801b376:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b37a:	4b3b      	ldr	r3, [pc, #236]	; (801b468 <SIM0_initialize+0x2e8>)
 801b37c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b380:	3308      	adds	r3, #8
 801b382:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 801b386:	4b37      	ldr	r3, [pc, #220]	; (801b464 <SIM0_initialize+0x2e4>)
 801b388:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b38c:	3310      	adds	r3, #16
 801b38e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b392:	4b35      	ldr	r3, [pc, #212]	; (801b468 <SIM0_initialize+0x2e8>)
 801b394:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b398:	3310      	adds	r3, #16
 801b39a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 801b39e:	4b31      	ldr	r3, [pc, #196]	; (801b464 <SIM0_initialize+0x2e4>)
 801b3a0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b3a4:	3318      	adds	r3, #24
 801b3a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3aa:	4b2f      	ldr	r3, [pc, #188]	; (801b468 <SIM0_initialize+0x2e8>)
 801b3ac:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b3b0:	3318      	adds	r3, #24
 801b3b2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 801b3b6:	4b2b      	ldr	r3, [pc, #172]	; (801b464 <SIM0_initialize+0x2e4>)
 801b3b8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c0:	4929      	ldr	r1, [pc, #164]	; (801b468 <SIM0_initialize+0x2e8>)
 801b3c2:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b3c6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 801b3ca:	4b26      	ldr	r3, [pc, #152]	; (801b464 <SIM0_initialize+0x2e4>)
 801b3cc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b3d0:	3308      	adds	r3, #8
 801b3d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3d6:	4b24      	ldr	r3, [pc, #144]	; (801b468 <SIM0_initialize+0x2e8>)
 801b3d8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b3dc:	3308      	adds	r3, #8
 801b3de:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 801b3e2:	4b20      	ldr	r3, [pc, #128]	; (801b464 <SIM0_initialize+0x2e4>)
 801b3e4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b3e8:	3310      	adds	r3, #16
 801b3ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3ee:	4b1e      	ldr	r3, [pc, #120]	; (801b468 <SIM0_initialize+0x2e8>)
 801b3f0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b3f4:	3310      	adds	r3, #16
 801b3f6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 801b3fa:	4b1a      	ldr	r3, [pc, #104]	; (801b464 <SIM0_initialize+0x2e4>)
 801b3fc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b400:	3318      	adds	r3, #24
 801b402:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b406:	4b18      	ldr	r3, [pc, #96]	; (801b468 <SIM0_initialize+0x2e8>)
 801b408:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b40c:	3318      	adds	r3, #24
 801b40e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 801b412:	4b14      	ldr	r3, [pc, #80]	; (801b464 <SIM0_initialize+0x2e4>)
 801b414:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b41c:	4912      	ldr	r1, [pc, #72]	; (801b468 <SIM0_initialize+0x2e8>)
 801b41e:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b422:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 801b426:	4b0f      	ldr	r3, [pc, #60]	; (801b464 <SIM0_initialize+0x2e4>)
 801b428:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b42c:	3308      	adds	r3, #8
 801b42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b432:	4b0d      	ldr	r3, [pc, #52]	; (801b468 <SIM0_initialize+0x2e8>)
 801b434:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b438:	3308      	adds	r3, #8
 801b43a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 801b43e:	4b09      	ldr	r3, [pc, #36]	; (801b464 <SIM0_initialize+0x2e4>)
 801b440:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b444:	3310      	adds	r3, #16
 801b446:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b44a:	4b07      	ldr	r3, [pc, #28]	; (801b468 <SIM0_initialize+0x2e8>)
 801b44c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b450:	3310      	adds	r3, #16
 801b452:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 801b456:	bf00      	nop
 801b458:	370c      	adds	r7, #12
 801b45a:	46bd      	mov	sp, r7
 801b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b460:	4770      	bx	lr
 801b462:	bf00      	nop
 801b464:	20000360 	.word	0x20000360
 801b468:	2001c2a0 	.word	0x2001c2a0

0801b46c <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 801b46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b470:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 801b474:	af00      	add	r7, sp, #0
 801b476:	f107 0414 	add.w	r4, r7, #20
 801b47a:	6020      	str	r0, [r4, #0]
 801b47c:	f107 0010 	add.w	r0, r7, #16
 801b480:	6001      	str	r1, [r0, #0]
 801b482:	f107 0108 	add.w	r1, r7, #8
 801b486:	ed81 0b00 	vstr	d0, [r1]
 801b48a:	1d39      	adds	r1, r7, #4
 801b48c:	600a      	str	r2, [r1, #0]
 801b48e:	463a      	mov	r2, r7
 801b490:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 801b492:	1d3b      	adds	r3, r7, #4
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b49a:	f107 0314 	add.w	r3, r7, #20
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a4:	f7e5 f89a 	bl	80005dc <__aeabi_dmul>
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	460b      	mov	r3, r1
 801b4ac:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b4b0:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 801b4b4:	f107 0314 	add.w	r3, r7, #20
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4be:	1d3b      	adds	r3, r7, #4
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	3308      	adds	r3, #8
 801b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c8:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b4cc:	3408      	adds	r4, #8
 801b4ce:	f7e5 f885 	bl	80005dc <__aeabi_dmul>
 801b4d2:	4602      	mov	r2, r0
 801b4d4:	460b      	mov	r3, r1
 801b4d6:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 801b4da:	f107 0314 	add.w	r3, r7, #20
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4e4:	1d3b      	adds	r3, r7, #4
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	3310      	adds	r3, #16
 801b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ee:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b4f2:	3410      	adds	r4, #16
 801b4f4:	f7e5 f872 	bl	80005dc <__aeabi_dmul>
 801b4f8:	4602      	mov	r2, r0
 801b4fa:	460b      	mov	r3, r1
 801b4fc:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 801b500:	2300      	movs	r3, #0
 801b502:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b506:	2300      	movs	r3, #0
 801b508:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b50c:	e079      	b.n	801b602 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 801b50e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b512:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b516:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b51a:	00db      	lsls	r3, r3, #3
 801b51c:	463a      	mov	r2, r7
 801b51e:	6812      	ldr	r2, [r2, #0]
 801b520:	4413      	add	r3, r2
 801b522:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b526:	f107 0314 	add.w	r3, r7, #20
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	3308      	adds	r3, #8
 801b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b532:	f7e5 f853 	bl	80005dc <__aeabi_dmul>
 801b536:	4602      	mov	r2, r0
 801b538:	460b      	mov	r3, r1
 801b53a:	4620      	mov	r0, r4
 801b53c:	4629      	mov	r1, r5
 801b53e:	f7e4 fe97 	bl	8000270 <__adddf3>
 801b542:	4602      	mov	r2, r0
 801b544:	460b      	mov	r3, r1
 801b546:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b54a:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 801b54e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b552:	3308      	adds	r3, #8
 801b554:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b558:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b55c:	3301      	adds	r3, #1
 801b55e:	00db      	lsls	r3, r3, #3
 801b560:	463a      	mov	r2, r7
 801b562:	6812      	ldr	r2, [r2, #0]
 801b564:	4413      	add	r3, r2
 801b566:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b56a:	f107 0314 	add.w	r3, r7, #20
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	3308      	adds	r3, #8
 801b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b576:	f7e5 f831 	bl	80005dc <__aeabi_dmul>
 801b57a:	4602      	mov	r2, r0
 801b57c:	460b      	mov	r3, r1
 801b57e:	4610      	mov	r0, r2
 801b580:	4619      	mov	r1, r3
 801b582:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b586:	f103 0608 	add.w	r6, r3, #8
 801b58a:	4602      	mov	r2, r0
 801b58c:	460b      	mov	r3, r1
 801b58e:	4620      	mov	r0, r4
 801b590:	4629      	mov	r1, r5
 801b592:	f7e4 fe6d 	bl	8000270 <__adddf3>
 801b596:	4602      	mov	r2, r0
 801b598:	460b      	mov	r3, r1
 801b59a:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 801b59e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b5a2:	3310      	adds	r3, #16
 801b5a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b5a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b5ac:	3302      	adds	r3, #2
 801b5ae:	00db      	lsls	r3, r3, #3
 801b5b0:	463a      	mov	r2, r7
 801b5b2:	6812      	ldr	r2, [r2, #0]
 801b5b4:	4413      	add	r3, r2
 801b5b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5ba:	f107 0314 	add.w	r3, r7, #20
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	3308      	adds	r3, #8
 801b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c6:	f7e5 f809 	bl	80005dc <__aeabi_dmul>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	4610      	mov	r0, r2
 801b5d0:	4619      	mov	r1, r3
 801b5d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b5d6:	f103 0610 	add.w	r6, r3, #16
 801b5da:	4602      	mov	r2, r0
 801b5dc:	460b      	mov	r3, r1
 801b5de:	4620      	mov	r0, r4
 801b5e0:	4629      	mov	r1, r5
 801b5e2:	f7e4 fe45 	bl	8000270 <__adddf3>
 801b5e6:	4602      	mov	r2, r0
 801b5e8:	460b      	mov	r3, r1
 801b5ea:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 801b5ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b5f2:	3303      	adds	r3, #3
 801b5f4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b5f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b602:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b606:	2b05      	cmp	r3, #5
 801b608:	dd81      	ble.n	801b50e <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 801b60a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b612:	f107 0108 	add.w	r1, r7, #8
 801b616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b61a:	f7e4 ffdf 	bl	80005dc <__aeabi_dmul>
 801b61e:	4602      	mov	r2, r0
 801b620:	460b      	mov	r3, r1
 801b622:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 801b626:	1d3b      	adds	r3, r7, #4
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b62e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b632:	f7e4 fe1b 	bl	800026c <__aeabi_dsub>
 801b636:	4602      	mov	r2, r0
 801b638:	460b      	mov	r3, r1
 801b63a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 801b63e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b642:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b646:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 801b64a:	1d3b      	adds	r3, r7, #4
 801b64c:	6819      	ldr	r1, [r3, #0]
 801b64e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801b652:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 801b656:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b65a:	3308      	adds	r3, #8
 801b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b660:	f107 0108 	add.w	r1, r7, #8
 801b664:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b668:	f7e4 ffb8 	bl	80005dc <__aeabi_dmul>
 801b66c:	4602      	mov	r2, r0
 801b66e:	460b      	mov	r3, r1
 801b670:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 801b674:	1d3b      	adds	r3, r7, #4
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	3308      	adds	r3, #8
 801b67a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b67e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b682:	f7e4 fdf3 	bl	800026c <__aeabi_dsub>
 801b686:	4602      	mov	r2, r0
 801b688:	460b      	mov	r3, r1
 801b68a:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 801b68e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b692:	f103 0108 	add.w	r1, r3, #8
 801b696:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b69a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 801b69e:	1d3b      	adds	r3, r7, #4
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	f103 0108 	add.w	r1, r3, #8
 801b6a6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801b6aa:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 801b6ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b6b2:	3310      	adds	r3, #16
 801b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b8:	f107 0108 	add.w	r1, r7, #8
 801b6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6c0:	f7e4 ff8c 	bl	80005dc <__aeabi_dmul>
 801b6c4:	4602      	mov	r2, r0
 801b6c6:	460b      	mov	r3, r1
 801b6c8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 801b6cc:	1d3b      	adds	r3, r7, #4
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	3310      	adds	r3, #16
 801b6d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b6d6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b6da:	f7e4 fdc7 	bl	800026c <__aeabi_dsub>
 801b6de:	4602      	mov	r2, r0
 801b6e0:	460b      	mov	r3, r1
 801b6e2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 801b6e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b6ea:	f103 0110 	add.w	r1, r3, #16
 801b6ee:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b6f2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 801b6f6:	1d3b      	adds	r3, r7, #4
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f103 0110 	add.w	r1, r3, #16
 801b6fe:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801b702:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 801b706:	2300      	movs	r3, #0
 801b708:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b70c:	2300      	movs	r3, #0
 801b70e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b712:	e054      	b.n	801b7be <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 801b714:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b718:	00db      	lsls	r3, r3, #3
 801b71a:	463a      	mov	r2, r7
 801b71c:	6812      	ldr	r2, [r2, #0]
 801b71e:	4413      	add	r3, r2
 801b720:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b724:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b72c:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b730:	00e4      	lsls	r4, r4, #3
 801b732:	463d      	mov	r5, r7
 801b734:	682d      	ldr	r5, [r5, #0]
 801b736:	442c      	add	r4, r5
 801b738:	f7e4 fd98 	bl	800026c <__aeabi_dsub>
 801b73c:	4602      	mov	r2, r0
 801b73e:	460b      	mov	r3, r1
 801b740:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 801b744:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b748:	3301      	adds	r3, #1
 801b74a:	00db      	lsls	r3, r3, #3
 801b74c:	463a      	mov	r2, r7
 801b74e:	6812      	ldr	r2, [r2, #0]
 801b750:	4413      	add	r3, r2
 801b752:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b756:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b75a:	3308      	adds	r3, #8
 801b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b760:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b764:	3401      	adds	r4, #1
 801b766:	00e4      	lsls	r4, r4, #3
 801b768:	463d      	mov	r5, r7
 801b76a:	682d      	ldr	r5, [r5, #0]
 801b76c:	442c      	add	r4, r5
 801b76e:	f7e4 fd7d 	bl	800026c <__aeabi_dsub>
 801b772:	4602      	mov	r2, r0
 801b774:	460b      	mov	r3, r1
 801b776:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 801b77a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b77e:	3302      	adds	r3, #2
 801b780:	00db      	lsls	r3, r3, #3
 801b782:	463a      	mov	r2, r7
 801b784:	6812      	ldr	r2, [r2, #0]
 801b786:	4413      	add	r3, r2
 801b788:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b78c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b790:	3302      	adds	r3, #2
 801b792:	00db      	lsls	r3, r3, #3
 801b794:	463a      	mov	r2, r7
 801b796:	6812      	ldr	r2, [r2, #0]
 801b798:	18d4      	adds	r4, r2, r3
 801b79a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b79e:	f7e4 fd65 	bl	800026c <__aeabi_dsub>
 801b7a2:	4602      	mov	r2, r0
 801b7a4:	460b      	mov	r3, r1
 801b7a6:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801b7aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b7ae:	3303      	adds	r3, #3
 801b7b0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b7b4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b7b8:	3301      	adds	r3, #1
 801b7ba:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b7be:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b7c2:	2b05      	cmp	r3, #5
 801b7c4:	dda6      	ble.n	801b714 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 801b7c6:	f107 0308 	add.w	r3, r7, #8
 801b7ca:	ed93 0b00 	vldr	d0, [r3]
 801b7ce:	f004 fbed 	bl	801ffac <rtIsNaN>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d006      	beq.n	801b7e6 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 801b7d8:	f107 0308 	add.w	r3, r7, #8
 801b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801b7e4:	e029      	b.n	801b83a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 801b7e6:	f107 0108 	add.w	r1, r7, #8
 801b7ea:	f04f 0200 	mov.w	r2, #0
 801b7ee:	f04f 0300 	mov.w	r3, #0
 801b7f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7f6:	f7e5 f963 	bl	8000ac0 <__aeabi_dcmplt>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d005      	beq.n	801b80c <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 801b800:	f04f 0200 	mov.w	r2, #0
 801b804:	4bce      	ldr	r3, [pc, #824]	; (801bb40 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801b806:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801b80a:	e016      	b.n	801b83a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 801b80c:	f107 0108 	add.w	r1, r7, #8
 801b810:	f04f 0200 	mov.w	r2, #0
 801b814:	f04f 0300 	mov.w	r3, #0
 801b818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b81c:	f7e5 f96e 	bl	8000afc <__aeabi_dcmpgt>
 801b820:	4603      	mov	r3, r0
 801b822:	2b00      	cmp	r3, #0
 801b824:	d003      	beq.n	801b82e <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 801b826:	f04f 0200 	mov.w	r2, #0
 801b82a:	4bc6      	ldr	r3, [pc, #792]	; (801bb44 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801b82c:	e003      	b.n	801b836 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 801b82e:	f04f 0200 	mov.w	r2, #0
 801b832:	f04f 0300 	mov.w	r3, #0
 801b836:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 801b83a:	f107 0310 	add.w	r3, r7, #16
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b844:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801b848:	f7e4 fec8 	bl	80005dc <__aeabi_dmul>
 801b84c:	4602      	mov	r2, r0
 801b84e:	460b      	mov	r3, r1
 801b850:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 801b854:	f107 0310 	add.w	r3, r7, #16
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	3308      	adds	r3, #8
 801b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b860:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801b864:	f7e4 feba 	bl	80005dc <__aeabi_dmul>
 801b868:	4602      	mov	r2, r0
 801b86a:	460b      	mov	r3, r1
 801b86c:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 801b870:	f107 0408 	add.w	r4, r7, #8
 801b874:	f107 0108 	add.w	r1, r7, #8
 801b878:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b880:	f7e4 feac 	bl	80005dc <__aeabi_dmul>
 801b884:	4602      	mov	r2, r0
 801b886:	460b      	mov	r3, r1
 801b888:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 801b88c:	f107 0308 	add.w	r3, r7, #8
 801b890:	ed93 0b00 	vldr	d0, [r3]
 801b894:	f013 f894 	bl	802e9c0 <sqrt>
 801b898:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 801b89c:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 801b8a0:	f013 f88e 	bl	802e9c0 <sqrt>
 801b8a4:	eeb0 7a40 	vmov.f32	s14, s0
 801b8a8:	eef0 7a60 	vmov.f32	s15, s1
 801b8ac:	f107 0318 	add.w	r3, r7, #24
 801b8b0:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b8c0:	e03c      	b.n	801b93c <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801b8ce:	e027      	b.n	801b920 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 801b8d0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801b8d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b8d8:	4413      	add	r3, r2
 801b8da:	00db      	lsls	r3, r3, #3
 801b8dc:	463a      	mov	r2, r7
 801b8de:	6812      	ldr	r2, [r2, #0]
 801b8e0:	4413      	add	r3, r2
 801b8e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b8e6:	f107 0318 	add.w	r3, r7, #24
 801b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ee:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801b8f2:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801b8f6:	442c      	add	r4, r5
 801b8f8:	f7e4 fe70 	bl	80005dc <__aeabi_dmul>
 801b8fc:	4602      	mov	r2, r0
 801b8fe:	460b      	mov	r3, r1
 801b900:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 801b904:	00e1      	lsls	r1, r4, #3
 801b906:	4401      	add	r1, r0
 801b908:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 801b90c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801b910:	3303      	adds	r3, #3
 801b912:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801b916:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b91a:	3301      	adds	r3, #1
 801b91c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801b920:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801b924:	2b05      	cmp	r3, #5
 801b926:	ddd3      	ble.n	801b8d0 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 801b928:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b92c:	3306      	adds	r3, #6
 801b92e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801b932:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b936:	3301      	adds	r3, #1
 801b938:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b93c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b940:	2b02      	cmp	r3, #2
 801b942:	ddbe      	ble.n	801b8c2 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 801b944:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801b948:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801b94c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b950:	4618      	mov	r0, r3
 801b952:	f002 ff43 	bl	801e7dc <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 801b956:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 801b95a:	f004 fb27 	bl	801ffac <rtIsNaN>
 801b95e:	4603      	mov	r3, r0
 801b960:	2b00      	cmp	r3, #0
 801b962:	d125      	bne.n	801b9b0 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 801b964:	f04f 0200 	mov.w	r2, #0
 801b968:	f04f 0300 	mov.w	r3, #0
 801b96c:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801b970:	f7e5 f8a6 	bl	8000ac0 <__aeabi_dcmplt>
 801b974:	4603      	mov	r3, r0
 801b976:	2b00      	cmp	r3, #0
 801b978:	d005      	beq.n	801b986 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 801b97a:	f04f 0200 	mov.w	r2, #0
 801b97e:	4b70      	ldr	r3, [pc, #448]	; (801bb40 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801b980:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 801b984:	e014      	b.n	801b9b0 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801b986:	f04f 0200 	mov.w	r2, #0
 801b98a:	f04f 0300 	mov.w	r3, #0
 801b98e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801b992:	f7e5 f8b3 	bl	8000afc <__aeabi_dcmpgt>
 801b996:	4603      	mov	r3, r0
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d003      	beq.n	801b9a4 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 801b99c:	f04f 0200 	mov.w	r2, #0
 801b9a0:	4b68      	ldr	r3, [pc, #416]	; (801bb44 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801b9a2:	e003      	b.n	801b9ac <UTMeanCovSqrt_C2vgLQ4W+0x540>
 801b9a4:	f04f 0200 	mov.w	r2, #0
 801b9a8:	f04f 0300 	mov.w	r3, #0
 801b9ac:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 801b9b0:	f04f 0200 	mov.w	r2, #0
 801b9b4:	4b63      	ldr	r3, [pc, #396]	; (801bb44 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801b9b6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801b9ba:	f7e5 f877 	bl	8000aac <__aeabi_dcmpeq>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f000 81bd 	beq.w	801bd40 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b9cc:	e011      	b.n	801b9f2 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 801b9ce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	00db      	lsls	r3, r3, #3
 801b9d6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801b9da:	18d1      	adds	r1, r2, r3
 801b9dc:	f04f 0200 	mov.w	r2, #0
 801b9e0:	f04f 0300 	mov.w	r3, #0
 801b9e4:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801b9e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9ec:	3301      	adds	r3, #1
 801b9ee:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801b9f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9f6:	2b01      	cmp	r3, #1
 801b9f8:	dde9      	ble.n	801b9ce <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 801b9fa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801b9fe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801ba02:	f04f 0200 	mov.w	r2, #0
 801ba06:	f04f 0300 	mov.w	r3, #0
 801ba0a:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 801ba0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801ba12:	f04f 0200 	mov.w	r2, #0
 801ba16:	f04f 0300 	mov.w	r3, #0
 801ba1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 801ba1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ba22:	f04f 0200 	mov.w	r2, #0
 801ba26:	f04f 0300 	mov.w	r3, #0
 801ba2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 801ba2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801ba32:	ed93 7b00 	vldr	d7, [r3]
 801ba36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ba3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ba3e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ba42:	4618      	mov	r0, r3
 801ba44:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 801ba48:	eeb0 0a47 	vmov.f32	s0, s14
 801ba4c:	eef0 0a67 	vmov.f32	s1, s15
 801ba50:	f004 f814 	bl	801fa7c <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 801ba54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ba58:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ba5c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801ba60:	f7e4 fdbc 	bl	80005dc <__aeabi_dmul>
 801ba64:	4602      	mov	r2, r0
 801ba66:	460b      	mov	r3, r1
 801ba68:	4614      	mov	r4, r2
 801ba6a:	461d      	mov	r5, r3
 801ba6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba70:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ba74:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801ba78:	3318      	adds	r3, #24
 801ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7e:	f7e4 fdad 	bl	80005dc <__aeabi_dmul>
 801ba82:	4602      	mov	r2, r0
 801ba84:	460b      	mov	r3, r1
 801ba86:	4620      	mov	r0, r4
 801ba88:	4629      	mov	r1, r5
 801ba8a:	f7e4 fbef 	bl	800026c <__aeabi_dsub>
 801ba8e:	4602      	mov	r2, r0
 801ba90:	460b      	mov	r3, r1
 801ba92:	f107 0118 	add.w	r1, r7, #24
 801ba96:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 801ba9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ba9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801baa2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801baa6:	3318      	adds	r3, #24
 801baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baac:	f7e4 fd96 	bl	80005dc <__aeabi_dmul>
 801bab0:	4602      	mov	r2, r0
 801bab2:	460b      	mov	r3, r1
 801bab4:	4690      	mov	r8, r2
 801bab6:	4699      	mov	r9, r3
 801bab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801babc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bac0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bac4:	f7e4 fd8a 	bl	80005dc <__aeabi_dmul>
 801bac8:	4602      	mov	r2, r0
 801baca:	460b      	mov	r3, r1
 801bacc:	4610      	mov	r0, r2
 801bace:	4619      	mov	r1, r3
 801bad0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bad4:	f103 0418 	add.w	r4, r3, #24
 801bad8:	4602      	mov	r2, r0
 801bada:	460b      	mov	r3, r1
 801badc:	4640      	mov	r0, r8
 801bade:	4649      	mov	r1, r9
 801bae0:	f7e4 fbc6 	bl	8000270 <__adddf3>
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 801baec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801baf0:	3320      	adds	r3, #32
 801baf2:	ed93 7b00 	vldr	d7, [r3]
 801baf6:	f107 0318 	add.w	r3, r7, #24
 801bafa:	ed93 6b00 	vldr	d6, [r3]
 801bafe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bb02:	f103 0220 	add.w	r2, r3, #32
 801bb06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb0a:	f103 0108 	add.w	r1, r3, #8
 801bb0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bb12:	3308      	adds	r3, #8
 801bb14:	4618      	mov	r0, r3
 801bb16:	eeb0 1a46 	vmov.f32	s2, s12
 801bb1a:	eef0 1a66 	vmov.f32	s3, s13
 801bb1e:	eeb0 0a47 	vmov.f32	s0, s14
 801bb22:	eef0 0a67 	vmov.f32	s1, s15
 801bb26:	f003 ffa9 	bl	801fa7c <rotate_LZ7ctbe0>
    temp = b_t;
 801bb2a:	f107 0118 	add.w	r1, r7, #24
 801bb2e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bb32:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bb36:	2300      	movs	r3, #0
 801bb38:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bb3c:	e06f      	b.n	801bc1e <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 801bb3e:	bf00      	nop
 801bb40:	bff00000 	.word	0xbff00000
 801bb44:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 801bb48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bb4c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bb50:	00db      	lsls	r3, r3, #3
 801bb52:	4413      	add	r3, r2
 801bb54:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb58:	f107 0318 	add.w	r3, r7, #24
 801bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb60:	f7e4 fd3c 	bl	80005dc <__aeabi_dmul>
 801bb64:	4602      	mov	r2, r0
 801bb66:	460b      	mov	r3, r1
 801bb68:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 801bb6c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bb70:	3306      	adds	r3, #6
 801bb72:	00db      	lsls	r3, r3, #3
 801bb74:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bb78:	4413      	add	r3, r2
 801bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb7e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 801bb82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bb86:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bb8a:	00db      	lsls	r3, r3, #3
 801bb8c:	4413      	add	r3, r2
 801bb8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb92:	f107 0318 	add.w	r3, r7, #24
 801bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb9a:	f7e4 fd1f 	bl	80005dc <__aeabi_dmul>
 801bb9e:	4602      	mov	r2, r0
 801bba0:	460b      	mov	r3, r1
 801bba2:	4614      	mov	r4, r2
 801bba4:	461d      	mov	r5, r3
 801bba6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bbaa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbae:	00db      	lsls	r3, r3, #3
 801bbb0:	4413      	add	r3, r2
 801bbb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bbb6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bbba:	f7e4 fd0f 	bl	80005dc <__aeabi_dmul>
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	460b      	mov	r3, r1
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	4629      	mov	r1, r5
 801bbc6:	f7e4 fb51 	bl	800026c <__aeabi_dsub>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	460b      	mov	r3, r1
 801bbce:	f107 0118 	add.w	r1, r7, #24
 801bbd2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 801bbd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bbda:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbde:	00db      	lsls	r3, r3, #3
 801bbe0:	4413      	add	r3, r2
 801bbe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bbe6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bbea:	f7e4 fcf7 	bl	80005dc <__aeabi_dmul>
 801bbee:	4602      	mov	r2, r0
 801bbf0:	460b      	mov	r3, r1
 801bbf2:	4610      	mov	r0, r2
 801bbf4:	4619      	mov	r1, r3
 801bbf6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbfa:	3306      	adds	r3, #6
 801bbfc:	00db      	lsls	r3, r3, #3
 801bbfe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bc02:	18d4      	adds	r4, r2, r3
 801bc04:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801bc08:	f7e4 fb32 	bl	8000270 <__adddf3>
 801bc0c:	4602      	mov	r2, r0
 801bc0e:	460b      	mov	r3, r1
 801bc10:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bc14:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc18:	3301      	adds	r3, #1
 801bc1a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bc1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	dd90      	ble.n	801bb48 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 801bc26:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc2a:	3340      	adds	r3, #64	; 0x40
 801bc2c:	ed93 7b00 	vldr	d7, [r3]
 801bc30:	f107 0318 	add.w	r3, r7, #24
 801bc34:	ed93 6b00 	vldr	d6, [r3]
 801bc38:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc3c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801bc40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc44:	f103 0110 	add.w	r1, r3, #16
 801bc48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc4c:	3310      	adds	r3, #16
 801bc4e:	4618      	mov	r0, r3
 801bc50:	eeb0 1a46 	vmov.f32	s2, s12
 801bc54:	eef0 1a66 	vmov.f32	s3, s13
 801bc58:	eeb0 0a47 	vmov.f32	s0, s14
 801bc5c:	eef0 0a67 	vmov.f32	s1, s15
 801bc60:	f003 ff0c 	bl	801fa7c <rotate_LZ7ctbe0>
    kk = 0;
 801bc64:	2300      	movs	r3, #0
 801bc66:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bc70:	e03d      	b.n	801bcee <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 801bc72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc76:	00db      	lsls	r3, r3, #3
 801bc78:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bc7c:	4413      	add	r3, r2
 801bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc82:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bc86:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801bc8a:	00c9      	lsls	r1, r1, #3
 801bc8c:	4401      	add	r1, r0
 801bc8e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801bc92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc96:	3303      	adds	r3, #3
 801bc98:	00db      	lsls	r3, r3, #3
 801bc9a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bc9e:	4413      	add	r3, r2
 801bca0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bca4:	1c51      	adds	r1, r2, #1
 801bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcaa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bcae:	00c9      	lsls	r1, r1, #3
 801bcb0:	4401      	add	r1, r0
 801bcb2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801bcb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bcba:	3306      	adds	r3, #6
 801bcbc:	00db      	lsls	r3, r3, #3
 801bcbe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bcc2:	4413      	add	r3, r2
 801bcc4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bcc8:	1c91      	adds	r1, r2, #2
 801bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bcd2:	00c9      	lsls	r1, r1, #3
 801bcd4:	4401      	add	r1, r0
 801bcd6:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801bcda:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bcde:	3303      	adds	r3, #3
 801bce0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801bce4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bce8:	3301      	adds	r3, #1
 801bcea:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bcee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bcf2:	2b02      	cmp	r3, #2
 801bcf4:	ddbd      	ble.n	801bc72 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bcfc:	e01a      	b.n	801bd34 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 801bcfe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801bd02:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd06:	00db      	lsls	r3, r3, #3
 801bd08:	4413      	add	r3, r2
 801bd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bd0e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd12:	00db      	lsls	r3, r3, #3
 801bd14:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd18:	18d4      	adds	r4, r2, r3
 801bd1a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801bd1e:	f7e4 fc5d 	bl	80005dc <__aeabi_dmul>
 801bd22:	4602      	mov	r2, r0
 801bd24:	460b      	mov	r3, r1
 801bd26:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801bd2a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd2e:	3301      	adds	r3, #1
 801bd30:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bd34:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bd38:	2b08      	cmp	r3, #8
 801bd3a:	dde0      	ble.n	801bcfe <UTMeanCovSqrt_C2vgLQ4W+0x892>
 801bd3c:	f000 bf6e 	b.w	801cc1c <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801bd40:	2300      	movs	r3, #0
 801bd42:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bd46:	2300      	movs	r3, #0
 801bd48:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bd4c:	e011      	b.n	801bd72 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 801bd4e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd52:	3301      	adds	r3, #1
 801bd54:	00db      	lsls	r3, r3, #3
 801bd56:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd5a:	18d1      	adds	r1, r2, r3
 801bd5c:	f04f 0200 	mov.w	r2, #0
 801bd60:	f04f 0300 	mov.w	r3, #0
 801bd64:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bd68:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bd72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd76:	2b01      	cmp	r3, #1
 801bd78:	dde9      	ble.n	801bd4e <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 801bd7a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bd7e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801bd82:	f04f 0200 	mov.w	r2, #0
 801bd86:	f04f 0300 	mov.w	r3, #0
 801bd8a:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 801bd8e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bd92:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bd96:	2301      	movs	r3, #1
 801bd98:	461c      	mov	r4, r3
 801bd9a:	f04f 0200 	mov.w	r2, #0
 801bd9e:	f04f 0300 	mov.w	r3, #0
 801bda2:	f7e4 fe83 	bl	8000aac <__aeabi_dcmpeq>
 801bda6:	4603      	mov	r3, r0
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d101      	bne.n	801bdb0 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 801bdac:	2300      	movs	r3, #0
 801bdae:	461c      	mov	r4, r3
 801bdb0:	b2e3      	uxtb	r3, r4
 801bdb2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 801bdb6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d114      	bne.n	801bde8 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 801bdbe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bdc2:	3320      	adds	r3, #32
 801bdc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bdc8:	2301      	movs	r3, #1
 801bdca:	461c      	mov	r4, r3
 801bdcc:	f04f 0200 	mov.w	r2, #0
 801bdd0:	f04f 0300 	mov.w	r3, #0
 801bdd4:	f7e4 fe6a 	bl	8000aac <__aeabi_dcmpeq>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d101      	bne.n	801bde2 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 801bdde:	2300      	movs	r3, #0
 801bde0:	461c      	mov	r4, r3
 801bde2:	b2e3      	uxtb	r3, r4
 801bde4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 801bde8:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d114      	bne.n	801be1a <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 801bdf0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bdf4:	3340      	adds	r3, #64	; 0x40
 801bdf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bdfa:	2301      	movs	r3, #1
 801bdfc:	461c      	mov	r4, r3
 801bdfe:	f04f 0200 	mov.w	r2, #0
 801be02:	f04f 0300 	mov.w	r3, #0
 801be06:	f7e4 fe51 	bl	8000aac <__aeabi_dcmpeq>
 801be0a:	4603      	mov	r3, r0
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d101      	bne.n	801be14 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 801be10:	2300      	movs	r3, #0
 801be12:	461c      	mov	r4, r3
 801be14:	b2e3      	uxtb	r3, r4
 801be16:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 801be1a:	2300      	movs	r3, #0
 801be1c:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 801be20:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801be24:	2b00      	cmp	r3, #0
 801be26:	d003      	beq.n	801be30 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 801be28:	2301      	movs	r3, #1
 801be2a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801be2e:	e394      	b.n	801c55a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 801be30:	f107 0120 	add.w	r1, r7, #32
 801be34:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801be38:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 801be3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be44:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801be48:	f7e4 fcf2 	bl	8000830 <__aeabi_ddiv>
 801be4c:	4602      	mov	r2, r0
 801be4e:	460b      	mov	r3, r1
 801be50:	f107 0120 	add.w	r1, r7, #32
 801be54:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 801be58:	f107 0320 	add.w	r3, r7, #32
 801be5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be60:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be64:	3318      	adds	r3, #24
 801be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be6a:	f7e4 fbb7 	bl	80005dc <__aeabi_dmul>
 801be6e:	4602      	mov	r2, r0
 801be70:	460b      	mov	r3, r1
 801be72:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801be76:	f7e4 f9f9 	bl	800026c <__aeabi_dsub>
 801be7a:	4602      	mov	r2, r0
 801be7c:	460b      	mov	r3, r1
 801be7e:	4610      	mov	r0, r2
 801be80:	4619      	mov	r1, r3
 801be82:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be86:	3320      	adds	r3, #32
 801be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be8c:	f7e4 fcd0 	bl	8000830 <__aeabi_ddiv>
 801be90:	4602      	mov	r2, r0
 801be92:	460b      	mov	r3, r1
 801be94:	f107 0120 	add.w	r1, r7, #32
 801be98:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 801be9c:	f107 0118 	add.w	r1, r7, #24
 801bea0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bea4:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801bea8:	2300      	movs	r3, #0
 801beaa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801beae:	e027      	b.n	801bf00 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 801beb0:	f107 0318 	add.w	r3, r7, #24
 801beb4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801beb8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bebc:	3306      	adds	r3, #6
 801bebe:	00db      	lsls	r3, r3, #3
 801bec0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bec4:	4413      	add	r3, r2
 801bec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801beca:	f107 0220 	add.w	r2, r7, #32
 801bece:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bed2:	00db      	lsls	r3, r3, #3
 801bed4:	4413      	add	r3, r2
 801bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beda:	f7e4 fb7f 	bl	80005dc <__aeabi_dmul>
 801bede:	4602      	mov	r2, r0
 801bee0:	460b      	mov	r3, r1
 801bee2:	4620      	mov	r0, r4
 801bee4:	4629      	mov	r1, r5
 801bee6:	f7e4 f9c1 	bl	800026c <__aeabi_dsub>
 801beea:	4602      	mov	r2, r0
 801beec:	460b      	mov	r3, r1
 801beee:	f107 0118 	add.w	r1, r7, #24
 801bef2:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801bef6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801befa:	3301      	adds	r3, #1
 801befc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bf00:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf04:	2b01      	cmp	r3, #1
 801bf06:	ddd3      	ble.n	801beb0 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 801bf08:	f107 0318 	add.w	r3, r7, #24
 801bf0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf10:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bf14:	3340      	adds	r3, #64	; 0x40
 801bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf1a:	f7e4 fc89 	bl	8000830 <__aeabi_ddiv>
 801bf1e:	4602      	mov	r2, r0
 801bf20:	460b      	mov	r3, r1
 801bf22:	f107 0120 	add.w	r1, r7, #32
 801bf26:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 801bf2a:	f04f 0200 	mov.w	r2, #0
 801bf2e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bf32:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 801bf36:	f107 0320 	add.w	r3, r7, #32
 801bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf3e:	4611      	mov	r1, r2
 801bf40:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801bf44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf48:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 801bf4c:	f04f 0200 	mov.w	r2, #0
 801bf50:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bf54:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bf58:	f7e4 fdd0 	bl	8000afc <__aeabi_dcmpgt>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d00b      	beq.n	801bf7a <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 801bf62:	f107 0118 	add.w	r1, r7, #24
 801bf66:	f04f 0200 	mov.w	r2, #0
 801bf6a:	4b85      	ldr	r3, [pc, #532]	; (801c180 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801bf6c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801bf70:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bf74:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801bf78:	e017      	b.n	801bfaa <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 801bf7a:	f04f 0200 	mov.w	r2, #0
 801bf7e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801bf82:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bf86:	f7e4 fc53 	bl	8000830 <__aeabi_ddiv>
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 801bf92:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bf96:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801bf9a:	f7e4 fb1f 	bl	80005dc <__aeabi_dmul>
 801bf9e:	4602      	mov	r2, r0
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	f107 0118 	add.w	r1, r7, #24
 801bfa6:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 801bfaa:	f107 0320 	add.w	r3, r7, #32
 801bfae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bfb2:	4611      	mov	r1, r2
 801bfb4:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801bfb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bfbc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801bfc0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801bfc4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801bfc8:	f7e4 fd98 	bl	8000afc <__aeabi_dcmpgt>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d02d      	beq.n	801c02e <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 801bfd2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bfd6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801bfda:	f7e4 fc29 	bl	8000830 <__aeabi_ddiv>
 801bfde:	4602      	mov	r2, r0
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801bfe6:	f107 0318 	add.w	r3, r7, #24
 801bfea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bfee:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bff2:	f7e4 faf3 	bl	80005dc <__aeabi_dmul>
 801bff6:	4602      	mov	r2, r0
 801bff8:	460b      	mov	r3, r1
 801bffa:	4610      	mov	r0, r2
 801bffc:	4619      	mov	r1, r3
 801bffe:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c002:	f7e4 faeb 	bl	80005dc <__aeabi_dmul>
 801c006:	4602      	mov	r2, r0
 801c008:	460b      	mov	r3, r1
 801c00a:	4610      	mov	r0, r2
 801c00c:	4619      	mov	r1, r3
 801c00e:	f04f 0200 	mov.w	r2, #0
 801c012:	4b5b      	ldr	r3, [pc, #364]	; (801c180 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c014:	f7e4 f92c 	bl	8000270 <__adddf3>
 801c018:	4602      	mov	r2, r0
 801c01a:	460b      	mov	r3, r1
 801c01c:	f107 0118 	add.w	r1, r7, #24
 801c020:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c024:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c028:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c02c:	e01f      	b.n	801c06e <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 801c02e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c032:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c036:	f7e4 fbfb 	bl	8000830 <__aeabi_ddiv>
 801c03a:	4602      	mov	r2, r0
 801c03c:	460b      	mov	r3, r1
 801c03e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c042:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c046:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c04a:	f7e4 fac7 	bl	80005dc <__aeabi_dmul>
 801c04e:	4602      	mov	r2, r0
 801c050:	460b      	mov	r3, r1
 801c052:	4610      	mov	r0, r2
 801c054:	4619      	mov	r1, r3
 801c056:	f107 0318 	add.w	r3, r7, #24
 801c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c05e:	f7e4 f907 	bl	8000270 <__adddf3>
 801c062:	4602      	mov	r2, r0
 801c064:	460b      	mov	r3, r1
 801c066:	f107 0118 	add.w	r1, r7, #24
 801c06a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 801c06e:	f107 0320 	add.w	r3, r7, #32
 801c072:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c076:	4611      	mov	r1, r2
 801c078:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c07c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c080:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801c084:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c088:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c08c:	f7e4 fd36 	bl	8000afc <__aeabi_dcmpgt>
 801c090:	4603      	mov	r3, r0
 801c092:	2b00      	cmp	r3, #0
 801c094:	d02d      	beq.n	801c0f2 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 801c096:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c09a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c09e:	f7e4 fbc7 	bl	8000830 <__aeabi_ddiv>
 801c0a2:	4602      	mov	r2, r0
 801c0a4:	460b      	mov	r3, r1
 801c0a6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801c0aa:	f107 0318 	add.w	r3, r7, #24
 801c0ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c0b2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c0b6:	f7e4 fa91 	bl	80005dc <__aeabi_dmul>
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	460b      	mov	r3, r1
 801c0be:	4610      	mov	r0, r2
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c0c6:	f7e4 fa89 	bl	80005dc <__aeabi_dmul>
 801c0ca:	4602      	mov	r2, r0
 801c0cc:	460b      	mov	r3, r1
 801c0ce:	4610      	mov	r0, r2
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	f04f 0200 	mov.w	r2, #0
 801c0d6:	4b2a      	ldr	r3, [pc, #168]	; (801c180 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c0d8:	f7e4 f8ca 	bl	8000270 <__adddf3>
 801c0dc:	4602      	mov	r2, r0
 801c0de:	460b      	mov	r3, r1
 801c0e0:	f107 0118 	add.w	r1, r7, #24
 801c0e4:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c0e8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c0ec:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c0f0:	e01f      	b.n	801c132 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 801c0f2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c0f6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c0fa:	f7e4 fb99 	bl	8000830 <__aeabi_ddiv>
 801c0fe:	4602      	mov	r2, r0
 801c100:	460b      	mov	r3, r1
 801c102:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c106:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c10a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c10e:	f7e4 fa65 	bl	80005dc <__aeabi_dmul>
 801c112:	4602      	mov	r2, r0
 801c114:	460b      	mov	r3, r1
 801c116:	4610      	mov	r0, r2
 801c118:	4619      	mov	r1, r3
 801c11a:	f107 0318 	add.w	r3, r7, #24
 801c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c122:	f7e4 f8a5 	bl	8000270 <__adddf3>
 801c126:	4602      	mov	r2, r0
 801c128:	460b      	mov	r3, r1
 801c12a:	f107 0118 	add.w	r1, r7, #24
 801c12e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 801c132:	f107 0318 	add.w	r3, r7, #24
 801c136:	ed93 7b00 	vldr	d7, [r3]
 801c13a:	eeb0 0a47 	vmov.f32	s0, s14
 801c13e:	eef0 0a67 	vmov.f32	s1, s15
 801c142:	f012 fc3d 	bl	802e9c0 <sqrt>
 801c146:	ec51 0b10 	vmov	r0, r1, d0
 801c14a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c14e:	f7e4 fa45 	bl	80005dc <__aeabi_dmul>
 801c152:	4602      	mov	r2, r0
 801c154:	460b      	mov	r3, r1
 801c156:	f107 0118 	add.w	r1, r7, #24
 801c15a:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 801c15e:	f107 0318 	add.w	r3, r7, #24
 801c162:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c166:	f04f 0200 	mov.w	r2, #0
 801c16a:	4b05      	ldr	r3, [pc, #20]	; (801c180 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c16c:	f7e4 fcbc 	bl	8000ae8 <__aeabi_dcmpge>
 801c170:	4603      	mov	r3, r0
 801c172:	2b00      	cmp	r3, #0
 801c174:	d006      	beq.n	801c184 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 801c176:	2301      	movs	r3, #1
 801c178:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801c17c:	e1ed      	b.n	801c55a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 801c17e:	bf00      	nop
 801c180:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 801c184:	f107 0318 	add.w	r3, r7, #24
 801c188:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c18c:	f107 0318 	add.w	r3, r7, #24
 801c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c194:	f7e4 fa22 	bl	80005dc <__aeabi_dmul>
 801c198:	4602      	mov	r2, r0
 801c19a:	460b      	mov	r3, r1
 801c19c:	f04f 0000 	mov.w	r0, #0
 801c1a0:	49b4      	ldr	r1, [pc, #720]	; (801c474 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 801c1a2:	f7e4 f863 	bl	800026c <__aeabi_dsub>
 801c1a6:	4602      	mov	r2, r0
 801c1a8:	460b      	mov	r3, r1
 801c1aa:	ec43 2b17 	vmov	d7, r2, r3
 801c1ae:	eeb0 0a47 	vmov.f32	s0, s14
 801c1b2:	eef0 0a67 	vmov.f32	s1, s15
 801c1b6:	f012 fc03 	bl	802e9c0 <sqrt>
 801c1ba:	eeb0 6a40 	vmov.f32	s12, s0
 801c1be:	eef0 6a60 	vmov.f32	s13, s1
 801c1c2:	f107 0320 	add.w	r3, r7, #32
 801c1c6:	ed93 7b04 	vldr	d7, [r3, #16]
 801c1ca:	f107 0218 	add.w	r2, r7, #24
 801c1ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c1d2:	f103 0110 	add.w	r1, r3, #16
 801c1d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c1da:	3310      	adds	r3, #16
 801c1dc:	4618      	mov	r0, r3
 801c1de:	eeb0 1a47 	vmov.f32	s2, s14
 801c1e2:	eef0 1a67 	vmov.f32	s3, s15
 801c1e6:	eeb0 0a46 	vmov.f32	s0, s12
 801c1ea:	eef0 0a66 	vmov.f32	s1, s13
 801c1ee:	f003 fc45 	bl	801fa7c <rotate_LZ7ctbe0>
        x[2] = 0.0;
 801c1f2:	f107 0120 	add.w	r1, r7, #32
 801c1f6:	f04f 0200 	mov.w	r2, #0
 801c1fa:	f04f 0300 	mov.w	r3, #0
 801c1fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 801c202:	f107 0318 	add.w	r3, r7, #24
 801c206:	ed93 7b00 	vldr	d7, [r3]
 801c20a:	f107 0320 	add.w	r3, r7, #32
 801c20e:	ed93 6b02 	vldr	d6, [r3, #8]
 801c212:	f107 0218 	add.w	r2, r7, #24
 801c216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c21a:	f103 0108 	add.w	r1, r3, #8
 801c21e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c222:	3308      	adds	r3, #8
 801c224:	4618      	mov	r0, r3
 801c226:	eeb0 1a46 	vmov.f32	s2, s12
 801c22a:	eef0 1a66 	vmov.f32	s3, s13
 801c22e:	eeb0 0a47 	vmov.f32	s0, s14
 801c232:	eef0 0a67 	vmov.f32	s1, s15
 801c236:	f003 fc21 	bl	801fa7c <rotate_LZ7ctbe0>
        x[1] = 0.0;
 801c23a:	f107 0120 	add.w	r1, r7, #32
 801c23e:	f04f 0200 	mov.w	r2, #0
 801c242:	f04f 0300 	mov.w	r3, #0
 801c246:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 801c24a:	f107 0318 	add.w	r3, r7, #24
 801c24e:	ed93 7b00 	vldr	d7, [r3]
 801c252:	f107 0320 	add.w	r3, r7, #32
 801c256:	ed93 6b00 	vldr	d6, [r3]
 801c25a:	f107 0218 	add.w	r2, r7, #24
 801c25e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c266:	4618      	mov	r0, r3
 801c268:	eeb0 1a46 	vmov.f32	s2, s12
 801c26c:	eef0 1a66 	vmov.f32	s3, s13
 801c270:	eeb0 0a47 	vmov.f32	s0, s14
 801c274:	eef0 0a67 	vmov.f32	s1, s15
 801c278:	f003 fc00 	bl	801fa7c <rotate_LZ7ctbe0>
        x[0] = 0.0;
 801c27c:	f107 0120 	add.w	r1, r7, #32
 801c280:	f04f 0200 	mov.w	r2, #0
 801c284:	f04f 0300 	mov.w	r3, #0
 801c288:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c28c:	2300      	movs	r3, #0
 801c28e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c292:	e072      	b.n	801c37a <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 801c294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c298:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c29c:	00db      	lsls	r3, r3, #3
 801c29e:	4413      	add	r3, r2
 801c2a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c2a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c2a8:	00db      	lsls	r3, r3, #3
 801c2aa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c2ae:	4413      	add	r3, r2
 801c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b4:	f7e4 f992 	bl	80005dc <__aeabi_dmul>
 801c2b8:	4602      	mov	r2, r0
 801c2ba:	460b      	mov	r3, r1
 801c2bc:	f107 0118 	add.w	r1, r7, #24
 801c2c0:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 801c2c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c2c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c2cc:	00db      	lsls	r3, r3, #3
 801c2ce:	4413      	add	r3, r2
 801c2d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c2d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c2d8:	00db      	lsls	r3, r3, #3
 801c2da:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c2de:	4413      	add	r3, r2
 801c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e4:	f7e4 f97a 	bl	80005dc <__aeabi_dmul>
 801c2e8:	4602      	mov	r2, r0
 801c2ea:	460b      	mov	r3, r1
 801c2ec:	4690      	mov	r8, r2
 801c2ee:	4699      	mov	r9, r3
 801c2f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c2f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c2f8:	00db      	lsls	r3, r3, #3
 801c2fa:	4413      	add	r3, r2
 801c2fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c300:	f107 0320 	add.w	r3, r7, #32
 801c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c308:	f7e4 f968 	bl	80005dc <__aeabi_dmul>
 801c30c:	4602      	mov	r2, r0
 801c30e:	460b      	mov	r3, r1
 801c310:	4610      	mov	r0, r2
 801c312:	4619      	mov	r1, r3
 801c314:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c318:	00db      	lsls	r3, r3, #3
 801c31a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c31e:	18d4      	adds	r4, r2, r3
 801c320:	4602      	mov	r2, r0
 801c322:	460b      	mov	r3, r1
 801c324:	4640      	mov	r0, r8
 801c326:	4649      	mov	r1, r9
 801c328:	f7e3 ffa0 	bl	800026c <__aeabi_dsub>
 801c32c:	4602      	mov	r2, r0
 801c32e:	460b      	mov	r3, r1
 801c330:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 801c334:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c338:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c33c:	00db      	lsls	r3, r3, #3
 801c33e:	4413      	add	r3, r2
 801c340:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c344:	f107 0320 	add.w	r3, r7, #32
 801c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c34c:	f7e4 f946 	bl	80005dc <__aeabi_dmul>
 801c350:	4602      	mov	r2, r0
 801c352:	460b      	mov	r3, r1
 801c354:	4610      	mov	r0, r2
 801c356:	4619      	mov	r1, r3
 801c358:	f107 0318 	add.w	r3, r7, #24
 801c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c360:	f7e3 ff86 	bl	8000270 <__adddf3>
 801c364:	4602      	mov	r2, r0
 801c366:	460b      	mov	r3, r1
 801c368:	f107 0120 	add.w	r1, r7, #32
 801c36c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c370:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c374:	3b01      	subs	r3, #1
 801c376:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c37a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c37e:	2b00      	cmp	r3, #0
 801c380:	da88      	bge.n	801c294 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c382:	2301      	movs	r3, #1
 801c384:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c388:	e06c      	b.n	801c464 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 801c38a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c38e:	3303      	adds	r3, #3
 801c390:	00db      	lsls	r3, r3, #3
 801c392:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c396:	4413      	add	r3, r2
 801c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c39c:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 801c3a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c3a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3a8:	00db      	lsls	r3, r3, #3
 801c3aa:	4413      	add	r3, r2
 801c3ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c3b0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c3b4:	f7e4 f912 	bl	80005dc <__aeabi_dmul>
 801c3b8:	4602      	mov	r2, r0
 801c3ba:	460b      	mov	r3, r1
 801c3bc:	4690      	mov	r8, r2
 801c3be:	4699      	mov	r9, r3
 801c3c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c3c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3c8:	00db      	lsls	r3, r3, #3
 801c3ca:	4413      	add	r3, r2
 801c3cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c3d0:	f107 0320 	add.w	r3, r7, #32
 801c3d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c3d8:	f7e4 f900 	bl	80005dc <__aeabi_dmul>
 801c3dc:	4602      	mov	r2, r0
 801c3de:	460b      	mov	r3, r1
 801c3e0:	4610      	mov	r0, r2
 801c3e2:	4619      	mov	r1, r3
 801c3e4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c3e8:	3303      	adds	r3, #3
 801c3ea:	00db      	lsls	r3, r3, #3
 801c3ec:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c3f0:	18d4      	adds	r4, r2, r3
 801c3f2:	4602      	mov	r2, r0
 801c3f4:	460b      	mov	r3, r1
 801c3f6:	4640      	mov	r0, r8
 801c3f8:	4649      	mov	r1, r9
 801c3fa:	f7e3 ff37 	bl	800026c <__aeabi_dsub>
 801c3fe:	4602      	mov	r2, r0
 801c400:	460b      	mov	r3, r1
 801c402:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 801c406:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c40a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c40e:	00db      	lsls	r3, r3, #3
 801c410:	4413      	add	r3, r2
 801c412:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c416:	f107 0320 	add.w	r3, r7, #32
 801c41a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c41e:	f7e4 f8dd 	bl	80005dc <__aeabi_dmul>
 801c422:	4602      	mov	r2, r0
 801c424:	460b      	mov	r3, r1
 801c426:	4614      	mov	r4, r2
 801c428:	461d      	mov	r5, r3
 801c42a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c42e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c432:	00db      	lsls	r3, r3, #3
 801c434:	4413      	add	r3, r2
 801c436:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c43a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c43e:	f7e4 f8cd 	bl	80005dc <__aeabi_dmul>
 801c442:	4602      	mov	r2, r0
 801c444:	460b      	mov	r3, r1
 801c446:	4620      	mov	r0, r4
 801c448:	4629      	mov	r1, r5
 801c44a:	f7e3 ff11 	bl	8000270 <__adddf3>
 801c44e:	4602      	mov	r2, r0
 801c450:	460b      	mov	r3, r1
 801c452:	f107 0120 	add.w	r1, r7, #32
 801c456:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c45a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c45e:	3b01      	subs	r3, #1
 801c460:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c464:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c468:	2b00      	cmp	r3, #0
 801c46a:	da8e      	bge.n	801c38a <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c46c:	2302      	movs	r3, #2
 801c46e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c472:	e06e      	b.n	801c552 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 801c474:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 801c478:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c47c:	3306      	adds	r3, #6
 801c47e:	00db      	lsls	r3, r3, #3
 801c480:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c484:	4413      	add	r3, r2
 801c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c48a:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 801c48e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c492:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c496:	00db      	lsls	r3, r3, #3
 801c498:	4413      	add	r3, r2
 801c49a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c49e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c4a2:	f7e4 f89b 	bl	80005dc <__aeabi_dmul>
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	4690      	mov	r8, r2
 801c4ac:	4699      	mov	r9, r3
 801c4ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c4b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4b6:	00db      	lsls	r3, r3, #3
 801c4b8:	4413      	add	r3, r2
 801c4ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c4be:	f107 0320 	add.w	r3, r7, #32
 801c4c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c4c6:	f7e4 f889 	bl	80005dc <__aeabi_dmul>
 801c4ca:	4602      	mov	r2, r0
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	4610      	mov	r0, r2
 801c4d0:	4619      	mov	r1, r3
 801c4d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4d6:	3306      	adds	r3, #6
 801c4d8:	00db      	lsls	r3, r3, #3
 801c4da:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c4de:	18d4      	adds	r4, r2, r3
 801c4e0:	4602      	mov	r2, r0
 801c4e2:	460b      	mov	r3, r1
 801c4e4:	4640      	mov	r0, r8
 801c4e6:	4649      	mov	r1, r9
 801c4e8:	f7e3 fec0 	bl	800026c <__aeabi_dsub>
 801c4ec:	4602      	mov	r2, r0
 801c4ee:	460b      	mov	r3, r1
 801c4f0:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 801c4f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c4f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4fc:	00db      	lsls	r3, r3, #3
 801c4fe:	4413      	add	r3, r2
 801c500:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c504:	f107 0320 	add.w	r3, r7, #32
 801c508:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c50c:	f7e4 f866 	bl	80005dc <__aeabi_dmul>
 801c510:	4602      	mov	r2, r0
 801c512:	460b      	mov	r3, r1
 801c514:	4614      	mov	r4, r2
 801c516:	461d      	mov	r5, r3
 801c518:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c51c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c520:	00db      	lsls	r3, r3, #3
 801c522:	4413      	add	r3, r2
 801c524:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c528:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c52c:	f7e4 f856 	bl	80005dc <__aeabi_dmul>
 801c530:	4602      	mov	r2, r0
 801c532:	460b      	mov	r3, r1
 801c534:	4620      	mov	r0, r4
 801c536:	4629      	mov	r1, r5
 801c538:	f7e3 fe9a 	bl	8000270 <__adddf3>
 801c53c:	4602      	mov	r2, r0
 801c53e:	460b      	mov	r3, r1
 801c540:	f107 0120 	add.w	r1, r7, #32
 801c544:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c548:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c54c:	3b01      	subs	r3, #1
 801c54e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c552:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c556:	2b00      	cmp	r3, #0
 801c558:	da8e      	bge.n	801c478 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 801c55a:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 801c55e:	2b00      	cmp	r3, #0
 801c560:	f000 82f0 	beq.w	801cb44 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 801c564:	2300      	movs	r3, #0
 801c566:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c56a:	2300      	movs	r3, #0
 801c56c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c570:	e0d3      	b.n	801c71a <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 801c572:	2300      	movs	r3, #0
 801c574:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c578:	2300      	movs	r3, #0
 801c57a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c57e:	e0bd      	b.n	801c6fc <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 801c580:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801c584:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c588:	4413      	add	r3, r2
 801c58a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 801c58e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c592:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c596:	00db      	lsls	r3, r3, #3
 801c598:	18d1      	adds	r1, r2, r3
 801c59a:	f04f 0200 	mov.w	r2, #0
 801c59e:	f04f 0300 	mov.w	r3, #0
 801c5a2:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 801c5a6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c5aa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c5ae:	00db      	lsls	r3, r3, #3
 801c5b0:	4413      	add	r3, r2
 801c5b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c5b6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c5ba:	00db      	lsls	r3, r3, #3
 801c5bc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5c0:	4413      	add	r3, r2
 801c5c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c5c6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c5ca:	00db      	lsls	r3, r3, #3
 801c5cc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5d0:	4413      	add	r3, r2
 801c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d6:	f7e4 f801 	bl	80005dc <__aeabi_dmul>
 801c5da:	4602      	mov	r2, r0
 801c5dc:	460b      	mov	r3, r1
 801c5de:	4620      	mov	r0, r4
 801c5e0:	4629      	mov	r1, r5
 801c5e2:	f7e3 fe45 	bl	8000270 <__adddf3>
 801c5e6:	4602      	mov	r2, r0
 801c5e8:	460b      	mov	r3, r1
 801c5ea:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c5ee:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c5f2:	00c9      	lsls	r1, r1, #3
 801c5f4:	4401      	add	r1, r0
 801c5f6:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 801c5fa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c5fe:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c602:	00db      	lsls	r3, r3, #3
 801c604:	4413      	add	r3, r2
 801c606:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c60a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c60e:	3301      	adds	r3, #1
 801c610:	00db      	lsls	r3, r3, #3
 801c612:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c616:	4413      	add	r3, r2
 801c618:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c61c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c620:	3301      	adds	r3, #1
 801c622:	00db      	lsls	r3, r3, #3
 801c624:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c628:	4413      	add	r3, r2
 801c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c62e:	f7e3 ffd5 	bl	80005dc <__aeabi_dmul>
 801c632:	4602      	mov	r2, r0
 801c634:	460b      	mov	r3, r1
 801c636:	4620      	mov	r0, r4
 801c638:	4629      	mov	r1, r5
 801c63a:	f7e3 fe19 	bl	8000270 <__adddf3>
 801c63e:	4602      	mov	r2, r0
 801c640:	460b      	mov	r3, r1
 801c642:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c646:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c64a:	00c9      	lsls	r1, r1, #3
 801c64c:	4401      	add	r1, r0
 801c64e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 801c652:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c656:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c65a:	00db      	lsls	r3, r3, #3
 801c65c:	4413      	add	r3, r2
 801c65e:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c662:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c666:	3302      	adds	r3, #2
 801c668:	00db      	lsls	r3, r3, #3
 801c66a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c66e:	4413      	add	r3, r2
 801c670:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c674:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c678:	3302      	adds	r3, #2
 801c67a:	00db      	lsls	r3, r3, #3
 801c67c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c680:	4413      	add	r3, r2
 801c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c686:	f7e3 ffa9 	bl	80005dc <__aeabi_dmul>
 801c68a:	4602      	mov	r2, r0
 801c68c:	460b      	mov	r3, r1
 801c68e:	4620      	mov	r0, r4
 801c690:	4629      	mov	r1, r5
 801c692:	f7e3 fded 	bl	8000270 <__adddf3>
 801c696:	4602      	mov	r2, r0
 801c698:	460b      	mov	r3, r1
 801c69a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c69e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c6a2:	00c9      	lsls	r1, r1, #3
 801c6a4:	4401      	add	r1, r0
 801c6a6:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 801c6aa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c6ae:	00db      	lsls	r3, r3, #3
 801c6b0:	1d3a      	adds	r2, r7, #4
 801c6b2:	6812      	ldr	r2, [r2, #0]
 801c6b4:	4413      	add	r3, r2
 801c6b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c6ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c6be:	00db      	lsls	r3, r3, #3
 801c6c0:	1d3a      	adds	r2, r7, #4
 801c6c2:	6812      	ldr	r2, [r2, #0]
 801c6c4:	4413      	add	r3, r2
 801c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ca:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801c6ce:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801c6d2:	442c      	add	r4, r5
 801c6d4:	f7e3 ff82 	bl	80005dc <__aeabi_dmul>
 801c6d8:	4602      	mov	r2, r0
 801c6da:	460b      	mov	r3, r1
 801c6dc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801c6e0:	00e1      	lsls	r1, r4, #3
 801c6e2:	4401      	add	r1, r0
 801c6e4:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 801c6e8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c6ec:	3303      	adds	r3, #3
 801c6ee:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c6f2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c6fc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c700:	2b02      	cmp	r3, #2
 801c702:	f77f af3d 	ble.w	801c580 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 801c706:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c70a:	3303      	adds	r3, #3
 801c70c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c710:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c714:	3301      	adds	r3, #1
 801c716:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c71a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c71e:	2b02      	cmp	r3, #2
 801c720:	f77f af27 	ble.w	801c572 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 801c724:	2301      	movs	r3, #1
 801c726:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c72a:	2300      	movs	r3, #0
 801c72c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c730:	e049      	b.n	801c7c6 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 801c732:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c736:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c73a:	00db      	lsls	r3, r3, #3
 801c73c:	4413      	add	r3, r2
 801c73e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c742:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801c746:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c74a:	00db      	lsls	r3, r3, #3
 801c74c:	4413      	add	r3, r2
 801c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c752:	f7e3 fd8b 	bl	800026c <__aeabi_dsub>
 801c756:	4602      	mov	r2, r0
 801c758:	460b      	mov	r3, r1
 801c75a:	f107 0118 	add.w	r1, r7, #24
 801c75e:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801c762:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c766:	2b00      	cmp	r3, #0
 801c768:	d01c      	beq.n	801c7a4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 801c76a:	f107 0318 	add.w	r3, r7, #24
 801c76e:	ed93 7b00 	vldr	d7, [r3]
 801c772:	eeb0 0a47 	vmov.f32	s0, s14
 801c776:	eef0 0a67 	vmov.f32	s1, s15
 801c77a:	f003 fbf3 	bl	801ff64 <rtIsInf>
 801c77e:	4603      	mov	r3, r0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d10c      	bne.n	801c79e <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 801c784:	f107 0318 	add.w	r3, r7, #24
 801c788:	ed93 7b00 	vldr	d7, [r3]
 801c78c:	eeb0 0a47 	vmov.f32	s0, s14
 801c790:	eef0 0a67 	vmov.f32	s1, s15
 801c794:	f003 fc0a 	bl	801ffac <rtIsNaN>
 801c798:	4603      	mov	r3, r0
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d002      	beq.n	801c7a4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 801c79e:	2300      	movs	r3, #0
 801c7a0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 801c7a4:	f107 0318 	add.w	r3, r7, #24
 801c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ac:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801c7b0:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 801c7b4:	00c9      	lsls	r1, r1, #3
 801c7b6:	4401      	add	r1, r0
 801c7b8:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c7bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c7c0:	3301      	adds	r3, #1
 801c7c2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c7c6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c7ca:	2b08      	cmp	r3, #8
 801c7cc:	ddb1      	ble.n	801c732 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 801c7ce:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d00a      	beq.n	801c7ec <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 801c7d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c7da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c7de:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c7e2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801c7e6:	f003 fc33 	bl	8020050 <svd_u3DvUgOe>
 801c7ea:	e02c      	b.n	801c846 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 801c7ec:	4bbc      	ldr	r3, [pc, #752]	; (801cae0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c7f6:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 801c7fa:	4bb9      	ldr	r3, [pc, #740]	; (801cae0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c800:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c804:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 801c808:	4bb5      	ldr	r3, [pc, #724]	; (801cae0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c812:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 801c816:	2300      	movs	r3, #0
 801c818:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c81c:	e00f      	b.n	801c83e <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 801c81e:	4bb0      	ldr	r3, [pc, #704]	; (801cae0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c824:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c828:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801c82c:	00c9      	lsls	r1, r1, #3
 801c82e:	4401      	add	r1, r0
 801c830:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 801c834:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c838:	3301      	adds	r3, #1
 801c83a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c83e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c842:	2b08      	cmp	r3, #8
 801c844:	ddeb      	ble.n	801c81e <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 801c846:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c84a:	2248      	movs	r2, #72	; 0x48
 801c84c:	2100      	movs	r1, #0
 801c84e:	4618      	mov	r0, r3
 801c850:	f011 fefe 	bl	802e650 <memset>
      Ss[0] = s[0];
 801c854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c860:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801c864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c868:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c86c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c870:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801c874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c878:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c87c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801c880:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 801c884:	2300      	movs	r3, #0
 801c886:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c88a:	e01e      	b.n	801c8ca <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 801c88c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c890:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c894:	00db      	lsls	r3, r3, #3
 801c896:	4413      	add	r3, r2
 801c898:	ed93 7b00 	vldr	d7, [r3]
 801c89c:	eeb0 0a47 	vmov.f32	s0, s14
 801c8a0:	eef0 0a67 	vmov.f32	s1, s15
 801c8a4:	f012 f88c 	bl	802e9c0 <sqrt>
 801c8a8:	eeb0 7a40 	vmov.f32	s14, s0
 801c8ac:	eef0 7a60 	vmov.f32	s15, s1
 801c8b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c8b4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c8b8:	00db      	lsls	r3, r3, #3
 801c8ba:	4413      	add	r3, r2
 801c8bc:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 801c8c0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c8c4:	3301      	adds	r3, #1
 801c8c6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c8ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c8ce:	2b08      	cmp	r3, #8
 801c8d0:	dddc      	ble.n	801c88c <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c8d8:	2300      	movs	r3, #0
 801c8da:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c8de:	e0c0      	b.n	801ca62 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c8ec:	e0aa      	b.n	801ca44 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 801c8ee:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801c8f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c8f6:	4413      	add	r3, r2
 801c8f8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 801c8fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c900:	00db      	lsls	r3, r3, #3
 801c902:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c906:	18d1      	adds	r1, r2, r3
 801c908:	f04f 0200 	mov.w	r2, #0
 801c90c:	f04f 0300 	mov.w	r3, #0
 801c910:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 801c914:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c918:	00db      	lsls	r3, r3, #3
 801c91a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c91e:	4413      	add	r3, r2
 801c920:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c924:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c928:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c92c:	00db      	lsls	r3, r3, #3
 801c92e:	4413      	add	r3, r2
 801c930:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c934:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c938:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c93c:	00db      	lsls	r3, r3, #3
 801c93e:	4413      	add	r3, r2
 801c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c944:	f7e3 fe4a 	bl	80005dc <__aeabi_dmul>
 801c948:	4602      	mov	r2, r0
 801c94a:	460b      	mov	r3, r1
 801c94c:	4610      	mov	r0, r2
 801c94e:	4619      	mov	r1, r3
 801c950:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c954:	00db      	lsls	r3, r3, #3
 801c956:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c95a:	18d6      	adds	r6, r2, r3
 801c95c:	4602      	mov	r2, r0
 801c95e:	460b      	mov	r3, r1
 801c960:	4620      	mov	r0, r4
 801c962:	4629      	mov	r1, r5
 801c964:	f7e3 fc84 	bl	8000270 <__adddf3>
 801c968:	4602      	mov	r2, r0
 801c96a:	460b      	mov	r3, r1
 801c96c:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 801c970:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c974:	00db      	lsls	r3, r3, #3
 801c976:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c97a:	4413      	add	r3, r2
 801c97c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c980:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c984:	3301      	adds	r3, #1
 801c986:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c98a:	00db      	lsls	r3, r3, #3
 801c98c:	4413      	add	r3, r2
 801c98e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c992:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c996:	3303      	adds	r3, #3
 801c998:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c99c:	00db      	lsls	r3, r3, #3
 801c99e:	4413      	add	r3, r2
 801c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9a4:	f7e3 fe1a 	bl	80005dc <__aeabi_dmul>
 801c9a8:	4602      	mov	r2, r0
 801c9aa:	460b      	mov	r3, r1
 801c9ac:	4610      	mov	r0, r2
 801c9ae:	4619      	mov	r1, r3
 801c9b0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c9b4:	00db      	lsls	r3, r3, #3
 801c9b6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c9ba:	18d6      	adds	r6, r2, r3
 801c9bc:	4602      	mov	r2, r0
 801c9be:	460b      	mov	r3, r1
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	4629      	mov	r1, r5
 801c9c4:	f7e3 fc54 	bl	8000270 <__adddf3>
 801c9c8:	4602      	mov	r2, r0
 801c9ca:	460b      	mov	r3, r1
 801c9cc:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 801c9d0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c9d4:	00db      	lsls	r3, r3, #3
 801c9d6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c9da:	4413      	add	r3, r2
 801c9dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c9e0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c9e4:	3302      	adds	r3, #2
 801c9e6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801c9ea:	00db      	lsls	r3, r3, #3
 801c9ec:	4413      	add	r3, r2
 801c9ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c9f2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c9f6:	3306      	adds	r3, #6
 801c9f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c9fc:	00db      	lsls	r3, r3, #3
 801c9fe:	4413      	add	r3, r2
 801ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca04:	f7e3 fdea 	bl	80005dc <__aeabi_dmul>
 801ca08:	4602      	mov	r2, r0
 801ca0a:	460b      	mov	r3, r1
 801ca0c:	4610      	mov	r0, r2
 801ca0e:	4619      	mov	r1, r3
 801ca10:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801ca14:	00db      	lsls	r3, r3, #3
 801ca16:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ca1a:	18d6      	adds	r6, r2, r3
 801ca1c:	4602      	mov	r2, r0
 801ca1e:	460b      	mov	r3, r1
 801ca20:	4620      	mov	r0, r4
 801ca22:	4629      	mov	r1, r5
 801ca24:	f7e3 fc24 	bl	8000270 <__adddf3>
 801ca28:	4602      	mov	r2, r0
 801ca2a:	460b      	mov	r3, r1
 801ca2c:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 801ca30:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801ca34:	3303      	adds	r3, #3
 801ca36:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801ca3a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ca3e:	3301      	adds	r3, #1
 801ca40:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801ca44:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801ca48:	2b02      	cmp	r3, #2
 801ca4a:	f77f af50 	ble.w	801c8ee <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 801ca4e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ca52:	3303      	adds	r3, #3
 801ca54:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801ca58:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ca5c:	3301      	adds	r3, #1
 801ca5e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ca62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ca66:	2b02      	cmp	r3, #2
 801ca68:	f77f af3a 	ble.w	801c8e0 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 801ca72:	2300      	movs	r3, #0
 801ca74:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 801ca78:	2300      	movs	r3, #0
 801ca7a:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801ca7e:	e044      	b.n	801cb0a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 801ca80:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ca84:	3301      	adds	r3, #1
 801ca86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 801ca90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ca94:	2b02      	cmp	r3, #2
 801ca96:	dc25      	bgt.n	801cae4 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 801ca98:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801ca9c:	4613      	mov	r3, r2
 801ca9e:	005b      	lsls	r3, r3, #1
 801caa0:	441a      	add	r2, r3
 801caa2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801caa6:	4413      	add	r3, r2
 801caa8:	00db      	lsls	r3, r3, #3
 801caaa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801caae:	4413      	add	r3, r2
 801cab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cab4:	f04f 0200 	mov.w	r2, #0
 801cab8:	f04f 0300 	mov.w	r3, #0
 801cabc:	f7e3 fff6 	bl	8000aac <__aeabi_dcmpeq>
 801cac0:	4603      	mov	r3, r0
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d106      	bne.n	801cad4 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 801cac6:	2300      	movs	r3, #0
 801cac8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 801cacc:	2301      	movs	r3, #1
 801cace:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801cad2:	e00f      	b.n	801caf4 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 801cad4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cad8:	3301      	adds	r3, #1
 801cada:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cade:	e009      	b.n	801caf4 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 801cae0:	2001ed68 	.word	0x2001ed68
            }
          } else {
            kk++;
 801cae4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cae8:	3301      	adds	r3, #1
 801caea:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 801caee:	2302      	movs	r3, #2
 801caf0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 801caf4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d0c6      	beq.n	801ca8a <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 801cafc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cb00:	2b01      	cmp	r3, #1
 801cb02:	d102      	bne.n	801cb0a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 801cb04:	2301      	movs	r3, #1
 801cb06:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801cb0a:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d103      	bne.n	801cb1a <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 801cb12:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cb16:	2b02      	cmp	r3, #2
 801cb18:	ddb2      	ble.n	801ca80 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 801cb1a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d110      	bne.n	801cb44 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 801cb22:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb26:	2248      	movs	r2, #72	; 0x48
 801cb28:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f011 fd81 	bl	802e634 <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 801cb32:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801cb36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb3a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f000 fec4 	bl	801d8cc <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 801cb44:	2300      	movs	r3, #0
 801cb46:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cb50:	e03d      	b.n	801cbce <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 801cb52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb56:	00db      	lsls	r3, r3, #3
 801cb58:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb5c:	4413      	add	r3, r2
 801cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb62:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cb66:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801cb6a:	00c9      	lsls	r1, r1, #3
 801cb6c:	4401      	add	r1, r0
 801cb6e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801cb72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb76:	3303      	adds	r3, #3
 801cb78:	00db      	lsls	r3, r3, #3
 801cb7a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb7e:	4413      	add	r3, r2
 801cb80:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cb84:	1c51      	adds	r1, r2, #1
 801cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb8a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cb8e:	00c9      	lsls	r1, r1, #3
 801cb90:	4401      	add	r1, r0
 801cb92:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801cb96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb9a:	3306      	adds	r3, #6
 801cb9c:	00db      	lsls	r3, r3, #3
 801cb9e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cba2:	4413      	add	r3, r2
 801cba4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cba8:	1c91      	adds	r1, r2, #2
 801cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cbb2:	00c9      	lsls	r1, r1, #3
 801cbb4:	4401      	add	r1, r0
 801cbb6:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801cbba:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cbbe:	3303      	adds	r3, #3
 801cbc0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cbc4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cbc8:	3301      	adds	r3, #1
 801cbca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cbce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cbd2:	2b02      	cmp	r3, #2
 801cbd4:	ddbd      	ble.n	801cb52 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cbdc:	e01a      	b.n	801cc14 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 801cbde:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801cbe2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cbe6:	00db      	lsls	r3, r3, #3
 801cbe8:	4413      	add	r3, r2
 801cbea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cbee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cbf2:	00db      	lsls	r3, r3, #3
 801cbf4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbf8:	18d4      	adds	r4, r2, r3
 801cbfa:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801cbfe:	f7e3 fced 	bl	80005dc <__aeabi_dmul>
 801cc02:	4602      	mov	r2, r0
 801cc04:	460b      	mov	r3, r1
 801cc06:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801cc0a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc0e:	3301      	adds	r3, #1
 801cc10:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cc14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc18:	2b08      	cmp	r3, #8
 801cc1a:	dde0      	ble.n	801cbde <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801cc22:	2300      	movs	r3, #0
 801cc24:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cc28:	e057      	b.n	801ccda <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 801cc2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc2e:	00db      	lsls	r3, r3, #3
 801cc30:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cc34:	4413      	add	r3, r2
 801cc36:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc3a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc42:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801cc46:	00e4      	lsls	r4, r4, #3
 801cc48:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801cc4c:	442c      	add	r4, r5
 801cc4e:	f7e3 fb0d 	bl	800026c <__aeabi_dsub>
 801cc52:	4602      	mov	r2, r0
 801cc54:	460b      	mov	r3, r1
 801cc56:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 801cc5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc5e:	3301      	adds	r3, #1
 801cc60:	00db      	lsls	r3, r3, #3
 801cc62:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cc66:	4413      	add	r3, r2
 801cc68:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc6c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cc70:	3308      	adds	r3, #8
 801cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc76:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801cc7a:	3401      	adds	r4, #1
 801cc7c:	00e4      	lsls	r4, r4, #3
 801cc7e:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801cc82:	442c      	add	r4, r5
 801cc84:	f7e3 faf2 	bl	800026c <__aeabi_dsub>
 801cc88:	4602      	mov	r2, r0
 801cc8a:	460b      	mov	r3, r1
 801cc8c:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 801cc90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc94:	3302      	adds	r3, #2
 801cc96:	00db      	lsls	r3, r3, #3
 801cc98:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cc9c:	4413      	add	r3, r2
 801cc9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cca2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cca6:	3310      	adds	r3, #16
 801cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccac:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801ccb0:	3402      	adds	r4, #2
 801ccb2:	00e4      	lsls	r4, r4, #3
 801ccb4:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801ccb8:	442c      	add	r4, r5
 801ccba:	f7e3 fad7 	bl	800026c <__aeabi_dsub>
 801ccbe:	4602      	mov	r2, r0
 801ccc0:	460b      	mov	r3, r1
 801ccc2:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801ccc6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ccca:	3303      	adds	r3, #3
 801cccc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801ccd0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ccd4:	3301      	adds	r3, #1
 801ccd6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ccda:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ccde:	2b05      	cmp	r3, #5
 801cce0:	dda3      	ble.n	801cc2a <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 801cce2:	f107 0308 	add.w	r3, r7, #8
 801cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccea:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 801ccee:	f7e3 fc75 	bl	80005dc <__aeabi_dmul>
 801ccf2:	4602      	mov	r2, r0
 801ccf4:	460b      	mov	r3, r1
 801ccf6:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cd00:	e071      	b.n	801cde6 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 801cd02:	2300      	movs	r3, #0
 801cd04:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801cd08:	2300      	movs	r3, #0
 801cd0a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801cd0e:	e061      	b.n	801cdd4 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 801cd10:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801cd14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd18:	4413      	add	r3, r2
 801cd1a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 801cd1e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cd22:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cd26:	00db      	lsls	r3, r3, #3
 801cd28:	18d1      	adds	r1, r2, r3
 801cd2a:	f04f 0200 	mov.w	r2, #0
 801cd2e:	f04f 0300 	mov.w	r3, #0
 801cd32:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 801cd36:	2300      	movs	r3, #0
 801cd38:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801cd42:	e039      	b.n	801cdb8 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 801cd44:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cd48:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cd4c:	00db      	lsls	r3, r3, #3
 801cd4e:	4413      	add	r3, r2
 801cd50:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cd54:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cd58:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd5c:	4413      	add	r3, r2
 801cd5e:	00db      	lsls	r3, r3, #3
 801cd60:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cd64:	4413      	add	r3, r2
 801cd66:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cd6a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cd6e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cd72:	4413      	add	r3, r2
 801cd74:	00db      	lsls	r3, r3, #3
 801cd76:	463a      	mov	r2, r7
 801cd78:	6812      	ldr	r2, [r2, #0]
 801cd7a:	4413      	add	r3, r2
 801cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd80:	f7e3 fc2c 	bl	80005dc <__aeabi_dmul>
 801cd84:	4602      	mov	r2, r0
 801cd86:	460b      	mov	r3, r1
 801cd88:	4620      	mov	r0, r4
 801cd8a:	4629      	mov	r1, r5
 801cd8c:	f7e3 fa70 	bl	8000270 <__adddf3>
 801cd90:	4602      	mov	r2, r0
 801cd92:	460b      	mov	r3, r1
 801cd94:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801cd98:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801cd9c:	00c9      	lsls	r1, r1, #3
 801cd9e:	4401      	add	r1, r0
 801cda0:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 801cda4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cda8:	3303      	adds	r3, #3
 801cdaa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801cdae:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801cdb8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801cdbc:	2b05      	cmp	r3, #5
 801cdbe:	ddc1      	ble.n	801cd44 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 801cdc0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cdc4:	3303      	adds	r3, #3
 801cdc6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801cdca:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cdce:	3301      	adds	r3, #1
 801cdd0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801cdd4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cdd8:	2b02      	cmp	r3, #2
 801cdda:	dd99      	ble.n	801cd10 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 801cddc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cde0:	3301      	adds	r3, #1
 801cde2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cde6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cdea:	2b02      	cmp	r3, #2
 801cdec:	dd89      	ble.n	801cd02 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 801cdee:	2300      	movs	r3, #0
 801cdf0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cdf4:	e01a      	b.n	801ce2c <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 801cdf6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cdfa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cdfe:	00db      	lsls	r3, r3, #3
 801ce00:	4413      	add	r3, r2
 801ce02:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce06:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce0a:	00db      	lsls	r3, r3, #3
 801ce0c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801ce10:	18d4      	adds	r4, r2, r3
 801ce12:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801ce16:	f7e3 fbe1 	bl	80005dc <__aeabi_dmul>
 801ce1a:	4602      	mov	r2, r0
 801ce1c:	460b      	mov	r3, r1
 801ce1e:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 801ce22:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce26:	3301      	adds	r3, #1
 801ce28:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce2c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce30:	2b08      	cmp	r3, #8
 801ce32:	dde0      	ble.n	801cdf6 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 801ce34:	bf00      	nop
 801ce36:	bf00      	nop
 801ce38:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce42:	bf00      	nop

0801ce44 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 801ce44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ce48:	ed2d 8b02 	vpush	{d8}
 801ce4c:	b0ac      	sub	sp, #176	; 0xb0
 801ce4e:	af00      	add	r7, sp, #0
 801ce50:	6378      	str	r0, [r7, #52]	; 0x34
 801ce52:	6339      	str	r1, [r7, #48]	; 0x30
 801ce54:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 801ce58:	ed87 1b08 	vstr	d1, [r7, #32]
 801ce5c:	61fa      	str	r2, [r7, #28]
 801ce5e:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 801ce60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce62:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ce6a:	f7e3 fbb7 	bl	80005dc <__aeabi_dmul>
 801ce6e:	4602      	mov	r2, r0
 801ce70:	460b      	mov	r3, r1
 801ce72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801ce76:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801ce80:	e021      	b.n	801cec6 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 801ce82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ce86:	e9d3 4500 	ldrd	r4, r5, [r3]
 801ce8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ce8e:	00db      	lsls	r3, r3, #3
 801ce90:	69fa      	ldr	r2, [r7, #28]
 801ce92:	4413      	add	r3, r2
 801ce94:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce9a:	3308      	adds	r3, #8
 801ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea0:	f7e3 fb9c 	bl	80005dc <__aeabi_dmul>
 801cea4:	4602      	mov	r2, r0
 801cea6:	460b      	mov	r3, r1
 801cea8:	4620      	mov	r0, r4
 801ceaa:	4629      	mov	r1, r5
 801ceac:	f7e3 f9e0 	bl	8000270 <__adddf3>
 801ceb0:	4602      	mov	r2, r0
 801ceb2:	460b      	mov	r3, r1
 801ceb4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801ceb8:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801cebc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cec0:	3301      	adds	r3, #1
 801cec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ceca:	2b05      	cmp	r3, #5
 801cecc:	ddd9      	ble.n	801ce82 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 801cece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ced2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ced6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ceda:	f7e3 fb7f 	bl	80005dc <__aeabi_dmul>
 801cede:	4602      	mov	r2, r0
 801cee0:	460b      	mov	r3, r1
 801cee2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801cee6:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 801ceea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801cef6:	f7e3 f9b9 	bl	800026c <__aeabi_dsub>
 801cefa:	4602      	mov	r2, r0
 801cefc:	460b      	mov	r3, r1
 801cefe:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 801cf02:	2300      	movs	r3, #0
 801cf04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cf08:	e01c      	b.n	801cf44 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 801cf0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf0e:	00db      	lsls	r3, r3, #3
 801cf10:	69fa      	ldr	r2, [r7, #28]
 801cf12:	4413      	add	r3, r2
 801cf14:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cf1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cf20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf24:	00db      	lsls	r3, r3, #3
 801cf26:	69fa      	ldr	r2, [r7, #28]
 801cf28:	18d4      	adds	r4, r2, r3
 801cf2a:	4642      	mov	r2, r8
 801cf2c:	464b      	mov	r3, r9
 801cf2e:	f7e3 f99d 	bl	800026c <__aeabi_dsub>
 801cf32:	4602      	mov	r2, r0
 801cf34:	460b      	mov	r3, r1
 801cf36:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 801cf3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf3e:	3301      	adds	r3, #1
 801cf40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801cf44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf48:	2b05      	cmp	r3, #5
 801cf4a:	ddde      	ble.n	801cf0a <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 801cf4c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801cf50:	f003 f82c 	bl	801ffac <rtIsNaN>
 801cf54:	4603      	mov	r3, r0
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d004      	beq.n	801cf64 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 801cf5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cf5e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801cf62:	e025      	b.n	801cfb0 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 801cf64:	f04f 0200 	mov.w	r2, #0
 801cf68:	f04f 0300 	mov.w	r3, #0
 801cf6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cf70:	f7e3 fda6 	bl	8000ac0 <__aeabi_dcmplt>
 801cf74:	4603      	mov	r3, r0
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d005      	beq.n	801cf86 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 801cf7a:	f04f 0200 	mov.w	r2, #0
 801cf7e:	4bc3      	ldr	r3, [pc, #780]	; (801d28c <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801cf80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801cf84:	e014      	b.n	801cfb0 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 801cf86:	f04f 0200 	mov.w	r2, #0
 801cf8a:	f04f 0300 	mov.w	r3, #0
 801cf8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cf92:	f7e3 fdb3 	bl	8000afc <__aeabi_dcmpgt>
 801cf96:	4603      	mov	r3, r0
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d003      	beq.n	801cfa4 <UTMeanCovSqrt_C6QfB9Td+0x160>
 801cf9c:	f04f 0200 	mov.w	r2, #0
 801cfa0:	4bbb      	ldr	r3, [pc, #748]	; (801d290 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 801cfa2:	e003      	b.n	801cfac <UTMeanCovSqrt_C6QfB9Td+0x168>
 801cfa4:	f04f 0200 	mov.w	r2, #0
 801cfa8:	f04f 0300 	mov.w	r3, #0
 801cfac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 801cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cfb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cfba:	f7e3 fb0f 	bl	80005dc <__aeabi_dmul>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	460b      	mov	r3, r1
 801cfc2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 801cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfc8:	3308      	adds	r3, #8
 801cfca:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cfce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cfd2:	f7e3 fb03 	bl	80005dc <__aeabi_dmul>
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	460b      	mov	r3, r1
 801cfda:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 801cfde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cfe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cfe6:	f7e3 faf9 	bl	80005dc <__aeabi_dmul>
 801cfea:	4602      	mov	r2, r0
 801cfec:	460b      	mov	r3, r1
 801cfee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 801cff2:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 801cff6:	f011 fce3 	bl	802e9c0 <sqrt>
 801cffa:	eeb0 7a40 	vmov.f32	s14, s0
 801cffe:	eef0 7a60 	vmov.f32	s15, s1
 801d002:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 801d006:	2300      	movs	r3, #0
 801d008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d00c:	e01a      	b.n	801d044 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 801d00e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d012:	00db      	lsls	r3, r3, #3
 801d014:	69fa      	ldr	r2, [r7, #28]
 801d016:	4413      	add	r3, r2
 801d018:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d01c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d020:	f7e3 fadc 	bl	80005dc <__aeabi_dmul>
 801d024:	4602      	mov	r2, r0
 801d026:	460b      	mov	r3, r1
 801d028:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d02c:	00c9      	lsls	r1, r1, #3
 801d02e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d032:	4401      	add	r1, r0
 801d034:	3948      	subs	r1, #72	; 0x48
 801d036:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801d03a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d03e:	3301      	adds	r3, #1
 801d040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d048:	2b05      	cmp	r3, #5
 801d04a:	dde0      	ble.n	801d00e <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 801d04c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801d050:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 801d054:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d058:	2202      	movs	r2, #2
 801d05a:	4619      	mov	r1, r3
 801d05c:	2005      	movs	r0, #5
 801d05e:	f005 f973 	bl	8022348 <xnrm2_7bm34mDQ>
 801d062:	eeb0 7a40 	vmov.f32	s14, s0
 801d066:	eef0 7a60 	vmov.f32	s15, s1
 801d06a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 801d06e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d072:	f04f 0200 	mov.w	r2, #0
 801d076:	f04f 0300 	mov.w	r3, #0
 801d07a:	f7e3 fd17 	bl	8000aac <__aeabi_dcmpeq>
 801d07e:	4603      	mov	r3, r0
 801d080:	2b00      	cmp	r3, #0
 801d082:	f040 80e7 	bne.w	801d254 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 801d086:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 801d08a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 801d08e:	eeb0 1a46 	vmov.f32	s2, s12
 801d092:	eef0 1a66 	vmov.f32	s3, s13
 801d096:	eeb0 0a47 	vmov.f32	s0, s14
 801d09a:	eef0 0a67 	vmov.f32	s1, s15
 801d09e:	f002 fe77 	bl	801fd90 <rt_hypotd_snf>
 801d0a2:	eeb0 7a40 	vmov.f32	s14, s0
 801d0a6:	eef0 7a60 	vmov.f32	s15, s1
 801d0aa:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 801d0ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d0b2:	f04f 0200 	mov.w	r2, #0
 801d0b6:	f04f 0300 	mov.w	r3, #0
 801d0ba:	f7e3 fd15 	bl	8000ae8 <__aeabi_dcmpge>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d009      	beq.n	801d0d8 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 801d0c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d0c8:	613a      	str	r2, [r7, #16]
 801d0ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d0ce:	617b      	str	r3, [r7, #20]
 801d0d0:	ed97 7b04 	vldr	d7, [r7, #16]
 801d0d4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 801d0d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d0dc:	60ba      	str	r2, [r7, #8]
 801d0de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d0e2:	60fb      	str	r3, [r7, #12]
 801d0e4:	f04f 0200 	mov.w	r2, #0
 801d0e8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d0ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801d0f0:	f7e3 fce6 	bl	8000ac0 <__aeabi_dcmplt>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	f000 80a8 	beq.w	801d24c <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 801d102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d106:	3301      	adds	r3, #1
 801d108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 801d10c:	2301      	movs	r3, #1
 801d10e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d112:	e01d      	b.n	801d150 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 801d114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d118:	00db      	lsls	r3, r3, #3
 801d11a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d11e:	4413      	add	r3, r2
 801d120:	3b48      	subs	r3, #72	; 0x48
 801d122:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d126:	f04f 0200 	mov.w	r2, #0
 801d12a:	4b5a      	ldr	r3, [pc, #360]	; (801d294 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d12c:	f7e3 fa56 	bl	80005dc <__aeabi_dmul>
 801d130:	4602      	mov	r2, r0
 801d132:	460b      	mov	r3, r1
 801d134:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801d138:	00c9      	lsls	r1, r1, #3
 801d13a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d13e:	4401      	add	r1, r0
 801d140:	3948      	subs	r1, #72	; 0x48
 801d142:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 801d146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d14a:	3301      	adds	r3, #1
 801d14c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d154:	2b05      	cmp	r3, #5
 801d156:	dddd      	ble.n	801d114 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 801d158:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d15c:	f04f 0200 	mov.w	r2, #0
 801d160:	4b4c      	ldr	r3, [pc, #304]	; (801d294 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d162:	f7e3 fa3b 	bl	80005dc <__aeabi_dmul>
 801d166:	4602      	mov	r2, r0
 801d168:	460b      	mov	r3, r1
 801d16a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 801d16e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d172:	f04f 0200 	mov.w	r2, #0
 801d176:	4b47      	ldr	r3, [pc, #284]	; (801d294 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d178:	f7e3 fa30 	bl	80005dc <__aeabi_dmul>
 801d17c:	4602      	mov	r2, r0
 801d17e:	460b      	mov	r3, r1
 801d180:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 801d184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d188:	603a      	str	r2, [r7, #0]
 801d18a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d18e:	607b      	str	r3, [r7, #4]
 801d190:	f04f 0200 	mov.w	r2, #0
 801d194:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d198:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d19c:	f7e3 fc90 	bl	8000ac0 <__aeabi_dcmplt>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d003      	beq.n	801d1ae <UTMeanCovSqrt_C6QfB9Td+0x36a>
 801d1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d1aa:	2b13      	cmp	r3, #19
 801d1ac:	dda9      	ble.n	801d102 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 801d1ae:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 801d1b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1b6:	2202      	movs	r2, #2
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	2005      	movs	r0, #5
 801d1bc:	f005 f8c4 	bl	8022348 <xnrm2_7bm34mDQ>
 801d1c0:	eeb0 7a40 	vmov.f32	s14, s0
 801d1c4:	eef0 7a60 	vmov.f32	s15, s1
 801d1c8:	eeb0 1a47 	vmov.f32	s2, s14
 801d1cc:	eef0 1a67 	vmov.f32	s3, s15
 801d1d0:	eeb0 0a48 	vmov.f32	s0, s16
 801d1d4:	eef0 0a68 	vmov.f32	s1, s17
 801d1d8:	f002 fdda 	bl	801fd90 <rt_hypotd_snf>
 801d1dc:	eeb0 7a40 	vmov.f32	s14, s0
 801d1e0:	eef0 7a60 	vmov.f32	s15, s1
 801d1e4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 801d1e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d1ec:	f04f 0200 	mov.w	r2, #0
 801d1f0:	f04f 0300 	mov.w	r3, #0
 801d1f4:	f7e3 fc78 	bl	8000ae8 <__aeabi_dcmpge>
 801d1f8:	4603      	mov	r3, r0
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d006      	beq.n	801d20c <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 801d1fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d202:	4692      	mov	sl, r2
 801d204:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801d208:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 801d20c:	2300      	movs	r3, #0
 801d20e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d212:	e010      	b.n	801d236 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 801d214:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d218:	f04f 0200 	mov.w	r2, #0
 801d21c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d220:	f7e3 f9dc 	bl	80005dc <__aeabi_dmul>
 801d224:	4602      	mov	r2, r0
 801d226:	460b      	mov	r3, r1
 801d228:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 801d22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d230:	3301      	adds	r3, #1
 801d232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d236:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d23a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d23e:	429a      	cmp	r2, r3
 801d240:	dbe8      	blt.n	801d214 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 801d242:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d246:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801d24a:	e003      	b.n	801d254 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 801d24c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d250:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 801d254:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 801d258:	eeb0 0a47 	vmov.f32	s0, s14
 801d25c:	eef0 0a67 	vmov.f32	s1, s15
 801d260:	f002 fea4 	bl	801ffac <rtIsNaN>
 801d264:	4603      	mov	r3, r0
 801d266:	2b00      	cmp	r3, #0
 801d268:	d12b      	bne.n	801d2c2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 801d26a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d26e:	f04f 0200 	mov.w	r2, #0
 801d272:	f04f 0300 	mov.w	r3, #0
 801d276:	f7e3 fc23 	bl	8000ac0 <__aeabi_dcmplt>
 801d27a:	4603      	mov	r3, r0
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d00b      	beq.n	801d298 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 801d280:	f04f 0200 	mov.w	r2, #0
 801d284:	4b01      	ldr	r3, [pc, #4]	; (801d28c <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801d286:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801d28a:	e01a      	b.n	801d2c2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 801d28c:	bff00000 	.word	0xbff00000
 801d290:	3ff00000 	.word	0x3ff00000
 801d294:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801d298:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d29c:	f04f 0200 	mov.w	r2, #0
 801d2a0:	f04f 0300 	mov.w	r3, #0
 801d2a4:	f7e3 fc2a 	bl	8000afc <__aeabi_dcmpgt>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d003      	beq.n	801d2b6 <UTMeanCovSqrt_C6QfB9Td+0x472>
 801d2ae:	f04f 0200 	mov.w	r2, #0
 801d2b2:	4b99      	ldr	r3, [pc, #612]	; (801d518 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d2b4:	e003      	b.n	801d2be <UTMeanCovSqrt_C6QfB9Td+0x47a>
 801d2b6:	f04f 0200 	mov.w	r2, #0
 801d2ba:	f04f 0300 	mov.w	r3, #0
 801d2be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 801d2c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d2c6:	f04f 0200 	mov.w	r2, #0
 801d2ca:	4b93      	ldr	r3, [pc, #588]	; (801d518 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d2cc:	f7e3 fbee 	bl	8000aac <__aeabi_dcmpeq>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d021      	beq.n	801d31a <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 801d2d6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801d2da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d2de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d2e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	ed97 1b08 	vldr	d1, [r7, #32]
 801d2ec:	eeb0 0a47 	vmov.f32	s0, s14
 801d2f0:	eef0 0a67 	vmov.f32	s1, s15
 801d2f4:	f002 fbc2 	bl	801fa7c <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 801d2f8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d2fc:	f011 fb60 	bl	802e9c0 <sqrt>
 801d300:	ec51 0b10 	vmov	r0, r1, d0
 801d304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801d308:	f7e3 f968 	bl	80005dc <__aeabi_dmul>
 801d30c:	4602      	mov	r2, r0
 801d30e:	460b      	mov	r3, r1
 801d310:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d314:	e9c1 2300 	strd	r2, r3, [r1]
 801d318:	e016      	b.n	801d348 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 801d31a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d31e:	ed97 0b08 	vldr	d0, [r7, #32]
 801d322:	4618      	mov	r0, r3
 801d324:	f000 f8fa 	bl	801d51c <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 801d328:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d32c:	f011 fb48 	bl	802e9c0 <sqrt>
 801d330:	ec51 0b10 	vmov	r0, r1, d0
 801d334:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d338:	f7e3 f950 	bl	80005dc <__aeabi_dmul>
 801d33c:	4602      	mov	r2, r0
 801d33e:	460b      	mov	r3, r1
 801d340:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d344:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 801d348:	2300      	movs	r3, #0
 801d34a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d34e:	2300      	movs	r3, #0
 801d350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d354:	e054      	b.n	801d400 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 801d356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d35a:	00db      	lsls	r3, r3, #3
 801d35c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d360:	4413      	add	r3, r2
 801d362:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d366:	69bb      	ldr	r3, [r7, #24]
 801d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d36c:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d370:	00e4      	lsls	r4, r4, #3
 801d372:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d376:	442c      	add	r4, r5
 801d378:	f7e2 ff78 	bl	800026c <__aeabi_dsub>
 801d37c:	4602      	mov	r2, r0
 801d37e:	460b      	mov	r3, r1
 801d380:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 801d384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d388:	3301      	adds	r3, #1
 801d38a:	00db      	lsls	r3, r3, #3
 801d38c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d390:	4413      	add	r3, r2
 801d392:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d396:	69bb      	ldr	r3, [r7, #24]
 801d398:	3308      	adds	r3, #8
 801d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d39e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d3a2:	3401      	adds	r4, #1
 801d3a4:	00e4      	lsls	r4, r4, #3
 801d3a6:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d3aa:	442c      	add	r4, r5
 801d3ac:	f7e2 ff5e 	bl	800026c <__aeabi_dsub>
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	460b      	mov	r3, r1
 801d3b4:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 801d3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d3bc:	3302      	adds	r3, #2
 801d3be:	00db      	lsls	r3, r3, #3
 801d3c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d3c4:	4413      	add	r3, r2
 801d3c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d3ca:	69bb      	ldr	r3, [r7, #24]
 801d3cc:	3310      	adds	r3, #16
 801d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d3d6:	3402      	adds	r4, #2
 801d3d8:	00e4      	lsls	r4, r4, #3
 801d3da:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d3de:	442c      	add	r4, r5
 801d3e0:	f7e2 ff44 	bl	800026c <__aeabi_dsub>
 801d3e4:	4602      	mov	r2, r0
 801d3e6:	460b      	mov	r3, r1
 801d3e8:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 801d3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d3f0:	3303      	adds	r3, #3
 801d3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d3f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d3fa:	3301      	adds	r3, #1
 801d3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d400:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d404:	2b05      	cmp	r3, #5
 801d406:	dda6      	ble.n	801d356 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 801d408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d40c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801d410:	f7e3 f8e4 	bl	80005dc <__aeabi_dmul>
 801d414:	4602      	mov	r2, r0
 801d416:	460b      	mov	r3, r1
 801d418:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 801d41c:	2300      	movs	r3, #0
 801d41e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d422:	e06c      	b.n	801d4fe <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 801d424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d428:	00db      	lsls	r3, r3, #3
 801d42a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d42e:	4413      	add	r3, r2
 801d430:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 801d434:	f04f 0200 	mov.w	r2, #0
 801d438:	f04f 0300 	mov.w	r3, #0
 801d43c:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 801d440:	2300      	movs	r3, #0
 801d442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d446:	2300      	movs	r3, #0
 801d448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d44c:	e037      	b.n	801d4be <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 801d44e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d452:	00db      	lsls	r3, r3, #3
 801d454:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d458:	4413      	add	r3, r2
 801d45a:	3b60      	subs	r3, #96	; 0x60
 801d45c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d468:	4413      	add	r3, r2
 801d46a:	00db      	lsls	r3, r3, #3
 801d46c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d470:	4413      	add	r3, r2
 801d472:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d47a:	00db      	lsls	r3, r3, #3
 801d47c:	69fa      	ldr	r2, [r7, #28]
 801d47e:	4413      	add	r3, r2
 801d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d484:	f7e3 f8aa 	bl	80005dc <__aeabi_dmul>
 801d488:	4602      	mov	r2, r0
 801d48a:	460b      	mov	r3, r1
 801d48c:	4620      	mov	r0, r4
 801d48e:	4629      	mov	r1, r5
 801d490:	f7e2 feee 	bl	8000270 <__adddf3>
 801d494:	4602      	mov	r2, r0
 801d496:	460b      	mov	r3, r1
 801d498:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d49c:	00c9      	lsls	r1, r1, #3
 801d49e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d4a2:	4401      	add	r1, r0
 801d4a4:	3960      	subs	r1, #96	; 0x60
 801d4a6:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 801d4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d4ae:	3303      	adds	r3, #3
 801d4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d4b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d4b8:	3301      	adds	r3, #1
 801d4ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d4be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d4c2:	2b05      	cmp	r3, #5
 801d4c4:	ddc3      	ble.n	801d44e <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 801d4c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d4ca:	00db      	lsls	r3, r3, #3
 801d4cc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d4d0:	4413      	add	r3, r2
 801d4d2:	3b60      	subs	r3, #96	; 0x60
 801d4d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d4d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d4dc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 801d4e0:	00e4      	lsls	r4, r4, #3
 801d4e2:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 801d4e6:	442c      	add	r4, r5
 801d4e8:	f7e3 f878 	bl	80005dc <__aeabi_dmul>
 801d4ec:	4602      	mov	r2, r0
 801d4ee:	460b      	mov	r3, r1
 801d4f0:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 801d4f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d4f8:	3301      	adds	r3, #1
 801d4fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d4fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d502:	2b02      	cmp	r3, #2
 801d504:	dd8e      	ble.n	801d424 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 801d506:	bf00      	nop
 801d508:	bf00      	nop
 801d50a:	37b0      	adds	r7, #176	; 0xb0
 801d50c:	46bd      	mov	sp, r7
 801d50e:	ecbd 8b02 	vpop	{d8}
 801d512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d516:	bf00      	nop
 801d518:	3ff00000 	.word	0x3ff00000

0801d51c <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 801d51c:	b5b0      	push	{r4, r5, r7, lr}
 801d51e:	b090      	sub	sp, #64	; 0x40
 801d520:	af00      	add	r7, sp, #0
 801d522:	60f8      	str	r0, [r7, #12]
 801d524:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d52e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 801d532:	2300      	movs	r3, #0
 801d534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d53e:	f04f 0200 	mov.w	r2, #0
 801d542:	f04f 0300 	mov.w	r3, #0
 801d546:	f7e3 fab1 	bl	8000aac <__aeabi_dcmpeq>
 801d54a:	4603      	mov	r3, r0
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d003      	beq.n	801d558 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 801d550:	2302      	movs	r3, #2
 801d552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d556:	e065      	b.n	801d624 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d55e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d562:	f7e3 f965 	bl	8000830 <__aeabi_ddiv>
 801d566:	4602      	mov	r2, r0
 801d568:	460b      	mov	r3, r1
 801d56a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 801d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d570:	63bb      	str	r3, [r7, #56]	; 0x38
 801d572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d578:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 801d57a:	f04f 0200 	mov.w	r2, #0
 801d57e:	4b5c      	ldr	r3, [pc, #368]	; (801d6f0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d580:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d584:	f7e3 fab0 	bl	8000ae8 <__aeabi_dcmpge>
 801d588:	4603      	mov	r3, r0
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d003      	beq.n	801d596 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 801d58e:	2301      	movs	r3, #1
 801d590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d594:	e046      	b.n	801d624 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 801d596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d59a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d59e:	f7e3 f81d 	bl	80005dc <__aeabi_dmul>
 801d5a2:	4602      	mov	r2, r0
 801d5a4:	460b      	mov	r3, r1
 801d5a6:	f04f 0000 	mov.w	r0, #0
 801d5aa:	4951      	ldr	r1, [pc, #324]	; (801d6f0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d5ac:	f7e2 fe5e 	bl	800026c <__aeabi_dsub>
 801d5b0:	4602      	mov	r2, r0
 801d5b2:	460b      	mov	r3, r1
 801d5b4:	ec43 2b17 	vmov	d7, r2, r3
 801d5b8:	eeb0 0a47 	vmov.f32	s0, s14
 801d5bc:	eef0 0a67 	vmov.f32	s1, s15
 801d5c0:	f011 f9fe 	bl	802e9c0 <sqrt>
 801d5c4:	eeb0 7a40 	vmov.f32	s14, s0
 801d5c8:	eef0 7a60 	vmov.f32	s15, s1
 801d5cc:	f107 0218 	add.w	r2, r7, #24
 801d5d0:	f107 0110 	add.w	r1, r7, #16
 801d5d4:	f107 0320 	add.w	r3, r7, #32
 801d5d8:	4618      	mov	r0, r3
 801d5da:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 801d5de:	eeb0 0a47 	vmov.f32	s0, s14
 801d5e2:	eef0 0a67 	vmov.f32	s1, s15
 801d5e6:	f002 fa49 	bl	801fa7c <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d5f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d5f4:	f7e2 fff2 	bl	80005dc <__aeabi_dmul>
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	4614      	mov	r4, r2
 801d5fe:	461d      	mov	r5, r3
 801d600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d604:	f04f 0200 	mov.w	r2, #0
 801d608:	f04f 0300 	mov.w	r3, #0
 801d60c:	f7e2 ffe6 	bl	80005dc <__aeabi_dmul>
 801d610:	4602      	mov	r2, r0
 801d612:	460b      	mov	r3, r1
 801d614:	4620      	mov	r0, r4
 801d616:	4629      	mov	r1, r5
 801d618:	f7e2 fe28 	bl	800026c <__aeabi_dsub>
 801d61c:	4602      	mov	r2, r0
 801d61e:	460b      	mov	r3, r1
 801d620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 801d624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d628:	68f9      	ldr	r1, [r7, #12]
 801d62a:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 801d62e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801d632:	2b00      	cmp	r3, #0
 801d634:	d057      	beq.n	801d6e6 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 801d636:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d63a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d63e:	f7e2 ffcd 	bl	80005dc <__aeabi_dmul>
 801d642:	4602      	mov	r2, r0
 801d644:	460b      	mov	r3, r1
 801d646:	4614      	mov	r4, r2
 801d648:	461d      	mov	r5, r3
 801d64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d64e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d652:	f7e2 ffc3 	bl	80005dc <__aeabi_dmul>
 801d656:	4602      	mov	r2, r0
 801d658:	460b      	mov	r3, r1
 801d65a:	4620      	mov	r0, r4
 801d65c:	4629      	mov	r1, r5
 801d65e:	f7e2 fe05 	bl	800026c <__aeabi_dsub>
 801d662:	4602      	mov	r2, r0
 801d664:	460b      	mov	r3, r1
 801d666:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 801d66a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d66e:	f002 fc79 	bl	801ff64 <rtIsInf>
 801d672:	4603      	mov	r3, r0
 801d674:	2b00      	cmp	r3, #0
 801d676:	d11d      	bne.n	801d6b4 <cholUpdateFactor_HBMX5a5h+0x198>
 801d678:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d67c:	f002 fc96 	bl	801ffac <rtIsNaN>
 801d680:	4603      	mov	r3, r0
 801d682:	2b00      	cmp	r3, #0
 801d684:	d116      	bne.n	801d6b4 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 801d686:	f04f 0200 	mov.w	r2, #0
 801d68a:	4b19      	ldr	r3, [pc, #100]	; (801d6f0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d68c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 801d690:	f04f 0200 	mov.w	r2, #0
 801d694:	f04f 0300 	mov.w	r3, #0
 801d698:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801d69c:	f7e3 fa06 	bl	8000aac <__aeabi_dcmpeq>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d110      	bne.n	801d6c8 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 801d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6a8:	633b      	str	r3, [r7, #48]	; 0x30
 801d6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d6b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 801d6b2:	e009      	b.n	801d6c8 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 801d6b4:	4b0f      	ldr	r3, [pc, #60]	; (801d6f4 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 801d6be:	4b0d      	ldr	r3, [pc, #52]	; (801d6f4 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 801d6c8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d6cc:	f011 f978 	bl	802e9c0 <sqrt>
 801d6d0:	ec51 0b10 	vmov	r0, r1, d0
 801d6d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d6d8:	f7e2 ff80 	bl	80005dc <__aeabi_dmul>
 801d6dc:	4602      	mov	r2, r0
 801d6de:	460b      	mov	r3, r1
 801d6e0:	68f9      	ldr	r1, [r7, #12]
 801d6e2:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 801d6e6:	bf00      	nop
 801d6e8:	3740      	adds	r7, #64	; 0x40
 801d6ea:	46bd      	mov	sp, r7
 801d6ec:	bdb0      	pop	{r4, r5, r7, pc}
 801d6ee:	bf00      	nop
 801d6f0:	3ff00000 	.word	0x3ff00000
 801d6f4:	2001ed68 	.word	0x2001ed68

0801d6f8 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 801d6f8:	b5b0      	push	{r4, r5, r7, lr}
 801d6fa:	b08e      	sub	sp, #56	; 0x38
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	ed87 0b04 	vstr	d0, [r7, #16]
 801d702:	60f8      	str	r0, [r7, #12]
 801d704:	60b9      	str	r1, [r7, #8]
 801d706:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d712:	f7e3 f9df 	bl	8000ad4 <__aeabi_dcmple>
 801d716:	4603      	mov	r3, r0
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d020      	beq.n	801d75e <look1_binlxpw+0x66>
    iLeft = 0U;
 801d71c:	2300      	movs	r3, #0
 801d71e:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d72a:	f7e2 fd9f 	bl	800026c <__aeabi_dsub>
 801d72e:	4602      	mov	r2, r0
 801d730:	460b      	mov	r3, r1
 801d732:	4614      	mov	r4, r2
 801d734:	461d      	mov	r5, r3
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	3308      	adds	r3, #8
 801d73a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d744:	f7e2 fd92 	bl	800026c <__aeabi_dsub>
 801d748:	4602      	mov	r2, r0
 801d74a:	460b      	mov	r3, r1
 801d74c:	4620      	mov	r0, r4
 801d74e:	4629      	mov	r1, r5
 801d750:	f7e3 f86e 	bl	8000830 <__aeabi_ddiv>
 801d754:	4602      	mov	r2, r0
 801d756:	460b      	mov	r3, r1
 801d758:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801d75c:	e087      	b.n	801d86e <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	00db      	lsls	r3, r3, #3
 801d762:	68fa      	ldr	r2, [r7, #12]
 801d764:	4413      	add	r3, r2
 801d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d76a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d76e:	f7e3 f9a7 	bl	8000ac0 <__aeabi_dcmplt>
 801d772:	4603      	mov	r3, r0
 801d774:	2b00      	cmp	r3, #0
 801d776:	d04b      	beq.n	801d810 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	085b      	lsrs	r3, r3, #1
 801d77c:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 801d77e:	2300      	movs	r3, #0
 801d780:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 801d786:	e016      	b.n	801d7b6 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 801d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d78a:	00db      	lsls	r3, r3, #3
 801d78c:	68fa      	ldr	r2, [r7, #12]
 801d78e:	4413      	add	r3, r2
 801d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d798:	f7e3 f992 	bl	8000ac0 <__aeabi_dcmplt>
 801d79c:	4603      	mov	r3, r0
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d002      	beq.n	801d7a8 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 801d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7a4:	627b      	str	r3, [r7, #36]	; 0x24
 801d7a6:	e001      	b.n	801d7ac <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 801d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 801d7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7b0:	4413      	add	r3, r2
 801d7b2:	085b      	lsrs	r3, r3, #1
 801d7b4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 801d7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ba:	1ad3      	subs	r3, r2, r3
 801d7bc:	2b01      	cmp	r3, #1
 801d7be:	d8e3      	bhi.n	801d788 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 801d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7c2:	00db      	lsls	r3, r3, #3
 801d7c4:	68fa      	ldr	r2, [r7, #12]
 801d7c6:	4413      	add	r3, r2
 801d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d7d0:	f7e2 fd4c 	bl	800026c <__aeabi_dsub>
 801d7d4:	4602      	mov	r2, r0
 801d7d6:	460b      	mov	r3, r1
 801d7d8:	4614      	mov	r4, r2
 801d7da:	461d      	mov	r5, r3
 801d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7de:	3301      	adds	r3, #1
 801d7e0:	00db      	lsls	r3, r3, #3
 801d7e2:	68fa      	ldr	r2, [r7, #12]
 801d7e4:	4413      	add	r3, r2
 801d7e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ec:	00db      	lsls	r3, r3, #3
 801d7ee:	68fa      	ldr	r2, [r7, #12]
 801d7f0:	4413      	add	r3, r2
 801d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f6:	f7e2 fd39 	bl	800026c <__aeabi_dsub>
 801d7fa:	4602      	mov	r2, r0
 801d7fc:	460b      	mov	r3, r1
 801d7fe:	4620      	mov	r0, r4
 801d800:	4629      	mov	r1, r5
 801d802:	f7e3 f815 	bl	8000830 <__aeabi_ddiv>
 801d806:	4602      	mov	r2, r0
 801d808:	460b      	mov	r3, r1
 801d80a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801d80e:	e02e      	b.n	801d86e <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	3b01      	subs	r3, #1
 801d814:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801d81c:	3b01      	subs	r3, #1
 801d81e:	00db      	lsls	r3, r3, #3
 801d820:	68fa      	ldr	r2, [r7, #12]
 801d822:	4413      	add	r3, r2
 801d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d828:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d82c:	f7e2 fd1e 	bl	800026c <__aeabi_dsub>
 801d830:	4602      	mov	r2, r0
 801d832:	460b      	mov	r3, r1
 801d834:	4614      	mov	r4, r2
 801d836:	461d      	mov	r5, r3
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	00db      	lsls	r3, r3, #3
 801d83c:	68fa      	ldr	r2, [r7, #12]
 801d83e:	4413      	add	r3, r2
 801d840:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801d84a:	3b01      	subs	r3, #1
 801d84c:	00db      	lsls	r3, r3, #3
 801d84e:	68fa      	ldr	r2, [r7, #12]
 801d850:	4413      	add	r3, r2
 801d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d856:	f7e2 fd09 	bl	800026c <__aeabi_dsub>
 801d85a:	4602      	mov	r2, r0
 801d85c:	460b      	mov	r3, r1
 801d85e:	4620      	mov	r0, r4
 801d860:	4629      	mov	r1, r5
 801d862:	f7e2 ffe5 	bl	8000830 <__aeabi_ddiv>
 801d866:	4602      	mov	r2, r0
 801d868:	460b      	mov	r3, r1
 801d86a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 801d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d870:	00db      	lsls	r3, r3, #3
 801d872:	68ba      	ldr	r2, [r7, #8]
 801d874:	4413      	add	r3, r2
 801d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d87a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 801d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d880:	3301      	adds	r3, #1
 801d882:	00db      	lsls	r3, r3, #3
 801d884:	68ba      	ldr	r2, [r7, #8]
 801d886:	4413      	add	r3, r2
 801d888:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d88c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d890:	f7e2 fcec 	bl	800026c <__aeabi_dsub>
 801d894:	4602      	mov	r2, r0
 801d896:	460b      	mov	r3, r1
 801d898:	4610      	mov	r0, r2
 801d89a:	4619      	mov	r1, r3
 801d89c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801d8a0:	f7e2 fe9c 	bl	80005dc <__aeabi_dmul>
 801d8a4:	4602      	mov	r2, r0
 801d8a6:	460b      	mov	r3, r1
 801d8a8:	4610      	mov	r0, r2
 801d8aa:	4619      	mov	r1, r3
 801d8ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d8b0:	f7e2 fcde 	bl	8000270 <__adddf3>
 801d8b4:	4602      	mov	r2, r0
 801d8b6:	460b      	mov	r3, r1
 801d8b8:	ec43 2b17 	vmov	d7, r2, r3
}
 801d8bc:	eeb0 0a47 	vmov.f32	s0, s14
 801d8c0:	eef0 0a67 	vmov.f32	s1, s15
 801d8c4:	3738      	adds	r7, #56	; 0x38
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d8cc <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 801d8cc:	b5b0      	push	{r4, r5, r7, lr}
 801d8ce:	b0c0      	sub	sp, #256	; 0x100
 801d8d0:	af04      	add	r7, sp, #16
 801d8d2:	6578      	str	r0, [r7, #84]	; 0x54
 801d8d4:	6539      	str	r1, [r7, #80]	; 0x50
 801d8d6:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 801d8d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d8dc:	2248      	movs	r2, #72	; 0x48
 801d8de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	f010 fea7 	bl	802e634 <memcpy>
  tau_idx_0 = 0.0;
 801d8e6:	f04f 0200 	mov.w	r2, #0
 801d8ea:	f04f 0300 	mov.w	r3, #0
 801d8ee:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 801d8f2:	f04f 0200 	mov.w	r2, #0
 801d8f6:	f04f 0300 	mov.w	r3, #0
 801d8fa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 801d8fe:	f04f 0200 	mov.w	r2, #0
 801d902:	f04f 0300 	mov.w	r3, #0
 801d906:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 801d90a:	f04f 0200 	mov.w	r2, #0
 801d90e:	f04f 0300 	mov.w	r3, #0
 801d912:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 801d916:	f04f 0200 	mov.w	r2, #0
 801d91a:	f04f 0300 	mov.w	r3, #0
 801d91e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 801d922:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801d926:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 801d92a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d92e:	2202      	movs	r2, #2
 801d930:	4619      	mov	r1, r3
 801d932:	2002      	movs	r0, #2
 801d934:	f004 ffc0 	bl	80228b8 <xnrm2_xDOlDEtw>
 801d938:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801d93c:	f04f 0200 	mov.w	r2, #0
 801d940:	f04f 0300 	mov.w	r3, #0
 801d944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801d948:	f7e3 f8b0 	bl	8000aac <__aeabi_dcmpeq>
 801d94c:	4603      	mov	r3, r0
 801d94e:	2b00      	cmp	r3, #0
 801d950:	f040 8172 	bne.w	801dc38 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801d954:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 801d958:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801d95c:	eeb0 0a47 	vmov.f32	s0, s14
 801d960:	eef0 0a67 	vmov.f32	s1, s15
 801d964:	f002 fa14 	bl	801fd90 <rt_hypotd_snf>
 801d968:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 801d96c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801d970:	f04f 0200 	mov.w	r2, #0
 801d974:	f04f 0300 	mov.w	r3, #0
 801d978:	f7e3 f8b6 	bl	8000ae8 <__aeabi_dcmpge>
 801d97c:	4603      	mov	r3, r0
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d009      	beq.n	801d996 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 801d982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801d986:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801d98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d98e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801d996:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 801d99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801d99e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801d9a2:	f04f 0200 	mov.w	r2, #0
 801d9a6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d9aa:	4620      	mov	r0, r4
 801d9ac:	4629      	mov	r1, r5
 801d9ae:	f7e3 f887 	bl	8000ac0 <__aeabi_dcmplt>
 801d9b2:	4603      	mov	r3, r0
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	f000 80f1 	beq.w	801db9c <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801d9c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801d9c4:	3301      	adds	r3, #1
 801d9c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801d9ca:	2301      	movs	r3, #1
 801d9cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801d9d0:	e01f      	b.n	801da12 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801d9d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d9d6:	00db      	lsls	r3, r3, #3
 801d9d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801d9dc:	4413      	add	r3, r2
 801d9de:	3b80      	subs	r3, #128	; 0x80
 801d9e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d9e4:	f04f 0200 	mov.w	r2, #0
 801d9e8:	4bc9      	ldr	r3, [pc, #804]	; (801dd10 <qr_5a2P8Gh6+0x444>)
 801d9ea:	f7e2 fdf7 	bl	80005dc <__aeabi_dmul>
 801d9ee:	4602      	mov	r2, r0
 801d9f0:	460b      	mov	r3, r1
 801d9f2:	4610      	mov	r0, r2
 801d9f4:	4619      	mov	r1, r3
 801d9f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d9fa:	00db      	lsls	r3, r3, #3
 801d9fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801da00:	4413      	add	r3, r2
 801da02:	3b80      	subs	r3, #128	; 0x80
 801da04:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801da08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da0c:	3301      	adds	r3, #1
 801da0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801da12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da16:	2b02      	cmp	r3, #2
 801da18:	dddb      	ble.n	801d9d2 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 801da1a:	f04f 0200 	mov.w	r2, #0
 801da1e:	4bbc      	ldr	r3, [pc, #752]	; (801dd10 <qr_5a2P8Gh6+0x444>)
 801da20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801da24:	f7e2 fdda 	bl	80005dc <__aeabi_dmul>
 801da28:	4602      	mov	r2, r0
 801da2a:	460b      	mov	r3, r1
 801da2c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801da30:	f04f 0200 	mov.w	r2, #0
 801da34:	4bb6      	ldr	r3, [pc, #728]	; (801dd10 <qr_5a2P8Gh6+0x444>)
 801da36:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801da3a:	f7e2 fdcf 	bl	80005dc <__aeabi_dmul>
 801da3e:	4602      	mov	r2, r0
 801da40:	460b      	mov	r3, r1
 801da42:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801da46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801da4a:	643b      	str	r3, [r7, #64]	; 0x40
 801da4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801da50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801da54:	647b      	str	r3, [r7, #68]	; 0x44
 801da56:	f04f 0200 	mov.w	r2, #0
 801da5a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801da5e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801da62:	f7e3 f82d 	bl	8000ac0 <__aeabi_dcmplt>
 801da66:	4603      	mov	r3, r0
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d003      	beq.n	801da74 <qr_5a2P8Gh6+0x1a8>
 801da6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801da70:	2b13      	cmp	r3, #19
 801da72:	dda5      	ble.n	801d9c0 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 801da74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801da78:	2202      	movs	r2, #2
 801da7a:	4619      	mov	r1, r3
 801da7c:	2002      	movs	r0, #2
 801da7e:	f004 ff1b 	bl	80228b8 <xnrm2_xDOlDEtw>
 801da82:	eeb0 7a40 	vmov.f32	s14, s0
 801da86:	eef0 7a60 	vmov.f32	s15, s1
 801da8a:	eeb0 1a47 	vmov.f32	s2, s14
 801da8e:	eef0 1a67 	vmov.f32	s3, s15
 801da92:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801da96:	f002 f97b 	bl	801fd90 <rt_hypotd_snf>
 801da9a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801da9e:	f04f 0200 	mov.w	r2, #0
 801daa2:	f04f 0300 	mov.w	r3, #0
 801daa6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801daaa:	f7e3 f81d 	bl	8000ae8 <__aeabi_dcmpge>
 801daae:	4603      	mov	r3, r0
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d009      	beq.n	801dac8 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 801dab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801dabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dac0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801dac8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dacc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dad0:	f7e2 fbcc 	bl	800026c <__aeabi_dsub>
 801dad4:	4602      	mov	r2, r0
 801dad6:	460b      	mov	r3, r1
 801dad8:	4610      	mov	r0, r2
 801dada:	4619      	mov	r1, r3
 801dadc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dae0:	f7e2 fea6 	bl	8000830 <__aeabi_ddiv>
 801dae4:	4602      	mov	r2, r0
 801dae6:	460b      	mov	r3, r1
 801dae8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 801daec:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801daf0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801daf4:	f7e2 fbba 	bl	800026c <__aeabi_dsub>
 801daf8:	4602      	mov	r2, r0
 801dafa:	460b      	mov	r3, r1
 801dafc:	f04f 0000 	mov.w	r0, #0
 801db00:	4984      	ldr	r1, [pc, #528]	; (801dd14 <qr_5a2P8Gh6+0x448>)
 801db02:	f7e2 fe95 	bl	8000830 <__aeabi_ddiv>
 801db06:	4602      	mov	r2, r0
 801db08:	460b      	mov	r3, r1
 801db0a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801db0e:	2301      	movs	r3, #1
 801db10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801db14:	e01e      	b.n	801db54 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 801db16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801db1a:	00db      	lsls	r3, r3, #3
 801db1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801db20:	4413      	add	r3, r2
 801db22:	3b80      	subs	r3, #128	; 0x80
 801db24:	e9d3 0100 	ldrd	r0, r1, [r3]
 801db28:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801db2c:	f7e2 fd56 	bl	80005dc <__aeabi_dmul>
 801db30:	4602      	mov	r2, r0
 801db32:	460b      	mov	r3, r1
 801db34:	4610      	mov	r0, r2
 801db36:	4619      	mov	r1, r3
 801db38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801db3c:	00db      	lsls	r3, r3, #3
 801db3e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801db42:	4413      	add	r3, r2
 801db44:	3b80      	subs	r3, #128	; 0x80
 801db46:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801db4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801db4e:	3301      	adds	r3, #1
 801db50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801db54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801db58:	2b02      	cmp	r3, #2
 801db5a:	dddc      	ble.n	801db16 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801db5c:	2300      	movs	r3, #0
 801db5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801db62:	e010      	b.n	801db86 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 801db64:	f04f 0200 	mov.w	r2, #0
 801db68:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801db6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801db70:	f7e2 fd34 	bl	80005dc <__aeabi_dmul>
 801db74:	4602      	mov	r2, r0
 801db76:	460b      	mov	r3, r1
 801db78:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801db7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801db80:	3301      	adds	r3, #1
 801db82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801db86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801db8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801db8e:	429a      	cmp	r2, r3
 801db90:	dbe8      	blt.n	801db64 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 801db92:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801db96:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801db9a:	e04d      	b.n	801dc38 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801db9c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801dba0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dba4:	f7e2 fb62 	bl	800026c <__aeabi_dsub>
 801dba8:	4602      	mov	r2, r0
 801dbaa:	460b      	mov	r3, r1
 801dbac:	4610      	mov	r0, r2
 801dbae:	4619      	mov	r1, r3
 801dbb0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dbb4:	f7e2 fe3c 	bl	8000830 <__aeabi_ddiv>
 801dbb8:	4602      	mov	r2, r0
 801dbba:	460b      	mov	r3, r1
 801dbbc:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 801dbc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801dbc4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dbc8:	f7e2 fb50 	bl	800026c <__aeabi_dsub>
 801dbcc:	4602      	mov	r2, r0
 801dbce:	460b      	mov	r3, r1
 801dbd0:	f04f 0000 	mov.w	r0, #0
 801dbd4:	494f      	ldr	r1, [pc, #316]	; (801dd14 <qr_5a2P8Gh6+0x448>)
 801dbd6:	f7e2 fe2b 	bl	8000830 <__aeabi_ddiv>
 801dbda:	4602      	mov	r2, r0
 801dbdc:	460b      	mov	r3, r1
 801dbde:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dbe8:	e01e      	b.n	801dc28 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 801dbea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dbee:	00db      	lsls	r3, r3, #3
 801dbf0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dbf4:	4413      	add	r3, r2
 801dbf6:	3b80      	subs	r3, #128	; 0x80
 801dbf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dbfc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dc00:	f7e2 fcec 	bl	80005dc <__aeabi_dmul>
 801dc04:	4602      	mov	r2, r0
 801dc06:	460b      	mov	r3, r1
 801dc08:	4610      	mov	r0, r2
 801dc0a:	4619      	mov	r1, r3
 801dc0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc10:	00db      	lsls	r3, r3, #3
 801dc12:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dc16:	4413      	add	r3, r2
 801dc18:	3b80      	subs	r3, #128	; 0x80
 801dc1a:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801dc1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc22:	3301      	adds	r3, #1
 801dc24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dc28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc2c:	2b02      	cmp	r3, #2
 801dc2e:	dddc      	ble.n	801dbea <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 801dc30:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dc34:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 801dc38:	f04f 0200 	mov.w	r2, #0
 801dc3c:	4b35      	ldr	r3, [pc, #212]	; (801dd14 <qr_5a2P8Gh6+0x448>)
 801dc3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801dc42:	f04f 0200 	mov.w	r2, #0
 801dc46:	f04f 0300 	mov.w	r3, #0
 801dc4a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801dc4e:	f7e2 ff2d 	bl	8000aac <__aeabi_dcmpeq>
 801dc52:	4603      	mov	r3, r0
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	f040 8081 	bne.w	801dd5c <qr_5a2P8Gh6+0x490>
    knt = 3;
 801dc5a:	2303      	movs	r3, #3
 801dc5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 801dc60:	2302      	movs	r3, #2
 801dc62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801dc66:	e009      	b.n	801dc7c <qr_5a2P8Gh6+0x3b0>
      knt--;
 801dc68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dc6c:	3b01      	subs	r3, #1
 801dc6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801dc72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc76:	3b01      	subs	r3, #1
 801dc78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801dc7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	dd11      	ble.n	801dca8 <qr_5a2P8Gh6+0x3dc>
 801dc84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dc88:	00db      	lsls	r3, r3, #3
 801dc8a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dc8e:	4413      	add	r3, r2
 801dc90:	3b80      	subs	r3, #128	; 0x80
 801dc92:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dc96:	f04f 0200 	mov.w	r2, #0
 801dc9a:	f04f 0300 	mov.w	r3, #0
 801dc9e:	f7e2 ff05 	bl	8000aac <__aeabi_dcmpeq>
 801dca2:	4603      	mov	r3, r0
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d1df      	bne.n	801dc68 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 801dca8:	2302      	movs	r3, #2
 801dcaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801dcb4:	e049      	b.n	801dd4a <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 801dcb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801dcba:	4613      	mov	r3, r2
 801dcbc:	005b      	lsls	r3, r3, #1
 801dcbe:	4413      	add	r3, r2
 801dcc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 801dcc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dcc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 801dccc:	2300      	movs	r3, #0
 801dcce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 801dcd2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801dcd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dcda:	441a      	add	r2, r3
 801dcdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dce0:	4293      	cmp	r3, r2
 801dce2:	da1f      	bge.n	801dd24 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 801dce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dce8:	00db      	lsls	r3, r3, #3
 801dcea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dcee:	4413      	add	r3, r2
 801dcf0:	3b80      	subs	r3, #128	; 0x80
 801dcf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dcf6:	f04f 0200 	mov.w	r2, #0
 801dcfa:	f04f 0300 	mov.w	r3, #0
 801dcfe:	f7e2 fed5 	bl	8000aac <__aeabi_dcmpeq>
 801dd02:	4603      	mov	r3, r0
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d107      	bne.n	801dd18 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 801dd08:	2301      	movs	r3, #1
 801dd0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801dd0e:	e011      	b.n	801dd34 <qr_5a2P8Gh6+0x468>
 801dd10:	7c900000 	.word	0x7c900000
 801dd14:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801dd18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801dd1c:	3301      	adds	r3, #1
 801dd1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801dd22:	e007      	b.n	801dd34 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 801dd24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dd28:	3b01      	subs	r3, #1
 801dd2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 801dd2e:	2302      	movs	r3, #2
 801dd30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801dd34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d0c7      	beq.n	801dccc <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 801dd3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801dd40:	2b01      	cmp	r3, #1
 801dd42:	d102      	bne.n	801dd4a <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 801dd44:	2301      	movs	r3, #1
 801dd46:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801dd4a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d10a      	bne.n	801dd68 <qr_5a2P8Gh6+0x49c>
 801dd52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	dcad      	bgt.n	801dcb6 <qr_5a2P8Gh6+0x3ea>
 801dd5a:	e005      	b.n	801dd68 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801dd62:	2300      	movs	r3, #0
 801dd64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801dd68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	dd29      	ble.n	801ddc4 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 801dd70:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801dd74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dd78:	9302      	str	r3, [sp, #8]
 801dd7a:	2301      	movs	r3, #1
 801dd7c:	9301      	str	r3, [sp, #4]
 801dd7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dd82:	9300      	str	r3, [sp, #0]
 801dd84:	2304      	movs	r3, #4
 801dd86:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801dd8a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801dd8e:	f004 f94f 	bl	8022030 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 801dd92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801dd96:	63bb      	str	r3, [r7, #56]	; 0x38
 801dd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801dd9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dda2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801dda6:	2304      	movs	r3, #4
 801dda8:	9301      	str	r3, [sp, #4]
 801ddaa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ddae:	9300      	str	r3, [sp, #0]
 801ddb0:	4613      	mov	r3, r2
 801ddb2:	2201      	movs	r2, #1
 801ddb4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801ddb8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801ddbc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801ddc0:	f004 fa3f 	bl	8022242 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 801ddc4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801ddc8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 801ddcc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801ddd0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 801ddd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ddd8:	2206      	movs	r2, #6
 801ddda:	4619      	mov	r1, r3
 801dddc:	2001      	movs	r0, #1
 801ddde:	f004 fd6b 	bl	80228b8 <xnrm2_xDOlDEtw>
 801dde2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801dde6:	f04f 0200 	mov.w	r2, #0
 801ddea:	f04f 0300 	mov.w	r3, #0
 801ddee:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801ddf2:	f7e2 fe5b 	bl	8000aac <__aeabi_dcmpeq>
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	f040 8170 	bne.w	801e0de <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 801ddfe:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 801de02:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801de06:	eeb0 0a47 	vmov.f32	s0, s14
 801de0a:	eef0 0a67 	vmov.f32	s1, s15
 801de0e:	f001 ffbf 	bl	801fd90 <rt_hypotd_snf>
 801de12:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 801de16:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801de1a:	f04f 0200 	mov.w	r2, #0
 801de1e:	f04f 0300 	mov.w	r3, #0
 801de22:	f7e2 fe61 	bl	8000ae8 <__aeabi_dcmpge>
 801de26:	4603      	mov	r3, r0
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d009      	beq.n	801de40 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 801de2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801de30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801de34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801de38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801de3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801de40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801de44:	633b      	str	r3, [r7, #48]	; 0x30
 801de46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801de4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801de4e:	637b      	str	r3, [r7, #52]	; 0x34
 801de50:	f04f 0200 	mov.w	r2, #0
 801de54:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801de58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801de5c:	f7e2 fe30 	bl	8000ac0 <__aeabi_dcmplt>
 801de60:	4603      	mov	r3, r0
 801de62:	2b00      	cmp	r3, #0
 801de64:	f000 80ef 	beq.w	801e046 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 801de68:	2300      	movs	r3, #0
 801de6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801de6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801de72:	3301      	adds	r3, #1
 801de74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801de78:	2305      	movs	r3, #5
 801de7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801de7e:	e01f      	b.n	801dec0 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801de80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801de84:	00db      	lsls	r3, r3, #3
 801de86:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801de8a:	4413      	add	r3, r2
 801de8c:	3b80      	subs	r3, #128	; 0x80
 801de8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801de92:	f04f 0200 	mov.w	r2, #0
 801de96:	4bc9      	ldr	r3, [pc, #804]	; (801e1bc <qr_5a2P8Gh6+0x8f0>)
 801de98:	f7e2 fba0 	bl	80005dc <__aeabi_dmul>
 801de9c:	4602      	mov	r2, r0
 801de9e:	460b      	mov	r3, r1
 801dea0:	4610      	mov	r0, r2
 801dea2:	4619      	mov	r1, r3
 801dea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dea8:	00db      	lsls	r3, r3, #3
 801deaa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801deae:	4413      	add	r3, r2
 801deb0:	3b80      	subs	r3, #128	; 0x80
 801deb2:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801deb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801deba:	3301      	adds	r3, #1
 801debc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dec4:	2b05      	cmp	r3, #5
 801dec6:	dddb      	ble.n	801de80 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 801dec8:	f04f 0200 	mov.w	r2, #0
 801decc:	4bbb      	ldr	r3, [pc, #748]	; (801e1bc <qr_5a2P8Gh6+0x8f0>)
 801dece:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801ded2:	f7e2 fb83 	bl	80005dc <__aeabi_dmul>
 801ded6:	4602      	mov	r2, r0
 801ded8:	460b      	mov	r3, r1
 801deda:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801dede:	f04f 0200 	mov.w	r2, #0
 801dee2:	4bb6      	ldr	r3, [pc, #728]	; (801e1bc <qr_5a2P8Gh6+0x8f0>)
 801dee4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dee8:	f7e2 fb78 	bl	80005dc <__aeabi_dmul>
 801deec:	4602      	mov	r2, r0
 801deee:	460b      	mov	r3, r1
 801def0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801def4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801def8:	62bb      	str	r3, [r7, #40]	; 0x28
 801defa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801defe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801df02:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df04:	f04f 0200 	mov.w	r2, #0
 801df08:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801df0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801df10:	f7e2 fdd6 	bl	8000ac0 <__aeabi_dcmplt>
 801df14:	4603      	mov	r3, r0
 801df16:	2b00      	cmp	r3, #0
 801df18:	d003      	beq.n	801df22 <qr_5a2P8Gh6+0x656>
 801df1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801df1e:	2b13      	cmp	r3, #19
 801df20:	dda5      	ble.n	801de6e <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 801df22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df26:	2206      	movs	r2, #6
 801df28:	4619      	mov	r1, r3
 801df2a:	2001      	movs	r0, #1
 801df2c:	f004 fcc4 	bl	80228b8 <xnrm2_xDOlDEtw>
 801df30:	eeb0 7a40 	vmov.f32	s14, s0
 801df34:	eef0 7a60 	vmov.f32	s15, s1
 801df38:	eeb0 1a47 	vmov.f32	s2, s14
 801df3c:	eef0 1a67 	vmov.f32	s3, s15
 801df40:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801df44:	f001 ff24 	bl	801fd90 <rt_hypotd_snf>
 801df48:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801df4c:	f04f 0200 	mov.w	r2, #0
 801df50:	f04f 0300 	mov.w	r3, #0
 801df54:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801df58:	f7e2 fdc6 	bl	8000ae8 <__aeabi_dcmpge>
 801df5c:	4603      	mov	r3, r0
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d009      	beq.n	801df76 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 801df62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801df66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801df6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801df6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801df72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801df76:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801df7a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801df7e:	f7e2 f975 	bl	800026c <__aeabi_dsub>
 801df82:	4602      	mov	r2, r0
 801df84:	460b      	mov	r3, r1
 801df86:	4610      	mov	r0, r2
 801df88:	4619      	mov	r1, r3
 801df8a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801df8e:	f7e2 fc4f 	bl	8000830 <__aeabi_ddiv>
 801df92:	4602      	mov	r2, r0
 801df94:	460b      	mov	r3, r1
 801df96:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 801df9a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801df9e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dfa2:	f7e2 f963 	bl	800026c <__aeabi_dsub>
 801dfa6:	4602      	mov	r2, r0
 801dfa8:	460b      	mov	r3, r1
 801dfaa:	f04f 0000 	mov.w	r0, #0
 801dfae:	4984      	ldr	r1, [pc, #528]	; (801e1c0 <qr_5a2P8Gh6+0x8f4>)
 801dfb0:	f7e2 fc3e 	bl	8000830 <__aeabi_ddiv>
 801dfb4:	4602      	mov	r2, r0
 801dfb6:	460b      	mov	r3, r1
 801dfb8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801dfbc:	2305      	movs	r3, #5
 801dfbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dfc2:	e01c      	b.n	801dffe <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 801dfc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dfc8:	00db      	lsls	r3, r3, #3
 801dfca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dfce:	4413      	add	r3, r2
 801dfd0:	3b80      	subs	r3, #128	; 0x80
 801dfd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dfd6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dfda:	f7e2 faff 	bl	80005dc <__aeabi_dmul>
 801dfde:	4602      	mov	r2, r0
 801dfe0:	460b      	mov	r3, r1
 801dfe2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801dfe6:	00c9      	lsls	r1, r1, #3
 801dfe8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801dfec:	4401      	add	r1, r0
 801dfee:	3980      	subs	r1, #128	; 0x80
 801dff0:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801dff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dff8:	3301      	adds	r3, #1
 801dffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e002:	2b05      	cmp	r3, #5
 801e004:	ddde      	ble.n	801dfc4 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e006:	2300      	movs	r3, #0
 801e008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e00c:	e010      	b.n	801e030 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 801e00e:	f04f 0200 	mov.w	r2, #0
 801e012:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e016:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e01a:	f7e2 fadf 	bl	80005dc <__aeabi_dmul>
 801e01e:	4602      	mov	r2, r0
 801e020:	460b      	mov	r3, r1
 801e022:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e02a:	3301      	adds	r3, #1
 801e02c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e030:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e038:	429a      	cmp	r2, r3
 801e03a:	dbe8      	blt.n	801e00e <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 801e03c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e040:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801e044:	e04b      	b.n	801e0de <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 801e046:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801e04a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e04e:	f7e2 f90d 	bl	800026c <__aeabi_dsub>
 801e052:	4602      	mov	r2, r0
 801e054:	460b      	mov	r3, r1
 801e056:	4610      	mov	r0, r2
 801e058:	4619      	mov	r1, r3
 801e05a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e05e:	f7e2 fbe7 	bl	8000830 <__aeabi_ddiv>
 801e062:	4602      	mov	r2, r0
 801e064:	460b      	mov	r3, r1
 801e066:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 801e06a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801e06e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e072:	f7e2 f8fb 	bl	800026c <__aeabi_dsub>
 801e076:	4602      	mov	r2, r0
 801e078:	460b      	mov	r3, r1
 801e07a:	f04f 0000 	mov.w	r0, #0
 801e07e:	4950      	ldr	r1, [pc, #320]	; (801e1c0 <qr_5a2P8Gh6+0x8f4>)
 801e080:	f7e2 fbd6 	bl	8000830 <__aeabi_ddiv>
 801e084:	4602      	mov	r2, r0
 801e086:	460b      	mov	r3, r1
 801e088:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e08c:	2305      	movs	r3, #5
 801e08e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e092:	e01c      	b.n	801e0ce <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 801e094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e098:	00db      	lsls	r3, r3, #3
 801e09a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e09e:	4413      	add	r3, r2
 801e0a0:	3b80      	subs	r3, #128	; 0x80
 801e0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e0a6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e0aa:	f7e2 fa97 	bl	80005dc <__aeabi_dmul>
 801e0ae:	4602      	mov	r2, r0
 801e0b0:	460b      	mov	r3, r1
 801e0b2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e0b6:	00c9      	lsls	r1, r1, #3
 801e0b8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e0bc:	4401      	add	r1, r0
 801e0be:	3980      	subs	r1, #128	; 0x80
 801e0c0:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e0c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e0c8:	3301      	adds	r3, #1
 801e0ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e0ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e0d2:	2b05      	cmp	r3, #5
 801e0d4:	ddde      	ble.n	801e094 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 801e0d6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e0da:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 801e0de:	f04f 0200 	mov.w	r2, #0
 801e0e2:	4b37      	ldr	r3, [pc, #220]	; (801e1c0 <qr_5a2P8Gh6+0x8f4>)
 801e0e4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e0e8:	f04f 0200 	mov.w	r2, #0
 801e0ec:	f04f 0300 	mov.w	r3, #0
 801e0f0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e0f4:	f7e2 fcda 	bl	8000aac <__aeabi_dcmpeq>
 801e0f8:	4603      	mov	r3, r0
 801e0fa:	2b00      	cmp	r3, #0
 801e0fc:	d162      	bne.n	801e1c4 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 801e0fe:	2302      	movs	r3, #2
 801e100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 801e104:	2305      	movs	r3, #5
 801e106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e10a:	e009      	b.n	801e120 <qr_5a2P8Gh6+0x854>
      knt--;
 801e10c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e110:	3b01      	subs	r3, #1
 801e112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801e116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e11a:	3b01      	subs	r3, #1
 801e11c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e124:	2b00      	cmp	r3, #0
 801e126:	dd11      	ble.n	801e14c <qr_5a2P8Gh6+0x880>
 801e128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e12c:	00db      	lsls	r3, r3, #3
 801e12e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e132:	4413      	add	r3, r2
 801e134:	3b80      	subs	r3, #128	; 0x80
 801e136:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e13a:	f04f 0200 	mov.w	r2, #0
 801e13e:	f04f 0300 	mov.w	r3, #0
 801e142:	f7e2 fcb3 	bl	8000aac <__aeabi_dcmpeq>
 801e146:	4603      	mov	r3, r0
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d1df      	bne.n	801e10c <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 801e14c:	2301      	movs	r3, #1
 801e14e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 801e152:	2307      	movs	r3, #7
 801e154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 801e158:	2300      	movs	r3, #0
 801e15a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 801e15e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e162:	3306      	adds	r3, #6
 801e164:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e168:	429a      	cmp	r2, r3
 801e16a:	dc1b      	bgt.n	801e1a4 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 801e16c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e170:	00db      	lsls	r3, r3, #3
 801e172:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e176:	4413      	add	r3, r2
 801e178:	3b80      	subs	r3, #128	; 0x80
 801e17a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e17e:	f04f 0200 	mov.w	r2, #0
 801e182:	f04f 0300 	mov.w	r3, #0
 801e186:	f7e2 fc91 	bl	8000aac <__aeabi_dcmpeq>
 801e18a:	4603      	mov	r3, r0
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d103      	bne.n	801e198 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 801e190:	2301      	movs	r3, #1
 801e192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e196:	e00b      	b.n	801e1b0 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 801e198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e19c:	3301      	adds	r3, #1
 801e19e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801e1a2:	e005      	b.n	801e1b0 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 801e1aa:	2301      	movs	r3, #1
 801e1ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e1b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d0cf      	beq.n	801e158 <qr_5a2P8Gh6+0x88c>
 801e1b8:	e00a      	b.n	801e1d0 <qr_5a2P8Gh6+0x904>
 801e1ba:	bf00      	nop
 801e1bc:	7c900000 	.word	0x7c900000
 801e1c0:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 801e1c4:	2300      	movs	r3, #0
 801e1c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801e1d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	dd29      	ble.n	801e22c <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 801e1d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e1dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e1e0:	9302      	str	r3, [sp, #8]
 801e1e2:	2305      	movs	r3, #5
 801e1e4:	9301      	str	r3, [sp, #4]
 801e1e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e1ea:	9300      	str	r3, [sp, #0]
 801e1ec:	2308      	movs	r3, #8
 801e1ee:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e1f2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e1f6:	f003 ff1b 	bl	8022030 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 801e1fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e1fe:	623b      	str	r3, [r7, #32]
 801e200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e208:	627b      	str	r3, [r7, #36]	; 0x24
 801e20a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e20e:	2308      	movs	r3, #8
 801e210:	9301      	str	r3, [sp, #4]
 801e212:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e216:	9300      	str	r3, [sp, #0]
 801e218:	4613      	mov	r3, r2
 801e21a:	2205      	movs	r2, #5
 801e21c:	ed97 0b08 	vldr	d0, [r7, #32]
 801e220:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e224:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e228:	f004 f80b 	bl	8022242 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 801e22c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e230:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 801e234:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801e238:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e23a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e23e:	2301      	movs	r3, #1
 801e240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e244:	e00f      	b.n	801e266 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 801e246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e24a:	00db      	lsls	r3, r3, #3
 801e24c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e24e:	18d1      	adds	r1, r2, r3
 801e250:	f04f 0200 	mov.w	r2, #0
 801e254:	f04f 0300 	mov.w	r3, #0
 801e258:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e25c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e260:	3301      	adds	r3, #1
 801e262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e26a:	2b02      	cmp	r3, #2
 801e26c:	ddeb      	ble.n	801e246 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 801e26e:	f04f 0200 	mov.w	r2, #0
 801e272:	f04f 0300 	mov.w	r3, #0
 801e276:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e27a:	2300      	movs	r3, #0
 801e27c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e280:	e016      	b.n	801e2b0 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 801e282:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e286:	3303      	adds	r3, #3
 801e288:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e28c:	3203      	adds	r2, #3
 801e28e:	00d2      	lsls	r2, r2, #3
 801e290:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e292:	4411      	add	r1, r2
 801e294:	00db      	lsls	r3, r3, #3
 801e296:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e29a:	4413      	add	r3, r2
 801e29c:	3b80      	subs	r3, #128	; 0x80
 801e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e2a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2aa:	3301      	adds	r3, #1
 801e2ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2b4:	2b01      	cmp	r3, #1
 801e2b6:	dde4      	ble.n	801e282 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 801e2b8:	e010      	b.n	801e2dc <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 801e2ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2be:	3303      	adds	r3, #3
 801e2c0:	00db      	lsls	r3, r3, #3
 801e2c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e2c4:	18d1      	adds	r1, r2, r3
 801e2c6:	f04f 0200 	mov.w	r2, #0
 801e2ca:	f04f 0300 	mov.w	r3, #0
 801e2ce:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801e2d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2d6:	3301      	adds	r3, #1
 801e2d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 801e2dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2e0:	2b02      	cmp	r3, #2
 801e2e2:	ddea      	ble.n	801e2ba <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 801e2e4:	f04f 0200 	mov.w	r2, #0
 801e2e8:	f04f 0300 	mov.w	r3, #0
 801e2ec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2f6:	e016      	b.n	801e326 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 801e2f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2fc:	3306      	adds	r3, #6
 801e2fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e302:	3206      	adds	r2, #6
 801e304:	00d2      	lsls	r2, r2, #3
 801e306:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e308:	4411      	add	r1, r2
 801e30a:	00db      	lsls	r3, r3, #3
 801e30c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e310:	4413      	add	r3, r2
 801e312:	3b80      	subs	r3, #128	; 0x80
 801e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e318:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e31c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e320:	3301      	adds	r3, #1
 801e322:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e32a:	2b02      	cmp	r3, #2
 801e32c:	dde4      	ble.n	801e2f8 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 801e32e:	f04f 0200 	mov.w	r2, #0
 801e332:	f04f 0300 	mov.w	r3, #0
 801e336:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 801e33a:	f04f 0200 	mov.w	r2, #0
 801e33e:	4bc8      	ldr	r3, [pc, #800]	; (801e660 <qr_5a2P8Gh6+0xd94>)
 801e340:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e344:	2300      	movs	r3, #0
 801e346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e34a:	e014      	b.n	801e376 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 801e34c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e350:	f1c3 0307 	rsb	r3, r3, #7
 801e354:	00db      	lsls	r3, r3, #3
 801e356:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e35a:	4413      	add	r3, r2
 801e35c:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 801e360:	f04f 0200 	mov.w	r2, #0
 801e364:	f04f 0300 	mov.w	r3, #0
 801e368:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e36c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e370:	3301      	adds	r3, #1
 801e372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e37a:	2b01      	cmp	r3, #1
 801e37c:	dde6      	ble.n	801e34c <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 801e37e:	f04f 0200 	mov.w	r2, #0
 801e382:	4bb7      	ldr	r3, [pc, #732]	; (801e660 <qr_5a2P8Gh6+0xd94>)
 801e384:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e388:	f04f 0200 	mov.w	r2, #0
 801e38c:	f04f 0300 	mov.w	r3, #0
 801e390:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e394:	f7e2 fb8a 	bl	8000aac <__aeabi_dcmpeq>
 801e398:	4603      	mov	r3, r0
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d15c      	bne.n	801e458 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 801e39e:	2307      	movs	r3, #7
 801e3a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e3a4:	e009      	b.n	801e3ba <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 801e3a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3aa:	3b01      	subs	r3, #1
 801e3ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e3b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e3b4:	3b01      	subs	r3, #1
 801e3b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	dd12      	ble.n	801e3e8 <qr_5a2P8Gh6+0xb1c>
 801e3c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e3c6:	3b02      	subs	r3, #2
 801e3c8:	00db      	lsls	r3, r3, #3
 801e3ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e3ce:	4413      	add	r3, r2
 801e3d0:	3b80      	subs	r3, #128	; 0x80
 801e3d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e3d6:	f04f 0200 	mov.w	r2, #0
 801e3da:	f04f 0300 	mov.w	r3, #0
 801e3de:	f7e2 fb65 	bl	8000aac <__aeabi_dcmpeq>
 801e3e2:	4603      	mov	r3, r0
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d1de      	bne.n	801e3a6 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 801e3e8:	2301      	movs	r3, #1
 801e3ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 801e3ee:	2308      	movs	r3, #8
 801e3f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 801e3fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3fe:	3307      	adds	r3, #7
 801e400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e404:	429a      	cmp	r2, r3
 801e406:	dc1c      	bgt.n	801e442 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 801e408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e40c:	3b01      	subs	r3, #1
 801e40e:	00db      	lsls	r3, r3, #3
 801e410:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e414:	4413      	add	r3, r2
 801e416:	3b80      	subs	r3, #128	; 0x80
 801e418:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e41c:	f04f 0200 	mov.w	r2, #0
 801e420:	f04f 0300 	mov.w	r3, #0
 801e424:	f7e2 fb42 	bl	8000aac <__aeabi_dcmpeq>
 801e428:	4603      	mov	r3, r0
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d103      	bne.n	801e436 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 801e42e:	2301      	movs	r3, #1
 801e430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e434:	e00b      	b.n	801e44e <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 801e436:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e43a:	3301      	adds	r3, #1
 801e43c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e440:	e005      	b.n	801e44e <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 801e442:	2300      	movs	r3, #0
 801e444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 801e448:	2301      	movs	r3, #1
 801e44a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e44e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e452:	2b00      	cmp	r3, #0
 801e454:	d0ce      	beq.n	801e3f4 <qr_5a2P8Gh6+0xb28>
 801e456:	e005      	b.n	801e464 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 801e458:	2300      	movs	r3, #0
 801e45a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e45e:	2300      	movs	r3, #0
 801e460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e468:	2b00      	cmp	r3, #0
 801e46a:	dd29      	ble.n	801e4c0 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 801e46c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e474:	9302      	str	r3, [sp, #8]
 801e476:	2305      	movs	r3, #5
 801e478:	9301      	str	r3, [sp, #4]
 801e47a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e47e:	9300      	str	r3, [sp, #0]
 801e480:	2308      	movs	r3, #8
 801e482:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e486:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e48a:	f003 fdd1 	bl	8022030 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 801e48e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e492:	61bb      	str	r3, [r7, #24]
 801e494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e498:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e49c:	61fb      	str	r3, [r7, #28]
 801e49e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e4a2:	2308      	movs	r3, #8
 801e4a4:	9301      	str	r3, [sp, #4]
 801e4a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e4aa:	9300      	str	r3, [sp, #0]
 801e4ac:	4613      	mov	r3, r2
 801e4ae:	2205      	movs	r2, #5
 801e4b0:	ed97 0b06 	vldr	d0, [r7, #24]
 801e4b4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e4b8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e4bc:	f003 fec1 	bl	8022242 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e4c0:	2305      	movs	r3, #5
 801e4c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e4c6:	e024      	b.n	801e512 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 801e4c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e4cc:	00db      	lsls	r3, r3, #3
 801e4ce:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e4d2:	4413      	add	r3, r2
 801e4d4:	3b80      	subs	r3, #128	; 0x80
 801e4d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e4da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e4de:	613b      	str	r3, [r7, #16]
 801e4e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e4e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e4e8:	617b      	str	r3, [r7, #20]
 801e4ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e4ee:	f7e2 f875 	bl	80005dc <__aeabi_dmul>
 801e4f2:	4602      	mov	r2, r0
 801e4f4:	460b      	mov	r3, r1
 801e4f6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e4fa:	00c9      	lsls	r1, r1, #3
 801e4fc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e500:	4401      	add	r1, r0
 801e502:	3980      	subs	r1, #128	; 0x80
 801e504:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e50c:	3301      	adds	r3, #1
 801e50e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e516:	2b05      	cmp	r3, #5
 801e518:	ddd6      	ble.n	801e4c8 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 801e51a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801e51e:	f04f 0000 	mov.w	r0, #0
 801e522:	494f      	ldr	r1, [pc, #316]	; (801e660 <qr_5a2P8Gh6+0xd94>)
 801e524:	f7e1 fea2 	bl	800026c <__aeabi_dsub>
 801e528:	4602      	mov	r2, r0
 801e52a:	460b      	mov	r3, r1
 801e52c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 801e530:	f04f 0200 	mov.w	r2, #0
 801e534:	f04f 0300 	mov.w	r3, #0
 801e538:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 801e53c:	f04f 0200 	mov.w	r2, #0
 801e540:	4b47      	ldr	r3, [pc, #284]	; (801e660 <qr_5a2P8Gh6+0xd94>)
 801e542:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801e546:	f04f 0200 	mov.w	r2, #0
 801e54a:	f04f 0300 	mov.w	r3, #0
 801e54e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801e552:	f7e2 faab 	bl	8000aac <__aeabi_dcmpeq>
 801e556:	4603      	mov	r3, r0
 801e558:	2b00      	cmp	r3, #0
 801e55a:	f040 8083 	bne.w	801e664 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 801e55e:	2303      	movs	r3, #3
 801e560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 801e564:	2304      	movs	r3, #4
 801e566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e56a:	e009      	b.n	801e580 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 801e56c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e570:	3b01      	subs	r3, #1
 801e572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e57a:	3b01      	subs	r3, #1
 801e57c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e584:	2b00      	cmp	r3, #0
 801e586:	dd12      	ble.n	801e5ae <qr_5a2P8Gh6+0xce2>
 801e588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e58c:	3b02      	subs	r3, #2
 801e58e:	00db      	lsls	r3, r3, #3
 801e590:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e594:	4413      	add	r3, r2
 801e596:	3b80      	subs	r3, #128	; 0x80
 801e598:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e59c:	f04f 0200 	mov.w	r2, #0
 801e5a0:	f04f 0300 	mov.w	r3, #0
 801e5a4:	f7e2 fa82 	bl	8000aac <__aeabi_dcmpeq>
 801e5a8:	4603      	mov	r3, r0
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d1de      	bne.n	801e56c <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 801e5ae:	2302      	movs	r3, #2
 801e5b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e5ba:	e048      	b.n	801e64e <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 801e5bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e5c0:	1e5a      	subs	r2, r3, #1
 801e5c2:	4613      	mov	r3, r2
 801e5c4:	005b      	lsls	r3, r3, #1
 801e5c6:	4413      	add	r3, r2
 801e5c8:	3304      	adds	r3, #4
 801e5ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 801e5ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e5d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 801e5dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e5e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e5e4:	4413      	add	r3, r2
 801e5e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	da1c      	bge.n	801e628 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 801e5ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e5f2:	3b01      	subs	r3, #1
 801e5f4:	00db      	lsls	r3, r3, #3
 801e5f6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e5fa:	4413      	add	r3, r2
 801e5fc:	3b80      	subs	r3, #128	; 0x80
 801e5fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e602:	f04f 0200 	mov.w	r2, #0
 801e606:	f04f 0300 	mov.w	r3, #0
 801e60a:	f7e2 fa4f 	bl	8000aac <__aeabi_dcmpeq>
 801e60e:	4603      	mov	r3, r0
 801e610:	2b00      	cmp	r3, #0
 801e612:	d103      	bne.n	801e61c <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 801e614:	2301      	movs	r3, #1
 801e616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e61a:	e00d      	b.n	801e638 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 801e61c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e620:	3301      	adds	r3, #1
 801e622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e626:	e007      	b.n	801e638 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 801e628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e62c:	3b01      	subs	r3, #1
 801e62e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 801e632:	2302      	movs	r3, #2
 801e634:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801e638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d0ca      	beq.n	801e5d6 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 801e640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e644:	2b01      	cmp	r3, #1
 801e646:	d102      	bne.n	801e64e <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 801e648:	2301      	movs	r3, #1
 801e64a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e64e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e652:	2b00      	cmp	r3, #0
 801e654:	d10c      	bne.n	801e670 <qr_5a2P8Gh6+0xda4>
 801e656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	dcae      	bgt.n	801e5bc <qr_5a2P8Gh6+0xcf0>
 801e65e:	e007      	b.n	801e670 <qr_5a2P8Gh6+0xda4>
 801e660:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801e664:	2300      	movs	r3, #0
 801e666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e66a:	2300      	movs	r3, #0
 801e66c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e674:	2b00      	cmp	r3, #0
 801e676:	dd29      	ble.n	801e6cc <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 801e678:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e67c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e680:	9302      	str	r3, [sp, #8]
 801e682:	2301      	movs	r3, #1
 801e684:	9301      	str	r3, [sp, #4]
 801e686:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e68a:	9300      	str	r3, [sp, #0]
 801e68c:	2304      	movs	r3, #4
 801e68e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e692:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e696:	f003 fccb 	bl	8022030 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 801e69a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e69e:	60bb      	str	r3, [r7, #8]
 801e6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e6a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e6a8:	60fb      	str	r3, [r7, #12]
 801e6aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e6ae:	2304      	movs	r3, #4
 801e6b0:	9301      	str	r3, [sp, #4]
 801e6b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e6b6:	9300      	str	r3, [sp, #0]
 801e6b8:	4613      	mov	r3, r2
 801e6ba:	2201      	movs	r2, #1
 801e6bc:	ed97 0b02 	vldr	d0, [r7, #8]
 801e6c0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e6c4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e6c8:	f003 fdbb 	bl	8022242 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e6cc:	2301      	movs	r3, #1
 801e6ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e6d2:	e024      	b.n	801e71e <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 801e6d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e6d8:	00db      	lsls	r3, r3, #3
 801e6da:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e6de:	4413      	add	r3, r2
 801e6e0:	3b80      	subs	r3, #128	; 0x80
 801e6e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e6e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e6ea:	603b      	str	r3, [r7, #0]
 801e6ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e6f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e6f4:	607b      	str	r3, [r7, #4]
 801e6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6fa:	f7e1 ff6f 	bl	80005dc <__aeabi_dmul>
 801e6fe:	4602      	mov	r2, r0
 801e700:	460b      	mov	r3, r1
 801e702:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e706:	00c9      	lsls	r1, r1, #3
 801e708:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e70c:	4401      	add	r1, r0
 801e70e:	3980      	subs	r1, #128	; 0x80
 801e710:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e718:	3301      	adds	r3, #1
 801e71a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e71e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e722:	2b02      	cmp	r3, #2
 801e724:	ddd6      	ble.n	801e6d4 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801e726:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801e72a:	f04f 0000 	mov.w	r0, #0
 801e72e:	492a      	ldr	r1, [pc, #168]	; (801e7d8 <qr_5a2P8Gh6+0xf0c>)
 801e730:	f7e1 fd9c 	bl	800026c <__aeabi_dsub>
 801e734:	4602      	mov	r2, r0
 801e736:	460b      	mov	r3, r1
 801e738:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 801e73c:	2300      	movs	r3, #0
 801e73e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e742:	2300      	movs	r3, #0
 801e744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e748:	e03d      	b.n	801e7c6 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 801e74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e74e:	00db      	lsls	r3, r3, #3
 801e750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e752:	18d1      	adds	r1, r2, r3
 801e754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e758:	00db      	lsls	r3, r3, #3
 801e75a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e75e:	4413      	add	r3, r2
 801e760:	3b80      	subs	r3, #128	; 0x80
 801e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e766:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 801e76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e76e:	3301      	adds	r3, #1
 801e770:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e774:	3201      	adds	r2, #1
 801e776:	00d2      	lsls	r2, r2, #3
 801e778:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e77a:	4411      	add	r1, r2
 801e77c:	00db      	lsls	r3, r3, #3
 801e77e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e782:	4413      	add	r3, r2
 801e784:	3b80      	subs	r3, #128	; 0x80
 801e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78a:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 801e78e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e792:	3302      	adds	r3, #2
 801e794:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e798:	3202      	adds	r2, #2
 801e79a:	00d2      	lsls	r2, r2, #3
 801e79c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e79e:	4411      	add	r1, r2
 801e7a0:	00db      	lsls	r3, r3, #3
 801e7a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e7a6:	4413      	add	r3, r2
 801e7a8:	3b80      	subs	r3, #128	; 0x80
 801e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ae:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 801e7b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7b6:	3303      	adds	r3, #3
 801e7b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e7bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7c0:	3301      	adds	r3, #1
 801e7c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e7c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7ca:	2b02      	cmp	r3, #2
 801e7cc:	ddbd      	ble.n	801e74a <qr_5a2P8Gh6+0xe7e>
  }
}
 801e7ce:	bf00      	nop
 801e7d0:	bf00      	nop
 801e7d2:	37f0      	adds	r7, #240	; 0xf0
 801e7d4:	46bd      	mov	sp, r7
 801e7d6:	bdb0      	pop	{r4, r5, r7, pc}
 801e7d8:	3ff00000 	.word	0x3ff00000

0801e7dc <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 801e7dc:	b5b0      	push	{r4, r5, r7, lr}
 801e7de:	b0da      	sub	sp, #360	; 0x168
 801e7e0:	af04      	add	r7, sp, #16
 801e7e2:	66f8      	str	r0, [r7, #108]	; 0x6c
 801e7e4:	66b9      	str	r1, [r7, #104]	; 0x68
 801e7e6:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 801e7e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e7ec:	2290      	movs	r2, #144	; 0x90
 801e7ee:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801e7f0:	4618      	mov	r0, r3
 801e7f2:	f00f ff1f 	bl	802e634 <memcpy>
  work[0] = 0.0;
 801e7f6:	f04f 0200 	mov.w	r2, #0
 801e7fa:	f04f 0300 	mov.w	r3, #0
 801e7fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 801e802:	f04f 0200 	mov.w	r2, #0
 801e806:	f04f 0300 	mov.w	r3, #0
 801e80a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 801e80e:	f04f 0200 	mov.w	r2, #0
 801e812:	f04f 0300 	mov.w	r3, #0
 801e816:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 801e81a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801e81e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 801e822:	f04f 0200 	mov.w	r2, #0
 801e826:	f04f 0300 	mov.w	r3, #0
 801e82a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 801e82e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e832:	2202      	movs	r2, #2
 801e834:	4619      	mov	r1, r3
 801e836:	2005      	movs	r0, #5
 801e838:	f003 ff90 	bl	802275c <xnrm2_nLdASVZH>
 801e83c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801e840:	f04f 0200 	mov.w	r2, #0
 801e844:	f04f 0300 	mov.w	r3, #0
 801e848:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801e84c:	f7e2 f92e 	bl	8000aac <__aeabi_dcmpeq>
 801e850:	4603      	mov	r3, r0
 801e852:	2b00      	cmp	r3, #0
 801e854:	f040 8172 	bne.w	801eb3c <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801e858:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 801e85c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801e860:	eeb0 0a47 	vmov.f32	s0, s14
 801e864:	eef0 0a67 	vmov.f32	s1, s15
 801e868:	f001 fa92 	bl	801fd90 <rt_hypotd_snf>
 801e86c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 801e870:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801e874:	f04f 0200 	mov.w	r2, #0
 801e878:	f04f 0300 	mov.w	r3, #0
 801e87c:	f7e2 f934 	bl	8000ae8 <__aeabi_dcmpge>
 801e880:	4603      	mov	r3, r0
 801e882:	2b00      	cmp	r3, #0
 801e884:	d009      	beq.n	801e89a <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 801e886:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801e88a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801e88e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e892:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e896:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801e89a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 801e89e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e8a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e8a6:	f04f 0200 	mov.w	r2, #0
 801e8aa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e8ae:	4620      	mov	r0, r4
 801e8b0:	4629      	mov	r1, r5
 801e8b2:	f7e2 f905 	bl	8000ac0 <__aeabi_dcmplt>
 801e8b6:	4603      	mov	r3, r0
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	f000 80f1 	beq.w	801eaa0 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 801e8be:	2300      	movs	r3, #0
 801e8c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801e8c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e8c8:	3301      	adds	r3, #1
 801e8ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801e8ce:	2301      	movs	r3, #1
 801e8d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801e8d4:	e01f      	b.n	801e916 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801e8d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e8da:	00db      	lsls	r3, r3, #3
 801e8dc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801e8e0:	4413      	add	r3, r2
 801e8e2:	3bd0      	subs	r3, #208	; 0xd0
 801e8e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e8e8:	f04f 0200 	mov.w	r2, #0
 801e8ec:	4bca      	ldr	r3, [pc, #808]	; (801ec18 <qr_DvOBrgQi+0x43c>)
 801e8ee:	f7e1 fe75 	bl	80005dc <__aeabi_dmul>
 801e8f2:	4602      	mov	r2, r0
 801e8f4:	460b      	mov	r3, r1
 801e8f6:	4610      	mov	r0, r2
 801e8f8:	4619      	mov	r1, r3
 801e8fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e8fe:	00db      	lsls	r3, r3, #3
 801e900:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801e904:	4413      	add	r3, r2
 801e906:	3bd0      	subs	r3, #208	; 0xd0
 801e908:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801e90c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e910:	3301      	adds	r3, #1
 801e912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801e916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801e91a:	2b05      	cmp	r3, #5
 801e91c:	dddb      	ble.n	801e8d6 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 801e91e:	f04f 0200 	mov.w	r2, #0
 801e922:	4bbd      	ldr	r3, [pc, #756]	; (801ec18 <qr_DvOBrgQi+0x43c>)
 801e924:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801e928:	f7e1 fe58 	bl	80005dc <__aeabi_dmul>
 801e92c:	4602      	mov	r2, r0
 801e92e:	460b      	mov	r3, r1
 801e930:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801e934:	f04f 0200 	mov.w	r2, #0
 801e938:	4bb7      	ldr	r3, [pc, #732]	; (801ec18 <qr_DvOBrgQi+0x43c>)
 801e93a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801e93e:	f7e1 fe4d 	bl	80005dc <__aeabi_dmul>
 801e942:	4602      	mov	r2, r0
 801e944:	460b      	mov	r3, r1
 801e946:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801e94a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801e94e:	65bb      	str	r3, [r7, #88]	; 0x58
 801e950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e958:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e95a:	f04f 0200 	mov.w	r2, #0
 801e95e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e962:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801e966:	f7e2 f8ab 	bl	8000ac0 <__aeabi_dcmplt>
 801e96a:	4603      	mov	r3, r0
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d003      	beq.n	801e978 <qr_DvOBrgQi+0x19c>
 801e970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801e974:	2b13      	cmp	r3, #19
 801e976:	dda5      	ble.n	801e8c4 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 801e978:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e97c:	2202      	movs	r2, #2
 801e97e:	4619      	mov	r1, r3
 801e980:	2005      	movs	r0, #5
 801e982:	f003 feeb 	bl	802275c <xnrm2_nLdASVZH>
 801e986:	eeb0 7a40 	vmov.f32	s14, s0
 801e98a:	eef0 7a60 	vmov.f32	s15, s1
 801e98e:	eeb0 1a47 	vmov.f32	s2, s14
 801e992:	eef0 1a67 	vmov.f32	s3, s15
 801e996:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801e99a:	f001 f9f9 	bl	801fd90 <rt_hypotd_snf>
 801e99e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801e9a2:	f04f 0200 	mov.w	r2, #0
 801e9a6:	f04f 0300 	mov.w	r3, #0
 801e9aa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801e9ae:	f7e2 f89b 	bl	8000ae8 <__aeabi_dcmpge>
 801e9b2:	4603      	mov	r3, r0
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d009      	beq.n	801e9cc <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 801e9b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801e9bc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801e9c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801e9c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e9c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801e9cc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801e9d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801e9d4:	f7e1 fc4a 	bl	800026c <__aeabi_dsub>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	460b      	mov	r3, r1
 801e9dc:	4610      	mov	r0, r2
 801e9de:	4619      	mov	r1, r3
 801e9e0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801e9e4:	f7e1 ff24 	bl	8000830 <__aeabi_ddiv>
 801e9e8:	4602      	mov	r2, r0
 801e9ea:	460b      	mov	r3, r1
 801e9ec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 801e9f0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801e9f4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801e9f8:	f7e1 fc38 	bl	800026c <__aeabi_dsub>
 801e9fc:	4602      	mov	r2, r0
 801e9fe:	460b      	mov	r3, r1
 801ea00:	f04f 0000 	mov.w	r0, #0
 801ea04:	4985      	ldr	r1, [pc, #532]	; (801ec1c <qr_DvOBrgQi+0x440>)
 801ea06:	f7e1 ff13 	bl	8000830 <__aeabi_ddiv>
 801ea0a:	4602      	mov	r2, r0
 801ea0c:	460b      	mov	r3, r1
 801ea0e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801ea12:	2301      	movs	r3, #1
 801ea14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ea18:	e01e      	b.n	801ea58 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 801ea1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ea1e:	00db      	lsls	r3, r3, #3
 801ea20:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ea24:	4413      	add	r3, r2
 801ea26:	3bd0      	subs	r3, #208	; 0xd0
 801ea28:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea2c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ea30:	f7e1 fdd4 	bl	80005dc <__aeabi_dmul>
 801ea34:	4602      	mov	r2, r0
 801ea36:	460b      	mov	r3, r1
 801ea38:	4610      	mov	r0, r2
 801ea3a:	4619      	mov	r1, r3
 801ea3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ea40:	00db      	lsls	r3, r3, #3
 801ea42:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ea46:	4413      	add	r3, r2
 801ea48:	3bd0      	subs	r3, #208	; 0xd0
 801ea4a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801ea4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ea52:	3301      	adds	r3, #1
 801ea54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ea58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ea5c:	2b05      	cmp	r3, #5
 801ea5e:	dddc      	ble.n	801ea1a <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ea60:	2300      	movs	r3, #0
 801ea62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ea66:	e010      	b.n	801ea8a <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 801ea68:	f04f 0200 	mov.w	r2, #0
 801ea6c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ea70:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ea74:	f7e1 fdb2 	bl	80005dc <__aeabi_dmul>
 801ea78:	4602      	mov	r2, r0
 801ea7a:	460b      	mov	r3, r1
 801ea7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ea80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ea84:	3301      	adds	r3, #1
 801ea86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ea8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ea8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ea92:	429a      	cmp	r2, r3
 801ea94:	dbe8      	blt.n	801ea68 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 801ea96:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ea9a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801ea9e:	e04d      	b.n	801eb3c <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801eaa0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801eaa4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801eaa8:	f7e1 fbe0 	bl	800026c <__aeabi_dsub>
 801eaac:	4602      	mov	r2, r0
 801eaae:	460b      	mov	r3, r1
 801eab0:	4610      	mov	r0, r2
 801eab2:	4619      	mov	r1, r3
 801eab4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eab8:	f7e1 feba 	bl	8000830 <__aeabi_ddiv>
 801eabc:	4602      	mov	r2, r0
 801eabe:	460b      	mov	r3, r1
 801eac0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 801eac4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801eac8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eacc:	f7e1 fbce 	bl	800026c <__aeabi_dsub>
 801ead0:	4602      	mov	r2, r0
 801ead2:	460b      	mov	r3, r1
 801ead4:	f04f 0000 	mov.w	r0, #0
 801ead8:	4950      	ldr	r1, [pc, #320]	; (801ec1c <qr_DvOBrgQi+0x440>)
 801eada:	f7e1 fea9 	bl	8000830 <__aeabi_ddiv>
 801eade:	4602      	mov	r2, r0
 801eae0:	460b      	mov	r3, r1
 801eae2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801eae6:	2301      	movs	r3, #1
 801eae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801eaec:	e01e      	b.n	801eb2c <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 801eaee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eaf2:	00db      	lsls	r3, r3, #3
 801eaf4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eaf8:	4413      	add	r3, r2
 801eafa:	3bd0      	subs	r3, #208	; 0xd0
 801eafc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb00:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eb04:	f7e1 fd6a 	bl	80005dc <__aeabi_dmul>
 801eb08:	4602      	mov	r2, r0
 801eb0a:	460b      	mov	r3, r1
 801eb0c:	4610      	mov	r0, r2
 801eb0e:	4619      	mov	r1, r3
 801eb10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb14:	00db      	lsls	r3, r3, #3
 801eb16:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb1a:	4413      	add	r3, r2
 801eb1c:	3bd0      	subs	r3, #208	; 0xd0
 801eb1e:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801eb22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb26:	3301      	adds	r3, #1
 801eb28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801eb2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb30:	2b05      	cmp	r3, #5
 801eb32:	dddc      	ble.n	801eaee <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 801eb34:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eb38:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 801eb3c:	f04f 0200 	mov.w	r2, #0
 801eb40:	4b36      	ldr	r3, [pc, #216]	; (801ec1c <qr_DvOBrgQi+0x440>)
 801eb42:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801eb46:	f04f 0200 	mov.w	r2, #0
 801eb4a:	f04f 0300 	mov.w	r3, #0
 801eb4e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801eb52:	f7e1 ffab 	bl	8000aac <__aeabi_dcmpeq>
 801eb56:	4603      	mov	r3, r0
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	f040 8083 	bne.w	801ec64 <qr_DvOBrgQi+0x488>
    knt = 6;
 801eb5e:	2306      	movs	r3, #6
 801eb60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 801eb64:	2305      	movs	r3, #5
 801eb66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801eb6a:	e009      	b.n	801eb80 <qr_DvOBrgQi+0x3a4>
      knt--;
 801eb6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eb70:	3b01      	subs	r3, #1
 801eb72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801eb76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb7a:	3b01      	subs	r3, #1
 801eb7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801eb80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	dd11      	ble.n	801ebac <qr_DvOBrgQi+0x3d0>
 801eb88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eb8c:	00db      	lsls	r3, r3, #3
 801eb8e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb92:	4413      	add	r3, r2
 801eb94:	3bd0      	subs	r3, #208	; 0xd0
 801eb96:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb9a:	f04f 0200 	mov.w	r2, #0
 801eb9e:	f04f 0300 	mov.w	r3, #0
 801eba2:	f7e1 ff83 	bl	8000aac <__aeabi_dcmpeq>
 801eba6:	4603      	mov	r3, r0
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d1df      	bne.n	801eb6c <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 801ebac:	2302      	movs	r3, #2
 801ebae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801ebb8:	e04b      	b.n	801ec52 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 801ebba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ebbe:	4613      	mov	r3, r2
 801ebc0:	005b      	lsls	r3, r3, #1
 801ebc2:	4413      	add	r3, r2
 801ebc4:	005b      	lsls	r3, r3, #1
 801ebc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 801ebca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ebce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 801ebd8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801ebdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ebe0:	441a      	add	r2, r3
 801ebe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ebe6:	4293      	cmp	r3, r2
 801ebe8:	da20      	bge.n	801ec2c <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 801ebea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ebee:	00db      	lsls	r3, r3, #3
 801ebf0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ebf4:	4413      	add	r3, r2
 801ebf6:	3bd0      	subs	r3, #208	; 0xd0
 801ebf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ebfc:	f04f 0200 	mov.w	r2, #0
 801ec00:	f04f 0300 	mov.w	r3, #0
 801ec04:	f7e1 ff52 	bl	8000aac <__aeabi_dcmpeq>
 801ec08:	4603      	mov	r3, r0
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d108      	bne.n	801ec20 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 801ec0e:	2301      	movs	r3, #1
 801ec10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801ec14:	e012      	b.n	801ec3c <qr_DvOBrgQi+0x460>
 801ec16:	bf00      	nop
 801ec18:	7c900000 	.word	0x7c900000
 801ec1c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801ec20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ec24:	3301      	adds	r3, #1
 801ec26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801ec2a:	e007      	b.n	801ec3c <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 801ec2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ec30:	3b01      	subs	r3, #1
 801ec32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 801ec36:	2302      	movs	r3, #2
 801ec38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801ec3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d0c6      	beq.n	801ebd2 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 801ec44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ec48:	2b01      	cmp	r3, #1
 801ec4a:	d102      	bne.n	801ec52 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 801ec4c:	2301      	movs	r3, #1
 801ec4e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801ec52:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d10a      	bne.n	801ec70 <qr_DvOBrgQi+0x494>
 801ec5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	dcab      	bgt.n	801ebba <qr_DvOBrgQi+0x3de>
 801ec62:	e005      	b.n	801ec70 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 801ec64:	2300      	movs	r3, #0
 801ec66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801ec70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	dd29      	ble.n	801eccc <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 801ec78:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801ec7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ec80:	9302      	str	r3, [sp, #8]
 801ec82:	2301      	movs	r3, #1
 801ec84:	9301      	str	r3, [sp, #4]
 801ec86:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ec8a:	9300      	str	r3, [sp, #0]
 801ec8c:	2307      	movs	r3, #7
 801ec8e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801ec92:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801ec96:	f003 f943 	bl	8021f20 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 801ec9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801ec9e:	653b      	str	r3, [r7, #80]	; 0x50
 801eca0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801eca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eca8:	657b      	str	r3, [r7, #84]	; 0x54
 801ecaa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801ecae:	2307      	movs	r3, #7
 801ecb0:	9301      	str	r3, [sp, #4]
 801ecb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ecb6:	9300      	str	r3, [sp, #0]
 801ecb8:	4613      	mov	r3, r2
 801ecba:	2201      	movs	r2, #1
 801ecbc:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801ecc0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801ecc4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801ecc8:	f003 fa38 	bl	802213c <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 801eccc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ecd0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 801ecd4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801ecd8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 801ecdc:	f04f 0200 	mov.w	r2, #0
 801ece0:	f04f 0300 	mov.w	r3, #0
 801ece4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 801ece8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ecec:	2209      	movs	r2, #9
 801ecee:	4619      	mov	r1, r3
 801ecf0:	2004      	movs	r0, #4
 801ecf2:	f003 fd33 	bl	802275c <xnrm2_nLdASVZH>
 801ecf6:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801ecfa:	f04f 0200 	mov.w	r2, #0
 801ecfe:	f04f 0300 	mov.w	r3, #0
 801ed02:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ed06:	f7e1 fed1 	bl	8000aac <__aeabi_dcmpeq>
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	f040 8174 	bne.w	801effa <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 801ed12:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 801ed16:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801ed1a:	eeb0 0a47 	vmov.f32	s0, s14
 801ed1e:	eef0 0a67 	vmov.f32	s1, s15
 801ed22:	f001 f835 	bl	801fd90 <rt_hypotd_snf>
 801ed26:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 801ed2a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801ed2e:	f04f 0200 	mov.w	r2, #0
 801ed32:	f04f 0300 	mov.w	r3, #0
 801ed36:	f7e1 fed7 	bl	8000ae8 <__aeabi_dcmpge>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d009      	beq.n	801ed54 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 801ed40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ed44:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ed48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ed4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ed50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801ed54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ed58:	64bb      	str	r3, [r7, #72]	; 0x48
 801ed5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ed5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ed62:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ed64:	f04f 0200 	mov.w	r2, #0
 801ed68:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ed6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801ed70:	f7e1 fea6 	bl	8000ac0 <__aeabi_dcmplt>
 801ed74:	4603      	mov	r3, r0
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	f000 80f1 	beq.w	801ef5e <qr_DvOBrgQi+0x782>
      knt = 0;
 801ed7c:	2300      	movs	r3, #0
 801ed7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801ed82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ed86:	3301      	adds	r3, #1
 801ed88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ed8c:	2308      	movs	r3, #8
 801ed8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ed92:	e01f      	b.n	801edd4 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801ed94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ed98:	00db      	lsls	r3, r3, #3
 801ed9a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ed9e:	4413      	add	r3, r2
 801eda0:	3bd0      	subs	r3, #208	; 0xd0
 801eda2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eda6:	f04f 0200 	mov.w	r2, #0
 801edaa:	4bc6      	ldr	r3, [pc, #792]	; (801f0c4 <qr_DvOBrgQi+0x8e8>)
 801edac:	f7e1 fc16 	bl	80005dc <__aeabi_dmul>
 801edb0:	4602      	mov	r2, r0
 801edb2:	460b      	mov	r3, r1
 801edb4:	4610      	mov	r0, r2
 801edb6:	4619      	mov	r1, r3
 801edb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801edbc:	00db      	lsls	r3, r3, #3
 801edbe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801edc2:	4413      	add	r3, r2
 801edc4:	3bd0      	subs	r3, #208	; 0xd0
 801edc6:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801edca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801edce:	3301      	adds	r3, #1
 801edd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801edd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801edd8:	2b0b      	cmp	r3, #11
 801edda:	dddb      	ble.n	801ed94 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 801eddc:	f04f 0200 	mov.w	r2, #0
 801ede0:	4bb8      	ldr	r3, [pc, #736]	; (801f0c4 <qr_DvOBrgQi+0x8e8>)
 801ede2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ede6:	f7e1 fbf9 	bl	80005dc <__aeabi_dmul>
 801edea:	4602      	mov	r2, r0
 801edec:	460b      	mov	r3, r1
 801edee:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801edf2:	f04f 0200 	mov.w	r2, #0
 801edf6:	4bb3      	ldr	r3, [pc, #716]	; (801f0c4 <qr_DvOBrgQi+0x8e8>)
 801edf8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801edfc:	f7e1 fbee 	bl	80005dc <__aeabi_dmul>
 801ee00:	4602      	mov	r2, r0
 801ee02:	460b      	mov	r3, r1
 801ee04:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801ee08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ee0c:	643b      	str	r3, [r7, #64]	; 0x40
 801ee0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ee12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee16:	647b      	str	r3, [r7, #68]	; 0x44
 801ee18:	f04f 0200 	mov.w	r2, #0
 801ee1c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ee20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ee24:	f7e1 fe4c 	bl	8000ac0 <__aeabi_dcmplt>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d003      	beq.n	801ee36 <qr_DvOBrgQi+0x65a>
 801ee2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ee32:	2b13      	cmp	r3, #19
 801ee34:	dda5      	ble.n	801ed82 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 801ee36:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ee3a:	2209      	movs	r2, #9
 801ee3c:	4619      	mov	r1, r3
 801ee3e:	2004      	movs	r0, #4
 801ee40:	f003 fc8c 	bl	802275c <xnrm2_nLdASVZH>
 801ee44:	eeb0 7a40 	vmov.f32	s14, s0
 801ee48:	eef0 7a60 	vmov.f32	s15, s1
 801ee4c:	eeb0 1a47 	vmov.f32	s2, s14
 801ee50:	eef0 1a67 	vmov.f32	s3, s15
 801ee54:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801ee58:	f000 ff9a 	bl	801fd90 <rt_hypotd_snf>
 801ee5c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801ee60:	f04f 0200 	mov.w	r2, #0
 801ee64:	f04f 0300 	mov.w	r3, #0
 801ee68:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ee6c:	f7e1 fe3c 	bl	8000ae8 <__aeabi_dcmpge>
 801ee70:	4603      	mov	r3, r0
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d009      	beq.n	801ee8a <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 801ee76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ee7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ee7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ee82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ee86:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801ee8a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ee8e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ee92:	f7e1 f9eb 	bl	800026c <__aeabi_dsub>
 801ee96:	4602      	mov	r2, r0
 801ee98:	460b      	mov	r3, r1
 801ee9a:	4610      	mov	r0, r2
 801ee9c:	4619      	mov	r1, r3
 801ee9e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eea2:	f7e1 fcc5 	bl	8000830 <__aeabi_ddiv>
 801eea6:	4602      	mov	r2, r0
 801eea8:	460b      	mov	r3, r1
 801eeaa:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 801eeae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eeb2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801eeb6:	f7e1 f9d9 	bl	800026c <__aeabi_dsub>
 801eeba:	4602      	mov	r2, r0
 801eebc:	460b      	mov	r3, r1
 801eebe:	f04f 0000 	mov.w	r0, #0
 801eec2:	4981      	ldr	r1, [pc, #516]	; (801f0c8 <qr_DvOBrgQi+0x8ec>)
 801eec4:	f7e1 fcb4 	bl	8000830 <__aeabi_ddiv>
 801eec8:	4602      	mov	r2, r0
 801eeca:	460b      	mov	r3, r1
 801eecc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801eed0:	2308      	movs	r3, #8
 801eed2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801eed6:	e01e      	b.n	801ef16 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 801eed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eedc:	00db      	lsls	r3, r3, #3
 801eede:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eee2:	4413      	add	r3, r2
 801eee4:	3bd0      	subs	r3, #208	; 0xd0
 801eee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eeea:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eeee:	f7e1 fb75 	bl	80005dc <__aeabi_dmul>
 801eef2:	4602      	mov	r2, r0
 801eef4:	460b      	mov	r3, r1
 801eef6:	4610      	mov	r0, r2
 801eef8:	4619      	mov	r1, r3
 801eefa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eefe:	00db      	lsls	r3, r3, #3
 801ef00:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ef04:	4413      	add	r3, r2
 801ef06:	3bd0      	subs	r3, #208	; 0xd0
 801ef08:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801ef0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef10:	3301      	adds	r3, #1
 801ef12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ef16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ef1a:	2b0b      	cmp	r3, #11
 801ef1c:	dddc      	ble.n	801eed8 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ef1e:	2300      	movs	r3, #0
 801ef20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ef24:	e010      	b.n	801ef48 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 801ef26:	f04f 0200 	mov.w	r2, #0
 801ef2a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ef2e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ef32:	f7e1 fb53 	bl	80005dc <__aeabi_dmul>
 801ef36:	4602      	mov	r2, r0
 801ef38:	460b      	mov	r3, r1
 801ef3a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ef3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ef42:	3301      	adds	r3, #1
 801ef44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ef48:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ef4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ef50:	429a      	cmp	r2, r3
 801ef52:	dbe8      	blt.n	801ef26 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 801ef54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ef58:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801ef5c:	e04d      	b.n	801effa <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 801ef5e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801ef62:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ef66:	f7e1 f981 	bl	800026c <__aeabi_dsub>
 801ef6a:	4602      	mov	r2, r0
 801ef6c:	460b      	mov	r3, r1
 801ef6e:	4610      	mov	r0, r2
 801ef70:	4619      	mov	r1, r3
 801ef72:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ef76:	f7e1 fc5b 	bl	8000830 <__aeabi_ddiv>
 801ef7a:	4602      	mov	r2, r0
 801ef7c:	460b      	mov	r3, r1
 801ef7e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 801ef82:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801ef86:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ef8a:	f7e1 f96f 	bl	800026c <__aeabi_dsub>
 801ef8e:	4602      	mov	r2, r0
 801ef90:	460b      	mov	r3, r1
 801ef92:	f04f 0000 	mov.w	r0, #0
 801ef96:	494c      	ldr	r1, [pc, #304]	; (801f0c8 <qr_DvOBrgQi+0x8ec>)
 801ef98:	f7e1 fc4a 	bl	8000830 <__aeabi_ddiv>
 801ef9c:	4602      	mov	r2, r0
 801ef9e:	460b      	mov	r3, r1
 801efa0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801efa4:	2308      	movs	r3, #8
 801efa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801efaa:	e01e      	b.n	801efea <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 801efac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801efb0:	00db      	lsls	r3, r3, #3
 801efb2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801efb6:	4413      	add	r3, r2
 801efb8:	3bd0      	subs	r3, #208	; 0xd0
 801efba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801efbe:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801efc2:	f7e1 fb0b 	bl	80005dc <__aeabi_dmul>
 801efc6:	4602      	mov	r2, r0
 801efc8:	460b      	mov	r3, r1
 801efca:	4610      	mov	r0, r2
 801efcc:	4619      	mov	r1, r3
 801efce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801efd2:	00db      	lsls	r3, r3, #3
 801efd4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801efd8:	4413      	add	r3, r2
 801efda:	3bd0      	subs	r3, #208	; 0xd0
 801efdc:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801efe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801efe4:	3301      	adds	r3, #1
 801efe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801efea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801efee:	2b0b      	cmp	r3, #11
 801eff0:	dddc      	ble.n	801efac <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 801eff2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801eff6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 801effa:	f04f 0200 	mov.w	r2, #0
 801effe:	4b32      	ldr	r3, [pc, #200]	; (801f0c8 <qr_DvOBrgQi+0x8ec>)
 801f000:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f004:	f04f 0200 	mov.w	r2, #0
 801f008:	f04f 0300 	mov.w	r3, #0
 801f00c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f010:	f7e1 fd4c 	bl	8000aac <__aeabi_dcmpeq>
 801f014:	4603      	mov	r3, r0
 801f016:	2b00      	cmp	r3, #0
 801f018:	d163      	bne.n	801f0e2 <qr_DvOBrgQi+0x906>
    knt = 5;
 801f01a:	2305      	movs	r3, #5
 801f01c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 801f020:	230b      	movs	r3, #11
 801f022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f026:	e009      	b.n	801f03c <qr_DvOBrgQi+0x860>
      knt--;
 801f028:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f02c:	3b01      	subs	r3, #1
 801f02e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801f032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f036:	3b01      	subs	r3, #1
 801f038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f040:	2b00      	cmp	r3, #0
 801f042:	dd11      	ble.n	801f068 <qr_DvOBrgQi+0x88c>
 801f044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f048:	00db      	lsls	r3, r3, #3
 801f04a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f04e:	4413      	add	r3, r2
 801f050:	3bd0      	subs	r3, #208	; 0xd0
 801f052:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f056:	f04f 0200 	mov.w	r2, #0
 801f05a:	f04f 0300 	mov.w	r3, #0
 801f05e:	f7e1 fd25 	bl	8000aac <__aeabi_dcmpeq>
 801f062:	4603      	mov	r3, r0
 801f064:	2b00      	cmp	r3, #0
 801f066:	d1df      	bne.n	801f028 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 801f068:	2301      	movs	r3, #1
 801f06a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 801f06e:	230d      	movs	r3, #13
 801f070:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 801f074:	2300      	movs	r3, #0
 801f076:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 801f07a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f07e:	f103 020c 	add.w	r2, r3, #12
 801f082:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f086:	4293      	cmp	r3, r2
 801f088:	dc20      	bgt.n	801f0cc <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 801f08a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f08e:	00db      	lsls	r3, r3, #3
 801f090:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f094:	4413      	add	r3, r2
 801f096:	3bd0      	subs	r3, #208	; 0xd0
 801f098:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f09c:	f04f 0200 	mov.w	r2, #0
 801f0a0:	f04f 0300 	mov.w	r3, #0
 801f0a4:	f7e1 fd02 	bl	8000aac <__aeabi_dcmpeq>
 801f0a8:	4603      	mov	r3, r0
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	d103      	bne.n	801f0b6 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f0b4:	e010      	b.n	801f0d8 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 801f0b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f0ba:	3301      	adds	r3, #1
 801f0bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801f0c0:	e00a      	b.n	801f0d8 <qr_DvOBrgQi+0x8fc>
 801f0c2:	bf00      	nop
 801f0c4:	7c900000 	.word	0x7c900000
 801f0c8:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 801f0cc:	2300      	movs	r3, #0
 801f0ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 801f0d2:	2301      	movs	r3, #1
 801f0d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f0d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d0c9      	beq.n	801f074 <qr_DvOBrgQi+0x898>
 801f0e0:	e005      	b.n	801f0ee <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801f0ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	dd29      	ble.n	801f14a <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 801f0f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f0fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f0fe:	9302      	str	r3, [sp, #8]
 801f100:	2308      	movs	r3, #8
 801f102:	9301      	str	r3, [sp, #4]
 801f104:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f108:	9300      	str	r3, [sp, #0]
 801f10a:	230e      	movs	r3, #14
 801f10c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f110:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f114:	f002 ff04 	bl	8021f20 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 801f118:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f11c:	63bb      	str	r3, [r7, #56]	; 0x38
 801f11e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f122:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f126:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f128:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f12c:	230e      	movs	r3, #14
 801f12e:	9301      	str	r3, [sp, #4]
 801f130:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f134:	9300      	str	r3, [sp, #0]
 801f136:	4613      	mov	r3, r2
 801f138:	2208      	movs	r2, #8
 801f13a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801f13e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f142:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f146:	f002 fff9 	bl	802213c <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 801f14a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f14e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 801f152:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f156:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 801f15a:	f04f 0200 	mov.w	r2, #0
 801f15e:	f04f 0300 	mov.w	r3, #0
 801f162:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 801f166:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f16a:	2210      	movs	r2, #16
 801f16c:	4619      	mov	r1, r3
 801f16e:	2003      	movs	r0, #3
 801f170:	f003 faf4 	bl	802275c <xnrm2_nLdASVZH>
 801f174:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801f178:	f04f 0200 	mov.w	r2, #0
 801f17c:	f04f 0300 	mov.w	r3, #0
 801f180:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f184:	f7e1 fc92 	bl	8000aac <__aeabi_dcmpeq>
 801f188:	4603      	mov	r3, r0
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	f040 8170 	bne.w	801f470 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 801f190:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 801f194:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801f198:	eeb0 0a47 	vmov.f32	s0, s14
 801f19c:	eef0 0a67 	vmov.f32	s1, s15
 801f1a0:	f000 fdf6 	bl	801fd90 <rt_hypotd_snf>
 801f1a4:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 801f1a8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f1ac:	f04f 0200 	mov.w	r2, #0
 801f1b0:	f04f 0300 	mov.w	r3, #0
 801f1b4:	f7e1 fc98 	bl	8000ae8 <__aeabi_dcmpge>
 801f1b8:	4603      	mov	r3, r0
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d009      	beq.n	801f1d2 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 801f1be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f1c2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f1c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f1ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f1ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801f1d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f1d6:	633b      	str	r3, [r7, #48]	; 0x30
 801f1d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1e0:	637b      	str	r3, [r7, #52]	; 0x34
 801f1e2:	f04f 0200 	mov.w	r2, #0
 801f1e6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f1ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801f1ee:	f7e1 fc67 	bl	8000ac0 <__aeabi_dcmplt>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	f000 80ef 	beq.w	801f3d8 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801f200:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f204:	3301      	adds	r3, #1
 801f206:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f20a:	230f      	movs	r3, #15
 801f20c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f210:	e01f      	b.n	801f252 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801f212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f216:	00db      	lsls	r3, r3, #3
 801f218:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f21c:	4413      	add	r3, r2
 801f21e:	3bd0      	subs	r3, #208	; 0xd0
 801f220:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f224:	f04f 0200 	mov.w	r2, #0
 801f228:	4bb5      	ldr	r3, [pc, #724]	; (801f500 <qr_DvOBrgQi+0xd24>)
 801f22a:	f7e1 f9d7 	bl	80005dc <__aeabi_dmul>
 801f22e:	4602      	mov	r2, r0
 801f230:	460b      	mov	r3, r1
 801f232:	4610      	mov	r0, r2
 801f234:	4619      	mov	r1, r3
 801f236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f23a:	00db      	lsls	r3, r3, #3
 801f23c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f240:	4413      	add	r3, r2
 801f242:	3bd0      	subs	r3, #208	; 0xd0
 801f244:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f24c:	3301      	adds	r3, #1
 801f24e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f256:	2b11      	cmp	r3, #17
 801f258:	dddb      	ble.n	801f212 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 801f25a:	f04f 0200 	mov.w	r2, #0
 801f25e:	4ba8      	ldr	r3, [pc, #672]	; (801f500 <qr_DvOBrgQi+0xd24>)
 801f260:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f264:	f7e1 f9ba 	bl	80005dc <__aeabi_dmul>
 801f268:	4602      	mov	r2, r0
 801f26a:	460b      	mov	r3, r1
 801f26c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801f270:	f04f 0200 	mov.w	r2, #0
 801f274:	4ba2      	ldr	r3, [pc, #648]	; (801f500 <qr_DvOBrgQi+0xd24>)
 801f276:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f27a:	f7e1 f9af 	bl	80005dc <__aeabi_dmul>
 801f27e:	4602      	mov	r2, r0
 801f280:	460b      	mov	r3, r1
 801f282:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801f286:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f28a:	62bb      	str	r3, [r7, #40]	; 0x28
 801f28c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f294:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f296:	f04f 0200 	mov.w	r2, #0
 801f29a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f29e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801f2a2:	f7e1 fc0d 	bl	8000ac0 <__aeabi_dcmplt>
 801f2a6:	4603      	mov	r3, r0
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d003      	beq.n	801f2b4 <qr_DvOBrgQi+0xad8>
 801f2ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f2b0:	2b13      	cmp	r3, #19
 801f2b2:	dda5      	ble.n	801f200 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 801f2b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f2b8:	2210      	movs	r2, #16
 801f2ba:	4619      	mov	r1, r3
 801f2bc:	2003      	movs	r0, #3
 801f2be:	f003 fa4d 	bl	802275c <xnrm2_nLdASVZH>
 801f2c2:	eeb0 7a40 	vmov.f32	s14, s0
 801f2c6:	eef0 7a60 	vmov.f32	s15, s1
 801f2ca:	eeb0 1a47 	vmov.f32	s2, s14
 801f2ce:	eef0 1a67 	vmov.f32	s3, s15
 801f2d2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801f2d6:	f000 fd5b 	bl	801fd90 <rt_hypotd_snf>
 801f2da:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801f2de:	f04f 0200 	mov.w	r2, #0
 801f2e2:	f04f 0300 	mov.w	r3, #0
 801f2e6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f2ea:	f7e1 fbfd 	bl	8000ae8 <__aeabi_dcmpge>
 801f2ee:	4603      	mov	r3, r0
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d009      	beq.n	801f308 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 801f2f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f2f8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f2fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f304:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 801f308:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f30c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f310:	f7e0 ffac 	bl	800026c <__aeabi_dsub>
 801f314:	4602      	mov	r2, r0
 801f316:	460b      	mov	r3, r1
 801f318:	4610      	mov	r0, r2
 801f31a:	4619      	mov	r1, r3
 801f31c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f320:	f7e1 fa86 	bl	8000830 <__aeabi_ddiv>
 801f324:	4602      	mov	r2, r0
 801f326:	460b      	mov	r3, r1
 801f328:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 801f32c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f330:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f334:	f7e0 ff9a 	bl	800026c <__aeabi_dsub>
 801f338:	4602      	mov	r2, r0
 801f33a:	460b      	mov	r3, r1
 801f33c:	f04f 0000 	mov.w	r0, #0
 801f340:	4970      	ldr	r1, [pc, #448]	; (801f504 <qr_DvOBrgQi+0xd28>)
 801f342:	f7e1 fa75 	bl	8000830 <__aeabi_ddiv>
 801f346:	4602      	mov	r2, r0
 801f348:	460b      	mov	r3, r1
 801f34a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f34e:	230f      	movs	r3, #15
 801f350:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f354:	e01c      	b.n	801f390 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 801f356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f35a:	00db      	lsls	r3, r3, #3
 801f35c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f360:	4413      	add	r3, r2
 801f362:	3bd0      	subs	r3, #208	; 0xd0
 801f364:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f368:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f36c:	f7e1 f936 	bl	80005dc <__aeabi_dmul>
 801f370:	4602      	mov	r2, r0
 801f372:	460b      	mov	r3, r1
 801f374:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f378:	00c9      	lsls	r1, r1, #3
 801f37a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f37e:	4401      	add	r1, r0
 801f380:	39d0      	subs	r1, #208	; 0xd0
 801f382:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f38a:	3301      	adds	r3, #1
 801f38c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f394:	2b11      	cmp	r3, #17
 801f396:	ddde      	ble.n	801f356 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f398:	2300      	movs	r3, #0
 801f39a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f39e:	e010      	b.n	801f3c2 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 801f3a0:	f04f 0200 	mov.w	r2, #0
 801f3a4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f3a8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f3ac:	f7e1 f916 	bl	80005dc <__aeabi_dmul>
 801f3b0:	4602      	mov	r2, r0
 801f3b2:	460b      	mov	r3, r1
 801f3b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f3bc:	3301      	adds	r3, #1
 801f3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f3c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f3c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f3ca:	429a      	cmp	r2, r3
 801f3cc:	dbe8      	blt.n	801f3a0 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 801f3ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f3d2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801f3d6:	e04b      	b.n	801f470 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 801f3d8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f3dc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f3e0:	f7e0 ff44 	bl	800026c <__aeabi_dsub>
 801f3e4:	4602      	mov	r2, r0
 801f3e6:	460b      	mov	r3, r1
 801f3e8:	4610      	mov	r0, r2
 801f3ea:	4619      	mov	r1, r3
 801f3ec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f3f0:	f7e1 fa1e 	bl	8000830 <__aeabi_ddiv>
 801f3f4:	4602      	mov	r2, r0
 801f3f6:	460b      	mov	r3, r1
 801f3f8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 801f3fc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f400:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f404:	f7e0 ff32 	bl	800026c <__aeabi_dsub>
 801f408:	4602      	mov	r2, r0
 801f40a:	460b      	mov	r3, r1
 801f40c:	f04f 0000 	mov.w	r0, #0
 801f410:	493c      	ldr	r1, [pc, #240]	; (801f504 <qr_DvOBrgQi+0xd28>)
 801f412:	f7e1 fa0d 	bl	8000830 <__aeabi_ddiv>
 801f416:	4602      	mov	r2, r0
 801f418:	460b      	mov	r3, r1
 801f41a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f41e:	230f      	movs	r3, #15
 801f420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f424:	e01c      	b.n	801f460 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 801f426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f42a:	00db      	lsls	r3, r3, #3
 801f42c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f430:	4413      	add	r3, r2
 801f432:	3bd0      	subs	r3, #208	; 0xd0
 801f434:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f438:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f43c:	f7e1 f8ce 	bl	80005dc <__aeabi_dmul>
 801f440:	4602      	mov	r2, r0
 801f442:	460b      	mov	r3, r1
 801f444:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f448:	00c9      	lsls	r1, r1, #3
 801f44a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f44e:	4401      	add	r1, r0
 801f450:	39d0      	subs	r1, #208	; 0xd0
 801f452:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f45a:	3301      	adds	r3, #1
 801f45c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f464:	2b11      	cmp	r3, #17
 801f466:	ddde      	ble.n	801f426 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 801f468:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f46c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 801f470:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f474:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 801f478:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801f47c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f47e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f482:	2301      	movs	r3, #1
 801f484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f488:	e00f      	b.n	801f4aa <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 801f48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f48e:	00db      	lsls	r3, r3, #3
 801f490:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f492:	18d1      	adds	r1, r2, r3
 801f494:	f04f 0200 	mov.w	r2, #0
 801f498:	f04f 0300 	mov.w	r3, #0
 801f49c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f4a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f4aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4ae:	2b02      	cmp	r3, #2
 801f4b0:	ddeb      	ble.n	801f48a <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 801f4b2:	f04f 0200 	mov.w	r2, #0
 801f4b6:	f04f 0300 	mov.w	r3, #0
 801f4ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f4be:	2300      	movs	r3, #0
 801f4c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f4c4:	e016      	b.n	801f4f4 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 801f4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4ca:	3306      	adds	r3, #6
 801f4cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f4d0:	3203      	adds	r2, #3
 801f4d2:	00d2      	lsls	r2, r2, #3
 801f4d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f4d6:	4411      	add	r1, r2
 801f4d8:	00db      	lsls	r3, r3, #3
 801f4da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f4de:	4413      	add	r3, r2
 801f4e0:	3bd0      	subs	r3, #208	; 0xd0
 801f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4e6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4ee:	3301      	adds	r3, #1
 801f4f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f4f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f4f8:	2b01      	cmp	r3, #1
 801f4fa:	dde4      	ble.n	801f4c6 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 801f4fc:	e015      	b.n	801f52a <qr_DvOBrgQi+0xd4e>
 801f4fe:	bf00      	nop
 801f500:	7c900000 	.word	0x7c900000
 801f504:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 801f508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f50c:	3303      	adds	r3, #3
 801f50e:	00db      	lsls	r3, r3, #3
 801f510:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f512:	18d1      	adds	r1, r2, r3
 801f514:	f04f 0200 	mov.w	r2, #0
 801f518:	f04f 0300 	mov.w	r3, #0
 801f51c:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801f520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f524:	3301      	adds	r3, #1
 801f526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 801f52a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f52e:	2b02      	cmp	r3, #2
 801f530:	ddea      	ble.n	801f508 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 801f532:	f04f 0200 	mov.w	r2, #0
 801f536:	f04f 0300 	mov.w	r3, #0
 801f53a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f53e:	2300      	movs	r3, #0
 801f540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f544:	e016      	b.n	801f574 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 801f546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f54a:	330c      	adds	r3, #12
 801f54c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f550:	3206      	adds	r2, #6
 801f552:	00d2      	lsls	r2, r2, #3
 801f554:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f556:	4411      	add	r1, r2
 801f558:	00db      	lsls	r3, r3, #3
 801f55a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f55e:	4413      	add	r3, r2
 801f560:	3bd0      	subs	r3, #208	; 0xd0
 801f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f566:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f56a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f56e:	3301      	adds	r3, #1
 801f570:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f578:	2b02      	cmp	r3, #2
 801f57a:	dde4      	ble.n	801f546 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 801f57c:	f04f 0200 	mov.w	r2, #0
 801f580:	f04f 0300 	mov.w	r3, #0
 801f584:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f588:	230f      	movs	r3, #15
 801f58a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f58e:	e024      	b.n	801f5da <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 801f590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f594:	00db      	lsls	r3, r3, #3
 801f596:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f59a:	4413      	add	r3, r2
 801f59c:	3bd0      	subs	r3, #208	; 0xd0
 801f59e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f5a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801f5a6:	623b      	str	r3, [r7, #32]
 801f5a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801f5ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f5b0:	627b      	str	r3, [r7, #36]	; 0x24
 801f5b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f5b6:	f7e1 f811 	bl	80005dc <__aeabi_dmul>
 801f5ba:	4602      	mov	r2, r0
 801f5bc:	460b      	mov	r3, r1
 801f5be:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f5c2:	00c9      	lsls	r1, r1, #3
 801f5c4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f5c8:	4401      	add	r1, r0
 801f5ca:	39d0      	subs	r1, #208	; 0xd0
 801f5cc:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f5d4:	3301      	adds	r3, #1
 801f5d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f5da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f5de:	2b11      	cmp	r3, #17
 801f5e0:	ddd6      	ble.n	801f590 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 801f5e2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801f5e6:	f04f 0000 	mov.w	r0, #0
 801f5ea:	49cc      	ldr	r1, [pc, #816]	; (801f91c <qr_DvOBrgQi+0x1140>)
 801f5ec:	f7e0 fe3e 	bl	800026c <__aeabi_dsub>
 801f5f0:	4602      	mov	r2, r0
 801f5f2:	460b      	mov	r3, r1
 801f5f4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f5f8:	2300      	movs	r3, #0
 801f5fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f5fe:	e014      	b.n	801f62a <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 801f600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f604:	f1c3 030d 	rsb	r3, r3, #13
 801f608:	00db      	lsls	r3, r3, #3
 801f60a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f60e:	4413      	add	r3, r2
 801f610:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 801f614:	f04f 0200 	mov.w	r2, #0
 801f618:	f04f 0300 	mov.w	r3, #0
 801f61c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f624:	3301      	adds	r3, #1
 801f626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f62e:	2b01      	cmp	r3, #1
 801f630:	dde6      	ble.n	801f600 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 801f632:	f04f 0200 	mov.w	r2, #0
 801f636:	4bb9      	ldr	r3, [pc, #740]	; (801f91c <qr_DvOBrgQi+0x1140>)
 801f638:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f63c:	f04f 0200 	mov.w	r2, #0
 801f640:	f04f 0300 	mov.w	r3, #0
 801f644:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f648:	f7e1 fa30 	bl	8000aac <__aeabi_dcmpeq>
 801f64c:	4603      	mov	r3, r0
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d15f      	bne.n	801f712 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 801f652:	2305      	movs	r3, #5
 801f654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 801f658:	230d      	movs	r3, #13
 801f65a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f65e:	e009      	b.n	801f674 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 801f660:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f664:	3b01      	subs	r3, #1
 801f666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801f66a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f66e:	3b01      	subs	r3, #1
 801f670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f678:	2b00      	cmp	r3, #0
 801f67a:	dd12      	ble.n	801f6a2 <qr_DvOBrgQi+0xec6>
 801f67c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f680:	3b02      	subs	r3, #2
 801f682:	00db      	lsls	r3, r3, #3
 801f684:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f688:	4413      	add	r3, r2
 801f68a:	3bd0      	subs	r3, #208	; 0xd0
 801f68c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f690:	f04f 0200 	mov.w	r2, #0
 801f694:	f04f 0300 	mov.w	r3, #0
 801f698:	f7e1 fa08 	bl	8000aac <__aeabi_dcmpeq>
 801f69c:	4603      	mov	r3, r0
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d1de      	bne.n	801f660 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 801f6a2:	2301      	movs	r3, #1
 801f6a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 801f6a8:	230e      	movs	r3, #14
 801f6aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 801f6b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6b8:	330d      	adds	r3, #13
 801f6ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801f6be:	429a      	cmp	r2, r3
 801f6c0:	dc1c      	bgt.n	801f6fc <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 801f6c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f6c6:	3b01      	subs	r3, #1
 801f6c8:	00db      	lsls	r3, r3, #3
 801f6ca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f6ce:	4413      	add	r3, r2
 801f6d0:	3bd0      	subs	r3, #208	; 0xd0
 801f6d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f6d6:	f04f 0200 	mov.w	r2, #0
 801f6da:	f04f 0300 	mov.w	r3, #0
 801f6de:	f7e1 f9e5 	bl	8000aac <__aeabi_dcmpeq>
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	d103      	bne.n	801f6f0 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f6ee:	e00b      	b.n	801f708 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 801f6f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f6f4:	3301      	adds	r3, #1
 801f6f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801f6fa:	e005      	b.n	801f708 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 801f702:	2301      	movs	r3, #1
 801f704:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f708:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d0ce      	beq.n	801f6ae <qr_DvOBrgQi+0xed2>
 801f710:	e005      	b.n	801f71e <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 801f712:	2300      	movs	r3, #0
 801f714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801f718:	2300      	movs	r3, #0
 801f71a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801f71e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f722:	2b00      	cmp	r3, #0
 801f724:	dd29      	ble.n	801f77a <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 801f726:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f72a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f72e:	9302      	str	r3, [sp, #8]
 801f730:	2308      	movs	r3, #8
 801f732:	9301      	str	r3, [sp, #4]
 801f734:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f738:	9300      	str	r3, [sp, #0]
 801f73a:	230e      	movs	r3, #14
 801f73c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f740:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f744:	f002 fbec 	bl	8021f20 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 801f748:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f74c:	61bb      	str	r3, [r7, #24]
 801f74e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f752:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f756:	61fb      	str	r3, [r7, #28]
 801f758:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f75c:	230e      	movs	r3, #14
 801f75e:	9301      	str	r3, [sp, #4]
 801f760:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f764:	9300      	str	r3, [sp, #0]
 801f766:	4613      	mov	r3, r2
 801f768:	2208      	movs	r2, #8
 801f76a:	ed97 0b06 	vldr	d0, [r7, #24]
 801f76e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f772:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f776:	f002 fce1 	bl	802213c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f77a:	2308      	movs	r3, #8
 801f77c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f780:	e024      	b.n	801f7cc <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 801f782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f786:	00db      	lsls	r3, r3, #3
 801f788:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f78c:	4413      	add	r3, r2
 801f78e:	3bd0      	subs	r3, #208	; 0xd0
 801f790:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f794:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f798:	613b      	str	r3, [r7, #16]
 801f79a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f79e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f7a2:	617b      	str	r3, [r7, #20]
 801f7a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f7a8:	f7e0 ff18 	bl	80005dc <__aeabi_dmul>
 801f7ac:	4602      	mov	r2, r0
 801f7ae:	460b      	mov	r3, r1
 801f7b0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f7b4:	00c9      	lsls	r1, r1, #3
 801f7b6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f7ba:	4401      	add	r1, r0
 801f7bc:	39d0      	subs	r1, #208	; 0xd0
 801f7be:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f7c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7c6:	3301      	adds	r3, #1
 801f7c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7d0:	2b0b      	cmp	r3, #11
 801f7d2:	ddd6      	ble.n	801f782 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 801f7d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801f7d8:	f04f 0000 	mov.w	r0, #0
 801f7dc:	494f      	ldr	r1, [pc, #316]	; (801f91c <qr_DvOBrgQi+0x1140>)
 801f7de:	f7e0 fd45 	bl	800026c <__aeabi_dsub>
 801f7e2:	4602      	mov	r2, r0
 801f7e4:	460b      	mov	r3, r1
 801f7e6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 801f7ea:	f04f 0200 	mov.w	r2, #0
 801f7ee:	f04f 0300 	mov.w	r3, #0
 801f7f2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 801f7f6:	f04f 0200 	mov.w	r2, #0
 801f7fa:	4b48      	ldr	r3, [pc, #288]	; (801f91c <qr_DvOBrgQi+0x1140>)
 801f7fc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801f800:	f04f 0200 	mov.w	r2, #0
 801f804:	f04f 0300 	mov.w	r3, #0
 801f808:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801f80c:	f7e1 f94e 	bl	8000aac <__aeabi_dcmpeq>
 801f810:	4603      	mov	r3, r0
 801f812:	2b00      	cmp	r3, #0
 801f814:	f040 8084 	bne.w	801f920 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 801f818:	2306      	movs	r3, #6
 801f81a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 801f81e:	2307      	movs	r3, #7
 801f820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f824:	e009      	b.n	801f83a <qr_DvOBrgQi+0x105e>
      c_lastc--;
 801f826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f82a:	3b01      	subs	r3, #1
 801f82c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801f830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f834:	3b01      	subs	r3, #1
 801f836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f83e:	2b00      	cmp	r3, #0
 801f840:	dd12      	ble.n	801f868 <qr_DvOBrgQi+0x108c>
 801f842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f846:	3b02      	subs	r3, #2
 801f848:	00db      	lsls	r3, r3, #3
 801f84a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f84e:	4413      	add	r3, r2
 801f850:	3bd0      	subs	r3, #208	; 0xd0
 801f852:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f856:	f04f 0200 	mov.w	r2, #0
 801f85a:	f04f 0300 	mov.w	r3, #0
 801f85e:	f7e1 f925 	bl	8000aac <__aeabi_dcmpeq>
 801f862:	4603      	mov	r3, r0
 801f864:	2b00      	cmp	r3, #0
 801f866:	d1de      	bne.n	801f826 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 801f868:	2302      	movs	r3, #2
 801f86a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 801f86e:	2300      	movs	r3, #0
 801f870:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801f874:	e049      	b.n	801f90a <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 801f876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f87a:	1e5a      	subs	r2, r3, #1
 801f87c:	4613      	mov	r3, r2
 801f87e:	005b      	lsls	r3, r3, #1
 801f880:	4413      	add	r3, r2
 801f882:	005b      	lsls	r3, r3, #1
 801f884:	3307      	adds	r3, #7
 801f886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 801f88a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f88e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 801f892:	2300      	movs	r3, #0
 801f894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 801f898:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801f89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f8a0:	4413      	add	r3, r2
 801f8a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801f8a6:	429a      	cmp	r2, r3
 801f8a8:	da1c      	bge.n	801f8e4 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 801f8aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f8ae:	3b01      	subs	r3, #1
 801f8b0:	00db      	lsls	r3, r3, #3
 801f8b2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f8b6:	4413      	add	r3, r2
 801f8b8:	3bd0      	subs	r3, #208	; 0xd0
 801f8ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f8be:	f04f 0200 	mov.w	r2, #0
 801f8c2:	f04f 0300 	mov.w	r3, #0
 801f8c6:	f7e1 f8f1 	bl	8000aac <__aeabi_dcmpeq>
 801f8ca:	4603      	mov	r3, r0
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d103      	bne.n	801f8d8 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f8d6:	e00d      	b.n	801f8f4 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 801f8d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f8dc:	3301      	adds	r3, #1
 801f8de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801f8e2:	e007      	b.n	801f8f4 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 801f8e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f8e8:	3b01      	subs	r3, #1
 801f8ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 801f8ee:	2302      	movs	r3, #2
 801f8f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801f8f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	d0ca      	beq.n	801f892 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 801f8fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f900:	2b01      	cmp	r3, #1
 801f902:	d102      	bne.n	801f90a <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 801f904:	2301      	movs	r3, #1
 801f906:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801f90a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d10c      	bne.n	801f92c <qr_DvOBrgQi+0x1150>
 801f912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f916:	2b00      	cmp	r3, #0
 801f918:	dcad      	bgt.n	801f876 <qr_DvOBrgQi+0x109a>
 801f91a:	e007      	b.n	801f92c <qr_DvOBrgQi+0x1150>
 801f91c:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801f920:	2300      	movs	r3, #0
 801f922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801f926:	2300      	movs	r3, #0
 801f928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801f92c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f930:	2b00      	cmp	r3, #0
 801f932:	dd29      	ble.n	801f988 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 801f934:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f938:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f93c:	9302      	str	r3, [sp, #8]
 801f93e:	2301      	movs	r3, #1
 801f940:	9301      	str	r3, [sp, #4]
 801f942:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f946:	9300      	str	r3, [sp, #0]
 801f948:	2307      	movs	r3, #7
 801f94a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f94e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f952:	f002 fae5 	bl	8021f20 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 801f956:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801f95a:	60bb      	str	r3, [r7, #8]
 801f95c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801f960:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f964:	60fb      	str	r3, [r7, #12]
 801f966:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f96a:	2307      	movs	r3, #7
 801f96c:	9301      	str	r3, [sp, #4]
 801f96e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f972:	9300      	str	r3, [sp, #0]
 801f974:	4613      	mov	r3, r2
 801f976:	2201      	movs	r2, #1
 801f978:	ed97 0b02 	vldr	d0, [r7, #8]
 801f97c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f980:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f984:	f002 fbda 	bl	802213c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801f988:	2301      	movs	r3, #1
 801f98a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f98e:	e024      	b.n	801f9da <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 801f990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f994:	00db      	lsls	r3, r3, #3
 801f996:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f99a:	4413      	add	r3, r2
 801f99c:	3bd0      	subs	r3, #208	; 0xd0
 801f99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f9a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801f9a6:	603b      	str	r3, [r7, #0]
 801f9a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801f9ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f9b0:	607b      	str	r3, [r7, #4]
 801f9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f9b6:	f7e0 fe11 	bl	80005dc <__aeabi_dmul>
 801f9ba:	4602      	mov	r2, r0
 801f9bc:	460b      	mov	r3, r1
 801f9be:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f9c2:	00c9      	lsls	r1, r1, #3
 801f9c4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f9c8:	4401      	add	r1, r0
 801f9ca:	39d0      	subs	r1, #208	; 0xd0
 801f9cc:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801f9d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f9da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f9de:	2b05      	cmp	r3, #5
 801f9e0:	ddd6      	ble.n	801f990 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801f9e2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801f9e6:	f04f 0000 	mov.w	r0, #0
 801f9ea:	4923      	ldr	r1, [pc, #140]	; (801fa78 <qr_DvOBrgQi+0x129c>)
 801f9ec:	f7e0 fc3e 	bl	800026c <__aeabi_dsub>
 801f9f0:	4602      	mov	r2, r0
 801f9f2:	460b      	mov	r3, r1
 801f9f4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 801f9f8:	2300      	movs	r3, #0
 801f9fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801f9fe:	2300      	movs	r3, #0
 801fa00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801fa04:	e02d      	b.n	801fa62 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801fa06:	2300      	movs	r3, #0
 801fa08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fa0c:	e01b      	b.n	801fa46 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 801fa0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801fa12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa16:	4413      	add	r3, r2
 801fa18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 801fa1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fa20:	00db      	lsls	r3, r3, #3
 801fa22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fa24:	18d1      	adds	r1, r2, r3
 801fa26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fa2a:	00db      	lsls	r3, r3, #3
 801fa2c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fa30:	4413      	add	r3, r2
 801fa32:	3bd0      	subs	r3, #208	; 0xd0
 801fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa38:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801fa3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fa40:	3301      	adds	r3, #1
 801fa42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fa46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fa4a:	2b05      	cmp	r3, #5
 801fa4c:	dddf      	ble.n	801fa0e <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 801fa4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa52:	3306      	adds	r3, #6
 801fa54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801fa58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fa5c:	3301      	adds	r3, #1
 801fa5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801fa62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fa66:	2b02      	cmp	r3, #2
 801fa68:	ddcd      	ble.n	801fa06 <qr_DvOBrgQi+0x122a>
  }
}
 801fa6a:	bf00      	nop
 801fa6c:	bf00      	nop
 801fa6e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801fa72:	46bd      	mov	sp, r7
 801fa74:	bdb0      	pop	{r4, r5, r7, pc}
 801fa76:	bf00      	nop
 801fa78:	3ff00000 	.word	0x3ff00000

0801fa7c <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 801fa7c:	b5b0      	push	{r4, r5, r7, lr}
 801fa7e:	b092      	sub	sp, #72	; 0x48
 801fa80:	af00      	add	r7, sp, #0
 801fa82:	ed87 0b06 	vstr	d0, [r7, #24]
 801fa86:	ed87 1b04 	vstr	d1, [r7, #16]
 801fa8a:	60f8      	str	r0, [r7, #12]
 801fa8c:	60b9      	str	r1, [r7, #8]
 801fa8e:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 801fa90:	69bb      	ldr	r3, [r7, #24]
 801fa92:	643b      	str	r3, [r7, #64]	; 0x40
 801fa94:	69fb      	ldr	r3, [r7, #28]
 801fa96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa9a:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 801fa9c:	693b      	ldr	r3, [r7, #16]
 801fa9e:	63bb      	str	r3, [r7, #56]	; 0x38
 801faa0:	697b      	ldr	r3, [r7, #20]
 801faa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801faa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 801faa8:	f04f 0200 	mov.w	r2, #0
 801faac:	f04f 0300 	mov.w	r3, #0
 801fab0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fab4:	f7e0 fffa 	bl	8000aac <__aeabi_dcmpeq>
 801fab8:	4603      	mov	r3, r0
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d012      	beq.n	801fae4 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 801fabe:	68f9      	ldr	r1, [r7, #12]
 801fac0:	f04f 0200 	mov.w	r2, #0
 801fac4:	4b4e      	ldr	r3, [pc, #312]	; (801fc00 <rotate_LZ7ctbe0+0x184>)
 801fac6:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 801faca:	68b9      	ldr	r1, [r7, #8]
 801facc:	f04f 0200 	mov.w	r2, #0
 801fad0:	f04f 0300 	mov.w	r3, #0
 801fad4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 801fad8:	6879      	ldr	r1, [r7, #4]
 801fada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fade:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 801fae2:	e088      	b.n	801fbf6 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 801fae4:	f04f 0200 	mov.w	r2, #0
 801fae8:	f04f 0300 	mov.w	r3, #0
 801faec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801faf0:	f7e0 ffdc 	bl	8000aac <__aeabi_dcmpeq>
 801faf4:	4603      	mov	r3, r0
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d012      	beq.n	801fb20 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 801fafa:	68f9      	ldr	r1, [r7, #12]
 801fafc:	f04f 0200 	mov.w	r2, #0
 801fb00:	f04f 0300 	mov.w	r3, #0
 801fb04:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 801fb08:	68b9      	ldr	r1, [r7, #8]
 801fb0a:	f04f 0200 	mov.w	r2, #0
 801fb0e:	4b3c      	ldr	r3, [pc, #240]	; (801fc00 <rotate_LZ7ctbe0+0x184>)
 801fb10:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 801fb14:	6879      	ldr	r1, [r7, #4]
 801fb16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fb1a:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fb1e:	e06a      	b.n	801fbf6 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 801fb20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fb24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fb28:	f7e0 fba2 	bl	8000270 <__adddf3>
 801fb2c:	4602      	mov	r2, r0
 801fb2e:	460b      	mov	r3, r1
 801fb30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 801fb34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fb38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fb3c:	f7e0 fe78 	bl	8000830 <__aeabi_ddiv>
 801fb40:	4602      	mov	r2, r0
 801fb42:	460b      	mov	r3, r1
 801fb44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 801fb48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fb4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fb50:	f7e0 fe6e 	bl	8000830 <__aeabi_ddiv>
 801fb54:	4602      	mov	r2, r0
 801fb56:	460b      	mov	r3, r1
 801fb58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 801fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb5e:	643b      	str	r3, [r7, #64]	; 0x40
 801fb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fb66:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 801fb68:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb6c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801fb70:	ec45 4b11 	vmov	d1, r4, r5
 801fb74:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 801fb78:	f000 f90a 	bl	801fd90 <rt_hypotd_snf>
 801fb7c:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 801fb80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fb84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801fb88:	f7e0 fe52 	bl	8000830 <__aeabi_ddiv>
 801fb8c:	4602      	mov	r2, r0
 801fb8e:	460b      	mov	r3, r1
 801fb90:	68f9      	ldr	r1, [r7, #12]
 801fb92:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 801fb96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fb9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fb9e:	f7e0 fe47 	bl	8000830 <__aeabi_ddiv>
 801fba2:	4602      	mov	r2, r0
 801fba4:	460b      	mov	r3, r1
 801fba6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 801fbaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801fbae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fbb2:	f7e0 fd13 	bl	80005dc <__aeabi_dmul>
 801fbb6:	4602      	mov	r2, r0
 801fbb8:	460b      	mov	r3, r1
 801fbba:	4610      	mov	r0, r2
 801fbbc:	4619      	mov	r1, r3
 801fbbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fbc2:	f7e0 fe35 	bl	8000830 <__aeabi_ddiv>
 801fbc6:	4602      	mov	r2, r0
 801fbc8:	460b      	mov	r3, r1
 801fbca:	68b9      	ldr	r1, [r7, #8]
 801fbcc:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 801fbd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fbd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801fbd8:	f7e0 fd00 	bl	80005dc <__aeabi_dmul>
 801fbdc:	4602      	mov	r2, r0
 801fbde:	460b      	mov	r3, r1
 801fbe0:	4610      	mov	r0, r2
 801fbe2:	4619      	mov	r1, r3
 801fbe4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801fbe8:	f7e0 fcf8 	bl	80005dc <__aeabi_dmul>
 801fbec:	4602      	mov	r2, r0
 801fbee:	460b      	mov	r3, r1
 801fbf0:	6879      	ldr	r1, [r7, #4]
 801fbf2:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fbf6:	bf00      	nop
 801fbf8:	3748      	adds	r7, #72	; 0x48
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	bdb0      	pop	{r4, r5, r7, pc}
 801fbfe:	bf00      	nop
 801fc00:	3ff00000 	.word	0x3ff00000

0801fc04 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 801fc04:	b580      	push	{r7, lr}
 801fc06:	b086      	sub	sp, #24
 801fc08:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fc0a:	2340      	movs	r3, #64	; 0x40
 801fc0c:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 801fc0e:	f04f 0200 	mov.w	r2, #0
 801fc12:	f04f 0300 	mov.w	r3, #0
 801fc16:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fc1a:	68fb      	ldr	r3, [r7, #12]
 801fc1c:	2b20      	cmp	r3, #32
 801fc1e:	d10b      	bne.n	801fc38 <rtGetInf+0x34>
    inf = rtGetInfF();
 801fc20:	f000 f820 	bl	801fc64 <rtGetInfF>
 801fc24:	ee10 3a10 	vmov	r3, s0
 801fc28:	4618      	mov	r0, r3
 801fc2a:	f7e0 fc7f 	bl	800052c <__aeabi_f2d>
 801fc2e:	4602      	mov	r2, r0
 801fc30:	460b      	mov	r3, r1
 801fc32:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fc36:	e007      	b.n	801fc48 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 801fc38:	4b09      	ldr	r3, [pc, #36]	; (801fc60 <rtGetInf+0x5c>)
 801fc3a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 801fc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fc44:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 801fc48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fc4c:	ec43 2b17 	vmov	d7, r2, r3
}
 801fc50:	eeb0 0a47 	vmov.f32	s0, s14
 801fc54:	eef0 0a67 	vmov.f32	s1, s15
 801fc58:	3718      	adds	r7, #24
 801fc5a:	46bd      	mov	sp, r7
 801fc5c:	bd80      	pop	{r7, pc}
 801fc5e:	bf00      	nop
 801fc60:	7ff00000 	.word	0x7ff00000

0801fc64 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 801fc64:	b480      	push	{r7}
 801fc66:	b083      	sub	sp, #12
 801fc68:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 801fc6a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801fc6e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	ee07 3a90 	vmov	s15, r3
}
 801fc76:	eeb0 0a67 	vmov.f32	s0, s15
 801fc7a:	370c      	adds	r7, #12
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc82:	4770      	bx	lr

0801fc84 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 801fc84:	b580      	push	{r7, lr}
 801fc86:	b086      	sub	sp, #24
 801fc88:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fc8a:	2340      	movs	r3, #64	; 0x40
 801fc8c:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 801fc8e:	f04f 0200 	mov.w	r2, #0
 801fc92:	f04f 0300 	mov.w	r3, #0
 801fc96:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	2b20      	cmp	r3, #32
 801fc9e:	d10b      	bne.n	801fcb8 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 801fca0:	f000 f820 	bl	801fce4 <rtGetMinusInfF>
 801fca4:	ee10 3a10 	vmov	r3, s0
 801fca8:	4618      	mov	r0, r3
 801fcaa:	f7e0 fc3f 	bl	800052c <__aeabi_f2d>
 801fcae:	4602      	mov	r2, r0
 801fcb0:	460b      	mov	r3, r1
 801fcb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fcb6:	e007      	b.n	801fcc8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 801fcb8:	4b09      	ldr	r3, [pc, #36]	; (801fce0 <rtGetMinusInf+0x5c>)
 801fcba:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fcbc:	2300      	movs	r3, #0
 801fcbe:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 801fcc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fcc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 801fcc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fccc:	ec43 2b17 	vmov	d7, r2, r3
}
 801fcd0:	eeb0 0a47 	vmov.f32	s0, s14
 801fcd4:	eef0 0a67 	vmov.f32	s1, s15
 801fcd8:	3718      	adds	r7, #24
 801fcda:	46bd      	mov	sp, r7
 801fcdc:	bd80      	pop	{r7, pc}
 801fcde:	bf00      	nop
 801fce0:	fff00000 	.word	0xfff00000

0801fce4 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 801fce4:	b480      	push	{r7}
 801fce6:	b083      	sub	sp, #12
 801fce8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 801fcea:	4b06      	ldr	r3, [pc, #24]	; (801fd04 <rtGetMinusInfF+0x20>)
 801fcec:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	ee07 3a90 	vmov	s15, r3
}
 801fcf4:	eeb0 0a67 	vmov.f32	s0, s15
 801fcf8:	370c      	adds	r7, #12
 801fcfa:	46bd      	mov	sp, r7
 801fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd00:	4770      	bx	lr
 801fd02:	bf00      	nop
 801fd04:	ff800000 	.word	0xff800000

0801fd08 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	b086      	sub	sp, #24
 801fd0c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fd0e:	2340      	movs	r3, #64	; 0x40
 801fd10:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 801fd12:	f04f 0200 	mov.w	r2, #0
 801fd16:	f04f 0300 	mov.w	r3, #0
 801fd1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fd1e:	68fb      	ldr	r3, [r7, #12]
 801fd20:	2b20      	cmp	r3, #32
 801fd22:	d10b      	bne.n	801fd3c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 801fd24:	f000 f820 	bl	801fd68 <rtGetNaNF>
 801fd28:	ee10 3a10 	vmov	r3, s0
 801fd2c:	4618      	mov	r0, r3
 801fd2e:	f7e0 fbfd 	bl	800052c <__aeabi_f2d>
 801fd32:	4602      	mov	r2, r0
 801fd34:	460b      	mov	r3, r1
 801fd36:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fd3a:	e007      	b.n	801fd4c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 801fd3c:	4b09      	ldr	r3, [pc, #36]	; (801fd64 <rtGetNaN+0x5c>)
 801fd3e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fd40:	2300      	movs	r3, #0
 801fd42:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 801fd44:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fd48:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 801fd4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fd50:	ec43 2b17 	vmov	d7, r2, r3
}
 801fd54:	eeb0 0a47 	vmov.f32	s0, s14
 801fd58:	eef0 0a67 	vmov.f32	s1, s15
 801fd5c:	3718      	adds	r7, #24
 801fd5e:	46bd      	mov	sp, r7
 801fd60:	bd80      	pop	{r7, pc}
 801fd62:	bf00      	nop
 801fd64:	fff80000 	.word	0xfff80000

0801fd68 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 801fd68:	b480      	push	{r7}
 801fd6a:	b083      	sub	sp, #12
 801fd6c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 801fd6e:	f04f 0300 	mov.w	r3, #0
 801fd72:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 801fd74:	4b05      	ldr	r3, [pc, #20]	; (801fd8c <rtGetNaNF+0x24>)
 801fd76:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	ee07 3a90 	vmov	s15, r3
}
 801fd7e:	eeb0 0a67 	vmov.f32	s0, s15
 801fd82:	370c      	adds	r7, #12
 801fd84:	46bd      	mov	sp, r7
 801fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8a:	4770      	bx	lr
 801fd8c:	ffc00000 	.word	0xffc00000

0801fd90 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 801fd90:	b580      	push	{r7, lr}
 801fd92:	b088      	sub	sp, #32
 801fd94:	af00      	add	r7, sp, #0
 801fd96:	ed87 0b02 	vstr	d0, [r7, #8]
 801fd9a:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 801fd9e:	68bb      	ldr	r3, [r7, #8]
 801fda0:	613b      	str	r3, [r7, #16]
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fda8:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 801fdaa:	683b      	ldr	r3, [r7, #0]
 801fdac:	61bb      	str	r3, [r7, #24]
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fdb4:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 801fdb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fdba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fdbe:	f7e0 fe7f 	bl	8000ac0 <__aeabi_dcmplt>
 801fdc2:	4603      	mov	r3, r0
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d02d      	beq.n	801fe24 <rt_hypotd_snf+0x94>
    a /= y;
 801fdc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fdcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fdd0:	f7e0 fd2e 	bl	8000830 <__aeabi_ddiv>
 801fdd4:	4602      	mov	r2, r0
 801fdd6:	460b      	mov	r3, r1
 801fdd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 801fddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fde0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fde4:	f7e0 fbfa 	bl	80005dc <__aeabi_dmul>
 801fde8:	4602      	mov	r2, r0
 801fdea:	460b      	mov	r3, r1
 801fdec:	4610      	mov	r0, r2
 801fdee:	4619      	mov	r1, r3
 801fdf0:	f04f 0200 	mov.w	r2, #0
 801fdf4:	4b38      	ldr	r3, [pc, #224]	; (801fed8 <rt_hypotd_snf+0x148>)
 801fdf6:	f7e0 fa3b 	bl	8000270 <__adddf3>
 801fdfa:	4602      	mov	r2, r0
 801fdfc:	460b      	mov	r3, r1
 801fdfe:	ec43 2b17 	vmov	d7, r2, r3
 801fe02:	eeb0 0a47 	vmov.f32	s0, s14
 801fe06:	eef0 0a67 	vmov.f32	s1, s15
 801fe0a:	f00e fdd9 	bl	802e9c0 <sqrt>
 801fe0e:	ec53 2b10 	vmov	r2, r3, d0
 801fe12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fe16:	f7e0 fbe1 	bl	80005dc <__aeabi_dmul>
 801fe1a:	4602      	mov	r2, r0
 801fe1c:	460b      	mov	r3, r1
 801fe1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801fe22:	e048      	b.n	801feb6 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 801fe24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe2c:	f7e0 fe66 	bl	8000afc <__aeabi_dcmpgt>
 801fe30:	4603      	mov	r3, r0
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d02d      	beq.n	801fe92 <rt_hypotd_snf+0x102>
    y /= a;
 801fe36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fe3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fe3e:	f7e0 fcf7 	bl	8000830 <__aeabi_ddiv>
 801fe42:	4602      	mov	r2, r0
 801fe44:	460b      	mov	r3, r1
 801fe46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 801fe4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fe52:	f7e0 fbc3 	bl	80005dc <__aeabi_dmul>
 801fe56:	4602      	mov	r2, r0
 801fe58:	460b      	mov	r3, r1
 801fe5a:	4610      	mov	r0, r2
 801fe5c:	4619      	mov	r1, r3
 801fe5e:	f04f 0200 	mov.w	r2, #0
 801fe62:	4b1d      	ldr	r3, [pc, #116]	; (801fed8 <rt_hypotd_snf+0x148>)
 801fe64:	f7e0 fa04 	bl	8000270 <__adddf3>
 801fe68:	4602      	mov	r2, r0
 801fe6a:	460b      	mov	r3, r1
 801fe6c:	ec43 2b17 	vmov	d7, r2, r3
 801fe70:	eeb0 0a47 	vmov.f32	s0, s14
 801fe74:	eef0 0a67 	vmov.f32	s1, s15
 801fe78:	f00e fda2 	bl	802e9c0 <sqrt>
 801fe7c:	ec53 2b10 	vmov	r2, r3, d0
 801fe80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fe84:	f7e0 fbaa 	bl	80005dc <__aeabi_dmul>
 801fe88:	4602      	mov	r2, r0
 801fe8a:	460b      	mov	r3, r1
 801fe8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801fe90:	e011      	b.n	801feb6 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 801fe92:	ed97 0b06 	vldr	d0, [r7, #24]
 801fe96:	f000 f889 	bl	801ffac <rtIsNaN>
 801fe9a:	4603      	mov	r3, r0
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	d10a      	bne.n	801feb6 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 801fea0:	a30b      	add	r3, pc, #44	; (adr r3, 801fed0 <rt_hypotd_snf+0x140>)
 801fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801feaa:	f7e0 fb97 	bl	80005dc <__aeabi_dmul>
 801feae:	4602      	mov	r2, r0
 801feb0:	460b      	mov	r3, r1
 801feb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 801feb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801feba:	ec43 2b17 	vmov	d7, r2, r3
}
 801febe:	eeb0 0a47 	vmov.f32	s0, s14
 801fec2:	eef0 0a67 	vmov.f32	s1, s15
 801fec6:	3720      	adds	r7, #32
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}
 801fecc:	f3af 8000 	nop.w
 801fed0:	667f3bcd 	.word	0x667f3bcd
 801fed4:	3ff6a09e 	.word	0x3ff6a09e
 801fed8:	3ff00000 	.word	0x3ff00000

0801fedc <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 801fedc:	b580      	push	{r7, lr}
 801fede:	b082      	sub	sp, #8
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 801fee4:	f7ff ff10 	bl	801fd08 <rtGetNaN>
 801fee8:	eeb0 7a40 	vmov.f32	s14, s0
 801feec:	eef0 7a60 	vmov.f32	s15, s1
 801fef0:	4b16      	ldr	r3, [pc, #88]	; (801ff4c <rt_InitInfAndNaN+0x70>)
 801fef2:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 801fef6:	f7ff ff37 	bl	801fd68 <rtGetNaNF>
 801fefa:	eef0 7a40 	vmov.f32	s15, s0
 801fefe:	4b14      	ldr	r3, [pc, #80]	; (801ff50 <rt_InitInfAndNaN+0x74>)
 801ff00:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 801ff04:	f7ff fe7e 	bl	801fc04 <rtGetInf>
 801ff08:	eeb0 7a40 	vmov.f32	s14, s0
 801ff0c:	eef0 7a60 	vmov.f32	s15, s1
 801ff10:	4b10      	ldr	r3, [pc, #64]	; (801ff54 <rt_InitInfAndNaN+0x78>)
 801ff12:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 801ff16:	f7ff fea5 	bl	801fc64 <rtGetInfF>
 801ff1a:	eef0 7a40 	vmov.f32	s15, s0
 801ff1e:	4b0e      	ldr	r3, [pc, #56]	; (801ff58 <rt_InitInfAndNaN+0x7c>)
 801ff20:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 801ff24:	f7ff feae 	bl	801fc84 <rtGetMinusInf>
 801ff28:	eeb0 7a40 	vmov.f32	s14, s0
 801ff2c:	eef0 7a60 	vmov.f32	s15, s1
 801ff30:	4b0a      	ldr	r3, [pc, #40]	; (801ff5c <rt_InitInfAndNaN+0x80>)
 801ff32:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 801ff36:	f7ff fed5 	bl	801fce4 <rtGetMinusInfF>
 801ff3a:	eef0 7a40 	vmov.f32	s15, s0
 801ff3e:	4b08      	ldr	r3, [pc, #32]	; (801ff60 <rt_InitInfAndNaN+0x84>)
 801ff40:	edc3 7a00 	vstr	s15, [r3]
}
 801ff44:	bf00      	nop
 801ff46:	3708      	adds	r7, #8
 801ff48:	46bd      	mov	sp, r7
 801ff4a:	bd80      	pop	{r7, pc}
 801ff4c:	2001ed68 	.word	0x2001ed68
 801ff50:	2001ed58 	.word	0x2001ed58
 801ff54:	2001ed60 	.word	0x2001ed60
 801ff58:	2001ed5c 	.word	0x2001ed5c
 801ff5c:	2001ed70 	.word	0x2001ed70
 801ff60:	2001ed78 	.word	0x2001ed78

0801ff64 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 801ff64:	b580      	push	{r7, lr}
 801ff66:	b082      	sub	sp, #8
 801ff68:	af00      	add	r7, sp, #0
 801ff6a:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 801ff6e:	4b0d      	ldr	r3, [pc, #52]	; (801ffa4 <rtIsInf+0x40>)
 801ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff74:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ff78:	f7e0 fd98 	bl	8000aac <__aeabi_dcmpeq>
 801ff7c:	4603      	mov	r3, r0
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d109      	bne.n	801ff96 <rtIsInf+0x32>
 801ff82:	4b09      	ldr	r3, [pc, #36]	; (801ffa8 <rtIsInf+0x44>)
 801ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff88:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ff8c:	f7e0 fd8e 	bl	8000aac <__aeabi_dcmpeq>
 801ff90:	4603      	mov	r3, r0
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d001      	beq.n	801ff9a <rtIsInf+0x36>
 801ff96:	2301      	movs	r3, #1
 801ff98:	e000      	b.n	801ff9c <rtIsInf+0x38>
 801ff9a:	2300      	movs	r3, #0
}
 801ff9c:	4618      	mov	r0, r3
 801ff9e:	3708      	adds	r7, #8
 801ffa0:	46bd      	mov	sp, r7
 801ffa2:	bd80      	pop	{r7, pc}
 801ffa4:	2001ed60 	.word	0x2001ed60
 801ffa8:	2001ed70 	.word	0x2001ed70

0801ffac <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 801ffac:	b580      	push	{r7, lr}
 801ffae:	b086      	sub	sp, #24
 801ffb0:	af00      	add	r7, sp, #0
 801ffb2:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 801ffb6:	2300      	movs	r3, #0
 801ffb8:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801ffba:	2340      	movs	r3, #64	; 0x40
 801ffbc:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801ffbe:	693b      	ldr	r3, [r7, #16]
 801ffc0:	2b20      	cmp	r3, #32
 801ffc2:	d10b      	bne.n	801ffdc <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 801ffc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ffc8:	f7e0 fe00 	bl	8000bcc <__aeabi_d2f>
 801ffcc:	4603      	mov	r3, r0
 801ffce:	ee00 3a10 	vmov	s0, r3
 801ffd2:	f000 f821 	bl	8020018 <rtIsNaNF>
 801ffd6:	4603      	mov	r3, r0
 801ffd8:	75fb      	strb	r3, [r7, #23]
 801ffda:	e015      	b.n	8020008 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 801ffdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ffe0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 801ffe4:	68fa      	ldr	r2, [r7, #12]
 801ffe6:	4b0b      	ldr	r3, [pc, #44]	; (8020014 <rtIsNaN+0x68>)
 801ffe8:	4013      	ands	r3, r2
 801ffea:	4a0a      	ldr	r2, [pc, #40]	; (8020014 <rtIsNaN+0x68>)
 801ffec:	4293      	cmp	r3, r2
 801ffee:	d109      	bne.n	8020004 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d102      	bne.n	8020000 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 801fffa:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d001      	beq.n	8020004 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020000:	2301      	movs	r3, #1
 8020002:	e000      	b.n	8020006 <rtIsNaN+0x5a>
 8020004:	2300      	movs	r3, #0
 8020006:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8020008:	7dfb      	ldrb	r3, [r7, #23]
}
 802000a:	4618      	mov	r0, r3
 802000c:	3718      	adds	r7, #24
 802000e:	46bd      	mov	sp, r7
 8020010:	bd80      	pop	{r7, pc}
 8020012:	bf00      	nop
 8020014:	7ff00000 	.word	0x7ff00000

08020018 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 8020018:	b480      	push	{r7}
 802001a:	b085      	sub	sp, #20
 802001c:	af00      	add	r7, sp, #0
 802001e:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8020026:	68fb      	ldr	r3, [r7, #12]
 8020028:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 802002c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020030:	d106      	bne.n	8020040 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8020032:	68fb      	ldr	r3, [r7, #12]
 8020034:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8020038:	2b00      	cmp	r3, #0
 802003a:	d001      	beq.n	8020040 <rtIsNaNF+0x28>
 802003c:	2301      	movs	r3, #1
 802003e:	e000      	b.n	8020042 <rtIsNaNF+0x2a>
 8020040:	2300      	movs	r3, #0
 8020042:	b2db      	uxtb	r3, r3
}
 8020044:	4618      	mov	r0, r3
 8020046:	3714      	adds	r7, #20
 8020048:	46bd      	mov	sp, r7
 802004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802004e:	4770      	bx	lr

08020050 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 8020050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020054:	ed2d 8b02 	vpush	{d8}
 8020058:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 802005c:	af02      	add	r7, sp, #8
 802005e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8020062:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8020066:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 802006a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 802006e:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 8020070:	f04f 0200 	mov.w	r2, #0
 8020074:	f04f 0300 	mov.w	r3, #0
 8020078:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 802007c:	f04f 0200 	mov.w	r2, #0
 8020080:	f04f 0300 	mov.w	r3, #0
 8020084:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 8020088:	f04f 0200 	mov.w	r2, #0
 802008c:	f04f 0300 	mov.w	r3, #0
 8020090:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 8020094:	f04f 0200 	mov.w	r2, #0
 8020098:	f04f 0300 	mov.w	r3, #0
 802009c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 80200a0:	f04f 0200 	mov.w	r2, #0
 80200a4:	f04f 0300 	mov.w	r3, #0
 80200a8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 80200ac:	f04f 0200 	mov.w	r2, #0
 80200b0:	f04f 0300 	mov.w	r3, #0
 80200b4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 80200b8:	2300      	movs	r3, #0
 80200ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80200be:	e02e      	b.n	802011e <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 80200c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80200c4:	00da      	lsls	r2, r3, #3
 80200c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80200ca:	4413      	add	r3, r2
 80200cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80200d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80200d4:	00db      	lsls	r3, r3, #3
 80200d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80200da:	4413      	add	r3, r2
 80200dc:	3b88      	subs	r3, #136	; 0x88
 80200de:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 80200e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80200e6:	00da      	lsls	r2, r3, #3
 80200e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80200ec:	1899      	adds	r1, r3, r2
 80200ee:	f04f 0200 	mov.w	r2, #0
 80200f2:	f04f 0300 	mov.w	r3, #0
 80200f6:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 80200fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80200fe:	00da      	lsls	r2, r3, #3
 8020100:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	1899      	adds	r1, r3, r2
 8020108:	f04f 0200 	mov.w	r2, #0
 802010c:	f04f 0300 	mov.w	r3, #0
 8020110:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 8020114:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020118:	3301      	adds	r3, #1
 802011a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802011e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020122:	2b08      	cmp	r3, #8
 8020124:	ddcc      	ble.n	80200c0 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 8020126:	2300      	movs	r3, #0
 8020128:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 802012c:	2300      	movs	r3, #0
 802012e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 8020132:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020136:	2201      	movs	r2, #1
 8020138:	4619      	mov	r1, r3
 802013a:	2003      	movs	r0, #3
 802013c:	f002 fbbc 	bl	80228b8 <xnrm2_xDOlDEtw>
 8020140:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 8020144:	f04f 0200 	mov.w	r2, #0
 8020148:	f04f 0300 	mov.w	r3, #0
 802014c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020150:	f7e0 fcd4 	bl	8000afc <__aeabi_dcmpgt>
 8020154:	4603      	mov	r3, r0
 8020156:	2b00      	cmp	r3, #0
 8020158:	d07b      	beq.n	8020252 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 802015a:	2301      	movs	r3, #1
 802015c:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 8020160:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8020164:	f04f 0200 	mov.w	r2, #0
 8020168:	f04f 0300 	mov.w	r3, #0
 802016c:	f7e0 fca8 	bl	8000ac0 <__aeabi_dcmplt>
 8020170:	4603      	mov	r3, r0
 8020172:	2b00      	cmp	r3, #0
 8020174:	d008      	beq.n	8020188 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 8020176:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 802017a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802017e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8020182:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 8020186:	e003      	b.n	8020190 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 8020188:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 802018c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 8020190:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020194:	4690      	mov	r8, r2
 8020196:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 802019a:	f04f 0200 	mov.w	r2, #0
 802019e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80201a2:	4640      	mov	r0, r8
 80201a4:	4649      	mov	r1, r9
 80201a6:	f7e0 fc9f 	bl	8000ae8 <__aeabi_dcmpge>
 80201aa:	4603      	mov	r3, r0
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d016      	beq.n	80201de <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 80201b0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80201b4:	f04f 0000 	mov.w	r0, #0
 80201b8:	49c1      	ldr	r1, [pc, #772]	; (80204c0 <svd_u3DvUgOe+0x470>)
 80201ba:	f7e0 fb39 	bl	8000830 <__aeabi_ddiv>
 80201be:	4602      	mov	r2, r0
 80201c0:	460b      	mov	r3, r1
 80201c2:	ec43 2b17 	vmov	d7, r2, r3
 80201c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80201ca:	2201      	movs	r2, #1
 80201cc:	4619      	mov	r1, r3
 80201ce:	eeb0 0a47 	vmov.f32	s0, s14
 80201d2:	eef0 0a67 	vmov.f32	s1, s15
 80201d6:	2003      	movs	r0, #3
 80201d8:	f002 fe36 	bl	8022e48 <xscal_59GtRAwv>
 80201dc:	e026      	b.n	802022c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 80201de:	2300      	movs	r3, #0
 80201e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80201e4:	e01e      	b.n	8020224 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 80201e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80201ea:	00db      	lsls	r3, r3, #3
 80201ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80201f0:	4413      	add	r3, r2
 80201f2:	3b88      	subs	r3, #136	; 0x88
 80201f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80201f8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80201fc:	f7e0 fb18 	bl	8000830 <__aeabi_ddiv>
 8020200:	4602      	mov	r2, r0
 8020202:	460b      	mov	r3, r1
 8020204:	4610      	mov	r0, r2
 8020206:	4619      	mov	r1, r3
 8020208:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802020c:	00db      	lsls	r3, r3, #3
 802020e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020212:	4413      	add	r3, r2
 8020214:	3b88      	subs	r3, #136	; 0x88
 8020216:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 802021a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802021e:	3301      	adds	r3, #1
 8020220:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020224:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020228:	2b02      	cmp	r3, #2
 802022a:	dddc      	ble.n	80201e6 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 802022c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8020230:	f04f 0200 	mov.w	r2, #0
 8020234:	4ba2      	ldr	r3, [pc, #648]	; (80204c0 <svd_u3DvUgOe+0x470>)
 8020236:	f7e0 f81b 	bl	8000270 <__adddf3>
 802023a:	4602      	mov	r2, r0
 802023c:	460b      	mov	r3, r1
 802023e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 8020242:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020246:	4692      	mov	sl, r2
 8020248:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 802024c:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 8020250:	e005      	b.n	802025e <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 8020252:	f04f 0200 	mov.w	r2, #0
 8020256:	f04f 0300 	mov.w	r3, #0
 802025a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 802025e:	2301      	movs	r3, #1
 8020260:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020264:	e047      	b.n	80202f6 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 8020266:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 802026a:	4613      	mov	r3, r2
 802026c:	005b      	lsls	r3, r3, #1
 802026e:	4413      	add	r3, r2
 8020270:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 8020274:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8020278:	2b00      	cmp	r3, #0
 802027a:	d025      	beq.n	80202c8 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 802027c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020280:	3301      	adds	r3, #1
 8020282:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020286:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 802028a:	9300      	str	r3, [sp, #0]
 802028c:	4613      	mov	r3, r2
 802028e:	2201      	movs	r2, #1
 8020290:	2003      	movs	r0, #3
 8020292:	f001 fdf8 	bl	8021e86 <xdotc_mznw4aLl>
 8020296:	ec51 0b10 	vmov	r0, r1, d0
 802029a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802029e:	f7e0 fac7 	bl	8000830 <__aeabi_ddiv>
 80202a2:	4602      	mov	r2, r0
 80202a4:	460b      	mov	r3, r1
 80202a6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80202aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80202ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80202b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80202b6:	3301      	adds	r3, #1
 80202b8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80202bc:	2101      	movs	r1, #1
 80202be:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80202c2:	2003      	movs	r0, #3
 80202c4:	f001 fd8b 	bl	8021dde <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 80202c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80202cc:	00db      	lsls	r3, r3, #3
 80202ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80202d2:	4413      	add	r3, r2
 80202d4:	3b88      	subs	r3, #136	; 0x88
 80202d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80202da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80202de:	00db      	lsls	r3, r3, #3
 80202e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80202e4:	4413      	add	r3, r2
 80202e6:	3bb8      	subs	r3, #184	; 0xb8
 80202e8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 80202ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80202f0:	3301      	adds	r3, #1
 80202f2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80202f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80202fa:	2b02      	cmp	r3, #2
 80202fc:	ddb3      	ble.n	8020266 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 80202fe:	e015      	b.n	802032c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 8020300:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020304:	00da      	lsls	r2, r3, #3
 8020306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802030a:	1899      	adds	r1, r3, r2
 802030c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020310:	00db      	lsls	r3, r3, #3
 8020312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020316:	4413      	add	r3, r2
 8020318:	3b88      	subs	r3, #136	; 0x88
 802031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802031e:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 8020322:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020326:	3301      	adds	r3, #1
 8020328:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 802032c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020330:	2b02      	cmp	r3, #2
 8020332:	dde5      	ble.n	8020300 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 8020334:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8020338:	2202      	movs	r2, #2
 802033a:	4619      	mov	r1, r3
 802033c:	2002      	movs	r0, #2
 802033e:	f002 f95f 	bl	8022600 <xnrm2_Rlk0oxWw>
 8020342:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 8020346:	f04f 0200 	mov.w	r2, #0
 802034a:	f04f 0300 	mov.w	r3, #0
 802034e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020352:	f7e0 fbab 	bl	8000aac <__aeabi_dcmpeq>
 8020356:	4603      	mov	r3, r0
 8020358:	2b00      	cmp	r3, #0
 802035a:	d006      	beq.n	802036a <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 802035c:	f04f 0200 	mov.w	r2, #0
 8020360:	f04f 0300 	mov.w	r3, #0
 8020364:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8020368:	e10d      	b.n	8020586 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 802036a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 802036e:	f04f 0200 	mov.w	r2, #0
 8020372:	f04f 0300 	mov.w	r3, #0
 8020376:	f7e0 fba3 	bl	8000ac0 <__aeabi_dcmplt>
 802037a:	4603      	mov	r3, r0
 802037c:	2b00      	cmp	r3, #0
 802037e:	d00e      	beq.n	802039e <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 8020380:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8020388:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802038c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020390:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8020394:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8020398:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 802039c:	e003      	b.n	80203a6 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 802039e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80203a2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 80203a6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80203aa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 80203ae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80203b2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80203b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80203be:	f04f 0200 	mov.w	r2, #0
 80203c2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80203c6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80203ca:	f7e0 fb8d 	bl	8000ae8 <__aeabi_dcmpge>
 80203ce:	4603      	mov	r3, r0
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d016      	beq.n	8020402 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 80203d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80203d8:	f04f 0000 	mov.w	r0, #0
 80203dc:	4938      	ldr	r1, [pc, #224]	; (80204c0 <svd_u3DvUgOe+0x470>)
 80203de:	f7e0 fa27 	bl	8000830 <__aeabi_ddiv>
 80203e2:	4602      	mov	r2, r0
 80203e4:	460b      	mov	r3, r1
 80203e6:	ec43 2b17 	vmov	d7, r2, r3
 80203ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80203ee:	2202      	movs	r2, #2
 80203f0:	4619      	mov	r1, r3
 80203f2:	eeb0 0a47 	vmov.f32	s0, s14
 80203f6:	eef0 0a67 	vmov.f32	s1, s15
 80203fa:	2002      	movs	r0, #2
 80203fc:	f002 fd58 	bl	8022eb0 <xscal_PLmmUlD2>
 8020400:	e026      	b.n	8020450 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 8020402:	2301      	movs	r3, #1
 8020404:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020408:	e01e      	b.n	8020448 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 802040a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802040e:	00db      	lsls	r3, r3, #3
 8020410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020414:	4413      	add	r3, r2
 8020416:	3bb8      	subs	r3, #184	; 0xb8
 8020418:	e9d3 0100 	ldrd	r0, r1, [r3]
 802041c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020420:	f7e0 fa06 	bl	8000830 <__aeabi_ddiv>
 8020424:	4602      	mov	r2, r0
 8020426:	460b      	mov	r3, r1
 8020428:	4610      	mov	r0, r2
 802042a:	4619      	mov	r1, r3
 802042c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020430:	00db      	lsls	r3, r3, #3
 8020432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020436:	4413      	add	r3, r2
 8020438:	3bb8      	subs	r3, #184	; 0xb8
 802043a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 802043e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020442:	3301      	adds	r3, #1
 8020444:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020448:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802044c:	2b02      	cmp	r3, #2
 802044e:	dddc      	ble.n	802040a <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 8020450:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8020454:	f04f 0200 	mov.w	r2, #0
 8020458:	4b19      	ldr	r3, [pc, #100]	; (80204c0 <svd_u3DvUgOe+0x470>)
 802045a:	f7df ff09 	bl	8000270 <__adddf3>
 802045e:	4602      	mov	r2, r0
 8020460:	460b      	mov	r3, r1
 8020462:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 8020466:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 802046a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 802046e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8020476:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 802047a:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 802047e:	2302      	movs	r3, #2
 8020480:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020484:	e013      	b.n	80204ae <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 8020486:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802048a:	3b01      	subs	r3, #1
 802048c:	00db      	lsls	r3, r3, #3
 802048e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020492:	4413      	add	r3, r2
 8020494:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 8020498:	f04f 0200 	mov.w	r2, #0
 802049c:	f04f 0300 	mov.w	r3, #0
 80204a0:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 80204a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204a8:	3301      	adds	r3, #1
 80204aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80204ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204b2:	2b03      	cmp	r3, #3
 80204b4:	dde7      	ble.n	8020486 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 80204b6:	2301      	movs	r3, #1
 80204b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80204bc:	e025      	b.n	802050a <svd_u3DvUgOe+0x4ba>
 80204be:	bf00      	nop
 80204c0:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 80204c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80204c8:	00db      	lsls	r3, r3, #3
 80204ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80204ce:	4413      	add	r3, r2
 80204d0:	3bb8      	subs	r3, #184	; 0xb8
 80204d2:	ed93 7b00 	vldr	d7, [r3]
 80204d6:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80204da:	4613      	mov	r3, r2
 80204dc:	005b      	lsls	r3, r3, #1
 80204de:	4413      	add	r3, r2
 80204e0:	1c98      	adds	r0, r3, #2
 80204e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80204e6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80204ea:	2302      	movs	r3, #2
 80204ec:	9300      	str	r3, [sp, #0]
 80204ee:	4613      	mov	r3, r2
 80204f0:	4602      	mov	r2, r0
 80204f2:	eeb0 0a47 	vmov.f32	s0, s14
 80204f6:	eef0 0a67 	vmov.f32	s1, s15
 80204fa:	2002      	movs	r0, #2
 80204fc:	f001 fbc7 	bl	8021c8e <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 8020500:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020504:	3301      	adds	r3, #1
 8020506:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802050a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802050e:	2b02      	cmp	r3, #2
 8020510:	ddd8      	ble.n	80204c4 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 8020512:	2301      	movs	r3, #1
 8020514:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020518:	e031      	b.n	802057e <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 802051a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802051e:	00db      	lsls	r3, r3, #3
 8020520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020524:	4413      	add	r3, r2
 8020526:	3bb8      	subs	r3, #184	; 0xb8
 8020528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802052c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8020530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8020538:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 802053c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8020540:	f7e0 f976 	bl	8000830 <__aeabi_ddiv>
 8020544:	4602      	mov	r2, r0
 8020546:	460b      	mov	r3, r1
 8020548:	ec43 2b17 	vmov	d7, r2, r3
 802054c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020550:	4613      	mov	r3, r2
 8020552:	005b      	lsls	r3, r3, #1
 8020554:	4413      	add	r3, r2
 8020556:	3302      	adds	r3, #2
 8020558:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 802055c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8020560:	9300      	str	r3, [sp, #0]
 8020562:	4613      	mov	r3, r2
 8020564:	2202      	movs	r2, #2
 8020566:	eeb0 0a47 	vmov.f32	s0, s14
 802056a:	eef0 0a67 	vmov.f32	s1, s15
 802056e:	2002      	movs	r0, #2
 8020570:	f001 fbe1 	bl	8021d36 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 8020574:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020578:	3301      	adds	r3, #1
 802057a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802057e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020582:	2b02      	cmp	r3, #2
 8020584:	ddc9      	ble.n	802051a <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 8020586:	2301      	movs	r3, #1
 8020588:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802058c:	e016      	b.n	80205bc <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 802058e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020592:	00da      	lsls	r2, r3, #3
 8020594:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	1899      	adds	r1, r3, r2
 802059c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80205a0:	00db      	lsls	r3, r3, #3
 80205a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80205a6:	4413      	add	r3, r2
 80205a8:	3bb8      	subs	r3, #184	; 0xb8
 80205aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ae:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 80205b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80205b6:	3301      	adds	r3, #1
 80205b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80205bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80205c0:	2b02      	cmp	r3, #2
 80205c2:	dde4      	ble.n	802058e <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 80205c4:	2300      	movs	r3, #0
 80205c6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 80205ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80205ce:	2205      	movs	r2, #5
 80205d0:	4619      	mov	r1, r3
 80205d2:	2002      	movs	r0, #2
 80205d4:	f002 f970 	bl	80228b8 <xnrm2_xDOlDEtw>
 80205d8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 80205dc:	f04f 0200 	mov.w	r2, #0
 80205e0:	f04f 0300 	mov.w	r3, #0
 80205e4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80205e8:	f7e0 fa88 	bl	8000afc <__aeabi_dcmpgt>
 80205ec:	4603      	mov	r3, r0
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	f000 808a 	beq.w	8020708 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 80205f4:	2301      	movs	r3, #1
 80205f6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 80205fa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80205fe:	f04f 0200 	mov.w	r2, #0
 8020602:	f04f 0300 	mov.w	r3, #0
 8020606:	f7e0 fa5b 	bl	8000ac0 <__aeabi_dcmplt>
 802060a:	4603      	mov	r3, r0
 802060c:	2b00      	cmp	r3, #0
 802060e:	d00e      	beq.n	802062e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 8020610:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802061c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8020624:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8020628:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 802062c:	e003      	b.n	8020636 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 802062e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020632:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 8020636:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 802063a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 802063e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8020646:	f04f 0200 	mov.w	r2, #0
 802064a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 802064e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8020652:	f7e0 fa49 	bl	8000ae8 <__aeabi_dcmpge>
 8020656:	4603      	mov	r3, r0
 8020658:	2b00      	cmp	r3, #0
 802065a:	d016      	beq.n	802068a <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 802065c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020660:	f04f 0000 	mov.w	r0, #0
 8020664:	49d6      	ldr	r1, [pc, #856]	; (80209c0 <svd_u3DvUgOe+0x970>)
 8020666:	f7e0 f8e3 	bl	8000830 <__aeabi_ddiv>
 802066a:	4602      	mov	r2, r0
 802066c:	460b      	mov	r3, r1
 802066e:	ec43 2b17 	vmov	d7, r2, r3
 8020672:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020676:	2205      	movs	r2, #5
 8020678:	4619      	mov	r1, r3
 802067a:	eeb0 0a47 	vmov.f32	s0, s14
 802067e:	eef0 0a67 	vmov.f32	s1, s15
 8020682:	2002      	movs	r0, #2
 8020684:	f002 fbe0 	bl	8022e48 <xscal_59GtRAwv>
 8020688:	e026      	b.n	80206d8 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 802068a:	2304      	movs	r3, #4
 802068c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020690:	e01e      	b.n	80206d0 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 8020692:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020696:	00db      	lsls	r3, r3, #3
 8020698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802069c:	4413      	add	r3, r2
 802069e:	3b88      	subs	r3, #136	; 0x88
 80206a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80206a4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80206a8:	f7e0 f8c2 	bl	8000830 <__aeabi_ddiv>
 80206ac:	4602      	mov	r2, r0
 80206ae:	460b      	mov	r3, r1
 80206b0:	4610      	mov	r0, r2
 80206b2:	4619      	mov	r1, r3
 80206b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80206b8:	00db      	lsls	r3, r3, #3
 80206ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80206be:	4413      	add	r3, r2
 80206c0:	3b88      	subs	r3, #136	; 0x88
 80206c2:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 80206c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80206ca:	3301      	adds	r3, #1
 80206cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80206d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80206d4:	2b05      	cmp	r3, #5
 80206d6:	dddc      	ble.n	8020692 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 80206d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80206dc:	f04f 0200 	mov.w	r2, #0
 80206e0:	4bb7      	ldr	r3, [pc, #732]	; (80209c0 <svd_u3DvUgOe+0x970>)
 80206e2:	f7df fdc5 	bl	8000270 <__adddf3>
 80206e6:	4602      	mov	r2, r0
 80206e8:	460b      	mov	r3, r1
 80206ea:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 80206ee:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80206f2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80206f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80206fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80206fe:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8020702:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 8020706:	e005      	b.n	8020714 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 8020708:	f04f 0200 	mov.w	r2, #0
 802070c:	f04f 0300 	mov.w	r3, #0
 8020710:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 8020714:	2302      	movs	r3, #2
 8020716:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802071a:	e048      	b.n	80207ae <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 802071c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020720:	4613      	mov	r3, r2
 8020722:	005b      	lsls	r3, r3, #1
 8020724:	4413      	add	r3, r2
 8020726:	3301      	adds	r3, #1
 8020728:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 802072c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8020730:	2b00      	cmp	r3, #0
 8020732:	d025      	beq.n	8020780 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 8020734:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020738:	3301      	adds	r3, #1
 802073a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 802073e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8020742:	9300      	str	r3, [sp, #0]
 8020744:	4613      	mov	r3, r2
 8020746:	2205      	movs	r2, #5
 8020748:	2002      	movs	r0, #2
 802074a:	f001 fb9c 	bl	8021e86 <xdotc_mznw4aLl>
 802074e:	ec51 0b10 	vmov	r0, r1, d0
 8020752:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8020756:	f7e0 f86b 	bl	8000830 <__aeabi_ddiv>
 802075a:	4602      	mov	r2, r0
 802075c:	460b      	mov	r3, r1
 802075e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8020762:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802076a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802076e:	3301      	adds	r3, #1
 8020770:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020774:	2105      	movs	r1, #5
 8020776:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 802077a:	2002      	movs	r0, #2
 802077c:	f001 fb2f 	bl	8021dde <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 8020780:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020784:	00db      	lsls	r3, r3, #3
 8020786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802078a:	4413      	add	r3, r2
 802078c:	3b88      	subs	r3, #136	; 0x88
 802078e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020792:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020796:	00db      	lsls	r3, r3, #3
 8020798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802079c:	4413      	add	r3, r2
 802079e:	3bb8      	subs	r3, #184	; 0xb8
 80207a0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 80207a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80207a8:	3301      	adds	r3, #1
 80207aa:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80207ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80207b2:	2b02      	cmp	r3, #2
 80207b4:	ddb2      	ble.n	802071c <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 80207b6:	2301      	movs	r3, #1
 80207b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80207bc:	e017      	b.n	80207ee <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 80207be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207c2:	1cd8      	adds	r0, r3, #3
 80207c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207c8:	3303      	adds	r3, #3
 80207ca:	00da      	lsls	r2, r3, #3
 80207cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80207d0:	1899      	adds	r1, r3, r2
 80207d2:	00c3      	lsls	r3, r0, #3
 80207d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80207d8:	4413      	add	r3, r2
 80207da:	3b88      	subs	r3, #136	; 0x88
 80207dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207e0:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 80207e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207e8:	3301      	adds	r3, #1
 80207ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80207ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207f2:	2b02      	cmp	r3, #2
 80207f4:	dde3      	ble.n	80207be <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 80207f6:	2301      	movs	r3, #1
 80207f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 80207fc:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8020800:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 8020804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020808:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802080c:	f04f 0200 	mov.w	r2, #0
 8020810:	f04f 0300 	mov.w	r3, #0
 8020814:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 8020818:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802081c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8020820:	f04f 0200 	mov.w	r2, #0
 8020824:	f04f 0300 	mov.w	r3, #0
 8020828:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 802082c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020830:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8020834:	f04f 0200 	mov.w	r2, #0
 8020838:	4b61      	ldr	r3, [pc, #388]	; (80209c0 <svd_u3DvUgOe+0x970>)
 802083a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 802083e:	2301      	movs	r3, #1
 8020840:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020844:	e100      	b.n	8020a48 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 8020846:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802084a:	009b      	lsls	r3, r3, #2
 802084c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 8020850:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020854:	00db      	lsls	r3, r3, #3
 8020856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802085a:	4413      	add	r3, r2
 802085c:	3ba0      	subs	r3, #160	; 0xa0
 802085e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020862:	f04f 0200 	mov.w	r2, #0
 8020866:	f04f 0300 	mov.w	r3, #0
 802086a:	f7e0 f91f 	bl	8000aac <__aeabi_dcmpeq>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	f040 80a7 	bne.w	80209c4 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 8020876:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802087a:	3301      	adds	r3, #1
 802087c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8020880:	e043      	b.n	802090a <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 8020882:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8020886:	4613      	mov	r3, r2
 8020888:	005b      	lsls	r3, r3, #1
 802088a:	441a      	add	r2, r3
 802088c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020890:	4413      	add	r3, r2
 8020892:	3301      	adds	r3, #1
 8020894:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 8020898:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802089c:	f1c3 0403 	rsb	r4, r3, #3
 80208a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80208a4:	f1c3 0003 	rsb	r0, r3, #3
 80208a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80208ac:	1c5a      	adds	r2, r3, #1
 80208ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208b2:	9300      	str	r3, [sp, #0]
 80208b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80208b8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80208bc:	f001 fae3 	bl	8021e86 <xdotc_mznw4aLl>
 80208c0:	ec51 0b10 	vmov	r0, r1, d0
 80208c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80208c8:	00da      	lsls	r2, r3, #3
 80208ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80208ce:	4413      	add	r3, r2
 80208d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208d4:	f7df ffac 	bl	8000830 <__aeabi_ddiv>
 80208d8:	4602      	mov	r2, r0
 80208da:	460b      	mov	r3, r1
 80208dc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80208e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80208e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80208e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80208ec:	1c59      	adds	r1, r3, #1
 80208ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208f2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80208f6:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 80208fa:	4620      	mov	r0, r4
 80208fc:	f001 fa6f 	bl	8021dde <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 8020900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020904:	3301      	adds	r3, #1
 8020906:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 802090a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802090e:	2b02      	cmp	r3, #2
 8020910:	ddb7      	ble.n	8020882 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 8020912:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020916:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802091a:	e026      	b.n	802096a <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 802091c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020920:	4613      	mov	r3, r2
 8020922:	005b      	lsls	r3, r3, #1
 8020924:	441a      	add	r2, r3
 8020926:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802092a:	4413      	add	r3, r2
 802092c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 8020930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020934:	00da      	lsls	r2, r3, #3
 8020936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802093a:	4413      	add	r3, r2
 802093c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020944:	00da      	lsls	r2, r3, #3
 8020946:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802094a:	4413      	add	r3, r2
 802094c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8020950:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8020954:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8020958:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 802095c:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 8020960:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020964:	3301      	adds	r3, #1
 8020966:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802096a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802096e:	2b02      	cmp	r3, #2
 8020970:	ddd4      	ble.n	802091c <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 8020972:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020976:	00da      	lsls	r2, r3, #3
 8020978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802097c:	189c      	adds	r4, r3, r2
 802097e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8020982:	f04f 0200 	mov.w	r2, #0
 8020986:	4b0e      	ldr	r3, [pc, #56]	; (80209c0 <svd_u3DvUgOe+0x970>)
 8020988:	f7df fc72 	bl	8000270 <__adddf3>
 802098c:	4602      	mov	r2, r0
 802098e:	460b      	mov	r3, r1
 8020990:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 8020994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020998:	2b00      	cmp	r3, #0
 802099a:	dd50      	ble.n	8020a3e <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 802099c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80209a0:	4613      	mov	r3, r2
 80209a2:	005b      	lsls	r3, r3, #1
 80209a4:	4413      	add	r3, r2
 80209a6:	00db      	lsls	r3, r3, #3
 80209a8:	461a      	mov	r2, r3
 80209aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209ae:	1899      	adds	r1, r3, r2
 80209b0:	f04f 0200 	mov.w	r2, #0
 80209b4:	f04f 0300 	mov.w	r3, #0
 80209b8:	e9c1 2300 	strd	r2, r3, [r1]
 80209bc:	e03f      	b.n	8020a3e <svd_u3DvUgOe+0x9ee>
 80209be:	bf00      	nop
 80209c0:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 80209c4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80209c8:	4613      	mov	r3, r2
 80209ca:	005b      	lsls	r3, r3, #1
 80209cc:	4413      	add	r3, r2
 80209ce:	00db      	lsls	r3, r3, #3
 80209d0:	461a      	mov	r2, r3
 80209d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209d6:	1899      	adds	r1, r3, r2
 80209d8:	f04f 0200 	mov.w	r2, #0
 80209dc:	f04f 0300 	mov.w	r3, #0
 80209e0:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 80209e4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80209e8:	4613      	mov	r3, r2
 80209ea:	005b      	lsls	r3, r3, #1
 80209ec:	4413      	add	r3, r2
 80209ee:	00db      	lsls	r3, r3, #3
 80209f0:	f103 0208 	add.w	r2, r3, #8
 80209f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209f8:	1899      	adds	r1, r3, r2
 80209fa:	f04f 0200 	mov.w	r2, #0
 80209fe:	f04f 0300 	mov.w	r3, #0
 8020a02:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 8020a06:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020a0a:	4613      	mov	r3, r2
 8020a0c:	005b      	lsls	r3, r3, #1
 8020a0e:	4413      	add	r3, r2
 8020a10:	00db      	lsls	r3, r3, #3
 8020a12:	f103 0210 	add.w	r2, r3, #16
 8020a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a1a:	1899      	adds	r1, r3, r2
 8020a1c:	f04f 0200 	mov.w	r2, #0
 8020a20:	f04f 0300 	mov.w	r3, #0
 8020a24:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 8020a28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020a2c:	00da      	lsls	r2, r3, #3
 8020a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a32:	1899      	adds	r1, r3, r2
 8020a34:	f04f 0200 	mov.w	r2, #0
 8020a38:	4b11      	ldr	r3, [pc, #68]	; (8020a80 <svd_u3DvUgOe+0xa30>)
 8020a3a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 8020a3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a42:	3b01      	subs	r3, #1
 8020a44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020a48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	f6bf aefa 	bge.w	8020846 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 8020a52:	2302      	movs	r3, #2
 8020a54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020a58:	e096      	b.n	8020b88 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 8020a5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	dc4c      	bgt.n	8020afc <svd_u3DvUgOe+0xaac>
 8020a62:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020a66:	f04f 0200 	mov.w	r2, #0
 8020a6a:	f04f 0300 	mov.w	r3, #0
 8020a6e:	f7e0 f81d 	bl	8000aac <__aeabi_dcmpeq>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d141      	bne.n	8020afc <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 8020a78:	2302      	movs	r3, #2
 8020a7a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020a7e:	e039      	b.n	8020af4 <svd_u3DvUgOe+0xaa4>
 8020a80:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 8020a84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a88:	1e5a      	subs	r2, r3, #1
 8020a8a:	4613      	mov	r3, r2
 8020a8c:	005b      	lsls	r3, r3, #1
 8020a8e:	4413      	add	r3, r2
 8020a90:	3302      	adds	r3, #2
 8020a92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 8020a96:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020a9a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8020a9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020aa2:	9300      	str	r3, [sp, #0]
 8020aa4:	6813      	ldr	r3, [r2, #0]
 8020aa6:	2202      	movs	r2, #2
 8020aa8:	6809      	ldr	r1, [r1, #0]
 8020aaa:	2002      	movs	r0, #2
 8020aac:	f001 f9eb 	bl	8021e86 <xdotc_mznw4aLl>
 8020ab0:	ec51 0b10 	vmov	r0, r1, d0
 8020ab4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020ab8:	681b      	ldr	r3, [r3, #0]
 8020aba:	3308      	adds	r3, #8
 8020abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac0:	f7df feb6 	bl	8000830 <__aeabi_ddiv>
 8020ac4:	4602      	mov	r2, r0
 8020ac6:	460b      	mov	r3, r1
 8020ac8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8020acc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8020ad4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020ad8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020adc:	6812      	ldr	r2, [r2, #0]
 8020ade:	2102      	movs	r1, #2
 8020ae0:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8020ae4:	2002      	movs	r0, #2
 8020ae6:	f001 f97a 	bl	8021dde <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 8020aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020aee:	3301      	adds	r3, #1
 8020af0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020af8:	2b03      	cmp	r3, #3
 8020afa:	ddc3      	ble.n	8020a84 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 8020afc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020b00:	4613      	mov	r3, r2
 8020b02:	005b      	lsls	r3, r3, #1
 8020b04:	4413      	add	r3, r2
 8020b06:	00db      	lsls	r3, r3, #3
 8020b08:	461a      	mov	r2, r3
 8020b0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	1899      	adds	r1, r3, r2
 8020b12:	f04f 0200 	mov.w	r2, #0
 8020b16:	f04f 0300 	mov.w	r3, #0
 8020b1a:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 8020b1e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020b22:	4613      	mov	r3, r2
 8020b24:	005b      	lsls	r3, r3, #1
 8020b26:	4413      	add	r3, r2
 8020b28:	00db      	lsls	r3, r3, #3
 8020b2a:	f103 0208 	add.w	r2, r3, #8
 8020b2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	1899      	adds	r1, r3, r2
 8020b36:	f04f 0200 	mov.w	r2, #0
 8020b3a:	f04f 0300 	mov.w	r3, #0
 8020b3e:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 8020b42:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020b46:	4613      	mov	r3, r2
 8020b48:	005b      	lsls	r3, r3, #1
 8020b4a:	4413      	add	r3, r2
 8020b4c:	00db      	lsls	r3, r3, #3
 8020b4e:	f103 0210 	add.w	r2, r3, #16
 8020b52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b56:	681b      	ldr	r3, [r3, #0]
 8020b58:	1899      	adds	r1, r3, r2
 8020b5a:	f04f 0200 	mov.w	r2, #0
 8020b5e:	f04f 0300 	mov.w	r3, #0
 8020b62:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 8020b66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020b6a:	015a      	lsls	r2, r3, #5
 8020b6c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	1899      	adds	r1, r3, r2
 8020b74:	f04f 0200 	mov.w	r2, #0
 8020b78:	4bbd      	ldr	r3, [pc, #756]	; (8020e70 <svd_u3DvUgOe+0xe20>)
 8020b7a:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 8020b7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020b82:	3b01      	subs	r3, #1
 8020b84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020b88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	f6bf af64 	bge.w	8020a5a <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 8020b92:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8020b96:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 8020b9a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020b9e:	f04f 0200 	mov.w	r2, #0
 8020ba2:	f04f 0300 	mov.w	r3, #0
 8020ba6:	f7df ff81 	bl	8000aac <__aeabi_dcmpeq>
 8020baa:	4603      	mov	r3, r0
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	d12a      	bne.n	8020c06 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 8020bb0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020bb4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8020bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8020bc0:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8020bc4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 8020bc8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020bcc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020bd0:	f7df fe2e 	bl	8000830 <__aeabi_ddiv>
 8020bd4:	4602      	mov	r2, r0
 8020bd6:	460b      	mov	r3, r1
 8020bd8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 8020bdc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020be0:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 8020be4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020be8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020bec:	f7df fe20 	bl	8000830 <__aeabi_ddiv>
 8020bf0:	4602      	mov	r2, r0
 8020bf2:	460b      	mov	r3, r1
 8020bf4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 8020bf8:	2101      	movs	r1, #1
 8020bfa:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020bfe:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020c02:	f002 f989 	bl	8022f18 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020c06:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020c0a:	f04f 0200 	mov.w	r2, #0
 8020c0e:	f04f 0300 	mov.w	r3, #0
 8020c12:	f7df ff4b 	bl	8000aac <__aeabi_dcmpeq>
 8020c16:	4603      	mov	r3, r0
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d12b      	bne.n	8020c74 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 8020c1c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020c20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8020c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8020c2c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8020c30:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020c34:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020c38:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020c3c:	f7df fdf8 	bl	8000830 <__aeabi_ddiv>
 8020c40:	4602      	mov	r2, r0
 8020c42:	460b      	mov	r3, r1
 8020c44:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020c48:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020c4c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 8020c50:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020c54:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020c58:	f7df fcc0 	bl	80005dc <__aeabi_dmul>
 8020c5c:	4602      	mov	r2, r0
 8020c5e:	460b      	mov	r3, r1
 8020c60:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 8020c64:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020c68:	2104      	movs	r1, #4
 8020c6a:	6818      	ldr	r0, [r3, #0]
 8020c6c:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020c70:	f002 f952 	bl	8022f18 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 8020c74:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020c78:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 8020c7c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8020c80:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 8020c84:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020c88:	f04f 0200 	mov.w	r2, #0
 8020c8c:	f04f 0300 	mov.w	r3, #0
 8020c90:	f7df ff0c 	bl	8000aac <__aeabi_dcmpeq>
 8020c94:	4603      	mov	r3, r0
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d12a      	bne.n	8020cf0 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 8020c9a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020c9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8020ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8020caa:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8020cae:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 8020cb2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020cb6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020cba:	f7df fdb9 	bl	8000830 <__aeabi_ddiv>
 8020cbe:	4602      	mov	r2, r0
 8020cc0:	460b      	mov	r3, r1
 8020cc2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 8020cc6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020cca:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 8020cce:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8020cd2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020cd6:	f7df fdab 	bl	8000830 <__aeabi_ddiv>
 8020cda:	4602      	mov	r2, r0
 8020cdc:	460b      	mov	r3, r1
 8020cde:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 8020ce2:	2104      	movs	r1, #4
 8020ce4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020ce8:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020cec:	f002 f914 	bl	8022f18 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020cf0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020cf4:	f04f 0200 	mov.w	r2, #0
 8020cf8:	f04f 0300 	mov.w	r3, #0
 8020cfc:	f7df fed6 	bl	8000aac <__aeabi_dcmpeq>
 8020d00:	4603      	mov	r3, r0
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	d12b      	bne.n	8020d5e <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 8020d06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020d0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8020d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020d16:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8020d1a:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020d1e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020d22:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020d26:	f7df fd83 	bl	8000830 <__aeabi_ddiv>
 8020d2a:	4602      	mov	r2, r0
 8020d2c:	460b      	mov	r3, r1
 8020d2e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020d32:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020d36:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 8020d3a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8020d3e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020d42:	f7df fc4b 	bl	80005dc <__aeabi_dmul>
 8020d46:	4602      	mov	r2, r0
 8020d48:	460b      	mov	r3, r1
 8020d4a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 8020d4e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020d52:	2107      	movs	r1, #7
 8020d54:	6818      	ldr	r0, [r3, #0]
 8020d56:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020d5a:	f002 f8dd 	bl	8022f18 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 8020d5e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020d62:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 8020d66:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020d6a:	f04f 0200 	mov.w	r2, #0
 8020d6e:	f04f 0300 	mov.w	r3, #0
 8020d72:	f7df fe9b 	bl	8000aac <__aeabi_dcmpeq>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	d11e      	bne.n	8020dba <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 8020d7c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8020d80:	67ba      	str	r2, [r7, #120]	; 0x78
 8020d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020d86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020d88:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8020d8c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 8020d90:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020d94:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020d98:	f7df fd4a 	bl	8000830 <__aeabi_ddiv>
 8020d9c:	4602      	mov	r2, r0
 8020d9e:	460b      	mov	r3, r1
 8020da0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 8020da4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020da8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 8020dac:	2107      	movs	r1, #7
 8020dae:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020db2:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020db6:	f002 f8af 	bl	8022f18 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 8020dba:	f04f 0200 	mov.w	r2, #0
 8020dbe:	f04f 0300 	mov.w	r3, #0
 8020dc2:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 8020dcc:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8020dd0:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8020dd4:	eeb0 1a46 	vmov.f32	s2, s12
 8020dd8:	eef0 1a66 	vmov.f32	s3, s13
 8020ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8020de0:	eef0 0a67 	vmov.f32	s1, s15
 8020de4:	f00d fd02 	bl	802e7ec <fmax>
 8020de8:	eeb0 8a40 	vmov.f32	s16, s0
 8020dec:	eef0 8a60 	vmov.f32	s17, s1
 8020df0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8020df4:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8020df8:	eeb0 1a46 	vmov.f32	s2, s12
 8020dfc:	eef0 1a66 	vmov.f32	s3, s13
 8020e00:	eeb0 0a47 	vmov.f32	s0, s14
 8020e04:	eef0 0a67 	vmov.f32	s1, s15
 8020e08:	f00d fcf0 	bl	802e7ec <fmax>
 8020e0c:	eeb0 7a40 	vmov.f32	s14, s0
 8020e10:	eef0 7a60 	vmov.f32	s15, s1
 8020e14:	eeb0 1a47 	vmov.f32	s2, s14
 8020e18:	eef0 1a67 	vmov.f32	s3, s15
 8020e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8020e20:	eef0 0a68 	vmov.f32	s1, s17
 8020e24:	f00d fce2 	bl	802e7ec <fmax>
 8020e28:	eeb0 8a40 	vmov.f32	s16, s0
 8020e2c:	eef0 8a60 	vmov.f32	s17, s1
 8020e30:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8020e34:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8020e68 <svd_u3DvUgOe+0xe18>
 8020e38:	eeb0 0a47 	vmov.f32	s0, s14
 8020e3c:	eef0 0a67 	vmov.f32	s1, s15
 8020e40:	f00d fcd4 	bl	802e7ec <fmax>
 8020e44:	eeb0 7a40 	vmov.f32	s14, s0
 8020e48:	eef0 7a60 	vmov.f32	s15, s1
 8020e4c:	eeb0 1a47 	vmov.f32	s2, s14
 8020e50:	eef0 1a67 	vmov.f32	s3, s15
 8020e54:	eeb0 0a48 	vmov.f32	s0, s16
 8020e58:	eef0 0a68 	vmov.f32	s1, s17
 8020e5c:	f00d fcc6 	bl	802e7ec <fmax>
 8020e60:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 8020e64:	f000 be8a 	b.w	8021b7c <svd_u3DvUgOe+0x1b2c>
	...
 8020e70:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 8020e74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020e78:	3301      	adds	r3, #1
 8020e7a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 8020e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020e88:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 8020e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d103      	bne.n	8020e9c <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 8020e94:	2301      	movs	r3, #1
 8020e96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020e9a:	e092      	b.n	8020fc2 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 8020e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020ea0:	3b01      	subs	r3, #1
 8020ea2:	00db      	lsls	r3, r3, #3
 8020ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020ea8:	4413      	add	r3, r2
 8020eaa:	3bb8      	subs	r3, #184	; 0xb8
 8020eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb0:	673a      	str	r2, [r7, #112]	; 0x70
 8020eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020eb6:	677b      	str	r3, [r7, #116]	; 0x74
 8020eb8:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8020ebc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 8020ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020ec4:	3b01      	subs	r3, #1
 8020ec6:	00db      	lsls	r3, r3, #3
 8020ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020ecc:	4413      	add	r3, r2
 8020ece:	3ba0      	subs	r3, #160	; 0xa0
 8020ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ed4:	66ba      	str	r2, [r7, #104]	; 0x68
 8020ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020ee0:	00db      	lsls	r3, r3, #3
 8020ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020ee6:	4413      	add	r3, r2
 8020ee8:	3ba0      	subs	r3, #160	; 0xa0
 8020eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eee:	663a      	str	r2, [r7, #96]	; 0x60
 8020ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8020ef6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8020efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8020efe:	f7df f9b7 	bl	8000270 <__adddf3>
 8020f02:	4602      	mov	r2, r0
 8020f04:	460b      	mov	r3, r1
 8020f06:	4610      	mov	r0, r2
 8020f08:	4619      	mov	r1, r3
 8020f0a:	f04f 0200 	mov.w	r2, #0
 8020f0e:	4bb2      	ldr	r3, [pc, #712]	; (80211d8 <svd_u3DvUgOe+0x1188>)
 8020f10:	f7df fb64 	bl	80005dc <__aeabi_dmul>
 8020f14:	4602      	mov	r2, r0
 8020f16:	460b      	mov	r3, r1
 8020f18:	4610      	mov	r0, r2
 8020f1a:	4619      	mov	r1, r3
 8020f1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020f20:	f7df fde2 	bl	8000ae8 <__aeabi_dcmpge>
 8020f24:	4603      	mov	r3, r0
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d012      	beq.n	8020f50 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 8020f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f2e:	3b01      	subs	r3, #1
 8020f30:	00db      	lsls	r3, r3, #3
 8020f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020f36:	4413      	add	r3, r2
 8020f38:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8020f3c:	f04f 0200 	mov.w	r2, #0
 8020f40:	f04f 0300 	mov.w	r3, #0
 8020f44:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8020f48:	2301      	movs	r3, #1
 8020f4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020f4e:	e038      	b.n	8020fc2 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 8020f50:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020f54:	f04f 0200 	mov.w	r2, #0
 8020f58:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8020f5c:	f7df fdba 	bl	8000ad4 <__aeabi_dcmple>
 8020f60:	4603      	mov	r3, r0
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d115      	bne.n	8020f92 <svd_u3DvUgOe+0xf42>
 8020f66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020f6a:	2b14      	cmp	r3, #20
 8020f6c:	dd24      	ble.n	8020fb8 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 8020f6e:	f04f 0200 	mov.w	r2, #0
 8020f72:	4b99      	ldr	r3, [pc, #612]	; (80211d8 <svd_u3DvUgOe+0x1188>)
 8020f74:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020f78:	f7df fb30 	bl	80005dc <__aeabi_dmul>
 8020f7c:	4602      	mov	r2, r0
 8020f7e:	460b      	mov	r3, r1
 8020f80:	4610      	mov	r0, r2
 8020f82:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 8020f84:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020f88:	f7df fdae 	bl	8000ae8 <__aeabi_dcmpge>
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d012      	beq.n	8020fb8 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 8020f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f96:	3b01      	subs	r3, #1
 8020f98:	00db      	lsls	r3, r3, #3
 8020f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020f9e:	4413      	add	r3, r2
 8020fa0:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 8020fa4:	f04f 0200 	mov.w	r2, #0
 8020fa8:	f04f 0300 	mov.w	r3, #0
 8020fac:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8020fb0:	2301      	movs	r3, #1
 8020fb2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020fb6:	e004      	b.n	8020fc2 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 8020fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020fbc:	3b01      	subs	r3, #1
 8020fbe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 8020fc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	f43f af59 	beq.w	8020e7e <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 8020fcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020fd0:	1c5a      	adds	r2, r3, #1
 8020fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020fd6:	4293      	cmp	r3, r2
 8020fd8:	d103      	bne.n	8020fe2 <svd_u3DvUgOe+0xf92>
      kase = 4;
 8020fda:	2304      	movs	r3, #4
 8020fdc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8020fe0:	e0c7      	b.n	8021172 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 8020fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020fe6:	3302      	adds	r3, #2
 8020fe8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 8020fec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8020ff0:	3302      	adds	r3, #2
 8020ff2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 8020ffc:	e092      	b.n	8021124 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 8020ffe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021002:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 8021006:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 802100a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802100e:	429a      	cmp	r2, r3
 8021010:	d103      	bne.n	802101a <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 8021012:	2301      	movs	r3, #1
 8021014:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021018:	e084      	b.n	8021124 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 802101a:	f04f 0200 	mov.w	r2, #0
 802101e:	f04f 0300 	mov.w	r3, #0
 8021022:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 8021026:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802102a:	1c5a      	adds	r2, r3, #1
 802102c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021030:	4293      	cmp	r3, r2
 8021032:	dc11      	bgt.n	8021058 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 8021034:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021038:	3b01      	subs	r3, #1
 802103a:	00db      	lsls	r3, r3, #3
 802103c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021040:	4413      	add	r3, r2
 8021042:	3bb8      	subs	r3, #184	; 0xb8
 8021044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021048:	65ba      	str	r2, [r7, #88]	; 0x58
 802104a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802104e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021050:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8021054:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 8021058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802105c:	1c5a      	adds	r2, r3, #1
 802105e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021062:	4293      	cmp	r3, r2
 8021064:	dd17      	ble.n	8021096 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 8021066:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802106a:	3b02      	subs	r3, #2
 802106c:	00db      	lsls	r3, r3, #3
 802106e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021072:	4413      	add	r3, r2
 8021074:	3bb8      	subs	r3, #184	; 0xb8
 8021076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802107a:	653a      	str	r2, [r7, #80]	; 0x50
 802107c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021080:	657b      	str	r3, [r7, #84]	; 0x54
 8021082:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021086:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 802108a:	f7df f8f1 	bl	8000270 <__adddf3>
 802108e:	4602      	mov	r2, r0
 8021090:	460b      	mov	r3, r1
 8021092:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 8021096:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802109a:	3b01      	subs	r3, #1
 802109c:	00db      	lsls	r3, r3, #3
 802109e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80210a2:	4413      	add	r3, r2
 80210a4:	3ba0      	subs	r3, #160	; 0xa0
 80210a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80210ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80210b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80210b2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80210b6:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 80210ba:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80210be:	f04f 0200 	mov.w	r2, #0
 80210c2:	4b45      	ldr	r3, [pc, #276]	; (80211d8 <svd_u3DvUgOe+0x1188>)
 80210c4:	f7df fa8a 	bl	80005dc <__aeabi_dmul>
 80210c8:	4602      	mov	r2, r0
 80210ca:	460b      	mov	r3, r1
 80210cc:	4610      	mov	r0, r2
 80210ce:	4619      	mov	r1, r3
 80210d0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80210d4:	f7df fd08 	bl	8000ae8 <__aeabi_dcmpge>
 80210d8:	4603      	mov	r3, r0
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d10a      	bne.n	80210f4 <svd_u3DvUgOe+0x10a4>
 80210de:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80210e2:	f04f 0200 	mov.w	r2, #0
 80210e6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80210ea:	f7df fcf3 	bl	8000ad4 <__aeabi_dcmple>
 80210ee:	4603      	mov	r3, r0
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d012      	beq.n	802111a <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 80210f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80210f8:	3b01      	subs	r3, #1
 80210fa:	00db      	lsls	r3, r3, #3
 80210fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021100:	4413      	add	r3, r2
 8021102:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 8021106:	f04f 0200 	mov.w	r2, #0
 802110a:	f04f 0300 	mov.w	r3, #0
 802110e:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 8021112:	2301      	movs	r3, #1
 8021114:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021118:	e004      	b.n	8021124 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 802111a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802111e:	3b01      	subs	r3, #1
 8021120:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 8021124:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8021128:	2b00      	cmp	r3, #0
 802112a:	d106      	bne.n	802113a <svd_u3DvUgOe+0x10ea>
 802112c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8021130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021134:	429a      	cmp	r2, r3
 8021136:	f6bf af62 	bge.w	8020ffe <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 802113a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802113e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021142:	429a      	cmp	r2, r3
 8021144:	d103      	bne.n	802114e <svd_u3DvUgOe+0x10fe>
        kase = 3;
 8021146:	2303      	movs	r3, #3
 8021148:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 802114c:	e011      	b.n	8021172 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 802114e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021152:	1c9a      	adds	r2, r3, #2
 8021154:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021158:	4293      	cmp	r3, r2
 802115a:	d103      	bne.n	8021164 <svd_u3DvUgOe+0x1114>
        kase = 1;
 802115c:	2301      	movs	r3, #1
 802115e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8021162:	e006      	b.n	8021172 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 8021164:	2302      	movs	r3, #2
 8021166:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 802116a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802116e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 8021172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021176:	2b03      	cmp	r3, #3
 8021178:	f000 8113 	beq.w	80213a2 <svd_u3DvUgOe+0x1352>
 802117c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021180:	2b03      	cmp	r3, #3
 8021182:	f300 8443 	bgt.w	8021a0c <svd_u3DvUgOe+0x19bc>
 8021186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802118a:	2b01      	cmp	r3, #1
 802118c:	d005      	beq.n	802119a <svd_u3DvUgOe+0x114a>
 802118e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021192:	2b02      	cmp	r3, #2
 8021194:	d07b      	beq.n	802128e <svd_u3DvUgOe+0x123e>
 8021196:	f000 bc39 	b.w	8021a0c <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 802119a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802119e:	00db      	lsls	r3, r3, #3
 80211a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80211a4:	4413      	add	r3, r2
 80211a6:	3bb8      	subs	r3, #184	; 0xb8
 80211a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ac:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 80211b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80211b4:	00db      	lsls	r3, r3, #3
 80211b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80211ba:	4413      	add	r3, r2
 80211bc:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 80211cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80211d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80211d4:	e053      	b.n	802127e <svd_u3DvUgOe+0x122e>
 80211d6:	bf00      	nop
 80211d8:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 80211dc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80211e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80211e4:	00db      	lsls	r3, r3, #3
 80211e6:	18d0      	adds	r0, r2, r3
 80211e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80211ec:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80211f0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80211f4:	f001 fd2a 	bl	8022c4c <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 80211f8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80211fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021200:	429a      	cmp	r2, r3
 8021202:	dd19      	ble.n	8021238 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 8021204:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021208:	643a      	str	r2, [r7, #64]	; 0x40
 802120a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802120e:	647b      	str	r3, [r7, #68]	; 0x44
 8021210:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8021214:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8021218:	f7df f9e0 	bl	80005dc <__aeabi_dmul>
 802121c:	4602      	mov	r2, r0
 802121e:	460b      	mov	r3, r1
 8021220:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 8021224:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8021228:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802122c:	f7df f9d6 	bl	80005dc <__aeabi_dmul>
 8021230:	4602      	mov	r2, r0
 8021232:	460b      	mov	r3, r1
 8021234:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 8021238:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802123c:	4613      	mov	r3, r2
 802123e:	005b      	lsls	r3, r3, #1
 8021240:	4413      	add	r3, r2
 8021242:	1c59      	adds	r1, r3, #1
 8021244:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021248:	1c5a      	adds	r2, r3, #1
 802124a:	4613      	mov	r3, r2
 802124c:	005b      	lsls	r3, r3, #1
 802124e:	4413      	add	r3, r2
 8021250:	1c5a      	adds	r2, r3, #1
 8021252:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8021256:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 802125a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802125e:	eeb0 1a46 	vmov.f32	s2, s12
 8021262:	eef0 1a66 	vmov.f32	s3, s13
 8021266:	eeb0 0a47 	vmov.f32	s0, s14
 802126a:	eef0 0a67 	vmov.f32	s1, s15
 802126e:	6818      	ldr	r0, [r3, #0]
 8021270:	f001 fbd0 	bl	8022a14 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 8021274:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021278:	3b01      	subs	r3, #1
 802127a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802127e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021282:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021286:	429a      	cmp	r2, r3
 8021288:	daa8      	bge.n	80211dc <svd_u3DvUgOe+0x118c>
      }
      break;
 802128a:	f000 bc77 	b.w	8021b7c <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 802128e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021292:	3b01      	subs	r3, #1
 8021294:	00db      	lsls	r3, r3, #3
 8021296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802129a:	4413      	add	r3, r2
 802129c:	3bb8      	subs	r3, #184	; 0xb8
 802129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212a2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 80212a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80212aa:	3b01      	subs	r3, #1
 80212ac:	00db      	lsls	r3, r3, #3
 80212ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80212b2:	4413      	add	r3, r2
 80212b4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 80212b8:	f04f 0200 	mov.w	r2, #0
 80212bc:	f04f 0300 	mov.w	r3, #0
 80212c0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 80212c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80212c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80212cc:	e061      	b.n	8021392 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 80212ce:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80212d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80212d6:	00db      	lsls	r3, r3, #3
 80212d8:	18d0      	adds	r0, r2, r3
 80212da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80212de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80212e2:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80212e6:	f001 fcb1 	bl	8022c4c <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 80212ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80212ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80212f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80212f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80212f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80212fa:	00db      	lsls	r3, r3, #3
 80212fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021300:	4413      	add	r3, r2
 8021302:	3bb8      	subs	r3, #184	; 0xb8
 8021304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021308:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802130c:	f7df f966 	bl	80005dc <__aeabi_dmul>
 8021310:	4602      	mov	r2, r0
 8021312:	460b      	mov	r3, r1
 8021314:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 8021318:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802131c:	00db      	lsls	r3, r3, #3
 802131e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021322:	4413      	add	r3, r2
 8021324:	3bb8      	subs	r3, #184	; 0xb8
 8021326:	e9d3 0100 	ldrd	r0, r1, [r3]
 802132a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802132e:	f7df f955 	bl	80005dc <__aeabi_dmul>
 8021332:	4602      	mov	r2, r0
 8021334:	460b      	mov	r3, r1
 8021336:	4610      	mov	r0, r2
 8021338:	4619      	mov	r1, r3
 802133a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802133e:	00db      	lsls	r3, r3, #3
 8021340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021344:	4413      	add	r3, r2
 8021346:	3bb8      	subs	r3, #184	; 0xb8
 8021348:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 802134c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021350:	4613      	mov	r3, r2
 8021352:	005b      	lsls	r3, r3, #1
 8021354:	4413      	add	r3, r2
 8021356:	1c59      	adds	r1, r3, #1
 8021358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802135c:	1e5a      	subs	r2, r3, #1
 802135e:	4613      	mov	r3, r2
 8021360:	005b      	lsls	r3, r3, #1
 8021362:	4413      	add	r3, r2
 8021364:	3301      	adds	r3, #1
 8021366:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 802136a:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 802136e:	eeb0 1a46 	vmov.f32	s2, s12
 8021372:	eef0 1a66 	vmov.f32	s3, s13
 8021376:	eeb0 0a47 	vmov.f32	s0, s14
 802137a:	eef0 0a67 	vmov.f32	s1, s15
 802137e:	461a      	mov	r2, r3
 8021380:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021384:	f001 fb46 	bl	8022a14 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 8021388:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802138c:	3301      	adds	r3, #1
 802138e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021392:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021396:	1c5a      	adds	r2, r3, #1
 8021398:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802139c:	4293      	cmp	r3, r2
 802139e:	dd96      	ble.n	80212ce <svd_u3DvUgOe+0x127e>
      }
      break;
 80213a0:	e3ec      	b.n	8021b7c <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 80213a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213a6:	3301      	adds	r3, #1
 80213a8:	00db      	lsls	r3, r3, #3
 80213aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213ae:	4413      	add	r3, r2
 80213b0:	3ba0      	subs	r3, #160	; 0xa0
 80213b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213b6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 80213ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80213be:	633a      	str	r2, [r7, #48]	; 0x30
 80213c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80213c4:	637b      	str	r3, [r7, #52]	; 0x34
 80213c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213ca:	00db      	lsls	r3, r3, #3
 80213cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213d0:	4413      	add	r3, r2
 80213d2:	3ba0      	subs	r3, #160	; 0xa0
 80213d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80213da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80213de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80213e0:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80213e4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80213e8:	f00d fa00 	bl	802e7ec <fmax>
 80213ec:	eeb0 7a40 	vmov.f32	s14, s0
 80213f0:	eef0 7a60 	vmov.f32	s15, s1
 80213f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213f8:	00db      	lsls	r3, r3, #3
 80213fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213fe:	4413      	add	r3, r2
 8021400:	3bb8      	subs	r3, #184	; 0xb8
 8021402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021406:	623a      	str	r2, [r7, #32]
 8021408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802140c:	627b      	str	r3, [r7, #36]	; 0x24
 802140e:	ed97 1b08 	vldr	d1, [r7, #32]
 8021412:	eeb0 0a47 	vmov.f32	s0, s14
 8021416:	eef0 0a67 	vmov.f32	s1, s15
 802141a:	f00d f9e7 	bl	802e7ec <fmax>
 802141e:	eeb0 7a40 	vmov.f32	s14, s0
 8021422:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 8021426:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802142a:	00db      	lsls	r3, r3, #3
 802142c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021430:	4413      	add	r3, r2
 8021432:	3ba0      	subs	r3, #160	; 0xa0
 8021434:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8021438:	61ba      	str	r2, [r7, #24]
 802143a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802143e:	61fb      	str	r3, [r7, #28]
 8021440:	ed97 1b06 	vldr	d1, [r7, #24]
 8021444:	eeb0 0a47 	vmov.f32	s0, s14
 8021448:	eef0 0a67 	vmov.f32	s1, s15
 802144c:	f00d f9ce 	bl	802e7ec <fmax>
 8021450:	eeb0 7a40 	vmov.f32	s14, s0
 8021454:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 8021458:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802145c:	00db      	lsls	r3, r3, #3
 802145e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021462:	4413      	add	r3, r2
 8021464:	3bb8      	subs	r3, #184	; 0xb8
 8021466:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 802146a:	613a      	str	r2, [r7, #16]
 802146c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021470:	617b      	str	r3, [r7, #20]
 8021472:	ed97 1b04 	vldr	d1, [r7, #16]
 8021476:	eeb0 0a47 	vmov.f32	s0, s14
 802147a:	eef0 0a67 	vmov.f32	s1, s15
 802147e:	f00d f9b5 	bl	802e7ec <fmax>
 8021482:	eeb0 7a40 	vmov.f32	s14, s0
 8021486:	eef0 7a60 	vmov.f32	s15, s1
 802148a:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 802148e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021492:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8021496:	f7df f9cb 	bl	8000830 <__aeabi_ddiv>
 802149a:	4602      	mov	r2, r0
 802149c:	460b      	mov	r3, r1
 802149e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 80214a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80214a6:	00db      	lsls	r3, r3, #3
 80214a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214ac:	4413      	add	r3, r2
 80214ae:	3ba0      	subs	r3, #160	; 0xa0
 80214b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214b4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80214b8:	f7df f9ba 	bl	8000830 <__aeabi_ddiv>
 80214bc:	4602      	mov	r2, r0
 80214be:	460b      	mov	r3, r1
 80214c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 80214c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80214c8:	00db      	lsls	r3, r3, #3
 80214ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214ce:	4413      	add	r3, r2
 80214d0:	3bb8      	subs	r3, #184	; 0xb8
 80214d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214d6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80214da:	f7df f9a9 	bl	8000830 <__aeabi_ddiv>
 80214de:	4602      	mov	r2, r0
 80214e0:	460b      	mov	r3, r1
 80214e2:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 80214e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214ea:	00db      	lsls	r3, r3, #3
 80214ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214f0:	4413      	add	r3, r2
 80214f2:	3ba0      	subs	r3, #160	; 0xa0
 80214f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80214fc:	f7df f998 	bl	8000830 <__aeabi_ddiv>
 8021500:	4602      	mov	r2, r0
 8021502:	460b      	mov	r3, r1
 8021504:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 8021508:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802150c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021510:	f7de feae 	bl	8000270 <__adddf3>
 8021514:	4602      	mov	r2, r0
 8021516:	460b      	mov	r3, r1
 8021518:	4614      	mov	r4, r2
 802151a:	461d      	mov	r5, r3
 802151c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021520:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021524:	f7de fea2 	bl	800026c <__aeabi_dsub>
 8021528:	4602      	mov	r2, r0
 802152a:	460b      	mov	r3, r1
 802152c:	4620      	mov	r0, r4
 802152e:	4629      	mov	r1, r5
 8021530:	f7df f854 	bl	80005dc <__aeabi_dmul>
 8021534:	4602      	mov	r2, r0
 8021536:	460b      	mov	r3, r1
 8021538:	4614      	mov	r4, r2
 802153a:	461d      	mov	r5, r3
 802153c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021540:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021544:	f7df f84a 	bl	80005dc <__aeabi_dmul>
 8021548:	4602      	mov	r2, r0
 802154a:	460b      	mov	r3, r1
 802154c:	4620      	mov	r0, r4
 802154e:	4629      	mov	r1, r5
 8021550:	f7de fe8e 	bl	8000270 <__adddf3>
 8021554:	4602      	mov	r2, r0
 8021556:	460b      	mov	r3, r1
 8021558:	4610      	mov	r0, r2
 802155a:	4619      	mov	r1, r3
 802155c:	f04f 0200 	mov.w	r2, #0
 8021560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021564:	f7df f964 	bl	8000830 <__aeabi_ddiv>
 8021568:	4602      	mov	r2, r0
 802156a:	460b      	mov	r3, r1
 802156c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 8021570:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021574:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021578:	f7df f830 	bl	80005dc <__aeabi_dmul>
 802157c:	4602      	mov	r2, r0
 802157e:	460b      	mov	r3, r1
 8021580:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 8021584:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021588:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 802158c:	f7df f826 	bl	80005dc <__aeabi_dmul>
 8021590:	4602      	mov	r2, r0
 8021592:	460b      	mov	r3, r1
 8021594:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 8021598:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802159c:	f04f 0200 	mov.w	r2, #0
 80215a0:	f04f 0300 	mov.w	r3, #0
 80215a4:	f7df fa82 	bl	8000aac <__aeabi_dcmpeq>
 80215a8:	4603      	mov	r3, r0
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d00a      	beq.n	80215c4 <svd_u3DvUgOe+0x1574>
 80215ae:	f04f 0200 	mov.w	r2, #0
 80215b2:	f04f 0300 	mov.w	r3, #0
 80215b6:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80215ba:	f7df fa77 	bl	8000aac <__aeabi_dcmpeq>
 80215be:	4603      	mov	r3, r0
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	d13f      	bne.n	8021644 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 80215c4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80215c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80215cc:	f7df f806 	bl	80005dc <__aeabi_dmul>
 80215d0:	4602      	mov	r2, r0
 80215d2:	460b      	mov	r3, r1
 80215d4:	4610      	mov	r0, r2
 80215d6:	4619      	mov	r1, r3
 80215d8:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80215dc:	f7de fe48 	bl	8000270 <__adddf3>
 80215e0:	4602      	mov	r2, r0
 80215e2:	460b      	mov	r3, r1
 80215e4:	ec43 2b17 	vmov	d7, r2, r3
 80215e8:	eeb0 0a47 	vmov.f32	s0, s14
 80215ec:	eef0 0a67 	vmov.f32	s1, s15
 80215f0:	f00d f9e6 	bl	802e9c0 <sqrt>
 80215f4:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 80215f8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80215fc:	f04f 0200 	mov.w	r2, #0
 8021600:	f04f 0300 	mov.w	r3, #0
 8021604:	f7df fa5c 	bl	8000ac0 <__aeabi_dcmplt>
 8021608:	4603      	mov	r3, r0
 802160a:	2b00      	cmp	r3, #0
 802160c:	d009      	beq.n	8021622 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 802160e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8021612:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8021616:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 802161a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802161e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 8021622:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021626:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 802162a:	f7de fe21 	bl	8000270 <__adddf3>
 802162e:	4602      	mov	r2, r0
 8021630:	460b      	mov	r3, r1
 8021632:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021636:	f7df f8fb 	bl	8000830 <__aeabi_ddiv>
 802163a:	4602      	mov	r2, r0
 802163c:	460b      	mov	r3, r1
 802163e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 8021642:	e005      	b.n	8021650 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 8021644:	f04f 0200 	mov.w	r2, #0
 8021648:	f04f 0300 	mov.w	r3, #0
 802164c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 8021650:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021654:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021658:	f7de fe0a 	bl	8000270 <__adddf3>
 802165c:	4602      	mov	r2, r0
 802165e:	460b      	mov	r3, r1
 8021660:	4614      	mov	r4, r2
 8021662:	461d      	mov	r5, r3
 8021664:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021668:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 802166c:	f7de fdfe 	bl	800026c <__aeabi_dsub>
 8021670:	4602      	mov	r2, r0
 8021672:	460b      	mov	r3, r1
 8021674:	4620      	mov	r0, r4
 8021676:	4629      	mov	r1, r5
 8021678:	f7de ffb0 	bl	80005dc <__aeabi_dmul>
 802167c:	4602      	mov	r2, r0
 802167e:	460b      	mov	r3, r1
 8021680:	4610      	mov	r0, r2
 8021682:	4619      	mov	r1, r3
 8021684:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8021688:	f7de fdf2 	bl	8000270 <__adddf3>
 802168c:	4602      	mov	r2, r0
 802168e:	460b      	mov	r3, r1
 8021690:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 8021694:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021698:	00db      	lsls	r3, r3, #3
 802169a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802169e:	4413      	add	r3, r2
 80216a0:	3bb8      	subs	r3, #184	; 0xb8
 80216a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80216aa:	f7df f8c1 	bl	8000830 <__aeabi_ddiv>
 80216ae:	4602      	mov	r2, r0
 80216b0:	460b      	mov	r3, r1
 80216b2:	4610      	mov	r0, r2
 80216b4:	4619      	mov	r1, r3
 80216b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80216ba:	f7de ff8f 	bl	80005dc <__aeabi_dmul>
 80216be:	4602      	mov	r2, r0
 80216c0:	460b      	mov	r3, r1
 80216c2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 80216c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80216ca:	3301      	adds	r3, #1
 80216cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80216d0:	e183      	b.n	80219da <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 80216d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80216d6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80216da:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80216de:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80216e2:	f001 fab3 	bl	8022c4c <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 80216e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80216ea:	1c5a      	adds	r2, r3, #1
 80216ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80216f0:	4293      	cmp	r3, r2
 80216f2:	dd03      	ble.n	80216fc <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 80216f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80216f8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 80216fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021700:	3b01      	subs	r3, #1
 8021702:	00db      	lsls	r3, r3, #3
 8021704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021708:	4413      	add	r3, r2
 802170a:	3bb8      	subs	r3, #184	; 0xb8
 802170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021710:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 8021714:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021718:	3b01      	subs	r3, #1
 802171a:	00db      	lsls	r3, r3, #3
 802171c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021720:	4413      	add	r3, r2
 8021722:	3ba0      	subs	r3, #160	; 0xa0
 8021724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021728:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 802172c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021730:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021734:	f7de ff52 	bl	80005dc <__aeabi_dmul>
 8021738:	4602      	mov	r2, r0
 802173a:	460b      	mov	r3, r1
 802173c:	4690      	mov	r8, r2
 802173e:	4699      	mov	r9, r3
 8021740:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021744:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021748:	f7de ff48 	bl	80005dc <__aeabi_dmul>
 802174c:	4602      	mov	r2, r0
 802174e:	460b      	mov	r3, r1
 8021750:	4610      	mov	r0, r2
 8021752:	4619      	mov	r1, r3
 8021754:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021758:	1e5c      	subs	r4, r3, #1
 802175a:	4602      	mov	r2, r0
 802175c:	460b      	mov	r3, r1
 802175e:	4640      	mov	r0, r8
 8021760:	4649      	mov	r1, r9
 8021762:	f7de fd83 	bl	800026c <__aeabi_dsub>
 8021766:	4602      	mov	r2, r0
 8021768:	460b      	mov	r3, r1
 802176a:	4610      	mov	r0, r2
 802176c:	4619      	mov	r1, r3
 802176e:	00e3      	lsls	r3, r4, #3
 8021770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021774:	4413      	add	r3, r2
 8021776:	3bb8      	subs	r3, #184	; 0xb8
 8021778:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 802177c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021780:	00db      	lsls	r3, r3, #3
 8021782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021786:	4413      	add	r3, r2
 8021788:	3ba0      	subs	r3, #160	; 0xa0
 802178a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802178e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021792:	f7de ff23 	bl	80005dc <__aeabi_dmul>
 8021796:	4602      	mov	r2, r0
 8021798:	460b      	mov	r3, r1
 802179a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 802179e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80217a2:	00db      	lsls	r3, r3, #3
 80217a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80217a8:	4413      	add	r3, r2
 80217aa:	3ba0      	subs	r3, #160	; 0xa0
 80217ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80217b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80217b4:	f7de ff12 	bl	80005dc <__aeabi_dmul>
 80217b8:	4602      	mov	r2, r0
 80217ba:	460b      	mov	r3, r1
 80217bc:	4610      	mov	r0, r2
 80217be:	4619      	mov	r1, r3
 80217c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80217c4:	00db      	lsls	r3, r3, #3
 80217c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80217ca:	4413      	add	r3, r2
 80217cc:	3ba0      	subs	r3, #160	; 0xa0
 80217ce:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 80217d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80217d6:	1e5a      	subs	r2, r3, #1
 80217d8:	4613      	mov	r3, r2
 80217da:	005b      	lsls	r3, r3, #1
 80217dc:	4413      	add	r3, r2
 80217de:	1c59      	adds	r1, r3, #1
 80217e0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80217e4:	4613      	mov	r3, r2
 80217e6:	005b      	lsls	r3, r3, #1
 80217e8:	4413      	add	r3, r2
 80217ea:	1c5a      	adds	r2, r3, #1
 80217ec:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80217f0:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 80217f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80217f8:	eeb0 1a46 	vmov.f32	s2, s12
 80217fc:	eef0 1a66 	vmov.f32	s3, s13
 8021800:	eeb0 0a47 	vmov.f32	s0, s14
 8021804:	eef0 0a67 	vmov.f32	s1, s15
 8021808:	6818      	ldr	r0, [r3, #0]
 802180a:	f001 f903 	bl	8022a14 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 802180e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021812:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021816:	f7de fee1 	bl	80005dc <__aeabi_dmul>
 802181a:	4602      	mov	r2, r0
 802181c:	460b      	mov	r3, r1
 802181e:	4690      	mov	r8, r2
 8021820:	4699      	mov	r9, r3
 8021822:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021826:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 802182a:	f7de fed7 	bl	80005dc <__aeabi_dmul>
 802182e:	4602      	mov	r2, r0
 8021830:	460b      	mov	r3, r1
 8021832:	4610      	mov	r0, r2
 8021834:	4619      	mov	r1, r3
 8021836:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802183a:	1e5c      	subs	r4, r3, #1
 802183c:	4602      	mov	r2, r0
 802183e:	460b      	mov	r3, r1
 8021840:	4640      	mov	r0, r8
 8021842:	4649      	mov	r1, r9
 8021844:	f7de fd14 	bl	8000270 <__adddf3>
 8021848:	4602      	mov	r2, r0
 802184a:	460b      	mov	r3, r1
 802184c:	4610      	mov	r0, r2
 802184e:	4619      	mov	r1, r3
 8021850:	00e3      	lsls	r3, r4, #3
 8021852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021856:	4413      	add	r3, r2
 8021858:	3ba0      	subs	r3, #160	; 0xa0
 802185a:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 802185e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021862:	3b01      	subs	r3, #1
 8021864:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8021868:	00db      	lsls	r3, r3, #3
 802186a:	18d0      	adds	r0, r2, r3
 802186c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021870:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8021874:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8021878:	f001 f9e8 	bl	8022c4c <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 802187c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021880:	3b01      	subs	r3, #1
 8021882:	00db      	lsls	r3, r3, #3
 8021884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021888:	4413      	add	r3, r2
 802188a:	3bb8      	subs	r3, #184	; 0xb8
 802188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021890:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021894:	f7de fea2 	bl	80005dc <__aeabi_dmul>
 8021898:	4602      	mov	r2, r0
 802189a:	460b      	mov	r3, r1
 802189c:	4614      	mov	r4, r2
 802189e:	461d      	mov	r5, r3
 80218a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80218a4:	00db      	lsls	r3, r3, #3
 80218a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80218aa:	4413      	add	r3, r2
 80218ac:	3ba0      	subs	r3, #160	; 0xa0
 80218ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80218b2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80218b6:	f7de fe91 	bl	80005dc <__aeabi_dmul>
 80218ba:	4602      	mov	r2, r0
 80218bc:	460b      	mov	r3, r1
 80218be:	4620      	mov	r0, r4
 80218c0:	4629      	mov	r1, r5
 80218c2:	f7de fcd5 	bl	8000270 <__adddf3>
 80218c6:	4602      	mov	r2, r0
 80218c8:	460b      	mov	r3, r1
 80218ca:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 80218ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80218d2:	3b01      	subs	r3, #1
 80218d4:	00db      	lsls	r3, r3, #3
 80218d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80218da:	4413      	add	r3, r2
 80218dc:	3bb8      	subs	r3, #184	; 0xb8
 80218de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80218e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80218e6:	60ba      	str	r2, [r7, #8]
 80218e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80218ec:	60fb      	str	r3, [r7, #12]
 80218ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80218f2:	f7de fe73 	bl	80005dc <__aeabi_dmul>
 80218f6:	4602      	mov	r2, r0
 80218f8:	460b      	mov	r3, r1
 80218fa:	4614      	mov	r4, r2
 80218fc:	461d      	mov	r5, r3
 80218fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021902:	00db      	lsls	r3, r3, #3
 8021904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021908:	4413      	add	r3, r2
 802190a:	3ba0      	subs	r3, #160	; 0xa0
 802190c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021910:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021914:	f7de fe62 	bl	80005dc <__aeabi_dmul>
 8021918:	4602      	mov	r2, r0
 802191a:	460b      	mov	r3, r1
 802191c:	4620      	mov	r0, r4
 802191e:	4629      	mov	r1, r5
 8021920:	f7de fca6 	bl	8000270 <__adddf3>
 8021924:	4602      	mov	r2, r0
 8021926:	460b      	mov	r3, r1
 8021928:	4610      	mov	r0, r2
 802192a:	4619      	mov	r1, r3
 802192c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021930:	00db      	lsls	r3, r3, #3
 8021932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021936:	4413      	add	r3, r2
 8021938:	3ba0      	subs	r3, #160	; 0xa0
 802193a:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 802193e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021942:	00db      	lsls	r3, r3, #3
 8021944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021948:	4413      	add	r3, r2
 802194a:	3bb8      	subs	r3, #184	; 0xb8
 802194c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021950:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021954:	f7de fe42 	bl	80005dc <__aeabi_dmul>
 8021958:	4602      	mov	r2, r0
 802195a:	460b      	mov	r3, r1
 802195c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 8021960:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021964:	00db      	lsls	r3, r3, #3
 8021966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802196a:	4413      	add	r3, r2
 802196c:	3bb8      	subs	r3, #184	; 0xb8
 802196e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021972:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021976:	f7de fe31 	bl	80005dc <__aeabi_dmul>
 802197a:	4602      	mov	r2, r0
 802197c:	460b      	mov	r3, r1
 802197e:	4610      	mov	r0, r2
 8021980:	4619      	mov	r1, r3
 8021982:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021986:	00db      	lsls	r3, r3, #3
 8021988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802198c:	4413      	add	r3, r2
 802198e:	3bb8      	subs	r3, #184	; 0xb8
 8021990:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8021994:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021998:	1e5a      	subs	r2, r3, #1
 802199a:	4613      	mov	r3, r2
 802199c:	005b      	lsls	r3, r3, #1
 802199e:	4413      	add	r3, r2
 80219a0:	1c59      	adds	r1, r3, #1
 80219a2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80219a6:	4613      	mov	r3, r2
 80219a8:	005b      	lsls	r3, r3, #1
 80219aa:	4413      	add	r3, r2
 80219ac:	3301      	adds	r3, #1
 80219ae:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80219b2:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 80219b6:	eeb0 1a46 	vmov.f32	s2, s12
 80219ba:	eef0 1a66 	vmov.f32	s3, s13
 80219be:	eeb0 0a47 	vmov.f32	s0, s14
 80219c2:	eef0 0a67 	vmov.f32	s1, s15
 80219c6:	461a      	mov	r2, r3
 80219c8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80219cc:	f001 f822 	bl	8022a14 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 80219d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219d4:	3301      	adds	r3, #1
 80219d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80219da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80219de:	1c5a      	adds	r2, r3, #1
 80219e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219e4:	4293      	cmp	r3, r2
 80219e6:	f77f ae74 	ble.w	80216d2 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 80219ea:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80219ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80219f2:	00db      	lsls	r3, r3, #3
 80219f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219f8:	4413      	add	r3, r2
 80219fa:	3bb8      	subs	r3, #184	; 0xb8
 80219fc:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 8021a00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021a04:	3301      	adds	r3, #1
 8021a06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 8021a0a:	e0b7      	b.n	8021b7c <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 8021a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a10:	00db      	lsls	r3, r3, #3
 8021a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a16:	4413      	add	r3, r2
 8021a18:	3ba0      	subs	r3, #160	; 0xa0
 8021a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021a1e:	f04f 0200 	mov.w	r2, #0
 8021a22:	f04f 0300 	mov.w	r3, #0
 8021a26:	f7df f84b 	bl	8000ac0 <__aeabi_dcmplt>
 8021a2a:	4603      	mov	r3, r0
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d025      	beq.n	8021a7c <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 8021a30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a34:	00db      	lsls	r3, r3, #3
 8021a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a3a:	4413      	add	r3, r2
 8021a3c:	3ba0      	subs	r3, #160	; 0xa0
 8021a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a42:	603a      	str	r2, [r7, #0]
 8021a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021a48:	607b      	str	r3, [r7, #4]
 8021a4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a4e:	00db      	lsls	r3, r3, #3
 8021a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a54:	4413      	add	r3, r2
 8021a56:	3ba0      	subs	r3, #160	; 0xa0
 8021a58:	ed97 7b00 	vldr	d7, [r7]
 8021a5c:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 8021a60:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021a64:	4613      	mov	r3, r2
 8021a66:	005b      	lsls	r3, r3, #1
 8021a68:	4413      	add	r3, r2
 8021a6a:	1c5a      	adds	r2, r3, #1
 8021a6c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021a70:	4611      	mov	r1, r2
 8021a72:	6818      	ldr	r0, [r3, #0]
 8021a74:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8021bd0 <svd_u3DvUgOe+0x1b80>
 8021a78:	f001 fa4e 	bl	8022f18 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 8021a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a80:	3301      	adds	r3, #1
 8021a82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021a86:	e055      	b.n	8021b34 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 8021a88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021a8c:	00db      	lsls	r3, r3, #3
 8021a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a92:	4413      	add	r3, r2
 8021a94:	3ba0      	subs	r3, #160	; 0xa0
 8021a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a9a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 8021a9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021aa2:	00db      	lsls	r3, r3, #3
 8021aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021aa8:	4413      	add	r3, r2
 8021aaa:	3ba0      	subs	r3, #160	; 0xa0
 8021aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ab0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021ab4:	00db      	lsls	r3, r3, #3
 8021ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021aba:	4413      	add	r3, r2
 8021abc:	3ba0      	subs	r3, #160	; 0xa0
 8021abe:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 8021ac2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021ac6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021aca:	00db      	lsls	r3, r3, #3
 8021acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021ad0:	4413      	add	r3, r2
 8021ad2:	3ba0      	subs	r3, #160	; 0xa0
 8021ad4:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 8021ad8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021adc:	4613      	mov	r3, r2
 8021ade:	005b      	lsls	r3, r3, #1
 8021ae0:	4413      	add	r3, r2
 8021ae2:	1c59      	adds	r1, r3, #1
 8021ae4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021ae8:	1c5a      	adds	r2, r3, #1
 8021aea:	4613      	mov	r3, r2
 8021aec:	005b      	lsls	r3, r3, #1
 8021aee:	4413      	add	r3, r2
 8021af0:	3301      	adds	r3, #1
 8021af2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8021af6:	461a      	mov	r2, r3
 8021af8:	6800      	ldr	r0, [r0, #0]
 8021afa:	f001 fa3c 	bl	8022f76 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 8021afe:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021b02:	4613      	mov	r3, r2
 8021b04:	005b      	lsls	r3, r3, #1
 8021b06:	4413      	add	r3, r2
 8021b08:	1c59      	adds	r1, r3, #1
 8021b0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b0e:	1c5a      	adds	r2, r3, #1
 8021b10:	4613      	mov	r3, r2
 8021b12:	005b      	lsls	r3, r3, #1
 8021b14:	4413      	add	r3, r2
 8021b16:	3301      	adds	r3, #1
 8021b18:	461a      	mov	r2, r3
 8021b1a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021b1e:	f001 fa2a 	bl	8022f76 <xswap_JoAqPjUv>
        d = qq;
 8021b22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b26:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 8021b2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b2e:	3301      	adds	r3, #1
 8021b30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021b34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b38:	2b01      	cmp	r3, #1
 8021b3a:	dc16      	bgt.n	8021b6a <svd_u3DvUgOe+0x1b1a>
 8021b3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021b40:	00db      	lsls	r3, r3, #3
 8021b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b46:	4413      	add	r3, r2
 8021b48:	3ba0      	subs	r3, #160	; 0xa0
 8021b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b52:	00db      	lsls	r3, r3, #3
 8021b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b58:	4413      	add	r3, r2
 8021b5a:	3ba0      	subs	r3, #160	; 0xa0
 8021b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b60:	f7de ffae 	bl	8000ac0 <__aeabi_dcmplt>
 8021b64:	4603      	mov	r3, r0
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d18e      	bne.n	8021a88 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 8021b70:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021b74:	3b01      	subs	r3, #1
 8021b76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 8021b7a:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 8021b7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b84:	db04      	blt.n	8021b90 <svd_u3DvUgOe+0x1b40>
 8021b86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021b8a:	2b4a      	cmp	r3, #74	; 0x4a
 8021b8c:	f77f a972 	ble.w	8020e74 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 8021b90:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8021b94:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8021b98:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 8021b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021ba0:	f103 0108 	add.w	r1, r3, #8
 8021ba4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8021ba8:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 8021bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021bb0:	f103 0110 	add.w	r1, r3, #16
 8021bb4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8021bb8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8021bbc:	bf00      	nop
 8021bbe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8021bc2:	46bd      	mov	sp, r7
 8021bc4:	ecbd 8b02 	vpop	{d8}
 8021bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021bcc:	f3af 8000 	nop.w
 8021bd0:	00000000 	.word	0x00000000
 8021bd4:	bff00000 	.word	0xbff00000

08021bd8 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 8021bd8:	b590      	push	{r4, r7, lr}
 8021bda:	b085      	sub	sp, #20
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	ed87 0b02 	vstr	d0, [r7, #8]
 8021be2:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021bea:	f04f 0200 	mov.w	r2, #0
 8021bee:	f04f 0300 	mov.w	r3, #0
 8021bf2:	f7de ff5b 	bl	8000aac <__aeabi_dcmpeq>
 8021bf6:	4603      	mov	r3, r0
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d10b      	bne.n	8021c14 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021c06:	f7de fe13 	bl	8000830 <__aeabi_ddiv>
 8021c0a:	4602      	mov	r2, r0
 8021c0c:	460b      	mov	r3, r1
 8021c0e:	6879      	ldr	r1, [r7, #4]
 8021c10:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	3308      	adds	r3, #8
 8021c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c1c:	f04f 0200 	mov.w	r2, #0
 8021c20:	f04f 0300 	mov.w	r3, #0
 8021c24:	f7de ff42 	bl	8000aac <__aeabi_dcmpeq>
 8021c28:	4603      	mov	r3, r0
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d10e      	bne.n	8021c4c <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	3308      	adds	r3, #8
 8021c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	f103 0408 	add.w	r4, r3, #8
 8021c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021c40:	f7de fdf6 	bl	8000830 <__aeabi_ddiv>
 8021c44:	4602      	mov	r2, r0
 8021c46:	460b      	mov	r3, r1
 8021c48:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	3310      	adds	r3, #16
 8021c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c54:	f04f 0200 	mov.w	r2, #0
 8021c58:	f04f 0300 	mov.w	r3, #0
 8021c5c:	f7de ff26 	bl	8000aac <__aeabi_dcmpeq>
 8021c60:	4603      	mov	r3, r0
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d000      	beq.n	8021c68 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 8021c66:	e00e      	b.n	8021c86 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	3310      	adds	r3, #16
 8021c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	f103 0410 	add.w	r4, r3, #16
 8021c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021c7a:	f7de fdd9 	bl	8000830 <__aeabi_ddiv>
 8021c7e:	4602      	mov	r2, r0
 8021c80:	460b      	mov	r3, r1
 8021c82:	e9c4 2300 	strd	r2, r3, [r4]
}
 8021c86:	bf00      	nop
 8021c88:	3714      	adds	r7, #20
 8021c8a:	46bd      	mov	sp, r7
 8021c8c:	bd90      	pop	{r4, r7, pc}

08021c8e <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 8021c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c90:	b08b      	sub	sp, #44	; 0x2c
 8021c92:	af00      	add	r7, sp, #0
 8021c94:	6178      	str	r0, [r7, #20]
 8021c96:	ed87 0b02 	vstr	d0, [r7, #8]
 8021c9a:	6139      	str	r1, [r7, #16]
 8021c9c:	607a      	str	r2, [r7, #4]
 8021c9e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021ca0:	697b      	ldr	r3, [r7, #20]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	dd43      	ble.n	8021d2e <xaxpy_OQ28XA21+0xa0>
 8021ca6:	f04f 0200 	mov.w	r2, #0
 8021caa:	f04f 0300 	mov.w	r3, #0
 8021cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021cb2:	f7de fefb 	bl	8000aac <__aeabi_dcmpeq>
 8021cb6:	4603      	mov	r3, r0
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d000      	beq.n	8021cbe <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021cbc:	e037      	b.n	8021d2e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 8021cbe:	687b      	ldr	r3, [r7, #4]
 8021cc0:	3b01      	subs	r3, #1
 8021cc2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021cc6:	3b01      	subs	r3, #1
 8021cc8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021cca:	2300      	movs	r3, #0
 8021ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8021cce:	e02a      	b.n	8021d26 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 8021cd0:	69fb      	ldr	r3, [r7, #28]
 8021cd2:	00db      	lsls	r3, r3, #3
 8021cd4:	683a      	ldr	r2, [r7, #0]
 8021cd6:	4413      	add	r3, r2
 8021cd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021cdc:	6a3b      	ldr	r3, [r7, #32]
 8021cde:	00db      	lsls	r3, r3, #3
 8021ce0:	693a      	ldr	r2, [r7, #16]
 8021ce2:	4413      	add	r3, r2
 8021ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021cec:	f7de fc76 	bl	80005dc <__aeabi_dmul>
 8021cf0:	4602      	mov	r2, r0
 8021cf2:	460b      	mov	r3, r1
 8021cf4:	4610      	mov	r0, r2
 8021cf6:	4619      	mov	r1, r3
 8021cf8:	69fb      	ldr	r3, [r7, #28]
 8021cfa:	00db      	lsls	r3, r3, #3
 8021cfc:	683a      	ldr	r2, [r7, #0]
 8021cfe:	18d6      	adds	r6, r2, r3
 8021d00:	4602      	mov	r2, r0
 8021d02:	460b      	mov	r3, r1
 8021d04:	4620      	mov	r0, r4
 8021d06:	4629      	mov	r1, r5
 8021d08:	f7de fab2 	bl	8000270 <__adddf3>
 8021d0c:	4602      	mov	r2, r0
 8021d0e:	460b      	mov	r3, r1
 8021d10:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021d14:	6a3b      	ldr	r3, [r7, #32]
 8021d16:	3301      	adds	r3, #1
 8021d18:	623b      	str	r3, [r7, #32]
      iy++;
 8021d1a:	69fb      	ldr	r3, [r7, #28]
 8021d1c:	3301      	adds	r3, #1
 8021d1e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d22:	3301      	adds	r3, #1
 8021d24:	627b      	str	r3, [r7, #36]	; 0x24
 8021d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d28:	697b      	ldr	r3, [r7, #20]
 8021d2a:	429a      	cmp	r2, r3
 8021d2c:	dbd0      	blt.n	8021cd0 <xaxpy_OQ28XA21+0x42>
}
 8021d2e:	bf00      	nop
 8021d30:	372c      	adds	r7, #44	; 0x2c
 8021d32:	46bd      	mov	sp, r7
 8021d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021d36 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 8021d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d38:	b08b      	sub	sp, #44	; 0x2c
 8021d3a:	af00      	add	r7, sp, #0
 8021d3c:	6178      	str	r0, [r7, #20]
 8021d3e:	ed87 0b02 	vstr	d0, [r7, #8]
 8021d42:	6139      	str	r1, [r7, #16]
 8021d44:	607a      	str	r2, [r7, #4]
 8021d46:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021d48:	697b      	ldr	r3, [r7, #20]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	dd43      	ble.n	8021dd6 <xaxpy_Wxch84Fl+0xa0>
 8021d4e:	f04f 0200 	mov.w	r2, #0
 8021d52:	f04f 0300 	mov.w	r3, #0
 8021d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021d5a:	f7de fea7 	bl	8000aac <__aeabi_dcmpeq>
 8021d5e:	4603      	mov	r3, r0
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d000      	beq.n	8021d66 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021d64:	e037      	b.n	8021dd6 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	3b01      	subs	r3, #1
 8021d6a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d6e:	3b01      	subs	r3, #1
 8021d70:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021d72:	2300      	movs	r3, #0
 8021d74:	627b      	str	r3, [r7, #36]	; 0x24
 8021d76:	e02a      	b.n	8021dce <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 8021d78:	69fb      	ldr	r3, [r7, #28]
 8021d7a:	00db      	lsls	r3, r3, #3
 8021d7c:	683a      	ldr	r2, [r7, #0]
 8021d7e:	4413      	add	r3, r2
 8021d80:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021d84:	6a3b      	ldr	r3, [r7, #32]
 8021d86:	00db      	lsls	r3, r3, #3
 8021d88:	693a      	ldr	r2, [r7, #16]
 8021d8a:	4413      	add	r3, r2
 8021d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021d94:	f7de fc22 	bl	80005dc <__aeabi_dmul>
 8021d98:	4602      	mov	r2, r0
 8021d9a:	460b      	mov	r3, r1
 8021d9c:	4610      	mov	r0, r2
 8021d9e:	4619      	mov	r1, r3
 8021da0:	69fb      	ldr	r3, [r7, #28]
 8021da2:	00db      	lsls	r3, r3, #3
 8021da4:	683a      	ldr	r2, [r7, #0]
 8021da6:	18d6      	adds	r6, r2, r3
 8021da8:	4602      	mov	r2, r0
 8021daa:	460b      	mov	r3, r1
 8021dac:	4620      	mov	r0, r4
 8021dae:	4629      	mov	r1, r5
 8021db0:	f7de fa5e 	bl	8000270 <__adddf3>
 8021db4:	4602      	mov	r2, r0
 8021db6:	460b      	mov	r3, r1
 8021db8:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021dbc:	6a3b      	ldr	r3, [r7, #32]
 8021dbe:	3301      	adds	r3, #1
 8021dc0:	623b      	str	r3, [r7, #32]
      iy++;
 8021dc2:	69fb      	ldr	r3, [r7, #28]
 8021dc4:	3301      	adds	r3, #1
 8021dc6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dca:	3301      	adds	r3, #1
 8021dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8021dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021dd0:	697b      	ldr	r3, [r7, #20]
 8021dd2:	429a      	cmp	r2, r3
 8021dd4:	dbd0      	blt.n	8021d78 <xaxpy_Wxch84Fl+0x42>
}
 8021dd6:	bf00      	nop
 8021dd8:	372c      	adds	r7, #44	; 0x2c
 8021dda:	46bd      	mov	sp, r7
 8021ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021dde <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 8021dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021de0:	b08b      	sub	sp, #44	; 0x2c
 8021de2:	af00      	add	r7, sp, #0
 8021de4:	6178      	str	r0, [r7, #20]
 8021de6:	ed87 0b02 	vstr	d0, [r7, #8]
 8021dea:	6139      	str	r1, [r7, #16]
 8021dec:	607a      	str	r2, [r7, #4]
 8021dee:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021df0:	697b      	ldr	r3, [r7, #20]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	dd43      	ble.n	8021e7e <xaxpy_guu0hJif+0xa0>
 8021df6:	f04f 0200 	mov.w	r2, #0
 8021dfa:	f04f 0300 	mov.w	r3, #0
 8021dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021e02:	f7de fe53 	bl	8000aac <__aeabi_dcmpeq>
 8021e06:	4603      	mov	r3, r0
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	d000      	beq.n	8021e0e <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 8021e0c:	e037      	b.n	8021e7e <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 8021e0e:	693b      	ldr	r3, [r7, #16]
 8021e10:	3b01      	subs	r3, #1
 8021e12:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021e14:	683b      	ldr	r3, [r7, #0]
 8021e16:	3b01      	subs	r3, #1
 8021e18:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8021e1e:	e02a      	b.n	8021e76 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 8021e20:	69fb      	ldr	r3, [r7, #28]
 8021e22:	00db      	lsls	r3, r3, #3
 8021e24:	687a      	ldr	r2, [r7, #4]
 8021e26:	4413      	add	r3, r2
 8021e28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021e2c:	6a3b      	ldr	r3, [r7, #32]
 8021e2e:	00db      	lsls	r3, r3, #3
 8021e30:	687a      	ldr	r2, [r7, #4]
 8021e32:	4413      	add	r3, r2
 8021e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e3c:	f7de fbce 	bl	80005dc <__aeabi_dmul>
 8021e40:	4602      	mov	r2, r0
 8021e42:	460b      	mov	r3, r1
 8021e44:	4610      	mov	r0, r2
 8021e46:	4619      	mov	r1, r3
 8021e48:	69fb      	ldr	r3, [r7, #28]
 8021e4a:	00db      	lsls	r3, r3, #3
 8021e4c:	687a      	ldr	r2, [r7, #4]
 8021e4e:	18d6      	adds	r6, r2, r3
 8021e50:	4602      	mov	r2, r0
 8021e52:	460b      	mov	r3, r1
 8021e54:	4620      	mov	r0, r4
 8021e56:	4629      	mov	r1, r5
 8021e58:	f7de fa0a 	bl	8000270 <__adddf3>
 8021e5c:	4602      	mov	r2, r0
 8021e5e:	460b      	mov	r3, r1
 8021e60:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021e64:	6a3b      	ldr	r3, [r7, #32]
 8021e66:	3301      	adds	r3, #1
 8021e68:	623b      	str	r3, [r7, #32]
      iy++;
 8021e6a:	69fb      	ldr	r3, [r7, #28]
 8021e6c:	3301      	adds	r3, #1
 8021e6e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e72:	3301      	adds	r3, #1
 8021e74:	627b      	str	r3, [r7, #36]	; 0x24
 8021e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e78:	697b      	ldr	r3, [r7, #20]
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	dbd0      	blt.n	8021e20 <xaxpy_guu0hJif+0x42>
}
 8021e7e:	bf00      	nop
 8021e80:	372c      	adds	r7, #44	; 0x2c
 8021e82:	46bd      	mov	sp, r7
 8021e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021e86 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 8021e86:	b580      	push	{r7, lr}
 8021e88:	b08a      	sub	sp, #40	; 0x28
 8021e8a:	af00      	add	r7, sp, #0
 8021e8c:	60f8      	str	r0, [r7, #12]
 8021e8e:	60b9      	str	r1, [r7, #8]
 8021e90:	607a      	str	r2, [r7, #4]
 8021e92:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 8021e94:	f04f 0200 	mov.w	r2, #0
 8021e98:	f04f 0300 	mov.w	r3, #0
 8021e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 8021ea0:	68fb      	ldr	r3, [r7, #12]
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	dd31      	ble.n	8021f0a <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 8021eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021eac:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 8021eae:	2300      	movs	r3, #0
 8021eb0:	61fb      	str	r3, [r7, #28]
 8021eb2:	e026      	b.n	8021f02 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 8021eb4:	69bb      	ldr	r3, [r7, #24]
 8021eb6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021eba:	3b01      	subs	r3, #1
 8021ebc:	00db      	lsls	r3, r3, #3
 8021ebe:	68ba      	ldr	r2, [r7, #8]
 8021ec0:	4413      	add	r3, r2
 8021ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ec6:	697b      	ldr	r3, [r7, #20]
 8021ec8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021ecc:	3b01      	subs	r3, #1
 8021ece:	00db      	lsls	r3, r3, #3
 8021ed0:	683a      	ldr	r2, [r7, #0]
 8021ed2:	4413      	add	r3, r2
 8021ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ed8:	f7de fb80 	bl	80005dc <__aeabi_dmul>
 8021edc:	4602      	mov	r2, r0
 8021ede:	460b      	mov	r3, r1
 8021ee0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021ee4:	f7de f9c4 	bl	8000270 <__adddf3>
 8021ee8:	4602      	mov	r2, r0
 8021eea:	460b      	mov	r3, r1
 8021eec:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 8021ef0:	69bb      	ldr	r3, [r7, #24]
 8021ef2:	3301      	adds	r3, #1
 8021ef4:	61bb      	str	r3, [r7, #24]
      iy++;
 8021ef6:	697b      	ldr	r3, [r7, #20]
 8021ef8:	3301      	adds	r3, #1
 8021efa:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 8021efc:	69fb      	ldr	r3, [r7, #28]
 8021efe:	3301      	adds	r3, #1
 8021f00:	61fb      	str	r3, [r7, #28]
 8021f02:	69fa      	ldr	r2, [r7, #28]
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	429a      	cmp	r2, r3
 8021f08:	dbd4      	blt.n	8021eb4 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 8021f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021f0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8021f12:	eeb0 0a47 	vmov.f32	s0, s14
 8021f16:	eef0 0a67 	vmov.f32	s1, s15
 8021f1a:	3728      	adds	r7, #40	; 0x28
 8021f1c:	46bd      	mov	sp, r7
 8021f1e:	bd80      	pop	{r7, pc}

08021f20 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 8021f20:	b590      	push	{r4, r7, lr}
 8021f22:	b08f      	sub	sp, #60	; 0x3c
 8021f24:	af00      	add	r7, sp, #0
 8021f26:	60f8      	str	r0, [r7, #12]
 8021f28:	60b9      	str	r1, [r7, #8]
 8021f2a:	607a      	str	r2, [r7, #4]
 8021f2c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 8021f2e:	68fb      	ldr	r3, [r7, #12]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	d079      	beq.n	8022028 <xgemv_NQlWbt2i+0x108>
 8021f34:	68bb      	ldr	r3, [r7, #8]
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d076      	beq.n	8022028 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 8021f3a:	2300      	movs	r3, #0
 8021f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8021f3e:	e00c      	b.n	8021f5a <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 8021f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f42:	00db      	lsls	r3, r3, #3
 8021f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021f46:	18d1      	adds	r1, r2, r3
 8021f48:	f04f 0200 	mov.w	r2, #0
 8021f4c:	f04f 0300 	mov.w	r3, #0
 8021f50:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 8021f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f56:	3301      	adds	r3, #1
 8021f58:	637b      	str	r3, [r7, #52]	; 0x34
 8021f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021f5c:	68bb      	ldr	r3, [r7, #8]
 8021f5e:	429a      	cmp	r2, r3
 8021f60:	dbee      	blt.n	8021f40 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 8021f62:	2300      	movs	r3, #0
 8021f64:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 8021f66:	68bb      	ldr	r3, [r7, #8]
 8021f68:	1e5a      	subs	r2, r3, #1
 8021f6a:	4613      	mov	r3, r2
 8021f6c:	005b      	lsls	r3, r3, #1
 8021f6e:	4413      	add	r3, r2
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	461a      	mov	r2, r3
 8021f74:	683b      	ldr	r3, [r7, #0]
 8021f76:	4413      	add	r3, r2
 8021f78:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 8021f7a:	683b      	ldr	r3, [r7, #0]
 8021f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021f7e:	e04f      	b.n	8022020 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 8021f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021f82:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 8021f84:	f04f 0200 	mov.w	r2, #0
 8021f88:	f04f 0300 	mov.w	r3, #0
 8021f8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 8021f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021f92:	68fb      	ldr	r3, [r7, #12]
 8021f94:	4413      	add	r3, r2
 8021f96:	3b01      	subs	r3, #1
 8021f98:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 8021f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8021f9e:	e023      	b.n	8021fe8 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 8021fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fa2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021fa6:	3b01      	subs	r3, #1
 8021fa8:	00db      	lsls	r3, r3, #3
 8021faa:	687a      	ldr	r2, [r7, #4]
 8021fac:	4413      	add	r3, r2
 8021fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021fb2:	69fb      	ldr	r3, [r7, #28]
 8021fb4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8021fb8:	3b01      	subs	r3, #1
 8021fba:	00db      	lsls	r3, r3, #3
 8021fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021fbe:	4413      	add	r3, r2
 8021fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fc4:	f7de fb0a 	bl	80005dc <__aeabi_dmul>
 8021fc8:	4602      	mov	r2, r0
 8021fca:	460b      	mov	r3, r1
 8021fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021fd0:	f7de f94e 	bl	8000270 <__adddf3>
 8021fd4:	4602      	mov	r2, r0
 8021fd6:	460b      	mov	r3, r1
 8021fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 8021fdc:	69fb      	ldr	r3, [r7, #28]
 8021fde:	3301      	adds	r3, #1
 8021fe0:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 8021fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fe4:	3301      	adds	r3, #1
 8021fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8021fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fea:	697b      	ldr	r3, [r7, #20]
 8021fec:	429a      	cmp	r2, r3
 8021fee:	ddd7      	ble.n	8021fa0 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 8021ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ff2:	00db      	lsls	r3, r3, #3
 8021ff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021ff6:	4413      	add	r3, r2
 8021ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ffe:	00db      	lsls	r3, r3, #3
 8022000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022002:	18d4      	adds	r4, r2, r3
 8022004:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022008:	f7de f932 	bl	8000270 <__adddf3>
 802200c:	4602      	mov	r2, r0
 802200e:	460b      	mov	r3, r1
 8022010:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022016:	3301      	adds	r3, #1
 8022018:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 802201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802201c:	3306      	adds	r3, #6
 802201e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022022:	69bb      	ldr	r3, [r7, #24]
 8022024:	429a      	cmp	r2, r3
 8022026:	ddab      	ble.n	8021f80 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 8022028:	bf00      	nop
 802202a:	373c      	adds	r7, #60	; 0x3c
 802202c:	46bd      	mov	sp, r7
 802202e:	bd90      	pop	{r4, r7, pc}

08022030 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 8022030:	b590      	push	{r4, r7, lr}
 8022032:	b08f      	sub	sp, #60	; 0x3c
 8022034:	af00      	add	r7, sp, #0
 8022036:	60f8      	str	r0, [r7, #12]
 8022038:	60b9      	str	r1, [r7, #8]
 802203a:	607a      	str	r2, [r7, #4]
 802203c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 802203e:	68fb      	ldr	r3, [r7, #12]
 8022040:	2b00      	cmp	r3, #0
 8022042:	d077      	beq.n	8022134 <xgemv_fRiR1I1O+0x104>
 8022044:	68bb      	ldr	r3, [r7, #8]
 8022046:	2b00      	cmp	r3, #0
 8022048:	d074      	beq.n	8022134 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 802204a:	2300      	movs	r3, #0
 802204c:	637b      	str	r3, [r7, #52]	; 0x34
 802204e:	e00c      	b.n	802206a <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 8022050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022052:	00db      	lsls	r3, r3, #3
 8022054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022056:	18d1      	adds	r1, r2, r3
 8022058:	f04f 0200 	mov.w	r2, #0
 802205c:	f04f 0300 	mov.w	r3, #0
 8022060:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 8022064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022066:	3301      	adds	r3, #1
 8022068:	637b      	str	r3, [r7, #52]	; 0x34
 802206a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802206c:	68bb      	ldr	r3, [r7, #8]
 802206e:	429a      	cmp	r2, r3
 8022070:	dbee      	blt.n	8022050 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 8022072:	2300      	movs	r3, #0
 8022074:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 8022076:	68bb      	ldr	r3, [r7, #8]
 8022078:	1e5a      	subs	r2, r3, #1
 802207a:	4613      	mov	r3, r2
 802207c:	005b      	lsls	r3, r3, #1
 802207e:	4413      	add	r3, r2
 8022080:	683a      	ldr	r2, [r7, #0]
 8022082:	4413      	add	r3, r2
 8022084:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 8022086:	683b      	ldr	r3, [r7, #0]
 8022088:	62fb      	str	r3, [r7, #44]	; 0x2c
 802208a:	e04f      	b.n	802212c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 802208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802208e:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 8022090:	f04f 0200 	mov.w	r2, #0
 8022094:	f04f 0300 	mov.w	r3, #0
 8022098:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 802209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802209e:	68fb      	ldr	r3, [r7, #12]
 80220a0:	4413      	add	r3, r2
 80220a2:	3b01      	subs	r3, #1
 80220a4:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 80220a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220a8:	633b      	str	r3, [r7, #48]	; 0x30
 80220aa:	e023      	b.n	80220f4 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 80220ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80220b2:	3b01      	subs	r3, #1
 80220b4:	00db      	lsls	r3, r3, #3
 80220b6:	687a      	ldr	r2, [r7, #4]
 80220b8:	4413      	add	r3, r2
 80220ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80220be:	69fb      	ldr	r3, [r7, #28]
 80220c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80220c4:	3b01      	subs	r3, #1
 80220c6:	00db      	lsls	r3, r3, #3
 80220c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80220ca:	4413      	add	r3, r2
 80220cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220d0:	f7de fa84 	bl	80005dc <__aeabi_dmul>
 80220d4:	4602      	mov	r2, r0
 80220d6:	460b      	mov	r3, r1
 80220d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80220dc:	f7de f8c8 	bl	8000270 <__adddf3>
 80220e0:	4602      	mov	r2, r0
 80220e2:	460b      	mov	r3, r1
 80220e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 80220e8:	69fb      	ldr	r3, [r7, #28]
 80220ea:	3301      	adds	r3, #1
 80220ec:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 80220ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220f0:	3301      	adds	r3, #1
 80220f2:	633b      	str	r3, [r7, #48]	; 0x30
 80220f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80220f6:	697b      	ldr	r3, [r7, #20]
 80220f8:	429a      	cmp	r2, r3
 80220fa:	ddd7      	ble.n	80220ac <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 80220fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220fe:	00db      	lsls	r3, r3, #3
 8022100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022102:	4413      	add	r3, r2
 8022104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802210a:	00db      	lsls	r3, r3, #3
 802210c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802210e:	18d4      	adds	r4, r2, r3
 8022110:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022114:	f7de f8ac 	bl	8000270 <__adddf3>
 8022118:	4602      	mov	r2, r0
 802211a:	460b      	mov	r3, r1
 802211c:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022122:	3301      	adds	r3, #1
 8022124:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 8022126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022128:	3303      	adds	r3, #3
 802212a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802212c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802212e:	69bb      	ldr	r3, [r7, #24]
 8022130:	429a      	cmp	r2, r3
 8022132:	ddab      	ble.n	802208c <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 8022134:	bf00      	nop
 8022136:	373c      	adds	r7, #60	; 0x3c
 8022138:	46bd      	mov	sp, r7
 802213a:	bd90      	pop	{r4, r7, pc}

0802213c <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 802213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802213e:	b091      	sub	sp, #68	; 0x44
 8022140:	af00      	add	r7, sp, #0
 8022142:	6178      	str	r0, [r7, #20]
 8022144:	6139      	str	r1, [r7, #16]
 8022146:	ed87 0b02 	vstr	d0, [r7, #8]
 802214a:	607a      	str	r2, [r7, #4]
 802214c:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 802214e:	f04f 0200 	mov.w	r2, #0
 8022152:	f04f 0300 	mov.w	r3, #0
 8022156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802215a:	f7de fca7 	bl	8000aac <__aeabi_dcmpeq>
 802215e:	4603      	mov	r3, r0
 8022160:	2b00      	cmp	r3, #0
 8022162:	d000      	beq.n	8022166 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 8022164:	e069      	b.n	802223a <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 8022166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022168:	3b01      	subs	r3, #1
 802216a:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 802216c:	2300      	movs	r3, #0
 802216e:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 8022170:	2300      	movs	r3, #0
 8022172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022174:	e05d      	b.n	8022232 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 8022176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022178:	00db      	lsls	r3, r3, #3
 802217a:	683a      	ldr	r2, [r7, #0]
 802217c:	4413      	add	r3, r2
 802217e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022182:	f04f 0200 	mov.w	r2, #0
 8022186:	f04f 0300 	mov.w	r3, #0
 802218a:	f7de fc8f 	bl	8000aac <__aeabi_dcmpeq>
 802218e:	4603      	mov	r3, r0
 8022190:	2b00      	cmp	r3, #0
 8022192:	d145      	bne.n	8022220 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 8022194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022196:	00db      	lsls	r3, r3, #3
 8022198:	683a      	ldr	r2, [r7, #0]
 802219a:	4413      	add	r3, r2
 802219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80221a4:	f7de fa1a 	bl	80005dc <__aeabi_dmul>
 80221a8:	4602      	mov	r2, r0
 80221aa:	460b      	mov	r3, r1
 80221ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 80221b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80221b6:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 80221b8:	697a      	ldr	r2, [r7, #20]
 80221ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80221bc:	4413      	add	r3, r2
 80221be:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 80221c0:	e02a      	b.n	8022218 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 80221c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221c4:	00db      	lsls	r3, r3, #3
 80221c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80221c8:	4413      	add	r3, r2
 80221ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80221ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80221d4:	3b01      	subs	r3, #1
 80221d6:	00db      	lsls	r3, r3, #3
 80221d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80221da:	4413      	add	r3, r2
 80221dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80221e4:	f7de f9fa 	bl	80005dc <__aeabi_dmul>
 80221e8:	4602      	mov	r2, r0
 80221ea:	460b      	mov	r3, r1
 80221ec:	4610      	mov	r0, r2
 80221ee:	4619      	mov	r1, r3
 80221f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221f2:	00db      	lsls	r3, r3, #3
 80221f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80221f6:	18d6      	adds	r6, r2, r3
 80221f8:	4602      	mov	r2, r0
 80221fa:	460b      	mov	r3, r1
 80221fc:	4620      	mov	r0, r4
 80221fe:	4629      	mov	r1, r5
 8022200:	f7de f836 	bl	8000270 <__adddf3>
 8022204:	4602      	mov	r2, r0
 8022206:	460b      	mov	r3, r1
 8022208:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 802220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802220e:	3301      	adds	r3, #1
 8022210:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022214:	3301      	adds	r3, #1
 8022216:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 8022218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802221a:	69fb      	ldr	r3, [r7, #28]
 802221c:	429a      	cmp	r2, r3
 802221e:	dbd0      	blt.n	80221c2 <xgerc_R09LiDgJ+0x86>
      jy++;
 8022220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022222:	3301      	adds	r3, #1
 8022224:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 8022226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022228:	3306      	adds	r3, #6
 802222a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 802222c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802222e:	3301      	adds	r3, #1
 8022230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022234:	693b      	ldr	r3, [r7, #16]
 8022236:	429a      	cmp	r2, r3
 8022238:	db9d      	blt.n	8022176 <xgerc_R09LiDgJ+0x3a>
}
 802223a:	bf00      	nop
 802223c:	3744      	adds	r7, #68	; 0x44
 802223e:	46bd      	mov	sp, r7
 8022240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022242 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 8022242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022244:	b091      	sub	sp, #68	; 0x44
 8022246:	af00      	add	r7, sp, #0
 8022248:	6178      	str	r0, [r7, #20]
 802224a:	6139      	str	r1, [r7, #16]
 802224c:	ed87 0b02 	vstr	d0, [r7, #8]
 8022250:	607a      	str	r2, [r7, #4]
 8022252:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8022254:	f04f 0200 	mov.w	r2, #0
 8022258:	f04f 0300 	mov.w	r3, #0
 802225c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022260:	f7de fc24 	bl	8000aac <__aeabi_dcmpeq>
 8022264:	4603      	mov	r3, r0
 8022266:	2b00      	cmp	r3, #0
 8022268:	d000      	beq.n	802226c <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 802226a:	e069      	b.n	8022340 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 802226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802226e:	3b01      	subs	r3, #1
 8022270:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 8022272:	2300      	movs	r3, #0
 8022274:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 8022276:	2300      	movs	r3, #0
 8022278:	63fb      	str	r3, [r7, #60]	; 0x3c
 802227a:	e05d      	b.n	8022338 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 802227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802227e:	00db      	lsls	r3, r3, #3
 8022280:	683a      	ldr	r2, [r7, #0]
 8022282:	4413      	add	r3, r2
 8022284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022288:	f04f 0200 	mov.w	r2, #0
 802228c:	f04f 0300 	mov.w	r3, #0
 8022290:	f7de fc0c 	bl	8000aac <__aeabi_dcmpeq>
 8022294:	4603      	mov	r3, r0
 8022296:	2b00      	cmp	r3, #0
 8022298:	d145      	bne.n	8022326 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 802229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802229c:	00db      	lsls	r3, r3, #3
 802229e:	683a      	ldr	r2, [r7, #0]
 80222a0:	4413      	add	r3, r2
 80222a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80222aa:	f7de f997 	bl	80005dc <__aeabi_dmul>
 80222ae:	4602      	mov	r2, r0
 80222b0:	460b      	mov	r3, r1
 80222b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 80222ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222bc:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 80222be:	697a      	ldr	r2, [r7, #20]
 80222c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222c2:	4413      	add	r3, r2
 80222c4:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 80222c6:	e02a      	b.n	802231e <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 80222c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222ca:	00db      	lsls	r3, r3, #3
 80222cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80222ce:	4413      	add	r3, r2
 80222d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80222d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80222d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80222da:	3b01      	subs	r3, #1
 80222dc:	00db      	lsls	r3, r3, #3
 80222de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80222e0:	4413      	add	r3, r2
 80222e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80222e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80222ea:	f7de f977 	bl	80005dc <__aeabi_dmul>
 80222ee:	4602      	mov	r2, r0
 80222f0:	460b      	mov	r3, r1
 80222f2:	4610      	mov	r0, r2
 80222f4:	4619      	mov	r1, r3
 80222f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222f8:	00db      	lsls	r3, r3, #3
 80222fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80222fc:	18d6      	adds	r6, r2, r3
 80222fe:	4602      	mov	r2, r0
 8022300:	460b      	mov	r3, r1
 8022302:	4620      	mov	r0, r4
 8022304:	4629      	mov	r1, r5
 8022306:	f7dd ffb3 	bl	8000270 <__adddf3>
 802230a:	4602      	mov	r2, r0
 802230c:	460b      	mov	r3, r1
 802230e:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 8022312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022314:	3301      	adds	r3, #1
 8022316:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802231a:	3301      	adds	r3, #1
 802231c:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 802231e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022320:	69fb      	ldr	r3, [r7, #28]
 8022322:	429a      	cmp	r2, r3
 8022324:	dbd0      	blt.n	80222c8 <xgerc_tNNiazQU+0x86>
      jy++;
 8022326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022328:	3301      	adds	r3, #1
 802232a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 802232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802232e:	3303      	adds	r3, #3
 8022330:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 8022332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022334:	3301      	adds	r3, #1
 8022336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802233a:	693b      	ldr	r3, [r7, #16]
 802233c:	429a      	cmp	r2, r3
 802233e:	db9d      	blt.n	802227c <xgerc_tNNiazQU+0x3a>
}
 8022340:	bf00      	nop
 8022342:	3744      	adds	r7, #68	; 0x44
 8022344:	46bd      	mov	sp, r7
 8022346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022348 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b092      	sub	sp, #72	; 0x48
 802234c:	af00      	add	r7, sp, #0
 802234e:	60f8      	str	r0, [r7, #12]
 8022350:	60b9      	str	r1, [r7, #8]
 8022352:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022354:	f04f 0200 	mov.w	r2, #0
 8022358:	f04f 0300 	mov.w	r3, #0
 802235c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	2b00      	cmp	r3, #0
 8022364:	f340 8090 	ble.w	8022488 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 8022368:	68fb      	ldr	r3, [r7, #12]
 802236a:	2b01      	cmp	r3, #1
 802236c:	d10e      	bne.n	802238c <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022374:	3b01      	subs	r3, #1
 8022376:	00db      	lsls	r3, r3, #3
 8022378:	68ba      	ldr	r2, [r7, #8]
 802237a:	4413      	add	r3, r2
 802237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022380:	4611      	mov	r1, r2
 8022382:	6439      	str	r1, [r7, #64]	; 0x40
 8022384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022388:	647b      	str	r3, [r7, #68]	; 0x44
 802238a:	e07d      	b.n	8022488 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 802238c:	f04f 0200 	mov.w	r2, #0
 8022390:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022394:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022398:	687a      	ldr	r2, [r7, #4]
 802239a:	68fb      	ldr	r3, [r7, #12]
 802239c:	4413      	add	r3, r2
 802239e:	3b01      	subs	r3, #1
 80223a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80223a6:	e05d      	b.n	8022464 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80223a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80223aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80223ae:	3b01      	subs	r3, #1
 80223b0:	00db      	lsls	r3, r3, #3
 80223b2:	68ba      	ldr	r2, [r7, #8]
 80223b4:	4413      	add	r3, r2
 80223b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ba:	4611      	mov	r1, r2
 80223bc:	6239      	str	r1, [r7, #32]
 80223be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80223c2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80223c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80223c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80223cc:	f7de fb96 	bl	8000afc <__aeabi_dcmpgt>
 80223d0:	4603      	mov	r3, r0
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d029      	beq.n	802242a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 80223d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80223da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80223de:	f7de fa27 	bl	8000830 <__aeabi_ddiv>
 80223e2:	4602      	mov	r2, r0
 80223e4:	460b      	mov	r3, r1
 80223e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80223ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80223ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80223f2:	f7de f8f3 	bl	80005dc <__aeabi_dmul>
 80223f6:	4602      	mov	r2, r0
 80223f8:	460b      	mov	r3, r1
 80223fa:	4610      	mov	r0, r2
 80223fc:	4619      	mov	r1, r3
 80223fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022402:	f7de f8eb 	bl	80005dc <__aeabi_dmul>
 8022406:	4602      	mov	r2, r0
 8022408:	460b      	mov	r3, r1
 802240a:	4610      	mov	r0, r2
 802240c:	4619      	mov	r1, r3
 802240e:	f04f 0200 	mov.w	r2, #0
 8022412:	4b23      	ldr	r3, [pc, #140]	; (80224a0 <xnrm2_7bm34mDQ+0x158>)
 8022414:	f7dd ff2c 	bl	8000270 <__adddf3>
 8022418:	4602      	mov	r2, r0
 802241a:	460b      	mov	r3, r1
 802241c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022420:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022424:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022428:	e019      	b.n	802245e <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 802242a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802242e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022432:	f7de f9fd 	bl	8000830 <__aeabi_ddiv>
 8022436:	4602      	mov	r2, r0
 8022438:	460b      	mov	r3, r1
 802243a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 802243e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022442:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022446:	f7de f8c9 	bl	80005dc <__aeabi_dmul>
 802244a:	4602      	mov	r2, r0
 802244c:	460b      	mov	r3, r1
 802244e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022452:	f7dd ff0d 	bl	8000270 <__adddf3>
 8022456:	4602      	mov	r2, r0
 8022458:	460b      	mov	r3, r1
 802245a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 802245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022460:	3301      	adds	r3, #1
 8022462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022468:	429a      	cmp	r2, r3
 802246a:	dd9d      	ble.n	80223a8 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 802246c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022470:	f00c faa6 	bl	802e9c0 <sqrt>
 8022474:	ec53 2b10 	vmov	r2, r3, d0
 8022478:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802247c:	f7de f8ae 	bl	80005dc <__aeabi_dmul>
 8022480:	4602      	mov	r2, r0
 8022482:	460b      	mov	r3, r1
 8022484:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022488:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802248c:	ec43 2b17 	vmov	d7, r2, r3
}
 8022490:	eeb0 0a47 	vmov.f32	s0, s14
 8022494:	eef0 0a67 	vmov.f32	s1, s15
 8022498:	3748      	adds	r7, #72	; 0x48
 802249a:	46bd      	mov	sp, r7
 802249c:	bd80      	pop	{r7, pc}
 802249e:	bf00      	nop
 80224a0:	3ff00000 	.word	0x3ff00000

080224a4 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 80224a4:	b580      	push	{r7, lr}
 80224a6:	b092      	sub	sp, #72	; 0x48
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	60f8      	str	r0, [r7, #12]
 80224ac:	60b9      	str	r1, [r7, #8]
 80224ae:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80224b0:	f04f 0200 	mov.w	r2, #0
 80224b4:	f04f 0300 	mov.w	r3, #0
 80224b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80224bc:	68fb      	ldr	r3, [r7, #12]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	f340 8090 	ble.w	80225e4 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 80224c4:	68fb      	ldr	r3, [r7, #12]
 80224c6:	2b01      	cmp	r3, #1
 80224c8:	d10e      	bne.n	80224e8 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80224d0:	3b01      	subs	r3, #1
 80224d2:	00db      	lsls	r3, r3, #3
 80224d4:	68ba      	ldr	r2, [r7, #8]
 80224d6:	4413      	add	r3, r2
 80224d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224dc:	4611      	mov	r1, r2
 80224de:	6439      	str	r1, [r7, #64]	; 0x40
 80224e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80224e4:	647b      	str	r3, [r7, #68]	; 0x44
 80224e6:	e07d      	b.n	80225e4 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80224e8:	f04f 0200 	mov.w	r2, #0
 80224ec:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80224f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80224f4:	687a      	ldr	r2, [r7, #4]
 80224f6:	68fb      	ldr	r3, [r7, #12]
 80224f8:	4413      	add	r3, r2
 80224fa:	3b01      	subs	r3, #1
 80224fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022502:	e05d      	b.n	80225c0 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022506:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802250a:	3b01      	subs	r3, #1
 802250c:	00db      	lsls	r3, r3, #3
 802250e:	68ba      	ldr	r2, [r7, #8]
 8022510:	4413      	add	r3, r2
 8022512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022516:	4611      	mov	r1, r2
 8022518:	6239      	str	r1, [r7, #32]
 802251a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802251e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022520:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022524:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022528:	f7de fae8 	bl	8000afc <__aeabi_dcmpgt>
 802252c:	4603      	mov	r3, r0
 802252e:	2b00      	cmp	r3, #0
 8022530:	d029      	beq.n	8022586 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 8022532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022536:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802253a:	f7de f979 	bl	8000830 <__aeabi_ddiv>
 802253e:	4602      	mov	r2, r0
 8022540:	460b      	mov	r3, r1
 8022542:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8022546:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802254a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802254e:	f7de f845 	bl	80005dc <__aeabi_dmul>
 8022552:	4602      	mov	r2, r0
 8022554:	460b      	mov	r3, r1
 8022556:	4610      	mov	r0, r2
 8022558:	4619      	mov	r1, r3
 802255a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802255e:	f7de f83d 	bl	80005dc <__aeabi_dmul>
 8022562:	4602      	mov	r2, r0
 8022564:	460b      	mov	r3, r1
 8022566:	4610      	mov	r0, r2
 8022568:	4619      	mov	r1, r3
 802256a:	f04f 0200 	mov.w	r2, #0
 802256e:	4b23      	ldr	r3, [pc, #140]	; (80225fc <xnrm2_Mnmxg9YT+0x158>)
 8022570:	f7dd fe7e 	bl	8000270 <__adddf3>
 8022574:	4602      	mov	r2, r0
 8022576:	460b      	mov	r3, r1
 8022578:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 802257c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022580:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022584:	e019      	b.n	80225ba <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022586:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802258a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802258e:	f7de f94f 	bl	8000830 <__aeabi_ddiv>
 8022592:	4602      	mov	r2, r0
 8022594:	460b      	mov	r3, r1
 8022596:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 802259a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802259e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80225a2:	f7de f81b 	bl	80005dc <__aeabi_dmul>
 80225a6:	4602      	mov	r2, r0
 80225a8:	460b      	mov	r3, r1
 80225aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80225ae:	f7dd fe5f 	bl	8000270 <__adddf3>
 80225b2:	4602      	mov	r2, r0
 80225b4:	460b      	mov	r3, r1
 80225b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80225ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80225bc:	3301      	adds	r3, #1
 80225be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80225c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80225c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225c4:	429a      	cmp	r2, r3
 80225c6:	dd9d      	ble.n	8022504 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 80225c8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80225cc:	f00c f9f8 	bl	802e9c0 <sqrt>
 80225d0:	ec53 2b10 	vmov	r2, r3, d0
 80225d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80225d8:	f7de f800 	bl	80005dc <__aeabi_dmul>
 80225dc:	4602      	mov	r2, r0
 80225de:	460b      	mov	r3, r1
 80225e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80225e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80225e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80225ec:	eeb0 0a47 	vmov.f32	s0, s14
 80225f0:	eef0 0a67 	vmov.f32	s1, s15
 80225f4:	3748      	adds	r7, #72	; 0x48
 80225f6:	46bd      	mov	sp, r7
 80225f8:	bd80      	pop	{r7, pc}
 80225fa:	bf00      	nop
 80225fc:	3ff00000 	.word	0x3ff00000

08022600 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 8022600:	b580      	push	{r7, lr}
 8022602:	b092      	sub	sp, #72	; 0x48
 8022604:	af00      	add	r7, sp, #0
 8022606:	60f8      	str	r0, [r7, #12]
 8022608:	60b9      	str	r1, [r7, #8]
 802260a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 802260c:	f04f 0200 	mov.w	r2, #0
 8022610:	f04f 0300 	mov.w	r3, #0
 8022614:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022618:	68fb      	ldr	r3, [r7, #12]
 802261a:	2b00      	cmp	r3, #0
 802261c:	f340 8090 	ble.w	8022740 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	2b01      	cmp	r3, #1
 8022624:	d10e      	bne.n	8022644 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802262c:	3b01      	subs	r3, #1
 802262e:	00db      	lsls	r3, r3, #3
 8022630:	68ba      	ldr	r2, [r7, #8]
 8022632:	4413      	add	r3, r2
 8022634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022638:	4611      	mov	r1, r2
 802263a:	6439      	str	r1, [r7, #64]	; 0x40
 802263c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022640:	647b      	str	r3, [r7, #68]	; 0x44
 8022642:	e07d      	b.n	8022740 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022644:	f04f 0200 	mov.w	r2, #0
 8022648:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 802264c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022650:	687a      	ldr	r2, [r7, #4]
 8022652:	68fb      	ldr	r3, [r7, #12]
 8022654:	4413      	add	r3, r2
 8022656:	3b01      	subs	r3, #1
 8022658:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802265e:	e05d      	b.n	802271c <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022662:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022666:	3b01      	subs	r3, #1
 8022668:	00db      	lsls	r3, r3, #3
 802266a:	68ba      	ldr	r2, [r7, #8]
 802266c:	4413      	add	r3, r2
 802266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022672:	4611      	mov	r1, r2
 8022674:	6239      	str	r1, [r7, #32]
 8022676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802267a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 802267c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022680:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022684:	f7de fa3a 	bl	8000afc <__aeabi_dcmpgt>
 8022688:	4603      	mov	r3, r0
 802268a:	2b00      	cmp	r3, #0
 802268c:	d029      	beq.n	80226e2 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 802268e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022696:	f7de f8cb 	bl	8000830 <__aeabi_ddiv>
 802269a:	4602      	mov	r2, r0
 802269c:	460b      	mov	r3, r1
 802269e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80226a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80226a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80226aa:	f7dd ff97 	bl	80005dc <__aeabi_dmul>
 80226ae:	4602      	mov	r2, r0
 80226b0:	460b      	mov	r3, r1
 80226b2:	4610      	mov	r0, r2
 80226b4:	4619      	mov	r1, r3
 80226b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80226ba:	f7dd ff8f 	bl	80005dc <__aeabi_dmul>
 80226be:	4602      	mov	r2, r0
 80226c0:	460b      	mov	r3, r1
 80226c2:	4610      	mov	r0, r2
 80226c4:	4619      	mov	r1, r3
 80226c6:	f04f 0200 	mov.w	r2, #0
 80226ca:	4b23      	ldr	r3, [pc, #140]	; (8022758 <xnrm2_Rlk0oxWw+0x158>)
 80226cc:	f7dd fdd0 	bl	8000270 <__adddf3>
 80226d0:	4602      	mov	r2, r0
 80226d2:	460b      	mov	r3, r1
 80226d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 80226d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80226dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80226e0:	e019      	b.n	8022716 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 80226e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80226e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226ea:	f7de f8a1 	bl	8000830 <__aeabi_ddiv>
 80226ee:	4602      	mov	r2, r0
 80226f0:	460b      	mov	r3, r1
 80226f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80226f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80226fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80226fe:	f7dd ff6d 	bl	80005dc <__aeabi_dmul>
 8022702:	4602      	mov	r2, r0
 8022704:	460b      	mov	r3, r1
 8022706:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802270a:	f7dd fdb1 	bl	8000270 <__adddf3>
 802270e:	4602      	mov	r2, r0
 8022710:	460b      	mov	r3, r1
 8022712:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022718:	3301      	adds	r3, #1
 802271a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802271c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022720:	429a      	cmp	r2, r3
 8022722:	dd9d      	ble.n	8022660 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 8022724:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022728:	f00c f94a 	bl	802e9c0 <sqrt>
 802272c:	ec53 2b10 	vmov	r2, r3, d0
 8022730:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022734:	f7dd ff52 	bl	80005dc <__aeabi_dmul>
 8022738:	4602      	mov	r2, r0
 802273a:	460b      	mov	r3, r1
 802273c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022744:	ec43 2b17 	vmov	d7, r2, r3
}
 8022748:	eeb0 0a47 	vmov.f32	s0, s14
 802274c:	eef0 0a67 	vmov.f32	s1, s15
 8022750:	3748      	adds	r7, #72	; 0x48
 8022752:	46bd      	mov	sp, r7
 8022754:	bd80      	pop	{r7, pc}
 8022756:	bf00      	nop
 8022758:	3ff00000 	.word	0x3ff00000

0802275c <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 802275c:	b580      	push	{r7, lr}
 802275e:	b092      	sub	sp, #72	; 0x48
 8022760:	af00      	add	r7, sp, #0
 8022762:	60f8      	str	r0, [r7, #12]
 8022764:	60b9      	str	r1, [r7, #8]
 8022766:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022768:	f04f 0200 	mov.w	r2, #0
 802276c:	f04f 0300 	mov.w	r3, #0
 8022770:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022774:	68fb      	ldr	r3, [r7, #12]
 8022776:	2b00      	cmp	r3, #0
 8022778:	f340 8090 	ble.w	802289c <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 802277c:	68fb      	ldr	r3, [r7, #12]
 802277e:	2b01      	cmp	r3, #1
 8022780:	d10e      	bne.n	80227a0 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022788:	3b01      	subs	r3, #1
 802278a:	00db      	lsls	r3, r3, #3
 802278c:	68ba      	ldr	r2, [r7, #8]
 802278e:	4413      	add	r3, r2
 8022790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022794:	4611      	mov	r1, r2
 8022796:	6439      	str	r1, [r7, #64]	; 0x40
 8022798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802279c:	647b      	str	r3, [r7, #68]	; 0x44
 802279e:	e07d      	b.n	802289c <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80227a0:	f04f 0200 	mov.w	r2, #0
 80227a4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80227a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80227ac:	687a      	ldr	r2, [r7, #4]
 80227ae:	68fb      	ldr	r3, [r7, #12]
 80227b0:	4413      	add	r3, r2
 80227b2:	3b01      	subs	r3, #1
 80227b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80227ba:	e05d      	b.n	8022878 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80227bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80227be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80227c2:	3b01      	subs	r3, #1
 80227c4:	00db      	lsls	r3, r3, #3
 80227c6:	68ba      	ldr	r2, [r7, #8]
 80227c8:	4413      	add	r3, r2
 80227ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ce:	4611      	mov	r1, r2
 80227d0:	6239      	str	r1, [r7, #32]
 80227d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80227d6:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80227d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80227dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80227e0:	f7de f98c 	bl	8000afc <__aeabi_dcmpgt>
 80227e4:	4603      	mov	r3, r0
 80227e6:	2b00      	cmp	r3, #0
 80227e8:	d029      	beq.n	802283e <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 80227ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80227ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80227f2:	f7de f81d 	bl	8000830 <__aeabi_ddiv>
 80227f6:	4602      	mov	r2, r0
 80227f8:	460b      	mov	r3, r1
 80227fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80227fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022802:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022806:	f7dd fee9 	bl	80005dc <__aeabi_dmul>
 802280a:	4602      	mov	r2, r0
 802280c:	460b      	mov	r3, r1
 802280e:	4610      	mov	r0, r2
 8022810:	4619      	mov	r1, r3
 8022812:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022816:	f7dd fee1 	bl	80005dc <__aeabi_dmul>
 802281a:	4602      	mov	r2, r0
 802281c:	460b      	mov	r3, r1
 802281e:	4610      	mov	r0, r2
 8022820:	4619      	mov	r1, r3
 8022822:	f04f 0200 	mov.w	r2, #0
 8022826:	4b23      	ldr	r3, [pc, #140]	; (80228b4 <xnrm2_nLdASVZH+0x158>)
 8022828:	f7dd fd22 	bl	8000270 <__adddf3>
 802282c:	4602      	mov	r2, r0
 802282e:	460b      	mov	r3, r1
 8022830:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022838:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 802283c:	e019      	b.n	8022872 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 802283e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022842:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022846:	f7dd fff3 	bl	8000830 <__aeabi_ddiv>
 802284a:	4602      	mov	r2, r0
 802284c:	460b      	mov	r3, r1
 802284e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022856:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802285a:	f7dd febf 	bl	80005dc <__aeabi_dmul>
 802285e:	4602      	mov	r2, r0
 8022860:	460b      	mov	r3, r1
 8022862:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022866:	f7dd fd03 	bl	8000270 <__adddf3>
 802286a:	4602      	mov	r2, r0
 802286c:	460b      	mov	r3, r1
 802286e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022874:	3301      	adds	r3, #1
 8022876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802287c:	429a      	cmp	r2, r3
 802287e:	dd9d      	ble.n	80227bc <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 8022880:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022884:	f00c f89c 	bl	802e9c0 <sqrt>
 8022888:	ec53 2b10 	vmov	r2, r3, d0
 802288c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022890:	f7dd fea4 	bl	80005dc <__aeabi_dmul>
 8022894:	4602      	mov	r2, r0
 8022896:	460b      	mov	r3, r1
 8022898:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 802289c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80228a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80228a4:	eeb0 0a47 	vmov.f32	s0, s14
 80228a8:	eef0 0a67 	vmov.f32	s1, s15
 80228ac:	3748      	adds	r7, #72	; 0x48
 80228ae:	46bd      	mov	sp, r7
 80228b0:	bd80      	pop	{r7, pc}
 80228b2:	bf00      	nop
 80228b4:	3ff00000 	.word	0x3ff00000

080228b8 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 80228b8:	b580      	push	{r7, lr}
 80228ba:	b092      	sub	sp, #72	; 0x48
 80228bc:	af00      	add	r7, sp, #0
 80228be:	60f8      	str	r0, [r7, #12]
 80228c0:	60b9      	str	r1, [r7, #8]
 80228c2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80228c4:	f04f 0200 	mov.w	r2, #0
 80228c8:	f04f 0300 	mov.w	r3, #0
 80228cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	f340 8090 	ble.w	80229f8 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	2b01      	cmp	r3, #1
 80228dc:	d10e      	bne.n	80228fc <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80228e4:	3b01      	subs	r3, #1
 80228e6:	00db      	lsls	r3, r3, #3
 80228e8:	68ba      	ldr	r2, [r7, #8]
 80228ea:	4413      	add	r3, r2
 80228ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228f0:	4611      	mov	r1, r2
 80228f2:	6439      	str	r1, [r7, #64]	; 0x40
 80228f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80228f8:	647b      	str	r3, [r7, #68]	; 0x44
 80228fa:	e07d      	b.n	80229f8 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80228fc:	f04f 0200 	mov.w	r2, #0
 8022900:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022904:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022908:	687a      	ldr	r2, [r7, #4]
 802290a:	68fb      	ldr	r3, [r7, #12]
 802290c:	4413      	add	r3, r2
 802290e:	3b01      	subs	r3, #1
 8022910:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022916:	e05d      	b.n	80229d4 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802291a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802291e:	3b01      	subs	r3, #1
 8022920:	00db      	lsls	r3, r3, #3
 8022922:	68ba      	ldr	r2, [r7, #8]
 8022924:	4413      	add	r3, r2
 8022926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802292a:	4611      	mov	r1, r2
 802292c:	6239      	str	r1, [r7, #32]
 802292e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022932:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022934:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022938:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802293c:	f7de f8de 	bl	8000afc <__aeabi_dcmpgt>
 8022940:	4603      	mov	r3, r0
 8022942:	2b00      	cmp	r3, #0
 8022944:	d029      	beq.n	802299a <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 8022946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802294a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802294e:	f7dd ff6f 	bl	8000830 <__aeabi_ddiv>
 8022952:	4602      	mov	r2, r0
 8022954:	460b      	mov	r3, r1
 8022956:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 802295a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802295e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022962:	f7dd fe3b 	bl	80005dc <__aeabi_dmul>
 8022966:	4602      	mov	r2, r0
 8022968:	460b      	mov	r3, r1
 802296a:	4610      	mov	r0, r2
 802296c:	4619      	mov	r1, r3
 802296e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022972:	f7dd fe33 	bl	80005dc <__aeabi_dmul>
 8022976:	4602      	mov	r2, r0
 8022978:	460b      	mov	r3, r1
 802297a:	4610      	mov	r0, r2
 802297c:	4619      	mov	r1, r3
 802297e:	f04f 0200 	mov.w	r2, #0
 8022982:	4b23      	ldr	r3, [pc, #140]	; (8022a10 <xnrm2_xDOlDEtw+0x158>)
 8022984:	f7dd fc74 	bl	8000270 <__adddf3>
 8022988:	4602      	mov	r2, r0
 802298a:	460b      	mov	r3, r1
 802298c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022990:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022994:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022998:	e019      	b.n	80229ce <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 802299a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802299e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229a2:	f7dd ff45 	bl	8000830 <__aeabi_ddiv>
 80229a6:	4602      	mov	r2, r0
 80229a8:	460b      	mov	r3, r1
 80229aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80229ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80229b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80229b6:	f7dd fe11 	bl	80005dc <__aeabi_dmul>
 80229ba:	4602      	mov	r2, r0
 80229bc:	460b      	mov	r3, r1
 80229be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80229c2:	f7dd fc55 	bl	8000270 <__adddf3>
 80229c6:	4602      	mov	r2, r0
 80229c8:	460b      	mov	r3, r1
 80229ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80229ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80229d0:	3301      	adds	r3, #1
 80229d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80229d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80229d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229d8:	429a      	cmp	r2, r3
 80229da:	dd9d      	ble.n	8022918 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 80229dc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80229e0:	f00b ffee 	bl	802e9c0 <sqrt>
 80229e4:	ec53 2b10 	vmov	r2, r3, d0
 80229e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80229ec:	f7dd fdf6 	bl	80005dc <__aeabi_dmul>
 80229f0:	4602      	mov	r2, r0
 80229f2:	460b      	mov	r3, r1
 80229f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80229f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80229fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8022a00:	eeb0 0a47 	vmov.f32	s0, s14
 8022a04:	eef0 0a67 	vmov.f32	s1, s15
 8022a08:	3748      	adds	r7, #72	; 0x48
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	bd80      	pop	{r7, pc}
 8022a0e:	bf00      	nop
 8022a10:	3ff00000 	.word	0x3ff00000

08022a14 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 8022a14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8022a18:	b08c      	sub	sp, #48	; 0x30
 8022a1a:	af00      	add	r7, sp, #0
 8022a1c:	61f8      	str	r0, [r7, #28]
 8022a1e:	61b9      	str	r1, [r7, #24]
 8022a20:	617a      	str	r2, [r7, #20]
 8022a22:	ed87 0b02 	vstr	d0, [r7, #8]
 8022a26:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 8022a2a:	697b      	ldr	r3, [r7, #20]
 8022a2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022a30:	3b01      	subs	r3, #1
 8022a32:	00db      	lsls	r3, r3, #3
 8022a34:	69fa      	ldr	r2, [r7, #28]
 8022a36:	4413      	add	r3, r2
 8022a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8022a40:	69bb      	ldr	r3, [r7, #24]
 8022a42:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022a46:	3b01      	subs	r3, #1
 8022a48:	00db      	lsls	r3, r3, #3
 8022a4a:	69fa      	ldr	r2, [r7, #28]
 8022a4c:	4413      	add	r3, r2
 8022a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a52:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 8022a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022a5e:	f7dd fdbd 	bl	80005dc <__aeabi_dmul>
 8022a62:	4602      	mov	r2, r0
 8022a64:	460b      	mov	r3, r1
 8022a66:	4690      	mov	r8, r2
 8022a68:	4699      	mov	r9, r3
 8022a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022a6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022a72:	f7dd fdb3 	bl	80005dc <__aeabi_dmul>
 8022a76:	4602      	mov	r2, r0
 8022a78:	460b      	mov	r3, r1
 8022a7a:	4610      	mov	r0, r2
 8022a7c:	4619      	mov	r1, r3
 8022a7e:	697b      	ldr	r3, [r7, #20]
 8022a80:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022a84:	3b01      	subs	r3, #1
 8022a86:	00db      	lsls	r3, r3, #3
 8022a88:	69fa      	ldr	r2, [r7, #28]
 8022a8a:	18d4      	adds	r4, r2, r3
 8022a8c:	4602      	mov	r2, r0
 8022a8e:	460b      	mov	r3, r1
 8022a90:	4640      	mov	r0, r8
 8022a92:	4649      	mov	r1, r9
 8022a94:	f7dd fbea 	bl	800026c <__aeabi_dsub>
 8022a98:	4602      	mov	r2, r0
 8022a9a:	460b      	mov	r3, r1
 8022a9c:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 8022aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022aa8:	f7dd fd98 	bl	80005dc <__aeabi_dmul>
 8022aac:	4602      	mov	r2, r0
 8022aae:	460b      	mov	r3, r1
 8022ab0:	4690      	mov	r8, r2
 8022ab2:	4699      	mov	r9, r3
 8022ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022ab8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022abc:	f7dd fd8e 	bl	80005dc <__aeabi_dmul>
 8022ac0:	4602      	mov	r2, r0
 8022ac2:	460b      	mov	r3, r1
 8022ac4:	4610      	mov	r0, r2
 8022ac6:	4619      	mov	r1, r3
 8022ac8:	69bb      	ldr	r3, [r7, #24]
 8022aca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ace:	3b01      	subs	r3, #1
 8022ad0:	00db      	lsls	r3, r3, #3
 8022ad2:	69fa      	ldr	r2, [r7, #28]
 8022ad4:	18d4      	adds	r4, r2, r3
 8022ad6:	4602      	mov	r2, r0
 8022ad8:	460b      	mov	r3, r1
 8022ada:	4640      	mov	r0, r8
 8022adc:	4649      	mov	r1, r9
 8022ade:	f7dd fbc7 	bl	8000270 <__adddf3>
 8022ae2:	4602      	mov	r2, r0
 8022ae4:	460b      	mov	r3, r1
 8022ae6:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 8022aea:	69bb      	ldr	r3, [r7, #24]
 8022aec:	00db      	lsls	r3, r3, #3
 8022aee:	69fa      	ldr	r2, [r7, #28]
 8022af0:	4413      	add	r3, r2
 8022af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022afa:	f7dd fd6f 	bl	80005dc <__aeabi_dmul>
 8022afe:	4602      	mov	r2, r0
 8022b00:	460b      	mov	r3, r1
 8022b02:	4614      	mov	r4, r2
 8022b04:	461d      	mov	r5, r3
 8022b06:	697b      	ldr	r3, [r7, #20]
 8022b08:	00db      	lsls	r3, r3, #3
 8022b0a:	69fa      	ldr	r2, [r7, #28]
 8022b0c:	4413      	add	r3, r2
 8022b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b16:	f7dd fd61 	bl	80005dc <__aeabi_dmul>
 8022b1a:	4602      	mov	r2, r0
 8022b1c:	460b      	mov	r3, r1
 8022b1e:	4620      	mov	r0, r4
 8022b20:	4629      	mov	r1, r5
 8022b22:	f7dd fba5 	bl	8000270 <__adddf3>
 8022b26:	4602      	mov	r2, r0
 8022b28:	460b      	mov	r3, r1
 8022b2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 8022b2e:	697b      	ldr	r3, [r7, #20]
 8022b30:	00db      	lsls	r3, r3, #3
 8022b32:	69fa      	ldr	r2, [r7, #28]
 8022b34:	4413      	add	r3, r2
 8022b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022b3e:	f7dd fd4d 	bl	80005dc <__aeabi_dmul>
 8022b42:	4602      	mov	r2, r0
 8022b44:	460b      	mov	r3, r1
 8022b46:	4690      	mov	r8, r2
 8022b48:	4699      	mov	r9, r3
 8022b4a:	69bb      	ldr	r3, [r7, #24]
 8022b4c:	00db      	lsls	r3, r3, #3
 8022b4e:	69fa      	ldr	r2, [r7, #28]
 8022b50:	4413      	add	r3, r2
 8022b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b5a:	f7dd fd3f 	bl	80005dc <__aeabi_dmul>
 8022b5e:	4602      	mov	r2, r0
 8022b60:	460b      	mov	r3, r1
 8022b62:	4610      	mov	r0, r2
 8022b64:	4619      	mov	r1, r3
 8022b66:	697b      	ldr	r3, [r7, #20]
 8022b68:	00db      	lsls	r3, r3, #3
 8022b6a:	69fa      	ldr	r2, [r7, #28]
 8022b6c:	18d4      	adds	r4, r2, r3
 8022b6e:	4602      	mov	r2, r0
 8022b70:	460b      	mov	r3, r1
 8022b72:	4640      	mov	r0, r8
 8022b74:	4649      	mov	r1, r9
 8022b76:	f7dd fb79 	bl	800026c <__aeabi_dsub>
 8022b7a:	4602      	mov	r2, r0
 8022b7c:	460b      	mov	r3, r1
 8022b7e:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 8022b82:	69bb      	ldr	r3, [r7, #24]
 8022b84:	00db      	lsls	r3, r3, #3
 8022b86:	69fa      	ldr	r2, [r7, #28]
 8022b88:	18d1      	adds	r1, r2, r3
 8022b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022b8e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 8022b92:	697b      	ldr	r3, [r7, #20]
 8022b94:	3301      	adds	r3, #1
 8022b96:	00db      	lsls	r3, r3, #3
 8022b98:	69fa      	ldr	r2, [r7, #28]
 8022b9a:	4413      	add	r3, r2
 8022b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ba0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 8022ba4:	69bb      	ldr	r3, [r7, #24]
 8022ba6:	3301      	adds	r3, #1
 8022ba8:	00db      	lsls	r3, r3, #3
 8022baa:	69fa      	ldr	r2, [r7, #28]
 8022bac:	4413      	add	r3, r2
 8022bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 8022bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022bbe:	f7dd fd0d 	bl	80005dc <__aeabi_dmul>
 8022bc2:	4602      	mov	r2, r0
 8022bc4:	460b      	mov	r3, r1
 8022bc6:	4690      	mov	r8, r2
 8022bc8:	4699      	mov	r9, r3
 8022bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022bce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022bd2:	f7dd fd03 	bl	80005dc <__aeabi_dmul>
 8022bd6:	4602      	mov	r2, r0
 8022bd8:	460b      	mov	r3, r1
 8022bda:	4610      	mov	r0, r2
 8022bdc:	4619      	mov	r1, r3
 8022bde:	697b      	ldr	r3, [r7, #20]
 8022be0:	3301      	adds	r3, #1
 8022be2:	00db      	lsls	r3, r3, #3
 8022be4:	69fa      	ldr	r2, [r7, #28]
 8022be6:	18d4      	adds	r4, r2, r3
 8022be8:	4602      	mov	r2, r0
 8022bea:	460b      	mov	r3, r1
 8022bec:	4640      	mov	r0, r8
 8022bee:	4649      	mov	r1, r9
 8022bf0:	f7dd fb3c 	bl	800026c <__aeabi_dsub>
 8022bf4:	4602      	mov	r2, r0
 8022bf6:	460b      	mov	r3, r1
 8022bf8:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 8022bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022c00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022c04:	f7dd fcea 	bl	80005dc <__aeabi_dmul>
 8022c08:	4602      	mov	r2, r0
 8022c0a:	460b      	mov	r3, r1
 8022c0c:	4690      	mov	r8, r2
 8022c0e:	4699      	mov	r9, r3
 8022c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022c18:	f7dd fce0 	bl	80005dc <__aeabi_dmul>
 8022c1c:	4602      	mov	r2, r0
 8022c1e:	460b      	mov	r3, r1
 8022c20:	4610      	mov	r0, r2
 8022c22:	4619      	mov	r1, r3
 8022c24:	69bb      	ldr	r3, [r7, #24]
 8022c26:	3301      	adds	r3, #1
 8022c28:	00db      	lsls	r3, r3, #3
 8022c2a:	69fa      	ldr	r2, [r7, #28]
 8022c2c:	18d4      	adds	r4, r2, r3
 8022c2e:	4602      	mov	r2, r0
 8022c30:	460b      	mov	r3, r1
 8022c32:	4640      	mov	r0, r8
 8022c34:	4649      	mov	r1, r9
 8022c36:	f7dd fb1b 	bl	8000270 <__adddf3>
 8022c3a:	4602      	mov	r2, r0
 8022c3c:	460b      	mov	r3, r1
 8022c3e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8022c42:	bf00      	nop
 8022c44:	3730      	adds	r7, #48	; 0x30
 8022c46:	46bd      	mov	sp, r7
 8022c48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08022c4c <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 8022c4c:	b5b0      	push	{r4, r5, r7, lr}
 8022c4e:	b090      	sub	sp, #64	; 0x40
 8022c50:	af00      	add	r7, sp, #0
 8022c52:	60f8      	str	r0, [r7, #12]
 8022c54:	60b9      	str	r1, [r7, #8]
 8022c56:	607a      	str	r2, [r7, #4]
 8022c58:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 8022c5a:	68bb      	ldr	r3, [r7, #8]
 8022c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 8022c64:	68fb      	ldr	r3, [r7, #12]
 8022c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c6a:	4611      	mov	r1, r2
 8022c6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8022c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 8022c74:	68bb      	ldr	r3, [r7, #8]
 8022c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c7a:	4611      	mov	r1, r2
 8022c7c:	6239      	str	r1, [r7, #32]
 8022c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022c82:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 8022c84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022c88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022c8c:	f7dd ff36 	bl	8000afc <__aeabi_dcmpgt>
 8022c90:	4603      	mov	r3, r0
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	d004      	beq.n	8022ca0 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 8022c96:	68fb      	ldr	r3, [r7, #12]
 8022c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 8022ca0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022ca4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022ca8:	f7dd fae2 	bl	8000270 <__adddf3>
 8022cac:	4602      	mov	r2, r0
 8022cae:	460b      	mov	r3, r1
 8022cb0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 8022cb4:	f04f 0200 	mov.w	r2, #0
 8022cb8:	f04f 0300 	mov.w	r3, #0
 8022cbc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022cc0:	f7dd fef4 	bl	8000aac <__aeabi_dcmpeq>
 8022cc4:	4603      	mov	r3, r0
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d01b      	beq.n	8022d02 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 8022cca:	6839      	ldr	r1, [r7, #0]
 8022ccc:	f04f 0200 	mov.w	r2, #0
 8022cd0:	f04f 0300 	mov.w	r3, #0
 8022cd4:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 8022cd8:	6879      	ldr	r1, [r7, #4]
 8022cda:	f04f 0200 	mov.w	r2, #0
 8022cde:	4b59      	ldr	r3, [pc, #356]	; (8022e44 <xrotg_XzIjz1eG+0x1f8>)
 8022ce0:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 8022ce4:	68f9      	ldr	r1, [r7, #12]
 8022ce6:	f04f 0200 	mov.w	r2, #0
 8022cea:	f04f 0300 	mov.w	r3, #0
 8022cee:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 8022cf2:	68b9      	ldr	r1, [r7, #8]
 8022cf4:	f04f 0200 	mov.w	r2, #0
 8022cf8:	f04f 0300 	mov.w	r3, #0
 8022cfc:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 8022d00:	e09b      	b.n	8022e3a <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 8022d02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022d0a:	f7dd fd91 	bl	8000830 <__aeabi_ddiv>
 8022d0e:	4602      	mov	r2, r0
 8022d10:	460b      	mov	r3, r1
 8022d12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8022d16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022d1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022d1e:	f7dd fd87 	bl	8000830 <__aeabi_ddiv>
 8022d22:	4602      	mov	r2, r0
 8022d24:	460b      	mov	r3, r1
 8022d26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 8022d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022d2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022d32:	f7dd fc53 	bl	80005dc <__aeabi_dmul>
 8022d36:	4602      	mov	r2, r0
 8022d38:	460b      	mov	r3, r1
 8022d3a:	4614      	mov	r4, r2
 8022d3c:	461d      	mov	r5, r3
 8022d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022d42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022d46:	f7dd fc49 	bl	80005dc <__aeabi_dmul>
 8022d4a:	4602      	mov	r2, r0
 8022d4c:	460b      	mov	r3, r1
 8022d4e:	4620      	mov	r0, r4
 8022d50:	4629      	mov	r1, r5
 8022d52:	f7dd fa8d 	bl	8000270 <__adddf3>
 8022d56:	4602      	mov	r2, r0
 8022d58:	460b      	mov	r3, r1
 8022d5a:	ec43 2b17 	vmov	d7, r2, r3
 8022d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8022d62:	eef0 0a67 	vmov.f32	s1, s15
 8022d66:	f00b fe2b 	bl	802e9c0 <sqrt>
 8022d6a:	ec53 2b10 	vmov	r2, r3, d0
 8022d6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022d72:	f7dd fc33 	bl	80005dc <__aeabi_dmul>
 8022d76:	4602      	mov	r2, r0
 8022d78:	460b      	mov	r3, r1
 8022d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 8022d7e:	f04f 0200 	mov.w	r2, #0
 8022d82:	f04f 0300 	mov.w	r3, #0
 8022d86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8022d8a:	f7dd fe99 	bl	8000ac0 <__aeabi_dcmplt>
 8022d8e:	4603      	mov	r3, r0
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	d005      	beq.n	8022da0 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 8022d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d96:	633b      	str	r3, [r7, #48]	; 0x30
 8022d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022d9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8022d9e:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 8022da0:	68fb      	ldr	r3, [r7, #12]
 8022da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022da6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022daa:	f7dd fd41 	bl	8000830 <__aeabi_ddiv>
 8022dae:	4602      	mov	r2, r0
 8022db0:	460b      	mov	r3, r1
 8022db2:	6879      	ldr	r1, [r7, #4]
 8022db4:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8022db8:	68bb      	ldr	r3, [r7, #8]
 8022dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022dbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022dc2:	f7dd fd35 	bl	8000830 <__aeabi_ddiv>
 8022dc6:	4602      	mov	r2, r0
 8022dc8:	460b      	mov	r3, r1
 8022dca:	6839      	ldr	r1, [r7, #0]
 8022dcc:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 8022dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022dd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022dd8:	f7dd fe90 	bl	8000afc <__aeabi_dcmpgt>
 8022ddc:	4603      	mov	r3, r0
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d006      	beq.n	8022df0 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 8022de2:	683b      	ldr	r3, [r7, #0]
 8022de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022de8:	68b9      	ldr	r1, [r7, #8]
 8022dea:	e9c1 2300 	strd	r2, r3, [r1]
 8022dee:	e01f      	b.n	8022e30 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022df6:	f04f 0200 	mov.w	r2, #0
 8022dfa:	f04f 0300 	mov.w	r3, #0
 8022dfe:	f7dd fe55 	bl	8000aac <__aeabi_dcmpeq>
 8022e02:	4603      	mov	r3, r0
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d10d      	bne.n	8022e24 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e0e:	f04f 0000 	mov.w	r0, #0
 8022e12:	490c      	ldr	r1, [pc, #48]	; (8022e44 <xrotg_XzIjz1eG+0x1f8>)
 8022e14:	f7dd fd0c 	bl	8000830 <__aeabi_ddiv>
 8022e18:	4602      	mov	r2, r0
 8022e1a:	460b      	mov	r3, r1
 8022e1c:	68b9      	ldr	r1, [r7, #8]
 8022e1e:	e9c1 2300 	strd	r2, r3, [r1]
 8022e22:	e005      	b.n	8022e30 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 8022e24:	68b9      	ldr	r1, [r7, #8]
 8022e26:	f04f 0200 	mov.w	r2, #0
 8022e2a:	4b06      	ldr	r3, [pc, #24]	; (8022e44 <xrotg_XzIjz1eG+0x1f8>)
 8022e2c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8022e30:	68f9      	ldr	r1, [r7, #12]
 8022e32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022e36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8022e3a:	bf00      	nop
 8022e3c:	3740      	adds	r7, #64	; 0x40
 8022e3e:	46bd      	mov	sp, r7
 8022e40:	bdb0      	pop	{r4, r5, r7, pc}
 8022e42:	bf00      	nop
 8022e44:	3ff00000 	.word	0x3ff00000

08022e48 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8022e48:	b590      	push	{r4, r7, lr}
 8022e4a:	b089      	sub	sp, #36	; 0x24
 8022e4c:	af00      	add	r7, sp, #0
 8022e4e:	6178      	str	r0, [r7, #20]
 8022e50:	ed87 0b02 	vstr	d0, [r7, #8]
 8022e54:	6139      	str	r1, [r7, #16]
 8022e56:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8022e58:	687a      	ldr	r2, [r7, #4]
 8022e5a:	697b      	ldr	r3, [r7, #20]
 8022e5c:	4413      	add	r3, r2
 8022e5e:	3b01      	subs	r3, #1
 8022e60:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	61fb      	str	r3, [r7, #28]
 8022e66:	e01a      	b.n	8022e9e <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 8022e68:	69fb      	ldr	r3, [r7, #28]
 8022e6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022e6e:	3b01      	subs	r3, #1
 8022e70:	00db      	lsls	r3, r3, #3
 8022e72:	693a      	ldr	r2, [r7, #16]
 8022e74:	4413      	add	r3, r2
 8022e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e7a:	69fb      	ldr	r3, [r7, #28]
 8022e7c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022e80:	3b01      	subs	r3, #1
 8022e82:	00db      	lsls	r3, r3, #3
 8022e84:	693a      	ldr	r2, [r7, #16]
 8022e86:	18d4      	adds	r4, r2, r3
 8022e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022e8c:	f7dd fba6 	bl	80005dc <__aeabi_dmul>
 8022e90:	4602      	mov	r2, r0
 8022e92:	460b      	mov	r3, r1
 8022e94:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8022e98:	69fb      	ldr	r3, [r7, #28]
 8022e9a:	3301      	adds	r3, #1
 8022e9c:	61fb      	str	r3, [r7, #28]
 8022e9e:	69fa      	ldr	r2, [r7, #28]
 8022ea0:	69bb      	ldr	r3, [r7, #24]
 8022ea2:	429a      	cmp	r2, r3
 8022ea4:	dde0      	ble.n	8022e68 <xscal_59GtRAwv+0x20>
  }
}
 8022ea6:	bf00      	nop
 8022ea8:	bf00      	nop
 8022eaa:	3724      	adds	r7, #36	; 0x24
 8022eac:	46bd      	mov	sp, r7
 8022eae:	bd90      	pop	{r4, r7, pc}

08022eb0 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 8022eb0:	b590      	push	{r4, r7, lr}
 8022eb2:	b089      	sub	sp, #36	; 0x24
 8022eb4:	af00      	add	r7, sp, #0
 8022eb6:	6178      	str	r0, [r7, #20]
 8022eb8:	ed87 0b02 	vstr	d0, [r7, #8]
 8022ebc:	6139      	str	r1, [r7, #16]
 8022ebe:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8022ec0:	687a      	ldr	r2, [r7, #4]
 8022ec2:	697b      	ldr	r3, [r7, #20]
 8022ec4:	4413      	add	r3, r2
 8022ec6:	3b01      	subs	r3, #1
 8022ec8:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8022eca:	687b      	ldr	r3, [r7, #4]
 8022ecc:	61fb      	str	r3, [r7, #28]
 8022ece:	e01a      	b.n	8022f06 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 8022ed0:	69fb      	ldr	r3, [r7, #28]
 8022ed2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ed6:	3b01      	subs	r3, #1
 8022ed8:	00db      	lsls	r3, r3, #3
 8022eda:	693a      	ldr	r2, [r7, #16]
 8022edc:	4413      	add	r3, r2
 8022ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022ee2:	69fb      	ldr	r3, [r7, #28]
 8022ee4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ee8:	3b01      	subs	r3, #1
 8022eea:	00db      	lsls	r3, r3, #3
 8022eec:	693a      	ldr	r2, [r7, #16]
 8022eee:	18d4      	adds	r4, r2, r3
 8022ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022ef4:	f7dd fb72 	bl	80005dc <__aeabi_dmul>
 8022ef8:	4602      	mov	r2, r0
 8022efa:	460b      	mov	r3, r1
 8022efc:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8022f00:	69fb      	ldr	r3, [r7, #28]
 8022f02:	3301      	adds	r3, #1
 8022f04:	61fb      	str	r3, [r7, #28]
 8022f06:	69fa      	ldr	r2, [r7, #28]
 8022f08:	69bb      	ldr	r3, [r7, #24]
 8022f0a:	429a      	cmp	r2, r3
 8022f0c:	dde0      	ble.n	8022ed0 <xscal_PLmmUlD2+0x20>
  }
}
 8022f0e:	bf00      	nop
 8022f10:	bf00      	nop
 8022f12:	3724      	adds	r7, #36	; 0x24
 8022f14:	46bd      	mov	sp, r7
 8022f16:	bd90      	pop	{r4, r7, pc}

08022f18 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8022f18:	b590      	push	{r4, r7, lr}
 8022f1a:	b087      	sub	sp, #28
 8022f1c:	af00      	add	r7, sp, #0
 8022f1e:	ed87 0b02 	vstr	d0, [r7, #8]
 8022f22:	6078      	str	r0, [r7, #4]
 8022f24:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 8022f26:	683b      	ldr	r3, [r7, #0]
 8022f28:	617b      	str	r3, [r7, #20]
 8022f2a:	e01a      	b.n	8022f62 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 8022f2c:	697b      	ldr	r3, [r7, #20]
 8022f2e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f32:	3b01      	subs	r3, #1
 8022f34:	00db      	lsls	r3, r3, #3
 8022f36:	687a      	ldr	r2, [r7, #4]
 8022f38:	4413      	add	r3, r2
 8022f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022f3e:	697b      	ldr	r3, [r7, #20]
 8022f40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f44:	3b01      	subs	r3, #1
 8022f46:	00db      	lsls	r3, r3, #3
 8022f48:	687a      	ldr	r2, [r7, #4]
 8022f4a:	18d4      	adds	r4, r2, r3
 8022f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022f50:	f7dd fb44 	bl	80005dc <__aeabi_dmul>
 8022f54:	4602      	mov	r2, r0
 8022f56:	460b      	mov	r3, r1
 8022f58:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 8022f5c:	697b      	ldr	r3, [r7, #20]
 8022f5e:	3301      	adds	r3, #1
 8022f60:	617b      	str	r3, [r7, #20]
 8022f62:	683b      	ldr	r3, [r7, #0]
 8022f64:	3302      	adds	r3, #2
 8022f66:	697a      	ldr	r2, [r7, #20]
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	dddf      	ble.n	8022f2c <xscal_eaAxXsvQ+0x14>
  }
}
 8022f6c:	bf00      	nop
 8022f6e:	bf00      	nop
 8022f70:	371c      	adds	r7, #28
 8022f72:	46bd      	mov	sp, r7
 8022f74:	bd90      	pop	{r4, r7, pc}

08022f76 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 8022f76:	b480      	push	{r7}
 8022f78:	b087      	sub	sp, #28
 8022f7a:	af00      	add	r7, sp, #0
 8022f7c:	60f8      	str	r0, [r7, #12]
 8022f7e:	60b9      	str	r1, [r7, #8]
 8022f80:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 8022f82:	68bb      	ldr	r3, [r7, #8]
 8022f84:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f88:	3b01      	subs	r3, #1
 8022f8a:	00db      	lsls	r3, r3, #3
 8022f8c:	68fa      	ldr	r2, [r7, #12]
 8022f8e:	4413      	add	r3, r2
 8022f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022f9e:	3b01      	subs	r3, #1
 8022fa0:	00db      	lsls	r3, r3, #3
 8022fa2:	68fa      	ldr	r2, [r7, #12]
 8022fa4:	441a      	add	r2, r3
 8022fa6:	68bb      	ldr	r3, [r7, #8]
 8022fa8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022fac:	3b01      	subs	r3, #1
 8022fae:	00db      	lsls	r3, r3, #3
 8022fb0:	68f9      	ldr	r1, [r7, #12]
 8022fb2:	4419      	add	r1, r3
 8022fb4:	e9d2 2300 	ldrd	r2, r3, [r2]
 8022fb8:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022fc2:	3b01      	subs	r3, #1
 8022fc4:	00db      	lsls	r3, r3, #3
 8022fc6:	68fa      	ldr	r2, [r7, #12]
 8022fc8:	18d1      	adds	r1, r2, r3
 8022fca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022fce:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 8022fd2:	68bb      	ldr	r3, [r7, #8]
 8022fd4:	00db      	lsls	r3, r3, #3
 8022fd6:	68fa      	ldr	r2, [r7, #12]
 8022fd8:	4413      	add	r3, r2
 8022fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fde:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	00db      	lsls	r3, r3, #3
 8022fe6:	68fa      	ldr	r2, [r7, #12]
 8022fe8:	4413      	add	r3, r2
 8022fea:	68ba      	ldr	r2, [r7, #8]
 8022fec:	00d2      	lsls	r2, r2, #3
 8022fee:	68f9      	ldr	r1, [r7, #12]
 8022ff0:	4411      	add	r1, r2
 8022ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ff6:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	00db      	lsls	r3, r3, #3
 8022ffe:	68fa      	ldr	r2, [r7, #12]
 8023000:	18d1      	adds	r1, r2, r3
 8023002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023006:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 802300a:	68bb      	ldr	r3, [r7, #8]
 802300c:	3301      	adds	r3, #1
 802300e:	00db      	lsls	r3, r3, #3
 8023010:	68fa      	ldr	r2, [r7, #12]
 8023012:	4413      	add	r3, r2
 8023014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023018:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	3301      	adds	r3, #1
 8023020:	00db      	lsls	r3, r3, #3
 8023022:	68fa      	ldr	r2, [r7, #12]
 8023024:	4413      	add	r3, r2
 8023026:	68ba      	ldr	r2, [r7, #8]
 8023028:	3201      	adds	r2, #1
 802302a:	00d2      	lsls	r2, r2, #3
 802302c:	68f9      	ldr	r1, [r7, #12]
 802302e:	4411      	add	r1, r2
 8023030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023034:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	3301      	adds	r3, #1
 802303c:	00db      	lsls	r3, r3, #3
 802303e:	68fa      	ldr	r2, [r7, #12]
 8023040:	18d1      	adds	r1, r2, r3
 8023042:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023046:	e9c1 2300 	strd	r2, r3, [r1]
}
 802304a:	bf00      	nop
 802304c:	371c      	adds	r7, #28
 802304e:	46bd      	mov	sp, r7
 8023050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023054:	4770      	bx	lr

08023056 <ams_error>:

__weak uint8_t do_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 8023056:	b480      	push	{r7}
 8023058:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 802305a:	bf00      	nop
 802305c:	46bd      	mov	sp, r7
 802305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023062:	4770      	bx	lr

08023064 <ams_precharge_drive_close_air_minus_function>:
static ams_state_t state_r2;
static float timer_r0;
static float timer_r1;
static float timer_r2;

ams_state_t ams_precharge_drive_close_air_minus_function() {
 8023064:	b480      	push	{r7}
 8023066:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8023068:	4b1d      	ldr	r3, [pc, #116]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 802306a:	edd3 7a00 	vldr	s15, [r3]
 802306e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802307a:	d50d      	bpl.n	8023098 <ams_precharge_drive_close_air_minus_function+0x34>
 802307c:	4b19      	ldr	r3, [pc, #100]	; (80230e4 <ams_precharge_drive_close_air_minus_function+0x80>)
 802307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023082:	2b00      	cmp	r3, #0
 8023084:	d008      	beq.n	8023098 <ams_precharge_drive_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 8023086:	4b18      	ldr	r3, [pc, #96]	; (80230e8 <ams_precharge_drive_close_air_minus_function+0x84>)
 8023088:	2201      	movs	r2, #1
 802308a:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 802308c:	4b14      	ldr	r3, [pc, #80]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 802308e:	f04f 0200 	mov.w	r2, #0
 8023092:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 8023094:	2304      	movs	r3, #4
 8023096:	e01e      	b.n	80230d6 <ams_precharge_drive_close_air_minus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8023098:	4b11      	ldr	r3, [pc, #68]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 802309a:	edd3 7a00 	vldr	s15, [r3]
 802309e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80230a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80230a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230aa:	dd08      	ble.n	80230be <ams_precharge_drive_close_air_minus_function+0x5a>
       ams_outputs.error=111;
 80230ac:	4b0e      	ldr	r3, [pc, #56]	; (80230e8 <ams_precharge_drive_close_air_minus_function+0x84>)
 80230ae:	226f      	movs	r2, #111	; 0x6f
 80230b0:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 80230b2:	4b0b      	ldr	r3, [pc, #44]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 80230b4:	f04f 0200 	mov.w	r2, #0
 80230b8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80230ba:	2305      	movs	r3, #5
 80230bc:	e00b      	b.n	80230d6 <ams_precharge_drive_close_air_minus_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 80230be:	4b09      	ldr	r3, [pc, #36]	; (80230e4 <ams_precharge_drive_close_air_minus_function+0x80>)
 80230c0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80230c4:	4b06      	ldr	r3, [pc, #24]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 80230c6:	edd3 7a00 	vldr	s15, [r3]
 80230ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80230ce:	4b04      	ldr	r3, [pc, #16]	; (80230e0 <ams_precharge_drive_close_air_minus_function+0x7c>)
 80230d0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80230d4:	2303      	movs	r3, #3
}
 80230d6:	4618      	mov	r0, r3
 80230d8:	46bd      	mov	sp, r7
 80230da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230de:	4770      	bx	lr
 80230e0:	2000193c 	.word	0x2000193c
 80230e4:	2001b858 	.word	0x2001b858
 80230e8:	2001b8b0 	.word	0x2001b8b0

080230ec <ams_precharge_drive_close_precharge_function>:

ams_state_t ams_precharge_drive_close_precharge_function() {
 80230ec:	b480      	push	{r7}
 80230ee:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 80230f0:	4b1c      	ldr	r3, [pc, #112]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 80230f2:	edd3 7a00 	vldr	s15, [r3]
 80230f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80230fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80230fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023102:	d50a      	bpl.n	802311a <ams_precharge_drive_close_precharge_function+0x2e>
 8023104:	4b18      	ldr	r3, [pc, #96]	; (8023168 <ams_precharge_drive_close_precharge_function+0x7c>)
 8023106:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802310a:	2b00      	cmp	r3, #0
 802310c:	d005      	beq.n	802311a <ams_precharge_drive_close_precharge_function+0x2e>
       timer_r2 = 0;
 802310e:	4b15      	ldr	r3, [pc, #84]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 8023110:	f04f 0200 	mov.w	r2, #0
 8023114:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8023116:	2306      	movs	r3, #6
 8023118:	e01e      	b.n	8023158 <ams_precharge_drive_close_precharge_function+0x6c>
   }

   if((timer_r2 > 2)) {
 802311a:	4b12      	ldr	r3, [pc, #72]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 802311c:	edd3 7a00 	vldr	s15, [r3]
 8023120:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802312c:	dd08      	ble.n	8023140 <ams_precharge_drive_close_precharge_function+0x54>
       ams_outputs.error=112;
 802312e:	4b0f      	ldr	r3, [pc, #60]	; (802316c <ams_precharge_drive_close_precharge_function+0x80>)
 8023130:	2270      	movs	r2, #112	; 0x70
 8023132:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023134:	4b0b      	ldr	r3, [pc, #44]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 8023136:	f04f 0200 	mov.w	r2, #0
 802313a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 802313c:	2305      	movs	r3, #5
 802313e:	e00b      	b.n	8023158 <ams_precharge_drive_close_precharge_function+0x6c>
   }

   timer_r2 += ams_inputs.Ts;
 8023140:	4b09      	ldr	r3, [pc, #36]	; (8023168 <ams_precharge_drive_close_precharge_function+0x7c>)
 8023142:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023146:	4b07      	ldr	r3, [pc, #28]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 8023148:	edd3 7a00 	vldr	s15, [r3]
 802314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023150:	4b04      	ldr	r3, [pc, #16]	; (8023164 <ams_precharge_drive_close_precharge_function+0x78>)
 8023152:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 8023156:	2304      	movs	r3, #4
}
 8023158:	4618      	mov	r0, r3
 802315a:	46bd      	mov	sp, r7
 802315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023160:	4770      	bx	lr
 8023162:	bf00      	nop
 8023164:	2000193c 	.word	0x2000193c
 8023168:	2001b858 	.word	0x2001b858
 802316c:	2001b8b0 	.word	0x2001b8b0

08023170 <ams_precharge_drive_error_function>:

ams_state_t ams_precharge_drive_error_function() {
 8023170:	b480      	push	{r7}
 8023172:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023174:	4b08      	ldr	r3, [pc, #32]	; (8023198 <ams_precharge_drive_error_function+0x28>)
 8023176:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 802317a:	4b08      	ldr	r3, [pc, #32]	; (802319c <ams_precharge_drive_error_function+0x2c>)
 802317c:	edd3 7a00 	vldr	s15, [r3]
 8023180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023184:	4b05      	ldr	r3, [pc, #20]	; (802319c <ams_precharge_drive_error_function+0x2c>)
 8023186:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 802318a:	2305      	movs	r3, #5
}
 802318c:	4618      	mov	r0, r3
 802318e:	46bd      	mov	sp, r7
 8023190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023194:	4770      	bx	lr
 8023196:	bf00      	nop
 8023198:	2001b858 	.word	0x2001b858
 802319c:	2000193c 	.word	0x2000193c

080231a0 <ams_precharge_drive_wait_function>:

ams_state_t ams_precharge_drive_wait_function() {
 80231a0:	b580      	push	{r7, lr}
 80231a2:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 80231a4:	4b2a      	ldr	r3, [pc, #168]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 80231a6:	edd3 7a00 	vldr	s15, [r3]
 80231aa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80231ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80231b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231b6:	dd26      	ble.n	8023206 <ams_precharge_drive_wait_function+0x66>
 80231b8:	4b25      	ldr	r3, [pc, #148]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 80231ba:	edd3 7a00 	vldr	s15, [r3]
 80231be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80231c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80231c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231ca:	d51c      	bpl.n	8023206 <ams_precharge_drive_wait_function+0x66>
 80231cc:	4b21      	ldr	r3, [pc, #132]	; (8023254 <ams_precharge_drive_wait_function+0xb4>)
 80231ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80231d2:	a31d      	add	r3, pc, #116	; (adr r3, 8023248 <ams_precharge_drive_wait_function+0xa8>)
 80231d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d8:	f7dd fa00 	bl	80005dc <__aeabi_dmul>
 80231dc:	4602      	mov	r2, r0
 80231de:	460b      	mov	r3, r1
 80231e0:	4610      	mov	r0, r2
 80231e2:	4619      	mov	r1, r3
 80231e4:	4b1b      	ldr	r3, [pc, #108]	; (8023254 <ams_precharge_drive_wait_function+0xb4>)
 80231e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80231ea:	f7dd fc69 	bl	8000ac0 <__aeabi_dcmplt>
 80231ee:	4603      	mov	r3, r0
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d008      	beq.n	8023206 <ams_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 80231f4:	4b18      	ldr	r3, [pc, #96]	; (8023258 <ams_precharge_drive_wait_function+0xb8>)
 80231f6:	2201      	movs	r2, #1
 80231f8:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 80231fa:	4b15      	ldr	r3, [pc, #84]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 80231fc:	f04f 0200 	mov.w	r2, #0
 8023200:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 8023202:	2307      	movs	r3, #7
 8023204:	e01e      	b.n	8023244 <ams_precharge_drive_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 8023206:	4b12      	ldr	r3, [pc, #72]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 8023208:	edd3 7a00 	vldr	s15, [r3]
 802320c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023218:	dd08      	ble.n	802322c <ams_precharge_drive_wait_function+0x8c>
       ams_outputs.error=113;
 802321a:	4b0f      	ldr	r3, [pc, #60]	; (8023258 <ams_precharge_drive_wait_function+0xb8>)
 802321c:	2271      	movs	r2, #113	; 0x71
 802321e:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023220:	4b0b      	ldr	r3, [pc, #44]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 8023222:	f04f 0200 	mov.w	r2, #0
 8023226:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8023228:	2305      	movs	r3, #5
 802322a:	e00b      	b.n	8023244 <ams_precharge_drive_wait_function+0xa4>
   }

   timer_r2 += ams_inputs.Ts;
 802322c:	4b09      	ldr	r3, [pc, #36]	; (8023254 <ams_precharge_drive_wait_function+0xb4>)
 802322e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023232:	4b07      	ldr	r3, [pc, #28]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 8023234:	edd3 7a00 	vldr	s15, [r3]
 8023238:	ee77 7a27 	vadd.f32	s15, s14, s15
 802323c:	4b04      	ldr	r3, [pc, #16]	; (8023250 <ams_precharge_drive_wait_function+0xb0>)
 802323e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8023242:	2306      	movs	r3, #6
}
 8023244:	4618      	mov	r0, r3
 8023246:	bd80      	pop	{r7, pc}
 8023248:	66666666 	.word	0x66666666
 802324c:	3fee6666 	.word	0x3fee6666
 8023250:	2000193c 	.word	0x2000193c
 8023254:	2001b858 	.word	0x2001b858
 8023258:	2001b8b0 	.word	0x2001b8b0

0802325c <ams_precharge_drive_close_air_plus_function>:

ams_state_t ams_precharge_drive_close_air_plus_function() {
 802325c:	b480      	push	{r7}
 802325e:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8023260:	4b1d      	ldr	r3, [pc, #116]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 8023262:	edd3 7a00 	vldr	s15, [r3]
 8023266:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802326a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023272:	d50c      	bpl.n	802328e <ams_precharge_drive_close_air_plus_function+0x32>
 8023274:	4b19      	ldr	r3, [pc, #100]	; (80232dc <ams_precharge_drive_close_air_plus_function+0x80>)
 8023276:	7c1b      	ldrb	r3, [r3, #16]
 8023278:	2b00      	cmp	r3, #0
 802327a:	d008      	beq.n	802328e <ams_precharge_drive_close_air_plus_function+0x32>
       ams_outputs.close_precharge=0;
 802327c:	4b18      	ldr	r3, [pc, #96]	; (80232e0 <ams_precharge_drive_close_air_plus_function+0x84>)
 802327e:	2200      	movs	r2, #0
 8023280:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8023282:	4b15      	ldr	r3, [pc, #84]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 8023284:	f04f 0200 	mov.w	r2, #0
 8023288:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 802328a:	2308      	movs	r3, #8
 802328c:	e01e      	b.n	80232cc <ams_precharge_drive_close_air_plus_function+0x70>
   }

   if((timer_r2 > 2)) {
 802328e:	4b12      	ldr	r3, [pc, #72]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 8023290:	edd3 7a00 	vldr	s15, [r3]
 8023294:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023298:	eef4 7ac7 	vcmpe.f32	s15, s14
 802329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232a0:	dd08      	ble.n	80232b4 <ams_precharge_drive_close_air_plus_function+0x58>
       ams_outputs.error=114;
 80232a2:	4b0f      	ldr	r3, [pc, #60]	; (80232e0 <ams_precharge_drive_close_air_plus_function+0x84>)
 80232a4:	2272      	movs	r2, #114	; 0x72
 80232a6:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 80232a8:	4b0b      	ldr	r3, [pc, #44]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 80232aa:	f04f 0200 	mov.w	r2, #0
 80232ae:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80232b0:	2305      	movs	r3, #5
 80232b2:	e00b      	b.n	80232cc <ams_precharge_drive_close_air_plus_function+0x70>
   }

   timer_r2 += ams_inputs.Ts;
 80232b4:	4b09      	ldr	r3, [pc, #36]	; (80232dc <ams_precharge_drive_close_air_plus_function+0x80>)
 80232b6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80232ba:	4b07      	ldr	r3, [pc, #28]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 80232bc:	edd3 7a00 	vldr	s15, [r3]
 80232c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80232c4:	4b04      	ldr	r3, [pc, #16]	; (80232d8 <ams_precharge_drive_close_air_plus_function+0x7c>)
 80232c6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80232ca:	2307      	movs	r3, #7
}
 80232cc:	4618      	mov	r0, r3
 80232ce:	46bd      	mov	sp, r7
 80232d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232d4:	4770      	bx	lr
 80232d6:	bf00      	nop
 80232d8:	2000193c 	.word	0x2000193c
 80232dc:	2001b858 	.word	0x2001b858
 80232e0:	2001b8b0 	.word	0x2001b8b0

080232e4 <ams_precharge_drive_open_precharge_function>:

ams_state_t ams_precharge_drive_open_precharge_function() {
 80232e4:	b480      	push	{r7}
 80232e6:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 80232e8:	4b1d      	ldr	r3, [pc, #116]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 80232ea:	edd3 7a00 	vldr	s15, [r3]
 80232ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80232f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80232f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232fa:	dd08      	ble.n	802330e <ams_precharge_drive_open_precharge_function+0x2a>
       ams_outputs.error=115;
 80232fc:	4b19      	ldr	r3, [pc, #100]	; (8023364 <ams_precharge_drive_open_precharge_function+0x80>)
 80232fe:	2273      	movs	r2, #115	; 0x73
 8023300:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023302:	4b17      	ldr	r3, [pc, #92]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 8023304:	f04f 0200 	mov.w	r2, #0
 8023308:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 802330a:	2305      	movs	r3, #5
 802330c:	e023      	b.n	8023356 <ams_precharge_drive_open_precharge_function+0x72>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 802330e:	4b14      	ldr	r3, [pc, #80]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 8023310:	edd3 7a00 	vldr	s15, [r3]
 8023314:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023318:	eef4 7ac7 	vcmpe.f32	s15, s14
 802331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023320:	d50d      	bpl.n	802333e <ams_precharge_drive_open_precharge_function+0x5a>
 8023322:	4b11      	ldr	r3, [pc, #68]	; (8023368 <ams_precharge_drive_open_precharge_function+0x84>)
 8023324:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8023328:	2b00      	cmp	r3, #0
 802332a:	d108      	bne.n	802333e <ams_precharge_drive_open_precharge_function+0x5a>
       ams_outputs.precharge_drive_complete=1;
 802332c:	4b0d      	ldr	r3, [pc, #52]	; (8023364 <ams_precharge_drive_open_precharge_function+0x80>)
 802332e:	2201      	movs	r2, #1
 8023330:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 8023332:	4b0b      	ldr	r3, [pc, #44]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 8023334:	f04f 0200 	mov.w	r2, #0
 8023338:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 802333a:	2309      	movs	r3, #9
 802333c:	e00b      	b.n	8023356 <ams_precharge_drive_open_precharge_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 802333e:	4b0a      	ldr	r3, [pc, #40]	; (8023368 <ams_precharge_drive_open_precharge_function+0x84>)
 8023340:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023344:	4b06      	ldr	r3, [pc, #24]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 8023346:	edd3 7a00 	vldr	s15, [r3]
 802334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802334e:	4b04      	ldr	r3, [pc, #16]	; (8023360 <ams_precharge_drive_open_precharge_function+0x7c>)
 8023350:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8023354:	2308      	movs	r3, #8
}
 8023356:	4618      	mov	r0, r3
 8023358:	46bd      	mov	sp, r7
 802335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802335e:	4770      	bx	lr
 8023360:	2000193c 	.word	0x2000193c
 8023364:	2001b8b0 	.word	0x2001b8b0
 8023368:	2001b858 	.word	0x2001b858

0802336c <ams_precharge_drive_exit_function>:

ams_state_t ams_precharge_drive_exit_function() {
 802336c:	b480      	push	{r7}
 802336e:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023370:	4b08      	ldr	r3, [pc, #32]	; (8023394 <ams_precharge_drive_exit_function+0x28>)
 8023372:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023376:	4b08      	ldr	r3, [pc, #32]	; (8023398 <ams_precharge_drive_exit_function+0x2c>)
 8023378:	edd3 7a00 	vldr	s15, [r3]
 802337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023380:	4b05      	ldr	r3, [pc, #20]	; (8023398 <ams_precharge_drive_exit_function+0x2c>)
 8023382:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 8023386:	2309      	movs	r3, #9
}
 8023388:	4618      	mov	r0, r3
 802338a:	46bd      	mov	sp, r7
 802338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023390:	4770      	bx	lr
 8023392:	bf00      	nop
 8023394:	2001b858 	.word	0x2001b858
 8023398:	2000193c 	.word	0x2000193c

0802339c <ams_precharge_drive_0_function>:

ams_state_t ams_precharge_drive_0_function() {
 802339c:	b480      	push	{r7}
 802339e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 80233a0:	4b04      	ldr	r3, [pc, #16]	; (80233b4 <ams_precharge_drive_0_function+0x18>)
 80233a2:	f04f 0200 	mov.w	r2, #0
 80233a6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
 80233a8:	230b      	movs	r3, #11
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_0;
}
 80233aa:	4618      	mov	r0, r3
 80233ac:	46bd      	mov	sp, r7
 80233ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233b2:	4770      	bx	lr
 80233b4:	2000193c 	.word	0x2000193c

080233b8 <ams_precharge_drive_entry_function>:

ams_state_t ams_precharge_drive_entry_function() {
 80233b8:	b480      	push	{r7}
 80233ba:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 80233bc:	4b06      	ldr	r3, [pc, #24]	; (80233d8 <ams_precharge_drive_entry_function+0x20>)
 80233be:	2201      	movs	r2, #1
 80233c0:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 80233c2:	4b06      	ldr	r3, [pc, #24]	; (80233dc <ams_precharge_drive_entry_function+0x24>)
 80233c4:	f04f 0200 	mov.w	r2, #0
 80233c8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80233ca:	2303      	movs	r3, #3
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
}
 80233cc:	4618      	mov	r0, r3
 80233ce:	46bd      	mov	sp, r7
 80233d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233d4:	4770      	bx	lr
 80233d6:	bf00      	nop
 80233d8:	2001b8b0 	.word	0x2001b8b0
 80233dc:	2000193c 	.word	0x2000193c

080233e0 <ams_precharge_drive_function>:

ams_state_t ams_precharge_drive_function() {
 80233e0:	b5b0      	push	{r4, r5, r7, lr}
 80233e2:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 80233e4:	4b56      	ldr	r3, [pc, #344]	; (8023540 <ams_precharge_drive_function+0x160>)
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	4618      	mov	r0, r3
 80233ea:	f7dd f89f 	bl	800052c <__aeabi_f2d>
 80233ee:	4604      	mov	r4, r0
 80233f0:	460d      	mov	r5, r1
 80233f2:	4b54      	ldr	r3, [pc, #336]	; (8023544 <ams_precharge_drive_function+0x164>)
 80233f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80233f6:	4618      	mov	r0, r3
 80233f8:	f7dd f898 	bl	800052c <__aeabi_f2d>
 80233fc:	a34e      	add	r3, pc, #312	; (adr r3, 8023538 <ams_precharge_drive_function+0x158>)
 80233fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023402:	f7dd f8eb 	bl	80005dc <__aeabi_dmul>
 8023406:	4602      	mov	r2, r0
 8023408:	460b      	mov	r3, r1
 802340a:	4620      	mov	r0, r4
 802340c:	4629      	mov	r1, r5
 802340e:	f7dd fb57 	bl	8000ac0 <__aeabi_dcmplt>
 8023412:	4603      	mov	r3, r0
 8023414:	2b00      	cmp	r3, #0
 8023416:	d002      	beq.n	802341e <ams_precharge_drive_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_DRIVE_0;
 8023418:	4b4b      	ldr	r3, [pc, #300]	; (8023548 <ams_precharge_drive_function+0x168>)
 802341a:	220a      	movs	r2, #10
 802341c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 802341e:	4b4a      	ldr	r3, [pc, #296]	; (8023548 <ams_precharge_drive_function+0x168>)
 8023420:	781b      	ldrb	r3, [r3, #0]
 8023422:	3b03      	subs	r3, #3
 8023424:	2b08      	cmp	r3, #8
 8023426:	d854      	bhi.n	80234d2 <ams_precharge_drive_function+0xf2>
 8023428:	a201      	add	r2, pc, #4	; (adr r2, 8023430 <ams_precharge_drive_function+0x50>)
 802342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802342e:	bf00      	nop
 8023430:	08023455 	.word	0x08023455
 8023434:	08023463 	.word	0x08023463
 8023438:	08023471 	.word	0x08023471
 802343c:	0802347f 	.word	0x0802347f
 8023440:	0802348d 	.word	0x0802348d
 8023444:	0802349b 	.word	0x0802349b
 8023448:	080234a9 	.word	0x080234a9
 802344c:	080234b7 	.word	0x080234b7
 8023450:	080234c5 	.word	0x080234c5
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_drive_close_air_minus_function();
 8023454:	f7ff fe06 	bl	8023064 <ams_precharge_drive_close_air_minus_function>
 8023458:	4603      	mov	r3, r0
 802345a:	461a      	mov	r2, r3
 802345c:	4b3a      	ldr	r3, [pc, #232]	; (8023548 <ams_precharge_drive_function+0x168>)
 802345e:	701a      	strb	r2, [r3, #0]
           break;
 8023460:	e03a      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_drive_close_precharge_function();
 8023462:	f7ff fe43 	bl	80230ec <ams_precharge_drive_close_precharge_function>
 8023466:	4603      	mov	r3, r0
 8023468:	461a      	mov	r2, r3
 802346a:	4b37      	ldr	r3, [pc, #220]	; (8023548 <ams_precharge_drive_function+0x168>)
 802346c:	701a      	strb	r2, [r3, #0]
           break;
 802346e:	e033      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ERROR:
           state_r2 = ams_precharge_drive_error_function();
 8023470:	f7ff fe7e 	bl	8023170 <ams_precharge_drive_error_function>
 8023474:	4603      	mov	r3, r0
 8023476:	461a      	mov	r2, r3
 8023478:	4b33      	ldr	r3, [pc, #204]	; (8023548 <ams_precharge_drive_function+0x168>)
 802347a:	701a      	strb	r2, [r3, #0]
           break;
 802347c:	e02c      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_WAIT:
           state_r2 = ams_precharge_drive_wait_function();
 802347e:	f7ff fe8f 	bl	80231a0 <ams_precharge_drive_wait_function>
 8023482:	4603      	mov	r3, r0
 8023484:	461a      	mov	r2, r3
 8023486:	4b30      	ldr	r3, [pc, #192]	; (8023548 <ams_precharge_drive_function+0x168>)
 8023488:	701a      	strb	r2, [r3, #0]
           break;
 802348a:	e025      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_drive_close_air_plus_function();
 802348c:	f7ff fee6 	bl	802325c <ams_precharge_drive_close_air_plus_function>
 8023490:	4603      	mov	r3, r0
 8023492:	461a      	mov	r2, r3
 8023494:	4b2c      	ldr	r3, [pc, #176]	; (8023548 <ams_precharge_drive_function+0x168>)
 8023496:	701a      	strb	r2, [r3, #0]
           break;
 8023498:	e01e      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_drive_open_precharge_function();
 802349a:	f7ff ff23 	bl	80232e4 <ams_precharge_drive_open_precharge_function>
 802349e:	4603      	mov	r3, r0
 80234a0:	461a      	mov	r2, r3
 80234a2:	4b29      	ldr	r3, [pc, #164]	; (8023548 <ams_precharge_drive_function+0x168>)
 80234a4:	701a      	strb	r2, [r3, #0]
           break;
 80234a6:	e017      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_EXIT:
           state_r2 = ams_precharge_drive_exit_function();
 80234a8:	f7ff ff60 	bl	802336c <ams_precharge_drive_exit_function>
 80234ac:	4603      	mov	r3, r0
 80234ae:	461a      	mov	r2, r3
 80234b0:	4b25      	ldr	r3, [pc, #148]	; (8023548 <ams_precharge_drive_function+0x168>)
 80234b2:	701a      	strb	r2, [r3, #0]
           break;
 80234b4:	e010      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_0:
           state_r2 = ams_precharge_drive_0_function();
 80234b6:	f7ff ff71 	bl	802339c <ams_precharge_drive_0_function>
 80234ba:	4603      	mov	r3, r0
 80234bc:	461a      	mov	r2, r3
 80234be:	4b22      	ldr	r3, [pc, #136]	; (8023548 <ams_precharge_drive_function+0x168>)
 80234c0:	701a      	strb	r2, [r3, #0]
           break;
 80234c2:	e009      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ENTRY:
           state_r2 = ams_precharge_drive_entry_function();
 80234c4:	f7ff ff78 	bl	80233b8 <ams_precharge_drive_entry_function>
 80234c8:	4603      	mov	r3, r0
 80234ca:	461a      	mov	r2, r3
 80234cc:	4b1e      	ldr	r3, [pc, #120]	; (8023548 <ams_precharge_drive_function+0x168>)
 80234ce:	701a      	strb	r2, [r3, #0]
           break;
 80234d0:	e002      	b.n	80234d8 <ams_precharge_drive_function+0xf8>
       default:
           ams_error();
 80234d2:	f7ff fdc0 	bl	8023056 <ams_error>
           break;
 80234d6:	bf00      	nop
   }

   if(ams_outputs.precharge_drive_complete) {
 80234d8:	4b1c      	ldr	r3, [pc, #112]	; (802354c <ams_precharge_drive_function+0x16c>)
 80234da:	785b      	ldrb	r3, [r3, #1]
 80234dc:	2b00      	cmp	r3, #0
 80234de:	d008      	beq.n	80234f2 <ams_precharge_drive_function+0x112>
       ams_outputs.precharge_drive_complete=0;
 80234e0:	4b1a      	ldr	r3, [pc, #104]	; (802354c <ams_precharge_drive_function+0x16c>)
 80234e2:	2200      	movs	r2, #0
 80234e4:	705a      	strb	r2, [r3, #1]
       timer_r1 = 0;
 80234e6:	4b16      	ldr	r3, [pc, #88]	; (8023540 <ams_precharge_drive_function+0x160>)
 80234e8:	f04f 0200 	mov.w	r2, #0
 80234ec:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE;
 80234ee:	230c      	movs	r3, #12
 80234f0:	e01f      	b.n	8023532 <ams_precharge_drive_function+0x152>
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 80234f2:	4b16      	ldr	r3, [pc, #88]	; (802354c <ams_precharge_drive_function+0x16c>)
 80234f4:	799b      	ldrb	r3, [r3, #6]
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d109      	bne.n	802350e <ams_precharge_drive_function+0x12e>
 80234fa:	4b12      	ldr	r3, [pc, #72]	; (8023544 <ams_precharge_drive_function+0x164>)
 80234fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8023500:	2b00      	cmp	r3, #0
 8023502:	d104      	bne.n	802350e <ams_precharge_drive_function+0x12e>
 8023504:	4b0f      	ldr	r3, [pc, #60]	; (8023544 <ams_precharge_drive_function+0x164>)
 8023506:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802350a:	2b00      	cmp	r3, #0
 802350c:	d005      	beq.n	802351a <ams_precharge_drive_function+0x13a>
       timer_r1 = 0;
 802350e:	4b0c      	ldr	r3, [pc, #48]	; (8023540 <ams_precharge_drive_function+0x160>)
 8023510:	f04f 0200 	mov.w	r2, #0
 8023514:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8023516:	2312      	movs	r3, #18
 8023518:	e00b      	b.n	8023532 <ams_precharge_drive_function+0x152>
   }


   timer_r1 += ams_inputs.Ts;
 802351a:	4b0a      	ldr	r3, [pc, #40]	; (8023544 <ams_precharge_drive_function+0x164>)
 802351c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023520:	4b07      	ldr	r3, [pc, #28]	; (8023540 <ams_precharge_drive_function+0x160>)
 8023522:	edd3 7a00 	vldr	s15, [r3]
 8023526:	ee77 7a27 	vadd.f32	s15, s14, s15
 802352a:	4b05      	ldr	r3, [pc, #20]	; (8023540 <ams_precharge_drive_function+0x160>)
 802352c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE;
 8023530:	2302      	movs	r3, #2
}
 8023532:	4618      	mov	r0, r3
 8023534:	bdb0      	pop	{r4, r5, r7, pc}
 8023536:	bf00      	nop
 8023538:	d2f1a9fc 	.word	0xd2f1a9fc
 802353c:	3f50624d 	.word	0x3f50624d
 8023540:	20001938 	.word	0x20001938
 8023544:	2001b858 	.word	0x2001b858
 8023548:	20001932 	.word	0x20001932
 802354c:	2001b8b0 	.word	0x2001b8b0

08023550 <ams_drive_0_function>:

ams_state_t ams_drive_0_function() {
 8023550:	b480      	push	{r7}
 8023552:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8023554:	4b04      	ldr	r3, [pc, #16]	; (8023568 <ams_drive_0_function+0x18>)
 8023556:	f04f 0200 	mov.w	r2, #0
 802355a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_DRIVE;
 802355c:	230e      	movs	r3, #14
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_DRIVE_0;
}
 802355e:	4618      	mov	r0, r3
 8023560:	46bd      	mov	sp, r7
 8023562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023566:	4770      	bx	lr
 8023568:	2000193c 	.word	0x2000193c
 802356c:	00000000 	.word	0x00000000

08023570 <ams_drive_drive_function>:

ams_state_t ams_drive_drive_function() {
 8023570:	b580      	push	{r7, lr}
 8023572:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 8023574:	4b14      	ldr	r3, [pc, #80]	; (80235c8 <ams_drive_drive_function+0x58>)
 8023576:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 802357a:	a311      	add	r3, pc, #68	; (adr r3, 80235c0 <ams_drive_drive_function+0x50>)
 802357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023580:	f7dd fa9e 	bl	8000ac0 <__aeabi_dcmplt>
 8023584:	4603      	mov	r3, r0
 8023586:	2b00      	cmp	r3, #0
 8023588:	d104      	bne.n	8023594 <ams_drive_drive_function+0x24>
 802358a:	4b0f      	ldr	r3, [pc, #60]	; (80235c8 <ams_drive_drive_function+0x58>)
 802358c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8023590:	2b00      	cmp	r3, #0
 8023592:	d105      	bne.n	80235a0 <ams_drive_drive_function+0x30>
       timer_r2 = 0;
 8023594:	4b0d      	ldr	r3, [pc, #52]	; (80235cc <ams_drive_drive_function+0x5c>)
 8023596:	f04f 0200 	mov.w	r2, #0
 802359a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_END_DRIVE;
 802359c:	230f      	movs	r3, #15
 802359e:	e00b      	b.n	80235b8 <ams_drive_drive_function+0x48>
   }

   timer_r2 += ams_inputs.Ts;
 80235a0:	4b09      	ldr	r3, [pc, #36]	; (80235c8 <ams_drive_drive_function+0x58>)
 80235a2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80235a6:	4b09      	ldr	r3, [pc, #36]	; (80235cc <ams_drive_drive_function+0x5c>)
 80235a8:	edd3 7a00 	vldr	s15, [r3]
 80235ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80235b0:	4b06      	ldr	r3, [pc, #24]	; (80235cc <ams_drive_drive_function+0x5c>)
 80235b2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_DRIVE;
 80235b6:	230e      	movs	r3, #14
}
 80235b8:	4618      	mov	r0, r3
 80235ba:	bd80      	pop	{r7, pc}
 80235bc:	f3af 8000 	nop.w
 80235c0:	cccccccd 	.word	0xcccccccd
 80235c4:	4006cccc 	.word	0x4006cccc
 80235c8:	2001b858 	.word	0x2001b858
 80235cc:	2000193c 	.word	0x2000193c

080235d0 <ams_drive_end_drive_function>:

ams_state_t ams_drive_end_drive_function() {
 80235d0:	b580      	push	{r7, lr}
 80235d2:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80235d4:	4b30      	ldr	r3, [pc, #192]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 80235d6:	edd3 7a00 	vldr	s15, [r3]
 80235da:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80235de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80235e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235e6:	d528      	bpl.n	802363a <ams_drive_end_drive_function+0x6a>
 80235e8:	4b2c      	ldr	r3, [pc, #176]	; (802369c <ams_drive_end_drive_function+0xcc>)
 80235ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80235ee:	4610      	mov	r0, r2
 80235f0:	4619      	mov	r1, r3
 80235f2:	f7dd faeb 	bl	8000bcc <__aeabi_d2f>
 80235f6:	ee07 0a90 	vmov	s15, r0
 80235fa:	eef0 7ae7 	vabs.f32	s15, s15
 80235fe:	ee17 0a90 	vmov	r0, s15
 8023602:	f7dc ff93 	bl	800052c <__aeabi_f2d>
 8023606:	a322      	add	r3, pc, #136	; (adr r3, 8023690 <ams_drive_end_drive_function+0xc0>)
 8023608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802360c:	f7dd fa58 	bl	8000ac0 <__aeabi_dcmplt>
 8023610:	4603      	mov	r3, r0
 8023612:	2b00      	cmp	r3, #0
 8023614:	d011      	beq.n	802363a <ams_drive_end_drive_function+0x6a>
       ams_outputs.close_air_plus=0;
 8023616:	4b22      	ldr	r3, [pc, #136]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 8023618:	2200      	movs	r2, #0
 802361a:	711a      	strb	r2, [r3, #4]
       ams_outputs.close_air_minus=0;
 802361c:	4b20      	ldr	r3, [pc, #128]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 802361e:	2200      	movs	r2, #0
 8023620:	715a      	strb	r2, [r3, #5]
       ams_outputs.close_precharge=0;
 8023622:	4b1f      	ldr	r3, [pc, #124]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 8023624:	2200      	movs	r2, #0
 8023626:	71da      	strb	r2, [r3, #7]
       ams_outputs.drive_complete=1;
 8023628:	4b1d      	ldr	r3, [pc, #116]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 802362a:	2201      	movs	r2, #1
 802362c:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 802362e:	4b1a      	ldr	r3, [pc, #104]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 8023630:	f04f 0200 	mov.w	r2, #0
 8023634:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_EXIT;
 8023636:	2310      	movs	r3, #16
 8023638:	e027      	b.n	802368a <ams_drive_end_drive_function+0xba>
   }

   if((timer_r2 > 7)) {
 802363a:	4b17      	ldr	r3, [pc, #92]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 802363c:	edd3 7a00 	vldr	s15, [r3]
 8023640:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8023644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802364c:	dd11      	ble.n	8023672 <ams_drive_end_drive_function+0xa2>
       ams_outputs.close_air_plus=0;
 802364e:	4b14      	ldr	r3, [pc, #80]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 8023650:	2200      	movs	r2, #0
 8023652:	711a      	strb	r2, [r3, #4]
       ams_outputs.close_air_minus=0;
 8023654:	4b12      	ldr	r3, [pc, #72]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 8023656:	2200      	movs	r2, #0
 8023658:	715a      	strb	r2, [r3, #5]
       ams_outputs.close_precharge=0;
 802365a:	4b11      	ldr	r3, [pc, #68]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 802365c:	2200      	movs	r2, #0
 802365e:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=131;
 8023660:	4b0f      	ldr	r3, [pc, #60]	; (80236a0 <ams_drive_end_drive_function+0xd0>)
 8023662:	2283      	movs	r2, #131	; 0x83
 8023664:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023666:	4b0c      	ldr	r3, [pc, #48]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 8023668:	f04f 0200 	mov.w	r2, #0
 802366c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_FORCE_QUIT;
 802366e:	2311      	movs	r3, #17
 8023670:	e00b      	b.n	802368a <ams_drive_end_drive_function+0xba>
   }

   timer_r2 += ams_inputs.Ts;
 8023672:	4b0a      	ldr	r3, [pc, #40]	; (802369c <ams_drive_end_drive_function+0xcc>)
 8023674:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023678:	4b07      	ldr	r3, [pc, #28]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 802367a:	edd3 7a00 	vldr	s15, [r3]
 802367e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023682:	4b05      	ldr	r3, [pc, #20]	; (8023698 <ams_drive_end_drive_function+0xc8>)
 8023684:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_END_DRIVE;
 8023688:	230f      	movs	r3, #15
}
 802368a:	4618      	mov	r0, r3
 802368c:	bd80      	pop	{r7, pc}
 802368e:	bf00      	nop
 8023690:	d2f1a9fc 	.word	0xd2f1a9fc
 8023694:	3f50624d 	.word	0x3f50624d
 8023698:	2000193c 	.word	0x2000193c
 802369c:	2001b858 	.word	0x2001b858
 80236a0:	2001b8b0 	.word	0x2001b8b0

080236a4 <ams_drive_exit_function>:

ams_state_t ams_drive_exit_function() {
 80236a4:	b480      	push	{r7}
 80236a6:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80236a8:	4b08      	ldr	r3, [pc, #32]	; (80236cc <ams_drive_exit_function+0x28>)
 80236aa:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80236ae:	4b08      	ldr	r3, [pc, #32]	; (80236d0 <ams_drive_exit_function+0x2c>)
 80236b0:	edd3 7a00 	vldr	s15, [r3]
 80236b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80236b8:	4b05      	ldr	r3, [pc, #20]	; (80236d0 <ams_drive_exit_function+0x2c>)
 80236ba:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_EXIT;
 80236be:	2310      	movs	r3, #16
}
 80236c0:	4618      	mov	r0, r3
 80236c2:	46bd      	mov	sp, r7
 80236c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236c8:	4770      	bx	lr
 80236ca:	bf00      	nop
 80236cc:	2001b858 	.word	0x2001b858
 80236d0:	2000193c 	.word	0x2000193c

080236d4 <ams_drive_force_quit_function>:

ams_state_t ams_drive_force_quit_function() {
 80236d4:	b480      	push	{r7}
 80236d6:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80236d8:	4b08      	ldr	r3, [pc, #32]	; (80236fc <ams_drive_force_quit_function+0x28>)
 80236da:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80236de:	4b08      	ldr	r3, [pc, #32]	; (8023700 <ams_drive_force_quit_function+0x2c>)
 80236e0:	edd3 7a00 	vldr	s15, [r3]
 80236e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80236e8:	4b05      	ldr	r3, [pc, #20]	; (8023700 <ams_drive_force_quit_function+0x2c>)
 80236ea:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_FORCE_QUIT;
 80236ee:	2311      	movs	r3, #17
}
 80236f0:	4618      	mov	r0, r3
 80236f2:	46bd      	mov	sp, r7
 80236f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f8:	4770      	bx	lr
 80236fa:	bf00      	nop
 80236fc:	2001b858 	.word	0x2001b858
 8023700:	2000193c 	.word	0x2000193c
 8023704:	00000000 	.word	0x00000000

08023708 <ams_drive_function>:

ams_state_t ams_drive_function() {
 8023708:	b5b0      	push	{r4, r5, r7, lr}
 802370a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 802370c:	4b44      	ldr	r3, [pc, #272]	; (8023820 <ams_drive_function+0x118>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	4618      	mov	r0, r3
 8023712:	f7dc ff0b 	bl	800052c <__aeabi_f2d>
 8023716:	4604      	mov	r4, r0
 8023718:	460d      	mov	r5, r1
 802371a:	4b42      	ldr	r3, [pc, #264]	; (8023824 <ams_drive_function+0x11c>)
 802371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802371e:	4618      	mov	r0, r3
 8023720:	f7dc ff04 	bl	800052c <__aeabi_f2d>
 8023724:	a33c      	add	r3, pc, #240	; (adr r3, 8023818 <ams_drive_function+0x110>)
 8023726:	e9d3 2300 	ldrd	r2, r3, [r3]
 802372a:	f7dc ff57 	bl	80005dc <__aeabi_dmul>
 802372e:	4602      	mov	r2, r0
 8023730:	460b      	mov	r3, r1
 8023732:	4620      	mov	r0, r4
 8023734:	4629      	mov	r1, r5
 8023736:	f7dd f9c3 	bl	8000ac0 <__aeabi_dcmplt>
 802373a:	4603      	mov	r3, r0
 802373c:	2b00      	cmp	r3, #0
 802373e:	d002      	beq.n	8023746 <ams_drive_function+0x3e>
       state_r2 = STATE_AMS_DRIVE_0;
 8023740:	4b39      	ldr	r3, [pc, #228]	; (8023828 <ams_drive_function+0x120>)
 8023742:	220d      	movs	r2, #13
 8023744:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8023746:	4b38      	ldr	r3, [pc, #224]	; (8023828 <ams_drive_function+0x120>)
 8023748:	781b      	ldrb	r3, [r3, #0]
 802374a:	3b0d      	subs	r3, #13
 802374c:	2b04      	cmp	r3, #4
 802374e:	d830      	bhi.n	80237b2 <ams_drive_function+0xaa>
 8023750:	a201      	add	r2, pc, #4	; (adr r2, 8023758 <ams_drive_function+0x50>)
 8023752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023756:	bf00      	nop
 8023758:	0802376d 	.word	0x0802376d
 802375c:	0802377b 	.word	0x0802377b
 8023760:	08023789 	.word	0x08023789
 8023764:	08023797 	.word	0x08023797
 8023768:	080237a5 	.word	0x080237a5
       case STATE_AMS_DRIVE_0:
           state_r2 = ams_drive_0_function();
 802376c:	f7ff fef0 	bl	8023550 <ams_drive_0_function>
 8023770:	4603      	mov	r3, r0
 8023772:	461a      	mov	r2, r3
 8023774:	4b2c      	ldr	r3, [pc, #176]	; (8023828 <ams_drive_function+0x120>)
 8023776:	701a      	strb	r2, [r3, #0]
           break;
 8023778:	e01e      	b.n	80237b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_DRIVE:
           state_r2 = ams_drive_drive_function();
 802377a:	f7ff fef9 	bl	8023570 <ams_drive_drive_function>
 802377e:	4603      	mov	r3, r0
 8023780:	461a      	mov	r2, r3
 8023782:	4b29      	ldr	r3, [pc, #164]	; (8023828 <ams_drive_function+0x120>)
 8023784:	701a      	strb	r2, [r3, #0]
           break;
 8023786:	e017      	b.n	80237b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_END_DRIVE:
           state_r2 = ams_drive_end_drive_function();
 8023788:	f7ff ff22 	bl	80235d0 <ams_drive_end_drive_function>
 802378c:	4603      	mov	r3, r0
 802378e:	461a      	mov	r2, r3
 8023790:	4b25      	ldr	r3, [pc, #148]	; (8023828 <ams_drive_function+0x120>)
 8023792:	701a      	strb	r2, [r3, #0]
           break;
 8023794:	e010      	b.n	80237b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_EXIT:
           state_r2 = ams_drive_exit_function();
 8023796:	f7ff ff85 	bl	80236a4 <ams_drive_exit_function>
 802379a:	4603      	mov	r3, r0
 802379c:	461a      	mov	r2, r3
 802379e:	4b22      	ldr	r3, [pc, #136]	; (8023828 <ams_drive_function+0x120>)
 80237a0:	701a      	strb	r2, [r3, #0]
           break;
 80237a2:	e009      	b.n	80237b8 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_FORCE_QUIT:
           state_r2 = ams_drive_force_quit_function();
 80237a4:	f7ff ff96 	bl	80236d4 <ams_drive_force_quit_function>
 80237a8:	4603      	mov	r3, r0
 80237aa:	461a      	mov	r2, r3
 80237ac:	4b1e      	ldr	r3, [pc, #120]	; (8023828 <ams_drive_function+0x120>)
 80237ae:	701a      	strb	r2, [r3, #0]
           break;
 80237b0:	e002      	b.n	80237b8 <ams_drive_function+0xb0>
       default:
           ams_error();
 80237b2:	f7ff fc50 	bl	8023056 <ams_error>
           break;
 80237b6:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_outputs.error) {
 80237b8:	4b1a      	ldr	r3, [pc, #104]	; (8023824 <ams_drive_function+0x11c>)
 80237ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80237be:	2b00      	cmp	r3, #0
 80237c0:	d108      	bne.n	80237d4 <ams_drive_function+0xcc>
 80237c2:	4b18      	ldr	r3, [pc, #96]	; (8023824 <ams_drive_function+0x11c>)
 80237c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80237c8:	2b00      	cmp	r3, #0
 80237ca:	d103      	bne.n	80237d4 <ams_drive_function+0xcc>
 80237cc:	4b17      	ldr	r3, [pc, #92]	; (802382c <ams_drive_function+0x124>)
 80237ce:	799b      	ldrb	r3, [r3, #6]
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d005      	beq.n	80237e0 <ams_drive_function+0xd8>
       timer_r1 = 0;
 80237d4:	4b12      	ldr	r3, [pc, #72]	; (8023820 <ams_drive_function+0x118>)
 80237d6:	f04f 0200 	mov.w	r2, #0
 80237da:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 80237dc:	2312      	movs	r3, #18
 80237de:	e018      	b.n	8023812 <ams_drive_function+0x10a>
   }

   if(ams_outputs.drive_complete) {
 80237e0:	4b12      	ldr	r3, [pc, #72]	; (802382c <ams_drive_function+0x124>)
 80237e2:	789b      	ldrb	r3, [r3, #2]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d008      	beq.n	80237fa <ams_drive_function+0xf2>
       ams_outputs.drive_complete=0;
 80237e8:	4b10      	ldr	r3, [pc, #64]	; (802382c <ams_drive_function+0x124>)
 80237ea:	2200      	movs	r2, #0
 80237ec:	709a      	strb	r2, [r3, #2]
       timer_r1 = 0;
 80237ee:	4b0c      	ldr	r3, [pc, #48]	; (8023820 <ams_drive_function+0x118>)
 80237f0:	f04f 0200 	mov.w	r2, #0
 80237f4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80237f6:	2327      	movs	r3, #39	; 0x27
 80237f8:	e00b      	b.n	8023812 <ams_drive_function+0x10a>
   }


   timer_r1 += ams_inputs.Ts;
 80237fa:	4b0a      	ldr	r3, [pc, #40]	; (8023824 <ams_drive_function+0x11c>)
 80237fc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023800:	4b07      	ldr	r3, [pc, #28]	; (8023820 <ams_drive_function+0x118>)
 8023802:	edd3 7a00 	vldr	s15, [r3]
 8023806:	ee77 7a27 	vadd.f32	s15, s14, s15
 802380a:	4b05      	ldr	r3, [pc, #20]	; (8023820 <ams_drive_function+0x118>)
 802380c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE;
 8023810:	230c      	movs	r3, #12
}
 8023812:	4618      	mov	r0, r3
 8023814:	bdb0      	pop	{r4, r5, r7, pc}
 8023816:	bf00      	nop
 8023818:	d2f1a9fc 	.word	0xd2f1a9fc
 802381c:	3f50624d 	.word	0x3f50624d
 8023820:	20001938 	.word	0x20001938
 8023824:	2001b858 	.word	0x2001b858
 8023828:	20001932 	.word	0x20001932
 802382c:	2001b8b0 	.word	0x2001b8b0

08023830 <ams_error_0_function>:

ams_state_t ams_error_0_function() {
 8023830:	b480      	push	{r7}
 8023832:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8023834:	4b04      	ldr	r3, [pc, #16]	; (8023848 <ams_error_0_function+0x18>)
 8023836:	f04f 0200 	mov.w	r2, #0
 802383a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 802383c:	2314      	movs	r3, #20
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_0;
}
 802383e:	4618      	mov	r0, r3
 8023840:	46bd      	mov	sp, r7
 8023842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023846:	4770      	bx	lr
 8023848:	2000193c 	.word	0x2000193c

0802384c <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 802384c:	b480      	push	{r7}
 802384e:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 8023850:	4b09      	ldr	r3, [pc, #36]	; (8023878 <ams_error_error_detected_function+0x2c>)
 8023852:	2200      	movs	r2, #0
 8023854:	711a      	strb	r2, [r3, #4]
       ams_outputs.close_air_minus=0;
 8023856:	4b08      	ldr	r3, [pc, #32]	; (8023878 <ams_error_error_detected_function+0x2c>)
 8023858:	2200      	movs	r2, #0
 802385a:	715a      	strb	r2, [r3, #5]
       ams_outputs.close_precharge=0;
 802385c:	4b06      	ldr	r3, [pc, #24]	; (8023878 <ams_error_error_detected_function+0x2c>)
 802385e:	2200      	movs	r2, #0
 8023860:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8023862:	4b06      	ldr	r3, [pc, #24]	; (802387c <ams_error_error_detected_function+0x30>)
 8023864:	f04f 0200 	mov.w	r2, #0
 8023868:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 802386a:	2315      	movs	r3, #21
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 802386c:	4618      	mov	r0, r3
 802386e:	46bd      	mov	sp, r7
 8023870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023874:	4770      	bx	lr
 8023876:	bf00      	nop
 8023878:	2001b8b0 	.word	0x2001b8b0
 802387c:	2000193c 	.word	0x2000193c

08023880 <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 8023880:	b480      	push	{r7}
 8023882:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 8023884:	4b11      	ldr	r3, [pc, #68]	; (80238cc <ams_error_relays_opened_function+0x4c>)
 8023886:	edd3 7a00 	vldr	s15, [r3]
 802388a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 802388e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023896:	dd08      	ble.n	80238aa <ams_error_relays_opened_function+0x2a>
       ams_outputs.error=0;
 8023898:	4b0d      	ldr	r3, [pc, #52]	; (80238d0 <ams_error_relays_opened_function+0x50>)
 802389a:	2200      	movs	r2, #0
 802389c:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 802389e:	4b0b      	ldr	r3, [pc, #44]	; (80238cc <ams_error_relays_opened_function+0x4c>)
 80238a0:	f04f 0200 	mov.w	r2, #0
 80238a4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 80238a6:	2316      	movs	r3, #22
 80238a8:	e00b      	b.n	80238c2 <ams_error_relays_opened_function+0x42>
   }

   timer_r2 += ams_inputs.Ts;
 80238aa:	4b0a      	ldr	r3, [pc, #40]	; (80238d4 <ams_error_relays_opened_function+0x54>)
 80238ac:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80238b0:	4b06      	ldr	r3, [pc, #24]	; (80238cc <ams_error_relays_opened_function+0x4c>)
 80238b2:	edd3 7a00 	vldr	s15, [r3]
 80238b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80238ba:	4b04      	ldr	r3, [pc, #16]	; (80238cc <ams_error_relays_opened_function+0x4c>)
 80238bc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 80238c0:	2315      	movs	r3, #21
}
 80238c2:	4618      	mov	r0, r3
 80238c4:	46bd      	mov	sp, r7
 80238c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238ca:	4770      	bx	lr
 80238cc:	2000193c 	.word	0x2000193c
 80238d0:	2001b8b0 	.word	0x2001b8b0
 80238d4:	2001b858 	.word	0x2001b858

080238d8 <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 80238d8:	b480      	push	{r7}
 80238da:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80238dc:	4b08      	ldr	r3, [pc, #32]	; (8023900 <ams_error_awaiting_error_resolution_function+0x28>)
 80238de:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80238e2:	4b08      	ldr	r3, [pc, #32]	; (8023904 <ams_error_awaiting_error_resolution_function+0x2c>)
 80238e4:	edd3 7a00 	vldr	s15, [r3]
 80238e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80238ec:	4b05      	ldr	r3, [pc, #20]	; (8023904 <ams_error_awaiting_error_resolution_function+0x2c>)
 80238ee:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 80238f2:	2316      	movs	r3, #22
}
 80238f4:	4618      	mov	r0, r3
 80238f6:	46bd      	mov	sp, r7
 80238f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238fc:	4770      	bx	lr
 80238fe:	bf00      	nop
 8023900:	2001b858 	.word	0x2001b858
 8023904:	2000193c 	.word	0x2000193c

08023908 <ams_error_function>:

ams_state_t ams_error_function() {
 8023908:	b5b0      	push	{r4, r5, r7, lr}
 802390a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 802390c:	4b3a      	ldr	r3, [pc, #232]	; (80239f8 <ams_error_function+0xf0>)
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	4618      	mov	r0, r3
 8023912:	f7dc fe0b 	bl	800052c <__aeabi_f2d>
 8023916:	4604      	mov	r4, r0
 8023918:	460d      	mov	r5, r1
 802391a:	4b38      	ldr	r3, [pc, #224]	; (80239fc <ams_error_function+0xf4>)
 802391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802391e:	4618      	mov	r0, r3
 8023920:	f7dc fe04 	bl	800052c <__aeabi_f2d>
 8023924:	a332      	add	r3, pc, #200	; (adr r3, 80239f0 <ams_error_function+0xe8>)
 8023926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802392a:	f7dc fe57 	bl	80005dc <__aeabi_dmul>
 802392e:	4602      	mov	r2, r0
 8023930:	460b      	mov	r3, r1
 8023932:	4620      	mov	r0, r4
 8023934:	4629      	mov	r1, r5
 8023936:	f7dd f8c3 	bl	8000ac0 <__aeabi_dcmplt>
 802393a:	4603      	mov	r3, r0
 802393c:	2b00      	cmp	r3, #0
 802393e:	d002      	beq.n	8023946 <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 8023940:	4b2f      	ldr	r3, [pc, #188]	; (8023a00 <ams_error_function+0xf8>)
 8023942:	2213      	movs	r2, #19
 8023944:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8023946:	4b2e      	ldr	r3, [pc, #184]	; (8023a00 <ams_error_function+0xf8>)
 8023948:	781b      	ldrb	r3, [r3, #0]
 802394a:	3b13      	subs	r3, #19
 802394c:	2b03      	cmp	r3, #3
 802394e:	d827      	bhi.n	80239a0 <ams_error_function+0x98>
 8023950:	a201      	add	r2, pc, #4	; (adr r2, 8023958 <ams_error_function+0x50>)
 8023952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023956:	bf00      	nop
 8023958:	08023969 	.word	0x08023969
 802395c:	08023977 	.word	0x08023977
 8023960:	08023985 	.word	0x08023985
 8023964:	08023993 	.word	0x08023993
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 8023968:	f7ff ff62 	bl	8023830 <ams_error_0_function>
 802396c:	4603      	mov	r3, r0
 802396e:	461a      	mov	r2, r3
 8023970:	4b23      	ldr	r3, [pc, #140]	; (8023a00 <ams_error_function+0xf8>)
 8023972:	701a      	strb	r2, [r3, #0]
           break;
 8023974:	e017      	b.n	80239a6 <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 8023976:	f7ff ff69 	bl	802384c <ams_error_error_detected_function>
 802397a:	4603      	mov	r3, r0
 802397c:	461a      	mov	r2, r3
 802397e:	4b20      	ldr	r3, [pc, #128]	; (8023a00 <ams_error_function+0xf8>)
 8023980:	701a      	strb	r2, [r3, #0]
           break;
 8023982:	e010      	b.n	80239a6 <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 8023984:	f7ff ff7c 	bl	8023880 <ams_error_relays_opened_function>
 8023988:	4603      	mov	r3, r0
 802398a:	461a      	mov	r2, r3
 802398c:	4b1c      	ldr	r3, [pc, #112]	; (8023a00 <ams_error_function+0xf8>)
 802398e:	701a      	strb	r2, [r3, #0]
           break;
 8023990:	e009      	b.n	80239a6 <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 8023992:	f7ff ffa1 	bl	80238d8 <ams_error_awaiting_error_resolution_function>
 8023996:	4603      	mov	r3, r0
 8023998:	461a      	mov	r2, r3
 802399a:	4b19      	ldr	r3, [pc, #100]	; (8023a00 <ams_error_function+0xf8>)
 802399c:	701a      	strb	r2, [r3, #0]
           break;
 802399e:	e002      	b.n	80239a6 <ams_error_function+0x9e>
       default:
           ams_error();
 80239a0:	f7ff fb59 	bl	8023056 <ams_error>
           break;
 80239a4:	bf00      	nop
   }

   if(!(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 80239a6:	4b17      	ldr	r3, [pc, #92]	; (8023a04 <ams_error_function+0xfc>)
 80239a8:	799b      	ldrb	r3, [r3, #6]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d10f      	bne.n	80239ce <ams_error_function+0xc6>
 80239ae:	4b13      	ldr	r3, [pc, #76]	; (80239fc <ams_error_function+0xf4>)
 80239b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d10a      	bne.n	80239ce <ams_error_function+0xc6>
 80239b8:	4b10      	ldr	r3, [pc, #64]	; (80239fc <ams_error_function+0xf4>)
 80239ba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80239be:	2b00      	cmp	r3, #0
 80239c0:	d105      	bne.n	80239ce <ams_error_function+0xc6>
       timer_r1 = 0;
 80239c2:	4b0d      	ldr	r3, [pc, #52]	; (80239f8 <ams_error_function+0xf0>)
 80239c4:	f04f 0200 	mov.w	r2, #0
 80239c8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80239ca:	2327      	movs	r3, #39	; 0x27
 80239cc:	e00b      	b.n	80239e6 <ams_error_function+0xde>
   }


   timer_r1 += ams_inputs.Ts;
 80239ce:	4b0b      	ldr	r3, [pc, #44]	; (80239fc <ams_error_function+0xf4>)
 80239d0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80239d4:	4b08      	ldr	r3, [pc, #32]	; (80239f8 <ams_error_function+0xf0>)
 80239d6:	edd3 7a00 	vldr	s15, [r3]
 80239da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80239de:	4b06      	ldr	r3, [pc, #24]	; (80239f8 <ams_error_function+0xf0>)
 80239e0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 80239e4:	2312      	movs	r3, #18
}
 80239e6:	4618      	mov	r0, r3
 80239e8:	bdb0      	pop	{r4, r5, r7, pc}
 80239ea:	bf00      	nop
 80239ec:	f3af 8000 	nop.w
 80239f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80239f4:	3f50624d 	.word	0x3f50624d
 80239f8:	20001938 	.word	0x20001938
 80239fc:	2001b858 	.word	0x2001b858
 8023a00:	20001932 	.word	0x20001932
 8023a04:	2001b8b0 	.word	0x2001b8b0

08023a08 <ams_precharge_charge_close_air_minus_function>:

ams_state_t ams_precharge_charge_close_air_minus_function() {
 8023a08:	b480      	push	{r7}
 8023a0a:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8023a0c:	4b1d      	ldr	r3, [pc, #116]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a0e:	edd3 7a00 	vldr	s15, [r3]
 8023a12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a1e:	d50d      	bpl.n	8023a3c <ams_precharge_charge_close_air_minus_function+0x34>
 8023a20:	4b19      	ldr	r3, [pc, #100]	; (8023a88 <ams_precharge_charge_close_air_minus_function+0x80>)
 8023a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023a26:	2b00      	cmp	r3, #0
 8023a28:	d008      	beq.n	8023a3c <ams_precharge_charge_close_air_minus_function+0x34>
       ams_outputs.close_precharge=1;
 8023a2a:	4b18      	ldr	r3, [pc, #96]	; (8023a8c <ams_precharge_charge_close_air_minus_function+0x84>)
 8023a2c:	2201      	movs	r2, #1
 8023a2e:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8023a30:	4b14      	ldr	r3, [pc, #80]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a32:	f04f 0200 	mov.w	r2, #0
 8023a36:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023a38:	2319      	movs	r3, #25
 8023a3a:	e01e      	b.n	8023a7a <ams_precharge_charge_close_air_minus_function+0x72>
   }

   if((timer_r2 > 2)) {
 8023a3c:	4b11      	ldr	r3, [pc, #68]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a3e:	edd3 7a00 	vldr	s15, [r3]
 8023a42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a4e:	dd08      	ble.n	8023a62 <ams_precharge_charge_close_air_minus_function+0x5a>
       ams_outputs.error=122;
 8023a50:	4b0e      	ldr	r3, [pc, #56]	; (8023a8c <ams_precharge_charge_close_air_minus_function+0x84>)
 8023a52:	227a      	movs	r2, #122	; 0x7a
 8023a54:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023a56:	4b0b      	ldr	r3, [pc, #44]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a58:	f04f 0200 	mov.w	r2, #0
 8023a5c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023a5e:	231a      	movs	r3, #26
 8023a60:	e00b      	b.n	8023a7a <ams_precharge_charge_close_air_minus_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 8023a62:	4b09      	ldr	r3, [pc, #36]	; (8023a88 <ams_precharge_charge_close_air_minus_function+0x80>)
 8023a64:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023a68:	4b06      	ldr	r3, [pc, #24]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a6a:	edd3 7a00 	vldr	s15, [r3]
 8023a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a72:	4b04      	ldr	r3, [pc, #16]	; (8023a84 <ams_precharge_charge_close_air_minus_function+0x7c>)
 8023a74:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023a78:	2318      	movs	r3, #24
}
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	46bd      	mov	sp, r7
 8023a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a82:	4770      	bx	lr
 8023a84:	2000193c 	.word	0x2000193c
 8023a88:	2001b858 	.word	0x2001b858
 8023a8c:	2001b8b0 	.word	0x2001b8b0

08023a90 <ams_precharge_charge_close_precharge_function>:

ams_state_t ams_precharge_charge_close_precharge_function() {
 8023a90:	b480      	push	{r7}
 8023a92:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 8023a94:	4b1c      	ldr	r3, [pc, #112]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023a96:	edd3 7a00 	vldr	s15, [r3]
 8023a9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aa6:	d50a      	bpl.n	8023abe <ams_precharge_charge_close_precharge_function+0x2e>
 8023aa8:	4b18      	ldr	r3, [pc, #96]	; (8023b0c <ams_precharge_charge_close_precharge_function+0x7c>)
 8023aaa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	d005      	beq.n	8023abe <ams_precharge_charge_close_precharge_function+0x2e>
       timer_r2 = 0;
 8023ab2:	4b15      	ldr	r3, [pc, #84]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023ab4:	f04f 0200 	mov.w	r2, #0
 8023ab8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8023aba:	231b      	movs	r3, #27
 8023abc:	e01e      	b.n	8023afc <ams_precharge_charge_close_precharge_function+0x6c>
   }

   if((timer_r2 > 2)) {
 8023abe:	4b12      	ldr	r3, [pc, #72]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023ac0:	edd3 7a00 	vldr	s15, [r3]
 8023ac4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ad0:	dd08      	ble.n	8023ae4 <ams_precharge_charge_close_precharge_function+0x54>
       ams_outputs.error=123;
 8023ad2:	4b0f      	ldr	r3, [pc, #60]	; (8023b10 <ams_precharge_charge_close_precharge_function+0x80>)
 8023ad4:	227b      	movs	r2, #123	; 0x7b
 8023ad6:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023ad8:	4b0b      	ldr	r3, [pc, #44]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023ada:	f04f 0200 	mov.w	r2, #0
 8023ade:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023ae0:	231a      	movs	r3, #26
 8023ae2:	e00b      	b.n	8023afc <ams_precharge_charge_close_precharge_function+0x6c>
   }

   timer_r2 += ams_inputs.Ts;
 8023ae4:	4b09      	ldr	r3, [pc, #36]	; (8023b0c <ams_precharge_charge_close_precharge_function+0x7c>)
 8023ae6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023aea:	4b07      	ldr	r3, [pc, #28]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023aec:	edd3 7a00 	vldr	s15, [r3]
 8023af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023af4:	4b04      	ldr	r3, [pc, #16]	; (8023b08 <ams_precharge_charge_close_precharge_function+0x78>)
 8023af6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023afa:	2319      	movs	r3, #25
}
 8023afc:	4618      	mov	r0, r3
 8023afe:	46bd      	mov	sp, r7
 8023b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b04:	4770      	bx	lr
 8023b06:	bf00      	nop
 8023b08:	2000193c 	.word	0x2000193c
 8023b0c:	2001b858 	.word	0x2001b858
 8023b10:	2001b8b0 	.word	0x2001b8b0

08023b14 <ams_precharge_charge_error_function>:

ams_state_t ams_precharge_charge_error_function() {
 8023b14:	b480      	push	{r7}
 8023b16:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023b18:	4b08      	ldr	r3, [pc, #32]	; (8023b3c <ams_precharge_charge_error_function+0x28>)
 8023b1a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023b1e:	4b08      	ldr	r3, [pc, #32]	; (8023b40 <ams_precharge_charge_error_function+0x2c>)
 8023b20:	edd3 7a00 	vldr	s15, [r3]
 8023b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b28:	4b05      	ldr	r3, [pc, #20]	; (8023b40 <ams_precharge_charge_error_function+0x2c>)
 8023b2a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023b2e:	231a      	movs	r3, #26
}
 8023b30:	4618      	mov	r0, r3
 8023b32:	46bd      	mov	sp, r7
 8023b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b38:	4770      	bx	lr
 8023b3a:	bf00      	nop
 8023b3c:	2001b858 	.word	0x2001b858
 8023b40:	2000193c 	.word	0x2000193c
 8023b44:	00000000 	.word	0x00000000

08023b48 <ams_precharge_charge_wait_function>:

ams_state_t ams_precharge_charge_wait_function() {
 8023b48:	b580      	push	{r7, lr}
 8023b4a:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8023b4c:	4b2a      	ldr	r3, [pc, #168]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023b4e:	edd3 7a00 	vldr	s15, [r3]
 8023b52:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8023b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b5e:	dd26      	ble.n	8023bae <ams_precharge_charge_wait_function+0x66>
 8023b60:	4b25      	ldr	r3, [pc, #148]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023b62:	edd3 7a00 	vldr	s15, [r3]
 8023b66:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b72:	d51c      	bpl.n	8023bae <ams_precharge_charge_wait_function+0x66>
 8023b74:	4b21      	ldr	r3, [pc, #132]	; (8023bfc <ams_precharge_charge_wait_function+0xb4>)
 8023b76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8023b7a:	a31d      	add	r3, pc, #116	; (adr r3, 8023bf0 <ams_precharge_charge_wait_function+0xa8>)
 8023b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b80:	f7dc fd2c 	bl	80005dc <__aeabi_dmul>
 8023b84:	4602      	mov	r2, r0
 8023b86:	460b      	mov	r3, r1
 8023b88:	4610      	mov	r0, r2
 8023b8a:	4619      	mov	r1, r3
 8023b8c:	4b1b      	ldr	r3, [pc, #108]	; (8023bfc <ams_precharge_charge_wait_function+0xb4>)
 8023b8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8023b92:	f7dc ff95 	bl	8000ac0 <__aeabi_dcmplt>
 8023b96:	4603      	mov	r3, r0
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	d008      	beq.n	8023bae <ams_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8023b9c:	4b18      	ldr	r3, [pc, #96]	; (8023c00 <ams_precharge_charge_wait_function+0xb8>)
 8023b9e:	2201      	movs	r2, #1
 8023ba0:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 8023ba2:	4b15      	ldr	r3, [pc, #84]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023ba4:	f04f 0200 	mov.w	r2, #0
 8023ba8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023baa:	231c      	movs	r3, #28
 8023bac:	e01e      	b.n	8023bec <ams_precharge_charge_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 8023bae:	4b12      	ldr	r3, [pc, #72]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023bb0:	edd3 7a00 	vldr	s15, [r3]
 8023bb4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bc0:	dd08      	ble.n	8023bd4 <ams_precharge_charge_wait_function+0x8c>
       ams_outputs.error=124;
 8023bc2:	4b0f      	ldr	r3, [pc, #60]	; (8023c00 <ams_precharge_charge_wait_function+0xb8>)
 8023bc4:	227c      	movs	r2, #124	; 0x7c
 8023bc6:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023bc8:	4b0b      	ldr	r3, [pc, #44]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023bca:	f04f 0200 	mov.w	r2, #0
 8023bce:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023bd0:	231a      	movs	r3, #26
 8023bd2:	e00b      	b.n	8023bec <ams_precharge_charge_wait_function+0xa4>
   }

   timer_r2 += ams_inputs.Ts;
 8023bd4:	4b09      	ldr	r3, [pc, #36]	; (8023bfc <ams_precharge_charge_wait_function+0xb4>)
 8023bd6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023bda:	4b07      	ldr	r3, [pc, #28]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023bdc:	edd3 7a00 	vldr	s15, [r3]
 8023be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023be4:	4b04      	ldr	r3, [pc, #16]	; (8023bf8 <ams_precharge_charge_wait_function+0xb0>)
 8023be6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8023bea:	231b      	movs	r3, #27
}
 8023bec:	4618      	mov	r0, r3
 8023bee:	bd80      	pop	{r7, pc}
 8023bf0:	66666666 	.word	0x66666666
 8023bf4:	3fee6666 	.word	0x3fee6666
 8023bf8:	2000193c 	.word	0x2000193c
 8023bfc:	2001b858 	.word	0x2001b858
 8023c00:	2001b8b0 	.word	0x2001b8b0

08023c04 <ams_precharge_charge_close_air_plus_function>:

ams_state_t ams_precharge_charge_close_air_plus_function() {
 8023c04:	b480      	push	{r7}
 8023c06:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8023c08:	4b1d      	ldr	r3, [pc, #116]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c0a:	edd3 7a00 	vldr	s15, [r3]
 8023c0e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c1a:	d50c      	bpl.n	8023c36 <ams_precharge_charge_close_air_plus_function+0x32>
 8023c1c:	4b19      	ldr	r3, [pc, #100]	; (8023c84 <ams_precharge_charge_close_air_plus_function+0x80>)
 8023c1e:	7c1b      	ldrb	r3, [r3, #16]
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	d008      	beq.n	8023c36 <ams_precharge_charge_close_air_plus_function+0x32>
       ams_outputs.close_precharge=0;
 8023c24:	4b18      	ldr	r3, [pc, #96]	; (8023c88 <ams_precharge_charge_close_air_plus_function+0x84>)
 8023c26:	2200      	movs	r2, #0
 8023c28:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8023c2a:	4b15      	ldr	r3, [pc, #84]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c2c:	f04f 0200 	mov.w	r2, #0
 8023c30:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023c32:	231d      	movs	r3, #29
 8023c34:	e01e      	b.n	8023c74 <ams_precharge_charge_close_air_plus_function+0x70>
   }

   if((timer_r2 > 2)) {
 8023c36:	4b12      	ldr	r3, [pc, #72]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c38:	edd3 7a00 	vldr	s15, [r3]
 8023c3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c48:	dd08      	ble.n	8023c5c <ams_precharge_charge_close_air_plus_function+0x58>
       ams_outputs.error=125;
 8023c4a:	4b0f      	ldr	r3, [pc, #60]	; (8023c88 <ams_precharge_charge_close_air_plus_function+0x84>)
 8023c4c:	227d      	movs	r2, #125	; 0x7d
 8023c4e:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023c50:	4b0b      	ldr	r3, [pc, #44]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c52:	f04f 0200 	mov.w	r2, #0
 8023c56:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023c58:	231a      	movs	r3, #26
 8023c5a:	e00b      	b.n	8023c74 <ams_precharge_charge_close_air_plus_function+0x70>
   }

   timer_r2 += ams_inputs.Ts;
 8023c5c:	4b09      	ldr	r3, [pc, #36]	; (8023c84 <ams_precharge_charge_close_air_plus_function+0x80>)
 8023c5e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023c62:	4b07      	ldr	r3, [pc, #28]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c64:	edd3 7a00 	vldr	s15, [r3]
 8023c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c6c:	4b04      	ldr	r3, [pc, #16]	; (8023c80 <ams_precharge_charge_close_air_plus_function+0x7c>)
 8023c6e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023c72:	231c      	movs	r3, #28
}
 8023c74:	4618      	mov	r0, r3
 8023c76:	46bd      	mov	sp, r7
 8023c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c7c:	4770      	bx	lr
 8023c7e:	bf00      	nop
 8023c80:	2000193c 	.word	0x2000193c
 8023c84:	2001b858 	.word	0x2001b858
 8023c88:	2001b8b0 	.word	0x2001b8b0

08023c8c <ams_precharge_charge_open_precharge_function>:

ams_state_t ams_precharge_charge_open_precharge_function() {
 8023c8c:	b480      	push	{r7}
 8023c8e:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 8023c90:	4b1d      	ldr	r3, [pc, #116]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023c92:	edd3 7a00 	vldr	s15, [r3]
 8023c96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ca2:	dd08      	ble.n	8023cb6 <ams_precharge_charge_open_precharge_function+0x2a>
       ams_outputs.error=126;
 8023ca4:	4b19      	ldr	r3, [pc, #100]	; (8023d0c <ams_precharge_charge_open_precharge_function+0x80>)
 8023ca6:	227e      	movs	r2, #126	; 0x7e
 8023ca8:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023caa:	4b17      	ldr	r3, [pc, #92]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023cac:	f04f 0200 	mov.w	r2, #0
 8023cb0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023cb2:	231a      	movs	r3, #26
 8023cb4:	e023      	b.n	8023cfe <ams_precharge_charge_open_precharge_function+0x72>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 8023cb6:	4b14      	ldr	r3, [pc, #80]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023cb8:	edd3 7a00 	vldr	s15, [r3]
 8023cbc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cc8:	d50d      	bpl.n	8023ce6 <ams_precharge_charge_open_precharge_function+0x5a>
 8023cca:	4b11      	ldr	r3, [pc, #68]	; (8023d10 <ams_precharge_charge_open_precharge_function+0x84>)
 8023ccc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d108      	bne.n	8023ce6 <ams_precharge_charge_open_precharge_function+0x5a>
       ams_outputs.precharge_charge_complete=1;
 8023cd4:	4b0d      	ldr	r3, [pc, #52]	; (8023d0c <ams_precharge_charge_open_precharge_function+0x80>)
 8023cd6:	2201      	movs	r2, #1
 8023cd8:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8023cda:	4b0b      	ldr	r3, [pc, #44]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023cdc:	f04f 0200 	mov.w	r2, #0
 8023ce0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8023ce2:	231e      	movs	r3, #30
 8023ce4:	e00b      	b.n	8023cfe <ams_precharge_charge_open_precharge_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 8023ce6:	4b0a      	ldr	r3, [pc, #40]	; (8023d10 <ams_precharge_charge_open_precharge_function+0x84>)
 8023ce8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023cec:	4b06      	ldr	r3, [pc, #24]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023cee:	edd3 7a00 	vldr	s15, [r3]
 8023cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023cf6:	4b04      	ldr	r3, [pc, #16]	; (8023d08 <ams_precharge_charge_open_precharge_function+0x7c>)
 8023cf8:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023cfc:	231d      	movs	r3, #29
}
 8023cfe:	4618      	mov	r0, r3
 8023d00:	46bd      	mov	sp, r7
 8023d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d06:	4770      	bx	lr
 8023d08:	2000193c 	.word	0x2000193c
 8023d0c:	2001b8b0 	.word	0x2001b8b0
 8023d10:	2001b858 	.word	0x2001b858

08023d14 <ams_precharge_charge_exit_function>:

ams_state_t ams_precharge_charge_exit_function() {
 8023d14:	b480      	push	{r7}
 8023d16:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023d18:	4b08      	ldr	r3, [pc, #32]	; (8023d3c <ams_precharge_charge_exit_function+0x28>)
 8023d1a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023d1e:	4b08      	ldr	r3, [pc, #32]	; (8023d40 <ams_precharge_charge_exit_function+0x2c>)
 8023d20:	edd3 7a00 	vldr	s15, [r3]
 8023d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d28:	4b05      	ldr	r3, [pc, #20]	; (8023d40 <ams_precharge_charge_exit_function+0x2c>)
 8023d2a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8023d2e:	231e      	movs	r3, #30
}
 8023d30:	4618      	mov	r0, r3
 8023d32:	46bd      	mov	sp, r7
 8023d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d38:	4770      	bx	lr
 8023d3a:	bf00      	nop
 8023d3c:	2001b858 	.word	0x2001b858
 8023d40:	2000193c 	.word	0x2000193c

08023d44 <ams_precharge_charge_0_function>:

ams_state_t ams_precharge_charge_0_function() {
 8023d44:	b480      	push	{r7}
 8023d46:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8023d48:	4b04      	ldr	r3, [pc, #16]	; (8023d5c <ams_precharge_charge_0_function+0x18>)
 8023d4a:	f04f 0200 	mov.w	r2, #0
 8023d4e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023d50:	2320      	movs	r3, #32
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_CHARGE_0;
}
 8023d52:	4618      	mov	r0, r3
 8023d54:	46bd      	mov	sp, r7
 8023d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d5a:	4770      	bx	lr
 8023d5c:	2000193c 	.word	0x2000193c

08023d60 <ams_precharge_charge_wake_charger_function>:

ams_state_t ams_precharge_charge_wake_charger_function() {
 8023d60:	b480      	push	{r7}
 8023d62:	af00      	add	r7, sp, #0
   if((timer_r2 < 10)&&ams_inputs.charger_is_awake) {
 8023d64:	4b1d      	ldr	r3, [pc, #116]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023d66:	edd3 7a00 	vldr	s15, [r3]
 8023d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d76:	d50d      	bpl.n	8023d94 <ams_precharge_charge_wake_charger_function+0x34>
 8023d78:	4b19      	ldr	r3, [pc, #100]	; (8023de0 <ams_precharge_charge_wake_charger_function+0x80>)
 8023d7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	d008      	beq.n	8023d94 <ams_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 8023d82:	4b18      	ldr	r3, [pc, #96]	; (8023de4 <ams_precharge_charge_wake_charger_function+0x84>)
 8023d84:	2201      	movs	r2, #1
 8023d86:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 8023d88:	4b14      	ldr	r3, [pc, #80]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023d8a:	f04f 0200 	mov.w	r2, #0
 8023d8e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023d90:	2318      	movs	r3, #24
 8023d92:	e01e      	b.n	8023dd2 <ams_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r2 > 10)) {
 8023d94:	4b11      	ldr	r3, [pc, #68]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023d96:	edd3 7a00 	vldr	s15, [r3]
 8023d9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023da6:	dd08      	ble.n	8023dba <ams_precharge_charge_wake_charger_function+0x5a>
       ams_outputs.error=121;
 8023da8:	4b0e      	ldr	r3, [pc, #56]	; (8023de4 <ams_precharge_charge_wake_charger_function+0x84>)
 8023daa:	2279      	movs	r2, #121	; 0x79
 8023dac:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8023dae:	4b0b      	ldr	r3, [pc, #44]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023db0:	f04f 0200 	mov.w	r2, #0
 8023db4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8023db6:	231a      	movs	r3, #26
 8023db8:	e00b      	b.n	8023dd2 <ams_precharge_charge_wake_charger_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 8023dba:	4b09      	ldr	r3, [pc, #36]	; (8023de0 <ams_precharge_charge_wake_charger_function+0x80>)
 8023dbc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023dc0:	4b06      	ldr	r3, [pc, #24]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023dc2:	edd3 7a00 	vldr	s15, [r3]
 8023dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023dca:	4b04      	ldr	r3, [pc, #16]	; (8023ddc <ams_precharge_charge_wake_charger_function+0x7c>)
 8023dcc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023dd0:	2320      	movs	r3, #32
}
 8023dd2:	4618      	mov	r0, r3
 8023dd4:	46bd      	mov	sp, r7
 8023dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dda:	4770      	bx	lr
 8023ddc:	2000193c 	.word	0x2000193c
 8023de0:	2001b858 	.word	0x2001b858
 8023de4:	2001b8b0 	.word	0x2001b8b0

08023de8 <ams_precharge_charge_function>:

ams_state_t ams_precharge_charge_function() {
 8023de8:	b5b0      	push	{r4, r5, r7, lr}
 8023dea:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8023dec:	4b56      	ldr	r3, [pc, #344]	; (8023f48 <ams_precharge_charge_function+0x160>)
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	4618      	mov	r0, r3
 8023df2:	f7dc fb9b 	bl	800052c <__aeabi_f2d>
 8023df6:	4604      	mov	r4, r0
 8023df8:	460d      	mov	r5, r1
 8023dfa:	4b54      	ldr	r3, [pc, #336]	; (8023f4c <ams_precharge_charge_function+0x164>)
 8023dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023dfe:	4618      	mov	r0, r3
 8023e00:	f7dc fb94 	bl	800052c <__aeabi_f2d>
 8023e04:	a34e      	add	r3, pc, #312	; (adr r3, 8023f40 <ams_precharge_charge_function+0x158>)
 8023e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e0a:	f7dc fbe7 	bl	80005dc <__aeabi_dmul>
 8023e0e:	4602      	mov	r2, r0
 8023e10:	460b      	mov	r3, r1
 8023e12:	4620      	mov	r0, r4
 8023e14:	4629      	mov	r1, r5
 8023e16:	f7dc fe53 	bl	8000ac0 <__aeabi_dcmplt>
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	2b00      	cmp	r3, #0
 8023e1e:	d002      	beq.n	8023e26 <ams_precharge_charge_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_CHARGE_0;
 8023e20:	4b4b      	ldr	r3, [pc, #300]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e22:	221f      	movs	r2, #31
 8023e24:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8023e26:	4b4a      	ldr	r3, [pc, #296]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e28:	781b      	ldrb	r3, [r3, #0]
 8023e2a:	3b18      	subs	r3, #24
 8023e2c:	2b08      	cmp	r3, #8
 8023e2e:	d854      	bhi.n	8023eda <ams_precharge_charge_function+0xf2>
 8023e30:	a201      	add	r2, pc, #4	; (adr r2, 8023e38 <ams_precharge_charge_function+0x50>)
 8023e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e36:	bf00      	nop
 8023e38:	08023e5d 	.word	0x08023e5d
 8023e3c:	08023e6b 	.word	0x08023e6b
 8023e40:	08023e79 	.word	0x08023e79
 8023e44:	08023e87 	.word	0x08023e87
 8023e48:	08023e95 	.word	0x08023e95
 8023e4c:	08023ea3 	.word	0x08023ea3
 8023e50:	08023eb1 	.word	0x08023eb1
 8023e54:	08023ebf 	.word	0x08023ebf
 8023e58:	08023ecd 	.word	0x08023ecd
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_charge_close_air_minus_function();
 8023e5c:	f7ff fdd4 	bl	8023a08 <ams_precharge_charge_close_air_minus_function>
 8023e60:	4603      	mov	r3, r0
 8023e62:	461a      	mov	r2, r3
 8023e64:	4b3a      	ldr	r3, [pc, #232]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e66:	701a      	strb	r2, [r3, #0]
           break;
 8023e68:	e03a      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_charge_close_precharge_function();
 8023e6a:	f7ff fe11 	bl	8023a90 <ams_precharge_charge_close_precharge_function>
 8023e6e:	4603      	mov	r3, r0
 8023e70:	461a      	mov	r2, r3
 8023e72:	4b37      	ldr	r3, [pc, #220]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e74:	701a      	strb	r2, [r3, #0]
           break;
 8023e76:	e033      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_ERROR:
           state_r2 = ams_precharge_charge_error_function();
 8023e78:	f7ff fe4c 	bl	8023b14 <ams_precharge_charge_error_function>
 8023e7c:	4603      	mov	r3, r0
 8023e7e:	461a      	mov	r2, r3
 8023e80:	4b33      	ldr	r3, [pc, #204]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e82:	701a      	strb	r2, [r3, #0]
           break;
 8023e84:	e02c      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAIT:
           state_r2 = ams_precharge_charge_wait_function();
 8023e86:	f7ff fe5f 	bl	8023b48 <ams_precharge_charge_wait_function>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	461a      	mov	r2, r3
 8023e8e:	4b30      	ldr	r3, [pc, #192]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e90:	701a      	strb	r2, [r3, #0]
           break;
 8023e92:	e025      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_charge_close_air_plus_function();
 8023e94:	f7ff feb6 	bl	8023c04 <ams_precharge_charge_close_air_plus_function>
 8023e98:	4603      	mov	r3, r0
 8023e9a:	461a      	mov	r2, r3
 8023e9c:	4b2c      	ldr	r3, [pc, #176]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023e9e:	701a      	strb	r2, [r3, #0]
           break;
 8023ea0:	e01e      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_charge_open_precharge_function();
 8023ea2:	f7ff fef3 	bl	8023c8c <ams_precharge_charge_open_precharge_function>
 8023ea6:	4603      	mov	r3, r0
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	4b29      	ldr	r3, [pc, #164]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023eac:	701a      	strb	r2, [r3, #0]
           break;
 8023eae:	e017      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_EXIT:
           state_r2 = ams_precharge_charge_exit_function();
 8023eb0:	f7ff ff30 	bl	8023d14 <ams_precharge_charge_exit_function>
 8023eb4:	4603      	mov	r3, r0
 8023eb6:	461a      	mov	r2, r3
 8023eb8:	4b25      	ldr	r3, [pc, #148]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023eba:	701a      	strb	r2, [r3, #0]
           break;
 8023ebc:	e010      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_0:
           state_r2 = ams_precharge_charge_0_function();
 8023ebe:	f7ff ff41 	bl	8023d44 <ams_precharge_charge_0_function>
 8023ec2:	4603      	mov	r3, r0
 8023ec4:	461a      	mov	r2, r3
 8023ec6:	4b22      	ldr	r3, [pc, #136]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023ec8:	701a      	strb	r2, [r3, #0]
           break;
 8023eca:	e009      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r2 = ams_precharge_charge_wake_charger_function();
 8023ecc:	f7ff ff48 	bl	8023d60 <ams_precharge_charge_wake_charger_function>
 8023ed0:	4603      	mov	r3, r0
 8023ed2:	461a      	mov	r2, r3
 8023ed4:	4b1e      	ldr	r3, [pc, #120]	; (8023f50 <ams_precharge_charge_function+0x168>)
 8023ed6:	701a      	strb	r2, [r3, #0]
           break;
 8023ed8:	e002      	b.n	8023ee0 <ams_precharge_charge_function+0xf8>
       default:
           ams_error();
 8023eda:	f7ff f8bc 	bl	8023056 <ams_error>
           break;
 8023ede:	bf00      	nop
   }

   if(ams_outputs.precharge_charge_complete) {
 8023ee0:	4b1c      	ldr	r3, [pc, #112]	; (8023f54 <ams_precharge_charge_function+0x16c>)
 8023ee2:	78db      	ldrb	r3, [r3, #3]
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d008      	beq.n	8023efa <ams_precharge_charge_function+0x112>
       ams_outputs.precharge_charge_complete=0;
 8023ee8:	4b1a      	ldr	r3, [pc, #104]	; (8023f54 <ams_precharge_charge_function+0x16c>)
 8023eea:	2200      	movs	r2, #0
 8023eec:	70da      	strb	r2, [r3, #3]
       timer_r1 = 0;
 8023eee:	4b16      	ldr	r3, [pc, #88]	; (8023f48 <ams_precharge_charge_function+0x160>)
 8023ef0:	f04f 0200 	mov.w	r2, #0
 8023ef4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE;
 8023ef6:	2321      	movs	r3, #33	; 0x21
 8023ef8:	e01f      	b.n	8023f3a <ams_precharge_charge_function+0x152>
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 8023efa:	4b16      	ldr	r3, [pc, #88]	; (8023f54 <ams_precharge_charge_function+0x16c>)
 8023efc:	799b      	ldrb	r3, [r3, #6]
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d109      	bne.n	8023f16 <ams_precharge_charge_function+0x12e>
 8023f02:	4b12      	ldr	r3, [pc, #72]	; (8023f4c <ams_precharge_charge_function+0x164>)
 8023f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8023f08:	2b00      	cmp	r3, #0
 8023f0a:	d104      	bne.n	8023f16 <ams_precharge_charge_function+0x12e>
 8023f0c:	4b0f      	ldr	r3, [pc, #60]	; (8023f4c <ams_precharge_charge_function+0x164>)
 8023f0e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8023f12:	2b00      	cmp	r3, #0
 8023f14:	d005      	beq.n	8023f22 <ams_precharge_charge_function+0x13a>
       timer_r1 = 0;
 8023f16:	4b0c      	ldr	r3, [pc, #48]	; (8023f48 <ams_precharge_charge_function+0x160>)
 8023f18:	f04f 0200 	mov.w	r2, #0
 8023f1c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8023f1e:	2312      	movs	r3, #18
 8023f20:	e00b      	b.n	8023f3a <ams_precharge_charge_function+0x152>
   }


   timer_r1 += ams_inputs.Ts;
 8023f22:	4b0a      	ldr	r3, [pc, #40]	; (8023f4c <ams_precharge_charge_function+0x164>)
 8023f24:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023f28:	4b07      	ldr	r3, [pc, #28]	; (8023f48 <ams_precharge_charge_function+0x160>)
 8023f2a:	edd3 7a00 	vldr	s15, [r3]
 8023f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f32:	4b05      	ldr	r3, [pc, #20]	; (8023f48 <ams_precharge_charge_function+0x160>)
 8023f34:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE;
 8023f38:	2317      	movs	r3, #23
}
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8023f3e:	bf00      	nop
 8023f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8023f44:	3f50624d 	.word	0x3f50624d
 8023f48:	20001938 	.word	0x20001938
 8023f4c:	2001b858 	.word	0x2001b858
 8023f50:	20001932 	.word	0x20001932
 8023f54:	2001b8b0 	.word	0x2001b8b0

08023f58 <ams_charge_0_function>:

ams_state_t ams_charge_0_function() {
 8023f58:	b480      	push	{r7}
 8023f5a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8023f5c:	4b04      	ldr	r3, [pc, #16]	; (8023f70 <ams_charge_0_function+0x18>)
 8023f5e:	f04f 0200 	mov.w	r2, #0
 8023f62:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_CHARGE;
 8023f64:	2323      	movs	r3, #35	; 0x23
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_CHARGE_0;
}
 8023f66:	4618      	mov	r0, r3
 8023f68:	46bd      	mov	sp, r7
 8023f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f6e:	4770      	bx	lr
 8023f70:	2000193c 	.word	0x2000193c
 8023f74:	00000000 	.word	0x00000000

08023f78 <ams_charge_charge_function>:

ams_state_t ams_charge_charge_function() {
 8023f78:	b580      	push	{r7, lr}
 8023f7a:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 8023f7c:	4b16      	ldr	r3, [pc, #88]	; (8023fd8 <ams_charge_charge_function+0x60>)
 8023f7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8023f82:	a313      	add	r3, pc, #76	; (adr r3, 8023fd0 <ams_charge_charge_function+0x58>)
 8023f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f88:	f7dc fdb8 	bl	8000afc <__aeabi_dcmpgt>
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	2b00      	cmp	r3, #0
 8023f90:	d104      	bne.n	8023f9c <ams_charge_charge_function+0x24>
 8023f92:	4b11      	ldr	r3, [pc, #68]	; (8023fd8 <ams_charge_charge_function+0x60>)
 8023f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d108      	bne.n	8023fae <ams_charge_charge_function+0x36>
       ams_outputs.enable_charger=0;
 8023f9c:	4b0f      	ldr	r3, [pc, #60]	; (8023fdc <ams_charge_charge_function+0x64>)
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8023fa2:	4b0f      	ldr	r3, [pc, #60]	; (8023fe0 <ams_charge_charge_function+0x68>)
 8023fa4:	f04f 0200 	mov.w	r2, #0
 8023fa8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_END_CHARGE;
 8023faa:	2324      	movs	r3, #36	; 0x24
 8023fac:	e00b      	b.n	8023fc6 <ams_charge_charge_function+0x4e>
   }

   timer_r2 += ams_inputs.Ts;
 8023fae:	4b0a      	ldr	r3, [pc, #40]	; (8023fd8 <ams_charge_charge_function+0x60>)
 8023fb0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8023fb4:	4b0a      	ldr	r3, [pc, #40]	; (8023fe0 <ams_charge_charge_function+0x68>)
 8023fb6:	edd3 7a00 	vldr	s15, [r3]
 8023fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023fbe:	4b08      	ldr	r3, [pc, #32]	; (8023fe0 <ams_charge_charge_function+0x68>)
 8023fc0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_CHARGE;
 8023fc4:	2323      	movs	r3, #35	; 0x23
}
 8023fc6:	4618      	mov	r0, r3
 8023fc8:	bd80      	pop	{r7, pc}
 8023fca:	bf00      	nop
 8023fcc:	f3af 8000 	nop.w
 8023fd0:	9999999a 	.word	0x9999999a
 8023fd4:	40109999 	.word	0x40109999
 8023fd8:	2001b858 	.word	0x2001b858
 8023fdc:	2001b8b0 	.word	0x2001b8b0
 8023fe0:	2000193c 	.word	0x2000193c
 8023fe4:	00000000 	.word	0x00000000

08023fe8 <ams_charge_end_charge_function>:

ams_state_t ams_charge_end_charge_function() {
 8023fe8:	b580      	push	{r7, lr}
 8023fea:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 8023fec:	4b30      	ldr	r3, [pc, #192]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 8023fee:	edd3 7a00 	vldr	s15, [r3]
 8023ff2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8023ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ffe:	d528      	bpl.n	8024052 <ams_charge_end_charge_function+0x6a>
 8024000:	4b2c      	ldr	r3, [pc, #176]	; (80240b4 <ams_charge_end_charge_function+0xcc>)
 8024002:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024006:	4610      	mov	r0, r2
 8024008:	4619      	mov	r1, r3
 802400a:	f7dc fddf 	bl	8000bcc <__aeabi_d2f>
 802400e:	ee07 0a90 	vmov	s15, r0
 8024012:	eef0 7ae7 	vabs.f32	s15, s15
 8024016:	ee17 0a90 	vmov	r0, s15
 802401a:	f7dc fa87 	bl	800052c <__aeabi_f2d>
 802401e:	a322      	add	r3, pc, #136	; (adr r3, 80240a8 <ams_charge_end_charge_function+0xc0>)
 8024020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024024:	f7dc fd4c 	bl	8000ac0 <__aeabi_dcmplt>
 8024028:	4603      	mov	r3, r0
 802402a:	2b00      	cmp	r3, #0
 802402c:	d011      	beq.n	8024052 <ams_charge_end_charge_function+0x6a>
       ams_outputs.close_air_plus=0;
 802402e:	4b22      	ldr	r3, [pc, #136]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 8024030:	2200      	movs	r2, #0
 8024032:	711a      	strb	r2, [r3, #4]
       ams_outputs.close_air_minus=0;
 8024034:	4b20      	ldr	r3, [pc, #128]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 8024036:	2200      	movs	r2, #0
 8024038:	715a      	strb	r2, [r3, #5]
       ams_outputs.close_precharge=0;
 802403a:	4b1f      	ldr	r3, [pc, #124]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 802403c:	2200      	movs	r2, #0
 802403e:	71da      	strb	r2, [r3, #7]
       ams_outputs.charge_complete=1;
 8024040:	4b1d      	ldr	r3, [pc, #116]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 8024042:	2201      	movs	r2, #1
 8024044:	721a      	strb	r2, [r3, #8]
       timer_r2 = 0;
 8024046:	4b1a      	ldr	r3, [pc, #104]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 8024048:	f04f 0200 	mov.w	r2, #0
 802404c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_EXIT;
 802404e:	2325      	movs	r3, #37	; 0x25
 8024050:	e027      	b.n	80240a2 <ams_charge_end_charge_function+0xba>
   }

   if((timer_r2 > 7)) {
 8024052:	4b17      	ldr	r3, [pc, #92]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 8024054:	edd3 7a00 	vldr	s15, [r3]
 8024058:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 802405c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024064:	dd11      	ble.n	802408a <ams_charge_end_charge_function+0xa2>
       ams_outputs.close_air_plus=0;
 8024066:	4b14      	ldr	r3, [pc, #80]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 8024068:	2200      	movs	r2, #0
 802406a:	711a      	strb	r2, [r3, #4]
       ams_outputs.close_air_minus=0;
 802406c:	4b12      	ldr	r3, [pc, #72]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 802406e:	2200      	movs	r2, #0
 8024070:	715a      	strb	r2, [r3, #5]
       ams_outputs.close_precharge=0;
 8024072:	4b11      	ldr	r3, [pc, #68]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 8024074:	2200      	movs	r2, #0
 8024076:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=141;
 8024078:	4b0f      	ldr	r3, [pc, #60]	; (80240b8 <ams_charge_end_charge_function+0xd0>)
 802407a:	228d      	movs	r2, #141	; 0x8d
 802407c:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 802407e:	4b0c      	ldr	r3, [pc, #48]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 8024080:	f04f 0200 	mov.w	r2, #0
 8024084:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_FORCE_QUIT;
 8024086:	2326      	movs	r3, #38	; 0x26
 8024088:	e00b      	b.n	80240a2 <ams_charge_end_charge_function+0xba>
   }

   timer_r2 += ams_inputs.Ts;
 802408a:	4b0a      	ldr	r3, [pc, #40]	; (80240b4 <ams_charge_end_charge_function+0xcc>)
 802408c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024090:	4b07      	ldr	r3, [pc, #28]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 8024092:	edd3 7a00 	vldr	s15, [r3]
 8024096:	ee77 7a27 	vadd.f32	s15, s14, s15
 802409a:	4b05      	ldr	r3, [pc, #20]	; (80240b0 <ams_charge_end_charge_function+0xc8>)
 802409c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_END_CHARGE;
 80240a0:	2324      	movs	r3, #36	; 0x24
}
 80240a2:	4618      	mov	r0, r3
 80240a4:	bd80      	pop	{r7, pc}
 80240a6:	bf00      	nop
 80240a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80240ac:	3f50624d 	.word	0x3f50624d
 80240b0:	2000193c 	.word	0x2000193c
 80240b4:	2001b858 	.word	0x2001b858
 80240b8:	2001b8b0 	.word	0x2001b8b0

080240bc <ams_charge_exit_function>:

ams_state_t ams_charge_exit_function() {
 80240bc:	b480      	push	{r7}
 80240be:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80240c0:	4b08      	ldr	r3, [pc, #32]	; (80240e4 <ams_charge_exit_function+0x28>)
 80240c2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80240c6:	4b08      	ldr	r3, [pc, #32]	; (80240e8 <ams_charge_exit_function+0x2c>)
 80240c8:	edd3 7a00 	vldr	s15, [r3]
 80240cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80240d0:	4b05      	ldr	r3, [pc, #20]	; (80240e8 <ams_charge_exit_function+0x2c>)
 80240d2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_EXIT;
 80240d6:	2325      	movs	r3, #37	; 0x25
}
 80240d8:	4618      	mov	r0, r3
 80240da:	46bd      	mov	sp, r7
 80240dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240e0:	4770      	bx	lr
 80240e2:	bf00      	nop
 80240e4:	2001b858 	.word	0x2001b858
 80240e8:	2000193c 	.word	0x2000193c

080240ec <ams_charge_force_quit_function>:

ams_state_t ams_charge_force_quit_function() {
 80240ec:	b480      	push	{r7}
 80240ee:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80240f0:	4b08      	ldr	r3, [pc, #32]	; (8024114 <ams_charge_force_quit_function+0x28>)
 80240f2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80240f6:	4b08      	ldr	r3, [pc, #32]	; (8024118 <ams_charge_force_quit_function+0x2c>)
 80240f8:	edd3 7a00 	vldr	s15, [r3]
 80240fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024100:	4b05      	ldr	r3, [pc, #20]	; (8024118 <ams_charge_force_quit_function+0x2c>)
 8024102:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_FORCE_QUIT;
 8024106:	2326      	movs	r3, #38	; 0x26
}
 8024108:	4618      	mov	r0, r3
 802410a:	46bd      	mov	sp, r7
 802410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024110:	4770      	bx	lr
 8024112:	bf00      	nop
 8024114:	2001b858 	.word	0x2001b858
 8024118:	2000193c 	.word	0x2000193c
 802411c:	00000000 	.word	0x00000000

08024120 <ams_charge_function>:

ams_state_t ams_charge_function() {
 8024120:	b5b0      	push	{r4, r5, r7, lr}
 8024122:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8024124:	4b46      	ldr	r3, [pc, #280]	; (8024240 <ams_charge_function+0x120>)
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	4618      	mov	r0, r3
 802412a:	f7dc f9ff 	bl	800052c <__aeabi_f2d>
 802412e:	4604      	mov	r4, r0
 8024130:	460d      	mov	r5, r1
 8024132:	4b44      	ldr	r3, [pc, #272]	; (8024244 <ams_charge_function+0x124>)
 8024134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024136:	4618      	mov	r0, r3
 8024138:	f7dc f9f8 	bl	800052c <__aeabi_f2d>
 802413c:	a33e      	add	r3, pc, #248	; (adr r3, 8024238 <ams_charge_function+0x118>)
 802413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024142:	f7dc fa4b 	bl	80005dc <__aeabi_dmul>
 8024146:	4602      	mov	r2, r0
 8024148:	460b      	mov	r3, r1
 802414a:	4620      	mov	r0, r4
 802414c:	4629      	mov	r1, r5
 802414e:	f7dc fcb7 	bl	8000ac0 <__aeabi_dcmplt>
 8024152:	4603      	mov	r3, r0
 8024154:	2b00      	cmp	r3, #0
 8024156:	d002      	beq.n	802415e <ams_charge_function+0x3e>
       state_r2 = STATE_AMS_CHARGE_0;
 8024158:	4b3b      	ldr	r3, [pc, #236]	; (8024248 <ams_charge_function+0x128>)
 802415a:	2222      	movs	r2, #34	; 0x22
 802415c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 802415e:	4b3a      	ldr	r3, [pc, #232]	; (8024248 <ams_charge_function+0x128>)
 8024160:	781b      	ldrb	r3, [r3, #0]
 8024162:	3b22      	subs	r3, #34	; 0x22
 8024164:	2b04      	cmp	r3, #4
 8024166:	d830      	bhi.n	80241ca <ams_charge_function+0xaa>
 8024168:	a201      	add	r2, pc, #4	; (adr r2, 8024170 <ams_charge_function+0x50>)
 802416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802416e:	bf00      	nop
 8024170:	08024185 	.word	0x08024185
 8024174:	08024193 	.word	0x08024193
 8024178:	080241a1 	.word	0x080241a1
 802417c:	080241af 	.word	0x080241af
 8024180:	080241bd 	.word	0x080241bd
       case STATE_AMS_CHARGE_0:
           state_r2 = ams_charge_0_function();
 8024184:	f7ff fee8 	bl	8023f58 <ams_charge_0_function>
 8024188:	4603      	mov	r3, r0
 802418a:	461a      	mov	r2, r3
 802418c:	4b2e      	ldr	r3, [pc, #184]	; (8024248 <ams_charge_function+0x128>)
 802418e:	701a      	strb	r2, [r3, #0]
           break;
 8024190:	e01e      	b.n	80241d0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_CHARGE:
           state_r2 = ams_charge_charge_function();
 8024192:	f7ff fef1 	bl	8023f78 <ams_charge_charge_function>
 8024196:	4603      	mov	r3, r0
 8024198:	461a      	mov	r2, r3
 802419a:	4b2b      	ldr	r3, [pc, #172]	; (8024248 <ams_charge_function+0x128>)
 802419c:	701a      	strb	r2, [r3, #0]
           break;
 802419e:	e017      	b.n	80241d0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_END_CHARGE:
           state_r2 = ams_charge_end_charge_function();
 80241a0:	f7ff ff22 	bl	8023fe8 <ams_charge_end_charge_function>
 80241a4:	4603      	mov	r3, r0
 80241a6:	461a      	mov	r2, r3
 80241a8:	4b27      	ldr	r3, [pc, #156]	; (8024248 <ams_charge_function+0x128>)
 80241aa:	701a      	strb	r2, [r3, #0]
           break;
 80241ac:	e010      	b.n	80241d0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_EXIT:
           state_r2 = ams_charge_exit_function();
 80241ae:	f7ff ff85 	bl	80240bc <ams_charge_exit_function>
 80241b2:	4603      	mov	r3, r0
 80241b4:	461a      	mov	r2, r3
 80241b6:	4b24      	ldr	r3, [pc, #144]	; (8024248 <ams_charge_function+0x128>)
 80241b8:	701a      	strb	r2, [r3, #0]
           break;
 80241ba:	e009      	b.n	80241d0 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_FORCE_QUIT:
           state_r2 = ams_charge_force_quit_function();
 80241bc:	f7ff ff96 	bl	80240ec <ams_charge_force_quit_function>
 80241c0:	4603      	mov	r3, r0
 80241c2:	461a      	mov	r2, r3
 80241c4:	4b20      	ldr	r3, [pc, #128]	; (8024248 <ams_charge_function+0x128>)
 80241c6:	701a      	strb	r2, [r3, #0]
           break;
 80241c8:	e002      	b.n	80241d0 <ams_charge_function+0xb0>
       default:
           ams_error();
 80241ca:	f7fe ff44 	bl	8023056 <ams_error>
           break;
 80241ce:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_outputs.error) {
 80241d0:	4b1c      	ldr	r3, [pc, #112]	; (8024244 <ams_charge_function+0x124>)
 80241d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d108      	bne.n	80241ec <ams_charge_function+0xcc>
 80241da:	4b1a      	ldr	r3, [pc, #104]	; (8024244 <ams_charge_function+0x124>)
 80241dc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d103      	bne.n	80241ec <ams_charge_function+0xcc>
 80241e4:	4b19      	ldr	r3, [pc, #100]	; (802424c <ams_charge_function+0x12c>)
 80241e6:	799b      	ldrb	r3, [r3, #6]
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d005      	beq.n	80241f8 <ams_charge_function+0xd8>
       timer_r1 = 0;
 80241ec:	4b14      	ldr	r3, [pc, #80]	; (8024240 <ams_charge_function+0x120>)
 80241ee:	f04f 0200 	mov.w	r2, #0
 80241f2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 80241f4:	2312      	movs	r3, #18
 80241f6:	e01b      	b.n	8024230 <ams_charge_function+0x110>
   }

   if(ams_outputs.charge_complete) {
 80241f8:	4b14      	ldr	r3, [pc, #80]	; (802424c <ams_charge_function+0x12c>)
 80241fa:	7a1b      	ldrb	r3, [r3, #8]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d00b      	beq.n	8024218 <ams_charge_function+0xf8>
       ams_outputs.charge_complete=0;
 8024200:	4b12      	ldr	r3, [pc, #72]	; (802424c <ams_charge_function+0x12c>)
 8024202:	2200      	movs	r2, #0
 8024204:	721a      	strb	r2, [r3, #8]
       ams_outputs.enable_charger=0;
 8024206:	4b11      	ldr	r3, [pc, #68]	; (802424c <ams_charge_function+0x12c>)
 8024208:	2200      	movs	r2, #0
 802420a:	701a      	strb	r2, [r3, #0]
       timer_r1 = 0;
 802420c:	4b0c      	ldr	r3, [pc, #48]	; (8024240 <ams_charge_function+0x120>)
 802420e:	f04f 0200 	mov.w	r2, #0
 8024212:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8024214:	2327      	movs	r3, #39	; 0x27
 8024216:	e00b      	b.n	8024230 <ams_charge_function+0x110>
   }


   timer_r1 += ams_inputs.Ts;
 8024218:	4b0a      	ldr	r3, [pc, #40]	; (8024244 <ams_charge_function+0x124>)
 802421a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 802421e:	4b08      	ldr	r3, [pc, #32]	; (8024240 <ams_charge_function+0x120>)
 8024220:	edd3 7a00 	vldr	s15, [r3]
 8024224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024228:	4b05      	ldr	r3, [pc, #20]	; (8024240 <ams_charge_function+0x120>)
 802422a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE;
 802422e:	2321      	movs	r3, #33	; 0x21
}
 8024230:	4618      	mov	r0, r3
 8024232:	bdb0      	pop	{r4, r5, r7, pc}
 8024234:	f3af 8000 	nop.w
 8024238:	d2f1a9fc 	.word	0xd2f1a9fc
 802423c:	3f50624d 	.word	0x3f50624d
 8024240:	20001938 	.word	0x20001938
 8024244:	2001b858 	.word	0x2001b858
 8024248:	20001932 	.word	0x20001932
 802424c:	2001b8b0 	.word	0x2001b8b0

08024250 <ams_idle_function>:

ams_state_t ams_idle_function() {
 8024250:	b580      	push	{r7, lr}
 8024252:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive) {
 8024254:	4b28      	ldr	r3, [pc, #160]	; (80242f8 <ams_idle_function+0xa8>)
 8024256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802425a:	2b00      	cmp	r3, #0
 802425c:	d00a      	beq.n	8024274 <ams_idle_function+0x24>
 802425e:	4b26      	ldr	r3, [pc, #152]	; (80242f8 <ams_idle_function+0xa8>)
 8024260:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8024264:	2b00      	cmp	r3, #0
 8024266:	d005      	beq.n	8024274 <ams_idle_function+0x24>
       timer_r1 = 0;
 8024268:	4b24      	ldr	r3, [pc, #144]	; (80242fc <ams_idle_function+0xac>)
 802426a:	f04f 0200 	mov.w	r2, #0
 802426e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE;
 8024270:	2302      	movs	r3, #2
 8024272:	e038      	b.n	80242e6 <ams_idle_function+0x96>
   }

   if(ams_inputs.SC&&ams_inputs.charge) {
 8024274:	4b20      	ldr	r3, [pc, #128]	; (80242f8 <ams_idle_function+0xa8>)
 8024276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802427a:	2b00      	cmp	r3, #0
 802427c:	d00d      	beq.n	802429a <ams_idle_function+0x4a>
 802427e:	4b1e      	ldr	r3, [pc, #120]	; (80242f8 <ams_idle_function+0xa8>)
 8024280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8024284:	2b00      	cmp	r3, #0
 8024286:	d008      	beq.n	802429a <ams_idle_function+0x4a>
       ams_outputs.enable_charger=1;
 8024288:	4b1d      	ldr	r3, [pc, #116]	; (8024300 <ams_idle_function+0xb0>)
 802428a:	2201      	movs	r2, #1
 802428c:	701a      	strb	r2, [r3, #0]
       timer_r1 = 0;
 802428e:	4b1b      	ldr	r3, [pc, #108]	; (80242fc <ams_idle_function+0xac>)
 8024290:	f04f 0200 	mov.w	r2, #0
 8024294:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE;
 8024296:	2317      	movs	r3, #23
 8024298:	e025      	b.n	80242e6 <ams_idle_function+0x96>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)) {
 802429a:	4b17      	ldr	r3, [pc, #92]	; (80242f8 <ams_idle_function+0xa8>)
 802429c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d114      	bne.n	80242ce <ams_idle_function+0x7e>
 80242a4:	4b14      	ldr	r3, [pc, #80]	; (80242f8 <ams_idle_function+0xa8>)
 80242a6:	781b      	ldrb	r3, [r3, #0]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d010      	beq.n	80242ce <ams_idle_function+0x7e>
 80242ac:	4b12      	ldr	r3, [pc, #72]	; (80242f8 <ams_idle_function+0xa8>)
 80242ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80242b2:	a30f      	add	r3, pc, #60	; (adr r3, 80242f0 <ams_idle_function+0xa0>)
 80242b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242b8:	f7dc fc20 	bl	8000afc <__aeabi_dcmpgt>
 80242bc:	4603      	mov	r3, r0
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d005      	beq.n	80242ce <ams_idle_function+0x7e>
       timer_r1 = 0;
 80242c2:	4b0e      	ldr	r3, [pc, #56]	; (80242fc <ams_idle_function+0xac>)
 80242c4:	f04f 0200 	mov.w	r2, #0
 80242c8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE;
 80242ca:	2328      	movs	r3, #40	; 0x28
 80242cc:	e00b      	b.n	80242e6 <ams_idle_function+0x96>
   }

   timer_r1 += ams_inputs.Ts;
 80242ce:	4b0a      	ldr	r3, [pc, #40]	; (80242f8 <ams_idle_function+0xa8>)
 80242d0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80242d4:	4b09      	ldr	r3, [pc, #36]	; (80242fc <ams_idle_function+0xac>)
 80242d6:	edd3 7a00 	vldr	s15, [r3]
 80242da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80242de:	4b07      	ldr	r3, [pc, #28]	; (80242fc <ams_idle_function+0xac>)
 80242e0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_IDLE;
 80242e4:	2327      	movs	r3, #39	; 0x27
}
 80242e6:	4618      	mov	r0, r3
 80242e8:	bd80      	pop	{r7, pc}
 80242ea:	bf00      	nop
 80242ec:	f3af 8000 	nop.w
 80242f0:	47ae147b 	.word	0x47ae147b
 80242f4:	3f847ae1 	.word	0x3f847ae1
 80242f8:	2001b858 	.word	0x2001b858
 80242fc:	20001938 	.word	0x20001938
 8024300:	2001b8b0 	.word	0x2001b8b0

08024304 <ams_balance_0_function>:

ams_state_t ams_balance_0_function() {
 8024304:	b480      	push	{r7}
 8024306:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8024308:	4b04      	ldr	r3, [pc, #16]	; (802431c <ams_balance_0_function+0x18>)
 802430a:	f04f 0200 	mov.w	r2, #0
 802430e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 8024310:	232a      	movs	r3, #42	; 0x2a
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_BALANCE_0;
}
 8024312:	4618      	mov	r0, r3
 8024314:	46bd      	mov	sp, r7
 8024316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431a:	4770      	bx	lr
 802431c:	2000193c 	.word	0x2000193c

08024320 <ams_balance_balance_function>:

ams_state_t ams_balance_balance_function() {
 8024320:	b580      	push	{r7, lr}
 8024322:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 8024324:	f7f1 f9b4 	bl	8015690 <do_cell_balancing>
       timer_r2 = 0;
 8024328:	4b03      	ldr	r3, [pc, #12]	; (8024338 <ams_balance_balance_function+0x18>)
 802432a:	f04f 0200 	mov.w	r2, #0
 802432e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_WAIT;
 8024330:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_BALANCE_BALANCE;
}
 8024332:	4618      	mov	r0, r3
 8024334:	bd80      	pop	{r7, pc}
 8024336:	bf00      	nop
 8024338:	2000193c 	.word	0x2000193c

0802433c <ams_balance_wait_function>:

ams_state_t ams_balance_wait_function() {
 802433c:	b480      	push	{r7}
 802433e:	af00      	add	r7, sp, #0
   if((timer_r2 > 60)) {
 8024340:	4b10      	ldr	r3, [pc, #64]	; (8024384 <ams_balance_wait_function+0x48>)
 8024342:	edd3 7a00 	vldr	s15, [r3]
 8024346:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8024388 <ams_balance_wait_function+0x4c>
 802434a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024352:	dd05      	ble.n	8024360 <ams_balance_wait_function+0x24>
       timer_r2 = 0;
 8024354:	4b0b      	ldr	r3, [pc, #44]	; (8024384 <ams_balance_wait_function+0x48>)
 8024356:	f04f 0200 	mov.w	r2, #0
 802435a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 802435c:	232a      	movs	r3, #42	; 0x2a
 802435e:	e00b      	b.n	8024378 <ams_balance_wait_function+0x3c>
   }

   timer_r2 += ams_inputs.Ts;
 8024360:	4b0a      	ldr	r3, [pc, #40]	; (802438c <ams_balance_wait_function+0x50>)
 8024362:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024366:	4b07      	ldr	r3, [pc, #28]	; (8024384 <ams_balance_wait_function+0x48>)
 8024368:	edd3 7a00 	vldr	s15, [r3]
 802436c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024370:	4b04      	ldr	r3, [pc, #16]	; (8024384 <ams_balance_wait_function+0x48>)
 8024372:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE_WAIT;
 8024376:	232b      	movs	r3, #43	; 0x2b
}
 8024378:	4618      	mov	r0, r3
 802437a:	46bd      	mov	sp, r7
 802437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024380:	4770      	bx	lr
 8024382:	bf00      	nop
 8024384:	2000193c 	.word	0x2000193c
 8024388:	42700000 	.word	0x42700000
 802438c:	2001b858 	.word	0x2001b858

08024390 <ams_balance_function>:

ams_state_t ams_balance_function() {
 8024390:	b5b0      	push	{r4, r5, r7, lr}
 8024392:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8024394:	4b38      	ldr	r3, [pc, #224]	; (8024478 <ams_balance_function+0xe8>)
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	4618      	mov	r0, r3
 802439a:	f7dc f8c7 	bl	800052c <__aeabi_f2d>
 802439e:	4604      	mov	r4, r0
 80243a0:	460d      	mov	r5, r1
 80243a2:	4b36      	ldr	r3, [pc, #216]	; (802447c <ams_balance_function+0xec>)
 80243a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80243a6:	4618      	mov	r0, r3
 80243a8:	f7dc f8c0 	bl	800052c <__aeabi_f2d>
 80243ac:	a32e      	add	r3, pc, #184	; (adr r3, 8024468 <ams_balance_function+0xd8>)
 80243ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243b2:	f7dc f913 	bl	80005dc <__aeabi_dmul>
 80243b6:	4602      	mov	r2, r0
 80243b8:	460b      	mov	r3, r1
 80243ba:	4620      	mov	r0, r4
 80243bc:	4629      	mov	r1, r5
 80243be:	f7dc fb7f 	bl	8000ac0 <__aeabi_dcmplt>
 80243c2:	4603      	mov	r3, r0
 80243c4:	2b00      	cmp	r3, #0
 80243c6:	d002      	beq.n	80243ce <ams_balance_function+0x3e>
       state_r2 = STATE_AMS_BALANCE_0;
 80243c8:	4b2d      	ldr	r3, [pc, #180]	; (8024480 <ams_balance_function+0xf0>)
 80243ca:	2229      	movs	r2, #41	; 0x29
 80243cc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80243ce:	4b2c      	ldr	r3, [pc, #176]	; (8024480 <ams_balance_function+0xf0>)
 80243d0:	781b      	ldrb	r3, [r3, #0]
 80243d2:	2b2b      	cmp	r3, #43	; 0x2b
 80243d4:	d014      	beq.n	8024400 <ams_balance_function+0x70>
 80243d6:	2b2b      	cmp	r3, #43	; 0x2b
 80243d8:	dc19      	bgt.n	802440e <ams_balance_function+0x7e>
 80243da:	2b29      	cmp	r3, #41	; 0x29
 80243dc:	d002      	beq.n	80243e4 <ams_balance_function+0x54>
 80243de:	2b2a      	cmp	r3, #42	; 0x2a
 80243e0:	d007      	beq.n	80243f2 <ams_balance_function+0x62>
 80243e2:	e014      	b.n	802440e <ams_balance_function+0x7e>
       case STATE_AMS_BALANCE_0:
           state_r2 = ams_balance_0_function();
 80243e4:	f7ff ff8e 	bl	8024304 <ams_balance_0_function>
 80243e8:	4603      	mov	r3, r0
 80243ea:	461a      	mov	r2, r3
 80243ec:	4b24      	ldr	r3, [pc, #144]	; (8024480 <ams_balance_function+0xf0>)
 80243ee:	701a      	strb	r2, [r3, #0]
           break;
 80243f0:	e010      	b.n	8024414 <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_BALANCE:
           state_r2 = ams_balance_balance_function();
 80243f2:	f7ff ff95 	bl	8024320 <ams_balance_balance_function>
 80243f6:	4603      	mov	r3, r0
 80243f8:	461a      	mov	r2, r3
 80243fa:	4b21      	ldr	r3, [pc, #132]	; (8024480 <ams_balance_function+0xf0>)
 80243fc:	701a      	strb	r2, [r3, #0]
           break;
 80243fe:	e009      	b.n	8024414 <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_WAIT:
           state_r2 = ams_balance_wait_function();
 8024400:	f7ff ff9c 	bl	802433c <ams_balance_wait_function>
 8024404:	4603      	mov	r3, r0
 8024406:	461a      	mov	r2, r3
 8024408:	4b1d      	ldr	r3, [pc, #116]	; (8024480 <ams_balance_function+0xf0>)
 802440a:	701a      	strb	r2, [r3, #0]
           break;
 802440c:	e002      	b.n	8024414 <ams_balance_function+0x84>
       default:
           ams_error();
 802440e:	f7fe fe22 	bl	8023056 <ams_error>
           break;
 8024412:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 8024414:	4b19      	ldr	r3, [pc, #100]	; (802447c <ams_balance_function+0xec>)
 8024416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802441a:	2b00      	cmp	r3, #0
 802441c:	d10e      	bne.n	802443c <ams_balance_function+0xac>
 802441e:	4b17      	ldr	r3, [pc, #92]	; (802447c <ams_balance_function+0xec>)
 8024420:	781b      	ldrb	r3, [r3, #0]
 8024422:	2b00      	cmp	r3, #0
 8024424:	d00a      	beq.n	802443c <ams_balance_function+0xac>
 8024426:	4b15      	ldr	r3, [pc, #84]	; (802447c <ams_balance_function+0xec>)
 8024428:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802442c:	a310      	add	r3, pc, #64	; (adr r3, 8024470 <ams_balance_function+0xe0>)
 802442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024432:	f7dc fb45 	bl	8000ac0 <__aeabi_dcmplt>
 8024436:	4603      	mov	r3, r0
 8024438:	2b00      	cmp	r3, #0
 802443a:	d007      	beq.n	802444c <ams_balance_function+0xbc>
       end_cell_balancing();
 802443c:	f7f1 f964 	bl	8015708 <end_cell_balancing>
       timer_r1 = 0;
 8024440:	4b0d      	ldr	r3, [pc, #52]	; (8024478 <ams_balance_function+0xe8>)
 8024442:	f04f 0200 	mov.w	r2, #0
 8024446:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8024448:	2327      	movs	r3, #39	; 0x27
 802444a:	e00b      	b.n	8024464 <ams_balance_function+0xd4>
   }


   timer_r1 += ams_inputs.Ts;
 802444c:	4b0b      	ldr	r3, [pc, #44]	; (802447c <ams_balance_function+0xec>)
 802444e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024452:	4b09      	ldr	r3, [pc, #36]	; (8024478 <ams_balance_function+0xe8>)
 8024454:	edd3 7a00 	vldr	s15, [r3]
 8024458:	ee77 7a27 	vadd.f32	s15, s14, s15
 802445c:	4b06      	ldr	r3, [pc, #24]	; (8024478 <ams_balance_function+0xe8>)
 802445e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE;
 8024462:	2328      	movs	r3, #40	; 0x28
}
 8024464:	4618      	mov	r0, r3
 8024466:	bdb0      	pop	{r4, r5, r7, pc}
 8024468:	d2f1a9fc 	.word	0xd2f1a9fc
 802446c:	3f50624d 	.word	0x3f50624d
 8024470:	47ae147b 	.word	0x47ae147b
 8024474:	3f747ae1 	.word	0x3f747ae1
 8024478:	20001938 	.word	0x20001938
 802447c:	2001b858 	.word	0x2001b858
 8024480:	20001932 	.word	0x20001932

08024484 <ams_0_function>:

ams_state_t ams_0_function() {
 8024484:	b480      	push	{r7}
 8024486:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 8024488:	4b04      	ldr	r3, [pc, #16]	; (802449c <ams_0_function+0x18>)
 802448a:	f04f 0200 	mov.w	r2, #0
 802448e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8024490:	2327      	movs	r3, #39	; 0x27
   }

   timer_r1 += ams_inputs.Ts;
   return STATE_AMS_0;
}
 8024492:	4618      	mov	r0, r3
 8024494:	46bd      	mov	sp, r7
 8024496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802449a:	4770      	bx	lr
 802449c:	20001938 	.word	0x20001938

080244a0 <ams_function>:

ams_state_t ams_function() {
 80244a0:	b5b0      	push	{r4, r5, r7, lr}
 80244a2:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_inputs.Ts) {
 80244a4:	4b64      	ldr	r3, [pc, #400]	; (8024638 <ams_function+0x198>)
 80244a6:	681b      	ldr	r3, [r3, #0]
 80244a8:	4618      	mov	r0, r3
 80244aa:	f7dc f83f 	bl	800052c <__aeabi_f2d>
 80244ae:	4604      	mov	r4, r0
 80244b0:	460d      	mov	r5, r1
 80244b2:	4b62      	ldr	r3, [pc, #392]	; (802463c <ams_function+0x19c>)
 80244b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80244b6:	4618      	mov	r0, r3
 80244b8:	f7dc f838 	bl	800052c <__aeabi_f2d>
 80244bc:	a35c      	add	r3, pc, #368	; (adr r3, 8024630 <ams_function+0x190>)
 80244be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244c2:	f7dc f88b 	bl	80005dc <__aeabi_dmul>
 80244c6:	4602      	mov	r2, r0
 80244c8:	460b      	mov	r3, r1
 80244ca:	4620      	mov	r0, r4
 80244cc:	4629      	mov	r1, r5
 80244ce:	f7dc faf7 	bl	8000ac0 <__aeabi_dcmplt>
 80244d2:	4603      	mov	r3, r0
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	d002      	beq.n	80244de <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 80244d8:	4b59      	ldr	r3, [pc, #356]	; (8024640 <ams_function+0x1a0>)
 80244da:	222c      	movs	r2, #44	; 0x2c
 80244dc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 80244de:	4b58      	ldr	r3, [pc, #352]	; (8024640 <ams_function+0x1a0>)
 80244e0:	781b      	ldrb	r3, [r3, #0]
 80244e2:	3b02      	subs	r3, #2
 80244e4:	2b2a      	cmp	r3, #42	; 0x2a
 80244e6:	f200 8091 	bhi.w	802460c <ams_function+0x16c>
 80244ea:	a201      	add	r2, pc, #4	; (adr r2, 80244f0 <ams_function+0x50>)
 80244ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244f0:	0802459d 	.word	0x0802459d
 80244f4:	0802460d 	.word	0x0802460d
 80244f8:	0802460d 	.word	0x0802460d
 80244fc:	0802460d 	.word	0x0802460d
 8024500:	0802460d 	.word	0x0802460d
 8024504:	0802460d 	.word	0x0802460d
 8024508:	0802460d 	.word	0x0802460d
 802450c:	0802460d 	.word	0x0802460d
 8024510:	0802460d 	.word	0x0802460d
 8024514:	0802460d 	.word	0x0802460d
 8024518:	080245ab 	.word	0x080245ab
 802451c:	0802460d 	.word	0x0802460d
 8024520:	0802460d 	.word	0x0802460d
 8024524:	0802460d 	.word	0x0802460d
 8024528:	0802460d 	.word	0x0802460d
 802452c:	0802460d 	.word	0x0802460d
 8024530:	080245b9 	.word	0x080245b9
 8024534:	0802460d 	.word	0x0802460d
 8024538:	0802460d 	.word	0x0802460d
 802453c:	0802460d 	.word	0x0802460d
 8024540:	0802460d 	.word	0x0802460d
 8024544:	080245c7 	.word	0x080245c7
 8024548:	0802460d 	.word	0x0802460d
 802454c:	0802460d 	.word	0x0802460d
 8024550:	0802460d 	.word	0x0802460d
 8024554:	0802460d 	.word	0x0802460d
 8024558:	0802460d 	.word	0x0802460d
 802455c:	0802460d 	.word	0x0802460d
 8024560:	0802460d 	.word	0x0802460d
 8024564:	0802460d 	.word	0x0802460d
 8024568:	0802460d 	.word	0x0802460d
 802456c:	080245d5 	.word	0x080245d5
 8024570:	0802460d 	.word	0x0802460d
 8024574:	0802460d 	.word	0x0802460d
 8024578:	0802460d 	.word	0x0802460d
 802457c:	0802460d 	.word	0x0802460d
 8024580:	0802460d 	.word	0x0802460d
 8024584:	080245e3 	.word	0x080245e3
 8024588:	080245f1 	.word	0x080245f1
 802458c:	0802460d 	.word	0x0802460d
 8024590:	0802460d 	.word	0x0802460d
 8024594:	0802460d 	.word	0x0802460d
 8024598:	080245ff 	.word	0x080245ff
       case STATE_AMS_PRECHARGE_DRIVE:
           state_r1 = ams_precharge_drive_function();
 802459c:	f7fe ff20 	bl	80233e0 <ams_precharge_drive_function>
 80245a0:	4603      	mov	r3, r0
 80245a2:	461a      	mov	r2, r3
 80245a4:	4b26      	ldr	r3, [pc, #152]	; (8024640 <ams_function+0x1a0>)
 80245a6:	701a      	strb	r2, [r3, #0]
           break;
 80245a8:	e033      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_DRIVE:
           state_r1 = ams_drive_function();
 80245aa:	f7ff f8ad 	bl	8023708 <ams_drive_function>
 80245ae:	4603      	mov	r3, r0
 80245b0:	461a      	mov	r2, r3
 80245b2:	4b23      	ldr	r3, [pc, #140]	; (8024640 <ams_function+0x1a0>)
 80245b4:	701a      	strb	r2, [r3, #0]
           break;
 80245b6:	e02c      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 80245b8:	f7ff f9a6 	bl	8023908 <ams_error_function>
 80245bc:	4603      	mov	r3, r0
 80245be:	461a      	mov	r2, r3
 80245c0:	4b1f      	ldr	r3, [pc, #124]	; (8024640 <ams_function+0x1a0>)
 80245c2:	701a      	strb	r2, [r3, #0]
           break;
 80245c4:	e025      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_PRECHARGE_CHARGE:
           state_r1 = ams_precharge_charge_function();
 80245c6:	f7ff fc0f 	bl	8023de8 <ams_precharge_charge_function>
 80245ca:	4603      	mov	r3, r0
 80245cc:	461a      	mov	r2, r3
 80245ce:	4b1c      	ldr	r3, [pc, #112]	; (8024640 <ams_function+0x1a0>)
 80245d0:	701a      	strb	r2, [r3, #0]
           break;
 80245d2:	e01e      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_CHARGE:
           state_r1 = ams_charge_function();
 80245d4:	f7ff fda4 	bl	8024120 <ams_charge_function>
 80245d8:	4603      	mov	r3, r0
 80245da:	461a      	mov	r2, r3
 80245dc:	4b18      	ldr	r3, [pc, #96]	; (8024640 <ams_function+0x1a0>)
 80245de:	701a      	strb	r2, [r3, #0]
           break;
 80245e0:	e017      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_IDLE:
           state_r1 = ams_idle_function();
 80245e2:	f7ff fe35 	bl	8024250 <ams_idle_function>
 80245e6:	4603      	mov	r3, r0
 80245e8:	461a      	mov	r2, r3
 80245ea:	4b15      	ldr	r3, [pc, #84]	; (8024640 <ams_function+0x1a0>)
 80245ec:	701a      	strb	r2, [r3, #0]
           break;
 80245ee:	e010      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_BALANCE:
           state_r1 = ams_balance_function();
 80245f0:	f7ff fece 	bl	8024390 <ams_balance_function>
 80245f4:	4603      	mov	r3, r0
 80245f6:	461a      	mov	r2, r3
 80245f8:	4b11      	ldr	r3, [pc, #68]	; (8024640 <ams_function+0x1a0>)
 80245fa:	701a      	strb	r2, [r3, #0]
           break;
 80245fc:	e009      	b.n	8024612 <ams_function+0x172>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 80245fe:	f7ff ff41 	bl	8024484 <ams_0_function>
 8024602:	4603      	mov	r3, r0
 8024604:	461a      	mov	r2, r3
 8024606:	4b0e      	ldr	r3, [pc, #56]	; (8024640 <ams_function+0x1a0>)
 8024608:	701a      	strb	r2, [r3, #0]
           break;
 802460a:	e002      	b.n	8024612 <ams_function+0x172>
       default:
           ams_error();
 802460c:	f7fe fd23 	bl	8023056 <ams_error>
           break;
 8024610:	bf00      	nop
   }

   timer_r0 += ams_inputs.Ts;
 8024612:	4b0a      	ldr	r3, [pc, #40]	; (802463c <ams_function+0x19c>)
 8024614:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024618:	4b07      	ldr	r3, [pc, #28]	; (8024638 <ams_function+0x198>)
 802461a:	edd3 7a00 	vldr	s15, [r3]
 802461e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024622:	4b05      	ldr	r3, [pc, #20]	; (8024638 <ams_function+0x198>)
 8024624:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 8024628:	2301      	movs	r3, #1
}
 802462a:	4618      	mov	r0, r3
 802462c:	bdb0      	pop	{r4, r5, r7, pc}
 802462e:	bf00      	nop
 8024630:	d2f1a9fc 	.word	0xd2f1a9fc
 8024634:	3f50624d 	.word	0x3f50624d
 8024638:	20001934 	.word	0x20001934
 802463c:	2001b858 	.word	0x2001b858
 8024640:	20001931 	.word	0x20001931

08024644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8024644:	f8df d034 	ldr.w	sp, [pc, #52]	; 802467c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8024648:	480d      	ldr	r0, [pc, #52]	; (8024680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802464a:	490e      	ldr	r1, [pc, #56]	; (8024684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 802464c:	4a0e      	ldr	r2, [pc, #56]	; (8024688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802464e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8024650:	e002      	b.n	8024658 <LoopCopyDataInit>

08024652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8024652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8024654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8024656:	3304      	adds	r3, #4

08024658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8024658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802465a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802465c:	d3f9      	bcc.n	8024652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802465e:	4a0b      	ldr	r2, [pc, #44]	; (802468c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8024660:	4c0b      	ldr	r4, [pc, #44]	; (8024690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8024662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8024664:	e001      	b.n	802466a <LoopFillZerobss>

08024666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8024666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8024668:	3204      	adds	r2, #4

0802466a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802466a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802466c:	d3fb      	bcc.n	8024666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802466e:	f7f3 fa7d 	bl	8017b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8024672:	f009 ffab 	bl	802e5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8024676:	f7f1 f9b7 	bl	80159e8 <main>
  bx  lr    
 802467a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802467c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8024680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8024684:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 8024688:	0802fae0 	.word	0x0802fae0
  ldr r2, =_sbss
 802468c:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 8024690:	2001ee74 	.word	0x2001ee74

08024694 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8024694:	e7fe      	b.n	8024694 <CAN1_SCE_IRQHandler>
	...

08024698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8024698:	b580      	push	{r7, lr}
 802469a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802469c:	4b0e      	ldr	r3, [pc, #56]	; (80246d8 <HAL_Init+0x40>)
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	4a0d      	ldr	r2, [pc, #52]	; (80246d8 <HAL_Init+0x40>)
 80246a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80246a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80246a8:	4b0b      	ldr	r3, [pc, #44]	; (80246d8 <HAL_Init+0x40>)
 80246aa:	681b      	ldr	r3, [r3, #0]
 80246ac:	4a0a      	ldr	r2, [pc, #40]	; (80246d8 <HAL_Init+0x40>)
 80246ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80246b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80246b4:	4b08      	ldr	r3, [pc, #32]	; (80246d8 <HAL_Init+0x40>)
 80246b6:	681b      	ldr	r3, [r3, #0]
 80246b8:	4a07      	ldr	r2, [pc, #28]	; (80246d8 <HAL_Init+0x40>)
 80246ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80246be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80246c0:	2003      	movs	r0, #3
 80246c2:	f001 fd28 	bl	8026116 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80246c6:	200f      	movs	r0, #15
 80246c8:	f7f3 f960 	bl	801798c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80246cc:	f7f3 f932 	bl	8017934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80246d0:	2300      	movs	r3, #0
}
 80246d2:	4618      	mov	r0, r3
 80246d4:	bd80      	pop	{r7, pc}
 80246d6:	bf00      	nop
 80246d8:	40023c00 	.word	0x40023c00

080246dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80246dc:	b480      	push	{r7}
 80246de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80246e0:	4b06      	ldr	r3, [pc, #24]	; (80246fc <HAL_IncTick+0x20>)
 80246e2:	781b      	ldrb	r3, [r3, #0]
 80246e4:	461a      	mov	r2, r3
 80246e6:	4b06      	ldr	r3, [pc, #24]	; (8024700 <HAL_IncTick+0x24>)
 80246e8:	681b      	ldr	r3, [r3, #0]
 80246ea:	4413      	add	r3, r2
 80246ec:	4a04      	ldr	r2, [pc, #16]	; (8024700 <HAL_IncTick+0x24>)
 80246ee:	6013      	str	r3, [r2, #0]
}
 80246f0:	bf00      	nop
 80246f2:	46bd      	mov	sp, r7
 80246f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246f8:	4770      	bx	lr
 80246fa:	bf00      	nop
 80246fc:	2000143c 	.word	0x2000143c
 8024700:	2001ed7c 	.word	0x2001ed7c

08024704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8024704:	b480      	push	{r7}
 8024706:	af00      	add	r7, sp, #0
  return uwTick;
 8024708:	4b03      	ldr	r3, [pc, #12]	; (8024718 <HAL_GetTick+0x14>)
 802470a:	681b      	ldr	r3, [r3, #0]
}
 802470c:	4618      	mov	r0, r3
 802470e:	46bd      	mov	sp, r7
 8024710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024714:	4770      	bx	lr
 8024716:	bf00      	nop
 8024718:	2001ed7c 	.word	0x2001ed7c

0802471c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802471c:	b580      	push	{r7, lr}
 802471e:	b084      	sub	sp, #16
 8024720:	af00      	add	r7, sp, #0
 8024722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8024724:	f7ff ffee 	bl	8024704 <HAL_GetTick>
 8024728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802472a:	687b      	ldr	r3, [r7, #4]
 802472c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802472e:	68fb      	ldr	r3, [r7, #12]
 8024730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024734:	d005      	beq.n	8024742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8024736:	4b0a      	ldr	r3, [pc, #40]	; (8024760 <HAL_Delay+0x44>)
 8024738:	781b      	ldrb	r3, [r3, #0]
 802473a:	461a      	mov	r2, r3
 802473c:	68fb      	ldr	r3, [r7, #12]
 802473e:	4413      	add	r3, r2
 8024740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8024742:	bf00      	nop
 8024744:	f7ff ffde 	bl	8024704 <HAL_GetTick>
 8024748:	4602      	mov	r2, r0
 802474a:	68bb      	ldr	r3, [r7, #8]
 802474c:	1ad3      	subs	r3, r2, r3
 802474e:	68fa      	ldr	r2, [r7, #12]
 8024750:	429a      	cmp	r2, r3
 8024752:	d8f7      	bhi.n	8024744 <HAL_Delay+0x28>
  {
  }
}
 8024754:	bf00      	nop
 8024756:	bf00      	nop
 8024758:	3710      	adds	r7, #16
 802475a:	46bd      	mov	sp, r7
 802475c:	bd80      	pop	{r7, pc}
 802475e:	bf00      	nop
 8024760:	2000143c 	.word	0x2000143c

08024764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024764:	b580      	push	{r7, lr}
 8024766:	b084      	sub	sp, #16
 8024768:	af00      	add	r7, sp, #0
 802476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802476c:	2300      	movs	r3, #0
 802476e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	2b00      	cmp	r3, #0
 8024774:	d101      	bne.n	802477a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8024776:	2301      	movs	r3, #1
 8024778:	e033      	b.n	80247e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802477e:	2b00      	cmp	r3, #0
 8024780:	d109      	bne.n	8024796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8024782:	6878      	ldr	r0, [r7, #4]
 8024784:	f7f0 f8d2 	bl	801492c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	2200      	movs	r2, #0
 802478c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802478e:	687b      	ldr	r3, [r7, #4]
 8024790:	2200      	movs	r2, #0
 8024792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802479a:	f003 0310 	and.w	r3, r3, #16
 802479e:	2b00      	cmp	r3, #0
 80247a0:	d118      	bne.n	80247d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80247aa:	f023 0302 	bic.w	r3, r3, #2
 80247ae:	f043 0202 	orr.w	r2, r3, #2
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80247b6:	6878      	ldr	r0, [r7, #4]
 80247b8:	f000 fba8 	bl	8024f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	2200      	movs	r2, #0
 80247c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80247c2:	687b      	ldr	r3, [r7, #4]
 80247c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247c6:	f023 0303 	bic.w	r3, r3, #3
 80247ca:	f043 0201 	orr.w	r2, r3, #1
 80247ce:	687b      	ldr	r3, [r7, #4]
 80247d0:	641a      	str	r2, [r3, #64]	; 0x40
 80247d2:	e001      	b.n	80247d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80247d4:	2301      	movs	r3, #1
 80247d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	2200      	movs	r2, #0
 80247dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80247e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80247e2:	4618      	mov	r0, r3
 80247e4:	3710      	adds	r7, #16
 80247e6:	46bd      	mov	sp, r7
 80247e8:	bd80      	pop	{r7, pc}

080247ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80247ea:	b580      	push	{r7, lr}
 80247ec:	b084      	sub	sp, #16
 80247ee:	af00      	add	r7, sp, #0
 80247f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80247f2:	2300      	movs	r3, #0
 80247f4:	60fb      	str	r3, [r7, #12]
 80247f6:	2300      	movs	r3, #0
 80247f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80247fa:	687b      	ldr	r3, [r7, #4]
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	681b      	ldr	r3, [r3, #0]
 8024800:	f003 0302 	and.w	r3, r3, #2
 8024804:	2b02      	cmp	r3, #2
 8024806:	bf0c      	ite	eq
 8024808:	2301      	moveq	r3, #1
 802480a:	2300      	movne	r3, #0
 802480c:	b2db      	uxtb	r3, r3
 802480e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	681b      	ldr	r3, [r3, #0]
 8024814:	685b      	ldr	r3, [r3, #4]
 8024816:	f003 0320 	and.w	r3, r3, #32
 802481a:	2b20      	cmp	r3, #32
 802481c:	bf0c      	ite	eq
 802481e:	2301      	moveq	r3, #1
 8024820:	2300      	movne	r3, #0
 8024822:	b2db      	uxtb	r3, r3
 8024824:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	2b00      	cmp	r3, #0
 802482a:	d049      	beq.n	80248c0 <HAL_ADC_IRQHandler+0xd6>
 802482c:	68bb      	ldr	r3, [r7, #8]
 802482e:	2b00      	cmp	r3, #0
 8024830:	d046      	beq.n	80248c0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8024832:	687b      	ldr	r3, [r7, #4]
 8024834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024836:	f003 0310 	and.w	r3, r3, #16
 802483a:	2b00      	cmp	r3, #0
 802483c:	d105      	bne.n	802484a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 802483e:	687b      	ldr	r3, [r7, #4]
 8024840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	681b      	ldr	r3, [r3, #0]
 802484e:	689b      	ldr	r3, [r3, #8]
 8024850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024854:	2b00      	cmp	r3, #0
 8024856:	d12b      	bne.n	80248b0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802485c:	2b00      	cmp	r3, #0
 802485e:	d127      	bne.n	80248b0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	681b      	ldr	r3, [r3, #0]
 8024864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024866:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802486a:	2b00      	cmp	r3, #0
 802486c:	d006      	beq.n	802487c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	681b      	ldr	r3, [r3, #0]
 8024872:	689b      	ldr	r3, [r3, #8]
 8024874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024878:	2b00      	cmp	r3, #0
 802487a:	d119      	bne.n	80248b0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802487c:	687b      	ldr	r3, [r7, #4]
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	685a      	ldr	r2, [r3, #4]
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	681b      	ldr	r3, [r3, #0]
 8024886:	f022 0220 	bic.w	r2, r2, #32
 802488a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024894:	687b      	ldr	r3, [r7, #4]
 8024896:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	d105      	bne.n	80248b0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248a8:	f043 0201 	orr.w	r2, r3, #1
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80248b0:	6878      	ldr	r0, [r7, #4]
 80248b2:	f7f0 faa5 	bl	8014e00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80248b6:	687b      	ldr	r3, [r7, #4]
 80248b8:	681b      	ldr	r3, [r3, #0]
 80248ba:	f06f 0212 	mvn.w	r2, #18
 80248be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	681b      	ldr	r3, [r3, #0]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	f003 0304 	and.w	r3, r3, #4
 80248ca:	2b04      	cmp	r3, #4
 80248cc:	bf0c      	ite	eq
 80248ce:	2301      	moveq	r3, #1
 80248d0:	2300      	movne	r3, #0
 80248d2:	b2db      	uxtb	r3, r3
 80248d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	681b      	ldr	r3, [r3, #0]
 80248da:	685b      	ldr	r3, [r3, #4]
 80248dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80248e0:	2b80      	cmp	r3, #128	; 0x80
 80248e2:	bf0c      	ite	eq
 80248e4:	2301      	moveq	r3, #1
 80248e6:	2300      	movne	r3, #0
 80248e8:	b2db      	uxtb	r3, r3
 80248ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80248ec:	68fb      	ldr	r3, [r7, #12]
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	d057      	beq.n	80249a2 <HAL_ADC_IRQHandler+0x1b8>
 80248f2:	68bb      	ldr	r3, [r7, #8]
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	d054      	beq.n	80249a2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248fc:	f003 0310 	and.w	r3, r3, #16
 8024900:	2b00      	cmp	r3, #0
 8024902:	d105      	bne.n	8024910 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024908:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	689b      	ldr	r3, [r3, #8]
 8024916:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 802491a:	2b00      	cmp	r3, #0
 802491c:	d139      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	681b      	ldr	r3, [r3, #0]
 8024922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024924:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8024928:	2b00      	cmp	r3, #0
 802492a:	d006      	beq.n	802493a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	681b      	ldr	r3, [r3, #0]
 8024930:	689b      	ldr	r3, [r3, #8]
 8024932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8024936:	2b00      	cmp	r3, #0
 8024938:	d12b      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 802493a:	687b      	ldr	r3, [r7, #4]
 802493c:	681b      	ldr	r3, [r3, #0]
 802493e:	685b      	ldr	r3, [r3, #4]
 8024940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8024944:	2b00      	cmp	r3, #0
 8024946:	d124      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	681b      	ldr	r3, [r3, #0]
 802494c:	689b      	ldr	r3, [r3, #8]
 802494e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8024952:	2b00      	cmp	r3, #0
 8024954:	d11d      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 802495a:	2b00      	cmp	r3, #0
 802495c:	d119      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	685a      	ldr	r2, [r3, #4]
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	681b      	ldr	r3, [r3, #0]
 8024968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802496c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 802497a:	687b      	ldr	r3, [r7, #4]
 802497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024982:	2b00      	cmp	r3, #0
 8024984:	d105      	bne.n	8024992 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024986:	687b      	ldr	r3, [r7, #4]
 8024988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802498a:	f043 0201 	orr.w	r2, r3, #1
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8024992:	6878      	ldr	r0, [r7, #4]
 8024994:	f000 fc38 	bl	8025208 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8024998:	687b      	ldr	r3, [r7, #4]
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	f06f 020c 	mvn.w	r2, #12
 80249a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80249a2:	687b      	ldr	r3, [r7, #4]
 80249a4:	681b      	ldr	r3, [r3, #0]
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	f003 0301 	and.w	r3, r3, #1
 80249ac:	2b01      	cmp	r3, #1
 80249ae:	bf0c      	ite	eq
 80249b0:	2301      	moveq	r3, #1
 80249b2:	2300      	movne	r3, #0
 80249b4:	b2db      	uxtb	r3, r3
 80249b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	685b      	ldr	r3, [r3, #4]
 80249be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80249c2:	2b40      	cmp	r3, #64	; 0x40
 80249c4:	bf0c      	ite	eq
 80249c6:	2301      	moveq	r3, #1
 80249c8:	2300      	movne	r3, #0
 80249ca:	b2db      	uxtb	r3, r3
 80249cc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80249ce:	68fb      	ldr	r3, [r7, #12]
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d017      	beq.n	8024a04 <HAL_ADC_IRQHandler+0x21a>
 80249d4:	68bb      	ldr	r3, [r7, #8]
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d014      	beq.n	8024a04 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	681b      	ldr	r3, [r3, #0]
 80249e0:	f003 0301 	and.w	r3, r3, #1
 80249e4:	2b01      	cmp	r3, #1
 80249e6:	d10d      	bne.n	8024a04 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80249f0:	687b      	ldr	r3, [r7, #4]
 80249f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80249f4:	6878      	ldr	r0, [r7, #4]
 80249f6:	f000 f953 	bl	8024ca0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	f06f 0201 	mvn.w	r2, #1
 8024a02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	681b      	ldr	r3, [r3, #0]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	f003 0320 	and.w	r3, r3, #32
 8024a0e:	2b20      	cmp	r3, #32
 8024a10:	bf0c      	ite	eq
 8024a12:	2301      	moveq	r3, #1
 8024a14:	2300      	movne	r3, #0
 8024a16:	b2db      	uxtb	r3, r3
 8024a18:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	685b      	ldr	r3, [r3, #4]
 8024a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024a28:	bf0c      	ite	eq
 8024a2a:	2301      	moveq	r3, #1
 8024a2c:	2300      	movne	r3, #0
 8024a2e:	b2db      	uxtb	r3, r3
 8024a30:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8024a32:	68fb      	ldr	r3, [r7, #12]
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	d015      	beq.n	8024a64 <HAL_ADC_IRQHandler+0x27a>
 8024a38:	68bb      	ldr	r3, [r7, #8]
 8024a3a:	2b00      	cmp	r3, #0
 8024a3c:	d012      	beq.n	8024a64 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8024a3e:	687b      	ldr	r3, [r7, #4]
 8024a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024a42:	f043 0202 	orr.w	r2, r3, #2
 8024a46:	687b      	ldr	r3, [r7, #4]
 8024a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	f06f 0220 	mvn.w	r2, #32
 8024a52:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8024a54:	6878      	ldr	r0, [r7, #4]
 8024a56:	f000 f92d 	bl	8024cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	681b      	ldr	r3, [r3, #0]
 8024a5e:	f06f 0220 	mvn.w	r2, #32
 8024a62:	601a      	str	r2, [r3, #0]
  }
}
 8024a64:	bf00      	nop
 8024a66:	3710      	adds	r7, #16
 8024a68:	46bd      	mov	sp, r7
 8024a6a:	bd80      	pop	{r7, pc}

08024a6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8024a6c:	b580      	push	{r7, lr}
 8024a6e:	b086      	sub	sp, #24
 8024a70:	af00      	add	r7, sp, #0
 8024a72:	60f8      	str	r0, [r7, #12]
 8024a74:	60b9      	str	r1, [r7, #8]
 8024a76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8024a78:	2300      	movs	r3, #0
 8024a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024a7c:	68fb      	ldr	r3, [r7, #12]
 8024a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024a82:	2b01      	cmp	r3, #1
 8024a84:	d101      	bne.n	8024a8a <HAL_ADC_Start_DMA+0x1e>
 8024a86:	2302      	movs	r3, #2
 8024a88:	e0e9      	b.n	8024c5e <HAL_ADC_Start_DMA+0x1f2>
 8024a8a:	68fb      	ldr	r3, [r7, #12]
 8024a8c:	2201      	movs	r2, #1
 8024a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8024a92:	68fb      	ldr	r3, [r7, #12]
 8024a94:	681b      	ldr	r3, [r3, #0]
 8024a96:	689b      	ldr	r3, [r3, #8]
 8024a98:	f003 0301 	and.w	r3, r3, #1
 8024a9c:	2b01      	cmp	r3, #1
 8024a9e:	d018      	beq.n	8024ad2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	689a      	ldr	r2, [r3, #8]
 8024aa6:	68fb      	ldr	r3, [r7, #12]
 8024aa8:	681b      	ldr	r3, [r3, #0]
 8024aaa:	f042 0201 	orr.w	r2, r2, #1
 8024aae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8024ab0:	4b6d      	ldr	r3, [pc, #436]	; (8024c68 <HAL_ADC_Start_DMA+0x1fc>)
 8024ab2:	681b      	ldr	r3, [r3, #0]
 8024ab4:	4a6d      	ldr	r2, [pc, #436]	; (8024c6c <HAL_ADC_Start_DMA+0x200>)
 8024ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8024aba:	0c9a      	lsrs	r2, r3, #18
 8024abc:	4613      	mov	r3, r2
 8024abe:	005b      	lsls	r3, r3, #1
 8024ac0:	4413      	add	r3, r2
 8024ac2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024ac4:	e002      	b.n	8024acc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8024ac6:	693b      	ldr	r3, [r7, #16]
 8024ac8:	3b01      	subs	r3, #1
 8024aca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024acc:	693b      	ldr	r3, [r7, #16]
 8024ace:	2b00      	cmp	r3, #0
 8024ad0:	d1f9      	bne.n	8024ac6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8024ad2:	68fb      	ldr	r3, [r7, #12]
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	689b      	ldr	r3, [r3, #8]
 8024ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024ae0:	d107      	bne.n	8024af2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8024ae2:	68fb      	ldr	r3, [r7, #12]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	689a      	ldr	r2, [r3, #8]
 8024ae8:	68fb      	ldr	r3, [r7, #12]
 8024aea:	681b      	ldr	r3, [r3, #0]
 8024aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8024af2:	68fb      	ldr	r3, [r7, #12]
 8024af4:	681b      	ldr	r3, [r3, #0]
 8024af6:	689b      	ldr	r3, [r3, #8]
 8024af8:	f003 0301 	and.w	r3, r3, #1
 8024afc:	2b01      	cmp	r3, #1
 8024afe:	f040 80a1 	bne.w	8024c44 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8024b02:	68fb      	ldr	r3, [r7, #12]
 8024b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8024b0a:	f023 0301 	bic.w	r3, r3, #1
 8024b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024b12:	68fb      	ldr	r3, [r7, #12]
 8024b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8024b16:	68fb      	ldr	r3, [r7, #12]
 8024b18:	681b      	ldr	r3, [r3, #0]
 8024b1a:	685b      	ldr	r3, [r3, #4]
 8024b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	d007      	beq.n	8024b34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8024b2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024b30:	68fb      	ldr	r3, [r7, #12]
 8024b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024b34:	68fb      	ldr	r3, [r7, #12]
 8024b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024b40:	d106      	bne.n	8024b50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8024b42:	68fb      	ldr	r3, [r7, #12]
 8024b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b46:	f023 0206 	bic.w	r2, r3, #6
 8024b4a:	68fb      	ldr	r3, [r7, #12]
 8024b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8024b4e:	e002      	b.n	8024b56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8024b50:	68fb      	ldr	r3, [r7, #12]
 8024b52:	2200      	movs	r2, #0
 8024b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8024b56:	68fb      	ldr	r3, [r7, #12]
 8024b58:	2200      	movs	r2, #0
 8024b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024b5e:	4b44      	ldr	r3, [pc, #272]	; (8024c70 <HAL_ADC_Start_DMA+0x204>)
 8024b60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8024b62:	68fb      	ldr	r3, [r7, #12]
 8024b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024b66:	4a43      	ldr	r2, [pc, #268]	; (8024c74 <HAL_ADC_Start_DMA+0x208>)
 8024b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8024b6a:	68fb      	ldr	r3, [r7, #12]
 8024b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024b6e:	4a42      	ldr	r2, [pc, #264]	; (8024c78 <HAL_ADC_Start_DMA+0x20c>)
 8024b70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8024b72:	68fb      	ldr	r3, [r7, #12]
 8024b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024b76:	4a41      	ldr	r2, [pc, #260]	; (8024c7c <HAL_ADC_Start_DMA+0x210>)
 8024b78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8024b82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	685a      	ldr	r2, [r3, #4]
 8024b8a:	68fb      	ldr	r3, [r7, #12]
 8024b8c:	681b      	ldr	r3, [r3, #0]
 8024b8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8024b92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8024b94:	68fb      	ldr	r3, [r7, #12]
 8024b96:	681b      	ldr	r3, [r3, #0]
 8024b98:	689a      	ldr	r2, [r3, #8]
 8024b9a:	68fb      	ldr	r3, [r7, #12]
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024ba2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8024ba4:	68fb      	ldr	r3, [r7, #12]
 8024ba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8024ba8:	68fb      	ldr	r3, [r7, #12]
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	334c      	adds	r3, #76	; 0x4c
 8024bae:	4619      	mov	r1, r3
 8024bb0:	68ba      	ldr	r2, [r7, #8]
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	f001 fb92 	bl	80262dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8024bb8:	697b      	ldr	r3, [r7, #20]
 8024bba:	685b      	ldr	r3, [r3, #4]
 8024bbc:	f003 031f 	and.w	r3, r3, #31
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d12a      	bne.n	8024c1a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8024bc4:	68fb      	ldr	r3, [r7, #12]
 8024bc6:	681b      	ldr	r3, [r3, #0]
 8024bc8:	4a2d      	ldr	r2, [pc, #180]	; (8024c80 <HAL_ADC_Start_DMA+0x214>)
 8024bca:	4293      	cmp	r3, r2
 8024bcc:	d015      	beq.n	8024bfa <HAL_ADC_Start_DMA+0x18e>
 8024bce:	68fb      	ldr	r3, [r7, #12]
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	4a2c      	ldr	r2, [pc, #176]	; (8024c84 <HAL_ADC_Start_DMA+0x218>)
 8024bd4:	4293      	cmp	r3, r2
 8024bd6:	d105      	bne.n	8024be4 <HAL_ADC_Start_DMA+0x178>
 8024bd8:	4b25      	ldr	r3, [pc, #148]	; (8024c70 <HAL_ADC_Start_DMA+0x204>)
 8024bda:	685b      	ldr	r3, [r3, #4]
 8024bdc:	f003 031f 	and.w	r3, r3, #31
 8024be0:	2b00      	cmp	r3, #0
 8024be2:	d00a      	beq.n	8024bfa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8024be4:	68fb      	ldr	r3, [r7, #12]
 8024be6:	681b      	ldr	r3, [r3, #0]
 8024be8:	4a27      	ldr	r2, [pc, #156]	; (8024c88 <HAL_ADC_Start_DMA+0x21c>)
 8024bea:	4293      	cmp	r3, r2
 8024bec:	d136      	bne.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
 8024bee:	4b20      	ldr	r3, [pc, #128]	; (8024c70 <HAL_ADC_Start_DMA+0x204>)
 8024bf0:	685b      	ldr	r3, [r3, #4]
 8024bf2:	f003 0310 	and.w	r3, r3, #16
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	d130      	bne.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8024bfa:	68fb      	ldr	r3, [r7, #12]
 8024bfc:	681b      	ldr	r3, [r3, #0]
 8024bfe:	689b      	ldr	r3, [r3, #8]
 8024c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	d129      	bne.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	681b      	ldr	r3, [r3, #0]
 8024c0c:	689a      	ldr	r2, [r3, #8]
 8024c0e:	68fb      	ldr	r3, [r7, #12]
 8024c10:	681b      	ldr	r3, [r3, #0]
 8024c12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024c16:	609a      	str	r2, [r3, #8]
 8024c18:	e020      	b.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8024c1a:	68fb      	ldr	r3, [r7, #12]
 8024c1c:	681b      	ldr	r3, [r3, #0]
 8024c1e:	4a18      	ldr	r2, [pc, #96]	; (8024c80 <HAL_ADC_Start_DMA+0x214>)
 8024c20:	4293      	cmp	r3, r2
 8024c22:	d11b      	bne.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	681b      	ldr	r3, [r3, #0]
 8024c28:	689b      	ldr	r3, [r3, #8]
 8024c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024c2e:	2b00      	cmp	r3, #0
 8024c30:	d114      	bne.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024c32:	68fb      	ldr	r3, [r7, #12]
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	689a      	ldr	r2, [r3, #8]
 8024c38:	68fb      	ldr	r3, [r7, #12]
 8024c3a:	681b      	ldr	r3, [r3, #0]
 8024c3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024c40:	609a      	str	r2, [r3, #8]
 8024c42:	e00b      	b.n	8024c5c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8024c44:	68fb      	ldr	r3, [r7, #12]
 8024c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024c48:	f043 0210 	orr.w	r2, r3, #16
 8024c4c:	68fb      	ldr	r3, [r7, #12]
 8024c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8024c50:	68fb      	ldr	r3, [r7, #12]
 8024c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c54:	f043 0201 	orr.w	r2, r3, #1
 8024c58:	68fb      	ldr	r3, [r7, #12]
 8024c5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8024c5c:	2300      	movs	r3, #0
}
 8024c5e:	4618      	mov	r0, r3
 8024c60:	3718      	adds	r7, #24
 8024c62:	46bd      	mov	sp, r7
 8024c64:	bd80      	pop	{r7, pc}
 8024c66:	bf00      	nop
 8024c68:	20000084 	.word	0x20000084
 8024c6c:	431bde83 	.word	0x431bde83
 8024c70:	40012300 	.word	0x40012300
 8024c74:	08025105 	.word	0x08025105
 8024c78:	080251bf 	.word	0x080251bf
 8024c7c:	080251db 	.word	0x080251db
 8024c80:	40012000 	.word	0x40012000
 8024c84:	40012100 	.word	0x40012100
 8024c88:	40012200 	.word	0x40012200

08024c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024c8c:	b480      	push	{r7}
 8024c8e:	b083      	sub	sp, #12
 8024c90:	af00      	add	r7, sp, #0
 8024c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8024c94:	bf00      	nop
 8024c96:	370c      	adds	r7, #12
 8024c98:	46bd      	mov	sp, r7
 8024c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c9e:	4770      	bx	lr

08024ca0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8024ca0:	b480      	push	{r7}
 8024ca2:	b083      	sub	sp, #12
 8024ca4:	af00      	add	r7, sp, #0
 8024ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8024ca8:	bf00      	nop
 8024caa:	370c      	adds	r7, #12
 8024cac:	46bd      	mov	sp, r7
 8024cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cb2:	4770      	bx	lr

08024cb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8024cb4:	b480      	push	{r7}
 8024cb6:	b083      	sub	sp, #12
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8024cbc:	bf00      	nop
 8024cbe:	370c      	adds	r7, #12
 8024cc0:	46bd      	mov	sp, r7
 8024cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cc6:	4770      	bx	lr

08024cc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8024cc8:	b480      	push	{r7}
 8024cca:	b085      	sub	sp, #20
 8024ccc:	af00      	add	r7, sp, #0
 8024cce:	6078      	str	r0, [r7, #4]
 8024cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024cdc:	2b01      	cmp	r3, #1
 8024cde:	d101      	bne.n	8024ce4 <HAL_ADC_ConfigChannel+0x1c>
 8024ce0:	2302      	movs	r3, #2
 8024ce2:	e105      	b.n	8024ef0 <HAL_ADC_ConfigChannel+0x228>
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	2201      	movs	r2, #1
 8024ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8024cec:	683b      	ldr	r3, [r7, #0]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	2b09      	cmp	r3, #9
 8024cf2:	d925      	bls.n	8024d40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	68d9      	ldr	r1, [r3, #12]
 8024cfa:	683b      	ldr	r3, [r7, #0]
 8024cfc:	681b      	ldr	r3, [r3, #0]
 8024cfe:	b29b      	uxth	r3, r3
 8024d00:	461a      	mov	r2, r3
 8024d02:	4613      	mov	r3, r2
 8024d04:	005b      	lsls	r3, r3, #1
 8024d06:	4413      	add	r3, r2
 8024d08:	3b1e      	subs	r3, #30
 8024d0a:	2207      	movs	r2, #7
 8024d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8024d10:	43da      	mvns	r2, r3
 8024d12:	687b      	ldr	r3, [r7, #4]
 8024d14:	681b      	ldr	r3, [r3, #0]
 8024d16:	400a      	ands	r2, r1
 8024d18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	681b      	ldr	r3, [r3, #0]
 8024d1e:	68d9      	ldr	r1, [r3, #12]
 8024d20:	683b      	ldr	r3, [r7, #0]
 8024d22:	689a      	ldr	r2, [r3, #8]
 8024d24:	683b      	ldr	r3, [r7, #0]
 8024d26:	681b      	ldr	r3, [r3, #0]
 8024d28:	b29b      	uxth	r3, r3
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	4603      	mov	r3, r0
 8024d2e:	005b      	lsls	r3, r3, #1
 8024d30:	4403      	add	r3, r0
 8024d32:	3b1e      	subs	r3, #30
 8024d34:	409a      	lsls	r2, r3
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	430a      	orrs	r2, r1
 8024d3c:	60da      	str	r2, [r3, #12]
 8024d3e:	e022      	b.n	8024d86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	6919      	ldr	r1, [r3, #16]
 8024d46:	683b      	ldr	r3, [r7, #0]
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	b29b      	uxth	r3, r3
 8024d4c:	461a      	mov	r2, r3
 8024d4e:	4613      	mov	r3, r2
 8024d50:	005b      	lsls	r3, r3, #1
 8024d52:	4413      	add	r3, r2
 8024d54:	2207      	movs	r2, #7
 8024d56:	fa02 f303 	lsl.w	r3, r2, r3
 8024d5a:	43da      	mvns	r2, r3
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	400a      	ands	r2, r1
 8024d62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	681b      	ldr	r3, [r3, #0]
 8024d68:	6919      	ldr	r1, [r3, #16]
 8024d6a:	683b      	ldr	r3, [r7, #0]
 8024d6c:	689a      	ldr	r2, [r3, #8]
 8024d6e:	683b      	ldr	r3, [r7, #0]
 8024d70:	681b      	ldr	r3, [r3, #0]
 8024d72:	b29b      	uxth	r3, r3
 8024d74:	4618      	mov	r0, r3
 8024d76:	4603      	mov	r3, r0
 8024d78:	005b      	lsls	r3, r3, #1
 8024d7a:	4403      	add	r3, r0
 8024d7c:	409a      	lsls	r2, r3
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	430a      	orrs	r2, r1
 8024d84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8024d86:	683b      	ldr	r3, [r7, #0]
 8024d88:	685b      	ldr	r3, [r3, #4]
 8024d8a:	2b06      	cmp	r3, #6
 8024d8c:	d824      	bhi.n	8024dd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	681b      	ldr	r3, [r3, #0]
 8024d92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024d94:	683b      	ldr	r3, [r7, #0]
 8024d96:	685a      	ldr	r2, [r3, #4]
 8024d98:	4613      	mov	r3, r2
 8024d9a:	009b      	lsls	r3, r3, #2
 8024d9c:	4413      	add	r3, r2
 8024d9e:	3b05      	subs	r3, #5
 8024da0:	221f      	movs	r2, #31
 8024da2:	fa02 f303 	lsl.w	r3, r2, r3
 8024da6:	43da      	mvns	r2, r3
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	400a      	ands	r2, r1
 8024dae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	681b      	ldr	r3, [r3, #0]
 8024db4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024db6:	683b      	ldr	r3, [r7, #0]
 8024db8:	681b      	ldr	r3, [r3, #0]
 8024dba:	b29b      	uxth	r3, r3
 8024dbc:	4618      	mov	r0, r3
 8024dbe:	683b      	ldr	r3, [r7, #0]
 8024dc0:	685a      	ldr	r2, [r3, #4]
 8024dc2:	4613      	mov	r3, r2
 8024dc4:	009b      	lsls	r3, r3, #2
 8024dc6:	4413      	add	r3, r2
 8024dc8:	3b05      	subs	r3, #5
 8024dca:	fa00 f203 	lsl.w	r2, r0, r3
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	681b      	ldr	r3, [r3, #0]
 8024dd2:	430a      	orrs	r2, r1
 8024dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8024dd6:	e04c      	b.n	8024e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8024dd8:	683b      	ldr	r3, [r7, #0]
 8024dda:	685b      	ldr	r3, [r3, #4]
 8024ddc:	2b0c      	cmp	r3, #12
 8024dde:	d824      	bhi.n	8024e2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024de6:	683b      	ldr	r3, [r7, #0]
 8024de8:	685a      	ldr	r2, [r3, #4]
 8024dea:	4613      	mov	r3, r2
 8024dec:	009b      	lsls	r3, r3, #2
 8024dee:	4413      	add	r3, r2
 8024df0:	3b23      	subs	r3, #35	; 0x23
 8024df2:	221f      	movs	r2, #31
 8024df4:	fa02 f303 	lsl.w	r3, r2, r3
 8024df8:	43da      	mvns	r2, r3
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	400a      	ands	r2, r1
 8024e00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8024e02:	687b      	ldr	r3, [r7, #4]
 8024e04:	681b      	ldr	r3, [r3, #0]
 8024e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024e08:	683b      	ldr	r3, [r7, #0]
 8024e0a:	681b      	ldr	r3, [r3, #0]
 8024e0c:	b29b      	uxth	r3, r3
 8024e0e:	4618      	mov	r0, r3
 8024e10:	683b      	ldr	r3, [r7, #0]
 8024e12:	685a      	ldr	r2, [r3, #4]
 8024e14:	4613      	mov	r3, r2
 8024e16:	009b      	lsls	r3, r3, #2
 8024e18:	4413      	add	r3, r2
 8024e1a:	3b23      	subs	r3, #35	; 0x23
 8024e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8024e20:	687b      	ldr	r3, [r7, #4]
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	430a      	orrs	r2, r1
 8024e26:	631a      	str	r2, [r3, #48]	; 0x30
 8024e28:	e023      	b.n	8024e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	681b      	ldr	r3, [r3, #0]
 8024e2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024e30:	683b      	ldr	r3, [r7, #0]
 8024e32:	685a      	ldr	r2, [r3, #4]
 8024e34:	4613      	mov	r3, r2
 8024e36:	009b      	lsls	r3, r3, #2
 8024e38:	4413      	add	r3, r2
 8024e3a:	3b41      	subs	r3, #65	; 0x41
 8024e3c:	221f      	movs	r2, #31
 8024e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8024e42:	43da      	mvns	r2, r3
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	681b      	ldr	r3, [r3, #0]
 8024e48:	400a      	ands	r2, r1
 8024e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	681b      	ldr	r3, [r3, #0]
 8024e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024e52:	683b      	ldr	r3, [r7, #0]
 8024e54:	681b      	ldr	r3, [r3, #0]
 8024e56:	b29b      	uxth	r3, r3
 8024e58:	4618      	mov	r0, r3
 8024e5a:	683b      	ldr	r3, [r7, #0]
 8024e5c:	685a      	ldr	r2, [r3, #4]
 8024e5e:	4613      	mov	r3, r2
 8024e60:	009b      	lsls	r3, r3, #2
 8024e62:	4413      	add	r3, r2
 8024e64:	3b41      	subs	r3, #65	; 0x41
 8024e66:	fa00 f203 	lsl.w	r2, r0, r3
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	681b      	ldr	r3, [r3, #0]
 8024e6e:	430a      	orrs	r2, r1
 8024e70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024e72:	4b22      	ldr	r3, [pc, #136]	; (8024efc <HAL_ADC_ConfigChannel+0x234>)
 8024e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8024e76:	687b      	ldr	r3, [r7, #4]
 8024e78:	681b      	ldr	r3, [r3, #0]
 8024e7a:	4a21      	ldr	r2, [pc, #132]	; (8024f00 <HAL_ADC_ConfigChannel+0x238>)
 8024e7c:	4293      	cmp	r3, r2
 8024e7e:	d109      	bne.n	8024e94 <HAL_ADC_ConfigChannel+0x1cc>
 8024e80:	683b      	ldr	r3, [r7, #0]
 8024e82:	681b      	ldr	r3, [r3, #0]
 8024e84:	2b12      	cmp	r3, #18
 8024e86:	d105      	bne.n	8024e94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	685b      	ldr	r3, [r3, #4]
 8024e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	681b      	ldr	r3, [r3, #0]
 8024e98:	4a19      	ldr	r2, [pc, #100]	; (8024f00 <HAL_ADC_ConfigChannel+0x238>)
 8024e9a:	4293      	cmp	r3, r2
 8024e9c:	d123      	bne.n	8024ee6 <HAL_ADC_ConfigChannel+0x21e>
 8024e9e:	683b      	ldr	r3, [r7, #0]
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	2b10      	cmp	r3, #16
 8024ea4:	d003      	beq.n	8024eae <HAL_ADC_ConfigChannel+0x1e6>
 8024ea6:	683b      	ldr	r3, [r7, #0]
 8024ea8:	681b      	ldr	r3, [r3, #0]
 8024eaa:	2b11      	cmp	r3, #17
 8024eac:	d11b      	bne.n	8024ee6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8024eae:	68fb      	ldr	r3, [r7, #12]
 8024eb0:	685b      	ldr	r3, [r3, #4]
 8024eb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8024eba:	683b      	ldr	r3, [r7, #0]
 8024ebc:	681b      	ldr	r3, [r3, #0]
 8024ebe:	2b10      	cmp	r3, #16
 8024ec0:	d111      	bne.n	8024ee6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8024ec2:	4b10      	ldr	r3, [pc, #64]	; (8024f04 <HAL_ADC_ConfigChannel+0x23c>)
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	4a10      	ldr	r2, [pc, #64]	; (8024f08 <HAL_ADC_ConfigChannel+0x240>)
 8024ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8024ecc:	0c9a      	lsrs	r2, r3, #18
 8024ece:	4613      	mov	r3, r2
 8024ed0:	009b      	lsls	r3, r3, #2
 8024ed2:	4413      	add	r3, r2
 8024ed4:	005b      	lsls	r3, r3, #1
 8024ed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024ed8:	e002      	b.n	8024ee0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8024eda:	68bb      	ldr	r3, [r7, #8]
 8024edc:	3b01      	subs	r3, #1
 8024ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024ee0:	68bb      	ldr	r3, [r7, #8]
 8024ee2:	2b00      	cmp	r3, #0
 8024ee4:	d1f9      	bne.n	8024eda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	2200      	movs	r2, #0
 8024eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8024eee:	2300      	movs	r3, #0
}
 8024ef0:	4618      	mov	r0, r3
 8024ef2:	3714      	adds	r7, #20
 8024ef4:	46bd      	mov	sp, r7
 8024ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024efa:	4770      	bx	lr
 8024efc:	40012300 	.word	0x40012300
 8024f00:	40012000 	.word	0x40012000
 8024f04:	20000084 	.word	0x20000084
 8024f08:	431bde83 	.word	0x431bde83

08024f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024f0c:	b480      	push	{r7}
 8024f0e:	b085      	sub	sp, #20
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024f14:	4b79      	ldr	r3, [pc, #484]	; (80250fc <ADC_Init+0x1f0>)
 8024f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8024f18:	68fb      	ldr	r3, [r7, #12]
 8024f1a:	685b      	ldr	r3, [r3, #4]
 8024f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	685a      	ldr	r2, [r3, #4]
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	685b      	ldr	r3, [r3, #4]
 8024f2c:	431a      	orrs	r2, r3
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	681b      	ldr	r3, [r3, #0]
 8024f36:	685a      	ldr	r2, [r3, #4]
 8024f38:	687b      	ldr	r3, [r7, #4]
 8024f3a:	681b      	ldr	r3, [r3, #0]
 8024f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8024f42:	687b      	ldr	r3, [r7, #4]
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	6859      	ldr	r1, [r3, #4]
 8024f48:	687b      	ldr	r3, [r7, #4]
 8024f4a:	691b      	ldr	r3, [r3, #16]
 8024f4c:	021a      	lsls	r2, r3, #8
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	681b      	ldr	r3, [r3, #0]
 8024f52:	430a      	orrs	r2, r1
 8024f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8024f56:	687b      	ldr	r3, [r7, #4]
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	685a      	ldr	r2, [r3, #4]
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	681b      	ldr	r3, [r3, #0]
 8024f60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8024f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	681b      	ldr	r3, [r3, #0]
 8024f6a:	6859      	ldr	r1, [r3, #4]
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	689a      	ldr	r2, [r3, #8]
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	681b      	ldr	r3, [r3, #0]
 8024f74:	430a      	orrs	r2, r1
 8024f76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	689a      	ldr	r2, [r3, #8]
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	681b      	ldr	r3, [r3, #0]
 8024f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8024f88:	687b      	ldr	r3, [r7, #4]
 8024f8a:	681b      	ldr	r3, [r3, #0]
 8024f8c:	6899      	ldr	r1, [r3, #8]
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	68da      	ldr	r2, [r3, #12]
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	681b      	ldr	r3, [r3, #0]
 8024f96:	430a      	orrs	r2, r1
 8024f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024f9e:	4a58      	ldr	r2, [pc, #352]	; (8025100 <ADC_Init+0x1f4>)
 8024fa0:	4293      	cmp	r3, r2
 8024fa2:	d022      	beq.n	8024fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	681b      	ldr	r3, [r3, #0]
 8024fa8:	689a      	ldr	r2, [r3, #8]
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	681b      	ldr	r3, [r3, #0]
 8024fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8024fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	681b      	ldr	r3, [r3, #0]
 8024fb8:	6899      	ldr	r1, [r3, #8]
 8024fba:	687b      	ldr	r3, [r7, #4]
 8024fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	681b      	ldr	r3, [r3, #0]
 8024fc2:	430a      	orrs	r2, r1
 8024fc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8024fc6:	687b      	ldr	r3, [r7, #4]
 8024fc8:	681b      	ldr	r3, [r3, #0]
 8024fca:	689a      	ldr	r2, [r3, #8]
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	681b      	ldr	r3, [r3, #0]
 8024fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8024fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8024fd6:	687b      	ldr	r3, [r7, #4]
 8024fd8:	681b      	ldr	r3, [r3, #0]
 8024fda:	6899      	ldr	r1, [r3, #8]
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	681b      	ldr	r3, [r3, #0]
 8024fe4:	430a      	orrs	r2, r1
 8024fe6:	609a      	str	r2, [r3, #8]
 8024fe8:	e00f      	b.n	802500a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	681b      	ldr	r3, [r3, #0]
 8024fee:	689a      	ldr	r2, [r3, #8]
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8024ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	681b      	ldr	r3, [r3, #0]
 8024ffe:	689a      	ldr	r2, [r3, #8]
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8025008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802500a:	687b      	ldr	r3, [r7, #4]
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	689a      	ldr	r2, [r3, #8]
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	681b      	ldr	r3, [r3, #0]
 8025014:	f022 0202 	bic.w	r2, r2, #2
 8025018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 802501a:	687b      	ldr	r3, [r7, #4]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	6899      	ldr	r1, [r3, #8]
 8025020:	687b      	ldr	r3, [r7, #4]
 8025022:	7e1b      	ldrb	r3, [r3, #24]
 8025024:	005a      	lsls	r2, r3, #1
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	681b      	ldr	r3, [r3, #0]
 802502a:	430a      	orrs	r2, r1
 802502c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025034:	2b00      	cmp	r3, #0
 8025036:	d01b      	beq.n	8025070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	685a      	ldr	r2, [r3, #4]
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	681b      	ldr	r3, [r3, #0]
 8025042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025046:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	685a      	ldr	r2, [r3, #4]
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8025056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8025058:	687b      	ldr	r3, [r7, #4]
 802505a:	681b      	ldr	r3, [r3, #0]
 802505c:	6859      	ldr	r1, [r3, #4]
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025062:	3b01      	subs	r3, #1
 8025064:	035a      	lsls	r2, r3, #13
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	681b      	ldr	r3, [r3, #0]
 802506a:	430a      	orrs	r2, r1
 802506c:	605a      	str	r2, [r3, #4]
 802506e:	e007      	b.n	8025080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	681b      	ldr	r3, [r3, #0]
 8025074:	685a      	ldr	r2, [r3, #4]
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802507e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8025080:	687b      	ldr	r3, [r7, #4]
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802508e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	681b      	ldr	r3, [r3, #0]
 8025094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	69db      	ldr	r3, [r3, #28]
 802509a:	3b01      	subs	r3, #1
 802509c:	051a      	lsls	r2, r3, #20
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	430a      	orrs	r2, r1
 80250a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80250a6:	687b      	ldr	r3, [r7, #4]
 80250a8:	681b      	ldr	r3, [r3, #0]
 80250aa:	689a      	ldr	r2, [r3, #8]
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80250b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80250b6:	687b      	ldr	r3, [r7, #4]
 80250b8:	681b      	ldr	r3, [r3, #0]
 80250ba:	6899      	ldr	r1, [r3, #8]
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80250c2:	025a      	lsls	r2, r3, #9
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	681b      	ldr	r3, [r3, #0]
 80250c8:	430a      	orrs	r2, r1
 80250ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	681b      	ldr	r3, [r3, #0]
 80250d0:	689a      	ldr	r2, [r3, #8]
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	681b      	ldr	r3, [r3, #0]
 80250d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80250da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	6899      	ldr	r1, [r3, #8]
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	695b      	ldr	r3, [r3, #20]
 80250e6:	029a      	lsls	r2, r3, #10
 80250e8:	687b      	ldr	r3, [r7, #4]
 80250ea:	681b      	ldr	r3, [r3, #0]
 80250ec:	430a      	orrs	r2, r1
 80250ee:	609a      	str	r2, [r3, #8]
}
 80250f0:	bf00      	nop
 80250f2:	3714      	adds	r7, #20
 80250f4:	46bd      	mov	sp, r7
 80250f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250fa:	4770      	bx	lr
 80250fc:	40012300 	.word	0x40012300
 8025100:	0f000001 	.word	0x0f000001

08025104 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025104:	b580      	push	{r7, lr}
 8025106:	b084      	sub	sp, #16
 8025108:	af00      	add	r7, sp, #0
 802510a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802510c:	687b      	ldr	r3, [r7, #4]
 802510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025110:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8025112:	68fb      	ldr	r3, [r7, #12]
 8025114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025116:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802511a:	2b00      	cmp	r3, #0
 802511c:	d13c      	bne.n	8025198 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802511e:	68fb      	ldr	r3, [r7, #12]
 8025120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8025126:	68fb      	ldr	r3, [r7, #12]
 8025128:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802512a:	68fb      	ldr	r3, [r7, #12]
 802512c:	681b      	ldr	r3, [r3, #0]
 802512e:	689b      	ldr	r3, [r3, #8]
 8025130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8025134:	2b00      	cmp	r3, #0
 8025136:	d12b      	bne.n	8025190 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802513c:	2b00      	cmp	r3, #0
 802513e:	d127      	bne.n	8025190 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025146:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802514a:	2b00      	cmp	r3, #0
 802514c:	d006      	beq.n	802515c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802514e:	68fb      	ldr	r3, [r7, #12]
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	689b      	ldr	r3, [r3, #8]
 8025154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025158:	2b00      	cmp	r3, #0
 802515a:	d119      	bne.n	8025190 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802515c:	68fb      	ldr	r3, [r7, #12]
 802515e:	681b      	ldr	r3, [r3, #0]
 8025160:	685a      	ldr	r2, [r3, #4]
 8025162:	68fb      	ldr	r3, [r7, #12]
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	f022 0220 	bic.w	r2, r2, #32
 802516a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 802516c:	68fb      	ldr	r3, [r7, #12]
 802516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8025174:	68fb      	ldr	r3, [r7, #12]
 8025176:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8025178:	68fb      	ldr	r3, [r7, #12]
 802517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802517c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8025180:	2b00      	cmp	r3, #0
 8025182:	d105      	bne.n	8025190 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8025184:	68fb      	ldr	r3, [r7, #12]
 8025186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025188:	f043 0201 	orr.w	r2, r3, #1
 802518c:	68fb      	ldr	r3, [r7, #12]
 802518e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8025190:	68f8      	ldr	r0, [r7, #12]
 8025192:	f7ef fe35 	bl	8014e00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8025196:	e00e      	b.n	80251b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8025198:	68fb      	ldr	r3, [r7, #12]
 802519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802519c:	f003 0310 	and.w	r3, r3, #16
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	d003      	beq.n	80251ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80251a4:	68f8      	ldr	r0, [r7, #12]
 80251a6:	f7ff fd85 	bl	8024cb4 <HAL_ADC_ErrorCallback>
}
 80251aa:	e004      	b.n	80251b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80251ac:	68fb      	ldr	r3, [r7, #12]
 80251ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80251b2:	6878      	ldr	r0, [r7, #4]
 80251b4:	4798      	blx	r3
}
 80251b6:	bf00      	nop
 80251b8:	3710      	adds	r7, #16
 80251ba:	46bd      	mov	sp, r7
 80251bc:	bd80      	pop	{r7, pc}

080251be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80251be:	b580      	push	{r7, lr}
 80251c0:	b084      	sub	sp, #16
 80251c2:	af00      	add	r7, sp, #0
 80251c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80251c6:	687b      	ldr	r3, [r7, #4]
 80251c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80251cc:	68f8      	ldr	r0, [r7, #12]
 80251ce:	f7ff fd5d 	bl	8024c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80251d2:	bf00      	nop
 80251d4:	3710      	adds	r7, #16
 80251d6:	46bd      	mov	sp, r7
 80251d8:	bd80      	pop	{r7, pc}

080251da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80251da:	b580      	push	{r7, lr}
 80251dc:	b084      	sub	sp, #16
 80251de:	af00      	add	r7, sp, #0
 80251e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80251e2:	687b      	ldr	r3, [r7, #4]
 80251e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80251e8:	68fb      	ldr	r3, [r7, #12]
 80251ea:	2240      	movs	r2, #64	; 0x40
 80251ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80251ee:	68fb      	ldr	r3, [r7, #12]
 80251f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80251f2:	f043 0204 	orr.w	r2, r3, #4
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80251fa:	68f8      	ldr	r0, [r7, #12]
 80251fc:	f7ff fd5a 	bl	8024cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025200:	bf00      	nop
 8025202:	3710      	adds	r7, #16
 8025204:	46bd      	mov	sp, r7
 8025206:	bd80      	pop	{r7, pc}

08025208 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8025208:	b480      	push	{r7}
 802520a:	b083      	sub	sp, #12
 802520c:	af00      	add	r7, sp, #0
 802520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8025210:	bf00      	nop
 8025212:	370c      	adds	r7, #12
 8025214:	46bd      	mov	sp, r7
 8025216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802521a:	4770      	bx	lr

0802521c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 802521c:	b580      	push	{r7, lr}
 802521e:	b084      	sub	sp, #16
 8025220:	af00      	add	r7, sp, #0
 8025222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	2b00      	cmp	r3, #0
 8025228:	d101      	bne.n	802522e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 802522a:	2301      	movs	r3, #1
 802522c:	e0ed      	b.n	802540a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025234:	b2db      	uxtb	r3, r3
 8025236:	2b00      	cmp	r3, #0
 8025238:	d102      	bne.n	8025240 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 802523a:	6878      	ldr	r0, [r7, #4]
 802523c:	f7ef fe5c 	bl	8014ef8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8025240:	687b      	ldr	r3, [r7, #4]
 8025242:	681b      	ldr	r3, [r3, #0]
 8025244:	681a      	ldr	r2, [r3, #0]
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	f042 0201 	orr.w	r2, r2, #1
 802524e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8025250:	f7ff fa58 	bl	8024704 <HAL_GetTick>
 8025254:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8025256:	e012      	b.n	802527e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8025258:	f7ff fa54 	bl	8024704 <HAL_GetTick>
 802525c:	4602      	mov	r2, r0
 802525e:	68fb      	ldr	r3, [r7, #12]
 8025260:	1ad3      	subs	r3, r2, r3
 8025262:	2b0a      	cmp	r3, #10
 8025264:	d90b      	bls.n	802527e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8025266:	687b      	ldr	r3, [r7, #4]
 8025268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802526a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802526e:	687b      	ldr	r3, [r7, #4]
 8025270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8025272:	687b      	ldr	r3, [r7, #4]
 8025274:	2205      	movs	r2, #5
 8025276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802527a:	2301      	movs	r3, #1
 802527c:	e0c5      	b.n	802540a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	685b      	ldr	r3, [r3, #4]
 8025284:	f003 0301 	and.w	r3, r3, #1
 8025288:	2b00      	cmp	r3, #0
 802528a:	d0e5      	beq.n	8025258 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	681a      	ldr	r2, [r3, #0]
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	681b      	ldr	r3, [r3, #0]
 8025296:	f022 0202 	bic.w	r2, r2, #2
 802529a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802529c:	f7ff fa32 	bl	8024704 <HAL_GetTick>
 80252a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80252a2:	e012      	b.n	80252ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80252a4:	f7ff fa2e 	bl	8024704 <HAL_GetTick>
 80252a8:	4602      	mov	r2, r0
 80252aa:	68fb      	ldr	r3, [r7, #12]
 80252ac:	1ad3      	subs	r3, r2, r3
 80252ae:	2b0a      	cmp	r3, #10
 80252b0:	d90b      	bls.n	80252ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80252ba:	687b      	ldr	r3, [r7, #4]
 80252bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	2205      	movs	r2, #5
 80252c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80252c6:	2301      	movs	r3, #1
 80252c8:	e09f      	b.n	802540a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80252ca:	687b      	ldr	r3, [r7, #4]
 80252cc:	681b      	ldr	r3, [r3, #0]
 80252ce:	685b      	ldr	r3, [r3, #4]
 80252d0:	f003 0302 	and.w	r3, r3, #2
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d1e5      	bne.n	80252a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	7e1b      	ldrb	r3, [r3, #24]
 80252dc:	2b01      	cmp	r3, #1
 80252de:	d108      	bne.n	80252f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	681a      	ldr	r2, [r3, #0]
 80252e6:	687b      	ldr	r3, [r7, #4]
 80252e8:	681b      	ldr	r3, [r3, #0]
 80252ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80252ee:	601a      	str	r2, [r3, #0]
 80252f0:	e007      	b.n	8025302 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80252f2:	687b      	ldr	r3, [r7, #4]
 80252f4:	681b      	ldr	r3, [r3, #0]
 80252f6:	681a      	ldr	r2, [r3, #0]
 80252f8:	687b      	ldr	r3, [r7, #4]
 80252fa:	681b      	ldr	r3, [r3, #0]
 80252fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8025300:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	7e5b      	ldrb	r3, [r3, #25]
 8025306:	2b01      	cmp	r3, #1
 8025308:	d108      	bne.n	802531c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802530a:	687b      	ldr	r3, [r7, #4]
 802530c:	681b      	ldr	r3, [r3, #0]
 802530e:	681a      	ldr	r2, [r3, #0]
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025318:	601a      	str	r2, [r3, #0]
 802531a:	e007      	b.n	802532c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	681a      	ldr	r2, [r3, #0]
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	681b      	ldr	r3, [r3, #0]
 8025326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802532a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 802532c:	687b      	ldr	r3, [r7, #4]
 802532e:	7e9b      	ldrb	r3, [r3, #26]
 8025330:	2b01      	cmp	r3, #1
 8025332:	d108      	bne.n	8025346 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	681b      	ldr	r3, [r3, #0]
 8025338:	681a      	ldr	r2, [r3, #0]
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	681b      	ldr	r3, [r3, #0]
 802533e:	f042 0220 	orr.w	r2, r2, #32
 8025342:	601a      	str	r2, [r3, #0]
 8025344:	e007      	b.n	8025356 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8025346:	687b      	ldr	r3, [r7, #4]
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	681a      	ldr	r2, [r3, #0]
 802534c:	687b      	ldr	r3, [r7, #4]
 802534e:	681b      	ldr	r3, [r3, #0]
 8025350:	f022 0220 	bic.w	r2, r2, #32
 8025354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8025356:	687b      	ldr	r3, [r7, #4]
 8025358:	7edb      	ldrb	r3, [r3, #27]
 802535a:	2b01      	cmp	r3, #1
 802535c:	d108      	bne.n	8025370 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	681b      	ldr	r3, [r3, #0]
 8025362:	681a      	ldr	r2, [r3, #0]
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	681b      	ldr	r3, [r3, #0]
 8025368:	f022 0210 	bic.w	r2, r2, #16
 802536c:	601a      	str	r2, [r3, #0]
 802536e:	e007      	b.n	8025380 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	681a      	ldr	r2, [r3, #0]
 8025376:	687b      	ldr	r3, [r7, #4]
 8025378:	681b      	ldr	r3, [r3, #0]
 802537a:	f042 0210 	orr.w	r2, r2, #16
 802537e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	7f1b      	ldrb	r3, [r3, #28]
 8025384:	2b01      	cmp	r3, #1
 8025386:	d108      	bne.n	802539a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	681b      	ldr	r3, [r3, #0]
 802538c:	681a      	ldr	r2, [r3, #0]
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	681b      	ldr	r3, [r3, #0]
 8025392:	f042 0208 	orr.w	r2, r2, #8
 8025396:	601a      	str	r2, [r3, #0]
 8025398:	e007      	b.n	80253aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	681a      	ldr	r2, [r3, #0]
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	681b      	ldr	r3, [r3, #0]
 80253a4:	f022 0208 	bic.w	r2, r2, #8
 80253a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	7f5b      	ldrb	r3, [r3, #29]
 80253ae:	2b01      	cmp	r3, #1
 80253b0:	d108      	bne.n	80253c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	681a      	ldr	r2, [r3, #0]
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	681b      	ldr	r3, [r3, #0]
 80253bc:	f042 0204 	orr.w	r2, r2, #4
 80253c0:	601a      	str	r2, [r3, #0]
 80253c2:	e007      	b.n	80253d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80253c4:	687b      	ldr	r3, [r7, #4]
 80253c6:	681b      	ldr	r3, [r3, #0]
 80253c8:	681a      	ldr	r2, [r3, #0]
 80253ca:	687b      	ldr	r3, [r7, #4]
 80253cc:	681b      	ldr	r3, [r3, #0]
 80253ce:	f022 0204 	bic.w	r2, r2, #4
 80253d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80253d4:	687b      	ldr	r3, [r7, #4]
 80253d6:	689a      	ldr	r2, [r3, #8]
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	68db      	ldr	r3, [r3, #12]
 80253dc:	431a      	orrs	r2, r3
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	691b      	ldr	r3, [r3, #16]
 80253e2:	431a      	orrs	r2, r3
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	695b      	ldr	r3, [r3, #20]
 80253e8:	ea42 0103 	orr.w	r1, r2, r3
 80253ec:	687b      	ldr	r3, [r7, #4]
 80253ee:	685b      	ldr	r3, [r3, #4]
 80253f0:	1e5a      	subs	r2, r3, #1
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	430a      	orrs	r2, r1
 80253f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	2200      	movs	r2, #0
 80253fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8025400:	687b      	ldr	r3, [r7, #4]
 8025402:	2201      	movs	r2, #1
 8025404:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8025408:	2300      	movs	r3, #0
}
 802540a:	4618      	mov	r0, r3
 802540c:	3710      	adds	r7, #16
 802540e:	46bd      	mov	sp, r7
 8025410:	bd80      	pop	{r7, pc}
	...

08025414 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8025414:	b480      	push	{r7}
 8025416:	b087      	sub	sp, #28
 8025418:	af00      	add	r7, sp, #0
 802541a:	6078      	str	r0, [r7, #4]
 802541c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	681b      	ldr	r3, [r3, #0]
 8025422:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025424:	687b      	ldr	r3, [r7, #4]
 8025426:	f893 3020 	ldrb.w	r3, [r3, #32]
 802542a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 802542c:	7cfb      	ldrb	r3, [r7, #19]
 802542e:	2b01      	cmp	r3, #1
 8025430:	d003      	beq.n	802543a <HAL_CAN_ConfigFilter+0x26>
 8025432:	7cfb      	ldrb	r3, [r7, #19]
 8025434:	2b02      	cmp	r3, #2
 8025436:	f040 80be 	bne.w	80255b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 802543a:	4b65      	ldr	r3, [pc, #404]	; (80255d0 <HAL_CAN_ConfigFilter+0x1bc>)
 802543c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 802543e:	697b      	ldr	r3, [r7, #20]
 8025440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025444:	f043 0201 	orr.w	r2, r3, #1
 8025448:	697b      	ldr	r3, [r7, #20]
 802544a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 802544e:	697b      	ldr	r3, [r7, #20]
 8025450:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025454:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8025458:	697b      	ldr	r3, [r7, #20]
 802545a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 802545e:	697b      	ldr	r3, [r7, #20]
 8025460:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025464:	683b      	ldr	r3, [r7, #0]
 8025466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025468:	021b      	lsls	r3, r3, #8
 802546a:	431a      	orrs	r2, r3
 802546c:	697b      	ldr	r3, [r7, #20]
 802546e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8025472:	683b      	ldr	r3, [r7, #0]
 8025474:	695b      	ldr	r3, [r3, #20]
 8025476:	f003 031f 	and.w	r3, r3, #31
 802547a:	2201      	movs	r2, #1
 802547c:	fa02 f303 	lsl.w	r3, r2, r3
 8025480:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8025482:	697b      	ldr	r3, [r7, #20]
 8025484:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8025488:	68fb      	ldr	r3, [r7, #12]
 802548a:	43db      	mvns	r3, r3
 802548c:	401a      	ands	r2, r3
 802548e:	697b      	ldr	r3, [r7, #20]
 8025490:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8025494:	683b      	ldr	r3, [r7, #0]
 8025496:	69db      	ldr	r3, [r3, #28]
 8025498:	2b00      	cmp	r3, #0
 802549a:	d123      	bne.n	80254e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 802549c:	697b      	ldr	r3, [r7, #20]
 802549e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80254a2:	68fb      	ldr	r3, [r7, #12]
 80254a4:	43db      	mvns	r3, r3
 80254a6:	401a      	ands	r2, r3
 80254a8:	697b      	ldr	r3, [r7, #20]
 80254aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80254ae:	683b      	ldr	r3, [r7, #0]
 80254b0:	68db      	ldr	r3, [r3, #12]
 80254b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80254b4:	683b      	ldr	r3, [r7, #0]
 80254b6:	685b      	ldr	r3, [r3, #4]
 80254b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80254ba:	683a      	ldr	r2, [r7, #0]
 80254bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80254be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80254c0:	697b      	ldr	r3, [r7, #20]
 80254c2:	3248      	adds	r2, #72	; 0x48
 80254c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80254c8:	683b      	ldr	r3, [r7, #0]
 80254ca:	689b      	ldr	r3, [r3, #8]
 80254cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80254ce:	683b      	ldr	r3, [r7, #0]
 80254d0:	681b      	ldr	r3, [r3, #0]
 80254d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80254d4:	683b      	ldr	r3, [r7, #0]
 80254d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80254d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80254da:	6979      	ldr	r1, [r7, #20]
 80254dc:	3348      	adds	r3, #72	; 0x48
 80254de:	00db      	lsls	r3, r3, #3
 80254e0:	440b      	add	r3, r1
 80254e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80254e4:	683b      	ldr	r3, [r7, #0]
 80254e6:	69db      	ldr	r3, [r3, #28]
 80254e8:	2b01      	cmp	r3, #1
 80254ea:	d122      	bne.n	8025532 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80254ec:	697b      	ldr	r3, [r7, #20]
 80254ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80254f2:	68fb      	ldr	r3, [r7, #12]
 80254f4:	431a      	orrs	r2, r3
 80254f6:	697b      	ldr	r3, [r7, #20]
 80254f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80254fc:	683b      	ldr	r3, [r7, #0]
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8025502:	683b      	ldr	r3, [r7, #0]
 8025504:	685b      	ldr	r3, [r3, #4]
 8025506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025508:	683a      	ldr	r2, [r7, #0]
 802550a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 802550c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 802550e:	697b      	ldr	r3, [r7, #20]
 8025510:	3248      	adds	r2, #72	; 0x48
 8025512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8025516:	683b      	ldr	r3, [r7, #0]
 8025518:	689b      	ldr	r3, [r3, #8]
 802551a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 802551c:	683b      	ldr	r3, [r7, #0]
 802551e:	68db      	ldr	r3, [r3, #12]
 8025520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8025522:	683b      	ldr	r3, [r7, #0]
 8025524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8025526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8025528:	6979      	ldr	r1, [r7, #20]
 802552a:	3348      	adds	r3, #72	; 0x48
 802552c:	00db      	lsls	r3, r3, #3
 802552e:	440b      	add	r3, r1
 8025530:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8025532:	683b      	ldr	r3, [r7, #0]
 8025534:	699b      	ldr	r3, [r3, #24]
 8025536:	2b00      	cmp	r3, #0
 8025538:	d109      	bne.n	802554e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 802553a:	697b      	ldr	r3, [r7, #20]
 802553c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8025540:	68fb      	ldr	r3, [r7, #12]
 8025542:	43db      	mvns	r3, r3
 8025544:	401a      	ands	r2, r3
 8025546:	697b      	ldr	r3, [r7, #20]
 8025548:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 802554c:	e007      	b.n	802555e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 802554e:	697b      	ldr	r3, [r7, #20]
 8025550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8025554:	68fb      	ldr	r3, [r7, #12]
 8025556:	431a      	orrs	r2, r3
 8025558:	697b      	ldr	r3, [r7, #20]
 802555a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 802555e:	683b      	ldr	r3, [r7, #0]
 8025560:	691b      	ldr	r3, [r3, #16]
 8025562:	2b00      	cmp	r3, #0
 8025564:	d109      	bne.n	802557a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8025566:	697b      	ldr	r3, [r7, #20]
 8025568:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 802556c:	68fb      	ldr	r3, [r7, #12]
 802556e:	43db      	mvns	r3, r3
 8025570:	401a      	ands	r2, r3
 8025572:	697b      	ldr	r3, [r7, #20]
 8025574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8025578:	e007      	b.n	802558a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 802557a:	697b      	ldr	r3, [r7, #20]
 802557c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8025580:	68fb      	ldr	r3, [r7, #12]
 8025582:	431a      	orrs	r2, r3
 8025584:	697b      	ldr	r3, [r7, #20]
 8025586:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 802558a:	683b      	ldr	r3, [r7, #0]
 802558c:	6a1b      	ldr	r3, [r3, #32]
 802558e:	2b01      	cmp	r3, #1
 8025590:	d107      	bne.n	80255a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8025592:	697b      	ldr	r3, [r7, #20]
 8025594:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8025598:	68fb      	ldr	r3, [r7, #12]
 802559a:	431a      	orrs	r2, r3
 802559c:	697b      	ldr	r3, [r7, #20]
 802559e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80255a2:	697b      	ldr	r3, [r7, #20]
 80255a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80255a8:	f023 0201 	bic.w	r2, r3, #1
 80255ac:	697b      	ldr	r3, [r7, #20]
 80255ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80255b2:	2300      	movs	r3, #0
 80255b4:	e006      	b.n	80255c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80255b6:	687b      	ldr	r3, [r7, #4]
 80255b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80255ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80255c2:	2301      	movs	r3, #1
  }
}
 80255c4:	4618      	mov	r0, r3
 80255c6:	371c      	adds	r7, #28
 80255c8:	46bd      	mov	sp, r7
 80255ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ce:	4770      	bx	lr
 80255d0:	40006400 	.word	0x40006400

080255d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80255d4:	b580      	push	{r7, lr}
 80255d6:	b084      	sub	sp, #16
 80255d8:	af00      	add	r7, sp, #0
 80255da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80255e2:	b2db      	uxtb	r3, r3
 80255e4:	2b01      	cmp	r3, #1
 80255e6:	d12e      	bne.n	8025646 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80255e8:	687b      	ldr	r3, [r7, #4]
 80255ea:	2202      	movs	r2, #2
 80255ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	681a      	ldr	r2, [r3, #0]
 80255f6:	687b      	ldr	r3, [r7, #4]
 80255f8:	681b      	ldr	r3, [r3, #0]
 80255fa:	f022 0201 	bic.w	r2, r2, #1
 80255fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8025600:	f7ff f880 	bl	8024704 <HAL_GetTick>
 8025604:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8025606:	e012      	b.n	802562e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8025608:	f7ff f87c 	bl	8024704 <HAL_GetTick>
 802560c:	4602      	mov	r2, r0
 802560e:	68fb      	ldr	r3, [r7, #12]
 8025610:	1ad3      	subs	r3, r2, r3
 8025612:	2b0a      	cmp	r3, #10
 8025614:	d90b      	bls.n	802562e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802561a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 802561e:	687b      	ldr	r3, [r7, #4]
 8025620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	2205      	movs	r2, #5
 8025626:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 802562a:	2301      	movs	r3, #1
 802562c:	e012      	b.n	8025654 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802562e:	687b      	ldr	r3, [r7, #4]
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	685b      	ldr	r3, [r3, #4]
 8025634:	f003 0301 	and.w	r3, r3, #1
 8025638:	2b00      	cmp	r3, #0
 802563a:	d1e5      	bne.n	8025608 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	2200      	movs	r2, #0
 8025640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8025642:	2300      	movs	r3, #0
 8025644:	e006      	b.n	8025654 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802564a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802564e:	687b      	ldr	r3, [r7, #4]
 8025650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025652:	2301      	movs	r3, #1
  }
}
 8025654:	4618      	mov	r0, r3
 8025656:	3710      	adds	r7, #16
 8025658:	46bd      	mov	sp, r7
 802565a:	bd80      	pop	{r7, pc}

0802565c <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 802565c:	b480      	push	{r7}
 802565e:	b087      	sub	sp, #28
 8025660:	af00      	add	r7, sp, #0
 8025662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8025664:	2300      	movs	r3, #0
 8025666:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8025668:	4b1c      	ldr	r3, [pc, #112]	; (80256dc <HAL_CAN_WakeUp+0x80>)
 802566a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025672:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8025674:	7cfb      	ldrb	r3, [r7, #19]
 8025676:	2b01      	cmp	r3, #1
 8025678:	d002      	beq.n	8025680 <HAL_CAN_WakeUp+0x24>
 802567a:	7cfb      	ldrb	r3, [r7, #19]
 802567c:	2b02      	cmp	r3, #2
 802567e:	d11f      	bne.n	80256c0 <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8025680:	687b      	ldr	r3, [r7, #4]
 8025682:	681b      	ldr	r3, [r3, #0]
 8025684:	681a      	ldr	r2, [r3, #0]
 8025686:	687b      	ldr	r3, [r7, #4]
 8025688:	681b      	ldr	r3, [r3, #0]
 802568a:	f022 0202 	bic.w	r2, r2, #2
 802568e:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8025690:	68fb      	ldr	r3, [r7, #12]
 8025692:	3301      	adds	r3, #1
 8025694:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8025696:	68fb      	ldr	r3, [r7, #12]
 8025698:	697a      	ldr	r2, [r7, #20]
 802569a:	429a      	cmp	r2, r3
 802569c:	d207      	bcs.n	80256ae <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802569e:	687b      	ldr	r3, [r7, #4]
 80256a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80256a6:	687b      	ldr	r3, [r7, #4]
 80256a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80256aa:	2301      	movs	r3, #1
 80256ac:	e00f      	b.n	80256ce <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	681b      	ldr	r3, [r3, #0]
 80256b2:	685b      	ldr	r3, [r3, #4]
 80256b4:	f003 0302 	and.w	r3, r3, #2
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	d1e9      	bne.n	8025690 <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 80256bc:	2300      	movs	r3, #0
 80256be:	e006      	b.n	80256ce <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80256cc:	2301      	movs	r3, #1
  }
}
 80256ce:	4618      	mov	r0, r3
 80256d0:	371c      	adds	r7, #28
 80256d2:	46bd      	mov	sp, r7
 80256d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256d8:	4770      	bx	lr
 80256da:	bf00      	nop
 80256dc:	000f4240 	.word	0x000f4240

080256e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80256e0:	b480      	push	{r7}
 80256e2:	b089      	sub	sp, #36	; 0x24
 80256e4:	af00      	add	r7, sp, #0
 80256e6:	60f8      	str	r0, [r7, #12]
 80256e8:	60b9      	str	r1, [r7, #8]
 80256ea:	607a      	str	r2, [r7, #4]
 80256ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80256ee:	68fb      	ldr	r3, [r7, #12]
 80256f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80256f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80256f6:	68fb      	ldr	r3, [r7, #12]
 80256f8:	681b      	ldr	r3, [r3, #0]
 80256fa:	689b      	ldr	r3, [r3, #8]
 80256fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80256fe:	7ffb      	ldrb	r3, [r7, #31]
 8025700:	2b01      	cmp	r3, #1
 8025702:	d003      	beq.n	802570c <HAL_CAN_AddTxMessage+0x2c>
 8025704:	7ffb      	ldrb	r3, [r7, #31]
 8025706:	2b02      	cmp	r3, #2
 8025708:	f040 80b8 	bne.w	802587c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802570c:	69bb      	ldr	r3, [r7, #24]
 802570e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025712:	2b00      	cmp	r3, #0
 8025714:	d10a      	bne.n	802572c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8025716:	69bb      	ldr	r3, [r7, #24]
 8025718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 802571c:	2b00      	cmp	r3, #0
 802571e:	d105      	bne.n	802572c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8025720:	69bb      	ldr	r3, [r7, #24]
 8025722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8025726:	2b00      	cmp	r3, #0
 8025728:	f000 80a0 	beq.w	802586c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 802572c:	69bb      	ldr	r3, [r7, #24]
 802572e:	0e1b      	lsrs	r3, r3, #24
 8025730:	f003 0303 	and.w	r3, r3, #3
 8025734:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8025736:	697b      	ldr	r3, [r7, #20]
 8025738:	2b02      	cmp	r3, #2
 802573a:	d907      	bls.n	802574c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 802573c:	68fb      	ldr	r3, [r7, #12]
 802573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025740:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8025744:	68fb      	ldr	r3, [r7, #12]
 8025746:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025748:	2301      	movs	r3, #1
 802574a:	e09e      	b.n	802588a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 802574c:	2201      	movs	r2, #1
 802574e:	697b      	ldr	r3, [r7, #20]
 8025750:	409a      	lsls	r2, r3
 8025752:	683b      	ldr	r3, [r7, #0]
 8025754:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8025756:	68bb      	ldr	r3, [r7, #8]
 8025758:	689b      	ldr	r3, [r3, #8]
 802575a:	2b00      	cmp	r3, #0
 802575c:	d10d      	bne.n	802577a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 802575e:	68bb      	ldr	r3, [r7, #8]
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8025764:	68bb      	ldr	r3, [r7, #8]
 8025766:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8025768:	68f9      	ldr	r1, [r7, #12]
 802576a:	6809      	ldr	r1, [r1, #0]
 802576c:	431a      	orrs	r2, r3
 802576e:	697b      	ldr	r3, [r7, #20]
 8025770:	3318      	adds	r3, #24
 8025772:	011b      	lsls	r3, r3, #4
 8025774:	440b      	add	r3, r1
 8025776:	601a      	str	r2, [r3, #0]
 8025778:	e00f      	b.n	802579a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802577a:	68bb      	ldr	r3, [r7, #8]
 802577c:	685b      	ldr	r3, [r3, #4]
 802577e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8025780:	68bb      	ldr	r3, [r7, #8]
 8025782:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8025784:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8025786:	68bb      	ldr	r3, [r7, #8]
 8025788:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 802578a:	68f9      	ldr	r1, [r7, #12]
 802578c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 802578e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8025790:	697b      	ldr	r3, [r7, #20]
 8025792:	3318      	adds	r3, #24
 8025794:	011b      	lsls	r3, r3, #4
 8025796:	440b      	add	r3, r1
 8025798:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 802579a:	68fb      	ldr	r3, [r7, #12]
 802579c:	6819      	ldr	r1, [r3, #0]
 802579e:	68bb      	ldr	r3, [r7, #8]
 80257a0:	691a      	ldr	r2, [r3, #16]
 80257a2:	697b      	ldr	r3, [r7, #20]
 80257a4:	3318      	adds	r3, #24
 80257a6:	011b      	lsls	r3, r3, #4
 80257a8:	440b      	add	r3, r1
 80257aa:	3304      	adds	r3, #4
 80257ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80257ae:	68bb      	ldr	r3, [r7, #8]
 80257b0:	7d1b      	ldrb	r3, [r3, #20]
 80257b2:	2b01      	cmp	r3, #1
 80257b4:	d111      	bne.n	80257da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80257b6:	68fb      	ldr	r3, [r7, #12]
 80257b8:	681a      	ldr	r2, [r3, #0]
 80257ba:	697b      	ldr	r3, [r7, #20]
 80257bc:	3318      	adds	r3, #24
 80257be:	011b      	lsls	r3, r3, #4
 80257c0:	4413      	add	r3, r2
 80257c2:	3304      	adds	r3, #4
 80257c4:	681b      	ldr	r3, [r3, #0]
 80257c6:	68fa      	ldr	r2, [r7, #12]
 80257c8:	6811      	ldr	r1, [r2, #0]
 80257ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80257ce:	697b      	ldr	r3, [r7, #20]
 80257d0:	3318      	adds	r3, #24
 80257d2:	011b      	lsls	r3, r3, #4
 80257d4:	440b      	add	r3, r1
 80257d6:	3304      	adds	r3, #4
 80257d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	3307      	adds	r3, #7
 80257de:	781b      	ldrb	r3, [r3, #0]
 80257e0:	061a      	lsls	r2, r3, #24
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	3306      	adds	r3, #6
 80257e6:	781b      	ldrb	r3, [r3, #0]
 80257e8:	041b      	lsls	r3, r3, #16
 80257ea:	431a      	orrs	r2, r3
 80257ec:	687b      	ldr	r3, [r7, #4]
 80257ee:	3305      	adds	r3, #5
 80257f0:	781b      	ldrb	r3, [r3, #0]
 80257f2:	021b      	lsls	r3, r3, #8
 80257f4:	4313      	orrs	r3, r2
 80257f6:	687a      	ldr	r2, [r7, #4]
 80257f8:	3204      	adds	r2, #4
 80257fa:	7812      	ldrb	r2, [r2, #0]
 80257fc:	4610      	mov	r0, r2
 80257fe:	68fa      	ldr	r2, [r7, #12]
 8025800:	6811      	ldr	r1, [r2, #0]
 8025802:	ea43 0200 	orr.w	r2, r3, r0
 8025806:	697b      	ldr	r3, [r7, #20]
 8025808:	011b      	lsls	r3, r3, #4
 802580a:	440b      	add	r3, r1
 802580c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8025810:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8025812:	687b      	ldr	r3, [r7, #4]
 8025814:	3303      	adds	r3, #3
 8025816:	781b      	ldrb	r3, [r3, #0]
 8025818:	061a      	lsls	r2, r3, #24
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	3302      	adds	r3, #2
 802581e:	781b      	ldrb	r3, [r3, #0]
 8025820:	041b      	lsls	r3, r3, #16
 8025822:	431a      	orrs	r2, r3
 8025824:	687b      	ldr	r3, [r7, #4]
 8025826:	3301      	adds	r3, #1
 8025828:	781b      	ldrb	r3, [r3, #0]
 802582a:	021b      	lsls	r3, r3, #8
 802582c:	4313      	orrs	r3, r2
 802582e:	687a      	ldr	r2, [r7, #4]
 8025830:	7812      	ldrb	r2, [r2, #0]
 8025832:	4610      	mov	r0, r2
 8025834:	68fa      	ldr	r2, [r7, #12]
 8025836:	6811      	ldr	r1, [r2, #0]
 8025838:	ea43 0200 	orr.w	r2, r3, r0
 802583c:	697b      	ldr	r3, [r7, #20]
 802583e:	011b      	lsls	r3, r3, #4
 8025840:	440b      	add	r3, r1
 8025842:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8025846:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8025848:	68fb      	ldr	r3, [r7, #12]
 802584a:	681a      	ldr	r2, [r3, #0]
 802584c:	697b      	ldr	r3, [r7, #20]
 802584e:	3318      	adds	r3, #24
 8025850:	011b      	lsls	r3, r3, #4
 8025852:	4413      	add	r3, r2
 8025854:	681b      	ldr	r3, [r3, #0]
 8025856:	68fa      	ldr	r2, [r7, #12]
 8025858:	6811      	ldr	r1, [r2, #0]
 802585a:	f043 0201 	orr.w	r2, r3, #1
 802585e:	697b      	ldr	r3, [r7, #20]
 8025860:	3318      	adds	r3, #24
 8025862:	011b      	lsls	r3, r3, #4
 8025864:	440b      	add	r3, r1
 8025866:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8025868:	2300      	movs	r3, #0
 802586a:	e00e      	b.n	802588a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802586c:	68fb      	ldr	r3, [r7, #12]
 802586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025870:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025874:	68fb      	ldr	r3, [r7, #12]
 8025876:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8025878:	2301      	movs	r3, #1
 802587a:	e006      	b.n	802588a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025880:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025888:	2301      	movs	r3, #1
  }
}
 802588a:	4618      	mov	r0, r3
 802588c:	3724      	adds	r7, #36	; 0x24
 802588e:	46bd      	mov	sp, r7
 8025890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025894:	4770      	bx	lr

08025896 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8025896:	b480      	push	{r7}
 8025898:	b085      	sub	sp, #20
 802589a:	af00      	add	r7, sp, #0
 802589c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 802589e:	2300      	movs	r3, #0
 80258a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80258a2:	687b      	ldr	r3, [r7, #4]
 80258a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80258a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80258aa:	7afb      	ldrb	r3, [r7, #11]
 80258ac:	2b01      	cmp	r3, #1
 80258ae:	d002      	beq.n	80258b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80258b0:	7afb      	ldrb	r3, [r7, #11]
 80258b2:	2b02      	cmp	r3, #2
 80258b4:	d11d      	bne.n	80258f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	681b      	ldr	r3, [r3, #0]
 80258ba:	689b      	ldr	r3, [r3, #8]
 80258bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80258c0:	2b00      	cmp	r3, #0
 80258c2:	d002      	beq.n	80258ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80258c4:	68fb      	ldr	r3, [r7, #12]
 80258c6:	3301      	adds	r3, #1
 80258c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	681b      	ldr	r3, [r3, #0]
 80258ce:	689b      	ldr	r3, [r3, #8]
 80258d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	d002      	beq.n	80258de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80258d8:	68fb      	ldr	r3, [r7, #12]
 80258da:	3301      	adds	r3, #1
 80258dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	681b      	ldr	r3, [r3, #0]
 80258e2:	689b      	ldr	r3, [r3, #8]
 80258e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80258e8:	2b00      	cmp	r3, #0
 80258ea:	d002      	beq.n	80258f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80258ec:	68fb      	ldr	r3, [r7, #12]
 80258ee:	3301      	adds	r3, #1
 80258f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80258f2:	68fb      	ldr	r3, [r7, #12]
}
 80258f4:	4618      	mov	r0, r3
 80258f6:	3714      	adds	r7, #20
 80258f8:	46bd      	mov	sp, r7
 80258fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258fe:	4770      	bx	lr

08025900 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8025900:	b480      	push	{r7}
 8025902:	b087      	sub	sp, #28
 8025904:	af00      	add	r7, sp, #0
 8025906:	60f8      	str	r0, [r7, #12]
 8025908:	60b9      	str	r1, [r7, #8]
 802590a:	607a      	str	r2, [r7, #4]
 802590c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802590e:	68fb      	ldr	r3, [r7, #12]
 8025910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025914:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8025916:	7dfb      	ldrb	r3, [r7, #23]
 8025918:	2b01      	cmp	r3, #1
 802591a:	d003      	beq.n	8025924 <HAL_CAN_GetRxMessage+0x24>
 802591c:	7dfb      	ldrb	r3, [r7, #23]
 802591e:	2b02      	cmp	r3, #2
 8025920:	f040 80f3 	bne.w	8025b0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8025924:	68bb      	ldr	r3, [r7, #8]
 8025926:	2b00      	cmp	r3, #0
 8025928:	d10e      	bne.n	8025948 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 802592a:	68fb      	ldr	r3, [r7, #12]
 802592c:	681b      	ldr	r3, [r3, #0]
 802592e:	68db      	ldr	r3, [r3, #12]
 8025930:	f003 0303 	and.w	r3, r3, #3
 8025934:	2b00      	cmp	r3, #0
 8025936:	d116      	bne.n	8025966 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025938:	68fb      	ldr	r3, [r7, #12]
 802593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802593c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025940:	68fb      	ldr	r3, [r7, #12]
 8025942:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025944:	2301      	movs	r3, #1
 8025946:	e0e7      	b.n	8025b18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8025948:	68fb      	ldr	r3, [r7, #12]
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	691b      	ldr	r3, [r3, #16]
 802594e:	f003 0303 	and.w	r3, r3, #3
 8025952:	2b00      	cmp	r3, #0
 8025954:	d107      	bne.n	8025966 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025956:	68fb      	ldr	r3, [r7, #12]
 8025958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802595a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802595e:	68fb      	ldr	r3, [r7, #12]
 8025960:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025962:	2301      	movs	r3, #1
 8025964:	e0d8      	b.n	8025b18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8025966:	68fb      	ldr	r3, [r7, #12]
 8025968:	681a      	ldr	r2, [r3, #0]
 802596a:	68bb      	ldr	r3, [r7, #8]
 802596c:	331b      	adds	r3, #27
 802596e:	011b      	lsls	r3, r3, #4
 8025970:	4413      	add	r3, r2
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	f003 0204 	and.w	r2, r3, #4
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	689b      	ldr	r3, [r3, #8]
 8025980:	2b00      	cmp	r3, #0
 8025982:	d10c      	bne.n	802599e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	681a      	ldr	r2, [r3, #0]
 8025988:	68bb      	ldr	r3, [r7, #8]
 802598a:	331b      	adds	r3, #27
 802598c:	011b      	lsls	r3, r3, #4
 802598e:	4413      	add	r3, r2
 8025990:	681b      	ldr	r3, [r3, #0]
 8025992:	0d5b      	lsrs	r3, r3, #21
 8025994:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8025998:	687b      	ldr	r3, [r7, #4]
 802599a:	601a      	str	r2, [r3, #0]
 802599c:	e00b      	b.n	80259b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 802599e:	68fb      	ldr	r3, [r7, #12]
 80259a0:	681a      	ldr	r2, [r3, #0]
 80259a2:	68bb      	ldr	r3, [r7, #8]
 80259a4:	331b      	adds	r3, #27
 80259a6:	011b      	lsls	r3, r3, #4
 80259a8:	4413      	add	r3, r2
 80259aa:	681b      	ldr	r3, [r3, #0]
 80259ac:	08db      	lsrs	r3, r3, #3
 80259ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80259b6:	68fb      	ldr	r3, [r7, #12]
 80259b8:	681a      	ldr	r2, [r3, #0]
 80259ba:	68bb      	ldr	r3, [r7, #8]
 80259bc:	331b      	adds	r3, #27
 80259be:	011b      	lsls	r3, r3, #4
 80259c0:	4413      	add	r3, r2
 80259c2:	681b      	ldr	r3, [r3, #0]
 80259c4:	f003 0202 	and.w	r2, r3, #2
 80259c8:	687b      	ldr	r3, [r7, #4]
 80259ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	681a      	ldr	r2, [r3, #0]
 80259d0:	68bb      	ldr	r3, [r7, #8]
 80259d2:	331b      	adds	r3, #27
 80259d4:	011b      	lsls	r3, r3, #4
 80259d6:	4413      	add	r3, r2
 80259d8:	3304      	adds	r3, #4
 80259da:	681b      	ldr	r3, [r3, #0]
 80259dc:	f003 020f 	and.w	r2, r3, #15
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80259e4:	68fb      	ldr	r3, [r7, #12]
 80259e6:	681a      	ldr	r2, [r3, #0]
 80259e8:	68bb      	ldr	r3, [r7, #8]
 80259ea:	331b      	adds	r3, #27
 80259ec:	011b      	lsls	r3, r3, #4
 80259ee:	4413      	add	r3, r2
 80259f0:	3304      	adds	r3, #4
 80259f2:	681b      	ldr	r3, [r3, #0]
 80259f4:	0a1b      	lsrs	r3, r3, #8
 80259f6:	b2da      	uxtb	r2, r3
 80259f8:	687b      	ldr	r3, [r7, #4]
 80259fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80259fc:	68fb      	ldr	r3, [r7, #12]
 80259fe:	681a      	ldr	r2, [r3, #0]
 8025a00:	68bb      	ldr	r3, [r7, #8]
 8025a02:	331b      	adds	r3, #27
 8025a04:	011b      	lsls	r3, r3, #4
 8025a06:	4413      	add	r3, r2
 8025a08:	3304      	adds	r3, #4
 8025a0a:	681b      	ldr	r3, [r3, #0]
 8025a0c:	0c1b      	lsrs	r3, r3, #16
 8025a0e:	b29a      	uxth	r2, r3
 8025a10:	687b      	ldr	r3, [r7, #4]
 8025a12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8025a14:	68fb      	ldr	r3, [r7, #12]
 8025a16:	681a      	ldr	r2, [r3, #0]
 8025a18:	68bb      	ldr	r3, [r7, #8]
 8025a1a:	011b      	lsls	r3, r3, #4
 8025a1c:	4413      	add	r3, r2
 8025a1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025a22:	681b      	ldr	r3, [r3, #0]
 8025a24:	b2da      	uxtb	r2, r3
 8025a26:	683b      	ldr	r3, [r7, #0]
 8025a28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8025a2a:	68fb      	ldr	r3, [r7, #12]
 8025a2c:	681a      	ldr	r2, [r3, #0]
 8025a2e:	68bb      	ldr	r3, [r7, #8]
 8025a30:	011b      	lsls	r3, r3, #4
 8025a32:	4413      	add	r3, r2
 8025a34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025a38:	681b      	ldr	r3, [r3, #0]
 8025a3a:	0a1a      	lsrs	r2, r3, #8
 8025a3c:	683b      	ldr	r3, [r7, #0]
 8025a3e:	3301      	adds	r3, #1
 8025a40:	b2d2      	uxtb	r2, r2
 8025a42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8025a44:	68fb      	ldr	r3, [r7, #12]
 8025a46:	681a      	ldr	r2, [r3, #0]
 8025a48:	68bb      	ldr	r3, [r7, #8]
 8025a4a:	011b      	lsls	r3, r3, #4
 8025a4c:	4413      	add	r3, r2
 8025a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025a52:	681b      	ldr	r3, [r3, #0]
 8025a54:	0c1a      	lsrs	r2, r3, #16
 8025a56:	683b      	ldr	r3, [r7, #0]
 8025a58:	3302      	adds	r3, #2
 8025a5a:	b2d2      	uxtb	r2, r2
 8025a5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8025a5e:	68fb      	ldr	r3, [r7, #12]
 8025a60:	681a      	ldr	r2, [r3, #0]
 8025a62:	68bb      	ldr	r3, [r7, #8]
 8025a64:	011b      	lsls	r3, r3, #4
 8025a66:	4413      	add	r3, r2
 8025a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025a6c:	681b      	ldr	r3, [r3, #0]
 8025a6e:	0e1a      	lsrs	r2, r3, #24
 8025a70:	683b      	ldr	r3, [r7, #0]
 8025a72:	3303      	adds	r3, #3
 8025a74:	b2d2      	uxtb	r2, r2
 8025a76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8025a78:	68fb      	ldr	r3, [r7, #12]
 8025a7a:	681a      	ldr	r2, [r3, #0]
 8025a7c:	68bb      	ldr	r3, [r7, #8]
 8025a7e:	011b      	lsls	r3, r3, #4
 8025a80:	4413      	add	r3, r2
 8025a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025a86:	681a      	ldr	r2, [r3, #0]
 8025a88:	683b      	ldr	r3, [r7, #0]
 8025a8a:	3304      	adds	r3, #4
 8025a8c:	b2d2      	uxtb	r2, r2
 8025a8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	681a      	ldr	r2, [r3, #0]
 8025a94:	68bb      	ldr	r3, [r7, #8]
 8025a96:	011b      	lsls	r3, r3, #4
 8025a98:	4413      	add	r3, r2
 8025a9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	0a1a      	lsrs	r2, r3, #8
 8025aa2:	683b      	ldr	r3, [r7, #0]
 8025aa4:	3305      	adds	r3, #5
 8025aa6:	b2d2      	uxtb	r2, r2
 8025aa8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8025aaa:	68fb      	ldr	r3, [r7, #12]
 8025aac:	681a      	ldr	r2, [r3, #0]
 8025aae:	68bb      	ldr	r3, [r7, #8]
 8025ab0:	011b      	lsls	r3, r3, #4
 8025ab2:	4413      	add	r3, r2
 8025ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	0c1a      	lsrs	r2, r3, #16
 8025abc:	683b      	ldr	r3, [r7, #0]
 8025abe:	3306      	adds	r3, #6
 8025ac0:	b2d2      	uxtb	r2, r2
 8025ac2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8025ac4:	68fb      	ldr	r3, [r7, #12]
 8025ac6:	681a      	ldr	r2, [r3, #0]
 8025ac8:	68bb      	ldr	r3, [r7, #8]
 8025aca:	011b      	lsls	r3, r3, #4
 8025acc:	4413      	add	r3, r2
 8025ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025ad2:	681b      	ldr	r3, [r3, #0]
 8025ad4:	0e1a      	lsrs	r2, r3, #24
 8025ad6:	683b      	ldr	r3, [r7, #0]
 8025ad8:	3307      	adds	r3, #7
 8025ada:	b2d2      	uxtb	r2, r2
 8025adc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8025ade:	68bb      	ldr	r3, [r7, #8]
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	d108      	bne.n	8025af6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8025ae4:	68fb      	ldr	r3, [r7, #12]
 8025ae6:	681b      	ldr	r3, [r3, #0]
 8025ae8:	68da      	ldr	r2, [r3, #12]
 8025aea:	68fb      	ldr	r3, [r7, #12]
 8025aec:	681b      	ldr	r3, [r3, #0]
 8025aee:	f042 0220 	orr.w	r2, r2, #32
 8025af2:	60da      	str	r2, [r3, #12]
 8025af4:	e007      	b.n	8025b06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8025af6:	68fb      	ldr	r3, [r7, #12]
 8025af8:	681b      	ldr	r3, [r3, #0]
 8025afa:	691a      	ldr	r2, [r3, #16]
 8025afc:	68fb      	ldr	r3, [r7, #12]
 8025afe:	681b      	ldr	r3, [r3, #0]
 8025b00:	f042 0220 	orr.w	r2, r2, #32
 8025b04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8025b06:	2300      	movs	r3, #0
 8025b08:	e006      	b.n	8025b18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025b12:	68fb      	ldr	r3, [r7, #12]
 8025b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025b16:	2301      	movs	r3, #1
  }
}
 8025b18:	4618      	mov	r0, r3
 8025b1a:	371c      	adds	r7, #28
 8025b1c:	46bd      	mov	sp, r7
 8025b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b22:	4770      	bx	lr

08025b24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8025b24:	b480      	push	{r7}
 8025b26:	b085      	sub	sp, #20
 8025b28:	af00      	add	r7, sp, #0
 8025b2a:	6078      	str	r0, [r7, #4]
 8025b2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025b34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8025b36:	7bfb      	ldrb	r3, [r7, #15]
 8025b38:	2b01      	cmp	r3, #1
 8025b3a:	d002      	beq.n	8025b42 <HAL_CAN_ActivateNotification+0x1e>
 8025b3c:	7bfb      	ldrb	r3, [r7, #15]
 8025b3e:	2b02      	cmp	r3, #2
 8025b40:	d109      	bne.n	8025b56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8025b42:	687b      	ldr	r3, [r7, #4]
 8025b44:	681b      	ldr	r3, [r3, #0]
 8025b46:	6959      	ldr	r1, [r3, #20]
 8025b48:	687b      	ldr	r3, [r7, #4]
 8025b4a:	681b      	ldr	r3, [r3, #0]
 8025b4c:	683a      	ldr	r2, [r7, #0]
 8025b4e:	430a      	orrs	r2, r1
 8025b50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8025b52:	2300      	movs	r3, #0
 8025b54:	e006      	b.n	8025b64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025b5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025b5e:	687b      	ldr	r3, [r7, #4]
 8025b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025b62:	2301      	movs	r3, #1
  }
}
 8025b64:	4618      	mov	r0, r3
 8025b66:	3714      	adds	r7, #20
 8025b68:	46bd      	mov	sp, r7
 8025b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b6e:	4770      	bx	lr

08025b70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8025b70:	b580      	push	{r7, lr}
 8025b72:	b08a      	sub	sp, #40	; 0x28
 8025b74:	af00      	add	r7, sp, #0
 8025b76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8025b78:	2300      	movs	r3, #0
 8025b7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	681b      	ldr	r3, [r3, #0]
 8025b80:	695b      	ldr	r3, [r3, #20]
 8025b82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	681b      	ldr	r3, [r3, #0]
 8025b88:	685b      	ldr	r3, [r3, #4]
 8025b8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8025b8c:	687b      	ldr	r3, [r7, #4]
 8025b8e:	681b      	ldr	r3, [r3, #0]
 8025b90:	689b      	ldr	r3, [r3, #8]
 8025b92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8025b94:	687b      	ldr	r3, [r7, #4]
 8025b96:	681b      	ldr	r3, [r3, #0]
 8025b98:	68db      	ldr	r3, [r3, #12]
 8025b9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	691b      	ldr	r3, [r3, #16]
 8025ba2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8025ba4:	687b      	ldr	r3, [r7, #4]
 8025ba6:	681b      	ldr	r3, [r3, #0]
 8025ba8:	699b      	ldr	r3, [r3, #24]
 8025baa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8025bac:	6a3b      	ldr	r3, [r7, #32]
 8025bae:	f003 0301 	and.w	r3, r3, #1
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d07c      	beq.n	8025cb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8025bb6:	69bb      	ldr	r3, [r7, #24]
 8025bb8:	f003 0301 	and.w	r3, r3, #1
 8025bbc:	2b00      	cmp	r3, #0
 8025bbe:	d023      	beq.n	8025c08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	681b      	ldr	r3, [r3, #0]
 8025bc4:	2201      	movs	r2, #1
 8025bc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8025bc8:	69bb      	ldr	r3, [r7, #24]
 8025bca:	f003 0302 	and.w	r3, r3, #2
 8025bce:	2b00      	cmp	r3, #0
 8025bd0:	d003      	beq.n	8025bda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8025bd2:	6878      	ldr	r0, [r7, #4]
 8025bd4:	f000 f983 	bl	8025ede <HAL_CAN_TxMailbox0CompleteCallback>
 8025bd8:	e016      	b.n	8025c08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8025bda:	69bb      	ldr	r3, [r7, #24]
 8025bdc:	f003 0304 	and.w	r3, r3, #4
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	d004      	beq.n	8025bee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8025be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025be6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8025bea:	627b      	str	r3, [r7, #36]	; 0x24
 8025bec:	e00c      	b.n	8025c08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8025bee:	69bb      	ldr	r3, [r7, #24]
 8025bf0:	f003 0308 	and.w	r3, r3, #8
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	d004      	beq.n	8025c02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8025bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8025bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8025c00:	e002      	b.n	8025c08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8025c02:	6878      	ldr	r0, [r7, #4]
 8025c04:	f000 f989 	bl	8025f1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8025c08:	69bb      	ldr	r3, [r7, #24]
 8025c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025c0e:	2b00      	cmp	r3, #0
 8025c10:	d024      	beq.n	8025c5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025c1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8025c1c:	69bb      	ldr	r3, [r7, #24]
 8025c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025c22:	2b00      	cmp	r3, #0
 8025c24:	d003      	beq.n	8025c2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8025c26:	6878      	ldr	r0, [r7, #4]
 8025c28:	f000 f963 	bl	8025ef2 <HAL_CAN_TxMailbox1CompleteCallback>
 8025c2c:	e016      	b.n	8025c5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8025c2e:	69bb      	ldr	r3, [r7, #24]
 8025c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025c34:	2b00      	cmp	r3, #0
 8025c36:	d004      	beq.n	8025c42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8025c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8025c40:	e00c      	b.n	8025c5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8025c42:	69bb      	ldr	r3, [r7, #24]
 8025c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	d004      	beq.n	8025c56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8025c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025c52:	627b      	str	r3, [r7, #36]	; 0x24
 8025c54:	e002      	b.n	8025c5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8025c56:	6878      	ldr	r0, [r7, #4]
 8025c58:	f000 f969 	bl	8025f2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8025c5c:	69bb      	ldr	r3, [r7, #24]
 8025c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025c62:	2b00      	cmp	r3, #0
 8025c64:	d024      	beq.n	8025cb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	681b      	ldr	r3, [r3, #0]
 8025c6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025c6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8025c70:	69bb      	ldr	r3, [r7, #24]
 8025c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025c76:	2b00      	cmp	r3, #0
 8025c78:	d003      	beq.n	8025c82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8025c7a:	6878      	ldr	r0, [r7, #4]
 8025c7c:	f000 f943 	bl	8025f06 <HAL_CAN_TxMailbox2CompleteCallback>
 8025c80:	e016      	b.n	8025cb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8025c82:	69bb      	ldr	r3, [r7, #24]
 8025c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d004      	beq.n	8025c96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8025c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025c92:	627b      	str	r3, [r7, #36]	; 0x24
 8025c94:	e00c      	b.n	8025cb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8025c96:	69bb      	ldr	r3, [r7, #24]
 8025c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025c9c:	2b00      	cmp	r3, #0
 8025c9e:	d004      	beq.n	8025caa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8025ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8025ca8:	e002      	b.n	8025cb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8025caa:	6878      	ldr	r0, [r7, #4]
 8025cac:	f000 f949 	bl	8025f42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8025cb0:	6a3b      	ldr	r3, [r7, #32]
 8025cb2:	f003 0308 	and.w	r3, r3, #8
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d00c      	beq.n	8025cd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8025cba:	697b      	ldr	r3, [r7, #20]
 8025cbc:	f003 0310 	and.w	r3, r3, #16
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d007      	beq.n	8025cd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8025cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8025cca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8025ccc:	687b      	ldr	r3, [r7, #4]
 8025cce:	681b      	ldr	r3, [r3, #0]
 8025cd0:	2210      	movs	r2, #16
 8025cd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8025cd4:	6a3b      	ldr	r3, [r7, #32]
 8025cd6:	f003 0304 	and.w	r3, r3, #4
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d00b      	beq.n	8025cf6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8025cde:	697b      	ldr	r3, [r7, #20]
 8025ce0:	f003 0308 	and.w	r3, r3, #8
 8025ce4:	2b00      	cmp	r3, #0
 8025ce6:	d006      	beq.n	8025cf6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	681b      	ldr	r3, [r3, #0]
 8025cec:	2208      	movs	r2, #8
 8025cee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8025cf0:	6878      	ldr	r0, [r7, #4]
 8025cf2:	f000 f930 	bl	8025f56 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8025cf6:	6a3b      	ldr	r3, [r7, #32]
 8025cf8:	f003 0302 	and.w	r3, r3, #2
 8025cfc:	2b00      	cmp	r3, #0
 8025cfe:	d009      	beq.n	8025d14 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8025d00:	687b      	ldr	r3, [r7, #4]
 8025d02:	681b      	ldr	r3, [r3, #0]
 8025d04:	68db      	ldr	r3, [r3, #12]
 8025d06:	f003 0303 	and.w	r3, r3, #3
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	d002      	beq.n	8025d14 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8025d0e:	6878      	ldr	r0, [r7, #4]
 8025d10:	f7ed ff58 	bl	8013bc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8025d14:	6a3b      	ldr	r3, [r7, #32]
 8025d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	d00c      	beq.n	8025d38 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8025d1e:	693b      	ldr	r3, [r7, #16]
 8025d20:	f003 0310 	and.w	r3, r3, #16
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	d007      	beq.n	8025d38 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8025d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8025d2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8025d30:	687b      	ldr	r3, [r7, #4]
 8025d32:	681b      	ldr	r3, [r3, #0]
 8025d34:	2210      	movs	r2, #16
 8025d36:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8025d38:	6a3b      	ldr	r3, [r7, #32]
 8025d3a:	f003 0320 	and.w	r3, r3, #32
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d00b      	beq.n	8025d5a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8025d42:	693b      	ldr	r3, [r7, #16]
 8025d44:	f003 0308 	and.w	r3, r3, #8
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	d006      	beq.n	8025d5a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8025d4c:	687b      	ldr	r3, [r7, #4]
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	2208      	movs	r2, #8
 8025d52:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8025d54:	6878      	ldr	r0, [r7, #4]
 8025d56:	f000 f908 	bl	8025f6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8025d5a:	6a3b      	ldr	r3, [r7, #32]
 8025d5c:	f003 0310 	and.w	r3, r3, #16
 8025d60:	2b00      	cmp	r3, #0
 8025d62:	d009      	beq.n	8025d78 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	691b      	ldr	r3, [r3, #16]
 8025d6a:	f003 0303 	and.w	r3, r3, #3
 8025d6e:	2b00      	cmp	r3, #0
 8025d70:	d002      	beq.n	8025d78 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8025d72:	6878      	ldr	r0, [r7, #4]
 8025d74:	f7ed ffd6 	bl	8013d24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8025d78:	6a3b      	ldr	r3, [r7, #32]
 8025d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d00b      	beq.n	8025d9a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8025d82:	69fb      	ldr	r3, [r7, #28]
 8025d84:	f003 0310 	and.w	r3, r3, #16
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d006      	beq.n	8025d9a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8025d8c:	687b      	ldr	r3, [r7, #4]
 8025d8e:	681b      	ldr	r3, [r3, #0]
 8025d90:	2210      	movs	r2, #16
 8025d92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8025d94:	6878      	ldr	r0, [r7, #4]
 8025d96:	f000 f8f2 	bl	8025f7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8025d9a:	6a3b      	ldr	r3, [r7, #32]
 8025d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025da0:	2b00      	cmp	r3, #0
 8025da2:	d00b      	beq.n	8025dbc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8025da4:	69fb      	ldr	r3, [r7, #28]
 8025da6:	f003 0308 	and.w	r3, r3, #8
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d006      	beq.n	8025dbc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8025dae:	687b      	ldr	r3, [r7, #4]
 8025db0:	681b      	ldr	r3, [r3, #0]
 8025db2:	2208      	movs	r2, #8
 8025db4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8025db6:	6878      	ldr	r0, [r7, #4]
 8025db8:	f000 f8eb 	bl	8025f92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8025dbc:	6a3b      	ldr	r3, [r7, #32]
 8025dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	d07b      	beq.n	8025ebe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8025dc6:	69fb      	ldr	r3, [r7, #28]
 8025dc8:	f003 0304 	and.w	r3, r3, #4
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	d072      	beq.n	8025eb6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8025dd0:	6a3b      	ldr	r3, [r7, #32]
 8025dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025dd6:	2b00      	cmp	r3, #0
 8025dd8:	d008      	beq.n	8025dec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8025de0:	2b00      	cmp	r3, #0
 8025de2:	d003      	beq.n	8025dec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8025de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025de6:	f043 0301 	orr.w	r3, r3, #1
 8025dea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8025dec:	6a3b      	ldr	r3, [r7, #32]
 8025dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d008      	beq.n	8025e08 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8025df6:	68fb      	ldr	r3, [r7, #12]
 8025df8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8025dfc:	2b00      	cmp	r3, #0
 8025dfe:	d003      	beq.n	8025e08 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8025e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e02:	f043 0302 	orr.w	r3, r3, #2
 8025e06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8025e08:	6a3b      	ldr	r3, [r7, #32]
 8025e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	d008      	beq.n	8025e24 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d003      	beq.n	8025e24 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8025e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e1e:	f043 0304 	orr.w	r3, r3, #4
 8025e22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8025e24:	6a3b      	ldr	r3, [r7, #32]
 8025e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d043      	beq.n	8025eb6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d03e      	beq.n	8025eb6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8025e3e:	2b60      	cmp	r3, #96	; 0x60
 8025e40:	d02b      	beq.n	8025e9a <HAL_CAN_IRQHandler+0x32a>
 8025e42:	2b60      	cmp	r3, #96	; 0x60
 8025e44:	d82e      	bhi.n	8025ea4 <HAL_CAN_IRQHandler+0x334>
 8025e46:	2b50      	cmp	r3, #80	; 0x50
 8025e48:	d022      	beq.n	8025e90 <HAL_CAN_IRQHandler+0x320>
 8025e4a:	2b50      	cmp	r3, #80	; 0x50
 8025e4c:	d82a      	bhi.n	8025ea4 <HAL_CAN_IRQHandler+0x334>
 8025e4e:	2b40      	cmp	r3, #64	; 0x40
 8025e50:	d019      	beq.n	8025e86 <HAL_CAN_IRQHandler+0x316>
 8025e52:	2b40      	cmp	r3, #64	; 0x40
 8025e54:	d826      	bhi.n	8025ea4 <HAL_CAN_IRQHandler+0x334>
 8025e56:	2b30      	cmp	r3, #48	; 0x30
 8025e58:	d010      	beq.n	8025e7c <HAL_CAN_IRQHandler+0x30c>
 8025e5a:	2b30      	cmp	r3, #48	; 0x30
 8025e5c:	d822      	bhi.n	8025ea4 <HAL_CAN_IRQHandler+0x334>
 8025e5e:	2b10      	cmp	r3, #16
 8025e60:	d002      	beq.n	8025e68 <HAL_CAN_IRQHandler+0x2f8>
 8025e62:	2b20      	cmp	r3, #32
 8025e64:	d005      	beq.n	8025e72 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8025e66:	e01d      	b.n	8025ea4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8025e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e6a:	f043 0308 	orr.w	r3, r3, #8
 8025e6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025e70:	e019      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8025e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e74:	f043 0310 	orr.w	r3, r3, #16
 8025e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025e7a:	e014      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8025e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e7e:	f043 0320 	orr.w	r3, r3, #32
 8025e82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025e84:	e00f      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8025e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025e8e:	e00a      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8025e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025e96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025e98:	e005      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8025e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025ea0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8025ea2:	e000      	b.n	8025ea6 <HAL_CAN_IRQHandler+0x336>
            break;
 8025ea4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	681b      	ldr	r3, [r3, #0]
 8025eaa:	699a      	ldr	r2, [r3, #24]
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8025eb4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8025eb6:	687b      	ldr	r3, [r7, #4]
 8025eb8:	681b      	ldr	r3, [r3, #0]
 8025eba:	2204      	movs	r2, #4
 8025ebc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8025ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ec0:	2b00      	cmp	r3, #0
 8025ec2:	d008      	beq.n	8025ed6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8025ec4:	687b      	ldr	r3, [r7, #4]
 8025ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025eca:	431a      	orrs	r2, r3
 8025ecc:	687b      	ldr	r3, [r7, #4]
 8025ece:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8025ed0:	6878      	ldr	r0, [r7, #4]
 8025ed2:	f000 f868 	bl	8025fa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8025ed6:	bf00      	nop
 8025ed8:	3728      	adds	r7, #40	; 0x28
 8025eda:	46bd      	mov	sp, r7
 8025edc:	bd80      	pop	{r7, pc}

08025ede <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025ede:	b480      	push	{r7}
 8025ee0:	b083      	sub	sp, #12
 8025ee2:	af00      	add	r7, sp, #0
 8025ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8025ee6:	bf00      	nop
 8025ee8:	370c      	adds	r7, #12
 8025eea:	46bd      	mov	sp, r7
 8025eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ef0:	4770      	bx	lr

08025ef2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025ef2:	b480      	push	{r7}
 8025ef4:	b083      	sub	sp, #12
 8025ef6:	af00      	add	r7, sp, #0
 8025ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8025efa:	bf00      	nop
 8025efc:	370c      	adds	r7, #12
 8025efe:	46bd      	mov	sp, r7
 8025f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f04:	4770      	bx	lr

08025f06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8025f06:	b480      	push	{r7}
 8025f08:	b083      	sub	sp, #12
 8025f0a:	af00      	add	r7, sp, #0
 8025f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8025f0e:	bf00      	nop
 8025f10:	370c      	adds	r7, #12
 8025f12:	46bd      	mov	sp, r7
 8025f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f18:	4770      	bx	lr

08025f1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025f1a:	b480      	push	{r7}
 8025f1c:	b083      	sub	sp, #12
 8025f1e:	af00      	add	r7, sp, #0
 8025f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8025f22:	bf00      	nop
 8025f24:	370c      	adds	r7, #12
 8025f26:	46bd      	mov	sp, r7
 8025f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f2c:	4770      	bx	lr

08025f2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025f2e:	b480      	push	{r7}
 8025f30:	b083      	sub	sp, #12
 8025f32:	af00      	add	r7, sp, #0
 8025f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8025f36:	bf00      	nop
 8025f38:	370c      	adds	r7, #12
 8025f3a:	46bd      	mov	sp, r7
 8025f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f40:	4770      	bx	lr

08025f42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8025f42:	b480      	push	{r7}
 8025f44:	b083      	sub	sp, #12
 8025f46:	af00      	add	r7, sp, #0
 8025f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8025f4a:	bf00      	nop
 8025f4c:	370c      	adds	r7, #12
 8025f4e:	46bd      	mov	sp, r7
 8025f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f54:	4770      	bx	lr

08025f56 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8025f56:	b480      	push	{r7}
 8025f58:	b083      	sub	sp, #12
 8025f5a:	af00      	add	r7, sp, #0
 8025f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8025f5e:	bf00      	nop
 8025f60:	370c      	adds	r7, #12
 8025f62:	46bd      	mov	sp, r7
 8025f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f68:	4770      	bx	lr

08025f6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8025f6a:	b480      	push	{r7}
 8025f6c:	b083      	sub	sp, #12
 8025f6e:	af00      	add	r7, sp, #0
 8025f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8025f72:	bf00      	nop
 8025f74:	370c      	adds	r7, #12
 8025f76:	46bd      	mov	sp, r7
 8025f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f7c:	4770      	bx	lr

08025f7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8025f7e:	b480      	push	{r7}
 8025f80:	b083      	sub	sp, #12
 8025f82:	af00      	add	r7, sp, #0
 8025f84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8025f86:	bf00      	nop
 8025f88:	370c      	adds	r7, #12
 8025f8a:	46bd      	mov	sp, r7
 8025f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f90:	4770      	bx	lr

08025f92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8025f92:	b480      	push	{r7}
 8025f94:	b083      	sub	sp, #12
 8025f96:	af00      	add	r7, sp, #0
 8025f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8025f9a:	bf00      	nop
 8025f9c:	370c      	adds	r7, #12
 8025f9e:	46bd      	mov	sp, r7
 8025fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fa4:	4770      	bx	lr

08025fa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8025fa6:	b480      	push	{r7}
 8025fa8:	b083      	sub	sp, #12
 8025faa:	af00      	add	r7, sp, #0
 8025fac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8025fae:	bf00      	nop
 8025fb0:	370c      	adds	r7, #12
 8025fb2:	46bd      	mov	sp, r7
 8025fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fb8:	4770      	bx	lr
	...

08025fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8025fbc:	b480      	push	{r7}
 8025fbe:	b085      	sub	sp, #20
 8025fc0:	af00      	add	r7, sp, #0
 8025fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8025fc4:	687b      	ldr	r3, [r7, #4]
 8025fc6:	f003 0307 	and.w	r3, r3, #7
 8025fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8025fcc:	4b0c      	ldr	r3, [pc, #48]	; (8026000 <__NVIC_SetPriorityGrouping+0x44>)
 8025fce:	68db      	ldr	r3, [r3, #12]
 8025fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8025fd2:	68ba      	ldr	r2, [r7, #8]
 8025fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8025fd8:	4013      	ands	r3, r2
 8025fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8025fdc:	68fb      	ldr	r3, [r7, #12]
 8025fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8025fe0:	68bb      	ldr	r3, [r7, #8]
 8025fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8025fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8025fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8025fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8025fee:	4a04      	ldr	r2, [pc, #16]	; (8026000 <__NVIC_SetPriorityGrouping+0x44>)
 8025ff0:	68bb      	ldr	r3, [r7, #8]
 8025ff2:	60d3      	str	r3, [r2, #12]
}
 8025ff4:	bf00      	nop
 8025ff6:	3714      	adds	r7, #20
 8025ff8:	46bd      	mov	sp, r7
 8025ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ffe:	4770      	bx	lr
 8026000:	e000ed00 	.word	0xe000ed00

08026004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026004:	b480      	push	{r7}
 8026006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026008:	4b04      	ldr	r3, [pc, #16]	; (802601c <__NVIC_GetPriorityGrouping+0x18>)
 802600a:	68db      	ldr	r3, [r3, #12]
 802600c:	0a1b      	lsrs	r3, r3, #8
 802600e:	f003 0307 	and.w	r3, r3, #7
}
 8026012:	4618      	mov	r0, r3
 8026014:	46bd      	mov	sp, r7
 8026016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802601a:	4770      	bx	lr
 802601c:	e000ed00 	.word	0xe000ed00

08026020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026020:	b480      	push	{r7}
 8026022:	b083      	sub	sp, #12
 8026024:	af00      	add	r7, sp, #0
 8026026:	4603      	mov	r3, r0
 8026028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802602a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802602e:	2b00      	cmp	r3, #0
 8026030:	db0b      	blt.n	802604a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026032:	79fb      	ldrb	r3, [r7, #7]
 8026034:	f003 021f 	and.w	r2, r3, #31
 8026038:	4907      	ldr	r1, [pc, #28]	; (8026058 <__NVIC_EnableIRQ+0x38>)
 802603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802603e:	095b      	lsrs	r3, r3, #5
 8026040:	2001      	movs	r0, #1
 8026042:	fa00 f202 	lsl.w	r2, r0, r2
 8026046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802604a:	bf00      	nop
 802604c:	370c      	adds	r7, #12
 802604e:	46bd      	mov	sp, r7
 8026050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026054:	4770      	bx	lr
 8026056:	bf00      	nop
 8026058:	e000e100 	.word	0xe000e100

0802605c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802605c:	b480      	push	{r7}
 802605e:	b083      	sub	sp, #12
 8026060:	af00      	add	r7, sp, #0
 8026062:	4603      	mov	r3, r0
 8026064:	6039      	str	r1, [r7, #0]
 8026066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802606c:	2b00      	cmp	r3, #0
 802606e:	db0a      	blt.n	8026086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026070:	683b      	ldr	r3, [r7, #0]
 8026072:	b2da      	uxtb	r2, r3
 8026074:	490c      	ldr	r1, [pc, #48]	; (80260a8 <__NVIC_SetPriority+0x4c>)
 8026076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802607a:	0112      	lsls	r2, r2, #4
 802607c:	b2d2      	uxtb	r2, r2
 802607e:	440b      	add	r3, r1
 8026080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026084:	e00a      	b.n	802609c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026086:	683b      	ldr	r3, [r7, #0]
 8026088:	b2da      	uxtb	r2, r3
 802608a:	4908      	ldr	r1, [pc, #32]	; (80260ac <__NVIC_SetPriority+0x50>)
 802608c:	79fb      	ldrb	r3, [r7, #7]
 802608e:	f003 030f 	and.w	r3, r3, #15
 8026092:	3b04      	subs	r3, #4
 8026094:	0112      	lsls	r2, r2, #4
 8026096:	b2d2      	uxtb	r2, r2
 8026098:	440b      	add	r3, r1
 802609a:	761a      	strb	r2, [r3, #24]
}
 802609c:	bf00      	nop
 802609e:	370c      	adds	r7, #12
 80260a0:	46bd      	mov	sp, r7
 80260a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260a6:	4770      	bx	lr
 80260a8:	e000e100 	.word	0xe000e100
 80260ac:	e000ed00 	.word	0xe000ed00

080260b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80260b0:	b480      	push	{r7}
 80260b2:	b089      	sub	sp, #36	; 0x24
 80260b4:	af00      	add	r7, sp, #0
 80260b6:	60f8      	str	r0, [r7, #12]
 80260b8:	60b9      	str	r1, [r7, #8]
 80260ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80260bc:	68fb      	ldr	r3, [r7, #12]
 80260be:	f003 0307 	and.w	r3, r3, #7
 80260c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80260c4:	69fb      	ldr	r3, [r7, #28]
 80260c6:	f1c3 0307 	rsb	r3, r3, #7
 80260ca:	2b04      	cmp	r3, #4
 80260cc:	bf28      	it	cs
 80260ce:	2304      	movcs	r3, #4
 80260d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80260d2:	69fb      	ldr	r3, [r7, #28]
 80260d4:	3304      	adds	r3, #4
 80260d6:	2b06      	cmp	r3, #6
 80260d8:	d902      	bls.n	80260e0 <NVIC_EncodePriority+0x30>
 80260da:	69fb      	ldr	r3, [r7, #28]
 80260dc:	3b03      	subs	r3, #3
 80260de:	e000      	b.n	80260e2 <NVIC_EncodePriority+0x32>
 80260e0:	2300      	movs	r3, #0
 80260e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80260e4:	f04f 32ff 	mov.w	r2, #4294967295
 80260e8:	69bb      	ldr	r3, [r7, #24]
 80260ea:	fa02 f303 	lsl.w	r3, r2, r3
 80260ee:	43da      	mvns	r2, r3
 80260f0:	68bb      	ldr	r3, [r7, #8]
 80260f2:	401a      	ands	r2, r3
 80260f4:	697b      	ldr	r3, [r7, #20]
 80260f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80260f8:	f04f 31ff 	mov.w	r1, #4294967295
 80260fc:	697b      	ldr	r3, [r7, #20]
 80260fe:	fa01 f303 	lsl.w	r3, r1, r3
 8026102:	43d9      	mvns	r1, r3
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026108:	4313      	orrs	r3, r2
         );
}
 802610a:	4618      	mov	r0, r3
 802610c:	3724      	adds	r7, #36	; 0x24
 802610e:	46bd      	mov	sp, r7
 8026110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026114:	4770      	bx	lr

08026116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026116:	b580      	push	{r7, lr}
 8026118:	b082      	sub	sp, #8
 802611a:	af00      	add	r7, sp, #0
 802611c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802611e:	6878      	ldr	r0, [r7, #4]
 8026120:	f7ff ff4c 	bl	8025fbc <__NVIC_SetPriorityGrouping>
}
 8026124:	bf00      	nop
 8026126:	3708      	adds	r7, #8
 8026128:	46bd      	mov	sp, r7
 802612a:	bd80      	pop	{r7, pc}

0802612c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802612c:	b580      	push	{r7, lr}
 802612e:	b086      	sub	sp, #24
 8026130:	af00      	add	r7, sp, #0
 8026132:	4603      	mov	r3, r0
 8026134:	60b9      	str	r1, [r7, #8]
 8026136:	607a      	str	r2, [r7, #4]
 8026138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802613a:	2300      	movs	r3, #0
 802613c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802613e:	f7ff ff61 	bl	8026004 <__NVIC_GetPriorityGrouping>
 8026142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026144:	687a      	ldr	r2, [r7, #4]
 8026146:	68b9      	ldr	r1, [r7, #8]
 8026148:	6978      	ldr	r0, [r7, #20]
 802614a:	f7ff ffb1 	bl	80260b0 <NVIC_EncodePriority>
 802614e:	4602      	mov	r2, r0
 8026150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026154:	4611      	mov	r1, r2
 8026156:	4618      	mov	r0, r3
 8026158:	f7ff ff80 	bl	802605c <__NVIC_SetPriority>
}
 802615c:	bf00      	nop
 802615e:	3718      	adds	r7, #24
 8026160:	46bd      	mov	sp, r7
 8026162:	bd80      	pop	{r7, pc}

08026164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026164:	b580      	push	{r7, lr}
 8026166:	b082      	sub	sp, #8
 8026168:	af00      	add	r7, sp, #0
 802616a:	4603      	mov	r3, r0
 802616c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802616e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026172:	4618      	mov	r0, r3
 8026174:	f7ff ff54 	bl	8026020 <__NVIC_EnableIRQ>
}
 8026178:	bf00      	nop
 802617a:	3708      	adds	r7, #8
 802617c:	46bd      	mov	sp, r7
 802617e:	bd80      	pop	{r7, pc}

08026180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026180:	b580      	push	{r7, lr}
 8026182:	b086      	sub	sp, #24
 8026184:	af00      	add	r7, sp, #0
 8026186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026188:	2300      	movs	r3, #0
 802618a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802618c:	f7fe faba 	bl	8024704 <HAL_GetTick>
 8026190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	2b00      	cmp	r3, #0
 8026196:	d101      	bne.n	802619c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026198:	2301      	movs	r3, #1
 802619a:	e099      	b.n	80262d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	2202      	movs	r2, #2
 80261a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80261a4:	687b      	ldr	r3, [r7, #4]
 80261a6:	2200      	movs	r2, #0
 80261a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80261ac:	687b      	ldr	r3, [r7, #4]
 80261ae:	681b      	ldr	r3, [r3, #0]
 80261b0:	681a      	ldr	r2, [r3, #0]
 80261b2:	687b      	ldr	r3, [r7, #4]
 80261b4:	681b      	ldr	r3, [r3, #0]
 80261b6:	f022 0201 	bic.w	r2, r2, #1
 80261ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80261bc:	e00f      	b.n	80261de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80261be:	f7fe faa1 	bl	8024704 <HAL_GetTick>
 80261c2:	4602      	mov	r2, r0
 80261c4:	693b      	ldr	r3, [r7, #16]
 80261c6:	1ad3      	subs	r3, r2, r3
 80261c8:	2b05      	cmp	r3, #5
 80261ca:	d908      	bls.n	80261de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80261cc:	687b      	ldr	r3, [r7, #4]
 80261ce:	2220      	movs	r2, #32
 80261d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	2203      	movs	r2, #3
 80261d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80261da:	2303      	movs	r3, #3
 80261dc:	e078      	b.n	80262d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	681b      	ldr	r3, [r3, #0]
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	f003 0301 	and.w	r3, r3, #1
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d1e8      	bne.n	80261be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	681b      	ldr	r3, [r3, #0]
 80261f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80261f4:	697a      	ldr	r2, [r7, #20]
 80261f6:	4b38      	ldr	r3, [pc, #224]	; (80262d8 <HAL_DMA_Init+0x158>)
 80261f8:	4013      	ands	r3, r2
 80261fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80261fc:	687b      	ldr	r3, [r7, #4]
 80261fe:	685a      	ldr	r2, [r3, #4]
 8026200:	687b      	ldr	r3, [r7, #4]
 8026202:	689b      	ldr	r3, [r3, #8]
 8026204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026206:	687b      	ldr	r3, [r7, #4]
 8026208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802620a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	691b      	ldr	r3, [r3, #16]
 8026210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026218:	687b      	ldr	r3, [r7, #4]
 802621a:	699b      	ldr	r3, [r3, #24]
 802621c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802621e:	687b      	ldr	r3, [r7, #4]
 8026220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026224:	687b      	ldr	r3, [r7, #4]
 8026226:	6a1b      	ldr	r3, [r3, #32]
 8026228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802622a:	697a      	ldr	r2, [r7, #20]
 802622c:	4313      	orrs	r3, r2
 802622e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026230:	687b      	ldr	r3, [r7, #4]
 8026232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026234:	2b04      	cmp	r3, #4
 8026236:	d107      	bne.n	8026248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802623c:	687b      	ldr	r3, [r7, #4]
 802623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026240:	4313      	orrs	r3, r2
 8026242:	697a      	ldr	r2, [r7, #20]
 8026244:	4313      	orrs	r3, r2
 8026246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	697a      	ldr	r2, [r7, #20]
 802624e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	681b      	ldr	r3, [r3, #0]
 8026254:	695b      	ldr	r3, [r3, #20]
 8026256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026258:	697b      	ldr	r3, [r7, #20]
 802625a:	f023 0307 	bic.w	r3, r3, #7
 802625e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026260:	687b      	ldr	r3, [r7, #4]
 8026262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026264:	697a      	ldr	r2, [r7, #20]
 8026266:	4313      	orrs	r3, r2
 8026268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802626e:	2b04      	cmp	r3, #4
 8026270:	d117      	bne.n	80262a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026276:	697a      	ldr	r2, [r7, #20]
 8026278:	4313      	orrs	r3, r2
 802627a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802627c:	687b      	ldr	r3, [r7, #4]
 802627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026280:	2b00      	cmp	r3, #0
 8026282:	d00e      	beq.n	80262a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026284:	6878      	ldr	r0, [r7, #4]
 8026286:	f000 fa6f 	bl	8026768 <DMA_CheckFifoParam>
 802628a:	4603      	mov	r3, r0
 802628c:	2b00      	cmp	r3, #0
 802628e:	d008      	beq.n	80262a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	2240      	movs	r2, #64	; 0x40
 8026294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	2201      	movs	r2, #1
 802629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802629e:	2301      	movs	r3, #1
 80262a0:	e016      	b.n	80262d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80262a2:	687b      	ldr	r3, [r7, #4]
 80262a4:	681b      	ldr	r3, [r3, #0]
 80262a6:	697a      	ldr	r2, [r7, #20]
 80262a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80262aa:	6878      	ldr	r0, [r7, #4]
 80262ac:	f000 fa26 	bl	80266fc <DMA_CalcBaseAndBitshift>
 80262b0:	4603      	mov	r3, r0
 80262b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80262b4:	687b      	ldr	r3, [r7, #4]
 80262b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80262b8:	223f      	movs	r2, #63	; 0x3f
 80262ba:	409a      	lsls	r2, r3
 80262bc:	68fb      	ldr	r3, [r7, #12]
 80262be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80262c0:	687b      	ldr	r3, [r7, #4]
 80262c2:	2200      	movs	r2, #0
 80262c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80262c6:	687b      	ldr	r3, [r7, #4]
 80262c8:	2201      	movs	r2, #1
 80262ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80262ce:	2300      	movs	r3, #0
}
 80262d0:	4618      	mov	r0, r3
 80262d2:	3718      	adds	r7, #24
 80262d4:	46bd      	mov	sp, r7
 80262d6:	bd80      	pop	{r7, pc}
 80262d8:	f010803f 	.word	0xf010803f

080262dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80262dc:	b580      	push	{r7, lr}
 80262de:	b086      	sub	sp, #24
 80262e0:	af00      	add	r7, sp, #0
 80262e2:	60f8      	str	r0, [r7, #12]
 80262e4:	60b9      	str	r1, [r7, #8]
 80262e6:	607a      	str	r2, [r7, #4]
 80262e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80262ea:	2300      	movs	r3, #0
 80262ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80262f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80262f4:	68fb      	ldr	r3, [r7, #12]
 80262f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80262fa:	2b01      	cmp	r3, #1
 80262fc:	d101      	bne.n	8026302 <HAL_DMA_Start_IT+0x26>
 80262fe:	2302      	movs	r3, #2
 8026300:	e040      	b.n	8026384 <HAL_DMA_Start_IT+0xa8>
 8026302:	68fb      	ldr	r3, [r7, #12]
 8026304:	2201      	movs	r2, #1
 8026306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802630a:	68fb      	ldr	r3, [r7, #12]
 802630c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026310:	b2db      	uxtb	r3, r3
 8026312:	2b01      	cmp	r3, #1
 8026314:	d12f      	bne.n	8026376 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026316:	68fb      	ldr	r3, [r7, #12]
 8026318:	2202      	movs	r2, #2
 802631a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	2200      	movs	r2, #0
 8026322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026324:	683b      	ldr	r3, [r7, #0]
 8026326:	687a      	ldr	r2, [r7, #4]
 8026328:	68b9      	ldr	r1, [r7, #8]
 802632a:	68f8      	ldr	r0, [r7, #12]
 802632c:	f000 f9b8 	bl	80266a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026330:	68fb      	ldr	r3, [r7, #12]
 8026332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026334:	223f      	movs	r2, #63	; 0x3f
 8026336:	409a      	lsls	r2, r3
 8026338:	693b      	ldr	r3, [r7, #16]
 802633a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802633c:	68fb      	ldr	r3, [r7, #12]
 802633e:	681b      	ldr	r3, [r3, #0]
 8026340:	681a      	ldr	r2, [r3, #0]
 8026342:	68fb      	ldr	r3, [r7, #12]
 8026344:	681b      	ldr	r3, [r3, #0]
 8026346:	f042 0216 	orr.w	r2, r2, #22
 802634a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 802634c:	68fb      	ldr	r3, [r7, #12]
 802634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026350:	2b00      	cmp	r3, #0
 8026352:	d007      	beq.n	8026364 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	681b      	ldr	r3, [r3, #0]
 8026358:	681a      	ldr	r2, [r3, #0]
 802635a:	68fb      	ldr	r3, [r7, #12]
 802635c:	681b      	ldr	r3, [r3, #0]
 802635e:	f042 0208 	orr.w	r2, r2, #8
 8026362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026364:	68fb      	ldr	r3, [r7, #12]
 8026366:	681b      	ldr	r3, [r3, #0]
 8026368:	681a      	ldr	r2, [r3, #0]
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	681b      	ldr	r3, [r3, #0]
 802636e:	f042 0201 	orr.w	r2, r2, #1
 8026372:	601a      	str	r2, [r3, #0]
 8026374:	e005      	b.n	8026382 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8026376:	68fb      	ldr	r3, [r7, #12]
 8026378:	2200      	movs	r2, #0
 802637a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802637e:	2302      	movs	r3, #2
 8026380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026382:	7dfb      	ldrb	r3, [r7, #23]
}
 8026384:	4618      	mov	r0, r3
 8026386:	3718      	adds	r7, #24
 8026388:	46bd      	mov	sp, r7
 802638a:	bd80      	pop	{r7, pc}

0802638c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802638c:	b580      	push	{r7, lr}
 802638e:	b086      	sub	sp, #24
 8026390:	af00      	add	r7, sp, #0
 8026392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8026394:	2300      	movs	r3, #0
 8026396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8026398:	4b92      	ldr	r3, [pc, #584]	; (80265e4 <HAL_DMA_IRQHandler+0x258>)
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	4a92      	ldr	r2, [pc, #584]	; (80265e8 <HAL_DMA_IRQHandler+0x25c>)
 802639e:	fba2 2303 	umull	r2, r3, r2, r3
 80263a2:	0a9b      	lsrs	r3, r3, #10
 80263a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80263aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80263ac:	693b      	ldr	r3, [r7, #16]
 80263ae:	681b      	ldr	r3, [r3, #0]
 80263b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80263b2:	687b      	ldr	r3, [r7, #4]
 80263b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80263b6:	2208      	movs	r2, #8
 80263b8:	409a      	lsls	r2, r3
 80263ba:	68fb      	ldr	r3, [r7, #12]
 80263bc:	4013      	ands	r3, r2
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d01a      	beq.n	80263f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80263c2:	687b      	ldr	r3, [r7, #4]
 80263c4:	681b      	ldr	r3, [r3, #0]
 80263c6:	681b      	ldr	r3, [r3, #0]
 80263c8:	f003 0304 	and.w	r3, r3, #4
 80263cc:	2b00      	cmp	r3, #0
 80263ce:	d013      	beq.n	80263f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80263d0:	687b      	ldr	r3, [r7, #4]
 80263d2:	681b      	ldr	r3, [r3, #0]
 80263d4:	681a      	ldr	r2, [r3, #0]
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	681b      	ldr	r3, [r3, #0]
 80263da:	f022 0204 	bic.w	r2, r2, #4
 80263de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80263e0:	687b      	ldr	r3, [r7, #4]
 80263e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80263e4:	2208      	movs	r2, #8
 80263e6:	409a      	lsls	r2, r3
 80263e8:	693b      	ldr	r3, [r7, #16]
 80263ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80263ec:	687b      	ldr	r3, [r7, #4]
 80263ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80263f0:	f043 0201 	orr.w	r2, r3, #1
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80263f8:	687b      	ldr	r3, [r7, #4]
 80263fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80263fc:	2201      	movs	r2, #1
 80263fe:	409a      	lsls	r2, r3
 8026400:	68fb      	ldr	r3, [r7, #12]
 8026402:	4013      	ands	r3, r2
 8026404:	2b00      	cmp	r3, #0
 8026406:	d012      	beq.n	802642e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8026408:	687b      	ldr	r3, [r7, #4]
 802640a:	681b      	ldr	r3, [r3, #0]
 802640c:	695b      	ldr	r3, [r3, #20]
 802640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026412:	2b00      	cmp	r3, #0
 8026414:	d00b      	beq.n	802642e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8026416:	687b      	ldr	r3, [r7, #4]
 8026418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802641a:	2201      	movs	r2, #1
 802641c:	409a      	lsls	r2, r3
 802641e:	693b      	ldr	r3, [r7, #16]
 8026420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026426:	f043 0202 	orr.w	r2, r3, #2
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802642e:	687b      	ldr	r3, [r7, #4]
 8026430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026432:	2204      	movs	r2, #4
 8026434:	409a      	lsls	r2, r3
 8026436:	68fb      	ldr	r3, [r7, #12]
 8026438:	4013      	ands	r3, r2
 802643a:	2b00      	cmp	r3, #0
 802643c:	d012      	beq.n	8026464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802643e:	687b      	ldr	r3, [r7, #4]
 8026440:	681b      	ldr	r3, [r3, #0]
 8026442:	681b      	ldr	r3, [r3, #0]
 8026444:	f003 0302 	and.w	r3, r3, #2
 8026448:	2b00      	cmp	r3, #0
 802644a:	d00b      	beq.n	8026464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802644c:	687b      	ldr	r3, [r7, #4]
 802644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026450:	2204      	movs	r2, #4
 8026452:	409a      	lsls	r2, r3
 8026454:	693b      	ldr	r3, [r7, #16]
 8026456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802645c:	f043 0204 	orr.w	r2, r3, #4
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026468:	2210      	movs	r2, #16
 802646a:	409a      	lsls	r2, r3
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	4013      	ands	r3, r2
 8026470:	2b00      	cmp	r3, #0
 8026472:	d043      	beq.n	80264fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	681b      	ldr	r3, [r3, #0]
 8026478:	681b      	ldr	r3, [r3, #0]
 802647a:	f003 0308 	and.w	r3, r3, #8
 802647e:	2b00      	cmp	r3, #0
 8026480:	d03c      	beq.n	80264fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8026482:	687b      	ldr	r3, [r7, #4]
 8026484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026486:	2210      	movs	r2, #16
 8026488:	409a      	lsls	r2, r3
 802648a:	693b      	ldr	r3, [r7, #16]
 802648c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	681b      	ldr	r3, [r3, #0]
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026498:	2b00      	cmp	r3, #0
 802649a:	d018      	beq.n	80264ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	681b      	ldr	r3, [r3, #0]
 80264a0:	681b      	ldr	r3, [r3, #0]
 80264a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80264a6:	2b00      	cmp	r3, #0
 80264a8:	d108      	bne.n	80264bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264ae:	2b00      	cmp	r3, #0
 80264b0:	d024      	beq.n	80264fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80264b2:	687b      	ldr	r3, [r7, #4]
 80264b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264b6:	6878      	ldr	r0, [r7, #4]
 80264b8:	4798      	blx	r3
 80264ba:	e01f      	b.n	80264fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80264bc:	687b      	ldr	r3, [r7, #4]
 80264be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	d01b      	beq.n	80264fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80264c8:	6878      	ldr	r0, [r7, #4]
 80264ca:	4798      	blx	r3
 80264cc:	e016      	b.n	80264fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	681b      	ldr	r3, [r3, #0]
 80264d2:	681b      	ldr	r3, [r3, #0]
 80264d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80264d8:	2b00      	cmp	r3, #0
 80264da:	d107      	bne.n	80264ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	681b      	ldr	r3, [r3, #0]
 80264e0:	681a      	ldr	r2, [r3, #0]
 80264e2:	687b      	ldr	r3, [r7, #4]
 80264e4:	681b      	ldr	r3, [r3, #0]
 80264e6:	f022 0208 	bic.w	r2, r2, #8
 80264ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80264ec:	687b      	ldr	r3, [r7, #4]
 80264ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264f0:	2b00      	cmp	r3, #0
 80264f2:	d003      	beq.n	80264fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80264f4:	687b      	ldr	r3, [r7, #4]
 80264f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264f8:	6878      	ldr	r0, [r7, #4]
 80264fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80264fc:	687b      	ldr	r3, [r7, #4]
 80264fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026500:	2220      	movs	r2, #32
 8026502:	409a      	lsls	r2, r3
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	4013      	ands	r3, r2
 8026508:	2b00      	cmp	r3, #0
 802650a:	f000 808e 	beq.w	802662a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	681b      	ldr	r3, [r3, #0]
 8026512:	681b      	ldr	r3, [r3, #0]
 8026514:	f003 0310 	and.w	r3, r3, #16
 8026518:	2b00      	cmp	r3, #0
 802651a:	f000 8086 	beq.w	802662a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026522:	2220      	movs	r2, #32
 8026524:	409a      	lsls	r2, r3
 8026526:	693b      	ldr	r3, [r7, #16]
 8026528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802652a:	687b      	ldr	r3, [r7, #4]
 802652c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026530:	b2db      	uxtb	r3, r3
 8026532:	2b05      	cmp	r3, #5
 8026534:	d136      	bne.n	80265a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	681b      	ldr	r3, [r3, #0]
 802653a:	681a      	ldr	r2, [r3, #0]
 802653c:	687b      	ldr	r3, [r7, #4]
 802653e:	681b      	ldr	r3, [r3, #0]
 8026540:	f022 0216 	bic.w	r2, r2, #22
 8026544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	681b      	ldr	r3, [r3, #0]
 802654a:	695a      	ldr	r2, [r3, #20]
 802654c:	687b      	ldr	r3, [r7, #4]
 802654e:	681b      	ldr	r3, [r3, #0]
 8026550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8026556:	687b      	ldr	r3, [r7, #4]
 8026558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802655a:	2b00      	cmp	r3, #0
 802655c:	d103      	bne.n	8026566 <HAL_DMA_IRQHandler+0x1da>
 802655e:	687b      	ldr	r3, [r7, #4]
 8026560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026562:	2b00      	cmp	r3, #0
 8026564:	d007      	beq.n	8026576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026566:	687b      	ldr	r3, [r7, #4]
 8026568:	681b      	ldr	r3, [r3, #0]
 802656a:	681a      	ldr	r2, [r3, #0]
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	681b      	ldr	r3, [r3, #0]
 8026570:	f022 0208 	bic.w	r2, r2, #8
 8026574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802657a:	223f      	movs	r2, #63	; 0x3f
 802657c:	409a      	lsls	r2, r3
 802657e:	693b      	ldr	r3, [r7, #16]
 8026580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026582:	687b      	ldr	r3, [r7, #4]
 8026584:	2201      	movs	r2, #1
 8026586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802658a:	687b      	ldr	r3, [r7, #4]
 802658c:	2200      	movs	r2, #0
 802658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026596:	2b00      	cmp	r3, #0
 8026598:	d07d      	beq.n	8026696 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802659e:	6878      	ldr	r0, [r7, #4]
 80265a0:	4798      	blx	r3
        }
        return;
 80265a2:	e078      	b.n	8026696 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	681b      	ldr	r3, [r3, #0]
 80265a8:	681b      	ldr	r3, [r3, #0]
 80265aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80265ae:	2b00      	cmp	r3, #0
 80265b0:	d01c      	beq.n	80265ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	681b      	ldr	r3, [r3, #0]
 80265b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80265bc:	2b00      	cmp	r3, #0
 80265be:	d108      	bne.n	80265d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80265c0:	687b      	ldr	r3, [r7, #4]
 80265c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	d030      	beq.n	802662a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265cc:	6878      	ldr	r0, [r7, #4]
 80265ce:	4798      	blx	r3
 80265d0:	e02b      	b.n	802662a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80265d2:	687b      	ldr	r3, [r7, #4]
 80265d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d027      	beq.n	802662a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80265de:	6878      	ldr	r0, [r7, #4]
 80265e0:	4798      	blx	r3
 80265e2:	e022      	b.n	802662a <HAL_DMA_IRQHandler+0x29e>
 80265e4:	20000084 	.word	0x20000084
 80265e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80265ec:	687b      	ldr	r3, [r7, #4]
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	681b      	ldr	r3, [r3, #0]
 80265f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d10f      	bne.n	802661a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	681a      	ldr	r2, [r3, #0]
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	681b      	ldr	r3, [r3, #0]
 8026604:	f022 0210 	bic.w	r2, r2, #16
 8026608:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	2201      	movs	r2, #1
 802660e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8026612:	687b      	ldr	r3, [r7, #4]
 8026614:	2200      	movs	r2, #0
 8026616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802661e:	2b00      	cmp	r3, #0
 8026620:	d003      	beq.n	802662a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026626:	6878      	ldr	r0, [r7, #4]
 8026628:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802662e:	2b00      	cmp	r3, #0
 8026630:	d032      	beq.n	8026698 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8026632:	687b      	ldr	r3, [r7, #4]
 8026634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026636:	f003 0301 	and.w	r3, r3, #1
 802663a:	2b00      	cmp	r3, #0
 802663c:	d022      	beq.n	8026684 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802663e:	687b      	ldr	r3, [r7, #4]
 8026640:	2205      	movs	r2, #5
 8026642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	681b      	ldr	r3, [r3, #0]
 802664a:	681a      	ldr	r2, [r3, #0]
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	681b      	ldr	r3, [r3, #0]
 8026650:	f022 0201 	bic.w	r2, r2, #1
 8026654:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8026656:	68bb      	ldr	r3, [r7, #8]
 8026658:	3301      	adds	r3, #1
 802665a:	60bb      	str	r3, [r7, #8]
 802665c:	697a      	ldr	r2, [r7, #20]
 802665e:	429a      	cmp	r2, r3
 8026660:	d307      	bcc.n	8026672 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8026662:	687b      	ldr	r3, [r7, #4]
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	f003 0301 	and.w	r3, r3, #1
 802666c:	2b00      	cmp	r3, #0
 802666e:	d1f2      	bne.n	8026656 <HAL_DMA_IRQHandler+0x2ca>
 8026670:	e000      	b.n	8026674 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8026672:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	2201      	movs	r2, #1
 8026678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	2200      	movs	r2, #0
 8026680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8026684:	687b      	ldr	r3, [r7, #4]
 8026686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026688:	2b00      	cmp	r3, #0
 802668a:	d005      	beq.n	8026698 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026690:	6878      	ldr	r0, [r7, #4]
 8026692:	4798      	blx	r3
 8026694:	e000      	b.n	8026698 <HAL_DMA_IRQHandler+0x30c>
        return;
 8026696:	bf00      	nop
    }
  }
}
 8026698:	3718      	adds	r7, #24
 802669a:	46bd      	mov	sp, r7
 802669c:	bd80      	pop	{r7, pc}
 802669e:	bf00      	nop

080266a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80266a0:	b480      	push	{r7}
 80266a2:	b085      	sub	sp, #20
 80266a4:	af00      	add	r7, sp, #0
 80266a6:	60f8      	str	r0, [r7, #12]
 80266a8:	60b9      	str	r1, [r7, #8]
 80266aa:	607a      	str	r2, [r7, #4]
 80266ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80266ae:	68fb      	ldr	r3, [r7, #12]
 80266b0:	681b      	ldr	r3, [r3, #0]
 80266b2:	681a      	ldr	r2, [r3, #0]
 80266b4:	68fb      	ldr	r3, [r7, #12]
 80266b6:	681b      	ldr	r3, [r3, #0]
 80266b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80266bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80266be:	68fb      	ldr	r3, [r7, #12]
 80266c0:	681b      	ldr	r3, [r3, #0]
 80266c2:	683a      	ldr	r2, [r7, #0]
 80266c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80266c6:	68fb      	ldr	r3, [r7, #12]
 80266c8:	689b      	ldr	r3, [r3, #8]
 80266ca:	2b40      	cmp	r3, #64	; 0x40
 80266cc:	d108      	bne.n	80266e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80266ce:	68fb      	ldr	r3, [r7, #12]
 80266d0:	681b      	ldr	r3, [r3, #0]
 80266d2:	687a      	ldr	r2, [r7, #4]
 80266d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80266d6:	68fb      	ldr	r3, [r7, #12]
 80266d8:	681b      	ldr	r3, [r3, #0]
 80266da:	68ba      	ldr	r2, [r7, #8]
 80266dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80266de:	e007      	b.n	80266f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80266e0:	68fb      	ldr	r3, [r7, #12]
 80266e2:	681b      	ldr	r3, [r3, #0]
 80266e4:	68ba      	ldr	r2, [r7, #8]
 80266e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80266e8:	68fb      	ldr	r3, [r7, #12]
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	687a      	ldr	r2, [r7, #4]
 80266ee:	60da      	str	r2, [r3, #12]
}
 80266f0:	bf00      	nop
 80266f2:	3714      	adds	r7, #20
 80266f4:	46bd      	mov	sp, r7
 80266f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266fa:	4770      	bx	lr

080266fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80266fc:	b480      	push	{r7}
 80266fe:	b085      	sub	sp, #20
 8026700:	af00      	add	r7, sp, #0
 8026702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	681b      	ldr	r3, [r3, #0]
 8026708:	b2db      	uxtb	r3, r3
 802670a:	3b10      	subs	r3, #16
 802670c:	4a14      	ldr	r2, [pc, #80]	; (8026760 <DMA_CalcBaseAndBitshift+0x64>)
 802670e:	fba2 2303 	umull	r2, r3, r2, r3
 8026712:	091b      	lsrs	r3, r3, #4
 8026714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8026716:	4a13      	ldr	r2, [pc, #76]	; (8026764 <DMA_CalcBaseAndBitshift+0x68>)
 8026718:	68fb      	ldr	r3, [r7, #12]
 802671a:	4413      	add	r3, r2
 802671c:	781b      	ldrb	r3, [r3, #0]
 802671e:	461a      	mov	r2, r3
 8026720:	687b      	ldr	r3, [r7, #4]
 8026722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8026724:	68fb      	ldr	r3, [r7, #12]
 8026726:	2b03      	cmp	r3, #3
 8026728:	d909      	bls.n	802673e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802672a:	687b      	ldr	r3, [r7, #4]
 802672c:	681b      	ldr	r3, [r3, #0]
 802672e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026732:	f023 0303 	bic.w	r3, r3, #3
 8026736:	1d1a      	adds	r2, r3, #4
 8026738:	687b      	ldr	r3, [r7, #4]
 802673a:	659a      	str	r2, [r3, #88]	; 0x58
 802673c:	e007      	b.n	802674e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	681b      	ldr	r3, [r3, #0]
 8026742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026746:	f023 0303 	bic.w	r3, r3, #3
 802674a:	687a      	ldr	r2, [r7, #4]
 802674c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802674e:	687b      	ldr	r3, [r7, #4]
 8026750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8026752:	4618      	mov	r0, r3
 8026754:	3714      	adds	r7, #20
 8026756:	46bd      	mov	sp, r7
 8026758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802675c:	4770      	bx	lr
 802675e:	bf00      	nop
 8026760:	aaaaaaab 	.word	0xaaaaaaab
 8026764:	0802fa28 	.word	0x0802fa28

08026768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8026768:	b480      	push	{r7}
 802676a:	b085      	sub	sp, #20
 802676c:	af00      	add	r7, sp, #0
 802676e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8026770:	2300      	movs	r3, #0
 8026772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	699b      	ldr	r3, [r3, #24]
 802677e:	2b00      	cmp	r3, #0
 8026780:	d11f      	bne.n	80267c2 <DMA_CheckFifoParam+0x5a>
 8026782:	68bb      	ldr	r3, [r7, #8]
 8026784:	2b03      	cmp	r3, #3
 8026786:	d856      	bhi.n	8026836 <DMA_CheckFifoParam+0xce>
 8026788:	a201      	add	r2, pc, #4	; (adr r2, 8026790 <DMA_CheckFifoParam+0x28>)
 802678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802678e:	bf00      	nop
 8026790:	080267a1 	.word	0x080267a1
 8026794:	080267b3 	.word	0x080267b3
 8026798:	080267a1 	.word	0x080267a1
 802679c:	08026837 	.word	0x08026837
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80267a8:	2b00      	cmp	r3, #0
 80267aa:	d046      	beq.n	802683a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80267ac:	2301      	movs	r3, #1
 80267ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267b0:	e043      	b.n	802683a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80267ba:	d140      	bne.n	802683e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80267bc:	2301      	movs	r3, #1
 80267be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267c0:	e03d      	b.n	802683e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	699b      	ldr	r3, [r3, #24]
 80267c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80267ca:	d121      	bne.n	8026810 <DMA_CheckFifoParam+0xa8>
 80267cc:	68bb      	ldr	r3, [r7, #8]
 80267ce:	2b03      	cmp	r3, #3
 80267d0:	d837      	bhi.n	8026842 <DMA_CheckFifoParam+0xda>
 80267d2:	a201      	add	r2, pc, #4	; (adr r2, 80267d8 <DMA_CheckFifoParam+0x70>)
 80267d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80267d8:	080267e9 	.word	0x080267e9
 80267dc:	080267ef 	.word	0x080267ef
 80267e0:	080267e9 	.word	0x080267e9
 80267e4:	08026801 	.word	0x08026801
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80267e8:	2301      	movs	r3, #1
 80267ea:	73fb      	strb	r3, [r7, #15]
      break;
 80267ec:	e030      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80267ee:	687b      	ldr	r3, [r7, #4]
 80267f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d025      	beq.n	8026846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80267fa:	2301      	movs	r3, #1
 80267fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80267fe:	e022      	b.n	8026846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8026808:	d11f      	bne.n	802684a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802680a:	2301      	movs	r3, #1
 802680c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802680e:	e01c      	b.n	802684a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8026810:	68bb      	ldr	r3, [r7, #8]
 8026812:	2b02      	cmp	r3, #2
 8026814:	d903      	bls.n	802681e <DMA_CheckFifoParam+0xb6>
 8026816:	68bb      	ldr	r3, [r7, #8]
 8026818:	2b03      	cmp	r3, #3
 802681a:	d003      	beq.n	8026824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802681c:	e018      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802681e:	2301      	movs	r3, #1
 8026820:	73fb      	strb	r3, [r7, #15]
      break;
 8026822:	e015      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802682c:	2b00      	cmp	r3, #0
 802682e:	d00e      	beq.n	802684e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8026830:	2301      	movs	r3, #1
 8026832:	73fb      	strb	r3, [r7, #15]
      break;
 8026834:	e00b      	b.n	802684e <DMA_CheckFifoParam+0xe6>
      break;
 8026836:	bf00      	nop
 8026838:	e00a      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;
 802683a:	bf00      	nop
 802683c:	e008      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;
 802683e:	bf00      	nop
 8026840:	e006      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;
 8026842:	bf00      	nop
 8026844:	e004      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;
 8026846:	bf00      	nop
 8026848:	e002      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;   
 802684a:	bf00      	nop
 802684c:	e000      	b.n	8026850 <DMA_CheckFifoParam+0xe8>
      break;
 802684e:	bf00      	nop
    }
  } 
  
  return status; 
 8026850:	7bfb      	ldrb	r3, [r7, #15]
}
 8026852:	4618      	mov	r0, r3
 8026854:	3714      	adds	r7, #20
 8026856:	46bd      	mov	sp, r7
 8026858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802685c:	4770      	bx	lr
 802685e:	bf00      	nop

08026860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8026860:	b480      	push	{r7}
 8026862:	b089      	sub	sp, #36	; 0x24
 8026864:	af00      	add	r7, sp, #0
 8026866:	6078      	str	r0, [r7, #4]
 8026868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802686a:	2300      	movs	r3, #0
 802686c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802686e:	2300      	movs	r3, #0
 8026870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8026872:	2300      	movs	r3, #0
 8026874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026876:	2300      	movs	r3, #0
 8026878:	61fb      	str	r3, [r7, #28]
 802687a:	e16b      	b.n	8026b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802687c:	2201      	movs	r2, #1
 802687e:	69fb      	ldr	r3, [r7, #28]
 8026880:	fa02 f303 	lsl.w	r3, r2, r3
 8026884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8026886:	683b      	ldr	r3, [r7, #0]
 8026888:	681b      	ldr	r3, [r3, #0]
 802688a:	697a      	ldr	r2, [r7, #20]
 802688c:	4013      	ands	r3, r2
 802688e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8026890:	693a      	ldr	r2, [r7, #16]
 8026892:	697b      	ldr	r3, [r7, #20]
 8026894:	429a      	cmp	r2, r3
 8026896:	f040 815a 	bne.w	8026b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802689a:	683b      	ldr	r3, [r7, #0]
 802689c:	685b      	ldr	r3, [r3, #4]
 802689e:	f003 0303 	and.w	r3, r3, #3
 80268a2:	2b01      	cmp	r3, #1
 80268a4:	d005      	beq.n	80268b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80268a6:	683b      	ldr	r3, [r7, #0]
 80268a8:	685b      	ldr	r3, [r3, #4]
 80268aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80268ae:	2b02      	cmp	r3, #2
 80268b0:	d130      	bne.n	8026914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80268b2:	687b      	ldr	r3, [r7, #4]
 80268b4:	689b      	ldr	r3, [r3, #8]
 80268b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80268b8:	69fb      	ldr	r3, [r7, #28]
 80268ba:	005b      	lsls	r3, r3, #1
 80268bc:	2203      	movs	r2, #3
 80268be:	fa02 f303 	lsl.w	r3, r2, r3
 80268c2:	43db      	mvns	r3, r3
 80268c4:	69ba      	ldr	r2, [r7, #24]
 80268c6:	4013      	ands	r3, r2
 80268c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80268ca:	683b      	ldr	r3, [r7, #0]
 80268cc:	68da      	ldr	r2, [r3, #12]
 80268ce:	69fb      	ldr	r3, [r7, #28]
 80268d0:	005b      	lsls	r3, r3, #1
 80268d2:	fa02 f303 	lsl.w	r3, r2, r3
 80268d6:	69ba      	ldr	r2, [r7, #24]
 80268d8:	4313      	orrs	r3, r2
 80268da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	69ba      	ldr	r2, [r7, #24]
 80268e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	685b      	ldr	r3, [r3, #4]
 80268e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80268e8:	2201      	movs	r2, #1
 80268ea:	69fb      	ldr	r3, [r7, #28]
 80268ec:	fa02 f303 	lsl.w	r3, r2, r3
 80268f0:	43db      	mvns	r3, r3
 80268f2:	69ba      	ldr	r2, [r7, #24]
 80268f4:	4013      	ands	r3, r2
 80268f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80268f8:	683b      	ldr	r3, [r7, #0]
 80268fa:	685b      	ldr	r3, [r3, #4]
 80268fc:	091b      	lsrs	r3, r3, #4
 80268fe:	f003 0201 	and.w	r2, r3, #1
 8026902:	69fb      	ldr	r3, [r7, #28]
 8026904:	fa02 f303 	lsl.w	r3, r2, r3
 8026908:	69ba      	ldr	r2, [r7, #24]
 802690a:	4313      	orrs	r3, r2
 802690c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802690e:	687b      	ldr	r3, [r7, #4]
 8026910:	69ba      	ldr	r2, [r7, #24]
 8026912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8026914:	683b      	ldr	r3, [r7, #0]
 8026916:	685b      	ldr	r3, [r3, #4]
 8026918:	f003 0303 	and.w	r3, r3, #3
 802691c:	2b03      	cmp	r3, #3
 802691e:	d017      	beq.n	8026950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	68db      	ldr	r3, [r3, #12]
 8026924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8026926:	69fb      	ldr	r3, [r7, #28]
 8026928:	005b      	lsls	r3, r3, #1
 802692a:	2203      	movs	r2, #3
 802692c:	fa02 f303 	lsl.w	r3, r2, r3
 8026930:	43db      	mvns	r3, r3
 8026932:	69ba      	ldr	r2, [r7, #24]
 8026934:	4013      	ands	r3, r2
 8026936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8026938:	683b      	ldr	r3, [r7, #0]
 802693a:	689a      	ldr	r2, [r3, #8]
 802693c:	69fb      	ldr	r3, [r7, #28]
 802693e:	005b      	lsls	r3, r3, #1
 8026940:	fa02 f303 	lsl.w	r3, r2, r3
 8026944:	69ba      	ldr	r2, [r7, #24]
 8026946:	4313      	orrs	r3, r2
 8026948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802694a:	687b      	ldr	r3, [r7, #4]
 802694c:	69ba      	ldr	r2, [r7, #24]
 802694e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8026950:	683b      	ldr	r3, [r7, #0]
 8026952:	685b      	ldr	r3, [r3, #4]
 8026954:	f003 0303 	and.w	r3, r3, #3
 8026958:	2b02      	cmp	r3, #2
 802695a:	d123      	bne.n	80269a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802695c:	69fb      	ldr	r3, [r7, #28]
 802695e:	08da      	lsrs	r2, r3, #3
 8026960:	687b      	ldr	r3, [r7, #4]
 8026962:	3208      	adds	r2, #8
 8026964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802696a:	69fb      	ldr	r3, [r7, #28]
 802696c:	f003 0307 	and.w	r3, r3, #7
 8026970:	009b      	lsls	r3, r3, #2
 8026972:	220f      	movs	r2, #15
 8026974:	fa02 f303 	lsl.w	r3, r2, r3
 8026978:	43db      	mvns	r3, r3
 802697a:	69ba      	ldr	r2, [r7, #24]
 802697c:	4013      	ands	r3, r2
 802697e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8026980:	683b      	ldr	r3, [r7, #0]
 8026982:	691a      	ldr	r2, [r3, #16]
 8026984:	69fb      	ldr	r3, [r7, #28]
 8026986:	f003 0307 	and.w	r3, r3, #7
 802698a:	009b      	lsls	r3, r3, #2
 802698c:	fa02 f303 	lsl.w	r3, r2, r3
 8026990:	69ba      	ldr	r2, [r7, #24]
 8026992:	4313      	orrs	r3, r2
 8026994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8026996:	69fb      	ldr	r3, [r7, #28]
 8026998:	08da      	lsrs	r2, r3, #3
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	3208      	adds	r2, #8
 802699e:	69b9      	ldr	r1, [r7, #24]
 80269a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	681b      	ldr	r3, [r3, #0]
 80269a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80269aa:	69fb      	ldr	r3, [r7, #28]
 80269ac:	005b      	lsls	r3, r3, #1
 80269ae:	2203      	movs	r2, #3
 80269b0:	fa02 f303 	lsl.w	r3, r2, r3
 80269b4:	43db      	mvns	r3, r3
 80269b6:	69ba      	ldr	r2, [r7, #24]
 80269b8:	4013      	ands	r3, r2
 80269ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80269bc:	683b      	ldr	r3, [r7, #0]
 80269be:	685b      	ldr	r3, [r3, #4]
 80269c0:	f003 0203 	and.w	r2, r3, #3
 80269c4:	69fb      	ldr	r3, [r7, #28]
 80269c6:	005b      	lsls	r3, r3, #1
 80269c8:	fa02 f303 	lsl.w	r3, r2, r3
 80269cc:	69ba      	ldr	r2, [r7, #24]
 80269ce:	4313      	orrs	r3, r2
 80269d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	69ba      	ldr	r2, [r7, #24]
 80269d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80269d8:	683b      	ldr	r3, [r7, #0]
 80269da:	685b      	ldr	r3, [r3, #4]
 80269dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80269e0:	2b00      	cmp	r3, #0
 80269e2:	f000 80b4 	beq.w	8026b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80269e6:	2300      	movs	r3, #0
 80269e8:	60fb      	str	r3, [r7, #12]
 80269ea:	4b60      	ldr	r3, [pc, #384]	; (8026b6c <HAL_GPIO_Init+0x30c>)
 80269ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269ee:	4a5f      	ldr	r2, [pc, #380]	; (8026b6c <HAL_GPIO_Init+0x30c>)
 80269f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80269f4:	6453      	str	r3, [r2, #68]	; 0x44
 80269f6:	4b5d      	ldr	r3, [pc, #372]	; (8026b6c <HAL_GPIO_Init+0x30c>)
 80269f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80269fe:	60fb      	str	r3, [r7, #12]
 8026a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8026a02:	4a5b      	ldr	r2, [pc, #364]	; (8026b70 <HAL_GPIO_Init+0x310>)
 8026a04:	69fb      	ldr	r3, [r7, #28]
 8026a06:	089b      	lsrs	r3, r3, #2
 8026a08:	3302      	adds	r3, #2
 8026a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8026a10:	69fb      	ldr	r3, [r7, #28]
 8026a12:	f003 0303 	and.w	r3, r3, #3
 8026a16:	009b      	lsls	r3, r3, #2
 8026a18:	220f      	movs	r2, #15
 8026a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8026a1e:	43db      	mvns	r3, r3
 8026a20:	69ba      	ldr	r2, [r7, #24]
 8026a22:	4013      	ands	r3, r2
 8026a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	4a52      	ldr	r2, [pc, #328]	; (8026b74 <HAL_GPIO_Init+0x314>)
 8026a2a:	4293      	cmp	r3, r2
 8026a2c:	d02b      	beq.n	8026a86 <HAL_GPIO_Init+0x226>
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	4a51      	ldr	r2, [pc, #324]	; (8026b78 <HAL_GPIO_Init+0x318>)
 8026a32:	4293      	cmp	r3, r2
 8026a34:	d025      	beq.n	8026a82 <HAL_GPIO_Init+0x222>
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	4a50      	ldr	r2, [pc, #320]	; (8026b7c <HAL_GPIO_Init+0x31c>)
 8026a3a:	4293      	cmp	r3, r2
 8026a3c:	d01f      	beq.n	8026a7e <HAL_GPIO_Init+0x21e>
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	4a4f      	ldr	r2, [pc, #316]	; (8026b80 <HAL_GPIO_Init+0x320>)
 8026a42:	4293      	cmp	r3, r2
 8026a44:	d019      	beq.n	8026a7a <HAL_GPIO_Init+0x21a>
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	4a4e      	ldr	r2, [pc, #312]	; (8026b84 <HAL_GPIO_Init+0x324>)
 8026a4a:	4293      	cmp	r3, r2
 8026a4c:	d013      	beq.n	8026a76 <HAL_GPIO_Init+0x216>
 8026a4e:	687b      	ldr	r3, [r7, #4]
 8026a50:	4a4d      	ldr	r2, [pc, #308]	; (8026b88 <HAL_GPIO_Init+0x328>)
 8026a52:	4293      	cmp	r3, r2
 8026a54:	d00d      	beq.n	8026a72 <HAL_GPIO_Init+0x212>
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	4a4c      	ldr	r2, [pc, #304]	; (8026b8c <HAL_GPIO_Init+0x32c>)
 8026a5a:	4293      	cmp	r3, r2
 8026a5c:	d007      	beq.n	8026a6e <HAL_GPIO_Init+0x20e>
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	4a4b      	ldr	r2, [pc, #300]	; (8026b90 <HAL_GPIO_Init+0x330>)
 8026a62:	4293      	cmp	r3, r2
 8026a64:	d101      	bne.n	8026a6a <HAL_GPIO_Init+0x20a>
 8026a66:	2307      	movs	r3, #7
 8026a68:	e00e      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a6a:	2308      	movs	r3, #8
 8026a6c:	e00c      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a6e:	2306      	movs	r3, #6
 8026a70:	e00a      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a72:	2305      	movs	r3, #5
 8026a74:	e008      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a76:	2304      	movs	r3, #4
 8026a78:	e006      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a7a:	2303      	movs	r3, #3
 8026a7c:	e004      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a7e:	2302      	movs	r3, #2
 8026a80:	e002      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a82:	2301      	movs	r3, #1
 8026a84:	e000      	b.n	8026a88 <HAL_GPIO_Init+0x228>
 8026a86:	2300      	movs	r3, #0
 8026a88:	69fa      	ldr	r2, [r7, #28]
 8026a8a:	f002 0203 	and.w	r2, r2, #3
 8026a8e:	0092      	lsls	r2, r2, #2
 8026a90:	4093      	lsls	r3, r2
 8026a92:	69ba      	ldr	r2, [r7, #24]
 8026a94:	4313      	orrs	r3, r2
 8026a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8026a98:	4935      	ldr	r1, [pc, #212]	; (8026b70 <HAL_GPIO_Init+0x310>)
 8026a9a:	69fb      	ldr	r3, [r7, #28]
 8026a9c:	089b      	lsrs	r3, r3, #2
 8026a9e:	3302      	adds	r3, #2
 8026aa0:	69ba      	ldr	r2, [r7, #24]
 8026aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8026aa6:	4b3b      	ldr	r3, [pc, #236]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026aa8:	681b      	ldr	r3, [r3, #0]
 8026aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026aac:	693b      	ldr	r3, [r7, #16]
 8026aae:	43db      	mvns	r3, r3
 8026ab0:	69ba      	ldr	r2, [r7, #24]
 8026ab2:	4013      	ands	r3, r2
 8026ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	685b      	ldr	r3, [r3, #4]
 8026aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d003      	beq.n	8026aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8026ac2:	69ba      	ldr	r2, [r7, #24]
 8026ac4:	693b      	ldr	r3, [r7, #16]
 8026ac6:	4313      	orrs	r3, r2
 8026ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8026aca:	4a32      	ldr	r2, [pc, #200]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026acc:	69bb      	ldr	r3, [r7, #24]
 8026ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8026ad0:	4b30      	ldr	r3, [pc, #192]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026ad2:	685b      	ldr	r3, [r3, #4]
 8026ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026ad6:	693b      	ldr	r3, [r7, #16]
 8026ad8:	43db      	mvns	r3, r3
 8026ada:	69ba      	ldr	r2, [r7, #24]
 8026adc:	4013      	ands	r3, r2
 8026ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8026ae0:	683b      	ldr	r3, [r7, #0]
 8026ae2:	685b      	ldr	r3, [r3, #4]
 8026ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	d003      	beq.n	8026af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8026aec:	69ba      	ldr	r2, [r7, #24]
 8026aee:	693b      	ldr	r3, [r7, #16]
 8026af0:	4313      	orrs	r3, r2
 8026af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8026af4:	4a27      	ldr	r2, [pc, #156]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026af6:	69bb      	ldr	r3, [r7, #24]
 8026af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8026afa:	4b26      	ldr	r3, [pc, #152]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026afc:	689b      	ldr	r3, [r3, #8]
 8026afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b00:	693b      	ldr	r3, [r7, #16]
 8026b02:	43db      	mvns	r3, r3
 8026b04:	69ba      	ldr	r2, [r7, #24]
 8026b06:	4013      	ands	r3, r2
 8026b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8026b0a:	683b      	ldr	r3, [r7, #0]
 8026b0c:	685b      	ldr	r3, [r3, #4]
 8026b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026b12:	2b00      	cmp	r3, #0
 8026b14:	d003      	beq.n	8026b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8026b16:	69ba      	ldr	r2, [r7, #24]
 8026b18:	693b      	ldr	r3, [r7, #16]
 8026b1a:	4313      	orrs	r3, r2
 8026b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8026b1e:	4a1d      	ldr	r2, [pc, #116]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026b20:	69bb      	ldr	r3, [r7, #24]
 8026b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8026b24:	4b1b      	ldr	r3, [pc, #108]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026b26:	68db      	ldr	r3, [r3, #12]
 8026b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026b2a:	693b      	ldr	r3, [r7, #16]
 8026b2c:	43db      	mvns	r3, r3
 8026b2e:	69ba      	ldr	r2, [r7, #24]
 8026b30:	4013      	ands	r3, r2
 8026b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8026b34:	683b      	ldr	r3, [r7, #0]
 8026b36:	685b      	ldr	r3, [r3, #4]
 8026b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	d003      	beq.n	8026b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8026b40:	69ba      	ldr	r2, [r7, #24]
 8026b42:	693b      	ldr	r3, [r7, #16]
 8026b44:	4313      	orrs	r3, r2
 8026b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8026b48:	4a12      	ldr	r2, [pc, #72]	; (8026b94 <HAL_GPIO_Init+0x334>)
 8026b4a:	69bb      	ldr	r3, [r7, #24]
 8026b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026b4e:	69fb      	ldr	r3, [r7, #28]
 8026b50:	3301      	adds	r3, #1
 8026b52:	61fb      	str	r3, [r7, #28]
 8026b54:	69fb      	ldr	r3, [r7, #28]
 8026b56:	2b0f      	cmp	r3, #15
 8026b58:	f67f ae90 	bls.w	802687c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8026b5c:	bf00      	nop
 8026b5e:	bf00      	nop
 8026b60:	3724      	adds	r7, #36	; 0x24
 8026b62:	46bd      	mov	sp, r7
 8026b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b68:	4770      	bx	lr
 8026b6a:	bf00      	nop
 8026b6c:	40023800 	.word	0x40023800
 8026b70:	40013800 	.word	0x40013800
 8026b74:	40020000 	.word	0x40020000
 8026b78:	40020400 	.word	0x40020400
 8026b7c:	40020800 	.word	0x40020800
 8026b80:	40020c00 	.word	0x40020c00
 8026b84:	40021000 	.word	0x40021000
 8026b88:	40021400 	.word	0x40021400
 8026b8c:	40021800 	.word	0x40021800
 8026b90:	40021c00 	.word	0x40021c00
 8026b94:	40013c00 	.word	0x40013c00

08026b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8026b98:	b480      	push	{r7}
 8026b9a:	b083      	sub	sp, #12
 8026b9c:	af00      	add	r7, sp, #0
 8026b9e:	6078      	str	r0, [r7, #4]
 8026ba0:	460b      	mov	r3, r1
 8026ba2:	807b      	strh	r3, [r7, #2]
 8026ba4:	4613      	mov	r3, r2
 8026ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8026ba8:	787b      	ldrb	r3, [r7, #1]
 8026baa:	2b00      	cmp	r3, #0
 8026bac:	d003      	beq.n	8026bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026bae:	887a      	ldrh	r2, [r7, #2]
 8026bb0:	687b      	ldr	r3, [r7, #4]
 8026bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8026bb4:	e003      	b.n	8026bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8026bb6:	887b      	ldrh	r3, [r7, #2]
 8026bb8:	041a      	lsls	r2, r3, #16
 8026bba:	687b      	ldr	r3, [r7, #4]
 8026bbc:	619a      	str	r2, [r3, #24]
}
 8026bbe:	bf00      	nop
 8026bc0:	370c      	adds	r7, #12
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc8:	4770      	bx	lr
	...

08026bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8026bcc:	b580      	push	{r7, lr}
 8026bce:	b082      	sub	sp, #8
 8026bd0:	af00      	add	r7, sp, #0
 8026bd2:	4603      	mov	r3, r0
 8026bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8026bd6:	4b08      	ldr	r3, [pc, #32]	; (8026bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026bd8:	695a      	ldr	r2, [r3, #20]
 8026bda:	88fb      	ldrh	r3, [r7, #6]
 8026bdc:	4013      	ands	r3, r2
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	d006      	beq.n	8026bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8026be2:	4a05      	ldr	r2, [pc, #20]	; (8026bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026be4:	88fb      	ldrh	r3, [r7, #6]
 8026be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8026be8:	88fb      	ldrh	r3, [r7, #6]
 8026bea:	4618      	mov	r0, r3
 8026bec:	f7ee fe94 	bl	8015918 <HAL_GPIO_EXTI_Callback>
  }
}
 8026bf0:	bf00      	nop
 8026bf2:	3708      	adds	r7, #8
 8026bf4:	46bd      	mov	sp, r7
 8026bf6:	bd80      	pop	{r7, pc}
 8026bf8:	40013c00 	.word	0x40013c00

08026bfc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8026bfc:	b480      	push	{r7}
 8026bfe:	b083      	sub	sp, #12
 8026c00:	af00      	add	r7, sp, #0
 8026c02:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	681b      	ldr	r3, [r3, #0]
 8026c08:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8026c0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026c0e:	2300      	movs	r3, #0
}
 8026c10:	4618      	mov	r0, r3
 8026c12:	370c      	adds	r7, #12
 8026c14:	46bd      	mov	sp, r7
 8026c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c1a:	4770      	bx	lr

08026c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026c1c:	b580      	push	{r7, lr}
 8026c1e:	b086      	sub	sp, #24
 8026c20:	af00      	add	r7, sp, #0
 8026c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d101      	bne.n	8026c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026c2a:	2301      	movs	r3, #1
 8026c2c:	e264      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026c2e:	687b      	ldr	r3, [r7, #4]
 8026c30:	681b      	ldr	r3, [r3, #0]
 8026c32:	f003 0301 	and.w	r3, r3, #1
 8026c36:	2b00      	cmp	r3, #0
 8026c38:	d075      	beq.n	8026d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c3a:	4ba3      	ldr	r3, [pc, #652]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c3c:	689b      	ldr	r3, [r3, #8]
 8026c3e:	f003 030c 	and.w	r3, r3, #12
 8026c42:	2b04      	cmp	r3, #4
 8026c44:	d00c      	beq.n	8026c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c46:	4ba0      	ldr	r3, [pc, #640]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c48:	689b      	ldr	r3, [r3, #8]
 8026c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c4e:	2b08      	cmp	r3, #8
 8026c50:	d112      	bne.n	8026c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c52:	4b9d      	ldr	r3, [pc, #628]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c54:	685b      	ldr	r3, [r3, #4]
 8026c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026c5e:	d10b      	bne.n	8026c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026c60:	4b99      	ldr	r3, [pc, #612]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c68:	2b00      	cmp	r3, #0
 8026c6a:	d05b      	beq.n	8026d24 <HAL_RCC_OscConfig+0x108>
 8026c6c:	687b      	ldr	r3, [r7, #4]
 8026c6e:	685b      	ldr	r3, [r3, #4]
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	d157      	bne.n	8026d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026c74:	2301      	movs	r3, #1
 8026c76:	e23f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026c78:	687b      	ldr	r3, [r7, #4]
 8026c7a:	685b      	ldr	r3, [r3, #4]
 8026c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026c80:	d106      	bne.n	8026c90 <HAL_RCC_OscConfig+0x74>
 8026c82:	4b91      	ldr	r3, [pc, #580]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c84:	681b      	ldr	r3, [r3, #0]
 8026c86:	4a90      	ldr	r2, [pc, #576]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c8c:	6013      	str	r3, [r2, #0]
 8026c8e:	e01d      	b.n	8026ccc <HAL_RCC_OscConfig+0xb0>
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	685b      	ldr	r3, [r3, #4]
 8026c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026c98:	d10c      	bne.n	8026cb4 <HAL_RCC_OscConfig+0x98>
 8026c9a:	4b8b      	ldr	r3, [pc, #556]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026c9c:	681b      	ldr	r3, [r3, #0]
 8026c9e:	4a8a      	ldr	r2, [pc, #552]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026ca4:	6013      	str	r3, [r2, #0]
 8026ca6:	4b88      	ldr	r3, [pc, #544]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	4a87      	ldr	r2, [pc, #540]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026cb0:	6013      	str	r3, [r2, #0]
 8026cb2:	e00b      	b.n	8026ccc <HAL_RCC_OscConfig+0xb0>
 8026cb4:	4b84      	ldr	r3, [pc, #528]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cb6:	681b      	ldr	r3, [r3, #0]
 8026cb8:	4a83      	ldr	r2, [pc, #524]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026cbe:	6013      	str	r3, [r2, #0]
 8026cc0:	4b81      	ldr	r3, [pc, #516]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	4a80      	ldr	r2, [pc, #512]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026ccc:	687b      	ldr	r3, [r7, #4]
 8026cce:	685b      	ldr	r3, [r3, #4]
 8026cd0:	2b00      	cmp	r3, #0
 8026cd2:	d013      	beq.n	8026cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026cd4:	f7fd fd16 	bl	8024704 <HAL_GetTick>
 8026cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026cda:	e008      	b.n	8026cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026cdc:	f7fd fd12 	bl	8024704 <HAL_GetTick>
 8026ce0:	4602      	mov	r2, r0
 8026ce2:	693b      	ldr	r3, [r7, #16]
 8026ce4:	1ad3      	subs	r3, r2, r3
 8026ce6:	2b64      	cmp	r3, #100	; 0x64
 8026ce8:	d901      	bls.n	8026cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026cea:	2303      	movs	r3, #3
 8026cec:	e204      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026cee:	4b76      	ldr	r3, [pc, #472]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cf6:	2b00      	cmp	r3, #0
 8026cf8:	d0f0      	beq.n	8026cdc <HAL_RCC_OscConfig+0xc0>
 8026cfa:	e014      	b.n	8026d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026cfc:	f7fd fd02 	bl	8024704 <HAL_GetTick>
 8026d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d02:	e008      	b.n	8026d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026d04:	f7fd fcfe 	bl	8024704 <HAL_GetTick>
 8026d08:	4602      	mov	r2, r0
 8026d0a:	693b      	ldr	r3, [r7, #16]
 8026d0c:	1ad3      	subs	r3, r2, r3
 8026d0e:	2b64      	cmp	r3, #100	; 0x64
 8026d10:	d901      	bls.n	8026d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026d12:	2303      	movs	r3, #3
 8026d14:	e1f0      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d16:	4b6c      	ldr	r3, [pc, #432]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d18:	681b      	ldr	r3, [r3, #0]
 8026d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	d1f0      	bne.n	8026d04 <HAL_RCC_OscConfig+0xe8>
 8026d22:	e000      	b.n	8026d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	681b      	ldr	r3, [r3, #0]
 8026d2a:	f003 0302 	and.w	r3, r3, #2
 8026d2e:	2b00      	cmp	r3, #0
 8026d30:	d063      	beq.n	8026dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d32:	4b65      	ldr	r3, [pc, #404]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d34:	689b      	ldr	r3, [r3, #8]
 8026d36:	f003 030c 	and.w	r3, r3, #12
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d00b      	beq.n	8026d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d3e:	4b62      	ldr	r3, [pc, #392]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d40:	689b      	ldr	r3, [r3, #8]
 8026d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d46:	2b08      	cmp	r3, #8
 8026d48:	d11c      	bne.n	8026d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d4a:	4b5f      	ldr	r3, [pc, #380]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d4c:	685b      	ldr	r3, [r3, #4]
 8026d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026d52:	2b00      	cmp	r3, #0
 8026d54:	d116      	bne.n	8026d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d56:	4b5c      	ldr	r3, [pc, #368]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d58:	681b      	ldr	r3, [r3, #0]
 8026d5a:	f003 0302 	and.w	r3, r3, #2
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	d005      	beq.n	8026d6e <HAL_RCC_OscConfig+0x152>
 8026d62:	687b      	ldr	r3, [r7, #4]
 8026d64:	68db      	ldr	r3, [r3, #12]
 8026d66:	2b01      	cmp	r3, #1
 8026d68:	d001      	beq.n	8026d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026d6a:	2301      	movs	r3, #1
 8026d6c:	e1c4      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d6e:	4b56      	ldr	r3, [pc, #344]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d70:	681b      	ldr	r3, [r3, #0]
 8026d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026d76:	687b      	ldr	r3, [r7, #4]
 8026d78:	691b      	ldr	r3, [r3, #16]
 8026d7a:	00db      	lsls	r3, r3, #3
 8026d7c:	4952      	ldr	r1, [pc, #328]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026d7e:	4313      	orrs	r3, r2
 8026d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d82:	e03a      	b.n	8026dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	68db      	ldr	r3, [r3, #12]
 8026d88:	2b00      	cmp	r3, #0
 8026d8a:	d020      	beq.n	8026dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026d8c:	4b4f      	ldr	r3, [pc, #316]	; (8026ecc <HAL_RCC_OscConfig+0x2b0>)
 8026d8e:	2201      	movs	r2, #1
 8026d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d92:	f7fd fcb7 	bl	8024704 <HAL_GetTick>
 8026d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026d98:	e008      	b.n	8026dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d9a:	f7fd fcb3 	bl	8024704 <HAL_GetTick>
 8026d9e:	4602      	mov	r2, r0
 8026da0:	693b      	ldr	r3, [r7, #16]
 8026da2:	1ad3      	subs	r3, r2, r3
 8026da4:	2b02      	cmp	r3, #2
 8026da6:	d901      	bls.n	8026dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026da8:	2303      	movs	r3, #3
 8026daa:	e1a5      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026dac:	4b46      	ldr	r3, [pc, #280]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	f003 0302 	and.w	r3, r3, #2
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d0f0      	beq.n	8026d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026db8:	4b43      	ldr	r3, [pc, #268]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026dba:	681b      	ldr	r3, [r3, #0]
 8026dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	691b      	ldr	r3, [r3, #16]
 8026dc4:	00db      	lsls	r3, r3, #3
 8026dc6:	4940      	ldr	r1, [pc, #256]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026dc8:	4313      	orrs	r3, r2
 8026dca:	600b      	str	r3, [r1, #0]
 8026dcc:	e015      	b.n	8026dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026dce:	4b3f      	ldr	r3, [pc, #252]	; (8026ecc <HAL_RCC_OscConfig+0x2b0>)
 8026dd0:	2200      	movs	r2, #0
 8026dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026dd4:	f7fd fc96 	bl	8024704 <HAL_GetTick>
 8026dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026dda:	e008      	b.n	8026dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026ddc:	f7fd fc92 	bl	8024704 <HAL_GetTick>
 8026de0:	4602      	mov	r2, r0
 8026de2:	693b      	ldr	r3, [r7, #16]
 8026de4:	1ad3      	subs	r3, r2, r3
 8026de6:	2b02      	cmp	r3, #2
 8026de8:	d901      	bls.n	8026dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026dea:	2303      	movs	r3, #3
 8026dec:	e184      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026dee:	4b36      	ldr	r3, [pc, #216]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026df0:	681b      	ldr	r3, [r3, #0]
 8026df2:	f003 0302 	and.w	r3, r3, #2
 8026df6:	2b00      	cmp	r3, #0
 8026df8:	d1f0      	bne.n	8026ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026dfa:	687b      	ldr	r3, [r7, #4]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	f003 0308 	and.w	r3, r3, #8
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d030      	beq.n	8026e68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026e06:	687b      	ldr	r3, [r7, #4]
 8026e08:	695b      	ldr	r3, [r3, #20]
 8026e0a:	2b00      	cmp	r3, #0
 8026e0c:	d016      	beq.n	8026e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026e0e:	4b30      	ldr	r3, [pc, #192]	; (8026ed0 <HAL_RCC_OscConfig+0x2b4>)
 8026e10:	2201      	movs	r2, #1
 8026e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026e14:	f7fd fc76 	bl	8024704 <HAL_GetTick>
 8026e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e1a:	e008      	b.n	8026e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e1c:	f7fd fc72 	bl	8024704 <HAL_GetTick>
 8026e20:	4602      	mov	r2, r0
 8026e22:	693b      	ldr	r3, [r7, #16]
 8026e24:	1ad3      	subs	r3, r2, r3
 8026e26:	2b02      	cmp	r3, #2
 8026e28:	d901      	bls.n	8026e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026e2a:	2303      	movs	r3, #3
 8026e2c:	e164      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e2e:	4b26      	ldr	r3, [pc, #152]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e32:	f003 0302 	and.w	r3, r3, #2
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d0f0      	beq.n	8026e1c <HAL_RCC_OscConfig+0x200>
 8026e3a:	e015      	b.n	8026e68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026e3c:	4b24      	ldr	r3, [pc, #144]	; (8026ed0 <HAL_RCC_OscConfig+0x2b4>)
 8026e3e:	2200      	movs	r2, #0
 8026e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026e42:	f7fd fc5f 	bl	8024704 <HAL_GetTick>
 8026e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e48:	e008      	b.n	8026e5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e4a:	f7fd fc5b 	bl	8024704 <HAL_GetTick>
 8026e4e:	4602      	mov	r2, r0
 8026e50:	693b      	ldr	r3, [r7, #16]
 8026e52:	1ad3      	subs	r3, r2, r3
 8026e54:	2b02      	cmp	r3, #2
 8026e56:	d901      	bls.n	8026e5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8026e58:	2303      	movs	r3, #3
 8026e5a:	e14d      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e5c:	4b1a      	ldr	r3, [pc, #104]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e60:	f003 0302 	and.w	r3, r3, #2
 8026e64:	2b00      	cmp	r3, #0
 8026e66:	d1f0      	bne.n	8026e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026e68:	687b      	ldr	r3, [r7, #4]
 8026e6a:	681b      	ldr	r3, [r3, #0]
 8026e6c:	f003 0304 	and.w	r3, r3, #4
 8026e70:	2b00      	cmp	r3, #0
 8026e72:	f000 80a0 	beq.w	8026fb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026e76:	2300      	movs	r3, #0
 8026e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026e7a:	4b13      	ldr	r3, [pc, #76]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e82:	2b00      	cmp	r3, #0
 8026e84:	d10f      	bne.n	8026ea6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026e86:	2300      	movs	r3, #0
 8026e88:	60bb      	str	r3, [r7, #8]
 8026e8a:	4b0f      	ldr	r3, [pc, #60]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e8e:	4a0e      	ldr	r2, [pc, #56]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026e94:	6413      	str	r3, [r2, #64]	; 0x40
 8026e96:	4b0c      	ldr	r3, [pc, #48]	; (8026ec8 <HAL_RCC_OscConfig+0x2ac>)
 8026e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e9e:	60bb      	str	r3, [r7, #8]
 8026ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026ea2:	2301      	movs	r3, #1
 8026ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ea6:	4b0b      	ldr	r3, [pc, #44]	; (8026ed4 <HAL_RCC_OscConfig+0x2b8>)
 8026ea8:	681b      	ldr	r3, [r3, #0]
 8026eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d121      	bne.n	8026ef6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026eb2:	4b08      	ldr	r3, [pc, #32]	; (8026ed4 <HAL_RCC_OscConfig+0x2b8>)
 8026eb4:	681b      	ldr	r3, [r3, #0]
 8026eb6:	4a07      	ldr	r2, [pc, #28]	; (8026ed4 <HAL_RCC_OscConfig+0x2b8>)
 8026eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026ebe:	f7fd fc21 	bl	8024704 <HAL_GetTick>
 8026ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ec4:	e011      	b.n	8026eea <HAL_RCC_OscConfig+0x2ce>
 8026ec6:	bf00      	nop
 8026ec8:	40023800 	.word	0x40023800
 8026ecc:	42470000 	.word	0x42470000
 8026ed0:	42470e80 	.word	0x42470e80
 8026ed4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026ed8:	f7fd fc14 	bl	8024704 <HAL_GetTick>
 8026edc:	4602      	mov	r2, r0
 8026ede:	693b      	ldr	r3, [r7, #16]
 8026ee0:	1ad3      	subs	r3, r2, r3
 8026ee2:	2b02      	cmp	r3, #2
 8026ee4:	d901      	bls.n	8026eea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8026ee6:	2303      	movs	r3, #3
 8026ee8:	e106      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026eea:	4b85      	ldr	r3, [pc, #532]	; (8027100 <HAL_RCC_OscConfig+0x4e4>)
 8026eec:	681b      	ldr	r3, [r3, #0]
 8026eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	d0f0      	beq.n	8026ed8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026ef6:	687b      	ldr	r3, [r7, #4]
 8026ef8:	689b      	ldr	r3, [r3, #8]
 8026efa:	2b01      	cmp	r3, #1
 8026efc:	d106      	bne.n	8026f0c <HAL_RCC_OscConfig+0x2f0>
 8026efe:	4b81      	ldr	r3, [pc, #516]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f02:	4a80      	ldr	r2, [pc, #512]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f04:	f043 0301 	orr.w	r3, r3, #1
 8026f08:	6713      	str	r3, [r2, #112]	; 0x70
 8026f0a:	e01c      	b.n	8026f46 <HAL_RCC_OscConfig+0x32a>
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	689b      	ldr	r3, [r3, #8]
 8026f10:	2b05      	cmp	r3, #5
 8026f12:	d10c      	bne.n	8026f2e <HAL_RCC_OscConfig+0x312>
 8026f14:	4b7b      	ldr	r3, [pc, #492]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f18:	4a7a      	ldr	r2, [pc, #488]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f1a:	f043 0304 	orr.w	r3, r3, #4
 8026f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8026f20:	4b78      	ldr	r3, [pc, #480]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f24:	4a77      	ldr	r2, [pc, #476]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f26:	f043 0301 	orr.w	r3, r3, #1
 8026f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8026f2c:	e00b      	b.n	8026f46 <HAL_RCC_OscConfig+0x32a>
 8026f2e:	4b75      	ldr	r3, [pc, #468]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f32:	4a74      	ldr	r2, [pc, #464]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f34:	f023 0301 	bic.w	r3, r3, #1
 8026f38:	6713      	str	r3, [r2, #112]	; 0x70
 8026f3a:	4b72      	ldr	r3, [pc, #456]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f3e:	4a71      	ldr	r2, [pc, #452]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f40:	f023 0304 	bic.w	r3, r3, #4
 8026f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026f46:	687b      	ldr	r3, [r7, #4]
 8026f48:	689b      	ldr	r3, [r3, #8]
 8026f4a:	2b00      	cmp	r3, #0
 8026f4c:	d015      	beq.n	8026f7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f4e:	f7fd fbd9 	bl	8024704 <HAL_GetTick>
 8026f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f54:	e00a      	b.n	8026f6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f56:	f7fd fbd5 	bl	8024704 <HAL_GetTick>
 8026f5a:	4602      	mov	r2, r0
 8026f5c:	693b      	ldr	r3, [r7, #16]
 8026f5e:	1ad3      	subs	r3, r2, r3
 8026f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f64:	4293      	cmp	r3, r2
 8026f66:	d901      	bls.n	8026f6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8026f68:	2303      	movs	r3, #3
 8026f6a:	e0c5      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f6c:	4b65      	ldr	r3, [pc, #404]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f70:	f003 0302 	and.w	r3, r3, #2
 8026f74:	2b00      	cmp	r3, #0
 8026f76:	d0ee      	beq.n	8026f56 <HAL_RCC_OscConfig+0x33a>
 8026f78:	e014      	b.n	8026fa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026f7a:	f7fd fbc3 	bl	8024704 <HAL_GetTick>
 8026f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f80:	e00a      	b.n	8026f98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f82:	f7fd fbbf 	bl	8024704 <HAL_GetTick>
 8026f86:	4602      	mov	r2, r0
 8026f88:	693b      	ldr	r3, [r7, #16]
 8026f8a:	1ad3      	subs	r3, r2, r3
 8026f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f90:	4293      	cmp	r3, r2
 8026f92:	d901      	bls.n	8026f98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8026f94:	2303      	movs	r3, #3
 8026f96:	e0af      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f98:	4b5a      	ldr	r3, [pc, #360]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f9c:	f003 0302 	and.w	r3, r3, #2
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	d1ee      	bne.n	8026f82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026fa4:	7dfb      	ldrb	r3, [r7, #23]
 8026fa6:	2b01      	cmp	r3, #1
 8026fa8:	d105      	bne.n	8026fb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026faa:	4b56      	ldr	r3, [pc, #344]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fae:	4a55      	ldr	r2, [pc, #340]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026fb6:	687b      	ldr	r3, [r7, #4]
 8026fb8:	699b      	ldr	r3, [r3, #24]
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	f000 809b 	beq.w	80270f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026fc0:	4b50      	ldr	r3, [pc, #320]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026fc2:	689b      	ldr	r3, [r3, #8]
 8026fc4:	f003 030c 	and.w	r3, r3, #12
 8026fc8:	2b08      	cmp	r3, #8
 8026fca:	d05c      	beq.n	8027086 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026fcc:	687b      	ldr	r3, [r7, #4]
 8026fce:	699b      	ldr	r3, [r3, #24]
 8026fd0:	2b02      	cmp	r3, #2
 8026fd2:	d141      	bne.n	8027058 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026fd4:	4b4c      	ldr	r3, [pc, #304]	; (8027108 <HAL_RCC_OscConfig+0x4ec>)
 8026fd6:	2200      	movs	r2, #0
 8026fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fda:	f7fd fb93 	bl	8024704 <HAL_GetTick>
 8026fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026fe0:	e008      	b.n	8026ff4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026fe2:	f7fd fb8f 	bl	8024704 <HAL_GetTick>
 8026fe6:	4602      	mov	r2, r0
 8026fe8:	693b      	ldr	r3, [r7, #16]
 8026fea:	1ad3      	subs	r3, r2, r3
 8026fec:	2b02      	cmp	r3, #2
 8026fee:	d901      	bls.n	8026ff4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8026ff0:	2303      	movs	r3, #3
 8026ff2:	e081      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026ff4:	4b43      	ldr	r3, [pc, #268]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	d1f0      	bne.n	8026fe2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027000:	687b      	ldr	r3, [r7, #4]
 8027002:	69da      	ldr	r2, [r3, #28]
 8027004:	687b      	ldr	r3, [r7, #4]
 8027006:	6a1b      	ldr	r3, [r3, #32]
 8027008:	431a      	orrs	r2, r3
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802700e:	019b      	lsls	r3, r3, #6
 8027010:	431a      	orrs	r2, r3
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027016:	085b      	lsrs	r3, r3, #1
 8027018:	3b01      	subs	r3, #1
 802701a:	041b      	lsls	r3, r3, #16
 802701c:	431a      	orrs	r2, r3
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027022:	061b      	lsls	r3, r3, #24
 8027024:	4937      	ldr	r1, [pc, #220]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8027026:	4313      	orrs	r3, r2
 8027028:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802702a:	4b37      	ldr	r3, [pc, #220]	; (8027108 <HAL_RCC_OscConfig+0x4ec>)
 802702c:	2201      	movs	r2, #1
 802702e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027030:	f7fd fb68 	bl	8024704 <HAL_GetTick>
 8027034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027036:	e008      	b.n	802704a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027038:	f7fd fb64 	bl	8024704 <HAL_GetTick>
 802703c:	4602      	mov	r2, r0
 802703e:	693b      	ldr	r3, [r7, #16]
 8027040:	1ad3      	subs	r3, r2, r3
 8027042:	2b02      	cmp	r3, #2
 8027044:	d901      	bls.n	802704a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8027046:	2303      	movs	r3, #3
 8027048:	e056      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802704a:	4b2e      	ldr	r3, [pc, #184]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 802704c:	681b      	ldr	r3, [r3, #0]
 802704e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027052:	2b00      	cmp	r3, #0
 8027054:	d0f0      	beq.n	8027038 <HAL_RCC_OscConfig+0x41c>
 8027056:	e04e      	b.n	80270f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027058:	4b2b      	ldr	r3, [pc, #172]	; (8027108 <HAL_RCC_OscConfig+0x4ec>)
 802705a:	2200      	movs	r2, #0
 802705c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802705e:	f7fd fb51 	bl	8024704 <HAL_GetTick>
 8027062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027064:	e008      	b.n	8027078 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027066:	f7fd fb4d 	bl	8024704 <HAL_GetTick>
 802706a:	4602      	mov	r2, r0
 802706c:	693b      	ldr	r3, [r7, #16]
 802706e:	1ad3      	subs	r3, r2, r3
 8027070:	2b02      	cmp	r3, #2
 8027072:	d901      	bls.n	8027078 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8027074:	2303      	movs	r3, #3
 8027076:	e03f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027078:	4b22      	ldr	r3, [pc, #136]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 802707a:	681b      	ldr	r3, [r3, #0]
 802707c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027080:	2b00      	cmp	r3, #0
 8027082:	d1f0      	bne.n	8027066 <HAL_RCC_OscConfig+0x44a>
 8027084:	e037      	b.n	80270f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	699b      	ldr	r3, [r3, #24]
 802708a:	2b01      	cmp	r3, #1
 802708c:	d101      	bne.n	8027092 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802708e:	2301      	movs	r3, #1
 8027090:	e032      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027092:	4b1c      	ldr	r3, [pc, #112]	; (8027104 <HAL_RCC_OscConfig+0x4e8>)
 8027094:	685b      	ldr	r3, [r3, #4]
 8027096:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	699b      	ldr	r3, [r3, #24]
 802709c:	2b01      	cmp	r3, #1
 802709e:	d028      	beq.n	80270f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270a0:	68fb      	ldr	r3, [r7, #12]
 80270a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80270aa:	429a      	cmp	r2, r3
 80270ac:	d121      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80270ae:	68fb      	ldr	r3, [r7, #12]
 80270b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270b8:	429a      	cmp	r2, r3
 80270ba:	d11a      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80270bc:	68fa      	ldr	r2, [r7, #12]
 80270be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80270c2:	4013      	ands	r3, r2
 80270c4:	687a      	ldr	r2, [r7, #4]
 80270c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80270c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80270ca:	4293      	cmp	r3, r2
 80270cc:	d111      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80270ce:	68fb      	ldr	r3, [r7, #12]
 80270d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80270d4:	687b      	ldr	r3, [r7, #4]
 80270d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80270d8:	085b      	lsrs	r3, r3, #1
 80270da:	3b01      	subs	r3, #1
 80270dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80270de:	429a      	cmp	r2, r3
 80270e0:	d107      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80270e2:	68fb      	ldr	r3, [r7, #12]
 80270e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80270ee:	429a      	cmp	r2, r3
 80270f0:	d001      	beq.n	80270f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80270f2:	2301      	movs	r3, #1
 80270f4:	e000      	b.n	80270f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80270f6:	2300      	movs	r3, #0
}
 80270f8:	4618      	mov	r0, r3
 80270fa:	3718      	adds	r7, #24
 80270fc:	46bd      	mov	sp, r7
 80270fe:	bd80      	pop	{r7, pc}
 8027100:	40007000 	.word	0x40007000
 8027104:	40023800 	.word	0x40023800
 8027108:	42470060 	.word	0x42470060

0802710c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802710c:	b580      	push	{r7, lr}
 802710e:	b084      	sub	sp, #16
 8027110:	af00      	add	r7, sp, #0
 8027112:	6078      	str	r0, [r7, #4]
 8027114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	2b00      	cmp	r3, #0
 802711a:	d101      	bne.n	8027120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802711c:	2301      	movs	r3, #1
 802711e:	e0cc      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027120:	4b68      	ldr	r3, [pc, #416]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	f003 0307 	and.w	r3, r3, #7
 8027128:	683a      	ldr	r2, [r7, #0]
 802712a:	429a      	cmp	r2, r3
 802712c:	d90c      	bls.n	8027148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802712e:	4b65      	ldr	r3, [pc, #404]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 8027130:	683a      	ldr	r2, [r7, #0]
 8027132:	b2d2      	uxtb	r2, r2
 8027134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027136:	4b63      	ldr	r3, [pc, #396]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 8027138:	681b      	ldr	r3, [r3, #0]
 802713a:	f003 0307 	and.w	r3, r3, #7
 802713e:	683a      	ldr	r2, [r7, #0]
 8027140:	429a      	cmp	r2, r3
 8027142:	d001      	beq.n	8027148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8027144:	2301      	movs	r3, #1
 8027146:	e0b8      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027148:	687b      	ldr	r3, [r7, #4]
 802714a:	681b      	ldr	r3, [r3, #0]
 802714c:	f003 0302 	and.w	r3, r3, #2
 8027150:	2b00      	cmp	r3, #0
 8027152:	d020      	beq.n	8027196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027154:	687b      	ldr	r3, [r7, #4]
 8027156:	681b      	ldr	r3, [r3, #0]
 8027158:	f003 0304 	and.w	r3, r3, #4
 802715c:	2b00      	cmp	r3, #0
 802715e:	d005      	beq.n	802716c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027160:	4b59      	ldr	r3, [pc, #356]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027162:	689b      	ldr	r3, [r3, #8]
 8027164:	4a58      	ldr	r2, [pc, #352]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802716a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	f003 0308 	and.w	r3, r3, #8
 8027174:	2b00      	cmp	r3, #0
 8027176:	d005      	beq.n	8027184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027178:	4b53      	ldr	r3, [pc, #332]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802717a:	689b      	ldr	r3, [r3, #8]
 802717c:	4a52      	ldr	r2, [pc, #328]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802717e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8027182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027184:	4b50      	ldr	r3, [pc, #320]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027186:	689b      	ldr	r3, [r3, #8]
 8027188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	689b      	ldr	r3, [r3, #8]
 8027190:	494d      	ldr	r1, [pc, #308]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027192:	4313      	orrs	r3, r2
 8027194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027196:	687b      	ldr	r3, [r7, #4]
 8027198:	681b      	ldr	r3, [r3, #0]
 802719a:	f003 0301 	and.w	r3, r3, #1
 802719e:	2b00      	cmp	r3, #0
 80271a0:	d044      	beq.n	802722c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80271a2:	687b      	ldr	r3, [r7, #4]
 80271a4:	685b      	ldr	r3, [r3, #4]
 80271a6:	2b01      	cmp	r3, #1
 80271a8:	d107      	bne.n	80271ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80271aa:	4b47      	ldr	r3, [pc, #284]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 80271ac:	681b      	ldr	r3, [r3, #0]
 80271ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80271b2:	2b00      	cmp	r3, #0
 80271b4:	d119      	bne.n	80271ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271b6:	2301      	movs	r3, #1
 80271b8:	e07f      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	685b      	ldr	r3, [r3, #4]
 80271be:	2b02      	cmp	r3, #2
 80271c0:	d003      	beq.n	80271ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271c6:	2b03      	cmp	r3, #3
 80271c8:	d107      	bne.n	80271da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80271ca:	4b3f      	ldr	r3, [pc, #252]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 80271cc:	681b      	ldr	r3, [r3, #0]
 80271ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80271d2:	2b00      	cmp	r3, #0
 80271d4:	d109      	bne.n	80271ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271d6:	2301      	movs	r3, #1
 80271d8:	e06f      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80271da:	4b3b      	ldr	r3, [pc, #236]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 80271dc:	681b      	ldr	r3, [r3, #0]
 80271de:	f003 0302 	and.w	r3, r3, #2
 80271e2:	2b00      	cmp	r3, #0
 80271e4:	d101      	bne.n	80271ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271e6:	2301      	movs	r3, #1
 80271e8:	e067      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80271ea:	4b37      	ldr	r3, [pc, #220]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 80271ec:	689b      	ldr	r3, [r3, #8]
 80271ee:	f023 0203 	bic.w	r2, r3, #3
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	685b      	ldr	r3, [r3, #4]
 80271f6:	4934      	ldr	r1, [pc, #208]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 80271f8:	4313      	orrs	r3, r2
 80271fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80271fc:	f7fd fa82 	bl	8024704 <HAL_GetTick>
 8027200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027202:	e00a      	b.n	802721a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027204:	f7fd fa7e 	bl	8024704 <HAL_GetTick>
 8027208:	4602      	mov	r2, r0
 802720a:	68fb      	ldr	r3, [r7, #12]
 802720c:	1ad3      	subs	r3, r2, r3
 802720e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027212:	4293      	cmp	r3, r2
 8027214:	d901      	bls.n	802721a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8027216:	2303      	movs	r3, #3
 8027218:	e04f      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802721a:	4b2b      	ldr	r3, [pc, #172]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802721c:	689b      	ldr	r3, [r3, #8]
 802721e:	f003 020c 	and.w	r2, r3, #12
 8027222:	687b      	ldr	r3, [r7, #4]
 8027224:	685b      	ldr	r3, [r3, #4]
 8027226:	009b      	lsls	r3, r3, #2
 8027228:	429a      	cmp	r2, r3
 802722a:	d1eb      	bne.n	8027204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802722c:	4b25      	ldr	r3, [pc, #148]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 802722e:	681b      	ldr	r3, [r3, #0]
 8027230:	f003 0307 	and.w	r3, r3, #7
 8027234:	683a      	ldr	r2, [r7, #0]
 8027236:	429a      	cmp	r2, r3
 8027238:	d20c      	bcs.n	8027254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802723a:	4b22      	ldr	r3, [pc, #136]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 802723c:	683a      	ldr	r2, [r7, #0]
 802723e:	b2d2      	uxtb	r2, r2
 8027240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027242:	4b20      	ldr	r3, [pc, #128]	; (80272c4 <HAL_RCC_ClockConfig+0x1b8>)
 8027244:	681b      	ldr	r3, [r3, #0]
 8027246:	f003 0307 	and.w	r3, r3, #7
 802724a:	683a      	ldr	r2, [r7, #0]
 802724c:	429a      	cmp	r2, r3
 802724e:	d001      	beq.n	8027254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027250:	2301      	movs	r3, #1
 8027252:	e032      	b.n	80272ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027254:	687b      	ldr	r3, [r7, #4]
 8027256:	681b      	ldr	r3, [r3, #0]
 8027258:	f003 0304 	and.w	r3, r3, #4
 802725c:	2b00      	cmp	r3, #0
 802725e:	d008      	beq.n	8027272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027260:	4b19      	ldr	r3, [pc, #100]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027262:	689b      	ldr	r3, [r3, #8]
 8027264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027268:	687b      	ldr	r3, [r7, #4]
 802726a:	68db      	ldr	r3, [r3, #12]
 802726c:	4916      	ldr	r1, [pc, #88]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802726e:	4313      	orrs	r3, r2
 8027270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027272:	687b      	ldr	r3, [r7, #4]
 8027274:	681b      	ldr	r3, [r3, #0]
 8027276:	f003 0308 	and.w	r3, r3, #8
 802727a:	2b00      	cmp	r3, #0
 802727c:	d009      	beq.n	8027292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802727e:	4b12      	ldr	r3, [pc, #72]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 8027280:	689b      	ldr	r3, [r3, #8]
 8027282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027286:	687b      	ldr	r3, [r7, #4]
 8027288:	691b      	ldr	r3, [r3, #16]
 802728a:	00db      	lsls	r3, r3, #3
 802728c:	490e      	ldr	r1, [pc, #56]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802728e:	4313      	orrs	r3, r2
 8027290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027292:	f000 f821 	bl	80272d8 <HAL_RCC_GetSysClockFreq>
 8027296:	4602      	mov	r2, r0
 8027298:	4b0b      	ldr	r3, [pc, #44]	; (80272c8 <HAL_RCC_ClockConfig+0x1bc>)
 802729a:	689b      	ldr	r3, [r3, #8]
 802729c:	091b      	lsrs	r3, r3, #4
 802729e:	f003 030f 	and.w	r3, r3, #15
 80272a2:	490a      	ldr	r1, [pc, #40]	; (80272cc <HAL_RCC_ClockConfig+0x1c0>)
 80272a4:	5ccb      	ldrb	r3, [r1, r3]
 80272a6:	fa22 f303 	lsr.w	r3, r2, r3
 80272aa:	4a09      	ldr	r2, [pc, #36]	; (80272d0 <HAL_RCC_ClockConfig+0x1c4>)
 80272ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80272ae:	4b09      	ldr	r3, [pc, #36]	; (80272d4 <HAL_RCC_ClockConfig+0x1c8>)
 80272b0:	681b      	ldr	r3, [r3, #0]
 80272b2:	4618      	mov	r0, r3
 80272b4:	f7f0 fb6a 	bl	801798c <HAL_InitTick>

  return HAL_OK;
 80272b8:	2300      	movs	r3, #0
}
 80272ba:	4618      	mov	r0, r3
 80272bc:	3710      	adds	r7, #16
 80272be:	46bd      	mov	sp, r7
 80272c0:	bd80      	pop	{r7, pc}
 80272c2:	bf00      	nop
 80272c4:	40023c00 	.word	0x40023c00
 80272c8:	40023800 	.word	0x40023800
 80272cc:	0802f9ec 	.word	0x0802f9ec
 80272d0:	20000084 	.word	0x20000084
 80272d4:	20001438 	.word	0x20001438

080272d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80272d8:	b5b0      	push	{r4, r5, r7, lr}
 80272da:	b084      	sub	sp, #16
 80272dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80272de:	2100      	movs	r1, #0
 80272e0:	6079      	str	r1, [r7, #4]
 80272e2:	2100      	movs	r1, #0
 80272e4:	60f9      	str	r1, [r7, #12]
 80272e6:	2100      	movs	r1, #0
 80272e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80272ea:	2100      	movs	r1, #0
 80272ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80272ee:	4952      	ldr	r1, [pc, #328]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 80272f0:	6889      	ldr	r1, [r1, #8]
 80272f2:	f001 010c 	and.w	r1, r1, #12
 80272f6:	2908      	cmp	r1, #8
 80272f8:	d00d      	beq.n	8027316 <HAL_RCC_GetSysClockFreq+0x3e>
 80272fa:	2908      	cmp	r1, #8
 80272fc:	f200 8094 	bhi.w	8027428 <HAL_RCC_GetSysClockFreq+0x150>
 8027300:	2900      	cmp	r1, #0
 8027302:	d002      	beq.n	802730a <HAL_RCC_GetSysClockFreq+0x32>
 8027304:	2904      	cmp	r1, #4
 8027306:	d003      	beq.n	8027310 <HAL_RCC_GetSysClockFreq+0x38>
 8027308:	e08e      	b.n	8027428 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802730a:	4b4c      	ldr	r3, [pc, #304]	; (802743c <HAL_RCC_GetSysClockFreq+0x164>)
 802730c:	60bb      	str	r3, [r7, #8]
       break;
 802730e:	e08e      	b.n	802742e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027310:	4b4b      	ldr	r3, [pc, #300]	; (8027440 <HAL_RCC_GetSysClockFreq+0x168>)
 8027312:	60bb      	str	r3, [r7, #8]
      break;
 8027314:	e08b      	b.n	802742e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027316:	4948      	ldr	r1, [pc, #288]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 8027318:	6849      	ldr	r1, [r1, #4]
 802731a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 802731e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027320:	4945      	ldr	r1, [pc, #276]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 8027322:	6849      	ldr	r1, [r1, #4]
 8027324:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8027328:	2900      	cmp	r1, #0
 802732a:	d024      	beq.n	8027376 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802732c:	4942      	ldr	r1, [pc, #264]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 802732e:	6849      	ldr	r1, [r1, #4]
 8027330:	0989      	lsrs	r1, r1, #6
 8027332:	4608      	mov	r0, r1
 8027334:	f04f 0100 	mov.w	r1, #0
 8027338:	f240 14ff 	movw	r4, #511	; 0x1ff
 802733c:	f04f 0500 	mov.w	r5, #0
 8027340:	ea00 0204 	and.w	r2, r0, r4
 8027344:	ea01 0305 	and.w	r3, r1, r5
 8027348:	493d      	ldr	r1, [pc, #244]	; (8027440 <HAL_RCC_GetSysClockFreq+0x168>)
 802734a:	fb01 f003 	mul.w	r0, r1, r3
 802734e:	2100      	movs	r1, #0
 8027350:	fb01 f102 	mul.w	r1, r1, r2
 8027354:	1844      	adds	r4, r0, r1
 8027356:	493a      	ldr	r1, [pc, #232]	; (8027440 <HAL_RCC_GetSysClockFreq+0x168>)
 8027358:	fba2 0101 	umull	r0, r1, r2, r1
 802735c:	1863      	adds	r3, r4, r1
 802735e:	4619      	mov	r1, r3
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	461a      	mov	r2, r3
 8027364:	f04f 0300 	mov.w	r3, #0
 8027368:	f7d9 fc80 	bl	8000c6c <__aeabi_uldivmod>
 802736c:	4602      	mov	r2, r0
 802736e:	460b      	mov	r3, r1
 8027370:	4613      	mov	r3, r2
 8027372:	60fb      	str	r3, [r7, #12]
 8027374:	e04a      	b.n	802740c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027376:	4b30      	ldr	r3, [pc, #192]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 8027378:	685b      	ldr	r3, [r3, #4]
 802737a:	099b      	lsrs	r3, r3, #6
 802737c:	461a      	mov	r2, r3
 802737e:	f04f 0300 	mov.w	r3, #0
 8027382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8027386:	f04f 0100 	mov.w	r1, #0
 802738a:	ea02 0400 	and.w	r4, r2, r0
 802738e:	ea03 0501 	and.w	r5, r3, r1
 8027392:	4620      	mov	r0, r4
 8027394:	4629      	mov	r1, r5
 8027396:	f04f 0200 	mov.w	r2, #0
 802739a:	f04f 0300 	mov.w	r3, #0
 802739e:	014b      	lsls	r3, r1, #5
 80273a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80273a4:	0142      	lsls	r2, r0, #5
 80273a6:	4610      	mov	r0, r2
 80273a8:	4619      	mov	r1, r3
 80273aa:	1b00      	subs	r0, r0, r4
 80273ac:	eb61 0105 	sbc.w	r1, r1, r5
 80273b0:	f04f 0200 	mov.w	r2, #0
 80273b4:	f04f 0300 	mov.w	r3, #0
 80273b8:	018b      	lsls	r3, r1, #6
 80273ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80273be:	0182      	lsls	r2, r0, #6
 80273c0:	1a12      	subs	r2, r2, r0
 80273c2:	eb63 0301 	sbc.w	r3, r3, r1
 80273c6:	f04f 0000 	mov.w	r0, #0
 80273ca:	f04f 0100 	mov.w	r1, #0
 80273ce:	00d9      	lsls	r1, r3, #3
 80273d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80273d4:	00d0      	lsls	r0, r2, #3
 80273d6:	4602      	mov	r2, r0
 80273d8:	460b      	mov	r3, r1
 80273da:	1912      	adds	r2, r2, r4
 80273dc:	eb45 0303 	adc.w	r3, r5, r3
 80273e0:	f04f 0000 	mov.w	r0, #0
 80273e4:	f04f 0100 	mov.w	r1, #0
 80273e8:	0299      	lsls	r1, r3, #10
 80273ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80273ee:	0290      	lsls	r0, r2, #10
 80273f0:	4602      	mov	r2, r0
 80273f2:	460b      	mov	r3, r1
 80273f4:	4610      	mov	r0, r2
 80273f6:	4619      	mov	r1, r3
 80273f8:	687b      	ldr	r3, [r7, #4]
 80273fa:	461a      	mov	r2, r3
 80273fc:	f04f 0300 	mov.w	r3, #0
 8027400:	f7d9 fc34 	bl	8000c6c <__aeabi_uldivmod>
 8027404:	4602      	mov	r2, r0
 8027406:	460b      	mov	r3, r1
 8027408:	4613      	mov	r3, r2
 802740a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802740c:	4b0a      	ldr	r3, [pc, #40]	; (8027438 <HAL_RCC_GetSysClockFreq+0x160>)
 802740e:	685b      	ldr	r3, [r3, #4]
 8027410:	0c1b      	lsrs	r3, r3, #16
 8027412:	f003 0303 	and.w	r3, r3, #3
 8027416:	3301      	adds	r3, #1
 8027418:	005b      	lsls	r3, r3, #1
 802741a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 802741c:	68fa      	ldr	r2, [r7, #12]
 802741e:	683b      	ldr	r3, [r7, #0]
 8027420:	fbb2 f3f3 	udiv	r3, r2, r3
 8027424:	60bb      	str	r3, [r7, #8]
      break;
 8027426:	e002      	b.n	802742e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027428:	4b04      	ldr	r3, [pc, #16]	; (802743c <HAL_RCC_GetSysClockFreq+0x164>)
 802742a:	60bb      	str	r3, [r7, #8]
      break;
 802742c:	bf00      	nop
    }
  }
  return sysclockfreq;
 802742e:	68bb      	ldr	r3, [r7, #8]
}
 8027430:	4618      	mov	r0, r3
 8027432:	3710      	adds	r7, #16
 8027434:	46bd      	mov	sp, r7
 8027436:	bdb0      	pop	{r4, r5, r7, pc}
 8027438:	40023800 	.word	0x40023800
 802743c:	00f42400 	.word	0x00f42400
 8027440:	017d7840 	.word	0x017d7840

08027444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027444:	b480      	push	{r7}
 8027446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027448:	4b03      	ldr	r3, [pc, #12]	; (8027458 <HAL_RCC_GetHCLKFreq+0x14>)
 802744a:	681b      	ldr	r3, [r3, #0]
}
 802744c:	4618      	mov	r0, r3
 802744e:	46bd      	mov	sp, r7
 8027450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027454:	4770      	bx	lr
 8027456:	bf00      	nop
 8027458:	20000084 	.word	0x20000084

0802745c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802745c:	b580      	push	{r7, lr}
 802745e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027460:	f7ff fff0 	bl	8027444 <HAL_RCC_GetHCLKFreq>
 8027464:	4602      	mov	r2, r0
 8027466:	4b05      	ldr	r3, [pc, #20]	; (802747c <HAL_RCC_GetPCLK1Freq+0x20>)
 8027468:	689b      	ldr	r3, [r3, #8]
 802746a:	0a9b      	lsrs	r3, r3, #10
 802746c:	f003 0307 	and.w	r3, r3, #7
 8027470:	4903      	ldr	r1, [pc, #12]	; (8027480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027472:	5ccb      	ldrb	r3, [r1, r3]
 8027474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027478:	4618      	mov	r0, r3
 802747a:	bd80      	pop	{r7, pc}
 802747c:	40023800 	.word	0x40023800
 8027480:	0802f9fc 	.word	0x0802f9fc

08027484 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027484:	b480      	push	{r7}
 8027486:	b083      	sub	sp, #12
 8027488:	af00      	add	r7, sp, #0
 802748a:	6078      	str	r0, [r7, #4]
 802748c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802748e:	687b      	ldr	r3, [r7, #4]
 8027490:	220f      	movs	r2, #15
 8027492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027494:	4b12      	ldr	r3, [pc, #72]	; (80274e0 <HAL_RCC_GetClockConfig+0x5c>)
 8027496:	689b      	ldr	r3, [r3, #8]
 8027498:	f003 0203 	and.w	r2, r3, #3
 802749c:	687b      	ldr	r3, [r7, #4]
 802749e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80274a0:	4b0f      	ldr	r3, [pc, #60]	; (80274e0 <HAL_RCC_GetClockConfig+0x5c>)
 80274a2:	689b      	ldr	r3, [r3, #8]
 80274a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80274ac:	4b0c      	ldr	r3, [pc, #48]	; (80274e0 <HAL_RCC_GetClockConfig+0x5c>)
 80274ae:	689b      	ldr	r3, [r3, #8]
 80274b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80274b4:	687b      	ldr	r3, [r7, #4]
 80274b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80274b8:	4b09      	ldr	r3, [pc, #36]	; (80274e0 <HAL_RCC_GetClockConfig+0x5c>)
 80274ba:	689b      	ldr	r3, [r3, #8]
 80274bc:	08db      	lsrs	r3, r3, #3
 80274be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80274c2:	687b      	ldr	r3, [r7, #4]
 80274c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80274c6:	4b07      	ldr	r3, [pc, #28]	; (80274e4 <HAL_RCC_GetClockConfig+0x60>)
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	f003 0207 	and.w	r2, r3, #7
 80274ce:	683b      	ldr	r3, [r7, #0]
 80274d0:	601a      	str	r2, [r3, #0]
}
 80274d2:	bf00      	nop
 80274d4:	370c      	adds	r7, #12
 80274d6:	46bd      	mov	sp, r7
 80274d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274dc:	4770      	bx	lr
 80274de:	bf00      	nop
 80274e0:	40023800 	.word	0x40023800
 80274e4:	40023c00 	.word	0x40023c00

080274e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80274e8:	b580      	push	{r7, lr}
 80274ea:	b082      	sub	sp, #8
 80274ec:	af00      	add	r7, sp, #0
 80274ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80274f0:	687b      	ldr	r3, [r7, #4]
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	d101      	bne.n	80274fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80274f6:	2301      	movs	r3, #1
 80274f8:	e07b      	b.n	80275f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80274fe:	2b00      	cmp	r3, #0
 8027500:	d108      	bne.n	8027514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	685b      	ldr	r3, [r3, #4]
 8027506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802750a:	d009      	beq.n	8027520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	2200      	movs	r2, #0
 8027510:	61da      	str	r2, [r3, #28]
 8027512:	e005      	b.n	8027520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8027514:	687b      	ldr	r3, [r7, #4]
 8027516:	2200      	movs	r2, #0
 8027518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802751a:	687b      	ldr	r3, [r7, #4]
 802751c:	2200      	movs	r2, #0
 802751e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027520:	687b      	ldr	r3, [r7, #4]
 8027522:	2200      	movs	r2, #0
 8027524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8027526:	687b      	ldr	r3, [r7, #4]
 8027528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802752c:	b2db      	uxtb	r3, r3
 802752e:	2b00      	cmp	r3, #0
 8027530:	d106      	bne.n	8027540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	2200      	movs	r2, #0
 8027536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802753a:	6878      	ldr	r0, [r7, #4]
 802753c:	f7f0 f992 	bl	8017864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	2202      	movs	r2, #2
 8027544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	681b      	ldr	r3, [r3, #0]
 802754c:	681a      	ldr	r2, [r3, #0]
 802754e:	687b      	ldr	r3, [r7, #4]
 8027550:	681b      	ldr	r3, [r3, #0]
 8027552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8027558:	687b      	ldr	r3, [r7, #4]
 802755a:	685b      	ldr	r3, [r3, #4]
 802755c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8027560:	687b      	ldr	r3, [r7, #4]
 8027562:	689b      	ldr	r3, [r3, #8]
 8027564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8027568:	431a      	orrs	r2, r3
 802756a:	687b      	ldr	r3, [r7, #4]
 802756c:	68db      	ldr	r3, [r3, #12]
 802756e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027572:	431a      	orrs	r2, r3
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	691b      	ldr	r3, [r3, #16]
 8027578:	f003 0302 	and.w	r3, r3, #2
 802757c:	431a      	orrs	r2, r3
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	695b      	ldr	r3, [r3, #20]
 8027582:	f003 0301 	and.w	r3, r3, #1
 8027586:	431a      	orrs	r2, r3
 8027588:	687b      	ldr	r3, [r7, #4]
 802758a:	699b      	ldr	r3, [r3, #24]
 802758c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027590:	431a      	orrs	r2, r3
 8027592:	687b      	ldr	r3, [r7, #4]
 8027594:	69db      	ldr	r3, [r3, #28]
 8027596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802759a:	431a      	orrs	r2, r3
 802759c:	687b      	ldr	r3, [r7, #4]
 802759e:	6a1b      	ldr	r3, [r3, #32]
 80275a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80275a4:	ea42 0103 	orr.w	r1, r2, r3
 80275a8:	687b      	ldr	r3, [r7, #4]
 80275aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80275ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80275b0:	687b      	ldr	r3, [r7, #4]
 80275b2:	681b      	ldr	r3, [r3, #0]
 80275b4:	430a      	orrs	r2, r1
 80275b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80275b8:	687b      	ldr	r3, [r7, #4]
 80275ba:	699b      	ldr	r3, [r3, #24]
 80275bc:	0c1b      	lsrs	r3, r3, #16
 80275be:	f003 0104 	and.w	r1, r3, #4
 80275c2:	687b      	ldr	r3, [r7, #4]
 80275c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275c6:	f003 0210 	and.w	r2, r3, #16
 80275ca:	687b      	ldr	r3, [r7, #4]
 80275cc:	681b      	ldr	r3, [r3, #0]
 80275ce:	430a      	orrs	r2, r1
 80275d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80275d2:	687b      	ldr	r3, [r7, #4]
 80275d4:	681b      	ldr	r3, [r3, #0]
 80275d6:	69da      	ldr	r2, [r3, #28]
 80275d8:	687b      	ldr	r3, [r7, #4]
 80275da:	681b      	ldr	r3, [r3, #0]
 80275dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80275e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80275e2:	687b      	ldr	r3, [r7, #4]
 80275e4:	2200      	movs	r2, #0
 80275e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	2201      	movs	r2, #1
 80275ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80275f0:	2300      	movs	r3, #0
}
 80275f2:	4618      	mov	r0, r3
 80275f4:	3708      	adds	r7, #8
 80275f6:	46bd      	mov	sp, r7
 80275f8:	bd80      	pop	{r7, pc}

080275fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80275fa:	b580      	push	{r7, lr}
 80275fc:	b088      	sub	sp, #32
 80275fe:	af00      	add	r7, sp, #0
 8027600:	60f8      	str	r0, [r7, #12]
 8027602:	60b9      	str	r1, [r7, #8]
 8027604:	603b      	str	r3, [r7, #0]
 8027606:	4613      	mov	r3, r2
 8027608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802760a:	2300      	movs	r3, #0
 802760c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802760e:	68fb      	ldr	r3, [r7, #12]
 8027610:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027614:	2b01      	cmp	r3, #1
 8027616:	d101      	bne.n	802761c <HAL_SPI_Transmit+0x22>
 8027618:	2302      	movs	r3, #2
 802761a:	e126      	b.n	802786a <HAL_SPI_Transmit+0x270>
 802761c:	68fb      	ldr	r3, [r7, #12]
 802761e:	2201      	movs	r2, #1
 8027620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027624:	f7fd f86e 	bl	8024704 <HAL_GetTick>
 8027628:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802762a:	88fb      	ldrh	r3, [r7, #6]
 802762c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802762e:	68fb      	ldr	r3, [r7, #12]
 8027630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027634:	b2db      	uxtb	r3, r3
 8027636:	2b01      	cmp	r3, #1
 8027638:	d002      	beq.n	8027640 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802763a:	2302      	movs	r3, #2
 802763c:	77fb      	strb	r3, [r7, #31]
    goto error;
 802763e:	e10b      	b.n	8027858 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8027640:	68bb      	ldr	r3, [r7, #8]
 8027642:	2b00      	cmp	r3, #0
 8027644:	d002      	beq.n	802764c <HAL_SPI_Transmit+0x52>
 8027646:	88fb      	ldrh	r3, [r7, #6]
 8027648:	2b00      	cmp	r3, #0
 802764a:	d102      	bne.n	8027652 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802764c:	2301      	movs	r3, #1
 802764e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027650:	e102      	b.n	8027858 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8027652:	68fb      	ldr	r3, [r7, #12]
 8027654:	2203      	movs	r2, #3
 8027656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802765a:	68fb      	ldr	r3, [r7, #12]
 802765c:	2200      	movs	r2, #0
 802765e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8027660:	68fb      	ldr	r3, [r7, #12]
 8027662:	68ba      	ldr	r2, [r7, #8]
 8027664:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027666:	68fb      	ldr	r3, [r7, #12]
 8027668:	88fa      	ldrh	r2, [r7, #6]
 802766a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802766c:	68fb      	ldr	r3, [r7, #12]
 802766e:	88fa      	ldrh	r2, [r7, #6]
 8027670:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8027672:	68fb      	ldr	r3, [r7, #12]
 8027674:	2200      	movs	r2, #0
 8027676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8027678:	68fb      	ldr	r3, [r7, #12]
 802767a:	2200      	movs	r2, #0
 802767c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802767e:	68fb      	ldr	r3, [r7, #12]
 8027680:	2200      	movs	r2, #0
 8027682:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8027684:	68fb      	ldr	r3, [r7, #12]
 8027686:	2200      	movs	r2, #0
 8027688:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802768a:	68fb      	ldr	r3, [r7, #12]
 802768c:	2200      	movs	r2, #0
 802768e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027690:	68fb      	ldr	r3, [r7, #12]
 8027692:	689b      	ldr	r3, [r3, #8]
 8027694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027698:	d10f      	bne.n	80276ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802769a:	68fb      	ldr	r3, [r7, #12]
 802769c:	681b      	ldr	r3, [r3, #0]
 802769e:	681a      	ldr	r2, [r3, #0]
 80276a0:	68fb      	ldr	r3, [r7, #12]
 80276a2:	681b      	ldr	r3, [r3, #0]
 80276a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80276a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80276aa:	68fb      	ldr	r3, [r7, #12]
 80276ac:	681b      	ldr	r3, [r3, #0]
 80276ae:	681a      	ldr	r2, [r3, #0]
 80276b0:	68fb      	ldr	r3, [r7, #12]
 80276b2:	681b      	ldr	r3, [r3, #0]
 80276b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80276b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80276ba:	68fb      	ldr	r3, [r7, #12]
 80276bc:	681b      	ldr	r3, [r3, #0]
 80276be:	681b      	ldr	r3, [r3, #0]
 80276c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80276c4:	2b40      	cmp	r3, #64	; 0x40
 80276c6:	d007      	beq.n	80276d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80276c8:	68fb      	ldr	r3, [r7, #12]
 80276ca:	681b      	ldr	r3, [r3, #0]
 80276cc:	681a      	ldr	r2, [r3, #0]
 80276ce:	68fb      	ldr	r3, [r7, #12]
 80276d0:	681b      	ldr	r3, [r3, #0]
 80276d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80276d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80276d8:	68fb      	ldr	r3, [r7, #12]
 80276da:	68db      	ldr	r3, [r3, #12]
 80276dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80276e0:	d14b      	bne.n	802777a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	685b      	ldr	r3, [r3, #4]
 80276e6:	2b00      	cmp	r3, #0
 80276e8:	d002      	beq.n	80276f0 <HAL_SPI_Transmit+0xf6>
 80276ea:	8afb      	ldrh	r3, [r7, #22]
 80276ec:	2b01      	cmp	r3, #1
 80276ee:	d13e      	bne.n	802776e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80276f0:	68fb      	ldr	r3, [r7, #12]
 80276f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80276f4:	881a      	ldrh	r2, [r3, #0]
 80276f6:	68fb      	ldr	r3, [r7, #12]
 80276f8:	681b      	ldr	r3, [r3, #0]
 80276fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80276fc:	68fb      	ldr	r3, [r7, #12]
 80276fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027700:	1c9a      	adds	r2, r3, #2
 8027702:	68fb      	ldr	r3, [r7, #12]
 8027704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027706:	68fb      	ldr	r3, [r7, #12]
 8027708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802770a:	b29b      	uxth	r3, r3
 802770c:	3b01      	subs	r3, #1
 802770e:	b29a      	uxth	r2, r3
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8027714:	e02b      	b.n	802776e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027716:	68fb      	ldr	r3, [r7, #12]
 8027718:	681b      	ldr	r3, [r3, #0]
 802771a:	689b      	ldr	r3, [r3, #8]
 802771c:	f003 0302 	and.w	r3, r3, #2
 8027720:	2b02      	cmp	r3, #2
 8027722:	d112      	bne.n	802774a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027724:	68fb      	ldr	r3, [r7, #12]
 8027726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027728:	881a      	ldrh	r2, [r3, #0]
 802772a:	68fb      	ldr	r3, [r7, #12]
 802772c:	681b      	ldr	r3, [r3, #0]
 802772e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027730:	68fb      	ldr	r3, [r7, #12]
 8027732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027734:	1c9a      	adds	r2, r3, #2
 8027736:	68fb      	ldr	r3, [r7, #12]
 8027738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802773a:	68fb      	ldr	r3, [r7, #12]
 802773c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802773e:	b29b      	uxth	r3, r3
 8027740:	3b01      	subs	r3, #1
 8027742:	b29a      	uxth	r2, r3
 8027744:	68fb      	ldr	r3, [r7, #12]
 8027746:	86da      	strh	r2, [r3, #54]	; 0x36
 8027748:	e011      	b.n	802776e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802774a:	f7fc ffdb 	bl	8024704 <HAL_GetTick>
 802774e:	4602      	mov	r2, r0
 8027750:	69bb      	ldr	r3, [r7, #24]
 8027752:	1ad3      	subs	r3, r2, r3
 8027754:	683a      	ldr	r2, [r7, #0]
 8027756:	429a      	cmp	r2, r3
 8027758:	d803      	bhi.n	8027762 <HAL_SPI_Transmit+0x168>
 802775a:	683b      	ldr	r3, [r7, #0]
 802775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027760:	d102      	bne.n	8027768 <HAL_SPI_Transmit+0x16e>
 8027762:	683b      	ldr	r3, [r7, #0]
 8027764:	2b00      	cmp	r3, #0
 8027766:	d102      	bne.n	802776e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027768:	2303      	movs	r3, #3
 802776a:	77fb      	strb	r3, [r7, #31]
          goto error;
 802776c:	e074      	b.n	8027858 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802776e:	68fb      	ldr	r3, [r7, #12]
 8027770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027772:	b29b      	uxth	r3, r3
 8027774:	2b00      	cmp	r3, #0
 8027776:	d1ce      	bne.n	8027716 <HAL_SPI_Transmit+0x11c>
 8027778:	e04c      	b.n	8027814 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802777a:	68fb      	ldr	r3, [r7, #12]
 802777c:	685b      	ldr	r3, [r3, #4]
 802777e:	2b00      	cmp	r3, #0
 8027780:	d002      	beq.n	8027788 <HAL_SPI_Transmit+0x18e>
 8027782:	8afb      	ldrh	r3, [r7, #22]
 8027784:	2b01      	cmp	r3, #1
 8027786:	d140      	bne.n	802780a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027788:	68fb      	ldr	r3, [r7, #12]
 802778a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802778c:	68fb      	ldr	r3, [r7, #12]
 802778e:	681b      	ldr	r3, [r3, #0]
 8027790:	330c      	adds	r3, #12
 8027792:	7812      	ldrb	r2, [r2, #0]
 8027794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027796:	68fb      	ldr	r3, [r7, #12]
 8027798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802779a:	1c5a      	adds	r2, r3, #1
 802779c:	68fb      	ldr	r3, [r7, #12]
 802779e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80277a0:	68fb      	ldr	r3, [r7, #12]
 80277a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80277a4:	b29b      	uxth	r3, r3
 80277a6:	3b01      	subs	r3, #1
 80277a8:	b29a      	uxth	r2, r3
 80277aa:	68fb      	ldr	r3, [r7, #12]
 80277ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80277ae:	e02c      	b.n	802780a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80277b0:	68fb      	ldr	r3, [r7, #12]
 80277b2:	681b      	ldr	r3, [r3, #0]
 80277b4:	689b      	ldr	r3, [r3, #8]
 80277b6:	f003 0302 	and.w	r3, r3, #2
 80277ba:	2b02      	cmp	r3, #2
 80277bc:	d113      	bne.n	80277e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80277be:	68fb      	ldr	r3, [r7, #12]
 80277c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80277c2:	68fb      	ldr	r3, [r7, #12]
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	330c      	adds	r3, #12
 80277c8:	7812      	ldrb	r2, [r2, #0]
 80277ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80277cc:	68fb      	ldr	r3, [r7, #12]
 80277ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277d0:	1c5a      	adds	r2, r3, #1
 80277d2:	68fb      	ldr	r3, [r7, #12]
 80277d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80277d6:	68fb      	ldr	r3, [r7, #12]
 80277d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80277da:	b29b      	uxth	r3, r3
 80277dc:	3b01      	subs	r3, #1
 80277de:	b29a      	uxth	r2, r3
 80277e0:	68fb      	ldr	r3, [r7, #12]
 80277e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80277e4:	e011      	b.n	802780a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80277e6:	f7fc ff8d 	bl	8024704 <HAL_GetTick>
 80277ea:	4602      	mov	r2, r0
 80277ec:	69bb      	ldr	r3, [r7, #24]
 80277ee:	1ad3      	subs	r3, r2, r3
 80277f0:	683a      	ldr	r2, [r7, #0]
 80277f2:	429a      	cmp	r2, r3
 80277f4:	d803      	bhi.n	80277fe <HAL_SPI_Transmit+0x204>
 80277f6:	683b      	ldr	r3, [r7, #0]
 80277f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80277fc:	d102      	bne.n	8027804 <HAL_SPI_Transmit+0x20a>
 80277fe:	683b      	ldr	r3, [r7, #0]
 8027800:	2b00      	cmp	r3, #0
 8027802:	d102      	bne.n	802780a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027804:	2303      	movs	r3, #3
 8027806:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027808:	e026      	b.n	8027858 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802780a:	68fb      	ldr	r3, [r7, #12]
 802780c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802780e:	b29b      	uxth	r3, r3
 8027810:	2b00      	cmp	r3, #0
 8027812:	d1cd      	bne.n	80277b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027814:	69ba      	ldr	r2, [r7, #24]
 8027816:	6839      	ldr	r1, [r7, #0]
 8027818:	68f8      	ldr	r0, [r7, #12]
 802781a:	f000 fbcb 	bl	8027fb4 <SPI_EndRxTxTransaction>
 802781e:	4603      	mov	r3, r0
 8027820:	2b00      	cmp	r3, #0
 8027822:	d002      	beq.n	802782a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027824:	68fb      	ldr	r3, [r7, #12]
 8027826:	2220      	movs	r2, #32
 8027828:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802782a:	68fb      	ldr	r3, [r7, #12]
 802782c:	689b      	ldr	r3, [r3, #8]
 802782e:	2b00      	cmp	r3, #0
 8027830:	d10a      	bne.n	8027848 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027832:	2300      	movs	r3, #0
 8027834:	613b      	str	r3, [r7, #16]
 8027836:	68fb      	ldr	r3, [r7, #12]
 8027838:	681b      	ldr	r3, [r3, #0]
 802783a:	68db      	ldr	r3, [r3, #12]
 802783c:	613b      	str	r3, [r7, #16]
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	681b      	ldr	r3, [r3, #0]
 8027842:	689b      	ldr	r3, [r3, #8]
 8027844:	613b      	str	r3, [r7, #16]
 8027846:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027848:	68fb      	ldr	r3, [r7, #12]
 802784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802784c:	2b00      	cmp	r3, #0
 802784e:	d002      	beq.n	8027856 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8027850:	2301      	movs	r3, #1
 8027852:	77fb      	strb	r3, [r7, #31]
 8027854:	e000      	b.n	8027858 <HAL_SPI_Transmit+0x25e>
  }

error:
 8027856:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027858:	68fb      	ldr	r3, [r7, #12]
 802785a:	2201      	movs	r2, #1
 802785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8027860:	68fb      	ldr	r3, [r7, #12]
 8027862:	2200      	movs	r2, #0
 8027864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027868:	7ffb      	ldrb	r3, [r7, #31]
}
 802786a:	4618      	mov	r0, r3
 802786c:	3720      	adds	r7, #32
 802786e:	46bd      	mov	sp, r7
 8027870:	bd80      	pop	{r7, pc}

08027872 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027872:	b580      	push	{r7, lr}
 8027874:	b088      	sub	sp, #32
 8027876:	af02      	add	r7, sp, #8
 8027878:	60f8      	str	r0, [r7, #12]
 802787a:	60b9      	str	r1, [r7, #8]
 802787c:	603b      	str	r3, [r7, #0]
 802787e:	4613      	mov	r3, r2
 8027880:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027882:	2300      	movs	r3, #0
 8027884:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8027886:	68fb      	ldr	r3, [r7, #12]
 8027888:	685b      	ldr	r3, [r3, #4]
 802788a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802788e:	d112      	bne.n	80278b6 <HAL_SPI_Receive+0x44>
 8027890:	68fb      	ldr	r3, [r7, #12]
 8027892:	689b      	ldr	r3, [r3, #8]
 8027894:	2b00      	cmp	r3, #0
 8027896:	d10e      	bne.n	80278b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8027898:	68fb      	ldr	r3, [r7, #12]
 802789a:	2204      	movs	r2, #4
 802789c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80278a0:	88fa      	ldrh	r2, [r7, #6]
 80278a2:	683b      	ldr	r3, [r7, #0]
 80278a4:	9300      	str	r3, [sp, #0]
 80278a6:	4613      	mov	r3, r2
 80278a8:	68ba      	ldr	r2, [r7, #8]
 80278aa:	68b9      	ldr	r1, [r7, #8]
 80278ac:	68f8      	ldr	r0, [r7, #12]
 80278ae:	f000 f8f1 	bl	8027a94 <HAL_SPI_TransmitReceive>
 80278b2:	4603      	mov	r3, r0
 80278b4:	e0ea      	b.n	8027a8c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80278b6:	68fb      	ldr	r3, [r7, #12]
 80278b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80278bc:	2b01      	cmp	r3, #1
 80278be:	d101      	bne.n	80278c4 <HAL_SPI_Receive+0x52>
 80278c0:	2302      	movs	r3, #2
 80278c2:	e0e3      	b.n	8027a8c <HAL_SPI_Receive+0x21a>
 80278c4:	68fb      	ldr	r3, [r7, #12]
 80278c6:	2201      	movs	r2, #1
 80278c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80278cc:	f7fc ff1a 	bl	8024704 <HAL_GetTick>
 80278d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80278d2:	68fb      	ldr	r3, [r7, #12]
 80278d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80278d8:	b2db      	uxtb	r3, r3
 80278da:	2b01      	cmp	r3, #1
 80278dc:	d002      	beq.n	80278e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80278de:	2302      	movs	r3, #2
 80278e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80278e2:	e0ca      	b.n	8027a7a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80278e4:	68bb      	ldr	r3, [r7, #8]
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d002      	beq.n	80278f0 <HAL_SPI_Receive+0x7e>
 80278ea:	88fb      	ldrh	r3, [r7, #6]
 80278ec:	2b00      	cmp	r3, #0
 80278ee:	d102      	bne.n	80278f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80278f0:	2301      	movs	r3, #1
 80278f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80278f4:	e0c1      	b.n	8027a7a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80278f6:	68fb      	ldr	r3, [r7, #12]
 80278f8:	2204      	movs	r2, #4
 80278fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80278fe:	68fb      	ldr	r3, [r7, #12]
 8027900:	2200      	movs	r2, #0
 8027902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027904:	68fb      	ldr	r3, [r7, #12]
 8027906:	68ba      	ldr	r2, [r7, #8]
 8027908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802790a:	68fb      	ldr	r3, [r7, #12]
 802790c:	88fa      	ldrh	r2, [r7, #6]
 802790e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8027910:	68fb      	ldr	r3, [r7, #12]
 8027912:	88fa      	ldrh	r2, [r7, #6]
 8027914:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027916:	68fb      	ldr	r3, [r7, #12]
 8027918:	2200      	movs	r2, #0
 802791a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802791c:	68fb      	ldr	r3, [r7, #12]
 802791e:	2200      	movs	r2, #0
 8027920:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027922:	68fb      	ldr	r3, [r7, #12]
 8027924:	2200      	movs	r2, #0
 8027926:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027928:	68fb      	ldr	r3, [r7, #12]
 802792a:	2200      	movs	r2, #0
 802792c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802792e:	68fb      	ldr	r3, [r7, #12]
 8027930:	2200      	movs	r2, #0
 8027932:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027934:	68fb      	ldr	r3, [r7, #12]
 8027936:	689b      	ldr	r3, [r3, #8]
 8027938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802793c:	d10f      	bne.n	802795e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802793e:	68fb      	ldr	r3, [r7, #12]
 8027940:	681b      	ldr	r3, [r3, #0]
 8027942:	681a      	ldr	r2, [r3, #0]
 8027944:	68fb      	ldr	r3, [r7, #12]
 8027946:	681b      	ldr	r3, [r3, #0]
 8027948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802794c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802794e:	68fb      	ldr	r3, [r7, #12]
 8027950:	681b      	ldr	r3, [r3, #0]
 8027952:	681a      	ldr	r2, [r3, #0]
 8027954:	68fb      	ldr	r3, [r7, #12]
 8027956:	681b      	ldr	r3, [r3, #0]
 8027958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802795c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802795e:	68fb      	ldr	r3, [r7, #12]
 8027960:	681b      	ldr	r3, [r3, #0]
 8027962:	681b      	ldr	r3, [r3, #0]
 8027964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027968:	2b40      	cmp	r3, #64	; 0x40
 802796a:	d007      	beq.n	802797c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802796c:	68fb      	ldr	r3, [r7, #12]
 802796e:	681b      	ldr	r3, [r3, #0]
 8027970:	681a      	ldr	r2, [r3, #0]
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802797a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802797c:	68fb      	ldr	r3, [r7, #12]
 802797e:	68db      	ldr	r3, [r3, #12]
 8027980:	2b00      	cmp	r3, #0
 8027982:	d162      	bne.n	8027a4a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027984:	e02e      	b.n	80279e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027986:	68fb      	ldr	r3, [r7, #12]
 8027988:	681b      	ldr	r3, [r3, #0]
 802798a:	689b      	ldr	r3, [r3, #8]
 802798c:	f003 0301 	and.w	r3, r3, #1
 8027990:	2b01      	cmp	r3, #1
 8027992:	d115      	bne.n	80279c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027994:	68fb      	ldr	r3, [r7, #12]
 8027996:	681b      	ldr	r3, [r3, #0]
 8027998:	f103 020c 	add.w	r2, r3, #12
 802799c:	68fb      	ldr	r3, [r7, #12]
 802799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80279a0:	7812      	ldrb	r2, [r2, #0]
 80279a2:	b2d2      	uxtb	r2, r2
 80279a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80279a6:	68fb      	ldr	r3, [r7, #12]
 80279a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80279aa:	1c5a      	adds	r2, r3, #1
 80279ac:	68fb      	ldr	r3, [r7, #12]
 80279ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80279b0:	68fb      	ldr	r3, [r7, #12]
 80279b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80279b4:	b29b      	uxth	r3, r3
 80279b6:	3b01      	subs	r3, #1
 80279b8:	b29a      	uxth	r2, r3
 80279ba:	68fb      	ldr	r3, [r7, #12]
 80279bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80279be:	e011      	b.n	80279e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80279c0:	f7fc fea0 	bl	8024704 <HAL_GetTick>
 80279c4:	4602      	mov	r2, r0
 80279c6:	693b      	ldr	r3, [r7, #16]
 80279c8:	1ad3      	subs	r3, r2, r3
 80279ca:	683a      	ldr	r2, [r7, #0]
 80279cc:	429a      	cmp	r2, r3
 80279ce:	d803      	bhi.n	80279d8 <HAL_SPI_Receive+0x166>
 80279d0:	683b      	ldr	r3, [r7, #0]
 80279d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80279d6:	d102      	bne.n	80279de <HAL_SPI_Receive+0x16c>
 80279d8:	683b      	ldr	r3, [r7, #0]
 80279da:	2b00      	cmp	r3, #0
 80279dc:	d102      	bne.n	80279e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80279de:	2303      	movs	r3, #3
 80279e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80279e2:	e04a      	b.n	8027a7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80279e4:	68fb      	ldr	r3, [r7, #12]
 80279e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80279e8:	b29b      	uxth	r3, r3
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d1cb      	bne.n	8027986 <HAL_SPI_Receive+0x114>
 80279ee:	e031      	b.n	8027a54 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80279f0:	68fb      	ldr	r3, [r7, #12]
 80279f2:	681b      	ldr	r3, [r3, #0]
 80279f4:	689b      	ldr	r3, [r3, #8]
 80279f6:	f003 0301 	and.w	r3, r3, #1
 80279fa:	2b01      	cmp	r3, #1
 80279fc:	d113      	bne.n	8027a26 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80279fe:	68fb      	ldr	r3, [r7, #12]
 8027a00:	681b      	ldr	r3, [r3, #0]
 8027a02:	68da      	ldr	r2, [r3, #12]
 8027a04:	68fb      	ldr	r3, [r7, #12]
 8027a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a08:	b292      	uxth	r2, r2
 8027a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027a0c:	68fb      	ldr	r3, [r7, #12]
 8027a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a10:	1c9a      	adds	r2, r3, #2
 8027a12:	68fb      	ldr	r3, [r7, #12]
 8027a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027a16:	68fb      	ldr	r3, [r7, #12]
 8027a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a1a:	b29b      	uxth	r3, r3
 8027a1c:	3b01      	subs	r3, #1
 8027a1e:	b29a      	uxth	r2, r3
 8027a20:	68fb      	ldr	r3, [r7, #12]
 8027a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027a24:	e011      	b.n	8027a4a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a26:	f7fc fe6d 	bl	8024704 <HAL_GetTick>
 8027a2a:	4602      	mov	r2, r0
 8027a2c:	693b      	ldr	r3, [r7, #16]
 8027a2e:	1ad3      	subs	r3, r2, r3
 8027a30:	683a      	ldr	r2, [r7, #0]
 8027a32:	429a      	cmp	r2, r3
 8027a34:	d803      	bhi.n	8027a3e <HAL_SPI_Receive+0x1cc>
 8027a36:	683b      	ldr	r3, [r7, #0]
 8027a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a3c:	d102      	bne.n	8027a44 <HAL_SPI_Receive+0x1d2>
 8027a3e:	683b      	ldr	r3, [r7, #0]
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d102      	bne.n	8027a4a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027a44:	2303      	movs	r3, #3
 8027a46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027a48:	e017      	b.n	8027a7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027a4a:	68fb      	ldr	r3, [r7, #12]
 8027a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a4e:	b29b      	uxth	r3, r3
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d1cd      	bne.n	80279f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027a54:	693a      	ldr	r2, [r7, #16]
 8027a56:	6839      	ldr	r1, [r7, #0]
 8027a58:	68f8      	ldr	r0, [r7, #12]
 8027a5a:	f000 fa45 	bl	8027ee8 <SPI_EndRxTransaction>
 8027a5e:	4603      	mov	r3, r0
 8027a60:	2b00      	cmp	r3, #0
 8027a62:	d002      	beq.n	8027a6a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	2220      	movs	r2, #32
 8027a68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027a6a:	68fb      	ldr	r3, [r7, #12]
 8027a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d002      	beq.n	8027a78 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027a72:	2301      	movs	r3, #1
 8027a74:	75fb      	strb	r3, [r7, #23]
 8027a76:	e000      	b.n	8027a7a <HAL_SPI_Receive+0x208>
  }

error :
 8027a78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027a7a:	68fb      	ldr	r3, [r7, #12]
 8027a7c:	2201      	movs	r2, #1
 8027a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027a82:	68fb      	ldr	r3, [r7, #12]
 8027a84:	2200      	movs	r2, #0
 8027a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8027a8c:	4618      	mov	r0, r3
 8027a8e:	3718      	adds	r7, #24
 8027a90:	46bd      	mov	sp, r7
 8027a92:	bd80      	pop	{r7, pc}

08027a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027a94:	b580      	push	{r7, lr}
 8027a96:	b08c      	sub	sp, #48	; 0x30
 8027a98:	af00      	add	r7, sp, #0
 8027a9a:	60f8      	str	r0, [r7, #12]
 8027a9c:	60b9      	str	r1, [r7, #8]
 8027a9e:	607a      	str	r2, [r7, #4]
 8027aa0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027aa2:	2301      	movs	r3, #1
 8027aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027aa6:	2300      	movs	r3, #0
 8027aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027aac:	68fb      	ldr	r3, [r7, #12]
 8027aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027ab2:	2b01      	cmp	r3, #1
 8027ab4:	d101      	bne.n	8027aba <HAL_SPI_TransmitReceive+0x26>
 8027ab6:	2302      	movs	r3, #2
 8027ab8:	e18a      	b.n	8027dd0 <HAL_SPI_TransmitReceive+0x33c>
 8027aba:	68fb      	ldr	r3, [r7, #12]
 8027abc:	2201      	movs	r2, #1
 8027abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027ac2:	f7fc fe1f 	bl	8024704 <HAL_GetTick>
 8027ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027ac8:	68fb      	ldr	r3, [r7, #12]
 8027aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027ad2:	68fb      	ldr	r3, [r7, #12]
 8027ad4:	685b      	ldr	r3, [r3, #4]
 8027ad6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027ad8:	887b      	ldrh	r3, [r7, #2]
 8027ada:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027ae0:	2b01      	cmp	r3, #1
 8027ae2:	d00f      	beq.n	8027b04 <HAL_SPI_TransmitReceive+0x70>
 8027ae4:	69fb      	ldr	r3, [r7, #28]
 8027ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027aea:	d107      	bne.n	8027afc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027aec:	68fb      	ldr	r3, [r7, #12]
 8027aee:	689b      	ldr	r3, [r3, #8]
 8027af0:	2b00      	cmp	r3, #0
 8027af2:	d103      	bne.n	8027afc <HAL_SPI_TransmitReceive+0x68>
 8027af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027af8:	2b04      	cmp	r3, #4
 8027afa:	d003      	beq.n	8027b04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027afc:	2302      	movs	r3, #2
 8027afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027b02:	e15b      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027b04:	68bb      	ldr	r3, [r7, #8]
 8027b06:	2b00      	cmp	r3, #0
 8027b08:	d005      	beq.n	8027b16 <HAL_SPI_TransmitReceive+0x82>
 8027b0a:	687b      	ldr	r3, [r7, #4]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d002      	beq.n	8027b16 <HAL_SPI_TransmitReceive+0x82>
 8027b10:	887b      	ldrh	r3, [r7, #2]
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	d103      	bne.n	8027b1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027b16:	2301      	movs	r3, #1
 8027b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027b1c:	e14e      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027b1e:	68fb      	ldr	r3, [r7, #12]
 8027b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027b24:	b2db      	uxtb	r3, r3
 8027b26:	2b04      	cmp	r3, #4
 8027b28:	d003      	beq.n	8027b32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027b2a:	68fb      	ldr	r3, [r7, #12]
 8027b2c:	2205      	movs	r2, #5
 8027b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027b32:	68fb      	ldr	r3, [r7, #12]
 8027b34:	2200      	movs	r2, #0
 8027b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	687a      	ldr	r2, [r7, #4]
 8027b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027b3e:	68fb      	ldr	r3, [r7, #12]
 8027b40:	887a      	ldrh	r2, [r7, #2]
 8027b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027b44:	68fb      	ldr	r3, [r7, #12]
 8027b46:	887a      	ldrh	r2, [r7, #2]
 8027b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027b4a:	68fb      	ldr	r3, [r7, #12]
 8027b4c:	68ba      	ldr	r2, [r7, #8]
 8027b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027b50:	68fb      	ldr	r3, [r7, #12]
 8027b52:	887a      	ldrh	r2, [r7, #2]
 8027b54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027b56:	68fb      	ldr	r3, [r7, #12]
 8027b58:	887a      	ldrh	r2, [r7, #2]
 8027b5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027b5c:	68fb      	ldr	r3, [r7, #12]
 8027b5e:	2200      	movs	r2, #0
 8027b60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027b62:	68fb      	ldr	r3, [r7, #12]
 8027b64:	2200      	movs	r2, #0
 8027b66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027b68:	68fb      	ldr	r3, [r7, #12]
 8027b6a:	681b      	ldr	r3, [r3, #0]
 8027b6c:	681b      	ldr	r3, [r3, #0]
 8027b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027b72:	2b40      	cmp	r3, #64	; 0x40
 8027b74:	d007      	beq.n	8027b86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027b76:	68fb      	ldr	r3, [r7, #12]
 8027b78:	681b      	ldr	r3, [r3, #0]
 8027b7a:	681a      	ldr	r2, [r3, #0]
 8027b7c:	68fb      	ldr	r3, [r7, #12]
 8027b7e:	681b      	ldr	r3, [r3, #0]
 8027b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027b86:	68fb      	ldr	r3, [r7, #12]
 8027b88:	68db      	ldr	r3, [r3, #12]
 8027b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027b8e:	d178      	bne.n	8027c82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027b90:	68fb      	ldr	r3, [r7, #12]
 8027b92:	685b      	ldr	r3, [r3, #4]
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d002      	beq.n	8027b9e <HAL_SPI_TransmitReceive+0x10a>
 8027b98:	8b7b      	ldrh	r3, [r7, #26]
 8027b9a:	2b01      	cmp	r3, #1
 8027b9c:	d166      	bne.n	8027c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027b9e:	68fb      	ldr	r3, [r7, #12]
 8027ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ba2:	881a      	ldrh	r2, [r3, #0]
 8027ba4:	68fb      	ldr	r3, [r7, #12]
 8027ba6:	681b      	ldr	r3, [r3, #0]
 8027ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027baa:	68fb      	ldr	r3, [r7, #12]
 8027bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bae:	1c9a      	adds	r2, r3, #2
 8027bb0:	68fb      	ldr	r3, [r7, #12]
 8027bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027bb4:	68fb      	ldr	r3, [r7, #12]
 8027bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027bb8:	b29b      	uxth	r3, r3
 8027bba:	3b01      	subs	r3, #1
 8027bbc:	b29a      	uxth	r2, r3
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027bc2:	e053      	b.n	8027c6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027bc4:	68fb      	ldr	r3, [r7, #12]
 8027bc6:	681b      	ldr	r3, [r3, #0]
 8027bc8:	689b      	ldr	r3, [r3, #8]
 8027bca:	f003 0302 	and.w	r3, r3, #2
 8027bce:	2b02      	cmp	r3, #2
 8027bd0:	d11b      	bne.n	8027c0a <HAL_SPI_TransmitReceive+0x176>
 8027bd2:	68fb      	ldr	r3, [r7, #12]
 8027bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027bd6:	b29b      	uxth	r3, r3
 8027bd8:	2b00      	cmp	r3, #0
 8027bda:	d016      	beq.n	8027c0a <HAL_SPI_TransmitReceive+0x176>
 8027bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bde:	2b01      	cmp	r3, #1
 8027be0:	d113      	bne.n	8027c0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027be6:	881a      	ldrh	r2, [r3, #0]
 8027be8:	68fb      	ldr	r3, [r7, #12]
 8027bea:	681b      	ldr	r3, [r3, #0]
 8027bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bf2:	1c9a      	adds	r2, r3, #2
 8027bf4:	68fb      	ldr	r3, [r7, #12]
 8027bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027bf8:	68fb      	ldr	r3, [r7, #12]
 8027bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027bfc:	b29b      	uxth	r3, r3
 8027bfe:	3b01      	subs	r3, #1
 8027c00:	b29a      	uxth	r2, r3
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027c06:	2300      	movs	r3, #0
 8027c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027c0a:	68fb      	ldr	r3, [r7, #12]
 8027c0c:	681b      	ldr	r3, [r3, #0]
 8027c0e:	689b      	ldr	r3, [r3, #8]
 8027c10:	f003 0301 	and.w	r3, r3, #1
 8027c14:	2b01      	cmp	r3, #1
 8027c16:	d119      	bne.n	8027c4c <HAL_SPI_TransmitReceive+0x1b8>
 8027c18:	68fb      	ldr	r3, [r7, #12]
 8027c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c1c:	b29b      	uxth	r3, r3
 8027c1e:	2b00      	cmp	r3, #0
 8027c20:	d014      	beq.n	8027c4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	681b      	ldr	r3, [r3, #0]
 8027c26:	68da      	ldr	r2, [r3, #12]
 8027c28:	68fb      	ldr	r3, [r7, #12]
 8027c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c2c:	b292      	uxth	r2, r2
 8027c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027c30:	68fb      	ldr	r3, [r7, #12]
 8027c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c34:	1c9a      	adds	r2, r3, #2
 8027c36:	68fb      	ldr	r3, [r7, #12]
 8027c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027c3a:	68fb      	ldr	r3, [r7, #12]
 8027c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c3e:	b29b      	uxth	r3, r3
 8027c40:	3b01      	subs	r3, #1
 8027c42:	b29a      	uxth	r2, r3
 8027c44:	68fb      	ldr	r3, [r7, #12]
 8027c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027c48:	2301      	movs	r3, #1
 8027c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027c4c:	f7fc fd5a 	bl	8024704 <HAL_GetTick>
 8027c50:	4602      	mov	r2, r0
 8027c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c54:	1ad3      	subs	r3, r2, r3
 8027c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027c58:	429a      	cmp	r2, r3
 8027c5a:	d807      	bhi.n	8027c6c <HAL_SPI_TransmitReceive+0x1d8>
 8027c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c62:	d003      	beq.n	8027c6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027c64:	2303      	movs	r3, #3
 8027c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027c6a:	e0a7      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027c6c:	68fb      	ldr	r3, [r7, #12]
 8027c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c70:	b29b      	uxth	r3, r3
 8027c72:	2b00      	cmp	r3, #0
 8027c74:	d1a6      	bne.n	8027bc4 <HAL_SPI_TransmitReceive+0x130>
 8027c76:	68fb      	ldr	r3, [r7, #12]
 8027c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c7a:	b29b      	uxth	r3, r3
 8027c7c:	2b00      	cmp	r3, #0
 8027c7e:	d1a1      	bne.n	8027bc4 <HAL_SPI_TransmitReceive+0x130>
 8027c80:	e07c      	b.n	8027d7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027c82:	68fb      	ldr	r3, [r7, #12]
 8027c84:	685b      	ldr	r3, [r3, #4]
 8027c86:	2b00      	cmp	r3, #0
 8027c88:	d002      	beq.n	8027c90 <HAL_SPI_TransmitReceive+0x1fc>
 8027c8a:	8b7b      	ldrh	r3, [r7, #26]
 8027c8c:	2b01      	cmp	r3, #1
 8027c8e:	d16b      	bne.n	8027d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027c90:	68fb      	ldr	r3, [r7, #12]
 8027c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027c94:	68fb      	ldr	r3, [r7, #12]
 8027c96:	681b      	ldr	r3, [r3, #0]
 8027c98:	330c      	adds	r3, #12
 8027c9a:	7812      	ldrb	r2, [r2, #0]
 8027c9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ca2:	1c5a      	adds	r2, r3, #1
 8027ca4:	68fb      	ldr	r3, [r7, #12]
 8027ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	3b01      	subs	r3, #1
 8027cb0:	b29a      	uxth	r2, r3
 8027cb2:	68fb      	ldr	r3, [r7, #12]
 8027cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027cb6:	e057      	b.n	8027d68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027cb8:	68fb      	ldr	r3, [r7, #12]
 8027cba:	681b      	ldr	r3, [r3, #0]
 8027cbc:	689b      	ldr	r3, [r3, #8]
 8027cbe:	f003 0302 	and.w	r3, r3, #2
 8027cc2:	2b02      	cmp	r3, #2
 8027cc4:	d11c      	bne.n	8027d00 <HAL_SPI_TransmitReceive+0x26c>
 8027cc6:	68fb      	ldr	r3, [r7, #12]
 8027cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027cca:	b29b      	uxth	r3, r3
 8027ccc:	2b00      	cmp	r3, #0
 8027cce:	d017      	beq.n	8027d00 <HAL_SPI_TransmitReceive+0x26c>
 8027cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cd2:	2b01      	cmp	r3, #1
 8027cd4:	d114      	bne.n	8027d00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027cd6:	68fb      	ldr	r3, [r7, #12]
 8027cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027cda:	68fb      	ldr	r3, [r7, #12]
 8027cdc:	681b      	ldr	r3, [r3, #0]
 8027cde:	330c      	adds	r3, #12
 8027ce0:	7812      	ldrb	r2, [r2, #0]
 8027ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027ce4:	68fb      	ldr	r3, [r7, #12]
 8027ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ce8:	1c5a      	adds	r2, r3, #1
 8027cea:	68fb      	ldr	r3, [r7, #12]
 8027cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027cee:	68fb      	ldr	r3, [r7, #12]
 8027cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027cf2:	b29b      	uxth	r3, r3
 8027cf4:	3b01      	subs	r3, #1
 8027cf6:	b29a      	uxth	r2, r3
 8027cf8:	68fb      	ldr	r3, [r7, #12]
 8027cfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027cfc:	2300      	movs	r3, #0
 8027cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027d00:	68fb      	ldr	r3, [r7, #12]
 8027d02:	681b      	ldr	r3, [r3, #0]
 8027d04:	689b      	ldr	r3, [r3, #8]
 8027d06:	f003 0301 	and.w	r3, r3, #1
 8027d0a:	2b01      	cmp	r3, #1
 8027d0c:	d119      	bne.n	8027d42 <HAL_SPI_TransmitReceive+0x2ae>
 8027d0e:	68fb      	ldr	r3, [r7, #12]
 8027d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d12:	b29b      	uxth	r3, r3
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d014      	beq.n	8027d42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027d18:	68fb      	ldr	r3, [r7, #12]
 8027d1a:	681b      	ldr	r3, [r3, #0]
 8027d1c:	68da      	ldr	r2, [r3, #12]
 8027d1e:	68fb      	ldr	r3, [r7, #12]
 8027d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d22:	b2d2      	uxtb	r2, r2
 8027d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d2a:	1c5a      	adds	r2, r3, #1
 8027d2c:	68fb      	ldr	r3, [r7, #12]
 8027d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027d30:	68fb      	ldr	r3, [r7, #12]
 8027d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d34:	b29b      	uxth	r3, r3
 8027d36:	3b01      	subs	r3, #1
 8027d38:	b29a      	uxth	r2, r3
 8027d3a:	68fb      	ldr	r3, [r7, #12]
 8027d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027d3e:	2301      	movs	r3, #1
 8027d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027d42:	f7fc fcdf 	bl	8024704 <HAL_GetTick>
 8027d46:	4602      	mov	r2, r0
 8027d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d4a:	1ad3      	subs	r3, r2, r3
 8027d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027d4e:	429a      	cmp	r2, r3
 8027d50:	d803      	bhi.n	8027d5a <HAL_SPI_TransmitReceive+0x2c6>
 8027d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d58:	d102      	bne.n	8027d60 <HAL_SPI_TransmitReceive+0x2cc>
 8027d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d103      	bne.n	8027d68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027d60:	2303      	movs	r3, #3
 8027d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027d66:	e029      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027d68:	68fb      	ldr	r3, [r7, #12]
 8027d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d6c:	b29b      	uxth	r3, r3
 8027d6e:	2b00      	cmp	r3, #0
 8027d70:	d1a2      	bne.n	8027cb8 <HAL_SPI_TransmitReceive+0x224>
 8027d72:	68fb      	ldr	r3, [r7, #12]
 8027d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d76:	b29b      	uxth	r3, r3
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	d19d      	bne.n	8027cb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027d80:	68f8      	ldr	r0, [r7, #12]
 8027d82:	f000 f917 	bl	8027fb4 <SPI_EndRxTxTransaction>
 8027d86:	4603      	mov	r3, r0
 8027d88:	2b00      	cmp	r3, #0
 8027d8a:	d006      	beq.n	8027d9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027d8c:	2301      	movs	r3, #1
 8027d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d92:	68fb      	ldr	r3, [r7, #12]
 8027d94:	2220      	movs	r2, #32
 8027d96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027d98:	e010      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027d9a:	68fb      	ldr	r3, [r7, #12]
 8027d9c:	689b      	ldr	r3, [r3, #8]
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	d10b      	bne.n	8027dba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027da2:	2300      	movs	r3, #0
 8027da4:	617b      	str	r3, [r7, #20]
 8027da6:	68fb      	ldr	r3, [r7, #12]
 8027da8:	681b      	ldr	r3, [r3, #0]
 8027daa:	68db      	ldr	r3, [r3, #12]
 8027dac:	617b      	str	r3, [r7, #20]
 8027dae:	68fb      	ldr	r3, [r7, #12]
 8027db0:	681b      	ldr	r3, [r3, #0]
 8027db2:	689b      	ldr	r3, [r3, #8]
 8027db4:	617b      	str	r3, [r7, #20]
 8027db6:	697b      	ldr	r3, [r7, #20]
 8027db8:	e000      	b.n	8027dbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027dbc:	68fb      	ldr	r3, [r7, #12]
 8027dbe:	2201      	movs	r2, #1
 8027dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	2200      	movs	r2, #0
 8027dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027dd0:	4618      	mov	r0, r3
 8027dd2:	3730      	adds	r7, #48	; 0x30
 8027dd4:	46bd      	mov	sp, r7
 8027dd6:	bd80      	pop	{r7, pc}

08027dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027dd8:	b580      	push	{r7, lr}
 8027dda:	b088      	sub	sp, #32
 8027ddc:	af00      	add	r7, sp, #0
 8027dde:	60f8      	str	r0, [r7, #12]
 8027de0:	60b9      	str	r1, [r7, #8]
 8027de2:	603b      	str	r3, [r7, #0]
 8027de4:	4613      	mov	r3, r2
 8027de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8027de8:	f7fc fc8c 	bl	8024704 <HAL_GetTick>
 8027dec:	4602      	mov	r2, r0
 8027dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027df0:	1a9b      	subs	r3, r3, r2
 8027df2:	683a      	ldr	r2, [r7, #0]
 8027df4:	4413      	add	r3, r2
 8027df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8027df8:	f7fc fc84 	bl	8024704 <HAL_GetTick>
 8027dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8027dfe:	4b39      	ldr	r3, [pc, #228]	; (8027ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8027e00:	681b      	ldr	r3, [r3, #0]
 8027e02:	015b      	lsls	r3, r3, #5
 8027e04:	0d1b      	lsrs	r3, r3, #20
 8027e06:	69fa      	ldr	r2, [r7, #28]
 8027e08:	fb02 f303 	mul.w	r3, r2, r3
 8027e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027e0e:	e054      	b.n	8027eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027e10:	683b      	ldr	r3, [r7, #0]
 8027e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e16:	d050      	beq.n	8027eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8027e18:	f7fc fc74 	bl	8024704 <HAL_GetTick>
 8027e1c:	4602      	mov	r2, r0
 8027e1e:	69bb      	ldr	r3, [r7, #24]
 8027e20:	1ad3      	subs	r3, r2, r3
 8027e22:	69fa      	ldr	r2, [r7, #28]
 8027e24:	429a      	cmp	r2, r3
 8027e26:	d902      	bls.n	8027e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8027e28:	69fb      	ldr	r3, [r7, #28]
 8027e2a:	2b00      	cmp	r3, #0
 8027e2c:	d13d      	bne.n	8027eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027e2e:	68fb      	ldr	r3, [r7, #12]
 8027e30:	681b      	ldr	r3, [r3, #0]
 8027e32:	685a      	ldr	r2, [r3, #4]
 8027e34:	68fb      	ldr	r3, [r7, #12]
 8027e36:	681b      	ldr	r3, [r3, #0]
 8027e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027e3e:	68fb      	ldr	r3, [r7, #12]
 8027e40:	685b      	ldr	r3, [r3, #4]
 8027e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e46:	d111      	bne.n	8027e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8027e48:	68fb      	ldr	r3, [r7, #12]
 8027e4a:	689b      	ldr	r3, [r3, #8]
 8027e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027e50:	d004      	beq.n	8027e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027e52:	68fb      	ldr	r3, [r7, #12]
 8027e54:	689b      	ldr	r3, [r3, #8]
 8027e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027e5a:	d107      	bne.n	8027e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027e5c:	68fb      	ldr	r3, [r7, #12]
 8027e5e:	681b      	ldr	r3, [r3, #0]
 8027e60:	681a      	ldr	r2, [r3, #0]
 8027e62:	68fb      	ldr	r3, [r7, #12]
 8027e64:	681b      	ldr	r3, [r3, #0]
 8027e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027e6c:	68fb      	ldr	r3, [r7, #12]
 8027e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027e74:	d10f      	bne.n	8027e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8027e76:	68fb      	ldr	r3, [r7, #12]
 8027e78:	681b      	ldr	r3, [r3, #0]
 8027e7a:	681a      	ldr	r2, [r3, #0]
 8027e7c:	68fb      	ldr	r3, [r7, #12]
 8027e7e:	681b      	ldr	r3, [r3, #0]
 8027e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027e84:	601a      	str	r2, [r3, #0]
 8027e86:	68fb      	ldr	r3, [r7, #12]
 8027e88:	681b      	ldr	r3, [r3, #0]
 8027e8a:	681a      	ldr	r2, [r3, #0]
 8027e8c:	68fb      	ldr	r3, [r7, #12]
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027e96:	68fb      	ldr	r3, [r7, #12]
 8027e98:	2201      	movs	r2, #1
 8027e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027e9e:	68fb      	ldr	r3, [r7, #12]
 8027ea0:	2200      	movs	r2, #0
 8027ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027ea6:	2303      	movs	r3, #3
 8027ea8:	e017      	b.n	8027eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8027eaa:	697b      	ldr	r3, [r7, #20]
 8027eac:	2b00      	cmp	r3, #0
 8027eae:	d101      	bne.n	8027eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8027eb0:	2300      	movs	r3, #0
 8027eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8027eb4:	697b      	ldr	r3, [r7, #20]
 8027eb6:	3b01      	subs	r3, #1
 8027eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027eba:	68fb      	ldr	r3, [r7, #12]
 8027ebc:	681b      	ldr	r3, [r3, #0]
 8027ebe:	689a      	ldr	r2, [r3, #8]
 8027ec0:	68bb      	ldr	r3, [r7, #8]
 8027ec2:	4013      	ands	r3, r2
 8027ec4:	68ba      	ldr	r2, [r7, #8]
 8027ec6:	429a      	cmp	r2, r3
 8027ec8:	bf0c      	ite	eq
 8027eca:	2301      	moveq	r3, #1
 8027ecc:	2300      	movne	r3, #0
 8027ece:	b2db      	uxtb	r3, r3
 8027ed0:	461a      	mov	r2, r3
 8027ed2:	79fb      	ldrb	r3, [r7, #7]
 8027ed4:	429a      	cmp	r2, r3
 8027ed6:	d19b      	bne.n	8027e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8027ed8:	2300      	movs	r3, #0
}
 8027eda:	4618      	mov	r0, r3
 8027edc:	3720      	adds	r7, #32
 8027ede:	46bd      	mov	sp, r7
 8027ee0:	bd80      	pop	{r7, pc}
 8027ee2:	bf00      	nop
 8027ee4:	20000084 	.word	0x20000084

08027ee8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8027ee8:	b580      	push	{r7, lr}
 8027eea:	b086      	sub	sp, #24
 8027eec:	af02      	add	r7, sp, #8
 8027eee:	60f8      	str	r0, [r7, #12]
 8027ef0:	60b9      	str	r1, [r7, #8]
 8027ef2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027ef4:	68fb      	ldr	r3, [r7, #12]
 8027ef6:	685b      	ldr	r3, [r3, #4]
 8027ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027efc:	d111      	bne.n	8027f22 <SPI_EndRxTransaction+0x3a>
 8027efe:	68fb      	ldr	r3, [r7, #12]
 8027f00:	689b      	ldr	r3, [r3, #8]
 8027f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027f06:	d004      	beq.n	8027f12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027f08:	68fb      	ldr	r3, [r7, #12]
 8027f0a:	689b      	ldr	r3, [r3, #8]
 8027f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027f10:	d107      	bne.n	8027f22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8027f12:	68fb      	ldr	r3, [r7, #12]
 8027f14:	681b      	ldr	r3, [r3, #0]
 8027f16:	681a      	ldr	r2, [r3, #0]
 8027f18:	68fb      	ldr	r3, [r7, #12]
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027f20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027f22:	68fb      	ldr	r3, [r7, #12]
 8027f24:	685b      	ldr	r3, [r3, #4]
 8027f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027f2a:	d12a      	bne.n	8027f82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8027f2c:	68fb      	ldr	r3, [r7, #12]
 8027f2e:	689b      	ldr	r3, [r3, #8]
 8027f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027f34:	d012      	beq.n	8027f5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	9300      	str	r3, [sp, #0]
 8027f3a:	68bb      	ldr	r3, [r7, #8]
 8027f3c:	2200      	movs	r2, #0
 8027f3e:	2180      	movs	r1, #128	; 0x80
 8027f40:	68f8      	ldr	r0, [r7, #12]
 8027f42:	f7ff ff49 	bl	8027dd8 <SPI_WaitFlagStateUntilTimeout>
 8027f46:	4603      	mov	r3, r0
 8027f48:	2b00      	cmp	r3, #0
 8027f4a:	d02d      	beq.n	8027fa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027f4c:	68fb      	ldr	r3, [r7, #12]
 8027f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027f50:	f043 0220 	orr.w	r2, r3, #32
 8027f54:	68fb      	ldr	r3, [r7, #12]
 8027f56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027f58:	2303      	movs	r3, #3
 8027f5a:	e026      	b.n	8027faa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027f5c:	687b      	ldr	r3, [r7, #4]
 8027f5e:	9300      	str	r3, [sp, #0]
 8027f60:	68bb      	ldr	r3, [r7, #8]
 8027f62:	2200      	movs	r2, #0
 8027f64:	2101      	movs	r1, #1
 8027f66:	68f8      	ldr	r0, [r7, #12]
 8027f68:	f7ff ff36 	bl	8027dd8 <SPI_WaitFlagStateUntilTimeout>
 8027f6c:	4603      	mov	r3, r0
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	d01a      	beq.n	8027fa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027f72:	68fb      	ldr	r3, [r7, #12]
 8027f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027f76:	f043 0220 	orr.w	r2, r3, #32
 8027f7a:	68fb      	ldr	r3, [r7, #12]
 8027f7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027f7e:	2303      	movs	r3, #3
 8027f80:	e013      	b.n	8027faa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027f82:	687b      	ldr	r3, [r7, #4]
 8027f84:	9300      	str	r3, [sp, #0]
 8027f86:	68bb      	ldr	r3, [r7, #8]
 8027f88:	2200      	movs	r2, #0
 8027f8a:	2101      	movs	r1, #1
 8027f8c:	68f8      	ldr	r0, [r7, #12]
 8027f8e:	f7ff ff23 	bl	8027dd8 <SPI_WaitFlagStateUntilTimeout>
 8027f92:	4603      	mov	r3, r0
 8027f94:	2b00      	cmp	r3, #0
 8027f96:	d007      	beq.n	8027fa8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027f98:	68fb      	ldr	r3, [r7, #12]
 8027f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027f9c:	f043 0220 	orr.w	r2, r3, #32
 8027fa0:	68fb      	ldr	r3, [r7, #12]
 8027fa2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027fa4:	2303      	movs	r3, #3
 8027fa6:	e000      	b.n	8027faa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8027fa8:	2300      	movs	r3, #0
}
 8027faa:	4618      	mov	r0, r3
 8027fac:	3710      	adds	r7, #16
 8027fae:	46bd      	mov	sp, r7
 8027fb0:	bd80      	pop	{r7, pc}
	...

08027fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8027fb4:	b580      	push	{r7, lr}
 8027fb6:	b088      	sub	sp, #32
 8027fb8:	af02      	add	r7, sp, #8
 8027fba:	60f8      	str	r0, [r7, #12]
 8027fbc:	60b9      	str	r1, [r7, #8]
 8027fbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027fc0:	4b1b      	ldr	r3, [pc, #108]	; (8028030 <SPI_EndRxTxTransaction+0x7c>)
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	4a1b      	ldr	r2, [pc, #108]	; (8028034 <SPI_EndRxTxTransaction+0x80>)
 8027fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8027fca:	0d5b      	lsrs	r3, r3, #21
 8027fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027fd0:	fb02 f303 	mul.w	r3, r2, r3
 8027fd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027fd6:	68fb      	ldr	r3, [r7, #12]
 8027fd8:	685b      	ldr	r3, [r3, #4]
 8027fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027fde:	d112      	bne.n	8028006 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	9300      	str	r3, [sp, #0]
 8027fe4:	68bb      	ldr	r3, [r7, #8]
 8027fe6:	2200      	movs	r2, #0
 8027fe8:	2180      	movs	r1, #128	; 0x80
 8027fea:	68f8      	ldr	r0, [r7, #12]
 8027fec:	f7ff fef4 	bl	8027dd8 <SPI_WaitFlagStateUntilTimeout>
 8027ff0:	4603      	mov	r3, r0
 8027ff2:	2b00      	cmp	r3, #0
 8027ff4:	d016      	beq.n	8028024 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027ff6:	68fb      	ldr	r3, [r7, #12]
 8027ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027ffa:	f043 0220 	orr.w	r2, r3, #32
 8027ffe:	68fb      	ldr	r3, [r7, #12]
 8028000:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028002:	2303      	movs	r3, #3
 8028004:	e00f      	b.n	8028026 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028006:	697b      	ldr	r3, [r7, #20]
 8028008:	2b00      	cmp	r3, #0
 802800a:	d00a      	beq.n	8028022 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802800c:	697b      	ldr	r3, [r7, #20]
 802800e:	3b01      	subs	r3, #1
 8028010:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028012:	68fb      	ldr	r3, [r7, #12]
 8028014:	681b      	ldr	r3, [r3, #0]
 8028016:	689b      	ldr	r3, [r3, #8]
 8028018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802801c:	2b80      	cmp	r3, #128	; 0x80
 802801e:	d0f2      	beq.n	8028006 <SPI_EndRxTxTransaction+0x52>
 8028020:	e000      	b.n	8028024 <SPI_EndRxTxTransaction+0x70>
        break;
 8028022:	bf00      	nop
  }

  return HAL_OK;
 8028024:	2300      	movs	r3, #0
}
 8028026:	4618      	mov	r0, r3
 8028028:	3718      	adds	r7, #24
 802802a:	46bd      	mov	sp, r7
 802802c:	bd80      	pop	{r7, pc}
 802802e:	bf00      	nop
 8028030:	20000084 	.word	0x20000084
 8028034:	165e9f81 	.word	0x165e9f81

08028038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028038:	b580      	push	{r7, lr}
 802803a:	b082      	sub	sp, #8
 802803c:	af00      	add	r7, sp, #0
 802803e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	2b00      	cmp	r3, #0
 8028044:	d101      	bne.n	802804a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028046:	2301      	movs	r3, #1
 8028048:	e041      	b.n	80280ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802804a:	687b      	ldr	r3, [r7, #4]
 802804c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028050:	b2db      	uxtb	r3, r3
 8028052:	2b00      	cmp	r3, #0
 8028054:	d106      	bne.n	8028064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028056:	687b      	ldr	r3, [r7, #4]
 8028058:	2200      	movs	r2, #0
 802805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802805e:	6878      	ldr	r0, [r7, #4]
 8028060:	f7ef ff20 	bl	8017ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028064:	687b      	ldr	r3, [r7, #4]
 8028066:	2202      	movs	r2, #2
 8028068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802806c:	687b      	ldr	r3, [r7, #4]
 802806e:	681a      	ldr	r2, [r3, #0]
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	3304      	adds	r3, #4
 8028074:	4619      	mov	r1, r3
 8028076:	4610      	mov	r0, r2
 8028078:	f001 f858 	bl	802912c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802807c:	687b      	ldr	r3, [r7, #4]
 802807e:	2201      	movs	r2, #1
 8028080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028084:	687b      	ldr	r3, [r7, #4]
 8028086:	2201      	movs	r2, #1
 8028088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	2201      	movs	r2, #1
 8028090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028094:	687b      	ldr	r3, [r7, #4]
 8028096:	2201      	movs	r2, #1
 8028098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802809c:	687b      	ldr	r3, [r7, #4]
 802809e:	2201      	movs	r2, #1
 80280a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	2201      	movs	r2, #1
 80280a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80280ac:	687b      	ldr	r3, [r7, #4]
 80280ae:	2201      	movs	r2, #1
 80280b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	2201      	movs	r2, #1
 80280b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80280bc:	687b      	ldr	r3, [r7, #4]
 80280be:	2201      	movs	r2, #1
 80280c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80280c4:	687b      	ldr	r3, [r7, #4]
 80280c6:	2201      	movs	r2, #1
 80280c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80280cc:	2300      	movs	r3, #0
}
 80280ce:	4618      	mov	r0, r3
 80280d0:	3708      	adds	r7, #8
 80280d2:	46bd      	mov	sp, r7
 80280d4:	bd80      	pop	{r7, pc}
	...

080280d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80280d8:	b480      	push	{r7}
 80280da:	b085      	sub	sp, #20
 80280dc:	af00      	add	r7, sp, #0
 80280de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80280e0:	687b      	ldr	r3, [r7, #4]
 80280e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80280e6:	b2db      	uxtb	r3, r3
 80280e8:	2b01      	cmp	r3, #1
 80280ea:	d001      	beq.n	80280f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80280ec:	2301      	movs	r3, #1
 80280ee:	e046      	b.n	802817e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80280f0:	687b      	ldr	r3, [r7, #4]
 80280f2:	2202      	movs	r2, #2
 80280f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	4a23      	ldr	r2, [pc, #140]	; (802818c <HAL_TIM_Base_Start+0xb4>)
 80280fe:	4293      	cmp	r3, r2
 8028100:	d022      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 8028102:	687b      	ldr	r3, [r7, #4]
 8028104:	681b      	ldr	r3, [r3, #0]
 8028106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802810a:	d01d      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 802810c:	687b      	ldr	r3, [r7, #4]
 802810e:	681b      	ldr	r3, [r3, #0]
 8028110:	4a1f      	ldr	r2, [pc, #124]	; (8028190 <HAL_TIM_Base_Start+0xb8>)
 8028112:	4293      	cmp	r3, r2
 8028114:	d018      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 8028116:	687b      	ldr	r3, [r7, #4]
 8028118:	681b      	ldr	r3, [r3, #0]
 802811a:	4a1e      	ldr	r2, [pc, #120]	; (8028194 <HAL_TIM_Base_Start+0xbc>)
 802811c:	4293      	cmp	r3, r2
 802811e:	d013      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 8028120:	687b      	ldr	r3, [r7, #4]
 8028122:	681b      	ldr	r3, [r3, #0]
 8028124:	4a1c      	ldr	r2, [pc, #112]	; (8028198 <HAL_TIM_Base_Start+0xc0>)
 8028126:	4293      	cmp	r3, r2
 8028128:	d00e      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	681b      	ldr	r3, [r3, #0]
 802812e:	4a1b      	ldr	r2, [pc, #108]	; (802819c <HAL_TIM_Base_Start+0xc4>)
 8028130:	4293      	cmp	r3, r2
 8028132:	d009      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	681b      	ldr	r3, [r3, #0]
 8028138:	4a19      	ldr	r2, [pc, #100]	; (80281a0 <HAL_TIM_Base_Start+0xc8>)
 802813a:	4293      	cmp	r3, r2
 802813c:	d004      	beq.n	8028148 <HAL_TIM_Base_Start+0x70>
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	4a18      	ldr	r2, [pc, #96]	; (80281a4 <HAL_TIM_Base_Start+0xcc>)
 8028144:	4293      	cmp	r3, r2
 8028146:	d111      	bne.n	802816c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028148:	687b      	ldr	r3, [r7, #4]
 802814a:	681b      	ldr	r3, [r3, #0]
 802814c:	689b      	ldr	r3, [r3, #8]
 802814e:	f003 0307 	and.w	r3, r3, #7
 8028152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	2b06      	cmp	r3, #6
 8028158:	d010      	beq.n	802817c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 802815a:	687b      	ldr	r3, [r7, #4]
 802815c:	681b      	ldr	r3, [r3, #0]
 802815e:	681a      	ldr	r2, [r3, #0]
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	681b      	ldr	r3, [r3, #0]
 8028164:	f042 0201 	orr.w	r2, r2, #1
 8028168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802816a:	e007      	b.n	802817c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802816c:	687b      	ldr	r3, [r7, #4]
 802816e:	681b      	ldr	r3, [r3, #0]
 8028170:	681a      	ldr	r2, [r3, #0]
 8028172:	687b      	ldr	r3, [r7, #4]
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	f042 0201 	orr.w	r2, r2, #1
 802817a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802817c:	2300      	movs	r3, #0
}
 802817e:	4618      	mov	r0, r3
 8028180:	3714      	adds	r7, #20
 8028182:	46bd      	mov	sp, r7
 8028184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028188:	4770      	bx	lr
 802818a:	bf00      	nop
 802818c:	40010000 	.word	0x40010000
 8028190:	40000400 	.word	0x40000400
 8028194:	40000800 	.word	0x40000800
 8028198:	40000c00 	.word	0x40000c00
 802819c:	40010400 	.word	0x40010400
 80281a0:	40014000 	.word	0x40014000
 80281a4:	40001800 	.word	0x40001800

080281a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80281a8:	b480      	push	{r7}
 80281aa:	b085      	sub	sp, #20
 80281ac:	af00      	add	r7, sp, #0
 80281ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80281b6:	b2db      	uxtb	r3, r3
 80281b8:	2b01      	cmp	r3, #1
 80281ba:	d001      	beq.n	80281c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80281bc:	2301      	movs	r3, #1
 80281be:	e04e      	b.n	802825e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80281c0:	687b      	ldr	r3, [r7, #4]
 80281c2:	2202      	movs	r2, #2
 80281c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	681b      	ldr	r3, [r3, #0]
 80281cc:	68da      	ldr	r2, [r3, #12]
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	681b      	ldr	r3, [r3, #0]
 80281d2:	f042 0201 	orr.w	r2, r2, #1
 80281d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80281d8:	687b      	ldr	r3, [r7, #4]
 80281da:	681b      	ldr	r3, [r3, #0]
 80281dc:	4a23      	ldr	r2, [pc, #140]	; (802826c <HAL_TIM_Base_Start_IT+0xc4>)
 80281de:	4293      	cmp	r3, r2
 80281e0:	d022      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 80281e2:	687b      	ldr	r3, [r7, #4]
 80281e4:	681b      	ldr	r3, [r3, #0]
 80281e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80281ea:	d01d      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 80281ec:	687b      	ldr	r3, [r7, #4]
 80281ee:	681b      	ldr	r3, [r3, #0]
 80281f0:	4a1f      	ldr	r2, [pc, #124]	; (8028270 <HAL_TIM_Base_Start_IT+0xc8>)
 80281f2:	4293      	cmp	r3, r2
 80281f4:	d018      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 80281f6:	687b      	ldr	r3, [r7, #4]
 80281f8:	681b      	ldr	r3, [r3, #0]
 80281fa:	4a1e      	ldr	r2, [pc, #120]	; (8028274 <HAL_TIM_Base_Start_IT+0xcc>)
 80281fc:	4293      	cmp	r3, r2
 80281fe:	d013      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	4a1c      	ldr	r2, [pc, #112]	; (8028278 <HAL_TIM_Base_Start_IT+0xd0>)
 8028206:	4293      	cmp	r3, r2
 8028208:	d00e      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	681b      	ldr	r3, [r3, #0]
 802820e:	4a1b      	ldr	r2, [pc, #108]	; (802827c <HAL_TIM_Base_Start_IT+0xd4>)
 8028210:	4293      	cmp	r3, r2
 8028212:	d009      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 8028214:	687b      	ldr	r3, [r7, #4]
 8028216:	681b      	ldr	r3, [r3, #0]
 8028218:	4a19      	ldr	r2, [pc, #100]	; (8028280 <HAL_TIM_Base_Start_IT+0xd8>)
 802821a:	4293      	cmp	r3, r2
 802821c:	d004      	beq.n	8028228 <HAL_TIM_Base_Start_IT+0x80>
 802821e:	687b      	ldr	r3, [r7, #4]
 8028220:	681b      	ldr	r3, [r3, #0]
 8028222:	4a18      	ldr	r2, [pc, #96]	; (8028284 <HAL_TIM_Base_Start_IT+0xdc>)
 8028224:	4293      	cmp	r3, r2
 8028226:	d111      	bne.n	802824c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028228:	687b      	ldr	r3, [r7, #4]
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	689b      	ldr	r3, [r3, #8]
 802822e:	f003 0307 	and.w	r3, r3, #7
 8028232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028234:	68fb      	ldr	r3, [r7, #12]
 8028236:	2b06      	cmp	r3, #6
 8028238:	d010      	beq.n	802825c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 802823a:	687b      	ldr	r3, [r7, #4]
 802823c:	681b      	ldr	r3, [r3, #0]
 802823e:	681a      	ldr	r2, [r3, #0]
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	f042 0201 	orr.w	r2, r2, #1
 8028248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802824a:	e007      	b.n	802825c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802824c:	687b      	ldr	r3, [r7, #4]
 802824e:	681b      	ldr	r3, [r3, #0]
 8028250:	681a      	ldr	r2, [r3, #0]
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	681b      	ldr	r3, [r3, #0]
 8028256:	f042 0201 	orr.w	r2, r2, #1
 802825a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802825c:	2300      	movs	r3, #0
}
 802825e:	4618      	mov	r0, r3
 8028260:	3714      	adds	r7, #20
 8028262:	46bd      	mov	sp, r7
 8028264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028268:	4770      	bx	lr
 802826a:	bf00      	nop
 802826c:	40010000 	.word	0x40010000
 8028270:	40000400 	.word	0x40000400
 8028274:	40000800 	.word	0x40000800
 8028278:	40000c00 	.word	0x40000c00
 802827c:	40010400 	.word	0x40010400
 8028280:	40014000 	.word	0x40014000
 8028284:	40001800 	.word	0x40001800

08028288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8028288:	b580      	push	{r7, lr}
 802828a:	b082      	sub	sp, #8
 802828c:	af00      	add	r7, sp, #0
 802828e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028290:	687b      	ldr	r3, [r7, #4]
 8028292:	2b00      	cmp	r3, #0
 8028294:	d101      	bne.n	802829a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8028296:	2301      	movs	r3, #1
 8028298:	e041      	b.n	802831e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80282a0:	b2db      	uxtb	r3, r3
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d106      	bne.n	80282b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80282a6:	687b      	ldr	r3, [r7, #4]
 80282a8:	2200      	movs	r2, #0
 80282aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80282ae:	6878      	ldr	r0, [r7, #4]
 80282b0:	f000 f839 	bl	8028326 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80282b4:	687b      	ldr	r3, [r7, #4]
 80282b6:	2202      	movs	r2, #2
 80282b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	681a      	ldr	r2, [r3, #0]
 80282c0:	687b      	ldr	r3, [r7, #4]
 80282c2:	3304      	adds	r3, #4
 80282c4:	4619      	mov	r1, r3
 80282c6:	4610      	mov	r0, r2
 80282c8:	f000 ff30 	bl	802912c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80282cc:	687b      	ldr	r3, [r7, #4]
 80282ce:	2201      	movs	r2, #1
 80282d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80282d4:	687b      	ldr	r3, [r7, #4]
 80282d6:	2201      	movs	r2, #1
 80282d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	2201      	movs	r2, #1
 80282e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	2201      	movs	r2, #1
 80282e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80282ec:	687b      	ldr	r3, [r7, #4]
 80282ee:	2201      	movs	r2, #1
 80282f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	2201      	movs	r2, #1
 80282f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80282fc:	687b      	ldr	r3, [r7, #4]
 80282fe:	2201      	movs	r2, #1
 8028300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028304:	687b      	ldr	r3, [r7, #4]
 8028306:	2201      	movs	r2, #1
 8028308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	2201      	movs	r2, #1
 8028310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028314:	687b      	ldr	r3, [r7, #4]
 8028316:	2201      	movs	r2, #1
 8028318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802831c:	2300      	movs	r3, #0
}
 802831e:	4618      	mov	r0, r3
 8028320:	3708      	adds	r7, #8
 8028322:	46bd      	mov	sp, r7
 8028324:	bd80      	pop	{r7, pc}

08028326 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8028326:	b480      	push	{r7}
 8028328:	b083      	sub	sp, #12
 802832a:	af00      	add	r7, sp, #0
 802832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802832e:	bf00      	nop
 8028330:	370c      	adds	r7, #12
 8028332:	46bd      	mov	sp, r7
 8028334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028338:	4770      	bx	lr
	...

0802833c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802833c:	b580      	push	{r7, lr}
 802833e:	b084      	sub	sp, #16
 8028340:	af00      	add	r7, sp, #0
 8028342:	6078      	str	r0, [r7, #4]
 8028344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8028346:	683b      	ldr	r3, [r7, #0]
 8028348:	2b00      	cmp	r3, #0
 802834a:	d109      	bne.n	8028360 <HAL_TIM_PWM_Start+0x24>
 802834c:	687b      	ldr	r3, [r7, #4]
 802834e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028352:	b2db      	uxtb	r3, r3
 8028354:	2b01      	cmp	r3, #1
 8028356:	bf14      	ite	ne
 8028358:	2301      	movne	r3, #1
 802835a:	2300      	moveq	r3, #0
 802835c:	b2db      	uxtb	r3, r3
 802835e:	e022      	b.n	80283a6 <HAL_TIM_PWM_Start+0x6a>
 8028360:	683b      	ldr	r3, [r7, #0]
 8028362:	2b04      	cmp	r3, #4
 8028364:	d109      	bne.n	802837a <HAL_TIM_PWM_Start+0x3e>
 8028366:	687b      	ldr	r3, [r7, #4]
 8028368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802836c:	b2db      	uxtb	r3, r3
 802836e:	2b01      	cmp	r3, #1
 8028370:	bf14      	ite	ne
 8028372:	2301      	movne	r3, #1
 8028374:	2300      	moveq	r3, #0
 8028376:	b2db      	uxtb	r3, r3
 8028378:	e015      	b.n	80283a6 <HAL_TIM_PWM_Start+0x6a>
 802837a:	683b      	ldr	r3, [r7, #0]
 802837c:	2b08      	cmp	r3, #8
 802837e:	d109      	bne.n	8028394 <HAL_TIM_PWM_Start+0x58>
 8028380:	687b      	ldr	r3, [r7, #4]
 8028382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028386:	b2db      	uxtb	r3, r3
 8028388:	2b01      	cmp	r3, #1
 802838a:	bf14      	ite	ne
 802838c:	2301      	movne	r3, #1
 802838e:	2300      	moveq	r3, #0
 8028390:	b2db      	uxtb	r3, r3
 8028392:	e008      	b.n	80283a6 <HAL_TIM_PWM_Start+0x6a>
 8028394:	687b      	ldr	r3, [r7, #4]
 8028396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802839a:	b2db      	uxtb	r3, r3
 802839c:	2b01      	cmp	r3, #1
 802839e:	bf14      	ite	ne
 80283a0:	2301      	movne	r3, #1
 80283a2:	2300      	moveq	r3, #0
 80283a4:	b2db      	uxtb	r3, r3
 80283a6:	2b00      	cmp	r3, #0
 80283a8:	d001      	beq.n	80283ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80283aa:	2301      	movs	r3, #1
 80283ac:	e07c      	b.n	80284a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80283ae:	683b      	ldr	r3, [r7, #0]
 80283b0:	2b00      	cmp	r3, #0
 80283b2:	d104      	bne.n	80283be <HAL_TIM_PWM_Start+0x82>
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	2202      	movs	r2, #2
 80283b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80283bc:	e013      	b.n	80283e6 <HAL_TIM_PWM_Start+0xaa>
 80283be:	683b      	ldr	r3, [r7, #0]
 80283c0:	2b04      	cmp	r3, #4
 80283c2:	d104      	bne.n	80283ce <HAL_TIM_PWM_Start+0x92>
 80283c4:	687b      	ldr	r3, [r7, #4]
 80283c6:	2202      	movs	r2, #2
 80283c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80283cc:	e00b      	b.n	80283e6 <HAL_TIM_PWM_Start+0xaa>
 80283ce:	683b      	ldr	r3, [r7, #0]
 80283d0:	2b08      	cmp	r3, #8
 80283d2:	d104      	bne.n	80283de <HAL_TIM_PWM_Start+0xa2>
 80283d4:	687b      	ldr	r3, [r7, #4]
 80283d6:	2202      	movs	r2, #2
 80283d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80283dc:	e003      	b.n	80283e6 <HAL_TIM_PWM_Start+0xaa>
 80283de:	687b      	ldr	r3, [r7, #4]
 80283e0:	2202      	movs	r2, #2
 80283e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80283e6:	687b      	ldr	r3, [r7, #4]
 80283e8:	681b      	ldr	r3, [r3, #0]
 80283ea:	2201      	movs	r2, #1
 80283ec:	6839      	ldr	r1, [r7, #0]
 80283ee:	4618      	mov	r0, r3
 80283f0:	f001 fb42 	bl	8029a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80283f4:	687b      	ldr	r3, [r7, #4]
 80283f6:	681b      	ldr	r3, [r3, #0]
 80283f8:	4a2d      	ldr	r2, [pc, #180]	; (80284b0 <HAL_TIM_PWM_Start+0x174>)
 80283fa:	4293      	cmp	r3, r2
 80283fc:	d004      	beq.n	8028408 <HAL_TIM_PWM_Start+0xcc>
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	681b      	ldr	r3, [r3, #0]
 8028402:	4a2c      	ldr	r2, [pc, #176]	; (80284b4 <HAL_TIM_PWM_Start+0x178>)
 8028404:	4293      	cmp	r3, r2
 8028406:	d101      	bne.n	802840c <HAL_TIM_PWM_Start+0xd0>
 8028408:	2301      	movs	r3, #1
 802840a:	e000      	b.n	802840e <HAL_TIM_PWM_Start+0xd2>
 802840c:	2300      	movs	r3, #0
 802840e:	2b00      	cmp	r3, #0
 8028410:	d007      	beq.n	8028422 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8028412:	687b      	ldr	r3, [r7, #4]
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028418:	687b      	ldr	r3, [r7, #4]
 802841a:	681b      	ldr	r3, [r3, #0]
 802841c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8028420:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	681b      	ldr	r3, [r3, #0]
 8028426:	4a22      	ldr	r2, [pc, #136]	; (80284b0 <HAL_TIM_PWM_Start+0x174>)
 8028428:	4293      	cmp	r3, r2
 802842a:	d022      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 802842c:	687b      	ldr	r3, [r7, #4]
 802842e:	681b      	ldr	r3, [r3, #0]
 8028430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028434:	d01d      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 8028436:	687b      	ldr	r3, [r7, #4]
 8028438:	681b      	ldr	r3, [r3, #0]
 802843a:	4a1f      	ldr	r2, [pc, #124]	; (80284b8 <HAL_TIM_PWM_Start+0x17c>)
 802843c:	4293      	cmp	r3, r2
 802843e:	d018      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 8028440:	687b      	ldr	r3, [r7, #4]
 8028442:	681b      	ldr	r3, [r3, #0]
 8028444:	4a1d      	ldr	r2, [pc, #116]	; (80284bc <HAL_TIM_PWM_Start+0x180>)
 8028446:	4293      	cmp	r3, r2
 8028448:	d013      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	681b      	ldr	r3, [r3, #0]
 802844e:	4a1c      	ldr	r2, [pc, #112]	; (80284c0 <HAL_TIM_PWM_Start+0x184>)
 8028450:	4293      	cmp	r3, r2
 8028452:	d00e      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 8028454:	687b      	ldr	r3, [r7, #4]
 8028456:	681b      	ldr	r3, [r3, #0]
 8028458:	4a16      	ldr	r2, [pc, #88]	; (80284b4 <HAL_TIM_PWM_Start+0x178>)
 802845a:	4293      	cmp	r3, r2
 802845c:	d009      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 802845e:	687b      	ldr	r3, [r7, #4]
 8028460:	681b      	ldr	r3, [r3, #0]
 8028462:	4a18      	ldr	r2, [pc, #96]	; (80284c4 <HAL_TIM_PWM_Start+0x188>)
 8028464:	4293      	cmp	r3, r2
 8028466:	d004      	beq.n	8028472 <HAL_TIM_PWM_Start+0x136>
 8028468:	687b      	ldr	r3, [r7, #4]
 802846a:	681b      	ldr	r3, [r3, #0]
 802846c:	4a16      	ldr	r2, [pc, #88]	; (80284c8 <HAL_TIM_PWM_Start+0x18c>)
 802846e:	4293      	cmp	r3, r2
 8028470:	d111      	bne.n	8028496 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	681b      	ldr	r3, [r3, #0]
 8028476:	689b      	ldr	r3, [r3, #8]
 8028478:	f003 0307 	and.w	r3, r3, #7
 802847c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802847e:	68fb      	ldr	r3, [r7, #12]
 8028480:	2b06      	cmp	r3, #6
 8028482:	d010      	beq.n	80284a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8028484:	687b      	ldr	r3, [r7, #4]
 8028486:	681b      	ldr	r3, [r3, #0]
 8028488:	681a      	ldr	r2, [r3, #0]
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	681b      	ldr	r3, [r3, #0]
 802848e:	f042 0201 	orr.w	r2, r2, #1
 8028492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028494:	e007      	b.n	80284a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	681b      	ldr	r3, [r3, #0]
 802849a:	681a      	ldr	r2, [r3, #0]
 802849c:	687b      	ldr	r3, [r7, #4]
 802849e:	681b      	ldr	r3, [r3, #0]
 80284a0:	f042 0201 	orr.w	r2, r2, #1
 80284a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80284a6:	2300      	movs	r3, #0
}
 80284a8:	4618      	mov	r0, r3
 80284aa:	3710      	adds	r7, #16
 80284ac:	46bd      	mov	sp, r7
 80284ae:	bd80      	pop	{r7, pc}
 80284b0:	40010000 	.word	0x40010000
 80284b4:	40010400 	.word	0x40010400
 80284b8:	40000400 	.word	0x40000400
 80284bc:	40000800 	.word	0x40000800
 80284c0:	40000c00 	.word	0x40000c00
 80284c4:	40014000 	.word	0x40014000
 80284c8:	40001800 	.word	0x40001800

080284cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80284cc:	b580      	push	{r7, lr}
 80284ce:	b082      	sub	sp, #8
 80284d0:	af00      	add	r7, sp, #0
 80284d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80284d4:	687b      	ldr	r3, [r7, #4]
 80284d6:	2b00      	cmp	r3, #0
 80284d8:	d101      	bne.n	80284de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80284da:	2301      	movs	r3, #1
 80284dc:	e041      	b.n	8028562 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80284de:	687b      	ldr	r3, [r7, #4]
 80284e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80284e4:	b2db      	uxtb	r3, r3
 80284e6:	2b00      	cmp	r3, #0
 80284e8:	d106      	bne.n	80284f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	2200      	movs	r2, #0
 80284ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80284f2:	6878      	ldr	r0, [r7, #4]
 80284f4:	f000 f839 	bl	802856a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80284f8:	687b      	ldr	r3, [r7, #4]
 80284fa:	2202      	movs	r2, #2
 80284fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	681a      	ldr	r2, [r3, #0]
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	3304      	adds	r3, #4
 8028508:	4619      	mov	r1, r3
 802850a:	4610      	mov	r0, r2
 802850c:	f000 fe0e 	bl	802912c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028510:	687b      	ldr	r3, [r7, #4]
 8028512:	2201      	movs	r2, #1
 8028514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	2201      	movs	r2, #1
 802851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028520:	687b      	ldr	r3, [r7, #4]
 8028522:	2201      	movs	r2, #1
 8028524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028528:	687b      	ldr	r3, [r7, #4]
 802852a:	2201      	movs	r2, #1
 802852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028530:	687b      	ldr	r3, [r7, #4]
 8028532:	2201      	movs	r2, #1
 8028534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028538:	687b      	ldr	r3, [r7, #4]
 802853a:	2201      	movs	r2, #1
 802853c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028540:	687b      	ldr	r3, [r7, #4]
 8028542:	2201      	movs	r2, #1
 8028544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	2201      	movs	r2, #1
 802854c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	2201      	movs	r2, #1
 8028554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028558:	687b      	ldr	r3, [r7, #4]
 802855a:	2201      	movs	r2, #1
 802855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028560:	2300      	movs	r3, #0
}
 8028562:	4618      	mov	r0, r3
 8028564:	3708      	adds	r7, #8
 8028566:	46bd      	mov	sp, r7
 8028568:	bd80      	pop	{r7, pc}

0802856a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 802856a:	b480      	push	{r7}
 802856c:	b083      	sub	sp, #12
 802856e:	af00      	add	r7, sp, #0
 8028570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8028572:	bf00      	nop
 8028574:	370c      	adds	r7, #12
 8028576:	46bd      	mov	sp, r7
 8028578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802857c:	4770      	bx	lr
	...

08028580 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028580:	b580      	push	{r7, lr}
 8028582:	b084      	sub	sp, #16
 8028584:	af00      	add	r7, sp, #0
 8028586:	6078      	str	r0, [r7, #4]
 8028588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 802858a:	683b      	ldr	r3, [r7, #0]
 802858c:	2b00      	cmp	r3, #0
 802858e:	d104      	bne.n	802859a <HAL_TIM_IC_Start+0x1a>
 8028590:	687b      	ldr	r3, [r7, #4]
 8028592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028596:	b2db      	uxtb	r3, r3
 8028598:	e013      	b.n	80285c2 <HAL_TIM_IC_Start+0x42>
 802859a:	683b      	ldr	r3, [r7, #0]
 802859c:	2b04      	cmp	r3, #4
 802859e:	d104      	bne.n	80285aa <HAL_TIM_IC_Start+0x2a>
 80285a0:	687b      	ldr	r3, [r7, #4]
 80285a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80285a6:	b2db      	uxtb	r3, r3
 80285a8:	e00b      	b.n	80285c2 <HAL_TIM_IC_Start+0x42>
 80285aa:	683b      	ldr	r3, [r7, #0]
 80285ac:	2b08      	cmp	r3, #8
 80285ae:	d104      	bne.n	80285ba <HAL_TIM_IC_Start+0x3a>
 80285b0:	687b      	ldr	r3, [r7, #4]
 80285b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80285b6:	b2db      	uxtb	r3, r3
 80285b8:	e003      	b.n	80285c2 <HAL_TIM_IC_Start+0x42>
 80285ba:	687b      	ldr	r3, [r7, #4]
 80285bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80285c0:	b2db      	uxtb	r3, r3
 80285c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80285c4:	683b      	ldr	r3, [r7, #0]
 80285c6:	2b00      	cmp	r3, #0
 80285c8:	d104      	bne.n	80285d4 <HAL_TIM_IC_Start+0x54>
 80285ca:	687b      	ldr	r3, [r7, #4]
 80285cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80285d0:	b2db      	uxtb	r3, r3
 80285d2:	e013      	b.n	80285fc <HAL_TIM_IC_Start+0x7c>
 80285d4:	683b      	ldr	r3, [r7, #0]
 80285d6:	2b04      	cmp	r3, #4
 80285d8:	d104      	bne.n	80285e4 <HAL_TIM_IC_Start+0x64>
 80285da:	687b      	ldr	r3, [r7, #4]
 80285dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80285e0:	b2db      	uxtb	r3, r3
 80285e2:	e00b      	b.n	80285fc <HAL_TIM_IC_Start+0x7c>
 80285e4:	683b      	ldr	r3, [r7, #0]
 80285e6:	2b08      	cmp	r3, #8
 80285e8:	d104      	bne.n	80285f4 <HAL_TIM_IC_Start+0x74>
 80285ea:	687b      	ldr	r3, [r7, #4]
 80285ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80285f0:	b2db      	uxtb	r3, r3
 80285f2:	e003      	b.n	80285fc <HAL_TIM_IC_Start+0x7c>
 80285f4:	687b      	ldr	r3, [r7, #4]
 80285f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80285fa:	b2db      	uxtb	r3, r3
 80285fc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80285fe:	7bfb      	ldrb	r3, [r7, #15]
 8028600:	2b01      	cmp	r3, #1
 8028602:	d102      	bne.n	802860a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8028604:	7bbb      	ldrb	r3, [r7, #14]
 8028606:	2b01      	cmp	r3, #1
 8028608:	d001      	beq.n	802860e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 802860a:	2301      	movs	r3, #1
 802860c:	e081      	b.n	8028712 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802860e:	683b      	ldr	r3, [r7, #0]
 8028610:	2b00      	cmp	r3, #0
 8028612:	d104      	bne.n	802861e <HAL_TIM_IC_Start+0x9e>
 8028614:	687b      	ldr	r3, [r7, #4]
 8028616:	2202      	movs	r2, #2
 8028618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802861c:	e013      	b.n	8028646 <HAL_TIM_IC_Start+0xc6>
 802861e:	683b      	ldr	r3, [r7, #0]
 8028620:	2b04      	cmp	r3, #4
 8028622:	d104      	bne.n	802862e <HAL_TIM_IC_Start+0xae>
 8028624:	687b      	ldr	r3, [r7, #4]
 8028626:	2202      	movs	r2, #2
 8028628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802862c:	e00b      	b.n	8028646 <HAL_TIM_IC_Start+0xc6>
 802862e:	683b      	ldr	r3, [r7, #0]
 8028630:	2b08      	cmp	r3, #8
 8028632:	d104      	bne.n	802863e <HAL_TIM_IC_Start+0xbe>
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	2202      	movs	r2, #2
 8028638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802863c:	e003      	b.n	8028646 <HAL_TIM_IC_Start+0xc6>
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	2202      	movs	r2, #2
 8028642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028646:	683b      	ldr	r3, [r7, #0]
 8028648:	2b00      	cmp	r3, #0
 802864a:	d104      	bne.n	8028656 <HAL_TIM_IC_Start+0xd6>
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	2202      	movs	r2, #2
 8028650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028654:	e013      	b.n	802867e <HAL_TIM_IC_Start+0xfe>
 8028656:	683b      	ldr	r3, [r7, #0]
 8028658:	2b04      	cmp	r3, #4
 802865a:	d104      	bne.n	8028666 <HAL_TIM_IC_Start+0xe6>
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	2202      	movs	r2, #2
 8028660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028664:	e00b      	b.n	802867e <HAL_TIM_IC_Start+0xfe>
 8028666:	683b      	ldr	r3, [r7, #0]
 8028668:	2b08      	cmp	r3, #8
 802866a:	d104      	bne.n	8028676 <HAL_TIM_IC_Start+0xf6>
 802866c:	687b      	ldr	r3, [r7, #4]
 802866e:	2202      	movs	r2, #2
 8028670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028674:	e003      	b.n	802867e <HAL_TIM_IC_Start+0xfe>
 8028676:	687b      	ldr	r3, [r7, #4]
 8028678:	2202      	movs	r2, #2
 802867a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802867e:	687b      	ldr	r3, [r7, #4]
 8028680:	681b      	ldr	r3, [r3, #0]
 8028682:	2201      	movs	r2, #1
 8028684:	6839      	ldr	r1, [r7, #0]
 8028686:	4618      	mov	r0, r3
 8028688:	f001 f9f6 	bl	8029a78 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802868c:	687b      	ldr	r3, [r7, #4]
 802868e:	681b      	ldr	r3, [r3, #0]
 8028690:	4a22      	ldr	r2, [pc, #136]	; (802871c <HAL_TIM_IC_Start+0x19c>)
 8028692:	4293      	cmp	r3, r2
 8028694:	d022      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	681b      	ldr	r3, [r3, #0]
 802869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802869e:	d01d      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286a0:	687b      	ldr	r3, [r7, #4]
 80286a2:	681b      	ldr	r3, [r3, #0]
 80286a4:	4a1e      	ldr	r2, [pc, #120]	; (8028720 <HAL_TIM_IC_Start+0x1a0>)
 80286a6:	4293      	cmp	r3, r2
 80286a8:	d018      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286aa:	687b      	ldr	r3, [r7, #4]
 80286ac:	681b      	ldr	r3, [r3, #0]
 80286ae:	4a1d      	ldr	r2, [pc, #116]	; (8028724 <HAL_TIM_IC_Start+0x1a4>)
 80286b0:	4293      	cmp	r3, r2
 80286b2:	d013      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286b4:	687b      	ldr	r3, [r7, #4]
 80286b6:	681b      	ldr	r3, [r3, #0]
 80286b8:	4a1b      	ldr	r2, [pc, #108]	; (8028728 <HAL_TIM_IC_Start+0x1a8>)
 80286ba:	4293      	cmp	r3, r2
 80286bc:	d00e      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286be:	687b      	ldr	r3, [r7, #4]
 80286c0:	681b      	ldr	r3, [r3, #0]
 80286c2:	4a1a      	ldr	r2, [pc, #104]	; (802872c <HAL_TIM_IC_Start+0x1ac>)
 80286c4:	4293      	cmp	r3, r2
 80286c6:	d009      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	681b      	ldr	r3, [r3, #0]
 80286cc:	4a18      	ldr	r2, [pc, #96]	; (8028730 <HAL_TIM_IC_Start+0x1b0>)
 80286ce:	4293      	cmp	r3, r2
 80286d0:	d004      	beq.n	80286dc <HAL_TIM_IC_Start+0x15c>
 80286d2:	687b      	ldr	r3, [r7, #4]
 80286d4:	681b      	ldr	r3, [r3, #0]
 80286d6:	4a17      	ldr	r2, [pc, #92]	; (8028734 <HAL_TIM_IC_Start+0x1b4>)
 80286d8:	4293      	cmp	r3, r2
 80286da:	d111      	bne.n	8028700 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	681b      	ldr	r3, [r3, #0]
 80286e0:	689b      	ldr	r3, [r3, #8]
 80286e2:	f003 0307 	and.w	r3, r3, #7
 80286e6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80286e8:	68bb      	ldr	r3, [r7, #8]
 80286ea:	2b06      	cmp	r3, #6
 80286ec:	d010      	beq.n	8028710 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	681a      	ldr	r2, [r3, #0]
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	681b      	ldr	r3, [r3, #0]
 80286f8:	f042 0201 	orr.w	r2, r2, #1
 80286fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80286fe:	e007      	b.n	8028710 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	681b      	ldr	r3, [r3, #0]
 8028704:	681a      	ldr	r2, [r3, #0]
 8028706:	687b      	ldr	r3, [r7, #4]
 8028708:	681b      	ldr	r3, [r3, #0]
 802870a:	f042 0201 	orr.w	r2, r2, #1
 802870e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028710:	2300      	movs	r3, #0
}
 8028712:	4618      	mov	r0, r3
 8028714:	3710      	adds	r7, #16
 8028716:	46bd      	mov	sp, r7
 8028718:	bd80      	pop	{r7, pc}
 802871a:	bf00      	nop
 802871c:	40010000 	.word	0x40010000
 8028720:	40000400 	.word	0x40000400
 8028724:	40000800 	.word	0x40000800
 8028728:	40000c00 	.word	0x40000c00
 802872c:	40010400 	.word	0x40010400
 8028730:	40014000 	.word	0x40014000
 8028734:	40001800 	.word	0x40001800

08028738 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028738:	b580      	push	{r7, lr}
 802873a:	b084      	sub	sp, #16
 802873c:	af00      	add	r7, sp, #0
 802873e:	6078      	str	r0, [r7, #4]
 8028740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028742:	2300      	movs	r3, #0
 8028744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8028746:	683b      	ldr	r3, [r7, #0]
 8028748:	2b00      	cmp	r3, #0
 802874a:	d104      	bne.n	8028756 <HAL_TIM_IC_Start_IT+0x1e>
 802874c:	687b      	ldr	r3, [r7, #4]
 802874e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028752:	b2db      	uxtb	r3, r3
 8028754:	e013      	b.n	802877e <HAL_TIM_IC_Start_IT+0x46>
 8028756:	683b      	ldr	r3, [r7, #0]
 8028758:	2b04      	cmp	r3, #4
 802875a:	d104      	bne.n	8028766 <HAL_TIM_IC_Start_IT+0x2e>
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8028762:	b2db      	uxtb	r3, r3
 8028764:	e00b      	b.n	802877e <HAL_TIM_IC_Start_IT+0x46>
 8028766:	683b      	ldr	r3, [r7, #0]
 8028768:	2b08      	cmp	r3, #8
 802876a:	d104      	bne.n	8028776 <HAL_TIM_IC_Start_IT+0x3e>
 802876c:	687b      	ldr	r3, [r7, #4]
 802876e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028772:	b2db      	uxtb	r3, r3
 8028774:	e003      	b.n	802877e <HAL_TIM_IC_Start_IT+0x46>
 8028776:	687b      	ldr	r3, [r7, #4]
 8028778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802877c:	b2db      	uxtb	r3, r3
 802877e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8028780:	683b      	ldr	r3, [r7, #0]
 8028782:	2b00      	cmp	r3, #0
 8028784:	d104      	bne.n	8028790 <HAL_TIM_IC_Start_IT+0x58>
 8028786:	687b      	ldr	r3, [r7, #4]
 8028788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802878c:	b2db      	uxtb	r3, r3
 802878e:	e013      	b.n	80287b8 <HAL_TIM_IC_Start_IT+0x80>
 8028790:	683b      	ldr	r3, [r7, #0]
 8028792:	2b04      	cmp	r3, #4
 8028794:	d104      	bne.n	80287a0 <HAL_TIM_IC_Start_IT+0x68>
 8028796:	687b      	ldr	r3, [r7, #4]
 8028798:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802879c:	b2db      	uxtb	r3, r3
 802879e:	e00b      	b.n	80287b8 <HAL_TIM_IC_Start_IT+0x80>
 80287a0:	683b      	ldr	r3, [r7, #0]
 80287a2:	2b08      	cmp	r3, #8
 80287a4:	d104      	bne.n	80287b0 <HAL_TIM_IC_Start_IT+0x78>
 80287a6:	687b      	ldr	r3, [r7, #4]
 80287a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80287ac:	b2db      	uxtb	r3, r3
 80287ae:	e003      	b.n	80287b8 <HAL_TIM_IC_Start_IT+0x80>
 80287b0:	687b      	ldr	r3, [r7, #4]
 80287b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80287b6:	b2db      	uxtb	r3, r3
 80287b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80287ba:	7bbb      	ldrb	r3, [r7, #14]
 80287bc:	2b01      	cmp	r3, #1
 80287be:	d102      	bne.n	80287c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80287c0:	7b7b      	ldrb	r3, [r7, #13]
 80287c2:	2b01      	cmp	r3, #1
 80287c4:	d001      	beq.n	80287ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80287c6:	2301      	movs	r3, #1
 80287c8:	e0cc      	b.n	8028964 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80287ca:	683b      	ldr	r3, [r7, #0]
 80287cc:	2b00      	cmp	r3, #0
 80287ce:	d104      	bne.n	80287da <HAL_TIM_IC_Start_IT+0xa2>
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	2202      	movs	r2, #2
 80287d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80287d8:	e013      	b.n	8028802 <HAL_TIM_IC_Start_IT+0xca>
 80287da:	683b      	ldr	r3, [r7, #0]
 80287dc:	2b04      	cmp	r3, #4
 80287de:	d104      	bne.n	80287ea <HAL_TIM_IC_Start_IT+0xb2>
 80287e0:	687b      	ldr	r3, [r7, #4]
 80287e2:	2202      	movs	r2, #2
 80287e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80287e8:	e00b      	b.n	8028802 <HAL_TIM_IC_Start_IT+0xca>
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	2b08      	cmp	r3, #8
 80287ee:	d104      	bne.n	80287fa <HAL_TIM_IC_Start_IT+0xc2>
 80287f0:	687b      	ldr	r3, [r7, #4]
 80287f2:	2202      	movs	r2, #2
 80287f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80287f8:	e003      	b.n	8028802 <HAL_TIM_IC_Start_IT+0xca>
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	2202      	movs	r2, #2
 80287fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028802:	683b      	ldr	r3, [r7, #0]
 8028804:	2b00      	cmp	r3, #0
 8028806:	d104      	bne.n	8028812 <HAL_TIM_IC_Start_IT+0xda>
 8028808:	687b      	ldr	r3, [r7, #4]
 802880a:	2202      	movs	r2, #2
 802880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028810:	e013      	b.n	802883a <HAL_TIM_IC_Start_IT+0x102>
 8028812:	683b      	ldr	r3, [r7, #0]
 8028814:	2b04      	cmp	r3, #4
 8028816:	d104      	bne.n	8028822 <HAL_TIM_IC_Start_IT+0xea>
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	2202      	movs	r2, #2
 802881c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028820:	e00b      	b.n	802883a <HAL_TIM_IC_Start_IT+0x102>
 8028822:	683b      	ldr	r3, [r7, #0]
 8028824:	2b08      	cmp	r3, #8
 8028826:	d104      	bne.n	8028832 <HAL_TIM_IC_Start_IT+0xfa>
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	2202      	movs	r2, #2
 802882c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028830:	e003      	b.n	802883a <HAL_TIM_IC_Start_IT+0x102>
 8028832:	687b      	ldr	r3, [r7, #4]
 8028834:	2202      	movs	r2, #2
 8028836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802883a:	683b      	ldr	r3, [r7, #0]
 802883c:	2b0c      	cmp	r3, #12
 802883e:	d841      	bhi.n	80288c4 <HAL_TIM_IC_Start_IT+0x18c>
 8028840:	a201      	add	r2, pc, #4	; (adr r2, 8028848 <HAL_TIM_IC_Start_IT+0x110>)
 8028842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028846:	bf00      	nop
 8028848:	0802887d 	.word	0x0802887d
 802884c:	080288c5 	.word	0x080288c5
 8028850:	080288c5 	.word	0x080288c5
 8028854:	080288c5 	.word	0x080288c5
 8028858:	0802888f 	.word	0x0802888f
 802885c:	080288c5 	.word	0x080288c5
 8028860:	080288c5 	.word	0x080288c5
 8028864:	080288c5 	.word	0x080288c5
 8028868:	080288a1 	.word	0x080288a1
 802886c:	080288c5 	.word	0x080288c5
 8028870:	080288c5 	.word	0x080288c5
 8028874:	080288c5 	.word	0x080288c5
 8028878:	080288b3 	.word	0x080288b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 802887c:	687b      	ldr	r3, [r7, #4]
 802887e:	681b      	ldr	r3, [r3, #0]
 8028880:	68da      	ldr	r2, [r3, #12]
 8028882:	687b      	ldr	r3, [r7, #4]
 8028884:	681b      	ldr	r3, [r3, #0]
 8028886:	f042 0202 	orr.w	r2, r2, #2
 802888a:	60da      	str	r2, [r3, #12]
      break;
 802888c:	e01d      	b.n	80288ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	681b      	ldr	r3, [r3, #0]
 8028892:	68da      	ldr	r2, [r3, #12]
 8028894:	687b      	ldr	r3, [r7, #4]
 8028896:	681b      	ldr	r3, [r3, #0]
 8028898:	f042 0204 	orr.w	r2, r2, #4
 802889c:	60da      	str	r2, [r3, #12]
      break;
 802889e:	e014      	b.n	80288ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80288a0:	687b      	ldr	r3, [r7, #4]
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	68da      	ldr	r2, [r3, #12]
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	681b      	ldr	r3, [r3, #0]
 80288aa:	f042 0208 	orr.w	r2, r2, #8
 80288ae:	60da      	str	r2, [r3, #12]
      break;
 80288b0:	e00b      	b.n	80288ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80288b2:	687b      	ldr	r3, [r7, #4]
 80288b4:	681b      	ldr	r3, [r3, #0]
 80288b6:	68da      	ldr	r2, [r3, #12]
 80288b8:	687b      	ldr	r3, [r7, #4]
 80288ba:	681b      	ldr	r3, [r3, #0]
 80288bc:	f042 0210 	orr.w	r2, r2, #16
 80288c0:	60da      	str	r2, [r3, #12]
      break;
 80288c2:	e002      	b.n	80288ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80288c4:	2301      	movs	r3, #1
 80288c6:	73fb      	strb	r3, [r7, #15]
      break;
 80288c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80288ca:	7bfb      	ldrb	r3, [r7, #15]
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	d148      	bne.n	8028962 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80288d0:	687b      	ldr	r3, [r7, #4]
 80288d2:	681b      	ldr	r3, [r3, #0]
 80288d4:	2201      	movs	r2, #1
 80288d6:	6839      	ldr	r1, [r7, #0]
 80288d8:	4618      	mov	r0, r3
 80288da:	f001 f8cd 	bl	8029a78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80288de:	687b      	ldr	r3, [r7, #4]
 80288e0:	681b      	ldr	r3, [r3, #0]
 80288e2:	4a22      	ldr	r2, [pc, #136]	; (802896c <HAL_TIM_IC_Start_IT+0x234>)
 80288e4:	4293      	cmp	r3, r2
 80288e6:	d022      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 80288e8:	687b      	ldr	r3, [r7, #4]
 80288ea:	681b      	ldr	r3, [r3, #0]
 80288ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80288f0:	d01d      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 80288f2:	687b      	ldr	r3, [r7, #4]
 80288f4:	681b      	ldr	r3, [r3, #0]
 80288f6:	4a1e      	ldr	r2, [pc, #120]	; (8028970 <HAL_TIM_IC_Start_IT+0x238>)
 80288f8:	4293      	cmp	r3, r2
 80288fa:	d018      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 80288fc:	687b      	ldr	r3, [r7, #4]
 80288fe:	681b      	ldr	r3, [r3, #0]
 8028900:	4a1c      	ldr	r2, [pc, #112]	; (8028974 <HAL_TIM_IC_Start_IT+0x23c>)
 8028902:	4293      	cmp	r3, r2
 8028904:	d013      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 8028906:	687b      	ldr	r3, [r7, #4]
 8028908:	681b      	ldr	r3, [r3, #0]
 802890a:	4a1b      	ldr	r2, [pc, #108]	; (8028978 <HAL_TIM_IC_Start_IT+0x240>)
 802890c:	4293      	cmp	r3, r2
 802890e:	d00e      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	681b      	ldr	r3, [r3, #0]
 8028914:	4a19      	ldr	r2, [pc, #100]	; (802897c <HAL_TIM_IC_Start_IT+0x244>)
 8028916:	4293      	cmp	r3, r2
 8028918:	d009      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	681b      	ldr	r3, [r3, #0]
 802891e:	4a18      	ldr	r2, [pc, #96]	; (8028980 <HAL_TIM_IC_Start_IT+0x248>)
 8028920:	4293      	cmp	r3, r2
 8028922:	d004      	beq.n	802892e <HAL_TIM_IC_Start_IT+0x1f6>
 8028924:	687b      	ldr	r3, [r7, #4]
 8028926:	681b      	ldr	r3, [r3, #0]
 8028928:	4a16      	ldr	r2, [pc, #88]	; (8028984 <HAL_TIM_IC_Start_IT+0x24c>)
 802892a:	4293      	cmp	r3, r2
 802892c:	d111      	bne.n	8028952 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802892e:	687b      	ldr	r3, [r7, #4]
 8028930:	681b      	ldr	r3, [r3, #0]
 8028932:	689b      	ldr	r3, [r3, #8]
 8028934:	f003 0307 	and.w	r3, r3, #7
 8028938:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802893a:	68bb      	ldr	r3, [r7, #8]
 802893c:	2b06      	cmp	r3, #6
 802893e:	d010      	beq.n	8028962 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8028940:	687b      	ldr	r3, [r7, #4]
 8028942:	681b      	ldr	r3, [r3, #0]
 8028944:	681a      	ldr	r2, [r3, #0]
 8028946:	687b      	ldr	r3, [r7, #4]
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	f042 0201 	orr.w	r2, r2, #1
 802894e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028950:	e007      	b.n	8028962 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	681b      	ldr	r3, [r3, #0]
 8028956:	681a      	ldr	r2, [r3, #0]
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	681b      	ldr	r3, [r3, #0]
 802895c:	f042 0201 	orr.w	r2, r2, #1
 8028960:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8028962:	7bfb      	ldrb	r3, [r7, #15]
}
 8028964:	4618      	mov	r0, r3
 8028966:	3710      	adds	r7, #16
 8028968:	46bd      	mov	sp, r7
 802896a:	bd80      	pop	{r7, pc}
 802896c:	40010000 	.word	0x40010000
 8028970:	40000400 	.word	0x40000400
 8028974:	40000800 	.word	0x40000800
 8028978:	40000c00 	.word	0x40000c00
 802897c:	40010400 	.word	0x40010400
 8028980:	40014000 	.word	0x40014000
 8028984:	40001800 	.word	0x40001800

08028988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028988:	b580      	push	{r7, lr}
 802898a:	b082      	sub	sp, #8
 802898c:	af00      	add	r7, sp, #0
 802898e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	681b      	ldr	r3, [r3, #0]
 8028994:	691b      	ldr	r3, [r3, #16]
 8028996:	f003 0302 	and.w	r3, r3, #2
 802899a:	2b02      	cmp	r3, #2
 802899c:	d122      	bne.n	80289e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802899e:	687b      	ldr	r3, [r7, #4]
 80289a0:	681b      	ldr	r3, [r3, #0]
 80289a2:	68db      	ldr	r3, [r3, #12]
 80289a4:	f003 0302 	and.w	r3, r3, #2
 80289a8:	2b02      	cmp	r3, #2
 80289aa:	d11b      	bne.n	80289e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80289ac:	687b      	ldr	r3, [r7, #4]
 80289ae:	681b      	ldr	r3, [r3, #0]
 80289b0:	f06f 0202 	mvn.w	r2, #2
 80289b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80289b6:	687b      	ldr	r3, [r7, #4]
 80289b8:	2201      	movs	r2, #1
 80289ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80289bc:	687b      	ldr	r3, [r7, #4]
 80289be:	681b      	ldr	r3, [r3, #0]
 80289c0:	699b      	ldr	r3, [r3, #24]
 80289c2:	f003 0303 	and.w	r3, r3, #3
 80289c6:	2b00      	cmp	r3, #0
 80289c8:	d003      	beq.n	80289d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80289ca:	6878      	ldr	r0, [r7, #4]
 80289cc:	f7eb fcb0 	bl	8014330 <HAL_TIM_IC_CaptureCallback>
 80289d0:	e005      	b.n	80289de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80289d2:	6878      	ldr	r0, [r7, #4]
 80289d4:	f000 fb8c 	bl	80290f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80289d8:	6878      	ldr	r0, [r7, #4]
 80289da:	f000 fb93 	bl	8029104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80289de:	687b      	ldr	r3, [r7, #4]
 80289e0:	2200      	movs	r2, #0
 80289e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80289e4:	687b      	ldr	r3, [r7, #4]
 80289e6:	681b      	ldr	r3, [r3, #0]
 80289e8:	691b      	ldr	r3, [r3, #16]
 80289ea:	f003 0304 	and.w	r3, r3, #4
 80289ee:	2b04      	cmp	r3, #4
 80289f0:	d122      	bne.n	8028a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80289f2:	687b      	ldr	r3, [r7, #4]
 80289f4:	681b      	ldr	r3, [r3, #0]
 80289f6:	68db      	ldr	r3, [r3, #12]
 80289f8:	f003 0304 	and.w	r3, r3, #4
 80289fc:	2b04      	cmp	r3, #4
 80289fe:	d11b      	bne.n	8028a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028a00:	687b      	ldr	r3, [r7, #4]
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	f06f 0204 	mvn.w	r2, #4
 8028a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028a0a:	687b      	ldr	r3, [r7, #4]
 8028a0c:	2202      	movs	r2, #2
 8028a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028a10:	687b      	ldr	r3, [r7, #4]
 8028a12:	681b      	ldr	r3, [r3, #0]
 8028a14:	699b      	ldr	r3, [r3, #24]
 8028a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028a1a:	2b00      	cmp	r3, #0
 8028a1c:	d003      	beq.n	8028a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028a1e:	6878      	ldr	r0, [r7, #4]
 8028a20:	f7eb fc86 	bl	8014330 <HAL_TIM_IC_CaptureCallback>
 8028a24:	e005      	b.n	8028a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028a26:	6878      	ldr	r0, [r7, #4]
 8028a28:	f000 fb62 	bl	80290f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028a2c:	6878      	ldr	r0, [r7, #4]
 8028a2e:	f000 fb69 	bl	8029104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028a32:	687b      	ldr	r3, [r7, #4]
 8028a34:	2200      	movs	r2, #0
 8028a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028a38:	687b      	ldr	r3, [r7, #4]
 8028a3a:	681b      	ldr	r3, [r3, #0]
 8028a3c:	691b      	ldr	r3, [r3, #16]
 8028a3e:	f003 0308 	and.w	r3, r3, #8
 8028a42:	2b08      	cmp	r3, #8
 8028a44:	d122      	bne.n	8028a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	681b      	ldr	r3, [r3, #0]
 8028a4a:	68db      	ldr	r3, [r3, #12]
 8028a4c:	f003 0308 	and.w	r3, r3, #8
 8028a50:	2b08      	cmp	r3, #8
 8028a52:	d11b      	bne.n	8028a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028a54:	687b      	ldr	r3, [r7, #4]
 8028a56:	681b      	ldr	r3, [r3, #0]
 8028a58:	f06f 0208 	mvn.w	r2, #8
 8028a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028a5e:	687b      	ldr	r3, [r7, #4]
 8028a60:	2204      	movs	r2, #4
 8028a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028a64:	687b      	ldr	r3, [r7, #4]
 8028a66:	681b      	ldr	r3, [r3, #0]
 8028a68:	69db      	ldr	r3, [r3, #28]
 8028a6a:	f003 0303 	and.w	r3, r3, #3
 8028a6e:	2b00      	cmp	r3, #0
 8028a70:	d003      	beq.n	8028a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028a72:	6878      	ldr	r0, [r7, #4]
 8028a74:	f7eb fc5c 	bl	8014330 <HAL_TIM_IC_CaptureCallback>
 8028a78:	e005      	b.n	8028a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028a7a:	6878      	ldr	r0, [r7, #4]
 8028a7c:	f000 fb38 	bl	80290f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028a80:	6878      	ldr	r0, [r7, #4]
 8028a82:	f000 fb3f 	bl	8029104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	2200      	movs	r2, #0
 8028a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028a8c:	687b      	ldr	r3, [r7, #4]
 8028a8e:	681b      	ldr	r3, [r3, #0]
 8028a90:	691b      	ldr	r3, [r3, #16]
 8028a92:	f003 0310 	and.w	r3, r3, #16
 8028a96:	2b10      	cmp	r3, #16
 8028a98:	d122      	bne.n	8028ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	681b      	ldr	r3, [r3, #0]
 8028a9e:	68db      	ldr	r3, [r3, #12]
 8028aa0:	f003 0310 	and.w	r3, r3, #16
 8028aa4:	2b10      	cmp	r3, #16
 8028aa6:	d11b      	bne.n	8028ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028aa8:	687b      	ldr	r3, [r7, #4]
 8028aaa:	681b      	ldr	r3, [r3, #0]
 8028aac:	f06f 0210 	mvn.w	r2, #16
 8028ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028ab2:	687b      	ldr	r3, [r7, #4]
 8028ab4:	2208      	movs	r2, #8
 8028ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028ab8:	687b      	ldr	r3, [r7, #4]
 8028aba:	681b      	ldr	r3, [r3, #0]
 8028abc:	69db      	ldr	r3, [r3, #28]
 8028abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028ac2:	2b00      	cmp	r3, #0
 8028ac4:	d003      	beq.n	8028ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028ac6:	6878      	ldr	r0, [r7, #4]
 8028ac8:	f7eb fc32 	bl	8014330 <HAL_TIM_IC_CaptureCallback>
 8028acc:	e005      	b.n	8028ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028ace:	6878      	ldr	r0, [r7, #4]
 8028ad0:	f000 fb0e 	bl	80290f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028ad4:	6878      	ldr	r0, [r7, #4]
 8028ad6:	f000 fb15 	bl	8029104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028ada:	687b      	ldr	r3, [r7, #4]
 8028adc:	2200      	movs	r2, #0
 8028ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	681b      	ldr	r3, [r3, #0]
 8028ae4:	691b      	ldr	r3, [r3, #16]
 8028ae6:	f003 0301 	and.w	r3, r3, #1
 8028aea:	2b01      	cmp	r3, #1
 8028aec:	d10e      	bne.n	8028b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	681b      	ldr	r3, [r3, #0]
 8028af2:	68db      	ldr	r3, [r3, #12]
 8028af4:	f003 0301 	and.w	r3, r3, #1
 8028af8:	2b01      	cmp	r3, #1
 8028afa:	d107      	bne.n	8028b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028afc:	687b      	ldr	r3, [r7, #4]
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	f06f 0201 	mvn.w	r2, #1
 8028b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028b06:	6878      	ldr	r0, [r7, #4]
 8028b08:	f7ee fa76 	bl	8016ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	691b      	ldr	r3, [r3, #16]
 8028b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028b16:	2b80      	cmp	r3, #128	; 0x80
 8028b18:	d10e      	bne.n	8028b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8028b1a:	687b      	ldr	r3, [r7, #4]
 8028b1c:	681b      	ldr	r3, [r3, #0]
 8028b1e:	68db      	ldr	r3, [r3, #12]
 8028b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028b24:	2b80      	cmp	r3, #128	; 0x80
 8028b26:	d107      	bne.n	8028b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	681b      	ldr	r3, [r3, #0]
 8028b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8028b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8028b32:	6878      	ldr	r0, [r7, #4]
 8028b34:	f001 f89e 	bl	8029c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8028b38:	687b      	ldr	r3, [r7, #4]
 8028b3a:	681b      	ldr	r3, [r3, #0]
 8028b3c:	691b      	ldr	r3, [r3, #16]
 8028b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028b42:	2b40      	cmp	r3, #64	; 0x40
 8028b44:	d10e      	bne.n	8028b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8028b46:	687b      	ldr	r3, [r7, #4]
 8028b48:	681b      	ldr	r3, [r3, #0]
 8028b4a:	68db      	ldr	r3, [r3, #12]
 8028b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028b50:	2b40      	cmp	r3, #64	; 0x40
 8028b52:	d107      	bne.n	8028b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8028b54:	687b      	ldr	r3, [r7, #4]
 8028b56:	681b      	ldr	r3, [r3, #0]
 8028b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8028b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8028b5e:	6878      	ldr	r0, [r7, #4]
 8028b60:	f000 fada 	bl	8029118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028b64:	687b      	ldr	r3, [r7, #4]
 8028b66:	681b      	ldr	r3, [r3, #0]
 8028b68:	691b      	ldr	r3, [r3, #16]
 8028b6a:	f003 0320 	and.w	r3, r3, #32
 8028b6e:	2b20      	cmp	r3, #32
 8028b70:	d10e      	bne.n	8028b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028b72:	687b      	ldr	r3, [r7, #4]
 8028b74:	681b      	ldr	r3, [r3, #0]
 8028b76:	68db      	ldr	r3, [r3, #12]
 8028b78:	f003 0320 	and.w	r3, r3, #32
 8028b7c:	2b20      	cmp	r3, #32
 8028b7e:	d107      	bne.n	8028b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028b80:	687b      	ldr	r3, [r7, #4]
 8028b82:	681b      	ldr	r3, [r3, #0]
 8028b84:	f06f 0220 	mvn.w	r2, #32
 8028b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8028b8a:	6878      	ldr	r0, [r7, #4]
 8028b8c:	f001 f868 	bl	8029c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028b90:	bf00      	nop
 8028b92:	3708      	adds	r7, #8
 8028b94:	46bd      	mov	sp, r7
 8028b96:	bd80      	pop	{r7, pc}

08028b98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8028b98:	b580      	push	{r7, lr}
 8028b9a:	b086      	sub	sp, #24
 8028b9c:	af00      	add	r7, sp, #0
 8028b9e:	60f8      	str	r0, [r7, #12]
 8028ba0:	60b9      	str	r1, [r7, #8]
 8028ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028ba4:	2300      	movs	r3, #0
 8028ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028ba8:	68fb      	ldr	r3, [r7, #12]
 8028baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028bae:	2b01      	cmp	r3, #1
 8028bb0:	d101      	bne.n	8028bb6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8028bb2:	2302      	movs	r3, #2
 8028bb4:	e088      	b.n	8028cc8 <HAL_TIM_IC_ConfigChannel+0x130>
 8028bb6:	68fb      	ldr	r3, [r7, #12]
 8028bb8:	2201      	movs	r2, #1
 8028bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8028bbe:	687b      	ldr	r3, [r7, #4]
 8028bc0:	2b00      	cmp	r3, #0
 8028bc2:	d11b      	bne.n	8028bfc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	6818      	ldr	r0, [r3, #0]
 8028bc8:	68bb      	ldr	r3, [r7, #8]
 8028bca:	6819      	ldr	r1, [r3, #0]
 8028bcc:	68bb      	ldr	r3, [r7, #8]
 8028bce:	685a      	ldr	r2, [r3, #4]
 8028bd0:	68bb      	ldr	r3, [r7, #8]
 8028bd2:	68db      	ldr	r3, [r3, #12]
 8028bd4:	f000 fd8c 	bl	80296f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	699a      	ldr	r2, [r3, #24]
 8028bde:	68fb      	ldr	r3, [r7, #12]
 8028be0:	681b      	ldr	r3, [r3, #0]
 8028be2:	f022 020c 	bic.w	r2, r2, #12
 8028be6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8028be8:	68fb      	ldr	r3, [r7, #12]
 8028bea:	681b      	ldr	r3, [r3, #0]
 8028bec:	6999      	ldr	r1, [r3, #24]
 8028bee:	68bb      	ldr	r3, [r7, #8]
 8028bf0:	689a      	ldr	r2, [r3, #8]
 8028bf2:	68fb      	ldr	r3, [r7, #12]
 8028bf4:	681b      	ldr	r3, [r3, #0]
 8028bf6:	430a      	orrs	r2, r1
 8028bf8:	619a      	str	r2, [r3, #24]
 8028bfa:	e060      	b.n	8028cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8028bfc:	687b      	ldr	r3, [r7, #4]
 8028bfe:	2b04      	cmp	r3, #4
 8028c00:	d11c      	bne.n	8028c3c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8028c02:	68fb      	ldr	r3, [r7, #12]
 8028c04:	6818      	ldr	r0, [r3, #0]
 8028c06:	68bb      	ldr	r3, [r7, #8]
 8028c08:	6819      	ldr	r1, [r3, #0]
 8028c0a:	68bb      	ldr	r3, [r7, #8]
 8028c0c:	685a      	ldr	r2, [r3, #4]
 8028c0e:	68bb      	ldr	r3, [r7, #8]
 8028c10:	68db      	ldr	r3, [r3, #12]
 8028c12:	f000 fe10 	bl	8029836 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8028c16:	68fb      	ldr	r3, [r7, #12]
 8028c18:	681b      	ldr	r3, [r3, #0]
 8028c1a:	699a      	ldr	r2, [r3, #24]
 8028c1c:	68fb      	ldr	r3, [r7, #12]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028c24:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8028c26:	68fb      	ldr	r3, [r7, #12]
 8028c28:	681b      	ldr	r3, [r3, #0]
 8028c2a:	6999      	ldr	r1, [r3, #24]
 8028c2c:	68bb      	ldr	r3, [r7, #8]
 8028c2e:	689b      	ldr	r3, [r3, #8]
 8028c30:	021a      	lsls	r2, r3, #8
 8028c32:	68fb      	ldr	r3, [r7, #12]
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	430a      	orrs	r2, r1
 8028c38:	619a      	str	r2, [r3, #24]
 8028c3a:	e040      	b.n	8028cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8028c3c:	687b      	ldr	r3, [r7, #4]
 8028c3e:	2b08      	cmp	r3, #8
 8028c40:	d11b      	bne.n	8028c7a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8028c42:	68fb      	ldr	r3, [r7, #12]
 8028c44:	6818      	ldr	r0, [r3, #0]
 8028c46:	68bb      	ldr	r3, [r7, #8]
 8028c48:	6819      	ldr	r1, [r3, #0]
 8028c4a:	68bb      	ldr	r3, [r7, #8]
 8028c4c:	685a      	ldr	r2, [r3, #4]
 8028c4e:	68bb      	ldr	r3, [r7, #8]
 8028c50:	68db      	ldr	r3, [r3, #12]
 8028c52:	f000 fe5d 	bl	8029910 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8028c56:	68fb      	ldr	r3, [r7, #12]
 8028c58:	681b      	ldr	r3, [r3, #0]
 8028c5a:	69da      	ldr	r2, [r3, #28]
 8028c5c:	68fb      	ldr	r3, [r7, #12]
 8028c5e:	681b      	ldr	r3, [r3, #0]
 8028c60:	f022 020c 	bic.w	r2, r2, #12
 8028c64:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8028c66:	68fb      	ldr	r3, [r7, #12]
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	69d9      	ldr	r1, [r3, #28]
 8028c6c:	68bb      	ldr	r3, [r7, #8]
 8028c6e:	689a      	ldr	r2, [r3, #8]
 8028c70:	68fb      	ldr	r3, [r7, #12]
 8028c72:	681b      	ldr	r3, [r3, #0]
 8028c74:	430a      	orrs	r2, r1
 8028c76:	61da      	str	r2, [r3, #28]
 8028c78:	e021      	b.n	8028cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8028c7a:	687b      	ldr	r3, [r7, #4]
 8028c7c:	2b0c      	cmp	r3, #12
 8028c7e:	d11c      	bne.n	8028cba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	6818      	ldr	r0, [r3, #0]
 8028c84:	68bb      	ldr	r3, [r7, #8]
 8028c86:	6819      	ldr	r1, [r3, #0]
 8028c88:	68bb      	ldr	r3, [r7, #8]
 8028c8a:	685a      	ldr	r2, [r3, #4]
 8028c8c:	68bb      	ldr	r3, [r7, #8]
 8028c8e:	68db      	ldr	r3, [r3, #12]
 8028c90:	f000 fe7a 	bl	8029988 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8028c94:	68fb      	ldr	r3, [r7, #12]
 8028c96:	681b      	ldr	r3, [r3, #0]
 8028c98:	69da      	ldr	r2, [r3, #28]
 8028c9a:	68fb      	ldr	r3, [r7, #12]
 8028c9c:	681b      	ldr	r3, [r3, #0]
 8028c9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028ca2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	69d9      	ldr	r1, [r3, #28]
 8028caa:	68bb      	ldr	r3, [r7, #8]
 8028cac:	689b      	ldr	r3, [r3, #8]
 8028cae:	021a      	lsls	r2, r3, #8
 8028cb0:	68fb      	ldr	r3, [r7, #12]
 8028cb2:	681b      	ldr	r3, [r3, #0]
 8028cb4:	430a      	orrs	r2, r1
 8028cb6:	61da      	str	r2, [r3, #28]
 8028cb8:	e001      	b.n	8028cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8028cba:	2301      	movs	r3, #1
 8028cbc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	2200      	movs	r2, #0
 8028cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8028cc8:	4618      	mov	r0, r3
 8028cca:	3718      	adds	r7, #24
 8028ccc:	46bd      	mov	sp, r7
 8028cce:	bd80      	pop	{r7, pc}

08028cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8028cd0:	b580      	push	{r7, lr}
 8028cd2:	b086      	sub	sp, #24
 8028cd4:	af00      	add	r7, sp, #0
 8028cd6:	60f8      	str	r0, [r7, #12]
 8028cd8:	60b9      	str	r1, [r7, #8]
 8028cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028cdc:	2300      	movs	r3, #0
 8028cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028ce0:	68fb      	ldr	r3, [r7, #12]
 8028ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028ce6:	2b01      	cmp	r3, #1
 8028ce8:	d101      	bne.n	8028cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8028cea:	2302      	movs	r3, #2
 8028cec:	e0ae      	b.n	8028e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	2201      	movs	r2, #1
 8028cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028cf6:	687b      	ldr	r3, [r7, #4]
 8028cf8:	2b0c      	cmp	r3, #12
 8028cfa:	f200 809f 	bhi.w	8028e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8028cfe:	a201      	add	r2, pc, #4	; (adr r2, 8028d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8028d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028d04:	08028d39 	.word	0x08028d39
 8028d08:	08028e3d 	.word	0x08028e3d
 8028d0c:	08028e3d 	.word	0x08028e3d
 8028d10:	08028e3d 	.word	0x08028e3d
 8028d14:	08028d79 	.word	0x08028d79
 8028d18:	08028e3d 	.word	0x08028e3d
 8028d1c:	08028e3d 	.word	0x08028e3d
 8028d20:	08028e3d 	.word	0x08028e3d
 8028d24:	08028dbb 	.word	0x08028dbb
 8028d28:	08028e3d 	.word	0x08028e3d
 8028d2c:	08028e3d 	.word	0x08028e3d
 8028d30:	08028e3d 	.word	0x08028e3d
 8028d34:	08028dfb 	.word	0x08028dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	681b      	ldr	r3, [r3, #0]
 8028d3c:	68b9      	ldr	r1, [r7, #8]
 8028d3e:	4618      	mov	r0, r3
 8028d40:	f000 fa94 	bl	802926c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	681b      	ldr	r3, [r3, #0]
 8028d48:	699a      	ldr	r2, [r3, #24]
 8028d4a:	68fb      	ldr	r3, [r7, #12]
 8028d4c:	681b      	ldr	r3, [r3, #0]
 8028d4e:	f042 0208 	orr.w	r2, r2, #8
 8028d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8028d54:	68fb      	ldr	r3, [r7, #12]
 8028d56:	681b      	ldr	r3, [r3, #0]
 8028d58:	699a      	ldr	r2, [r3, #24]
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	681b      	ldr	r3, [r3, #0]
 8028d5e:	f022 0204 	bic.w	r2, r2, #4
 8028d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8028d64:	68fb      	ldr	r3, [r7, #12]
 8028d66:	681b      	ldr	r3, [r3, #0]
 8028d68:	6999      	ldr	r1, [r3, #24]
 8028d6a:	68bb      	ldr	r3, [r7, #8]
 8028d6c:	691a      	ldr	r2, [r3, #16]
 8028d6e:	68fb      	ldr	r3, [r7, #12]
 8028d70:	681b      	ldr	r3, [r3, #0]
 8028d72:	430a      	orrs	r2, r1
 8028d74:	619a      	str	r2, [r3, #24]
      break;
 8028d76:	e064      	b.n	8028e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	681b      	ldr	r3, [r3, #0]
 8028d7c:	68b9      	ldr	r1, [r7, #8]
 8028d7e:	4618      	mov	r0, r3
 8028d80:	f000 fae4 	bl	802934c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	681b      	ldr	r3, [r3, #0]
 8028d88:	699a      	ldr	r2, [r3, #24]
 8028d8a:	68fb      	ldr	r3, [r7, #12]
 8028d8c:	681b      	ldr	r3, [r3, #0]
 8028d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8028d94:	68fb      	ldr	r3, [r7, #12]
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	699a      	ldr	r2, [r3, #24]
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	681b      	ldr	r3, [r3, #0]
 8028d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	6999      	ldr	r1, [r3, #24]
 8028daa:	68bb      	ldr	r3, [r7, #8]
 8028dac:	691b      	ldr	r3, [r3, #16]
 8028dae:	021a      	lsls	r2, r3, #8
 8028db0:	68fb      	ldr	r3, [r7, #12]
 8028db2:	681b      	ldr	r3, [r3, #0]
 8028db4:	430a      	orrs	r2, r1
 8028db6:	619a      	str	r2, [r3, #24]
      break;
 8028db8:	e043      	b.n	8028e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	681b      	ldr	r3, [r3, #0]
 8028dbe:	68b9      	ldr	r1, [r7, #8]
 8028dc0:	4618      	mov	r0, r3
 8028dc2:	f000 fb39 	bl	8029438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8028dc6:	68fb      	ldr	r3, [r7, #12]
 8028dc8:	681b      	ldr	r3, [r3, #0]
 8028dca:	69da      	ldr	r2, [r3, #28]
 8028dcc:	68fb      	ldr	r3, [r7, #12]
 8028dce:	681b      	ldr	r3, [r3, #0]
 8028dd0:	f042 0208 	orr.w	r2, r2, #8
 8028dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8028dd6:	68fb      	ldr	r3, [r7, #12]
 8028dd8:	681b      	ldr	r3, [r3, #0]
 8028dda:	69da      	ldr	r2, [r3, #28]
 8028ddc:	68fb      	ldr	r3, [r7, #12]
 8028dde:	681b      	ldr	r3, [r3, #0]
 8028de0:	f022 0204 	bic.w	r2, r2, #4
 8028de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8028de6:	68fb      	ldr	r3, [r7, #12]
 8028de8:	681b      	ldr	r3, [r3, #0]
 8028dea:	69d9      	ldr	r1, [r3, #28]
 8028dec:	68bb      	ldr	r3, [r7, #8]
 8028dee:	691a      	ldr	r2, [r3, #16]
 8028df0:	68fb      	ldr	r3, [r7, #12]
 8028df2:	681b      	ldr	r3, [r3, #0]
 8028df4:	430a      	orrs	r2, r1
 8028df6:	61da      	str	r2, [r3, #28]
      break;
 8028df8:	e023      	b.n	8028e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8028dfa:	68fb      	ldr	r3, [r7, #12]
 8028dfc:	681b      	ldr	r3, [r3, #0]
 8028dfe:	68b9      	ldr	r1, [r7, #8]
 8028e00:	4618      	mov	r0, r3
 8028e02:	f000 fb8d 	bl	8029520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8028e06:	68fb      	ldr	r3, [r7, #12]
 8028e08:	681b      	ldr	r3, [r3, #0]
 8028e0a:	69da      	ldr	r2, [r3, #28]
 8028e0c:	68fb      	ldr	r3, [r7, #12]
 8028e0e:	681b      	ldr	r3, [r3, #0]
 8028e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8028e16:	68fb      	ldr	r3, [r7, #12]
 8028e18:	681b      	ldr	r3, [r3, #0]
 8028e1a:	69da      	ldr	r2, [r3, #28]
 8028e1c:	68fb      	ldr	r3, [r7, #12]
 8028e1e:	681b      	ldr	r3, [r3, #0]
 8028e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8028e26:	68fb      	ldr	r3, [r7, #12]
 8028e28:	681b      	ldr	r3, [r3, #0]
 8028e2a:	69d9      	ldr	r1, [r3, #28]
 8028e2c:	68bb      	ldr	r3, [r7, #8]
 8028e2e:	691b      	ldr	r3, [r3, #16]
 8028e30:	021a      	lsls	r2, r3, #8
 8028e32:	68fb      	ldr	r3, [r7, #12]
 8028e34:	681b      	ldr	r3, [r3, #0]
 8028e36:	430a      	orrs	r2, r1
 8028e38:	61da      	str	r2, [r3, #28]
      break;
 8028e3a:	e002      	b.n	8028e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8028e3c:	2301      	movs	r3, #1
 8028e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8028e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	2200      	movs	r2, #0
 8028e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8028e4c:	4618      	mov	r0, r3
 8028e4e:	3718      	adds	r7, #24
 8028e50:	46bd      	mov	sp, r7
 8028e52:	bd80      	pop	{r7, pc}

08028e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028e54:	b580      	push	{r7, lr}
 8028e56:	b084      	sub	sp, #16
 8028e58:	af00      	add	r7, sp, #0
 8028e5a:	6078      	str	r0, [r7, #4]
 8028e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028e5e:	2300      	movs	r3, #0
 8028e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8028e62:	687b      	ldr	r3, [r7, #4]
 8028e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028e68:	2b01      	cmp	r3, #1
 8028e6a:	d101      	bne.n	8028e70 <HAL_TIM_ConfigClockSource+0x1c>
 8028e6c:	2302      	movs	r3, #2
 8028e6e:	e0b4      	b.n	8028fda <HAL_TIM_ConfigClockSource+0x186>
 8028e70:	687b      	ldr	r3, [r7, #4]
 8028e72:	2201      	movs	r2, #1
 8028e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8028e78:	687b      	ldr	r3, [r7, #4]
 8028e7a:	2202      	movs	r2, #2
 8028e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8028e80:	687b      	ldr	r3, [r7, #4]
 8028e82:	681b      	ldr	r3, [r3, #0]
 8028e84:	689b      	ldr	r3, [r3, #8]
 8028e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8028e88:	68bb      	ldr	r3, [r7, #8]
 8028e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8028e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028e90:	68bb      	ldr	r3, [r7, #8]
 8028e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8028e98:	687b      	ldr	r3, [r7, #4]
 8028e9a:	681b      	ldr	r3, [r3, #0]
 8028e9c:	68ba      	ldr	r2, [r7, #8]
 8028e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8028ea0:	683b      	ldr	r3, [r7, #0]
 8028ea2:	681b      	ldr	r3, [r3, #0]
 8028ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028ea8:	d03e      	beq.n	8028f28 <HAL_TIM_ConfigClockSource+0xd4>
 8028eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028eae:	f200 8087 	bhi.w	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028eb6:	f000 8086 	beq.w	8028fc6 <HAL_TIM_ConfigClockSource+0x172>
 8028eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028ebe:	d87f      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ec0:	2b70      	cmp	r3, #112	; 0x70
 8028ec2:	d01a      	beq.n	8028efa <HAL_TIM_ConfigClockSource+0xa6>
 8028ec4:	2b70      	cmp	r3, #112	; 0x70
 8028ec6:	d87b      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ec8:	2b60      	cmp	r3, #96	; 0x60
 8028eca:	d050      	beq.n	8028f6e <HAL_TIM_ConfigClockSource+0x11a>
 8028ecc:	2b60      	cmp	r3, #96	; 0x60
 8028ece:	d877      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ed0:	2b50      	cmp	r3, #80	; 0x50
 8028ed2:	d03c      	beq.n	8028f4e <HAL_TIM_ConfigClockSource+0xfa>
 8028ed4:	2b50      	cmp	r3, #80	; 0x50
 8028ed6:	d873      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ed8:	2b40      	cmp	r3, #64	; 0x40
 8028eda:	d058      	beq.n	8028f8e <HAL_TIM_ConfigClockSource+0x13a>
 8028edc:	2b40      	cmp	r3, #64	; 0x40
 8028ede:	d86f      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ee0:	2b30      	cmp	r3, #48	; 0x30
 8028ee2:	d064      	beq.n	8028fae <HAL_TIM_ConfigClockSource+0x15a>
 8028ee4:	2b30      	cmp	r3, #48	; 0x30
 8028ee6:	d86b      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ee8:	2b20      	cmp	r3, #32
 8028eea:	d060      	beq.n	8028fae <HAL_TIM_ConfigClockSource+0x15a>
 8028eec:	2b20      	cmp	r3, #32
 8028eee:	d867      	bhi.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8028ef0:	2b00      	cmp	r3, #0
 8028ef2:	d05c      	beq.n	8028fae <HAL_TIM_ConfigClockSource+0x15a>
 8028ef4:	2b10      	cmp	r3, #16
 8028ef6:	d05a      	beq.n	8028fae <HAL_TIM_ConfigClockSource+0x15a>
 8028ef8:	e062      	b.n	8028fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8028efa:	687b      	ldr	r3, [r7, #4]
 8028efc:	6818      	ldr	r0, [r3, #0]
 8028efe:	683b      	ldr	r3, [r7, #0]
 8028f00:	6899      	ldr	r1, [r3, #8]
 8028f02:	683b      	ldr	r3, [r7, #0]
 8028f04:	685a      	ldr	r2, [r3, #4]
 8028f06:	683b      	ldr	r3, [r7, #0]
 8028f08:	68db      	ldr	r3, [r3, #12]
 8028f0a:	f000 fd95 	bl	8029a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8028f0e:	687b      	ldr	r3, [r7, #4]
 8028f10:	681b      	ldr	r3, [r3, #0]
 8028f12:	689b      	ldr	r3, [r3, #8]
 8028f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8028f16:	68bb      	ldr	r3, [r7, #8]
 8028f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8028f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8028f1e:	687b      	ldr	r3, [r7, #4]
 8028f20:	681b      	ldr	r3, [r3, #0]
 8028f22:	68ba      	ldr	r2, [r7, #8]
 8028f24:	609a      	str	r2, [r3, #8]
      break;
 8028f26:	e04f      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	6818      	ldr	r0, [r3, #0]
 8028f2c:	683b      	ldr	r3, [r7, #0]
 8028f2e:	6899      	ldr	r1, [r3, #8]
 8028f30:	683b      	ldr	r3, [r7, #0]
 8028f32:	685a      	ldr	r2, [r3, #4]
 8028f34:	683b      	ldr	r3, [r7, #0]
 8028f36:	68db      	ldr	r3, [r3, #12]
 8028f38:	f000 fd7e 	bl	8029a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	681b      	ldr	r3, [r3, #0]
 8028f40:	689a      	ldr	r2, [r3, #8]
 8028f42:	687b      	ldr	r3, [r7, #4]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028f4a:	609a      	str	r2, [r3, #8]
      break;
 8028f4c:	e03c      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028f4e:	687b      	ldr	r3, [r7, #4]
 8028f50:	6818      	ldr	r0, [r3, #0]
 8028f52:	683b      	ldr	r3, [r7, #0]
 8028f54:	6859      	ldr	r1, [r3, #4]
 8028f56:	683b      	ldr	r3, [r7, #0]
 8028f58:	68db      	ldr	r3, [r3, #12]
 8028f5a:	461a      	mov	r2, r3
 8028f5c:	f000 fc3c 	bl	80297d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	681b      	ldr	r3, [r3, #0]
 8028f64:	2150      	movs	r1, #80	; 0x50
 8028f66:	4618      	mov	r0, r3
 8028f68:	f000 fd4b 	bl	8029a02 <TIM_ITRx_SetConfig>
      break;
 8028f6c:	e02c      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8028f6e:	687b      	ldr	r3, [r7, #4]
 8028f70:	6818      	ldr	r0, [r3, #0]
 8028f72:	683b      	ldr	r3, [r7, #0]
 8028f74:	6859      	ldr	r1, [r3, #4]
 8028f76:	683b      	ldr	r3, [r7, #0]
 8028f78:	68db      	ldr	r3, [r3, #12]
 8028f7a:	461a      	mov	r2, r3
 8028f7c:	f000 fc98 	bl	80298b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	681b      	ldr	r3, [r3, #0]
 8028f84:	2160      	movs	r1, #96	; 0x60
 8028f86:	4618      	mov	r0, r3
 8028f88:	f000 fd3b 	bl	8029a02 <TIM_ITRx_SetConfig>
      break;
 8028f8c:	e01c      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028f8e:	687b      	ldr	r3, [r7, #4]
 8028f90:	6818      	ldr	r0, [r3, #0]
 8028f92:	683b      	ldr	r3, [r7, #0]
 8028f94:	6859      	ldr	r1, [r3, #4]
 8028f96:	683b      	ldr	r3, [r7, #0]
 8028f98:	68db      	ldr	r3, [r3, #12]
 8028f9a:	461a      	mov	r2, r3
 8028f9c:	f000 fc1c 	bl	80297d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	2140      	movs	r1, #64	; 0x40
 8028fa6:	4618      	mov	r0, r3
 8028fa8:	f000 fd2b 	bl	8029a02 <TIM_ITRx_SetConfig>
      break;
 8028fac:	e00c      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	681a      	ldr	r2, [r3, #0]
 8028fb2:	683b      	ldr	r3, [r7, #0]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	4619      	mov	r1, r3
 8028fb8:	4610      	mov	r0, r2
 8028fba:	f000 fd22 	bl	8029a02 <TIM_ITRx_SetConfig>
      break;
 8028fbe:	e003      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8028fc0:	2301      	movs	r3, #1
 8028fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8028fc4:	e000      	b.n	8028fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8028fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8028fc8:	687b      	ldr	r3, [r7, #4]
 8028fca:	2201      	movs	r2, #1
 8028fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028fd0:	687b      	ldr	r3, [r7, #4]
 8028fd2:	2200      	movs	r2, #0
 8028fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8028fda:	4618      	mov	r0, r3
 8028fdc:	3710      	adds	r7, #16
 8028fde:	46bd      	mov	sp, r7
 8028fe0:	bd80      	pop	{r7, pc}

08028fe2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8028fe2:	b580      	push	{r7, lr}
 8028fe4:	b082      	sub	sp, #8
 8028fe6:	af00      	add	r7, sp, #0
 8028fe8:	6078      	str	r0, [r7, #4]
 8028fea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8028fec:	687b      	ldr	r3, [r7, #4]
 8028fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028ff2:	2b01      	cmp	r3, #1
 8028ff4:	d101      	bne.n	8028ffa <HAL_TIM_SlaveConfigSynchro+0x18>
 8028ff6:	2302      	movs	r3, #2
 8028ff8:	e031      	b.n	802905e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8028ffa:	687b      	ldr	r3, [r7, #4]
 8028ffc:	2201      	movs	r2, #1
 8028ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	2202      	movs	r2, #2
 8029006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 802900a:	6839      	ldr	r1, [r7, #0]
 802900c:	6878      	ldr	r0, [r7, #4]
 802900e:	f000 fadd 	bl	80295cc <TIM_SlaveTimer_SetConfig>
 8029012:	4603      	mov	r3, r0
 8029014:	2b00      	cmp	r3, #0
 8029016:	d009      	beq.n	802902c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8029018:	687b      	ldr	r3, [r7, #4]
 802901a:	2201      	movs	r2, #1
 802901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	2200      	movs	r2, #0
 8029024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8029028:	2301      	movs	r3, #1
 802902a:	e018      	b.n	802905e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	681b      	ldr	r3, [r3, #0]
 8029030:	68da      	ldr	r2, [r3, #12]
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	681b      	ldr	r3, [r3, #0]
 8029036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802903a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	681b      	ldr	r3, [r3, #0]
 8029040:	68da      	ldr	r2, [r3, #12]
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	681b      	ldr	r3, [r3, #0]
 8029046:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802904a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 802904c:	687b      	ldr	r3, [r7, #4]
 802904e:	2201      	movs	r2, #1
 8029050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029054:	687b      	ldr	r3, [r7, #4]
 8029056:	2200      	movs	r2, #0
 8029058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802905c:	2300      	movs	r3, #0
}
 802905e:	4618      	mov	r0, r3
 8029060:	3708      	adds	r7, #8
 8029062:	46bd      	mov	sp, r7
 8029064:	bd80      	pop	{r7, pc}
	...

08029068 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029068:	b480      	push	{r7}
 802906a:	b085      	sub	sp, #20
 802906c:	af00      	add	r7, sp, #0
 802906e:	6078      	str	r0, [r7, #4]
 8029070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8029072:	2300      	movs	r3, #0
 8029074:	60fb      	str	r3, [r7, #12]
 8029076:	683b      	ldr	r3, [r7, #0]
 8029078:	2b0c      	cmp	r3, #12
 802907a:	d831      	bhi.n	80290e0 <HAL_TIM_ReadCapturedValue+0x78>
 802907c:	a201      	add	r2, pc, #4	; (adr r2, 8029084 <HAL_TIM_ReadCapturedValue+0x1c>)
 802907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029082:	bf00      	nop
 8029084:	080290b9 	.word	0x080290b9
 8029088:	080290e1 	.word	0x080290e1
 802908c:	080290e1 	.word	0x080290e1
 8029090:	080290e1 	.word	0x080290e1
 8029094:	080290c3 	.word	0x080290c3
 8029098:	080290e1 	.word	0x080290e1
 802909c:	080290e1 	.word	0x080290e1
 80290a0:	080290e1 	.word	0x080290e1
 80290a4:	080290cd 	.word	0x080290cd
 80290a8:	080290e1 	.word	0x080290e1
 80290ac:	080290e1 	.word	0x080290e1
 80290b0:	080290e1 	.word	0x080290e1
 80290b4:	080290d7 	.word	0x080290d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80290be:	60fb      	str	r3, [r7, #12]

      break;
 80290c0:	e00f      	b.n	80290e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80290c2:	687b      	ldr	r3, [r7, #4]
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290c8:	60fb      	str	r3, [r7, #12]

      break;
 80290ca:	e00a      	b.n	80290e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80290cc:	687b      	ldr	r3, [r7, #4]
 80290ce:	681b      	ldr	r3, [r3, #0]
 80290d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80290d2:	60fb      	str	r3, [r7, #12]

      break;
 80290d4:	e005      	b.n	80290e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80290dc:	60fb      	str	r3, [r7, #12]

      break;
 80290de:	e000      	b.n	80290e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80290e0:	bf00      	nop
  }

  return tmpreg;
 80290e2:	68fb      	ldr	r3, [r7, #12]
}
 80290e4:	4618      	mov	r0, r3
 80290e6:	3714      	adds	r7, #20
 80290e8:	46bd      	mov	sp, r7
 80290ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290ee:	4770      	bx	lr

080290f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80290f0:	b480      	push	{r7}
 80290f2:	b083      	sub	sp, #12
 80290f4:	af00      	add	r7, sp, #0
 80290f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80290f8:	bf00      	nop
 80290fa:	370c      	adds	r7, #12
 80290fc:	46bd      	mov	sp, r7
 80290fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029102:	4770      	bx	lr

08029104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029104:	b480      	push	{r7}
 8029106:	b083      	sub	sp, #12
 8029108:	af00      	add	r7, sp, #0
 802910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802910c:	bf00      	nop
 802910e:	370c      	adds	r7, #12
 8029110:	46bd      	mov	sp, r7
 8029112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029116:	4770      	bx	lr

08029118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029118:	b480      	push	{r7}
 802911a:	b083      	sub	sp, #12
 802911c:	af00      	add	r7, sp, #0
 802911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029120:	bf00      	nop
 8029122:	370c      	adds	r7, #12
 8029124:	46bd      	mov	sp, r7
 8029126:	f85d 7b04 	ldr.w	r7, [sp], #4
 802912a:	4770      	bx	lr

0802912c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802912c:	b480      	push	{r7}
 802912e:	b085      	sub	sp, #20
 8029130:	af00      	add	r7, sp, #0
 8029132:	6078      	str	r0, [r7, #4]
 8029134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029136:	687b      	ldr	r3, [r7, #4]
 8029138:	681b      	ldr	r3, [r3, #0]
 802913a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	4a40      	ldr	r2, [pc, #256]	; (8029240 <TIM_Base_SetConfig+0x114>)
 8029140:	4293      	cmp	r3, r2
 8029142:	d013      	beq.n	802916c <TIM_Base_SetConfig+0x40>
 8029144:	687b      	ldr	r3, [r7, #4]
 8029146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802914a:	d00f      	beq.n	802916c <TIM_Base_SetConfig+0x40>
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	4a3d      	ldr	r2, [pc, #244]	; (8029244 <TIM_Base_SetConfig+0x118>)
 8029150:	4293      	cmp	r3, r2
 8029152:	d00b      	beq.n	802916c <TIM_Base_SetConfig+0x40>
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	4a3c      	ldr	r2, [pc, #240]	; (8029248 <TIM_Base_SetConfig+0x11c>)
 8029158:	4293      	cmp	r3, r2
 802915a:	d007      	beq.n	802916c <TIM_Base_SetConfig+0x40>
 802915c:	687b      	ldr	r3, [r7, #4]
 802915e:	4a3b      	ldr	r2, [pc, #236]	; (802924c <TIM_Base_SetConfig+0x120>)
 8029160:	4293      	cmp	r3, r2
 8029162:	d003      	beq.n	802916c <TIM_Base_SetConfig+0x40>
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	4a3a      	ldr	r2, [pc, #232]	; (8029250 <TIM_Base_SetConfig+0x124>)
 8029168:	4293      	cmp	r3, r2
 802916a:	d108      	bne.n	802917e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802916c:	68fb      	ldr	r3, [r7, #12]
 802916e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029174:	683b      	ldr	r3, [r7, #0]
 8029176:	685b      	ldr	r3, [r3, #4]
 8029178:	68fa      	ldr	r2, [r7, #12]
 802917a:	4313      	orrs	r3, r2
 802917c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	4a2f      	ldr	r2, [pc, #188]	; (8029240 <TIM_Base_SetConfig+0x114>)
 8029182:	4293      	cmp	r3, r2
 8029184:	d02b      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 8029186:	687b      	ldr	r3, [r7, #4]
 8029188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802918c:	d027      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	4a2c      	ldr	r2, [pc, #176]	; (8029244 <TIM_Base_SetConfig+0x118>)
 8029192:	4293      	cmp	r3, r2
 8029194:	d023      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 8029196:	687b      	ldr	r3, [r7, #4]
 8029198:	4a2b      	ldr	r2, [pc, #172]	; (8029248 <TIM_Base_SetConfig+0x11c>)
 802919a:	4293      	cmp	r3, r2
 802919c:	d01f      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	4a2a      	ldr	r2, [pc, #168]	; (802924c <TIM_Base_SetConfig+0x120>)
 80291a2:	4293      	cmp	r3, r2
 80291a4:	d01b      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	4a29      	ldr	r2, [pc, #164]	; (8029250 <TIM_Base_SetConfig+0x124>)
 80291aa:	4293      	cmp	r3, r2
 80291ac:	d017      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	4a28      	ldr	r2, [pc, #160]	; (8029254 <TIM_Base_SetConfig+0x128>)
 80291b2:	4293      	cmp	r3, r2
 80291b4:	d013      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291b6:	687b      	ldr	r3, [r7, #4]
 80291b8:	4a27      	ldr	r2, [pc, #156]	; (8029258 <TIM_Base_SetConfig+0x12c>)
 80291ba:	4293      	cmp	r3, r2
 80291bc:	d00f      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291be:	687b      	ldr	r3, [r7, #4]
 80291c0:	4a26      	ldr	r2, [pc, #152]	; (802925c <TIM_Base_SetConfig+0x130>)
 80291c2:	4293      	cmp	r3, r2
 80291c4:	d00b      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291c6:	687b      	ldr	r3, [r7, #4]
 80291c8:	4a25      	ldr	r2, [pc, #148]	; (8029260 <TIM_Base_SetConfig+0x134>)
 80291ca:	4293      	cmp	r3, r2
 80291cc:	d007      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	4a24      	ldr	r2, [pc, #144]	; (8029264 <TIM_Base_SetConfig+0x138>)
 80291d2:	4293      	cmp	r3, r2
 80291d4:	d003      	beq.n	80291de <TIM_Base_SetConfig+0xb2>
 80291d6:	687b      	ldr	r3, [r7, #4]
 80291d8:	4a23      	ldr	r2, [pc, #140]	; (8029268 <TIM_Base_SetConfig+0x13c>)
 80291da:	4293      	cmp	r3, r2
 80291dc:	d108      	bne.n	80291f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80291de:	68fb      	ldr	r3, [r7, #12]
 80291e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80291e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80291e6:	683b      	ldr	r3, [r7, #0]
 80291e8:	68db      	ldr	r3, [r3, #12]
 80291ea:	68fa      	ldr	r2, [r7, #12]
 80291ec:	4313      	orrs	r3, r2
 80291ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80291f0:	68fb      	ldr	r3, [r7, #12]
 80291f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80291f6:	683b      	ldr	r3, [r7, #0]
 80291f8:	695b      	ldr	r3, [r3, #20]
 80291fa:	4313      	orrs	r3, r2
 80291fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	68fa      	ldr	r2, [r7, #12]
 8029202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029204:	683b      	ldr	r3, [r7, #0]
 8029206:	689a      	ldr	r2, [r3, #8]
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	681a      	ldr	r2, [r3, #0]
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029214:	687b      	ldr	r3, [r7, #4]
 8029216:	4a0a      	ldr	r2, [pc, #40]	; (8029240 <TIM_Base_SetConfig+0x114>)
 8029218:	4293      	cmp	r3, r2
 802921a:	d003      	beq.n	8029224 <TIM_Base_SetConfig+0xf8>
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	4a0c      	ldr	r2, [pc, #48]	; (8029250 <TIM_Base_SetConfig+0x124>)
 8029220:	4293      	cmp	r3, r2
 8029222:	d103      	bne.n	802922c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029224:	683b      	ldr	r3, [r7, #0]
 8029226:	691a      	ldr	r2, [r3, #16]
 8029228:	687b      	ldr	r3, [r7, #4]
 802922a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	2201      	movs	r2, #1
 8029230:	615a      	str	r2, [r3, #20]
}
 8029232:	bf00      	nop
 8029234:	3714      	adds	r7, #20
 8029236:	46bd      	mov	sp, r7
 8029238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802923c:	4770      	bx	lr
 802923e:	bf00      	nop
 8029240:	40010000 	.word	0x40010000
 8029244:	40000400 	.word	0x40000400
 8029248:	40000800 	.word	0x40000800
 802924c:	40000c00 	.word	0x40000c00
 8029250:	40010400 	.word	0x40010400
 8029254:	40014000 	.word	0x40014000
 8029258:	40014400 	.word	0x40014400
 802925c:	40014800 	.word	0x40014800
 8029260:	40001800 	.word	0x40001800
 8029264:	40001c00 	.word	0x40001c00
 8029268:	40002000 	.word	0x40002000

0802926c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802926c:	b480      	push	{r7}
 802926e:	b087      	sub	sp, #28
 8029270:	af00      	add	r7, sp, #0
 8029272:	6078      	str	r0, [r7, #4]
 8029274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	6a1b      	ldr	r3, [r3, #32]
 802927a:	f023 0201 	bic.w	r2, r3, #1
 802927e:	687b      	ldr	r3, [r7, #4]
 8029280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029282:	687b      	ldr	r3, [r7, #4]
 8029284:	6a1b      	ldr	r3, [r3, #32]
 8029286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029288:	687b      	ldr	r3, [r7, #4]
 802928a:	685b      	ldr	r3, [r3, #4]
 802928c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802928e:	687b      	ldr	r3, [r7, #4]
 8029290:	699b      	ldr	r3, [r3, #24]
 8029292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029294:	68fb      	ldr	r3, [r7, #12]
 8029296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802929a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	f023 0303 	bic.w	r3, r3, #3
 80292a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80292a4:	683b      	ldr	r3, [r7, #0]
 80292a6:	681b      	ldr	r3, [r3, #0]
 80292a8:	68fa      	ldr	r2, [r7, #12]
 80292aa:	4313      	orrs	r3, r2
 80292ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80292ae:	697b      	ldr	r3, [r7, #20]
 80292b0:	f023 0302 	bic.w	r3, r3, #2
 80292b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80292b6:	683b      	ldr	r3, [r7, #0]
 80292b8:	689b      	ldr	r3, [r3, #8]
 80292ba:	697a      	ldr	r2, [r7, #20]
 80292bc:	4313      	orrs	r3, r2
 80292be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	4a20      	ldr	r2, [pc, #128]	; (8029344 <TIM_OC1_SetConfig+0xd8>)
 80292c4:	4293      	cmp	r3, r2
 80292c6:	d003      	beq.n	80292d0 <TIM_OC1_SetConfig+0x64>
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	4a1f      	ldr	r2, [pc, #124]	; (8029348 <TIM_OC1_SetConfig+0xdc>)
 80292cc:	4293      	cmp	r3, r2
 80292ce:	d10c      	bne.n	80292ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80292d0:	697b      	ldr	r3, [r7, #20]
 80292d2:	f023 0308 	bic.w	r3, r3, #8
 80292d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80292d8:	683b      	ldr	r3, [r7, #0]
 80292da:	68db      	ldr	r3, [r3, #12]
 80292dc:	697a      	ldr	r2, [r7, #20]
 80292de:	4313      	orrs	r3, r2
 80292e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80292e2:	697b      	ldr	r3, [r7, #20]
 80292e4:	f023 0304 	bic.w	r3, r3, #4
 80292e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	4a15      	ldr	r2, [pc, #84]	; (8029344 <TIM_OC1_SetConfig+0xd8>)
 80292ee:	4293      	cmp	r3, r2
 80292f0:	d003      	beq.n	80292fa <TIM_OC1_SetConfig+0x8e>
 80292f2:	687b      	ldr	r3, [r7, #4]
 80292f4:	4a14      	ldr	r2, [pc, #80]	; (8029348 <TIM_OC1_SetConfig+0xdc>)
 80292f6:	4293      	cmp	r3, r2
 80292f8:	d111      	bne.n	802931e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80292fa:	693b      	ldr	r3, [r7, #16]
 80292fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029302:	693b      	ldr	r3, [r7, #16]
 8029304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802930a:	683b      	ldr	r3, [r7, #0]
 802930c:	695b      	ldr	r3, [r3, #20]
 802930e:	693a      	ldr	r2, [r7, #16]
 8029310:	4313      	orrs	r3, r2
 8029312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029314:	683b      	ldr	r3, [r7, #0]
 8029316:	699b      	ldr	r3, [r3, #24]
 8029318:	693a      	ldr	r2, [r7, #16]
 802931a:	4313      	orrs	r3, r2
 802931c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	693a      	ldr	r2, [r7, #16]
 8029322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029324:	687b      	ldr	r3, [r7, #4]
 8029326:	68fa      	ldr	r2, [r7, #12]
 8029328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802932a:	683b      	ldr	r3, [r7, #0]
 802932c:	685a      	ldr	r2, [r3, #4]
 802932e:	687b      	ldr	r3, [r7, #4]
 8029330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029332:	687b      	ldr	r3, [r7, #4]
 8029334:	697a      	ldr	r2, [r7, #20]
 8029336:	621a      	str	r2, [r3, #32]
}
 8029338:	bf00      	nop
 802933a:	371c      	adds	r7, #28
 802933c:	46bd      	mov	sp, r7
 802933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029342:	4770      	bx	lr
 8029344:	40010000 	.word	0x40010000
 8029348:	40010400 	.word	0x40010400

0802934c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802934c:	b480      	push	{r7}
 802934e:	b087      	sub	sp, #28
 8029350:	af00      	add	r7, sp, #0
 8029352:	6078      	str	r0, [r7, #4]
 8029354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029356:	687b      	ldr	r3, [r7, #4]
 8029358:	6a1b      	ldr	r3, [r3, #32]
 802935a:	f023 0210 	bic.w	r2, r3, #16
 802935e:	687b      	ldr	r3, [r7, #4]
 8029360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029362:	687b      	ldr	r3, [r7, #4]
 8029364:	6a1b      	ldr	r3, [r3, #32]
 8029366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	685b      	ldr	r3, [r3, #4]
 802936c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802936e:	687b      	ldr	r3, [r7, #4]
 8029370:	699b      	ldr	r3, [r3, #24]
 8029372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029374:	68fb      	ldr	r3, [r7, #12]
 8029376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802937a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802937c:	68fb      	ldr	r3, [r7, #12]
 802937e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029384:	683b      	ldr	r3, [r7, #0]
 8029386:	681b      	ldr	r3, [r3, #0]
 8029388:	021b      	lsls	r3, r3, #8
 802938a:	68fa      	ldr	r2, [r7, #12]
 802938c:	4313      	orrs	r3, r2
 802938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029390:	697b      	ldr	r3, [r7, #20]
 8029392:	f023 0320 	bic.w	r3, r3, #32
 8029396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029398:	683b      	ldr	r3, [r7, #0]
 802939a:	689b      	ldr	r3, [r3, #8]
 802939c:	011b      	lsls	r3, r3, #4
 802939e:	697a      	ldr	r2, [r7, #20]
 80293a0:	4313      	orrs	r3, r2
 80293a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	4a22      	ldr	r2, [pc, #136]	; (8029430 <TIM_OC2_SetConfig+0xe4>)
 80293a8:	4293      	cmp	r3, r2
 80293aa:	d003      	beq.n	80293b4 <TIM_OC2_SetConfig+0x68>
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	4a21      	ldr	r2, [pc, #132]	; (8029434 <TIM_OC2_SetConfig+0xe8>)
 80293b0:	4293      	cmp	r3, r2
 80293b2:	d10d      	bne.n	80293d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80293b4:	697b      	ldr	r3, [r7, #20]
 80293b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80293ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80293bc:	683b      	ldr	r3, [r7, #0]
 80293be:	68db      	ldr	r3, [r3, #12]
 80293c0:	011b      	lsls	r3, r3, #4
 80293c2:	697a      	ldr	r2, [r7, #20]
 80293c4:	4313      	orrs	r3, r2
 80293c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80293c8:	697b      	ldr	r3, [r7, #20]
 80293ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80293ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80293d0:	687b      	ldr	r3, [r7, #4]
 80293d2:	4a17      	ldr	r2, [pc, #92]	; (8029430 <TIM_OC2_SetConfig+0xe4>)
 80293d4:	4293      	cmp	r3, r2
 80293d6:	d003      	beq.n	80293e0 <TIM_OC2_SetConfig+0x94>
 80293d8:	687b      	ldr	r3, [r7, #4]
 80293da:	4a16      	ldr	r2, [pc, #88]	; (8029434 <TIM_OC2_SetConfig+0xe8>)
 80293dc:	4293      	cmp	r3, r2
 80293de:	d113      	bne.n	8029408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80293e0:	693b      	ldr	r3, [r7, #16]
 80293e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80293e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80293e8:	693b      	ldr	r3, [r7, #16]
 80293ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80293ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80293f0:	683b      	ldr	r3, [r7, #0]
 80293f2:	695b      	ldr	r3, [r3, #20]
 80293f4:	009b      	lsls	r3, r3, #2
 80293f6:	693a      	ldr	r2, [r7, #16]
 80293f8:	4313      	orrs	r3, r2
 80293fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80293fc:	683b      	ldr	r3, [r7, #0]
 80293fe:	699b      	ldr	r3, [r3, #24]
 8029400:	009b      	lsls	r3, r3, #2
 8029402:	693a      	ldr	r2, [r7, #16]
 8029404:	4313      	orrs	r3, r2
 8029406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	693a      	ldr	r2, [r7, #16]
 802940c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802940e:	687b      	ldr	r3, [r7, #4]
 8029410:	68fa      	ldr	r2, [r7, #12]
 8029412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029414:	683b      	ldr	r3, [r7, #0]
 8029416:	685a      	ldr	r2, [r3, #4]
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	697a      	ldr	r2, [r7, #20]
 8029420:	621a      	str	r2, [r3, #32]
}
 8029422:	bf00      	nop
 8029424:	371c      	adds	r7, #28
 8029426:	46bd      	mov	sp, r7
 8029428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802942c:	4770      	bx	lr
 802942e:	bf00      	nop
 8029430:	40010000 	.word	0x40010000
 8029434:	40010400 	.word	0x40010400

08029438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029438:	b480      	push	{r7}
 802943a:	b087      	sub	sp, #28
 802943c:	af00      	add	r7, sp, #0
 802943e:	6078      	str	r0, [r7, #4]
 8029440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	6a1b      	ldr	r3, [r3, #32]
 8029446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	6a1b      	ldr	r3, [r3, #32]
 8029452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	685b      	ldr	r3, [r3, #4]
 8029458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	69db      	ldr	r3, [r3, #28]
 802945e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029460:	68fb      	ldr	r3, [r7, #12]
 8029462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	f023 0303 	bic.w	r3, r3, #3
 802946e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029470:	683b      	ldr	r3, [r7, #0]
 8029472:	681b      	ldr	r3, [r3, #0]
 8029474:	68fa      	ldr	r2, [r7, #12]
 8029476:	4313      	orrs	r3, r2
 8029478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802947a:	697b      	ldr	r3, [r7, #20]
 802947c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029482:	683b      	ldr	r3, [r7, #0]
 8029484:	689b      	ldr	r3, [r3, #8]
 8029486:	021b      	lsls	r3, r3, #8
 8029488:	697a      	ldr	r2, [r7, #20]
 802948a:	4313      	orrs	r3, r2
 802948c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802948e:	687b      	ldr	r3, [r7, #4]
 8029490:	4a21      	ldr	r2, [pc, #132]	; (8029518 <TIM_OC3_SetConfig+0xe0>)
 8029492:	4293      	cmp	r3, r2
 8029494:	d003      	beq.n	802949e <TIM_OC3_SetConfig+0x66>
 8029496:	687b      	ldr	r3, [r7, #4]
 8029498:	4a20      	ldr	r2, [pc, #128]	; (802951c <TIM_OC3_SetConfig+0xe4>)
 802949a:	4293      	cmp	r3, r2
 802949c:	d10d      	bne.n	80294ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802949e:	697b      	ldr	r3, [r7, #20]
 80294a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80294a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80294a6:	683b      	ldr	r3, [r7, #0]
 80294a8:	68db      	ldr	r3, [r3, #12]
 80294aa:	021b      	lsls	r3, r3, #8
 80294ac:	697a      	ldr	r2, [r7, #20]
 80294ae:	4313      	orrs	r3, r2
 80294b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80294b2:	697b      	ldr	r3, [r7, #20]
 80294b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80294b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80294ba:	687b      	ldr	r3, [r7, #4]
 80294bc:	4a16      	ldr	r2, [pc, #88]	; (8029518 <TIM_OC3_SetConfig+0xe0>)
 80294be:	4293      	cmp	r3, r2
 80294c0:	d003      	beq.n	80294ca <TIM_OC3_SetConfig+0x92>
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	4a15      	ldr	r2, [pc, #84]	; (802951c <TIM_OC3_SetConfig+0xe4>)
 80294c6:	4293      	cmp	r3, r2
 80294c8:	d113      	bne.n	80294f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80294ca:	693b      	ldr	r3, [r7, #16]
 80294cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80294d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80294d2:	693b      	ldr	r3, [r7, #16]
 80294d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80294d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80294da:	683b      	ldr	r3, [r7, #0]
 80294dc:	695b      	ldr	r3, [r3, #20]
 80294de:	011b      	lsls	r3, r3, #4
 80294e0:	693a      	ldr	r2, [r7, #16]
 80294e2:	4313      	orrs	r3, r2
 80294e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80294e6:	683b      	ldr	r3, [r7, #0]
 80294e8:	699b      	ldr	r3, [r3, #24]
 80294ea:	011b      	lsls	r3, r3, #4
 80294ec:	693a      	ldr	r2, [r7, #16]
 80294ee:	4313      	orrs	r3, r2
 80294f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	693a      	ldr	r2, [r7, #16]
 80294f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	68fa      	ldr	r2, [r7, #12]
 80294fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80294fe:	683b      	ldr	r3, [r7, #0]
 8029500:	685a      	ldr	r2, [r3, #4]
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029506:	687b      	ldr	r3, [r7, #4]
 8029508:	697a      	ldr	r2, [r7, #20]
 802950a:	621a      	str	r2, [r3, #32]
}
 802950c:	bf00      	nop
 802950e:	371c      	adds	r7, #28
 8029510:	46bd      	mov	sp, r7
 8029512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029516:	4770      	bx	lr
 8029518:	40010000 	.word	0x40010000
 802951c:	40010400 	.word	0x40010400

08029520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029520:	b480      	push	{r7}
 8029522:	b087      	sub	sp, #28
 8029524:	af00      	add	r7, sp, #0
 8029526:	6078      	str	r0, [r7, #4]
 8029528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	6a1b      	ldr	r3, [r3, #32]
 802952e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029536:	687b      	ldr	r3, [r7, #4]
 8029538:	6a1b      	ldr	r3, [r3, #32]
 802953a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802953c:	687b      	ldr	r3, [r7, #4]
 802953e:	685b      	ldr	r3, [r3, #4]
 8029540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	69db      	ldr	r3, [r3, #28]
 8029546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029548:	68fb      	ldr	r3, [r7, #12]
 802954a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802954e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8029550:	68fb      	ldr	r3, [r7, #12]
 8029552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029558:	683b      	ldr	r3, [r7, #0]
 802955a:	681b      	ldr	r3, [r3, #0]
 802955c:	021b      	lsls	r3, r3, #8
 802955e:	68fa      	ldr	r2, [r7, #12]
 8029560:	4313      	orrs	r3, r2
 8029562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029564:	693b      	ldr	r3, [r7, #16]
 8029566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802956a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802956c:	683b      	ldr	r3, [r7, #0]
 802956e:	689b      	ldr	r3, [r3, #8]
 8029570:	031b      	lsls	r3, r3, #12
 8029572:	693a      	ldr	r2, [r7, #16]
 8029574:	4313      	orrs	r3, r2
 8029576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	4a12      	ldr	r2, [pc, #72]	; (80295c4 <TIM_OC4_SetConfig+0xa4>)
 802957c:	4293      	cmp	r3, r2
 802957e:	d003      	beq.n	8029588 <TIM_OC4_SetConfig+0x68>
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	4a11      	ldr	r2, [pc, #68]	; (80295c8 <TIM_OC4_SetConfig+0xa8>)
 8029584:	4293      	cmp	r3, r2
 8029586:	d109      	bne.n	802959c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029588:	697b      	ldr	r3, [r7, #20]
 802958a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802958e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029590:	683b      	ldr	r3, [r7, #0]
 8029592:	695b      	ldr	r3, [r3, #20]
 8029594:	019b      	lsls	r3, r3, #6
 8029596:	697a      	ldr	r2, [r7, #20]
 8029598:	4313      	orrs	r3, r2
 802959a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	697a      	ldr	r2, [r7, #20]
 80295a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	68fa      	ldr	r2, [r7, #12]
 80295a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80295a8:	683b      	ldr	r3, [r7, #0]
 80295aa:	685a      	ldr	r2, [r3, #4]
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80295b0:	687b      	ldr	r3, [r7, #4]
 80295b2:	693a      	ldr	r2, [r7, #16]
 80295b4:	621a      	str	r2, [r3, #32]
}
 80295b6:	bf00      	nop
 80295b8:	371c      	adds	r7, #28
 80295ba:	46bd      	mov	sp, r7
 80295bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295c0:	4770      	bx	lr
 80295c2:	bf00      	nop
 80295c4:	40010000 	.word	0x40010000
 80295c8:	40010400 	.word	0x40010400

080295cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80295cc:	b580      	push	{r7, lr}
 80295ce:	b086      	sub	sp, #24
 80295d0:	af00      	add	r7, sp, #0
 80295d2:	6078      	str	r0, [r7, #4]
 80295d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80295d6:	2300      	movs	r3, #0
 80295d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	681b      	ldr	r3, [r3, #0]
 80295de:	689b      	ldr	r3, [r3, #8]
 80295e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80295e2:	693b      	ldr	r3, [r7, #16]
 80295e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80295ea:	683b      	ldr	r3, [r7, #0]
 80295ec:	685b      	ldr	r3, [r3, #4]
 80295ee:	693a      	ldr	r2, [r7, #16]
 80295f0:	4313      	orrs	r3, r2
 80295f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80295f4:	693b      	ldr	r3, [r7, #16]
 80295f6:	f023 0307 	bic.w	r3, r3, #7
 80295fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80295fc:	683b      	ldr	r3, [r7, #0]
 80295fe:	681b      	ldr	r3, [r3, #0]
 8029600:	693a      	ldr	r2, [r7, #16]
 8029602:	4313      	orrs	r3, r2
 8029604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8029606:	687b      	ldr	r3, [r7, #4]
 8029608:	681b      	ldr	r3, [r3, #0]
 802960a:	693a      	ldr	r2, [r7, #16]
 802960c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 802960e:	683b      	ldr	r3, [r7, #0]
 8029610:	685b      	ldr	r3, [r3, #4]
 8029612:	2b70      	cmp	r3, #112	; 0x70
 8029614:	d01a      	beq.n	802964c <TIM_SlaveTimer_SetConfig+0x80>
 8029616:	2b70      	cmp	r3, #112	; 0x70
 8029618:	d860      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 802961a:	2b60      	cmp	r3, #96	; 0x60
 802961c:	d054      	beq.n	80296c8 <TIM_SlaveTimer_SetConfig+0xfc>
 802961e:	2b60      	cmp	r3, #96	; 0x60
 8029620:	d85c      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 8029622:	2b50      	cmp	r3, #80	; 0x50
 8029624:	d046      	beq.n	80296b4 <TIM_SlaveTimer_SetConfig+0xe8>
 8029626:	2b50      	cmp	r3, #80	; 0x50
 8029628:	d858      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 802962a:	2b40      	cmp	r3, #64	; 0x40
 802962c:	d019      	beq.n	8029662 <TIM_SlaveTimer_SetConfig+0x96>
 802962e:	2b40      	cmp	r3, #64	; 0x40
 8029630:	d854      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 8029632:	2b30      	cmp	r3, #48	; 0x30
 8029634:	d055      	beq.n	80296e2 <TIM_SlaveTimer_SetConfig+0x116>
 8029636:	2b30      	cmp	r3, #48	; 0x30
 8029638:	d850      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 802963a:	2b20      	cmp	r3, #32
 802963c:	d051      	beq.n	80296e2 <TIM_SlaveTimer_SetConfig+0x116>
 802963e:	2b20      	cmp	r3, #32
 8029640:	d84c      	bhi.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
 8029642:	2b00      	cmp	r3, #0
 8029644:	d04d      	beq.n	80296e2 <TIM_SlaveTimer_SetConfig+0x116>
 8029646:	2b10      	cmp	r3, #16
 8029648:	d04b      	beq.n	80296e2 <TIM_SlaveTimer_SetConfig+0x116>
 802964a:	e047      	b.n	80296dc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 802964c:	687b      	ldr	r3, [r7, #4]
 802964e:	6818      	ldr	r0, [r3, #0]
 8029650:	683b      	ldr	r3, [r7, #0]
 8029652:	68d9      	ldr	r1, [r3, #12]
 8029654:	683b      	ldr	r3, [r7, #0]
 8029656:	689a      	ldr	r2, [r3, #8]
 8029658:	683b      	ldr	r3, [r7, #0]
 802965a:	691b      	ldr	r3, [r3, #16]
 802965c:	f000 f9ec 	bl	8029a38 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8029660:	e040      	b.n	80296e4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8029662:	683b      	ldr	r3, [r7, #0]
 8029664:	681b      	ldr	r3, [r3, #0]
 8029666:	2b05      	cmp	r3, #5
 8029668:	d101      	bne.n	802966e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 802966a:	2301      	movs	r3, #1
 802966c:	e03b      	b.n	80296e6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 802966e:	687b      	ldr	r3, [r7, #4]
 8029670:	681b      	ldr	r3, [r3, #0]
 8029672:	6a1b      	ldr	r3, [r3, #32]
 8029674:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8029676:	687b      	ldr	r3, [r7, #4]
 8029678:	681b      	ldr	r3, [r3, #0]
 802967a:	6a1a      	ldr	r2, [r3, #32]
 802967c:	687b      	ldr	r3, [r7, #4]
 802967e:	681b      	ldr	r3, [r3, #0]
 8029680:	f022 0201 	bic.w	r2, r2, #1
 8029684:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	681b      	ldr	r3, [r3, #0]
 802968a:	699b      	ldr	r3, [r3, #24]
 802968c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802968e:	68bb      	ldr	r3, [r7, #8]
 8029690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029694:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8029696:	683b      	ldr	r3, [r7, #0]
 8029698:	691b      	ldr	r3, [r3, #16]
 802969a:	011b      	lsls	r3, r3, #4
 802969c:	68ba      	ldr	r2, [r7, #8]
 802969e:	4313      	orrs	r3, r2
 80296a0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80296a2:	687b      	ldr	r3, [r7, #4]
 80296a4:	681b      	ldr	r3, [r3, #0]
 80296a6:	68ba      	ldr	r2, [r7, #8]
 80296a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	681b      	ldr	r3, [r3, #0]
 80296ae:	68fa      	ldr	r2, [r7, #12]
 80296b0:	621a      	str	r2, [r3, #32]
      break;
 80296b2:	e017      	b.n	80296e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	6818      	ldr	r0, [r3, #0]
 80296b8:	683b      	ldr	r3, [r7, #0]
 80296ba:	6899      	ldr	r1, [r3, #8]
 80296bc:	683b      	ldr	r3, [r7, #0]
 80296be:	691b      	ldr	r3, [r3, #16]
 80296c0:	461a      	mov	r2, r3
 80296c2:	f000 f889 	bl	80297d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80296c6:	e00d      	b.n	80296e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	6818      	ldr	r0, [r3, #0]
 80296cc:	683b      	ldr	r3, [r7, #0]
 80296ce:	6899      	ldr	r1, [r3, #8]
 80296d0:	683b      	ldr	r3, [r7, #0]
 80296d2:	691b      	ldr	r3, [r3, #16]
 80296d4:	461a      	mov	r2, r3
 80296d6:	f000 f8eb 	bl	80298b0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80296da:	e003      	b.n	80296e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80296dc:	2301      	movs	r3, #1
 80296de:	75fb      	strb	r3, [r7, #23]
      break;
 80296e0:	e000      	b.n	80296e4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80296e2:	bf00      	nop
  }

  return status;
 80296e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80296e6:	4618      	mov	r0, r3
 80296e8:	3718      	adds	r7, #24
 80296ea:	46bd      	mov	sp, r7
 80296ec:	bd80      	pop	{r7, pc}
	...

080296f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80296f0:	b480      	push	{r7}
 80296f2:	b087      	sub	sp, #28
 80296f4:	af00      	add	r7, sp, #0
 80296f6:	60f8      	str	r0, [r7, #12]
 80296f8:	60b9      	str	r1, [r7, #8]
 80296fa:	607a      	str	r2, [r7, #4]
 80296fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80296fe:	68fb      	ldr	r3, [r7, #12]
 8029700:	6a1b      	ldr	r3, [r3, #32]
 8029702:	f023 0201 	bic.w	r2, r3, #1
 8029706:	68fb      	ldr	r3, [r7, #12]
 8029708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802970a:	68fb      	ldr	r3, [r7, #12]
 802970c:	699b      	ldr	r3, [r3, #24]
 802970e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029710:	68fb      	ldr	r3, [r7, #12]
 8029712:	6a1b      	ldr	r3, [r3, #32]
 8029714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	4a28      	ldr	r2, [pc, #160]	; (80297bc <TIM_TI1_SetConfig+0xcc>)
 802971a:	4293      	cmp	r3, r2
 802971c:	d01b      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 802971e:	68fb      	ldr	r3, [r7, #12]
 8029720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029724:	d017      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 8029726:	68fb      	ldr	r3, [r7, #12]
 8029728:	4a25      	ldr	r2, [pc, #148]	; (80297c0 <TIM_TI1_SetConfig+0xd0>)
 802972a:	4293      	cmp	r3, r2
 802972c:	d013      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 802972e:	68fb      	ldr	r3, [r7, #12]
 8029730:	4a24      	ldr	r2, [pc, #144]	; (80297c4 <TIM_TI1_SetConfig+0xd4>)
 8029732:	4293      	cmp	r3, r2
 8029734:	d00f      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 8029736:	68fb      	ldr	r3, [r7, #12]
 8029738:	4a23      	ldr	r2, [pc, #140]	; (80297c8 <TIM_TI1_SetConfig+0xd8>)
 802973a:	4293      	cmp	r3, r2
 802973c:	d00b      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 802973e:	68fb      	ldr	r3, [r7, #12]
 8029740:	4a22      	ldr	r2, [pc, #136]	; (80297cc <TIM_TI1_SetConfig+0xdc>)
 8029742:	4293      	cmp	r3, r2
 8029744:	d007      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 8029746:	68fb      	ldr	r3, [r7, #12]
 8029748:	4a21      	ldr	r2, [pc, #132]	; (80297d0 <TIM_TI1_SetConfig+0xe0>)
 802974a:	4293      	cmp	r3, r2
 802974c:	d003      	beq.n	8029756 <TIM_TI1_SetConfig+0x66>
 802974e:	68fb      	ldr	r3, [r7, #12]
 8029750:	4a20      	ldr	r2, [pc, #128]	; (80297d4 <TIM_TI1_SetConfig+0xe4>)
 8029752:	4293      	cmp	r3, r2
 8029754:	d101      	bne.n	802975a <TIM_TI1_SetConfig+0x6a>
 8029756:	2301      	movs	r3, #1
 8029758:	e000      	b.n	802975c <TIM_TI1_SetConfig+0x6c>
 802975a:	2300      	movs	r3, #0
 802975c:	2b00      	cmp	r3, #0
 802975e:	d008      	beq.n	8029772 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8029760:	697b      	ldr	r3, [r7, #20]
 8029762:	f023 0303 	bic.w	r3, r3, #3
 8029766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8029768:	697a      	ldr	r2, [r7, #20]
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	4313      	orrs	r3, r2
 802976e:	617b      	str	r3, [r7, #20]
 8029770:	e003      	b.n	802977a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8029772:	697b      	ldr	r3, [r7, #20]
 8029774:	f043 0301 	orr.w	r3, r3, #1
 8029778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802977a:	697b      	ldr	r3, [r7, #20]
 802977c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8029782:	683b      	ldr	r3, [r7, #0]
 8029784:	011b      	lsls	r3, r3, #4
 8029786:	b2db      	uxtb	r3, r3
 8029788:	697a      	ldr	r2, [r7, #20]
 802978a:	4313      	orrs	r3, r2
 802978c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802978e:	693b      	ldr	r3, [r7, #16]
 8029790:	f023 030a 	bic.w	r3, r3, #10
 8029794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8029796:	68bb      	ldr	r3, [r7, #8]
 8029798:	f003 030a 	and.w	r3, r3, #10
 802979c:	693a      	ldr	r2, [r7, #16]
 802979e:	4313      	orrs	r3, r2
 80297a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80297a2:	68fb      	ldr	r3, [r7, #12]
 80297a4:	697a      	ldr	r2, [r7, #20]
 80297a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80297a8:	68fb      	ldr	r3, [r7, #12]
 80297aa:	693a      	ldr	r2, [r7, #16]
 80297ac:	621a      	str	r2, [r3, #32]
}
 80297ae:	bf00      	nop
 80297b0:	371c      	adds	r7, #28
 80297b2:	46bd      	mov	sp, r7
 80297b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297b8:	4770      	bx	lr
 80297ba:	bf00      	nop
 80297bc:	40010000 	.word	0x40010000
 80297c0:	40000400 	.word	0x40000400
 80297c4:	40000800 	.word	0x40000800
 80297c8:	40000c00 	.word	0x40000c00
 80297cc:	40010400 	.word	0x40010400
 80297d0:	40014000 	.word	0x40014000
 80297d4:	40001800 	.word	0x40001800

080297d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80297d8:	b480      	push	{r7}
 80297da:	b087      	sub	sp, #28
 80297dc:	af00      	add	r7, sp, #0
 80297de:	60f8      	str	r0, [r7, #12]
 80297e0:	60b9      	str	r1, [r7, #8]
 80297e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80297e4:	68fb      	ldr	r3, [r7, #12]
 80297e6:	6a1b      	ldr	r3, [r3, #32]
 80297e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80297ea:	68fb      	ldr	r3, [r7, #12]
 80297ec:	6a1b      	ldr	r3, [r3, #32]
 80297ee:	f023 0201 	bic.w	r2, r3, #1
 80297f2:	68fb      	ldr	r3, [r7, #12]
 80297f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80297f6:	68fb      	ldr	r3, [r7, #12]
 80297f8:	699b      	ldr	r3, [r3, #24]
 80297fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80297fc:	693b      	ldr	r3, [r7, #16]
 80297fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029804:	687b      	ldr	r3, [r7, #4]
 8029806:	011b      	lsls	r3, r3, #4
 8029808:	693a      	ldr	r2, [r7, #16]
 802980a:	4313      	orrs	r3, r2
 802980c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802980e:	697b      	ldr	r3, [r7, #20]
 8029810:	f023 030a 	bic.w	r3, r3, #10
 8029814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029816:	697a      	ldr	r2, [r7, #20]
 8029818:	68bb      	ldr	r3, [r7, #8]
 802981a:	4313      	orrs	r3, r2
 802981c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802981e:	68fb      	ldr	r3, [r7, #12]
 8029820:	693a      	ldr	r2, [r7, #16]
 8029822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029824:	68fb      	ldr	r3, [r7, #12]
 8029826:	697a      	ldr	r2, [r7, #20]
 8029828:	621a      	str	r2, [r3, #32]
}
 802982a:	bf00      	nop
 802982c:	371c      	adds	r7, #28
 802982e:	46bd      	mov	sp, r7
 8029830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029834:	4770      	bx	lr

08029836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029836:	b480      	push	{r7}
 8029838:	b087      	sub	sp, #28
 802983a:	af00      	add	r7, sp, #0
 802983c:	60f8      	str	r0, [r7, #12]
 802983e:	60b9      	str	r1, [r7, #8]
 8029840:	607a      	str	r2, [r7, #4]
 8029842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	6a1b      	ldr	r3, [r3, #32]
 8029848:	f023 0210 	bic.w	r2, r3, #16
 802984c:	68fb      	ldr	r3, [r7, #12]
 802984e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029850:	68fb      	ldr	r3, [r7, #12]
 8029852:	699b      	ldr	r3, [r3, #24]
 8029854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029856:	68fb      	ldr	r3, [r7, #12]
 8029858:	6a1b      	ldr	r3, [r3, #32]
 802985a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 802985c:	697b      	ldr	r3, [r7, #20]
 802985e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	021b      	lsls	r3, r3, #8
 8029868:	697a      	ldr	r2, [r7, #20]
 802986a:	4313      	orrs	r3, r2
 802986c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802986e:	697b      	ldr	r3, [r7, #20]
 8029870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8029876:	683b      	ldr	r3, [r7, #0]
 8029878:	031b      	lsls	r3, r3, #12
 802987a:	b29b      	uxth	r3, r3
 802987c:	697a      	ldr	r2, [r7, #20]
 802987e:	4313      	orrs	r3, r2
 8029880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029882:	693b      	ldr	r3, [r7, #16]
 8029884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 802988a:	68bb      	ldr	r3, [r7, #8]
 802988c:	011b      	lsls	r3, r3, #4
 802988e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8029892:	693a      	ldr	r2, [r7, #16]
 8029894:	4313      	orrs	r3, r2
 8029896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029898:	68fb      	ldr	r3, [r7, #12]
 802989a:	697a      	ldr	r2, [r7, #20]
 802989c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802989e:	68fb      	ldr	r3, [r7, #12]
 80298a0:	693a      	ldr	r2, [r7, #16]
 80298a2:	621a      	str	r2, [r3, #32]
}
 80298a4:	bf00      	nop
 80298a6:	371c      	adds	r7, #28
 80298a8:	46bd      	mov	sp, r7
 80298aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ae:	4770      	bx	lr

080298b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80298b0:	b480      	push	{r7}
 80298b2:	b087      	sub	sp, #28
 80298b4:	af00      	add	r7, sp, #0
 80298b6:	60f8      	str	r0, [r7, #12]
 80298b8:	60b9      	str	r1, [r7, #8]
 80298ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80298bc:	68fb      	ldr	r3, [r7, #12]
 80298be:	6a1b      	ldr	r3, [r3, #32]
 80298c0:	f023 0210 	bic.w	r2, r3, #16
 80298c4:	68fb      	ldr	r3, [r7, #12]
 80298c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80298c8:	68fb      	ldr	r3, [r7, #12]
 80298ca:	699b      	ldr	r3, [r3, #24]
 80298cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80298ce:	68fb      	ldr	r3, [r7, #12]
 80298d0:	6a1b      	ldr	r3, [r3, #32]
 80298d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80298d4:	697b      	ldr	r3, [r7, #20]
 80298d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80298da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80298dc:	687b      	ldr	r3, [r7, #4]
 80298de:	031b      	lsls	r3, r3, #12
 80298e0:	697a      	ldr	r2, [r7, #20]
 80298e2:	4313      	orrs	r3, r2
 80298e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80298e6:	693b      	ldr	r3, [r7, #16]
 80298e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80298ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80298ee:	68bb      	ldr	r3, [r7, #8]
 80298f0:	011b      	lsls	r3, r3, #4
 80298f2:	693a      	ldr	r2, [r7, #16]
 80298f4:	4313      	orrs	r3, r2
 80298f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80298f8:	68fb      	ldr	r3, [r7, #12]
 80298fa:	697a      	ldr	r2, [r7, #20]
 80298fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80298fe:	68fb      	ldr	r3, [r7, #12]
 8029900:	693a      	ldr	r2, [r7, #16]
 8029902:	621a      	str	r2, [r3, #32]
}
 8029904:	bf00      	nop
 8029906:	371c      	adds	r7, #28
 8029908:	46bd      	mov	sp, r7
 802990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802990e:	4770      	bx	lr

08029910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029910:	b480      	push	{r7}
 8029912:	b087      	sub	sp, #28
 8029914:	af00      	add	r7, sp, #0
 8029916:	60f8      	str	r0, [r7, #12]
 8029918:	60b9      	str	r1, [r7, #8]
 802991a:	607a      	str	r2, [r7, #4]
 802991c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802991e:	68fb      	ldr	r3, [r7, #12]
 8029920:	6a1b      	ldr	r3, [r3, #32]
 8029922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029926:	68fb      	ldr	r3, [r7, #12]
 8029928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802992a:	68fb      	ldr	r3, [r7, #12]
 802992c:	69db      	ldr	r3, [r3, #28]
 802992e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029930:	68fb      	ldr	r3, [r7, #12]
 8029932:	6a1b      	ldr	r3, [r3, #32]
 8029934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8029936:	697b      	ldr	r3, [r7, #20]
 8029938:	f023 0303 	bic.w	r3, r3, #3
 802993c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 802993e:	697a      	ldr	r2, [r7, #20]
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	4313      	orrs	r3, r2
 8029944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8029946:	697b      	ldr	r3, [r7, #20]
 8029948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802994c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 802994e:	683b      	ldr	r3, [r7, #0]
 8029950:	011b      	lsls	r3, r3, #4
 8029952:	b2db      	uxtb	r3, r3
 8029954:	697a      	ldr	r2, [r7, #20]
 8029956:	4313      	orrs	r3, r2
 8029958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 802995a:	693b      	ldr	r3, [r7, #16]
 802995c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8029960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8029962:	68bb      	ldr	r3, [r7, #8]
 8029964:	021b      	lsls	r3, r3, #8
 8029966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 802996a:	693a      	ldr	r2, [r7, #16]
 802996c:	4313      	orrs	r3, r2
 802996e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8029970:	68fb      	ldr	r3, [r7, #12]
 8029972:	697a      	ldr	r2, [r7, #20]
 8029974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8029976:	68fb      	ldr	r3, [r7, #12]
 8029978:	693a      	ldr	r2, [r7, #16]
 802997a:	621a      	str	r2, [r3, #32]
}
 802997c:	bf00      	nop
 802997e:	371c      	adds	r7, #28
 8029980:	46bd      	mov	sp, r7
 8029982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029986:	4770      	bx	lr

08029988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029988:	b480      	push	{r7}
 802998a:	b087      	sub	sp, #28
 802998c:	af00      	add	r7, sp, #0
 802998e:	60f8      	str	r0, [r7, #12]
 8029990:	60b9      	str	r1, [r7, #8]
 8029992:	607a      	str	r2, [r7, #4]
 8029994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029996:	68fb      	ldr	r3, [r7, #12]
 8029998:	6a1b      	ldr	r3, [r3, #32]
 802999a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802999e:	68fb      	ldr	r3, [r7, #12]
 80299a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	69db      	ldr	r3, [r3, #28]
 80299a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80299a8:	68fb      	ldr	r3, [r7, #12]
 80299aa:	6a1b      	ldr	r3, [r3, #32]
 80299ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80299ae:	697b      	ldr	r3, [r7, #20]
 80299b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80299b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	021b      	lsls	r3, r3, #8
 80299ba:	697a      	ldr	r2, [r7, #20]
 80299bc:	4313      	orrs	r3, r2
 80299be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80299c0:	697b      	ldr	r3, [r7, #20]
 80299c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80299c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80299c8:	683b      	ldr	r3, [r7, #0]
 80299ca:	031b      	lsls	r3, r3, #12
 80299cc:	b29b      	uxth	r3, r3
 80299ce:	697a      	ldr	r2, [r7, #20]
 80299d0:	4313      	orrs	r3, r2
 80299d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80299d4:	693b      	ldr	r3, [r7, #16]
 80299d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80299da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80299dc:	68bb      	ldr	r3, [r7, #8]
 80299de:	031b      	lsls	r3, r3, #12
 80299e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80299e4:	693a      	ldr	r2, [r7, #16]
 80299e6:	4313      	orrs	r3, r2
 80299e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80299ea:	68fb      	ldr	r3, [r7, #12]
 80299ec:	697a      	ldr	r2, [r7, #20]
 80299ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80299f0:	68fb      	ldr	r3, [r7, #12]
 80299f2:	693a      	ldr	r2, [r7, #16]
 80299f4:	621a      	str	r2, [r3, #32]
}
 80299f6:	bf00      	nop
 80299f8:	371c      	adds	r7, #28
 80299fa:	46bd      	mov	sp, r7
 80299fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a00:	4770      	bx	lr

08029a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029a02:	b480      	push	{r7}
 8029a04:	b085      	sub	sp, #20
 8029a06:	af00      	add	r7, sp, #0
 8029a08:	6078      	str	r0, [r7, #4]
 8029a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	689b      	ldr	r3, [r3, #8]
 8029a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029a12:	68fb      	ldr	r3, [r7, #12]
 8029a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029a1a:	683a      	ldr	r2, [r7, #0]
 8029a1c:	68fb      	ldr	r3, [r7, #12]
 8029a1e:	4313      	orrs	r3, r2
 8029a20:	f043 0307 	orr.w	r3, r3, #7
 8029a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029a26:	687b      	ldr	r3, [r7, #4]
 8029a28:	68fa      	ldr	r2, [r7, #12]
 8029a2a:	609a      	str	r2, [r3, #8]
}
 8029a2c:	bf00      	nop
 8029a2e:	3714      	adds	r7, #20
 8029a30:	46bd      	mov	sp, r7
 8029a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a36:	4770      	bx	lr

08029a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029a38:	b480      	push	{r7}
 8029a3a:	b087      	sub	sp, #28
 8029a3c:	af00      	add	r7, sp, #0
 8029a3e:	60f8      	str	r0, [r7, #12]
 8029a40:	60b9      	str	r1, [r7, #8]
 8029a42:	607a      	str	r2, [r7, #4]
 8029a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029a46:	68fb      	ldr	r3, [r7, #12]
 8029a48:	689b      	ldr	r3, [r3, #8]
 8029a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029a4c:	697b      	ldr	r3, [r7, #20]
 8029a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029a54:	683b      	ldr	r3, [r7, #0]
 8029a56:	021a      	lsls	r2, r3, #8
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	431a      	orrs	r2, r3
 8029a5c:	68bb      	ldr	r3, [r7, #8]
 8029a5e:	4313      	orrs	r3, r2
 8029a60:	697a      	ldr	r2, [r7, #20]
 8029a62:	4313      	orrs	r3, r2
 8029a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029a66:	68fb      	ldr	r3, [r7, #12]
 8029a68:	697a      	ldr	r2, [r7, #20]
 8029a6a:	609a      	str	r2, [r3, #8]
}
 8029a6c:	bf00      	nop
 8029a6e:	371c      	adds	r7, #28
 8029a70:	46bd      	mov	sp, r7
 8029a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a76:	4770      	bx	lr

08029a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8029a78:	b480      	push	{r7}
 8029a7a:	b087      	sub	sp, #28
 8029a7c:	af00      	add	r7, sp, #0
 8029a7e:	60f8      	str	r0, [r7, #12]
 8029a80:	60b9      	str	r1, [r7, #8]
 8029a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8029a84:	68bb      	ldr	r3, [r7, #8]
 8029a86:	f003 031f 	and.w	r3, r3, #31
 8029a8a:	2201      	movs	r2, #1
 8029a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8029a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8029a92:	68fb      	ldr	r3, [r7, #12]
 8029a94:	6a1a      	ldr	r2, [r3, #32]
 8029a96:	697b      	ldr	r3, [r7, #20]
 8029a98:	43db      	mvns	r3, r3
 8029a9a:	401a      	ands	r2, r3
 8029a9c:	68fb      	ldr	r3, [r7, #12]
 8029a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8029aa0:	68fb      	ldr	r3, [r7, #12]
 8029aa2:	6a1a      	ldr	r2, [r3, #32]
 8029aa4:	68bb      	ldr	r3, [r7, #8]
 8029aa6:	f003 031f 	and.w	r3, r3, #31
 8029aaa:	6879      	ldr	r1, [r7, #4]
 8029aac:	fa01 f303 	lsl.w	r3, r1, r3
 8029ab0:	431a      	orrs	r2, r3
 8029ab2:	68fb      	ldr	r3, [r7, #12]
 8029ab4:	621a      	str	r2, [r3, #32]
}
 8029ab6:	bf00      	nop
 8029ab8:	371c      	adds	r7, #28
 8029aba:	46bd      	mov	sp, r7
 8029abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ac0:	4770      	bx	lr
	...

08029ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029ac4:	b480      	push	{r7}
 8029ac6:	b085      	sub	sp, #20
 8029ac8:	af00      	add	r7, sp, #0
 8029aca:	6078      	str	r0, [r7, #4]
 8029acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029ace:	687b      	ldr	r3, [r7, #4]
 8029ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029ad4:	2b01      	cmp	r3, #1
 8029ad6:	d101      	bne.n	8029adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029ad8:	2302      	movs	r3, #2
 8029ada:	e05a      	b.n	8029b92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	2201      	movs	r2, #1
 8029ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029ae4:	687b      	ldr	r3, [r7, #4]
 8029ae6:	2202      	movs	r2, #2
 8029ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	681b      	ldr	r3, [r3, #0]
 8029af0:	685b      	ldr	r3, [r3, #4]
 8029af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	681b      	ldr	r3, [r3, #0]
 8029af8:	689b      	ldr	r3, [r3, #8]
 8029afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029afc:	68fb      	ldr	r3, [r7, #12]
 8029afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029b04:	683b      	ldr	r3, [r7, #0]
 8029b06:	681b      	ldr	r3, [r3, #0]
 8029b08:	68fa      	ldr	r2, [r7, #12]
 8029b0a:	4313      	orrs	r3, r2
 8029b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029b0e:	687b      	ldr	r3, [r7, #4]
 8029b10:	681b      	ldr	r3, [r3, #0]
 8029b12:	68fa      	ldr	r2, [r7, #12]
 8029b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8029b16:	687b      	ldr	r3, [r7, #4]
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	4a21      	ldr	r2, [pc, #132]	; (8029ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8029b1c:	4293      	cmp	r3, r2
 8029b1e:	d022      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b20:	687b      	ldr	r3, [r7, #4]
 8029b22:	681b      	ldr	r3, [r3, #0]
 8029b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b28:	d01d      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b2a:	687b      	ldr	r3, [r7, #4]
 8029b2c:	681b      	ldr	r3, [r3, #0]
 8029b2e:	4a1d      	ldr	r2, [pc, #116]	; (8029ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8029b30:	4293      	cmp	r3, r2
 8029b32:	d018      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b34:	687b      	ldr	r3, [r7, #4]
 8029b36:	681b      	ldr	r3, [r3, #0]
 8029b38:	4a1b      	ldr	r2, [pc, #108]	; (8029ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8029b3a:	4293      	cmp	r3, r2
 8029b3c:	d013      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b3e:	687b      	ldr	r3, [r7, #4]
 8029b40:	681b      	ldr	r3, [r3, #0]
 8029b42:	4a1a      	ldr	r2, [pc, #104]	; (8029bac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8029b44:	4293      	cmp	r3, r2
 8029b46:	d00e      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b48:	687b      	ldr	r3, [r7, #4]
 8029b4a:	681b      	ldr	r3, [r3, #0]
 8029b4c:	4a18      	ldr	r2, [pc, #96]	; (8029bb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029b4e:	4293      	cmp	r3, r2
 8029b50:	d009      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b52:	687b      	ldr	r3, [r7, #4]
 8029b54:	681b      	ldr	r3, [r3, #0]
 8029b56:	4a17      	ldr	r2, [pc, #92]	; (8029bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8029b58:	4293      	cmp	r3, r2
 8029b5a:	d004      	beq.n	8029b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029b5c:	687b      	ldr	r3, [r7, #4]
 8029b5e:	681b      	ldr	r3, [r3, #0]
 8029b60:	4a15      	ldr	r2, [pc, #84]	; (8029bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029b62:	4293      	cmp	r3, r2
 8029b64:	d10c      	bne.n	8029b80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8029b66:	68bb      	ldr	r3, [r7, #8]
 8029b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029b6e:	683b      	ldr	r3, [r7, #0]
 8029b70:	685b      	ldr	r3, [r3, #4]
 8029b72:	68ba      	ldr	r2, [r7, #8]
 8029b74:	4313      	orrs	r3, r2
 8029b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029b78:	687b      	ldr	r3, [r7, #4]
 8029b7a:	681b      	ldr	r3, [r3, #0]
 8029b7c:	68ba      	ldr	r2, [r7, #8]
 8029b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	2201      	movs	r2, #1
 8029b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	2200      	movs	r2, #0
 8029b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029b90:	2300      	movs	r3, #0
}
 8029b92:	4618      	mov	r0, r3
 8029b94:	3714      	adds	r7, #20
 8029b96:	46bd      	mov	sp, r7
 8029b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b9c:	4770      	bx	lr
 8029b9e:	bf00      	nop
 8029ba0:	40010000 	.word	0x40010000
 8029ba4:	40000400 	.word	0x40000400
 8029ba8:	40000800 	.word	0x40000800
 8029bac:	40000c00 	.word	0x40000c00
 8029bb0:	40010400 	.word	0x40010400
 8029bb4:	40014000 	.word	0x40014000
 8029bb8:	40001800 	.word	0x40001800

08029bbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8029bbc:	b480      	push	{r7}
 8029bbe:	b085      	sub	sp, #20
 8029bc0:	af00      	add	r7, sp, #0
 8029bc2:	6078      	str	r0, [r7, #4]
 8029bc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8029bc6:	2300      	movs	r3, #0
 8029bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029bd0:	2b01      	cmp	r3, #1
 8029bd2:	d101      	bne.n	8029bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8029bd4:	2302      	movs	r3, #2
 8029bd6:	e03d      	b.n	8029c54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8029bd8:	687b      	ldr	r3, [r7, #4]
 8029bda:	2201      	movs	r2, #1
 8029bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8029be0:	68fb      	ldr	r3, [r7, #12]
 8029be2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8029be6:	683b      	ldr	r3, [r7, #0]
 8029be8:	68db      	ldr	r3, [r3, #12]
 8029bea:	4313      	orrs	r3, r2
 8029bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8029bee:	68fb      	ldr	r3, [r7, #12]
 8029bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8029bf4:	683b      	ldr	r3, [r7, #0]
 8029bf6:	689b      	ldr	r3, [r3, #8]
 8029bf8:	4313      	orrs	r3, r2
 8029bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8029bfc:	68fb      	ldr	r3, [r7, #12]
 8029bfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8029c02:	683b      	ldr	r3, [r7, #0]
 8029c04:	685b      	ldr	r3, [r3, #4]
 8029c06:	4313      	orrs	r3, r2
 8029c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8029c0a:	68fb      	ldr	r3, [r7, #12]
 8029c0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8029c10:	683b      	ldr	r3, [r7, #0]
 8029c12:	681b      	ldr	r3, [r3, #0]
 8029c14:	4313      	orrs	r3, r2
 8029c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8029c18:	68fb      	ldr	r3, [r7, #12]
 8029c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029c1e:	683b      	ldr	r3, [r7, #0]
 8029c20:	691b      	ldr	r3, [r3, #16]
 8029c22:	4313      	orrs	r3, r2
 8029c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8029c26:	68fb      	ldr	r3, [r7, #12]
 8029c28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8029c2c:	683b      	ldr	r3, [r7, #0]
 8029c2e:	695b      	ldr	r3, [r3, #20]
 8029c30:	4313      	orrs	r3, r2
 8029c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8029c34:	68fb      	ldr	r3, [r7, #12]
 8029c36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8029c3a:	683b      	ldr	r3, [r7, #0]
 8029c3c:	69db      	ldr	r3, [r3, #28]
 8029c3e:	4313      	orrs	r3, r2
 8029c40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	681b      	ldr	r3, [r3, #0]
 8029c46:	68fa      	ldr	r2, [r7, #12]
 8029c48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	2200      	movs	r2, #0
 8029c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029c52:	2300      	movs	r3, #0
}
 8029c54:	4618      	mov	r0, r3
 8029c56:	3714      	adds	r7, #20
 8029c58:	46bd      	mov	sp, r7
 8029c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c5e:	4770      	bx	lr

08029c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029c60:	b480      	push	{r7}
 8029c62:	b083      	sub	sp, #12
 8029c64:	af00      	add	r7, sp, #0
 8029c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029c68:	bf00      	nop
 8029c6a:	370c      	adds	r7, #12
 8029c6c:	46bd      	mov	sp, r7
 8029c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c72:	4770      	bx	lr

08029c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029c74:	b480      	push	{r7}
 8029c76:	b083      	sub	sp, #12
 8029c78:	af00      	add	r7, sp, #0
 8029c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029c7c:	bf00      	nop
 8029c7e:	370c      	adds	r7, #12
 8029c80:	46bd      	mov	sp, r7
 8029c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c86:	4770      	bx	lr

08029c88 <__NVIC_SetPriority>:
{
 8029c88:	b480      	push	{r7}
 8029c8a:	b083      	sub	sp, #12
 8029c8c:	af00      	add	r7, sp, #0
 8029c8e:	4603      	mov	r3, r0
 8029c90:	6039      	str	r1, [r7, #0]
 8029c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029c98:	2b00      	cmp	r3, #0
 8029c9a:	db0a      	blt.n	8029cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029c9c:	683b      	ldr	r3, [r7, #0]
 8029c9e:	b2da      	uxtb	r2, r3
 8029ca0:	490c      	ldr	r1, [pc, #48]	; (8029cd4 <__NVIC_SetPriority+0x4c>)
 8029ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029ca6:	0112      	lsls	r2, r2, #4
 8029ca8:	b2d2      	uxtb	r2, r2
 8029caa:	440b      	add	r3, r1
 8029cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8029cb0:	e00a      	b.n	8029cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029cb2:	683b      	ldr	r3, [r7, #0]
 8029cb4:	b2da      	uxtb	r2, r3
 8029cb6:	4908      	ldr	r1, [pc, #32]	; (8029cd8 <__NVIC_SetPriority+0x50>)
 8029cb8:	79fb      	ldrb	r3, [r7, #7]
 8029cba:	f003 030f 	and.w	r3, r3, #15
 8029cbe:	3b04      	subs	r3, #4
 8029cc0:	0112      	lsls	r2, r2, #4
 8029cc2:	b2d2      	uxtb	r2, r2
 8029cc4:	440b      	add	r3, r1
 8029cc6:	761a      	strb	r2, [r3, #24]
}
 8029cc8:	bf00      	nop
 8029cca:	370c      	adds	r7, #12
 8029ccc:	46bd      	mov	sp, r7
 8029cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cd2:	4770      	bx	lr
 8029cd4:	e000e100 	.word	0xe000e100
 8029cd8:	e000ed00 	.word	0xe000ed00

08029cdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8029cdc:	b580      	push	{r7, lr}
 8029cde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8029ce0:	4b05      	ldr	r3, [pc, #20]	; (8029cf8 <SysTick_Handler+0x1c>)
 8029ce2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8029ce4:	f002 f832 	bl	802bd4c <xTaskGetSchedulerState>
 8029ce8:	4603      	mov	r3, r0
 8029cea:	2b01      	cmp	r3, #1
 8029cec:	d001      	beq.n	8029cf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8029cee:	f002 fe23 	bl	802c938 <xPortSysTickHandler>
  }
}
 8029cf2:	bf00      	nop
 8029cf4:	bd80      	pop	{r7, pc}
 8029cf6:	bf00      	nop
 8029cf8:	e000e010 	.word	0xe000e010

08029cfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8029cfc:	b580      	push	{r7, lr}
 8029cfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8029d00:	2100      	movs	r1, #0
 8029d02:	f06f 0004 	mvn.w	r0, #4
 8029d06:	f7ff ffbf 	bl	8029c88 <__NVIC_SetPriority>
#endif
}
 8029d0a:	bf00      	nop
 8029d0c:	bd80      	pop	{r7, pc}
	...

08029d10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8029d10:	b480      	push	{r7}
 8029d12:	b083      	sub	sp, #12
 8029d14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029d16:	f3ef 8305 	mrs	r3, IPSR
 8029d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8029d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029d1e:	2b00      	cmp	r3, #0
 8029d20:	d003      	beq.n	8029d2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8029d22:	f06f 0305 	mvn.w	r3, #5
 8029d26:	607b      	str	r3, [r7, #4]
 8029d28:	e00c      	b.n	8029d44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8029d2a:	4b0a      	ldr	r3, [pc, #40]	; (8029d54 <osKernelInitialize+0x44>)
 8029d2c:	681b      	ldr	r3, [r3, #0]
 8029d2e:	2b00      	cmp	r3, #0
 8029d30:	d105      	bne.n	8029d3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8029d32:	4b08      	ldr	r3, [pc, #32]	; (8029d54 <osKernelInitialize+0x44>)
 8029d34:	2201      	movs	r2, #1
 8029d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8029d38:	2300      	movs	r3, #0
 8029d3a:	607b      	str	r3, [r7, #4]
 8029d3c:	e002      	b.n	8029d44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8029d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8029d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8029d44:	687b      	ldr	r3, [r7, #4]
}
 8029d46:	4618      	mov	r0, r3
 8029d48:	370c      	adds	r7, #12
 8029d4a:	46bd      	mov	sp, r7
 8029d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d50:	4770      	bx	lr
 8029d52:	bf00      	nop
 8029d54:	20001940 	.word	0x20001940

08029d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	b082      	sub	sp, #8
 8029d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029d5e:	f3ef 8305 	mrs	r3, IPSR
 8029d62:	603b      	str	r3, [r7, #0]
  return(result);
 8029d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029d66:	2b00      	cmp	r3, #0
 8029d68:	d003      	beq.n	8029d72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8029d6a:	f06f 0305 	mvn.w	r3, #5
 8029d6e:	607b      	str	r3, [r7, #4]
 8029d70:	e010      	b.n	8029d94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8029d72:	4b0b      	ldr	r3, [pc, #44]	; (8029da0 <osKernelStart+0x48>)
 8029d74:	681b      	ldr	r3, [r3, #0]
 8029d76:	2b01      	cmp	r3, #1
 8029d78:	d109      	bne.n	8029d8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8029d7a:	f7ff ffbf 	bl	8029cfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8029d7e:	4b08      	ldr	r3, [pc, #32]	; (8029da0 <osKernelStart+0x48>)
 8029d80:	2202      	movs	r2, #2
 8029d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8029d84:	f001 fb08 	bl	802b398 <vTaskStartScheduler>
      stat = osOK;
 8029d88:	2300      	movs	r3, #0
 8029d8a:	607b      	str	r3, [r7, #4]
 8029d8c:	e002      	b.n	8029d94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8029d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8029d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8029d94:	687b      	ldr	r3, [r7, #4]
}
 8029d96:	4618      	mov	r0, r3
 8029d98:	3708      	adds	r7, #8
 8029d9a:	46bd      	mov	sp, r7
 8029d9c:	bd80      	pop	{r7, pc}
 8029d9e:	bf00      	nop
 8029da0:	20001940 	.word	0x20001940

08029da4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8029da4:	b580      	push	{r7, lr}
 8029da6:	b082      	sub	sp, #8
 8029da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029daa:	f3ef 8305 	mrs	r3, IPSR
 8029dae:	603b      	str	r3, [r7, #0]
  return(result);
 8029db0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	d003      	beq.n	8029dbe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8029db6:	f001 fc31 	bl	802b61c <xTaskGetTickCountFromISR>
 8029dba:	6078      	str	r0, [r7, #4]
 8029dbc:	e002      	b.n	8029dc4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8029dbe:	f001 fc1d 	bl	802b5fc <xTaskGetTickCount>
 8029dc2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8029dc4:	687b      	ldr	r3, [r7, #4]
}
 8029dc6:	4618      	mov	r0, r3
 8029dc8:	3708      	adds	r7, #8
 8029dca:	46bd      	mov	sp, r7
 8029dcc:	bd80      	pop	{r7, pc}

08029dce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8029dce:	b580      	push	{r7, lr}
 8029dd0:	b08e      	sub	sp, #56	; 0x38
 8029dd2:	af04      	add	r7, sp, #16
 8029dd4:	60f8      	str	r0, [r7, #12]
 8029dd6:	60b9      	str	r1, [r7, #8]
 8029dd8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8029dda:	2300      	movs	r3, #0
 8029ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029dde:	f3ef 8305 	mrs	r3, IPSR
 8029de2:	617b      	str	r3, [r7, #20]
  return(result);
 8029de4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	d17e      	bne.n	8029ee8 <osThreadNew+0x11a>
 8029dea:	68fb      	ldr	r3, [r7, #12]
 8029dec:	2b00      	cmp	r3, #0
 8029dee:	d07b      	beq.n	8029ee8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8029df0:	2380      	movs	r3, #128	; 0x80
 8029df2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8029df4:	2318      	movs	r3, #24
 8029df6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8029df8:	2300      	movs	r3, #0
 8029dfa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8029dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8029e00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	2b00      	cmp	r3, #0
 8029e06:	d045      	beq.n	8029e94 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8029e08:	687b      	ldr	r3, [r7, #4]
 8029e0a:	681b      	ldr	r3, [r3, #0]
 8029e0c:	2b00      	cmp	r3, #0
 8029e0e:	d002      	beq.n	8029e16 <osThreadNew+0x48>
        name = attr->name;
 8029e10:	687b      	ldr	r3, [r7, #4]
 8029e12:	681b      	ldr	r3, [r3, #0]
 8029e14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8029e16:	687b      	ldr	r3, [r7, #4]
 8029e18:	699b      	ldr	r3, [r3, #24]
 8029e1a:	2b00      	cmp	r3, #0
 8029e1c:	d002      	beq.n	8029e24 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8029e1e:	687b      	ldr	r3, [r7, #4]
 8029e20:	699b      	ldr	r3, [r3, #24]
 8029e22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8029e24:	69fb      	ldr	r3, [r7, #28]
 8029e26:	2b00      	cmp	r3, #0
 8029e28:	d008      	beq.n	8029e3c <osThreadNew+0x6e>
 8029e2a:	69fb      	ldr	r3, [r7, #28]
 8029e2c:	2b38      	cmp	r3, #56	; 0x38
 8029e2e:	d805      	bhi.n	8029e3c <osThreadNew+0x6e>
 8029e30:	687b      	ldr	r3, [r7, #4]
 8029e32:	685b      	ldr	r3, [r3, #4]
 8029e34:	f003 0301 	and.w	r3, r3, #1
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	d001      	beq.n	8029e40 <osThreadNew+0x72>
        return (NULL);
 8029e3c:	2300      	movs	r3, #0
 8029e3e:	e054      	b.n	8029eea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	695b      	ldr	r3, [r3, #20]
 8029e44:	2b00      	cmp	r3, #0
 8029e46:	d003      	beq.n	8029e50 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8029e48:	687b      	ldr	r3, [r7, #4]
 8029e4a:	695b      	ldr	r3, [r3, #20]
 8029e4c:	089b      	lsrs	r3, r3, #2
 8029e4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8029e50:	687b      	ldr	r3, [r7, #4]
 8029e52:	689b      	ldr	r3, [r3, #8]
 8029e54:	2b00      	cmp	r3, #0
 8029e56:	d00e      	beq.n	8029e76 <osThreadNew+0xa8>
 8029e58:	687b      	ldr	r3, [r7, #4]
 8029e5a:	68db      	ldr	r3, [r3, #12]
 8029e5c:	2bcb      	cmp	r3, #203	; 0xcb
 8029e5e:	d90a      	bls.n	8029e76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8029e60:	687b      	ldr	r3, [r7, #4]
 8029e62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8029e64:	2b00      	cmp	r3, #0
 8029e66:	d006      	beq.n	8029e76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8029e68:	687b      	ldr	r3, [r7, #4]
 8029e6a:	695b      	ldr	r3, [r3, #20]
 8029e6c:	2b00      	cmp	r3, #0
 8029e6e:	d002      	beq.n	8029e76 <osThreadNew+0xa8>
        mem = 1;
 8029e70:	2301      	movs	r3, #1
 8029e72:	61bb      	str	r3, [r7, #24]
 8029e74:	e010      	b.n	8029e98 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8029e76:	687b      	ldr	r3, [r7, #4]
 8029e78:	689b      	ldr	r3, [r3, #8]
 8029e7a:	2b00      	cmp	r3, #0
 8029e7c:	d10c      	bne.n	8029e98 <osThreadNew+0xca>
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	68db      	ldr	r3, [r3, #12]
 8029e82:	2b00      	cmp	r3, #0
 8029e84:	d108      	bne.n	8029e98 <osThreadNew+0xca>
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	691b      	ldr	r3, [r3, #16]
 8029e8a:	2b00      	cmp	r3, #0
 8029e8c:	d104      	bne.n	8029e98 <osThreadNew+0xca>
          mem = 0;
 8029e8e:	2300      	movs	r3, #0
 8029e90:	61bb      	str	r3, [r7, #24]
 8029e92:	e001      	b.n	8029e98 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8029e94:	2300      	movs	r3, #0
 8029e96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8029e98:	69bb      	ldr	r3, [r7, #24]
 8029e9a:	2b01      	cmp	r3, #1
 8029e9c:	d110      	bne.n	8029ec0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8029ea2:	687a      	ldr	r2, [r7, #4]
 8029ea4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8029ea6:	9202      	str	r2, [sp, #8]
 8029ea8:	9301      	str	r3, [sp, #4]
 8029eaa:	69fb      	ldr	r3, [r7, #28]
 8029eac:	9300      	str	r3, [sp, #0]
 8029eae:	68bb      	ldr	r3, [r7, #8]
 8029eb0:	6a3a      	ldr	r2, [r7, #32]
 8029eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029eb4:	68f8      	ldr	r0, [r7, #12]
 8029eb6:	f000 ffe1 	bl	802ae7c <xTaskCreateStatic>
 8029eba:	4603      	mov	r3, r0
 8029ebc:	613b      	str	r3, [r7, #16]
 8029ebe:	e013      	b.n	8029ee8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8029ec0:	69bb      	ldr	r3, [r7, #24]
 8029ec2:	2b00      	cmp	r3, #0
 8029ec4:	d110      	bne.n	8029ee8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8029ec6:	6a3b      	ldr	r3, [r7, #32]
 8029ec8:	b29a      	uxth	r2, r3
 8029eca:	f107 0310 	add.w	r3, r7, #16
 8029ece:	9301      	str	r3, [sp, #4]
 8029ed0:	69fb      	ldr	r3, [r7, #28]
 8029ed2:	9300      	str	r3, [sp, #0]
 8029ed4:	68bb      	ldr	r3, [r7, #8]
 8029ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029ed8:	68f8      	ldr	r0, [r7, #12]
 8029eda:	f001 f82c 	bl	802af36 <xTaskCreate>
 8029ede:	4603      	mov	r3, r0
 8029ee0:	2b01      	cmp	r3, #1
 8029ee2:	d001      	beq.n	8029ee8 <osThreadNew+0x11a>
            hTask = NULL;
 8029ee4:	2300      	movs	r3, #0
 8029ee6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8029ee8:	693b      	ldr	r3, [r7, #16]
}
 8029eea:	4618      	mov	r0, r3
 8029eec:	3728      	adds	r7, #40	; 0x28
 8029eee:	46bd      	mov	sp, r7
 8029ef0:	bd80      	pop	{r7, pc}

08029ef2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8029ef2:	b580      	push	{r7, lr}
 8029ef4:	b084      	sub	sp, #16
 8029ef6:	af00      	add	r7, sp, #0
 8029ef8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029efa:	f3ef 8305 	mrs	r3, IPSR
 8029efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8029f00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029f02:	2b00      	cmp	r3, #0
 8029f04:	d003      	beq.n	8029f0e <osDelay+0x1c>
    stat = osErrorISR;
 8029f06:	f06f 0305 	mvn.w	r3, #5
 8029f0a:	60fb      	str	r3, [r7, #12]
 8029f0c:	e007      	b.n	8029f1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8029f0e:	2300      	movs	r3, #0
 8029f10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8029f12:	687b      	ldr	r3, [r7, #4]
 8029f14:	2b00      	cmp	r3, #0
 8029f16:	d002      	beq.n	8029f1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8029f18:	6878      	ldr	r0, [r7, #4]
 8029f1a:	f001 fa05 	bl	802b328 <vTaskDelay>
    }
  }

  return (stat);
 8029f1e:	68fb      	ldr	r3, [r7, #12]
}
 8029f20:	4618      	mov	r0, r3
 8029f22:	3710      	adds	r7, #16
 8029f24:	46bd      	mov	sp, r7
 8029f26:	bd80      	pop	{r7, pc}

08029f28 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8029f28:	b580      	push	{r7, lr}
 8029f2a:	b086      	sub	sp, #24
 8029f2c:	af00      	add	r7, sp, #0
 8029f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029f30:	f3ef 8305 	mrs	r3, IPSR
 8029f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8029f36:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8029f38:	2b00      	cmp	r3, #0
 8029f3a:	d003      	beq.n	8029f44 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8029f3c:	f06f 0305 	mvn.w	r3, #5
 8029f40:	617b      	str	r3, [r7, #20]
 8029f42:	e019      	b.n	8029f78 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8029f44:	2300      	movs	r3, #0
 8029f46:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8029f48:	f001 fb58 	bl	802b5fc <xTaskGetTickCount>
 8029f4c:	4603      	mov	r3, r0
 8029f4e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8029f50:	68bb      	ldr	r3, [r7, #8]
 8029f52:	687a      	ldr	r2, [r7, #4]
 8029f54:	1ad3      	subs	r3, r2, r3
 8029f56:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8029f58:	693b      	ldr	r3, [r7, #16]
 8029f5a:	2b00      	cmp	r3, #0
 8029f5c:	d009      	beq.n	8029f72 <osDelayUntil+0x4a>
 8029f5e:	693b      	ldr	r3, [r7, #16]
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	db06      	blt.n	8029f72 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8029f64:	f107 0308 	add.w	r3, r7, #8
 8029f68:	6939      	ldr	r1, [r7, #16]
 8029f6a:	4618      	mov	r0, r3
 8029f6c:	f001 f95c 	bl	802b228 <vTaskDelayUntil>
 8029f70:	e002      	b.n	8029f78 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8029f72:	f06f 0303 	mvn.w	r3, #3
 8029f76:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8029f78:	697b      	ldr	r3, [r7, #20]
}
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	3718      	adds	r7, #24
 8029f7e:	46bd      	mov	sp, r7
 8029f80:	bd80      	pop	{r7, pc}
	...

08029f84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8029f84:	b480      	push	{r7}
 8029f86:	b085      	sub	sp, #20
 8029f88:	af00      	add	r7, sp, #0
 8029f8a:	60f8      	str	r0, [r7, #12]
 8029f8c:	60b9      	str	r1, [r7, #8]
 8029f8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8029f90:	68fb      	ldr	r3, [r7, #12]
 8029f92:	4a07      	ldr	r2, [pc, #28]	; (8029fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8029f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8029f96:	68bb      	ldr	r3, [r7, #8]
 8029f98:	4a06      	ldr	r2, [pc, #24]	; (8029fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8029f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8029f9c:	687b      	ldr	r3, [r7, #4]
 8029f9e:	2280      	movs	r2, #128	; 0x80
 8029fa0:	601a      	str	r2, [r3, #0]
}
 8029fa2:	bf00      	nop
 8029fa4:	3714      	adds	r7, #20
 8029fa6:	46bd      	mov	sp, r7
 8029fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fac:	4770      	bx	lr
 8029fae:	bf00      	nop
 8029fb0:	20001944 	.word	0x20001944
 8029fb4:	20001a10 	.word	0x20001a10

08029fb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8029fb8:	b480      	push	{r7}
 8029fba:	b085      	sub	sp, #20
 8029fbc:	af00      	add	r7, sp, #0
 8029fbe:	60f8      	str	r0, [r7, #12]
 8029fc0:	60b9      	str	r1, [r7, #8]
 8029fc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8029fc4:	68fb      	ldr	r3, [r7, #12]
 8029fc6:	4a07      	ldr	r2, [pc, #28]	; (8029fe4 <vApplicationGetTimerTaskMemory+0x2c>)
 8029fc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8029fca:	68bb      	ldr	r3, [r7, #8]
 8029fcc:	4a06      	ldr	r2, [pc, #24]	; (8029fe8 <vApplicationGetTimerTaskMemory+0x30>)
 8029fce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8029fd0:	687b      	ldr	r3, [r7, #4]
 8029fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8029fd6:	601a      	str	r2, [r3, #0]
}
 8029fd8:	bf00      	nop
 8029fda:	3714      	adds	r7, #20
 8029fdc:	46bd      	mov	sp, r7
 8029fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fe2:	4770      	bx	lr
 8029fe4:	20001c10 	.word	0x20001c10
 8029fe8:	20001cdc 	.word	0x20001cdc

08029fec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8029fec:	b480      	push	{r7}
 8029fee:	b083      	sub	sp, #12
 8029ff0:	af00      	add	r7, sp, #0
 8029ff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8029ff4:	687b      	ldr	r3, [r7, #4]
 8029ff6:	f103 0208 	add.w	r2, r3, #8
 8029ffa:	687b      	ldr	r3, [r7, #4]
 8029ffc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	f04f 32ff 	mov.w	r2, #4294967295
 802a004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	f103 0208 	add.w	r2, r3, #8
 802a00c:	687b      	ldr	r3, [r7, #4]
 802a00e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a010:	687b      	ldr	r3, [r7, #4]
 802a012:	f103 0208 	add.w	r2, r3, #8
 802a016:	687b      	ldr	r3, [r7, #4]
 802a018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	2200      	movs	r2, #0
 802a01e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802a020:	bf00      	nop
 802a022:	370c      	adds	r7, #12
 802a024:	46bd      	mov	sp, r7
 802a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a02a:	4770      	bx	lr

0802a02c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 802a02c:	b480      	push	{r7}
 802a02e:	b083      	sub	sp, #12
 802a030:	af00      	add	r7, sp, #0
 802a032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	2200      	movs	r2, #0
 802a038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802a03a:	bf00      	nop
 802a03c:	370c      	adds	r7, #12
 802a03e:	46bd      	mov	sp, r7
 802a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a044:	4770      	bx	lr

0802a046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a046:	b480      	push	{r7}
 802a048:	b085      	sub	sp, #20
 802a04a:	af00      	add	r7, sp, #0
 802a04c:	6078      	str	r0, [r7, #4]
 802a04e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802a050:	687b      	ldr	r3, [r7, #4]
 802a052:	685b      	ldr	r3, [r3, #4]
 802a054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802a056:	683b      	ldr	r3, [r7, #0]
 802a058:	68fa      	ldr	r2, [r7, #12]
 802a05a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802a05c:	68fb      	ldr	r3, [r7, #12]
 802a05e:	689a      	ldr	r2, [r3, #8]
 802a060:	683b      	ldr	r3, [r7, #0]
 802a062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802a064:	68fb      	ldr	r3, [r7, #12]
 802a066:	689b      	ldr	r3, [r3, #8]
 802a068:	683a      	ldr	r2, [r7, #0]
 802a06a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802a06c:	68fb      	ldr	r3, [r7, #12]
 802a06e:	683a      	ldr	r2, [r7, #0]
 802a070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802a072:	683b      	ldr	r3, [r7, #0]
 802a074:	687a      	ldr	r2, [r7, #4]
 802a076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	681b      	ldr	r3, [r3, #0]
 802a07c:	1c5a      	adds	r2, r3, #1
 802a07e:	687b      	ldr	r3, [r7, #4]
 802a080:	601a      	str	r2, [r3, #0]
}
 802a082:	bf00      	nop
 802a084:	3714      	adds	r7, #20
 802a086:	46bd      	mov	sp, r7
 802a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a08c:	4770      	bx	lr

0802a08e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a08e:	b480      	push	{r7}
 802a090:	b085      	sub	sp, #20
 802a092:	af00      	add	r7, sp, #0
 802a094:	6078      	str	r0, [r7, #4]
 802a096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802a098:	683b      	ldr	r3, [r7, #0]
 802a09a:	681b      	ldr	r3, [r3, #0]
 802a09c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802a09e:	68bb      	ldr	r3, [r7, #8]
 802a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a0a4:	d103      	bne.n	802a0ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	691b      	ldr	r3, [r3, #16]
 802a0aa:	60fb      	str	r3, [r7, #12]
 802a0ac:	e00c      	b.n	802a0c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802a0ae:	687b      	ldr	r3, [r7, #4]
 802a0b0:	3308      	adds	r3, #8
 802a0b2:	60fb      	str	r3, [r7, #12]
 802a0b4:	e002      	b.n	802a0bc <vListInsert+0x2e>
 802a0b6:	68fb      	ldr	r3, [r7, #12]
 802a0b8:	685b      	ldr	r3, [r3, #4]
 802a0ba:	60fb      	str	r3, [r7, #12]
 802a0bc:	68fb      	ldr	r3, [r7, #12]
 802a0be:	685b      	ldr	r3, [r3, #4]
 802a0c0:	681b      	ldr	r3, [r3, #0]
 802a0c2:	68ba      	ldr	r2, [r7, #8]
 802a0c4:	429a      	cmp	r2, r3
 802a0c6:	d2f6      	bcs.n	802a0b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802a0c8:	68fb      	ldr	r3, [r7, #12]
 802a0ca:	685a      	ldr	r2, [r3, #4]
 802a0cc:	683b      	ldr	r3, [r7, #0]
 802a0ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802a0d0:	683b      	ldr	r3, [r7, #0]
 802a0d2:	685b      	ldr	r3, [r3, #4]
 802a0d4:	683a      	ldr	r2, [r7, #0]
 802a0d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802a0d8:	683b      	ldr	r3, [r7, #0]
 802a0da:	68fa      	ldr	r2, [r7, #12]
 802a0dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802a0de:	68fb      	ldr	r3, [r7, #12]
 802a0e0:	683a      	ldr	r2, [r7, #0]
 802a0e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 802a0e4:	683b      	ldr	r3, [r7, #0]
 802a0e6:	687a      	ldr	r2, [r7, #4]
 802a0e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a0ea:	687b      	ldr	r3, [r7, #4]
 802a0ec:	681b      	ldr	r3, [r3, #0]
 802a0ee:	1c5a      	adds	r2, r3, #1
 802a0f0:	687b      	ldr	r3, [r7, #4]
 802a0f2:	601a      	str	r2, [r3, #0]
}
 802a0f4:	bf00      	nop
 802a0f6:	3714      	adds	r7, #20
 802a0f8:	46bd      	mov	sp, r7
 802a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0fe:	4770      	bx	lr

0802a100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802a100:	b480      	push	{r7}
 802a102:	b085      	sub	sp, #20
 802a104:	af00      	add	r7, sp, #0
 802a106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802a108:	687b      	ldr	r3, [r7, #4]
 802a10a:	691b      	ldr	r3, [r3, #16]
 802a10c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802a10e:	687b      	ldr	r3, [r7, #4]
 802a110:	685b      	ldr	r3, [r3, #4]
 802a112:	687a      	ldr	r2, [r7, #4]
 802a114:	6892      	ldr	r2, [r2, #8]
 802a116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802a118:	687b      	ldr	r3, [r7, #4]
 802a11a:	689b      	ldr	r3, [r3, #8]
 802a11c:	687a      	ldr	r2, [r7, #4]
 802a11e:	6852      	ldr	r2, [r2, #4]
 802a120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802a122:	68fb      	ldr	r3, [r7, #12]
 802a124:	685b      	ldr	r3, [r3, #4]
 802a126:	687a      	ldr	r2, [r7, #4]
 802a128:	429a      	cmp	r2, r3
 802a12a:	d103      	bne.n	802a134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 802a12c:	687b      	ldr	r3, [r7, #4]
 802a12e:	689a      	ldr	r2, [r3, #8]
 802a130:	68fb      	ldr	r3, [r7, #12]
 802a132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 802a134:	687b      	ldr	r3, [r7, #4]
 802a136:	2200      	movs	r2, #0
 802a138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802a13a:	68fb      	ldr	r3, [r7, #12]
 802a13c:	681b      	ldr	r3, [r3, #0]
 802a13e:	1e5a      	subs	r2, r3, #1
 802a140:	68fb      	ldr	r3, [r7, #12]
 802a142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 802a144:	68fb      	ldr	r3, [r7, #12]
 802a146:	681b      	ldr	r3, [r3, #0]
}
 802a148:	4618      	mov	r0, r3
 802a14a:	3714      	adds	r7, #20
 802a14c:	46bd      	mov	sp, r7
 802a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a152:	4770      	bx	lr

0802a154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 802a154:	b580      	push	{r7, lr}
 802a156:	b084      	sub	sp, #16
 802a158:	af00      	add	r7, sp, #0
 802a15a:	6078      	str	r0, [r7, #4]
 802a15c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802a15e:	687b      	ldr	r3, [r7, #4]
 802a160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802a162:	68fb      	ldr	r3, [r7, #12]
 802a164:	2b00      	cmp	r3, #0
 802a166:	d10a      	bne.n	802a17e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a16c:	f383 8811 	msr	BASEPRI, r3
 802a170:	f3bf 8f6f 	isb	sy
 802a174:	f3bf 8f4f 	dsb	sy
 802a178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802a17a:	bf00      	nop
 802a17c:	e7fe      	b.n	802a17c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802a17e:	f002 fb49 	bl	802c814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a182:	68fb      	ldr	r3, [r7, #12]
 802a184:	681a      	ldr	r2, [r3, #0]
 802a186:	68fb      	ldr	r3, [r7, #12]
 802a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a18a:	68f9      	ldr	r1, [r7, #12]
 802a18c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a18e:	fb01 f303 	mul.w	r3, r1, r3
 802a192:	441a      	add	r2, r3
 802a194:	68fb      	ldr	r3, [r7, #12]
 802a196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802a198:	68fb      	ldr	r3, [r7, #12]
 802a19a:	2200      	movs	r2, #0
 802a19c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802a19e:	68fb      	ldr	r3, [r7, #12]
 802a1a0:	681a      	ldr	r2, [r3, #0]
 802a1a2:	68fb      	ldr	r3, [r7, #12]
 802a1a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a1a6:	68fb      	ldr	r3, [r7, #12]
 802a1a8:	681a      	ldr	r2, [r3, #0]
 802a1aa:	68fb      	ldr	r3, [r7, #12]
 802a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a1ae:	3b01      	subs	r3, #1
 802a1b0:	68f9      	ldr	r1, [r7, #12]
 802a1b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a1b4:	fb01 f303 	mul.w	r3, r1, r3
 802a1b8:	441a      	add	r2, r3
 802a1ba:	68fb      	ldr	r3, [r7, #12]
 802a1bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802a1be:	68fb      	ldr	r3, [r7, #12]
 802a1c0:	22ff      	movs	r2, #255	; 0xff
 802a1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802a1c6:	68fb      	ldr	r3, [r7, #12]
 802a1c8:	22ff      	movs	r2, #255	; 0xff
 802a1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802a1ce:	683b      	ldr	r3, [r7, #0]
 802a1d0:	2b00      	cmp	r3, #0
 802a1d2:	d114      	bne.n	802a1fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802a1d4:	68fb      	ldr	r3, [r7, #12]
 802a1d6:	691b      	ldr	r3, [r3, #16]
 802a1d8:	2b00      	cmp	r3, #0
 802a1da:	d01a      	beq.n	802a212 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802a1dc:	68fb      	ldr	r3, [r7, #12]
 802a1de:	3310      	adds	r3, #16
 802a1e0:	4618      	mov	r0, r3
 802a1e2:	f001 fbb5 	bl	802b950 <xTaskRemoveFromEventList>
 802a1e6:	4603      	mov	r3, r0
 802a1e8:	2b00      	cmp	r3, #0
 802a1ea:	d012      	beq.n	802a212 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 802a1ec:	4b0c      	ldr	r3, [pc, #48]	; (802a220 <xQueueGenericReset+0xcc>)
 802a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a1f2:	601a      	str	r2, [r3, #0]
 802a1f4:	f3bf 8f4f 	dsb	sy
 802a1f8:	f3bf 8f6f 	isb	sy
 802a1fc:	e009      	b.n	802a212 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802a1fe:	68fb      	ldr	r3, [r7, #12]
 802a200:	3310      	adds	r3, #16
 802a202:	4618      	mov	r0, r3
 802a204:	f7ff fef2 	bl	8029fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 802a208:	68fb      	ldr	r3, [r7, #12]
 802a20a:	3324      	adds	r3, #36	; 0x24
 802a20c:	4618      	mov	r0, r3
 802a20e:	f7ff feed 	bl	8029fec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802a212:	f002 fb2f 	bl	802c874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 802a216:	2301      	movs	r3, #1
}
 802a218:	4618      	mov	r0, r3
 802a21a:	3710      	adds	r7, #16
 802a21c:	46bd      	mov	sp, r7
 802a21e:	bd80      	pop	{r7, pc}
 802a220:	e000ed04 	.word	0xe000ed04

0802a224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 802a224:	b580      	push	{r7, lr}
 802a226:	b08e      	sub	sp, #56	; 0x38
 802a228:	af02      	add	r7, sp, #8
 802a22a:	60f8      	str	r0, [r7, #12]
 802a22c:	60b9      	str	r1, [r7, #8]
 802a22e:	607a      	str	r2, [r7, #4]
 802a230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a232:	68fb      	ldr	r3, [r7, #12]
 802a234:	2b00      	cmp	r3, #0
 802a236:	d10a      	bne.n	802a24e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 802a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a23c:	f383 8811 	msr	BASEPRI, r3
 802a240:	f3bf 8f6f 	isb	sy
 802a244:	f3bf 8f4f 	dsb	sy
 802a248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a24a:	bf00      	nop
 802a24c:	e7fe      	b.n	802a24c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802a24e:	683b      	ldr	r3, [r7, #0]
 802a250:	2b00      	cmp	r3, #0
 802a252:	d10a      	bne.n	802a26a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 802a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a258:	f383 8811 	msr	BASEPRI, r3
 802a25c:	f3bf 8f6f 	isb	sy
 802a260:	f3bf 8f4f 	dsb	sy
 802a264:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a266:	bf00      	nop
 802a268:	e7fe      	b.n	802a268 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d002      	beq.n	802a276 <xQueueGenericCreateStatic+0x52>
 802a270:	68bb      	ldr	r3, [r7, #8]
 802a272:	2b00      	cmp	r3, #0
 802a274:	d001      	beq.n	802a27a <xQueueGenericCreateStatic+0x56>
 802a276:	2301      	movs	r3, #1
 802a278:	e000      	b.n	802a27c <xQueueGenericCreateStatic+0x58>
 802a27a:	2300      	movs	r3, #0
 802a27c:	2b00      	cmp	r3, #0
 802a27e:	d10a      	bne.n	802a296 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a284:	f383 8811 	msr	BASEPRI, r3
 802a288:	f3bf 8f6f 	isb	sy
 802a28c:	f3bf 8f4f 	dsb	sy
 802a290:	623b      	str	r3, [r7, #32]
}
 802a292:	bf00      	nop
 802a294:	e7fe      	b.n	802a294 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802a296:	687b      	ldr	r3, [r7, #4]
 802a298:	2b00      	cmp	r3, #0
 802a29a:	d102      	bne.n	802a2a2 <xQueueGenericCreateStatic+0x7e>
 802a29c:	68bb      	ldr	r3, [r7, #8]
 802a29e:	2b00      	cmp	r3, #0
 802a2a0:	d101      	bne.n	802a2a6 <xQueueGenericCreateStatic+0x82>
 802a2a2:	2301      	movs	r3, #1
 802a2a4:	e000      	b.n	802a2a8 <xQueueGenericCreateStatic+0x84>
 802a2a6:	2300      	movs	r3, #0
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	d10a      	bne.n	802a2c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 802a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a2b0:	f383 8811 	msr	BASEPRI, r3
 802a2b4:	f3bf 8f6f 	isb	sy
 802a2b8:	f3bf 8f4f 	dsb	sy
 802a2bc:	61fb      	str	r3, [r7, #28]
}
 802a2be:	bf00      	nop
 802a2c0:	e7fe      	b.n	802a2c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802a2c2:	2350      	movs	r3, #80	; 0x50
 802a2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802a2c6:	697b      	ldr	r3, [r7, #20]
 802a2c8:	2b50      	cmp	r3, #80	; 0x50
 802a2ca:	d00a      	beq.n	802a2e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 802a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a2d0:	f383 8811 	msr	BASEPRI, r3
 802a2d4:	f3bf 8f6f 	isb	sy
 802a2d8:	f3bf 8f4f 	dsb	sy
 802a2dc:	61bb      	str	r3, [r7, #24]
}
 802a2de:	bf00      	nop
 802a2e0:	e7fe      	b.n	802a2e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802a2e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802a2e4:	683b      	ldr	r3, [r7, #0]
 802a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 802a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d00d      	beq.n	802a30a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a2f0:	2201      	movs	r2, #1
 802a2f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a2f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 802a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a2fc:	9300      	str	r3, [sp, #0]
 802a2fe:	4613      	mov	r3, r2
 802a300:	687a      	ldr	r2, [r7, #4]
 802a302:	68b9      	ldr	r1, [r7, #8]
 802a304:	68f8      	ldr	r0, [r7, #12]
 802a306:	f000 f83f 	bl	802a388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 802a30c:	4618      	mov	r0, r3
 802a30e:	3730      	adds	r7, #48	; 0x30
 802a310:	46bd      	mov	sp, r7
 802a312:	bd80      	pop	{r7, pc}

0802a314 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 802a314:	b580      	push	{r7, lr}
 802a316:	b08a      	sub	sp, #40	; 0x28
 802a318:	af02      	add	r7, sp, #8
 802a31a:	60f8      	str	r0, [r7, #12]
 802a31c:	60b9      	str	r1, [r7, #8]
 802a31e:	4613      	mov	r3, r2
 802a320:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a322:	68fb      	ldr	r3, [r7, #12]
 802a324:	2b00      	cmp	r3, #0
 802a326:	d10a      	bne.n	802a33e <xQueueGenericCreate+0x2a>
	__asm volatile
 802a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a32c:	f383 8811 	msr	BASEPRI, r3
 802a330:	f3bf 8f6f 	isb	sy
 802a334:	f3bf 8f4f 	dsb	sy
 802a338:	613b      	str	r3, [r7, #16]
}
 802a33a:	bf00      	nop
 802a33c:	e7fe      	b.n	802a33c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a33e:	68fb      	ldr	r3, [r7, #12]
 802a340:	68ba      	ldr	r2, [r7, #8]
 802a342:	fb02 f303 	mul.w	r3, r2, r3
 802a346:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802a348:	69fb      	ldr	r3, [r7, #28]
 802a34a:	3350      	adds	r3, #80	; 0x50
 802a34c:	4618      	mov	r0, r3
 802a34e:	f002 fb83 	bl	802ca58 <pvPortMalloc>
 802a352:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 802a354:	69bb      	ldr	r3, [r7, #24]
 802a356:	2b00      	cmp	r3, #0
 802a358:	d011      	beq.n	802a37e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802a35a:	69bb      	ldr	r3, [r7, #24]
 802a35c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a35e:	697b      	ldr	r3, [r7, #20]
 802a360:	3350      	adds	r3, #80	; 0x50
 802a362:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 802a364:	69bb      	ldr	r3, [r7, #24]
 802a366:	2200      	movs	r2, #0
 802a368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a36c:	79fa      	ldrb	r2, [r7, #7]
 802a36e:	69bb      	ldr	r3, [r7, #24]
 802a370:	9300      	str	r3, [sp, #0]
 802a372:	4613      	mov	r3, r2
 802a374:	697a      	ldr	r2, [r7, #20]
 802a376:	68b9      	ldr	r1, [r7, #8]
 802a378:	68f8      	ldr	r0, [r7, #12]
 802a37a:	f000 f805 	bl	802a388 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a37e:	69bb      	ldr	r3, [r7, #24]
	}
 802a380:	4618      	mov	r0, r3
 802a382:	3720      	adds	r7, #32
 802a384:	46bd      	mov	sp, r7
 802a386:	bd80      	pop	{r7, pc}

0802a388 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802a388:	b580      	push	{r7, lr}
 802a38a:	b084      	sub	sp, #16
 802a38c:	af00      	add	r7, sp, #0
 802a38e:	60f8      	str	r0, [r7, #12]
 802a390:	60b9      	str	r1, [r7, #8]
 802a392:	607a      	str	r2, [r7, #4]
 802a394:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 802a396:	68bb      	ldr	r3, [r7, #8]
 802a398:	2b00      	cmp	r3, #0
 802a39a:	d103      	bne.n	802a3a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 802a39c:	69bb      	ldr	r3, [r7, #24]
 802a39e:	69ba      	ldr	r2, [r7, #24]
 802a3a0:	601a      	str	r2, [r3, #0]
 802a3a2:	e002      	b.n	802a3aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 802a3a4:	69bb      	ldr	r3, [r7, #24]
 802a3a6:	687a      	ldr	r2, [r7, #4]
 802a3a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 802a3aa:	69bb      	ldr	r3, [r7, #24]
 802a3ac:	68fa      	ldr	r2, [r7, #12]
 802a3ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802a3b0:	69bb      	ldr	r3, [r7, #24]
 802a3b2:	68ba      	ldr	r2, [r7, #8]
 802a3b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802a3b6:	2101      	movs	r1, #1
 802a3b8:	69b8      	ldr	r0, [r7, #24]
 802a3ba:	f7ff fecb 	bl	802a154 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802a3be:	69bb      	ldr	r3, [r7, #24]
 802a3c0:	78fa      	ldrb	r2, [r7, #3]
 802a3c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 802a3c6:	78fb      	ldrb	r3, [r7, #3]
 802a3c8:	68ba      	ldr	r2, [r7, #8]
 802a3ca:	68f9      	ldr	r1, [r7, #12]
 802a3cc:	2073      	movs	r0, #115	; 0x73
 802a3ce:	f003 facb 	bl	802d968 <SEGGER_SYSVIEW_RecordU32x3>
}
 802a3d2:	bf00      	nop
 802a3d4:	3710      	adds	r7, #16
 802a3d6:	46bd      	mov	sp, r7
 802a3d8:	bd80      	pop	{r7, pc}
	...

0802a3dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 802a3dc:	b580      	push	{r7, lr}
 802a3de:	b090      	sub	sp, #64	; 0x40
 802a3e0:	af02      	add	r7, sp, #8
 802a3e2:	60f8      	str	r0, [r7, #12]
 802a3e4:	60b9      	str	r1, [r7, #8]
 802a3e6:	607a      	str	r2, [r7, #4]
 802a3e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802a3ea:	2300      	movs	r3, #0
 802a3ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802a3ee:	68fb      	ldr	r3, [r7, #12]
 802a3f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a3f4:	2b00      	cmp	r3, #0
 802a3f6:	d10a      	bne.n	802a40e <xQueueGenericSend+0x32>
	__asm volatile
 802a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a3fc:	f383 8811 	msr	BASEPRI, r3
 802a400:	f3bf 8f6f 	isb	sy
 802a404:	f3bf 8f4f 	dsb	sy
 802a408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a40a:	bf00      	nop
 802a40c:	e7fe      	b.n	802a40c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a40e:	68bb      	ldr	r3, [r7, #8]
 802a410:	2b00      	cmp	r3, #0
 802a412:	d103      	bne.n	802a41c <xQueueGenericSend+0x40>
 802a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a418:	2b00      	cmp	r3, #0
 802a41a:	d101      	bne.n	802a420 <xQueueGenericSend+0x44>
 802a41c:	2301      	movs	r3, #1
 802a41e:	e000      	b.n	802a422 <xQueueGenericSend+0x46>
 802a420:	2300      	movs	r3, #0
 802a422:	2b00      	cmp	r3, #0
 802a424:	d10a      	bne.n	802a43c <xQueueGenericSend+0x60>
	__asm volatile
 802a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a42a:	f383 8811 	msr	BASEPRI, r3
 802a42e:	f3bf 8f6f 	isb	sy
 802a432:	f3bf 8f4f 	dsb	sy
 802a436:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a438:	bf00      	nop
 802a43a:	e7fe      	b.n	802a43a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a43c:	683b      	ldr	r3, [r7, #0]
 802a43e:	2b02      	cmp	r3, #2
 802a440:	d103      	bne.n	802a44a <xQueueGenericSend+0x6e>
 802a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a446:	2b01      	cmp	r3, #1
 802a448:	d101      	bne.n	802a44e <xQueueGenericSend+0x72>
 802a44a:	2301      	movs	r3, #1
 802a44c:	e000      	b.n	802a450 <xQueueGenericSend+0x74>
 802a44e:	2300      	movs	r3, #0
 802a450:	2b00      	cmp	r3, #0
 802a452:	d10a      	bne.n	802a46a <xQueueGenericSend+0x8e>
	__asm volatile
 802a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a458:	f383 8811 	msr	BASEPRI, r3
 802a45c:	f3bf 8f6f 	isb	sy
 802a460:	f3bf 8f4f 	dsb	sy
 802a464:	623b      	str	r3, [r7, #32]
}
 802a466:	bf00      	nop
 802a468:	e7fe      	b.n	802a468 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802a46a:	f001 fc6f 	bl	802bd4c <xTaskGetSchedulerState>
 802a46e:	4603      	mov	r3, r0
 802a470:	2b00      	cmp	r3, #0
 802a472:	d102      	bne.n	802a47a <xQueueGenericSend+0x9e>
 802a474:	687b      	ldr	r3, [r7, #4]
 802a476:	2b00      	cmp	r3, #0
 802a478:	d101      	bne.n	802a47e <xQueueGenericSend+0xa2>
 802a47a:	2301      	movs	r3, #1
 802a47c:	e000      	b.n	802a480 <xQueueGenericSend+0xa4>
 802a47e:	2300      	movs	r3, #0
 802a480:	2b00      	cmp	r3, #0
 802a482:	d10a      	bne.n	802a49a <xQueueGenericSend+0xbe>
	__asm volatile
 802a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a488:	f383 8811 	msr	BASEPRI, r3
 802a48c:	f3bf 8f6f 	isb	sy
 802a490:	f3bf 8f4f 	dsb	sy
 802a494:	61fb      	str	r3, [r7, #28]
}
 802a496:	bf00      	nop
 802a498:	e7fe      	b.n	802a498 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802a49a:	f002 f9bb 	bl	802c814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a4a6:	429a      	cmp	r2, r3
 802a4a8:	d302      	bcc.n	802a4b0 <xQueueGenericSend+0xd4>
 802a4aa:	683b      	ldr	r3, [r7, #0]
 802a4ac:	2b02      	cmp	r3, #2
 802a4ae:	d136      	bne.n	802a51e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 802a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4b2:	4618      	mov	r0, r3
 802a4b4:	f003 ff0a 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a4b8:	68ba      	ldr	r2, [r7, #8]
 802a4ba:	6879      	ldr	r1, [r7, #4]
 802a4bc:	683b      	ldr	r3, [r7, #0]
 802a4be:	9300      	str	r3, [sp, #0]
 802a4c0:	460b      	mov	r3, r1
 802a4c2:	4601      	mov	r1, r0
 802a4c4:	205a      	movs	r0, #90	; 0x5a
 802a4c6:	f003 fac5 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a4ca:	683a      	ldr	r2, [r7, #0]
 802a4cc:	68b9      	ldr	r1, [r7, #8]
 802a4ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a4d0:	f000 fb5e 	bl	802ab90 <prvCopyDataToQueue>
 802a4d4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d010      	beq.n	802a500 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4e0:	3324      	adds	r3, #36	; 0x24
 802a4e2:	4618      	mov	r0, r3
 802a4e4:	f001 fa34 	bl	802b950 <xTaskRemoveFromEventList>
 802a4e8:	4603      	mov	r3, r0
 802a4ea:	2b00      	cmp	r3, #0
 802a4ec:	d013      	beq.n	802a516 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 802a4ee:	4b4d      	ldr	r3, [pc, #308]	; (802a624 <xQueueGenericSend+0x248>)
 802a4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a4f4:	601a      	str	r2, [r3, #0]
 802a4f6:	f3bf 8f4f 	dsb	sy
 802a4fa:	f3bf 8f6f 	isb	sy
 802a4fe:	e00a      	b.n	802a516 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 802a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a502:	2b00      	cmp	r3, #0
 802a504:	d007      	beq.n	802a516 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802a506:	4b47      	ldr	r3, [pc, #284]	; (802a624 <xQueueGenericSend+0x248>)
 802a508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a50c:	601a      	str	r2, [r3, #0]
 802a50e:	f3bf 8f4f 	dsb	sy
 802a512:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802a516:	f002 f9ad 	bl	802c874 <vPortExitCritical>
				return pdPASS;
 802a51a:	2301      	movs	r3, #1
 802a51c:	e07d      	b.n	802a61a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802a51e:	687b      	ldr	r3, [r7, #4]
 802a520:	2b00      	cmp	r3, #0
 802a522:	d110      	bne.n	802a546 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802a524:	f002 f9a6 	bl	802c874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 802a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a52a:	4618      	mov	r0, r3
 802a52c:	f003 fece 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a530:	68ba      	ldr	r2, [r7, #8]
 802a532:	6879      	ldr	r1, [r7, #4]
 802a534:	683b      	ldr	r3, [r7, #0]
 802a536:	9300      	str	r3, [sp, #0]
 802a538:	460b      	mov	r3, r1
 802a53a:	4601      	mov	r1, r0
 802a53c:	205a      	movs	r0, #90	; 0x5a
 802a53e:	f003 fa89 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 802a542:	2300      	movs	r3, #0
 802a544:	e069      	b.n	802a61a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 802a546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a548:	2b00      	cmp	r3, #0
 802a54a:	d106      	bne.n	802a55a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802a54c:	f107 0314 	add.w	r3, r7, #20
 802a550:	4618      	mov	r0, r3
 802a552:	f001 fa65 	bl	802ba20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802a556:	2301      	movs	r3, #1
 802a558:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802a55a:	f002 f98b 	bl	802c874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802a55e:	f000 ff9d 	bl	802b49c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802a562:	f002 f957 	bl	802c814 <vPortEnterCritical>
 802a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802a56c:	b25b      	sxtb	r3, r3
 802a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a572:	d103      	bne.n	802a57c <xQueueGenericSend+0x1a0>
 802a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a576:	2200      	movs	r2, #0
 802a578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a57e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a582:	b25b      	sxtb	r3, r3
 802a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a588:	d103      	bne.n	802a592 <xQueueGenericSend+0x1b6>
 802a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a58c:	2200      	movs	r2, #0
 802a58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802a592:	f002 f96f 	bl	802c874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802a596:	1d3a      	adds	r2, r7, #4
 802a598:	f107 0314 	add.w	r3, r7, #20
 802a59c:	4611      	mov	r1, r2
 802a59e:	4618      	mov	r0, r3
 802a5a0:	f001 fa54 	bl	802ba4c <xTaskCheckForTimeOut>
 802a5a4:	4603      	mov	r3, r0
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d124      	bne.n	802a5f4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802a5aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a5ac:	f000 fbe8 	bl	802ad80 <prvIsQueueFull>
 802a5b0:	4603      	mov	r3, r0
 802a5b2:	2b00      	cmp	r3, #0
 802a5b4:	d018      	beq.n	802a5e8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a5b8:	3310      	adds	r3, #16
 802a5ba:	687a      	ldr	r2, [r7, #4]
 802a5bc:	4611      	mov	r1, r2
 802a5be:	4618      	mov	r0, r3
 802a5c0:	f001 f974 	bl	802b8ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802a5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a5c6:	f000 fb73 	bl	802acb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 802a5ca:	f000 ff75 	bl	802b4b8 <xTaskResumeAll>
 802a5ce:	4603      	mov	r3, r0
 802a5d0:	2b00      	cmp	r3, #0
 802a5d2:	f47f af62 	bne.w	802a49a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 802a5d6:	4b13      	ldr	r3, [pc, #76]	; (802a624 <xQueueGenericSend+0x248>)
 802a5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a5dc:	601a      	str	r2, [r3, #0]
 802a5de:	f3bf 8f4f 	dsb	sy
 802a5e2:	f3bf 8f6f 	isb	sy
 802a5e6:	e758      	b.n	802a49a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 802a5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a5ea:	f000 fb61 	bl	802acb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802a5ee:	f000 ff63 	bl	802b4b8 <xTaskResumeAll>
 802a5f2:	e752      	b.n	802a49a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802a5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a5f6:	f000 fb5b 	bl	802acb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802a5fa:	f000 ff5d 	bl	802b4b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 802a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a600:	4618      	mov	r0, r3
 802a602:	f003 fe63 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a606:	68ba      	ldr	r2, [r7, #8]
 802a608:	6879      	ldr	r1, [r7, #4]
 802a60a:	683b      	ldr	r3, [r7, #0]
 802a60c:	9300      	str	r3, [sp, #0]
 802a60e:	460b      	mov	r3, r1
 802a610:	4601      	mov	r1, r0
 802a612:	205a      	movs	r0, #90	; 0x5a
 802a614:	f003 fa1e 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 802a618:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 802a61a:	4618      	mov	r0, r3
 802a61c:	3738      	adds	r7, #56	; 0x38
 802a61e:	46bd      	mov	sp, r7
 802a620:	bd80      	pop	{r7, pc}
 802a622:	bf00      	nop
 802a624:	e000ed04 	.word	0xe000ed04

0802a628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 802a628:	b580      	push	{r7, lr}
 802a62a:	b090      	sub	sp, #64	; 0x40
 802a62c:	af00      	add	r7, sp, #0
 802a62e:	60f8      	str	r0, [r7, #12]
 802a630:	60b9      	str	r1, [r7, #8]
 802a632:	607a      	str	r2, [r7, #4]
 802a634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802a636:	68fb      	ldr	r3, [r7, #12]
 802a638:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 802a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a63c:	2b00      	cmp	r3, #0
 802a63e:	d10a      	bne.n	802a656 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 802a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a644:	f383 8811 	msr	BASEPRI, r3
 802a648:	f3bf 8f6f 	isb	sy
 802a64c:	f3bf 8f4f 	dsb	sy
 802a650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a652:	bf00      	nop
 802a654:	e7fe      	b.n	802a654 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a656:	68bb      	ldr	r3, [r7, #8]
 802a658:	2b00      	cmp	r3, #0
 802a65a:	d103      	bne.n	802a664 <xQueueGenericSendFromISR+0x3c>
 802a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a660:	2b00      	cmp	r3, #0
 802a662:	d101      	bne.n	802a668 <xQueueGenericSendFromISR+0x40>
 802a664:	2301      	movs	r3, #1
 802a666:	e000      	b.n	802a66a <xQueueGenericSendFromISR+0x42>
 802a668:	2300      	movs	r3, #0
 802a66a:	2b00      	cmp	r3, #0
 802a66c:	d10a      	bne.n	802a684 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a672:	f383 8811 	msr	BASEPRI, r3
 802a676:	f3bf 8f6f 	isb	sy
 802a67a:	f3bf 8f4f 	dsb	sy
 802a67e:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a680:	bf00      	nop
 802a682:	e7fe      	b.n	802a682 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a684:	683b      	ldr	r3, [r7, #0]
 802a686:	2b02      	cmp	r3, #2
 802a688:	d103      	bne.n	802a692 <xQueueGenericSendFromISR+0x6a>
 802a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a68e:	2b01      	cmp	r3, #1
 802a690:	d101      	bne.n	802a696 <xQueueGenericSendFromISR+0x6e>
 802a692:	2301      	movs	r3, #1
 802a694:	e000      	b.n	802a698 <xQueueGenericSendFromISR+0x70>
 802a696:	2300      	movs	r3, #0
 802a698:	2b00      	cmp	r3, #0
 802a69a:	d10a      	bne.n	802a6b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 802a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a6a0:	f383 8811 	msr	BASEPRI, r3
 802a6a4:	f3bf 8f6f 	isb	sy
 802a6a8:	f3bf 8f4f 	dsb	sy
 802a6ac:	623b      	str	r3, [r7, #32]
}
 802a6ae:	bf00      	nop
 802a6b0:	e7fe      	b.n	802a6b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802a6b2:	f002 f991 	bl	802c9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802a6b6:	f3ef 8211 	mrs	r2, BASEPRI
 802a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a6be:	f383 8811 	msr	BASEPRI, r3
 802a6c2:	f3bf 8f6f 	isb	sy
 802a6c6:	f3bf 8f4f 	dsb	sy
 802a6ca:	61fa      	str	r2, [r7, #28]
 802a6cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802a6ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802a6d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a6da:	429a      	cmp	r2, r3
 802a6dc:	d302      	bcc.n	802a6e4 <xQueueGenericSendFromISR+0xbc>
 802a6de:	683b      	ldr	r3, [r7, #0]
 802a6e0:	2b02      	cmp	r3, #2
 802a6e2:	d139      	bne.n	802a758 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 802a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 802a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a6f6:	4618      	mov	r0, r3
 802a6f8:	f003 fde8 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a6fc:	4601      	mov	r1, r0
 802a6fe:	687b      	ldr	r3, [r7, #4]
 802a700:	461a      	mov	r2, r3
 802a702:	2060      	movs	r0, #96	; 0x60
 802a704:	f003 f8d6 	bl	802d8b4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a708:	683a      	ldr	r2, [r7, #0]
 802a70a:	68b9      	ldr	r1, [r7, #8]
 802a70c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802a70e:	f000 fa3f 	bl	802ab90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 802a712:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 802a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a71a:	d112      	bne.n	802a742 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a720:	2b00      	cmp	r3, #0
 802a722:	d016      	beq.n	802a752 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a726:	3324      	adds	r3, #36	; 0x24
 802a728:	4618      	mov	r0, r3
 802a72a:	f001 f911 	bl	802b950 <xTaskRemoveFromEventList>
 802a72e:	4603      	mov	r3, r0
 802a730:	2b00      	cmp	r3, #0
 802a732:	d00e      	beq.n	802a752 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802a734:	687b      	ldr	r3, [r7, #4]
 802a736:	2b00      	cmp	r3, #0
 802a738:	d00b      	beq.n	802a752 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802a73a:	687b      	ldr	r3, [r7, #4]
 802a73c:	2201      	movs	r2, #1
 802a73e:	601a      	str	r2, [r3, #0]
 802a740:	e007      	b.n	802a752 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802a742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802a746:	3301      	adds	r3, #1
 802a748:	b2db      	uxtb	r3, r3
 802a74a:	b25a      	sxtb	r2, r3
 802a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802a752:	2301      	movs	r3, #1
 802a754:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 802a756:	e00b      	b.n	802a770 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 802a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a75a:	4618      	mov	r0, r3
 802a75c:	f003 fdb6 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a760:	4601      	mov	r1, r0
 802a762:	687b      	ldr	r3, [r7, #4]
 802a764:	461a      	mov	r2, r3
 802a766:	2060      	movs	r0, #96	; 0x60
 802a768:	f003 f8a4 	bl	802d8b4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 802a76c:	2300      	movs	r3, #0
 802a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802a774:	697b      	ldr	r3, [r7, #20]
 802a776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802a77a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802a77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802a77e:	4618      	mov	r0, r3
 802a780:	3740      	adds	r7, #64	; 0x40
 802a782:	46bd      	mov	sp, r7
 802a784:	bd80      	pop	{r7, pc}
	...

0802a788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802a788:	b590      	push	{r4, r7, lr}
 802a78a:	b08f      	sub	sp, #60	; 0x3c
 802a78c:	af02      	add	r7, sp, #8
 802a78e:	60f8      	str	r0, [r7, #12]
 802a790:	60b9      	str	r1, [r7, #8]
 802a792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802a794:	2300      	movs	r3, #0
 802a796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802a798:	68fb      	ldr	r3, [r7, #12]
 802a79a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a79e:	2b00      	cmp	r3, #0
 802a7a0:	d10a      	bne.n	802a7b8 <xQueueReceive+0x30>
	__asm volatile
 802a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a7a6:	f383 8811 	msr	BASEPRI, r3
 802a7aa:	f3bf 8f6f 	isb	sy
 802a7ae:	f3bf 8f4f 	dsb	sy
 802a7b2:	623b      	str	r3, [r7, #32]
}
 802a7b4:	bf00      	nop
 802a7b6:	e7fe      	b.n	802a7b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a7b8:	68bb      	ldr	r3, [r7, #8]
 802a7ba:	2b00      	cmp	r3, #0
 802a7bc:	d103      	bne.n	802a7c6 <xQueueReceive+0x3e>
 802a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a7c2:	2b00      	cmp	r3, #0
 802a7c4:	d101      	bne.n	802a7ca <xQueueReceive+0x42>
 802a7c6:	2301      	movs	r3, #1
 802a7c8:	e000      	b.n	802a7cc <xQueueReceive+0x44>
 802a7ca:	2300      	movs	r3, #0
 802a7cc:	2b00      	cmp	r3, #0
 802a7ce:	d10a      	bne.n	802a7e6 <xQueueReceive+0x5e>
	__asm volatile
 802a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a7d4:	f383 8811 	msr	BASEPRI, r3
 802a7d8:	f3bf 8f6f 	isb	sy
 802a7dc:	f3bf 8f4f 	dsb	sy
 802a7e0:	61fb      	str	r3, [r7, #28]
}
 802a7e2:	bf00      	nop
 802a7e4:	e7fe      	b.n	802a7e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802a7e6:	f001 fab1 	bl	802bd4c <xTaskGetSchedulerState>
 802a7ea:	4603      	mov	r3, r0
 802a7ec:	2b00      	cmp	r3, #0
 802a7ee:	d102      	bne.n	802a7f6 <xQueueReceive+0x6e>
 802a7f0:	687b      	ldr	r3, [r7, #4]
 802a7f2:	2b00      	cmp	r3, #0
 802a7f4:	d101      	bne.n	802a7fa <xQueueReceive+0x72>
 802a7f6:	2301      	movs	r3, #1
 802a7f8:	e000      	b.n	802a7fc <xQueueReceive+0x74>
 802a7fa:	2300      	movs	r3, #0
 802a7fc:	2b00      	cmp	r3, #0
 802a7fe:	d10a      	bne.n	802a816 <xQueueReceive+0x8e>
	__asm volatile
 802a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a804:	f383 8811 	msr	BASEPRI, r3
 802a808:	f3bf 8f6f 	isb	sy
 802a80c:	f3bf 8f4f 	dsb	sy
 802a810:	61bb      	str	r3, [r7, #24]
}
 802a812:	bf00      	nop
 802a814:	e7fe      	b.n	802a814 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802a816:	f001 fffd 	bl	802c814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a81e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a822:	2b00      	cmp	r3, #0
 802a824:	d02f      	beq.n	802a886 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802a826:	68b9      	ldr	r1, [r7, #8]
 802a828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a82a:	f000 fa1b 	bl	802ac64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 802a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a830:	4618      	mov	r0, r3
 802a832:	f003 fd4b 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a836:	4604      	mov	r4, r0
 802a838:	2000      	movs	r0, #0
 802a83a:	f003 fd47 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a83e:	4602      	mov	r2, r0
 802a840:	687b      	ldr	r3, [r7, #4]
 802a842:	2101      	movs	r1, #1
 802a844:	9100      	str	r1, [sp, #0]
 802a846:	4621      	mov	r1, r4
 802a848:	205c      	movs	r0, #92	; 0x5c
 802a84a:	f003 f903 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a850:	1e5a      	subs	r2, r3, #1
 802a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a854:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a858:	691b      	ldr	r3, [r3, #16]
 802a85a:	2b00      	cmp	r3, #0
 802a85c:	d00f      	beq.n	802a87e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a860:	3310      	adds	r3, #16
 802a862:	4618      	mov	r0, r3
 802a864:	f001 f874 	bl	802b950 <xTaskRemoveFromEventList>
 802a868:	4603      	mov	r3, r0
 802a86a:	2b00      	cmp	r3, #0
 802a86c:	d007      	beq.n	802a87e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802a86e:	4b4d      	ldr	r3, [pc, #308]	; (802a9a4 <xQueueReceive+0x21c>)
 802a870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a874:	601a      	str	r2, [r3, #0]
 802a876:	f3bf 8f4f 	dsb	sy
 802a87a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802a87e:	f001 fff9 	bl	802c874 <vPortExitCritical>
				return pdPASS;
 802a882:	2301      	movs	r3, #1
 802a884:	e08a      	b.n	802a99c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802a886:	687b      	ldr	r3, [r7, #4]
 802a888:	2b00      	cmp	r3, #0
 802a88a:	d113      	bne.n	802a8b4 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802a88c:	f001 fff2 	bl	802c874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 802a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a892:	4618      	mov	r0, r3
 802a894:	f003 fd1a 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a898:	4604      	mov	r4, r0
 802a89a:	2000      	movs	r0, #0
 802a89c:	f003 fd16 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a8a0:	4602      	mov	r2, r0
 802a8a2:	687b      	ldr	r3, [r7, #4]
 802a8a4:	2101      	movs	r1, #1
 802a8a6:	9100      	str	r1, [sp, #0]
 802a8a8:	4621      	mov	r1, r4
 802a8aa:	205c      	movs	r0, #92	; 0x5c
 802a8ac:	f003 f8d2 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 802a8b0:	2300      	movs	r3, #0
 802a8b2:	e073      	b.n	802a99c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 802a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a8b6:	2b00      	cmp	r3, #0
 802a8b8:	d106      	bne.n	802a8c8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802a8ba:	f107 0310 	add.w	r3, r7, #16
 802a8be:	4618      	mov	r0, r3
 802a8c0:	f001 f8ae 	bl	802ba20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802a8c4:	2301      	movs	r3, #1
 802a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802a8c8:	f001 ffd4 	bl	802c874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802a8cc:	f000 fde6 	bl	802b49c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802a8d0:	f001 ffa0 	bl	802c814 <vPortEnterCritical>
 802a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802a8da:	b25b      	sxtb	r3, r3
 802a8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a8e0:	d103      	bne.n	802a8ea <xQueueReceive+0x162>
 802a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8e4:	2200      	movs	r2, #0
 802a8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a8f0:	b25b      	sxtb	r3, r3
 802a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a8f6:	d103      	bne.n	802a900 <xQueueReceive+0x178>
 802a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8fa:	2200      	movs	r2, #0
 802a8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802a900:	f001 ffb8 	bl	802c874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802a904:	1d3a      	adds	r2, r7, #4
 802a906:	f107 0310 	add.w	r3, r7, #16
 802a90a:	4611      	mov	r1, r2
 802a90c:	4618      	mov	r0, r3
 802a90e:	f001 f89d 	bl	802ba4c <xTaskCheckForTimeOut>
 802a912:	4603      	mov	r3, r0
 802a914:	2b00      	cmp	r3, #0
 802a916:	d124      	bne.n	802a962 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802a918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a91a:	f000 fa1b 	bl	802ad54 <prvIsQueueEmpty>
 802a91e:	4603      	mov	r3, r0
 802a920:	2b00      	cmp	r3, #0
 802a922:	d018      	beq.n	802a956 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a926:	3324      	adds	r3, #36	; 0x24
 802a928:	687a      	ldr	r2, [r7, #4]
 802a92a:	4611      	mov	r1, r2
 802a92c:	4618      	mov	r0, r3
 802a92e:	f000 ffbd 	bl	802b8ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802a932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a934:	f000 f9bc 	bl	802acb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802a938:	f000 fdbe 	bl	802b4b8 <xTaskResumeAll>
 802a93c:	4603      	mov	r3, r0
 802a93e:	2b00      	cmp	r3, #0
 802a940:	f47f af69 	bne.w	802a816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 802a944:	4b17      	ldr	r3, [pc, #92]	; (802a9a4 <xQueueReceive+0x21c>)
 802a946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a94a:	601a      	str	r2, [r3, #0]
 802a94c:	f3bf 8f4f 	dsb	sy
 802a950:	f3bf 8f6f 	isb	sy
 802a954:	e75f      	b.n	802a816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802a956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a958:	f000 f9aa 	bl	802acb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802a95c:	f000 fdac 	bl	802b4b8 <xTaskResumeAll>
 802a960:	e759      	b.n	802a816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802a962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a964:	f000 f9a4 	bl	802acb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802a968:	f000 fda6 	bl	802b4b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802a96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a96e:	f000 f9f1 	bl	802ad54 <prvIsQueueEmpty>
 802a972:	4603      	mov	r3, r0
 802a974:	2b00      	cmp	r3, #0
 802a976:	f43f af4e 	beq.w	802a816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 802a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a97c:	4618      	mov	r0, r3
 802a97e:	f003 fca5 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a982:	4604      	mov	r4, r0
 802a984:	2000      	movs	r0, #0
 802a986:	f003 fca1 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802a98a:	4602      	mov	r2, r0
 802a98c:	687b      	ldr	r3, [r7, #4]
 802a98e:	2101      	movs	r1, #1
 802a990:	9100      	str	r1, [sp, #0]
 802a992:	4621      	mov	r1, r4
 802a994:	205c      	movs	r0, #92	; 0x5c
 802a996:	f003 f85d 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 802a99a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802a99c:	4618      	mov	r0, r3
 802a99e:	3734      	adds	r7, #52	; 0x34
 802a9a0:	46bd      	mov	sp, r7
 802a9a2:	bd90      	pop	{r4, r7, pc}
 802a9a4:	e000ed04 	.word	0xe000ed04

0802a9a8 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802a9a8:	b590      	push	{r4, r7, lr}
 802a9aa:	b091      	sub	sp, #68	; 0x44
 802a9ac:	af02      	add	r7, sp, #8
 802a9ae:	60f8      	str	r0, [r7, #12]
 802a9b0:	60b9      	str	r1, [r7, #8]
 802a9b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802a9b4:	2300      	movs	r3, #0
 802a9b6:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 802a9b8:	68fb      	ldr	r3, [r7, #12]
 802a9ba:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a9be:	2b00      	cmp	r3, #0
 802a9c0:	d10a      	bne.n	802a9d8 <xQueuePeek+0x30>
	__asm volatile
 802a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a9c6:	f383 8811 	msr	BASEPRI, r3
 802a9ca:	f3bf 8f6f 	isb	sy
 802a9ce:	f3bf 8f4f 	dsb	sy
 802a9d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a9d4:	bf00      	nop
 802a9d6:	e7fe      	b.n	802a9d6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a9d8:	68bb      	ldr	r3, [r7, #8]
 802a9da:	2b00      	cmp	r3, #0
 802a9dc:	d103      	bne.n	802a9e6 <xQueuePeek+0x3e>
 802a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a9e2:	2b00      	cmp	r3, #0
 802a9e4:	d101      	bne.n	802a9ea <xQueuePeek+0x42>
 802a9e6:	2301      	movs	r3, #1
 802a9e8:	e000      	b.n	802a9ec <xQueuePeek+0x44>
 802a9ea:	2300      	movs	r3, #0
 802a9ec:	2b00      	cmp	r3, #0
 802a9ee:	d10a      	bne.n	802aa06 <xQueuePeek+0x5e>
	__asm volatile
 802a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a9f4:	f383 8811 	msr	BASEPRI, r3
 802a9f8:	f3bf 8f6f 	isb	sy
 802a9fc:	f3bf 8f4f 	dsb	sy
 802aa00:	623b      	str	r3, [r7, #32]
}
 802aa02:	bf00      	nop
 802aa04:	e7fe      	b.n	802aa04 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802aa06:	f001 f9a1 	bl	802bd4c <xTaskGetSchedulerState>
 802aa0a:	4603      	mov	r3, r0
 802aa0c:	2b00      	cmp	r3, #0
 802aa0e:	d102      	bne.n	802aa16 <xQueuePeek+0x6e>
 802aa10:	687b      	ldr	r3, [r7, #4]
 802aa12:	2b00      	cmp	r3, #0
 802aa14:	d101      	bne.n	802aa1a <xQueuePeek+0x72>
 802aa16:	2301      	movs	r3, #1
 802aa18:	e000      	b.n	802aa1c <xQueuePeek+0x74>
 802aa1a:	2300      	movs	r3, #0
 802aa1c:	2b00      	cmp	r3, #0
 802aa1e:	d10a      	bne.n	802aa36 <xQueuePeek+0x8e>
	__asm volatile
 802aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa24:	f383 8811 	msr	BASEPRI, r3
 802aa28:	f3bf 8f6f 	isb	sy
 802aa2c:	f3bf 8f4f 	dsb	sy
 802aa30:	61fb      	str	r3, [r7, #28]
}
 802aa32:	bf00      	nop
 802aa34:	e7fe      	b.n	802aa34 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802aa36:	f001 feed 	bl	802c814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aa3e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802aa42:	2b00      	cmp	r3, #0
 802aa44:	d032      	beq.n	802aaac <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 802aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa48:	68db      	ldr	r3, [r3, #12]
 802aa4a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802aa4c:	68b9      	ldr	r1, [r7, #8]
 802aa4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802aa50:	f000 f908 	bl	802ac64 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 802aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa56:	4618      	mov	r0, r3
 802aa58:	f003 fc38 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802aa5c:	4604      	mov	r4, r0
 802aa5e:	68bb      	ldr	r3, [r7, #8]
 802aa60:	4618      	mov	r0, r3
 802aa62:	f003 fc33 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802aa66:	4602      	mov	r2, r0
 802aa68:	687b      	ldr	r3, [r7, #4]
 802aa6a:	2101      	movs	r1, #1
 802aa6c:	9100      	str	r1, [sp, #0]
 802aa6e:	4621      	mov	r1, r4
 802aa70:	205c      	movs	r0, #92	; 0x5c
 802aa72:	f002 ffef 	bl	802da54 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 802aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802aa7a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aa80:	2b00      	cmp	r3, #0
 802aa82:	d00f      	beq.n	802aaa4 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aa86:	3324      	adds	r3, #36	; 0x24
 802aa88:	4618      	mov	r0, r3
 802aa8a:	f000 ff61 	bl	802b950 <xTaskRemoveFromEventList>
 802aa8e:	4603      	mov	r3, r0
 802aa90:	2b00      	cmp	r3, #0
 802aa92:	d007      	beq.n	802aaa4 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 802aa94:	4b3d      	ldr	r3, [pc, #244]	; (802ab8c <xQueuePeek+0x1e4>)
 802aa96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802aa9a:	601a      	str	r2, [r3, #0]
 802aa9c:	f3bf 8f4f 	dsb	sy
 802aaa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802aaa4:	f001 fee6 	bl	802c874 <vPortExitCritical>
				return pdPASS;
 802aaa8:	2301      	movs	r3, #1
 802aaaa:	e06a      	b.n	802ab82 <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802aaac:	687b      	ldr	r3, [r7, #4]
 802aaae:	2b00      	cmp	r3, #0
 802aab0:	d103      	bne.n	802aaba <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802aab2:	f001 fedf 	bl	802c874 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802aab6:	2300      	movs	r3, #0
 802aab8:	e063      	b.n	802ab82 <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 802aaba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802aabc:	2b00      	cmp	r3, #0
 802aabe:	d106      	bne.n	802aace <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802aac0:	f107 0314 	add.w	r3, r7, #20
 802aac4:	4618      	mov	r0, r3
 802aac6:	f000 ffab 	bl	802ba20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802aaca:	2301      	movs	r3, #1
 802aacc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802aace:	f001 fed1 	bl	802c874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802aad2:	f000 fce3 	bl	802b49c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802aad6:	f001 fe9d 	bl	802c814 <vPortEnterCritical>
 802aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aadc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802aae0:	b25b      	sxtb	r3, r3
 802aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aae6:	d103      	bne.n	802aaf0 <xQueuePeek+0x148>
 802aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aaea:	2200      	movs	r2, #0
 802aaec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aaf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802aaf6:	b25b      	sxtb	r3, r3
 802aaf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aafc:	d103      	bne.n	802ab06 <xQueuePeek+0x15e>
 802aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab00:	2200      	movs	r2, #0
 802ab02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802ab06:	f001 feb5 	bl	802c874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802ab0a:	1d3a      	adds	r2, r7, #4
 802ab0c:	f107 0314 	add.w	r3, r7, #20
 802ab10:	4611      	mov	r1, r2
 802ab12:	4618      	mov	r0, r3
 802ab14:	f000 ff9a 	bl	802ba4c <xTaskCheckForTimeOut>
 802ab18:	4603      	mov	r3, r0
 802ab1a:	2b00      	cmp	r3, #0
 802ab1c:	d124      	bne.n	802ab68 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802ab1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ab20:	f000 f918 	bl	802ad54 <prvIsQueueEmpty>
 802ab24:	4603      	mov	r3, r0
 802ab26:	2b00      	cmp	r3, #0
 802ab28:	d018      	beq.n	802ab5c <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ab2c:	3324      	adds	r3, #36	; 0x24
 802ab2e:	687a      	ldr	r2, [r7, #4]
 802ab30:	4611      	mov	r1, r2
 802ab32:	4618      	mov	r0, r3
 802ab34:	f000 feba 	bl	802b8ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802ab38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ab3a:	f000 f8b9 	bl	802acb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802ab3e:	f000 fcbb 	bl	802b4b8 <xTaskResumeAll>
 802ab42:	4603      	mov	r3, r0
 802ab44:	2b00      	cmp	r3, #0
 802ab46:	f47f af76 	bne.w	802aa36 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 802ab4a:	4b10      	ldr	r3, [pc, #64]	; (802ab8c <xQueuePeek+0x1e4>)
 802ab4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ab50:	601a      	str	r2, [r3, #0]
 802ab52:	f3bf 8f4f 	dsb	sy
 802ab56:	f3bf 8f6f 	isb	sy
 802ab5a:	e76c      	b.n	802aa36 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 802ab5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ab5e:	f000 f8a7 	bl	802acb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802ab62:	f000 fca9 	bl	802b4b8 <xTaskResumeAll>
 802ab66:	e766      	b.n	802aa36 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 802ab68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ab6a:	f000 f8a1 	bl	802acb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802ab6e:	f000 fca3 	bl	802b4b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802ab72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ab74:	f000 f8ee 	bl	802ad54 <prvIsQueueEmpty>
 802ab78:	4603      	mov	r3, r0
 802ab7a:	2b00      	cmp	r3, #0
 802ab7c:	f43f af5b 	beq.w	802aa36 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802ab80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802ab82:	4618      	mov	r0, r3
 802ab84:	373c      	adds	r7, #60	; 0x3c
 802ab86:	46bd      	mov	sp, r7
 802ab88:	bd90      	pop	{r4, r7, pc}
 802ab8a:	bf00      	nop
 802ab8c:	e000ed04 	.word	0xe000ed04

0802ab90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 802ab90:	b580      	push	{r7, lr}
 802ab92:	b086      	sub	sp, #24
 802ab94:	af00      	add	r7, sp, #0
 802ab96:	60f8      	str	r0, [r7, #12]
 802ab98:	60b9      	str	r1, [r7, #8]
 802ab9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802ab9c:	2300      	movs	r3, #0
 802ab9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802aba0:	68fb      	ldr	r3, [r7, #12]
 802aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aba4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802aba6:	68fb      	ldr	r3, [r7, #12]
 802aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802abaa:	2b00      	cmp	r3, #0
 802abac:	d10d      	bne.n	802abca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802abae:	68fb      	ldr	r3, [r7, #12]
 802abb0:	681b      	ldr	r3, [r3, #0]
 802abb2:	2b00      	cmp	r3, #0
 802abb4:	d14d      	bne.n	802ac52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802abb6:	68fb      	ldr	r3, [r7, #12]
 802abb8:	689b      	ldr	r3, [r3, #8]
 802abba:	4618      	mov	r0, r3
 802abbc:	f001 f8e4 	bl	802bd88 <xTaskPriorityDisinherit>
 802abc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802abc2:	68fb      	ldr	r3, [r7, #12]
 802abc4:	2200      	movs	r2, #0
 802abc6:	609a      	str	r2, [r3, #8]
 802abc8:	e043      	b.n	802ac52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802abca:	687b      	ldr	r3, [r7, #4]
 802abcc:	2b00      	cmp	r3, #0
 802abce:	d119      	bne.n	802ac04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802abd0:	68fb      	ldr	r3, [r7, #12]
 802abd2:	6858      	ldr	r0, [r3, #4]
 802abd4:	68fb      	ldr	r3, [r7, #12]
 802abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802abd8:	461a      	mov	r2, r3
 802abda:	68b9      	ldr	r1, [r7, #8]
 802abdc:	f003 fd2a 	bl	802e634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802abe0:	68fb      	ldr	r3, [r7, #12]
 802abe2:	685a      	ldr	r2, [r3, #4]
 802abe4:	68fb      	ldr	r3, [r7, #12]
 802abe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802abe8:	441a      	add	r2, r3
 802abea:	68fb      	ldr	r3, [r7, #12]
 802abec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802abee:	68fb      	ldr	r3, [r7, #12]
 802abf0:	685a      	ldr	r2, [r3, #4]
 802abf2:	68fb      	ldr	r3, [r7, #12]
 802abf4:	689b      	ldr	r3, [r3, #8]
 802abf6:	429a      	cmp	r2, r3
 802abf8:	d32b      	bcc.n	802ac52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802abfa:	68fb      	ldr	r3, [r7, #12]
 802abfc:	681a      	ldr	r2, [r3, #0]
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	605a      	str	r2, [r3, #4]
 802ac02:	e026      	b.n	802ac52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802ac04:	68fb      	ldr	r3, [r7, #12]
 802ac06:	68d8      	ldr	r0, [r3, #12]
 802ac08:	68fb      	ldr	r3, [r7, #12]
 802ac0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac0c:	461a      	mov	r2, r3
 802ac0e:	68b9      	ldr	r1, [r7, #8]
 802ac10:	f003 fd10 	bl	802e634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802ac14:	68fb      	ldr	r3, [r7, #12]
 802ac16:	68da      	ldr	r2, [r3, #12]
 802ac18:	68fb      	ldr	r3, [r7, #12]
 802ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac1c:	425b      	negs	r3, r3
 802ac1e:	441a      	add	r2, r3
 802ac20:	68fb      	ldr	r3, [r7, #12]
 802ac22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802ac24:	68fb      	ldr	r3, [r7, #12]
 802ac26:	68da      	ldr	r2, [r3, #12]
 802ac28:	68fb      	ldr	r3, [r7, #12]
 802ac2a:	681b      	ldr	r3, [r3, #0]
 802ac2c:	429a      	cmp	r2, r3
 802ac2e:	d207      	bcs.n	802ac40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802ac30:	68fb      	ldr	r3, [r7, #12]
 802ac32:	689a      	ldr	r2, [r3, #8]
 802ac34:	68fb      	ldr	r3, [r7, #12]
 802ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac38:	425b      	negs	r3, r3
 802ac3a:	441a      	add	r2, r3
 802ac3c:	68fb      	ldr	r3, [r7, #12]
 802ac3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802ac40:	687b      	ldr	r3, [r7, #4]
 802ac42:	2b02      	cmp	r3, #2
 802ac44:	d105      	bne.n	802ac52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802ac46:	693b      	ldr	r3, [r7, #16]
 802ac48:	2b00      	cmp	r3, #0
 802ac4a:	d002      	beq.n	802ac52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802ac4c:	693b      	ldr	r3, [r7, #16]
 802ac4e:	3b01      	subs	r3, #1
 802ac50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802ac52:	693b      	ldr	r3, [r7, #16]
 802ac54:	1c5a      	adds	r2, r3, #1
 802ac56:	68fb      	ldr	r3, [r7, #12]
 802ac58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802ac5a:	697b      	ldr	r3, [r7, #20]
}
 802ac5c:	4618      	mov	r0, r3
 802ac5e:	3718      	adds	r7, #24
 802ac60:	46bd      	mov	sp, r7
 802ac62:	bd80      	pop	{r7, pc}

0802ac64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 802ac64:	b580      	push	{r7, lr}
 802ac66:	b082      	sub	sp, #8
 802ac68:	af00      	add	r7, sp, #0
 802ac6a:	6078      	str	r0, [r7, #4]
 802ac6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802ac6e:	687b      	ldr	r3, [r7, #4]
 802ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac72:	2b00      	cmp	r3, #0
 802ac74:	d018      	beq.n	802aca8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802ac76:	687b      	ldr	r3, [r7, #4]
 802ac78:	68da      	ldr	r2, [r3, #12]
 802ac7a:	687b      	ldr	r3, [r7, #4]
 802ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac7e:	441a      	add	r2, r3
 802ac80:	687b      	ldr	r3, [r7, #4]
 802ac82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802ac84:	687b      	ldr	r3, [r7, #4]
 802ac86:	68da      	ldr	r2, [r3, #12]
 802ac88:	687b      	ldr	r3, [r7, #4]
 802ac8a:	689b      	ldr	r3, [r3, #8]
 802ac8c:	429a      	cmp	r2, r3
 802ac8e:	d303      	bcc.n	802ac98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802ac90:	687b      	ldr	r3, [r7, #4]
 802ac92:	681a      	ldr	r2, [r3, #0]
 802ac94:	687b      	ldr	r3, [r7, #4]
 802ac96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802ac98:	687b      	ldr	r3, [r7, #4]
 802ac9a:	68d9      	ldr	r1, [r3, #12]
 802ac9c:	687b      	ldr	r3, [r7, #4]
 802ac9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aca0:	461a      	mov	r2, r3
 802aca2:	6838      	ldr	r0, [r7, #0]
 802aca4:	f003 fcc6 	bl	802e634 <memcpy>
	}
}
 802aca8:	bf00      	nop
 802acaa:	3708      	adds	r7, #8
 802acac:	46bd      	mov	sp, r7
 802acae:	bd80      	pop	{r7, pc}

0802acb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 802acb0:	b580      	push	{r7, lr}
 802acb2:	b084      	sub	sp, #16
 802acb4:	af00      	add	r7, sp, #0
 802acb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802acb8:	f001 fdac 	bl	802c814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802acbc:	687b      	ldr	r3, [r7, #4]
 802acbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802acc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802acc4:	e011      	b.n	802acea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802acc6:	687b      	ldr	r3, [r7, #4]
 802acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802acca:	2b00      	cmp	r3, #0
 802accc:	d012      	beq.n	802acf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802acce:	687b      	ldr	r3, [r7, #4]
 802acd0:	3324      	adds	r3, #36	; 0x24
 802acd2:	4618      	mov	r0, r3
 802acd4:	f000 fe3c 	bl	802b950 <xTaskRemoveFromEventList>
 802acd8:	4603      	mov	r3, r0
 802acda:	2b00      	cmp	r3, #0
 802acdc:	d001      	beq.n	802ace2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 802acde:	f000 ff17 	bl	802bb10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802ace2:	7bfb      	ldrb	r3, [r7, #15]
 802ace4:	3b01      	subs	r3, #1
 802ace6:	b2db      	uxtb	r3, r3
 802ace8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802acea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802acee:	2b00      	cmp	r3, #0
 802acf0:	dce9      	bgt.n	802acc6 <prvUnlockQueue+0x16>
 802acf2:	e000      	b.n	802acf6 <prvUnlockQueue+0x46>
					break;
 802acf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802acf6:	687b      	ldr	r3, [r7, #4]
 802acf8:	22ff      	movs	r2, #255	; 0xff
 802acfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802acfe:	f001 fdb9 	bl	802c874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802ad02:	f001 fd87 	bl	802c814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802ad06:	687b      	ldr	r3, [r7, #4]
 802ad08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802ad0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802ad0e:	e011      	b.n	802ad34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802ad10:	687b      	ldr	r3, [r7, #4]
 802ad12:	691b      	ldr	r3, [r3, #16]
 802ad14:	2b00      	cmp	r3, #0
 802ad16:	d012      	beq.n	802ad3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	3310      	adds	r3, #16
 802ad1c:	4618      	mov	r0, r3
 802ad1e:	f000 fe17 	bl	802b950 <xTaskRemoveFromEventList>
 802ad22:	4603      	mov	r3, r0
 802ad24:	2b00      	cmp	r3, #0
 802ad26:	d001      	beq.n	802ad2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802ad28:	f000 fef2 	bl	802bb10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802ad2c:	7bbb      	ldrb	r3, [r7, #14]
 802ad2e:	3b01      	subs	r3, #1
 802ad30:	b2db      	uxtb	r3, r3
 802ad32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802ad34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802ad38:	2b00      	cmp	r3, #0
 802ad3a:	dce9      	bgt.n	802ad10 <prvUnlockQueue+0x60>
 802ad3c:	e000      	b.n	802ad40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802ad3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802ad40:	687b      	ldr	r3, [r7, #4]
 802ad42:	22ff      	movs	r2, #255	; 0xff
 802ad44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 802ad48:	f001 fd94 	bl	802c874 <vPortExitCritical>
}
 802ad4c:	bf00      	nop
 802ad4e:	3710      	adds	r7, #16
 802ad50:	46bd      	mov	sp, r7
 802ad52:	bd80      	pop	{r7, pc}

0802ad54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 802ad54:	b580      	push	{r7, lr}
 802ad56:	b084      	sub	sp, #16
 802ad58:	af00      	add	r7, sp, #0
 802ad5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802ad5c:	f001 fd5a 	bl	802c814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802ad60:	687b      	ldr	r3, [r7, #4]
 802ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ad64:	2b00      	cmp	r3, #0
 802ad66:	d102      	bne.n	802ad6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802ad68:	2301      	movs	r3, #1
 802ad6a:	60fb      	str	r3, [r7, #12]
 802ad6c:	e001      	b.n	802ad72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802ad6e:	2300      	movs	r3, #0
 802ad70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802ad72:	f001 fd7f 	bl	802c874 <vPortExitCritical>

	return xReturn;
 802ad76:	68fb      	ldr	r3, [r7, #12]
}
 802ad78:	4618      	mov	r0, r3
 802ad7a:	3710      	adds	r7, #16
 802ad7c:	46bd      	mov	sp, r7
 802ad7e:	bd80      	pop	{r7, pc}

0802ad80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802ad80:	b580      	push	{r7, lr}
 802ad82:	b084      	sub	sp, #16
 802ad84:	af00      	add	r7, sp, #0
 802ad86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802ad88:	f001 fd44 	bl	802c814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ad90:	687b      	ldr	r3, [r7, #4]
 802ad92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ad94:	429a      	cmp	r2, r3
 802ad96:	d102      	bne.n	802ad9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 802ad98:	2301      	movs	r3, #1
 802ad9a:	60fb      	str	r3, [r7, #12]
 802ad9c:	e001      	b.n	802ada2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 802ad9e:	2300      	movs	r3, #0
 802ada0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802ada2:	f001 fd67 	bl	802c874 <vPortExitCritical>

	return xReturn;
 802ada6:	68fb      	ldr	r3, [r7, #12]
}
 802ada8:	4618      	mov	r0, r3
 802adaa:	3710      	adds	r7, #16
 802adac:	46bd      	mov	sp, r7
 802adae:	bd80      	pop	{r7, pc}

0802adb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 802adb0:	b580      	push	{r7, lr}
 802adb2:	b084      	sub	sp, #16
 802adb4:	af00      	add	r7, sp, #0
 802adb6:	6078      	str	r0, [r7, #4]
 802adb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802adba:	2300      	movs	r3, #0
 802adbc:	60fb      	str	r3, [r7, #12]
 802adbe:	e01e      	b.n	802adfe <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 802adc0:	4a13      	ldr	r2, [pc, #76]	; (802ae10 <vQueueAddToRegistry+0x60>)
 802adc2:	68fb      	ldr	r3, [r7, #12]
 802adc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802adc8:	2b00      	cmp	r3, #0
 802adca:	d115      	bne.n	802adf8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 802adcc:	4910      	ldr	r1, [pc, #64]	; (802ae10 <vQueueAddToRegistry+0x60>)
 802adce:	68fb      	ldr	r3, [r7, #12]
 802add0:	683a      	ldr	r2, [r7, #0]
 802add2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802add6:	4a0e      	ldr	r2, [pc, #56]	; (802ae10 <vQueueAddToRegistry+0x60>)
 802add8:	68fb      	ldr	r3, [r7, #12]
 802adda:	00db      	lsls	r3, r3, #3
 802addc:	4413      	add	r3, r2
 802adde:	687a      	ldr	r2, [r7, #4]
 802ade0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 802ade2:	687b      	ldr	r3, [r7, #4]
 802ade4:	4618      	mov	r0, r3
 802ade6:	f003 fa71 	bl	802e2cc <SEGGER_SYSVIEW_ShrinkId>
 802adea:	4601      	mov	r1, r0
 802adec:	683b      	ldr	r3, [r7, #0]
 802adee:	461a      	mov	r2, r3
 802adf0:	2071      	movs	r0, #113	; 0x71
 802adf2:	f002 fd5f 	bl	802d8b4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 802adf6:	e006      	b.n	802ae06 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802adf8:	68fb      	ldr	r3, [r7, #12]
 802adfa:	3301      	adds	r3, #1
 802adfc:	60fb      	str	r3, [r7, #12]
 802adfe:	68fb      	ldr	r3, [r7, #12]
 802ae00:	2b07      	cmp	r3, #7
 802ae02:	d9dd      	bls.n	802adc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 802ae04:	bf00      	nop
 802ae06:	bf00      	nop
 802ae08:	3710      	adds	r7, #16
 802ae0a:	46bd      	mov	sp, r7
 802ae0c:	bd80      	pop	{r7, pc}
 802ae0e:	bf00      	nop
 802ae10:	2001ed80 	.word	0x2001ed80

0802ae14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802ae14:	b580      	push	{r7, lr}
 802ae16:	b086      	sub	sp, #24
 802ae18:	af00      	add	r7, sp, #0
 802ae1a:	60f8      	str	r0, [r7, #12]
 802ae1c:	60b9      	str	r1, [r7, #8]
 802ae1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 802ae20:	68fb      	ldr	r3, [r7, #12]
 802ae22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 802ae24:	f001 fcf6 	bl	802c814 <vPortEnterCritical>
 802ae28:	697b      	ldr	r3, [r7, #20]
 802ae2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802ae2e:	b25b      	sxtb	r3, r3
 802ae30:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ae34:	d103      	bne.n	802ae3e <vQueueWaitForMessageRestricted+0x2a>
 802ae36:	697b      	ldr	r3, [r7, #20]
 802ae38:	2200      	movs	r2, #0
 802ae3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802ae3e:	697b      	ldr	r3, [r7, #20]
 802ae40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802ae44:	b25b      	sxtb	r3, r3
 802ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ae4a:	d103      	bne.n	802ae54 <vQueueWaitForMessageRestricted+0x40>
 802ae4c:	697b      	ldr	r3, [r7, #20]
 802ae4e:	2200      	movs	r2, #0
 802ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802ae54:	f001 fd0e 	bl	802c874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802ae58:	697b      	ldr	r3, [r7, #20]
 802ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	d106      	bne.n	802ae6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802ae60:	697b      	ldr	r3, [r7, #20]
 802ae62:	3324      	adds	r3, #36	; 0x24
 802ae64:	687a      	ldr	r2, [r7, #4]
 802ae66:	68b9      	ldr	r1, [r7, #8]
 802ae68:	4618      	mov	r0, r3
 802ae6a:	f000 fd43 	bl	802b8f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802ae6e:	6978      	ldr	r0, [r7, #20]
 802ae70:	f7ff ff1e 	bl	802acb0 <prvUnlockQueue>
	}
 802ae74:	bf00      	nop
 802ae76:	3718      	adds	r7, #24
 802ae78:	46bd      	mov	sp, r7
 802ae7a:	bd80      	pop	{r7, pc}

0802ae7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802ae7c:	b580      	push	{r7, lr}
 802ae7e:	b08e      	sub	sp, #56	; 0x38
 802ae80:	af04      	add	r7, sp, #16
 802ae82:	60f8      	str	r0, [r7, #12]
 802ae84:	60b9      	str	r1, [r7, #8]
 802ae86:	607a      	str	r2, [r7, #4]
 802ae88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ae8c:	2b00      	cmp	r3, #0
 802ae8e:	d10a      	bne.n	802aea6 <xTaskCreateStatic+0x2a>
	__asm volatile
 802ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ae94:	f383 8811 	msr	BASEPRI, r3
 802ae98:	f3bf 8f6f 	isb	sy
 802ae9c:	f3bf 8f4f 	dsb	sy
 802aea0:	623b      	str	r3, [r7, #32]
}
 802aea2:	bf00      	nop
 802aea4:	e7fe      	b.n	802aea4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aea8:	2b00      	cmp	r3, #0
 802aeaa:	d10a      	bne.n	802aec2 <xTaskCreateStatic+0x46>
	__asm volatile
 802aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aeb0:	f383 8811 	msr	BASEPRI, r3
 802aeb4:	f3bf 8f6f 	isb	sy
 802aeb8:	f3bf 8f4f 	dsb	sy
 802aebc:	61fb      	str	r3, [r7, #28]
}
 802aebe:	bf00      	nop
 802aec0:	e7fe      	b.n	802aec0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802aec2:	23cc      	movs	r3, #204	; 0xcc
 802aec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802aec6:	693b      	ldr	r3, [r7, #16]
 802aec8:	2bcc      	cmp	r3, #204	; 0xcc
 802aeca:	d00a      	beq.n	802aee2 <xTaskCreateStatic+0x66>
	__asm volatile
 802aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aed0:	f383 8811 	msr	BASEPRI, r3
 802aed4:	f3bf 8f6f 	isb	sy
 802aed8:	f3bf 8f4f 	dsb	sy
 802aedc:	61bb      	str	r3, [r7, #24]
}
 802aede:	bf00      	nop
 802aee0:	e7fe      	b.n	802aee0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 802aee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 802aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aee6:	2b00      	cmp	r3, #0
 802aee8:	d01e      	beq.n	802af28 <xTaskCreateStatic+0xac>
 802aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802aeec:	2b00      	cmp	r3, #0
 802aeee:	d01b      	beq.n	802af28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802aef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802aef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 802aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aefc:	2202      	movs	r2, #2
 802aefe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802af02:	2300      	movs	r3, #0
 802af04:	9303      	str	r3, [sp, #12]
 802af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af08:	9302      	str	r3, [sp, #8]
 802af0a:	f107 0314 	add.w	r3, r7, #20
 802af0e:	9301      	str	r3, [sp, #4]
 802af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802af12:	9300      	str	r3, [sp, #0]
 802af14:	683b      	ldr	r3, [r7, #0]
 802af16:	687a      	ldr	r2, [r7, #4]
 802af18:	68b9      	ldr	r1, [r7, #8]
 802af1a:	68f8      	ldr	r0, [r7, #12]
 802af1c:	f000 f850 	bl	802afc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802af20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802af22:	f000 f8f3 	bl	802b10c <prvAddNewTaskToReadyList>
 802af26:	e001      	b.n	802af2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 802af28:	2300      	movs	r3, #0
 802af2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802af2c:	697b      	ldr	r3, [r7, #20]
	}
 802af2e:	4618      	mov	r0, r3
 802af30:	3728      	adds	r7, #40	; 0x28
 802af32:	46bd      	mov	sp, r7
 802af34:	bd80      	pop	{r7, pc}

0802af36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802af36:	b580      	push	{r7, lr}
 802af38:	b08c      	sub	sp, #48	; 0x30
 802af3a:	af04      	add	r7, sp, #16
 802af3c:	60f8      	str	r0, [r7, #12]
 802af3e:	60b9      	str	r1, [r7, #8]
 802af40:	603b      	str	r3, [r7, #0]
 802af42:	4613      	mov	r3, r2
 802af44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802af46:	88fb      	ldrh	r3, [r7, #6]
 802af48:	009b      	lsls	r3, r3, #2
 802af4a:	4618      	mov	r0, r3
 802af4c:	f001 fd84 	bl	802ca58 <pvPortMalloc>
 802af50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802af52:	697b      	ldr	r3, [r7, #20]
 802af54:	2b00      	cmp	r3, #0
 802af56:	d00e      	beq.n	802af76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 802af58:	20cc      	movs	r0, #204	; 0xcc
 802af5a:	f001 fd7d 	bl	802ca58 <pvPortMalloc>
 802af5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802af60:	69fb      	ldr	r3, [r7, #28]
 802af62:	2b00      	cmp	r3, #0
 802af64:	d003      	beq.n	802af6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802af66:	69fb      	ldr	r3, [r7, #28]
 802af68:	697a      	ldr	r2, [r7, #20]
 802af6a:	631a      	str	r2, [r3, #48]	; 0x30
 802af6c:	e005      	b.n	802af7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802af6e:	6978      	ldr	r0, [r7, #20]
 802af70:	f001 fe3e 	bl	802cbf0 <vPortFree>
 802af74:	e001      	b.n	802af7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802af76:	2300      	movs	r3, #0
 802af78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802af7a:	69fb      	ldr	r3, [r7, #28]
 802af7c:	2b00      	cmp	r3, #0
 802af7e:	d017      	beq.n	802afb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802af80:	69fb      	ldr	r3, [r7, #28]
 802af82:	2200      	movs	r2, #0
 802af84:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 802af88:	88fa      	ldrh	r2, [r7, #6]
 802af8a:	2300      	movs	r3, #0
 802af8c:	9303      	str	r3, [sp, #12]
 802af8e:	69fb      	ldr	r3, [r7, #28]
 802af90:	9302      	str	r3, [sp, #8]
 802af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802af94:	9301      	str	r3, [sp, #4]
 802af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af98:	9300      	str	r3, [sp, #0]
 802af9a:	683b      	ldr	r3, [r7, #0]
 802af9c:	68b9      	ldr	r1, [r7, #8]
 802af9e:	68f8      	ldr	r0, [r7, #12]
 802afa0:	f000 f80e 	bl	802afc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802afa4:	69f8      	ldr	r0, [r7, #28]
 802afa6:	f000 f8b1 	bl	802b10c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802afaa:	2301      	movs	r3, #1
 802afac:	61bb      	str	r3, [r7, #24]
 802afae:	e002      	b.n	802afb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802afb0:	f04f 33ff 	mov.w	r3, #4294967295
 802afb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802afb6:	69bb      	ldr	r3, [r7, #24]
	}
 802afb8:	4618      	mov	r0, r3
 802afba:	3720      	adds	r7, #32
 802afbc:	46bd      	mov	sp, r7
 802afbe:	bd80      	pop	{r7, pc}

0802afc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 802afc0:	b580      	push	{r7, lr}
 802afc2:	b088      	sub	sp, #32
 802afc4:	af00      	add	r7, sp, #0
 802afc6:	60f8      	str	r0, [r7, #12]
 802afc8:	60b9      	str	r1, [r7, #8]
 802afca:	607a      	str	r2, [r7, #4]
 802afcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802afd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802afd2:	687b      	ldr	r3, [r7, #4]
 802afd4:	009b      	lsls	r3, r3, #2
 802afd6:	461a      	mov	r2, r3
 802afd8:	21a5      	movs	r1, #165	; 0xa5
 802afda:	f003 fb39 	bl	802e650 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802afe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802afe2:	687b      	ldr	r3, [r7, #4]
 802afe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802afe8:	3b01      	subs	r3, #1
 802afea:	009b      	lsls	r3, r3, #2
 802afec:	4413      	add	r3, r2
 802afee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802aff0:	69bb      	ldr	r3, [r7, #24]
 802aff2:	f023 0307 	bic.w	r3, r3, #7
 802aff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 802aff8:	69bb      	ldr	r3, [r7, #24]
 802affa:	f003 0307 	and.w	r3, r3, #7
 802affe:	2b00      	cmp	r3, #0
 802b000:	d00a      	beq.n	802b018 <prvInitialiseNewTask+0x58>
	__asm volatile
 802b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b006:	f383 8811 	msr	BASEPRI, r3
 802b00a:	f3bf 8f6f 	isb	sy
 802b00e:	f3bf 8f4f 	dsb	sy
 802b012:	617b      	str	r3, [r7, #20]
}
 802b014:	bf00      	nop
 802b016:	e7fe      	b.n	802b016 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 802b018:	68bb      	ldr	r3, [r7, #8]
 802b01a:	2b00      	cmp	r3, #0
 802b01c:	d01f      	beq.n	802b05e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b01e:	2300      	movs	r3, #0
 802b020:	61fb      	str	r3, [r7, #28]
 802b022:	e012      	b.n	802b04a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802b024:	68ba      	ldr	r2, [r7, #8]
 802b026:	69fb      	ldr	r3, [r7, #28]
 802b028:	4413      	add	r3, r2
 802b02a:	7819      	ldrb	r1, [r3, #0]
 802b02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b02e:	69fb      	ldr	r3, [r7, #28]
 802b030:	4413      	add	r3, r2
 802b032:	3334      	adds	r3, #52	; 0x34
 802b034:	460a      	mov	r2, r1
 802b036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 802b038:	68ba      	ldr	r2, [r7, #8]
 802b03a:	69fb      	ldr	r3, [r7, #28]
 802b03c:	4413      	add	r3, r2
 802b03e:	781b      	ldrb	r3, [r3, #0]
 802b040:	2b00      	cmp	r3, #0
 802b042:	d006      	beq.n	802b052 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b044:	69fb      	ldr	r3, [r7, #28]
 802b046:	3301      	adds	r3, #1
 802b048:	61fb      	str	r3, [r7, #28]
 802b04a:	69fb      	ldr	r3, [r7, #28]
 802b04c:	2b1f      	cmp	r3, #31
 802b04e:	d9e9      	bls.n	802b024 <prvInitialiseNewTask+0x64>
 802b050:	e000      	b.n	802b054 <prvInitialiseNewTask+0x94>
			{
				break;
 802b052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b056:	2200      	movs	r2, #0
 802b058:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 802b05c:	e003      	b.n	802b066 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b060:	2200      	movs	r2, #0
 802b062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b068:	2b37      	cmp	r3, #55	; 0x37
 802b06a:	d901      	bls.n	802b070 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802b06c:	2337      	movs	r3, #55	; 0x37
 802b06e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b07a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 802b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b07e:	2200      	movs	r2, #0
 802b080:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b084:	3304      	adds	r3, #4
 802b086:	4618      	mov	r0, r3
 802b088:	f7fe ffd0 	bl	802a02c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b08e:	3318      	adds	r3, #24
 802b090:	4618      	mov	r0, r3
 802b092:	f7fe ffcb 	bl	802a02c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b09a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b09e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b0aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0ae:	2200      	movs	r2, #0
 802b0b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0b6:	2200      	movs	r2, #0
 802b0b8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 802b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0be:	3364      	adds	r3, #100	; 0x64
 802b0c0:	2260      	movs	r2, #96	; 0x60
 802b0c2:	2100      	movs	r1, #0
 802b0c4:	4618      	mov	r0, r3
 802b0c6:	f003 fac3 	bl	802e650 <memset>
 802b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0cc:	4a0c      	ldr	r2, [pc, #48]	; (802b100 <prvInitialiseNewTask+0x140>)
 802b0ce:	669a      	str	r2, [r3, #104]	; 0x68
 802b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0d2:	4a0c      	ldr	r2, [pc, #48]	; (802b104 <prvInitialiseNewTask+0x144>)
 802b0d4:	66da      	str	r2, [r3, #108]	; 0x6c
 802b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0d8:	4a0b      	ldr	r2, [pc, #44]	; (802b108 <prvInitialiseNewTask+0x148>)
 802b0da:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802b0dc:	683a      	ldr	r2, [r7, #0]
 802b0de:	68f9      	ldr	r1, [r7, #12]
 802b0e0:	69b8      	ldr	r0, [r7, #24]
 802b0e2:	f001 fa69 	bl	802c5b8 <pxPortInitialiseStack>
 802b0e6:	4602      	mov	r2, r0
 802b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b0ee:	2b00      	cmp	r3, #0
 802b0f0:	d002      	beq.n	802b0f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b0f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b0f8:	bf00      	nop
 802b0fa:	3720      	adds	r7, #32
 802b0fc:	46bd      	mov	sp, r7
 802b0fe:	bd80      	pop	{r7, pc}
 802b100:	0802fa5c 	.word	0x0802fa5c
 802b104:	0802fa7c 	.word	0x0802fa7c
 802b108:	0802fa3c 	.word	0x0802fa3c

0802b10c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802b10c:	b5b0      	push	{r4, r5, r7, lr}
 802b10e:	b084      	sub	sp, #16
 802b110:	af02      	add	r7, sp, #8
 802b112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 802b114:	f001 fb7e 	bl	802c814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 802b118:	4b3c      	ldr	r3, [pc, #240]	; (802b20c <prvAddNewTaskToReadyList+0x100>)
 802b11a:	681b      	ldr	r3, [r3, #0]
 802b11c:	3301      	adds	r3, #1
 802b11e:	4a3b      	ldr	r2, [pc, #236]	; (802b20c <prvAddNewTaskToReadyList+0x100>)
 802b120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802b122:	4b3b      	ldr	r3, [pc, #236]	; (802b210 <prvAddNewTaskToReadyList+0x104>)
 802b124:	681b      	ldr	r3, [r3, #0]
 802b126:	2b00      	cmp	r3, #0
 802b128:	d109      	bne.n	802b13e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802b12a:	4a39      	ldr	r2, [pc, #228]	; (802b210 <prvAddNewTaskToReadyList+0x104>)
 802b12c:	687b      	ldr	r3, [r7, #4]
 802b12e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802b130:	4b36      	ldr	r3, [pc, #216]	; (802b20c <prvAddNewTaskToReadyList+0x100>)
 802b132:	681b      	ldr	r3, [r3, #0]
 802b134:	2b01      	cmp	r3, #1
 802b136:	d110      	bne.n	802b15a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 802b138:	f000 fd0e 	bl	802bb58 <prvInitialiseTaskLists>
 802b13c:	e00d      	b.n	802b15a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802b13e:	4b35      	ldr	r3, [pc, #212]	; (802b214 <prvAddNewTaskToReadyList+0x108>)
 802b140:	681b      	ldr	r3, [r3, #0]
 802b142:	2b00      	cmp	r3, #0
 802b144:	d109      	bne.n	802b15a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 802b146:	4b32      	ldr	r3, [pc, #200]	; (802b210 <prvAddNewTaskToReadyList+0x104>)
 802b148:	681b      	ldr	r3, [r3, #0]
 802b14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b14c:	687b      	ldr	r3, [r7, #4]
 802b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b150:	429a      	cmp	r2, r3
 802b152:	d802      	bhi.n	802b15a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 802b154:	4a2e      	ldr	r2, [pc, #184]	; (802b210 <prvAddNewTaskToReadyList+0x104>)
 802b156:	687b      	ldr	r3, [r7, #4]
 802b158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802b15a:	4b2f      	ldr	r3, [pc, #188]	; (802b218 <prvAddNewTaskToReadyList+0x10c>)
 802b15c:	681b      	ldr	r3, [r3, #0]
 802b15e:	3301      	adds	r3, #1
 802b160:	4a2d      	ldr	r2, [pc, #180]	; (802b218 <prvAddNewTaskToReadyList+0x10c>)
 802b162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 802b164:	4b2c      	ldr	r3, [pc, #176]	; (802b218 <prvAddNewTaskToReadyList+0x10c>)
 802b166:	681a      	ldr	r2, [r3, #0]
 802b168:	687b      	ldr	r3, [r7, #4]
 802b16a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 802b16c:	687b      	ldr	r3, [r7, #4]
 802b16e:	2b00      	cmp	r3, #0
 802b170:	d016      	beq.n	802b1a0 <prvAddNewTaskToReadyList+0x94>
 802b172:	687b      	ldr	r3, [r7, #4]
 802b174:	4618      	mov	r0, r3
 802b176:	f002 ffe3 	bl	802e140 <SEGGER_SYSVIEW_OnTaskCreate>
 802b17a:	6878      	ldr	r0, [r7, #4]
 802b17c:	687b      	ldr	r3, [r7, #4]
 802b17e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802b182:	687b      	ldr	r3, [r7, #4]
 802b184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b186:	687b      	ldr	r3, [r7, #4]
 802b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b18a:	461d      	mov	r5, r3
 802b18c:	687b      	ldr	r3, [r7, #4]
 802b18e:	681b      	ldr	r3, [r3, #0]
 802b190:	461c      	mov	r4, r3
 802b192:	687b      	ldr	r3, [r7, #4]
 802b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b196:	1ae3      	subs	r3, r4, r3
 802b198:	9300      	str	r3, [sp, #0]
 802b19a:	462b      	mov	r3, r5
 802b19c:	f7e9 fac0 	bl	8014720 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 802b1a0:	687b      	ldr	r3, [r7, #4]
 802b1a2:	4618      	mov	r0, r3
 802b1a4:	f003 f850 	bl	802e248 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b1a8:	687b      	ldr	r3, [r7, #4]
 802b1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1ac:	4b1b      	ldr	r3, [pc, #108]	; (802b21c <prvAddNewTaskToReadyList+0x110>)
 802b1ae:	681b      	ldr	r3, [r3, #0]
 802b1b0:	429a      	cmp	r2, r3
 802b1b2:	d903      	bls.n	802b1bc <prvAddNewTaskToReadyList+0xb0>
 802b1b4:	687b      	ldr	r3, [r7, #4]
 802b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b1b8:	4a18      	ldr	r2, [pc, #96]	; (802b21c <prvAddNewTaskToReadyList+0x110>)
 802b1ba:	6013      	str	r3, [r2, #0]
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1c0:	4613      	mov	r3, r2
 802b1c2:	009b      	lsls	r3, r3, #2
 802b1c4:	4413      	add	r3, r2
 802b1c6:	009b      	lsls	r3, r3, #2
 802b1c8:	4a15      	ldr	r2, [pc, #84]	; (802b220 <prvAddNewTaskToReadyList+0x114>)
 802b1ca:	441a      	add	r2, r3
 802b1cc:	687b      	ldr	r3, [r7, #4]
 802b1ce:	3304      	adds	r3, #4
 802b1d0:	4619      	mov	r1, r3
 802b1d2:	4610      	mov	r0, r2
 802b1d4:	f7fe ff37 	bl	802a046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802b1d8:	f001 fb4c 	bl	802c874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 802b1dc:	4b0d      	ldr	r3, [pc, #52]	; (802b214 <prvAddNewTaskToReadyList+0x108>)
 802b1de:	681b      	ldr	r3, [r3, #0]
 802b1e0:	2b00      	cmp	r3, #0
 802b1e2:	d00e      	beq.n	802b202 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 802b1e4:	4b0a      	ldr	r3, [pc, #40]	; (802b210 <prvAddNewTaskToReadyList+0x104>)
 802b1e6:	681b      	ldr	r3, [r3, #0]
 802b1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1ea:	687b      	ldr	r3, [r7, #4]
 802b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b1ee:	429a      	cmp	r2, r3
 802b1f0:	d207      	bcs.n	802b202 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 802b1f2:	4b0c      	ldr	r3, [pc, #48]	; (802b224 <prvAddNewTaskToReadyList+0x118>)
 802b1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b1f8:	601a      	str	r2, [r3, #0]
 802b1fa:	f3bf 8f4f 	dsb	sy
 802b1fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b202:	bf00      	nop
 802b204:	3708      	adds	r7, #8
 802b206:	46bd      	mov	sp, r7
 802b208:	bdb0      	pop	{r4, r5, r7, pc}
 802b20a:	bf00      	nop
 802b20c:	200025b0 	.word	0x200025b0
 802b210:	200020dc 	.word	0x200020dc
 802b214:	200025bc 	.word	0x200025bc
 802b218:	200025cc 	.word	0x200025cc
 802b21c:	200025b8 	.word	0x200025b8
 802b220:	200020e0 	.word	0x200020e0
 802b224:	e000ed04 	.word	0xe000ed04

0802b228 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 802b228:	b580      	push	{r7, lr}
 802b22a:	b08a      	sub	sp, #40	; 0x28
 802b22c:	af00      	add	r7, sp, #0
 802b22e:	6078      	str	r0, [r7, #4]
 802b230:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 802b232:	2300      	movs	r3, #0
 802b234:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 802b236:	687b      	ldr	r3, [r7, #4]
 802b238:	2b00      	cmp	r3, #0
 802b23a:	d10a      	bne.n	802b252 <vTaskDelayUntil+0x2a>
	__asm volatile
 802b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b240:	f383 8811 	msr	BASEPRI, r3
 802b244:	f3bf 8f6f 	isb	sy
 802b248:	f3bf 8f4f 	dsb	sy
 802b24c:	617b      	str	r3, [r7, #20]
}
 802b24e:	bf00      	nop
 802b250:	e7fe      	b.n	802b250 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 802b252:	683b      	ldr	r3, [r7, #0]
 802b254:	2b00      	cmp	r3, #0
 802b256:	d10a      	bne.n	802b26e <vTaskDelayUntil+0x46>
	__asm volatile
 802b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b25c:	f383 8811 	msr	BASEPRI, r3
 802b260:	f3bf 8f6f 	isb	sy
 802b264:	f3bf 8f4f 	dsb	sy
 802b268:	613b      	str	r3, [r7, #16]
}
 802b26a:	bf00      	nop
 802b26c:	e7fe      	b.n	802b26c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 802b26e:	4b2b      	ldr	r3, [pc, #172]	; (802b31c <vTaskDelayUntil+0xf4>)
 802b270:	681b      	ldr	r3, [r3, #0]
 802b272:	2b00      	cmp	r3, #0
 802b274:	d00a      	beq.n	802b28c <vTaskDelayUntil+0x64>
	__asm volatile
 802b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b27a:	f383 8811 	msr	BASEPRI, r3
 802b27e:	f3bf 8f6f 	isb	sy
 802b282:	f3bf 8f4f 	dsb	sy
 802b286:	60fb      	str	r3, [r7, #12]
}
 802b288:	bf00      	nop
 802b28a:	e7fe      	b.n	802b28a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 802b28c:	f000 f906 	bl	802b49c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 802b290:	4b23      	ldr	r3, [pc, #140]	; (802b320 <vTaskDelayUntil+0xf8>)
 802b292:	681b      	ldr	r3, [r3, #0]
 802b294:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 802b296:	687b      	ldr	r3, [r7, #4]
 802b298:	681b      	ldr	r3, [r3, #0]
 802b29a:	683a      	ldr	r2, [r7, #0]
 802b29c:	4413      	add	r3, r2
 802b29e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 802b2a0:	687b      	ldr	r3, [r7, #4]
 802b2a2:	681b      	ldr	r3, [r3, #0]
 802b2a4:	6a3a      	ldr	r2, [r7, #32]
 802b2a6:	429a      	cmp	r2, r3
 802b2a8:	d20b      	bcs.n	802b2c2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 802b2aa:	687b      	ldr	r3, [r7, #4]
 802b2ac:	681b      	ldr	r3, [r3, #0]
 802b2ae:	69fa      	ldr	r2, [r7, #28]
 802b2b0:	429a      	cmp	r2, r3
 802b2b2:	d211      	bcs.n	802b2d8 <vTaskDelayUntil+0xb0>
 802b2b4:	69fa      	ldr	r2, [r7, #28]
 802b2b6:	6a3b      	ldr	r3, [r7, #32]
 802b2b8:	429a      	cmp	r2, r3
 802b2ba:	d90d      	bls.n	802b2d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b2bc:	2301      	movs	r3, #1
 802b2be:	627b      	str	r3, [r7, #36]	; 0x24
 802b2c0:	e00a      	b.n	802b2d8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 802b2c2:	687b      	ldr	r3, [r7, #4]
 802b2c4:	681b      	ldr	r3, [r3, #0]
 802b2c6:	69fa      	ldr	r2, [r7, #28]
 802b2c8:	429a      	cmp	r2, r3
 802b2ca:	d303      	bcc.n	802b2d4 <vTaskDelayUntil+0xac>
 802b2cc:	69fa      	ldr	r2, [r7, #28]
 802b2ce:	6a3b      	ldr	r3, [r7, #32]
 802b2d0:	429a      	cmp	r2, r3
 802b2d2:	d901      	bls.n	802b2d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b2d4:	2301      	movs	r3, #1
 802b2d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802b2d8:	687b      	ldr	r3, [r7, #4]
 802b2da:	69fa      	ldr	r2, [r7, #28]
 802b2dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 802b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b2e0:	2b00      	cmp	r3, #0
 802b2e2:	d009      	beq.n	802b2f8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 802b2e4:	2024      	movs	r0, #36	; 0x24
 802b2e6:	f002 fa8b 	bl	802d800 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 802b2ea:	69fa      	ldr	r2, [r7, #28]
 802b2ec:	6a3b      	ldr	r3, [r7, #32]
 802b2ee:	1ad3      	subs	r3, r2, r3
 802b2f0:	2100      	movs	r1, #0
 802b2f2:	4618      	mov	r0, r3
 802b2f4:	f000 fdbe 	bl	802be74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 802b2f8:	f000 f8de 	bl	802b4b8 <xTaskResumeAll>
 802b2fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b2fe:	69bb      	ldr	r3, [r7, #24]
 802b300:	2b00      	cmp	r3, #0
 802b302:	d107      	bne.n	802b314 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 802b304:	4b07      	ldr	r3, [pc, #28]	; (802b324 <vTaskDelayUntil+0xfc>)
 802b306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b30a:	601a      	str	r2, [r3, #0]
 802b30c:	f3bf 8f4f 	dsb	sy
 802b310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b314:	bf00      	nop
 802b316:	3728      	adds	r7, #40	; 0x28
 802b318:	46bd      	mov	sp, r7
 802b31a:	bd80      	pop	{r7, pc}
 802b31c:	200025d8 	.word	0x200025d8
 802b320:	200025b4 	.word	0x200025b4
 802b324:	e000ed04 	.word	0xe000ed04

0802b328 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802b328:	b580      	push	{r7, lr}
 802b32a:	b084      	sub	sp, #16
 802b32c:	af00      	add	r7, sp, #0
 802b32e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 802b330:	2300      	movs	r3, #0
 802b332:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 802b334:	687b      	ldr	r3, [r7, #4]
 802b336:	2b00      	cmp	r3, #0
 802b338:	d01b      	beq.n	802b372 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802b33a:	4b15      	ldr	r3, [pc, #84]	; (802b390 <vTaskDelay+0x68>)
 802b33c:	681b      	ldr	r3, [r3, #0]
 802b33e:	2b00      	cmp	r3, #0
 802b340:	d00a      	beq.n	802b358 <vTaskDelay+0x30>
	__asm volatile
 802b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b346:	f383 8811 	msr	BASEPRI, r3
 802b34a:	f3bf 8f6f 	isb	sy
 802b34e:	f3bf 8f4f 	dsb	sy
 802b352:	60bb      	str	r3, [r7, #8]
}
 802b354:	bf00      	nop
 802b356:	e7fe      	b.n	802b356 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 802b358:	f000 f8a0 	bl	802b49c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 802b35c:	6879      	ldr	r1, [r7, #4]
 802b35e:	2023      	movs	r0, #35	; 0x23
 802b360:	f002 fa6c 	bl	802d83c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802b364:	2100      	movs	r1, #0
 802b366:	6878      	ldr	r0, [r7, #4]
 802b368:	f000 fd84 	bl	802be74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 802b36c:	f000 f8a4 	bl	802b4b8 <xTaskResumeAll>
 802b370:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b372:	68fb      	ldr	r3, [r7, #12]
 802b374:	2b00      	cmp	r3, #0
 802b376:	d107      	bne.n	802b388 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 802b378:	4b06      	ldr	r3, [pc, #24]	; (802b394 <vTaskDelay+0x6c>)
 802b37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b37e:	601a      	str	r2, [r3, #0]
 802b380:	f3bf 8f4f 	dsb	sy
 802b384:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b388:	bf00      	nop
 802b38a:	3710      	adds	r7, #16
 802b38c:	46bd      	mov	sp, r7
 802b38e:	bd80      	pop	{r7, pc}
 802b390:	200025d8 	.word	0x200025d8
 802b394:	e000ed04 	.word	0xe000ed04

0802b398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 802b398:	b580      	push	{r7, lr}
 802b39a:	b08a      	sub	sp, #40	; 0x28
 802b39c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802b39e:	2300      	movs	r3, #0
 802b3a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802b3a2:	2300      	movs	r3, #0
 802b3a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802b3a6:	463a      	mov	r2, r7
 802b3a8:	1d39      	adds	r1, r7, #4
 802b3aa:	f107 0308 	add.w	r3, r7, #8
 802b3ae:	4618      	mov	r0, r3
 802b3b0:	f7fe fde8 	bl	8029f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 802b3b4:	6839      	ldr	r1, [r7, #0]
 802b3b6:	687b      	ldr	r3, [r7, #4]
 802b3b8:	68ba      	ldr	r2, [r7, #8]
 802b3ba:	9202      	str	r2, [sp, #8]
 802b3bc:	9301      	str	r3, [sp, #4]
 802b3be:	2300      	movs	r3, #0
 802b3c0:	9300      	str	r3, [sp, #0]
 802b3c2:	2300      	movs	r3, #0
 802b3c4:	460a      	mov	r2, r1
 802b3c6:	492d      	ldr	r1, [pc, #180]	; (802b47c <vTaskStartScheduler+0xe4>)
 802b3c8:	482d      	ldr	r0, [pc, #180]	; (802b480 <vTaskStartScheduler+0xe8>)
 802b3ca:	f7ff fd57 	bl	802ae7c <xTaskCreateStatic>
 802b3ce:	4603      	mov	r3, r0
 802b3d0:	4a2c      	ldr	r2, [pc, #176]	; (802b484 <vTaskStartScheduler+0xec>)
 802b3d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 802b3d4:	4b2b      	ldr	r3, [pc, #172]	; (802b484 <vTaskStartScheduler+0xec>)
 802b3d6:	681b      	ldr	r3, [r3, #0]
 802b3d8:	2b00      	cmp	r3, #0
 802b3da:	d002      	beq.n	802b3e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 802b3dc:	2301      	movs	r3, #1
 802b3de:	617b      	str	r3, [r7, #20]
 802b3e0:	e001      	b.n	802b3e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802b3e2:	2300      	movs	r3, #0
 802b3e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802b3e6:	697b      	ldr	r3, [r7, #20]
 802b3e8:	2b01      	cmp	r3, #1
 802b3ea:	d102      	bne.n	802b3f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 802b3ec:	f000 fd96 	bl	802bf1c <xTimerCreateTimerTask>
 802b3f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802b3f2:	697b      	ldr	r3, [r7, #20]
 802b3f4:	2b01      	cmp	r3, #1
 802b3f6:	d12e      	bne.n	802b456 <vTaskStartScheduler+0xbe>
	__asm volatile
 802b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b3fc:	f383 8811 	msr	BASEPRI, r3
 802b400:	f3bf 8f6f 	isb	sy
 802b404:	f3bf 8f4f 	dsb	sy
 802b408:	613b      	str	r3, [r7, #16]
}
 802b40a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802b40c:	4b1e      	ldr	r3, [pc, #120]	; (802b488 <vTaskStartScheduler+0xf0>)
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	3364      	adds	r3, #100	; 0x64
 802b412:	4a1e      	ldr	r2, [pc, #120]	; (802b48c <vTaskStartScheduler+0xf4>)
 802b414:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802b416:	4b1e      	ldr	r3, [pc, #120]	; (802b490 <vTaskStartScheduler+0xf8>)
 802b418:	f04f 32ff 	mov.w	r2, #4294967295
 802b41c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802b41e:	4b1d      	ldr	r3, [pc, #116]	; (802b494 <vTaskStartScheduler+0xfc>)
 802b420:	2201      	movs	r2, #1
 802b422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802b424:	4b1c      	ldr	r3, [pc, #112]	; (802b498 <vTaskStartScheduler+0x100>)
 802b426:	2200      	movs	r2, #0
 802b428:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 802b42a:	4b17      	ldr	r3, [pc, #92]	; (802b488 <vTaskStartScheduler+0xf0>)
 802b42c:	681b      	ldr	r3, [r3, #0]
 802b42e:	3334      	adds	r3, #52	; 0x34
 802b430:	2205      	movs	r2, #5
 802b432:	4912      	ldr	r1, [pc, #72]	; (802b47c <vTaskStartScheduler+0xe4>)
 802b434:	4618      	mov	r0, r3
 802b436:	f003 f8ef 	bl	802e618 <memcmp>
 802b43a:	4603      	mov	r3, r0
 802b43c:	2b00      	cmp	r3, #0
 802b43e:	d005      	beq.n	802b44c <vTaskStartScheduler+0xb4>
 802b440:	4b11      	ldr	r3, [pc, #68]	; (802b488 <vTaskStartScheduler+0xf0>)
 802b442:	681b      	ldr	r3, [r3, #0]
 802b444:	4618      	mov	r0, r3
 802b446:	f002 febd 	bl	802e1c4 <SEGGER_SYSVIEW_OnTaskStartExec>
 802b44a:	e001      	b.n	802b450 <vTaskStartScheduler+0xb8>
 802b44c:	f002 fe5c 	bl	802e108 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802b450:	f001 f93e 	bl	802c6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802b454:	e00e      	b.n	802b474 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802b456:	697b      	ldr	r3, [r7, #20]
 802b458:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b45c:	d10a      	bne.n	802b474 <vTaskStartScheduler+0xdc>
	__asm volatile
 802b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b462:	f383 8811 	msr	BASEPRI, r3
 802b466:	f3bf 8f6f 	isb	sy
 802b46a:	f3bf 8f4f 	dsb	sy
 802b46e:	60fb      	str	r3, [r7, #12]
}
 802b470:	bf00      	nop
 802b472:	e7fe      	b.n	802b472 <vTaskStartScheduler+0xda>
}
 802b474:	bf00      	nop
 802b476:	3718      	adds	r7, #24
 802b478:	46bd      	mov	sp, r7
 802b47a:	bd80      	pop	{r7, pc}
 802b47c:	0802f39c 	.word	0x0802f39c
 802b480:	0802bb29 	.word	0x0802bb29
 802b484:	200025d4 	.word	0x200025d4
 802b488:	200020dc 	.word	0x200020dc
 802b48c:	20001444 	.word	0x20001444
 802b490:	200025d0 	.word	0x200025d0
 802b494:	200025bc 	.word	0x200025bc
 802b498:	200025b4 	.word	0x200025b4

0802b49c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 802b49c:	b480      	push	{r7}
 802b49e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802b4a0:	4b04      	ldr	r3, [pc, #16]	; (802b4b4 <vTaskSuspendAll+0x18>)
 802b4a2:	681b      	ldr	r3, [r3, #0]
 802b4a4:	3301      	adds	r3, #1
 802b4a6:	4a03      	ldr	r2, [pc, #12]	; (802b4b4 <vTaskSuspendAll+0x18>)
 802b4a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802b4aa:	bf00      	nop
 802b4ac:	46bd      	mov	sp, r7
 802b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4b2:	4770      	bx	lr
 802b4b4:	200025d8 	.word	0x200025d8

0802b4b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802b4b8:	b580      	push	{r7, lr}
 802b4ba:	b084      	sub	sp, #16
 802b4bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802b4be:	2300      	movs	r3, #0
 802b4c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802b4c2:	2300      	movs	r3, #0
 802b4c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802b4c6:	4b44      	ldr	r3, [pc, #272]	; (802b5d8 <xTaskResumeAll+0x120>)
 802b4c8:	681b      	ldr	r3, [r3, #0]
 802b4ca:	2b00      	cmp	r3, #0
 802b4cc:	d10a      	bne.n	802b4e4 <xTaskResumeAll+0x2c>
	__asm volatile
 802b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b4d2:	f383 8811 	msr	BASEPRI, r3
 802b4d6:	f3bf 8f6f 	isb	sy
 802b4da:	f3bf 8f4f 	dsb	sy
 802b4de:	603b      	str	r3, [r7, #0]
}
 802b4e0:	bf00      	nop
 802b4e2:	e7fe      	b.n	802b4e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 802b4e4:	f001 f996 	bl	802c814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802b4e8:	4b3b      	ldr	r3, [pc, #236]	; (802b5d8 <xTaskResumeAll+0x120>)
 802b4ea:	681b      	ldr	r3, [r3, #0]
 802b4ec:	3b01      	subs	r3, #1
 802b4ee:	4a3a      	ldr	r2, [pc, #232]	; (802b5d8 <xTaskResumeAll+0x120>)
 802b4f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b4f2:	4b39      	ldr	r3, [pc, #228]	; (802b5d8 <xTaskResumeAll+0x120>)
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	2b00      	cmp	r3, #0
 802b4f8:	d166      	bne.n	802b5c8 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802b4fa:	4b38      	ldr	r3, [pc, #224]	; (802b5dc <xTaskResumeAll+0x124>)
 802b4fc:	681b      	ldr	r3, [r3, #0]
 802b4fe:	2b00      	cmp	r3, #0
 802b500:	d062      	beq.n	802b5c8 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b502:	e033      	b.n	802b56c <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b504:	4b36      	ldr	r3, [pc, #216]	; (802b5e0 <xTaskResumeAll+0x128>)
 802b506:	68db      	ldr	r3, [r3, #12]
 802b508:	68db      	ldr	r3, [r3, #12]
 802b50a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b50c:	68fb      	ldr	r3, [r7, #12]
 802b50e:	3318      	adds	r3, #24
 802b510:	4618      	mov	r0, r3
 802b512:	f7fe fdf5 	bl	802a100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b516:	68fb      	ldr	r3, [r7, #12]
 802b518:	3304      	adds	r3, #4
 802b51a:	4618      	mov	r0, r3
 802b51c:	f7fe fdf0 	bl	802a100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802b520:	68fb      	ldr	r3, [r7, #12]
 802b522:	4618      	mov	r0, r3
 802b524:	f002 fe90 	bl	802e248 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b528:	68fb      	ldr	r3, [r7, #12]
 802b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b52c:	4b2d      	ldr	r3, [pc, #180]	; (802b5e4 <xTaskResumeAll+0x12c>)
 802b52e:	681b      	ldr	r3, [r3, #0]
 802b530:	429a      	cmp	r2, r3
 802b532:	d903      	bls.n	802b53c <xTaskResumeAll+0x84>
 802b534:	68fb      	ldr	r3, [r7, #12]
 802b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b538:	4a2a      	ldr	r2, [pc, #168]	; (802b5e4 <xTaskResumeAll+0x12c>)
 802b53a:	6013      	str	r3, [r2, #0]
 802b53c:	68fb      	ldr	r3, [r7, #12]
 802b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b540:	4613      	mov	r3, r2
 802b542:	009b      	lsls	r3, r3, #2
 802b544:	4413      	add	r3, r2
 802b546:	009b      	lsls	r3, r3, #2
 802b548:	4a27      	ldr	r2, [pc, #156]	; (802b5e8 <xTaskResumeAll+0x130>)
 802b54a:	441a      	add	r2, r3
 802b54c:	68fb      	ldr	r3, [r7, #12]
 802b54e:	3304      	adds	r3, #4
 802b550:	4619      	mov	r1, r3
 802b552:	4610      	mov	r0, r2
 802b554:	f7fe fd77 	bl	802a046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802b558:	68fb      	ldr	r3, [r7, #12]
 802b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b55c:	4b23      	ldr	r3, [pc, #140]	; (802b5ec <xTaskResumeAll+0x134>)
 802b55e:	681b      	ldr	r3, [r3, #0]
 802b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b562:	429a      	cmp	r2, r3
 802b564:	d302      	bcc.n	802b56c <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 802b566:	4b22      	ldr	r3, [pc, #136]	; (802b5f0 <xTaskResumeAll+0x138>)
 802b568:	2201      	movs	r2, #1
 802b56a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b56c:	4b1c      	ldr	r3, [pc, #112]	; (802b5e0 <xTaskResumeAll+0x128>)
 802b56e:	681b      	ldr	r3, [r3, #0]
 802b570:	2b00      	cmp	r3, #0
 802b572:	d1c7      	bne.n	802b504 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802b574:	68fb      	ldr	r3, [r7, #12]
 802b576:	2b00      	cmp	r3, #0
 802b578:	d001      	beq.n	802b57e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802b57a:	f000 fbc7 	bl	802bd0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 802b57e:	4b1d      	ldr	r3, [pc, #116]	; (802b5f4 <xTaskResumeAll+0x13c>)
 802b580:	681b      	ldr	r3, [r3, #0]
 802b582:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 802b584:	687b      	ldr	r3, [r7, #4]
 802b586:	2b00      	cmp	r3, #0
 802b588:	d010      	beq.n	802b5ac <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802b58a:	f000 f859 	bl	802b640 <xTaskIncrementTick>
 802b58e:	4603      	mov	r3, r0
 802b590:	2b00      	cmp	r3, #0
 802b592:	d002      	beq.n	802b59a <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 802b594:	4b16      	ldr	r3, [pc, #88]	; (802b5f0 <xTaskResumeAll+0x138>)
 802b596:	2201      	movs	r2, #1
 802b598:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802b59a:	687b      	ldr	r3, [r7, #4]
 802b59c:	3b01      	subs	r3, #1
 802b59e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	2b00      	cmp	r3, #0
 802b5a4:	d1f1      	bne.n	802b58a <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 802b5a6:	4b13      	ldr	r3, [pc, #76]	; (802b5f4 <xTaskResumeAll+0x13c>)
 802b5a8:	2200      	movs	r2, #0
 802b5aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802b5ac:	4b10      	ldr	r3, [pc, #64]	; (802b5f0 <xTaskResumeAll+0x138>)
 802b5ae:	681b      	ldr	r3, [r3, #0]
 802b5b0:	2b00      	cmp	r3, #0
 802b5b2:	d009      	beq.n	802b5c8 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802b5b4:	2301      	movs	r3, #1
 802b5b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802b5b8:	4b0f      	ldr	r3, [pc, #60]	; (802b5f8 <xTaskResumeAll+0x140>)
 802b5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b5be:	601a      	str	r2, [r3, #0]
 802b5c0:	f3bf 8f4f 	dsb	sy
 802b5c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802b5c8:	f001 f954 	bl	802c874 <vPortExitCritical>

	return xAlreadyYielded;
 802b5cc:	68bb      	ldr	r3, [r7, #8]
}
 802b5ce:	4618      	mov	r0, r3
 802b5d0:	3710      	adds	r7, #16
 802b5d2:	46bd      	mov	sp, r7
 802b5d4:	bd80      	pop	{r7, pc}
 802b5d6:	bf00      	nop
 802b5d8:	200025d8 	.word	0x200025d8
 802b5dc:	200025b0 	.word	0x200025b0
 802b5e0:	20002570 	.word	0x20002570
 802b5e4:	200025b8 	.word	0x200025b8
 802b5e8:	200020e0 	.word	0x200020e0
 802b5ec:	200020dc 	.word	0x200020dc
 802b5f0:	200025c4 	.word	0x200025c4
 802b5f4:	200025c0 	.word	0x200025c0
 802b5f8:	e000ed04 	.word	0xe000ed04

0802b5fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802b5fc:	b480      	push	{r7}
 802b5fe:	b083      	sub	sp, #12
 802b600:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802b602:	4b05      	ldr	r3, [pc, #20]	; (802b618 <xTaskGetTickCount+0x1c>)
 802b604:	681b      	ldr	r3, [r3, #0]
 802b606:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802b608:	687b      	ldr	r3, [r7, #4]
}
 802b60a:	4618      	mov	r0, r3
 802b60c:	370c      	adds	r7, #12
 802b60e:	46bd      	mov	sp, r7
 802b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b614:	4770      	bx	lr
 802b616:	bf00      	nop
 802b618:	200025b4 	.word	0x200025b4

0802b61c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802b61c:	b580      	push	{r7, lr}
 802b61e:	b082      	sub	sp, #8
 802b620:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802b622:	f001 f9d9 	bl	802c9d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802b626:	2300      	movs	r3, #0
 802b628:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802b62a:	4b04      	ldr	r3, [pc, #16]	; (802b63c <xTaskGetTickCountFromISR+0x20>)
 802b62c:	681b      	ldr	r3, [r3, #0]
 802b62e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802b630:	683b      	ldr	r3, [r7, #0]
}
 802b632:	4618      	mov	r0, r3
 802b634:	3708      	adds	r7, #8
 802b636:	46bd      	mov	sp, r7
 802b638:	bd80      	pop	{r7, pc}
 802b63a:	bf00      	nop
 802b63c:	200025b4 	.word	0x200025b4

0802b640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 802b640:	b580      	push	{r7, lr}
 802b642:	b086      	sub	sp, #24
 802b644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802b646:	2300      	movs	r3, #0
 802b648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b64a:	4b51      	ldr	r3, [pc, #324]	; (802b790 <xTaskIncrementTick+0x150>)
 802b64c:	681b      	ldr	r3, [r3, #0]
 802b64e:	2b00      	cmp	r3, #0
 802b650:	f040 8093 	bne.w	802b77a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802b654:	4b4f      	ldr	r3, [pc, #316]	; (802b794 <xTaskIncrementTick+0x154>)
 802b656:	681b      	ldr	r3, [r3, #0]
 802b658:	3301      	adds	r3, #1
 802b65a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802b65c:	4a4d      	ldr	r2, [pc, #308]	; (802b794 <xTaskIncrementTick+0x154>)
 802b65e:	693b      	ldr	r3, [r7, #16]
 802b660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802b662:	693b      	ldr	r3, [r7, #16]
 802b664:	2b00      	cmp	r3, #0
 802b666:	d120      	bne.n	802b6aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 802b668:	4b4b      	ldr	r3, [pc, #300]	; (802b798 <xTaskIncrementTick+0x158>)
 802b66a:	681b      	ldr	r3, [r3, #0]
 802b66c:	681b      	ldr	r3, [r3, #0]
 802b66e:	2b00      	cmp	r3, #0
 802b670:	d00a      	beq.n	802b688 <xTaskIncrementTick+0x48>
	__asm volatile
 802b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b676:	f383 8811 	msr	BASEPRI, r3
 802b67a:	f3bf 8f6f 	isb	sy
 802b67e:	f3bf 8f4f 	dsb	sy
 802b682:	603b      	str	r3, [r7, #0]
}
 802b684:	bf00      	nop
 802b686:	e7fe      	b.n	802b686 <xTaskIncrementTick+0x46>
 802b688:	4b43      	ldr	r3, [pc, #268]	; (802b798 <xTaskIncrementTick+0x158>)
 802b68a:	681b      	ldr	r3, [r3, #0]
 802b68c:	60fb      	str	r3, [r7, #12]
 802b68e:	4b43      	ldr	r3, [pc, #268]	; (802b79c <xTaskIncrementTick+0x15c>)
 802b690:	681b      	ldr	r3, [r3, #0]
 802b692:	4a41      	ldr	r2, [pc, #260]	; (802b798 <xTaskIncrementTick+0x158>)
 802b694:	6013      	str	r3, [r2, #0]
 802b696:	4a41      	ldr	r2, [pc, #260]	; (802b79c <xTaskIncrementTick+0x15c>)
 802b698:	68fb      	ldr	r3, [r7, #12]
 802b69a:	6013      	str	r3, [r2, #0]
 802b69c:	4b40      	ldr	r3, [pc, #256]	; (802b7a0 <xTaskIncrementTick+0x160>)
 802b69e:	681b      	ldr	r3, [r3, #0]
 802b6a0:	3301      	adds	r3, #1
 802b6a2:	4a3f      	ldr	r2, [pc, #252]	; (802b7a0 <xTaskIncrementTick+0x160>)
 802b6a4:	6013      	str	r3, [r2, #0]
 802b6a6:	f000 fb31 	bl	802bd0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802b6aa:	4b3e      	ldr	r3, [pc, #248]	; (802b7a4 <xTaskIncrementTick+0x164>)
 802b6ac:	681b      	ldr	r3, [r3, #0]
 802b6ae:	693a      	ldr	r2, [r7, #16]
 802b6b0:	429a      	cmp	r2, r3
 802b6b2:	d34d      	bcc.n	802b750 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802b6b4:	4b38      	ldr	r3, [pc, #224]	; (802b798 <xTaskIncrementTick+0x158>)
 802b6b6:	681b      	ldr	r3, [r3, #0]
 802b6b8:	681b      	ldr	r3, [r3, #0]
 802b6ba:	2b00      	cmp	r3, #0
 802b6bc:	d104      	bne.n	802b6c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b6be:	4b39      	ldr	r3, [pc, #228]	; (802b7a4 <xTaskIncrementTick+0x164>)
 802b6c0:	f04f 32ff 	mov.w	r2, #4294967295
 802b6c4:	601a      	str	r2, [r3, #0]
					break;
 802b6c6:	e043      	b.n	802b750 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b6c8:	4b33      	ldr	r3, [pc, #204]	; (802b798 <xTaskIncrementTick+0x158>)
 802b6ca:	681b      	ldr	r3, [r3, #0]
 802b6cc:	68db      	ldr	r3, [r3, #12]
 802b6ce:	68db      	ldr	r3, [r3, #12]
 802b6d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802b6d2:	68bb      	ldr	r3, [r7, #8]
 802b6d4:	685b      	ldr	r3, [r3, #4]
 802b6d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802b6d8:	693a      	ldr	r2, [r7, #16]
 802b6da:	687b      	ldr	r3, [r7, #4]
 802b6dc:	429a      	cmp	r2, r3
 802b6de:	d203      	bcs.n	802b6e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802b6e0:	4a30      	ldr	r2, [pc, #192]	; (802b7a4 <xTaskIncrementTick+0x164>)
 802b6e2:	687b      	ldr	r3, [r7, #4]
 802b6e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802b6e6:	e033      	b.n	802b750 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b6e8:	68bb      	ldr	r3, [r7, #8]
 802b6ea:	3304      	adds	r3, #4
 802b6ec:	4618      	mov	r0, r3
 802b6ee:	f7fe fd07 	bl	802a100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802b6f2:	68bb      	ldr	r3, [r7, #8]
 802b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b6f6:	2b00      	cmp	r3, #0
 802b6f8:	d004      	beq.n	802b704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b6fa:	68bb      	ldr	r3, [r7, #8]
 802b6fc:	3318      	adds	r3, #24
 802b6fe:	4618      	mov	r0, r3
 802b700:	f7fe fcfe 	bl	802a100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802b704:	68bb      	ldr	r3, [r7, #8]
 802b706:	4618      	mov	r0, r3
 802b708:	f002 fd9e 	bl	802e248 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b70c:	68bb      	ldr	r3, [r7, #8]
 802b70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b710:	4b25      	ldr	r3, [pc, #148]	; (802b7a8 <xTaskIncrementTick+0x168>)
 802b712:	681b      	ldr	r3, [r3, #0]
 802b714:	429a      	cmp	r2, r3
 802b716:	d903      	bls.n	802b720 <xTaskIncrementTick+0xe0>
 802b718:	68bb      	ldr	r3, [r7, #8]
 802b71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b71c:	4a22      	ldr	r2, [pc, #136]	; (802b7a8 <xTaskIncrementTick+0x168>)
 802b71e:	6013      	str	r3, [r2, #0]
 802b720:	68bb      	ldr	r3, [r7, #8]
 802b722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b724:	4613      	mov	r3, r2
 802b726:	009b      	lsls	r3, r3, #2
 802b728:	4413      	add	r3, r2
 802b72a:	009b      	lsls	r3, r3, #2
 802b72c:	4a1f      	ldr	r2, [pc, #124]	; (802b7ac <xTaskIncrementTick+0x16c>)
 802b72e:	441a      	add	r2, r3
 802b730:	68bb      	ldr	r3, [r7, #8]
 802b732:	3304      	adds	r3, #4
 802b734:	4619      	mov	r1, r3
 802b736:	4610      	mov	r0, r2
 802b738:	f7fe fc85 	bl	802a046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802b73c:	68bb      	ldr	r3, [r7, #8]
 802b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b740:	4b1b      	ldr	r3, [pc, #108]	; (802b7b0 <xTaskIncrementTick+0x170>)
 802b742:	681b      	ldr	r3, [r3, #0]
 802b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b746:	429a      	cmp	r2, r3
 802b748:	d3b4      	bcc.n	802b6b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 802b74a:	2301      	movs	r3, #1
 802b74c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802b74e:	e7b1      	b.n	802b6b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802b750:	4b17      	ldr	r3, [pc, #92]	; (802b7b0 <xTaskIncrementTick+0x170>)
 802b752:	681b      	ldr	r3, [r3, #0]
 802b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b756:	4915      	ldr	r1, [pc, #84]	; (802b7ac <xTaskIncrementTick+0x16c>)
 802b758:	4613      	mov	r3, r2
 802b75a:	009b      	lsls	r3, r3, #2
 802b75c:	4413      	add	r3, r2
 802b75e:	009b      	lsls	r3, r3, #2
 802b760:	440b      	add	r3, r1
 802b762:	681b      	ldr	r3, [r3, #0]
 802b764:	2b01      	cmp	r3, #1
 802b766:	d901      	bls.n	802b76c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 802b768:	2301      	movs	r3, #1
 802b76a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 802b76c:	4b11      	ldr	r3, [pc, #68]	; (802b7b4 <xTaskIncrementTick+0x174>)
 802b76e:	681b      	ldr	r3, [r3, #0]
 802b770:	2b00      	cmp	r3, #0
 802b772:	d007      	beq.n	802b784 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 802b774:	2301      	movs	r3, #1
 802b776:	617b      	str	r3, [r7, #20]
 802b778:	e004      	b.n	802b784 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 802b77a:	4b0f      	ldr	r3, [pc, #60]	; (802b7b8 <xTaskIncrementTick+0x178>)
 802b77c:	681b      	ldr	r3, [r3, #0]
 802b77e:	3301      	adds	r3, #1
 802b780:	4a0d      	ldr	r2, [pc, #52]	; (802b7b8 <xTaskIncrementTick+0x178>)
 802b782:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 802b784:	697b      	ldr	r3, [r7, #20]
}
 802b786:	4618      	mov	r0, r3
 802b788:	3718      	adds	r7, #24
 802b78a:	46bd      	mov	sp, r7
 802b78c:	bd80      	pop	{r7, pc}
 802b78e:	bf00      	nop
 802b790:	200025d8 	.word	0x200025d8
 802b794:	200025b4 	.word	0x200025b4
 802b798:	20002568 	.word	0x20002568
 802b79c:	2000256c 	.word	0x2000256c
 802b7a0:	200025c8 	.word	0x200025c8
 802b7a4:	200025d0 	.word	0x200025d0
 802b7a8:	200025b8 	.word	0x200025b8
 802b7ac:	200020e0 	.word	0x200020e0
 802b7b0:	200020dc 	.word	0x200020dc
 802b7b4:	200025c4 	.word	0x200025c4
 802b7b8:	200025c0 	.word	0x200025c0

0802b7bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802b7bc:	b580      	push	{r7, lr}
 802b7be:	b084      	sub	sp, #16
 802b7c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802b7c2:	4b33      	ldr	r3, [pc, #204]	; (802b890 <vTaskSwitchContext+0xd4>)
 802b7c4:	681b      	ldr	r3, [r3, #0]
 802b7c6:	2b00      	cmp	r3, #0
 802b7c8:	d003      	beq.n	802b7d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802b7ca:	4b32      	ldr	r3, [pc, #200]	; (802b894 <vTaskSwitchContext+0xd8>)
 802b7cc:	2201      	movs	r2, #1
 802b7ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802b7d0:	e059      	b.n	802b886 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 802b7d2:	4b30      	ldr	r3, [pc, #192]	; (802b894 <vTaskSwitchContext+0xd8>)
 802b7d4:	2200      	movs	r2, #0
 802b7d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b7d8:	4b2f      	ldr	r3, [pc, #188]	; (802b898 <vTaskSwitchContext+0xdc>)
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	60fb      	str	r3, [r7, #12]
 802b7de:	e010      	b.n	802b802 <vTaskSwitchContext+0x46>
 802b7e0:	68fb      	ldr	r3, [r7, #12]
 802b7e2:	2b00      	cmp	r3, #0
 802b7e4:	d10a      	bne.n	802b7fc <vTaskSwitchContext+0x40>
	__asm volatile
 802b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b7ea:	f383 8811 	msr	BASEPRI, r3
 802b7ee:	f3bf 8f6f 	isb	sy
 802b7f2:	f3bf 8f4f 	dsb	sy
 802b7f6:	607b      	str	r3, [r7, #4]
}
 802b7f8:	bf00      	nop
 802b7fa:	e7fe      	b.n	802b7fa <vTaskSwitchContext+0x3e>
 802b7fc:	68fb      	ldr	r3, [r7, #12]
 802b7fe:	3b01      	subs	r3, #1
 802b800:	60fb      	str	r3, [r7, #12]
 802b802:	4926      	ldr	r1, [pc, #152]	; (802b89c <vTaskSwitchContext+0xe0>)
 802b804:	68fa      	ldr	r2, [r7, #12]
 802b806:	4613      	mov	r3, r2
 802b808:	009b      	lsls	r3, r3, #2
 802b80a:	4413      	add	r3, r2
 802b80c:	009b      	lsls	r3, r3, #2
 802b80e:	440b      	add	r3, r1
 802b810:	681b      	ldr	r3, [r3, #0]
 802b812:	2b00      	cmp	r3, #0
 802b814:	d0e4      	beq.n	802b7e0 <vTaskSwitchContext+0x24>
 802b816:	68fa      	ldr	r2, [r7, #12]
 802b818:	4613      	mov	r3, r2
 802b81a:	009b      	lsls	r3, r3, #2
 802b81c:	4413      	add	r3, r2
 802b81e:	009b      	lsls	r3, r3, #2
 802b820:	4a1e      	ldr	r2, [pc, #120]	; (802b89c <vTaskSwitchContext+0xe0>)
 802b822:	4413      	add	r3, r2
 802b824:	60bb      	str	r3, [r7, #8]
 802b826:	68bb      	ldr	r3, [r7, #8]
 802b828:	685b      	ldr	r3, [r3, #4]
 802b82a:	685a      	ldr	r2, [r3, #4]
 802b82c:	68bb      	ldr	r3, [r7, #8]
 802b82e:	605a      	str	r2, [r3, #4]
 802b830:	68bb      	ldr	r3, [r7, #8]
 802b832:	685a      	ldr	r2, [r3, #4]
 802b834:	68bb      	ldr	r3, [r7, #8]
 802b836:	3308      	adds	r3, #8
 802b838:	429a      	cmp	r2, r3
 802b83a:	d104      	bne.n	802b846 <vTaskSwitchContext+0x8a>
 802b83c:	68bb      	ldr	r3, [r7, #8]
 802b83e:	685b      	ldr	r3, [r3, #4]
 802b840:	685a      	ldr	r2, [r3, #4]
 802b842:	68bb      	ldr	r3, [r7, #8]
 802b844:	605a      	str	r2, [r3, #4]
 802b846:	68bb      	ldr	r3, [r7, #8]
 802b848:	685b      	ldr	r3, [r3, #4]
 802b84a:	68db      	ldr	r3, [r3, #12]
 802b84c:	4a14      	ldr	r2, [pc, #80]	; (802b8a0 <vTaskSwitchContext+0xe4>)
 802b84e:	6013      	str	r3, [r2, #0]
 802b850:	4a11      	ldr	r2, [pc, #68]	; (802b898 <vTaskSwitchContext+0xdc>)
 802b852:	68fb      	ldr	r3, [r7, #12]
 802b854:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 802b856:	4b12      	ldr	r3, [pc, #72]	; (802b8a0 <vTaskSwitchContext+0xe4>)
 802b858:	681b      	ldr	r3, [r3, #0]
 802b85a:	3334      	adds	r3, #52	; 0x34
 802b85c:	2205      	movs	r2, #5
 802b85e:	4911      	ldr	r1, [pc, #68]	; (802b8a4 <vTaskSwitchContext+0xe8>)
 802b860:	4618      	mov	r0, r3
 802b862:	f002 fed9 	bl	802e618 <memcmp>
 802b866:	4603      	mov	r3, r0
 802b868:	2b00      	cmp	r3, #0
 802b86a:	d005      	beq.n	802b878 <vTaskSwitchContext+0xbc>
 802b86c:	4b0c      	ldr	r3, [pc, #48]	; (802b8a0 <vTaskSwitchContext+0xe4>)
 802b86e:	681b      	ldr	r3, [r3, #0]
 802b870:	4618      	mov	r0, r3
 802b872:	f002 fca7 	bl	802e1c4 <SEGGER_SYSVIEW_OnTaskStartExec>
 802b876:	e001      	b.n	802b87c <vTaskSwitchContext+0xc0>
 802b878:	f002 fc46 	bl	802e108 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802b87c:	4b08      	ldr	r3, [pc, #32]	; (802b8a0 <vTaskSwitchContext+0xe4>)
 802b87e:	681b      	ldr	r3, [r3, #0]
 802b880:	3364      	adds	r3, #100	; 0x64
 802b882:	4a09      	ldr	r2, [pc, #36]	; (802b8a8 <vTaskSwitchContext+0xec>)
 802b884:	6013      	str	r3, [r2, #0]
}
 802b886:	bf00      	nop
 802b888:	3710      	adds	r7, #16
 802b88a:	46bd      	mov	sp, r7
 802b88c:	bd80      	pop	{r7, pc}
 802b88e:	bf00      	nop
 802b890:	200025d8 	.word	0x200025d8
 802b894:	200025c4 	.word	0x200025c4
 802b898:	200025b8 	.word	0x200025b8
 802b89c:	200020e0 	.word	0x200020e0
 802b8a0:	200020dc 	.word	0x200020dc
 802b8a4:	0802f39c 	.word	0x0802f39c
 802b8a8:	20001444 	.word	0x20001444

0802b8ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802b8ac:	b580      	push	{r7, lr}
 802b8ae:	b084      	sub	sp, #16
 802b8b0:	af00      	add	r7, sp, #0
 802b8b2:	6078      	str	r0, [r7, #4]
 802b8b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802b8b6:	687b      	ldr	r3, [r7, #4]
 802b8b8:	2b00      	cmp	r3, #0
 802b8ba:	d10a      	bne.n	802b8d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b8c0:	f383 8811 	msr	BASEPRI, r3
 802b8c4:	f3bf 8f6f 	isb	sy
 802b8c8:	f3bf 8f4f 	dsb	sy
 802b8cc:	60fb      	str	r3, [r7, #12]
}
 802b8ce:	bf00      	nop
 802b8d0:	e7fe      	b.n	802b8d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802b8d2:	4b07      	ldr	r3, [pc, #28]	; (802b8f0 <vTaskPlaceOnEventList+0x44>)
 802b8d4:	681b      	ldr	r3, [r3, #0]
 802b8d6:	3318      	adds	r3, #24
 802b8d8:	4619      	mov	r1, r3
 802b8da:	6878      	ldr	r0, [r7, #4]
 802b8dc:	f7fe fbd7 	bl	802a08e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802b8e0:	2101      	movs	r1, #1
 802b8e2:	6838      	ldr	r0, [r7, #0]
 802b8e4:	f000 fac6 	bl	802be74 <prvAddCurrentTaskToDelayedList>
}
 802b8e8:	bf00      	nop
 802b8ea:	3710      	adds	r7, #16
 802b8ec:	46bd      	mov	sp, r7
 802b8ee:	bd80      	pop	{r7, pc}
 802b8f0:	200020dc 	.word	0x200020dc

0802b8f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802b8f4:	b580      	push	{r7, lr}
 802b8f6:	b086      	sub	sp, #24
 802b8f8:	af00      	add	r7, sp, #0
 802b8fa:	60f8      	str	r0, [r7, #12]
 802b8fc:	60b9      	str	r1, [r7, #8]
 802b8fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802b900:	68fb      	ldr	r3, [r7, #12]
 802b902:	2b00      	cmp	r3, #0
 802b904:	d10a      	bne.n	802b91c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b90a:	f383 8811 	msr	BASEPRI, r3
 802b90e:	f3bf 8f6f 	isb	sy
 802b912:	f3bf 8f4f 	dsb	sy
 802b916:	617b      	str	r3, [r7, #20]
}
 802b918:	bf00      	nop
 802b91a:	e7fe      	b.n	802b91a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802b91c:	4b0b      	ldr	r3, [pc, #44]	; (802b94c <vTaskPlaceOnEventListRestricted+0x58>)
 802b91e:	681b      	ldr	r3, [r3, #0]
 802b920:	3318      	adds	r3, #24
 802b922:	4619      	mov	r1, r3
 802b924:	68f8      	ldr	r0, [r7, #12]
 802b926:	f7fe fb8e 	bl	802a046 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d002      	beq.n	802b936 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 802b930:	f04f 33ff 	mov.w	r3, #4294967295
 802b934:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 802b936:	2024      	movs	r0, #36	; 0x24
 802b938:	f001 ff62 	bl	802d800 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802b93c:	6879      	ldr	r1, [r7, #4]
 802b93e:	68b8      	ldr	r0, [r7, #8]
 802b940:	f000 fa98 	bl	802be74 <prvAddCurrentTaskToDelayedList>
	}
 802b944:	bf00      	nop
 802b946:	3718      	adds	r7, #24
 802b948:	46bd      	mov	sp, r7
 802b94a:	bd80      	pop	{r7, pc}
 802b94c:	200020dc 	.word	0x200020dc

0802b950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802b950:	b580      	push	{r7, lr}
 802b952:	b086      	sub	sp, #24
 802b954:	af00      	add	r7, sp, #0
 802b956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b958:	687b      	ldr	r3, [r7, #4]
 802b95a:	68db      	ldr	r3, [r3, #12]
 802b95c:	68db      	ldr	r3, [r3, #12]
 802b95e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802b960:	693b      	ldr	r3, [r7, #16]
 802b962:	2b00      	cmp	r3, #0
 802b964:	d10a      	bne.n	802b97c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b96a:	f383 8811 	msr	BASEPRI, r3
 802b96e:	f3bf 8f6f 	isb	sy
 802b972:	f3bf 8f4f 	dsb	sy
 802b976:	60fb      	str	r3, [r7, #12]
}
 802b978:	bf00      	nop
 802b97a:	e7fe      	b.n	802b97a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802b97c:	693b      	ldr	r3, [r7, #16]
 802b97e:	3318      	adds	r3, #24
 802b980:	4618      	mov	r0, r3
 802b982:	f7fe fbbd 	bl	802a100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b986:	4b20      	ldr	r3, [pc, #128]	; (802ba08 <xTaskRemoveFromEventList+0xb8>)
 802b988:	681b      	ldr	r3, [r3, #0]
 802b98a:	2b00      	cmp	r3, #0
 802b98c:	d121      	bne.n	802b9d2 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802b98e:	693b      	ldr	r3, [r7, #16]
 802b990:	3304      	adds	r3, #4
 802b992:	4618      	mov	r0, r3
 802b994:	f7fe fbb4 	bl	802a100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802b998:	693b      	ldr	r3, [r7, #16]
 802b99a:	4618      	mov	r0, r3
 802b99c:	f002 fc54 	bl	802e248 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b9a0:	693b      	ldr	r3, [r7, #16]
 802b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b9a4:	4b19      	ldr	r3, [pc, #100]	; (802ba0c <xTaskRemoveFromEventList+0xbc>)
 802b9a6:	681b      	ldr	r3, [r3, #0]
 802b9a8:	429a      	cmp	r2, r3
 802b9aa:	d903      	bls.n	802b9b4 <xTaskRemoveFromEventList+0x64>
 802b9ac:	693b      	ldr	r3, [r7, #16]
 802b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b9b0:	4a16      	ldr	r2, [pc, #88]	; (802ba0c <xTaskRemoveFromEventList+0xbc>)
 802b9b2:	6013      	str	r3, [r2, #0]
 802b9b4:	693b      	ldr	r3, [r7, #16]
 802b9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b9b8:	4613      	mov	r3, r2
 802b9ba:	009b      	lsls	r3, r3, #2
 802b9bc:	4413      	add	r3, r2
 802b9be:	009b      	lsls	r3, r3, #2
 802b9c0:	4a13      	ldr	r2, [pc, #76]	; (802ba10 <xTaskRemoveFromEventList+0xc0>)
 802b9c2:	441a      	add	r2, r3
 802b9c4:	693b      	ldr	r3, [r7, #16]
 802b9c6:	3304      	adds	r3, #4
 802b9c8:	4619      	mov	r1, r3
 802b9ca:	4610      	mov	r0, r2
 802b9cc:	f7fe fb3b 	bl	802a046 <vListInsertEnd>
 802b9d0:	e005      	b.n	802b9de <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802b9d2:	693b      	ldr	r3, [r7, #16]
 802b9d4:	3318      	adds	r3, #24
 802b9d6:	4619      	mov	r1, r3
 802b9d8:	480e      	ldr	r0, [pc, #56]	; (802ba14 <xTaskRemoveFromEventList+0xc4>)
 802b9da:	f7fe fb34 	bl	802a046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802b9de:	693b      	ldr	r3, [r7, #16]
 802b9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b9e2:	4b0d      	ldr	r3, [pc, #52]	; (802ba18 <xTaskRemoveFromEventList+0xc8>)
 802b9e4:	681b      	ldr	r3, [r3, #0]
 802b9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b9e8:	429a      	cmp	r2, r3
 802b9ea:	d905      	bls.n	802b9f8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802b9ec:	2301      	movs	r3, #1
 802b9ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802b9f0:	4b0a      	ldr	r3, [pc, #40]	; (802ba1c <xTaskRemoveFromEventList+0xcc>)
 802b9f2:	2201      	movs	r2, #1
 802b9f4:	601a      	str	r2, [r3, #0]
 802b9f6:	e001      	b.n	802b9fc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 802b9f8:	2300      	movs	r3, #0
 802b9fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802b9fc:	697b      	ldr	r3, [r7, #20]
}
 802b9fe:	4618      	mov	r0, r3
 802ba00:	3718      	adds	r7, #24
 802ba02:	46bd      	mov	sp, r7
 802ba04:	bd80      	pop	{r7, pc}
 802ba06:	bf00      	nop
 802ba08:	200025d8 	.word	0x200025d8
 802ba0c:	200025b8 	.word	0x200025b8
 802ba10:	200020e0 	.word	0x200020e0
 802ba14:	20002570 	.word	0x20002570
 802ba18:	200020dc 	.word	0x200020dc
 802ba1c:	200025c4 	.word	0x200025c4

0802ba20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802ba20:	b480      	push	{r7}
 802ba22:	b083      	sub	sp, #12
 802ba24:	af00      	add	r7, sp, #0
 802ba26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802ba28:	4b06      	ldr	r3, [pc, #24]	; (802ba44 <vTaskInternalSetTimeOutState+0x24>)
 802ba2a:	681a      	ldr	r2, [r3, #0]
 802ba2c:	687b      	ldr	r3, [r7, #4]
 802ba2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802ba30:	4b05      	ldr	r3, [pc, #20]	; (802ba48 <vTaskInternalSetTimeOutState+0x28>)
 802ba32:	681a      	ldr	r2, [r3, #0]
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	605a      	str	r2, [r3, #4]
}
 802ba38:	bf00      	nop
 802ba3a:	370c      	adds	r7, #12
 802ba3c:	46bd      	mov	sp, r7
 802ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba42:	4770      	bx	lr
 802ba44:	200025c8 	.word	0x200025c8
 802ba48:	200025b4 	.word	0x200025b4

0802ba4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802ba4c:	b580      	push	{r7, lr}
 802ba4e:	b088      	sub	sp, #32
 802ba50:	af00      	add	r7, sp, #0
 802ba52:	6078      	str	r0, [r7, #4]
 802ba54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802ba56:	687b      	ldr	r3, [r7, #4]
 802ba58:	2b00      	cmp	r3, #0
 802ba5a:	d10a      	bne.n	802ba72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ba60:	f383 8811 	msr	BASEPRI, r3
 802ba64:	f3bf 8f6f 	isb	sy
 802ba68:	f3bf 8f4f 	dsb	sy
 802ba6c:	613b      	str	r3, [r7, #16]
}
 802ba6e:	bf00      	nop
 802ba70:	e7fe      	b.n	802ba70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802ba72:	683b      	ldr	r3, [r7, #0]
 802ba74:	2b00      	cmp	r3, #0
 802ba76:	d10a      	bne.n	802ba8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ba7c:	f383 8811 	msr	BASEPRI, r3
 802ba80:	f3bf 8f6f 	isb	sy
 802ba84:	f3bf 8f4f 	dsb	sy
 802ba88:	60fb      	str	r3, [r7, #12]
}
 802ba8a:	bf00      	nop
 802ba8c:	e7fe      	b.n	802ba8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802ba8e:	f000 fec1 	bl	802c814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802ba92:	4b1d      	ldr	r3, [pc, #116]	; (802bb08 <xTaskCheckForTimeOut+0xbc>)
 802ba94:	681b      	ldr	r3, [r3, #0]
 802ba96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	685b      	ldr	r3, [r3, #4]
 802ba9c:	69ba      	ldr	r2, [r7, #24]
 802ba9e:	1ad3      	subs	r3, r2, r3
 802baa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802baa2:	683b      	ldr	r3, [r7, #0]
 802baa4:	681b      	ldr	r3, [r3, #0]
 802baa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802baaa:	d102      	bne.n	802bab2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802baac:	2300      	movs	r3, #0
 802baae:	61fb      	str	r3, [r7, #28]
 802bab0:	e023      	b.n	802bafa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802bab2:	687b      	ldr	r3, [r7, #4]
 802bab4:	681a      	ldr	r2, [r3, #0]
 802bab6:	4b15      	ldr	r3, [pc, #84]	; (802bb0c <xTaskCheckForTimeOut+0xc0>)
 802bab8:	681b      	ldr	r3, [r3, #0]
 802baba:	429a      	cmp	r2, r3
 802babc:	d007      	beq.n	802bace <xTaskCheckForTimeOut+0x82>
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	685b      	ldr	r3, [r3, #4]
 802bac2:	69ba      	ldr	r2, [r7, #24]
 802bac4:	429a      	cmp	r2, r3
 802bac6:	d302      	bcc.n	802bace <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802bac8:	2301      	movs	r3, #1
 802baca:	61fb      	str	r3, [r7, #28]
 802bacc:	e015      	b.n	802bafa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802bace:	683b      	ldr	r3, [r7, #0]
 802bad0:	681b      	ldr	r3, [r3, #0]
 802bad2:	697a      	ldr	r2, [r7, #20]
 802bad4:	429a      	cmp	r2, r3
 802bad6:	d20b      	bcs.n	802baf0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802bad8:	683b      	ldr	r3, [r7, #0]
 802bada:	681a      	ldr	r2, [r3, #0]
 802badc:	697b      	ldr	r3, [r7, #20]
 802bade:	1ad2      	subs	r2, r2, r3
 802bae0:	683b      	ldr	r3, [r7, #0]
 802bae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802bae4:	6878      	ldr	r0, [r7, #4]
 802bae6:	f7ff ff9b 	bl	802ba20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802baea:	2300      	movs	r3, #0
 802baec:	61fb      	str	r3, [r7, #28]
 802baee:	e004      	b.n	802bafa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802baf0:	683b      	ldr	r3, [r7, #0]
 802baf2:	2200      	movs	r2, #0
 802baf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802baf6:	2301      	movs	r3, #1
 802baf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802bafa:	f000 febb 	bl	802c874 <vPortExitCritical>

	return xReturn;
 802bafe:	69fb      	ldr	r3, [r7, #28]
}
 802bb00:	4618      	mov	r0, r3
 802bb02:	3720      	adds	r7, #32
 802bb04:	46bd      	mov	sp, r7
 802bb06:	bd80      	pop	{r7, pc}
 802bb08:	200025b4 	.word	0x200025b4
 802bb0c:	200025c8 	.word	0x200025c8

0802bb10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802bb10:	b480      	push	{r7}
 802bb12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802bb14:	4b03      	ldr	r3, [pc, #12]	; (802bb24 <vTaskMissedYield+0x14>)
 802bb16:	2201      	movs	r2, #1
 802bb18:	601a      	str	r2, [r3, #0]
}
 802bb1a:	bf00      	nop
 802bb1c:	46bd      	mov	sp, r7
 802bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb22:	4770      	bx	lr
 802bb24:	200025c4 	.word	0x200025c4

0802bb28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802bb28:	b580      	push	{r7, lr}
 802bb2a:	b082      	sub	sp, #8
 802bb2c:	af00      	add	r7, sp, #0
 802bb2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802bb30:	f000 f852 	bl	802bbd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802bb34:	4b06      	ldr	r3, [pc, #24]	; (802bb50 <prvIdleTask+0x28>)
 802bb36:	681b      	ldr	r3, [r3, #0]
 802bb38:	2b01      	cmp	r3, #1
 802bb3a:	d9f9      	bls.n	802bb30 <prvIdleTask+0x8>
			{
				taskYIELD();
 802bb3c:	4b05      	ldr	r3, [pc, #20]	; (802bb54 <prvIdleTask+0x2c>)
 802bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802bb42:	601a      	str	r2, [r3, #0]
 802bb44:	f3bf 8f4f 	dsb	sy
 802bb48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802bb4c:	e7f0      	b.n	802bb30 <prvIdleTask+0x8>
 802bb4e:	bf00      	nop
 802bb50:	200020e0 	.word	0x200020e0
 802bb54:	e000ed04 	.word	0xe000ed04

0802bb58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802bb58:	b580      	push	{r7, lr}
 802bb5a:	b082      	sub	sp, #8
 802bb5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802bb5e:	2300      	movs	r3, #0
 802bb60:	607b      	str	r3, [r7, #4]
 802bb62:	e00c      	b.n	802bb7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802bb64:	687a      	ldr	r2, [r7, #4]
 802bb66:	4613      	mov	r3, r2
 802bb68:	009b      	lsls	r3, r3, #2
 802bb6a:	4413      	add	r3, r2
 802bb6c:	009b      	lsls	r3, r3, #2
 802bb6e:	4a12      	ldr	r2, [pc, #72]	; (802bbb8 <prvInitialiseTaskLists+0x60>)
 802bb70:	4413      	add	r3, r2
 802bb72:	4618      	mov	r0, r3
 802bb74:	f7fe fa3a 	bl	8029fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802bb78:	687b      	ldr	r3, [r7, #4]
 802bb7a:	3301      	adds	r3, #1
 802bb7c:	607b      	str	r3, [r7, #4]
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	2b37      	cmp	r3, #55	; 0x37
 802bb82:	d9ef      	bls.n	802bb64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802bb84:	480d      	ldr	r0, [pc, #52]	; (802bbbc <prvInitialiseTaskLists+0x64>)
 802bb86:	f7fe fa31 	bl	8029fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802bb8a:	480d      	ldr	r0, [pc, #52]	; (802bbc0 <prvInitialiseTaskLists+0x68>)
 802bb8c:	f7fe fa2e 	bl	8029fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802bb90:	480c      	ldr	r0, [pc, #48]	; (802bbc4 <prvInitialiseTaskLists+0x6c>)
 802bb92:	f7fe fa2b 	bl	8029fec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802bb96:	480c      	ldr	r0, [pc, #48]	; (802bbc8 <prvInitialiseTaskLists+0x70>)
 802bb98:	f7fe fa28 	bl	8029fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802bb9c:	480b      	ldr	r0, [pc, #44]	; (802bbcc <prvInitialiseTaskLists+0x74>)
 802bb9e:	f7fe fa25 	bl	8029fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802bba2:	4b0b      	ldr	r3, [pc, #44]	; (802bbd0 <prvInitialiseTaskLists+0x78>)
 802bba4:	4a05      	ldr	r2, [pc, #20]	; (802bbbc <prvInitialiseTaskLists+0x64>)
 802bba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802bba8:	4b0a      	ldr	r3, [pc, #40]	; (802bbd4 <prvInitialiseTaskLists+0x7c>)
 802bbaa:	4a05      	ldr	r2, [pc, #20]	; (802bbc0 <prvInitialiseTaskLists+0x68>)
 802bbac:	601a      	str	r2, [r3, #0]
}
 802bbae:	bf00      	nop
 802bbb0:	3708      	adds	r7, #8
 802bbb2:	46bd      	mov	sp, r7
 802bbb4:	bd80      	pop	{r7, pc}
 802bbb6:	bf00      	nop
 802bbb8:	200020e0 	.word	0x200020e0
 802bbbc:	20002540 	.word	0x20002540
 802bbc0:	20002554 	.word	0x20002554
 802bbc4:	20002570 	.word	0x20002570
 802bbc8:	20002584 	.word	0x20002584
 802bbcc:	2000259c 	.word	0x2000259c
 802bbd0:	20002568 	.word	0x20002568
 802bbd4:	2000256c 	.word	0x2000256c

0802bbd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802bbd8:	b580      	push	{r7, lr}
 802bbda:	b082      	sub	sp, #8
 802bbdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802bbde:	e019      	b.n	802bc14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802bbe0:	f000 fe18 	bl	802c814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bbe4:	4b10      	ldr	r3, [pc, #64]	; (802bc28 <prvCheckTasksWaitingTermination+0x50>)
 802bbe6:	68db      	ldr	r3, [r3, #12]
 802bbe8:	68db      	ldr	r3, [r3, #12]
 802bbea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	3304      	adds	r3, #4
 802bbf0:	4618      	mov	r0, r3
 802bbf2:	f7fe fa85 	bl	802a100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802bbf6:	4b0d      	ldr	r3, [pc, #52]	; (802bc2c <prvCheckTasksWaitingTermination+0x54>)
 802bbf8:	681b      	ldr	r3, [r3, #0]
 802bbfa:	3b01      	subs	r3, #1
 802bbfc:	4a0b      	ldr	r2, [pc, #44]	; (802bc2c <prvCheckTasksWaitingTermination+0x54>)
 802bbfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802bc00:	4b0b      	ldr	r3, [pc, #44]	; (802bc30 <prvCheckTasksWaitingTermination+0x58>)
 802bc02:	681b      	ldr	r3, [r3, #0]
 802bc04:	3b01      	subs	r3, #1
 802bc06:	4a0a      	ldr	r2, [pc, #40]	; (802bc30 <prvCheckTasksWaitingTermination+0x58>)
 802bc08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802bc0a:	f000 fe33 	bl	802c874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802bc0e:	6878      	ldr	r0, [r7, #4]
 802bc10:	f000 f848 	bl	802bca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802bc14:	4b06      	ldr	r3, [pc, #24]	; (802bc30 <prvCheckTasksWaitingTermination+0x58>)
 802bc16:	681b      	ldr	r3, [r3, #0]
 802bc18:	2b00      	cmp	r3, #0
 802bc1a:	d1e1      	bne.n	802bbe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802bc1c:	bf00      	nop
 802bc1e:	bf00      	nop
 802bc20:	3708      	adds	r7, #8
 802bc22:	46bd      	mov	sp, r7
 802bc24:	bd80      	pop	{r7, pc}
 802bc26:	bf00      	nop
 802bc28:	20002584 	.word	0x20002584
 802bc2c:	200025b0 	.word	0x200025b0
 802bc30:	20002598 	.word	0x20002598

0802bc34 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802bc34:	b480      	push	{r7}
 802bc36:	b085      	sub	sp, #20
 802bc38:	af00      	add	r7, sp, #0
 802bc3a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 802bc3c:	2300      	movs	r3, #0
 802bc3e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bc40:	e005      	b.n	802bc4e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	3301      	adds	r3, #1
 802bc46:	607b      	str	r3, [r7, #4]
			ulCount++;
 802bc48:	68fb      	ldr	r3, [r7, #12]
 802bc4a:	3301      	adds	r3, #1
 802bc4c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bc4e:	687b      	ldr	r3, [r7, #4]
 802bc50:	781b      	ldrb	r3, [r3, #0]
 802bc52:	2ba5      	cmp	r3, #165	; 0xa5
 802bc54:	d0f5      	beq.n	802bc42 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802bc56:	68fb      	ldr	r3, [r7, #12]
 802bc58:	089b      	lsrs	r3, r3, #2
 802bc5a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 802bc5c:	68fb      	ldr	r3, [r7, #12]
 802bc5e:	b29b      	uxth	r3, r3
	}
 802bc60:	4618      	mov	r0, r3
 802bc62:	3714      	adds	r7, #20
 802bc64:	46bd      	mov	sp, r7
 802bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc6a:	4770      	bx	lr

0802bc6c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 802bc6c:	b580      	push	{r7, lr}
 802bc6e:	b086      	sub	sp, #24
 802bc70:	af00      	add	r7, sp, #0
 802bc72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 802bc74:	687b      	ldr	r3, [r7, #4]
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	d102      	bne.n	802bc80 <uxTaskGetStackHighWaterMark+0x14>
 802bc7a:	4b09      	ldr	r3, [pc, #36]	; (802bca0 <uxTaskGetStackHighWaterMark+0x34>)
 802bc7c:	681b      	ldr	r3, [r3, #0]
 802bc7e:	e000      	b.n	802bc82 <uxTaskGetStackHighWaterMark+0x16>
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 802bc84:	697b      	ldr	r3, [r7, #20]
 802bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc88:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802bc8a:	6938      	ldr	r0, [r7, #16]
 802bc8c:	f7ff ffd2 	bl	802bc34 <prvTaskCheckFreeStackSpace>
 802bc90:	4603      	mov	r3, r0
 802bc92:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 802bc94:	68fb      	ldr	r3, [r7, #12]
	}
 802bc96:	4618      	mov	r0, r3
 802bc98:	3718      	adds	r7, #24
 802bc9a:	46bd      	mov	sp, r7
 802bc9c:	bd80      	pop	{r7, pc}
 802bc9e:	bf00      	nop
 802bca0:	200020dc 	.word	0x200020dc

0802bca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802bca4:	b580      	push	{r7, lr}
 802bca6:	b084      	sub	sp, #16
 802bca8:	af00      	add	r7, sp, #0
 802bcaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 802bcac:	687b      	ldr	r3, [r7, #4]
 802bcae:	3364      	adds	r3, #100	; 0x64
 802bcb0:	4618      	mov	r0, r3
 802bcb2:	f002 fce3 	bl	802e67c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802bcb6:	687b      	ldr	r3, [r7, #4]
 802bcb8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bcbc:	2b00      	cmp	r3, #0
 802bcbe:	d108      	bne.n	802bcd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802bcc0:	687b      	ldr	r3, [r7, #4]
 802bcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bcc4:	4618      	mov	r0, r3
 802bcc6:	f000 ff93 	bl	802cbf0 <vPortFree>
				vPortFree( pxTCB );
 802bcca:	6878      	ldr	r0, [r7, #4]
 802bccc:	f000 ff90 	bl	802cbf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802bcd0:	e018      	b.n	802bd04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802bcd2:	687b      	ldr	r3, [r7, #4]
 802bcd4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bcd8:	2b01      	cmp	r3, #1
 802bcda:	d103      	bne.n	802bce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 802bcdc:	6878      	ldr	r0, [r7, #4]
 802bcde:	f000 ff87 	bl	802cbf0 <vPortFree>
	}
 802bce2:	e00f      	b.n	802bd04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802bce4:	687b      	ldr	r3, [r7, #4]
 802bce6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bcea:	2b02      	cmp	r3, #2
 802bcec:	d00a      	beq.n	802bd04 <prvDeleteTCB+0x60>
	__asm volatile
 802bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bcf2:	f383 8811 	msr	BASEPRI, r3
 802bcf6:	f3bf 8f6f 	isb	sy
 802bcfa:	f3bf 8f4f 	dsb	sy
 802bcfe:	60fb      	str	r3, [r7, #12]
}
 802bd00:	bf00      	nop
 802bd02:	e7fe      	b.n	802bd02 <prvDeleteTCB+0x5e>
	}
 802bd04:	bf00      	nop
 802bd06:	3710      	adds	r7, #16
 802bd08:	46bd      	mov	sp, r7
 802bd0a:	bd80      	pop	{r7, pc}

0802bd0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802bd0c:	b480      	push	{r7}
 802bd0e:	b083      	sub	sp, #12
 802bd10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802bd12:	4b0c      	ldr	r3, [pc, #48]	; (802bd44 <prvResetNextTaskUnblockTime+0x38>)
 802bd14:	681b      	ldr	r3, [r3, #0]
 802bd16:	681b      	ldr	r3, [r3, #0]
 802bd18:	2b00      	cmp	r3, #0
 802bd1a:	d104      	bne.n	802bd26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802bd1c:	4b0a      	ldr	r3, [pc, #40]	; (802bd48 <prvResetNextTaskUnblockTime+0x3c>)
 802bd1e:	f04f 32ff 	mov.w	r2, #4294967295
 802bd22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 802bd24:	e008      	b.n	802bd38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bd26:	4b07      	ldr	r3, [pc, #28]	; (802bd44 <prvResetNextTaskUnblockTime+0x38>)
 802bd28:	681b      	ldr	r3, [r3, #0]
 802bd2a:	68db      	ldr	r3, [r3, #12]
 802bd2c:	68db      	ldr	r3, [r3, #12]
 802bd2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802bd30:	687b      	ldr	r3, [r7, #4]
 802bd32:	685b      	ldr	r3, [r3, #4]
 802bd34:	4a04      	ldr	r2, [pc, #16]	; (802bd48 <prvResetNextTaskUnblockTime+0x3c>)
 802bd36:	6013      	str	r3, [r2, #0]
}
 802bd38:	bf00      	nop
 802bd3a:	370c      	adds	r7, #12
 802bd3c:	46bd      	mov	sp, r7
 802bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd42:	4770      	bx	lr
 802bd44:	20002568 	.word	0x20002568
 802bd48:	200025d0 	.word	0x200025d0

0802bd4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802bd4c:	b480      	push	{r7}
 802bd4e:	b083      	sub	sp, #12
 802bd50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802bd52:	4b0b      	ldr	r3, [pc, #44]	; (802bd80 <xTaskGetSchedulerState+0x34>)
 802bd54:	681b      	ldr	r3, [r3, #0]
 802bd56:	2b00      	cmp	r3, #0
 802bd58:	d102      	bne.n	802bd60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802bd5a:	2301      	movs	r3, #1
 802bd5c:	607b      	str	r3, [r7, #4]
 802bd5e:	e008      	b.n	802bd72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802bd60:	4b08      	ldr	r3, [pc, #32]	; (802bd84 <xTaskGetSchedulerState+0x38>)
 802bd62:	681b      	ldr	r3, [r3, #0]
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	d102      	bne.n	802bd6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802bd68:	2302      	movs	r3, #2
 802bd6a:	607b      	str	r3, [r7, #4]
 802bd6c:	e001      	b.n	802bd72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802bd6e:	2300      	movs	r3, #0
 802bd70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802bd72:	687b      	ldr	r3, [r7, #4]
	}
 802bd74:	4618      	mov	r0, r3
 802bd76:	370c      	adds	r7, #12
 802bd78:	46bd      	mov	sp, r7
 802bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd7e:	4770      	bx	lr
 802bd80:	200025bc 	.word	0x200025bc
 802bd84:	200025d8 	.word	0x200025d8

0802bd88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802bd88:	b580      	push	{r7, lr}
 802bd8a:	b086      	sub	sp, #24
 802bd8c:	af00      	add	r7, sp, #0
 802bd8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802bd90:	687b      	ldr	r3, [r7, #4]
 802bd92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802bd94:	2300      	movs	r3, #0
 802bd96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802bd98:	687b      	ldr	r3, [r7, #4]
 802bd9a:	2b00      	cmp	r3, #0
 802bd9c:	d05f      	beq.n	802be5e <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802bd9e:	4b32      	ldr	r3, [pc, #200]	; (802be68 <xTaskPriorityDisinherit+0xe0>)
 802bda0:	681b      	ldr	r3, [r3, #0]
 802bda2:	693a      	ldr	r2, [r7, #16]
 802bda4:	429a      	cmp	r2, r3
 802bda6:	d00a      	beq.n	802bdbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bdac:	f383 8811 	msr	BASEPRI, r3
 802bdb0:	f3bf 8f6f 	isb	sy
 802bdb4:	f3bf 8f4f 	dsb	sy
 802bdb8:	60fb      	str	r3, [r7, #12]
}
 802bdba:	bf00      	nop
 802bdbc:	e7fe      	b.n	802bdbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802bdbe:	693b      	ldr	r3, [r7, #16]
 802bdc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bdc2:	2b00      	cmp	r3, #0
 802bdc4:	d10a      	bne.n	802bddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bdca:	f383 8811 	msr	BASEPRI, r3
 802bdce:	f3bf 8f6f 	isb	sy
 802bdd2:	f3bf 8f4f 	dsb	sy
 802bdd6:	60bb      	str	r3, [r7, #8]
}
 802bdd8:	bf00      	nop
 802bdda:	e7fe      	b.n	802bdda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 802bddc:	693b      	ldr	r3, [r7, #16]
 802bdde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bde0:	1e5a      	subs	r2, r3, #1
 802bde2:	693b      	ldr	r3, [r7, #16]
 802bde4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802bde6:	693b      	ldr	r3, [r7, #16]
 802bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bdea:	693b      	ldr	r3, [r7, #16]
 802bdec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802bdee:	429a      	cmp	r2, r3
 802bdf0:	d035      	beq.n	802be5e <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802bdf2:	693b      	ldr	r3, [r7, #16]
 802bdf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d131      	bne.n	802be5e <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802bdfa:	693b      	ldr	r3, [r7, #16]
 802bdfc:	3304      	adds	r3, #4
 802bdfe:	4618      	mov	r0, r3
 802be00:	f7fe f97e 	bl	802a100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 802be04:	687b      	ldr	r3, [r7, #4]
 802be06:	4619      	mov	r1, r3
 802be08:	204a      	movs	r0, #74	; 0x4a
 802be0a:	f001 fd17 	bl	802d83c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802be0e:	693b      	ldr	r3, [r7, #16]
 802be10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802be12:	693b      	ldr	r3, [r7, #16]
 802be14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802be16:	693b      	ldr	r3, [r7, #16]
 802be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802be1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802be1e:	693b      	ldr	r3, [r7, #16]
 802be20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802be22:	693b      	ldr	r3, [r7, #16]
 802be24:	4618      	mov	r0, r3
 802be26:	f002 fa0f 	bl	802e248 <SEGGER_SYSVIEW_OnTaskStartReady>
 802be2a:	693b      	ldr	r3, [r7, #16]
 802be2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802be2e:	4b0f      	ldr	r3, [pc, #60]	; (802be6c <xTaskPriorityDisinherit+0xe4>)
 802be30:	681b      	ldr	r3, [r3, #0]
 802be32:	429a      	cmp	r2, r3
 802be34:	d903      	bls.n	802be3e <xTaskPriorityDisinherit+0xb6>
 802be36:	693b      	ldr	r3, [r7, #16]
 802be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802be3a:	4a0c      	ldr	r2, [pc, #48]	; (802be6c <xTaskPriorityDisinherit+0xe4>)
 802be3c:	6013      	str	r3, [r2, #0]
 802be3e:	693b      	ldr	r3, [r7, #16]
 802be40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802be42:	4613      	mov	r3, r2
 802be44:	009b      	lsls	r3, r3, #2
 802be46:	4413      	add	r3, r2
 802be48:	009b      	lsls	r3, r3, #2
 802be4a:	4a09      	ldr	r2, [pc, #36]	; (802be70 <xTaskPriorityDisinherit+0xe8>)
 802be4c:	441a      	add	r2, r3
 802be4e:	693b      	ldr	r3, [r7, #16]
 802be50:	3304      	adds	r3, #4
 802be52:	4619      	mov	r1, r3
 802be54:	4610      	mov	r0, r2
 802be56:	f7fe f8f6 	bl	802a046 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802be5a:	2301      	movs	r3, #1
 802be5c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802be5e:	697b      	ldr	r3, [r7, #20]
	}
 802be60:	4618      	mov	r0, r3
 802be62:	3718      	adds	r7, #24
 802be64:	46bd      	mov	sp, r7
 802be66:	bd80      	pop	{r7, pc}
 802be68:	200020dc 	.word	0x200020dc
 802be6c:	200025b8 	.word	0x200025b8
 802be70:	200020e0 	.word	0x200020e0

0802be74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802be74:	b580      	push	{r7, lr}
 802be76:	b084      	sub	sp, #16
 802be78:	af00      	add	r7, sp, #0
 802be7a:	6078      	str	r0, [r7, #4]
 802be7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802be7e:	4b21      	ldr	r3, [pc, #132]	; (802bf04 <prvAddCurrentTaskToDelayedList+0x90>)
 802be80:	681b      	ldr	r3, [r3, #0]
 802be82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802be84:	4b20      	ldr	r3, [pc, #128]	; (802bf08 <prvAddCurrentTaskToDelayedList+0x94>)
 802be86:	681b      	ldr	r3, [r3, #0]
 802be88:	3304      	adds	r3, #4
 802be8a:	4618      	mov	r0, r3
 802be8c:	f7fe f938 	bl	802a100 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802be90:	687b      	ldr	r3, [r7, #4]
 802be92:	f1b3 3fff 	cmp.w	r3, #4294967295
 802be96:	d10a      	bne.n	802beae <prvAddCurrentTaskToDelayedList+0x3a>
 802be98:	683b      	ldr	r3, [r7, #0]
 802be9a:	2b00      	cmp	r3, #0
 802be9c:	d007      	beq.n	802beae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802be9e:	4b1a      	ldr	r3, [pc, #104]	; (802bf08 <prvAddCurrentTaskToDelayedList+0x94>)
 802bea0:	681b      	ldr	r3, [r3, #0]
 802bea2:	3304      	adds	r3, #4
 802bea4:	4619      	mov	r1, r3
 802bea6:	4819      	ldr	r0, [pc, #100]	; (802bf0c <prvAddCurrentTaskToDelayedList+0x98>)
 802bea8:	f7fe f8cd 	bl	802a046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802beac:	e026      	b.n	802befc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802beae:	68fa      	ldr	r2, [r7, #12]
 802beb0:	687b      	ldr	r3, [r7, #4]
 802beb2:	4413      	add	r3, r2
 802beb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802beb6:	4b14      	ldr	r3, [pc, #80]	; (802bf08 <prvAddCurrentTaskToDelayedList+0x94>)
 802beb8:	681b      	ldr	r3, [r3, #0]
 802beba:	68ba      	ldr	r2, [r7, #8]
 802bebc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802bebe:	68ba      	ldr	r2, [r7, #8]
 802bec0:	68fb      	ldr	r3, [r7, #12]
 802bec2:	429a      	cmp	r2, r3
 802bec4:	d209      	bcs.n	802beda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802bec6:	4b12      	ldr	r3, [pc, #72]	; (802bf10 <prvAddCurrentTaskToDelayedList+0x9c>)
 802bec8:	681a      	ldr	r2, [r3, #0]
 802beca:	4b0f      	ldr	r3, [pc, #60]	; (802bf08 <prvAddCurrentTaskToDelayedList+0x94>)
 802becc:	681b      	ldr	r3, [r3, #0]
 802bece:	3304      	adds	r3, #4
 802bed0:	4619      	mov	r1, r3
 802bed2:	4610      	mov	r0, r2
 802bed4:	f7fe f8db 	bl	802a08e <vListInsert>
}
 802bed8:	e010      	b.n	802befc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802beda:	4b0e      	ldr	r3, [pc, #56]	; (802bf14 <prvAddCurrentTaskToDelayedList+0xa0>)
 802bedc:	681a      	ldr	r2, [r3, #0]
 802bede:	4b0a      	ldr	r3, [pc, #40]	; (802bf08 <prvAddCurrentTaskToDelayedList+0x94>)
 802bee0:	681b      	ldr	r3, [r3, #0]
 802bee2:	3304      	adds	r3, #4
 802bee4:	4619      	mov	r1, r3
 802bee6:	4610      	mov	r0, r2
 802bee8:	f7fe f8d1 	bl	802a08e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802beec:	4b0a      	ldr	r3, [pc, #40]	; (802bf18 <prvAddCurrentTaskToDelayedList+0xa4>)
 802beee:	681b      	ldr	r3, [r3, #0]
 802bef0:	68ba      	ldr	r2, [r7, #8]
 802bef2:	429a      	cmp	r2, r3
 802bef4:	d202      	bcs.n	802befc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802bef6:	4a08      	ldr	r2, [pc, #32]	; (802bf18 <prvAddCurrentTaskToDelayedList+0xa4>)
 802bef8:	68bb      	ldr	r3, [r7, #8]
 802befa:	6013      	str	r3, [r2, #0]
}
 802befc:	bf00      	nop
 802befe:	3710      	adds	r7, #16
 802bf00:	46bd      	mov	sp, r7
 802bf02:	bd80      	pop	{r7, pc}
 802bf04:	200025b4 	.word	0x200025b4
 802bf08:	200020dc 	.word	0x200020dc
 802bf0c:	2000259c 	.word	0x2000259c
 802bf10:	2000256c 	.word	0x2000256c
 802bf14:	20002568 	.word	0x20002568
 802bf18:	200025d0 	.word	0x200025d0

0802bf1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802bf1c:	b580      	push	{r7, lr}
 802bf1e:	b08a      	sub	sp, #40	; 0x28
 802bf20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802bf22:	2300      	movs	r3, #0
 802bf24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802bf26:	f000 fb07 	bl	802c538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802bf2a:	4b1c      	ldr	r3, [pc, #112]	; (802bf9c <xTimerCreateTimerTask+0x80>)
 802bf2c:	681b      	ldr	r3, [r3, #0]
 802bf2e:	2b00      	cmp	r3, #0
 802bf30:	d021      	beq.n	802bf76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802bf32:	2300      	movs	r3, #0
 802bf34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802bf36:	2300      	movs	r3, #0
 802bf38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802bf3a:	1d3a      	adds	r2, r7, #4
 802bf3c:	f107 0108 	add.w	r1, r7, #8
 802bf40:	f107 030c 	add.w	r3, r7, #12
 802bf44:	4618      	mov	r0, r3
 802bf46:	f7fe f837 	bl	8029fb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802bf4a:	6879      	ldr	r1, [r7, #4]
 802bf4c:	68bb      	ldr	r3, [r7, #8]
 802bf4e:	68fa      	ldr	r2, [r7, #12]
 802bf50:	9202      	str	r2, [sp, #8]
 802bf52:	9301      	str	r3, [sp, #4]
 802bf54:	2302      	movs	r3, #2
 802bf56:	9300      	str	r3, [sp, #0]
 802bf58:	2300      	movs	r3, #0
 802bf5a:	460a      	mov	r2, r1
 802bf5c:	4910      	ldr	r1, [pc, #64]	; (802bfa0 <xTimerCreateTimerTask+0x84>)
 802bf5e:	4811      	ldr	r0, [pc, #68]	; (802bfa4 <xTimerCreateTimerTask+0x88>)
 802bf60:	f7fe ff8c 	bl	802ae7c <xTaskCreateStatic>
 802bf64:	4603      	mov	r3, r0
 802bf66:	4a10      	ldr	r2, [pc, #64]	; (802bfa8 <xTimerCreateTimerTask+0x8c>)
 802bf68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802bf6a:	4b0f      	ldr	r3, [pc, #60]	; (802bfa8 <xTimerCreateTimerTask+0x8c>)
 802bf6c:	681b      	ldr	r3, [r3, #0]
 802bf6e:	2b00      	cmp	r3, #0
 802bf70:	d001      	beq.n	802bf76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802bf72:	2301      	movs	r3, #1
 802bf74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802bf76:	697b      	ldr	r3, [r7, #20]
 802bf78:	2b00      	cmp	r3, #0
 802bf7a:	d10a      	bne.n	802bf92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 802bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bf80:	f383 8811 	msr	BASEPRI, r3
 802bf84:	f3bf 8f6f 	isb	sy
 802bf88:	f3bf 8f4f 	dsb	sy
 802bf8c:	613b      	str	r3, [r7, #16]
}
 802bf8e:	bf00      	nop
 802bf90:	e7fe      	b.n	802bf90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 802bf92:	697b      	ldr	r3, [r7, #20]
}
 802bf94:	4618      	mov	r0, r3
 802bf96:	3718      	adds	r7, #24
 802bf98:	46bd      	mov	sp, r7
 802bf9a:	bd80      	pop	{r7, pc}
 802bf9c:	2000260c 	.word	0x2000260c
 802bfa0:	0802f3a4 	.word	0x0802f3a4
 802bfa4:	0802c0e1 	.word	0x0802c0e1
 802bfa8:	20002610 	.word	0x20002610

0802bfac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802bfac:	b580      	push	{r7, lr}
 802bfae:	b08a      	sub	sp, #40	; 0x28
 802bfb0:	af00      	add	r7, sp, #0
 802bfb2:	60f8      	str	r0, [r7, #12]
 802bfb4:	60b9      	str	r1, [r7, #8]
 802bfb6:	607a      	str	r2, [r7, #4]
 802bfb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802bfba:	2300      	movs	r3, #0
 802bfbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802bfbe:	68fb      	ldr	r3, [r7, #12]
 802bfc0:	2b00      	cmp	r3, #0
 802bfc2:	d10a      	bne.n	802bfda <xTimerGenericCommand+0x2e>
	__asm volatile
 802bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bfc8:	f383 8811 	msr	BASEPRI, r3
 802bfcc:	f3bf 8f6f 	isb	sy
 802bfd0:	f3bf 8f4f 	dsb	sy
 802bfd4:	623b      	str	r3, [r7, #32]
}
 802bfd6:	bf00      	nop
 802bfd8:	e7fe      	b.n	802bfd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802bfda:	4b1a      	ldr	r3, [pc, #104]	; (802c044 <xTimerGenericCommand+0x98>)
 802bfdc:	681b      	ldr	r3, [r3, #0]
 802bfde:	2b00      	cmp	r3, #0
 802bfe0:	d02a      	beq.n	802c038 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802bfe2:	68bb      	ldr	r3, [r7, #8]
 802bfe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802bfea:	68fb      	ldr	r3, [r7, #12]
 802bfec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802bfee:	68bb      	ldr	r3, [r7, #8]
 802bff0:	2b05      	cmp	r3, #5
 802bff2:	dc18      	bgt.n	802c026 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802bff4:	f7ff feaa 	bl	802bd4c <xTaskGetSchedulerState>
 802bff8:	4603      	mov	r3, r0
 802bffa:	2b02      	cmp	r3, #2
 802bffc:	d109      	bne.n	802c012 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802bffe:	4b11      	ldr	r3, [pc, #68]	; (802c044 <xTimerGenericCommand+0x98>)
 802c000:	6818      	ldr	r0, [r3, #0]
 802c002:	f107 0110 	add.w	r1, r7, #16
 802c006:	2300      	movs	r3, #0
 802c008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c00a:	f7fe f9e7 	bl	802a3dc <xQueueGenericSend>
 802c00e:	6278      	str	r0, [r7, #36]	; 0x24
 802c010:	e012      	b.n	802c038 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802c012:	4b0c      	ldr	r3, [pc, #48]	; (802c044 <xTimerGenericCommand+0x98>)
 802c014:	6818      	ldr	r0, [r3, #0]
 802c016:	f107 0110 	add.w	r1, r7, #16
 802c01a:	2300      	movs	r3, #0
 802c01c:	2200      	movs	r2, #0
 802c01e:	f7fe f9dd 	bl	802a3dc <xQueueGenericSend>
 802c022:	6278      	str	r0, [r7, #36]	; 0x24
 802c024:	e008      	b.n	802c038 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802c026:	4b07      	ldr	r3, [pc, #28]	; (802c044 <xTimerGenericCommand+0x98>)
 802c028:	6818      	ldr	r0, [r3, #0]
 802c02a:	f107 0110 	add.w	r1, r7, #16
 802c02e:	2300      	movs	r3, #0
 802c030:	683a      	ldr	r2, [r7, #0]
 802c032:	f7fe faf9 	bl	802a628 <xQueueGenericSendFromISR>
 802c036:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802c03a:	4618      	mov	r0, r3
 802c03c:	3728      	adds	r7, #40	; 0x28
 802c03e:	46bd      	mov	sp, r7
 802c040:	bd80      	pop	{r7, pc}
 802c042:	bf00      	nop
 802c044:	2000260c 	.word	0x2000260c

0802c048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802c048:	b580      	push	{r7, lr}
 802c04a:	b088      	sub	sp, #32
 802c04c:	af02      	add	r7, sp, #8
 802c04e:	6078      	str	r0, [r7, #4]
 802c050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c052:	4b22      	ldr	r3, [pc, #136]	; (802c0dc <prvProcessExpiredTimer+0x94>)
 802c054:	681b      	ldr	r3, [r3, #0]
 802c056:	68db      	ldr	r3, [r3, #12]
 802c058:	68db      	ldr	r3, [r3, #12]
 802c05a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c05c:	697b      	ldr	r3, [r7, #20]
 802c05e:	3304      	adds	r3, #4
 802c060:	4618      	mov	r0, r3
 802c062:	f7fe f84d 	bl	802a100 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c066:	697b      	ldr	r3, [r7, #20]
 802c068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c06c:	f003 0304 	and.w	r3, r3, #4
 802c070:	2b00      	cmp	r3, #0
 802c072:	d022      	beq.n	802c0ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802c074:	697b      	ldr	r3, [r7, #20]
 802c076:	699a      	ldr	r2, [r3, #24]
 802c078:	687b      	ldr	r3, [r7, #4]
 802c07a:	18d1      	adds	r1, r2, r3
 802c07c:	687b      	ldr	r3, [r7, #4]
 802c07e:	683a      	ldr	r2, [r7, #0]
 802c080:	6978      	ldr	r0, [r7, #20]
 802c082:	f000 f8d1 	bl	802c228 <prvInsertTimerInActiveList>
 802c086:	4603      	mov	r3, r0
 802c088:	2b00      	cmp	r3, #0
 802c08a:	d01f      	beq.n	802c0cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c08c:	2300      	movs	r3, #0
 802c08e:	9300      	str	r3, [sp, #0]
 802c090:	2300      	movs	r3, #0
 802c092:	687a      	ldr	r2, [r7, #4]
 802c094:	2100      	movs	r1, #0
 802c096:	6978      	ldr	r0, [r7, #20]
 802c098:	f7ff ff88 	bl	802bfac <xTimerGenericCommand>
 802c09c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802c09e:	693b      	ldr	r3, [r7, #16]
 802c0a0:	2b00      	cmp	r3, #0
 802c0a2:	d113      	bne.n	802c0cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 802c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c0a8:	f383 8811 	msr	BASEPRI, r3
 802c0ac:	f3bf 8f6f 	isb	sy
 802c0b0:	f3bf 8f4f 	dsb	sy
 802c0b4:	60fb      	str	r3, [r7, #12]
}
 802c0b6:	bf00      	nop
 802c0b8:	e7fe      	b.n	802c0b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c0ba:	697b      	ldr	r3, [r7, #20]
 802c0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c0c0:	f023 0301 	bic.w	r3, r3, #1
 802c0c4:	b2da      	uxtb	r2, r3
 802c0c6:	697b      	ldr	r3, [r7, #20]
 802c0c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c0cc:	697b      	ldr	r3, [r7, #20]
 802c0ce:	6a1b      	ldr	r3, [r3, #32]
 802c0d0:	6978      	ldr	r0, [r7, #20]
 802c0d2:	4798      	blx	r3
}
 802c0d4:	bf00      	nop
 802c0d6:	3718      	adds	r7, #24
 802c0d8:	46bd      	mov	sp, r7
 802c0da:	bd80      	pop	{r7, pc}
 802c0dc:	20002604 	.word	0x20002604

0802c0e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 802c0e0:	b580      	push	{r7, lr}
 802c0e2:	b084      	sub	sp, #16
 802c0e4:	af00      	add	r7, sp, #0
 802c0e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c0e8:	f107 0308 	add.w	r3, r7, #8
 802c0ec:	4618      	mov	r0, r3
 802c0ee:	f000 f857 	bl	802c1a0 <prvGetNextExpireTime>
 802c0f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802c0f4:	68bb      	ldr	r3, [r7, #8]
 802c0f6:	4619      	mov	r1, r3
 802c0f8:	68f8      	ldr	r0, [r7, #12]
 802c0fa:	f000 f803 	bl	802c104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802c0fe:	f000 f8d5 	bl	802c2ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c102:	e7f1      	b.n	802c0e8 <prvTimerTask+0x8>

0802c104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802c104:	b580      	push	{r7, lr}
 802c106:	b084      	sub	sp, #16
 802c108:	af00      	add	r7, sp, #0
 802c10a:	6078      	str	r0, [r7, #4]
 802c10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802c10e:	f7ff f9c5 	bl	802b49c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c112:	f107 0308 	add.w	r3, r7, #8
 802c116:	4618      	mov	r0, r3
 802c118:	f000 f866 	bl	802c1e8 <prvSampleTimeNow>
 802c11c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802c11e:	68bb      	ldr	r3, [r7, #8]
 802c120:	2b00      	cmp	r3, #0
 802c122:	d130      	bne.n	802c186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802c124:	683b      	ldr	r3, [r7, #0]
 802c126:	2b00      	cmp	r3, #0
 802c128:	d10a      	bne.n	802c140 <prvProcessTimerOrBlockTask+0x3c>
 802c12a:	687a      	ldr	r2, [r7, #4]
 802c12c:	68fb      	ldr	r3, [r7, #12]
 802c12e:	429a      	cmp	r2, r3
 802c130:	d806      	bhi.n	802c140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802c132:	f7ff f9c1 	bl	802b4b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802c136:	68f9      	ldr	r1, [r7, #12]
 802c138:	6878      	ldr	r0, [r7, #4]
 802c13a:	f7ff ff85 	bl	802c048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802c13e:	e024      	b.n	802c18a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 802c140:	683b      	ldr	r3, [r7, #0]
 802c142:	2b00      	cmp	r3, #0
 802c144:	d008      	beq.n	802c158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802c146:	4b13      	ldr	r3, [pc, #76]	; (802c194 <prvProcessTimerOrBlockTask+0x90>)
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	681b      	ldr	r3, [r3, #0]
 802c14c:	2b00      	cmp	r3, #0
 802c14e:	d101      	bne.n	802c154 <prvProcessTimerOrBlockTask+0x50>
 802c150:	2301      	movs	r3, #1
 802c152:	e000      	b.n	802c156 <prvProcessTimerOrBlockTask+0x52>
 802c154:	2300      	movs	r3, #0
 802c156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802c158:	4b0f      	ldr	r3, [pc, #60]	; (802c198 <prvProcessTimerOrBlockTask+0x94>)
 802c15a:	6818      	ldr	r0, [r3, #0]
 802c15c:	687a      	ldr	r2, [r7, #4]
 802c15e:	68fb      	ldr	r3, [r7, #12]
 802c160:	1ad3      	subs	r3, r2, r3
 802c162:	683a      	ldr	r2, [r7, #0]
 802c164:	4619      	mov	r1, r3
 802c166:	f7fe fe55 	bl	802ae14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802c16a:	f7ff f9a5 	bl	802b4b8 <xTaskResumeAll>
 802c16e:	4603      	mov	r3, r0
 802c170:	2b00      	cmp	r3, #0
 802c172:	d10a      	bne.n	802c18a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802c174:	4b09      	ldr	r3, [pc, #36]	; (802c19c <prvProcessTimerOrBlockTask+0x98>)
 802c176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802c17a:	601a      	str	r2, [r3, #0]
 802c17c:	f3bf 8f4f 	dsb	sy
 802c180:	f3bf 8f6f 	isb	sy
}
 802c184:	e001      	b.n	802c18a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802c186:	f7ff f997 	bl	802b4b8 <xTaskResumeAll>
}
 802c18a:	bf00      	nop
 802c18c:	3710      	adds	r7, #16
 802c18e:	46bd      	mov	sp, r7
 802c190:	bd80      	pop	{r7, pc}
 802c192:	bf00      	nop
 802c194:	20002608 	.word	0x20002608
 802c198:	2000260c 	.word	0x2000260c
 802c19c:	e000ed04 	.word	0xe000ed04

0802c1a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802c1a0:	b480      	push	{r7}
 802c1a2:	b085      	sub	sp, #20
 802c1a4:	af00      	add	r7, sp, #0
 802c1a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802c1a8:	4b0e      	ldr	r3, [pc, #56]	; (802c1e4 <prvGetNextExpireTime+0x44>)
 802c1aa:	681b      	ldr	r3, [r3, #0]
 802c1ac:	681b      	ldr	r3, [r3, #0]
 802c1ae:	2b00      	cmp	r3, #0
 802c1b0:	d101      	bne.n	802c1b6 <prvGetNextExpireTime+0x16>
 802c1b2:	2201      	movs	r2, #1
 802c1b4:	e000      	b.n	802c1b8 <prvGetNextExpireTime+0x18>
 802c1b6:	2200      	movs	r2, #0
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802c1bc:	687b      	ldr	r3, [r7, #4]
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	2b00      	cmp	r3, #0
 802c1c2:	d105      	bne.n	802c1d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c1c4:	4b07      	ldr	r3, [pc, #28]	; (802c1e4 <prvGetNextExpireTime+0x44>)
 802c1c6:	681b      	ldr	r3, [r3, #0]
 802c1c8:	68db      	ldr	r3, [r3, #12]
 802c1ca:	681b      	ldr	r3, [r3, #0]
 802c1cc:	60fb      	str	r3, [r7, #12]
 802c1ce:	e001      	b.n	802c1d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802c1d0:	2300      	movs	r3, #0
 802c1d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802c1d4:	68fb      	ldr	r3, [r7, #12]
}
 802c1d6:	4618      	mov	r0, r3
 802c1d8:	3714      	adds	r7, #20
 802c1da:	46bd      	mov	sp, r7
 802c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c1e0:	4770      	bx	lr
 802c1e2:	bf00      	nop
 802c1e4:	20002604 	.word	0x20002604

0802c1e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802c1e8:	b580      	push	{r7, lr}
 802c1ea:	b084      	sub	sp, #16
 802c1ec:	af00      	add	r7, sp, #0
 802c1ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802c1f0:	f7ff fa04 	bl	802b5fc <xTaskGetTickCount>
 802c1f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802c1f6:	4b0b      	ldr	r3, [pc, #44]	; (802c224 <prvSampleTimeNow+0x3c>)
 802c1f8:	681b      	ldr	r3, [r3, #0]
 802c1fa:	68fa      	ldr	r2, [r7, #12]
 802c1fc:	429a      	cmp	r2, r3
 802c1fe:	d205      	bcs.n	802c20c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802c200:	f000 f936 	bl	802c470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802c204:	687b      	ldr	r3, [r7, #4]
 802c206:	2201      	movs	r2, #1
 802c208:	601a      	str	r2, [r3, #0]
 802c20a:	e002      	b.n	802c212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802c20c:	687b      	ldr	r3, [r7, #4]
 802c20e:	2200      	movs	r2, #0
 802c210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802c212:	4a04      	ldr	r2, [pc, #16]	; (802c224 <prvSampleTimeNow+0x3c>)
 802c214:	68fb      	ldr	r3, [r7, #12]
 802c216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802c218:	68fb      	ldr	r3, [r7, #12]
}
 802c21a:	4618      	mov	r0, r3
 802c21c:	3710      	adds	r7, #16
 802c21e:	46bd      	mov	sp, r7
 802c220:	bd80      	pop	{r7, pc}
 802c222:	bf00      	nop
 802c224:	20002614 	.word	0x20002614

0802c228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802c228:	b580      	push	{r7, lr}
 802c22a:	b086      	sub	sp, #24
 802c22c:	af00      	add	r7, sp, #0
 802c22e:	60f8      	str	r0, [r7, #12]
 802c230:	60b9      	str	r1, [r7, #8]
 802c232:	607a      	str	r2, [r7, #4]
 802c234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802c236:	2300      	movs	r3, #0
 802c238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802c23a:	68fb      	ldr	r3, [r7, #12]
 802c23c:	68ba      	ldr	r2, [r7, #8]
 802c23e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c240:	68fb      	ldr	r3, [r7, #12]
 802c242:	68fa      	ldr	r2, [r7, #12]
 802c244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802c246:	68ba      	ldr	r2, [r7, #8]
 802c248:	687b      	ldr	r3, [r7, #4]
 802c24a:	429a      	cmp	r2, r3
 802c24c:	d812      	bhi.n	802c274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802c24e:	687a      	ldr	r2, [r7, #4]
 802c250:	683b      	ldr	r3, [r7, #0]
 802c252:	1ad2      	subs	r2, r2, r3
 802c254:	68fb      	ldr	r3, [r7, #12]
 802c256:	699b      	ldr	r3, [r3, #24]
 802c258:	429a      	cmp	r2, r3
 802c25a:	d302      	bcc.n	802c262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802c25c:	2301      	movs	r3, #1
 802c25e:	617b      	str	r3, [r7, #20]
 802c260:	e01b      	b.n	802c29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802c262:	4b10      	ldr	r3, [pc, #64]	; (802c2a4 <prvInsertTimerInActiveList+0x7c>)
 802c264:	681a      	ldr	r2, [r3, #0]
 802c266:	68fb      	ldr	r3, [r7, #12]
 802c268:	3304      	adds	r3, #4
 802c26a:	4619      	mov	r1, r3
 802c26c:	4610      	mov	r0, r2
 802c26e:	f7fd ff0e 	bl	802a08e <vListInsert>
 802c272:	e012      	b.n	802c29a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802c274:	687a      	ldr	r2, [r7, #4]
 802c276:	683b      	ldr	r3, [r7, #0]
 802c278:	429a      	cmp	r2, r3
 802c27a:	d206      	bcs.n	802c28a <prvInsertTimerInActiveList+0x62>
 802c27c:	68ba      	ldr	r2, [r7, #8]
 802c27e:	683b      	ldr	r3, [r7, #0]
 802c280:	429a      	cmp	r2, r3
 802c282:	d302      	bcc.n	802c28a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802c284:	2301      	movs	r3, #1
 802c286:	617b      	str	r3, [r7, #20]
 802c288:	e007      	b.n	802c29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c28a:	4b07      	ldr	r3, [pc, #28]	; (802c2a8 <prvInsertTimerInActiveList+0x80>)
 802c28c:	681a      	ldr	r2, [r3, #0]
 802c28e:	68fb      	ldr	r3, [r7, #12]
 802c290:	3304      	adds	r3, #4
 802c292:	4619      	mov	r1, r3
 802c294:	4610      	mov	r0, r2
 802c296:	f7fd fefa 	bl	802a08e <vListInsert>
		}
	}

	return xProcessTimerNow;
 802c29a:	697b      	ldr	r3, [r7, #20]
}
 802c29c:	4618      	mov	r0, r3
 802c29e:	3718      	adds	r7, #24
 802c2a0:	46bd      	mov	sp, r7
 802c2a2:	bd80      	pop	{r7, pc}
 802c2a4:	20002608 	.word	0x20002608
 802c2a8:	20002604 	.word	0x20002604

0802c2ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802c2ac:	b580      	push	{r7, lr}
 802c2ae:	b08e      	sub	sp, #56	; 0x38
 802c2b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c2b2:	e0ca      	b.n	802c44a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802c2b4:	687b      	ldr	r3, [r7, #4]
 802c2b6:	2b00      	cmp	r3, #0
 802c2b8:	da18      	bge.n	802c2ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802c2ba:	1d3b      	adds	r3, r7, #4
 802c2bc:	3304      	adds	r3, #4
 802c2be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c2c2:	2b00      	cmp	r3, #0
 802c2c4:	d10a      	bne.n	802c2dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 802c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c2ca:	f383 8811 	msr	BASEPRI, r3
 802c2ce:	f3bf 8f6f 	isb	sy
 802c2d2:	f3bf 8f4f 	dsb	sy
 802c2d6:	61fb      	str	r3, [r7, #28]
}
 802c2d8:	bf00      	nop
 802c2da:	e7fe      	b.n	802c2da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c2de:	681b      	ldr	r3, [r3, #0]
 802c2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c2e2:	6850      	ldr	r0, [r2, #4]
 802c2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c2e6:	6892      	ldr	r2, [r2, #8]
 802c2e8:	4611      	mov	r1, r2
 802c2ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	2b00      	cmp	r3, #0
 802c2f0:	f2c0 80aa 	blt.w	802c448 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802c2f4:	68fb      	ldr	r3, [r7, #12]
 802c2f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2fa:	695b      	ldr	r3, [r3, #20]
 802c2fc:	2b00      	cmp	r3, #0
 802c2fe:	d004      	beq.n	802c30a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c302:	3304      	adds	r3, #4
 802c304:	4618      	mov	r0, r3
 802c306:	f7fd fefb 	bl	802a100 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c30a:	463b      	mov	r3, r7
 802c30c:	4618      	mov	r0, r3
 802c30e:	f7ff ff6b 	bl	802c1e8 <prvSampleTimeNow>
 802c312:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	2b09      	cmp	r3, #9
 802c318:	f200 8097 	bhi.w	802c44a <prvProcessReceivedCommands+0x19e>
 802c31c:	a201      	add	r2, pc, #4	; (adr r2, 802c324 <prvProcessReceivedCommands+0x78>)
 802c31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c322:	bf00      	nop
 802c324:	0802c34d 	.word	0x0802c34d
 802c328:	0802c34d 	.word	0x0802c34d
 802c32c:	0802c34d 	.word	0x0802c34d
 802c330:	0802c3c1 	.word	0x0802c3c1
 802c334:	0802c3d5 	.word	0x0802c3d5
 802c338:	0802c41f 	.word	0x0802c41f
 802c33c:	0802c34d 	.word	0x0802c34d
 802c340:	0802c34d 	.word	0x0802c34d
 802c344:	0802c3c1 	.word	0x0802c3c1
 802c348:	0802c3d5 	.word	0x0802c3d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c34e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c352:	f043 0301 	orr.w	r3, r3, #1
 802c356:	b2da      	uxtb	r2, r3
 802c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c35a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802c35e:	68ba      	ldr	r2, [r7, #8]
 802c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c362:	699b      	ldr	r3, [r3, #24]
 802c364:	18d1      	adds	r1, r2, r3
 802c366:	68bb      	ldr	r3, [r7, #8]
 802c368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c36c:	f7ff ff5c 	bl	802c228 <prvInsertTimerInActiveList>
 802c370:	4603      	mov	r3, r0
 802c372:	2b00      	cmp	r3, #0
 802c374:	d069      	beq.n	802c44a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c378:	6a1b      	ldr	r3, [r3, #32]
 802c37a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c37c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c384:	f003 0304 	and.w	r3, r3, #4
 802c388:	2b00      	cmp	r3, #0
 802c38a:	d05e      	beq.n	802c44a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802c38c:	68ba      	ldr	r2, [r7, #8]
 802c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c390:	699b      	ldr	r3, [r3, #24]
 802c392:	441a      	add	r2, r3
 802c394:	2300      	movs	r3, #0
 802c396:	9300      	str	r3, [sp, #0]
 802c398:	2300      	movs	r3, #0
 802c39a:	2100      	movs	r1, #0
 802c39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c39e:	f7ff fe05 	bl	802bfac <xTimerGenericCommand>
 802c3a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802c3a4:	6a3b      	ldr	r3, [r7, #32]
 802c3a6:	2b00      	cmp	r3, #0
 802c3a8:	d14f      	bne.n	802c44a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c3ae:	f383 8811 	msr	BASEPRI, r3
 802c3b2:	f3bf 8f6f 	isb	sy
 802c3b6:	f3bf 8f4f 	dsb	sy
 802c3ba:	61bb      	str	r3, [r7, #24]
}
 802c3bc:	bf00      	nop
 802c3be:	e7fe      	b.n	802c3be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c3c6:	f023 0301 	bic.w	r3, r3, #1
 802c3ca:	b2da      	uxtb	r2, r3
 802c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802c3d2:	e03a      	b.n	802c44a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c3da:	f043 0301 	orr.w	r3, r3, #1
 802c3de:	b2da      	uxtb	r2, r3
 802c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802c3e6:	68ba      	ldr	r2, [r7, #8]
 802c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3ee:	699b      	ldr	r3, [r3, #24]
 802c3f0:	2b00      	cmp	r3, #0
 802c3f2:	d10a      	bne.n	802c40a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 802c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c3f8:	f383 8811 	msr	BASEPRI, r3
 802c3fc:	f3bf 8f6f 	isb	sy
 802c400:	f3bf 8f4f 	dsb	sy
 802c404:	617b      	str	r3, [r7, #20]
}
 802c406:	bf00      	nop
 802c408:	e7fe      	b.n	802c408 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c40c:	699a      	ldr	r2, [r3, #24]
 802c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c410:	18d1      	adds	r1, r2, r3
 802c412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c418:	f7ff ff06 	bl	802c228 <prvInsertTimerInActiveList>
					break;
 802c41c:	e015      	b.n	802c44a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c424:	f003 0302 	and.w	r3, r3, #2
 802c428:	2b00      	cmp	r3, #0
 802c42a:	d103      	bne.n	802c434 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802c42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c42e:	f000 fbdf 	bl	802cbf0 <vPortFree>
 802c432:	e00a      	b.n	802c44a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c43a:	f023 0301 	bic.w	r3, r3, #1
 802c43e:	b2da      	uxtb	r2, r3
 802c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802c446:	e000      	b.n	802c44a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802c448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c44a:	4b08      	ldr	r3, [pc, #32]	; (802c46c <prvProcessReceivedCommands+0x1c0>)
 802c44c:	681b      	ldr	r3, [r3, #0]
 802c44e:	1d39      	adds	r1, r7, #4
 802c450:	2200      	movs	r2, #0
 802c452:	4618      	mov	r0, r3
 802c454:	f7fe f998 	bl	802a788 <xQueueReceive>
 802c458:	4603      	mov	r3, r0
 802c45a:	2b00      	cmp	r3, #0
 802c45c:	f47f af2a 	bne.w	802c2b4 <prvProcessReceivedCommands+0x8>
	}
}
 802c460:	bf00      	nop
 802c462:	bf00      	nop
 802c464:	3730      	adds	r7, #48	; 0x30
 802c466:	46bd      	mov	sp, r7
 802c468:	bd80      	pop	{r7, pc}
 802c46a:	bf00      	nop
 802c46c:	2000260c 	.word	0x2000260c

0802c470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802c470:	b580      	push	{r7, lr}
 802c472:	b088      	sub	sp, #32
 802c474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c476:	e048      	b.n	802c50a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c478:	4b2d      	ldr	r3, [pc, #180]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c47a:	681b      	ldr	r3, [r3, #0]
 802c47c:	68db      	ldr	r3, [r3, #12]
 802c47e:	681b      	ldr	r3, [r3, #0]
 802c480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c482:	4b2b      	ldr	r3, [pc, #172]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c484:	681b      	ldr	r3, [r3, #0]
 802c486:	68db      	ldr	r3, [r3, #12]
 802c488:	68db      	ldr	r3, [r3, #12]
 802c48a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c48c:	68fb      	ldr	r3, [r7, #12]
 802c48e:	3304      	adds	r3, #4
 802c490:	4618      	mov	r0, r3
 802c492:	f7fd fe35 	bl	802a100 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c496:	68fb      	ldr	r3, [r7, #12]
 802c498:	6a1b      	ldr	r3, [r3, #32]
 802c49a:	68f8      	ldr	r0, [r7, #12]
 802c49c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c49e:	68fb      	ldr	r3, [r7, #12]
 802c4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c4a4:	f003 0304 	and.w	r3, r3, #4
 802c4a8:	2b00      	cmp	r3, #0
 802c4aa:	d02e      	beq.n	802c50a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802c4ac:	68fb      	ldr	r3, [r7, #12]
 802c4ae:	699b      	ldr	r3, [r3, #24]
 802c4b0:	693a      	ldr	r2, [r7, #16]
 802c4b2:	4413      	add	r3, r2
 802c4b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802c4b6:	68ba      	ldr	r2, [r7, #8]
 802c4b8:	693b      	ldr	r3, [r7, #16]
 802c4ba:	429a      	cmp	r2, r3
 802c4bc:	d90e      	bls.n	802c4dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802c4be:	68fb      	ldr	r3, [r7, #12]
 802c4c0:	68ba      	ldr	r2, [r7, #8]
 802c4c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c4c4:	68fb      	ldr	r3, [r7, #12]
 802c4c6:	68fa      	ldr	r2, [r7, #12]
 802c4c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c4ca:	4b19      	ldr	r3, [pc, #100]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c4cc:	681a      	ldr	r2, [r3, #0]
 802c4ce:	68fb      	ldr	r3, [r7, #12]
 802c4d0:	3304      	adds	r3, #4
 802c4d2:	4619      	mov	r1, r3
 802c4d4:	4610      	mov	r0, r2
 802c4d6:	f7fd fdda 	bl	802a08e <vListInsert>
 802c4da:	e016      	b.n	802c50a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c4dc:	2300      	movs	r3, #0
 802c4de:	9300      	str	r3, [sp, #0]
 802c4e0:	2300      	movs	r3, #0
 802c4e2:	693a      	ldr	r2, [r7, #16]
 802c4e4:	2100      	movs	r1, #0
 802c4e6:	68f8      	ldr	r0, [r7, #12]
 802c4e8:	f7ff fd60 	bl	802bfac <xTimerGenericCommand>
 802c4ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802c4ee:	687b      	ldr	r3, [r7, #4]
 802c4f0:	2b00      	cmp	r3, #0
 802c4f2:	d10a      	bne.n	802c50a <prvSwitchTimerLists+0x9a>
	__asm volatile
 802c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c4f8:	f383 8811 	msr	BASEPRI, r3
 802c4fc:	f3bf 8f6f 	isb	sy
 802c500:	f3bf 8f4f 	dsb	sy
 802c504:	603b      	str	r3, [r7, #0]
}
 802c506:	bf00      	nop
 802c508:	e7fe      	b.n	802c508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c50a:	4b09      	ldr	r3, [pc, #36]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c50c:	681b      	ldr	r3, [r3, #0]
 802c50e:	681b      	ldr	r3, [r3, #0]
 802c510:	2b00      	cmp	r3, #0
 802c512:	d1b1      	bne.n	802c478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802c514:	4b06      	ldr	r3, [pc, #24]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c516:	681b      	ldr	r3, [r3, #0]
 802c518:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802c51a:	4b06      	ldr	r3, [pc, #24]	; (802c534 <prvSwitchTimerLists+0xc4>)
 802c51c:	681b      	ldr	r3, [r3, #0]
 802c51e:	4a04      	ldr	r2, [pc, #16]	; (802c530 <prvSwitchTimerLists+0xc0>)
 802c520:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802c522:	4a04      	ldr	r2, [pc, #16]	; (802c534 <prvSwitchTimerLists+0xc4>)
 802c524:	697b      	ldr	r3, [r7, #20]
 802c526:	6013      	str	r3, [r2, #0]
}
 802c528:	bf00      	nop
 802c52a:	3718      	adds	r7, #24
 802c52c:	46bd      	mov	sp, r7
 802c52e:	bd80      	pop	{r7, pc}
 802c530:	20002604 	.word	0x20002604
 802c534:	20002608 	.word	0x20002608

0802c538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802c538:	b580      	push	{r7, lr}
 802c53a:	b082      	sub	sp, #8
 802c53c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802c53e:	f000 f969 	bl	802c814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802c542:	4b15      	ldr	r3, [pc, #84]	; (802c598 <prvCheckForValidListAndQueue+0x60>)
 802c544:	681b      	ldr	r3, [r3, #0]
 802c546:	2b00      	cmp	r3, #0
 802c548:	d120      	bne.n	802c58c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802c54a:	4814      	ldr	r0, [pc, #80]	; (802c59c <prvCheckForValidListAndQueue+0x64>)
 802c54c:	f7fd fd4e 	bl	8029fec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802c550:	4813      	ldr	r0, [pc, #76]	; (802c5a0 <prvCheckForValidListAndQueue+0x68>)
 802c552:	f7fd fd4b 	bl	8029fec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802c556:	4b13      	ldr	r3, [pc, #76]	; (802c5a4 <prvCheckForValidListAndQueue+0x6c>)
 802c558:	4a10      	ldr	r2, [pc, #64]	; (802c59c <prvCheckForValidListAndQueue+0x64>)
 802c55a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802c55c:	4b12      	ldr	r3, [pc, #72]	; (802c5a8 <prvCheckForValidListAndQueue+0x70>)
 802c55e:	4a10      	ldr	r2, [pc, #64]	; (802c5a0 <prvCheckForValidListAndQueue+0x68>)
 802c560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802c562:	2300      	movs	r3, #0
 802c564:	9300      	str	r3, [sp, #0]
 802c566:	4b11      	ldr	r3, [pc, #68]	; (802c5ac <prvCheckForValidListAndQueue+0x74>)
 802c568:	4a11      	ldr	r2, [pc, #68]	; (802c5b0 <prvCheckForValidListAndQueue+0x78>)
 802c56a:	2110      	movs	r1, #16
 802c56c:	200a      	movs	r0, #10
 802c56e:	f7fd fe59 	bl	802a224 <xQueueGenericCreateStatic>
 802c572:	4603      	mov	r3, r0
 802c574:	4a08      	ldr	r2, [pc, #32]	; (802c598 <prvCheckForValidListAndQueue+0x60>)
 802c576:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802c578:	4b07      	ldr	r3, [pc, #28]	; (802c598 <prvCheckForValidListAndQueue+0x60>)
 802c57a:	681b      	ldr	r3, [r3, #0]
 802c57c:	2b00      	cmp	r3, #0
 802c57e:	d005      	beq.n	802c58c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802c580:	4b05      	ldr	r3, [pc, #20]	; (802c598 <prvCheckForValidListAndQueue+0x60>)
 802c582:	681b      	ldr	r3, [r3, #0]
 802c584:	490b      	ldr	r1, [pc, #44]	; (802c5b4 <prvCheckForValidListAndQueue+0x7c>)
 802c586:	4618      	mov	r0, r3
 802c588:	f7fe fc12 	bl	802adb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802c58c:	f000 f972 	bl	802c874 <vPortExitCritical>
}
 802c590:	bf00      	nop
 802c592:	46bd      	mov	sp, r7
 802c594:	bd80      	pop	{r7, pc}
 802c596:	bf00      	nop
 802c598:	2000260c 	.word	0x2000260c
 802c59c:	200025dc 	.word	0x200025dc
 802c5a0:	200025f0 	.word	0x200025f0
 802c5a4:	20002604 	.word	0x20002604
 802c5a8:	20002608 	.word	0x20002608
 802c5ac:	200026b8 	.word	0x200026b8
 802c5b0:	20002618 	.word	0x20002618
 802c5b4:	0802f3ac 	.word	0x0802f3ac

0802c5b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802c5b8:	b480      	push	{r7}
 802c5ba:	b085      	sub	sp, #20
 802c5bc:	af00      	add	r7, sp, #0
 802c5be:	60f8      	str	r0, [r7, #12]
 802c5c0:	60b9      	str	r1, [r7, #8]
 802c5c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802c5c4:	68fb      	ldr	r3, [r7, #12]
 802c5c6:	3b04      	subs	r3, #4
 802c5c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802c5ca:	68fb      	ldr	r3, [r7, #12]
 802c5cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802c5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c5d2:	68fb      	ldr	r3, [r7, #12]
 802c5d4:	3b04      	subs	r3, #4
 802c5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802c5d8:	68bb      	ldr	r3, [r7, #8]
 802c5da:	f023 0201 	bic.w	r2, r3, #1
 802c5de:	68fb      	ldr	r3, [r7, #12]
 802c5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c5e2:	68fb      	ldr	r3, [r7, #12]
 802c5e4:	3b04      	subs	r3, #4
 802c5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802c5e8:	4a0c      	ldr	r2, [pc, #48]	; (802c61c <pxPortInitialiseStack+0x64>)
 802c5ea:	68fb      	ldr	r3, [r7, #12]
 802c5ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802c5ee:	68fb      	ldr	r3, [r7, #12]
 802c5f0:	3b14      	subs	r3, #20
 802c5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802c5f4:	687a      	ldr	r2, [r7, #4]
 802c5f6:	68fb      	ldr	r3, [r7, #12]
 802c5f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802c5fa:	68fb      	ldr	r3, [r7, #12]
 802c5fc:	3b04      	subs	r3, #4
 802c5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802c600:	68fb      	ldr	r3, [r7, #12]
 802c602:	f06f 0202 	mvn.w	r2, #2
 802c606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802c608:	68fb      	ldr	r3, [r7, #12]
 802c60a:	3b20      	subs	r3, #32
 802c60c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802c60e:	68fb      	ldr	r3, [r7, #12]
}
 802c610:	4618      	mov	r0, r3
 802c612:	3714      	adds	r7, #20
 802c614:	46bd      	mov	sp, r7
 802c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c61a:	4770      	bx	lr
 802c61c:	0802c621 	.word	0x0802c621

0802c620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802c620:	b480      	push	{r7}
 802c622:	b085      	sub	sp, #20
 802c624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802c626:	2300      	movs	r3, #0
 802c628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802c62a:	4b12      	ldr	r3, [pc, #72]	; (802c674 <prvTaskExitError+0x54>)
 802c62c:	681b      	ldr	r3, [r3, #0]
 802c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c632:	d00a      	beq.n	802c64a <prvTaskExitError+0x2a>
	__asm volatile
 802c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c638:	f383 8811 	msr	BASEPRI, r3
 802c63c:	f3bf 8f6f 	isb	sy
 802c640:	f3bf 8f4f 	dsb	sy
 802c644:	60fb      	str	r3, [r7, #12]
}
 802c646:	bf00      	nop
 802c648:	e7fe      	b.n	802c648 <prvTaskExitError+0x28>
	__asm volatile
 802c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c64e:	f383 8811 	msr	BASEPRI, r3
 802c652:	f3bf 8f6f 	isb	sy
 802c656:	f3bf 8f4f 	dsb	sy
 802c65a:	60bb      	str	r3, [r7, #8]
}
 802c65c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802c65e:	bf00      	nop
 802c660:	687b      	ldr	r3, [r7, #4]
 802c662:	2b00      	cmp	r3, #0
 802c664:	d0fc      	beq.n	802c660 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802c666:	bf00      	nop
 802c668:	bf00      	nop
 802c66a:	3714      	adds	r7, #20
 802c66c:	46bd      	mov	sp, r7
 802c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c672:	4770      	bx	lr
 802c674:	20001440 	.word	0x20001440
	...

0802c680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802c680:	4b07      	ldr	r3, [pc, #28]	; (802c6a0 <pxCurrentTCBConst2>)
 802c682:	6819      	ldr	r1, [r3, #0]
 802c684:	6808      	ldr	r0, [r1, #0]
 802c686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c68a:	f380 8809 	msr	PSP, r0
 802c68e:	f3bf 8f6f 	isb	sy
 802c692:	f04f 0000 	mov.w	r0, #0
 802c696:	f380 8811 	msr	BASEPRI, r0
 802c69a:	4770      	bx	lr
 802c69c:	f3af 8000 	nop.w

0802c6a0 <pxCurrentTCBConst2>:
 802c6a0:	200020dc 	.word	0x200020dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802c6a4:	bf00      	nop
 802c6a6:	bf00      	nop

0802c6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802c6a8:	4808      	ldr	r0, [pc, #32]	; (802c6cc <prvPortStartFirstTask+0x24>)
 802c6aa:	6800      	ldr	r0, [r0, #0]
 802c6ac:	6800      	ldr	r0, [r0, #0]
 802c6ae:	f380 8808 	msr	MSP, r0
 802c6b2:	f04f 0000 	mov.w	r0, #0
 802c6b6:	f380 8814 	msr	CONTROL, r0
 802c6ba:	b662      	cpsie	i
 802c6bc:	b661      	cpsie	f
 802c6be:	f3bf 8f4f 	dsb	sy
 802c6c2:	f3bf 8f6f 	isb	sy
 802c6c6:	df00      	svc	0
 802c6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802c6ca:	bf00      	nop
 802c6cc:	e000ed08 	.word	0xe000ed08

0802c6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802c6d0:	b580      	push	{r7, lr}
 802c6d2:	b086      	sub	sp, #24
 802c6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802c6d6:	4b46      	ldr	r3, [pc, #280]	; (802c7f0 <xPortStartScheduler+0x120>)
 802c6d8:	681b      	ldr	r3, [r3, #0]
 802c6da:	4a46      	ldr	r2, [pc, #280]	; (802c7f4 <xPortStartScheduler+0x124>)
 802c6dc:	4293      	cmp	r3, r2
 802c6de:	d10a      	bne.n	802c6f6 <xPortStartScheduler+0x26>
	__asm volatile
 802c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c6e4:	f383 8811 	msr	BASEPRI, r3
 802c6e8:	f3bf 8f6f 	isb	sy
 802c6ec:	f3bf 8f4f 	dsb	sy
 802c6f0:	613b      	str	r3, [r7, #16]
}
 802c6f2:	bf00      	nop
 802c6f4:	e7fe      	b.n	802c6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802c6f6:	4b3e      	ldr	r3, [pc, #248]	; (802c7f0 <xPortStartScheduler+0x120>)
 802c6f8:	681b      	ldr	r3, [r3, #0]
 802c6fa:	4a3f      	ldr	r2, [pc, #252]	; (802c7f8 <xPortStartScheduler+0x128>)
 802c6fc:	4293      	cmp	r3, r2
 802c6fe:	d10a      	bne.n	802c716 <xPortStartScheduler+0x46>
	__asm volatile
 802c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c704:	f383 8811 	msr	BASEPRI, r3
 802c708:	f3bf 8f6f 	isb	sy
 802c70c:	f3bf 8f4f 	dsb	sy
 802c710:	60fb      	str	r3, [r7, #12]
}
 802c712:	bf00      	nop
 802c714:	e7fe      	b.n	802c714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802c716:	4b39      	ldr	r3, [pc, #228]	; (802c7fc <xPortStartScheduler+0x12c>)
 802c718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802c71a:	697b      	ldr	r3, [r7, #20]
 802c71c:	781b      	ldrb	r3, [r3, #0]
 802c71e:	b2db      	uxtb	r3, r3
 802c720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802c722:	697b      	ldr	r3, [r7, #20]
 802c724:	22ff      	movs	r2, #255	; 0xff
 802c726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802c728:	697b      	ldr	r3, [r7, #20]
 802c72a:	781b      	ldrb	r3, [r3, #0]
 802c72c:	b2db      	uxtb	r3, r3
 802c72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802c730:	78fb      	ldrb	r3, [r7, #3]
 802c732:	b2db      	uxtb	r3, r3
 802c734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802c738:	b2da      	uxtb	r2, r3
 802c73a:	4b31      	ldr	r3, [pc, #196]	; (802c800 <xPortStartScheduler+0x130>)
 802c73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802c73e:	4b31      	ldr	r3, [pc, #196]	; (802c804 <xPortStartScheduler+0x134>)
 802c740:	2207      	movs	r2, #7
 802c742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802c744:	e009      	b.n	802c75a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 802c746:	4b2f      	ldr	r3, [pc, #188]	; (802c804 <xPortStartScheduler+0x134>)
 802c748:	681b      	ldr	r3, [r3, #0]
 802c74a:	3b01      	subs	r3, #1
 802c74c:	4a2d      	ldr	r2, [pc, #180]	; (802c804 <xPortStartScheduler+0x134>)
 802c74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802c750:	78fb      	ldrb	r3, [r7, #3]
 802c752:	b2db      	uxtb	r3, r3
 802c754:	005b      	lsls	r3, r3, #1
 802c756:	b2db      	uxtb	r3, r3
 802c758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802c75a:	78fb      	ldrb	r3, [r7, #3]
 802c75c:	b2db      	uxtb	r3, r3
 802c75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c762:	2b80      	cmp	r3, #128	; 0x80
 802c764:	d0ef      	beq.n	802c746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802c766:	4b27      	ldr	r3, [pc, #156]	; (802c804 <xPortStartScheduler+0x134>)
 802c768:	681b      	ldr	r3, [r3, #0]
 802c76a:	f1c3 0307 	rsb	r3, r3, #7
 802c76e:	2b04      	cmp	r3, #4
 802c770:	d00a      	beq.n	802c788 <xPortStartScheduler+0xb8>
	__asm volatile
 802c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c776:	f383 8811 	msr	BASEPRI, r3
 802c77a:	f3bf 8f6f 	isb	sy
 802c77e:	f3bf 8f4f 	dsb	sy
 802c782:	60bb      	str	r3, [r7, #8]
}
 802c784:	bf00      	nop
 802c786:	e7fe      	b.n	802c786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802c788:	4b1e      	ldr	r3, [pc, #120]	; (802c804 <xPortStartScheduler+0x134>)
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	021b      	lsls	r3, r3, #8
 802c78e:	4a1d      	ldr	r2, [pc, #116]	; (802c804 <xPortStartScheduler+0x134>)
 802c790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802c792:	4b1c      	ldr	r3, [pc, #112]	; (802c804 <xPortStartScheduler+0x134>)
 802c794:	681b      	ldr	r3, [r3, #0]
 802c796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802c79a:	4a1a      	ldr	r2, [pc, #104]	; (802c804 <xPortStartScheduler+0x134>)
 802c79c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802c79e:	687b      	ldr	r3, [r7, #4]
 802c7a0:	b2da      	uxtb	r2, r3
 802c7a2:	697b      	ldr	r3, [r7, #20]
 802c7a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802c7a6:	4b18      	ldr	r3, [pc, #96]	; (802c808 <xPortStartScheduler+0x138>)
 802c7a8:	681b      	ldr	r3, [r3, #0]
 802c7aa:	4a17      	ldr	r2, [pc, #92]	; (802c808 <xPortStartScheduler+0x138>)
 802c7ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802c7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802c7b2:	4b15      	ldr	r3, [pc, #84]	; (802c808 <xPortStartScheduler+0x138>)
 802c7b4:	681b      	ldr	r3, [r3, #0]
 802c7b6:	4a14      	ldr	r2, [pc, #80]	; (802c808 <xPortStartScheduler+0x138>)
 802c7b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802c7bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802c7be:	f000 f8dd 	bl	802c97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802c7c2:	4b12      	ldr	r3, [pc, #72]	; (802c80c <xPortStartScheduler+0x13c>)
 802c7c4:	2200      	movs	r2, #0
 802c7c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802c7c8:	f000 f8fc 	bl	802c9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802c7cc:	4b10      	ldr	r3, [pc, #64]	; (802c810 <xPortStartScheduler+0x140>)
 802c7ce:	681b      	ldr	r3, [r3, #0]
 802c7d0:	4a0f      	ldr	r2, [pc, #60]	; (802c810 <xPortStartScheduler+0x140>)
 802c7d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802c7d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802c7d8:	f7ff ff66 	bl	802c6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802c7dc:	f7fe ffee 	bl	802b7bc <vTaskSwitchContext>
	prvTaskExitError();
 802c7e0:	f7ff ff1e 	bl	802c620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802c7e4:	2300      	movs	r3, #0
}
 802c7e6:	4618      	mov	r0, r3
 802c7e8:	3718      	adds	r7, #24
 802c7ea:	46bd      	mov	sp, r7
 802c7ec:	bd80      	pop	{r7, pc}
 802c7ee:	bf00      	nop
 802c7f0:	e000ed00 	.word	0xe000ed00
 802c7f4:	410fc271 	.word	0x410fc271
 802c7f8:	410fc270 	.word	0x410fc270
 802c7fc:	e000e400 	.word	0xe000e400
 802c800:	20002708 	.word	0x20002708
 802c804:	2000270c 	.word	0x2000270c
 802c808:	e000ed20 	.word	0xe000ed20
 802c80c:	20001440 	.word	0x20001440
 802c810:	e000ef34 	.word	0xe000ef34

0802c814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802c814:	b480      	push	{r7}
 802c816:	b083      	sub	sp, #12
 802c818:	af00      	add	r7, sp, #0
	__asm volatile
 802c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c81e:	f383 8811 	msr	BASEPRI, r3
 802c822:	f3bf 8f6f 	isb	sy
 802c826:	f3bf 8f4f 	dsb	sy
 802c82a:	607b      	str	r3, [r7, #4]
}
 802c82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802c82e:	4b0f      	ldr	r3, [pc, #60]	; (802c86c <vPortEnterCritical+0x58>)
 802c830:	681b      	ldr	r3, [r3, #0]
 802c832:	3301      	adds	r3, #1
 802c834:	4a0d      	ldr	r2, [pc, #52]	; (802c86c <vPortEnterCritical+0x58>)
 802c836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802c838:	4b0c      	ldr	r3, [pc, #48]	; (802c86c <vPortEnterCritical+0x58>)
 802c83a:	681b      	ldr	r3, [r3, #0]
 802c83c:	2b01      	cmp	r3, #1
 802c83e:	d10f      	bne.n	802c860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802c840:	4b0b      	ldr	r3, [pc, #44]	; (802c870 <vPortEnterCritical+0x5c>)
 802c842:	681b      	ldr	r3, [r3, #0]
 802c844:	b2db      	uxtb	r3, r3
 802c846:	2b00      	cmp	r3, #0
 802c848:	d00a      	beq.n	802c860 <vPortEnterCritical+0x4c>
	__asm volatile
 802c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c84e:	f383 8811 	msr	BASEPRI, r3
 802c852:	f3bf 8f6f 	isb	sy
 802c856:	f3bf 8f4f 	dsb	sy
 802c85a:	603b      	str	r3, [r7, #0]
}
 802c85c:	bf00      	nop
 802c85e:	e7fe      	b.n	802c85e <vPortEnterCritical+0x4a>
	}
}
 802c860:	bf00      	nop
 802c862:	370c      	adds	r7, #12
 802c864:	46bd      	mov	sp, r7
 802c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c86a:	4770      	bx	lr
 802c86c:	20001440 	.word	0x20001440
 802c870:	e000ed04 	.word	0xe000ed04

0802c874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802c874:	b480      	push	{r7}
 802c876:	b083      	sub	sp, #12
 802c878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802c87a:	4b12      	ldr	r3, [pc, #72]	; (802c8c4 <vPortExitCritical+0x50>)
 802c87c:	681b      	ldr	r3, [r3, #0]
 802c87e:	2b00      	cmp	r3, #0
 802c880:	d10a      	bne.n	802c898 <vPortExitCritical+0x24>
	__asm volatile
 802c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c886:	f383 8811 	msr	BASEPRI, r3
 802c88a:	f3bf 8f6f 	isb	sy
 802c88e:	f3bf 8f4f 	dsb	sy
 802c892:	607b      	str	r3, [r7, #4]
}
 802c894:	bf00      	nop
 802c896:	e7fe      	b.n	802c896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 802c898:	4b0a      	ldr	r3, [pc, #40]	; (802c8c4 <vPortExitCritical+0x50>)
 802c89a:	681b      	ldr	r3, [r3, #0]
 802c89c:	3b01      	subs	r3, #1
 802c89e:	4a09      	ldr	r2, [pc, #36]	; (802c8c4 <vPortExitCritical+0x50>)
 802c8a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802c8a2:	4b08      	ldr	r3, [pc, #32]	; (802c8c4 <vPortExitCritical+0x50>)
 802c8a4:	681b      	ldr	r3, [r3, #0]
 802c8a6:	2b00      	cmp	r3, #0
 802c8a8:	d105      	bne.n	802c8b6 <vPortExitCritical+0x42>
 802c8aa:	2300      	movs	r3, #0
 802c8ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 802c8ae:	683b      	ldr	r3, [r7, #0]
 802c8b0:	f383 8811 	msr	BASEPRI, r3
}
 802c8b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802c8b6:	bf00      	nop
 802c8b8:	370c      	adds	r7, #12
 802c8ba:	46bd      	mov	sp, r7
 802c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8c0:	4770      	bx	lr
 802c8c2:	bf00      	nop
 802c8c4:	20001440 	.word	0x20001440
	...

0802c8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802c8d0:	f3ef 8009 	mrs	r0, PSP
 802c8d4:	f3bf 8f6f 	isb	sy
 802c8d8:	4b15      	ldr	r3, [pc, #84]	; (802c930 <pxCurrentTCBConst>)
 802c8da:	681a      	ldr	r2, [r3, #0]
 802c8dc:	f01e 0f10 	tst.w	lr, #16
 802c8e0:	bf08      	it	eq
 802c8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802c8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c8ea:	6010      	str	r0, [r2, #0]
 802c8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 802c8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 802c8f4:	f380 8811 	msr	BASEPRI, r0
 802c8f8:	f3bf 8f4f 	dsb	sy
 802c8fc:	f3bf 8f6f 	isb	sy
 802c900:	f7fe ff5c 	bl	802b7bc <vTaskSwitchContext>
 802c904:	f04f 0000 	mov.w	r0, #0
 802c908:	f380 8811 	msr	BASEPRI, r0
 802c90c:	bc09      	pop	{r0, r3}
 802c90e:	6819      	ldr	r1, [r3, #0]
 802c910:	6808      	ldr	r0, [r1, #0]
 802c912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c916:	f01e 0f10 	tst.w	lr, #16
 802c91a:	bf08      	it	eq
 802c91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802c920:	f380 8809 	msr	PSP, r0
 802c924:	f3bf 8f6f 	isb	sy
 802c928:	4770      	bx	lr
 802c92a:	bf00      	nop
 802c92c:	f3af 8000 	nop.w

0802c930 <pxCurrentTCBConst>:
 802c930:	200020dc 	.word	0x200020dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802c934:	bf00      	nop
 802c936:	bf00      	nop

0802c938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802c938:	b580      	push	{r7, lr}
 802c93a:	b082      	sub	sp, #8
 802c93c:	af00      	add	r7, sp, #0
	__asm volatile
 802c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c942:	f383 8811 	msr	BASEPRI, r3
 802c946:	f3bf 8f6f 	isb	sy
 802c94a:	f3bf 8f4f 	dsb	sy
 802c94e:	607b      	str	r3, [r7, #4]
}
 802c950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802c952:	f7fe fe75 	bl	802b640 <xTaskIncrementTick>
 802c956:	4603      	mov	r3, r0
 802c958:	2b00      	cmp	r3, #0
 802c95a:	d003      	beq.n	802c964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802c95c:	4b06      	ldr	r3, [pc, #24]	; (802c978 <xPortSysTickHandler+0x40>)
 802c95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802c962:	601a      	str	r2, [r3, #0]
 802c964:	2300      	movs	r3, #0
 802c966:	603b      	str	r3, [r7, #0]
	__asm volatile
 802c968:	683b      	ldr	r3, [r7, #0]
 802c96a:	f383 8811 	msr	BASEPRI, r3
}
 802c96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 802c970:	bf00      	nop
 802c972:	3708      	adds	r7, #8
 802c974:	46bd      	mov	sp, r7
 802c976:	bd80      	pop	{r7, pc}
 802c978:	e000ed04 	.word	0xe000ed04

0802c97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802c97c:	b480      	push	{r7}
 802c97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802c980:	4b0b      	ldr	r3, [pc, #44]	; (802c9b0 <vPortSetupTimerInterrupt+0x34>)
 802c982:	2200      	movs	r2, #0
 802c984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802c986:	4b0b      	ldr	r3, [pc, #44]	; (802c9b4 <vPortSetupTimerInterrupt+0x38>)
 802c988:	2200      	movs	r2, #0
 802c98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802c98c:	4b0a      	ldr	r3, [pc, #40]	; (802c9b8 <vPortSetupTimerInterrupt+0x3c>)
 802c98e:	681b      	ldr	r3, [r3, #0]
 802c990:	4a0a      	ldr	r2, [pc, #40]	; (802c9bc <vPortSetupTimerInterrupt+0x40>)
 802c992:	fba2 2303 	umull	r2, r3, r2, r3
 802c996:	099b      	lsrs	r3, r3, #6
 802c998:	4a09      	ldr	r2, [pc, #36]	; (802c9c0 <vPortSetupTimerInterrupt+0x44>)
 802c99a:	3b01      	subs	r3, #1
 802c99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802c99e:	4b04      	ldr	r3, [pc, #16]	; (802c9b0 <vPortSetupTimerInterrupt+0x34>)
 802c9a0:	2207      	movs	r2, #7
 802c9a2:	601a      	str	r2, [r3, #0]
}
 802c9a4:	bf00      	nop
 802c9a6:	46bd      	mov	sp, r7
 802c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9ac:	4770      	bx	lr
 802c9ae:	bf00      	nop
 802c9b0:	e000e010 	.word	0xe000e010
 802c9b4:	e000e018 	.word	0xe000e018
 802c9b8:	20000084 	.word	0x20000084
 802c9bc:	10624dd3 	.word	0x10624dd3
 802c9c0:	e000e014 	.word	0xe000e014

0802c9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802c9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802c9d4 <vPortEnableVFP+0x10>
 802c9c8:	6801      	ldr	r1, [r0, #0]
 802c9ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802c9ce:	6001      	str	r1, [r0, #0]
 802c9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802c9d2:	bf00      	nop
 802c9d4:	e000ed88 	.word	0xe000ed88

0802c9d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802c9d8:	b480      	push	{r7}
 802c9da:	b085      	sub	sp, #20
 802c9dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802c9de:	f3ef 8305 	mrs	r3, IPSR
 802c9e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802c9e4:	68fb      	ldr	r3, [r7, #12]
 802c9e6:	2b0f      	cmp	r3, #15
 802c9e8:	d914      	bls.n	802ca14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802c9ea:	4a17      	ldr	r2, [pc, #92]	; (802ca48 <vPortValidateInterruptPriority+0x70>)
 802c9ec:	68fb      	ldr	r3, [r7, #12]
 802c9ee:	4413      	add	r3, r2
 802c9f0:	781b      	ldrb	r3, [r3, #0]
 802c9f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802c9f4:	4b15      	ldr	r3, [pc, #84]	; (802ca4c <vPortValidateInterruptPriority+0x74>)
 802c9f6:	781b      	ldrb	r3, [r3, #0]
 802c9f8:	7afa      	ldrb	r2, [r7, #11]
 802c9fa:	429a      	cmp	r2, r3
 802c9fc:	d20a      	bcs.n	802ca14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ca02:	f383 8811 	msr	BASEPRI, r3
 802ca06:	f3bf 8f6f 	isb	sy
 802ca0a:	f3bf 8f4f 	dsb	sy
 802ca0e:	607b      	str	r3, [r7, #4]
}
 802ca10:	bf00      	nop
 802ca12:	e7fe      	b.n	802ca12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802ca14:	4b0e      	ldr	r3, [pc, #56]	; (802ca50 <vPortValidateInterruptPriority+0x78>)
 802ca16:	681b      	ldr	r3, [r3, #0]
 802ca18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802ca1c:	4b0d      	ldr	r3, [pc, #52]	; (802ca54 <vPortValidateInterruptPriority+0x7c>)
 802ca1e:	681b      	ldr	r3, [r3, #0]
 802ca20:	429a      	cmp	r2, r3
 802ca22:	d90a      	bls.n	802ca3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 802ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ca28:	f383 8811 	msr	BASEPRI, r3
 802ca2c:	f3bf 8f6f 	isb	sy
 802ca30:	f3bf 8f4f 	dsb	sy
 802ca34:	603b      	str	r3, [r7, #0]
}
 802ca36:	bf00      	nop
 802ca38:	e7fe      	b.n	802ca38 <vPortValidateInterruptPriority+0x60>
	}
 802ca3a:	bf00      	nop
 802ca3c:	3714      	adds	r7, #20
 802ca3e:	46bd      	mov	sp, r7
 802ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca44:	4770      	bx	lr
 802ca46:	bf00      	nop
 802ca48:	e000e3f0 	.word	0xe000e3f0
 802ca4c:	20002708 	.word	0x20002708
 802ca50:	e000ed0c 	.word	0xe000ed0c
 802ca54:	2000270c 	.word	0x2000270c

0802ca58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802ca58:	b580      	push	{r7, lr}
 802ca5a:	b08a      	sub	sp, #40	; 0x28
 802ca5c:	af00      	add	r7, sp, #0
 802ca5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802ca60:	2300      	movs	r3, #0
 802ca62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802ca64:	f7fe fd1a 	bl	802b49c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802ca68:	4b5b      	ldr	r3, [pc, #364]	; (802cbd8 <pvPortMalloc+0x180>)
 802ca6a:	681b      	ldr	r3, [r3, #0]
 802ca6c:	2b00      	cmp	r3, #0
 802ca6e:	d101      	bne.n	802ca74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802ca70:	f000 f920 	bl	802ccb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802ca74:	4b59      	ldr	r3, [pc, #356]	; (802cbdc <pvPortMalloc+0x184>)
 802ca76:	681a      	ldr	r2, [r3, #0]
 802ca78:	687b      	ldr	r3, [r7, #4]
 802ca7a:	4013      	ands	r3, r2
 802ca7c:	2b00      	cmp	r3, #0
 802ca7e:	f040 8093 	bne.w	802cba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802ca82:	687b      	ldr	r3, [r7, #4]
 802ca84:	2b00      	cmp	r3, #0
 802ca86:	d01d      	beq.n	802cac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 802ca88:	2208      	movs	r2, #8
 802ca8a:	687b      	ldr	r3, [r7, #4]
 802ca8c:	4413      	add	r3, r2
 802ca8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802ca90:	687b      	ldr	r3, [r7, #4]
 802ca92:	f003 0307 	and.w	r3, r3, #7
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	d014      	beq.n	802cac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	f023 0307 	bic.w	r3, r3, #7
 802caa0:	3308      	adds	r3, #8
 802caa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802caa4:	687b      	ldr	r3, [r7, #4]
 802caa6:	f003 0307 	and.w	r3, r3, #7
 802caaa:	2b00      	cmp	r3, #0
 802caac:	d00a      	beq.n	802cac4 <pvPortMalloc+0x6c>
	__asm volatile
 802caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cab2:	f383 8811 	msr	BASEPRI, r3
 802cab6:	f3bf 8f6f 	isb	sy
 802caba:	f3bf 8f4f 	dsb	sy
 802cabe:	617b      	str	r3, [r7, #20]
}
 802cac0:	bf00      	nop
 802cac2:	e7fe      	b.n	802cac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802cac4:	687b      	ldr	r3, [r7, #4]
 802cac6:	2b00      	cmp	r3, #0
 802cac8:	d06e      	beq.n	802cba8 <pvPortMalloc+0x150>
 802caca:	4b45      	ldr	r3, [pc, #276]	; (802cbe0 <pvPortMalloc+0x188>)
 802cacc:	681b      	ldr	r3, [r3, #0]
 802cace:	687a      	ldr	r2, [r7, #4]
 802cad0:	429a      	cmp	r2, r3
 802cad2:	d869      	bhi.n	802cba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802cad4:	4b43      	ldr	r3, [pc, #268]	; (802cbe4 <pvPortMalloc+0x18c>)
 802cad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802cad8:	4b42      	ldr	r3, [pc, #264]	; (802cbe4 <pvPortMalloc+0x18c>)
 802cada:	681b      	ldr	r3, [r3, #0]
 802cadc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802cade:	e004      	b.n	802caea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 802cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cae6:	681b      	ldr	r3, [r3, #0]
 802cae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802caec:	685b      	ldr	r3, [r3, #4]
 802caee:	687a      	ldr	r2, [r7, #4]
 802caf0:	429a      	cmp	r2, r3
 802caf2:	d903      	bls.n	802cafc <pvPortMalloc+0xa4>
 802caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802caf6:	681b      	ldr	r3, [r3, #0]
 802caf8:	2b00      	cmp	r3, #0
 802cafa:	d1f1      	bne.n	802cae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802cafc:	4b36      	ldr	r3, [pc, #216]	; (802cbd8 <pvPortMalloc+0x180>)
 802cafe:	681b      	ldr	r3, [r3, #0]
 802cb00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cb02:	429a      	cmp	r2, r3
 802cb04:	d050      	beq.n	802cba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802cb06:	6a3b      	ldr	r3, [r7, #32]
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	2208      	movs	r2, #8
 802cb0c:	4413      	add	r3, r2
 802cb0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb12:	681a      	ldr	r2, [r3, #0]
 802cb14:	6a3b      	ldr	r3, [r7, #32]
 802cb16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb1a:	685a      	ldr	r2, [r3, #4]
 802cb1c:	687b      	ldr	r3, [r7, #4]
 802cb1e:	1ad2      	subs	r2, r2, r3
 802cb20:	2308      	movs	r3, #8
 802cb22:	005b      	lsls	r3, r3, #1
 802cb24:	429a      	cmp	r2, r3
 802cb26:	d91f      	bls.n	802cb68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cb2a:	687b      	ldr	r3, [r7, #4]
 802cb2c:	4413      	add	r3, r2
 802cb2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802cb30:	69bb      	ldr	r3, [r7, #24]
 802cb32:	f003 0307 	and.w	r3, r3, #7
 802cb36:	2b00      	cmp	r3, #0
 802cb38:	d00a      	beq.n	802cb50 <pvPortMalloc+0xf8>
	__asm volatile
 802cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cb3e:	f383 8811 	msr	BASEPRI, r3
 802cb42:	f3bf 8f6f 	isb	sy
 802cb46:	f3bf 8f4f 	dsb	sy
 802cb4a:	613b      	str	r3, [r7, #16]
}
 802cb4c:	bf00      	nop
 802cb4e:	e7fe      	b.n	802cb4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb52:	685a      	ldr	r2, [r3, #4]
 802cb54:	687b      	ldr	r3, [r7, #4]
 802cb56:	1ad2      	subs	r2, r2, r3
 802cb58:	69bb      	ldr	r3, [r7, #24]
 802cb5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb5e:	687a      	ldr	r2, [r7, #4]
 802cb60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802cb62:	69b8      	ldr	r0, [r7, #24]
 802cb64:	f000 f90a 	bl	802cd7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802cb68:	4b1d      	ldr	r3, [pc, #116]	; (802cbe0 <pvPortMalloc+0x188>)
 802cb6a:	681a      	ldr	r2, [r3, #0]
 802cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb6e:	685b      	ldr	r3, [r3, #4]
 802cb70:	1ad3      	subs	r3, r2, r3
 802cb72:	4a1b      	ldr	r2, [pc, #108]	; (802cbe0 <pvPortMalloc+0x188>)
 802cb74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802cb76:	4b1a      	ldr	r3, [pc, #104]	; (802cbe0 <pvPortMalloc+0x188>)
 802cb78:	681a      	ldr	r2, [r3, #0]
 802cb7a:	4b1b      	ldr	r3, [pc, #108]	; (802cbe8 <pvPortMalloc+0x190>)
 802cb7c:	681b      	ldr	r3, [r3, #0]
 802cb7e:	429a      	cmp	r2, r3
 802cb80:	d203      	bcs.n	802cb8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802cb82:	4b17      	ldr	r3, [pc, #92]	; (802cbe0 <pvPortMalloc+0x188>)
 802cb84:	681b      	ldr	r3, [r3, #0]
 802cb86:	4a18      	ldr	r2, [pc, #96]	; (802cbe8 <pvPortMalloc+0x190>)
 802cb88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802cb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb8c:	685a      	ldr	r2, [r3, #4]
 802cb8e:	4b13      	ldr	r3, [pc, #76]	; (802cbdc <pvPortMalloc+0x184>)
 802cb90:	681b      	ldr	r3, [r3, #0]
 802cb92:	431a      	orrs	r2, r3
 802cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cb9a:	2200      	movs	r2, #0
 802cb9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802cb9e:	4b13      	ldr	r3, [pc, #76]	; (802cbec <pvPortMalloc+0x194>)
 802cba0:	681b      	ldr	r3, [r3, #0]
 802cba2:	3301      	adds	r3, #1
 802cba4:	4a11      	ldr	r2, [pc, #68]	; (802cbec <pvPortMalloc+0x194>)
 802cba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802cba8:	f7fe fc86 	bl	802b4b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802cbac:	69fb      	ldr	r3, [r7, #28]
 802cbae:	f003 0307 	and.w	r3, r3, #7
 802cbb2:	2b00      	cmp	r3, #0
 802cbb4:	d00a      	beq.n	802cbcc <pvPortMalloc+0x174>
	__asm volatile
 802cbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cbba:	f383 8811 	msr	BASEPRI, r3
 802cbbe:	f3bf 8f6f 	isb	sy
 802cbc2:	f3bf 8f4f 	dsb	sy
 802cbc6:	60fb      	str	r3, [r7, #12]
}
 802cbc8:	bf00      	nop
 802cbca:	e7fe      	b.n	802cbca <pvPortMalloc+0x172>
	return pvReturn;
 802cbcc:	69fb      	ldr	r3, [r7, #28]
}
 802cbce:	4618      	mov	r0, r3
 802cbd0:	3728      	adds	r7, #40	; 0x28
 802cbd2:	46bd      	mov	sp, r7
 802cbd4:	bd80      	pop	{r7, pc}
 802cbd6:	bf00      	nop
 802cbd8:	2001adb8 	.word	0x2001adb8
 802cbdc:	2001adcc 	.word	0x2001adcc
 802cbe0:	2001adbc 	.word	0x2001adbc
 802cbe4:	2001adb0 	.word	0x2001adb0
 802cbe8:	2001adc0 	.word	0x2001adc0
 802cbec:	2001adc4 	.word	0x2001adc4

0802cbf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802cbf0:	b580      	push	{r7, lr}
 802cbf2:	b086      	sub	sp, #24
 802cbf4:	af00      	add	r7, sp, #0
 802cbf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802cbf8:	687b      	ldr	r3, [r7, #4]
 802cbfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802cbfc:	687b      	ldr	r3, [r7, #4]
 802cbfe:	2b00      	cmp	r3, #0
 802cc00:	d04d      	beq.n	802cc9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802cc02:	2308      	movs	r3, #8
 802cc04:	425b      	negs	r3, r3
 802cc06:	697a      	ldr	r2, [r7, #20]
 802cc08:	4413      	add	r3, r2
 802cc0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802cc0c:	697b      	ldr	r3, [r7, #20]
 802cc0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802cc10:	693b      	ldr	r3, [r7, #16]
 802cc12:	685a      	ldr	r2, [r3, #4]
 802cc14:	4b24      	ldr	r3, [pc, #144]	; (802cca8 <vPortFree+0xb8>)
 802cc16:	681b      	ldr	r3, [r3, #0]
 802cc18:	4013      	ands	r3, r2
 802cc1a:	2b00      	cmp	r3, #0
 802cc1c:	d10a      	bne.n	802cc34 <vPortFree+0x44>
	__asm volatile
 802cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cc22:	f383 8811 	msr	BASEPRI, r3
 802cc26:	f3bf 8f6f 	isb	sy
 802cc2a:	f3bf 8f4f 	dsb	sy
 802cc2e:	60fb      	str	r3, [r7, #12]
}
 802cc30:	bf00      	nop
 802cc32:	e7fe      	b.n	802cc32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802cc34:	693b      	ldr	r3, [r7, #16]
 802cc36:	681b      	ldr	r3, [r3, #0]
 802cc38:	2b00      	cmp	r3, #0
 802cc3a:	d00a      	beq.n	802cc52 <vPortFree+0x62>
	__asm volatile
 802cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cc40:	f383 8811 	msr	BASEPRI, r3
 802cc44:	f3bf 8f6f 	isb	sy
 802cc48:	f3bf 8f4f 	dsb	sy
 802cc4c:	60bb      	str	r3, [r7, #8]
}
 802cc4e:	bf00      	nop
 802cc50:	e7fe      	b.n	802cc50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802cc52:	693b      	ldr	r3, [r7, #16]
 802cc54:	685a      	ldr	r2, [r3, #4]
 802cc56:	4b14      	ldr	r3, [pc, #80]	; (802cca8 <vPortFree+0xb8>)
 802cc58:	681b      	ldr	r3, [r3, #0]
 802cc5a:	4013      	ands	r3, r2
 802cc5c:	2b00      	cmp	r3, #0
 802cc5e:	d01e      	beq.n	802cc9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802cc60:	693b      	ldr	r3, [r7, #16]
 802cc62:	681b      	ldr	r3, [r3, #0]
 802cc64:	2b00      	cmp	r3, #0
 802cc66:	d11a      	bne.n	802cc9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802cc68:	693b      	ldr	r3, [r7, #16]
 802cc6a:	685a      	ldr	r2, [r3, #4]
 802cc6c:	4b0e      	ldr	r3, [pc, #56]	; (802cca8 <vPortFree+0xb8>)
 802cc6e:	681b      	ldr	r3, [r3, #0]
 802cc70:	43db      	mvns	r3, r3
 802cc72:	401a      	ands	r2, r3
 802cc74:	693b      	ldr	r3, [r7, #16]
 802cc76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802cc78:	f7fe fc10 	bl	802b49c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802cc7c:	693b      	ldr	r3, [r7, #16]
 802cc7e:	685a      	ldr	r2, [r3, #4]
 802cc80:	4b0a      	ldr	r3, [pc, #40]	; (802ccac <vPortFree+0xbc>)
 802cc82:	681b      	ldr	r3, [r3, #0]
 802cc84:	4413      	add	r3, r2
 802cc86:	4a09      	ldr	r2, [pc, #36]	; (802ccac <vPortFree+0xbc>)
 802cc88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802cc8a:	6938      	ldr	r0, [r7, #16]
 802cc8c:	f000 f876 	bl	802cd7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802cc90:	4b07      	ldr	r3, [pc, #28]	; (802ccb0 <vPortFree+0xc0>)
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	3301      	adds	r3, #1
 802cc96:	4a06      	ldr	r2, [pc, #24]	; (802ccb0 <vPortFree+0xc0>)
 802cc98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802cc9a:	f7fe fc0d 	bl	802b4b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802cc9e:	bf00      	nop
 802cca0:	3718      	adds	r7, #24
 802cca2:	46bd      	mov	sp, r7
 802cca4:	bd80      	pop	{r7, pc}
 802cca6:	bf00      	nop
 802cca8:	2001adcc 	.word	0x2001adcc
 802ccac:	2001adbc 	.word	0x2001adbc
 802ccb0:	2001adc8 	.word	0x2001adc8

0802ccb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802ccb4:	b480      	push	{r7}
 802ccb6:	b085      	sub	sp, #20
 802ccb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802ccba:	4b29      	ldr	r3, [pc, #164]	; (802cd60 <prvHeapInit+0xac>)
 802ccbc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802ccbe:	4b29      	ldr	r3, [pc, #164]	; (802cd64 <prvHeapInit+0xb0>)
 802ccc0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802ccc2:	68fb      	ldr	r3, [r7, #12]
 802ccc4:	f003 0307 	and.w	r3, r3, #7
 802ccc8:	2b00      	cmp	r3, #0
 802ccca:	d00c      	beq.n	802cce6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802cccc:	68fb      	ldr	r3, [r7, #12]
 802ccce:	3307      	adds	r3, #7
 802ccd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802ccd2:	68fb      	ldr	r3, [r7, #12]
 802ccd4:	f023 0307 	bic.w	r3, r3, #7
 802ccd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802ccda:	68ba      	ldr	r2, [r7, #8]
 802ccdc:	68fb      	ldr	r3, [r7, #12]
 802ccde:	1ad3      	subs	r3, r2, r3
 802cce0:	4a20      	ldr	r2, [pc, #128]	; (802cd64 <prvHeapInit+0xb0>)
 802cce2:	4413      	add	r3, r2
 802cce4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802cce6:	68fb      	ldr	r3, [r7, #12]
 802cce8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802ccea:	4a1f      	ldr	r2, [pc, #124]	; (802cd68 <prvHeapInit+0xb4>)
 802ccec:	687b      	ldr	r3, [r7, #4]
 802ccee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802ccf0:	4b1d      	ldr	r3, [pc, #116]	; (802cd68 <prvHeapInit+0xb4>)
 802ccf2:	2200      	movs	r2, #0
 802ccf4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802ccf6:	687b      	ldr	r3, [r7, #4]
 802ccf8:	68ba      	ldr	r2, [r7, #8]
 802ccfa:	4413      	add	r3, r2
 802ccfc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802ccfe:	2208      	movs	r2, #8
 802cd00:	68fb      	ldr	r3, [r7, #12]
 802cd02:	1a9b      	subs	r3, r3, r2
 802cd04:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802cd06:	68fb      	ldr	r3, [r7, #12]
 802cd08:	f023 0307 	bic.w	r3, r3, #7
 802cd0c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802cd0e:	68fb      	ldr	r3, [r7, #12]
 802cd10:	4a16      	ldr	r2, [pc, #88]	; (802cd6c <prvHeapInit+0xb8>)
 802cd12:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802cd14:	4b15      	ldr	r3, [pc, #84]	; (802cd6c <prvHeapInit+0xb8>)
 802cd16:	681b      	ldr	r3, [r3, #0]
 802cd18:	2200      	movs	r2, #0
 802cd1a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802cd1c:	4b13      	ldr	r3, [pc, #76]	; (802cd6c <prvHeapInit+0xb8>)
 802cd1e:	681b      	ldr	r3, [r3, #0]
 802cd20:	2200      	movs	r2, #0
 802cd22:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802cd28:	683b      	ldr	r3, [r7, #0]
 802cd2a:	68fa      	ldr	r2, [r7, #12]
 802cd2c:	1ad2      	subs	r2, r2, r3
 802cd2e:	683b      	ldr	r3, [r7, #0]
 802cd30:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802cd32:	4b0e      	ldr	r3, [pc, #56]	; (802cd6c <prvHeapInit+0xb8>)
 802cd34:	681a      	ldr	r2, [r3, #0]
 802cd36:	683b      	ldr	r3, [r7, #0]
 802cd38:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802cd3a:	683b      	ldr	r3, [r7, #0]
 802cd3c:	685b      	ldr	r3, [r3, #4]
 802cd3e:	4a0c      	ldr	r2, [pc, #48]	; (802cd70 <prvHeapInit+0xbc>)
 802cd40:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802cd42:	683b      	ldr	r3, [r7, #0]
 802cd44:	685b      	ldr	r3, [r3, #4]
 802cd46:	4a0b      	ldr	r2, [pc, #44]	; (802cd74 <prvHeapInit+0xc0>)
 802cd48:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802cd4a:	4b0b      	ldr	r3, [pc, #44]	; (802cd78 <prvHeapInit+0xc4>)
 802cd4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802cd50:	601a      	str	r2, [r3, #0]
}
 802cd52:	bf00      	nop
 802cd54:	3714      	adds	r7, #20
 802cd56:	46bd      	mov	sp, r7
 802cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd5c:	4770      	bx	lr
 802cd5e:	bf00      	nop
 802cd60:	000186a0 	.word	0x000186a0
 802cd64:	20002710 	.word	0x20002710
 802cd68:	2001adb0 	.word	0x2001adb0
 802cd6c:	2001adb8 	.word	0x2001adb8
 802cd70:	2001adc0 	.word	0x2001adc0
 802cd74:	2001adbc 	.word	0x2001adbc
 802cd78:	2001adcc 	.word	0x2001adcc

0802cd7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802cd7c:	b480      	push	{r7}
 802cd7e:	b085      	sub	sp, #20
 802cd80:	af00      	add	r7, sp, #0
 802cd82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802cd84:	4b28      	ldr	r3, [pc, #160]	; (802ce28 <prvInsertBlockIntoFreeList+0xac>)
 802cd86:	60fb      	str	r3, [r7, #12]
 802cd88:	e002      	b.n	802cd90 <prvInsertBlockIntoFreeList+0x14>
 802cd8a:	68fb      	ldr	r3, [r7, #12]
 802cd8c:	681b      	ldr	r3, [r3, #0]
 802cd8e:	60fb      	str	r3, [r7, #12]
 802cd90:	68fb      	ldr	r3, [r7, #12]
 802cd92:	681b      	ldr	r3, [r3, #0]
 802cd94:	687a      	ldr	r2, [r7, #4]
 802cd96:	429a      	cmp	r2, r3
 802cd98:	d8f7      	bhi.n	802cd8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802cd9a:	68fb      	ldr	r3, [r7, #12]
 802cd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802cd9e:	68fb      	ldr	r3, [r7, #12]
 802cda0:	685b      	ldr	r3, [r3, #4]
 802cda2:	68ba      	ldr	r2, [r7, #8]
 802cda4:	4413      	add	r3, r2
 802cda6:	687a      	ldr	r2, [r7, #4]
 802cda8:	429a      	cmp	r2, r3
 802cdaa:	d108      	bne.n	802cdbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802cdac:	68fb      	ldr	r3, [r7, #12]
 802cdae:	685a      	ldr	r2, [r3, #4]
 802cdb0:	687b      	ldr	r3, [r7, #4]
 802cdb2:	685b      	ldr	r3, [r3, #4]
 802cdb4:	441a      	add	r2, r3
 802cdb6:	68fb      	ldr	r3, [r7, #12]
 802cdb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802cdba:	68fb      	ldr	r3, [r7, #12]
 802cdbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802cdbe:	687b      	ldr	r3, [r7, #4]
 802cdc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	685b      	ldr	r3, [r3, #4]
 802cdc6:	68ba      	ldr	r2, [r7, #8]
 802cdc8:	441a      	add	r2, r3
 802cdca:	68fb      	ldr	r3, [r7, #12]
 802cdcc:	681b      	ldr	r3, [r3, #0]
 802cdce:	429a      	cmp	r2, r3
 802cdd0:	d118      	bne.n	802ce04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802cdd2:	68fb      	ldr	r3, [r7, #12]
 802cdd4:	681a      	ldr	r2, [r3, #0]
 802cdd6:	4b15      	ldr	r3, [pc, #84]	; (802ce2c <prvInsertBlockIntoFreeList+0xb0>)
 802cdd8:	681b      	ldr	r3, [r3, #0]
 802cdda:	429a      	cmp	r2, r3
 802cddc:	d00d      	beq.n	802cdfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802cdde:	687b      	ldr	r3, [r7, #4]
 802cde0:	685a      	ldr	r2, [r3, #4]
 802cde2:	68fb      	ldr	r3, [r7, #12]
 802cde4:	681b      	ldr	r3, [r3, #0]
 802cde6:	685b      	ldr	r3, [r3, #4]
 802cde8:	441a      	add	r2, r3
 802cdea:	687b      	ldr	r3, [r7, #4]
 802cdec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802cdee:	68fb      	ldr	r3, [r7, #12]
 802cdf0:	681b      	ldr	r3, [r3, #0]
 802cdf2:	681a      	ldr	r2, [r3, #0]
 802cdf4:	687b      	ldr	r3, [r7, #4]
 802cdf6:	601a      	str	r2, [r3, #0]
 802cdf8:	e008      	b.n	802ce0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802cdfa:	4b0c      	ldr	r3, [pc, #48]	; (802ce2c <prvInsertBlockIntoFreeList+0xb0>)
 802cdfc:	681a      	ldr	r2, [r3, #0]
 802cdfe:	687b      	ldr	r3, [r7, #4]
 802ce00:	601a      	str	r2, [r3, #0]
 802ce02:	e003      	b.n	802ce0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802ce04:	68fb      	ldr	r3, [r7, #12]
 802ce06:	681a      	ldr	r2, [r3, #0]
 802ce08:	687b      	ldr	r3, [r7, #4]
 802ce0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802ce0c:	68fa      	ldr	r2, [r7, #12]
 802ce0e:	687b      	ldr	r3, [r7, #4]
 802ce10:	429a      	cmp	r2, r3
 802ce12:	d002      	beq.n	802ce1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802ce14:	68fb      	ldr	r3, [r7, #12]
 802ce16:	687a      	ldr	r2, [r7, #4]
 802ce18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802ce1a:	bf00      	nop
 802ce1c:	3714      	adds	r7, #20
 802ce1e:	46bd      	mov	sp, r7
 802ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce24:	4770      	bx	lr
 802ce26:	bf00      	nop
 802ce28:	2001adb0 	.word	0x2001adb0
 802ce2c:	2001adb8 	.word	0x2001adb8

0802ce30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 802ce30:	b480      	push	{r7}
 802ce32:	b083      	sub	sp, #12
 802ce34:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 802ce36:	4b24      	ldr	r3, [pc, #144]	; (802cec8 <_DoInit+0x98>)
 802ce38:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 802ce3a:	687b      	ldr	r3, [r7, #4]
 802ce3c:	2203      	movs	r2, #3
 802ce3e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 802ce40:	687b      	ldr	r3, [r7, #4]
 802ce42:	2203      	movs	r2, #3
 802ce44:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 802ce46:	687b      	ldr	r3, [r7, #4]
 802ce48:	4a20      	ldr	r2, [pc, #128]	; (802cecc <_DoInit+0x9c>)
 802ce4a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 802ce4c:	687b      	ldr	r3, [r7, #4]
 802ce4e:	4a20      	ldr	r2, [pc, #128]	; (802ced0 <_DoInit+0xa0>)
 802ce50:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 802ce52:	687b      	ldr	r3, [r7, #4]
 802ce54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ce58:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 802ce5a:	687b      	ldr	r3, [r7, #4]
 802ce5c:	2200      	movs	r2, #0
 802ce5e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 802ce60:	687b      	ldr	r3, [r7, #4]
 802ce62:	2200      	movs	r2, #0
 802ce64:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	2200      	movs	r2, #0
 802ce6a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 802ce6c:	687b      	ldr	r3, [r7, #4]
 802ce6e:	4a17      	ldr	r2, [pc, #92]	; (802cecc <_DoInit+0x9c>)
 802ce70:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 802ce72:	687b      	ldr	r3, [r7, #4]
 802ce74:	4a17      	ldr	r2, [pc, #92]	; (802ced4 <_DoInit+0xa4>)
 802ce76:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 802ce78:	687b      	ldr	r3, [r7, #4]
 802ce7a:	2210      	movs	r2, #16
 802ce7c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	2200      	movs	r2, #0
 802ce82:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 802ce84:	687b      	ldr	r3, [r7, #4]
 802ce86:	2200      	movs	r2, #0
 802ce88:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	2200      	movs	r2, #0
 802ce8e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 802ce90:	687b      	ldr	r3, [r7, #4]
 802ce92:	3307      	adds	r3, #7
 802ce94:	4a10      	ldr	r2, [pc, #64]	; (802ced8 <_DoInit+0xa8>)
 802ce96:	6810      	ldr	r0, [r2, #0]
 802ce98:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802ce9a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 802ce9e:	687b      	ldr	r3, [r7, #4]
 802cea0:	4a0e      	ldr	r2, [pc, #56]	; (802cedc <_DoInit+0xac>)
 802cea2:	6810      	ldr	r0, [r2, #0]
 802cea4:	6018      	str	r0, [r3, #0]
 802cea6:	8891      	ldrh	r1, [r2, #4]
 802cea8:	7992      	ldrb	r2, [r2, #6]
 802ceaa:	8099      	strh	r1, [r3, #4]
 802ceac:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802ceae:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	2220      	movs	r2, #32
 802ceb6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802ceb8:	f3bf 8f5f 	dmb	sy
}
 802cebc:	bf00      	nop
 802cebe:	370c      	adds	r7, #12
 802cec0:	46bd      	mov	sp, r7
 802cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cec6:	4770      	bx	lr
 802cec8:	2001edc0 	.word	0x2001edc0
 802cecc:	0802f3b4 	.word	0x0802f3b4
 802ced0:	2001add0 	.word	0x2001add0
 802ced4:	2001b1d0 	.word	0x2001b1d0
 802ced8:	0802f3c0 	.word	0x0802f3c0
 802cedc:	0802f3c4 	.word	0x0802f3c4

0802cee0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 802cee0:	b580      	push	{r7, lr}
 802cee2:	b08c      	sub	sp, #48	; 0x30
 802cee4:	af00      	add	r7, sp, #0
 802cee6:	60f8      	str	r0, [r7, #12]
 802cee8:	60b9      	str	r1, [r7, #8]
 802ceea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 802ceec:	4b3e      	ldr	r3, [pc, #248]	; (802cfe8 <SEGGER_RTT_ReadNoLock+0x108>)
 802ceee:	623b      	str	r3, [r7, #32]
 802cef0:	6a3b      	ldr	r3, [r7, #32]
 802cef2:	781b      	ldrb	r3, [r3, #0]
 802cef4:	b2db      	uxtb	r3, r3
 802cef6:	2b00      	cmp	r3, #0
 802cef8:	d101      	bne.n	802cefe <SEGGER_RTT_ReadNoLock+0x1e>
 802cefa:	f7ff ff99 	bl	802ce30 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802cefe:	68fa      	ldr	r2, [r7, #12]
 802cf00:	4613      	mov	r3, r2
 802cf02:	005b      	lsls	r3, r3, #1
 802cf04:	4413      	add	r3, r2
 802cf06:	00db      	lsls	r3, r3, #3
 802cf08:	3360      	adds	r3, #96	; 0x60
 802cf0a:	4a37      	ldr	r2, [pc, #220]	; (802cfe8 <SEGGER_RTT_ReadNoLock+0x108>)
 802cf0c:	4413      	add	r3, r2
 802cf0e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 802cf10:	68bb      	ldr	r3, [r7, #8]
 802cf12:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 802cf14:	69fb      	ldr	r3, [r7, #28]
 802cf16:	691b      	ldr	r3, [r3, #16]
 802cf18:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 802cf1a:	69fb      	ldr	r3, [r7, #28]
 802cf1c:	68db      	ldr	r3, [r3, #12]
 802cf1e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 802cf20:	2300      	movs	r3, #0
 802cf22:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 802cf24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cf26:	69bb      	ldr	r3, [r7, #24]
 802cf28:	429a      	cmp	r2, r3
 802cf2a:	d92b      	bls.n	802cf84 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 802cf2c:	69fb      	ldr	r3, [r7, #28]
 802cf2e:	689a      	ldr	r2, [r3, #8]
 802cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cf32:	1ad3      	subs	r3, r2, r3
 802cf34:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 802cf36:	697a      	ldr	r2, [r7, #20]
 802cf38:	687b      	ldr	r3, [r7, #4]
 802cf3a:	4293      	cmp	r3, r2
 802cf3c:	bf28      	it	cs
 802cf3e:	4613      	movcs	r3, r2
 802cf40:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802cf42:	69fb      	ldr	r3, [r7, #28]
 802cf44:	685a      	ldr	r2, [r3, #4]
 802cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cf48:	4413      	add	r3, r2
 802cf4a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802cf4c:	697a      	ldr	r2, [r7, #20]
 802cf4e:	6939      	ldr	r1, [r7, #16]
 802cf50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802cf52:	f001 fb6f 	bl	802e634 <memcpy>
    NumBytesRead += NumBytesRem;
 802cf56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802cf58:	697b      	ldr	r3, [r7, #20]
 802cf5a:	4413      	add	r3, r2
 802cf5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802cf5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cf60:	697b      	ldr	r3, [r7, #20]
 802cf62:	4413      	add	r3, r2
 802cf64:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802cf66:	687a      	ldr	r2, [r7, #4]
 802cf68:	697b      	ldr	r3, [r7, #20]
 802cf6a:	1ad3      	subs	r3, r2, r3
 802cf6c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802cf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cf70:	697b      	ldr	r3, [r7, #20]
 802cf72:	4413      	add	r3, r2
 802cf74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 802cf76:	69fb      	ldr	r3, [r7, #28]
 802cf78:	689b      	ldr	r3, [r3, #8]
 802cf7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cf7c:	429a      	cmp	r2, r3
 802cf7e:	d101      	bne.n	802cf84 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 802cf80:	2300      	movs	r3, #0
 802cf82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 802cf84:	69ba      	ldr	r2, [r7, #24]
 802cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cf88:	1ad3      	subs	r3, r2, r3
 802cf8a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 802cf8c:	697a      	ldr	r2, [r7, #20]
 802cf8e:	687b      	ldr	r3, [r7, #4]
 802cf90:	4293      	cmp	r3, r2
 802cf92:	bf28      	it	cs
 802cf94:	4613      	movcs	r3, r2
 802cf96:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 802cf98:	697b      	ldr	r3, [r7, #20]
 802cf9a:	2b00      	cmp	r3, #0
 802cf9c:	d019      	beq.n	802cfd2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802cf9e:	69fb      	ldr	r3, [r7, #28]
 802cfa0:	685a      	ldr	r2, [r3, #4]
 802cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cfa4:	4413      	add	r3, r2
 802cfa6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802cfa8:	697a      	ldr	r2, [r7, #20]
 802cfaa:	6939      	ldr	r1, [r7, #16]
 802cfac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802cfae:	f001 fb41 	bl	802e634 <memcpy>
    NumBytesRead += NumBytesRem;
 802cfb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802cfb4:	697b      	ldr	r3, [r7, #20]
 802cfb6:	4413      	add	r3, r2
 802cfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802cfba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cfbc:	697b      	ldr	r3, [r7, #20]
 802cfbe:	4413      	add	r3, r2
 802cfc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802cfc2:	687a      	ldr	r2, [r7, #4]
 802cfc4:	697b      	ldr	r3, [r7, #20]
 802cfc6:	1ad3      	subs	r3, r2, r3
 802cfc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802cfca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cfcc:	697b      	ldr	r3, [r7, #20]
 802cfce:	4413      	add	r3, r2
 802cfd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 802cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cfd4:	2b00      	cmp	r3, #0
 802cfd6:	d002      	beq.n	802cfde <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 802cfd8:	69fb      	ldr	r3, [r7, #28]
 802cfda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cfdc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 802cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802cfe0:	4618      	mov	r0, r3
 802cfe2:	3730      	adds	r7, #48	; 0x30
 802cfe4:	46bd      	mov	sp, r7
 802cfe6:	bd80      	pop	{r7, pc}
 802cfe8:	2001edc0 	.word	0x2001edc0

0802cfec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802cfec:	b580      	push	{r7, lr}
 802cfee:	b088      	sub	sp, #32
 802cff0:	af00      	add	r7, sp, #0
 802cff2:	60f8      	str	r0, [r7, #12]
 802cff4:	60b9      	str	r1, [r7, #8]
 802cff6:	607a      	str	r2, [r7, #4]
 802cff8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 802cffa:	4b3d      	ldr	r3, [pc, #244]	; (802d0f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802cffc:	61bb      	str	r3, [r7, #24]
 802cffe:	69bb      	ldr	r3, [r7, #24]
 802d000:	781b      	ldrb	r3, [r3, #0]
 802d002:	b2db      	uxtb	r3, r3
 802d004:	2b00      	cmp	r3, #0
 802d006:	d101      	bne.n	802d00c <SEGGER_RTT_AllocUpBuffer+0x20>
 802d008:	f7ff ff12 	bl	802ce30 <_DoInit>
  SEGGER_RTT_LOCK();
 802d00c:	f3ef 8311 	mrs	r3, BASEPRI
 802d010:	f04f 0120 	mov.w	r1, #32
 802d014:	f381 8811 	msr	BASEPRI, r1
 802d018:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d01a:	4b35      	ldr	r3, [pc, #212]	; (802d0f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802d01c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 802d01e:	2300      	movs	r3, #0
 802d020:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 802d022:	6939      	ldr	r1, [r7, #16]
 802d024:	69fb      	ldr	r3, [r7, #28]
 802d026:	1c5a      	adds	r2, r3, #1
 802d028:	4613      	mov	r3, r2
 802d02a:	005b      	lsls	r3, r3, #1
 802d02c:	4413      	add	r3, r2
 802d02e:	00db      	lsls	r3, r3, #3
 802d030:	440b      	add	r3, r1
 802d032:	3304      	adds	r3, #4
 802d034:	681b      	ldr	r3, [r3, #0]
 802d036:	2b00      	cmp	r3, #0
 802d038:	d008      	beq.n	802d04c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 802d03a:	69fb      	ldr	r3, [r7, #28]
 802d03c:	3301      	adds	r3, #1
 802d03e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 802d040:	693b      	ldr	r3, [r7, #16]
 802d042:	691b      	ldr	r3, [r3, #16]
 802d044:	69fa      	ldr	r2, [r7, #28]
 802d046:	429a      	cmp	r2, r3
 802d048:	dbeb      	blt.n	802d022 <SEGGER_RTT_AllocUpBuffer+0x36>
 802d04a:	e000      	b.n	802d04e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 802d04c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 802d04e:	693b      	ldr	r3, [r7, #16]
 802d050:	691b      	ldr	r3, [r3, #16]
 802d052:	69fa      	ldr	r2, [r7, #28]
 802d054:	429a      	cmp	r2, r3
 802d056:	da3f      	bge.n	802d0d8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 802d058:	6939      	ldr	r1, [r7, #16]
 802d05a:	69fb      	ldr	r3, [r7, #28]
 802d05c:	1c5a      	adds	r2, r3, #1
 802d05e:	4613      	mov	r3, r2
 802d060:	005b      	lsls	r3, r3, #1
 802d062:	4413      	add	r3, r2
 802d064:	00db      	lsls	r3, r3, #3
 802d066:	440b      	add	r3, r1
 802d068:	68fa      	ldr	r2, [r7, #12]
 802d06a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 802d06c:	6939      	ldr	r1, [r7, #16]
 802d06e:	69fb      	ldr	r3, [r7, #28]
 802d070:	1c5a      	adds	r2, r3, #1
 802d072:	4613      	mov	r3, r2
 802d074:	005b      	lsls	r3, r3, #1
 802d076:	4413      	add	r3, r2
 802d078:	00db      	lsls	r3, r3, #3
 802d07a:	440b      	add	r3, r1
 802d07c:	3304      	adds	r3, #4
 802d07e:	68ba      	ldr	r2, [r7, #8]
 802d080:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 802d082:	6939      	ldr	r1, [r7, #16]
 802d084:	69fa      	ldr	r2, [r7, #28]
 802d086:	4613      	mov	r3, r2
 802d088:	005b      	lsls	r3, r3, #1
 802d08a:	4413      	add	r3, r2
 802d08c:	00db      	lsls	r3, r3, #3
 802d08e:	440b      	add	r3, r1
 802d090:	3320      	adds	r3, #32
 802d092:	687a      	ldr	r2, [r7, #4]
 802d094:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 802d096:	6939      	ldr	r1, [r7, #16]
 802d098:	69fa      	ldr	r2, [r7, #28]
 802d09a:	4613      	mov	r3, r2
 802d09c:	005b      	lsls	r3, r3, #1
 802d09e:	4413      	add	r3, r2
 802d0a0:	00db      	lsls	r3, r3, #3
 802d0a2:	440b      	add	r3, r1
 802d0a4:	3328      	adds	r3, #40	; 0x28
 802d0a6:	2200      	movs	r2, #0
 802d0a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 802d0aa:	6939      	ldr	r1, [r7, #16]
 802d0ac:	69fa      	ldr	r2, [r7, #28]
 802d0ae:	4613      	mov	r3, r2
 802d0b0:	005b      	lsls	r3, r3, #1
 802d0b2:	4413      	add	r3, r2
 802d0b4:	00db      	lsls	r3, r3, #3
 802d0b6:	440b      	add	r3, r1
 802d0b8:	3324      	adds	r3, #36	; 0x24
 802d0ba:	2200      	movs	r2, #0
 802d0bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 802d0be:	6939      	ldr	r1, [r7, #16]
 802d0c0:	69fa      	ldr	r2, [r7, #28]
 802d0c2:	4613      	mov	r3, r2
 802d0c4:	005b      	lsls	r3, r3, #1
 802d0c6:	4413      	add	r3, r2
 802d0c8:	00db      	lsls	r3, r3, #3
 802d0ca:	440b      	add	r3, r1
 802d0cc:	332c      	adds	r3, #44	; 0x2c
 802d0ce:	683a      	ldr	r2, [r7, #0]
 802d0d0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d0d2:	f3bf 8f5f 	dmb	sy
 802d0d6:	e002      	b.n	802d0de <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 802d0d8:	f04f 33ff 	mov.w	r3, #4294967295
 802d0dc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 802d0de:	697b      	ldr	r3, [r7, #20]
 802d0e0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 802d0e4:	69fb      	ldr	r3, [r7, #28]
}
 802d0e6:	4618      	mov	r0, r3
 802d0e8:	3720      	adds	r7, #32
 802d0ea:	46bd      	mov	sp, r7
 802d0ec:	bd80      	pop	{r7, pc}
 802d0ee:	bf00      	nop
 802d0f0:	2001edc0 	.word	0x2001edc0

0802d0f4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802d0f4:	b580      	push	{r7, lr}
 802d0f6:	b08a      	sub	sp, #40	; 0x28
 802d0f8:	af00      	add	r7, sp, #0
 802d0fa:	60f8      	str	r0, [r7, #12]
 802d0fc:	60b9      	str	r1, [r7, #8]
 802d0fe:	607a      	str	r2, [r7, #4]
 802d100:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 802d102:	4b21      	ldr	r3, [pc, #132]	; (802d188 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d104:	623b      	str	r3, [r7, #32]
 802d106:	6a3b      	ldr	r3, [r7, #32]
 802d108:	781b      	ldrb	r3, [r3, #0]
 802d10a:	b2db      	uxtb	r3, r3
 802d10c:	2b00      	cmp	r3, #0
 802d10e:	d101      	bne.n	802d114 <SEGGER_RTT_ConfigDownBuffer+0x20>
 802d110:	f7ff fe8e 	bl	802ce30 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d114:	4b1c      	ldr	r3, [pc, #112]	; (802d188 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d116:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 802d118:	68fb      	ldr	r3, [r7, #12]
 802d11a:	2b02      	cmp	r3, #2
 802d11c:	d82c      	bhi.n	802d178 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 802d11e:	f3ef 8311 	mrs	r3, BASEPRI
 802d122:	f04f 0120 	mov.w	r1, #32
 802d126:	f381 8811 	msr	BASEPRI, r1
 802d12a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 802d12c:	68fa      	ldr	r2, [r7, #12]
 802d12e:	4613      	mov	r3, r2
 802d130:	005b      	lsls	r3, r3, #1
 802d132:	4413      	add	r3, r2
 802d134:	00db      	lsls	r3, r3, #3
 802d136:	3360      	adds	r3, #96	; 0x60
 802d138:	69fa      	ldr	r2, [r7, #28]
 802d13a:	4413      	add	r3, r2
 802d13c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 802d13e:	68fb      	ldr	r3, [r7, #12]
 802d140:	2b00      	cmp	r3, #0
 802d142:	d00e      	beq.n	802d162 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 802d144:	697b      	ldr	r3, [r7, #20]
 802d146:	68ba      	ldr	r2, [r7, #8]
 802d148:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 802d14a:	697b      	ldr	r3, [r7, #20]
 802d14c:	687a      	ldr	r2, [r7, #4]
 802d14e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 802d150:	697b      	ldr	r3, [r7, #20]
 802d152:	683a      	ldr	r2, [r7, #0]
 802d154:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 802d156:	697b      	ldr	r3, [r7, #20]
 802d158:	2200      	movs	r2, #0
 802d15a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 802d15c:	697b      	ldr	r3, [r7, #20]
 802d15e:	2200      	movs	r2, #0
 802d160:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 802d162:	697b      	ldr	r3, [r7, #20]
 802d164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d166:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d168:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 802d16c:	69bb      	ldr	r3, [r7, #24]
 802d16e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 802d172:	2300      	movs	r3, #0
 802d174:	627b      	str	r3, [r7, #36]	; 0x24
 802d176:	e002      	b.n	802d17e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 802d178:	f04f 33ff 	mov.w	r3, #4294967295
 802d17c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 802d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802d180:	4618      	mov	r0, r3
 802d182:	3728      	adds	r7, #40	; 0x28
 802d184:	46bd      	mov	sp, r7
 802d186:	bd80      	pop	{r7, pc}
 802d188:	2001edc0 	.word	0x2001edc0

0802d18c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 802d18c:	b480      	push	{r7}
 802d18e:	b087      	sub	sp, #28
 802d190:	af00      	add	r7, sp, #0
 802d192:	60f8      	str	r0, [r7, #12]
 802d194:	60b9      	str	r1, [r7, #8]
 802d196:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 802d198:	2300      	movs	r3, #0
 802d19a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 802d19c:	68bb      	ldr	r3, [r7, #8]
 802d19e:	2b00      	cmp	r3, #0
 802d1a0:	d00f      	beq.n	802d1c2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 802d1a2:	e002      	b.n	802d1aa <_EncodeStr+0x1e>
      Len++;
 802d1a4:	693b      	ldr	r3, [r7, #16]
 802d1a6:	3301      	adds	r3, #1
 802d1a8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 802d1aa:	68ba      	ldr	r2, [r7, #8]
 802d1ac:	693b      	ldr	r3, [r7, #16]
 802d1ae:	4413      	add	r3, r2
 802d1b0:	781b      	ldrb	r3, [r3, #0]
 802d1b2:	2b00      	cmp	r3, #0
 802d1b4:	d1f6      	bne.n	802d1a4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 802d1b6:	693a      	ldr	r2, [r7, #16]
 802d1b8:	687b      	ldr	r3, [r7, #4]
 802d1ba:	429a      	cmp	r2, r3
 802d1bc:	d901      	bls.n	802d1c2 <_EncodeStr+0x36>
      Len = Limit;
 802d1be:	687b      	ldr	r3, [r7, #4]
 802d1c0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 802d1c2:	693b      	ldr	r3, [r7, #16]
 802d1c4:	2bfe      	cmp	r3, #254	; 0xfe
 802d1c6:	d806      	bhi.n	802d1d6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 802d1c8:	68fb      	ldr	r3, [r7, #12]
 802d1ca:	1c5a      	adds	r2, r3, #1
 802d1cc:	60fa      	str	r2, [r7, #12]
 802d1ce:	693a      	ldr	r2, [r7, #16]
 802d1d0:	b2d2      	uxtb	r2, r2
 802d1d2:	701a      	strb	r2, [r3, #0]
 802d1d4:	e011      	b.n	802d1fa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 802d1d6:	68fb      	ldr	r3, [r7, #12]
 802d1d8:	1c5a      	adds	r2, r3, #1
 802d1da:	60fa      	str	r2, [r7, #12]
 802d1dc:	22ff      	movs	r2, #255	; 0xff
 802d1de:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 802d1e0:	68fb      	ldr	r3, [r7, #12]
 802d1e2:	1c5a      	adds	r2, r3, #1
 802d1e4:	60fa      	str	r2, [r7, #12]
 802d1e6:	693a      	ldr	r2, [r7, #16]
 802d1e8:	b2d2      	uxtb	r2, r2
 802d1ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 802d1ec:	693b      	ldr	r3, [r7, #16]
 802d1ee:	0a19      	lsrs	r1, r3, #8
 802d1f0:	68fb      	ldr	r3, [r7, #12]
 802d1f2:	1c5a      	adds	r2, r3, #1
 802d1f4:	60fa      	str	r2, [r7, #12]
 802d1f6:	b2ca      	uxtb	r2, r1
 802d1f8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 802d1fa:	2300      	movs	r3, #0
 802d1fc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d1fe:	e00a      	b.n	802d216 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 802d200:	68ba      	ldr	r2, [r7, #8]
 802d202:	1c53      	adds	r3, r2, #1
 802d204:	60bb      	str	r3, [r7, #8]
 802d206:	68fb      	ldr	r3, [r7, #12]
 802d208:	1c59      	adds	r1, r3, #1
 802d20a:	60f9      	str	r1, [r7, #12]
 802d20c:	7812      	ldrb	r2, [r2, #0]
 802d20e:	701a      	strb	r2, [r3, #0]
    n++;
 802d210:	697b      	ldr	r3, [r7, #20]
 802d212:	3301      	adds	r3, #1
 802d214:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d216:	697a      	ldr	r2, [r7, #20]
 802d218:	693b      	ldr	r3, [r7, #16]
 802d21a:	429a      	cmp	r2, r3
 802d21c:	d3f0      	bcc.n	802d200 <_EncodeStr+0x74>
  }
  return pPayload;
 802d21e:	68fb      	ldr	r3, [r7, #12]
}
 802d220:	4618      	mov	r0, r3
 802d222:	371c      	adds	r7, #28
 802d224:	46bd      	mov	sp, r7
 802d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d22a:	4770      	bx	lr

0802d22c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 802d22c:	b480      	push	{r7}
 802d22e:	b083      	sub	sp, #12
 802d230:	af00      	add	r7, sp, #0
 802d232:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 802d234:	687b      	ldr	r3, [r7, #4]
 802d236:	3304      	adds	r3, #4
}
 802d238:	4618      	mov	r0, r3
 802d23a:	370c      	adds	r7, #12
 802d23c:	46bd      	mov	sp, r7
 802d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d242:	4770      	bx	lr

0802d244 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 802d244:	b580      	push	{r7, lr}
 802d246:	b082      	sub	sp, #8
 802d248:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d24a:	4b36      	ldr	r3, [pc, #216]	; (802d324 <_HandleIncomingPacket+0xe0>)
 802d24c:	7e1b      	ldrb	r3, [r3, #24]
 802d24e:	4618      	mov	r0, r3
 802d250:	1cfb      	adds	r3, r7, #3
 802d252:	2201      	movs	r2, #1
 802d254:	4619      	mov	r1, r3
 802d256:	f7ff fe43 	bl	802cee0 <SEGGER_RTT_ReadNoLock>
 802d25a:	4603      	mov	r3, r0
 802d25c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 802d25e:	687b      	ldr	r3, [r7, #4]
 802d260:	2b00      	cmp	r3, #0
 802d262:	dd54      	ble.n	802d30e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 802d264:	78fb      	ldrb	r3, [r7, #3]
 802d266:	2b80      	cmp	r3, #128	; 0x80
 802d268:	d032      	beq.n	802d2d0 <_HandleIncomingPacket+0x8c>
 802d26a:	2b80      	cmp	r3, #128	; 0x80
 802d26c:	dc42      	bgt.n	802d2f4 <_HandleIncomingPacket+0xb0>
 802d26e:	2b07      	cmp	r3, #7
 802d270:	dc16      	bgt.n	802d2a0 <_HandleIncomingPacket+0x5c>
 802d272:	2b00      	cmp	r3, #0
 802d274:	dd3e      	ble.n	802d2f4 <_HandleIncomingPacket+0xb0>
 802d276:	3b01      	subs	r3, #1
 802d278:	2b06      	cmp	r3, #6
 802d27a:	d83b      	bhi.n	802d2f4 <_HandleIncomingPacket+0xb0>
 802d27c:	a201      	add	r2, pc, #4	; (adr r2, 802d284 <_HandleIncomingPacket+0x40>)
 802d27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d282:	bf00      	nop
 802d284:	0802d2a7 	.word	0x0802d2a7
 802d288:	0802d2ad 	.word	0x0802d2ad
 802d28c:	0802d2b3 	.word	0x0802d2b3
 802d290:	0802d2b9 	.word	0x0802d2b9
 802d294:	0802d2bf 	.word	0x0802d2bf
 802d298:	0802d2c5 	.word	0x0802d2c5
 802d29c:	0802d2cb 	.word	0x0802d2cb
 802d2a0:	2b7f      	cmp	r3, #127	; 0x7f
 802d2a2:	d036      	beq.n	802d312 <_HandleIncomingPacket+0xce>
 802d2a4:	e026      	b.n	802d2f4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 802d2a6:	f000 fc67 	bl	802db78 <SEGGER_SYSVIEW_Start>
      break;
 802d2aa:	e037      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 802d2ac:	f000 fd1e 	bl	802dcec <SEGGER_SYSVIEW_Stop>
      break;
 802d2b0:	e034      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 802d2b2:	f000 fef7 	bl	802e0a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 802d2b6:	e031      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 802d2b8:	f000 febc 	bl	802e034 <SEGGER_SYSVIEW_SendTaskList>
      break;
 802d2bc:	e02e      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 802d2be:	f000 fd3b 	bl	802dd38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 802d2c2:	e02b      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 802d2c4:	f001 f8b0 	bl	802e428 <SEGGER_SYSVIEW_SendNumModules>
      break;
 802d2c8:	e028      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 802d2ca:	f001 f88f 	bl	802e3ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 802d2ce:	e025      	b.n	802d31c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d2d0:	4b14      	ldr	r3, [pc, #80]	; (802d324 <_HandleIncomingPacket+0xe0>)
 802d2d2:	7e1b      	ldrb	r3, [r3, #24]
 802d2d4:	4618      	mov	r0, r3
 802d2d6:	1cfb      	adds	r3, r7, #3
 802d2d8:	2201      	movs	r2, #1
 802d2da:	4619      	mov	r1, r3
 802d2dc:	f7ff fe00 	bl	802cee0 <SEGGER_RTT_ReadNoLock>
 802d2e0:	4603      	mov	r3, r0
 802d2e2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	2b00      	cmp	r3, #0
 802d2e8:	dd15      	ble.n	802d316 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 802d2ea:	78fb      	ldrb	r3, [r7, #3]
 802d2ec:	4618      	mov	r0, r3
 802d2ee:	f000 fffd 	bl	802e2ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 802d2f2:	e010      	b.n	802d316 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 802d2f4:	78fb      	ldrb	r3, [r7, #3]
 802d2f6:	b25b      	sxtb	r3, r3
 802d2f8:	2b00      	cmp	r3, #0
 802d2fa:	da0e      	bge.n	802d31a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d2fc:	4b09      	ldr	r3, [pc, #36]	; (802d324 <_HandleIncomingPacket+0xe0>)
 802d2fe:	7e1b      	ldrb	r3, [r3, #24]
 802d300:	4618      	mov	r0, r3
 802d302:	1cfb      	adds	r3, r7, #3
 802d304:	2201      	movs	r2, #1
 802d306:	4619      	mov	r1, r3
 802d308:	f7ff fdea 	bl	802cee0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 802d30c:	e005      	b.n	802d31a <_HandleIncomingPacket+0xd6>
    }
  }
 802d30e:	bf00      	nop
 802d310:	e004      	b.n	802d31c <_HandleIncomingPacket+0xd8>
      break;
 802d312:	bf00      	nop
 802d314:	e002      	b.n	802d31c <_HandleIncomingPacket+0xd8>
      break;
 802d316:	bf00      	nop
 802d318:	e000      	b.n	802d31c <_HandleIncomingPacket+0xd8>
      break;
 802d31a:	bf00      	nop
}
 802d31c:	bf00      	nop
 802d31e:	3708      	adds	r7, #8
 802d320:	46bd      	mov	sp, r7
 802d322:	bd80      	pop	{r7, pc}
 802d324:	2001b5e8 	.word	0x2001b5e8

0802d328 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 802d328:	b580      	push	{r7, lr}
 802d32a:	b08c      	sub	sp, #48	; 0x30
 802d32c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 802d32e:	2301      	movs	r3, #1
 802d330:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 802d332:	1d3b      	adds	r3, r7, #4
 802d334:	3301      	adds	r3, #1
 802d336:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 802d338:	69fb      	ldr	r3, [r7, #28]
 802d33a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d33c:	4b31      	ldr	r3, [pc, #196]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d33e:	695b      	ldr	r3, [r3, #20]
 802d340:	62bb      	str	r3, [r7, #40]	; 0x28
 802d342:	e00b      	b.n	802d35c <_TrySendOverflowPacket+0x34>
 802d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d346:	b2da      	uxtb	r2, r3
 802d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d34a:	1c59      	adds	r1, r3, #1
 802d34c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d34e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d352:	b2d2      	uxtb	r2, r2
 802d354:	701a      	strb	r2, [r3, #0]
 802d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d358:	09db      	lsrs	r3, r3, #7
 802d35a:	62bb      	str	r3, [r7, #40]	; 0x28
 802d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d35e:	2b7f      	cmp	r3, #127	; 0x7f
 802d360:	d8f0      	bhi.n	802d344 <_TrySendOverflowPacket+0x1c>
 802d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d364:	1c5a      	adds	r2, r3, #1
 802d366:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d36a:	b2d2      	uxtb	r2, r2
 802d36c:	701a      	strb	r2, [r3, #0]
 802d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d370:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d372:	4b25      	ldr	r3, [pc, #148]	; (802d408 <_TrySendOverflowPacket+0xe0>)
 802d374:	681b      	ldr	r3, [r3, #0]
 802d376:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d378:	4b22      	ldr	r3, [pc, #136]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d37a:	68db      	ldr	r3, [r3, #12]
 802d37c:	69ba      	ldr	r2, [r7, #24]
 802d37e:	1ad3      	subs	r3, r2, r3
 802d380:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 802d382:	69fb      	ldr	r3, [r7, #28]
 802d384:	627b      	str	r3, [r7, #36]	; 0x24
 802d386:	697b      	ldr	r3, [r7, #20]
 802d388:	623b      	str	r3, [r7, #32]
 802d38a:	e00b      	b.n	802d3a4 <_TrySendOverflowPacket+0x7c>
 802d38c:	6a3b      	ldr	r3, [r7, #32]
 802d38e:	b2da      	uxtb	r2, r3
 802d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d392:	1c59      	adds	r1, r3, #1
 802d394:	6279      	str	r1, [r7, #36]	; 0x24
 802d396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d39a:	b2d2      	uxtb	r2, r2
 802d39c:	701a      	strb	r2, [r3, #0]
 802d39e:	6a3b      	ldr	r3, [r7, #32]
 802d3a0:	09db      	lsrs	r3, r3, #7
 802d3a2:	623b      	str	r3, [r7, #32]
 802d3a4:	6a3b      	ldr	r3, [r7, #32]
 802d3a6:	2b7f      	cmp	r3, #127	; 0x7f
 802d3a8:	d8f0      	bhi.n	802d38c <_TrySendOverflowPacket+0x64>
 802d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d3ac:	1c5a      	adds	r2, r3, #1
 802d3ae:	627a      	str	r2, [r7, #36]	; 0x24
 802d3b0:	6a3a      	ldr	r2, [r7, #32]
 802d3b2:	b2d2      	uxtb	r2, r2
 802d3b4:	701a      	strb	r2, [r3, #0]
 802d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d3b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 802d3ba:	4b12      	ldr	r3, [pc, #72]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3bc:	785b      	ldrb	r3, [r3, #1]
 802d3be:	4618      	mov	r0, r3
 802d3c0:	1d3b      	adds	r3, r7, #4
 802d3c2:	69fa      	ldr	r2, [r7, #28]
 802d3c4:	1ad3      	subs	r3, r2, r3
 802d3c6:	461a      	mov	r2, r3
 802d3c8:	1d3b      	adds	r3, r7, #4
 802d3ca:	4619      	mov	r1, r3
 802d3cc:	f7d2 ff00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d3d0:	4603      	mov	r3, r0
 802d3d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 802d3d4:	693b      	ldr	r3, [r7, #16]
 802d3d6:	2b00      	cmp	r3, #0
 802d3d8:	d009      	beq.n	802d3ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d3da:	4a0a      	ldr	r2, [pc, #40]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3dc:	69bb      	ldr	r3, [r7, #24]
 802d3de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 802d3e0:	4b08      	ldr	r3, [pc, #32]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3e2:	781b      	ldrb	r3, [r3, #0]
 802d3e4:	3b01      	subs	r3, #1
 802d3e6:	b2da      	uxtb	r2, r3
 802d3e8:	4b06      	ldr	r3, [pc, #24]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3ea:	701a      	strb	r2, [r3, #0]
 802d3ec:	e004      	b.n	802d3f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 802d3ee:	4b05      	ldr	r3, [pc, #20]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3f0:	695b      	ldr	r3, [r3, #20]
 802d3f2:	3301      	adds	r3, #1
 802d3f4:	4a03      	ldr	r2, [pc, #12]	; (802d404 <_TrySendOverflowPacket+0xdc>)
 802d3f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 802d3f8:	693b      	ldr	r3, [r7, #16]
}
 802d3fa:	4618      	mov	r0, r3
 802d3fc:	3730      	adds	r7, #48	; 0x30
 802d3fe:	46bd      	mov	sp, r7
 802d400:	bd80      	pop	{r7, pc}
 802d402:	bf00      	nop
 802d404:	2001b5e8 	.word	0x2001b5e8
 802d408:	e0001004 	.word	0xe0001004

0802d40c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 802d40c:	b580      	push	{r7, lr}
 802d40e:	b08a      	sub	sp, #40	; 0x28
 802d410:	af00      	add	r7, sp, #0
 802d412:	60f8      	str	r0, [r7, #12]
 802d414:	60b9      	str	r1, [r7, #8]
 802d416:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 802d418:	4b6c      	ldr	r3, [pc, #432]	; (802d5cc <_SendPacket+0x1c0>)
 802d41a:	781b      	ldrb	r3, [r3, #0]
 802d41c:	2b01      	cmp	r3, #1
 802d41e:	d010      	beq.n	802d442 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 802d420:	4b6a      	ldr	r3, [pc, #424]	; (802d5cc <_SendPacket+0x1c0>)
 802d422:	781b      	ldrb	r3, [r3, #0]
 802d424:	2b00      	cmp	r3, #0
 802d426:	f000 80a3 	beq.w	802d570 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 802d42a:	4b68      	ldr	r3, [pc, #416]	; (802d5cc <_SendPacket+0x1c0>)
 802d42c:	781b      	ldrb	r3, [r3, #0]
 802d42e:	2b02      	cmp	r3, #2
 802d430:	d109      	bne.n	802d446 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 802d432:	f7ff ff79 	bl	802d328 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 802d436:	4b65      	ldr	r3, [pc, #404]	; (802d5cc <_SendPacket+0x1c0>)
 802d438:	781b      	ldrb	r3, [r3, #0]
 802d43a:	2b01      	cmp	r3, #1
 802d43c:	f040 809a 	bne.w	802d574 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 802d440:	e001      	b.n	802d446 <_SendPacket+0x3a>
    goto Send;
 802d442:	bf00      	nop
 802d444:	e000      	b.n	802d448 <_SendPacket+0x3c>
Send:
 802d446:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 802d448:	687b      	ldr	r3, [r7, #4]
 802d44a:	2b1f      	cmp	r3, #31
 802d44c:	d809      	bhi.n	802d462 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 802d44e:	4b5f      	ldr	r3, [pc, #380]	; (802d5cc <_SendPacket+0x1c0>)
 802d450:	69da      	ldr	r2, [r3, #28]
 802d452:	687b      	ldr	r3, [r7, #4]
 802d454:	fa22 f303 	lsr.w	r3, r2, r3
 802d458:	f003 0301 	and.w	r3, r3, #1
 802d45c:	2b00      	cmp	r3, #0
 802d45e:	f040 808b 	bne.w	802d578 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 802d462:	687b      	ldr	r3, [r7, #4]
 802d464:	2b17      	cmp	r3, #23
 802d466:	d807      	bhi.n	802d478 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 802d468:	68fb      	ldr	r3, [r7, #12]
 802d46a:	3b01      	subs	r3, #1
 802d46c:	60fb      	str	r3, [r7, #12]
 802d46e:	687b      	ldr	r3, [r7, #4]
 802d470:	b2da      	uxtb	r2, r3
 802d472:	68fb      	ldr	r3, [r7, #12]
 802d474:	701a      	strb	r2, [r3, #0]
 802d476:	e03d      	b.n	802d4f4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 802d478:	68ba      	ldr	r2, [r7, #8]
 802d47a:	68fb      	ldr	r3, [r7, #12]
 802d47c:	1ad3      	subs	r3, r2, r3
 802d47e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 802d480:	69fb      	ldr	r3, [r7, #28]
 802d482:	2b7f      	cmp	r3, #127	; 0x7f
 802d484:	d912      	bls.n	802d4ac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 802d486:	69fb      	ldr	r3, [r7, #28]
 802d488:	09da      	lsrs	r2, r3, #7
 802d48a:	68fb      	ldr	r3, [r7, #12]
 802d48c:	3b01      	subs	r3, #1
 802d48e:	60fb      	str	r3, [r7, #12]
 802d490:	b2d2      	uxtb	r2, r2
 802d492:	68fb      	ldr	r3, [r7, #12]
 802d494:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 802d496:	69fb      	ldr	r3, [r7, #28]
 802d498:	b2db      	uxtb	r3, r3
 802d49a:	68fa      	ldr	r2, [r7, #12]
 802d49c:	3a01      	subs	r2, #1
 802d49e:	60fa      	str	r2, [r7, #12]
 802d4a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d4a4:	b2da      	uxtb	r2, r3
 802d4a6:	68fb      	ldr	r3, [r7, #12]
 802d4a8:	701a      	strb	r2, [r3, #0]
 802d4aa:	e006      	b.n	802d4ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 802d4ac:	68fb      	ldr	r3, [r7, #12]
 802d4ae:	3b01      	subs	r3, #1
 802d4b0:	60fb      	str	r3, [r7, #12]
 802d4b2:	69fb      	ldr	r3, [r7, #28]
 802d4b4:	b2da      	uxtb	r2, r3
 802d4b6:	68fb      	ldr	r3, [r7, #12]
 802d4b8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 802d4ba:	687b      	ldr	r3, [r7, #4]
 802d4bc:	2b7f      	cmp	r3, #127	; 0x7f
 802d4be:	d912      	bls.n	802d4e6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 802d4c0:	687b      	ldr	r3, [r7, #4]
 802d4c2:	09da      	lsrs	r2, r3, #7
 802d4c4:	68fb      	ldr	r3, [r7, #12]
 802d4c6:	3b01      	subs	r3, #1
 802d4c8:	60fb      	str	r3, [r7, #12]
 802d4ca:	b2d2      	uxtb	r2, r2
 802d4cc:	68fb      	ldr	r3, [r7, #12]
 802d4ce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 802d4d0:	687b      	ldr	r3, [r7, #4]
 802d4d2:	b2db      	uxtb	r3, r3
 802d4d4:	68fa      	ldr	r2, [r7, #12]
 802d4d6:	3a01      	subs	r2, #1
 802d4d8:	60fa      	str	r2, [r7, #12]
 802d4da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d4de:	b2da      	uxtb	r2, r3
 802d4e0:	68fb      	ldr	r3, [r7, #12]
 802d4e2:	701a      	strb	r2, [r3, #0]
 802d4e4:	e006      	b.n	802d4f4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 802d4e6:	68fb      	ldr	r3, [r7, #12]
 802d4e8:	3b01      	subs	r3, #1
 802d4ea:	60fb      	str	r3, [r7, #12]
 802d4ec:	687b      	ldr	r3, [r7, #4]
 802d4ee:	b2da      	uxtb	r2, r3
 802d4f0:	68fb      	ldr	r3, [r7, #12]
 802d4f2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d4f4:	4b36      	ldr	r3, [pc, #216]	; (802d5d0 <_SendPacket+0x1c4>)
 802d4f6:	681b      	ldr	r3, [r3, #0]
 802d4f8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d4fa:	4b34      	ldr	r3, [pc, #208]	; (802d5cc <_SendPacket+0x1c0>)
 802d4fc:	68db      	ldr	r3, [r3, #12]
 802d4fe:	69ba      	ldr	r2, [r7, #24]
 802d500:	1ad3      	subs	r3, r2, r3
 802d502:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 802d504:	68bb      	ldr	r3, [r7, #8]
 802d506:	627b      	str	r3, [r7, #36]	; 0x24
 802d508:	697b      	ldr	r3, [r7, #20]
 802d50a:	623b      	str	r3, [r7, #32]
 802d50c:	e00b      	b.n	802d526 <_SendPacket+0x11a>
 802d50e:	6a3b      	ldr	r3, [r7, #32]
 802d510:	b2da      	uxtb	r2, r3
 802d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d514:	1c59      	adds	r1, r3, #1
 802d516:	6279      	str	r1, [r7, #36]	; 0x24
 802d518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d51c:	b2d2      	uxtb	r2, r2
 802d51e:	701a      	strb	r2, [r3, #0]
 802d520:	6a3b      	ldr	r3, [r7, #32]
 802d522:	09db      	lsrs	r3, r3, #7
 802d524:	623b      	str	r3, [r7, #32]
 802d526:	6a3b      	ldr	r3, [r7, #32]
 802d528:	2b7f      	cmp	r3, #127	; 0x7f
 802d52a:	d8f0      	bhi.n	802d50e <_SendPacket+0x102>
 802d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d52e:	1c5a      	adds	r2, r3, #1
 802d530:	627a      	str	r2, [r7, #36]	; 0x24
 802d532:	6a3a      	ldr	r2, [r7, #32]
 802d534:	b2d2      	uxtb	r2, r2
 802d536:	701a      	strb	r2, [r3, #0]
 802d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d53a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 802d53c:	4b23      	ldr	r3, [pc, #140]	; (802d5cc <_SendPacket+0x1c0>)
 802d53e:	785b      	ldrb	r3, [r3, #1]
 802d540:	4618      	mov	r0, r3
 802d542:	68ba      	ldr	r2, [r7, #8]
 802d544:	68fb      	ldr	r3, [r7, #12]
 802d546:	1ad3      	subs	r3, r2, r3
 802d548:	461a      	mov	r2, r3
 802d54a:	68f9      	ldr	r1, [r7, #12]
 802d54c:	f7d2 fe40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d550:	4603      	mov	r3, r0
 802d552:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 802d554:	693b      	ldr	r3, [r7, #16]
 802d556:	2b00      	cmp	r3, #0
 802d558:	d003      	beq.n	802d562 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d55a:	4a1c      	ldr	r2, [pc, #112]	; (802d5cc <_SendPacket+0x1c0>)
 802d55c:	69bb      	ldr	r3, [r7, #24]
 802d55e:	60d3      	str	r3, [r2, #12]
 802d560:	e00b      	b.n	802d57a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 802d562:	4b1a      	ldr	r3, [pc, #104]	; (802d5cc <_SendPacket+0x1c0>)
 802d564:	781b      	ldrb	r3, [r3, #0]
 802d566:	3301      	adds	r3, #1
 802d568:	b2da      	uxtb	r2, r3
 802d56a:	4b18      	ldr	r3, [pc, #96]	; (802d5cc <_SendPacket+0x1c0>)
 802d56c:	701a      	strb	r2, [r3, #0]
 802d56e:	e004      	b.n	802d57a <_SendPacket+0x16e>
    goto SendDone;
 802d570:	bf00      	nop
 802d572:	e002      	b.n	802d57a <_SendPacket+0x16e>
      goto SendDone;
 802d574:	bf00      	nop
 802d576:	e000      	b.n	802d57a <_SendPacket+0x16e>
      goto SendDone;
 802d578:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 802d57a:	4b14      	ldr	r3, [pc, #80]	; (802d5cc <_SendPacket+0x1c0>)
 802d57c:	7e1b      	ldrb	r3, [r3, #24]
 802d57e:	4619      	mov	r1, r3
 802d580:	4a14      	ldr	r2, [pc, #80]	; (802d5d4 <_SendPacket+0x1c8>)
 802d582:	460b      	mov	r3, r1
 802d584:	005b      	lsls	r3, r3, #1
 802d586:	440b      	add	r3, r1
 802d588:	00db      	lsls	r3, r3, #3
 802d58a:	4413      	add	r3, r2
 802d58c:	336c      	adds	r3, #108	; 0x6c
 802d58e:	681a      	ldr	r2, [r3, #0]
 802d590:	4b0e      	ldr	r3, [pc, #56]	; (802d5cc <_SendPacket+0x1c0>)
 802d592:	7e1b      	ldrb	r3, [r3, #24]
 802d594:	4618      	mov	r0, r3
 802d596:	490f      	ldr	r1, [pc, #60]	; (802d5d4 <_SendPacket+0x1c8>)
 802d598:	4603      	mov	r3, r0
 802d59a:	005b      	lsls	r3, r3, #1
 802d59c:	4403      	add	r3, r0
 802d59e:	00db      	lsls	r3, r3, #3
 802d5a0:	440b      	add	r3, r1
 802d5a2:	3370      	adds	r3, #112	; 0x70
 802d5a4:	681b      	ldr	r3, [r3, #0]
 802d5a6:	429a      	cmp	r2, r3
 802d5a8:	d00b      	beq.n	802d5c2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 802d5aa:	4b08      	ldr	r3, [pc, #32]	; (802d5cc <_SendPacket+0x1c0>)
 802d5ac:	789b      	ldrb	r3, [r3, #2]
 802d5ae:	2b00      	cmp	r3, #0
 802d5b0:	d107      	bne.n	802d5c2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 802d5b2:	4b06      	ldr	r3, [pc, #24]	; (802d5cc <_SendPacket+0x1c0>)
 802d5b4:	2201      	movs	r2, #1
 802d5b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 802d5b8:	f7ff fe44 	bl	802d244 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 802d5bc:	4b03      	ldr	r3, [pc, #12]	; (802d5cc <_SendPacket+0x1c0>)
 802d5be:	2200      	movs	r2, #0
 802d5c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 802d5c2:	bf00      	nop
 802d5c4:	3728      	adds	r7, #40	; 0x28
 802d5c6:	46bd      	mov	sp, r7
 802d5c8:	bd80      	pop	{r7, pc}
 802d5ca:	bf00      	nop
 802d5cc:	2001b5e8 	.word	0x2001b5e8
 802d5d0:	e0001004 	.word	0xe0001004
 802d5d4:	2001edc0 	.word	0x2001edc0

0802d5d8 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 802d5d8:	b580      	push	{r7, lr}
 802d5da:	b0a2      	sub	sp, #136	; 0x88
 802d5dc:	af00      	add	r7, sp, #0
 802d5de:	60f8      	str	r0, [r7, #12]
 802d5e0:	60b9      	str	r1, [r7, #8]
 802d5e2:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 802d5e4:	68fb      	ldr	r3, [r7, #12]
 802d5e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 802d5e8:	2300      	movs	r3, #0
 802d5ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 802d5ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d5f0:	1c5a      	adds	r2, r3, #1
 802d5f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 802d5f4:	781b      	ldrb	r3, [r3, #0]
 802d5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 802d5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d5fe:	2b00      	cmp	r3, #0
 802d600:	d01e      	beq.n	802d640 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 802d602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d606:	2b25      	cmp	r3, #37	; 0x25
 802d608:	d1f1      	bne.n	802d5ee <_VPrintHost+0x16>
      c = *p;
 802d60a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d60c:	781b      	ldrb	r3, [r3, #0]
 802d60e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 802d612:	687b      	ldr	r3, [r7, #4]
 802d614:	681b      	ldr	r3, [r3, #0]
 802d616:	1d19      	adds	r1, r3, #4
 802d618:	687a      	ldr	r2, [r7, #4]
 802d61a:	6011      	str	r1, [r2, #0]
 802d61c:	6819      	ldr	r1, [r3, #0]
 802d61e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d622:	1c5a      	adds	r2, r3, #1
 802d624:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802d628:	460a      	mov	r2, r1
 802d62a:	009b      	lsls	r3, r3, #2
 802d62c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 802d630:	440b      	add	r3, r1
 802d632:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 802d636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d63a:	2b10      	cmp	r3, #16
 802d63c:	d002      	beq.n	802d644 <_VPrintHost+0x6c>
    c = *p++;
 802d63e:	e7d6      	b.n	802d5ee <_VPrintHost+0x16>
      break;
 802d640:	bf00      	nop
 802d642:	e000      	b.n	802d646 <_VPrintHost+0x6e>
        break;
 802d644:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 802d646:	f3ef 8311 	mrs	r3, BASEPRI
 802d64a:	f04f 0120 	mov.w	r1, #32
 802d64e:	f381 8811 	msr	BASEPRI, r1
 802d652:	65bb      	str	r3, [r7, #88]	; 0x58
 802d654:	483f      	ldr	r0, [pc, #252]	; (802d754 <_VPrintHost+0x17c>)
 802d656:	f7ff fde9 	bl	802d22c <_PreparePacket>
 802d65a:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802d65c:	2280      	movs	r2, #128	; 0x80
 802d65e:	68f9      	ldr	r1, [r7, #12]
 802d660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d662:	f7ff fd93 	bl	802d18c <_EncodeStr>
 802d666:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 802d668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d66a:	677b      	str	r3, [r7, #116]	; 0x74
 802d66c:	68bb      	ldr	r3, [r7, #8]
 802d66e:	673b      	str	r3, [r7, #112]	; 0x70
 802d670:	e00b      	b.n	802d68a <_VPrintHost+0xb2>
 802d672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d674:	b2da      	uxtb	r2, r3
 802d676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d678:	1c59      	adds	r1, r3, #1
 802d67a:	6779      	str	r1, [r7, #116]	; 0x74
 802d67c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d680:	b2d2      	uxtb	r2, r2
 802d682:	701a      	strb	r2, [r3, #0]
 802d684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d686:	09db      	lsrs	r3, r3, #7
 802d688:	673b      	str	r3, [r7, #112]	; 0x70
 802d68a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d68c:	2b7f      	cmp	r3, #127	; 0x7f
 802d68e:	d8f0      	bhi.n	802d672 <_VPrintHost+0x9a>
 802d690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d692:	1c5a      	adds	r2, r3, #1
 802d694:	677a      	str	r2, [r7, #116]	; 0x74
 802d696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802d698:	b2d2      	uxtb	r2, r2
 802d69a:	701a      	strb	r2, [r3, #0]
 802d69c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d69e:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 802d6a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d6a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d6a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 802d6aa:	e00b      	b.n	802d6c4 <_VPrintHost+0xec>
 802d6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d6ae:	b2da      	uxtb	r2, r3
 802d6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d6b2:	1c59      	adds	r1, r3, #1
 802d6b4:	66f9      	str	r1, [r7, #108]	; 0x6c
 802d6b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d6ba:	b2d2      	uxtb	r2, r2
 802d6bc:	701a      	strb	r2, [r3, #0]
 802d6be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d6c0:	09db      	lsrs	r3, r3, #7
 802d6c2:	66bb      	str	r3, [r7, #104]	; 0x68
 802d6c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d6c6:	2b7f      	cmp	r3, #127	; 0x7f
 802d6c8:	d8f0      	bhi.n	802d6ac <_VPrintHost+0xd4>
 802d6ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d6cc:	1c5a      	adds	r2, r3, #1
 802d6ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 802d6d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802d6d2:	b2d2      	uxtb	r2, r2
 802d6d4:	701a      	strb	r2, [r3, #0]
 802d6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d6d8:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 802d6da:	f107 0314 	add.w	r3, r7, #20
 802d6de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802d6e2:	e022      	b.n	802d72a <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 802d6e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d6e6:	667b      	str	r3, [r7, #100]	; 0x64
 802d6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802d6ec:	681b      	ldr	r3, [r3, #0]
 802d6ee:	663b      	str	r3, [r7, #96]	; 0x60
 802d6f0:	e00b      	b.n	802d70a <_VPrintHost+0x132>
 802d6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d6f4:	b2da      	uxtb	r2, r3
 802d6f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d6f8:	1c59      	adds	r1, r3, #1
 802d6fa:	6679      	str	r1, [r7, #100]	; 0x64
 802d6fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d700:	b2d2      	uxtb	r2, r2
 802d702:	701a      	strb	r2, [r3, #0]
 802d704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d706:	09db      	lsrs	r3, r3, #7
 802d708:	663b      	str	r3, [r7, #96]	; 0x60
 802d70a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d70c:	2b7f      	cmp	r3, #127	; 0x7f
 802d70e:	d8f0      	bhi.n	802d6f2 <_VPrintHost+0x11a>
 802d710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d712:	1c5a      	adds	r2, r3, #1
 802d714:	667a      	str	r2, [r7, #100]	; 0x64
 802d716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802d718:	b2d2      	uxtb	r2, r2
 802d71a:	701a      	strb	r2, [r3, #0]
 802d71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d71e:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 802d720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802d724:	3304      	adds	r3, #4
 802d726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802d72a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d72e:	1e5a      	subs	r2, r3, #1
 802d730:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802d734:	2b00      	cmp	r3, #0
 802d736:	d1d5      	bne.n	802d6e4 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802d738:	221a      	movs	r2, #26
 802d73a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802d73c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d73e:	f7ff fe65 	bl	802d40c <_SendPacket>
    RECORD_END();
 802d742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802d744:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 802d748:	2300      	movs	r3, #0
}
 802d74a:	4618      	mov	r0, r3
 802d74c:	3788      	adds	r7, #136	; 0x88
 802d74e:	46bd      	mov	sp, r7
 802d750:	bd80      	pop	{r7, pc}
 802d752:	bf00      	nop
 802d754:	2001b618 	.word	0x2001b618

0802d758 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 802d758:	b580      	push	{r7, lr}
 802d75a:	b086      	sub	sp, #24
 802d75c:	af02      	add	r7, sp, #8
 802d75e:	60f8      	str	r0, [r7, #12]
 802d760:	60b9      	str	r1, [r7, #8]
 802d762:	607a      	str	r2, [r7, #4]
 802d764:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802d766:	2300      	movs	r3, #0
 802d768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d76c:	4917      	ldr	r1, [pc, #92]	; (802d7cc <SEGGER_SYSVIEW_Init+0x74>)
 802d76e:	4818      	ldr	r0, [pc, #96]	; (802d7d0 <SEGGER_SYSVIEW_Init+0x78>)
 802d770:	f7ff fc3c 	bl	802cfec <SEGGER_RTT_AllocUpBuffer>
 802d774:	4603      	mov	r3, r0
 802d776:	b2da      	uxtb	r2, r3
 802d778:	4b16      	ldr	r3, [pc, #88]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d77a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 802d77c:	4b15      	ldr	r3, [pc, #84]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d77e:	785a      	ldrb	r2, [r3, #1]
 802d780:	4b14      	ldr	r3, [pc, #80]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d782:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802d784:	4b13      	ldr	r3, [pc, #76]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d786:	7e1b      	ldrb	r3, [r3, #24]
 802d788:	4618      	mov	r0, r3
 802d78a:	2300      	movs	r3, #0
 802d78c:	9300      	str	r3, [sp, #0]
 802d78e:	2308      	movs	r3, #8
 802d790:	4a11      	ldr	r2, [pc, #68]	; (802d7d8 <SEGGER_SYSVIEW_Init+0x80>)
 802d792:	490f      	ldr	r1, [pc, #60]	; (802d7d0 <SEGGER_SYSVIEW_Init+0x78>)
 802d794:	f7ff fcae 	bl	802d0f4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 802d798:	4b0e      	ldr	r3, [pc, #56]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d79a:	2200      	movs	r2, #0
 802d79c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d79e:	4b0f      	ldr	r3, [pc, #60]	; (802d7dc <SEGGER_SYSVIEW_Init+0x84>)
 802d7a0:	681b      	ldr	r3, [r3, #0]
 802d7a2:	4a0c      	ldr	r2, [pc, #48]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 802d7a6:	4a0b      	ldr	r2, [pc, #44]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7a8:	687b      	ldr	r3, [r7, #4]
 802d7aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 802d7ac:	4a09      	ldr	r2, [pc, #36]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7ae:	68fb      	ldr	r3, [r7, #12]
 802d7b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 802d7b2:	4a08      	ldr	r2, [pc, #32]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7b4:	68bb      	ldr	r3, [r7, #8]
 802d7b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 802d7b8:	4a06      	ldr	r2, [pc, #24]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7ba:	683b      	ldr	r3, [r7, #0]
 802d7bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 802d7be:	4b05      	ldr	r3, [pc, #20]	; (802d7d4 <SEGGER_SYSVIEW_Init+0x7c>)
 802d7c0:	2200      	movs	r2, #0
 802d7c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 802d7c4:	bf00      	nop
 802d7c6:	3710      	adds	r7, #16
 802d7c8:	46bd      	mov	sp, r7
 802d7ca:	bd80      	pop	{r7, pc}
 802d7cc:	2001b1e0 	.word	0x2001b1e0
 802d7d0:	0802f3cc 	.word	0x0802f3cc
 802d7d4:	2001b5e8 	.word	0x2001b5e8
 802d7d8:	2001b5e0 	.word	0x2001b5e0
 802d7dc:	e0001004 	.word	0xe0001004

0802d7e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 802d7e0:	b480      	push	{r7}
 802d7e2:	b083      	sub	sp, #12
 802d7e4:	af00      	add	r7, sp, #0
 802d7e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 802d7e8:	4a04      	ldr	r2, [pc, #16]	; (802d7fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 802d7ea:	687b      	ldr	r3, [r7, #4]
 802d7ec:	6113      	str	r3, [r2, #16]
}
 802d7ee:	bf00      	nop
 802d7f0:	370c      	adds	r7, #12
 802d7f2:	46bd      	mov	sp, r7
 802d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7f8:	4770      	bx	lr
 802d7fa:	bf00      	nop
 802d7fc:	2001b5e8 	.word	0x2001b5e8

0802d800 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 802d800:	b580      	push	{r7, lr}
 802d802:	b084      	sub	sp, #16
 802d804:	af00      	add	r7, sp, #0
 802d806:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802d808:	f3ef 8311 	mrs	r3, BASEPRI
 802d80c:	f04f 0120 	mov.w	r1, #32
 802d810:	f381 8811 	msr	BASEPRI, r1
 802d814:	60fb      	str	r3, [r7, #12]
 802d816:	4808      	ldr	r0, [pc, #32]	; (802d838 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 802d818:	f7ff fd08 	bl	802d22c <_PreparePacket>
 802d81c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 802d81e:	687a      	ldr	r2, [r7, #4]
 802d820:	68b9      	ldr	r1, [r7, #8]
 802d822:	68b8      	ldr	r0, [r7, #8]
 802d824:	f7ff fdf2 	bl	802d40c <_SendPacket>
  RECORD_END();
 802d828:	68fb      	ldr	r3, [r7, #12]
 802d82a:	f383 8811 	msr	BASEPRI, r3
}
 802d82e:	bf00      	nop
 802d830:	3710      	adds	r7, #16
 802d832:	46bd      	mov	sp, r7
 802d834:	bd80      	pop	{r7, pc}
 802d836:	bf00      	nop
 802d838:	2001b618 	.word	0x2001b618

0802d83c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 802d83c:	b580      	push	{r7, lr}
 802d83e:	b088      	sub	sp, #32
 802d840:	af00      	add	r7, sp, #0
 802d842:	6078      	str	r0, [r7, #4]
 802d844:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802d846:	f3ef 8311 	mrs	r3, BASEPRI
 802d84a:	f04f 0120 	mov.w	r1, #32
 802d84e:	f381 8811 	msr	BASEPRI, r1
 802d852:	617b      	str	r3, [r7, #20]
 802d854:	4816      	ldr	r0, [pc, #88]	; (802d8b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 802d856:	f7ff fce9 	bl	802d22c <_PreparePacket>
 802d85a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802d85c:	693b      	ldr	r3, [r7, #16]
 802d85e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 802d860:	68fb      	ldr	r3, [r7, #12]
 802d862:	61fb      	str	r3, [r7, #28]
 802d864:	683b      	ldr	r3, [r7, #0]
 802d866:	61bb      	str	r3, [r7, #24]
 802d868:	e00b      	b.n	802d882 <SEGGER_SYSVIEW_RecordU32+0x46>
 802d86a:	69bb      	ldr	r3, [r7, #24]
 802d86c:	b2da      	uxtb	r2, r3
 802d86e:	69fb      	ldr	r3, [r7, #28]
 802d870:	1c59      	adds	r1, r3, #1
 802d872:	61f9      	str	r1, [r7, #28]
 802d874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d878:	b2d2      	uxtb	r2, r2
 802d87a:	701a      	strb	r2, [r3, #0]
 802d87c:	69bb      	ldr	r3, [r7, #24]
 802d87e:	09db      	lsrs	r3, r3, #7
 802d880:	61bb      	str	r3, [r7, #24]
 802d882:	69bb      	ldr	r3, [r7, #24]
 802d884:	2b7f      	cmp	r3, #127	; 0x7f
 802d886:	d8f0      	bhi.n	802d86a <SEGGER_SYSVIEW_RecordU32+0x2e>
 802d888:	69fb      	ldr	r3, [r7, #28]
 802d88a:	1c5a      	adds	r2, r3, #1
 802d88c:	61fa      	str	r2, [r7, #28]
 802d88e:	69ba      	ldr	r2, [r7, #24]
 802d890:	b2d2      	uxtb	r2, r2
 802d892:	701a      	strb	r2, [r3, #0]
 802d894:	69fb      	ldr	r3, [r7, #28]
 802d896:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802d898:	687a      	ldr	r2, [r7, #4]
 802d89a:	68f9      	ldr	r1, [r7, #12]
 802d89c:	6938      	ldr	r0, [r7, #16]
 802d89e:	f7ff fdb5 	bl	802d40c <_SendPacket>
  RECORD_END();
 802d8a2:	697b      	ldr	r3, [r7, #20]
 802d8a4:	f383 8811 	msr	BASEPRI, r3
}
 802d8a8:	bf00      	nop
 802d8aa:	3720      	adds	r7, #32
 802d8ac:	46bd      	mov	sp, r7
 802d8ae:	bd80      	pop	{r7, pc}
 802d8b0:	2001b618 	.word	0x2001b618

0802d8b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 802d8b4:	b580      	push	{r7, lr}
 802d8b6:	b08c      	sub	sp, #48	; 0x30
 802d8b8:	af00      	add	r7, sp, #0
 802d8ba:	60f8      	str	r0, [r7, #12]
 802d8bc:	60b9      	str	r1, [r7, #8]
 802d8be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 802d8c0:	f3ef 8311 	mrs	r3, BASEPRI
 802d8c4:	f04f 0120 	mov.w	r1, #32
 802d8c8:	f381 8811 	msr	BASEPRI, r1
 802d8cc:	61fb      	str	r3, [r7, #28]
 802d8ce:	4825      	ldr	r0, [pc, #148]	; (802d964 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 802d8d0:	f7ff fcac 	bl	802d22c <_PreparePacket>
 802d8d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802d8d6:	69bb      	ldr	r3, [r7, #24]
 802d8d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802d8da:	697b      	ldr	r3, [r7, #20]
 802d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d8de:	68bb      	ldr	r3, [r7, #8]
 802d8e0:	62bb      	str	r3, [r7, #40]	; 0x28
 802d8e2:	e00b      	b.n	802d8fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 802d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d8e6:	b2da      	uxtb	r2, r3
 802d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d8ea:	1c59      	adds	r1, r3, #1
 802d8ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d8ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d8f2:	b2d2      	uxtb	r2, r2
 802d8f4:	701a      	strb	r2, [r3, #0]
 802d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d8f8:	09db      	lsrs	r3, r3, #7
 802d8fa:	62bb      	str	r3, [r7, #40]	; 0x28
 802d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d8fe:	2b7f      	cmp	r3, #127	; 0x7f
 802d900:	d8f0      	bhi.n	802d8e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 802d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d904:	1c5a      	adds	r2, r3, #1
 802d906:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d90a:	b2d2      	uxtb	r2, r2
 802d90c:	701a      	strb	r2, [r3, #0]
 802d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d910:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802d912:	697b      	ldr	r3, [r7, #20]
 802d914:	627b      	str	r3, [r7, #36]	; 0x24
 802d916:	687b      	ldr	r3, [r7, #4]
 802d918:	623b      	str	r3, [r7, #32]
 802d91a:	e00b      	b.n	802d934 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 802d91c:	6a3b      	ldr	r3, [r7, #32]
 802d91e:	b2da      	uxtb	r2, r3
 802d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d922:	1c59      	adds	r1, r3, #1
 802d924:	6279      	str	r1, [r7, #36]	; 0x24
 802d926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d92a:	b2d2      	uxtb	r2, r2
 802d92c:	701a      	strb	r2, [r3, #0]
 802d92e:	6a3b      	ldr	r3, [r7, #32]
 802d930:	09db      	lsrs	r3, r3, #7
 802d932:	623b      	str	r3, [r7, #32]
 802d934:	6a3b      	ldr	r3, [r7, #32]
 802d936:	2b7f      	cmp	r3, #127	; 0x7f
 802d938:	d8f0      	bhi.n	802d91c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 802d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d93c:	1c5a      	adds	r2, r3, #1
 802d93e:	627a      	str	r2, [r7, #36]	; 0x24
 802d940:	6a3a      	ldr	r2, [r7, #32]
 802d942:	b2d2      	uxtb	r2, r2
 802d944:	701a      	strb	r2, [r3, #0]
 802d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d948:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802d94a:	68fa      	ldr	r2, [r7, #12]
 802d94c:	6979      	ldr	r1, [r7, #20]
 802d94e:	69b8      	ldr	r0, [r7, #24]
 802d950:	f7ff fd5c 	bl	802d40c <_SendPacket>
  RECORD_END();
 802d954:	69fb      	ldr	r3, [r7, #28]
 802d956:	f383 8811 	msr	BASEPRI, r3
}
 802d95a:	bf00      	nop
 802d95c:	3730      	adds	r7, #48	; 0x30
 802d95e:	46bd      	mov	sp, r7
 802d960:	bd80      	pop	{r7, pc}
 802d962:	bf00      	nop
 802d964:	2001b618 	.word	0x2001b618

0802d968 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 802d968:	b580      	push	{r7, lr}
 802d96a:	b08e      	sub	sp, #56	; 0x38
 802d96c:	af00      	add	r7, sp, #0
 802d96e:	60f8      	str	r0, [r7, #12]
 802d970:	60b9      	str	r1, [r7, #8]
 802d972:	607a      	str	r2, [r7, #4]
 802d974:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 802d976:	f3ef 8311 	mrs	r3, BASEPRI
 802d97a:	f04f 0120 	mov.w	r1, #32
 802d97e:	f381 8811 	msr	BASEPRI, r1
 802d982:	61fb      	str	r3, [r7, #28]
 802d984:	4832      	ldr	r0, [pc, #200]	; (802da50 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 802d986:	f7ff fc51 	bl	802d22c <_PreparePacket>
 802d98a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802d98c:	69bb      	ldr	r3, [r7, #24]
 802d98e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802d990:	697b      	ldr	r3, [r7, #20]
 802d992:	637b      	str	r3, [r7, #52]	; 0x34
 802d994:	68bb      	ldr	r3, [r7, #8]
 802d996:	633b      	str	r3, [r7, #48]	; 0x30
 802d998:	e00b      	b.n	802d9b2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 802d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d99c:	b2da      	uxtb	r2, r3
 802d99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d9a0:	1c59      	adds	r1, r3, #1
 802d9a2:	6379      	str	r1, [r7, #52]	; 0x34
 802d9a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d9a8:	b2d2      	uxtb	r2, r2
 802d9aa:	701a      	strb	r2, [r3, #0]
 802d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d9ae:	09db      	lsrs	r3, r3, #7
 802d9b0:	633b      	str	r3, [r7, #48]	; 0x30
 802d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d9b4:	2b7f      	cmp	r3, #127	; 0x7f
 802d9b6:	d8f0      	bhi.n	802d99a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 802d9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d9ba:	1c5a      	adds	r2, r3, #1
 802d9bc:	637a      	str	r2, [r7, #52]	; 0x34
 802d9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d9c0:	b2d2      	uxtb	r2, r2
 802d9c2:	701a      	strb	r2, [r3, #0]
 802d9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802d9c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802d9c8:	697b      	ldr	r3, [r7, #20]
 802d9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d9cc:	687b      	ldr	r3, [r7, #4]
 802d9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 802d9d0:	e00b      	b.n	802d9ea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 802d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d9d4:	b2da      	uxtb	r2, r3
 802d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9d8:	1c59      	adds	r1, r3, #1
 802d9da:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d9dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d9e0:	b2d2      	uxtb	r2, r2
 802d9e2:	701a      	strb	r2, [r3, #0]
 802d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d9e6:	09db      	lsrs	r3, r3, #7
 802d9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 802d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d9ec:	2b7f      	cmp	r3, #127	; 0x7f
 802d9ee:	d8f0      	bhi.n	802d9d2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 802d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9f2:	1c5a      	adds	r2, r3, #1
 802d9f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d9f8:	b2d2      	uxtb	r2, r2
 802d9fa:	701a      	strb	r2, [r3, #0]
 802d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d9fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802da00:	697b      	ldr	r3, [r7, #20]
 802da02:	627b      	str	r3, [r7, #36]	; 0x24
 802da04:	683b      	ldr	r3, [r7, #0]
 802da06:	623b      	str	r3, [r7, #32]
 802da08:	e00b      	b.n	802da22 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 802da0a:	6a3b      	ldr	r3, [r7, #32]
 802da0c:	b2da      	uxtb	r2, r3
 802da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da10:	1c59      	adds	r1, r3, #1
 802da12:	6279      	str	r1, [r7, #36]	; 0x24
 802da14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802da18:	b2d2      	uxtb	r2, r2
 802da1a:	701a      	strb	r2, [r3, #0]
 802da1c:	6a3b      	ldr	r3, [r7, #32]
 802da1e:	09db      	lsrs	r3, r3, #7
 802da20:	623b      	str	r3, [r7, #32]
 802da22:	6a3b      	ldr	r3, [r7, #32]
 802da24:	2b7f      	cmp	r3, #127	; 0x7f
 802da26:	d8f0      	bhi.n	802da0a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 802da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da2a:	1c5a      	adds	r2, r3, #1
 802da2c:	627a      	str	r2, [r7, #36]	; 0x24
 802da2e:	6a3a      	ldr	r2, [r7, #32]
 802da30:	b2d2      	uxtb	r2, r2
 802da32:	701a      	strb	r2, [r3, #0]
 802da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802da38:	68fa      	ldr	r2, [r7, #12]
 802da3a:	6979      	ldr	r1, [r7, #20]
 802da3c:	69b8      	ldr	r0, [r7, #24]
 802da3e:	f7ff fce5 	bl	802d40c <_SendPacket>
  RECORD_END();
 802da42:	69fb      	ldr	r3, [r7, #28]
 802da44:	f383 8811 	msr	BASEPRI, r3
}
 802da48:	bf00      	nop
 802da4a:	3738      	adds	r7, #56	; 0x38
 802da4c:	46bd      	mov	sp, r7
 802da4e:	bd80      	pop	{r7, pc}
 802da50:	2001b618 	.word	0x2001b618

0802da54 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 802da54:	b580      	push	{r7, lr}
 802da56:	b090      	sub	sp, #64	; 0x40
 802da58:	af00      	add	r7, sp, #0
 802da5a:	60f8      	str	r0, [r7, #12]
 802da5c:	60b9      	str	r1, [r7, #8]
 802da5e:	607a      	str	r2, [r7, #4]
 802da60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802da62:	f3ef 8311 	mrs	r3, BASEPRI
 802da66:	f04f 0120 	mov.w	r1, #32
 802da6a:	f381 8811 	msr	BASEPRI, r1
 802da6e:	61fb      	str	r3, [r7, #28]
 802da70:	4840      	ldr	r0, [pc, #256]	; (802db74 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 802da72:	f7ff fbdb 	bl	802d22c <_PreparePacket>
 802da76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802da78:	69bb      	ldr	r3, [r7, #24]
 802da7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802da7c:	697b      	ldr	r3, [r7, #20]
 802da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802da80:	68bb      	ldr	r3, [r7, #8]
 802da82:	63bb      	str	r3, [r7, #56]	; 0x38
 802da84:	e00b      	b.n	802da9e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 802da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802da88:	b2da      	uxtb	r2, r3
 802da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802da8c:	1c59      	adds	r1, r3, #1
 802da8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 802da90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802da94:	b2d2      	uxtb	r2, r2
 802da96:	701a      	strb	r2, [r3, #0]
 802da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802da9a:	09db      	lsrs	r3, r3, #7
 802da9c:	63bb      	str	r3, [r7, #56]	; 0x38
 802da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802daa0:	2b7f      	cmp	r3, #127	; 0x7f
 802daa2:	d8f0      	bhi.n	802da86 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 802daa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802daa6:	1c5a      	adds	r2, r3, #1
 802daa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 802daaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802daac:	b2d2      	uxtb	r2, r2
 802daae:	701a      	strb	r2, [r3, #0]
 802dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dab2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802dab4:	697b      	ldr	r3, [r7, #20]
 802dab6:	637b      	str	r3, [r7, #52]	; 0x34
 802dab8:	687b      	ldr	r3, [r7, #4]
 802daba:	633b      	str	r3, [r7, #48]	; 0x30
 802dabc:	e00b      	b.n	802dad6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 802dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dac0:	b2da      	uxtb	r2, r3
 802dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dac4:	1c59      	adds	r1, r3, #1
 802dac6:	6379      	str	r1, [r7, #52]	; 0x34
 802dac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dacc:	b2d2      	uxtb	r2, r2
 802dace:	701a      	strb	r2, [r3, #0]
 802dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dad2:	09db      	lsrs	r3, r3, #7
 802dad4:	633b      	str	r3, [r7, #48]	; 0x30
 802dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dad8:	2b7f      	cmp	r3, #127	; 0x7f
 802dada:	d8f0      	bhi.n	802dabe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 802dadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dade:	1c5a      	adds	r2, r3, #1
 802dae0:	637a      	str	r2, [r7, #52]	; 0x34
 802dae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802dae4:	b2d2      	uxtb	r2, r2
 802dae6:	701a      	strb	r2, [r3, #0]
 802dae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802daea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802daec:	697b      	ldr	r3, [r7, #20]
 802daee:	62fb      	str	r3, [r7, #44]	; 0x2c
 802daf0:	683b      	ldr	r3, [r7, #0]
 802daf2:	62bb      	str	r3, [r7, #40]	; 0x28
 802daf4:	e00b      	b.n	802db0e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 802daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802daf8:	b2da      	uxtb	r2, r3
 802dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dafc:	1c59      	adds	r1, r3, #1
 802dafe:	62f9      	str	r1, [r7, #44]	; 0x2c
 802db00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db04:	b2d2      	uxtb	r2, r2
 802db06:	701a      	strb	r2, [r3, #0]
 802db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802db0a:	09db      	lsrs	r3, r3, #7
 802db0c:	62bb      	str	r3, [r7, #40]	; 0x28
 802db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802db10:	2b7f      	cmp	r3, #127	; 0x7f
 802db12:	d8f0      	bhi.n	802daf6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 802db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802db16:	1c5a      	adds	r2, r3, #1
 802db18:	62fa      	str	r2, [r7, #44]	; 0x2c
 802db1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802db1c:	b2d2      	uxtb	r2, r2
 802db1e:	701a      	strb	r2, [r3, #0]
 802db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802db22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 802db24:	697b      	ldr	r3, [r7, #20]
 802db26:	627b      	str	r3, [r7, #36]	; 0x24
 802db28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802db2a:	623b      	str	r3, [r7, #32]
 802db2c:	e00b      	b.n	802db46 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 802db2e:	6a3b      	ldr	r3, [r7, #32]
 802db30:	b2da      	uxtb	r2, r3
 802db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802db34:	1c59      	adds	r1, r3, #1
 802db36:	6279      	str	r1, [r7, #36]	; 0x24
 802db38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db3c:	b2d2      	uxtb	r2, r2
 802db3e:	701a      	strb	r2, [r3, #0]
 802db40:	6a3b      	ldr	r3, [r7, #32]
 802db42:	09db      	lsrs	r3, r3, #7
 802db44:	623b      	str	r3, [r7, #32]
 802db46:	6a3b      	ldr	r3, [r7, #32]
 802db48:	2b7f      	cmp	r3, #127	; 0x7f
 802db4a:	d8f0      	bhi.n	802db2e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 802db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802db4e:	1c5a      	adds	r2, r3, #1
 802db50:	627a      	str	r2, [r7, #36]	; 0x24
 802db52:	6a3a      	ldr	r2, [r7, #32]
 802db54:	b2d2      	uxtb	r2, r2
 802db56:	701a      	strb	r2, [r3, #0]
 802db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802db5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802db5c:	68fa      	ldr	r2, [r7, #12]
 802db5e:	6979      	ldr	r1, [r7, #20]
 802db60:	69b8      	ldr	r0, [r7, #24]
 802db62:	f7ff fc53 	bl	802d40c <_SendPacket>
  RECORD_END();
 802db66:	69fb      	ldr	r3, [r7, #28]
 802db68:	f383 8811 	msr	BASEPRI, r3
}
 802db6c:	bf00      	nop
 802db6e:	3740      	adds	r7, #64	; 0x40
 802db70:	46bd      	mov	sp, r7
 802db72:	bd80      	pop	{r7, pc}
 802db74:	2001b618 	.word	0x2001b618

0802db78 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 802db78:	b580      	push	{r7, lr}
 802db7a:	b08c      	sub	sp, #48	; 0x30
 802db7c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 802db7e:	4b58      	ldr	r3, [pc, #352]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802db80:	2201      	movs	r2, #1
 802db82:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 802db84:	f3ef 8311 	mrs	r3, BASEPRI
 802db88:	f04f 0120 	mov.w	r1, #32
 802db8c:	f381 8811 	msr	BASEPRI, r1
 802db90:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 802db92:	4b53      	ldr	r3, [pc, #332]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802db94:	785b      	ldrb	r3, [r3, #1]
 802db96:	220a      	movs	r2, #10
 802db98:	4952      	ldr	r1, [pc, #328]	; (802dce4 <SEGGER_SYSVIEW_Start+0x16c>)
 802db9a:	4618      	mov	r0, r3
 802db9c:	f7d2 fb18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 802dba0:	68fb      	ldr	r3, [r7, #12]
 802dba2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 802dba6:	200a      	movs	r0, #10
 802dba8:	f7ff fe2a 	bl	802d800 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802dbac:	f3ef 8311 	mrs	r3, BASEPRI
 802dbb0:	f04f 0120 	mov.w	r1, #32
 802dbb4:	f381 8811 	msr	BASEPRI, r1
 802dbb8:	60bb      	str	r3, [r7, #8]
 802dbba:	484b      	ldr	r0, [pc, #300]	; (802dce8 <SEGGER_SYSVIEW_Start+0x170>)
 802dbbc:	f7ff fb36 	bl	802d22c <_PreparePacket>
 802dbc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 802dbc2:	687b      	ldr	r3, [r7, #4]
 802dbc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802dbc6:	683b      	ldr	r3, [r7, #0]
 802dbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dbca:	4b45      	ldr	r3, [pc, #276]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802dbcc:	685b      	ldr	r3, [r3, #4]
 802dbce:	62bb      	str	r3, [r7, #40]	; 0x28
 802dbd0:	e00b      	b.n	802dbea <SEGGER_SYSVIEW_Start+0x72>
 802dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbd4:	b2da      	uxtb	r2, r3
 802dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbd8:	1c59      	adds	r1, r3, #1
 802dbda:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dbdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dbe0:	b2d2      	uxtb	r2, r2
 802dbe2:	701a      	strb	r2, [r3, #0]
 802dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbe6:	09db      	lsrs	r3, r3, #7
 802dbe8:	62bb      	str	r3, [r7, #40]	; 0x28
 802dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbec:	2b7f      	cmp	r3, #127	; 0x7f
 802dbee:	d8f0      	bhi.n	802dbd2 <SEGGER_SYSVIEW_Start+0x5a>
 802dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbf2:	1c5a      	adds	r2, r3, #1
 802dbf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dbf8:	b2d2      	uxtb	r2, r2
 802dbfa:	701a      	strb	r2, [r3, #0]
 802dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbfe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802dc00:	683b      	ldr	r3, [r7, #0]
 802dc02:	627b      	str	r3, [r7, #36]	; 0x24
 802dc04:	4b36      	ldr	r3, [pc, #216]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802dc06:	689b      	ldr	r3, [r3, #8]
 802dc08:	623b      	str	r3, [r7, #32]
 802dc0a:	e00b      	b.n	802dc24 <SEGGER_SYSVIEW_Start+0xac>
 802dc0c:	6a3b      	ldr	r3, [r7, #32]
 802dc0e:	b2da      	uxtb	r2, r3
 802dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc12:	1c59      	adds	r1, r3, #1
 802dc14:	6279      	str	r1, [r7, #36]	; 0x24
 802dc16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc1a:	b2d2      	uxtb	r2, r2
 802dc1c:	701a      	strb	r2, [r3, #0]
 802dc1e:	6a3b      	ldr	r3, [r7, #32]
 802dc20:	09db      	lsrs	r3, r3, #7
 802dc22:	623b      	str	r3, [r7, #32]
 802dc24:	6a3b      	ldr	r3, [r7, #32]
 802dc26:	2b7f      	cmp	r3, #127	; 0x7f
 802dc28:	d8f0      	bhi.n	802dc0c <SEGGER_SYSVIEW_Start+0x94>
 802dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc2c:	1c5a      	adds	r2, r3, #1
 802dc2e:	627a      	str	r2, [r7, #36]	; 0x24
 802dc30:	6a3a      	ldr	r2, [r7, #32]
 802dc32:	b2d2      	uxtb	r2, r2
 802dc34:	701a      	strb	r2, [r3, #0]
 802dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802dc3a:	683b      	ldr	r3, [r7, #0]
 802dc3c:	61fb      	str	r3, [r7, #28]
 802dc3e:	4b28      	ldr	r3, [pc, #160]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802dc40:	691b      	ldr	r3, [r3, #16]
 802dc42:	61bb      	str	r3, [r7, #24]
 802dc44:	e00b      	b.n	802dc5e <SEGGER_SYSVIEW_Start+0xe6>
 802dc46:	69bb      	ldr	r3, [r7, #24]
 802dc48:	b2da      	uxtb	r2, r3
 802dc4a:	69fb      	ldr	r3, [r7, #28]
 802dc4c:	1c59      	adds	r1, r3, #1
 802dc4e:	61f9      	str	r1, [r7, #28]
 802dc50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc54:	b2d2      	uxtb	r2, r2
 802dc56:	701a      	strb	r2, [r3, #0]
 802dc58:	69bb      	ldr	r3, [r7, #24]
 802dc5a:	09db      	lsrs	r3, r3, #7
 802dc5c:	61bb      	str	r3, [r7, #24]
 802dc5e:	69bb      	ldr	r3, [r7, #24]
 802dc60:	2b7f      	cmp	r3, #127	; 0x7f
 802dc62:	d8f0      	bhi.n	802dc46 <SEGGER_SYSVIEW_Start+0xce>
 802dc64:	69fb      	ldr	r3, [r7, #28]
 802dc66:	1c5a      	adds	r2, r3, #1
 802dc68:	61fa      	str	r2, [r7, #28]
 802dc6a:	69ba      	ldr	r2, [r7, #24]
 802dc6c:	b2d2      	uxtb	r2, r2
 802dc6e:	701a      	strb	r2, [r3, #0]
 802dc70:	69fb      	ldr	r3, [r7, #28]
 802dc72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802dc74:	683b      	ldr	r3, [r7, #0]
 802dc76:	617b      	str	r3, [r7, #20]
 802dc78:	2300      	movs	r3, #0
 802dc7a:	613b      	str	r3, [r7, #16]
 802dc7c:	e00b      	b.n	802dc96 <SEGGER_SYSVIEW_Start+0x11e>
 802dc7e:	693b      	ldr	r3, [r7, #16]
 802dc80:	b2da      	uxtb	r2, r3
 802dc82:	697b      	ldr	r3, [r7, #20]
 802dc84:	1c59      	adds	r1, r3, #1
 802dc86:	6179      	str	r1, [r7, #20]
 802dc88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc8c:	b2d2      	uxtb	r2, r2
 802dc8e:	701a      	strb	r2, [r3, #0]
 802dc90:	693b      	ldr	r3, [r7, #16]
 802dc92:	09db      	lsrs	r3, r3, #7
 802dc94:	613b      	str	r3, [r7, #16]
 802dc96:	693b      	ldr	r3, [r7, #16]
 802dc98:	2b7f      	cmp	r3, #127	; 0x7f
 802dc9a:	d8f0      	bhi.n	802dc7e <SEGGER_SYSVIEW_Start+0x106>
 802dc9c:	697b      	ldr	r3, [r7, #20]
 802dc9e:	1c5a      	adds	r2, r3, #1
 802dca0:	617a      	str	r2, [r7, #20]
 802dca2:	693a      	ldr	r2, [r7, #16]
 802dca4:	b2d2      	uxtb	r2, r2
 802dca6:	701a      	strb	r2, [r3, #0]
 802dca8:	697b      	ldr	r3, [r7, #20]
 802dcaa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802dcac:	2218      	movs	r2, #24
 802dcae:	6839      	ldr	r1, [r7, #0]
 802dcb0:	6878      	ldr	r0, [r7, #4]
 802dcb2:	f7ff fbab 	bl	802d40c <_SendPacket>
      RECORD_END();
 802dcb6:	68bb      	ldr	r3, [r7, #8]
 802dcb8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 802dcbc:	4b08      	ldr	r3, [pc, #32]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dcc0:	2b00      	cmp	r3, #0
 802dcc2:	d002      	beq.n	802dcca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 802dcc4:	4b06      	ldr	r3, [pc, #24]	; (802dce0 <SEGGER_SYSVIEW_Start+0x168>)
 802dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dcc8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 802dcca:	f000 f9eb 	bl	802e0a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 802dcce:	f000 f9b1 	bl	802e034 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 802dcd2:	f000 fba9 	bl	802e428 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 802dcd6:	bf00      	nop
 802dcd8:	3730      	adds	r7, #48	; 0x30
 802dcda:	46bd      	mov	sp, r7
 802dcdc:	bd80      	pop	{r7, pc}
 802dcde:	bf00      	nop
 802dce0:	2001b5e8 	.word	0x2001b5e8
 802dce4:	0802fa30 	.word	0x0802fa30
 802dce8:	2001b618 	.word	0x2001b618

0802dcec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 802dcec:	b580      	push	{r7, lr}
 802dcee:	b082      	sub	sp, #8
 802dcf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802dcf2:	f3ef 8311 	mrs	r3, BASEPRI
 802dcf6:	f04f 0120 	mov.w	r1, #32
 802dcfa:	f381 8811 	msr	BASEPRI, r1
 802dcfe:	607b      	str	r3, [r7, #4]
 802dd00:	480b      	ldr	r0, [pc, #44]	; (802dd30 <SEGGER_SYSVIEW_Stop+0x44>)
 802dd02:	f7ff fa93 	bl	802d22c <_PreparePacket>
 802dd06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 802dd08:	4b0a      	ldr	r3, [pc, #40]	; (802dd34 <SEGGER_SYSVIEW_Stop+0x48>)
 802dd0a:	781b      	ldrb	r3, [r3, #0]
 802dd0c:	2b00      	cmp	r3, #0
 802dd0e:	d007      	beq.n	802dd20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 802dd10:	220b      	movs	r2, #11
 802dd12:	6839      	ldr	r1, [r7, #0]
 802dd14:	6838      	ldr	r0, [r7, #0]
 802dd16:	f7ff fb79 	bl	802d40c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 802dd1a:	4b06      	ldr	r3, [pc, #24]	; (802dd34 <SEGGER_SYSVIEW_Stop+0x48>)
 802dd1c:	2200      	movs	r2, #0
 802dd1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 802dd20:	687b      	ldr	r3, [r7, #4]
 802dd22:	f383 8811 	msr	BASEPRI, r3
}
 802dd26:	bf00      	nop
 802dd28:	3708      	adds	r7, #8
 802dd2a:	46bd      	mov	sp, r7
 802dd2c:	bd80      	pop	{r7, pc}
 802dd2e:	bf00      	nop
 802dd30:	2001b618 	.word	0x2001b618
 802dd34:	2001b5e8 	.word	0x2001b5e8

0802dd38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 802dd38:	b580      	push	{r7, lr}
 802dd3a:	b08c      	sub	sp, #48	; 0x30
 802dd3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802dd3e:	f3ef 8311 	mrs	r3, BASEPRI
 802dd42:	f04f 0120 	mov.w	r1, #32
 802dd46:	f381 8811 	msr	BASEPRI, r1
 802dd4a:	60fb      	str	r3, [r7, #12]
 802dd4c:	4845      	ldr	r0, [pc, #276]	; (802de64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 802dd4e:	f7ff fa6d 	bl	802d22c <_PreparePacket>
 802dd52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 802dd54:	68bb      	ldr	r3, [r7, #8]
 802dd56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802dd58:	687b      	ldr	r3, [r7, #4]
 802dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dd5c:	4b42      	ldr	r3, [pc, #264]	; (802de68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802dd5e:	685b      	ldr	r3, [r3, #4]
 802dd60:	62bb      	str	r3, [r7, #40]	; 0x28
 802dd62:	e00b      	b.n	802dd7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 802dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dd66:	b2da      	uxtb	r2, r3
 802dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dd6a:	1c59      	adds	r1, r3, #1
 802dd6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dd6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dd72:	b2d2      	uxtb	r2, r2
 802dd74:	701a      	strb	r2, [r3, #0]
 802dd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dd78:	09db      	lsrs	r3, r3, #7
 802dd7a:	62bb      	str	r3, [r7, #40]	; 0x28
 802dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dd7e:	2b7f      	cmp	r3, #127	; 0x7f
 802dd80:	d8f0      	bhi.n	802dd64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 802dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dd84:	1c5a      	adds	r2, r3, #1
 802dd86:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dd88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dd8a:	b2d2      	uxtb	r2, r2
 802dd8c:	701a      	strb	r2, [r3, #0]
 802dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dd90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802dd92:	687b      	ldr	r3, [r7, #4]
 802dd94:	627b      	str	r3, [r7, #36]	; 0x24
 802dd96:	4b34      	ldr	r3, [pc, #208]	; (802de68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802dd98:	689b      	ldr	r3, [r3, #8]
 802dd9a:	623b      	str	r3, [r7, #32]
 802dd9c:	e00b      	b.n	802ddb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 802dd9e:	6a3b      	ldr	r3, [r7, #32]
 802dda0:	b2da      	uxtb	r2, r3
 802dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dda4:	1c59      	adds	r1, r3, #1
 802dda6:	6279      	str	r1, [r7, #36]	; 0x24
 802dda8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802ddac:	b2d2      	uxtb	r2, r2
 802ddae:	701a      	strb	r2, [r3, #0]
 802ddb0:	6a3b      	ldr	r3, [r7, #32]
 802ddb2:	09db      	lsrs	r3, r3, #7
 802ddb4:	623b      	str	r3, [r7, #32]
 802ddb6:	6a3b      	ldr	r3, [r7, #32]
 802ddb8:	2b7f      	cmp	r3, #127	; 0x7f
 802ddba:	d8f0      	bhi.n	802dd9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 802ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ddbe:	1c5a      	adds	r2, r3, #1
 802ddc0:	627a      	str	r2, [r7, #36]	; 0x24
 802ddc2:	6a3a      	ldr	r2, [r7, #32]
 802ddc4:	b2d2      	uxtb	r2, r2
 802ddc6:	701a      	strb	r2, [r3, #0]
 802ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ddca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802ddcc:	687b      	ldr	r3, [r7, #4]
 802ddce:	61fb      	str	r3, [r7, #28]
 802ddd0:	4b25      	ldr	r3, [pc, #148]	; (802de68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802ddd2:	691b      	ldr	r3, [r3, #16]
 802ddd4:	61bb      	str	r3, [r7, #24]
 802ddd6:	e00b      	b.n	802ddf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 802ddd8:	69bb      	ldr	r3, [r7, #24]
 802ddda:	b2da      	uxtb	r2, r3
 802dddc:	69fb      	ldr	r3, [r7, #28]
 802ddde:	1c59      	adds	r1, r3, #1
 802dde0:	61f9      	str	r1, [r7, #28]
 802dde2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dde6:	b2d2      	uxtb	r2, r2
 802dde8:	701a      	strb	r2, [r3, #0]
 802ddea:	69bb      	ldr	r3, [r7, #24]
 802ddec:	09db      	lsrs	r3, r3, #7
 802ddee:	61bb      	str	r3, [r7, #24]
 802ddf0:	69bb      	ldr	r3, [r7, #24]
 802ddf2:	2b7f      	cmp	r3, #127	; 0x7f
 802ddf4:	d8f0      	bhi.n	802ddd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 802ddf6:	69fb      	ldr	r3, [r7, #28]
 802ddf8:	1c5a      	adds	r2, r3, #1
 802ddfa:	61fa      	str	r2, [r7, #28]
 802ddfc:	69ba      	ldr	r2, [r7, #24]
 802ddfe:	b2d2      	uxtb	r2, r2
 802de00:	701a      	strb	r2, [r3, #0]
 802de02:	69fb      	ldr	r3, [r7, #28]
 802de04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802de06:	687b      	ldr	r3, [r7, #4]
 802de08:	617b      	str	r3, [r7, #20]
 802de0a:	2300      	movs	r3, #0
 802de0c:	613b      	str	r3, [r7, #16]
 802de0e:	e00b      	b.n	802de28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 802de10:	693b      	ldr	r3, [r7, #16]
 802de12:	b2da      	uxtb	r2, r3
 802de14:	697b      	ldr	r3, [r7, #20]
 802de16:	1c59      	adds	r1, r3, #1
 802de18:	6179      	str	r1, [r7, #20]
 802de1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802de1e:	b2d2      	uxtb	r2, r2
 802de20:	701a      	strb	r2, [r3, #0]
 802de22:	693b      	ldr	r3, [r7, #16]
 802de24:	09db      	lsrs	r3, r3, #7
 802de26:	613b      	str	r3, [r7, #16]
 802de28:	693b      	ldr	r3, [r7, #16]
 802de2a:	2b7f      	cmp	r3, #127	; 0x7f
 802de2c:	d8f0      	bhi.n	802de10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 802de2e:	697b      	ldr	r3, [r7, #20]
 802de30:	1c5a      	adds	r2, r3, #1
 802de32:	617a      	str	r2, [r7, #20]
 802de34:	693a      	ldr	r2, [r7, #16]
 802de36:	b2d2      	uxtb	r2, r2
 802de38:	701a      	strb	r2, [r3, #0]
 802de3a:	697b      	ldr	r3, [r7, #20]
 802de3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802de3e:	2218      	movs	r2, #24
 802de40:	6879      	ldr	r1, [r7, #4]
 802de42:	68b8      	ldr	r0, [r7, #8]
 802de44:	f7ff fae2 	bl	802d40c <_SendPacket>
  RECORD_END();
 802de48:	68fb      	ldr	r3, [r7, #12]
 802de4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 802de4e:	4b06      	ldr	r3, [pc, #24]	; (802de68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802de50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802de52:	2b00      	cmp	r3, #0
 802de54:	d002      	beq.n	802de5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 802de56:	4b04      	ldr	r3, [pc, #16]	; (802de68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802de58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802de5a:	4798      	blx	r3
  }
}
 802de5c:	bf00      	nop
 802de5e:	3730      	adds	r7, #48	; 0x30
 802de60:	46bd      	mov	sp, r7
 802de62:	bd80      	pop	{r7, pc}
 802de64:	2001b618 	.word	0x2001b618
 802de68:	2001b5e8 	.word	0x2001b5e8

0802de6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 802de6c:	b580      	push	{r7, lr}
 802de6e:	b092      	sub	sp, #72	; 0x48
 802de70:	af00      	add	r7, sp, #0
 802de72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 802de74:	f3ef 8311 	mrs	r3, BASEPRI
 802de78:	f04f 0120 	mov.w	r1, #32
 802de7c:	f381 8811 	msr	BASEPRI, r1
 802de80:	617b      	str	r3, [r7, #20]
 802de82:	486a      	ldr	r0, [pc, #424]	; (802e02c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 802de84:	f7ff f9d2 	bl	802d22c <_PreparePacket>
 802de88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802de8a:	693b      	ldr	r3, [r7, #16]
 802de8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802de8e:	68fb      	ldr	r3, [r7, #12]
 802de90:	647b      	str	r3, [r7, #68]	; 0x44
 802de92:	687b      	ldr	r3, [r7, #4]
 802de94:	681a      	ldr	r2, [r3, #0]
 802de96:	4b66      	ldr	r3, [pc, #408]	; (802e030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802de98:	691b      	ldr	r3, [r3, #16]
 802de9a:	1ad3      	subs	r3, r2, r3
 802de9c:	643b      	str	r3, [r7, #64]	; 0x40
 802de9e:	e00b      	b.n	802deb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 802dea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802dea2:	b2da      	uxtb	r2, r3
 802dea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dea6:	1c59      	adds	r1, r3, #1
 802dea8:	6479      	str	r1, [r7, #68]	; 0x44
 802deaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802deae:	b2d2      	uxtb	r2, r2
 802deb0:	701a      	strb	r2, [r3, #0]
 802deb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802deb4:	09db      	lsrs	r3, r3, #7
 802deb6:	643b      	str	r3, [r7, #64]	; 0x40
 802deb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802deba:	2b7f      	cmp	r3, #127	; 0x7f
 802debc:	d8f0      	bhi.n	802dea0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 802debe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dec0:	1c5a      	adds	r2, r3, #1
 802dec2:	647a      	str	r2, [r7, #68]	; 0x44
 802dec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802dec6:	b2d2      	uxtb	r2, r2
 802dec8:	701a      	strb	r2, [r3, #0]
 802deca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802decc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 802dece:	68fb      	ldr	r3, [r7, #12]
 802ded0:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ded2:	687b      	ldr	r3, [r7, #4]
 802ded4:	689b      	ldr	r3, [r3, #8]
 802ded6:	63bb      	str	r3, [r7, #56]	; 0x38
 802ded8:	e00b      	b.n	802def2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 802deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802dedc:	b2da      	uxtb	r2, r3
 802dede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dee0:	1c59      	adds	r1, r3, #1
 802dee2:	63f9      	str	r1, [r7, #60]	; 0x3c
 802dee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dee8:	b2d2      	uxtb	r2, r2
 802deea:	701a      	strb	r2, [r3, #0]
 802deec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802deee:	09db      	lsrs	r3, r3, #7
 802def0:	63bb      	str	r3, [r7, #56]	; 0x38
 802def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802def4:	2b7f      	cmp	r3, #127	; 0x7f
 802def6:	d8f0      	bhi.n	802deda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 802def8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802defa:	1c5a      	adds	r2, r3, #1
 802defc:	63fa      	str	r2, [r7, #60]	; 0x3c
 802defe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802df00:	b2d2      	uxtb	r2, r2
 802df02:	701a      	strb	r2, [r3, #0]
 802df04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 802df08:	687b      	ldr	r3, [r7, #4]
 802df0a:	685b      	ldr	r3, [r3, #4]
 802df0c:	2220      	movs	r2, #32
 802df0e:	4619      	mov	r1, r3
 802df10:	68f8      	ldr	r0, [r7, #12]
 802df12:	f7ff f93b 	bl	802d18c <_EncodeStr>
 802df16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 802df18:	2209      	movs	r2, #9
 802df1a:	68f9      	ldr	r1, [r7, #12]
 802df1c:	6938      	ldr	r0, [r7, #16]
 802df1e:	f7ff fa75 	bl	802d40c <_SendPacket>
  //
  pPayload = pPayloadStart;
 802df22:	693b      	ldr	r3, [r7, #16]
 802df24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802df26:	68fb      	ldr	r3, [r7, #12]
 802df28:	637b      	str	r3, [r7, #52]	; 0x34
 802df2a:	687b      	ldr	r3, [r7, #4]
 802df2c:	681a      	ldr	r2, [r3, #0]
 802df2e:	4b40      	ldr	r3, [pc, #256]	; (802e030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802df30:	691b      	ldr	r3, [r3, #16]
 802df32:	1ad3      	subs	r3, r2, r3
 802df34:	633b      	str	r3, [r7, #48]	; 0x30
 802df36:	e00b      	b.n	802df50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 802df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802df3a:	b2da      	uxtb	r2, r3
 802df3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802df3e:	1c59      	adds	r1, r3, #1
 802df40:	6379      	str	r1, [r7, #52]	; 0x34
 802df42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df46:	b2d2      	uxtb	r2, r2
 802df48:	701a      	strb	r2, [r3, #0]
 802df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802df4c:	09db      	lsrs	r3, r3, #7
 802df4e:	633b      	str	r3, [r7, #48]	; 0x30
 802df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802df52:	2b7f      	cmp	r3, #127	; 0x7f
 802df54:	d8f0      	bhi.n	802df38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 802df56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802df58:	1c5a      	adds	r2, r3, #1
 802df5a:	637a      	str	r2, [r7, #52]	; 0x34
 802df5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802df5e:	b2d2      	uxtb	r2, r2
 802df60:	701a      	strb	r2, [r3, #0]
 802df62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802df64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 802df66:	68fb      	ldr	r3, [r7, #12]
 802df68:	62fb      	str	r3, [r7, #44]	; 0x2c
 802df6a:	687b      	ldr	r3, [r7, #4]
 802df6c:	68db      	ldr	r3, [r3, #12]
 802df6e:	62bb      	str	r3, [r7, #40]	; 0x28
 802df70:	e00b      	b.n	802df8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 802df72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802df74:	b2da      	uxtb	r2, r3
 802df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802df78:	1c59      	adds	r1, r3, #1
 802df7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802df7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df80:	b2d2      	uxtb	r2, r2
 802df82:	701a      	strb	r2, [r3, #0]
 802df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802df86:	09db      	lsrs	r3, r3, #7
 802df88:	62bb      	str	r3, [r7, #40]	; 0x28
 802df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802df8c:	2b7f      	cmp	r3, #127	; 0x7f
 802df8e:	d8f0      	bhi.n	802df72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 802df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802df92:	1c5a      	adds	r2, r3, #1
 802df94:	62fa      	str	r2, [r7, #44]	; 0x2c
 802df96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802df98:	b2d2      	uxtb	r2, r2
 802df9a:	701a      	strb	r2, [r3, #0]
 802df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802df9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 802dfa0:	68fb      	ldr	r3, [r7, #12]
 802dfa2:	627b      	str	r3, [r7, #36]	; 0x24
 802dfa4:	687b      	ldr	r3, [r7, #4]
 802dfa6:	691b      	ldr	r3, [r3, #16]
 802dfa8:	623b      	str	r3, [r7, #32]
 802dfaa:	e00b      	b.n	802dfc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 802dfac:	6a3b      	ldr	r3, [r7, #32]
 802dfae:	b2da      	uxtb	r2, r3
 802dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dfb2:	1c59      	adds	r1, r3, #1
 802dfb4:	6279      	str	r1, [r7, #36]	; 0x24
 802dfb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dfba:	b2d2      	uxtb	r2, r2
 802dfbc:	701a      	strb	r2, [r3, #0]
 802dfbe:	6a3b      	ldr	r3, [r7, #32]
 802dfc0:	09db      	lsrs	r3, r3, #7
 802dfc2:	623b      	str	r3, [r7, #32]
 802dfc4:	6a3b      	ldr	r3, [r7, #32]
 802dfc6:	2b7f      	cmp	r3, #127	; 0x7f
 802dfc8:	d8f0      	bhi.n	802dfac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 802dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dfcc:	1c5a      	adds	r2, r3, #1
 802dfce:	627a      	str	r2, [r7, #36]	; 0x24
 802dfd0:	6a3a      	ldr	r2, [r7, #32]
 802dfd2:	b2d2      	uxtb	r2, r2
 802dfd4:	701a      	strb	r2, [r3, #0]
 802dfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dfd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 802dfda:	68fb      	ldr	r3, [r7, #12]
 802dfdc:	61fb      	str	r3, [r7, #28]
 802dfde:	2300      	movs	r3, #0
 802dfe0:	61bb      	str	r3, [r7, #24]
 802dfe2:	e00b      	b.n	802dffc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 802dfe4:	69bb      	ldr	r3, [r7, #24]
 802dfe6:	b2da      	uxtb	r2, r3
 802dfe8:	69fb      	ldr	r3, [r7, #28]
 802dfea:	1c59      	adds	r1, r3, #1
 802dfec:	61f9      	str	r1, [r7, #28]
 802dfee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dff2:	b2d2      	uxtb	r2, r2
 802dff4:	701a      	strb	r2, [r3, #0]
 802dff6:	69bb      	ldr	r3, [r7, #24]
 802dff8:	09db      	lsrs	r3, r3, #7
 802dffa:	61bb      	str	r3, [r7, #24]
 802dffc:	69bb      	ldr	r3, [r7, #24]
 802dffe:	2b7f      	cmp	r3, #127	; 0x7f
 802e000:	d8f0      	bhi.n	802dfe4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 802e002:	69fb      	ldr	r3, [r7, #28]
 802e004:	1c5a      	adds	r2, r3, #1
 802e006:	61fa      	str	r2, [r7, #28]
 802e008:	69ba      	ldr	r2, [r7, #24]
 802e00a:	b2d2      	uxtb	r2, r2
 802e00c:	701a      	strb	r2, [r3, #0]
 802e00e:	69fb      	ldr	r3, [r7, #28]
 802e010:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 802e012:	2215      	movs	r2, #21
 802e014:	68f9      	ldr	r1, [r7, #12]
 802e016:	6938      	ldr	r0, [r7, #16]
 802e018:	f7ff f9f8 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e01c:	697b      	ldr	r3, [r7, #20]
 802e01e:	f383 8811 	msr	BASEPRI, r3
}
 802e022:	bf00      	nop
 802e024:	3748      	adds	r7, #72	; 0x48
 802e026:	46bd      	mov	sp, r7
 802e028:	bd80      	pop	{r7, pc}
 802e02a:	bf00      	nop
 802e02c:	2001b618 	.word	0x2001b618
 802e030:	2001b5e8 	.word	0x2001b5e8

0802e034 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 802e034:	b580      	push	{r7, lr}
 802e036:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 802e038:	4b07      	ldr	r3, [pc, #28]	; (802e058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e03a:	6a1b      	ldr	r3, [r3, #32]
 802e03c:	2b00      	cmp	r3, #0
 802e03e:	d008      	beq.n	802e052 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 802e040:	4b05      	ldr	r3, [pc, #20]	; (802e058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e042:	6a1b      	ldr	r3, [r3, #32]
 802e044:	685b      	ldr	r3, [r3, #4]
 802e046:	2b00      	cmp	r3, #0
 802e048:	d003      	beq.n	802e052 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 802e04a:	4b03      	ldr	r3, [pc, #12]	; (802e058 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e04c:	6a1b      	ldr	r3, [r3, #32]
 802e04e:	685b      	ldr	r3, [r3, #4]
 802e050:	4798      	blx	r3
  }
}
 802e052:	bf00      	nop
 802e054:	bd80      	pop	{r7, pc}
 802e056:	bf00      	nop
 802e058:	2001b5e8 	.word	0x2001b5e8

0802e05c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 802e05c:	b580      	push	{r7, lr}
 802e05e:	b086      	sub	sp, #24
 802e060:	af00      	add	r7, sp, #0
 802e062:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e064:	f3ef 8311 	mrs	r3, BASEPRI
 802e068:	f04f 0120 	mov.w	r1, #32
 802e06c:	f381 8811 	msr	BASEPRI, r1
 802e070:	617b      	str	r3, [r7, #20]
 802e072:	480b      	ldr	r0, [pc, #44]	; (802e0a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 802e074:	f7ff f8da 	bl	802d22c <_PreparePacket>
 802e078:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e07a:	2280      	movs	r2, #128	; 0x80
 802e07c:	6879      	ldr	r1, [r7, #4]
 802e07e:	6938      	ldr	r0, [r7, #16]
 802e080:	f7ff f884 	bl	802d18c <_EncodeStr>
 802e084:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 802e086:	220e      	movs	r2, #14
 802e088:	68f9      	ldr	r1, [r7, #12]
 802e08a:	6938      	ldr	r0, [r7, #16]
 802e08c:	f7ff f9be 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e090:	697b      	ldr	r3, [r7, #20]
 802e092:	f383 8811 	msr	BASEPRI, r3
}
 802e096:	bf00      	nop
 802e098:	3718      	adds	r7, #24
 802e09a:	46bd      	mov	sp, r7
 802e09c:	bd80      	pop	{r7, pc}
 802e09e:	bf00      	nop
 802e0a0:	2001b618 	.word	0x2001b618

0802e0a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 802e0a4:	b590      	push	{r4, r7, lr}
 802e0a6:	b083      	sub	sp, #12
 802e0a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 802e0aa:	4b15      	ldr	r3, [pc, #84]	; (802e100 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e0ac:	6a1b      	ldr	r3, [r3, #32]
 802e0ae:	2b00      	cmp	r3, #0
 802e0b0:	d01a      	beq.n	802e0e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 802e0b2:	4b13      	ldr	r3, [pc, #76]	; (802e100 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e0b4:	6a1b      	ldr	r3, [r3, #32]
 802e0b6:	681b      	ldr	r3, [r3, #0]
 802e0b8:	2b00      	cmp	r3, #0
 802e0ba:	d015      	beq.n	802e0e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 802e0bc:	4b10      	ldr	r3, [pc, #64]	; (802e100 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e0be:	6a1b      	ldr	r3, [r3, #32]
 802e0c0:	681b      	ldr	r3, [r3, #0]
 802e0c2:	4798      	blx	r3
 802e0c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e0c8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 802e0ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 802e0ce:	f04f 0200 	mov.w	r2, #0
 802e0d2:	f04f 0300 	mov.w	r3, #0
 802e0d6:	000a      	movs	r2, r1
 802e0d8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e0da:	4613      	mov	r3, r2
 802e0dc:	461a      	mov	r2, r3
 802e0de:	4621      	mov	r1, r4
 802e0e0:	200d      	movs	r0, #13
 802e0e2:	f7ff fbe7 	bl	802d8b4 <SEGGER_SYSVIEW_RecordU32x2>
 802e0e6:	e006      	b.n	802e0f6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 802e0e8:	4b06      	ldr	r3, [pc, #24]	; (802e104 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 802e0ea:	681b      	ldr	r3, [r3, #0]
 802e0ec:	4619      	mov	r1, r3
 802e0ee:	200c      	movs	r0, #12
 802e0f0:	f7ff fba4 	bl	802d83c <SEGGER_SYSVIEW_RecordU32>
  }
}
 802e0f4:	bf00      	nop
 802e0f6:	bf00      	nop
 802e0f8:	370c      	adds	r7, #12
 802e0fa:	46bd      	mov	sp, r7
 802e0fc:	bd90      	pop	{r4, r7, pc}
 802e0fe:	bf00      	nop
 802e100:	2001b5e8 	.word	0x2001b5e8
 802e104:	e0001004 	.word	0xe0001004

0802e108 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 802e108:	b580      	push	{r7, lr}
 802e10a:	b082      	sub	sp, #8
 802e10c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802e10e:	f3ef 8311 	mrs	r3, BASEPRI
 802e112:	f04f 0120 	mov.w	r1, #32
 802e116:	f381 8811 	msr	BASEPRI, r1
 802e11a:	607b      	str	r3, [r7, #4]
 802e11c:	4807      	ldr	r0, [pc, #28]	; (802e13c <SEGGER_SYSVIEW_OnIdle+0x34>)
 802e11e:	f7ff f885 	bl	802d22c <_PreparePacket>
 802e122:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 802e124:	2211      	movs	r2, #17
 802e126:	6839      	ldr	r1, [r7, #0]
 802e128:	6838      	ldr	r0, [r7, #0]
 802e12a:	f7ff f96f 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e12e:	687b      	ldr	r3, [r7, #4]
 802e130:	f383 8811 	msr	BASEPRI, r3
}
 802e134:	bf00      	nop
 802e136:	3708      	adds	r7, #8
 802e138:	46bd      	mov	sp, r7
 802e13a:	bd80      	pop	{r7, pc}
 802e13c:	2001b618 	.word	0x2001b618

0802e140 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 802e140:	b580      	push	{r7, lr}
 802e142:	b088      	sub	sp, #32
 802e144:	af00      	add	r7, sp, #0
 802e146:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e148:	f3ef 8311 	mrs	r3, BASEPRI
 802e14c:	f04f 0120 	mov.w	r1, #32
 802e150:	f381 8811 	msr	BASEPRI, r1
 802e154:	617b      	str	r3, [r7, #20]
 802e156:	4819      	ldr	r0, [pc, #100]	; (802e1bc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 802e158:	f7ff f868 	bl	802d22c <_PreparePacket>
 802e15c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e15e:	693b      	ldr	r3, [r7, #16]
 802e160:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e162:	4b17      	ldr	r3, [pc, #92]	; (802e1c0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 802e164:	691b      	ldr	r3, [r3, #16]
 802e166:	687a      	ldr	r2, [r7, #4]
 802e168:	1ad3      	subs	r3, r2, r3
 802e16a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e16c:	68fb      	ldr	r3, [r7, #12]
 802e16e:	61fb      	str	r3, [r7, #28]
 802e170:	687b      	ldr	r3, [r7, #4]
 802e172:	61bb      	str	r3, [r7, #24]
 802e174:	e00b      	b.n	802e18e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 802e176:	69bb      	ldr	r3, [r7, #24]
 802e178:	b2da      	uxtb	r2, r3
 802e17a:	69fb      	ldr	r3, [r7, #28]
 802e17c:	1c59      	adds	r1, r3, #1
 802e17e:	61f9      	str	r1, [r7, #28]
 802e180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e184:	b2d2      	uxtb	r2, r2
 802e186:	701a      	strb	r2, [r3, #0]
 802e188:	69bb      	ldr	r3, [r7, #24]
 802e18a:	09db      	lsrs	r3, r3, #7
 802e18c:	61bb      	str	r3, [r7, #24]
 802e18e:	69bb      	ldr	r3, [r7, #24]
 802e190:	2b7f      	cmp	r3, #127	; 0x7f
 802e192:	d8f0      	bhi.n	802e176 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 802e194:	69fb      	ldr	r3, [r7, #28]
 802e196:	1c5a      	adds	r2, r3, #1
 802e198:	61fa      	str	r2, [r7, #28]
 802e19a:	69ba      	ldr	r2, [r7, #24]
 802e19c:	b2d2      	uxtb	r2, r2
 802e19e:	701a      	strb	r2, [r3, #0]
 802e1a0:	69fb      	ldr	r3, [r7, #28]
 802e1a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 802e1a4:	2208      	movs	r2, #8
 802e1a6:	68f9      	ldr	r1, [r7, #12]
 802e1a8:	6938      	ldr	r0, [r7, #16]
 802e1aa:	f7ff f92f 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e1ae:	697b      	ldr	r3, [r7, #20]
 802e1b0:	f383 8811 	msr	BASEPRI, r3
}
 802e1b4:	bf00      	nop
 802e1b6:	3720      	adds	r7, #32
 802e1b8:	46bd      	mov	sp, r7
 802e1ba:	bd80      	pop	{r7, pc}
 802e1bc:	2001b618 	.word	0x2001b618
 802e1c0:	2001b5e8 	.word	0x2001b5e8

0802e1c4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 802e1c4:	b580      	push	{r7, lr}
 802e1c6:	b088      	sub	sp, #32
 802e1c8:	af00      	add	r7, sp, #0
 802e1ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e1cc:	f3ef 8311 	mrs	r3, BASEPRI
 802e1d0:	f04f 0120 	mov.w	r1, #32
 802e1d4:	f381 8811 	msr	BASEPRI, r1
 802e1d8:	617b      	str	r3, [r7, #20]
 802e1da:	4819      	ldr	r0, [pc, #100]	; (802e240 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 802e1dc:	f7ff f826 	bl	802d22c <_PreparePacket>
 802e1e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e1e2:	693b      	ldr	r3, [r7, #16]
 802e1e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e1e6:	4b17      	ldr	r3, [pc, #92]	; (802e244 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 802e1e8:	691b      	ldr	r3, [r3, #16]
 802e1ea:	687a      	ldr	r2, [r7, #4]
 802e1ec:	1ad3      	subs	r3, r2, r3
 802e1ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e1f0:	68fb      	ldr	r3, [r7, #12]
 802e1f2:	61fb      	str	r3, [r7, #28]
 802e1f4:	687b      	ldr	r3, [r7, #4]
 802e1f6:	61bb      	str	r3, [r7, #24]
 802e1f8:	e00b      	b.n	802e212 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 802e1fa:	69bb      	ldr	r3, [r7, #24]
 802e1fc:	b2da      	uxtb	r2, r3
 802e1fe:	69fb      	ldr	r3, [r7, #28]
 802e200:	1c59      	adds	r1, r3, #1
 802e202:	61f9      	str	r1, [r7, #28]
 802e204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e208:	b2d2      	uxtb	r2, r2
 802e20a:	701a      	strb	r2, [r3, #0]
 802e20c:	69bb      	ldr	r3, [r7, #24]
 802e20e:	09db      	lsrs	r3, r3, #7
 802e210:	61bb      	str	r3, [r7, #24]
 802e212:	69bb      	ldr	r3, [r7, #24]
 802e214:	2b7f      	cmp	r3, #127	; 0x7f
 802e216:	d8f0      	bhi.n	802e1fa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 802e218:	69fb      	ldr	r3, [r7, #28]
 802e21a:	1c5a      	adds	r2, r3, #1
 802e21c:	61fa      	str	r2, [r7, #28]
 802e21e:	69ba      	ldr	r2, [r7, #24]
 802e220:	b2d2      	uxtb	r2, r2
 802e222:	701a      	strb	r2, [r3, #0]
 802e224:	69fb      	ldr	r3, [r7, #28]
 802e226:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 802e228:	2204      	movs	r2, #4
 802e22a:	68f9      	ldr	r1, [r7, #12]
 802e22c:	6938      	ldr	r0, [r7, #16]
 802e22e:	f7ff f8ed 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e232:	697b      	ldr	r3, [r7, #20]
 802e234:	f383 8811 	msr	BASEPRI, r3
}
 802e238:	bf00      	nop
 802e23a:	3720      	adds	r7, #32
 802e23c:	46bd      	mov	sp, r7
 802e23e:	bd80      	pop	{r7, pc}
 802e240:	2001b618 	.word	0x2001b618
 802e244:	2001b5e8 	.word	0x2001b5e8

0802e248 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 802e248:	b580      	push	{r7, lr}
 802e24a:	b088      	sub	sp, #32
 802e24c:	af00      	add	r7, sp, #0
 802e24e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e250:	f3ef 8311 	mrs	r3, BASEPRI
 802e254:	f04f 0120 	mov.w	r1, #32
 802e258:	f381 8811 	msr	BASEPRI, r1
 802e25c:	617b      	str	r3, [r7, #20]
 802e25e:	4819      	ldr	r0, [pc, #100]	; (802e2c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 802e260:	f7fe ffe4 	bl	802d22c <_PreparePacket>
 802e264:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e266:	693b      	ldr	r3, [r7, #16]
 802e268:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e26a:	4b17      	ldr	r3, [pc, #92]	; (802e2c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 802e26c:	691b      	ldr	r3, [r3, #16]
 802e26e:	687a      	ldr	r2, [r7, #4]
 802e270:	1ad3      	subs	r3, r2, r3
 802e272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e274:	68fb      	ldr	r3, [r7, #12]
 802e276:	61fb      	str	r3, [r7, #28]
 802e278:	687b      	ldr	r3, [r7, #4]
 802e27a:	61bb      	str	r3, [r7, #24]
 802e27c:	e00b      	b.n	802e296 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 802e27e:	69bb      	ldr	r3, [r7, #24]
 802e280:	b2da      	uxtb	r2, r3
 802e282:	69fb      	ldr	r3, [r7, #28]
 802e284:	1c59      	adds	r1, r3, #1
 802e286:	61f9      	str	r1, [r7, #28]
 802e288:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e28c:	b2d2      	uxtb	r2, r2
 802e28e:	701a      	strb	r2, [r3, #0]
 802e290:	69bb      	ldr	r3, [r7, #24]
 802e292:	09db      	lsrs	r3, r3, #7
 802e294:	61bb      	str	r3, [r7, #24]
 802e296:	69bb      	ldr	r3, [r7, #24]
 802e298:	2b7f      	cmp	r3, #127	; 0x7f
 802e29a:	d8f0      	bhi.n	802e27e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 802e29c:	69fb      	ldr	r3, [r7, #28]
 802e29e:	1c5a      	adds	r2, r3, #1
 802e2a0:	61fa      	str	r2, [r7, #28]
 802e2a2:	69ba      	ldr	r2, [r7, #24]
 802e2a4:	b2d2      	uxtb	r2, r2
 802e2a6:	701a      	strb	r2, [r3, #0]
 802e2a8:	69fb      	ldr	r3, [r7, #28]
 802e2aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 802e2ac:	2206      	movs	r2, #6
 802e2ae:	68f9      	ldr	r1, [r7, #12]
 802e2b0:	6938      	ldr	r0, [r7, #16]
 802e2b2:	f7ff f8ab 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e2b6:	697b      	ldr	r3, [r7, #20]
 802e2b8:	f383 8811 	msr	BASEPRI, r3
}
 802e2bc:	bf00      	nop
 802e2be:	3720      	adds	r7, #32
 802e2c0:	46bd      	mov	sp, r7
 802e2c2:	bd80      	pop	{r7, pc}
 802e2c4:	2001b618 	.word	0x2001b618
 802e2c8:	2001b5e8 	.word	0x2001b5e8

0802e2cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 802e2cc:	b480      	push	{r7}
 802e2ce:	b083      	sub	sp, #12
 802e2d0:	af00      	add	r7, sp, #0
 802e2d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 802e2d4:	4b04      	ldr	r3, [pc, #16]	; (802e2e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 802e2d6:	691b      	ldr	r3, [r3, #16]
 802e2d8:	687a      	ldr	r2, [r7, #4]
 802e2da:	1ad3      	subs	r3, r2, r3
}
 802e2dc:	4618      	mov	r0, r3
 802e2de:	370c      	adds	r7, #12
 802e2e0:	46bd      	mov	sp, r7
 802e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2e6:	4770      	bx	lr
 802e2e8:	2001b5e8 	.word	0x2001b5e8

0802e2ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 802e2ec:	b580      	push	{r7, lr}
 802e2ee:	b08c      	sub	sp, #48	; 0x30
 802e2f0:	af00      	add	r7, sp, #0
 802e2f2:	4603      	mov	r3, r0
 802e2f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 802e2f6:	4b3b      	ldr	r3, [pc, #236]	; (802e3e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e2f8:	681b      	ldr	r3, [r3, #0]
 802e2fa:	2b00      	cmp	r3, #0
 802e2fc:	d06d      	beq.n	802e3da <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 802e2fe:	4b39      	ldr	r3, [pc, #228]	; (802e3e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e300:	681b      	ldr	r3, [r3, #0]
 802e302:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 802e304:	2300      	movs	r3, #0
 802e306:	62bb      	str	r3, [r7, #40]	; 0x28
 802e308:	e008      	b.n	802e31c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 802e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e30c:	691b      	ldr	r3, [r3, #16]
 802e30e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 802e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e312:	2b00      	cmp	r3, #0
 802e314:	d007      	beq.n	802e326 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 802e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e318:	3301      	adds	r3, #1
 802e31a:	62bb      	str	r3, [r7, #40]	; 0x28
 802e31c:	79fb      	ldrb	r3, [r7, #7]
 802e31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e320:	429a      	cmp	r2, r3
 802e322:	d3f2      	bcc.n	802e30a <SEGGER_SYSVIEW_SendModule+0x1e>
 802e324:	e000      	b.n	802e328 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 802e326:	bf00      	nop
      }
    }
    if (pModule != 0) {
 802e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e32a:	2b00      	cmp	r3, #0
 802e32c:	d055      	beq.n	802e3da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e32e:	f3ef 8311 	mrs	r3, BASEPRI
 802e332:	f04f 0120 	mov.w	r1, #32
 802e336:	f381 8811 	msr	BASEPRI, r1
 802e33a:	617b      	str	r3, [r7, #20]
 802e33c:	482a      	ldr	r0, [pc, #168]	; (802e3e8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 802e33e:	f7fe ff75 	bl	802d22c <_PreparePacket>
 802e342:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 802e344:	693b      	ldr	r3, [r7, #16]
 802e346:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 802e348:	68fb      	ldr	r3, [r7, #12]
 802e34a:	627b      	str	r3, [r7, #36]	; 0x24
 802e34c:	79fb      	ldrb	r3, [r7, #7]
 802e34e:	623b      	str	r3, [r7, #32]
 802e350:	e00b      	b.n	802e36a <SEGGER_SYSVIEW_SendModule+0x7e>
 802e352:	6a3b      	ldr	r3, [r7, #32]
 802e354:	b2da      	uxtb	r2, r3
 802e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e358:	1c59      	adds	r1, r3, #1
 802e35a:	6279      	str	r1, [r7, #36]	; 0x24
 802e35c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e360:	b2d2      	uxtb	r2, r2
 802e362:	701a      	strb	r2, [r3, #0]
 802e364:	6a3b      	ldr	r3, [r7, #32]
 802e366:	09db      	lsrs	r3, r3, #7
 802e368:	623b      	str	r3, [r7, #32]
 802e36a:	6a3b      	ldr	r3, [r7, #32]
 802e36c:	2b7f      	cmp	r3, #127	; 0x7f
 802e36e:	d8f0      	bhi.n	802e352 <SEGGER_SYSVIEW_SendModule+0x66>
 802e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e372:	1c5a      	adds	r2, r3, #1
 802e374:	627a      	str	r2, [r7, #36]	; 0x24
 802e376:	6a3a      	ldr	r2, [r7, #32]
 802e378:	b2d2      	uxtb	r2, r2
 802e37a:	701a      	strb	r2, [r3, #0]
 802e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e37e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 802e380:	68fb      	ldr	r3, [r7, #12]
 802e382:	61fb      	str	r3, [r7, #28]
 802e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e386:	689b      	ldr	r3, [r3, #8]
 802e388:	61bb      	str	r3, [r7, #24]
 802e38a:	e00b      	b.n	802e3a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 802e38c:	69bb      	ldr	r3, [r7, #24]
 802e38e:	b2da      	uxtb	r2, r3
 802e390:	69fb      	ldr	r3, [r7, #28]
 802e392:	1c59      	adds	r1, r3, #1
 802e394:	61f9      	str	r1, [r7, #28]
 802e396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e39a:	b2d2      	uxtb	r2, r2
 802e39c:	701a      	strb	r2, [r3, #0]
 802e39e:	69bb      	ldr	r3, [r7, #24]
 802e3a0:	09db      	lsrs	r3, r3, #7
 802e3a2:	61bb      	str	r3, [r7, #24]
 802e3a4:	69bb      	ldr	r3, [r7, #24]
 802e3a6:	2b7f      	cmp	r3, #127	; 0x7f
 802e3a8:	d8f0      	bhi.n	802e38c <SEGGER_SYSVIEW_SendModule+0xa0>
 802e3aa:	69fb      	ldr	r3, [r7, #28]
 802e3ac:	1c5a      	adds	r2, r3, #1
 802e3ae:	61fa      	str	r2, [r7, #28]
 802e3b0:	69ba      	ldr	r2, [r7, #24]
 802e3b2:	b2d2      	uxtb	r2, r2
 802e3b4:	701a      	strb	r2, [r3, #0]
 802e3b6:	69fb      	ldr	r3, [r7, #28]
 802e3b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e3bc:	681b      	ldr	r3, [r3, #0]
 802e3be:	2280      	movs	r2, #128	; 0x80
 802e3c0:	4619      	mov	r1, r3
 802e3c2:	68f8      	ldr	r0, [r7, #12]
 802e3c4:	f7fe fee2 	bl	802d18c <_EncodeStr>
 802e3c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 802e3ca:	2216      	movs	r2, #22
 802e3cc:	68f9      	ldr	r1, [r7, #12]
 802e3ce:	6938      	ldr	r0, [r7, #16]
 802e3d0:	f7ff f81c 	bl	802d40c <_SendPacket>
      RECORD_END();
 802e3d4:	697b      	ldr	r3, [r7, #20]
 802e3d6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 802e3da:	bf00      	nop
 802e3dc:	3730      	adds	r7, #48	; 0x30
 802e3de:	46bd      	mov	sp, r7
 802e3e0:	bd80      	pop	{r7, pc}
 802e3e2:	bf00      	nop
 802e3e4:	2001b610 	.word	0x2001b610
 802e3e8:	2001b618 	.word	0x2001b618

0802e3ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 802e3ec:	b580      	push	{r7, lr}
 802e3ee:	b082      	sub	sp, #8
 802e3f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 802e3f2:	4b0c      	ldr	r3, [pc, #48]	; (802e424 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e3f4:	681b      	ldr	r3, [r3, #0]
 802e3f6:	2b00      	cmp	r3, #0
 802e3f8:	d00f      	beq.n	802e41a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 802e3fa:	4b0a      	ldr	r3, [pc, #40]	; (802e424 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e3fc:	681b      	ldr	r3, [r3, #0]
 802e3fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 802e400:	687b      	ldr	r3, [r7, #4]
 802e402:	68db      	ldr	r3, [r3, #12]
 802e404:	2b00      	cmp	r3, #0
 802e406:	d002      	beq.n	802e40e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	68db      	ldr	r3, [r3, #12]
 802e40c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 802e40e:	687b      	ldr	r3, [r7, #4]
 802e410:	691b      	ldr	r3, [r3, #16]
 802e412:	607b      	str	r3, [r7, #4]
    } while (pModule);
 802e414:	687b      	ldr	r3, [r7, #4]
 802e416:	2b00      	cmp	r3, #0
 802e418:	d1f2      	bne.n	802e400 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 802e41a:	bf00      	nop
 802e41c:	3708      	adds	r7, #8
 802e41e:	46bd      	mov	sp, r7
 802e420:	bd80      	pop	{r7, pc}
 802e422:	bf00      	nop
 802e424:	2001b610 	.word	0x2001b610

0802e428 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 802e428:	b580      	push	{r7, lr}
 802e42a:	b086      	sub	sp, #24
 802e42c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 802e42e:	f3ef 8311 	mrs	r3, BASEPRI
 802e432:	f04f 0120 	mov.w	r1, #32
 802e436:	f381 8811 	msr	BASEPRI, r1
 802e43a:	60fb      	str	r3, [r7, #12]
 802e43c:	4817      	ldr	r0, [pc, #92]	; (802e49c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 802e43e:	f7fe fef5 	bl	802d22c <_PreparePacket>
 802e442:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 802e444:	68bb      	ldr	r3, [r7, #8]
 802e446:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 802e448:	687b      	ldr	r3, [r7, #4]
 802e44a:	617b      	str	r3, [r7, #20]
 802e44c:	4b14      	ldr	r3, [pc, #80]	; (802e4a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 802e44e:	781b      	ldrb	r3, [r3, #0]
 802e450:	613b      	str	r3, [r7, #16]
 802e452:	e00b      	b.n	802e46c <SEGGER_SYSVIEW_SendNumModules+0x44>
 802e454:	693b      	ldr	r3, [r7, #16]
 802e456:	b2da      	uxtb	r2, r3
 802e458:	697b      	ldr	r3, [r7, #20]
 802e45a:	1c59      	adds	r1, r3, #1
 802e45c:	6179      	str	r1, [r7, #20]
 802e45e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e462:	b2d2      	uxtb	r2, r2
 802e464:	701a      	strb	r2, [r3, #0]
 802e466:	693b      	ldr	r3, [r7, #16]
 802e468:	09db      	lsrs	r3, r3, #7
 802e46a:	613b      	str	r3, [r7, #16]
 802e46c:	693b      	ldr	r3, [r7, #16]
 802e46e:	2b7f      	cmp	r3, #127	; 0x7f
 802e470:	d8f0      	bhi.n	802e454 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 802e472:	697b      	ldr	r3, [r7, #20]
 802e474:	1c5a      	adds	r2, r3, #1
 802e476:	617a      	str	r2, [r7, #20]
 802e478:	693a      	ldr	r2, [r7, #16]
 802e47a:	b2d2      	uxtb	r2, r2
 802e47c:	701a      	strb	r2, [r3, #0]
 802e47e:	697b      	ldr	r3, [r7, #20]
 802e480:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 802e482:	221b      	movs	r2, #27
 802e484:	6879      	ldr	r1, [r7, #4]
 802e486:	68b8      	ldr	r0, [r7, #8]
 802e488:	f7fe ffc0 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e48c:	68fb      	ldr	r3, [r7, #12]
 802e48e:	f383 8811 	msr	BASEPRI, r3
}
 802e492:	bf00      	nop
 802e494:	3718      	adds	r7, #24
 802e496:	46bd      	mov	sp, r7
 802e498:	bd80      	pop	{r7, pc}
 802e49a:	bf00      	nop
 802e49c:	2001b618 	.word	0x2001b618
 802e4a0:	2001b614 	.word	0x2001b614

0802e4a4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 802e4a4:	b40f      	push	{r0, r1, r2, r3}
 802e4a6:	b580      	push	{r7, lr}
 802e4a8:	b082      	sub	sp, #8
 802e4aa:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 802e4ac:	f107 0314 	add.w	r3, r7, #20
 802e4b0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 802e4b2:	1d3b      	adds	r3, r7, #4
 802e4b4:	461a      	mov	r2, r3
 802e4b6:	2100      	movs	r1, #0
 802e4b8:	6938      	ldr	r0, [r7, #16]
 802e4ba:	f7ff f88d 	bl	802d5d8 <_VPrintHost>
  va_end(ParamList);
#endif
}
 802e4be:	bf00      	nop
 802e4c0:	3708      	adds	r7, #8
 802e4c2:	46bd      	mov	sp, r7
 802e4c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802e4c8:	b004      	add	sp, #16
 802e4ca:	4770      	bx	lr

0802e4cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 802e4cc:	b580      	push	{r7, lr}
 802e4ce:	b08a      	sub	sp, #40	; 0x28
 802e4d0:	af00      	add	r7, sp, #0
 802e4d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e4d4:	f3ef 8311 	mrs	r3, BASEPRI
 802e4d8:	f04f 0120 	mov.w	r1, #32
 802e4dc:	f381 8811 	msr	BASEPRI, r1
 802e4e0:	617b      	str	r3, [r7, #20]
 802e4e2:	4827      	ldr	r0, [pc, #156]	; (802e580 <SEGGER_SYSVIEW_Warn+0xb4>)
 802e4e4:	f7fe fea2 	bl	802d22c <_PreparePacket>
 802e4e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e4ea:	2280      	movs	r2, #128	; 0x80
 802e4ec:	6879      	ldr	r1, [r7, #4]
 802e4ee:	6938      	ldr	r0, [r7, #16]
 802e4f0:	f7fe fe4c 	bl	802d18c <_EncodeStr>
 802e4f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 802e4f6:	68fb      	ldr	r3, [r7, #12]
 802e4f8:	627b      	str	r3, [r7, #36]	; 0x24
 802e4fa:	2301      	movs	r3, #1
 802e4fc:	623b      	str	r3, [r7, #32]
 802e4fe:	e00b      	b.n	802e518 <SEGGER_SYSVIEW_Warn+0x4c>
 802e500:	6a3b      	ldr	r3, [r7, #32]
 802e502:	b2da      	uxtb	r2, r3
 802e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e506:	1c59      	adds	r1, r3, #1
 802e508:	6279      	str	r1, [r7, #36]	; 0x24
 802e50a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e50e:	b2d2      	uxtb	r2, r2
 802e510:	701a      	strb	r2, [r3, #0]
 802e512:	6a3b      	ldr	r3, [r7, #32]
 802e514:	09db      	lsrs	r3, r3, #7
 802e516:	623b      	str	r3, [r7, #32]
 802e518:	6a3b      	ldr	r3, [r7, #32]
 802e51a:	2b7f      	cmp	r3, #127	; 0x7f
 802e51c:	d8f0      	bhi.n	802e500 <SEGGER_SYSVIEW_Warn+0x34>
 802e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e520:	1c5a      	adds	r2, r3, #1
 802e522:	627a      	str	r2, [r7, #36]	; 0x24
 802e524:	6a3a      	ldr	r2, [r7, #32]
 802e526:	b2d2      	uxtb	r2, r2
 802e528:	701a      	strb	r2, [r3, #0]
 802e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e52c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 802e52e:	68fb      	ldr	r3, [r7, #12]
 802e530:	61fb      	str	r3, [r7, #28]
 802e532:	2300      	movs	r3, #0
 802e534:	61bb      	str	r3, [r7, #24]
 802e536:	e00b      	b.n	802e550 <SEGGER_SYSVIEW_Warn+0x84>
 802e538:	69bb      	ldr	r3, [r7, #24]
 802e53a:	b2da      	uxtb	r2, r3
 802e53c:	69fb      	ldr	r3, [r7, #28]
 802e53e:	1c59      	adds	r1, r3, #1
 802e540:	61f9      	str	r1, [r7, #28]
 802e542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e546:	b2d2      	uxtb	r2, r2
 802e548:	701a      	strb	r2, [r3, #0]
 802e54a:	69bb      	ldr	r3, [r7, #24]
 802e54c:	09db      	lsrs	r3, r3, #7
 802e54e:	61bb      	str	r3, [r7, #24]
 802e550:	69bb      	ldr	r3, [r7, #24]
 802e552:	2b7f      	cmp	r3, #127	; 0x7f
 802e554:	d8f0      	bhi.n	802e538 <SEGGER_SYSVIEW_Warn+0x6c>
 802e556:	69fb      	ldr	r3, [r7, #28]
 802e558:	1c5a      	adds	r2, r3, #1
 802e55a:	61fa      	str	r2, [r7, #28]
 802e55c:	69ba      	ldr	r2, [r7, #24]
 802e55e:	b2d2      	uxtb	r2, r2
 802e560:	701a      	strb	r2, [r3, #0]
 802e562:	69fb      	ldr	r3, [r7, #28]
 802e564:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802e566:	221a      	movs	r2, #26
 802e568:	68f9      	ldr	r1, [r7, #12]
 802e56a:	6938      	ldr	r0, [r7, #16]
 802e56c:	f7fe ff4e 	bl	802d40c <_SendPacket>
  RECORD_END();
 802e570:	697b      	ldr	r3, [r7, #20]
 802e572:	f383 8811 	msr	BASEPRI, r3
}
 802e576:	bf00      	nop
 802e578:	3728      	adds	r7, #40	; 0x28
 802e57a:	46bd      	mov	sp, r7
 802e57c:	bd80      	pop	{r7, pc}
 802e57e:	bf00      	nop
 802e580:	2001b618 	.word	0x2001b618

0802e584 <arm_pid_init_f32>:
 802e584:	edd0 6a08 	vldr	s13, [r0, #32]
 802e588:	edd0 7a06 	vldr	s15, [r0, #24]
 802e58c:	ed90 7a07 	vldr	s14, [r0, #28]
 802e590:	edc0 6a02 	vstr	s13, [r0, #8]
 802e594:	ee37 7a87 	vadd.f32	s14, s15, s14
 802e598:	ee36 6aa6 	vadd.f32	s12, s13, s13
 802e59c:	eef1 7a67 	vneg.f32	s15, s15
 802e5a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 802e5a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802e5a8:	ed80 7a00 	vstr	s14, [r0]
 802e5ac:	edc0 7a01 	vstr	s15, [r0, #4]
 802e5b0:	b901      	cbnz	r1, 802e5b4 <arm_pid_init_f32+0x30>
 802e5b2:	4770      	bx	lr
 802e5b4:	2300      	movs	r3, #0
 802e5b6:	60c3      	str	r3, [r0, #12]
 802e5b8:	6103      	str	r3, [r0, #16]
 802e5ba:	6143      	str	r3, [r0, #20]
 802e5bc:	4770      	bx	lr
 802e5be:	bf00      	nop

0802e5c0 <__errno>:
 802e5c0:	4b01      	ldr	r3, [pc, #4]	; (802e5c8 <__errno+0x8>)
 802e5c2:	6818      	ldr	r0, [r3, #0]
 802e5c4:	4770      	bx	lr
 802e5c6:	bf00      	nop
 802e5c8:	20001444 	.word	0x20001444

0802e5cc <__libc_init_array>:
 802e5cc:	b570      	push	{r4, r5, r6, lr}
 802e5ce:	4d0d      	ldr	r5, [pc, #52]	; (802e604 <__libc_init_array+0x38>)
 802e5d0:	4c0d      	ldr	r4, [pc, #52]	; (802e608 <__libc_init_array+0x3c>)
 802e5d2:	1b64      	subs	r4, r4, r5
 802e5d4:	10a4      	asrs	r4, r4, #2
 802e5d6:	2600      	movs	r6, #0
 802e5d8:	42a6      	cmp	r6, r4
 802e5da:	d109      	bne.n	802e5f0 <__libc_init_array+0x24>
 802e5dc:	4d0b      	ldr	r5, [pc, #44]	; (802e60c <__libc_init_array+0x40>)
 802e5de:	4c0c      	ldr	r4, [pc, #48]	; (802e610 <__libc_init_array+0x44>)
 802e5e0:	f000 fe22 	bl	802f228 <_init>
 802e5e4:	1b64      	subs	r4, r4, r5
 802e5e6:	10a4      	asrs	r4, r4, #2
 802e5e8:	2600      	movs	r6, #0
 802e5ea:	42a6      	cmp	r6, r4
 802e5ec:	d105      	bne.n	802e5fa <__libc_init_array+0x2e>
 802e5ee:	bd70      	pop	{r4, r5, r6, pc}
 802e5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 802e5f4:	4798      	blx	r3
 802e5f6:	3601      	adds	r6, #1
 802e5f8:	e7ee      	b.n	802e5d8 <__libc_init_array+0xc>
 802e5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 802e5fe:	4798      	blx	r3
 802e600:	3601      	adds	r6, #1
 802e602:	e7f2      	b.n	802e5ea <__libc_init_array+0x1e>
 802e604:	0802fad8 	.word	0x0802fad8
 802e608:	0802fad8 	.word	0x0802fad8
 802e60c:	0802fad8 	.word	0x0802fad8
 802e610:	0802fadc 	.word	0x0802fadc

0802e614 <__retarget_lock_acquire_recursive>:
 802e614:	4770      	bx	lr

0802e616 <__retarget_lock_release_recursive>:
 802e616:	4770      	bx	lr

0802e618 <memcmp>:
 802e618:	b530      	push	{r4, r5, lr}
 802e61a:	3901      	subs	r1, #1
 802e61c:	2400      	movs	r4, #0
 802e61e:	42a2      	cmp	r2, r4
 802e620:	d101      	bne.n	802e626 <memcmp+0xe>
 802e622:	2000      	movs	r0, #0
 802e624:	e005      	b.n	802e632 <memcmp+0x1a>
 802e626:	5d03      	ldrb	r3, [r0, r4]
 802e628:	3401      	adds	r4, #1
 802e62a:	5d0d      	ldrb	r5, [r1, r4]
 802e62c:	42ab      	cmp	r3, r5
 802e62e:	d0f6      	beq.n	802e61e <memcmp+0x6>
 802e630:	1b58      	subs	r0, r3, r5
 802e632:	bd30      	pop	{r4, r5, pc}

0802e634 <memcpy>:
 802e634:	440a      	add	r2, r1
 802e636:	4291      	cmp	r1, r2
 802e638:	f100 33ff 	add.w	r3, r0, #4294967295
 802e63c:	d100      	bne.n	802e640 <memcpy+0xc>
 802e63e:	4770      	bx	lr
 802e640:	b510      	push	{r4, lr}
 802e642:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e646:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e64a:	4291      	cmp	r1, r2
 802e64c:	d1f9      	bne.n	802e642 <memcpy+0xe>
 802e64e:	bd10      	pop	{r4, pc}

0802e650 <memset>:
 802e650:	4402      	add	r2, r0
 802e652:	4603      	mov	r3, r0
 802e654:	4293      	cmp	r3, r2
 802e656:	d100      	bne.n	802e65a <memset+0xa>
 802e658:	4770      	bx	lr
 802e65a:	f803 1b01 	strb.w	r1, [r3], #1
 802e65e:	e7f9      	b.n	802e654 <memset+0x4>

0802e660 <cleanup_glue>:
 802e660:	b538      	push	{r3, r4, r5, lr}
 802e662:	460c      	mov	r4, r1
 802e664:	6809      	ldr	r1, [r1, #0]
 802e666:	4605      	mov	r5, r0
 802e668:	b109      	cbz	r1, 802e66e <cleanup_glue+0xe>
 802e66a:	f7ff fff9 	bl	802e660 <cleanup_glue>
 802e66e:	4621      	mov	r1, r4
 802e670:	4628      	mov	r0, r5
 802e672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e676:	f000 b869 	b.w	802e74c <_free_r>
	...

0802e67c <_reclaim_reent>:
 802e67c:	4b2c      	ldr	r3, [pc, #176]	; (802e730 <_reclaim_reent+0xb4>)
 802e67e:	681b      	ldr	r3, [r3, #0]
 802e680:	4283      	cmp	r3, r0
 802e682:	b570      	push	{r4, r5, r6, lr}
 802e684:	4604      	mov	r4, r0
 802e686:	d051      	beq.n	802e72c <_reclaim_reent+0xb0>
 802e688:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e68a:	b143      	cbz	r3, 802e69e <_reclaim_reent+0x22>
 802e68c:	68db      	ldr	r3, [r3, #12]
 802e68e:	2b00      	cmp	r3, #0
 802e690:	d14a      	bne.n	802e728 <_reclaim_reent+0xac>
 802e692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e694:	6819      	ldr	r1, [r3, #0]
 802e696:	b111      	cbz	r1, 802e69e <_reclaim_reent+0x22>
 802e698:	4620      	mov	r0, r4
 802e69a:	f000 f857 	bl	802e74c <_free_r>
 802e69e:	6961      	ldr	r1, [r4, #20]
 802e6a0:	b111      	cbz	r1, 802e6a8 <_reclaim_reent+0x2c>
 802e6a2:	4620      	mov	r0, r4
 802e6a4:	f000 f852 	bl	802e74c <_free_r>
 802e6a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e6aa:	b111      	cbz	r1, 802e6b2 <_reclaim_reent+0x36>
 802e6ac:	4620      	mov	r0, r4
 802e6ae:	f000 f84d 	bl	802e74c <_free_r>
 802e6b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e6b4:	b111      	cbz	r1, 802e6bc <_reclaim_reent+0x40>
 802e6b6:	4620      	mov	r0, r4
 802e6b8:	f000 f848 	bl	802e74c <_free_r>
 802e6bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e6be:	b111      	cbz	r1, 802e6c6 <_reclaim_reent+0x4a>
 802e6c0:	4620      	mov	r0, r4
 802e6c2:	f000 f843 	bl	802e74c <_free_r>
 802e6c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e6c8:	b111      	cbz	r1, 802e6d0 <_reclaim_reent+0x54>
 802e6ca:	4620      	mov	r0, r4
 802e6cc:	f000 f83e 	bl	802e74c <_free_r>
 802e6d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e6d2:	b111      	cbz	r1, 802e6da <_reclaim_reent+0x5e>
 802e6d4:	4620      	mov	r0, r4
 802e6d6:	f000 f839 	bl	802e74c <_free_r>
 802e6da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e6dc:	b111      	cbz	r1, 802e6e4 <_reclaim_reent+0x68>
 802e6de:	4620      	mov	r0, r4
 802e6e0:	f000 f834 	bl	802e74c <_free_r>
 802e6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e6e6:	b111      	cbz	r1, 802e6ee <_reclaim_reent+0x72>
 802e6e8:	4620      	mov	r0, r4
 802e6ea:	f000 f82f 	bl	802e74c <_free_r>
 802e6ee:	69a3      	ldr	r3, [r4, #24]
 802e6f0:	b1e3      	cbz	r3, 802e72c <_reclaim_reent+0xb0>
 802e6f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e6f4:	4620      	mov	r0, r4
 802e6f6:	4798      	blx	r3
 802e6f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e6fa:	b1b9      	cbz	r1, 802e72c <_reclaim_reent+0xb0>
 802e6fc:	4620      	mov	r0, r4
 802e6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e702:	f7ff bfad 	b.w	802e660 <cleanup_glue>
 802e706:	5949      	ldr	r1, [r1, r5]
 802e708:	b941      	cbnz	r1, 802e71c <_reclaim_reent+0xa0>
 802e70a:	3504      	adds	r5, #4
 802e70c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e70e:	2d80      	cmp	r5, #128	; 0x80
 802e710:	68d9      	ldr	r1, [r3, #12]
 802e712:	d1f8      	bne.n	802e706 <_reclaim_reent+0x8a>
 802e714:	4620      	mov	r0, r4
 802e716:	f000 f819 	bl	802e74c <_free_r>
 802e71a:	e7ba      	b.n	802e692 <_reclaim_reent+0x16>
 802e71c:	680e      	ldr	r6, [r1, #0]
 802e71e:	4620      	mov	r0, r4
 802e720:	f000 f814 	bl	802e74c <_free_r>
 802e724:	4631      	mov	r1, r6
 802e726:	e7ef      	b.n	802e708 <_reclaim_reent+0x8c>
 802e728:	2500      	movs	r5, #0
 802e72a:	e7ef      	b.n	802e70c <_reclaim_reent+0x90>
 802e72c:	bd70      	pop	{r4, r5, r6, pc}
 802e72e:	bf00      	nop
 802e730:	20001444 	.word	0x20001444

0802e734 <__malloc_lock>:
 802e734:	4801      	ldr	r0, [pc, #4]	; (802e73c <__malloc_lock+0x8>)
 802e736:	f7ff bf6d 	b.w	802e614 <__retarget_lock_acquire_recursive>
 802e73a:	bf00      	nop
 802e73c:	2001ee6c 	.word	0x2001ee6c

0802e740 <__malloc_unlock>:
 802e740:	4801      	ldr	r0, [pc, #4]	; (802e748 <__malloc_unlock+0x8>)
 802e742:	f7ff bf68 	b.w	802e616 <__retarget_lock_release_recursive>
 802e746:	bf00      	nop
 802e748:	2001ee6c 	.word	0x2001ee6c

0802e74c <_free_r>:
 802e74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e74e:	2900      	cmp	r1, #0
 802e750:	d048      	beq.n	802e7e4 <_free_r+0x98>
 802e752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e756:	9001      	str	r0, [sp, #4]
 802e758:	2b00      	cmp	r3, #0
 802e75a:	f1a1 0404 	sub.w	r4, r1, #4
 802e75e:	bfb8      	it	lt
 802e760:	18e4      	addlt	r4, r4, r3
 802e762:	f7ff ffe7 	bl	802e734 <__malloc_lock>
 802e766:	4a20      	ldr	r2, [pc, #128]	; (802e7e8 <_free_r+0x9c>)
 802e768:	9801      	ldr	r0, [sp, #4]
 802e76a:	6813      	ldr	r3, [r2, #0]
 802e76c:	4615      	mov	r5, r2
 802e76e:	b933      	cbnz	r3, 802e77e <_free_r+0x32>
 802e770:	6063      	str	r3, [r4, #4]
 802e772:	6014      	str	r4, [r2, #0]
 802e774:	b003      	add	sp, #12
 802e776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e77a:	f7ff bfe1 	b.w	802e740 <__malloc_unlock>
 802e77e:	42a3      	cmp	r3, r4
 802e780:	d90b      	bls.n	802e79a <_free_r+0x4e>
 802e782:	6821      	ldr	r1, [r4, #0]
 802e784:	1862      	adds	r2, r4, r1
 802e786:	4293      	cmp	r3, r2
 802e788:	bf04      	itt	eq
 802e78a:	681a      	ldreq	r2, [r3, #0]
 802e78c:	685b      	ldreq	r3, [r3, #4]
 802e78e:	6063      	str	r3, [r4, #4]
 802e790:	bf04      	itt	eq
 802e792:	1852      	addeq	r2, r2, r1
 802e794:	6022      	streq	r2, [r4, #0]
 802e796:	602c      	str	r4, [r5, #0]
 802e798:	e7ec      	b.n	802e774 <_free_r+0x28>
 802e79a:	461a      	mov	r2, r3
 802e79c:	685b      	ldr	r3, [r3, #4]
 802e79e:	b10b      	cbz	r3, 802e7a4 <_free_r+0x58>
 802e7a0:	42a3      	cmp	r3, r4
 802e7a2:	d9fa      	bls.n	802e79a <_free_r+0x4e>
 802e7a4:	6811      	ldr	r1, [r2, #0]
 802e7a6:	1855      	adds	r5, r2, r1
 802e7a8:	42a5      	cmp	r5, r4
 802e7aa:	d10b      	bne.n	802e7c4 <_free_r+0x78>
 802e7ac:	6824      	ldr	r4, [r4, #0]
 802e7ae:	4421      	add	r1, r4
 802e7b0:	1854      	adds	r4, r2, r1
 802e7b2:	42a3      	cmp	r3, r4
 802e7b4:	6011      	str	r1, [r2, #0]
 802e7b6:	d1dd      	bne.n	802e774 <_free_r+0x28>
 802e7b8:	681c      	ldr	r4, [r3, #0]
 802e7ba:	685b      	ldr	r3, [r3, #4]
 802e7bc:	6053      	str	r3, [r2, #4]
 802e7be:	4421      	add	r1, r4
 802e7c0:	6011      	str	r1, [r2, #0]
 802e7c2:	e7d7      	b.n	802e774 <_free_r+0x28>
 802e7c4:	d902      	bls.n	802e7cc <_free_r+0x80>
 802e7c6:	230c      	movs	r3, #12
 802e7c8:	6003      	str	r3, [r0, #0]
 802e7ca:	e7d3      	b.n	802e774 <_free_r+0x28>
 802e7cc:	6825      	ldr	r5, [r4, #0]
 802e7ce:	1961      	adds	r1, r4, r5
 802e7d0:	428b      	cmp	r3, r1
 802e7d2:	bf04      	itt	eq
 802e7d4:	6819      	ldreq	r1, [r3, #0]
 802e7d6:	685b      	ldreq	r3, [r3, #4]
 802e7d8:	6063      	str	r3, [r4, #4]
 802e7da:	bf04      	itt	eq
 802e7dc:	1949      	addeq	r1, r1, r5
 802e7de:	6021      	streq	r1, [r4, #0]
 802e7e0:	6054      	str	r4, [r2, #4]
 802e7e2:	e7c7      	b.n	802e774 <_free_r+0x28>
 802e7e4:	b003      	add	sp, #12
 802e7e6:	bd30      	pop	{r4, r5, pc}
 802e7e8:	2001b6fc 	.word	0x2001b6fc

0802e7ec <fmax>:
 802e7ec:	b508      	push	{r3, lr}
 802e7ee:	ed2d 8b04 	vpush	{d8-d9}
 802e7f2:	eeb0 8a40 	vmov.f32	s16, s0
 802e7f6:	eef0 8a60 	vmov.f32	s17, s1
 802e7fa:	eeb0 9a41 	vmov.f32	s18, s2
 802e7fe:	eef0 9a61 	vmov.f32	s19, s3
 802e802:	f000 f81b 	bl	802e83c <__fpclassifyd>
 802e806:	b168      	cbz	r0, 802e824 <fmax+0x38>
 802e808:	eeb0 0a49 	vmov.f32	s0, s18
 802e80c:	eef0 0a69 	vmov.f32	s1, s19
 802e810:	f000 f814 	bl	802e83c <__fpclassifyd>
 802e814:	b150      	cbz	r0, 802e82c <fmax+0x40>
 802e816:	ec53 2b19 	vmov	r2, r3, d9
 802e81a:	ec51 0b18 	vmov	r0, r1, d8
 802e81e:	f7d2 f96d 	bl	8000afc <__aeabi_dcmpgt>
 802e822:	b918      	cbnz	r0, 802e82c <fmax+0x40>
 802e824:	eeb0 8a49 	vmov.f32	s16, s18
 802e828:	eef0 8a69 	vmov.f32	s17, s19
 802e82c:	eeb0 0a48 	vmov.f32	s0, s16
 802e830:	eef0 0a68 	vmov.f32	s1, s17
 802e834:	ecbd 8b04 	vpop	{d8-d9}
 802e838:	bd08      	pop	{r3, pc}
	...

0802e83c <__fpclassifyd>:
 802e83c:	ec51 0b10 	vmov	r0, r1, d0
 802e840:	b510      	push	{r4, lr}
 802e842:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802e846:	460b      	mov	r3, r1
 802e848:	d019      	beq.n	802e87e <__fpclassifyd+0x42>
 802e84a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802e84e:	490e      	ldr	r1, [pc, #56]	; (802e888 <__fpclassifyd+0x4c>)
 802e850:	428a      	cmp	r2, r1
 802e852:	d90e      	bls.n	802e872 <__fpclassifyd+0x36>
 802e854:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802e858:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802e85c:	428a      	cmp	r2, r1
 802e85e:	d908      	bls.n	802e872 <__fpclassifyd+0x36>
 802e860:	4a0a      	ldr	r2, [pc, #40]	; (802e88c <__fpclassifyd+0x50>)
 802e862:	4213      	tst	r3, r2
 802e864:	d007      	beq.n	802e876 <__fpclassifyd+0x3a>
 802e866:	4294      	cmp	r4, r2
 802e868:	d107      	bne.n	802e87a <__fpclassifyd+0x3e>
 802e86a:	fab0 f080 	clz	r0, r0
 802e86e:	0940      	lsrs	r0, r0, #5
 802e870:	bd10      	pop	{r4, pc}
 802e872:	2004      	movs	r0, #4
 802e874:	e7fc      	b.n	802e870 <__fpclassifyd+0x34>
 802e876:	2003      	movs	r0, #3
 802e878:	e7fa      	b.n	802e870 <__fpclassifyd+0x34>
 802e87a:	2000      	movs	r0, #0
 802e87c:	e7f8      	b.n	802e870 <__fpclassifyd+0x34>
 802e87e:	2800      	cmp	r0, #0
 802e880:	d1ee      	bne.n	802e860 <__fpclassifyd+0x24>
 802e882:	2002      	movs	r0, #2
 802e884:	e7f4      	b.n	802e870 <__fpclassifyd+0x34>
 802e886:	bf00      	nop
 802e888:	7fdfffff 	.word	0x7fdfffff
 802e88c:	7ff00000 	.word	0x7ff00000

0802e890 <exp>:
 802e890:	b538      	push	{r3, r4, r5, lr}
 802e892:	ed2d 8b02 	vpush	{d8}
 802e896:	ec55 4b10 	vmov	r4, r5, d0
 802e89a:	f000 f8c5 	bl	802ea28 <__ieee754_exp>
 802e89e:	4b22      	ldr	r3, [pc, #136]	; (802e928 <exp+0x98>)
 802e8a0:	eeb0 8a40 	vmov.f32	s16, s0
 802e8a4:	eef0 8a60 	vmov.f32	s17, s1
 802e8a8:	f993 3000 	ldrsb.w	r3, [r3]
 802e8ac:	3301      	adds	r3, #1
 802e8ae:	d012      	beq.n	802e8d6 <exp+0x46>
 802e8b0:	ec45 4b10 	vmov	d0, r4, r5
 802e8b4:	f000 fca2 	bl	802f1fc <finite>
 802e8b8:	b168      	cbz	r0, 802e8d6 <exp+0x46>
 802e8ba:	a313      	add	r3, pc, #76	; (adr r3, 802e908 <exp+0x78>)
 802e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8c0:	4620      	mov	r0, r4
 802e8c2:	4629      	mov	r1, r5
 802e8c4:	f7d2 f91a 	bl	8000afc <__aeabi_dcmpgt>
 802e8c8:	b160      	cbz	r0, 802e8e4 <exp+0x54>
 802e8ca:	f7ff fe79 	bl	802e5c0 <__errno>
 802e8ce:	ed9f 8b10 	vldr	d8, [pc, #64]	; 802e910 <exp+0x80>
 802e8d2:	2322      	movs	r3, #34	; 0x22
 802e8d4:	6003      	str	r3, [r0, #0]
 802e8d6:	eeb0 0a48 	vmov.f32	s0, s16
 802e8da:	eef0 0a68 	vmov.f32	s1, s17
 802e8de:	ecbd 8b02 	vpop	{d8}
 802e8e2:	bd38      	pop	{r3, r4, r5, pc}
 802e8e4:	a30c      	add	r3, pc, #48	; (adr r3, 802e918 <exp+0x88>)
 802e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8ea:	4620      	mov	r0, r4
 802e8ec:	4629      	mov	r1, r5
 802e8ee:	f7d2 f8e7 	bl	8000ac0 <__aeabi_dcmplt>
 802e8f2:	2800      	cmp	r0, #0
 802e8f4:	d0ef      	beq.n	802e8d6 <exp+0x46>
 802e8f6:	f7ff fe63 	bl	802e5c0 <__errno>
 802e8fa:	2322      	movs	r3, #34	; 0x22
 802e8fc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 802e920 <exp+0x90>
 802e900:	6003      	str	r3, [r0, #0]
 802e902:	e7e8      	b.n	802e8d6 <exp+0x46>
 802e904:	f3af 8000 	nop.w
 802e908:	fefa39ef 	.word	0xfefa39ef
 802e90c:	40862e42 	.word	0x40862e42
 802e910:	00000000 	.word	0x00000000
 802e914:	7ff00000 	.word	0x7ff00000
 802e918:	d52d3051 	.word	0xd52d3051
 802e91c:	c0874910 	.word	0xc0874910
	...
 802e928:	200014a8 	.word	0x200014a8
 802e92c:	00000000 	.word	0x00000000

0802e930 <log>:
 802e930:	b538      	push	{r3, r4, r5, lr}
 802e932:	ed2d 8b02 	vpush	{d8}
 802e936:	ec55 4b10 	vmov	r4, r5, d0
 802e93a:	f000 f9f1 	bl	802ed20 <__ieee754_log>
 802e93e:	4b1e      	ldr	r3, [pc, #120]	; (802e9b8 <log+0x88>)
 802e940:	eeb0 8a40 	vmov.f32	s16, s0
 802e944:	eef0 8a60 	vmov.f32	s17, s1
 802e948:	f993 3000 	ldrsb.w	r3, [r3]
 802e94c:	3301      	adds	r3, #1
 802e94e:	d01a      	beq.n	802e986 <log+0x56>
 802e950:	4622      	mov	r2, r4
 802e952:	462b      	mov	r3, r5
 802e954:	4620      	mov	r0, r4
 802e956:	4629      	mov	r1, r5
 802e958:	f7d2 f8da 	bl	8000b10 <__aeabi_dcmpun>
 802e95c:	b998      	cbnz	r0, 802e986 <log+0x56>
 802e95e:	2200      	movs	r2, #0
 802e960:	2300      	movs	r3, #0
 802e962:	4620      	mov	r0, r4
 802e964:	4629      	mov	r1, r5
 802e966:	f7d2 f8c9 	bl	8000afc <__aeabi_dcmpgt>
 802e96a:	b960      	cbnz	r0, 802e986 <log+0x56>
 802e96c:	2200      	movs	r2, #0
 802e96e:	2300      	movs	r3, #0
 802e970:	4620      	mov	r0, r4
 802e972:	4629      	mov	r1, r5
 802e974:	f7d2 f89a 	bl	8000aac <__aeabi_dcmpeq>
 802e978:	b160      	cbz	r0, 802e994 <log+0x64>
 802e97a:	f7ff fe21 	bl	802e5c0 <__errno>
 802e97e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 802e9b0 <log+0x80>
 802e982:	2322      	movs	r3, #34	; 0x22
 802e984:	6003      	str	r3, [r0, #0]
 802e986:	eeb0 0a48 	vmov.f32	s0, s16
 802e98a:	eef0 0a68 	vmov.f32	s1, s17
 802e98e:	ecbd 8b02 	vpop	{d8}
 802e992:	bd38      	pop	{r3, r4, r5, pc}
 802e994:	f7ff fe14 	bl	802e5c0 <__errno>
 802e998:	ecbd 8b02 	vpop	{d8}
 802e99c:	2321      	movs	r3, #33	; 0x21
 802e99e:	6003      	str	r3, [r0, #0]
 802e9a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e9a4:	4805      	ldr	r0, [pc, #20]	; (802e9bc <log+0x8c>)
 802e9a6:	f000 bc37 	b.w	802f218 <nan>
 802e9aa:	bf00      	nop
 802e9ac:	f3af 8000 	nop.w
 802e9b0:	00000000 	.word	0x00000000
 802e9b4:	fff00000 	.word	0xfff00000
 802e9b8:	200014a8 	.word	0x200014a8
 802e9bc:	0802fa9c 	.word	0x0802fa9c

0802e9c0 <sqrt>:
 802e9c0:	b538      	push	{r3, r4, r5, lr}
 802e9c2:	ed2d 8b02 	vpush	{d8}
 802e9c6:	ec55 4b10 	vmov	r4, r5, d0
 802e9ca:	f000 fb63 	bl	802f094 <__ieee754_sqrt>
 802e9ce:	4b15      	ldr	r3, [pc, #84]	; (802ea24 <sqrt+0x64>)
 802e9d0:	eeb0 8a40 	vmov.f32	s16, s0
 802e9d4:	eef0 8a60 	vmov.f32	s17, s1
 802e9d8:	f993 3000 	ldrsb.w	r3, [r3]
 802e9dc:	3301      	adds	r3, #1
 802e9de:	d019      	beq.n	802ea14 <sqrt+0x54>
 802e9e0:	4622      	mov	r2, r4
 802e9e2:	462b      	mov	r3, r5
 802e9e4:	4620      	mov	r0, r4
 802e9e6:	4629      	mov	r1, r5
 802e9e8:	f7d2 f892 	bl	8000b10 <__aeabi_dcmpun>
 802e9ec:	b990      	cbnz	r0, 802ea14 <sqrt+0x54>
 802e9ee:	2200      	movs	r2, #0
 802e9f0:	2300      	movs	r3, #0
 802e9f2:	4620      	mov	r0, r4
 802e9f4:	4629      	mov	r1, r5
 802e9f6:	f7d2 f863 	bl	8000ac0 <__aeabi_dcmplt>
 802e9fa:	b158      	cbz	r0, 802ea14 <sqrt+0x54>
 802e9fc:	f7ff fde0 	bl	802e5c0 <__errno>
 802ea00:	2321      	movs	r3, #33	; 0x21
 802ea02:	6003      	str	r3, [r0, #0]
 802ea04:	2200      	movs	r2, #0
 802ea06:	2300      	movs	r3, #0
 802ea08:	4610      	mov	r0, r2
 802ea0a:	4619      	mov	r1, r3
 802ea0c:	f7d1 ff10 	bl	8000830 <__aeabi_ddiv>
 802ea10:	ec41 0b18 	vmov	d8, r0, r1
 802ea14:	eeb0 0a48 	vmov.f32	s0, s16
 802ea18:	eef0 0a68 	vmov.f32	s1, s17
 802ea1c:	ecbd 8b02 	vpop	{d8}
 802ea20:	bd38      	pop	{r3, r4, r5, pc}
 802ea22:	bf00      	nop
 802ea24:	200014a8 	.word	0x200014a8

0802ea28 <__ieee754_exp>:
 802ea28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ea2c:	ec55 4b10 	vmov	r4, r5, d0
 802ea30:	49b1      	ldr	r1, [pc, #708]	; (802ecf8 <__ieee754_exp+0x2d0>)
 802ea32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802ea36:	428b      	cmp	r3, r1
 802ea38:	ed2d 8b04 	vpush	{d8-d9}
 802ea3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 802ea40:	d937      	bls.n	802eab2 <__ieee754_exp+0x8a>
 802ea42:	49ae      	ldr	r1, [pc, #696]	; (802ecfc <__ieee754_exp+0x2d4>)
 802ea44:	428b      	cmp	r3, r1
 802ea46:	d916      	bls.n	802ea76 <__ieee754_exp+0x4e>
 802ea48:	ee10 3a10 	vmov	r3, s0
 802ea4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 802ea50:	4313      	orrs	r3, r2
 802ea52:	d009      	beq.n	802ea68 <__ieee754_exp+0x40>
 802ea54:	ee10 2a10 	vmov	r2, s0
 802ea58:	462b      	mov	r3, r5
 802ea5a:	4620      	mov	r0, r4
 802ea5c:	4629      	mov	r1, r5
 802ea5e:	f7d1 fc07 	bl	8000270 <__adddf3>
 802ea62:	4604      	mov	r4, r0
 802ea64:	460d      	mov	r5, r1
 802ea66:	e000      	b.n	802ea6a <__ieee754_exp+0x42>
 802ea68:	bb06      	cbnz	r6, 802eaac <__ieee754_exp+0x84>
 802ea6a:	ecbd 8b04 	vpop	{d8-d9}
 802ea6e:	ec45 4b10 	vmov	d0, r4, r5
 802ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea76:	a38a      	add	r3, pc, #552	; (adr r3, 802eca0 <__ieee754_exp+0x278>)
 802ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea7c:	ee10 0a10 	vmov	r0, s0
 802ea80:	4629      	mov	r1, r5
 802ea82:	f7d2 f83b 	bl	8000afc <__aeabi_dcmpgt>
 802ea86:	b138      	cbz	r0, 802ea98 <__ieee754_exp+0x70>
 802ea88:	a387      	add	r3, pc, #540	; (adr r3, 802eca8 <__ieee754_exp+0x280>)
 802ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea8e:	4610      	mov	r0, r2
 802ea90:	4619      	mov	r1, r3
 802ea92:	f7d1 fda3 	bl	80005dc <__aeabi_dmul>
 802ea96:	e7e4      	b.n	802ea62 <__ieee754_exp+0x3a>
 802ea98:	a385      	add	r3, pc, #532	; (adr r3, 802ecb0 <__ieee754_exp+0x288>)
 802ea9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea9e:	4620      	mov	r0, r4
 802eaa0:	4629      	mov	r1, r5
 802eaa2:	f7d2 f80d 	bl	8000ac0 <__aeabi_dcmplt>
 802eaa6:	2800      	cmp	r0, #0
 802eaa8:	f000 8087 	beq.w	802ebba <__ieee754_exp+0x192>
 802eaac:	2400      	movs	r4, #0
 802eaae:	2500      	movs	r5, #0
 802eab0:	e7db      	b.n	802ea6a <__ieee754_exp+0x42>
 802eab2:	4a93      	ldr	r2, [pc, #588]	; (802ed00 <__ieee754_exp+0x2d8>)
 802eab4:	4293      	cmp	r3, r2
 802eab6:	f240 80ac 	bls.w	802ec12 <__ieee754_exp+0x1ea>
 802eaba:	4a92      	ldr	r2, [pc, #584]	; (802ed04 <__ieee754_exp+0x2dc>)
 802eabc:	4293      	cmp	r3, r2
 802eabe:	d87c      	bhi.n	802ebba <__ieee754_exp+0x192>
 802eac0:	4b91      	ldr	r3, [pc, #580]	; (802ed08 <__ieee754_exp+0x2e0>)
 802eac2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eaca:	ee10 0a10 	vmov	r0, s0
 802eace:	4629      	mov	r1, r5
 802ead0:	f7d1 fbcc 	bl	800026c <__aeabi_dsub>
 802ead4:	4b8d      	ldr	r3, [pc, #564]	; (802ed0c <__ieee754_exp+0x2e4>)
 802ead6:	00f7      	lsls	r7, r6, #3
 802ead8:	443b      	add	r3, r7
 802eada:	ed93 7b00 	vldr	d7, [r3]
 802eade:	f1c6 0a01 	rsb	sl, r6, #1
 802eae2:	4680      	mov	r8, r0
 802eae4:	4689      	mov	r9, r1
 802eae6:	ebaa 0a06 	sub.w	sl, sl, r6
 802eaea:	eeb0 8a47 	vmov.f32	s16, s14
 802eaee:	eef0 8a67 	vmov.f32	s17, s15
 802eaf2:	ec53 2b18 	vmov	r2, r3, d8
 802eaf6:	4640      	mov	r0, r8
 802eaf8:	4649      	mov	r1, r9
 802eafa:	f7d1 fbb7 	bl	800026c <__aeabi_dsub>
 802eafe:	4604      	mov	r4, r0
 802eb00:	460d      	mov	r5, r1
 802eb02:	4622      	mov	r2, r4
 802eb04:	462b      	mov	r3, r5
 802eb06:	4620      	mov	r0, r4
 802eb08:	4629      	mov	r1, r5
 802eb0a:	f7d1 fd67 	bl	80005dc <__aeabi_dmul>
 802eb0e:	a36a      	add	r3, pc, #424	; (adr r3, 802ecb8 <__ieee754_exp+0x290>)
 802eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb14:	4606      	mov	r6, r0
 802eb16:	460f      	mov	r7, r1
 802eb18:	f7d1 fd60 	bl	80005dc <__aeabi_dmul>
 802eb1c:	a368      	add	r3, pc, #416	; (adr r3, 802ecc0 <__ieee754_exp+0x298>)
 802eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb22:	f7d1 fba3 	bl	800026c <__aeabi_dsub>
 802eb26:	4632      	mov	r2, r6
 802eb28:	463b      	mov	r3, r7
 802eb2a:	f7d1 fd57 	bl	80005dc <__aeabi_dmul>
 802eb2e:	a366      	add	r3, pc, #408	; (adr r3, 802ecc8 <__ieee754_exp+0x2a0>)
 802eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb34:	f7d1 fb9c 	bl	8000270 <__adddf3>
 802eb38:	4632      	mov	r2, r6
 802eb3a:	463b      	mov	r3, r7
 802eb3c:	f7d1 fd4e 	bl	80005dc <__aeabi_dmul>
 802eb40:	a363      	add	r3, pc, #396	; (adr r3, 802ecd0 <__ieee754_exp+0x2a8>)
 802eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb46:	f7d1 fb91 	bl	800026c <__aeabi_dsub>
 802eb4a:	4632      	mov	r2, r6
 802eb4c:	463b      	mov	r3, r7
 802eb4e:	f7d1 fd45 	bl	80005dc <__aeabi_dmul>
 802eb52:	a361      	add	r3, pc, #388	; (adr r3, 802ecd8 <__ieee754_exp+0x2b0>)
 802eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb58:	f7d1 fb8a 	bl	8000270 <__adddf3>
 802eb5c:	4632      	mov	r2, r6
 802eb5e:	463b      	mov	r3, r7
 802eb60:	f7d1 fd3c 	bl	80005dc <__aeabi_dmul>
 802eb64:	4602      	mov	r2, r0
 802eb66:	460b      	mov	r3, r1
 802eb68:	4620      	mov	r0, r4
 802eb6a:	4629      	mov	r1, r5
 802eb6c:	f7d1 fb7e 	bl	800026c <__aeabi_dsub>
 802eb70:	4602      	mov	r2, r0
 802eb72:	460b      	mov	r3, r1
 802eb74:	4606      	mov	r6, r0
 802eb76:	460f      	mov	r7, r1
 802eb78:	4620      	mov	r0, r4
 802eb7a:	4629      	mov	r1, r5
 802eb7c:	f7d1 fd2e 	bl	80005dc <__aeabi_dmul>
 802eb80:	ec41 0b19 	vmov	d9, r0, r1
 802eb84:	f1ba 0f00 	cmp.w	sl, #0
 802eb88:	d15d      	bne.n	802ec46 <__ieee754_exp+0x21e>
 802eb8a:	2200      	movs	r2, #0
 802eb8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802eb90:	4630      	mov	r0, r6
 802eb92:	4639      	mov	r1, r7
 802eb94:	f7d1 fb6a 	bl	800026c <__aeabi_dsub>
 802eb98:	4602      	mov	r2, r0
 802eb9a:	460b      	mov	r3, r1
 802eb9c:	ec51 0b19 	vmov	r0, r1, d9
 802eba0:	f7d1 fe46 	bl	8000830 <__aeabi_ddiv>
 802eba4:	4622      	mov	r2, r4
 802eba6:	462b      	mov	r3, r5
 802eba8:	f7d1 fb60 	bl	800026c <__aeabi_dsub>
 802ebac:	4602      	mov	r2, r0
 802ebae:	460b      	mov	r3, r1
 802ebb0:	2000      	movs	r0, #0
 802ebb2:	4957      	ldr	r1, [pc, #348]	; (802ed10 <__ieee754_exp+0x2e8>)
 802ebb4:	f7d1 fb5a 	bl	800026c <__aeabi_dsub>
 802ebb8:	e753      	b.n	802ea62 <__ieee754_exp+0x3a>
 802ebba:	4856      	ldr	r0, [pc, #344]	; (802ed14 <__ieee754_exp+0x2ec>)
 802ebbc:	a348      	add	r3, pc, #288	; (adr r3, 802ece0 <__ieee754_exp+0x2b8>)
 802ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebc2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802ebc6:	4629      	mov	r1, r5
 802ebc8:	4620      	mov	r0, r4
 802ebca:	f7d1 fd07 	bl	80005dc <__aeabi_dmul>
 802ebce:	e9d6 2300 	ldrd	r2, r3, [r6]
 802ebd2:	f7d1 fb4d 	bl	8000270 <__adddf3>
 802ebd6:	f7d1 ffb1 	bl	8000b3c <__aeabi_d2iz>
 802ebda:	4682      	mov	sl, r0
 802ebdc:	f7d1 fc94 	bl	8000508 <__aeabi_i2d>
 802ebe0:	a341      	add	r3, pc, #260	; (adr r3, 802ece8 <__ieee754_exp+0x2c0>)
 802ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebe6:	4606      	mov	r6, r0
 802ebe8:	460f      	mov	r7, r1
 802ebea:	f7d1 fcf7 	bl	80005dc <__aeabi_dmul>
 802ebee:	4602      	mov	r2, r0
 802ebf0:	460b      	mov	r3, r1
 802ebf2:	4620      	mov	r0, r4
 802ebf4:	4629      	mov	r1, r5
 802ebf6:	f7d1 fb39 	bl	800026c <__aeabi_dsub>
 802ebfa:	a33d      	add	r3, pc, #244	; (adr r3, 802ecf0 <__ieee754_exp+0x2c8>)
 802ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec00:	4680      	mov	r8, r0
 802ec02:	4689      	mov	r9, r1
 802ec04:	4630      	mov	r0, r6
 802ec06:	4639      	mov	r1, r7
 802ec08:	f7d1 fce8 	bl	80005dc <__aeabi_dmul>
 802ec0c:	ec41 0b18 	vmov	d8, r0, r1
 802ec10:	e76f      	b.n	802eaf2 <__ieee754_exp+0xca>
 802ec12:	4a41      	ldr	r2, [pc, #260]	; (802ed18 <__ieee754_exp+0x2f0>)
 802ec14:	4293      	cmp	r3, r2
 802ec16:	d811      	bhi.n	802ec3c <__ieee754_exp+0x214>
 802ec18:	a323      	add	r3, pc, #140	; (adr r3, 802eca8 <__ieee754_exp+0x280>)
 802ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec1e:	ee10 0a10 	vmov	r0, s0
 802ec22:	4629      	mov	r1, r5
 802ec24:	f7d1 fb24 	bl	8000270 <__adddf3>
 802ec28:	4b39      	ldr	r3, [pc, #228]	; (802ed10 <__ieee754_exp+0x2e8>)
 802ec2a:	2200      	movs	r2, #0
 802ec2c:	f7d1 ff66 	bl	8000afc <__aeabi_dcmpgt>
 802ec30:	b138      	cbz	r0, 802ec42 <__ieee754_exp+0x21a>
 802ec32:	4b37      	ldr	r3, [pc, #220]	; (802ed10 <__ieee754_exp+0x2e8>)
 802ec34:	2200      	movs	r2, #0
 802ec36:	4620      	mov	r0, r4
 802ec38:	4629      	mov	r1, r5
 802ec3a:	e710      	b.n	802ea5e <__ieee754_exp+0x36>
 802ec3c:	f04f 0a00 	mov.w	sl, #0
 802ec40:	e75f      	b.n	802eb02 <__ieee754_exp+0xda>
 802ec42:	4682      	mov	sl, r0
 802ec44:	e75d      	b.n	802eb02 <__ieee754_exp+0xda>
 802ec46:	4632      	mov	r2, r6
 802ec48:	463b      	mov	r3, r7
 802ec4a:	2000      	movs	r0, #0
 802ec4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802ec50:	f7d1 fb0c 	bl	800026c <__aeabi_dsub>
 802ec54:	4602      	mov	r2, r0
 802ec56:	460b      	mov	r3, r1
 802ec58:	ec51 0b19 	vmov	r0, r1, d9
 802ec5c:	f7d1 fde8 	bl	8000830 <__aeabi_ddiv>
 802ec60:	4602      	mov	r2, r0
 802ec62:	460b      	mov	r3, r1
 802ec64:	ec51 0b18 	vmov	r0, r1, d8
 802ec68:	f7d1 fb00 	bl	800026c <__aeabi_dsub>
 802ec6c:	4642      	mov	r2, r8
 802ec6e:	464b      	mov	r3, r9
 802ec70:	f7d1 fafc 	bl	800026c <__aeabi_dsub>
 802ec74:	4602      	mov	r2, r0
 802ec76:	460b      	mov	r3, r1
 802ec78:	2000      	movs	r0, #0
 802ec7a:	4925      	ldr	r1, [pc, #148]	; (802ed10 <__ieee754_exp+0x2e8>)
 802ec7c:	f7d1 faf6 	bl	800026c <__aeabi_dsub>
 802ec80:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 802ec84:	4592      	cmp	sl, r2
 802ec86:	db02      	blt.n	802ec8e <__ieee754_exp+0x266>
 802ec88:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802ec8c:	e6e9      	b.n	802ea62 <__ieee754_exp+0x3a>
 802ec8e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802ec92:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802ec96:	2200      	movs	r2, #0
 802ec98:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802ec9c:	e6f9      	b.n	802ea92 <__ieee754_exp+0x6a>
 802ec9e:	bf00      	nop
 802eca0:	fefa39ef 	.word	0xfefa39ef
 802eca4:	40862e42 	.word	0x40862e42
 802eca8:	8800759c 	.word	0x8800759c
 802ecac:	7e37e43c 	.word	0x7e37e43c
 802ecb0:	d52d3051 	.word	0xd52d3051
 802ecb4:	c0874910 	.word	0xc0874910
 802ecb8:	72bea4d0 	.word	0x72bea4d0
 802ecbc:	3e663769 	.word	0x3e663769
 802ecc0:	c5d26bf1 	.word	0xc5d26bf1
 802ecc4:	3ebbbd41 	.word	0x3ebbbd41
 802ecc8:	af25de2c 	.word	0xaf25de2c
 802eccc:	3f11566a 	.word	0x3f11566a
 802ecd0:	16bebd93 	.word	0x16bebd93
 802ecd4:	3f66c16c 	.word	0x3f66c16c
 802ecd8:	5555553e 	.word	0x5555553e
 802ecdc:	3fc55555 	.word	0x3fc55555
 802ece0:	652b82fe 	.word	0x652b82fe
 802ece4:	3ff71547 	.word	0x3ff71547
 802ece8:	fee00000 	.word	0xfee00000
 802ecec:	3fe62e42 	.word	0x3fe62e42
 802ecf0:	35793c76 	.word	0x35793c76
 802ecf4:	3dea39ef 	.word	0x3dea39ef
 802ecf8:	40862e41 	.word	0x40862e41
 802ecfc:	7fefffff 	.word	0x7fefffff
 802ed00:	3fd62e42 	.word	0x3fd62e42
 802ed04:	3ff0a2b1 	.word	0x3ff0a2b1
 802ed08:	0802fab0 	.word	0x0802fab0
 802ed0c:	0802fac0 	.word	0x0802fac0
 802ed10:	3ff00000 	.word	0x3ff00000
 802ed14:	0802faa0 	.word	0x0802faa0
 802ed18:	3e2fffff 	.word	0x3e2fffff
 802ed1c:	00000000 	.word	0x00000000

0802ed20 <__ieee754_log>:
 802ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed24:	ec51 0b10 	vmov	r0, r1, d0
 802ed28:	ed2d 8b04 	vpush	{d8-d9}
 802ed2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802ed30:	b083      	sub	sp, #12
 802ed32:	460d      	mov	r5, r1
 802ed34:	da29      	bge.n	802ed8a <__ieee754_log+0x6a>
 802ed36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802ed3a:	4303      	orrs	r3, r0
 802ed3c:	ee10 2a10 	vmov	r2, s0
 802ed40:	d10c      	bne.n	802ed5c <__ieee754_log+0x3c>
 802ed42:	49cf      	ldr	r1, [pc, #828]	; (802f080 <__ieee754_log+0x360>)
 802ed44:	2200      	movs	r2, #0
 802ed46:	2300      	movs	r3, #0
 802ed48:	2000      	movs	r0, #0
 802ed4a:	f7d1 fd71 	bl	8000830 <__aeabi_ddiv>
 802ed4e:	ec41 0b10 	vmov	d0, r0, r1
 802ed52:	b003      	add	sp, #12
 802ed54:	ecbd 8b04 	vpop	{d8-d9}
 802ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ed5c:	2900      	cmp	r1, #0
 802ed5e:	da05      	bge.n	802ed6c <__ieee754_log+0x4c>
 802ed60:	460b      	mov	r3, r1
 802ed62:	f7d1 fa83 	bl	800026c <__aeabi_dsub>
 802ed66:	2200      	movs	r2, #0
 802ed68:	2300      	movs	r3, #0
 802ed6a:	e7ee      	b.n	802ed4a <__ieee754_log+0x2a>
 802ed6c:	4bc5      	ldr	r3, [pc, #788]	; (802f084 <__ieee754_log+0x364>)
 802ed6e:	2200      	movs	r2, #0
 802ed70:	f7d1 fc34 	bl	80005dc <__aeabi_dmul>
 802ed74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802ed78:	460d      	mov	r5, r1
 802ed7a:	4ac3      	ldr	r2, [pc, #780]	; (802f088 <__ieee754_log+0x368>)
 802ed7c:	4295      	cmp	r5, r2
 802ed7e:	dd06      	ble.n	802ed8e <__ieee754_log+0x6e>
 802ed80:	4602      	mov	r2, r0
 802ed82:	460b      	mov	r3, r1
 802ed84:	f7d1 fa74 	bl	8000270 <__adddf3>
 802ed88:	e7e1      	b.n	802ed4e <__ieee754_log+0x2e>
 802ed8a:	2300      	movs	r3, #0
 802ed8c:	e7f5      	b.n	802ed7a <__ieee754_log+0x5a>
 802ed8e:	152c      	asrs	r4, r5, #20
 802ed90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802ed94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802ed98:	441c      	add	r4, r3
 802ed9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802ed9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802eda2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802eda6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802edaa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802edae:	ea42 0105 	orr.w	r1, r2, r5
 802edb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802edb6:	2200      	movs	r2, #0
 802edb8:	4bb4      	ldr	r3, [pc, #720]	; (802f08c <__ieee754_log+0x36c>)
 802edba:	f7d1 fa57 	bl	800026c <__aeabi_dsub>
 802edbe:	1cab      	adds	r3, r5, #2
 802edc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802edc4:	2b02      	cmp	r3, #2
 802edc6:	4682      	mov	sl, r0
 802edc8:	468b      	mov	fp, r1
 802edca:	f04f 0200 	mov.w	r2, #0
 802edce:	dc53      	bgt.n	802ee78 <__ieee754_log+0x158>
 802edd0:	2300      	movs	r3, #0
 802edd2:	f7d1 fe6b 	bl	8000aac <__aeabi_dcmpeq>
 802edd6:	b1d0      	cbz	r0, 802ee0e <__ieee754_log+0xee>
 802edd8:	2c00      	cmp	r4, #0
 802edda:	f000 8122 	beq.w	802f022 <__ieee754_log+0x302>
 802edde:	4620      	mov	r0, r4
 802ede0:	f7d1 fb92 	bl	8000508 <__aeabi_i2d>
 802ede4:	a390      	add	r3, pc, #576	; (adr r3, 802f028 <__ieee754_log+0x308>)
 802ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edea:	4606      	mov	r6, r0
 802edec:	460f      	mov	r7, r1
 802edee:	f7d1 fbf5 	bl	80005dc <__aeabi_dmul>
 802edf2:	a38f      	add	r3, pc, #572	; (adr r3, 802f030 <__ieee754_log+0x310>)
 802edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edf8:	4604      	mov	r4, r0
 802edfa:	460d      	mov	r5, r1
 802edfc:	4630      	mov	r0, r6
 802edfe:	4639      	mov	r1, r7
 802ee00:	f7d1 fbec 	bl	80005dc <__aeabi_dmul>
 802ee04:	4602      	mov	r2, r0
 802ee06:	460b      	mov	r3, r1
 802ee08:	4620      	mov	r0, r4
 802ee0a:	4629      	mov	r1, r5
 802ee0c:	e7ba      	b.n	802ed84 <__ieee754_log+0x64>
 802ee0e:	a38a      	add	r3, pc, #552	; (adr r3, 802f038 <__ieee754_log+0x318>)
 802ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee14:	4650      	mov	r0, sl
 802ee16:	4659      	mov	r1, fp
 802ee18:	f7d1 fbe0 	bl	80005dc <__aeabi_dmul>
 802ee1c:	4602      	mov	r2, r0
 802ee1e:	460b      	mov	r3, r1
 802ee20:	2000      	movs	r0, #0
 802ee22:	499b      	ldr	r1, [pc, #620]	; (802f090 <__ieee754_log+0x370>)
 802ee24:	f7d1 fa22 	bl	800026c <__aeabi_dsub>
 802ee28:	4652      	mov	r2, sl
 802ee2a:	4606      	mov	r6, r0
 802ee2c:	460f      	mov	r7, r1
 802ee2e:	465b      	mov	r3, fp
 802ee30:	4650      	mov	r0, sl
 802ee32:	4659      	mov	r1, fp
 802ee34:	f7d1 fbd2 	bl	80005dc <__aeabi_dmul>
 802ee38:	4602      	mov	r2, r0
 802ee3a:	460b      	mov	r3, r1
 802ee3c:	4630      	mov	r0, r6
 802ee3e:	4639      	mov	r1, r7
 802ee40:	f7d1 fbcc 	bl	80005dc <__aeabi_dmul>
 802ee44:	4606      	mov	r6, r0
 802ee46:	460f      	mov	r7, r1
 802ee48:	b914      	cbnz	r4, 802ee50 <__ieee754_log+0x130>
 802ee4a:	4632      	mov	r2, r6
 802ee4c:	463b      	mov	r3, r7
 802ee4e:	e0a2      	b.n	802ef96 <__ieee754_log+0x276>
 802ee50:	4620      	mov	r0, r4
 802ee52:	f7d1 fb59 	bl	8000508 <__aeabi_i2d>
 802ee56:	a374      	add	r3, pc, #464	; (adr r3, 802f028 <__ieee754_log+0x308>)
 802ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee5c:	4680      	mov	r8, r0
 802ee5e:	4689      	mov	r9, r1
 802ee60:	f7d1 fbbc 	bl	80005dc <__aeabi_dmul>
 802ee64:	a372      	add	r3, pc, #456	; (adr r3, 802f030 <__ieee754_log+0x310>)
 802ee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee6a:	4604      	mov	r4, r0
 802ee6c:	460d      	mov	r5, r1
 802ee6e:	4640      	mov	r0, r8
 802ee70:	4649      	mov	r1, r9
 802ee72:	f7d1 fbb3 	bl	80005dc <__aeabi_dmul>
 802ee76:	e0a7      	b.n	802efc8 <__ieee754_log+0x2a8>
 802ee78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ee7c:	f7d1 f9f8 	bl	8000270 <__adddf3>
 802ee80:	4602      	mov	r2, r0
 802ee82:	460b      	mov	r3, r1
 802ee84:	4650      	mov	r0, sl
 802ee86:	4659      	mov	r1, fp
 802ee88:	f7d1 fcd2 	bl	8000830 <__aeabi_ddiv>
 802ee8c:	ec41 0b18 	vmov	d8, r0, r1
 802ee90:	4620      	mov	r0, r4
 802ee92:	f7d1 fb39 	bl	8000508 <__aeabi_i2d>
 802ee96:	ec53 2b18 	vmov	r2, r3, d8
 802ee9a:	ec41 0b19 	vmov	d9, r0, r1
 802ee9e:	ec51 0b18 	vmov	r0, r1, d8
 802eea2:	f7d1 fb9b 	bl	80005dc <__aeabi_dmul>
 802eea6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 802eeaa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 802eeae:	9301      	str	r3, [sp, #4]
 802eeb0:	4602      	mov	r2, r0
 802eeb2:	460b      	mov	r3, r1
 802eeb4:	4680      	mov	r8, r0
 802eeb6:	4689      	mov	r9, r1
 802eeb8:	f7d1 fb90 	bl	80005dc <__aeabi_dmul>
 802eebc:	a360      	add	r3, pc, #384	; (adr r3, 802f040 <__ieee754_log+0x320>)
 802eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eec2:	4606      	mov	r6, r0
 802eec4:	460f      	mov	r7, r1
 802eec6:	f7d1 fb89 	bl	80005dc <__aeabi_dmul>
 802eeca:	a35f      	add	r3, pc, #380	; (adr r3, 802f048 <__ieee754_log+0x328>)
 802eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eed0:	f7d1 f9ce 	bl	8000270 <__adddf3>
 802eed4:	4632      	mov	r2, r6
 802eed6:	463b      	mov	r3, r7
 802eed8:	f7d1 fb80 	bl	80005dc <__aeabi_dmul>
 802eedc:	a35c      	add	r3, pc, #368	; (adr r3, 802f050 <__ieee754_log+0x330>)
 802eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eee2:	f7d1 f9c5 	bl	8000270 <__adddf3>
 802eee6:	4632      	mov	r2, r6
 802eee8:	463b      	mov	r3, r7
 802eeea:	f7d1 fb77 	bl	80005dc <__aeabi_dmul>
 802eeee:	a35a      	add	r3, pc, #360	; (adr r3, 802f058 <__ieee754_log+0x338>)
 802eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eef4:	f7d1 f9bc 	bl	8000270 <__adddf3>
 802eef8:	4642      	mov	r2, r8
 802eefa:	464b      	mov	r3, r9
 802eefc:	f7d1 fb6e 	bl	80005dc <__aeabi_dmul>
 802ef00:	a357      	add	r3, pc, #348	; (adr r3, 802f060 <__ieee754_log+0x340>)
 802ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef06:	4680      	mov	r8, r0
 802ef08:	4689      	mov	r9, r1
 802ef0a:	4630      	mov	r0, r6
 802ef0c:	4639      	mov	r1, r7
 802ef0e:	f7d1 fb65 	bl	80005dc <__aeabi_dmul>
 802ef12:	a355      	add	r3, pc, #340	; (adr r3, 802f068 <__ieee754_log+0x348>)
 802ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef18:	f7d1 f9aa 	bl	8000270 <__adddf3>
 802ef1c:	4632      	mov	r2, r6
 802ef1e:	463b      	mov	r3, r7
 802ef20:	f7d1 fb5c 	bl	80005dc <__aeabi_dmul>
 802ef24:	a352      	add	r3, pc, #328	; (adr r3, 802f070 <__ieee754_log+0x350>)
 802ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef2a:	f7d1 f9a1 	bl	8000270 <__adddf3>
 802ef2e:	4632      	mov	r2, r6
 802ef30:	463b      	mov	r3, r7
 802ef32:	f7d1 fb53 	bl	80005dc <__aeabi_dmul>
 802ef36:	460b      	mov	r3, r1
 802ef38:	4602      	mov	r2, r0
 802ef3a:	4649      	mov	r1, r9
 802ef3c:	4640      	mov	r0, r8
 802ef3e:	f7d1 f997 	bl	8000270 <__adddf3>
 802ef42:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802ef46:	9b01      	ldr	r3, [sp, #4]
 802ef48:	3551      	adds	r5, #81	; 0x51
 802ef4a:	431d      	orrs	r5, r3
 802ef4c:	2d00      	cmp	r5, #0
 802ef4e:	4680      	mov	r8, r0
 802ef50:	4689      	mov	r9, r1
 802ef52:	dd48      	ble.n	802efe6 <__ieee754_log+0x2c6>
 802ef54:	4b4e      	ldr	r3, [pc, #312]	; (802f090 <__ieee754_log+0x370>)
 802ef56:	2200      	movs	r2, #0
 802ef58:	4650      	mov	r0, sl
 802ef5a:	4659      	mov	r1, fp
 802ef5c:	f7d1 fb3e 	bl	80005dc <__aeabi_dmul>
 802ef60:	4652      	mov	r2, sl
 802ef62:	465b      	mov	r3, fp
 802ef64:	f7d1 fb3a 	bl	80005dc <__aeabi_dmul>
 802ef68:	4602      	mov	r2, r0
 802ef6a:	460b      	mov	r3, r1
 802ef6c:	4606      	mov	r6, r0
 802ef6e:	460f      	mov	r7, r1
 802ef70:	4640      	mov	r0, r8
 802ef72:	4649      	mov	r1, r9
 802ef74:	f7d1 f97c 	bl	8000270 <__adddf3>
 802ef78:	ec53 2b18 	vmov	r2, r3, d8
 802ef7c:	f7d1 fb2e 	bl	80005dc <__aeabi_dmul>
 802ef80:	4680      	mov	r8, r0
 802ef82:	4689      	mov	r9, r1
 802ef84:	b964      	cbnz	r4, 802efa0 <__ieee754_log+0x280>
 802ef86:	4602      	mov	r2, r0
 802ef88:	460b      	mov	r3, r1
 802ef8a:	4630      	mov	r0, r6
 802ef8c:	4639      	mov	r1, r7
 802ef8e:	f7d1 f96d 	bl	800026c <__aeabi_dsub>
 802ef92:	4602      	mov	r2, r0
 802ef94:	460b      	mov	r3, r1
 802ef96:	4650      	mov	r0, sl
 802ef98:	4659      	mov	r1, fp
 802ef9a:	f7d1 f967 	bl	800026c <__aeabi_dsub>
 802ef9e:	e6d6      	b.n	802ed4e <__ieee754_log+0x2e>
 802efa0:	a321      	add	r3, pc, #132	; (adr r3, 802f028 <__ieee754_log+0x308>)
 802efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efa6:	ec51 0b19 	vmov	r0, r1, d9
 802efaa:	f7d1 fb17 	bl	80005dc <__aeabi_dmul>
 802efae:	a320      	add	r3, pc, #128	; (adr r3, 802f030 <__ieee754_log+0x310>)
 802efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efb4:	4604      	mov	r4, r0
 802efb6:	460d      	mov	r5, r1
 802efb8:	ec51 0b19 	vmov	r0, r1, d9
 802efbc:	f7d1 fb0e 	bl	80005dc <__aeabi_dmul>
 802efc0:	4642      	mov	r2, r8
 802efc2:	464b      	mov	r3, r9
 802efc4:	f7d1 f954 	bl	8000270 <__adddf3>
 802efc8:	4602      	mov	r2, r0
 802efca:	460b      	mov	r3, r1
 802efcc:	4630      	mov	r0, r6
 802efce:	4639      	mov	r1, r7
 802efd0:	f7d1 f94c 	bl	800026c <__aeabi_dsub>
 802efd4:	4652      	mov	r2, sl
 802efd6:	465b      	mov	r3, fp
 802efd8:	f7d1 f948 	bl	800026c <__aeabi_dsub>
 802efdc:	4602      	mov	r2, r0
 802efde:	460b      	mov	r3, r1
 802efe0:	4620      	mov	r0, r4
 802efe2:	4629      	mov	r1, r5
 802efe4:	e7d9      	b.n	802ef9a <__ieee754_log+0x27a>
 802efe6:	4602      	mov	r2, r0
 802efe8:	460b      	mov	r3, r1
 802efea:	4650      	mov	r0, sl
 802efec:	4659      	mov	r1, fp
 802efee:	f7d1 f93d 	bl	800026c <__aeabi_dsub>
 802eff2:	ec53 2b18 	vmov	r2, r3, d8
 802eff6:	f7d1 faf1 	bl	80005dc <__aeabi_dmul>
 802effa:	4606      	mov	r6, r0
 802effc:	460f      	mov	r7, r1
 802effe:	2c00      	cmp	r4, #0
 802f000:	f43f af23 	beq.w	802ee4a <__ieee754_log+0x12a>
 802f004:	a308      	add	r3, pc, #32	; (adr r3, 802f028 <__ieee754_log+0x308>)
 802f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f00a:	ec51 0b19 	vmov	r0, r1, d9
 802f00e:	f7d1 fae5 	bl	80005dc <__aeabi_dmul>
 802f012:	a307      	add	r3, pc, #28	; (adr r3, 802f030 <__ieee754_log+0x310>)
 802f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f018:	4604      	mov	r4, r0
 802f01a:	460d      	mov	r5, r1
 802f01c:	ec51 0b19 	vmov	r0, r1, d9
 802f020:	e727      	b.n	802ee72 <__ieee754_log+0x152>
 802f022:	ed9f 0b15 	vldr	d0, [pc, #84]	; 802f078 <__ieee754_log+0x358>
 802f026:	e694      	b.n	802ed52 <__ieee754_log+0x32>
 802f028:	fee00000 	.word	0xfee00000
 802f02c:	3fe62e42 	.word	0x3fe62e42
 802f030:	35793c76 	.word	0x35793c76
 802f034:	3dea39ef 	.word	0x3dea39ef
 802f038:	55555555 	.word	0x55555555
 802f03c:	3fd55555 	.word	0x3fd55555
 802f040:	df3e5244 	.word	0xdf3e5244
 802f044:	3fc2f112 	.word	0x3fc2f112
 802f048:	96cb03de 	.word	0x96cb03de
 802f04c:	3fc74664 	.word	0x3fc74664
 802f050:	94229359 	.word	0x94229359
 802f054:	3fd24924 	.word	0x3fd24924
 802f058:	55555593 	.word	0x55555593
 802f05c:	3fe55555 	.word	0x3fe55555
 802f060:	d078c69f 	.word	0xd078c69f
 802f064:	3fc39a09 	.word	0x3fc39a09
 802f068:	1d8e78af 	.word	0x1d8e78af
 802f06c:	3fcc71c5 	.word	0x3fcc71c5
 802f070:	9997fa04 	.word	0x9997fa04
 802f074:	3fd99999 	.word	0x3fd99999
	...
 802f080:	c3500000 	.word	0xc3500000
 802f084:	43500000 	.word	0x43500000
 802f088:	7fefffff 	.word	0x7fefffff
 802f08c:	3ff00000 	.word	0x3ff00000
 802f090:	3fe00000 	.word	0x3fe00000

0802f094 <__ieee754_sqrt>:
 802f094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f098:	ec55 4b10 	vmov	r4, r5, d0
 802f09c:	4e56      	ldr	r6, [pc, #344]	; (802f1f8 <__ieee754_sqrt+0x164>)
 802f09e:	43ae      	bics	r6, r5
 802f0a0:	ee10 0a10 	vmov	r0, s0
 802f0a4:	ee10 3a10 	vmov	r3, s0
 802f0a8:	4629      	mov	r1, r5
 802f0aa:	462a      	mov	r2, r5
 802f0ac:	d110      	bne.n	802f0d0 <__ieee754_sqrt+0x3c>
 802f0ae:	ee10 2a10 	vmov	r2, s0
 802f0b2:	462b      	mov	r3, r5
 802f0b4:	f7d1 fa92 	bl	80005dc <__aeabi_dmul>
 802f0b8:	4602      	mov	r2, r0
 802f0ba:	460b      	mov	r3, r1
 802f0bc:	4620      	mov	r0, r4
 802f0be:	4629      	mov	r1, r5
 802f0c0:	f7d1 f8d6 	bl	8000270 <__adddf3>
 802f0c4:	4604      	mov	r4, r0
 802f0c6:	460d      	mov	r5, r1
 802f0c8:	ec45 4b10 	vmov	d0, r4, r5
 802f0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f0d0:	2d00      	cmp	r5, #0
 802f0d2:	dc10      	bgt.n	802f0f6 <__ieee754_sqrt+0x62>
 802f0d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802f0d8:	4330      	orrs	r0, r6
 802f0da:	d0f5      	beq.n	802f0c8 <__ieee754_sqrt+0x34>
 802f0dc:	b15d      	cbz	r5, 802f0f6 <__ieee754_sqrt+0x62>
 802f0de:	ee10 2a10 	vmov	r2, s0
 802f0e2:	462b      	mov	r3, r5
 802f0e4:	ee10 0a10 	vmov	r0, s0
 802f0e8:	f7d1 f8c0 	bl	800026c <__aeabi_dsub>
 802f0ec:	4602      	mov	r2, r0
 802f0ee:	460b      	mov	r3, r1
 802f0f0:	f7d1 fb9e 	bl	8000830 <__aeabi_ddiv>
 802f0f4:	e7e6      	b.n	802f0c4 <__ieee754_sqrt+0x30>
 802f0f6:	1509      	asrs	r1, r1, #20
 802f0f8:	d076      	beq.n	802f1e8 <__ieee754_sqrt+0x154>
 802f0fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802f0fe:	07ce      	lsls	r6, r1, #31
 802f100:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802f104:	bf5e      	ittt	pl
 802f106:	0fda      	lsrpl	r2, r3, #31
 802f108:	005b      	lslpl	r3, r3, #1
 802f10a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802f10e:	0fda      	lsrs	r2, r3, #31
 802f110:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802f114:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802f118:	2000      	movs	r0, #0
 802f11a:	106d      	asrs	r5, r5, #1
 802f11c:	005b      	lsls	r3, r3, #1
 802f11e:	f04f 0e16 	mov.w	lr, #22
 802f122:	4684      	mov	ip, r0
 802f124:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802f128:	eb0c 0401 	add.w	r4, ip, r1
 802f12c:	4294      	cmp	r4, r2
 802f12e:	bfde      	ittt	le
 802f130:	1b12      	suble	r2, r2, r4
 802f132:	eb04 0c01 	addle.w	ip, r4, r1
 802f136:	1840      	addle	r0, r0, r1
 802f138:	0052      	lsls	r2, r2, #1
 802f13a:	f1be 0e01 	subs.w	lr, lr, #1
 802f13e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f142:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802f146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f14a:	d1ed      	bne.n	802f128 <__ieee754_sqrt+0x94>
 802f14c:	4671      	mov	r1, lr
 802f14e:	2720      	movs	r7, #32
 802f150:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802f154:	4562      	cmp	r2, ip
 802f156:	eb04 060e 	add.w	r6, r4, lr
 802f15a:	dc02      	bgt.n	802f162 <__ieee754_sqrt+0xce>
 802f15c:	d113      	bne.n	802f186 <__ieee754_sqrt+0xf2>
 802f15e:	429e      	cmp	r6, r3
 802f160:	d811      	bhi.n	802f186 <__ieee754_sqrt+0xf2>
 802f162:	2e00      	cmp	r6, #0
 802f164:	eb06 0e04 	add.w	lr, r6, r4
 802f168:	da43      	bge.n	802f1f2 <__ieee754_sqrt+0x15e>
 802f16a:	f1be 0f00 	cmp.w	lr, #0
 802f16e:	db40      	blt.n	802f1f2 <__ieee754_sqrt+0x15e>
 802f170:	f10c 0801 	add.w	r8, ip, #1
 802f174:	eba2 020c 	sub.w	r2, r2, ip
 802f178:	429e      	cmp	r6, r3
 802f17a:	bf88      	it	hi
 802f17c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802f180:	1b9b      	subs	r3, r3, r6
 802f182:	4421      	add	r1, r4
 802f184:	46c4      	mov	ip, r8
 802f186:	0052      	lsls	r2, r2, #1
 802f188:	3f01      	subs	r7, #1
 802f18a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f18e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802f192:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f196:	d1dd      	bne.n	802f154 <__ieee754_sqrt+0xc0>
 802f198:	4313      	orrs	r3, r2
 802f19a:	d006      	beq.n	802f1aa <__ieee754_sqrt+0x116>
 802f19c:	1c4c      	adds	r4, r1, #1
 802f19e:	bf13      	iteet	ne
 802f1a0:	3101      	addne	r1, #1
 802f1a2:	3001      	addeq	r0, #1
 802f1a4:	4639      	moveq	r1, r7
 802f1a6:	f021 0101 	bicne.w	r1, r1, #1
 802f1aa:	1043      	asrs	r3, r0, #1
 802f1ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802f1b0:	0849      	lsrs	r1, r1, #1
 802f1b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802f1b6:	07c2      	lsls	r2, r0, #31
 802f1b8:	bf48      	it	mi
 802f1ba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802f1be:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802f1c2:	460c      	mov	r4, r1
 802f1c4:	463d      	mov	r5, r7
 802f1c6:	e77f      	b.n	802f0c8 <__ieee754_sqrt+0x34>
 802f1c8:	0ada      	lsrs	r2, r3, #11
 802f1ca:	3815      	subs	r0, #21
 802f1cc:	055b      	lsls	r3, r3, #21
 802f1ce:	2a00      	cmp	r2, #0
 802f1d0:	d0fa      	beq.n	802f1c8 <__ieee754_sqrt+0x134>
 802f1d2:	02d7      	lsls	r7, r2, #11
 802f1d4:	d50a      	bpl.n	802f1ec <__ieee754_sqrt+0x158>
 802f1d6:	f1c1 0420 	rsb	r4, r1, #32
 802f1da:	fa23 f404 	lsr.w	r4, r3, r4
 802f1de:	1e4d      	subs	r5, r1, #1
 802f1e0:	408b      	lsls	r3, r1
 802f1e2:	4322      	orrs	r2, r4
 802f1e4:	1b41      	subs	r1, r0, r5
 802f1e6:	e788      	b.n	802f0fa <__ieee754_sqrt+0x66>
 802f1e8:	4608      	mov	r0, r1
 802f1ea:	e7f0      	b.n	802f1ce <__ieee754_sqrt+0x13a>
 802f1ec:	0052      	lsls	r2, r2, #1
 802f1ee:	3101      	adds	r1, #1
 802f1f0:	e7ef      	b.n	802f1d2 <__ieee754_sqrt+0x13e>
 802f1f2:	46e0      	mov	r8, ip
 802f1f4:	e7be      	b.n	802f174 <__ieee754_sqrt+0xe0>
 802f1f6:	bf00      	nop
 802f1f8:	7ff00000 	.word	0x7ff00000

0802f1fc <finite>:
 802f1fc:	b082      	sub	sp, #8
 802f1fe:	ed8d 0b00 	vstr	d0, [sp]
 802f202:	9801      	ldr	r0, [sp, #4]
 802f204:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802f208:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802f20c:	0fc0      	lsrs	r0, r0, #31
 802f20e:	b002      	add	sp, #8
 802f210:	4770      	bx	lr
 802f212:	0000      	movs	r0, r0
 802f214:	0000      	movs	r0, r0
	...

0802f218 <nan>:
 802f218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802f220 <nan+0x8>
 802f21c:	4770      	bx	lr
 802f21e:	bf00      	nop
 802f220:	00000000 	.word	0x00000000
 802f224:	7ff80000 	.word	0x7ff80000

0802f228 <_init>:
 802f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f22a:	bf00      	nop
 802f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f22e:	bc08      	pop	{r3}
 802f230:	469e      	mov	lr, r3
 802f232:	4770      	bx	lr

0802f234 <_fini>:
 802f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f236:	bf00      	nop
 802f238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f23a:	bc08      	pop	{r3}
 802f23c:	469e      	mov	lr, r3
 802f23e:	4770      	bx	lr
