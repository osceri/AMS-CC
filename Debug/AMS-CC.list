
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0802f520  0802f520  0003f520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fd88  0802fd88  000414ac  2**0
                  CONTENTS
  4 .ARM          00000008  0802fd88  0802fd88  0003fd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fd90  0802fd90  000414ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fd90  0802fd90  0003fd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fd94  0802fd94  0003fd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  0802fd98  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000414ac  2**0
                  CONTENTS
 10 .bss          0001d9ac  200014b0  200014b0  000414b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ee5c  2001ee5c  000414b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000414ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005d499  00000000  00000000  000414dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a0eb  00000000  00000000  0009e975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005500  00000000  00000000  000a8a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004f68  00000000  00000000  000adf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb32  00000000  00000000  000b2ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043f53  00000000  00000000  000df9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001019b8  00000000  00000000  0012394d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00225305  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00017240  00000000  00000000  002253d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802f508 	.word	0x0802f508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	0802f508 	.word	0x0802f508

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001eda8 	.word	0x2001eda8

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b9a4 	b.w	8000fcc <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f83c 	bl	8000d08 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff0b 	bl	8000ac0 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc81 	bl	80005dc <__aeabi_dmul>
 8000cda:	f7ff ff57 	bl	8000b8c <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc02 	bl	80004e8 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc78 	bl	80005dc <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff faba 	bl	800026c <__aeabi_dsub>
 8000cf8:	f7ff ff48 	bl	8000b8c <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	80fb      	strh	r3, [r7, #6]
 8001008:	460b      	mov	r3, r1
 800100a:	717b      	strb	r3, [r7, #5]
 800100c:	4613      	mov	r3, r2
 800100e:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	4013      	ands	r3, r2
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	460b      	mov	r3, r1
 8001038:	717b      	strb	r3, [r7, #5]
 800103a:	4613      	mov	r3, r2
 800103c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	fa42 f303 	asr.w	r3, r2, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	460b      	mov	r3, r1
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	4013      	ands	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	460b      	mov	r3, r1
 8001096:	71bb      	strb	r3, [r7, #6]
 8001098:	4613      	mov	r3, r2
 800109a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	4013      	ands	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	fa42 f303 	asr.w	r3, r2, r3
 80010dc:	b29b      	uxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <can1_ams_status_1_pack>:

int can1_ams_status_1_pack(
    uint8_t *dst_p,
    const struct can1_ams_status_1_t *src_p,
    size_t size)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d802      	bhi.n	8001102 <can1_ams_status_1_pack+0x18>
        return (-EINVAL);
 80010fc:	f06f 0315 	mvn.w	r3, #21
 8001100:	e0fa      	b.n	80012f8 <can1_ams_status_1_pack+0x20e>
    }

    memset(&dst_p[0], 0, 8);
 8001102:	2208      	movs	r2, #8
 8001104:	2100      	movs	r1, #0
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f02d fc12 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->charging_status, 0u, 0x03u);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2203      	movs	r2, #3
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5b 	bl	8000fd0 <pack_left_shift_u8>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air1_closed, 2u, 0x04u);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2204      	movs	r2, #4
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff4c 	bl	8000fd0 <pack_left_shift_u8>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4313      	orrs	r3, r2
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->air2_closed, 3u, 0x08u);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2208      	movs	r2, #8
 800114e:	2103      	movs	r1, #3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->sc_closed, 4u, 0x10u);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2210      	movs	r2, #16
 800116c:	2104      	movs	r1, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff2e 	bl	8000fd0 <pack_left_shift_u8>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->pre_charge_status, 5u, 0x20u);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2220      	movs	r2, #32
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff1f 	bl	8000fd0 <pack_left_shift_u8>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ams_error, 6u, 0x40u);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2106      	movs	r1, #6
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff10 	bl	8000fd0 <pack_left_shift_u8>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->imd_error, 7u, 0x80u);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	799b      	ldrb	r3, [r3, #6]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	2107      	movs	r1, #7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff01 	bl	8000fd0 <pack_left_shift_u8>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->state_of_charge, 0u, 0xffu);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	79db      	ldrb	r3, [r3, #7]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fef2 	bl	8000fd0 <pack_left_shift_u8>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->min_cell_voltage, 0u, 0xffu);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	7a1b      	ldrb	r3, [r3, #8]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fee1 	bl	8000fd0 <pack_left_shift_u8>
 800120e:	4603      	mov	r3, r0
 8001210:	4619      	mov	r1, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3302      	adds	r3, #2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->max_cell_voltage, 0u, 0xffu);
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	7a5b      	ldrb	r3, [r3, #9]
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fed0 	bl	8000fd0 <pack_left_shift_u8>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3303      	adds	r3, #3
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3303      	adds	r3, #3
 800123e:	430a      	orrs	r2, r1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
    min_cell_temperature = (uint16_t)src_p->min_cell_temperature;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800124a:	82fb      	strh	r3, [r7, #22]
    dst_p[4] |= pack_left_shift_u16(min_cell_temperature, 0u, 0xffu);
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fed3 	bl	8000ffe <pack_left_shift_u16>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3304      	adds	r3, #4
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(min_cell_temperature, 8u, 0x0fu);
 800126c:	8afb      	ldrh	r3, [r7, #22]
 800126e:	220f      	movs	r2, #15
 8001270:	2108      	movs	r1, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff feda 	bl	800102c <pack_right_shift_u16>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3305      	adds	r3, #5
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3305      	adds	r3, #5
 8001286:	430a      	orrs	r2, r1
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    max_cell_temperature = (uint16_t)src_p->max_cell_temperature;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p[5] |= pack_left_shift_u16(max_cell_temperature, 4u, 0xf0u);
 8001294:	8abb      	ldrh	r3, [r7, #20]
 8001296:	22f0      	movs	r2, #240	; 0xf0
 8001298:	2104      	movs	r1, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff feaf 	bl	8000ffe <pack_left_shift_u16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3305      	adds	r3, #5
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3305      	adds	r3, #5
 80012ae:	430a      	orrs	r2, r1
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u16(max_cell_temperature, 4u, 0xffu);
 80012b4:	8abb      	ldrh	r3, [r7, #20]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb6 	bl	800102c <pack_right_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3306      	adds	r3, #6
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3306      	adds	r3, #6
 80012ce:	430a      	orrs	r2, r1
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->fan_speed, 0u, 0xffu);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	7b9b      	ldrb	r3, [r3, #14]
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe77 	bl	8000fd0 <pack_left_shift_u8>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3307      	adds	r3, #7
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3307      	adds	r3, #7
 80012f0:	430a      	orrs	r2, r1
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    return (8);
 80012f6:	2308      	movs	r3, #8
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <can1_ams_status_1_unpack>:

int can1_ams_status_1_unpack(
    struct can1_ams_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    uint16_t max_cell_temperature;
    uint16_t min_cell_temperature;

    if (size < 8u) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d802      	bhi.n	8001318 <can1_ams_status_1_unpack+0x18>
        return (-EINVAL);
 8001312:	f06f 0315 	mvn.w	r3, #21
 8001316:	e0c9      	b.n	80014ac <can1_ams_status_1_unpack+0x1ac>
    }

    dst_p->charging_status = unpack_right_shift_u8(src_p[0], 0u, 0x03u);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feb2 	bl	800108a <unpack_right_shift_u8>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	701a      	strb	r2, [r3, #0]
    dst_p->air1_closed = unpack_right_shift_u8(src_p[0], 2u, 0x04u);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2204      	movs	r2, #4
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fea7 	bl	800108a <unpack_right_shift_u8>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	705a      	strb	r2, [r3, #1]
    dst_p->air2_closed = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	2103      	movs	r1, #3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe9c 	bl	800108a <unpack_right_shift_u8>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	709a      	strb	r2, [r3, #2]
    dst_p->sc_closed = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	2104      	movs	r1, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe91 	bl	800108a <unpack_right_shift_u8>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	70da      	strb	r2, [r3, #3]
    dst_p->pre_charge_status = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2220      	movs	r2, #32
 8001376:	2105      	movs	r1, #5
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe86 	bl	800108a <unpack_right_shift_u8>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	711a      	strb	r2, [r3, #4]
    dst_p->ams_error = unpack_right_shift_u8(src_p[0], 6u, 0x40u);
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	2106      	movs	r1, #6
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe7b 	bl	800108a <unpack_right_shift_u8>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	715a      	strb	r2, [r3, #5]
    dst_p->imd_error = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	2107      	movs	r1, #7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe70 	bl	800108a <unpack_right_shift_u8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	719a      	strb	r2, [r3, #6]
    dst_p->state_of_charge = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe64 	bl	800108a <unpack_right_shift_u8>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	71da      	strb	r2, [r3, #7]
    dst_p->min_cell_voltage = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3302      	adds	r3, #2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe58 	bl	800108a <unpack_right_shift_u8>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	721a      	strb	r2, [r3, #8]
    dst_p->max_cell_voltage = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3303      	adds	r3, #3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe4c 	bl	800108a <unpack_right_shift_u8>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	725a      	strb	r2, [r3, #9]
    min_cell_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3304      	adds	r3, #4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe58 	bl	80010ba <unpack_right_shift_u16>
 800140a:	4603      	mov	r3, r0
 800140c:	82bb      	strh	r3, [r7, #20]
    min_cell_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0x0fu);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3305      	adds	r3, #5
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	220f      	movs	r2, #15
 8001416:	2108      	movs	r1, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe1e 	bl	800105a <unpack_left_shift_u16>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	8abb      	ldrh	r3, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	82bb      	strh	r3, [r7, #20]

    if ((min_cell_temperature & (1u << 11)) != 0u) {
 8001428:	8abb      	ldrh	r3, [r7, #20]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <can1_ams_status_1_unpack+0x13e>
        min_cell_temperature |= 0xf000u;
 8001432:	8abb      	ldrh	r3, [r7, #20]
 8001434:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001438:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800143c:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->min_cell_temperature = (int16_t)min_cell_temperature;
 800143e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	815a      	strh	r2, [r3, #10]
    max_cell_temperature = unpack_right_shift_u16(src_p[5], 4u, 0xf0u);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	22f0      	movs	r2, #240	; 0xf0
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe32 	bl	80010ba <unpack_right_shift_u16>
 8001456:	4603      	mov	r3, r0
 8001458:	82fb      	strh	r3, [r7, #22]
    max_cell_temperature |= unpack_left_shift_u16(src_p[6], 4u, 0xffu);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3306      	adds	r3, #6
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2104      	movs	r1, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fdf8 	bl	800105a <unpack_left_shift_u16>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	4313      	orrs	r3, r2
 8001472:	82fb      	strh	r3, [r7, #22]

    if ((max_cell_temperature & (1u << 11)) != 0u) {
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <can1_ams_status_1_unpack+0x18a>
        max_cell_temperature |= 0xf000u;
 800147e:	8afb      	ldrh	r3, [r7, #22]
 8001480:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001484:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001488:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->max_cell_temperature = (int16_t)max_cell_temperature;
 800148a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	819a      	strh	r2, [r3, #12]
    dst_p->fan_speed = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3307      	adds	r3, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdf4 	bl	800108a <unpack_right_shift_u8>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	739a      	strb	r2, [r3, #14]

    return (0);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <can1_ams_status_1_charging_status_encode>:

uint8_t can1_ams_status_1_charging_status_encode(double value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80014be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c2:	f7ff fb63 	bl	8000b8c <__aeabi_d2uiz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <can1_ams_status_1_charging_status_decode>:

double can1_ams_status_1_charging_status_decode(uint8_t value)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f802 	bl	80004e8 <__aeabi_ui2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ec:	eeb0 0a47 	vmov.f32	s0, s14
 80014f0:	eef0 0a67 	vmov.f32	s1, s15
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <can1_ams_status_1_air1_closed_encode>:
{
    return (value <= 3u);
}

uint8_t can1_ams_status_1_air1_closed_encode(double value)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7ff fb40 	bl	8000b8c <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <can1_ams_status_1_air1_closed_decode>:

double can1_ams_status_1_air1_closed_decode(uint8_t value)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffdf 	bl	80004e8 <__aeabi_ui2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001532:	eeb0 0a47 	vmov.f32	s0, s14
 8001536:	eef0 0a67 	vmov.f32	s1, s15
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <can1_ams_status_1_air2_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_air2_closed_encode(double value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800154a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154e:	f7ff fb1d 	bl	8000b8c <__aeabi_d2uiz>
 8001552:	4603      	mov	r3, r0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <can1_ams_status_1_air2_closed_decode>:

double can1_ams_status_1_air2_closed_decode(uint8_t value)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffbc 	bl	80004e8 <__aeabi_ui2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b17 	vmov	d7, r2, r3
}
 8001578:	eeb0 0a47 	vmov.f32	s0, s14
 800157c:	eef0 0a67 	vmov.f32	s1, s15
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <can1_ams_status_1_sc_closed_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_sc_closed_encode(double value)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001594:	f7ff fafa 	bl	8000b8c <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <can1_ams_status_1_sc_closed_decode>:

double can1_ams_status_1_sc_closed_decode(uint8_t value)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff99 	bl	80004e8 <__aeabi_ui2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80015be:	eeb0 0a47 	vmov.f32	s0, s14
 80015c2:	eef0 0a67 	vmov.f32	s1, s15
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <can1_ams_status_1_pre_charge_status_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_pre_charge_status_encode(double value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80015d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015da:	f7ff fad7 	bl	8000b8c <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b2db      	uxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <can1_ams_status_1_pre_charge_status_decode>:

double can1_ams_status_1_pre_charge_status_decode(uint8_t value)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff76 	bl	80004e8 <__aeabi_ui2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b17 	vmov	d7, r2, r3
}
 8001604:	eeb0 0a47 	vmov.f32	s0, s14
 8001608:	eef0 0a67 	vmov.f32	s1, s15
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <can1_ams_status_1_ams_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_ams_error_encode(double value)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001620:	f7ff fab4 	bl	8000b8c <__aeabi_d2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b2db      	uxtb	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <can1_ams_status_1_ams_error_decode>:

double can1_ams_status_1_ams_error_decode(uint8_t value)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff53 	bl	80004e8 <__aeabi_ui2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
}
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <can1_ams_status_1_imd_error_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_imd_error_encode(double value)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7ff fa91 	bl	8000b8c <__aeabi_d2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <can1_ams_status_1_imd_error_decode>:

double can1_ams_status_1_imd_error_decode(uint8_t value)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff30 	bl	80004e8 <__aeabi_ui2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <can1_ams_status_1_state_of_charge_encode>:
{
    return (value <= 1u);
}

uint8_t can1_ams_status_1_state_of_charge_encode(double value)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80016a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ac:	f7ff fa6e 	bl	8000b8c <__aeabi_d2uiz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <can1_ams_status_1_state_of_charge_decode>:

double can1_ams_status_1_state_of_charge_decode(uint8_t value)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff0d 	bl	80004e8 <__aeabi_ui2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d6:	eeb0 0a47 	vmov.f32	s0, s14
 80016da:	eef0 0a67 	vmov.f32	s1, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <can1_ams_status_1_min_cell_voltage_encode>:
{
    return (value <= 100u);
}

uint8_t can1_ams_status_1_min_cell_voltage_encode(double value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <can1_ams_status_1_min_cell_voltage_encode+0x50>)
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7fe fdb6 	bl	800026c <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a309      	add	r3, pc, #36	; (adr r3, 8001730 <can1_ams_status_1_min_cell_voltage_encode+0x48>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f88f 	bl	8000830 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa37 	bl	8000b8c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	b2db      	uxtb	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	fcce1c58 	.word	0xfcce1c58
 8001734:	3f800e6a 	.word	0x3f800e6a
 8001738:	40040000 	.word	0x40040000
 800173c:	00000000 	.word	0x00000000

08001740 <can1_ams_status_1_min_cell_voltage_decode>:

double can1_ams_status_1_min_cell_voltage_decode(uint8_t value)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fecb 	bl	80004e8 <__aeabi_ui2d>
 8001752:	a30e      	add	r3, pc, #56	; (adr r3, 800178c <can1_ams_status_1_min_cell_voltage_decode+0x4c>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff40 	bl	80005dc <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <can1_ams_status_1_min_cell_voltage_decode+0x48>)
 800176a:	f7fe fd81 	bl	8000270 <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	ec43 2b17 	vmov	d7, r2, r3
}
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	40040000 	.word	0x40040000
 800178c:	fcce1c58 	.word	0xfcce1c58
 8001790:	3f800e6a 	.word	0x3f800e6a
 8001794:	00000000 	.word	0x00000000

08001798 <can1_ams_status_1_max_cell_voltage_encode>:

    return (true);
}

uint8_t can1_ams_status_1_max_cell_voltage_encode(double value)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <can1_ams_status_1_max_cell_voltage_encode+0x50>)
 80017a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ac:	f7fe fd5e 	bl	800026c <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <can1_ams_status_1_max_cell_voltage_encode+0x48>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	fcce1c58 	.word	0xfcce1c58
 80017e4:	3f800e6a 	.word	0x3f800e6a
 80017e8:	40040000 	.word	0x40040000
 80017ec:	00000000 	.word	0x00000000

080017f0 <can1_ams_status_1_max_cell_voltage_decode>:

double can1_ams_status_1_max_cell_voltage_decode(uint8_t value)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe73 	bl	80004e8 <__aeabi_ui2d>
 8001802:	a30e      	add	r3, pc, #56	; (adr r3, 800183c <can1_ams_status_1_max_cell_voltage_decode+0x4c>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fee8 	bl	80005dc <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <can1_ams_status_1_max_cell_voltage_decode+0x48>)
 800181a:	f7fe fd29 	bl	8000270 <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b17 	vmov	d7, r2, r3
}
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	40040000 	.word	0x40040000
 800183c:	fcce1c58 	.word	0xfcce1c58
 8001840:	3f800e6a 	.word	0x3f800e6a
 8001844:	00000000 	.word	0x00000000

08001848 <can1_ams_status_1_min_cell_temperature_encode>:

    return (true);
}

int16_t can1_ams_status_1_min_cell_temperature_encode(double value)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <can1_ams_status_1_min_cell_temperature_encode+0x50>)
 8001858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185c:	f7fe fd08 	bl	8000270 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a309      	add	r3, pc, #36	; (adr r3, 8001890 <can1_ams_status_1_min_cell_temperature_encode+0x48>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe ffdf 	bl	8000830 <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f95f 	bl	8000b3c <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	b21b      	sxth	r3, r3
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	757928e1 	.word	0x757928e1
 8001894:	3fa9018e 	.word	0x3fa9018e
 8001898:	40240000 	.word	0x40240000
 800189c:	00000000 	.word	0x00000000

080018a0 <can1_ams_status_1_min_cell_temperature_decode>:

double can1_ams_status_1_min_cell_temperature_decode(int16_t value)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe2a 	bl	8000508 <__aeabi_i2d>
 80018b4:	a30d      	add	r3, pc, #52	; (adr r3, 80018ec <can1_ams_status_1_min_cell_temperature_decode+0x4c>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe8f 	bl	80005dc <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <can1_ams_status_1_min_cell_temperature_decode+0x48>)
 80018cc:	f7fe fcce 	bl	800026c <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40240000 	.word	0x40240000
 80018ec:	757928e1 	.word	0x757928e1
 80018f0:	3fa9018e 	.word	0x3fa9018e
 80018f4:	00000000 	.word	0x00000000

080018f8 <can1_ams_status_1_max_cell_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_status_1_max_cell_temperature_encode(double value)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <can1_ams_status_1_max_cell_temperature_encode+0x50>)
 8001908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190c:	f7fe fcb0 	bl	8000270 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	a309      	add	r3, pc, #36	; (adr r3, 8001940 <can1_ams_status_1_max_cell_temperature_encode+0x48>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe ff87 	bl	8000830 <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f907 	bl	8000b3c <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	b21b      	sxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	757928e1 	.word	0x757928e1
 8001944:	3fa9018e 	.word	0x3fa9018e
 8001948:	40240000 	.word	0x40240000
 800194c:	00000000 	.word	0x00000000

08001950 <can1_ams_status_1_max_cell_temperature_decode>:

double can1_ams_status_1_max_cell_temperature_decode(int16_t value)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdd2 	bl	8000508 <__aeabi_i2d>
 8001964:	a30d      	add	r3, pc, #52	; (adr r3, 800199c <can1_ams_status_1_max_cell_temperature_decode+0x4c>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fe37 	bl	80005dc <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <can1_ams_status_1_max_cell_temperature_decode+0x48>)
 800197c:	f7fe fc76 	bl	800026c <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b17 	vmov	d7, r2, r3
}
 8001988:	eeb0 0a47 	vmov.f32	s0, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40240000 	.word	0x40240000
 800199c:	757928e1 	.word	0x757928e1
 80019a0:	3fa9018e 	.word	0x3fa9018e

080019a4 <can1_ams_status_1_fan_speed_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

uint8_t can1_ams_status_1_fan_speed_encode(double value)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	f7ff f8eb 	bl	8000b8c <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <can1_ams_status_1_fan_speed_decode>:

double can1_ams_status_1_fan_speed_decode(uint8_t value)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd8a 	bl	80004e8 <__aeabi_ui2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80019dc:	eeb0 0a47 	vmov.f32	s0, s14
 80019e0:	eef0 0a67 	vmov.f32	s1, s15
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <can1_dbu_status_1_pack>:

int can1_dbu_status_1_pack(
    uint8_t *dst_p,
    const struct can1_dbu_status_1_t *src_p,
    size_t size)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d802      	bhi.n	8001a02 <can1_dbu_status_1_pack+0x18>
        return (-EINVAL);
 80019fc:	f06f 0315 	mvn.w	r3, #21
 8001a00:	e045      	b.n	8001a8e <can1_dbu_status_1_pack+0xa4>
    }

    memset(&dst_p[0], 0, 8);
 8001a02:	2208      	movs	r2, #8
 8001a04:	2100      	movs	r1, #0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f02c ff92 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->activate_ts_button, 0u, 0x01u);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fadb 	bl	8000fd0 <pack_left_shift_u8>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	701a      	strb	r2, [r3, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ready_to_drive_button, 1u, 0x02u);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff facc 	bl	8000fd0 <pack_left_shift_u8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]
    dbu_temperature = (uint16_t)src_p->dbu_temperature;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a4e:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(dbu_temperature, 4u, 0xf0u);
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	22f0      	movs	r2, #240	; 0xf0
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fad1 	bl	8000ffe <pack_left_shift_u16>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(dbu_temperature, 4u, 0xffu);
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	2104      	movs	r1, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fada 	bl	800102c <pack_right_shift_u16>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

    return (8);
 8001a8c:	2308      	movs	r3, #8
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d802      	bhi.n	8001aae <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001aa8:	f06f 0315 	mvn.w	r3, #21
 8001aac:	e03b      	b.n	8001b26 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fae7 	bl	800108a <unpack_right_shift_u8>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fadc 	bl	800108a <unpack_right_shift_u8>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	22f0      	movs	r2, #240	; 0xf0
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fae9 	bl	80010ba <unpack_right_shift_u16>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff faaf 	bl	800105a <unpack_left_shift_u16>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001b06:	8afb      	ldrh	r3, [r7, #22]
 8001b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001b16:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001b1a:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 8001b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	805a      	strh	r2, [r3, #2]

    return (0);
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <can1_dbu_status_1_activate_ts_button_encode>:

uint8_t can1_dbu_status_1_activate_ts_button_encode(double value)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f7ff f826 	bl	8000b8c <__aeabi_d2uiz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b2db      	uxtb	r3, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <can1_dbu_status_1_activate_ts_button_decode>:

double can1_dbu_status_1_activate_ts_button_decode(uint8_t value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcc5 	bl	80004e8 <__aeabi_ui2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b66:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6a:	eef0 0a67 	vmov.f32	s1, s15
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <can1_dbu_status_1_ready_to_drive_button_encode>:
{
    return (value <= 1u);
}

uint8_t can1_dbu_status_1_ready_to_drive_button_encode(double value)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 8001b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b82:	f7ff f803 	bl	8000b8c <__aeabi_d2uiz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <can1_dbu_status_1_ready_to_drive_button_decode>:

double can1_dbu_status_1_ready_to_drive_button_decode(uint8_t value)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fca2 	bl	80004e8 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	0000      	movs	r0, r0
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <can1_dbu_status_1_dbu_temperature_encode>:
{
    return (value <= 1u);
}

int16_t can1_dbu_status_1_dbu_temperature_encode(double value)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <can1_dbu_status_1_dbu_temperature_encode+0x50>)
 8001bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd4:	f7fe fb4c 	bl	8000270 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	a309      	add	r3, pc, #36	; (adr r3, 8001c08 <can1_dbu_status_1_dbu_temperature_encode+0x48>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fe23 	bl	8000830 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ffa3 	bl	8000b3c <__aeabi_d2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b21b      	sxth	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	757928e1 	.word	0x757928e1
 8001c0c:	3fa9018e 	.word	0x3fa9018e
 8001c10:	40240000 	.word	0x40240000
 8001c14:	00000000 	.word	0x00000000

08001c18 <can1_dbu_status_1_dbu_temperature_decode>:

double can1_dbu_status_1_dbu_temperature_decode(int16_t value)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc6e 	bl	8000508 <__aeabi_i2d>
 8001c2c:	a30d      	add	r3, pc, #52	; (adr r3, 8001c64 <can1_dbu_status_1_dbu_temperature_decode+0x4c>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fcd3 	bl	80005dc <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <can1_dbu_status_1_dbu_temperature_decode+0x48>)
 8001c44:	f7fe fb12 	bl	800026c <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c50:	eeb0 0a47 	vmov.f32	s0, s14
 8001c54:	eef0 0a67 	vmov.f32	s1, s15
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40240000 	.word	0x40240000
 8001c64:	757928e1 	.word	0x757928e1
 8001c68:	3fa9018e 	.word	0x3fa9018e

08001c6c <can1_ams_temperatures_pack>:

int can1_ams_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_temperatures_t *src_p,
    size_t size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d802      	bhi.n	8001c84 <can1_ams_temperatures_pack+0x18>
        return (-EINVAL);
 8001c7e:	f06f 0315 	mvn.w	r3, #21
 8001c82:	e093      	b.n	8001dac <can1_ams_temperatures_pack+0x140>
    }

    memset(&dst_p[0], 0, 6);
 8001c84:	2206      	movs	r2, #6
 8001c86:	2100      	movs	r1, #0
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f02c fe51 	bl	802e930 <memset>

    pre_charge_resistor_temperature = (uint16_t)src_p->pre_charge_resistor_temperature;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(pre_charge_resistor_temperature, 0u, 0xffu);
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f9ae 	bl	8000ffe <pack_left_shift_u16>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(pre_charge_resistor_temperature, 8u, 0x0fu);
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f9b7 	bl	800102c <pack_right_shift_u16>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    fuse_resistor_temperature = (uint16_t)src_p->fuse_resistor_temperature;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cd8:	82bb      	strh	r3, [r7, #20]
    dst_p[1] |= pack_left_shift_u16(fuse_resistor_temperature, 4u, 0xf0u);
 8001cda:	8abb      	ldrh	r3, [r7, #20]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f98c 	bl	8000ffe <pack_left_shift_u16>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u16(fuse_resistor_temperature, 4u, 0xffu);
 8001cfa:	8abb      	ldrh	r3, [r7, #20]
 8001cfc:	22ff      	movs	r2, #255	; 0xff
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f993 	bl	800102c <pack_right_shift_u16>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3302      	adds	r3, #2
 8001d14:	430a      	orrs	r2, r1
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aux_1_temperature = (uint16_t)src_p->aux_1_temperature;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d20:	827b      	strh	r3, [r7, #18]
    dst_p[3] |= pack_left_shift_u16(aux_1_temperature, 0u, 0xffu);
 8001d22:	8a7b      	ldrh	r3, [r7, #18]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f968 	bl	8000ffe <pack_left_shift_u16>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3303      	adds	r3, #3
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u16(aux_1_temperature, 8u, 0x0fu);
 8001d42:	8a7b      	ldrh	r3, [r7, #18]
 8001d44:	220f      	movs	r2, #15
 8001d46:	2108      	movs	r1, #8
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f96f 	bl	800102c <pack_right_shift_u16>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3304      	adds	r3, #4
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    aux_2_temperature = (uint16_t)src_p->aux_2_temperature;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d68:	823b      	strh	r3, [r7, #16]
    dst_p[4] |= pack_left_shift_u16(aux_2_temperature, 4u, 0xf0u);
 8001d6a:	8a3b      	ldrh	r3, [r7, #16]
 8001d6c:	22f0      	movs	r2, #240	; 0xf0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f944 	bl	8000ffe <pack_left_shift_u16>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3304      	adds	r3, #4
 8001d84:	430a      	orrs	r2, r1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(aux_2_temperature, 4u, 0xffu);
 8001d8a:	8a3b      	ldrh	r3, [r7, #16]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f94b 	bl	800102c <pack_right_shift_u16>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3305      	adds	r3, #5
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3305      	adds	r3, #5
 8001da4:	430a      	orrs	r2, r1
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    return (6);
 8001daa:	2306      	movs	r3, #6
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <can1_ams_temperatures_unpack>:

int can1_ams_temperatures_unpack(
    struct can1_ams_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    uint16_t aux_1_temperature;
    uint16_t aux_2_temperature;
    uint16_t fuse_resistor_temperature;
    uint16_t pre_charge_resistor_temperature;

    if (size < 6u) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d802      	bhi.n	8001dcc <can1_ams_temperatures_unpack+0x18>
        return (-EINVAL);
 8001dc6:	f06f 0315 	mvn.w	r3, #21
 8001dca:	e097      	b.n	8001efc <can1_ams_temperatures_unpack+0x148>
    }

    pre_charge_resistor_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f970 	bl	80010ba <unpack_right_shift_u16>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	823b      	strh	r3, [r7, #16]
    pre_charge_resistor_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	220f      	movs	r2, #15
 8001de6:	2108      	movs	r1, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f936 	bl	800105a <unpack_left_shift_u16>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	8a3b      	ldrh	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	823b      	strh	r3, [r7, #16]

    if ((pre_charge_resistor_temperature & (1u << 11)) != 0u) {
 8001df8:	8a3b      	ldrh	r3, [r7, #16]
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <can1_ams_temperatures_unpack+0x5a>
        pre_charge_resistor_temperature |= 0xf000u;
 8001e02:	8a3b      	ldrh	r3, [r7, #16]
 8001e04:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e08:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e0c:	823b      	strh	r3, [r7, #16]
    }

    dst_p->pre_charge_resistor_temperature = (int16_t)pre_charge_resistor_temperature;
 8001e0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	801a      	strh	r2, [r3, #0]
    fuse_resistor_temperature = unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	22f0      	movs	r2, #240	; 0xf0
 8001e1e:	2104      	movs	r1, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f94a 	bl	80010ba <unpack_right_shift_u16>
 8001e26:	4603      	mov	r3, r0
 8001e28:	827b      	strh	r3, [r7, #18]
    fuse_resistor_temperature |= unpack_left_shift_u16(src_p[2], 4u, 0xffu);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	2104      	movs	r1, #4
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f910 	bl	800105a <unpack_left_shift_u16>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	827b      	strh	r3, [r7, #18]

    if ((fuse_resistor_temperature & (1u << 11)) != 0u) {
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <can1_ams_temperatures_unpack+0xa6>
        fuse_resistor_temperature |= 0xf000u;
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001e54:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001e58:	827b      	strh	r3, [r7, #18]
    }

    dst_p->fuse_resistor_temperature = (int16_t)fuse_resistor_temperature;
 8001e5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	805a      	strh	r2, [r3, #2]
    aux_1_temperature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3303      	adds	r3, #3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	22ff      	movs	r2, #255	; 0xff
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f924 	bl	80010ba <unpack_right_shift_u16>
 8001e72:	4603      	mov	r3, r0
 8001e74:	82fb      	strh	r3, [r7, #22]
    aux_1_temperature |= unpack_left_shift_u16(src_p[4], 8u, 0x0fu);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f8ea 	bl	800105a <unpack_left_shift_u16>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	82fb      	strh	r3, [r7, #22]

    if ((aux_1_temperature & (1u << 11)) != 0u) {
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <can1_ams_temperatures_unpack+0xf2>
        aux_1_temperature |= 0xf000u;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001ea0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ea4:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->aux_1_temperature = (int16_t)aux_1_temperature;
 8001ea6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	809a      	strh	r2, [r3, #4]
    aux_2_temperature = unpack_right_shift_u16(src_p[4], 4u, 0xf0u);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f8fe 	bl	80010ba <unpack_right_shift_u16>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	82bb      	strh	r3, [r7, #20]
    aux_2_temperature |= unpack_left_shift_u16(src_p[5], 4u, 0xffu);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3305      	adds	r3, #5
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f8c4 	bl	800105a <unpack_left_shift_u16>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	82bb      	strh	r3, [r7, #20]

    if ((aux_2_temperature & (1u << 11)) != 0u) {
 8001edc:	8abb      	ldrh	r3, [r7, #20]
 8001ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <can1_ams_temperatures_unpack+0x13e>
        aux_2_temperature |= 0xf000u;
 8001ee6:	8abb      	ldrh	r3, [r7, #20]
 8001ee8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001eec:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001ef0:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->aux_2_temperature = (int16_t)aux_2_temperature;
 8001ef2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	80da      	strh	r2, [r3, #6]

    return (0);
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>:

int16_t can1_ams_temperatures_pre_charge_resistor_temperature_encode(double value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x50>)
 8001f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1c:	f7fe f9a8 	bl	8000270 <__adddf3>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	a309      	add	r3, pc, #36	; (adr r3, 8001f50 <can1_ams_temperatures_pre_charge_resistor_temperature_encode+0x48>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fc7f 	bl	8000830 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fdff 	bl	8000b3c <__aeabi_d2iz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b21b      	sxth	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	757928e1 	.word	0x757928e1
 8001f54:	3fa9018e 	.word	0x3fa9018e
 8001f58:	40240000 	.word	0x40240000
 8001f5c:	00000000 	.word	0x00000000

08001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>:

double can1_ams_temperatures_pre_charge_resistor_temperature_decode(int16_t value)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe faca 	bl	8000508 <__aeabi_i2d>
 8001f74:	a30d      	add	r3, pc, #52	; (adr r3, 8001fac <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x4c>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb2f 	bl	80005dc <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <can1_ams_temperatures_pre_charge_resistor_temperature_decode+0x48>)
 8001f8c:	f7fe f96e 	bl	800026c <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f98:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9c:	eef0 0a67 	vmov.f32	s1, s15
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40240000 	.word	0x40240000
 8001fac:	757928e1 	.word	0x757928e1
 8001fb0:	3fa9018e 	.word	0x3fa9018e
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_fuse_resistor_temperature_encode(double value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x50>)
 8001fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fcc:	f7fe f950 	bl	8000270 <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	a309      	add	r3, pc, #36	; (adr r3, 8002000 <can1_ams_temperatures_fuse_resistor_temperature_encode+0x48>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fc27 	bl	8000830 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fda7 	bl	8000b3c <__aeabi_d2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b21b      	sxth	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	757928e1 	.word	0x757928e1
 8002004:	3fa9018e 	.word	0x3fa9018e
 8002008:	40240000 	.word	0x40240000
 800200c:	00000000 	.word	0x00000000

08002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>:

double can1_ams_temperatures_fuse_resistor_temperature_decode(int16_t value)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa72 	bl	8000508 <__aeabi_i2d>
 8002024:	a30d      	add	r3, pc, #52	; (adr r3, 800205c <can1_ams_temperatures_fuse_resistor_temperature_decode+0x4c>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fad7 	bl	80005dc <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <can1_ams_temperatures_fuse_resistor_temperature_decode+0x48>)
 800203c:	f7fe f916 	bl	800026c <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
}
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40240000 	.word	0x40240000
 800205c:	757928e1 	.word	0x757928e1
 8002060:	3fa9018e 	.word	0x3fa9018e
 8002064:	00000000 	.word	0x00000000

08002068 <can1_ams_temperatures_aux_1_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_1_temperature_encode(double value)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <can1_ams_temperatures_aux_1_temperature_encode+0x50>)
 8002078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207c:	f7fe f8f8 	bl	8000270 <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	a309      	add	r3, pc, #36	; (adr r3, 80020b0 <can1_ams_temperatures_aux_1_temperature_encode+0x48>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fbcf 	bl	8000830 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd4f 	bl	8000b3c <__aeabi_d2iz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b21b      	sxth	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	757928e1 	.word	0x757928e1
 80020b4:	3fa9018e 	.word	0x3fa9018e
 80020b8:	40240000 	.word	0x40240000
 80020bc:	00000000 	.word	0x00000000

080020c0 <can1_ams_temperatures_aux_1_temperature_decode>:

double can1_ams_temperatures_aux_1_temperature_decode(int16_t value)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa1a 	bl	8000508 <__aeabi_i2d>
 80020d4:	a30d      	add	r3, pc, #52	; (adr r3, 800210c <can1_ams_temperatures_aux_1_temperature_decode+0x4c>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe fa7f 	bl	80005dc <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <can1_ams_temperatures_aux_1_temperature_decode+0x48>)
 80020ec:	f7fe f8be 	bl	800026c <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40240000 	.word	0x40240000
 800210c:	757928e1 	.word	0x757928e1
 8002110:	3fa9018e 	.word	0x3fa9018e
 8002114:	00000000 	.word	0x00000000

08002118 <can1_ams_temperatures_aux_2_temperature_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_temperatures_aux_2_temperature_encode(double value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <can1_ams_temperatures_aux_2_temperature_encode+0x50>)
 8002128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800212c:	f7fe f8a0 	bl	8000270 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	a309      	add	r3, pc, #36	; (adr r3, 8002160 <can1_ams_temperatures_aux_2_temperature_encode+0x48>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fb77 	bl	8000830 <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fcf7 	bl	8000b3c <__aeabi_d2iz>
 800214e:	4603      	mov	r3, r0
 8002150:	b21b      	sxth	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w
 8002160:	757928e1 	.word	0x757928e1
 8002164:	3fa9018e 	.word	0x3fa9018e
 8002168:	40240000 	.word	0x40240000
 800216c:	00000000 	.word	0x00000000

08002170 <can1_ams_temperatures_aux_2_temperature_decode>:

double can1_ams_temperatures_aux_2_temperature_decode(int16_t value)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9c2 	bl	8000508 <__aeabi_i2d>
 8002184:	a30d      	add	r3, pc, #52	; (adr r3, 80021bc <can1_ams_temperatures_aux_2_temperature_decode+0x4c>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa27 	bl	80005dc <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <can1_ams_temperatures_aux_2_temperature_decode+0x48>)
 800219c:	f7fe f866 	bl	800026c <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ac:	eef0 0a67 	vmov.f32	s1, s15
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40240000 	.word	0x40240000
 80021bc:	757928e1 	.word	0x757928e1
 80021c0:	3fa9018e 	.word	0x3fa9018e

080021c4 <can1_ams_cell_voltages_pack>:

int can1_ams_cell_voltages_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_voltages_t *src_p,
    size_t size)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d803      	bhi.n	80021de <can1_ams_cell_voltages_pack+0x1a>
        return (-EINVAL);
 80021d6:	f06f 0315 	mvn.w	r3, #21
 80021da:	f001 b931 	b.w	8003440 <can1_ams_cell_voltages_pack+0x127c>
    }

    memset(&dst_p[0], 0, 7);
 80021de:	2207      	movs	r2, #7
 80021e0:	2100      	movs	r1, #0
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f02c fba4 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->voltage_multiplexor, 0u, 0xffu);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe feed 	bl	8000fd0 <pack_left_shift_u8>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

    switch (src_p->voltage_multiplexor) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b17      	cmp	r3, #23
 800220c:	f201 8116 	bhi.w	800343c <can1_ams_cell_voltages_pack+0x1278>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <can1_ams_cell_voltages_pack+0x54>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002279 	.word	0x08002279
 800221c:	08002351 	.word	0x08002351
 8002220:	08002405 	.word	0x08002405
 8002224:	080024dd 	.word	0x080024dd
 8002228:	0800256d 	.word	0x0800256d
 800222c:	08002645 	.word	0x08002645
 8002230:	080026f9 	.word	0x080026f9
 8002234:	080027d1 	.word	0x080027d1
 8002238:	08002863 	.word	0x08002863
 800223c:	0800293d 	.word	0x0800293d
 8002240:	080029f3 	.word	0x080029f3
 8002244:	08002acd 	.word	0x08002acd
 8002248:	08002b5f 	.word	0x08002b5f
 800224c:	08002c39 	.word	0x08002c39
 8002250:	08002ced 	.word	0x08002ced
 8002254:	08002dc5 	.word	0x08002dc5
 8002258:	08002e55 	.word	0x08002e55
 800225c:	08002f2d 	.word	0x08002f2d
 8002260:	08002fe1 	.word	0x08002fe1
 8002264:	080030b9 	.word	0x080030b9
 8002268:	08003149 	.word	0x08003149
 800226c:	08003221 	.word	0x08003221
 8002270:	080032d5 	.word	0x080032d5
 8002274:	080033ad 	.word	0x080033ad

    case 0:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s1, 0u, 0xffu);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fea5 	bl	8000fd0 <pack_left_shift_u8>
 8002286:	4603      	mov	r3, r0
 8002288:	4619      	mov	r1, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s1, 0u, 0xffu);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	7e5b      	ldrb	r3, [r3, #25]
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe94 	bl	8000fd0 <pack_left_shift_u8>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3302      	adds	r3, #2
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3302      	adds	r3, #2
 80022b6:	430a      	orrs	r2, r1
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s1, 0u, 0xffu);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fe82 	bl	8000fd0 <pack_left_shift_u8>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3303      	adds	r3, #3
 80022da:	430a      	orrs	r2, r1
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s1, 0u, 0xffu);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022e6:	22ff      	movs	r2, #255	; 0xff
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fe70 	bl	8000fd0 <pack_left_shift_u8>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3304      	adds	r3, #4
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s1, 0u, 0xffu);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fe5e 	bl	8000fd0 <pack_left_shift_u8>
 8002314:	4603      	mov	r3, r0
 8002316:	4619      	mov	r1, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3305      	adds	r3, #5
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3305      	adds	r3, #5
 8002322:	430a      	orrs	r2, r1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s1, 0u, 0xffu);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fe4c 	bl	8000fd0 <pack_left_shift_u8>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3306      	adds	r3, #6
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3306      	adds	r3, #6
 8002346:	430a      	orrs	r2, r1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
        break;
 800234c:	f001 b877 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 1:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s1, 0u, 0xffu);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe39 	bl	8000fd0 <pack_left_shift_u8>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s1, 0u, 0xffu);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	7e9b      	ldrb	r3, [r3, #26]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fe28 	bl	8000fd0 <pack_left_shift_u8>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3302      	adds	r3, #2
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3302      	adds	r3, #2
 800238e:	430a      	orrs	r2, r1
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s1, 0u, 0xffu);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe16 	bl	8000fd0 <pack_left_shift_u8>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3303      	adds	r3, #3
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3303      	adds	r3, #3
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s1, 0u, 0xffu);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe04 	bl	8000fd0 <pack_left_shift_u8>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3304      	adds	r3, #4
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3304      	adds	r3, #4
 80023d6:	430a      	orrs	r2, r1
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s1, 0u, 0xffu);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fdf2 	bl	8000fd0 <pack_left_shift_u8>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3305      	adds	r3, #5
 80023fa:	430a      	orrs	r2, r1
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
        break;
 8002400:	f001 b81d 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 2:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s2, 0u, 0xffu);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	78db      	ldrb	r3, [r3, #3]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fddf 	bl	8000fd0 <pack_left_shift_u8>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s2, 0u, 0xffu);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	7edb      	ldrb	r3, [r3, #27]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fdce 	bl	8000fd0 <pack_left_shift_u8>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3302      	adds	r3, #2
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3302      	adds	r3, #2
 8002442:	430a      	orrs	r2, r1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s2, 0u, 0xffu);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fdbc 	bl	8000fd0 <pack_left_shift_u8>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3303      	adds	r3, #3
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3303      	adds	r3, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s2, 0u, 0xffu);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fdaa 	bl	8000fd0 <pack_left_shift_u8>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3304      	adds	r3, #4
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s2, 0u, 0xffu);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd98 	bl	8000fd0 <pack_left_shift_u8>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3305      	adds	r3, #5
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3305      	adds	r3, #5
 80024ae:	430a      	orrs	r2, r1
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s2, 0u, 0xffu);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd86 	bl	8000fd0 <pack_left_shift_u8>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3306      	adds	r3, #6
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3306      	adds	r3, #6
 80024d2:	430a      	orrs	r2, r1
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        break;
 80024d8:	f000 bfb1 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 3:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s2, 0u, 0xffu);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd73 	bl	8000fd0 <pack_left_shift_u8>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s2, 0u, 0xffu);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd62 	bl	8000fd0 <pack_left_shift_u8>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3302      	adds	r3, #2
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	430a      	orrs	r2, r1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s2, 0u, 0xffu);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd50 	bl	8000fd0 <pack_left_shift_u8>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3303      	adds	r3, #3
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3303      	adds	r3, #3
 800253e:	430a      	orrs	r2, r1
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s2, 0u, 0xffu);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd3e 	bl	8000fd0 <pack_left_shift_u8>
 8002554:	4603      	mov	r3, r0
 8002556:	4619      	mov	r1, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3304      	adds	r3, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
        break;
 8002568:	f000 bf69 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 4:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s3, 0u, 0xffu);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd2b 	bl	8000fd0 <pack_left_shift_u8>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3301      	adds	r3, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s3, 0u, 0xffu);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	7f5b      	ldrb	r3, [r3, #29]
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd1a 	bl	8000fd0 <pack_left_shift_u8>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3302      	adds	r3, #2
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3302      	adds	r3, #2
 80025aa:	430a      	orrs	r2, r1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s3, 0u, 0xffu);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd08 	bl	8000fd0 <pack_left_shift_u8>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4619      	mov	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3303      	adds	r3, #3
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3303      	adds	r3, #3
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s3, 0u, 0xffu);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fcf6 	bl	8000fd0 <pack_left_shift_u8>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4619      	mov	r1, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3304      	adds	r3, #4
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s3, 0u, 0xffu);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fce4 	bl	8000fd0 <pack_left_shift_u8>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3305      	adds	r3, #5
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3305      	adds	r3, #5
 8002616:	430a      	orrs	r2, r1
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s3, 0u, 0xffu);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fcd2 	bl	8000fd0 <pack_left_shift_u8>
 800262c:	4603      	mov	r3, r0
 800262e:	4619      	mov	r1, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3306      	adds	r3, #6
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3306      	adds	r3, #6
 800263a:	430a      	orrs	r2, r1
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]
        break;
 8002640:	f000 befd 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 5:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s3, 0u, 0xffu);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	799b      	ldrb	r3, [r3, #6]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fcbf 	bl	8000fd0 <pack_left_shift_u8>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s3, 0u, 0xffu);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	7f9b      	ldrb	r3, [r3, #30]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fcae 	bl	8000fd0 <pack_left_shift_u8>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3302      	adds	r3, #2
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3302      	adds	r3, #2
 8002682:	430a      	orrs	r2, r1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s3, 0u, 0xffu);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc9c 	bl	8000fd0 <pack_left_shift_u8>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3303      	adds	r3, #3
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3303      	adds	r3, #3
 80026a6:	430a      	orrs	r2, r1
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s3, 0u, 0xffu);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc8a 	bl	8000fd0 <pack_left_shift_u8>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3304      	adds	r3, #4
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s3, 0u, 0xffu);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80026d6:	22ff      	movs	r2, #255	; 0xff
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc78 	bl	8000fd0 <pack_left_shift_u8>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3305      	adds	r3, #5
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3305      	adds	r3, #5
 80026ee:	430a      	orrs	r2, r1
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
        break;
 80026f4:	f000 bea3 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 6:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s4, 0u, 0xffu);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	79db      	ldrb	r3, [r3, #7]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fc65 	bl	8000fd0 <pack_left_shift_u8>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s4, 0u, 0xffu);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	7fdb      	ldrb	r3, [r3, #31]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc54 	bl	8000fd0 <pack_left_shift_u8>
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3302      	adds	r3, #2
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3302      	adds	r3, #2
 8002736:	430a      	orrs	r2, r1
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s4, 0u, 0xffu);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fc42 	bl	8000fd0 <pack_left_shift_u8>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3303      	adds	r3, #3
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3303      	adds	r3, #3
 800275a:	430a      	orrs	r2, r1
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s4, 0u, 0xffu);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8002766:	22ff      	movs	r2, #255	; 0xff
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fc30 	bl	8000fd0 <pack_left_shift_u8>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3304      	adds	r3, #4
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	430a      	orrs	r2, r1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s4, 0u, 0xffu);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc1e 	bl	8000fd0 <pack_left_shift_u8>
 8002794:	4603      	mov	r3, r0
 8002796:	4619      	mov	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3305      	adds	r3, #5
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3305      	adds	r3, #5
 80027a2:	430a      	orrs	r2, r1
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s4, 0u, 0xffu);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fc0c 	bl	8000fd0 <pack_left_shift_u8>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3306      	adds	r3, #6
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3306      	adds	r3, #6
 80027c6:	430a      	orrs	r2, r1
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
        break;
 80027cc:	f000 be37 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 7:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s4, 0u, 0xffu);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fbf9 	bl	8000fd0 <pack_left_shift_u8>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s4, 0u, 0xffu);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fbe7 	bl	8000fd0 <pack_left_shift_u8>
 8002802:	4603      	mov	r3, r0
 8002804:	4619      	mov	r1, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3302      	adds	r3, #2
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3302      	adds	r3, #2
 8002810:	430a      	orrs	r2, r1
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s4, 0u, 0xffu);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fbd5 	bl	8000fd0 <pack_left_shift_u8>
 8002826:	4603      	mov	r3, r0
 8002828:	4619      	mov	r1, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3303      	adds	r3, #3
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3303      	adds	r3, #3
 8002834:	430a      	orrs	r2, r1
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s4, 0u, 0xffu);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fbc3 	bl	8000fd0 <pack_left_shift_u8>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3304      	adds	r3, #4
 8002858:	430a      	orrs	r2, r1
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
        break;
 800285e:	f000 bdee 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 8:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s5, 0u, 0xffu);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	7a5b      	ldrb	r3, [r3, #9]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fbb0 	bl	8000fd0 <pack_left_shift_u8>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3301      	adds	r3, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s5, 0u, 0xffu);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fb9e 	bl	8000fd0 <pack_left_shift_u8>
 8002894:	4603      	mov	r3, r0
 8002896:	4619      	mov	r1, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3302      	adds	r3, #2
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3302      	adds	r3, #2
 80028a2:	430a      	orrs	r2, r1
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s5, 0u, 0xffu);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb8c 	bl	8000fd0 <pack_left_shift_u8>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4619      	mov	r1, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3303      	adds	r3, #3
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3303      	adds	r3, #3
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s5, 0u, 0xffu);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fb7a 	bl	8000fd0 <pack_left_shift_u8>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3304      	adds	r3, #4
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s5, 0u, 0xffu);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb68 	bl	8000fd0 <pack_left_shift_u8>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3305      	adds	r3, #5
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3305      	adds	r3, #5
 800290e:	430a      	orrs	r2, r1
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s5, 0u, 0xffu);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800291a:	22ff      	movs	r2, #255	; 0xff
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb56 	bl	8000fd0 <pack_left_shift_u8>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3306      	adds	r3, #6
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3306      	adds	r3, #6
 8002932:	430a      	orrs	r2, r1
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
        break;
 8002938:	f000 bd81 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 9:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s5, 0u, 0xffu);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	7a9b      	ldrb	r3, [r3, #10]
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fb43 	bl	8000fd0 <pack_left_shift_u8>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s5, 0u, 0xffu);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fb31 	bl	8000fd0 <pack_left_shift_u8>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3302      	adds	r3, #2
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3302      	adds	r3, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s5, 0u, 0xffu);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb1f 	bl	8000fd0 <pack_left_shift_u8>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3303      	adds	r3, #3
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3303      	adds	r3, #3
 80029a0:	430a      	orrs	r2, r1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s5, 0u, 0xffu);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fb0d 	bl	8000fd0 <pack_left_shift_u8>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4619      	mov	r1, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3304      	adds	r3, #4
 80029c4:	430a      	orrs	r2, r1
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s5, 0u, 0xffu);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fafb 	bl	8000fd0 <pack_left_shift_u8>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3305      	adds	r3, #5
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3305      	adds	r3, #5
 80029e8:	430a      	orrs	r2, r1
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
        break;
 80029ee:	f000 bd26 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 10:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s6, 0u, 0xffu);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	7adb      	ldrb	r3, [r3, #11]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fae8 	bl	8000fd0 <pack_left_shift_u8>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s6, 0u, 0xffu);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fad6 	bl	8000fd0 <pack_left_shift_u8>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3302      	adds	r3, #2
 8002a32:	430a      	orrs	r2, r1
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s6, 0u, 0xffu);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002a3e:	22ff      	movs	r2, #255	; 0xff
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fac4 	bl	8000fd0 <pack_left_shift_u8>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3303      	adds	r3, #3
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3303      	adds	r3, #3
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s6, 0u, 0xffu);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fab2 	bl	8000fd0 <pack_left_shift_u8>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3304      	adds	r3, #4
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s6, 0u, 0xffu);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002a86:	22ff      	movs	r2, #255	; 0xff
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe faa0 	bl	8000fd0 <pack_left_shift_u8>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3305      	adds	r3, #5
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s6, 0u, 0xffu);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fa8e 	bl	8000fd0 <pack_left_shift_u8>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3306      	adds	r3, #6
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
        break;
 8002ac8:	f000 bcb9 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 11:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s6, 0u, 0xffu);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fa7b 	bl	8000fd0 <pack_left_shift_u8>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s6, 0u, 0xffu);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fa69 	bl	8000fd0 <pack_left_shift_u8>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3302      	adds	r3, #2
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s6, 0u, 0xffu);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fa57 	bl	8000fd0 <pack_left_shift_u8>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3303      	adds	r3, #3
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3303      	adds	r3, #3
 8002b30:	430a      	orrs	r2, r1
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s6, 0u, 0xffu);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fa45 	bl	8000fd0 <pack_left_shift_u8>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3304      	adds	r3, #4
 8002b54:	430a      	orrs	r2, r1
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
        break;
 8002b5a:	f000 bc70 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 12:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s7, 0u, 0xffu);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	7b5b      	ldrb	r3, [r3, #13]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa32 	bl	8000fd0 <pack_left_shift_u8>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s7, 0u, 0xffu);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa20 	bl	8000fd0 <pack_left_shift_u8>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3302      	adds	r3, #2
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s7, 0u, 0xffu);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa0e 	bl	8000fd0 <pack_left_shift_u8>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s7, 0u, 0xffu);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f9fc 	bl	8000fd0 <pack_left_shift_u8>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3304      	adds	r3, #4
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3304      	adds	r3, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s7, 0u, 0xffu);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f9ea 	bl	8000fd0 <pack_left_shift_u8>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3305      	adds	r3, #5
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s7, 0u, 0xffu);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe f9d8 	bl	8000fd0 <pack_left_shift_u8>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4619      	mov	r1, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3306      	adds	r3, #6
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3306      	adds	r3, #6
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
        break;
 8002c34:	f000 bc03 	b.w	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 13:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s7, 0u, 0xffu);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	7b9b      	ldrb	r3, [r3, #14]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f9c5 	bl	8000fd0 <pack_left_shift_u8>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s7, 0u, 0xffu);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe f9b3 	bl	8000fd0 <pack_left_shift_u8>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3302      	adds	r3, #2
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3302      	adds	r3, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s7, 0u, 0xffu);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f9a1 	bl	8000fd0 <pack_left_shift_u8>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4619      	mov	r1, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3303      	adds	r3, #3
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3303      	adds	r3, #3
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s7, 0u, 0xffu);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f98f 	bl	8000fd0 <pack_left_shift_u8>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s7, 0u, 0xffu);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f97d 	bl	8000fd0 <pack_left_shift_u8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3305      	adds	r3, #5
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3305      	adds	r3, #5
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
        break;
 8002cea:	e3a8      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 14:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s8, 0u, 0xffu);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	7bdb      	ldrb	r3, [r3, #15]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f96b 	bl	8000fd0 <pack_left_shift_u8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s8, 0u, 0xffu);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe f959 	bl	8000fd0 <pack_left_shift_u8>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3302      	adds	r3, #2
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s8, 0u, 0xffu);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f947 	bl	8000fd0 <pack_left_shift_u8>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	430a      	orrs	r2, r1
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s8, 0u, 0xffu);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f935 	bl	8000fd0 <pack_left_shift_u8>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3304      	adds	r3, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s8, 0u, 0xffu);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f923 	bl	8000fd0 <pack_left_shift_u8>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3305      	adds	r3, #5
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3305      	adds	r3, #5
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s8, 0u, 0xffu);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002da4:	22ff      	movs	r2, #255	; 0xff
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f911 	bl	8000fd0 <pack_left_shift_u8>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3306      	adds	r3, #6
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3306      	adds	r3, #6
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
        break;
 8002dc2:	e33c      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 15:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s8, 0u, 0xffu);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	7c1b      	ldrb	r3, [r3, #16]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8ff 	bl	8000fd0 <pack_left_shift_u8>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s8, 0u, 0xffu);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f8ed 	bl	8000fd0 <pack_left_shift_u8>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3302      	adds	r3, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s8, 0u, 0xffu);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8db 	bl	8000fd0 <pack_left_shift_u8>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3303      	adds	r3, #3
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3303      	adds	r3, #3
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s8, 0u, 0xffu);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f8c9 	bl	8000fd0 <pack_left_shift_u8>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3304      	adds	r3, #4
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        break;
 8002e52:	e2f4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 16:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s9, 0u, 0xffu);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	7c5b      	ldrb	r3, [r3, #17]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe f8b7 	bl	8000fd0 <pack_left_shift_u8>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s9, 0u, 0xffu);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f8a5 	bl	8000fd0 <pack_left_shift_u8>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3302      	adds	r3, #2
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s9, 0u, 0xffu);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f893 	bl	8000fd0 <pack_left_shift_u8>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3303      	adds	r3, #3
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s9, 0u, 0xffu);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f881 	bl	8000fd0 <pack_left_shift_u8>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3304      	adds	r3, #4
 8002edc:	430a      	orrs	r2, r1
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s9, 0u, 0xffu);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f86f 	bl	8000fd0 <pack_left_shift_u8>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3305      	adds	r3, #5
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3305      	adds	r3, #5
 8002f00:	430a      	orrs	r2, r1
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s9, 0u, 0xffu);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f85d 	bl	8000fd0 <pack_left_shift_u8>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3306      	adds	r3, #6
 8002f24:	430a      	orrs	r2, r1
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
        break;
 8002f2a:	e288      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 17:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s9, 0u, 0xffu);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	7c9b      	ldrb	r3, [r3, #18]
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f84b 	bl	8000fd0 <pack_left_shift_u8>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s9, 0u, 0xffu);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f839 	bl	8000fd0 <pack_left_shift_u8>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4619      	mov	r1, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3302      	adds	r3, #2
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s9, 0u, 0xffu);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f827 	bl	8000fd0 <pack_left_shift_u8>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4619      	mov	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3303      	adds	r3, #3
 8002f90:	430a      	orrs	r2, r1
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s9, 0u, 0xffu);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f815 	bl	8000fd0 <pack_left_shift_u8>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3304      	adds	r3, #4
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s9, 0u, 0xffu);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f803 	bl	8000fd0 <pack_left_shift_u8>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3305      	adds	r3, #5
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e22e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 18:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s10, 0u, 0xffu);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	7cdb      	ldrb	r3, [r3, #19]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fff1 	bl	8000fd0 <pack_left_shift_u8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s10, 0u, 0xffu);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd ffdf 	bl	8000fd0 <pack_left_shift_u8>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3302      	adds	r3, #2
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3302      	adds	r3, #2
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s10, 0u, 0xffu);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800302c:	22ff      	movs	r2, #255	; 0xff
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd ffcd 	bl	8000fd0 <pack_left_shift_u8>
 8003036:	4603      	mov	r3, r0
 8003038:	4619      	mov	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3303      	adds	r3, #3
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3303      	adds	r3, #3
 8003044:	430a      	orrs	r2, r1
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s10, 0u, 0xffu);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd ffbb 	bl	8000fd0 <pack_left_shift_u8>
 800305a:	4603      	mov	r3, r0
 800305c:	4619      	mov	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3304      	adds	r3, #4
 8003068:	430a      	orrs	r2, r1
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s10, 0u, 0xffu);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd ffa9 	bl	8000fd0 <pack_left_shift_u8>
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3305      	adds	r3, #5
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3305      	adds	r3, #5
 800308c:	430a      	orrs	r2, r1
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s10, 0u, 0xffu);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd ff97 	bl	8000fd0 <pack_left_shift_u8>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3306      	adds	r3, #6
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3306      	adds	r3, #6
 80030b0:	430a      	orrs	r2, r1
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e1c2      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 19:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s10, 0u, 0xffu);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	7d1b      	ldrb	r3, [r3, #20]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd ff85 	bl	8000fd0 <pack_left_shift_u8>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s10, 0u, 0xffu);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd ff73 	bl	8000fd0 <pack_left_shift_u8>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3302      	adds	r3, #2
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3302      	adds	r3, #2
 80030f8:	430a      	orrs	r2, r1
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s10, 0u, 0xffu);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd ff61 	bl	8000fd0 <pack_left_shift_u8>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3303      	adds	r3, #3
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3303      	adds	r3, #3
 800311c:	430a      	orrs	r2, r1
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s10, 0u, 0xffu);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd ff4f 	bl	8000fd0 <pack_left_shift_u8>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	430a      	orrs	r2, r1
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
        break;
 8003146:	e17a      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 20:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s11, 0u, 0xffu);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	7d5b      	ldrb	r3, [r3, #21]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ff3d 	bl	8000fd0 <pack_left_shift_u8>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s11, 0u, 0xffu);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd ff2b 	bl	8000fd0 <pack_left_shift_u8>
 800317a:	4603      	mov	r3, r0
 800317c:	4619      	mov	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3302      	adds	r3, #2
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3302      	adds	r3, #2
 8003188:	430a      	orrs	r2, r1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s11, 0u, 0xffu);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd ff19 	bl	8000fd0 <pack_left_shift_u8>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3303      	adds	r3, #3
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3303      	adds	r3, #3
 80031ac:	430a      	orrs	r2, r1
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s11, 0u, 0xffu);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff07 	bl	8000fd0 <pack_left_shift_u8>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	430a      	orrs	r2, r1
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s11, 0u, 0xffu);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fef5 	bl	8000fd0 <pack_left_shift_u8>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3305      	adds	r3, #5
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3305      	adds	r3, #5
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s11, 0u, 0xffu);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fee3 	bl	8000fd0 <pack_left_shift_u8>
 800320a:	4603      	mov	r3, r0
 800320c:	4619      	mov	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3306      	adds	r3, #6
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3306      	adds	r3, #6
 8003218:	430a      	orrs	r2, r1
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
        break;
 800321e:	e10e      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 21:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s11, 0u, 0xffu);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	7d9b      	ldrb	r3, [r3, #22]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fed1 	bl	8000fd0 <pack_left_shift_u8>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3301      	adds	r3, #1
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s11, 0u, 0xffu);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd febf 	bl	8000fd0 <pack_left_shift_u8>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3302      	adds	r3, #2
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3302      	adds	r3, #2
 8003260:	430a      	orrs	r2, r1
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s11, 0u, 0xffu);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fead 	bl	8000fd0 <pack_left_shift_u8>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3303      	adds	r3, #3
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3303      	adds	r3, #3
 8003284:	430a      	orrs	r2, r1
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s11, 0u, 0xffu);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fe9b 	bl	8000fd0 <pack_left_shift_u8>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3304      	adds	r3, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v11s11, 0u, 0xffu);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fe89 	bl	8000fd0 <pack_left_shift_u8>
 80032be:	4603      	mov	r3, r0
 80032c0:	4619      	mov	r1, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3305      	adds	r3, #5
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3305      	adds	r3, #5
 80032cc:	430a      	orrs	r2, r1
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
        break;
 80032d2:	e0b4      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 22:
        dst_p[1] |= pack_left_shift_u8(src_p->v1s12, 0u, 0xffu);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	7ddb      	ldrb	r3, [r3, #23]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fe77 	bl	8000fd0 <pack_left_shift_u8>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v2s12, 0u, 0xffu);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fe65 	bl	8000fd0 <pack_left_shift_u8>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3302      	adds	r3, #2
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3302      	adds	r3, #2
 8003314:	430a      	orrs	r2, r1
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v3s12, 0u, 0xffu);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fe53 	bl	8000fd0 <pack_left_shift_u8>
 800332a:	4603      	mov	r3, r0
 800332c:	4619      	mov	r1, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3303      	adds	r3, #3
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3303      	adds	r3, #3
 8003338:	430a      	orrs	r2, r1
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v4s12, 0u, 0xffu);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fe41 	bl	8000fd0 <pack_left_shift_u8>
 800334e:	4603      	mov	r3, r0
 8003350:	4619      	mov	r1, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3304      	adds	r3, #4
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3304      	adds	r3, #4
 800335c:	430a      	orrs	r2, r1
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
        dst_p[5] |= pack_left_shift_u8(src_p->v5s12, 0u, 0xffu);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fe2f 	bl	8000fd0 <pack_left_shift_u8>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3305      	adds	r3, #5
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3305      	adds	r3, #5
 8003380:	430a      	orrs	r2, r1
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_left_shift_u8(src_p->v6s12, 0u, 0xffu);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fe1d 	bl	8000fd0 <pack_left_shift_u8>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3306      	adds	r3, #6
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3306      	adds	r3, #6
 80033a4:	430a      	orrs	r2, r1
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	e048      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    case 23:
        dst_p[1] |= pack_left_shift_u8(src_p->v7s12, 0u, 0xffu);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd fe0b 	bl	8000fd0 <pack_left_shift_u8>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4619      	mov	r1, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u8(src_p->v8s12, 0u, 0xffu);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fdf9 	bl	8000fd0 <pack_left_shift_u8>
 80033de:	4603      	mov	r3, r0
 80033e0:	4619      	mov	r1, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3302      	adds	r3, #2
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	430a      	orrs	r2, r1
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->v9s12, 0u, 0xffu);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fde7 	bl	8000fd0 <pack_left_shift_u8>
 8003402:	4603      	mov	r3, r0
 8003404:	4619      	mov	r1, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3303      	adds	r3, #3
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3303      	adds	r3, #3
 8003410:	430a      	orrs	r2, r1
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_left_shift_u8(src_p->v10s12, 0u, 0xffu);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fdd5 	bl	8000fd0 <pack_left_shift_u8>
 8003426:	4603      	mov	r3, r0
 8003428:	4619      	mov	r1, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3304      	adds	r3, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e000      	b.n	800343e <can1_ams_cell_voltages_pack+0x127a>

    default:
        break;
 800343c:	bf00      	nop
    }

    return (7);
 800343e:	2307      	movs	r3, #7
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <can1_ams_cell_voltages_unpack>:

int can1_ams_cell_voltages_unpack(
    struct can1_ams_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
    if (size < 7u) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d803      	bhi.n	8003462 <can1_ams_cell_voltages_unpack+0x1a>
        return (-EINVAL);
 800345a:	f06f 0315 	mvn.w	r3, #21
 800345e:	f000 beac 	b.w	80041ba <can1_ams_cell_voltages_unpack+0xd72>
    }

    dst_p->voltage_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fe0d 	bl	800108a <unpack_right_shift_u8>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

    switch (dst_p->voltage_multiplexor) {
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b17      	cmp	r3, #23
 800347e:	f200 869a 	bhi.w	80041b6 <can1_ams_cell_voltages_unpack+0xd6e>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <can1_ams_cell_voltages_unpack+0x40>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034e9 	.word	0x080034e9
 800348c:	08003585 	.word	0x08003585
 8003490:	08003607 	.word	0x08003607
 8003494:	080036a3 	.word	0x080036a3
 8003498:	0800370b 	.word	0x0800370b
 800349c:	080037a7 	.word	0x080037a7
 80034a0:	08003829 	.word	0x08003829
 80034a4:	080038c5 	.word	0x080038c5
 80034a8:	0800392f 	.word	0x0800392f
 80034ac:	080039cb 	.word	0x080039cb
 80034b0:	08003a4d 	.word	0x08003a4d
 80034b4:	08003ae9 	.word	0x08003ae9
 80034b8:	08003b51 	.word	0x08003b51
 80034bc:	08003bed 	.word	0x08003bed
 80034c0:	08003c6f 	.word	0x08003c6f
 80034c4:	08003d0b 	.word	0x08003d0b
 80034c8:	08003d73 	.word	0x08003d73
 80034cc:	08003e0f 	.word	0x08003e0f
 80034d0:	08003e91 	.word	0x08003e91
 80034d4:	08003f2d 	.word	0x08003f2d
 80034d8:	08003f95 	.word	0x08003f95
 80034dc:	08004031 	.word	0x08004031
 80034e0:	080040b3 	.word	0x080040b3
 80034e4:	0800414f 	.word	0x0800414f

    case 0:
        dst_p->v1s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fdc9 	bl	800108a <unpack_right_shift_u8>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	705a      	strb	r2, [r3, #1]
        dst_p->v2s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3302      	adds	r3, #2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fdbd 	bl	800108a <unpack_right_shift_u8>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	765a      	strb	r2, [r3, #25]
        dst_p->v3s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3303      	adds	r3, #3
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fdb1 	bl	800108a <unpack_right_shift_u8>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        dst_p->v4s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fda4 	bl	800108a <unpack_right_shift_u8>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        dst_p->v5s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3305      	adds	r3, #5
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fd97 	bl	800108a <unpack_right_shift_u8>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        dst_p->v6s1 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3306      	adds	r3, #6
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	22ff      	movs	r2, #255	; 0xff
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fd8a 	bl	800108a <unpack_right_shift_u8>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        break;
 8003580:	f000 be1a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 1:
        dst_p->v7s1 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fd7b 	bl	800108a <unpack_right_shift_u8>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	709a      	strb	r2, [r3, #2]
        dst_p->v8s1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3302      	adds	r3, #2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fd6f 	bl	800108a <unpack_right_shift_u8>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	769a      	strb	r2, [r3, #26]
        dst_p->v9s1 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	3303      	adds	r3, #3
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fd63 	bl	800108a <unpack_right_shift_u8>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        dst_p->v10s1 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3304      	adds	r3, #4
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fd56 	bl	800108a <unpack_right_shift_u8>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        dst_p->v11s1 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3305      	adds	r3, #5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	22ff      	movs	r2, #255	; 0xff
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fd49 	bl	800108a <unpack_right_shift_u8>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        break;
 8003602:	f000 bdd9 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 2:
        dst_p->v1s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fd3a 	bl	800108a <unpack_right_shift_u8>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	70da      	strb	r2, [r3, #3]
        dst_p->v2s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3302      	adds	r3, #2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd2e 	bl	800108a <unpack_right_shift_u8>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	76da      	strb	r2, [r3, #27]
        dst_p->v3s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3303      	adds	r3, #3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fd22 	bl	800108a <unpack_right_shift_u8>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        dst_p->v4s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3304      	adds	r3, #4
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fd15 	bl	800108a <unpack_right_shift_u8>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        dst_p->v5s2 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3305      	adds	r3, #5
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd08 	bl	800108a <unpack_right_shift_u8>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
        dst_p->v6s2 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3306      	adds	r3, #6
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	22ff      	movs	r2, #255	; 0xff
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fcfb 	bl	800108a <unpack_right_shift_u8>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        break;
 800369e:	f000 bd8b 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 3:
        dst_p->v7s2 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3301      	adds	r3, #1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fcec 	bl	800108a <unpack_right_shift_u8>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	711a      	strb	r2, [r3, #4]
        dst_p->v8s2 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3302      	adds	r3, #2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fce0 	bl	800108a <unpack_right_shift_u8>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	771a      	strb	r2, [r3, #28]
        dst_p->v9s2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3303      	adds	r3, #3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fcd4 	bl	800108a <unpack_right_shift_u8>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        dst_p->v10s2 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3304      	adds	r3, #4
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fcc7 	bl	800108a <unpack_right_shift_u8>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        break;
 8003706:	f000 bd57 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 4:
        dst_p->v1s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fcb8 	bl	800108a <unpack_right_shift_u8>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	715a      	strb	r2, [r3, #5]
        dst_p->v2s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fcac 	bl	800108a <unpack_right_shift_u8>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	775a      	strb	r2, [r3, #29]
        dst_p->v3s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3303      	adds	r3, #3
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fca0 	bl	800108a <unpack_right_shift_u8>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        dst_p->v4s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fc93 	bl	800108a <unpack_right_shift_u8>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        dst_p->v5s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3305      	adds	r3, #5
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fc86 	bl	800108a <unpack_right_shift_u8>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        dst_p->v6s3 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3306      	adds	r3, #6
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fc79 	bl	800108a <unpack_right_shift_u8>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        break;
 80037a2:	f000 bd09 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 5:
        dst_p->v7s3 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fc6a 	bl	800108a <unpack_right_shift_u8>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	719a      	strb	r2, [r3, #6]
        dst_p->v8s3 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3302      	adds	r3, #2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fc5e 	bl	800108a <unpack_right_shift_u8>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	779a      	strb	r2, [r3, #30]
        dst_p->v9s3 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3303      	adds	r3, #3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc52 	bl	800108a <unpack_right_shift_u8>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        dst_p->v10s3 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3304      	adds	r3, #4
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fc45 	bl	800108a <unpack_right_shift_u8>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        dst_p->v11s3 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3305      	adds	r3, #5
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fc38 	bl	800108a <unpack_right_shift_u8>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        break;
 8003824:	f000 bcc8 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 6:
        dst_p->v1s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fc29 	bl	800108a <unpack_right_shift_u8>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	71da      	strb	r2, [r3, #7]
        dst_p->v2s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3302      	adds	r3, #2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fc1d 	bl	800108a <unpack_right_shift_u8>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	77da      	strb	r2, [r3, #31]
        dst_p->v3s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3303      	adds	r3, #3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc11 	bl	800108a <unpack_right_shift_u8>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
        dst_p->v4s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3304      	adds	r3, #4
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fc04 	bl	800108a <unpack_right_shift_u8>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        dst_p->v5s4 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3305      	adds	r3, #5
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fbf7 	bl	800108a <unpack_right_shift_u8>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        dst_p->v6s4 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3306      	adds	r3, #6
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fbea 	bl	800108a <unpack_right_shift_u8>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        break;
 80038c0:	f000 bc7a 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 7:
        dst_p->v7s4 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fbdb 	bl	800108a <unpack_right_shift_u8>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	721a      	strb	r2, [r3, #8]
        dst_p->v8s4 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3302      	adds	r3, #2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	22ff      	movs	r2, #255	; 0xff
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fbcf 	bl	800108a <unpack_right_shift_u8>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]
        dst_p->v9s4 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3303      	adds	r3, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fbc2 	bl	800108a <unpack_right_shift_u8>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dst_p->v10s4 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3304      	adds	r3, #4
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fbb5 	bl	800108a <unpack_right_shift_u8>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        break;
 800392a:	f000 bc45 	b.w	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 8:
        dst_p->v1s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fba6 	bl	800108a <unpack_right_shift_u8>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	725a      	strb	r2, [r3, #9]
        dst_p->v2s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3302      	adds	r3, #2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fb9a 	bl	800108a <unpack_right_shift_u8>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        dst_p->v3s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3303      	adds	r3, #3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fb8d 	bl	800108a <unpack_right_shift_u8>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        dst_p->v4s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3304      	adds	r3, #4
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fb80 	bl	800108a <unpack_right_shift_u8>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        dst_p->v5s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3305      	adds	r3, #5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fb73 	bl	800108a <unpack_right_shift_u8>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        dst_p->v6s5 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3306      	adds	r3, #6
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fb66 	bl	800108a <unpack_right_shift_u8>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        break;
 80039c8:	e3f6      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 9:
        dst_p->v7s5 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fb58 	bl	800108a <unpack_right_shift_u8>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	729a      	strb	r2, [r3, #10]
        dst_p->v8s5 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3302      	adds	r3, #2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fb4c 	bl	800108a <unpack_right_shift_u8>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        dst_p->v9s5 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3303      	adds	r3, #3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fb3f 	bl	800108a <unpack_right_shift_u8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        dst_p->v10s5 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fb32 	bl	800108a <unpack_right_shift_u8>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        dst_p->v11s5 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3305      	adds	r3, #5
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fb25 	bl	800108a <unpack_right_shift_u8>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        break;
 8003a4a:	e3b5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 10:
        dst_p->v1s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fb17 	bl	800108a <unpack_right_shift_u8>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	72da      	strb	r2, [r3, #11]
        dst_p->v2s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3302      	adds	r3, #2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fb0b 	bl	800108a <unpack_right_shift_u8>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        dst_p->v3s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3303      	adds	r3, #3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fafe 	bl	800108a <unpack_right_shift_u8>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        dst_p->v4s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd faf1 	bl	800108a <unpack_right_shift_u8>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
        dst_p->v5s6 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3305      	adds	r3, #5
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fae4 	bl	800108a <unpack_right_shift_u8>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        dst_p->v6s6 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3306      	adds	r3, #6
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fad7 	bl	800108a <unpack_right_shift_u8>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        break;
 8003ae6:	e367      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 11:
        dst_p->v7s6 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fac9 	bl	800108a <unpack_right_shift_u8>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	731a      	strb	r2, [r3, #12]
        dst_p->v8s6 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3302      	adds	r3, #2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fabd 	bl	800108a <unpack_right_shift_u8>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        dst_p->v9s6 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fab0 	bl	800108a <unpack_right_shift_u8>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dst_p->v10s6 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3304      	adds	r3, #4
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd faa3 	bl	800108a <unpack_right_shift_u8>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8003b4e:	e333      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 12:
        dst_p->v1s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3301      	adds	r3, #1
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fa95 	bl	800108a <unpack_right_shift_u8>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	735a      	strb	r2, [r3, #13]
        dst_p->v2s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fa89 	bl	800108a <unpack_right_shift_u8>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        dst_p->v3s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3303      	adds	r3, #3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fa7c 	bl	800108a <unpack_right_shift_u8>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dst_p->v4s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	22ff      	movs	r2, #255	; 0xff
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fa6f 	bl	800108a <unpack_right_shift_u8>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        dst_p->v5s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3305      	adds	r3, #5
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fa62 	bl	800108a <unpack_right_shift_u8>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        dst_p->v6s7 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fa55 	bl	800108a <unpack_right_shift_u8>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        break;
 8003bea:	e2e5      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 13:
        dst_p->v7s7 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fa47 	bl	800108a <unpack_right_shift_u8>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	739a      	strb	r2, [r3, #14]
        dst_p->v8s7 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3302      	adds	r3, #2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fa3b 	bl	800108a <unpack_right_shift_u8>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        dst_p->v9s7 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3303      	adds	r3, #3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fa2e 	bl	800108a <unpack_right_shift_u8>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        dst_p->v10s7 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	22ff      	movs	r2, #255	; 0xff
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fa21 	bl	800108a <unpack_right_shift_u8>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        dst_p->v11s7 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3305      	adds	r3, #5
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fa14 	bl	800108a <unpack_right_shift_u8>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        break;
 8003c6c:	e2a4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 14:
        dst_p->v1s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa06 	bl	800108a <unpack_right_shift_u8>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	73da      	strb	r2, [r3, #15]
        dst_p->v2s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f9fa 	bl	800108a <unpack_right_shift_u8>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        dst_p->v3s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3303      	adds	r3, #3
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f9ed 	bl	800108a <unpack_right_shift_u8>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        dst_p->v4s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd f9e0 	bl	800108a <unpack_right_shift_u8>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        dst_p->v5s8 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd f9d3 	bl	800108a <unpack_right_shift_u8>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        dst_p->v6s8 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd f9c6 	bl	800108a <unpack_right_shift_u8>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        break;
 8003d08:	e256      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 15:
        dst_p->v7s8 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f9b8 	bl	800108a <unpack_right_shift_u8>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	741a      	strb	r2, [r3, #16]
        dst_p->v8s8 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3302      	adds	r3, #2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f9ac 	bl	800108a <unpack_right_shift_u8>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dst_p->v9s8 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	22ff      	movs	r2, #255	; 0xff
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f99f 	bl	800108a <unpack_right_shift_u8>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        dst_p->v10s8 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	22ff      	movs	r2, #255	; 0xff
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f992 	bl	800108a <unpack_right_shift_u8>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        break;
 8003d70:	e222      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 16:
        dst_p->v1s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd f984 	bl	800108a <unpack_right_shift_u8>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	745a      	strb	r2, [r3, #17]
        dst_p->v2s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd f978 	bl	800108a <unpack_right_shift_u8>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        dst_p->v3s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3303      	adds	r3, #3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f96b 	bl	800108a <unpack_right_shift_u8>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        dst_p->v4s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f95e 	bl	800108a <unpack_right_shift_u8>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        dst_p->v5s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3305      	adds	r3, #5
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f951 	bl	800108a <unpack_right_shift_u8>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        dst_p->v6s9 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3306      	adds	r3, #6
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd f944 	bl	800108a <unpack_right_shift_u8>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        break;
 8003e0c:	e1d4      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 17:
        dst_p->v7s9 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f936 	bl	800108a <unpack_right_shift_u8>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	749a      	strb	r2, [r3, #18]
        dst_p->v8s9 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd f92a 	bl	800108a <unpack_right_shift_u8>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        dst_p->v9s9 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3303      	adds	r3, #3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f91d 	bl	800108a <unpack_right_shift_u8>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        dst_p->v10s9 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f910 	bl	800108a <unpack_right_shift_u8>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        dst_p->v11s9 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3305      	adds	r3, #5
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd f903 	bl	800108a <unpack_right_shift_u8>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
        break;
 8003e8e:	e193      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 18:
        dst_p->v1s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3301      	adds	r3, #1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd f8f5 	bl	800108a <unpack_right_shift_u8>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	74da      	strb	r2, [r3, #19]
        dst_p->v2s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	22ff      	movs	r2, #255	; 0xff
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd f8e9 	bl	800108a <unpack_right_shift_u8>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        dst_p->v3s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd f8dc 	bl	800108a <unpack_right_shift_u8>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        dst_p->v4s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd f8cf 	bl	800108a <unpack_right_shift_u8>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        dst_p->v5s10 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3305      	adds	r3, #5
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd f8c2 	bl	800108a <unpack_right_shift_u8>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        dst_p->v6s10 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3306      	adds	r3, #6
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f8b5 	bl	800108a <unpack_right_shift_u8>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8003f2a:	e145      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 19:
        dst_p->v7s10 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd f8a7 	bl	800108a <unpack_right_shift_u8>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	751a      	strb	r2, [r3, #20]
        dst_p->v8s10 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3302      	adds	r3, #2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f89b 	bl	800108a <unpack_right_shift_u8>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        dst_p->v9s10 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3303      	adds	r3, #3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd f88e 	bl	800108a <unpack_right_shift_u8>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        dst_p->v10s10 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd f881 	bl	800108a <unpack_right_shift_u8>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        break;
 8003f92:	e111      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 20:
        dst_p->v1s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3301      	adds	r3, #1
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f873 	bl	800108a <unpack_right_shift_u8>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	755a      	strb	r2, [r3, #21]
        dst_p->v2s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f867 	bl	800108a <unpack_right_shift_u8>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        dst_p->v3s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3303      	adds	r3, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f85a 	bl	800108a <unpack_right_shift_u8>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        dst_p->v4s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f84d 	bl	800108a <unpack_right_shift_u8>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        dst_p->v5s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3305      	adds	r3, #5
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd f840 	bl	800108a <unpack_right_shift_u8>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        dst_p->v6s11 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3306      	adds	r3, #6
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd f833 	bl	800108a <unpack_right_shift_u8>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        break;
 800402e:	e0c3      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 21:
        dst_p->v7s11 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd f825 	bl	800108a <unpack_right_shift_u8>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	759a      	strb	r2, [r3, #22]
        dst_p->v8s11 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f819 	bl	800108a <unpack_right_shift_u8>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dst_p->v9s11 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3303      	adds	r3, #3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f80c 	bl	800108a <unpack_right_shift_u8>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        dst_p->v10s11 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3304      	adds	r3, #4
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	22ff      	movs	r2, #255	; 0xff
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc ffff 	bl	800108a <unpack_right_shift_u8>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        dst_p->v11s11 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3305      	adds	r3, #5
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fff2 	bl	800108a <unpack_right_shift_u8>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        break;
 80040b0:	e082      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 22:
        dst_p->v1s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	22ff      	movs	r2, #255	; 0xff
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc ffe4 	bl	800108a <unpack_right_shift_u8>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	75da      	strb	r2, [r3, #23]
        dst_p->v2s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3302      	adds	r3, #2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc ffd8 	bl	800108a <unpack_right_shift_u8>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dst_p->v3s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3303      	adds	r3, #3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc ffcb 	bl	800108a <unpack_right_shift_u8>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        dst_p->v4s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc ffbe 	bl	800108a <unpack_right_shift_u8>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        dst_p->v5s12 = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3305      	adds	r3, #5
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ffb1 	bl	800108a <unpack_right_shift_u8>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        dst_p->v6s12 = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3306      	adds	r3, #6
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc ffa4 	bl	800108a <unpack_right_shift_u8>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        break;
 800414c:	e034      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    case 23:
        dst_p->v7s12 = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3301      	adds	r3, #1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc ff96 	bl	800108a <unpack_right_shift_u8>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	761a      	strb	r2, [r3, #24]
        dst_p->v8s12 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3302      	adds	r3, #2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc ff8a 	bl	800108a <unpack_right_shift_u8>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        dst_p->v9s12 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3303      	adds	r3, #3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc ff7d 	bl	800108a <unpack_right_shift_u8>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        dst_p->v10s12 = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3304      	adds	r3, #4
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc ff70 	bl	800108a <unpack_right_shift_u8>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        break;
 80041b4:	e000      	b.n	80041b8 <can1_ams_cell_voltages_unpack+0xd70>

    default:
        break;
 80041b6:	bf00      	nop
    }

    return (0);
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>:

uint8_t can1_ams_cell_voltages_voltage_multiplexor_encode(double value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 80041ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041d2:	f7fc fcdb 	bl	8000b8c <__aeabi_d2uiz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	b2db      	uxtb	r3, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	0000      	movs	r0, r0
 80041e4:	0000      	movs	r0, r0
	...

080041e8 <can1_ams_cell_voltages_v1s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s1_encode(double value)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <can1_ams_cell_voltages_v1s1_encode+0x50>)
 80041f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041fc:	f7fc f836 	bl	800026c <__aeabi_dsub>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	a309      	add	r3, pc, #36	; (adr r3, 8004230 <can1_ams_cell_voltages_v1s1_encode+0x48>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fb0f 	bl	8000830 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fc fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800421e:	4603      	mov	r3, r0
 8004220:	b2db      	uxtb	r3, r3
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w
 8004230:	fcce1c58 	.word	0xfcce1c58
 8004234:	3f800e6a 	.word	0x3f800e6a
 8004238:	40040000 	.word	0x40040000
 800423c:	00000000 	.word	0x00000000

08004240 <can1_ams_cell_voltages_v1s1_decode>:

double can1_ams_cell_voltages_v1s1_decode(uint8_t value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc f94b 	bl	80004e8 <__aeabi_ui2d>
 8004252:	a30e      	add	r3, pc, #56	; (adr r3, 800428c <can1_ams_cell_voltages_v1s1_decode+0x4c>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fc f9c0 	bl	80005dc <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <can1_ams_cell_voltages_v1s1_decode+0x48>)
 800426a:	f7fc f801 	bl	8000270 <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	ec43 2b17 	vmov	d7, r2, r3
}
 8004276:	eeb0 0a47 	vmov.f32	s0, s14
 800427a:	eef0 0a67 	vmov.f32	s1, s15
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	f3af 8000 	nop.w
 8004288:	40040000 	.word	0x40040000
 800428c:	fcce1c58 	.word	0xfcce1c58
 8004290:	3f800e6a 	.word	0x3f800e6a
 8004294:	00000000 	.word	0x00000000

08004298 <can1_ams_cell_voltages_v7s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s1_encode(double value)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <can1_ams_cell_voltages_v7s1_encode+0x50>)
 80042a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ac:	f7fb ffde 	bl	800026c <__aeabi_dsub>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	a309      	add	r3, pc, #36	; (adr r3, 80042e0 <can1_ams_cell_voltages_v7s1_encode+0x48>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc fab7 	bl	8000830 <__aeabi_ddiv>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc fc5f 	bl	8000b8c <__aeabi_d2uiz>
 80042ce:	4603      	mov	r3, r0
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	fcce1c58 	.word	0xfcce1c58
 80042e4:	3f800e6a 	.word	0x3f800e6a
 80042e8:	40040000 	.word	0x40040000
 80042ec:	00000000 	.word	0x00000000

080042f0 <can1_ams_cell_voltages_v7s1_decode>:

double can1_ams_cell_voltages_v7s1_decode(uint8_t value)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f8f3 	bl	80004e8 <__aeabi_ui2d>
 8004302:	a30e      	add	r3, pc, #56	; (adr r3, 800433c <can1_ams_cell_voltages_v7s1_decode+0x4c>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fc f968 	bl	80005dc <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <can1_ams_cell_voltages_v7s1_decode+0x48>)
 800431a:	f7fb ffa9 	bl	8000270 <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ec43 2b17 	vmov	d7, r2, r3
}
 8004326:	eeb0 0a47 	vmov.f32	s0, s14
 800432a:	eef0 0a67 	vmov.f32	s1, s15
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f3af 8000 	nop.w
 8004338:	40040000 	.word	0x40040000
 800433c:	fcce1c58 	.word	0xfcce1c58
 8004340:	3f800e6a 	.word	0x3f800e6a
 8004344:	00000000 	.word	0x00000000

08004348 <can1_ams_cell_voltages_v1s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s2_encode(double value)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <can1_ams_cell_voltages_v1s2_encode+0x50>)
 8004358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800435c:	f7fb ff86 	bl	800026c <__aeabi_dsub>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	a309      	add	r3, pc, #36	; (adr r3, 8004390 <can1_ams_cell_voltages_v1s2_encode+0x48>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc fa5f 	bl	8000830 <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fc07 	bl	8000b8c <__aeabi_d2uiz>
 800437e:	4603      	mov	r3, r0
 8004380:	b2db      	uxtb	r3, r3
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	fcce1c58 	.word	0xfcce1c58
 8004394:	3f800e6a 	.word	0x3f800e6a
 8004398:	40040000 	.word	0x40040000
 800439c:	00000000 	.word	0x00000000

080043a0 <can1_ams_cell_voltages_v1s2_decode>:

double can1_ams_cell_voltages_v1s2_decode(uint8_t value)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f89b 	bl	80004e8 <__aeabi_ui2d>
 80043b2:	a30e      	add	r3, pc, #56	; (adr r3, 80043ec <can1_ams_cell_voltages_v1s2_decode+0x4c>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f910 	bl	80005dc <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <can1_ams_cell_voltages_v1s2_decode+0x48>)
 80043ca:	f7fb ff51 	bl	8000270 <__adddf3>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80043d6:	eeb0 0a47 	vmov.f32	s0, s14
 80043da:	eef0 0a67 	vmov.f32	s1, s15
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	f3af 8000 	nop.w
 80043e8:	40040000 	.word	0x40040000
 80043ec:	fcce1c58 	.word	0xfcce1c58
 80043f0:	3f800e6a 	.word	0x3f800e6a
 80043f4:	00000000 	.word	0x00000000

080043f8 <can1_ams_cell_voltages_v7s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s2_encode(double value)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <can1_ams_cell_voltages_v7s2_encode+0x50>)
 8004408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440c:	f7fb ff2e 	bl	800026c <__aeabi_dsub>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	a309      	add	r3, pc, #36	; (adr r3, 8004440 <can1_ams_cell_voltages_v7s2_encode+0x48>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc fa07 	bl	8000830 <__aeabi_ddiv>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	f7fc fbaf 	bl	8000b8c <__aeabi_d2uiz>
 800442e:	4603      	mov	r3, r0
 8004430:	b2db      	uxtb	r3, r3
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	fcce1c58 	.word	0xfcce1c58
 8004444:	3f800e6a 	.word	0x3f800e6a
 8004448:	40040000 	.word	0x40040000
 800444c:	00000000 	.word	0x00000000

08004450 <can1_ams_cell_voltages_v7s2_decode>:

double can1_ams_cell_voltages_v7s2_decode(uint8_t value)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f843 	bl	80004e8 <__aeabi_ui2d>
 8004462:	a30e      	add	r3, pc, #56	; (adr r3, 800449c <can1_ams_cell_voltages_v7s2_decode+0x4c>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f8b8 	bl	80005dc <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <can1_ams_cell_voltages_v7s2_decode+0x48>)
 800447a:	f7fb fef9 	bl	8000270 <__adddf3>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	ec43 2b17 	vmov	d7, r2, r3
}
 8004486:	eeb0 0a47 	vmov.f32	s0, s14
 800448a:	eef0 0a67 	vmov.f32	s1, s15
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	f3af 8000 	nop.w
 8004498:	40040000 	.word	0x40040000
 800449c:	fcce1c58 	.word	0xfcce1c58
 80044a0:	3f800e6a 	.word	0x3f800e6a
 80044a4:	00000000 	.word	0x00000000

080044a8 <can1_ams_cell_voltages_v1s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s3_encode(double value)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <can1_ams_cell_voltages_v1s3_encode+0x50>)
 80044b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044bc:	f7fb fed6 	bl	800026c <__aeabi_dsub>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	a309      	add	r3, pc, #36	; (adr r3, 80044f0 <can1_ams_cell_voltages_v1s3_encode+0x48>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f9af 	bl	8000830 <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb57 	bl	8000b8c <__aeabi_d2uiz>
 80044de:	4603      	mov	r3, r0
 80044e0:	b2db      	uxtb	r3, r3
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	fcce1c58 	.word	0xfcce1c58
 80044f4:	3f800e6a 	.word	0x3f800e6a
 80044f8:	40040000 	.word	0x40040000
 80044fc:	00000000 	.word	0x00000000

08004500 <can1_ams_cell_voltages_v1s3_decode>:

double can1_ams_cell_voltages_v1s3_decode(uint8_t value)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffeb 	bl	80004e8 <__aeabi_ui2d>
 8004512:	a30e      	add	r3, pc, #56	; (adr r3, 800454c <can1_ams_cell_voltages_v1s3_decode+0x4c>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f860 	bl	80005dc <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <can1_ams_cell_voltages_v1s3_decode+0x48>)
 800452a:	f7fb fea1 	bl	8000270 <__adddf3>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	ec43 2b17 	vmov	d7, r2, r3
}
 8004536:	eeb0 0a47 	vmov.f32	s0, s14
 800453a:	eef0 0a67 	vmov.f32	s1, s15
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f3af 8000 	nop.w
 8004548:	40040000 	.word	0x40040000
 800454c:	fcce1c58 	.word	0xfcce1c58
 8004550:	3f800e6a 	.word	0x3f800e6a
 8004554:	00000000 	.word	0x00000000

08004558 <can1_ams_cell_voltages_v7s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s3_encode(double value)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <can1_ams_cell_voltages_v7s3_encode+0x50>)
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f7fb fe7e 	bl	800026c <__aeabi_dsub>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	a309      	add	r3, pc, #36	; (adr r3, 80045a0 <can1_ams_cell_voltages_v7s3_encode+0x48>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f957 	bl	8000830 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc faff 	bl	8000b8c <__aeabi_d2uiz>
 800458e:	4603      	mov	r3, r0
 8004590:	b2db      	uxtb	r3, r3
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	fcce1c58 	.word	0xfcce1c58
 80045a4:	3f800e6a 	.word	0x3f800e6a
 80045a8:	40040000 	.word	0x40040000
 80045ac:	00000000 	.word	0x00000000

080045b0 <can1_ams_cell_voltages_v7s3_decode>:

double can1_ams_cell_voltages_v7s3_decode(uint8_t value)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ff93 	bl	80004e8 <__aeabi_ui2d>
 80045c2:	a30e      	add	r3, pc, #56	; (adr r3, 80045fc <can1_ams_cell_voltages_v7s3_decode+0x4c>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f808 	bl	80005dc <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <can1_ams_cell_voltages_v7s3_decode+0x48>)
 80045da:	f7fb fe49 	bl	8000270 <__adddf3>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80045e6:	eeb0 0a47 	vmov.f32	s0, s14
 80045ea:	eef0 0a67 	vmov.f32	s1, s15
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	f3af 8000 	nop.w
 80045f8:	40040000 	.word	0x40040000
 80045fc:	fcce1c58 	.word	0xfcce1c58
 8004600:	3f800e6a 	.word	0x3f800e6a
 8004604:	00000000 	.word	0x00000000

08004608 <can1_ams_cell_voltages_v1s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s4_encode(double value)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <can1_ams_cell_voltages_v1s4_encode+0x50>)
 8004618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800461c:	f7fb fe26 	bl	800026c <__aeabi_dsub>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	a309      	add	r3, pc, #36	; (adr r3, 8004650 <can1_ams_cell_voltages_v1s4_encode+0x48>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fc f8ff 	bl	8000830 <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7fc faa7 	bl	8000b8c <__aeabi_d2uiz>
 800463e:	4603      	mov	r3, r0
 8004640:	b2db      	uxtb	r3, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w
 8004650:	fcce1c58 	.word	0xfcce1c58
 8004654:	3f800e6a 	.word	0x3f800e6a
 8004658:	40040000 	.word	0x40040000
 800465c:	00000000 	.word	0x00000000

08004660 <can1_ams_cell_voltages_v1s4_decode>:

double can1_ams_cell_voltages_v1s4_decode(uint8_t value)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fb ff3b 	bl	80004e8 <__aeabi_ui2d>
 8004672:	a30e      	add	r3, pc, #56	; (adr r3, 80046ac <can1_ams_cell_voltages_v1s4_decode+0x4c>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ffb0 	bl	80005dc <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <can1_ams_cell_voltages_v1s4_decode+0x48>)
 800468a:	f7fb fdf1 	bl	8000270 <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	ec43 2b17 	vmov	d7, r2, r3
}
 8004696:	eeb0 0a47 	vmov.f32	s0, s14
 800469a:	eef0 0a67 	vmov.f32	s1, s15
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	f3af 8000 	nop.w
 80046a8:	40040000 	.word	0x40040000
 80046ac:	fcce1c58 	.word	0xfcce1c58
 80046b0:	3f800e6a 	.word	0x3f800e6a
 80046b4:	00000000 	.word	0x00000000

080046b8 <can1_ams_cell_voltages_v7s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s4_encode(double value)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <can1_ams_cell_voltages_v7s4_encode+0x50>)
 80046c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046cc:	f7fb fdce 	bl	800026c <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	a309      	add	r3, pc, #36	; (adr r3, 8004700 <can1_ams_cell_voltages_v7s4_encode+0x48>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fc f8a7 	bl	8000830 <__aeabi_ddiv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fc fa4f 	bl	8000b8c <__aeabi_d2uiz>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b2db      	uxtb	r3, r3
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w
 8004700:	fcce1c58 	.word	0xfcce1c58
 8004704:	3f800e6a 	.word	0x3f800e6a
 8004708:	40040000 	.word	0x40040000
 800470c:	00000000 	.word	0x00000000

08004710 <can1_ams_cell_voltages_v7s4_decode>:

double can1_ams_cell_voltages_v7s4_decode(uint8_t value)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fb fee3 	bl	80004e8 <__aeabi_ui2d>
 8004722:	a30e      	add	r3, pc, #56	; (adr r3, 800475c <can1_ams_cell_voltages_v7s4_decode+0x4c>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff58 	bl	80005dc <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <can1_ams_cell_voltages_v7s4_decode+0x48>)
 800473a:	f7fb fd99 	bl	8000270 <__adddf3>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	ec43 2b17 	vmov	d7, r2, r3
}
 8004746:	eeb0 0a47 	vmov.f32	s0, s14
 800474a:	eef0 0a67 	vmov.f32	s1, s15
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	f3af 8000 	nop.w
 8004758:	40040000 	.word	0x40040000
 800475c:	fcce1c58 	.word	0xfcce1c58
 8004760:	3f800e6a 	.word	0x3f800e6a
 8004764:	00000000 	.word	0x00000000

08004768 <can1_ams_cell_voltages_v1s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s5_encode(double value)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <can1_ams_cell_voltages_v1s5_encode+0x50>)
 8004778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800477c:	f7fb fd76 	bl	800026c <__aeabi_dsub>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	a309      	add	r3, pc, #36	; (adr r3, 80047b0 <can1_ams_cell_voltages_v1s5_encode+0x48>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fc f84f 	bl	8000830 <__aeabi_ddiv>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fc f9f7 	bl	8000b8c <__aeabi_d2uiz>
 800479e:	4603      	mov	r3, r0
 80047a0:	b2db      	uxtb	r3, r3
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	fcce1c58 	.word	0xfcce1c58
 80047b4:	3f800e6a 	.word	0x3f800e6a
 80047b8:	40040000 	.word	0x40040000
 80047bc:	00000000 	.word	0x00000000

080047c0 <can1_ams_cell_voltages_v1s5_decode>:

double can1_ams_cell_voltages_v1s5_decode(uint8_t value)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fb fe8b 	bl	80004e8 <__aeabi_ui2d>
 80047d2:	a30e      	add	r3, pc, #56	; (adr r3, 800480c <can1_ams_cell_voltages_v1s5_decode+0x4c>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb ff00 	bl	80005dc <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <can1_ams_cell_voltages_v1s5_decode+0x48>)
 80047ea:	f7fb fd41 	bl	8000270 <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80047f6:	eeb0 0a47 	vmov.f32	s0, s14
 80047fa:	eef0 0a67 	vmov.f32	s1, s15
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	f3af 8000 	nop.w
 8004808:	40040000 	.word	0x40040000
 800480c:	fcce1c58 	.word	0xfcce1c58
 8004810:	3f800e6a 	.word	0x3f800e6a
 8004814:	00000000 	.word	0x00000000

08004818 <can1_ams_cell_voltages_v7s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s5_encode(double value)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <can1_ams_cell_voltages_v7s5_encode+0x50>)
 8004828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482c:	f7fb fd1e 	bl	800026c <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	a309      	add	r3, pc, #36	; (adr r3, 8004860 <can1_ams_cell_voltages_v7s5_encode+0x48>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fff7 	bl	8000830 <__aeabi_ddiv>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f7fc f99f 	bl	8000b8c <__aeabi_d2uiz>
 800484e:	4603      	mov	r3, r0
 8004850:	b2db      	uxtb	r3, r3
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	fcce1c58 	.word	0xfcce1c58
 8004864:	3f800e6a 	.word	0x3f800e6a
 8004868:	40040000 	.word	0x40040000
 800486c:	00000000 	.word	0x00000000

08004870 <can1_ams_cell_voltages_v7s5_decode>:

double can1_ams_cell_voltages_v7s5_decode(uint8_t value)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe33 	bl	80004e8 <__aeabi_ui2d>
 8004882:	a30e      	add	r3, pc, #56	; (adr r3, 80048bc <can1_ams_cell_voltages_v7s5_decode+0x4c>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fea8 	bl	80005dc <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <can1_ams_cell_voltages_v7s5_decode+0x48>)
 800489a:	f7fb fce9 	bl	8000270 <__adddf3>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80048a6:	eeb0 0a47 	vmov.f32	s0, s14
 80048aa:	eef0 0a67 	vmov.f32	s1, s15
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	f3af 8000 	nop.w
 80048b8:	40040000 	.word	0x40040000
 80048bc:	fcce1c58 	.word	0xfcce1c58
 80048c0:	3f800e6a 	.word	0x3f800e6a
 80048c4:	00000000 	.word	0x00000000

080048c8 <can1_ams_cell_voltages_v1s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s6_encode(double value)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <can1_ams_cell_voltages_v1s6_encode+0x50>)
 80048d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048dc:	f7fb fcc6 	bl	800026c <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	a309      	add	r3, pc, #36	; (adr r3, 8004910 <can1_ams_cell_voltages_v1s6_encode+0x48>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb ff9f 	bl	8000830 <__aeabi_ddiv>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f7fc f947 	bl	8000b8c <__aeabi_d2uiz>
 80048fe:	4603      	mov	r3, r0
 8004900:	b2db      	uxtb	r3, r3
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	fcce1c58 	.word	0xfcce1c58
 8004914:	3f800e6a 	.word	0x3f800e6a
 8004918:	40040000 	.word	0x40040000
 800491c:	00000000 	.word	0x00000000

08004920 <can1_ams_cell_voltages_v1s6_decode>:

double can1_ams_cell_voltages_v1s6_decode(uint8_t value)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fddb 	bl	80004e8 <__aeabi_ui2d>
 8004932:	a30e      	add	r3, pc, #56	; (adr r3, 800496c <can1_ams_cell_voltages_v1s6_decode+0x4c>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe50 	bl	80005dc <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <can1_ams_cell_voltages_v1s6_decode+0x48>)
 800494a:	f7fb fc91 	bl	8000270 <__adddf3>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	ec43 2b17 	vmov	d7, r2, r3
}
 8004956:	eeb0 0a47 	vmov.f32	s0, s14
 800495a:	eef0 0a67 	vmov.f32	s1, s15
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f3af 8000 	nop.w
 8004968:	40040000 	.word	0x40040000
 800496c:	fcce1c58 	.word	0xfcce1c58
 8004970:	3f800e6a 	.word	0x3f800e6a
 8004974:	00000000 	.word	0x00000000

08004978 <can1_ams_cell_voltages_v7s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s6_encode(double value)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <can1_ams_cell_voltages_v7s6_encode+0x50>)
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	f7fb fc6e 	bl	800026c <__aeabi_dsub>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	a309      	add	r3, pc, #36	; (adr r3, 80049c0 <can1_ams_cell_voltages_v7s6_encode+0x48>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb ff47 	bl	8000830 <__aeabi_ddiv>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fc f8ef 	bl	8000b8c <__aeabi_d2uiz>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	fcce1c58 	.word	0xfcce1c58
 80049c4:	3f800e6a 	.word	0x3f800e6a
 80049c8:	40040000 	.word	0x40040000
 80049cc:	00000000 	.word	0x00000000

080049d0 <can1_ams_cell_voltages_v7s6_decode>:

double can1_ams_cell_voltages_v7s6_decode(uint8_t value)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fd83 	bl	80004e8 <__aeabi_ui2d>
 80049e2:	a30e      	add	r3, pc, #56	; (adr r3, 8004a1c <can1_ams_cell_voltages_v7s6_decode+0x4c>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fb fdf8 	bl	80005dc <__aeabi_dmul>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <can1_ams_cell_voltages_v7s6_decode+0x48>)
 80049fa:	f7fb fc39 	bl	8000270 <__adddf3>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a06:	eeb0 0a47 	vmov.f32	s0, s14
 8004a0a:	eef0 0a67 	vmov.f32	s1, s15
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	f3af 8000 	nop.w
 8004a18:	40040000 	.word	0x40040000
 8004a1c:	fcce1c58 	.word	0xfcce1c58
 8004a20:	3f800e6a 	.word	0x3f800e6a
 8004a24:	00000000 	.word	0x00000000

08004a28 <can1_ams_cell_voltages_v1s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s7_encode(double value)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <can1_ams_cell_voltages_v1s7_encode+0x50>)
 8004a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a3c:	f7fb fc16 	bl	800026c <__aeabi_dsub>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	a309      	add	r3, pc, #36	; (adr r3, 8004a70 <can1_ams_cell_voltages_v1s7_encode+0x48>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb feef 	bl	8000830 <__aeabi_ddiv>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f897 	bl	8000b8c <__aeabi_d2uiz>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	b2db      	uxtb	r3, r3
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	f3af 8000 	nop.w
 8004a70:	fcce1c58 	.word	0xfcce1c58
 8004a74:	3f800e6a 	.word	0x3f800e6a
 8004a78:	40040000 	.word	0x40040000
 8004a7c:	00000000 	.word	0x00000000

08004a80 <can1_ams_cell_voltages_v1s7_decode>:

double can1_ams_cell_voltages_v1s7_decode(uint8_t value)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fd2b 	bl	80004e8 <__aeabi_ui2d>
 8004a92:	a30e      	add	r3, pc, #56	; (adr r3, 8004acc <can1_ams_cell_voltages_v1s7_decode+0x4c>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fda0 	bl	80005dc <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <can1_ams_cell_voltages_v1s7_decode+0x48>)
 8004aaa:	f7fb fbe1 	bl	8000270 <__adddf3>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aba:	eef0 0a67 	vmov.f32	s1, s15
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	40040000 	.word	0x40040000
 8004acc:	fcce1c58 	.word	0xfcce1c58
 8004ad0:	3f800e6a 	.word	0x3f800e6a
 8004ad4:	00000000 	.word	0x00000000

08004ad8 <can1_ams_cell_voltages_v7s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s7_encode(double value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <can1_ams_cell_voltages_v7s7_encode+0x50>)
 8004ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aec:	f7fb fbbe 	bl	800026c <__aeabi_dsub>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	a309      	add	r3, pc, #36	; (adr r3, 8004b20 <can1_ams_cell_voltages_v7s7_encode+0x48>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fe97 	bl	8000830 <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fc f83f 	bl	8000b8c <__aeabi_d2uiz>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w
 8004b20:	fcce1c58 	.word	0xfcce1c58
 8004b24:	3f800e6a 	.word	0x3f800e6a
 8004b28:	40040000 	.word	0x40040000
 8004b2c:	00000000 	.word	0x00000000

08004b30 <can1_ams_cell_voltages_v7s7_decode>:

double can1_ams_cell_voltages_v7s7_decode(uint8_t value)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fcd3 	bl	80004e8 <__aeabi_ui2d>
 8004b42:	a30e      	add	r3, pc, #56	; (adr r3, 8004b7c <can1_ams_cell_voltages_v7s7_decode+0x4c>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fd48 	bl	80005dc <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <can1_ams_cell_voltages_v7s7_decode+0x48>)
 8004b5a:	f7fb fb89 	bl	8000270 <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b66:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6a:	eef0 0a67 	vmov.f32	s1, s15
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	f3af 8000 	nop.w
 8004b78:	40040000 	.word	0x40040000
 8004b7c:	fcce1c58 	.word	0xfcce1c58
 8004b80:	3f800e6a 	.word	0x3f800e6a
 8004b84:	00000000 	.word	0x00000000

08004b88 <can1_ams_cell_voltages_v1s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s8_encode(double value)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <can1_ams_cell_voltages_v1s8_encode+0x50>)
 8004b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9c:	f7fb fb66 	bl	800026c <__aeabi_dsub>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	a309      	add	r3, pc, #36	; (adr r3, 8004bd0 <can1_ams_cell_voltages_v1s8_encode+0x48>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fe3f 	bl	8000830 <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fb ffe7 	bl	8000b8c <__aeabi_d2uiz>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	fcce1c58 	.word	0xfcce1c58
 8004bd4:	3f800e6a 	.word	0x3f800e6a
 8004bd8:	40040000 	.word	0x40040000
 8004bdc:	00000000 	.word	0x00000000

08004be0 <can1_ams_cell_voltages_v1s8_decode>:

double can1_ams_cell_voltages_v1s8_decode(uint8_t value)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc7b 	bl	80004e8 <__aeabi_ui2d>
 8004bf2:	a30e      	add	r3, pc, #56	; (adr r3, 8004c2c <can1_ams_cell_voltages_v1s8_decode+0x4c>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fcf0 	bl	80005dc <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <can1_ams_cell_voltages_v1s8_decode+0x48>)
 8004c0a:	f7fb fb31 	bl	8000270 <__adddf3>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c16:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1a:	eef0 0a67 	vmov.f32	s1, s15
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	f3af 8000 	nop.w
 8004c28:	40040000 	.word	0x40040000
 8004c2c:	fcce1c58 	.word	0xfcce1c58
 8004c30:	3f800e6a 	.word	0x3f800e6a
 8004c34:	00000000 	.word	0x00000000

08004c38 <can1_ams_cell_voltages_v7s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s8_encode(double value)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <can1_ams_cell_voltages_v7s8_encode+0x50>)
 8004c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c4c:	f7fb fb0e 	bl	800026c <__aeabi_dsub>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	a309      	add	r3, pc, #36	; (adr r3, 8004c80 <can1_ams_cell_voltages_v7s8_encode+0x48>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fde7 	bl	8000830 <__aeabi_ddiv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ff8f 	bl	8000b8c <__aeabi_d2uiz>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	b2db      	uxtb	r3, r3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w
 8004c80:	fcce1c58 	.word	0xfcce1c58
 8004c84:	3f800e6a 	.word	0x3f800e6a
 8004c88:	40040000 	.word	0x40040000
 8004c8c:	00000000 	.word	0x00000000

08004c90 <can1_ams_cell_voltages_v7s8_decode>:

double can1_ams_cell_voltages_v7s8_decode(uint8_t value)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc23 	bl	80004e8 <__aeabi_ui2d>
 8004ca2:	a30e      	add	r3, pc, #56	; (adr r3, 8004cdc <can1_ams_cell_voltages_v7s8_decode+0x4c>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fc98 	bl	80005dc <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <can1_ams_cell_voltages_v7s8_decode+0x48>)
 8004cba:	f7fb fad9 	bl	8000270 <__adddf3>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cca:	eef0 0a67 	vmov.f32	s1, s15
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	40040000 	.word	0x40040000
 8004cdc:	fcce1c58 	.word	0xfcce1c58
 8004ce0:	3f800e6a 	.word	0x3f800e6a
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <can1_ams_cell_voltages_v1s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s9_encode(double value)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <can1_ams_cell_voltages_v1s9_encode+0x50>)
 8004cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cfc:	f7fb fab6 	bl	800026c <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	a309      	add	r3, pc, #36	; (adr r3, 8004d30 <can1_ams_cell_voltages_v1s9_encode+0x48>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fd8f 	bl	8000830 <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb ff37 	bl	8000b8c <__aeabi_d2uiz>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b2db      	uxtb	r3, r3
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	fcce1c58 	.word	0xfcce1c58
 8004d34:	3f800e6a 	.word	0x3f800e6a
 8004d38:	40040000 	.word	0x40040000
 8004d3c:	00000000 	.word	0x00000000

08004d40 <can1_ams_cell_voltages_v1s9_decode>:

double can1_ams_cell_voltages_v1s9_decode(uint8_t value)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fbcb 	bl	80004e8 <__aeabi_ui2d>
 8004d52:	a30e      	add	r3, pc, #56	; (adr r3, 8004d8c <can1_ams_cell_voltages_v1s9_decode+0x4c>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc40 	bl	80005dc <__aeabi_dmul>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <can1_ams_cell_voltages_v1s9_decode+0x48>)
 8004d6a:	f7fb fa81 	bl	8000270 <__adddf3>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d76:	eeb0 0a47 	vmov.f32	s0, s14
 8004d7a:	eef0 0a67 	vmov.f32	s1, s15
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	f3af 8000 	nop.w
 8004d88:	40040000 	.word	0x40040000
 8004d8c:	fcce1c58 	.word	0xfcce1c58
 8004d90:	3f800e6a 	.word	0x3f800e6a
 8004d94:	00000000 	.word	0x00000000

08004d98 <can1_ams_cell_voltages_v7s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s9_encode(double value)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <can1_ams_cell_voltages_v7s9_encode+0x50>)
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f7fb fa5e 	bl	800026c <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	a309      	add	r3, pc, #36	; (adr r3, 8004de0 <can1_ams_cell_voltages_v7s9_encode+0x48>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fd37 	bl	8000830 <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7fb fedf 	bl	8000b8c <__aeabi_d2uiz>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	b2db      	uxtb	r3, r3
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w
 8004de0:	fcce1c58 	.word	0xfcce1c58
 8004de4:	3f800e6a 	.word	0x3f800e6a
 8004de8:	40040000 	.word	0x40040000
 8004dec:	00000000 	.word	0x00000000

08004df0 <can1_ams_cell_voltages_v7s9_decode>:

double can1_ams_cell_voltages_v7s9_decode(uint8_t value)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fb73 	bl	80004e8 <__aeabi_ui2d>
 8004e02:	a30e      	add	r3, pc, #56	; (adr r3, 8004e3c <can1_ams_cell_voltages_v7s9_decode+0x4c>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fbe8 	bl	80005dc <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <can1_ams_cell_voltages_v7s9_decode+0x48>)
 8004e1a:	f7fb fa29 	bl	8000270 <__adddf3>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e26:	eeb0 0a47 	vmov.f32	s0, s14
 8004e2a:	eef0 0a67 	vmov.f32	s1, s15
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	f3af 8000 	nop.w
 8004e38:	40040000 	.word	0x40040000
 8004e3c:	fcce1c58 	.word	0xfcce1c58
 8004e40:	3f800e6a 	.word	0x3f800e6a
 8004e44:	00000000 	.word	0x00000000

08004e48 <can1_ams_cell_voltages_v1s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s10_encode(double value)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <can1_ams_cell_voltages_v1s10_encode+0x50>)
 8004e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e5c:	f7fb fa06 	bl	800026c <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	a309      	add	r3, pc, #36	; (adr r3, 8004e90 <can1_ams_cell_voltages_v1s10_encode+0x48>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fcdf 	bl	8000830 <__aeabi_ddiv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fb fe87 	bl	8000b8c <__aeabi_d2uiz>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	b2db      	uxtb	r3, r3
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w
 8004e90:	fcce1c58 	.word	0xfcce1c58
 8004e94:	3f800e6a 	.word	0x3f800e6a
 8004e98:	40040000 	.word	0x40040000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <can1_ams_cell_voltages_v1s10_decode>:

double can1_ams_cell_voltages_v1s10_decode(uint8_t value)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fb1b 	bl	80004e8 <__aeabi_ui2d>
 8004eb2:	a30e      	add	r3, pc, #56	; (adr r3, 8004eec <can1_ams_cell_voltages_v1s10_decode+0x4c>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb90 	bl	80005dc <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <can1_ams_cell_voltages_v1s10_decode+0x48>)
 8004eca:	f7fb f9d1 	bl	8000270 <__adddf3>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ec43 2b17 	vmov	d7, r2, r3
}
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	40040000 	.word	0x40040000
 8004eec:	fcce1c58 	.word	0xfcce1c58
 8004ef0:	3f800e6a 	.word	0x3f800e6a
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <can1_ams_cell_voltages_v7s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s10_encode(double value)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <can1_ams_cell_voltages_v7s10_encode+0x50>)
 8004f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f0c:	f7fb f9ae 	bl	800026c <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	a309      	add	r3, pc, #36	; (adr r3, 8004f40 <can1_ams_cell_voltages_v7s10_encode+0x48>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fc87 	bl	8000830 <__aeabi_ddiv>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fb fe2f 	bl	8000b8c <__aeabi_d2uiz>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b2db      	uxtb	r3, r3
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w
 8004f40:	fcce1c58 	.word	0xfcce1c58
 8004f44:	3f800e6a 	.word	0x3f800e6a
 8004f48:	40040000 	.word	0x40040000
 8004f4c:	00000000 	.word	0x00000000

08004f50 <can1_ams_cell_voltages_v7s10_decode>:

double can1_ams_cell_voltages_v7s10_decode(uint8_t value)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb fac3 	bl	80004e8 <__aeabi_ui2d>
 8004f62:	a30e      	add	r3, pc, #56	; (adr r3, 8004f9c <can1_ams_cell_voltages_v7s10_decode+0x4c>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb fb38 	bl	80005dc <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <can1_ams_cell_voltages_v7s10_decode+0x48>)
 8004f7a:	f7fb f979 	bl	8000270 <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f86:	eeb0 0a47 	vmov.f32	s0, s14
 8004f8a:	eef0 0a67 	vmov.f32	s1, s15
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	f3af 8000 	nop.w
 8004f98:	40040000 	.word	0x40040000
 8004f9c:	fcce1c58 	.word	0xfcce1c58
 8004fa0:	3f800e6a 	.word	0x3f800e6a
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <can1_ams_cell_voltages_v1s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s11_encode(double value)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <can1_ams_cell_voltages_v1s11_encode+0x50>)
 8004fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fbc:	f7fb f956 	bl	800026c <__aeabi_dsub>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	a309      	add	r3, pc, #36	; (adr r3, 8004ff0 <can1_ams_cell_voltages_v1s11_encode+0x48>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fc2f 	bl	8000830 <__aeabi_ddiv>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7fb fdd7 	bl	8000b8c <__aeabi_d2uiz>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	b2db      	uxtb	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w
 8004ff0:	fcce1c58 	.word	0xfcce1c58
 8004ff4:	3f800e6a 	.word	0x3f800e6a
 8004ff8:	40040000 	.word	0x40040000
 8004ffc:	00000000 	.word	0x00000000

08005000 <can1_ams_cell_voltages_v1s11_decode>:

double can1_ams_cell_voltages_v1s11_decode(uint8_t value)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb fa6b 	bl	80004e8 <__aeabi_ui2d>
 8005012:	a30e      	add	r3, pc, #56	; (adr r3, 800504c <can1_ams_cell_voltages_v1s11_decode+0x4c>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb fae0 	bl	80005dc <__aeabi_dmul>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <can1_ams_cell_voltages_v1s11_decode+0x48>)
 800502a:	f7fb f921 	bl	8000270 <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	ec43 2b17 	vmov	d7, r2, r3
}
 8005036:	eeb0 0a47 	vmov.f32	s0, s14
 800503a:	eef0 0a67 	vmov.f32	s1, s15
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	f3af 8000 	nop.w
 8005048:	40040000 	.word	0x40040000
 800504c:	fcce1c58 	.word	0xfcce1c58
 8005050:	3f800e6a 	.word	0x3f800e6a
 8005054:	00000000 	.word	0x00000000

08005058 <can1_ams_cell_voltages_v7s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s11_encode(double value)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <can1_ams_cell_voltages_v7s11_encode+0x50>)
 8005068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800506c:	f7fb f8fe 	bl	800026c <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	a309      	add	r3, pc, #36	; (adr r3, 80050a0 <can1_ams_cell_voltages_v7s11_encode+0x48>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fbd7 	bl	8000830 <__aeabi_ddiv>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fd7f 	bl	8000b8c <__aeabi_d2uiz>
 800508e:	4603      	mov	r3, r0
 8005090:	b2db      	uxtb	r3, r3
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w
 80050a0:	fcce1c58 	.word	0xfcce1c58
 80050a4:	3f800e6a 	.word	0x3f800e6a
 80050a8:	40040000 	.word	0x40040000
 80050ac:	00000000 	.word	0x00000000

080050b0 <can1_ams_cell_voltages_v7s11_decode>:

double can1_ams_cell_voltages_v7s11_decode(uint8_t value)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fb fa13 	bl	80004e8 <__aeabi_ui2d>
 80050c2:	a30e      	add	r3, pc, #56	; (adr r3, 80050fc <can1_ams_cell_voltages_v7s11_decode+0x4c>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa88 	bl	80005dc <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <can1_ams_cell_voltages_v7s11_decode+0x48>)
 80050da:	f7fb f8c9 	bl	8000270 <__adddf3>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80050e6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ea:	eef0 0a67 	vmov.f32	s1, s15
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	f3af 8000 	nop.w
 80050f8:	40040000 	.word	0x40040000
 80050fc:	fcce1c58 	.word	0xfcce1c58
 8005100:	3f800e6a 	.word	0x3f800e6a
 8005104:	00000000 	.word	0x00000000

08005108 <can1_ams_cell_voltages_v1s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v1s12_encode(double value)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <can1_ams_cell_voltages_v1s12_encode+0x50>)
 8005118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511c:	f7fb f8a6 	bl	800026c <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	a309      	add	r3, pc, #36	; (adr r3, 8005150 <can1_ams_cell_voltages_v1s12_encode+0x48>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fb7f 	bl	8000830 <__aeabi_ddiv>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f7fb fd27 	bl	8000b8c <__aeabi_d2uiz>
 800513e:	4603      	mov	r3, r0
 8005140:	b2db      	uxtb	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	fcce1c58 	.word	0xfcce1c58
 8005154:	3f800e6a 	.word	0x3f800e6a
 8005158:	40040000 	.word	0x40040000
 800515c:	00000000 	.word	0x00000000

08005160 <can1_ams_cell_voltages_v1s12_decode>:

double can1_ams_cell_voltages_v1s12_decode(uint8_t value)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fb f9bb 	bl	80004e8 <__aeabi_ui2d>
 8005172:	a30e      	add	r3, pc, #56	; (adr r3, 80051ac <can1_ams_cell_voltages_v1s12_decode+0x4c>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa30 	bl	80005dc <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <can1_ams_cell_voltages_v1s12_decode+0x48>)
 800518a:	f7fb f871 	bl	8000270 <__adddf3>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	ec43 2b17 	vmov	d7, r2, r3
}
 8005196:	eeb0 0a47 	vmov.f32	s0, s14
 800519a:	eef0 0a67 	vmov.f32	s1, s15
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	f3af 8000 	nop.w
 80051a8:	40040000 	.word	0x40040000
 80051ac:	fcce1c58 	.word	0xfcce1c58
 80051b0:	3f800e6a 	.word	0x3f800e6a
 80051b4:	00000000 	.word	0x00000000

080051b8 <can1_ams_cell_voltages_v7s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v7s12_encode(double value)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <can1_ams_cell_voltages_v7s12_encode+0x50>)
 80051c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051cc:	f7fb f84e 	bl	800026c <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <can1_ams_cell_voltages_v7s12_encode+0x48>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fb27 	bl	8000830 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7fb fccf 	bl	8000b8c <__aeabi_d2uiz>
 80051ee:	4603      	mov	r3, r0
 80051f0:	b2db      	uxtb	r3, r3
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w
 8005200:	fcce1c58 	.word	0xfcce1c58
 8005204:	3f800e6a 	.word	0x3f800e6a
 8005208:	40040000 	.word	0x40040000
 800520c:	00000000 	.word	0x00000000

08005210 <can1_ams_cell_voltages_v7s12_decode>:

double can1_ams_cell_voltages_v7s12_decode(uint8_t value)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f963 	bl	80004e8 <__aeabi_ui2d>
 8005222:	a30e      	add	r3, pc, #56	; (adr r3, 800525c <can1_ams_cell_voltages_v7s12_decode+0x4c>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9d8 	bl	80005dc <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <can1_ams_cell_voltages_v7s12_decode+0x48>)
 800523a:	f7fb f819 	bl	8000270 <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	ec43 2b17 	vmov	d7, r2, r3
}
 8005246:	eeb0 0a47 	vmov.f32	s0, s14
 800524a:	eef0 0a67 	vmov.f32	s1, s15
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	f3af 8000 	nop.w
 8005258:	40040000 	.word	0x40040000
 800525c:	fcce1c58 	.word	0xfcce1c58
 8005260:	3f800e6a 	.word	0x3f800e6a
 8005264:	00000000 	.word	0x00000000

08005268 <can1_ams_cell_voltages_v2s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s1_encode(double value)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <can1_ams_cell_voltages_v2s1_encode+0x50>)
 8005278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527c:	f7fa fff6 	bl	800026c <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	a309      	add	r3, pc, #36	; (adr r3, 80052b0 <can1_ams_cell_voltages_v2s1_encode+0x48>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb facf 	bl	8000830 <__aeabi_ddiv>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	f7fb fc77 	bl	8000b8c <__aeabi_d2uiz>
 800529e:	4603      	mov	r3, r0
 80052a0:	b2db      	uxtb	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w
 80052b0:	fcce1c58 	.word	0xfcce1c58
 80052b4:	3f800e6a 	.word	0x3f800e6a
 80052b8:	40040000 	.word	0x40040000
 80052bc:	00000000 	.word	0x00000000

080052c0 <can1_ams_cell_voltages_v2s1_decode>:

double can1_ams_cell_voltages_v2s1_decode(uint8_t value)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb f90b 	bl	80004e8 <__aeabi_ui2d>
 80052d2:	a30e      	add	r3, pc, #56	; (adr r3, 800530c <can1_ams_cell_voltages_v2s1_decode+0x4c>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fb f980 	bl	80005dc <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <can1_ams_cell_voltages_v2s1_decode+0x48>)
 80052ea:	f7fa ffc1 	bl	8000270 <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052f6:	eeb0 0a47 	vmov.f32	s0, s14
 80052fa:	eef0 0a67 	vmov.f32	s1, s15
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	f3af 8000 	nop.w
 8005308:	40040000 	.word	0x40040000
 800530c:	fcce1c58 	.word	0xfcce1c58
 8005310:	3f800e6a 	.word	0x3f800e6a
 8005314:	00000000 	.word	0x00000000

08005318 <can1_ams_cell_voltages_v8s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s1_encode(double value)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <can1_ams_cell_voltages_v8s1_encode+0x50>)
 8005328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800532c:	f7fa ff9e 	bl	800026c <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	a309      	add	r3, pc, #36	; (adr r3, 8005360 <can1_ams_cell_voltages_v8s1_encode+0x48>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fb fa77 	bl	8000830 <__aeabi_ddiv>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fc1f 	bl	8000b8c <__aeabi_d2uiz>
 800534e:	4603      	mov	r3, r0
 8005350:	b2db      	uxtb	r3, r3
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w
 8005360:	fcce1c58 	.word	0xfcce1c58
 8005364:	3f800e6a 	.word	0x3f800e6a
 8005368:	40040000 	.word	0x40040000
 800536c:	00000000 	.word	0x00000000

08005370 <can1_ams_cell_voltages_v8s1_decode>:

double can1_ams_cell_voltages_v8s1_decode(uint8_t value)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f8b3 	bl	80004e8 <__aeabi_ui2d>
 8005382:	a30e      	add	r3, pc, #56	; (adr r3, 80053bc <can1_ams_cell_voltages_v8s1_decode+0x4c>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f928 	bl	80005dc <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <can1_ams_cell_voltages_v8s1_decode+0x48>)
 800539a:	f7fa ff69 	bl	8000270 <__adddf3>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053a6:	eeb0 0a47 	vmov.f32	s0, s14
 80053aa:	eef0 0a67 	vmov.f32	s1, s15
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	f3af 8000 	nop.w
 80053b8:	40040000 	.word	0x40040000
 80053bc:	fcce1c58 	.word	0xfcce1c58
 80053c0:	3f800e6a 	.word	0x3f800e6a
 80053c4:	00000000 	.word	0x00000000

080053c8 <can1_ams_cell_voltages_v2s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s2_encode(double value)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <can1_ams_cell_voltages_v2s2_encode+0x50>)
 80053d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053dc:	f7fa ff46 	bl	800026c <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	a309      	add	r3, pc, #36	; (adr r3, 8005410 <can1_ams_cell_voltages_v2s2_encode+0x48>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb fa1f 	bl	8000830 <__aeabi_ddiv>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fbc7 	bl	8000b8c <__aeabi_d2uiz>
 80053fe:	4603      	mov	r3, r0
 8005400:	b2db      	uxtb	r3, r3
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w
 8005410:	fcce1c58 	.word	0xfcce1c58
 8005414:	3f800e6a 	.word	0x3f800e6a
 8005418:	40040000 	.word	0x40040000
 800541c:	00000000 	.word	0x00000000

08005420 <can1_ams_cell_voltages_v2s2_decode>:

double can1_ams_cell_voltages_v2s2_decode(uint8_t value)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb f85b 	bl	80004e8 <__aeabi_ui2d>
 8005432:	a30e      	add	r3, pc, #56	; (adr r3, 800546c <can1_ams_cell_voltages_v2s2_decode+0x4c>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fb f8d0 	bl	80005dc <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	4b07      	ldr	r3, [pc, #28]	; (8005468 <can1_ams_cell_voltages_v2s2_decode+0x48>)
 800544a:	f7fa ff11 	bl	8000270 <__adddf3>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	ec43 2b17 	vmov	d7, r2, r3
}
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	f3af 8000 	nop.w
 8005468:	40040000 	.word	0x40040000
 800546c:	fcce1c58 	.word	0xfcce1c58
 8005470:	3f800e6a 	.word	0x3f800e6a
 8005474:	00000000 	.word	0x00000000

08005478 <can1_ams_cell_voltages_v8s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s2_encode(double value)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <can1_ams_cell_voltages_v8s2_encode+0x50>)
 8005488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548c:	f7fa feee 	bl	800026c <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	a309      	add	r3, pc, #36	; (adr r3, 80054c0 <can1_ams_cell_voltages_v8s2_encode+0x48>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f9c7 	bl	8000830 <__aeabi_ddiv>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fb6f 	bl	8000b8c <__aeabi_d2uiz>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	fcce1c58 	.word	0xfcce1c58
 80054c4:	3f800e6a 	.word	0x3f800e6a
 80054c8:	40040000 	.word	0x40040000
 80054cc:	00000000 	.word	0x00000000

080054d0 <can1_ams_cell_voltages_v8s2_decode>:

double can1_ams_cell_voltages_v8s2_decode(uint8_t value)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fb f803 	bl	80004e8 <__aeabi_ui2d>
 80054e2:	a30e      	add	r3, pc, #56	; (adr r3, 800551c <can1_ams_cell_voltages_v8s2_decode+0x4c>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fb f878 	bl	80005dc <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <can1_ams_cell_voltages_v8s2_decode+0x48>)
 80054fa:	f7fa feb9 	bl	8000270 <__adddf3>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	ec43 2b17 	vmov	d7, r2, r3
}
 8005506:	eeb0 0a47 	vmov.f32	s0, s14
 800550a:	eef0 0a67 	vmov.f32	s1, s15
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	f3af 8000 	nop.w
 8005518:	40040000 	.word	0x40040000
 800551c:	fcce1c58 	.word	0xfcce1c58
 8005520:	3f800e6a 	.word	0x3f800e6a
 8005524:	00000000 	.word	0x00000000

08005528 <can1_ams_cell_voltages_v2s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s3_encode(double value)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <can1_ams_cell_voltages_v2s3_encode+0x50>)
 8005538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553c:	f7fa fe96 	bl	800026c <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	a309      	add	r3, pc, #36	; (adr r3, 8005570 <can1_ams_cell_voltages_v2s3_encode+0x48>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f96f 	bl	8000830 <__aeabi_ddiv>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fb fb17 	bl	8000b8c <__aeabi_d2uiz>
 800555e:	4603      	mov	r3, r0
 8005560:	b2db      	uxtb	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	fcce1c58 	.word	0xfcce1c58
 8005574:	3f800e6a 	.word	0x3f800e6a
 8005578:	40040000 	.word	0x40040000
 800557c:	00000000 	.word	0x00000000

08005580 <can1_ams_cell_voltages_v2s3_decode>:

double can1_ams_cell_voltages_v2s3_decode(uint8_t value)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffab 	bl	80004e8 <__aeabi_ui2d>
 8005592:	a30e      	add	r3, pc, #56	; (adr r3, 80055cc <can1_ams_cell_voltages_v2s3_decode+0x4c>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fb f820 	bl	80005dc <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <can1_ams_cell_voltages_v2s3_decode+0x48>)
 80055aa:	f7fa fe61 	bl	8000270 <__adddf3>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	f3af 8000 	nop.w
 80055c8:	40040000 	.word	0x40040000
 80055cc:	fcce1c58 	.word	0xfcce1c58
 80055d0:	3f800e6a 	.word	0x3f800e6a
 80055d4:	00000000 	.word	0x00000000

080055d8 <can1_ams_cell_voltages_v8s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s3_encode(double value)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <can1_ams_cell_voltages_v8s3_encode+0x50>)
 80055e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ec:	f7fa fe3e 	bl	800026c <__aeabi_dsub>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	a309      	add	r3, pc, #36	; (adr r3, 8005620 <can1_ams_cell_voltages_v8s3_encode+0x48>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fb f917 	bl	8000830 <__aeabi_ddiv>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f7fb fabf 	bl	8000b8c <__aeabi_d2uiz>
 800560e:	4603      	mov	r3, r0
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	fcce1c58 	.word	0xfcce1c58
 8005624:	3f800e6a 	.word	0x3f800e6a
 8005628:	40040000 	.word	0x40040000
 800562c:	00000000 	.word	0x00000000

08005630 <can1_ams_cell_voltages_v8s3_decode>:

double can1_ams_cell_voltages_v8s3_decode(uint8_t value)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff53 	bl	80004e8 <__aeabi_ui2d>
 8005642:	a30e      	add	r3, pc, #56	; (adr r3, 800567c <can1_ams_cell_voltages_v8s3_decode+0x4c>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ffc8 	bl	80005dc <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <can1_ams_cell_voltages_v8s3_decode+0x48>)
 800565a:	f7fa fe09 	bl	8000270 <__adddf3>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	ec43 2b17 	vmov	d7, r2, r3
}
 8005666:	eeb0 0a47 	vmov.f32	s0, s14
 800566a:	eef0 0a67 	vmov.f32	s1, s15
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	f3af 8000 	nop.w
 8005678:	40040000 	.word	0x40040000
 800567c:	fcce1c58 	.word	0xfcce1c58
 8005680:	3f800e6a 	.word	0x3f800e6a
 8005684:	00000000 	.word	0x00000000

08005688 <can1_ams_cell_voltages_v2s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s4_encode(double value)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <can1_ams_cell_voltages_v2s4_encode+0x50>)
 8005698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800569c:	f7fa fde6 	bl	800026c <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	a309      	add	r3, pc, #36	; (adr r3, 80056d0 <can1_ams_cell_voltages_v2s4_encode+0x48>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fb f8bf 	bl	8000830 <__aeabi_ddiv>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fb fa67 	bl	8000b8c <__aeabi_d2uiz>
 80056be:	4603      	mov	r3, r0
 80056c0:	b2db      	uxtb	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	f3af 8000 	nop.w
 80056d0:	fcce1c58 	.word	0xfcce1c58
 80056d4:	3f800e6a 	.word	0x3f800e6a
 80056d8:	40040000 	.word	0x40040000
 80056dc:	00000000 	.word	0x00000000

080056e0 <can1_ams_cell_voltages_v2s4_decode>:

double can1_ams_cell_voltages_v2s4_decode(uint8_t value)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fefb 	bl	80004e8 <__aeabi_ui2d>
 80056f2:	a30e      	add	r3, pc, #56	; (adr r3, 800572c <can1_ams_cell_voltages_v2s4_decode+0x4c>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa ff70 	bl	80005dc <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <can1_ams_cell_voltages_v2s4_decode+0x48>)
 800570a:	f7fa fdb1 	bl	8000270 <__adddf3>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b17 	vmov	d7, r2, r3
}
 8005716:	eeb0 0a47 	vmov.f32	s0, s14
 800571a:	eef0 0a67 	vmov.f32	s1, s15
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	f3af 8000 	nop.w
 8005728:	40040000 	.word	0x40040000
 800572c:	fcce1c58 	.word	0xfcce1c58
 8005730:	3f800e6a 	.word	0x3f800e6a
 8005734:	00000000 	.word	0x00000000

08005738 <can1_ams_cell_voltages_v8s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s4_encode(double value)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <can1_ams_cell_voltages_v8s4_encode+0x50>)
 8005748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574c:	f7fa fd8e 	bl	800026c <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	a309      	add	r3, pc, #36	; (adr r3, 8005780 <can1_ams_cell_voltages_v8s4_encode+0x48>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fb f867 	bl	8000830 <__aeabi_ddiv>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	f7fb fa0f 	bl	8000b8c <__aeabi_d2uiz>
 800576e:	4603      	mov	r3, r0
 8005770:	b2db      	uxtb	r3, r3
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	fcce1c58 	.word	0xfcce1c58
 8005784:	3f800e6a 	.word	0x3f800e6a
 8005788:	40040000 	.word	0x40040000
 800578c:	00000000 	.word	0x00000000

08005790 <can1_ams_cell_voltages_v8s4_decode>:

double can1_ams_cell_voltages_v8s4_decode(uint8_t value)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fea3 	bl	80004e8 <__aeabi_ui2d>
 80057a2:	a30e      	add	r3, pc, #56	; (adr r3, 80057dc <can1_ams_cell_voltages_v8s4_decode+0x4c>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f7fa ff18 	bl	80005dc <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <can1_ams_cell_voltages_v8s4_decode+0x48>)
 80057ba:	f7fa fd59 	bl	8000270 <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80057c6:	eeb0 0a47 	vmov.f32	s0, s14
 80057ca:	eef0 0a67 	vmov.f32	s1, s15
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	f3af 8000 	nop.w
 80057d8:	40040000 	.word	0x40040000
 80057dc:	fcce1c58 	.word	0xfcce1c58
 80057e0:	3f800e6a 	.word	0x3f800e6a
 80057e4:	00000000 	.word	0x00000000

080057e8 <can1_ams_cell_voltages_v2s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s5_encode(double value)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <can1_ams_cell_voltages_v2s5_encode+0x50>)
 80057f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057fc:	f7fa fd36 	bl	800026c <__aeabi_dsub>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	a309      	add	r3, pc, #36	; (adr r3, 8005830 <can1_ams_cell_voltages_v2s5_encode+0x48>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fb f80f 	bl	8000830 <__aeabi_ddiv>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	f7fb f9b7 	bl	8000b8c <__aeabi_d2uiz>
 800581e:	4603      	mov	r3, r0
 8005820:	b2db      	uxtb	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	f3af 8000 	nop.w
 8005830:	fcce1c58 	.word	0xfcce1c58
 8005834:	3f800e6a 	.word	0x3f800e6a
 8005838:	40040000 	.word	0x40040000
 800583c:	00000000 	.word	0x00000000

08005840 <can1_ams_cell_voltages_v2s5_decode>:

double can1_ams_cell_voltages_v2s5_decode(uint8_t value)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fe4b 	bl	80004e8 <__aeabi_ui2d>
 8005852:	a30e      	add	r3, pc, #56	; (adr r3, 800588c <can1_ams_cell_voltages_v2s5_decode+0x4c>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fec0 	bl	80005dc <__aeabi_dmul>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <can1_ams_cell_voltages_v2s5_decode+0x48>)
 800586a:	f7fa fd01 	bl	8000270 <__adddf3>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	ec43 2b17 	vmov	d7, r2, r3
}
 8005876:	eeb0 0a47 	vmov.f32	s0, s14
 800587a:	eef0 0a67 	vmov.f32	s1, s15
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	f3af 8000 	nop.w
 8005888:	40040000 	.word	0x40040000
 800588c:	fcce1c58 	.word	0xfcce1c58
 8005890:	3f800e6a 	.word	0x3f800e6a
 8005894:	00000000 	.word	0x00000000

08005898 <can1_ams_cell_voltages_v8s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s5_encode(double value)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <can1_ams_cell_voltages_v8s5_encode+0x50>)
 80058a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ac:	f7fa fcde 	bl	800026c <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	a309      	add	r3, pc, #36	; (adr r3, 80058e0 <can1_ams_cell_voltages_v8s5_encode+0x48>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa ffb7 	bl	8000830 <__aeabi_ddiv>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fb f95f 	bl	8000b8c <__aeabi_d2uiz>
 80058ce:	4603      	mov	r3, r0
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	fcce1c58 	.word	0xfcce1c58
 80058e4:	3f800e6a 	.word	0x3f800e6a
 80058e8:	40040000 	.word	0x40040000
 80058ec:	00000000 	.word	0x00000000

080058f0 <can1_ams_cell_voltages_v8s5_decode>:

double can1_ams_cell_voltages_v8s5_decode(uint8_t value)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fa fdf3 	bl	80004e8 <__aeabi_ui2d>
 8005902:	a30e      	add	r3, pc, #56	; (adr r3, 800593c <can1_ams_cell_voltages_v8s5_decode+0x4c>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fe68 	bl	80005dc <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <can1_ams_cell_voltages_v8s5_decode+0x48>)
 800591a:	f7fa fca9 	bl	8000270 <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ec43 2b17 	vmov	d7, r2, r3
}
 8005926:	eeb0 0a47 	vmov.f32	s0, s14
 800592a:	eef0 0a67 	vmov.f32	s1, s15
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	f3af 8000 	nop.w
 8005938:	40040000 	.word	0x40040000
 800593c:	fcce1c58 	.word	0xfcce1c58
 8005940:	3f800e6a 	.word	0x3f800e6a
 8005944:	00000000 	.word	0x00000000

08005948 <can1_ams_cell_voltages_v2s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s6_encode(double value)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <can1_ams_cell_voltages_v2s6_encode+0x50>)
 8005958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595c:	f7fa fc86 	bl	800026c <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	a309      	add	r3, pc, #36	; (adr r3, 8005990 <can1_ams_cell_voltages_v2s6_encode+0x48>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa ff5f 	bl	8000830 <__aeabi_ddiv>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fb f907 	bl	8000b8c <__aeabi_d2uiz>
 800597e:	4603      	mov	r3, r0
 8005980:	b2db      	uxtb	r3, r3
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	fcce1c58 	.word	0xfcce1c58
 8005994:	3f800e6a 	.word	0x3f800e6a
 8005998:	40040000 	.word	0x40040000
 800599c:	00000000 	.word	0x00000000

080059a0 <can1_ams_cell_voltages_v2s6_decode>:

double can1_ams_cell_voltages_v2s6_decode(uint8_t value)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fa fd9b 	bl	80004e8 <__aeabi_ui2d>
 80059b2:	a30e      	add	r3, pc, #56	; (adr r3, 80059ec <can1_ams_cell_voltages_v2s6_decode+0x4c>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fe10 	bl	80005dc <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4610      	mov	r0, r2
 80059c2:	4619      	mov	r1, r3
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <can1_ams_cell_voltages_v2s6_decode+0x48>)
 80059ca:	f7fa fc51 	bl	8000270 <__adddf3>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80059d6:	eeb0 0a47 	vmov.f32	s0, s14
 80059da:	eef0 0a67 	vmov.f32	s1, s15
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	f3af 8000 	nop.w
 80059e8:	40040000 	.word	0x40040000
 80059ec:	fcce1c58 	.word	0xfcce1c58
 80059f0:	3f800e6a 	.word	0x3f800e6a
 80059f4:	00000000 	.word	0x00000000

080059f8 <can1_ams_cell_voltages_v8s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s6_encode(double value)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <can1_ams_cell_voltages_v8s6_encode+0x50>)
 8005a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0c:	f7fa fc2e 	bl	800026c <__aeabi_dsub>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	a309      	add	r3, pc, #36	; (adr r3, 8005a40 <can1_ams_cell_voltages_v8s6_encode+0x48>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa ff07 	bl	8000830 <__aeabi_ddiv>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7fb f8af 	bl	8000b8c <__aeabi_d2uiz>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w
 8005a40:	fcce1c58 	.word	0xfcce1c58
 8005a44:	3f800e6a 	.word	0x3f800e6a
 8005a48:	40040000 	.word	0x40040000
 8005a4c:	00000000 	.word	0x00000000

08005a50 <can1_ams_cell_voltages_v8s6_decode>:

double can1_ams_cell_voltages_v8s6_decode(uint8_t value)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd43 	bl	80004e8 <__aeabi_ui2d>
 8005a62:	a30e      	add	r3, pc, #56	; (adr r3, 8005a9c <can1_ams_cell_voltages_v8s6_decode+0x4c>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fdb8 	bl	80005dc <__aeabi_dmul>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <can1_ams_cell_voltages_v8s6_decode+0x48>)
 8005a7a:	f7fa fbf9 	bl	8000270 <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a86:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8a:	eef0 0a67 	vmov.f32	s1, s15
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	f3af 8000 	nop.w
 8005a98:	40040000 	.word	0x40040000
 8005a9c:	fcce1c58 	.word	0xfcce1c58
 8005aa0:	3f800e6a 	.word	0x3f800e6a
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <can1_ams_cell_voltages_v2s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s7_encode(double value)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <can1_ams_cell_voltages_v2s7_encode+0x50>)
 8005ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abc:	f7fa fbd6 	bl	800026c <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	a309      	add	r3, pc, #36	; (adr r3, 8005af0 <can1_ams_cell_voltages_v2s7_encode+0x48>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa feaf 	bl	8000830 <__aeabi_ddiv>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fb f857 	bl	8000b8c <__aeabi_d2uiz>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	b2db      	uxtb	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w
 8005af0:	fcce1c58 	.word	0xfcce1c58
 8005af4:	3f800e6a 	.word	0x3f800e6a
 8005af8:	40040000 	.word	0x40040000
 8005afc:	00000000 	.word	0x00000000

08005b00 <can1_ams_cell_voltages_v2s7_decode>:

double can1_ams_cell_voltages_v2s7_decode(uint8_t value)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fceb 	bl	80004e8 <__aeabi_ui2d>
 8005b12:	a30e      	add	r3, pc, #56	; (adr r3, 8005b4c <can1_ams_cell_voltages_v2s7_decode+0x4c>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fd60 	bl	80005dc <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <can1_ams_cell_voltages_v2s7_decode+0x48>)
 8005b2a:	f7fa fba1 	bl	8000270 <__adddf3>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b36:	eeb0 0a47 	vmov.f32	s0, s14
 8005b3a:	eef0 0a67 	vmov.f32	s1, s15
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	f3af 8000 	nop.w
 8005b48:	40040000 	.word	0x40040000
 8005b4c:	fcce1c58 	.word	0xfcce1c58
 8005b50:	3f800e6a 	.word	0x3f800e6a
 8005b54:	00000000 	.word	0x00000000

08005b58 <can1_ams_cell_voltages_v8s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s7_encode(double value)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <can1_ams_cell_voltages_v8s7_encode+0x50>)
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	f7fa fb7e 	bl	800026c <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	a309      	add	r3, pc, #36	; (adr r3, 8005ba0 <can1_ams_cell_voltages_v8s7_encode+0x48>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fe57 	bl	8000830 <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fa ffff 	bl	8000b8c <__aeabi_d2uiz>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	b2db      	uxtb	r3, r3
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	fcce1c58 	.word	0xfcce1c58
 8005ba4:	3f800e6a 	.word	0x3f800e6a
 8005ba8:	40040000 	.word	0x40040000
 8005bac:	00000000 	.word	0x00000000

08005bb0 <can1_ams_cell_voltages_v8s7_decode>:

double can1_ams_cell_voltages_v8s7_decode(uint8_t value)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fc93 	bl	80004e8 <__aeabi_ui2d>
 8005bc2:	a30e      	add	r3, pc, #56	; (adr r3, 8005bfc <can1_ams_cell_voltages_v8s7_decode+0x4c>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd08 	bl	80005dc <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <can1_ams_cell_voltages_v8s7_decode+0x48>)
 8005bda:	f7fa fb49 	bl	8000270 <__adddf3>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005be6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bea:	eef0 0a67 	vmov.f32	s1, s15
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	40040000 	.word	0x40040000
 8005bfc:	fcce1c58 	.word	0xfcce1c58
 8005c00:	3f800e6a 	.word	0x3f800e6a
 8005c04:	00000000 	.word	0x00000000

08005c08 <can1_ams_cell_voltages_v2s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s8_encode(double value)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <can1_ams_cell_voltages_v2s8_encode+0x50>)
 8005c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1c:	f7fa fb26 	bl	800026c <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4610      	mov	r0, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	a309      	add	r3, pc, #36	; (adr r3, 8005c50 <can1_ams_cell_voltages_v2s8_encode+0x48>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fdff 	bl	8000830 <__aeabi_ddiv>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fa ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	fcce1c58 	.word	0xfcce1c58
 8005c54:	3f800e6a 	.word	0x3f800e6a
 8005c58:	40040000 	.word	0x40040000
 8005c5c:	00000000 	.word	0x00000000

08005c60 <can1_ams_cell_voltages_v2s8_decode>:

double can1_ams_cell_voltages_v2s8_decode(uint8_t value)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fc3b 	bl	80004e8 <__aeabi_ui2d>
 8005c72:	a30e      	add	r3, pc, #56	; (adr r3, 8005cac <can1_ams_cell_voltages_v2s8_decode+0x4c>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa fcb0 	bl	80005dc <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <can1_ams_cell_voltages_v2s8_decode+0x48>)
 8005c8a:	f7fa faf1 	bl	8000270 <__adddf3>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c96:	eeb0 0a47 	vmov.f32	s0, s14
 8005c9a:	eef0 0a67 	vmov.f32	s1, s15
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	40040000 	.word	0x40040000
 8005cac:	fcce1c58 	.word	0xfcce1c58
 8005cb0:	3f800e6a 	.word	0x3f800e6a
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <can1_ams_cell_voltages_v8s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s8_encode(double value)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <can1_ams_cell_voltages_v8s8_encode+0x50>)
 8005cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ccc:	f7fa face 	bl	800026c <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	a309      	add	r3, pc, #36	; (adr r3, 8005d00 <can1_ams_cell_voltages_v8s8_encode+0x48>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fda7 	bl	8000830 <__aeabi_ddiv>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f7fa ff4f 	bl	8000b8c <__aeabi_d2uiz>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	b2db      	uxtb	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	fcce1c58 	.word	0xfcce1c58
 8005d04:	3f800e6a 	.word	0x3f800e6a
 8005d08:	40040000 	.word	0x40040000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <can1_ams_cell_voltages_v8s8_decode>:

double can1_ams_cell_voltages_v8s8_decode(uint8_t value)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fbe3 	bl	80004e8 <__aeabi_ui2d>
 8005d22:	a30e      	add	r3, pc, #56	; (adr r3, 8005d5c <can1_ams_cell_voltages_v8s8_decode+0x4c>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fc58 	bl	80005dc <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <can1_ams_cell_voltages_v8s8_decode+0x48>)
 8005d3a:	f7fa fa99 	bl	8000270 <__adddf3>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	ec43 2b17 	vmov	d7, r2, r3
}
 8005d46:	eeb0 0a47 	vmov.f32	s0, s14
 8005d4a:	eef0 0a67 	vmov.f32	s1, s15
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	f3af 8000 	nop.w
 8005d58:	40040000 	.word	0x40040000
 8005d5c:	fcce1c58 	.word	0xfcce1c58
 8005d60:	3f800e6a 	.word	0x3f800e6a
 8005d64:	00000000 	.word	0x00000000

08005d68 <can1_ams_cell_voltages_v2s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s9_encode(double value)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <can1_ams_cell_voltages_v2s9_encode+0x50>)
 8005d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7c:	f7fa fa76 	bl	800026c <__aeabi_dsub>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	a309      	add	r3, pc, #36	; (adr r3, 8005db0 <can1_ams_cell_voltages_v2s9_encode+0x48>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fd4f 	bl	8000830 <__aeabi_ddiv>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f7fa fef7 	bl	8000b8c <__aeabi_d2uiz>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b2db      	uxtb	r3, r3
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	fcce1c58 	.word	0xfcce1c58
 8005db4:	3f800e6a 	.word	0x3f800e6a
 8005db8:	40040000 	.word	0x40040000
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <can1_ams_cell_voltages_v2s9_decode>:

double can1_ams_cell_voltages_v2s9_decode(uint8_t value)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa fb8b 	bl	80004e8 <__aeabi_ui2d>
 8005dd2:	a30e      	add	r3, pc, #56	; (adr r3, 8005e0c <can1_ams_cell_voltages_v2s9_decode+0x4c>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fc00 	bl	80005dc <__aeabi_dmul>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <can1_ams_cell_voltages_v2s9_decode+0x48>)
 8005dea:	f7fa fa41 	bl	8000270 <__adddf3>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005df6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dfa:	eef0 0a67 	vmov.f32	s1, s15
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	f3af 8000 	nop.w
 8005e08:	40040000 	.word	0x40040000
 8005e0c:	fcce1c58 	.word	0xfcce1c58
 8005e10:	3f800e6a 	.word	0x3f800e6a
 8005e14:	00000000 	.word	0x00000000

08005e18 <can1_ams_cell_voltages_v8s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s9_encode(double value)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <can1_ams_cell_voltages_v8s9_encode+0x50>)
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	f7fa fa1e 	bl	800026c <__aeabi_dsub>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	a309      	add	r3, pc, #36	; (adr r3, 8005e60 <can1_ams_cell_voltages_v8s9_encode+0x48>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fcf7 	bl	8000830 <__aeabi_ddiv>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa fe9f 	bl	8000b8c <__aeabi_d2uiz>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	b2db      	uxtb	r3, r3
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w
 8005e60:	fcce1c58 	.word	0xfcce1c58
 8005e64:	3f800e6a 	.word	0x3f800e6a
 8005e68:	40040000 	.word	0x40040000
 8005e6c:	00000000 	.word	0x00000000

08005e70 <can1_ams_cell_voltages_v8s9_decode>:

double can1_ams_cell_voltages_v8s9_decode(uint8_t value)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fb33 	bl	80004e8 <__aeabi_ui2d>
 8005e82:	a30e      	add	r3, pc, #56	; (adr r3, 8005ebc <can1_ams_cell_voltages_v8s9_decode+0x4c>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa fba8 	bl	80005dc <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <can1_ams_cell_voltages_v8s9_decode+0x48>)
 8005e9a:	f7fa f9e9 	bl	8000270 <__adddf3>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8005eaa:	eef0 0a67 	vmov.f32	s1, s15
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	40040000 	.word	0x40040000
 8005ebc:	fcce1c58 	.word	0xfcce1c58
 8005ec0:	3f800e6a 	.word	0x3f800e6a
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <can1_ams_cell_voltages_v2s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s10_encode(double value)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <can1_ams_cell_voltages_v2s10_encode+0x50>)
 8005ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005edc:	f7fa f9c6 	bl	800026c <__aeabi_dsub>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	a309      	add	r3, pc, #36	; (adr r3, 8005f10 <can1_ams_cell_voltages_v2s10_encode+0x48>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fc9f 	bl	8000830 <__aeabi_ddiv>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7fa fe47 	bl	8000b8c <__aeabi_d2uiz>
 8005efe:	4603      	mov	r3, r0
 8005f00:	b2db      	uxtb	r3, r3
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	fcce1c58 	.word	0xfcce1c58
 8005f14:	3f800e6a 	.word	0x3f800e6a
 8005f18:	40040000 	.word	0x40040000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <can1_ams_cell_voltages_v2s10_decode>:

double can1_ams_cell_voltages_v2s10_decode(uint8_t value)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fadb 	bl	80004e8 <__aeabi_ui2d>
 8005f32:	a30e      	add	r3, pc, #56	; (adr r3, 8005f6c <can1_ams_cell_voltages_v2s10_decode+0x4c>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fb50 	bl	80005dc <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <can1_ams_cell_voltages_v2s10_decode+0x48>)
 8005f4a:	f7fa f991 	bl	8000270 <__adddf3>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f56:	eeb0 0a47 	vmov.f32	s0, s14
 8005f5a:	eef0 0a67 	vmov.f32	s1, s15
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	f3af 8000 	nop.w
 8005f68:	40040000 	.word	0x40040000
 8005f6c:	fcce1c58 	.word	0xfcce1c58
 8005f70:	3f800e6a 	.word	0x3f800e6a
 8005f74:	00000000 	.word	0x00000000

08005f78 <can1_ams_cell_voltages_v8s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s10_encode(double value)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <can1_ams_cell_voltages_v8s10_encode+0x50>)
 8005f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f8c:	f7fa f96e 	bl	800026c <__aeabi_dsub>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	a309      	add	r3, pc, #36	; (adr r3, 8005fc0 <can1_ams_cell_voltages_v8s10_encode+0x48>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fc47 	bl	8000830 <__aeabi_ddiv>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fa fdef 	bl	8000b8c <__aeabi_d2uiz>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b2db      	uxtb	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	fcce1c58 	.word	0xfcce1c58
 8005fc4:	3f800e6a 	.word	0x3f800e6a
 8005fc8:	40040000 	.word	0x40040000
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <can1_ams_cell_voltages_v8s10_decode>:

double can1_ams_cell_voltages_v8s10_decode(uint8_t value)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fa83 	bl	80004e8 <__aeabi_ui2d>
 8005fe2:	a30e      	add	r3, pc, #56	; (adr r3, 800601c <can1_ams_cell_voltages_v8s10_decode+0x4c>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa faf8 	bl	80005dc <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <can1_ams_cell_voltages_v8s10_decode+0x48>)
 8005ffa:	f7fa f939 	bl	8000270 <__adddf3>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	ec43 2b17 	vmov	d7, r2, r3
}
 8006006:	eeb0 0a47 	vmov.f32	s0, s14
 800600a:	eef0 0a67 	vmov.f32	s1, s15
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	f3af 8000 	nop.w
 8006018:	40040000 	.word	0x40040000
 800601c:	fcce1c58 	.word	0xfcce1c58
 8006020:	3f800e6a 	.word	0x3f800e6a
 8006024:	00000000 	.word	0x00000000

08006028 <can1_ams_cell_voltages_v2s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s11_encode(double value)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <can1_ams_cell_voltages_v2s11_encode+0x50>)
 8006038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800603c:	f7fa f916 	bl	800026c <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	a309      	add	r3, pc, #36	; (adr r3, 8006070 <can1_ams_cell_voltages_v2s11_encode+0x48>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fbef 	bl	8000830 <__aeabi_ddiv>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	f7fa fd97 	bl	8000b8c <__aeabi_d2uiz>
 800605e:	4603      	mov	r3, r0
 8006060:	b2db      	uxtb	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	fcce1c58 	.word	0xfcce1c58
 8006074:	3f800e6a 	.word	0x3f800e6a
 8006078:	40040000 	.word	0x40040000
 800607c:	00000000 	.word	0x00000000

08006080 <can1_ams_cell_voltages_v2s11_decode>:

double can1_ams_cell_voltages_v2s11_decode(uint8_t value)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa2b 	bl	80004e8 <__aeabi_ui2d>
 8006092:	a30e      	add	r3, pc, #56	; (adr r3, 80060cc <can1_ams_cell_voltages_v2s11_decode+0x4c>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa faa0 	bl	80005dc <__aeabi_dmul>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <can1_ams_cell_voltages_v2s11_decode+0x48>)
 80060aa:	f7fa f8e1 	bl	8000270 <__adddf3>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80060b6:	eeb0 0a47 	vmov.f32	s0, s14
 80060ba:	eef0 0a67 	vmov.f32	s1, s15
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	f3af 8000 	nop.w
 80060c8:	40040000 	.word	0x40040000
 80060cc:	fcce1c58 	.word	0xfcce1c58
 80060d0:	3f800e6a 	.word	0x3f800e6a
 80060d4:	00000000 	.word	0x00000000

080060d8 <can1_ams_cell_voltages_v8s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s11_encode(double value)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <can1_ams_cell_voltages_v8s11_encode+0x50>)
 80060e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ec:	f7fa f8be 	bl	800026c <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	a309      	add	r3, pc, #36	; (adr r3, 8006120 <can1_ams_cell_voltages_v8s11_encode+0x48>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fb97 	bl	8000830 <__aeabi_ddiv>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	f7fa fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800610e:	4603      	mov	r3, r0
 8006110:	b2db      	uxtb	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	fcce1c58 	.word	0xfcce1c58
 8006124:	3f800e6a 	.word	0x3f800e6a
 8006128:	40040000 	.word	0x40040000
 800612c:	00000000 	.word	0x00000000

08006130 <can1_ams_cell_voltages_v8s11_decode>:

double can1_ams_cell_voltages_v8s11_decode(uint8_t value)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa f9d3 	bl	80004e8 <__aeabi_ui2d>
 8006142:	a30e      	add	r3, pc, #56	; (adr r3, 800617c <can1_ams_cell_voltages_v8s11_decode+0x4c>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa48 	bl	80005dc <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <can1_ams_cell_voltages_v8s11_decode+0x48>)
 800615a:	f7fa f889 	bl	8000270 <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	ec43 2b17 	vmov	d7, r2, r3
}
 8006166:	eeb0 0a47 	vmov.f32	s0, s14
 800616a:	eef0 0a67 	vmov.f32	s1, s15
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	f3af 8000 	nop.w
 8006178:	40040000 	.word	0x40040000
 800617c:	fcce1c58 	.word	0xfcce1c58
 8006180:	3f800e6a 	.word	0x3f800e6a
 8006184:	00000000 	.word	0x00000000

08006188 <can1_ams_cell_voltages_v2s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v2s12_encode(double value)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <can1_ams_cell_voltages_v2s12_encode+0x50>)
 8006198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619c:	f7fa f866 	bl	800026c <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	a309      	add	r3, pc, #36	; (adr r3, 80061d0 <can1_ams_cell_voltages_v2s12_encode+0x48>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa fb3f 	bl	8000830 <__aeabi_ddiv>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa fce7 	bl	8000b8c <__aeabi_d2uiz>
 80061be:	4603      	mov	r3, r0
 80061c0:	b2db      	uxtb	r3, r3
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w
 80061d0:	fcce1c58 	.word	0xfcce1c58
 80061d4:	3f800e6a 	.word	0x3f800e6a
 80061d8:	40040000 	.word	0x40040000
 80061dc:	00000000 	.word	0x00000000

080061e0 <can1_ams_cell_voltages_v2s12_decode>:

double can1_ams_cell_voltages_v2s12_decode(uint8_t value)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa f97b 	bl	80004e8 <__aeabi_ui2d>
 80061f2:	a30e      	add	r3, pc, #56	; (adr r3, 800622c <can1_ams_cell_voltages_v2s12_decode+0x4c>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9f0 	bl	80005dc <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <can1_ams_cell_voltages_v2s12_decode+0x48>)
 800620a:	f7fa f831 	bl	8000270 <__adddf3>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	ec43 2b17 	vmov	d7, r2, r3
}
 8006216:	eeb0 0a47 	vmov.f32	s0, s14
 800621a:	eef0 0a67 	vmov.f32	s1, s15
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	f3af 8000 	nop.w
 8006228:	40040000 	.word	0x40040000
 800622c:	fcce1c58 	.word	0xfcce1c58
 8006230:	3f800e6a 	.word	0x3f800e6a
 8006234:	00000000 	.word	0x00000000

08006238 <can1_ams_cell_voltages_v8s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v8s12_encode(double value)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <can1_ams_cell_voltages_v8s12_encode+0x50>)
 8006248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800624c:	f7fa f80e 	bl	800026c <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	a309      	add	r3, pc, #36	; (adr r3, 8006280 <can1_ams_cell_voltages_v8s12_encode+0x48>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa fae7 	bl	8000830 <__aeabi_ddiv>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	f7fa fc8f 	bl	8000b8c <__aeabi_d2uiz>
 800626e:	4603      	mov	r3, r0
 8006270:	b2db      	uxtb	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	f3af 8000 	nop.w
 8006280:	fcce1c58 	.word	0xfcce1c58
 8006284:	3f800e6a 	.word	0x3f800e6a
 8006288:	40040000 	.word	0x40040000
 800628c:	00000000 	.word	0x00000000

08006290 <can1_ams_cell_voltages_v8s12_decode>:

double can1_ams_cell_voltages_v8s12_decode(uint8_t value)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f923 	bl	80004e8 <__aeabi_ui2d>
 80062a2:	a30e      	add	r3, pc, #56	; (adr r3, 80062dc <can1_ams_cell_voltages_v8s12_decode+0x4c>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f998 	bl	80005dc <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <can1_ams_cell_voltages_v8s12_decode+0x48>)
 80062ba:	f7f9 ffd9 	bl	8000270 <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80062c6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ca:	eef0 0a67 	vmov.f32	s1, s15
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	f3af 8000 	nop.w
 80062d8:	40040000 	.word	0x40040000
 80062dc:	fcce1c58 	.word	0xfcce1c58
 80062e0:	3f800e6a 	.word	0x3f800e6a
 80062e4:	00000000 	.word	0x00000000

080062e8 <can1_ams_cell_voltages_v3s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s1_encode(double value)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <can1_ams_cell_voltages_v3s1_encode+0x50>)
 80062f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fc:	f7f9 ffb6 	bl	800026c <__aeabi_dsub>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	a309      	add	r3, pc, #36	; (adr r3, 8006330 <can1_ams_cell_voltages_v3s1_encode+0x48>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa fa8f 	bl	8000830 <__aeabi_ddiv>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	f7fa fc37 	bl	8000b8c <__aeabi_d2uiz>
 800631e:	4603      	mov	r3, r0
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	fcce1c58 	.word	0xfcce1c58
 8006334:	3f800e6a 	.word	0x3f800e6a
 8006338:	40040000 	.word	0x40040000
 800633c:	00000000 	.word	0x00000000

08006340 <can1_ams_cell_voltages_v3s1_decode>:

double can1_ams_cell_voltages_v3s1_decode(uint8_t value)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa f8cb 	bl	80004e8 <__aeabi_ui2d>
 8006352:	a30e      	add	r3, pc, #56	; (adr r3, 800638c <can1_ams_cell_voltages_v3s1_decode+0x4c>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f940 	bl	80005dc <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <can1_ams_cell_voltages_v3s1_decode+0x48>)
 800636a:	f7f9 ff81 	bl	8000270 <__adddf3>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ec43 2b17 	vmov	d7, r2, r3
}
 8006376:	eeb0 0a47 	vmov.f32	s0, s14
 800637a:	eef0 0a67 	vmov.f32	s1, s15
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f3af 8000 	nop.w
 8006388:	40040000 	.word	0x40040000
 800638c:	fcce1c58 	.word	0xfcce1c58
 8006390:	3f800e6a 	.word	0x3f800e6a
 8006394:	00000000 	.word	0x00000000

08006398 <can1_ams_cell_voltages_v9s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s1_encode(double value)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <can1_ams_cell_voltages_v9s1_encode+0x50>)
 80063a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ac:	f7f9 ff5e 	bl	800026c <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	a309      	add	r3, pc, #36	; (adr r3, 80063e0 <can1_ams_cell_voltages_v9s1_encode+0x48>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa fa37 	bl	8000830 <__aeabi_ddiv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fa fbdf 	bl	8000b8c <__aeabi_d2uiz>
 80063ce:	4603      	mov	r3, r0
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w
 80063e0:	fcce1c58 	.word	0xfcce1c58
 80063e4:	3f800e6a 	.word	0x3f800e6a
 80063e8:	40040000 	.word	0x40040000
 80063ec:	00000000 	.word	0x00000000

080063f0 <can1_ams_cell_voltages_v9s1_decode>:

double can1_ams_cell_voltages_v9s1_decode(uint8_t value)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fa f873 	bl	80004e8 <__aeabi_ui2d>
 8006402:	a30e      	add	r3, pc, #56	; (adr r3, 800643c <can1_ams_cell_voltages_v9s1_decode+0x4c>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8e8 	bl	80005dc <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <can1_ams_cell_voltages_v9s1_decode+0x48>)
 800641a:	f7f9 ff29 	bl	8000270 <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ec43 2b17 	vmov	d7, r2, r3
}
 8006426:	eeb0 0a47 	vmov.f32	s0, s14
 800642a:	eef0 0a67 	vmov.f32	s1, s15
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	f3af 8000 	nop.w
 8006438:	40040000 	.word	0x40040000
 800643c:	fcce1c58 	.word	0xfcce1c58
 8006440:	3f800e6a 	.word	0x3f800e6a
 8006444:	00000000 	.word	0x00000000

08006448 <can1_ams_cell_voltages_v3s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s2_encode(double value)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <can1_ams_cell_voltages_v3s2_encode+0x50>)
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f7f9 ff06 	bl	800026c <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	a309      	add	r3, pc, #36	; (adr r3, 8006490 <can1_ams_cell_voltages_v3s2_encode+0x48>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f9df 	bl	8000830 <__aeabi_ddiv>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	f7fa fb87 	bl	8000b8c <__aeabi_d2uiz>
 800647e:	4603      	mov	r3, r0
 8006480:	b2db      	uxtb	r3, r3
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w
 8006490:	fcce1c58 	.word	0xfcce1c58
 8006494:	3f800e6a 	.word	0x3f800e6a
 8006498:	40040000 	.word	0x40040000
 800649c:	00000000 	.word	0x00000000

080064a0 <can1_ams_cell_voltages_v3s2_decode>:

double can1_ams_cell_voltages_v3s2_decode(uint8_t value)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa f81b 	bl	80004e8 <__aeabi_ui2d>
 80064b2:	a30e      	add	r3, pc, #56	; (adr r3, 80064ec <can1_ams_cell_voltages_v3s2_decode+0x4c>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f890 	bl	80005dc <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <can1_ams_cell_voltages_v3s2_decode+0x48>)
 80064ca:	f7f9 fed1 	bl	8000270 <__adddf3>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80064d6:	eeb0 0a47 	vmov.f32	s0, s14
 80064da:	eef0 0a67 	vmov.f32	s1, s15
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	f3af 8000 	nop.w
 80064e8:	40040000 	.word	0x40040000
 80064ec:	fcce1c58 	.word	0xfcce1c58
 80064f0:	3f800e6a 	.word	0x3f800e6a
 80064f4:	00000000 	.word	0x00000000

080064f8 <can1_ams_cell_voltages_v9s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s2_encode(double value)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <can1_ams_cell_voltages_v9s2_encode+0x50>)
 8006508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800650c:	f7f9 feae 	bl	800026c <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	a309      	add	r3, pc, #36	; (adr r3, 8006540 <can1_ams_cell_voltages_v9s2_encode+0x48>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7fa f987 	bl	8000830 <__aeabi_ddiv>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f7fa fb2f 	bl	8000b8c <__aeabi_d2uiz>
 800652e:	4603      	mov	r3, r0
 8006530:	b2db      	uxtb	r3, r3
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	fcce1c58 	.word	0xfcce1c58
 8006544:	3f800e6a 	.word	0x3f800e6a
 8006548:	40040000 	.word	0x40040000
 800654c:	00000000 	.word	0x00000000

08006550 <can1_ams_cell_voltages_v9s2_decode>:

double can1_ams_cell_voltages_v9s2_decode(uint8_t value)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	4618      	mov	r0, r3
 800655e:	f7f9 ffc3 	bl	80004e8 <__aeabi_ui2d>
 8006562:	a30e      	add	r3, pc, #56	; (adr r3, 800659c <can1_ams_cell_voltages_v9s2_decode+0x4c>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f838 	bl	80005dc <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <can1_ams_cell_voltages_v9s2_decode+0x48>)
 800657a:	f7f9 fe79 	bl	8000270 <__adddf3>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	ec43 2b17 	vmov	d7, r2, r3
}
 8006586:	eeb0 0a47 	vmov.f32	s0, s14
 800658a:	eef0 0a67 	vmov.f32	s1, s15
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	f3af 8000 	nop.w
 8006598:	40040000 	.word	0x40040000
 800659c:	fcce1c58 	.word	0xfcce1c58
 80065a0:	3f800e6a 	.word	0x3f800e6a
 80065a4:	00000000 	.word	0x00000000

080065a8 <can1_ams_cell_voltages_v3s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s3_encode(double value)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <can1_ams_cell_voltages_v3s3_encode+0x50>)
 80065b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065bc:	f7f9 fe56 	bl	800026c <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	a309      	add	r3, pc, #36	; (adr r3, 80065f0 <can1_ams_cell_voltages_v3s3_encode+0x48>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f92f 	bl	8000830 <__aeabi_ddiv>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fad7 	bl	8000b8c <__aeabi_d2uiz>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2db      	uxtb	r3, r3
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w
 80065f0:	fcce1c58 	.word	0xfcce1c58
 80065f4:	3f800e6a 	.word	0x3f800e6a
 80065f8:	40040000 	.word	0x40040000
 80065fc:	00000000 	.word	0x00000000

08006600 <can1_ams_cell_voltages_v3s3_decode>:

double can1_ams_cell_voltages_v3s3_decode(uint8_t value)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	4618      	mov	r0, r3
 800660e:	f7f9 ff6b 	bl	80004e8 <__aeabi_ui2d>
 8006612:	a30e      	add	r3, pc, #56	; (adr r3, 800664c <can1_ams_cell_voltages_v3s3_decode+0x4c>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 ffe0 	bl	80005dc <__aeabi_dmul>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <can1_ams_cell_voltages_v3s3_decode+0x48>)
 800662a:	f7f9 fe21 	bl	8000270 <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	ec43 2b17 	vmov	d7, r2, r3
}
 8006636:	eeb0 0a47 	vmov.f32	s0, s14
 800663a:	eef0 0a67 	vmov.f32	s1, s15
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	f3af 8000 	nop.w
 8006648:	40040000 	.word	0x40040000
 800664c:	fcce1c58 	.word	0xfcce1c58
 8006650:	3f800e6a 	.word	0x3f800e6a
 8006654:	00000000 	.word	0x00000000

08006658 <can1_ams_cell_voltages_v9s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s3_encode(double value)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <can1_ams_cell_voltages_v9s3_encode+0x50>)
 8006668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666c:	f7f9 fdfe 	bl	800026c <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4610      	mov	r0, r2
 8006676:	4619      	mov	r1, r3
 8006678:	a309      	add	r3, pc, #36	; (adr r3, 80066a0 <can1_ams_cell_voltages_v9s3_encode+0x48>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7fa f8d7 	bl	8000830 <__aeabi_ddiv>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fa7f 	bl	8000b8c <__aeabi_d2uiz>
 800668e:	4603      	mov	r3, r0
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	fcce1c58 	.word	0xfcce1c58
 80066a4:	3f800e6a 	.word	0x3f800e6a
 80066a8:	40040000 	.word	0x40040000
 80066ac:	00000000 	.word	0x00000000

080066b0 <can1_ams_cell_voltages_v9s3_decode>:

double can1_ams_cell_voltages_v9s3_decode(uint8_t value)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff13 	bl	80004e8 <__aeabi_ui2d>
 80066c2:	a30e      	add	r3, pc, #56	; (adr r3, 80066fc <can1_ams_cell_voltages_v9s3_decode+0x4c>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff88 	bl	80005dc <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <can1_ams_cell_voltages_v9s3_decode+0x48>)
 80066da:	f7f9 fdc9 	bl	8000270 <__adddf3>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80066e6:	eeb0 0a47 	vmov.f32	s0, s14
 80066ea:	eef0 0a67 	vmov.f32	s1, s15
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	f3af 8000 	nop.w
 80066f8:	40040000 	.word	0x40040000
 80066fc:	fcce1c58 	.word	0xfcce1c58
 8006700:	3f800e6a 	.word	0x3f800e6a
 8006704:	00000000 	.word	0x00000000

08006708 <can1_ams_cell_voltages_v3s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s4_encode(double value)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <can1_ams_cell_voltages_v3s4_encode+0x50>)
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f7f9 fda6 	bl	800026c <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	a309      	add	r3, pc, #36	; (adr r3, 8006750 <can1_ams_cell_voltages_v3s4_encode+0x48>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7fa f87f 	bl	8000830 <__aeabi_ddiv>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa fa27 	bl	8000b8c <__aeabi_d2uiz>
 800673e:	4603      	mov	r3, r0
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	fcce1c58 	.word	0xfcce1c58
 8006754:	3f800e6a 	.word	0x3f800e6a
 8006758:	40040000 	.word	0x40040000
 800675c:	00000000 	.word	0x00000000

08006760 <can1_ams_cell_voltages_v3s4_decode>:

double can1_ams_cell_voltages_v3s4_decode(uint8_t value)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 febb 	bl	80004e8 <__aeabi_ui2d>
 8006772:	a30e      	add	r3, pc, #56	; (adr r3, 80067ac <can1_ams_cell_voltages_v3s4_decode+0x4c>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 ff30 	bl	80005dc <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4610      	mov	r0, r2
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <can1_ams_cell_voltages_v3s4_decode+0x48>)
 800678a:	f7f9 fd71 	bl	8000270 <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	ec43 2b17 	vmov	d7, r2, r3
}
 8006796:	eeb0 0a47 	vmov.f32	s0, s14
 800679a:	eef0 0a67 	vmov.f32	s1, s15
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	f3af 8000 	nop.w
 80067a8:	40040000 	.word	0x40040000
 80067ac:	fcce1c58 	.word	0xfcce1c58
 80067b0:	3f800e6a 	.word	0x3f800e6a
 80067b4:	00000000 	.word	0x00000000

080067b8 <can1_ams_cell_voltages_v9s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s4_encode(double value)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <can1_ams_cell_voltages_v9s4_encode+0x50>)
 80067c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067cc:	f7f9 fd4e 	bl	800026c <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	a309      	add	r3, pc, #36	; (adr r3, 8006800 <can1_ams_cell_voltages_v9s4_encode+0x48>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7fa f827 	bl	8000830 <__aeabi_ddiv>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fa f9cf 	bl	8000b8c <__aeabi_d2uiz>
 80067ee:	4603      	mov	r3, r0
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w
 8006800:	fcce1c58 	.word	0xfcce1c58
 8006804:	3f800e6a 	.word	0x3f800e6a
 8006808:	40040000 	.word	0x40040000
 800680c:	00000000 	.word	0x00000000

08006810 <can1_ams_cell_voltages_v9s4_decode>:

double can1_ams_cell_voltages_v9s4_decode(uint8_t value)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe63 	bl	80004e8 <__aeabi_ui2d>
 8006822:	a30e      	add	r3, pc, #56	; (adr r3, 800685c <can1_ams_cell_voltages_v9s4_decode+0x4c>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fed8 	bl	80005dc <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <can1_ams_cell_voltages_v9s4_decode+0x48>)
 800683a:	f7f9 fd19 	bl	8000270 <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	ec43 2b17 	vmov	d7, r2, r3
}
 8006846:	eeb0 0a47 	vmov.f32	s0, s14
 800684a:	eef0 0a67 	vmov.f32	s1, s15
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	f3af 8000 	nop.w
 8006858:	40040000 	.word	0x40040000
 800685c:	fcce1c58 	.word	0xfcce1c58
 8006860:	3f800e6a 	.word	0x3f800e6a
 8006864:	00000000 	.word	0x00000000

08006868 <can1_ams_cell_voltages_v3s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s5_encode(double value)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <can1_ams_cell_voltages_v3s5_encode+0x50>)
 8006878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687c:	f7f9 fcf6 	bl	800026c <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	a309      	add	r3, pc, #36	; (adr r3, 80068b0 <can1_ams_cell_voltages_v3s5_encode+0x48>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 ffcf 	bl	8000830 <__aeabi_ddiv>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f977 	bl	8000b8c <__aeabi_d2uiz>
 800689e:	4603      	mov	r3, r0
 80068a0:	b2db      	uxtb	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w
 80068b0:	fcce1c58 	.word	0xfcce1c58
 80068b4:	3f800e6a 	.word	0x3f800e6a
 80068b8:	40040000 	.word	0x40040000
 80068bc:	00000000 	.word	0x00000000

080068c0 <can1_ams_cell_voltages_v3s5_decode>:

double can1_ams_cell_voltages_v3s5_decode(uint8_t value)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7f9 fe0b 	bl	80004e8 <__aeabi_ui2d>
 80068d2:	a30e      	add	r3, pc, #56	; (adr r3, 800690c <can1_ams_cell_voltages_v3s5_decode+0x4c>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fe80 	bl	80005dc <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4610      	mov	r0, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	4b07      	ldr	r3, [pc, #28]	; (8006908 <can1_ams_cell_voltages_v3s5_decode+0x48>)
 80068ea:	f7f9 fcc1 	bl	8000270 <__adddf3>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80068f6:	eeb0 0a47 	vmov.f32	s0, s14
 80068fa:	eef0 0a67 	vmov.f32	s1, s15
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	f3af 8000 	nop.w
 8006908:	40040000 	.word	0x40040000
 800690c:	fcce1c58 	.word	0xfcce1c58
 8006910:	3f800e6a 	.word	0x3f800e6a
 8006914:	00000000 	.word	0x00000000

08006918 <can1_ams_cell_voltages_v9s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s5_encode(double value)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <can1_ams_cell_voltages_v9s5_encode+0x50>)
 8006928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692c:	f7f9 fc9e 	bl	800026c <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4610      	mov	r0, r2
 8006936:	4619      	mov	r1, r3
 8006938:	a309      	add	r3, pc, #36	; (adr r3, 8006960 <can1_ams_cell_voltages_v9s5_encode+0x48>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 ff77 	bl	8000830 <__aeabi_ddiv>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	f7fa f91f 	bl	8000b8c <__aeabi_d2uiz>
 800694e:	4603      	mov	r3, r0
 8006950:	b2db      	uxtb	r3, r3
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	fcce1c58 	.word	0xfcce1c58
 8006964:	3f800e6a 	.word	0x3f800e6a
 8006968:	40040000 	.word	0x40040000
 800696c:	00000000 	.word	0x00000000

08006970 <can1_ams_cell_voltages_v9s5_decode>:

double can1_ams_cell_voltages_v9s5_decode(uint8_t value)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	4618      	mov	r0, r3
 800697e:	f7f9 fdb3 	bl	80004e8 <__aeabi_ui2d>
 8006982:	a30e      	add	r3, pc, #56	; (adr r3, 80069bc <can1_ams_cell_voltages_v9s5_decode+0x4c>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fe28 	bl	80005dc <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <can1_ams_cell_voltages_v9s5_decode+0x48>)
 800699a:	f7f9 fc69 	bl	8000270 <__adddf3>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80069a6:	eeb0 0a47 	vmov.f32	s0, s14
 80069aa:	eef0 0a67 	vmov.f32	s1, s15
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	f3af 8000 	nop.w
 80069b8:	40040000 	.word	0x40040000
 80069bc:	fcce1c58 	.word	0xfcce1c58
 80069c0:	3f800e6a 	.word	0x3f800e6a
 80069c4:	00000000 	.word	0x00000000

080069c8 <can1_ams_cell_voltages_v3s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s6_encode(double value)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <can1_ams_cell_voltages_v3s6_encode+0x50>)
 80069d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069dc:	f7f9 fc46 	bl	800026c <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	a309      	add	r3, pc, #36	; (adr r3, 8006a10 <can1_ams_cell_voltages_v3s6_encode+0x48>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 ff1f 	bl	8000830 <__aeabi_ddiv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7fa f8c7 	bl	8000b8c <__aeabi_d2uiz>
 80069fe:	4603      	mov	r3, r0
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w
 8006a10:	fcce1c58 	.word	0xfcce1c58
 8006a14:	3f800e6a 	.word	0x3f800e6a
 8006a18:	40040000 	.word	0x40040000
 8006a1c:	00000000 	.word	0x00000000

08006a20 <can1_ams_cell_voltages_v3s6_decode>:

double can1_ams_cell_voltages_v3s6_decode(uint8_t value)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fd5b 	bl	80004e8 <__aeabi_ui2d>
 8006a32:	a30e      	add	r3, pc, #56	; (adr r3, 8006a6c <can1_ams_cell_voltages_v3s6_decode+0x4c>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fdd0 	bl	80005dc <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <can1_ams_cell_voltages_v3s6_decode+0x48>)
 8006a4a:	f7f9 fc11 	bl	8000270 <__adddf3>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8006a56:	eeb0 0a47 	vmov.f32	s0, s14
 8006a5a:	eef0 0a67 	vmov.f32	s1, s15
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	f3af 8000 	nop.w
 8006a68:	40040000 	.word	0x40040000
 8006a6c:	fcce1c58 	.word	0xfcce1c58
 8006a70:	3f800e6a 	.word	0x3f800e6a
 8006a74:	00000000 	.word	0x00000000

08006a78 <can1_ams_cell_voltages_v9s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s6_encode(double value)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <can1_ams_cell_voltages_v9s6_encode+0x50>)
 8006a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8c:	f7f9 fbee 	bl	800026c <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	a309      	add	r3, pc, #36	; (adr r3, 8006ac0 <can1_ams_cell_voltages_v9s6_encode+0x48>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fec7 	bl	8000830 <__aeabi_ddiv>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f7fa f86f 	bl	8000b8c <__aeabi_d2uiz>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	b2db      	uxtb	r3, r3
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	fcce1c58 	.word	0xfcce1c58
 8006ac4:	3f800e6a 	.word	0x3f800e6a
 8006ac8:	40040000 	.word	0x40040000
 8006acc:	00000000 	.word	0x00000000

08006ad0 <can1_ams_cell_voltages_v9s6_decode>:

double can1_ams_cell_voltages_v9s6_decode(uint8_t value)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7f9 fd03 	bl	80004e8 <__aeabi_ui2d>
 8006ae2:	a30e      	add	r3, pc, #56	; (adr r3, 8006b1c <can1_ams_cell_voltages_v9s6_decode+0x4c>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd78 	bl	80005dc <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4610      	mov	r0, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <can1_ams_cell_voltages_v9s6_decode+0x48>)
 8006afa:	f7f9 fbb9 	bl	8000270 <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b06:	eeb0 0a47 	vmov.f32	s0, s14
 8006b0a:	eef0 0a67 	vmov.f32	s1, s15
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	f3af 8000 	nop.w
 8006b18:	40040000 	.word	0x40040000
 8006b1c:	fcce1c58 	.word	0xfcce1c58
 8006b20:	3f800e6a 	.word	0x3f800e6a
 8006b24:	00000000 	.word	0x00000000

08006b28 <can1_ams_cell_voltages_v3s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s7_encode(double value)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <can1_ams_cell_voltages_v3s7_encode+0x50>)
 8006b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3c:	f7f9 fb96 	bl	800026c <__aeabi_dsub>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	a309      	add	r3, pc, #36	; (adr r3, 8006b70 <can1_ams_cell_voltages_v3s7_encode+0x48>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fe6f 	bl	8000830 <__aeabi_ddiv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fa f817 	bl	8000b8c <__aeabi_d2uiz>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	b2db      	uxtb	r3, r3
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	fcce1c58 	.word	0xfcce1c58
 8006b74:	3f800e6a 	.word	0x3f800e6a
 8006b78:	40040000 	.word	0x40040000
 8006b7c:	00000000 	.word	0x00000000

08006b80 <can1_ams_cell_voltages_v3s7_decode>:

double can1_ams_cell_voltages_v3s7_decode(uint8_t value)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7f9 fcab 	bl	80004e8 <__aeabi_ui2d>
 8006b92:	a30e      	add	r3, pc, #56	; (adr r3, 8006bcc <can1_ams_cell_voltages_v3s7_decode+0x4c>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fd20 	bl	80005dc <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <can1_ams_cell_voltages_v3s7_decode+0x48>)
 8006baa:	f7f9 fb61 	bl	8000270 <__adddf3>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8006bba:	eef0 0a67 	vmov.f32	s1, s15
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	40040000 	.word	0x40040000
 8006bcc:	fcce1c58 	.word	0xfcce1c58
 8006bd0:	3f800e6a 	.word	0x3f800e6a
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <can1_ams_cell_voltages_v9s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s7_encode(double value)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <can1_ams_cell_voltages_v9s7_encode+0x50>)
 8006be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bec:	f7f9 fb3e 	bl	800026c <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	a309      	add	r3, pc, #36	; (adr r3, 8006c20 <can1_ams_cell_voltages_v9s7_encode+0x48>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fe17 	bl	8000830 <__aeabi_ddiv>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7f9 ffbf 	bl	8000b8c <__aeabi_d2uiz>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	b2db      	uxtb	r3, r3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w
 8006c20:	fcce1c58 	.word	0xfcce1c58
 8006c24:	3f800e6a 	.word	0x3f800e6a
 8006c28:	40040000 	.word	0x40040000
 8006c2c:	00000000 	.word	0x00000000

08006c30 <can1_ams_cell_voltages_v9s7_decode>:

double can1_ams_cell_voltages_v9s7_decode(uint8_t value)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fc53 	bl	80004e8 <__aeabi_ui2d>
 8006c42:	a30e      	add	r3, pc, #56	; (adr r3, 8006c7c <can1_ams_cell_voltages_v9s7_decode+0x4c>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fcc8 	bl	80005dc <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <can1_ams_cell_voltages_v9s7_decode+0x48>)
 8006c5a:	f7f9 fb09 	bl	8000270 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c66:	eeb0 0a47 	vmov.f32	s0, s14
 8006c6a:	eef0 0a67 	vmov.f32	s1, s15
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	f3af 8000 	nop.w
 8006c78:	40040000 	.word	0x40040000
 8006c7c:	fcce1c58 	.word	0xfcce1c58
 8006c80:	3f800e6a 	.word	0x3f800e6a
 8006c84:	00000000 	.word	0x00000000

08006c88 <can1_ams_cell_voltages_v3s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s8_encode(double value)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <can1_ams_cell_voltages_v3s8_encode+0x50>)
 8006c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9c:	f7f9 fae6 	bl	800026c <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	a309      	add	r3, pc, #36	; (adr r3, 8006cd0 <can1_ams_cell_voltages_v3s8_encode+0x48>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fdbf 	bl	8000830 <__aeabi_ddiv>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7f9 ff67 	bl	8000b8c <__aeabi_d2uiz>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	b2db      	uxtb	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
 8006cd0:	fcce1c58 	.word	0xfcce1c58
 8006cd4:	3f800e6a 	.word	0x3f800e6a
 8006cd8:	40040000 	.word	0x40040000
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <can1_ams_cell_voltages_v3s8_decode>:

double can1_ams_cell_voltages_v3s8_decode(uint8_t value)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7f9 fbfb 	bl	80004e8 <__aeabi_ui2d>
 8006cf2:	a30e      	add	r3, pc, #56	; (adr r3, 8006d2c <can1_ams_cell_voltages_v3s8_decode+0x4c>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fc70 	bl	80005dc <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <can1_ams_cell_voltages_v3s8_decode+0x48>)
 8006d0a:	f7f9 fab1 	bl	8000270 <__adddf3>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d16:	eeb0 0a47 	vmov.f32	s0, s14
 8006d1a:	eef0 0a67 	vmov.f32	s1, s15
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	f3af 8000 	nop.w
 8006d28:	40040000 	.word	0x40040000
 8006d2c:	fcce1c58 	.word	0xfcce1c58
 8006d30:	3f800e6a 	.word	0x3f800e6a
 8006d34:	00000000 	.word	0x00000000

08006d38 <can1_ams_cell_voltages_v9s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s8_encode(double value)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <can1_ams_cell_voltages_v9s8_encode+0x50>)
 8006d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4c:	f7f9 fa8e 	bl	800026c <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	a309      	add	r3, pc, #36	; (adr r3, 8006d80 <can1_ams_cell_voltages_v9s8_encode+0x48>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fd67 	bl	8000830 <__aeabi_ddiv>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 ff0f 	bl	8000b8c <__aeabi_d2uiz>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	b2db      	uxtb	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	f3af 8000 	nop.w
 8006d80:	fcce1c58 	.word	0xfcce1c58
 8006d84:	3f800e6a 	.word	0x3f800e6a
 8006d88:	40040000 	.word	0x40040000
 8006d8c:	00000000 	.word	0x00000000

08006d90 <can1_ams_cell_voltages_v9s8_decode>:

double can1_ams_cell_voltages_v9s8_decode(uint8_t value)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7f9 fba3 	bl	80004e8 <__aeabi_ui2d>
 8006da2:	a30e      	add	r3, pc, #56	; (adr r3, 8006ddc <can1_ams_cell_voltages_v9s8_decode+0x4c>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fc18 	bl	80005dc <__aeabi_dmul>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <can1_ams_cell_voltages_v9s8_decode+0x48>)
 8006dba:	f7f9 fa59 	bl	8000270 <__adddf3>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8006dca:	eef0 0a67 	vmov.f32	s1, s15
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	40040000 	.word	0x40040000
 8006ddc:	fcce1c58 	.word	0xfcce1c58
 8006de0:	3f800e6a 	.word	0x3f800e6a
 8006de4:	00000000 	.word	0x00000000

08006de8 <can1_ams_cell_voltages_v3s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s9_encode(double value)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <can1_ams_cell_voltages_v3s9_encode+0x50>)
 8006df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfc:	f7f9 fa36 	bl	800026c <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4610      	mov	r0, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	a309      	add	r3, pc, #36	; (adr r3, 8006e30 <can1_ams_cell_voltages_v3s9_encode+0x48>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fd0f 	bl	8000830 <__aeabi_ddiv>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7f9 feb7 	bl	8000b8c <__aeabi_d2uiz>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	fcce1c58 	.word	0xfcce1c58
 8006e34:	3f800e6a 	.word	0x3f800e6a
 8006e38:	40040000 	.word	0x40040000
 8006e3c:	00000000 	.word	0x00000000

08006e40 <can1_ams_cell_voltages_v3s9_decode>:

double can1_ams_cell_voltages_v3s9_decode(uint8_t value)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fb4b 	bl	80004e8 <__aeabi_ui2d>
 8006e52:	a30e      	add	r3, pc, #56	; (adr r3, 8006e8c <can1_ams_cell_voltages_v3s9_decode+0x4c>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fbc0 	bl	80005dc <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <can1_ams_cell_voltages_v3s9_decode+0x48>)
 8006e6a:	f7f9 fa01 	bl	8000270 <__adddf3>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e76:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7a:	eef0 0a67 	vmov.f32	s1, s15
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	f3af 8000 	nop.w
 8006e88:	40040000 	.word	0x40040000
 8006e8c:	fcce1c58 	.word	0xfcce1c58
 8006e90:	3f800e6a 	.word	0x3f800e6a
 8006e94:	00000000 	.word	0x00000000

08006e98 <can1_ams_cell_voltages_v9s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s9_encode(double value)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <can1_ams_cell_voltages_v9s9_encode+0x50>)
 8006ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eac:	f7f9 f9de 	bl	800026c <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	a309      	add	r3, pc, #36	; (adr r3, 8006ee0 <can1_ams_cell_voltages_v9s9_encode+0x48>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fcb7 	bl	8000830 <__aeabi_ddiv>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 fe5f 	bl	8000b8c <__aeabi_d2uiz>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	b2db      	uxtb	r3, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	fcce1c58 	.word	0xfcce1c58
 8006ee4:	3f800e6a 	.word	0x3f800e6a
 8006ee8:	40040000 	.word	0x40040000
 8006eec:	00000000 	.word	0x00000000

08006ef0 <can1_ams_cell_voltages_v9s9_decode>:

double can1_ams_cell_voltages_v9s9_decode(uint8_t value)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7f9 faf3 	bl	80004e8 <__aeabi_ui2d>
 8006f02:	a30e      	add	r3, pc, #56	; (adr r3, 8006f3c <can1_ams_cell_voltages_v9s9_decode+0x4c>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 fb68 	bl	80005dc <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <can1_ams_cell_voltages_v9s9_decode+0x48>)
 8006f1a:	f7f9 f9a9 	bl	8000270 <__adddf3>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f26:	eeb0 0a47 	vmov.f32	s0, s14
 8006f2a:	eef0 0a67 	vmov.f32	s1, s15
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	f3af 8000 	nop.w
 8006f38:	40040000 	.word	0x40040000
 8006f3c:	fcce1c58 	.word	0xfcce1c58
 8006f40:	3f800e6a 	.word	0x3f800e6a
 8006f44:	00000000 	.word	0x00000000

08006f48 <can1_ams_cell_voltages_v3s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s10_encode(double value)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <can1_ams_cell_voltages_v3s10_encode+0x50>)
 8006f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5c:	f7f9 f986 	bl	800026c <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	a309      	add	r3, pc, #36	; (adr r3, 8006f90 <can1_ams_cell_voltages_v3s10_encode+0x48>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 fc5f 	bl	8000830 <__aeabi_ddiv>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7f9 fe07 	bl	8000b8c <__aeabi_d2uiz>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	b2db      	uxtb	r3, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	fcce1c58 	.word	0xfcce1c58
 8006f94:	3f800e6a 	.word	0x3f800e6a
 8006f98:	40040000 	.word	0x40040000
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <can1_ams_cell_voltages_v3s10_decode>:

double can1_ams_cell_voltages_v3s10_decode(uint8_t value)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7f9 fa9b 	bl	80004e8 <__aeabi_ui2d>
 8006fb2:	a30e      	add	r3, pc, #56	; (adr r3, 8006fec <can1_ams_cell_voltages_v3s10_decode+0x4c>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 fb10 	bl	80005dc <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <can1_ams_cell_voltages_v3s10_decode+0x48>)
 8006fca:	f7f9 f951 	bl	8000270 <__adddf3>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8006fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8006fda:	eef0 0a67 	vmov.f32	s1, s15
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	40040000 	.word	0x40040000
 8006fec:	fcce1c58 	.word	0xfcce1c58
 8006ff0:	3f800e6a 	.word	0x3f800e6a
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <can1_ams_cell_voltages_v9s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s10_encode(double value)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	4b10      	ldr	r3, [pc, #64]	; (8007048 <can1_ams_cell_voltages_v9s10_encode+0x50>)
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700c:	f7f9 f92e 	bl	800026c <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	a309      	add	r3, pc, #36	; (adr r3, 8007040 <can1_ams_cell_voltages_v9s10_encode+0x48>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fc07 	bl	8000830 <__aeabi_ddiv>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4610      	mov	r0, r2
 8007028:	4619      	mov	r1, r3
 800702a:	f7f9 fdaf 	bl	8000b8c <__aeabi_d2uiz>
 800702e:	4603      	mov	r3, r0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	fcce1c58 	.word	0xfcce1c58
 8007044:	3f800e6a 	.word	0x3f800e6a
 8007048:	40040000 	.word	0x40040000
 800704c:	00000000 	.word	0x00000000

08007050 <can1_ams_cell_voltages_v9s10_decode>:

double can1_ams_cell_voltages_v9s10_decode(uint8_t value)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7f9 fa43 	bl	80004e8 <__aeabi_ui2d>
 8007062:	a30e      	add	r3, pc, #56	; (adr r3, 800709c <can1_ams_cell_voltages_v9s10_decode+0x4c>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7f9 fab8 	bl	80005dc <__aeabi_dmul>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4610      	mov	r0, r2
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <can1_ams_cell_voltages_v9s10_decode+0x48>)
 800707a:	f7f9 f8f9 	bl	8000270 <__adddf3>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	ec43 2b17 	vmov	d7, r2, r3
}
 8007086:	eeb0 0a47 	vmov.f32	s0, s14
 800708a:	eef0 0a67 	vmov.f32	s1, s15
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	f3af 8000 	nop.w
 8007098:	40040000 	.word	0x40040000
 800709c:	fcce1c58 	.word	0xfcce1c58
 80070a0:	3f800e6a 	.word	0x3f800e6a
 80070a4:	00000000 	.word	0x00000000

080070a8 <can1_ams_cell_voltages_v3s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s11_encode(double value)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <can1_ams_cell_voltages_v3s11_encode+0x50>)
 80070b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070bc:	f7f9 f8d6 	bl	800026c <__aeabi_dsub>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	a309      	add	r3, pc, #36	; (adr r3, 80070f0 <can1_ams_cell_voltages_v3s11_encode+0x48>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fbaf 	bl	8000830 <__aeabi_ddiv>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f7f9 fd57 	bl	8000b8c <__aeabi_d2uiz>
 80070de:	4603      	mov	r3, r0
 80070e0:	b2db      	uxtb	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w
 80070f0:	fcce1c58 	.word	0xfcce1c58
 80070f4:	3f800e6a 	.word	0x3f800e6a
 80070f8:	40040000 	.word	0x40040000
 80070fc:	00000000 	.word	0x00000000

08007100 <can1_ams_cell_voltages_v3s11_decode>:

double can1_ams_cell_voltages_v3s11_decode(uint8_t value)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 f9eb 	bl	80004e8 <__aeabi_ui2d>
 8007112:	a30e      	add	r3, pc, #56	; (adr r3, 800714c <can1_ams_cell_voltages_v3s11_decode+0x4c>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fa60 	bl	80005dc <__aeabi_dmul>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4610      	mov	r0, r2
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <can1_ams_cell_voltages_v3s11_decode+0x48>)
 800712a:	f7f9 f8a1 	bl	8000270 <__adddf3>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	ec43 2b17 	vmov	d7, r2, r3
}
 8007136:	eeb0 0a47 	vmov.f32	s0, s14
 800713a:	eef0 0a67 	vmov.f32	s1, s15
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	f3af 8000 	nop.w
 8007148:	40040000 	.word	0x40040000
 800714c:	fcce1c58 	.word	0xfcce1c58
 8007150:	3f800e6a 	.word	0x3f800e6a
 8007154:	00000000 	.word	0x00000000

08007158 <can1_ams_cell_voltages_v9s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s11_encode(double value)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <can1_ams_cell_voltages_v9s11_encode+0x50>)
 8007168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716c:	f7f9 f87e 	bl	800026c <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4610      	mov	r0, r2
 8007176:	4619      	mov	r1, r3
 8007178:	a309      	add	r3, pc, #36	; (adr r3, 80071a0 <can1_ams_cell_voltages_v9s11_encode+0x48>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	f7f9 fb57 	bl	8000830 <__aeabi_ddiv>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4610      	mov	r0, r2
 8007188:	4619      	mov	r1, r3
 800718a:	f7f9 fcff 	bl	8000b8c <__aeabi_d2uiz>
 800718e:	4603      	mov	r3, r0
 8007190:	b2db      	uxtb	r3, r3
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w
 80071a0:	fcce1c58 	.word	0xfcce1c58
 80071a4:	3f800e6a 	.word	0x3f800e6a
 80071a8:	40040000 	.word	0x40040000
 80071ac:	00000000 	.word	0x00000000

080071b0 <can1_ams_cell_voltages_v9s11_decode>:

double can1_ams_cell_voltages_v9s11_decode(uint8_t value)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f993 	bl	80004e8 <__aeabi_ui2d>
 80071c2:	a30e      	add	r3, pc, #56	; (adr r3, 80071fc <can1_ams_cell_voltages_v9s11_decode+0x4c>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa08 	bl	80005dc <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4610      	mov	r0, r2
 80071d2:	4619      	mov	r1, r3
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <can1_ams_cell_voltages_v9s11_decode+0x48>)
 80071da:	f7f9 f849 	bl	8000270 <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80071e6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ea:	eef0 0a67 	vmov.f32	s1, s15
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	f3af 8000 	nop.w
 80071f8:	40040000 	.word	0x40040000
 80071fc:	fcce1c58 	.word	0xfcce1c58
 8007200:	3f800e6a 	.word	0x3f800e6a
 8007204:	00000000 	.word	0x00000000

08007208 <can1_ams_cell_voltages_v3s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v3s12_encode(double value)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <can1_ams_cell_voltages_v3s12_encode+0x50>)
 8007218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800721c:	f7f9 f826 	bl	800026c <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	a309      	add	r3, pc, #36	; (adr r3, 8007250 <can1_ams_cell_voltages_v3s12_encode+0x48>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f7f9 faff 	bl	8000830 <__aeabi_ddiv>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	f7f9 fca7 	bl	8000b8c <__aeabi_d2uiz>
 800723e:	4603      	mov	r3, r0
 8007240:	b2db      	uxtb	r3, r3
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	fcce1c58 	.word	0xfcce1c58
 8007254:	3f800e6a 	.word	0x3f800e6a
 8007258:	40040000 	.word	0x40040000
 800725c:	00000000 	.word	0x00000000

08007260 <can1_ams_cell_voltages_v3s12_decode>:

double can1_ams_cell_voltages_v3s12_decode(uint8_t value)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f93b 	bl	80004e8 <__aeabi_ui2d>
 8007272:	a30e      	add	r3, pc, #56	; (adr r3, 80072ac <can1_ams_cell_voltages_v3s12_decode+0x4c>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9b0 	bl	80005dc <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <can1_ams_cell_voltages_v3s12_decode+0x48>)
 800728a:	f7f8 fff1 	bl	8000270 <__adddf3>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	ec43 2b17 	vmov	d7, r2, r3
}
 8007296:	eeb0 0a47 	vmov.f32	s0, s14
 800729a:	eef0 0a67 	vmov.f32	s1, s15
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	f3af 8000 	nop.w
 80072a8:	40040000 	.word	0x40040000
 80072ac:	fcce1c58 	.word	0xfcce1c58
 80072b0:	3f800e6a 	.word	0x3f800e6a
 80072b4:	00000000 	.word	0x00000000

080072b8 <can1_ams_cell_voltages_v9s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v9s12_encode(double value)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <can1_ams_cell_voltages_v9s12_encode+0x50>)
 80072c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072cc:	f7f8 ffce 	bl	800026c <__aeabi_dsub>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	a309      	add	r3, pc, #36	; (adr r3, 8007300 <can1_ams_cell_voltages_v9s12_encode+0x48>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f9 faa7 	bl	8000830 <__aeabi_ddiv>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 fc4f 	bl	8000b8c <__aeabi_d2uiz>
 80072ee:	4603      	mov	r3, r0
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w
 8007300:	fcce1c58 	.word	0xfcce1c58
 8007304:	3f800e6a 	.word	0x3f800e6a
 8007308:	40040000 	.word	0x40040000
 800730c:	00000000 	.word	0x00000000

08007310 <can1_ams_cell_voltages_v9s12_decode>:

double can1_ams_cell_voltages_v9s12_decode(uint8_t value)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4618      	mov	r0, r3
 800731e:	f7f9 f8e3 	bl	80004e8 <__aeabi_ui2d>
 8007322:	a30e      	add	r3, pc, #56	; (adr r3, 800735c <can1_ams_cell_voltages_v9s12_decode+0x4c>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f958 	bl	80005dc <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4610      	mov	r0, r2
 8007332:	4619      	mov	r1, r3
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <can1_ams_cell_voltages_v9s12_decode+0x48>)
 800733a:	f7f8 ff99 	bl	8000270 <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	ec43 2b17 	vmov	d7, r2, r3
}
 8007346:	eeb0 0a47 	vmov.f32	s0, s14
 800734a:	eef0 0a67 	vmov.f32	s1, s15
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	f3af 8000 	nop.w
 8007358:	40040000 	.word	0x40040000
 800735c:	fcce1c58 	.word	0xfcce1c58
 8007360:	3f800e6a 	.word	0x3f800e6a
 8007364:	00000000 	.word	0x00000000

08007368 <can1_ams_cell_voltages_v4s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s1_encode(double value)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <can1_ams_cell_voltages_v4s1_encode+0x50>)
 8007378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800737c:	f7f8 ff76 	bl	800026c <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	a309      	add	r3, pc, #36	; (adr r3, 80073b0 <can1_ams_cell_voltages_v4s1_encode+0x48>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 fa4f 	bl	8000830 <__aeabi_ddiv>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4610      	mov	r0, r2
 8007398:	4619      	mov	r1, r3
 800739a:	f7f9 fbf7 	bl	8000b8c <__aeabi_d2uiz>
 800739e:	4603      	mov	r3, r0
 80073a0:	b2db      	uxtb	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	f3af 8000 	nop.w
 80073b0:	fcce1c58 	.word	0xfcce1c58
 80073b4:	3f800e6a 	.word	0x3f800e6a
 80073b8:	40040000 	.word	0x40040000
 80073bc:	00000000 	.word	0x00000000

080073c0 <can1_ams_cell_voltages_v4s1_decode>:

double can1_ams_cell_voltages_v4s1_decode(uint8_t value)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7f9 f88b 	bl	80004e8 <__aeabi_ui2d>
 80073d2:	a30e      	add	r3, pc, #56	; (adr r3, 800740c <can1_ams_cell_voltages_v4s1_decode+0x4c>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f900 	bl	80005dc <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <can1_ams_cell_voltages_v4s1_decode+0x48>)
 80073ea:	f7f8 ff41 	bl	8000270 <__adddf3>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80073f6:	eeb0 0a47 	vmov.f32	s0, s14
 80073fa:	eef0 0a67 	vmov.f32	s1, s15
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	f3af 8000 	nop.w
 8007408:	40040000 	.word	0x40040000
 800740c:	fcce1c58 	.word	0xfcce1c58
 8007410:	3f800e6a 	.word	0x3f800e6a
 8007414:	00000000 	.word	0x00000000

08007418 <can1_ams_cell_voltages_v10s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s1_encode(double value)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <can1_ams_cell_voltages_v10s1_encode+0x50>)
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	f7f8 ff1e 	bl	800026c <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	a309      	add	r3, pc, #36	; (adr r3, 8007460 <can1_ams_cell_voltages_v10s1_encode+0x48>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f9f7 	bl	8000830 <__aeabi_ddiv>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	f7f9 fb9f 	bl	8000b8c <__aeabi_d2uiz>
 800744e:	4603      	mov	r3, r0
 8007450:	b2db      	uxtb	r3, r3
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	f3af 8000 	nop.w
 8007460:	fcce1c58 	.word	0xfcce1c58
 8007464:	3f800e6a 	.word	0x3f800e6a
 8007468:	40040000 	.word	0x40040000
 800746c:	00000000 	.word	0x00000000

08007470 <can1_ams_cell_voltages_v10s1_decode>:

double can1_ams_cell_voltages_v10s1_decode(uint8_t value)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	4618      	mov	r0, r3
 800747e:	f7f9 f833 	bl	80004e8 <__aeabi_ui2d>
 8007482:	a30e      	add	r3, pc, #56	; (adr r3, 80074bc <can1_ams_cell_voltages_v10s1_decode+0x4c>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f9 f8a8 	bl	80005dc <__aeabi_dmul>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4610      	mov	r0, r2
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <can1_ams_cell_voltages_v10s1_decode+0x48>)
 800749a:	f7f8 fee9 	bl	8000270 <__adddf3>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80074a6:	eeb0 0a47 	vmov.f32	s0, s14
 80074aa:	eef0 0a67 	vmov.f32	s1, s15
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	f3af 8000 	nop.w
 80074b8:	40040000 	.word	0x40040000
 80074bc:	fcce1c58 	.word	0xfcce1c58
 80074c0:	3f800e6a 	.word	0x3f800e6a
 80074c4:	00000000 	.word	0x00000000

080074c8 <can1_ams_cell_voltages_v4s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s2_encode(double value)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <can1_ams_cell_voltages_v4s2_encode+0x50>)
 80074d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074dc:	f7f8 fec6 	bl	800026c <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	a309      	add	r3, pc, #36	; (adr r3, 8007510 <can1_ams_cell_voltages_v4s2_encode+0x48>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f99f 	bl	8000830 <__aeabi_ddiv>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7f9 fb47 	bl	8000b8c <__aeabi_d2uiz>
 80074fe:	4603      	mov	r3, r0
 8007500:	b2db      	uxtb	r3, r3
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	fcce1c58 	.word	0xfcce1c58
 8007514:	3f800e6a 	.word	0x3f800e6a
 8007518:	40040000 	.word	0x40040000
 800751c:	00000000 	.word	0x00000000

08007520 <can1_ams_cell_voltages_v4s2_decode>:

double can1_ams_cell_voltages_v4s2_decode(uint8_t value)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	4618      	mov	r0, r3
 800752e:	f7f8 ffdb 	bl	80004e8 <__aeabi_ui2d>
 8007532:	a30e      	add	r3, pc, #56	; (adr r3, 800756c <can1_ams_cell_voltages_v4s2_decode+0x4c>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f9 f850 	bl	80005dc <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <can1_ams_cell_voltages_v4s2_decode+0x48>)
 800754a:	f7f8 fe91 	bl	8000270 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	ec43 2b17 	vmov	d7, r2, r3
}
 8007556:	eeb0 0a47 	vmov.f32	s0, s14
 800755a:	eef0 0a67 	vmov.f32	s1, s15
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	f3af 8000 	nop.w
 8007568:	40040000 	.word	0x40040000
 800756c:	fcce1c58 	.word	0xfcce1c58
 8007570:	3f800e6a 	.word	0x3f800e6a
 8007574:	00000000 	.word	0x00000000

08007578 <can1_ams_cell_voltages_v10s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s2_encode(double value)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <can1_ams_cell_voltages_v10s2_encode+0x50>)
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	f7f8 fe6e 	bl	800026c <__aeabi_dsub>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	a309      	add	r3, pc, #36	; (adr r3, 80075c0 <can1_ams_cell_voltages_v10s2_encode+0x48>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f947 	bl	8000830 <__aeabi_ddiv>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7f9 faef 	bl	8000b8c <__aeabi_d2uiz>
 80075ae:	4603      	mov	r3, r0
 80075b0:	b2db      	uxtb	r3, r3
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	fcce1c58 	.word	0xfcce1c58
 80075c4:	3f800e6a 	.word	0x3f800e6a
 80075c8:	40040000 	.word	0x40040000
 80075cc:	00000000 	.word	0x00000000

080075d0 <can1_ams_cell_voltages_v10s2_decode>:

double can1_ams_cell_voltages_v10s2_decode(uint8_t value)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ff83 	bl	80004e8 <__aeabi_ui2d>
 80075e2:	a30e      	add	r3, pc, #56	; (adr r3, 800761c <can1_ams_cell_voltages_v10s2_decode+0x4c>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fff8 	bl	80005dc <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <can1_ams_cell_voltages_v10s2_decode+0x48>)
 80075fa:	f7f8 fe39 	bl	8000270 <__adddf3>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	ec43 2b17 	vmov	d7, r2, r3
}
 8007606:	eeb0 0a47 	vmov.f32	s0, s14
 800760a:	eef0 0a67 	vmov.f32	s1, s15
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	f3af 8000 	nop.w
 8007618:	40040000 	.word	0x40040000
 800761c:	fcce1c58 	.word	0xfcce1c58
 8007620:	3f800e6a 	.word	0x3f800e6a
 8007624:	00000000 	.word	0x00000000

08007628 <can1_ams_cell_voltages_v4s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s3_encode(double value)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <can1_ams_cell_voltages_v4s3_encode+0x50>)
 8007638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763c:	f7f8 fe16 	bl	800026c <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	a309      	add	r3, pc, #36	; (adr r3, 8007670 <can1_ams_cell_voltages_v4s3_encode+0x48>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 f8ef 	bl	8000830 <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f7f9 fa97 	bl	8000b8c <__aeabi_d2uiz>
 800765e:	4603      	mov	r3, r0
 8007660:	b2db      	uxtb	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
 8007670:	fcce1c58 	.word	0xfcce1c58
 8007674:	3f800e6a 	.word	0x3f800e6a
 8007678:	40040000 	.word	0x40040000
 800767c:	00000000 	.word	0x00000000

08007680 <can1_ams_cell_voltages_v4s3_decode>:

double can1_ams_cell_voltages_v4s3_decode(uint8_t value)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	4618      	mov	r0, r3
 800768e:	f7f8 ff2b 	bl	80004e8 <__aeabi_ui2d>
 8007692:	a30e      	add	r3, pc, #56	; (adr r3, 80076cc <can1_ams_cell_voltages_v4s3_decode+0x4c>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 ffa0 	bl	80005dc <__aeabi_dmul>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <can1_ams_cell_voltages_v4s3_decode+0x48>)
 80076aa:	f7f8 fde1 	bl	8000270 <__adddf3>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80076b6:	eeb0 0a47 	vmov.f32	s0, s14
 80076ba:	eef0 0a67 	vmov.f32	s1, s15
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	f3af 8000 	nop.w
 80076c8:	40040000 	.word	0x40040000
 80076cc:	fcce1c58 	.word	0xfcce1c58
 80076d0:	3f800e6a 	.word	0x3f800e6a
 80076d4:	00000000 	.word	0x00000000

080076d8 <can1_ams_cell_voltages_v10s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s3_encode(double value)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <can1_ams_cell_voltages_v10s3_encode+0x50>)
 80076e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ec:	f7f8 fdbe 	bl	800026c <__aeabi_dsub>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4610      	mov	r0, r2
 80076f6:	4619      	mov	r1, r3
 80076f8:	a309      	add	r3, pc, #36	; (adr r3, 8007720 <can1_ams_cell_voltages_v10s3_encode+0x48>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f9 f897 	bl	8000830 <__aeabi_ddiv>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	f7f9 fa3f 	bl	8000b8c <__aeabi_d2uiz>
 800770e:	4603      	mov	r3, r0
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	fcce1c58 	.word	0xfcce1c58
 8007724:	3f800e6a 	.word	0x3f800e6a
 8007728:	40040000 	.word	0x40040000
 800772c:	00000000 	.word	0x00000000

08007730 <can1_ams_cell_voltages_v10s3_decode>:

double can1_ams_cell_voltages_v10s3_decode(uint8_t value)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7f8 fed3 	bl	80004e8 <__aeabi_ui2d>
 8007742:	a30e      	add	r3, pc, #56	; (adr r3, 800777c <can1_ams_cell_voltages_v10s3_decode+0x4c>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 ff48 	bl	80005dc <__aeabi_dmul>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4610      	mov	r0, r2
 8007752:	4619      	mov	r1, r3
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <can1_ams_cell_voltages_v10s3_decode+0x48>)
 800775a:	f7f8 fd89 	bl	8000270 <__adddf3>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	ec43 2b17 	vmov	d7, r2, r3
}
 8007766:	eeb0 0a47 	vmov.f32	s0, s14
 800776a:	eef0 0a67 	vmov.f32	s1, s15
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	f3af 8000 	nop.w
 8007778:	40040000 	.word	0x40040000
 800777c:	fcce1c58 	.word	0xfcce1c58
 8007780:	3f800e6a 	.word	0x3f800e6a
 8007784:	00000000 	.word	0x00000000

08007788 <can1_ams_cell_voltages_v4s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s4_encode(double value)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <can1_ams_cell_voltages_v4s4_encode+0x50>)
 8007798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800779c:	f7f8 fd66 	bl	800026c <__aeabi_dsub>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4610      	mov	r0, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	a309      	add	r3, pc, #36	; (adr r3, 80077d0 <can1_ams_cell_voltages_v4s4_encode+0x48>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f9 f83f 	bl	8000830 <__aeabi_ddiv>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7f9 f9e7 	bl	8000b8c <__aeabi_d2uiz>
 80077be:	4603      	mov	r3, r0
 80077c0:	b2db      	uxtb	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	fcce1c58 	.word	0xfcce1c58
 80077d4:	3f800e6a 	.word	0x3f800e6a
 80077d8:	40040000 	.word	0x40040000
 80077dc:	00000000 	.word	0x00000000

080077e0 <can1_ams_cell_voltages_v4s4_decode>:

double can1_ams_cell_voltages_v4s4_decode(uint8_t value)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 fe7b 	bl	80004e8 <__aeabi_ui2d>
 80077f2:	a30e      	add	r3, pc, #56	; (adr r3, 800782c <can1_ams_cell_voltages_v4s4_decode+0x4c>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fef0 	bl	80005dc <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <can1_ams_cell_voltages_v4s4_decode+0x48>)
 800780a:	f7f8 fd31 	bl	8000270 <__adddf3>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	ec43 2b17 	vmov	d7, r2, r3
}
 8007816:	eeb0 0a47 	vmov.f32	s0, s14
 800781a:	eef0 0a67 	vmov.f32	s1, s15
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	f3af 8000 	nop.w
 8007828:	40040000 	.word	0x40040000
 800782c:	fcce1c58 	.word	0xfcce1c58
 8007830:	3f800e6a 	.word	0x3f800e6a
 8007834:	00000000 	.word	0x00000000

08007838 <can1_ams_cell_voltages_v10s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s4_encode(double value)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <can1_ams_cell_voltages_v10s4_encode+0x50>)
 8007848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784c:	f7f8 fd0e 	bl	800026c <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4610      	mov	r0, r2
 8007856:	4619      	mov	r1, r3
 8007858:	a309      	add	r3, pc, #36	; (adr r3, 8007880 <can1_ams_cell_voltages_v10s4_encode+0x48>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 ffe7 	bl	8000830 <__aeabi_ddiv>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	f7f9 f98f 	bl	8000b8c <__aeabi_d2uiz>
 800786e:	4603      	mov	r3, r0
 8007870:	b2db      	uxtb	r3, r3
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w
 8007880:	fcce1c58 	.word	0xfcce1c58
 8007884:	3f800e6a 	.word	0x3f800e6a
 8007888:	40040000 	.word	0x40040000
 800788c:	00000000 	.word	0x00000000

08007890 <can1_ams_cell_voltages_v10s4_decode>:

double can1_ams_cell_voltages_v10s4_decode(uint8_t value)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f7f8 fe23 	bl	80004e8 <__aeabi_ui2d>
 80078a2:	a30e      	add	r3, pc, #56	; (adr r3, 80078dc <can1_ams_cell_voltages_v10s4_decode+0x4c>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fe98 	bl	80005dc <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <can1_ams_cell_voltages_v10s4_decode+0x48>)
 80078ba:	f7f8 fcd9 	bl	8000270 <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80078c6:	eeb0 0a47 	vmov.f32	s0, s14
 80078ca:	eef0 0a67 	vmov.f32	s1, s15
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	f3af 8000 	nop.w
 80078d8:	40040000 	.word	0x40040000
 80078dc:	fcce1c58 	.word	0xfcce1c58
 80078e0:	3f800e6a 	.word	0x3f800e6a
 80078e4:	00000000 	.word	0x00000000

080078e8 <can1_ams_cell_voltages_v4s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s5_encode(double value)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	4b10      	ldr	r3, [pc, #64]	; (8007938 <can1_ams_cell_voltages_v4s5_encode+0x50>)
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f7f8 fcb6 	bl	800026c <__aeabi_dsub>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	a309      	add	r3, pc, #36	; (adr r3, 8007930 <can1_ams_cell_voltages_v4s5_encode+0x48>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 ff8f 	bl	8000830 <__aeabi_ddiv>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	f7f9 f937 	bl	8000b8c <__aeabi_d2uiz>
 800791e:	4603      	mov	r3, r0
 8007920:	b2db      	uxtb	r3, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	fcce1c58 	.word	0xfcce1c58
 8007934:	3f800e6a 	.word	0x3f800e6a
 8007938:	40040000 	.word	0x40040000
 800793c:	00000000 	.word	0x00000000

08007940 <can1_ams_cell_voltages_v4s5_decode>:

double can1_ams_cell_voltages_v4s5_decode(uint8_t value)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	4618      	mov	r0, r3
 800794e:	f7f8 fdcb 	bl	80004e8 <__aeabi_ui2d>
 8007952:	a30e      	add	r3, pc, #56	; (adr r3, 800798c <can1_ams_cell_voltages_v4s5_decode+0x4c>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fe40 	bl	80005dc <__aeabi_dmul>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4610      	mov	r0, r2
 8007962:	4619      	mov	r1, r3
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <can1_ams_cell_voltages_v4s5_decode+0x48>)
 800796a:	f7f8 fc81 	bl	8000270 <__adddf3>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	ec43 2b17 	vmov	d7, r2, r3
}
 8007976:	eeb0 0a47 	vmov.f32	s0, s14
 800797a:	eef0 0a67 	vmov.f32	s1, s15
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	f3af 8000 	nop.w
 8007988:	40040000 	.word	0x40040000
 800798c:	fcce1c58 	.word	0xfcce1c58
 8007990:	3f800e6a 	.word	0x3f800e6a
 8007994:	00000000 	.word	0x00000000

08007998 <can1_ams_cell_voltages_v10s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s5_encode(double value)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <can1_ams_cell_voltages_v10s5_encode+0x50>)
 80079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ac:	f7f8 fc5e 	bl	800026c <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	a309      	add	r3, pc, #36	; (adr r3, 80079e0 <can1_ams_cell_voltages_v10s5_encode+0x48>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 ff37 	bl	8000830 <__aeabi_ddiv>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7f9 f8df 	bl	8000b8c <__aeabi_d2uiz>
 80079ce:	4603      	mov	r3, r0
 80079d0:	b2db      	uxtb	r3, r3
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	fcce1c58 	.word	0xfcce1c58
 80079e4:	3f800e6a 	.word	0x3f800e6a
 80079e8:	40040000 	.word	0x40040000
 80079ec:	00000000 	.word	0x00000000

080079f0 <can1_ams_cell_voltages_v10s5_decode>:

double can1_ams_cell_voltages_v10s5_decode(uint8_t value)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f8 fd73 	bl	80004e8 <__aeabi_ui2d>
 8007a02:	a30e      	add	r3, pc, #56	; (adr r3, 8007a3c <can1_ams_cell_voltages_v10s5_decode+0x4c>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fde8 	bl	80005dc <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <can1_ams_cell_voltages_v10s5_decode+0x48>)
 8007a1a:	f7f8 fc29 	bl	8000270 <__adddf3>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec43 2b17 	vmov	d7, r2, r3
}
 8007a26:	eeb0 0a47 	vmov.f32	s0, s14
 8007a2a:	eef0 0a67 	vmov.f32	s1, s15
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	f3af 8000 	nop.w
 8007a38:	40040000 	.word	0x40040000
 8007a3c:	fcce1c58 	.word	0xfcce1c58
 8007a40:	3f800e6a 	.word	0x3f800e6a
 8007a44:	00000000 	.word	0x00000000

08007a48 <can1_ams_cell_voltages_v4s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s6_encode(double value)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <can1_ams_cell_voltages_v4s6_encode+0x50>)
 8007a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5c:	f7f8 fc06 	bl	800026c <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	a309      	add	r3, pc, #36	; (adr r3, 8007a90 <can1_ams_cell_voltages_v4s6_encode+0x48>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fedf 	bl	8000830 <__aeabi_ddiv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7f9 f887 	bl	8000b8c <__aeabi_d2uiz>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	b2db      	uxtb	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w
 8007a90:	fcce1c58 	.word	0xfcce1c58
 8007a94:	3f800e6a 	.word	0x3f800e6a
 8007a98:	40040000 	.word	0x40040000
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <can1_ams_cell_voltages_v4s6_decode>:

double can1_ams_cell_voltages_v4s6_decode(uint8_t value)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd1b 	bl	80004e8 <__aeabi_ui2d>
 8007ab2:	a30e      	add	r3, pc, #56	; (adr r3, 8007aec <can1_ams_cell_voltages_v4s6_decode+0x4c>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fd90 	bl	80005dc <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <can1_ams_cell_voltages_v4s6_decode+0x48>)
 8007aca:	f7f8 fbd1 	bl	8000270 <__adddf3>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8007ada:	eef0 0a67 	vmov.f32	s1, s15
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	40040000 	.word	0x40040000
 8007aec:	fcce1c58 	.word	0xfcce1c58
 8007af0:	3f800e6a 	.word	0x3f800e6a
 8007af4:	00000000 	.word	0x00000000

08007af8 <can1_ams_cell_voltages_v10s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s6_encode(double value)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <can1_ams_cell_voltages_v10s6_encode+0x50>)
 8007b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0c:	f7f8 fbae 	bl	800026c <__aeabi_dsub>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4610      	mov	r0, r2
 8007b16:	4619      	mov	r1, r3
 8007b18:	a309      	add	r3, pc, #36	; (adr r3, 8007b40 <can1_ams_cell_voltages_v10s6_encode+0x48>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fe87 	bl	8000830 <__aeabi_ddiv>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f7f9 f82f 	bl	8000b8c <__aeabi_d2uiz>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	b2db      	uxtb	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	fcce1c58 	.word	0xfcce1c58
 8007b44:	3f800e6a 	.word	0x3f800e6a
 8007b48:	40040000 	.word	0x40040000
 8007b4c:	00000000 	.word	0x00000000

08007b50 <can1_ams_cell_voltages_v10s6_decode>:

double can1_ams_cell_voltages_v10s6_decode(uint8_t value)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7f8 fcc3 	bl	80004e8 <__aeabi_ui2d>
 8007b62:	a30e      	add	r3, pc, #56	; (adr r3, 8007b9c <can1_ams_cell_voltages_v10s6_decode+0x4c>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fd38 	bl	80005dc <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4610      	mov	r0, r2
 8007b72:	4619      	mov	r1, r3
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <can1_ams_cell_voltages_v10s6_decode+0x48>)
 8007b7a:	f7f8 fb79 	bl	8000270 <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	ec43 2b17 	vmov	d7, r2, r3
}
 8007b86:	eeb0 0a47 	vmov.f32	s0, s14
 8007b8a:	eef0 0a67 	vmov.f32	s1, s15
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	f3af 8000 	nop.w
 8007b98:	40040000 	.word	0x40040000
 8007b9c:	fcce1c58 	.word	0xfcce1c58
 8007ba0:	3f800e6a 	.word	0x3f800e6a
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <can1_ams_cell_voltages_v4s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s7_encode(double value)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <can1_ams_cell_voltages_v4s7_encode+0x50>)
 8007bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bbc:	f7f8 fb56 	bl	800026c <__aeabi_dsub>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	a309      	add	r3, pc, #36	; (adr r3, 8007bf0 <can1_ams_cell_voltages_v4s7_encode+0x48>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fe2f 	bl	8000830 <__aeabi_ddiv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 ffd7 	bl	8000b8c <__aeabi_d2uiz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	fcce1c58 	.word	0xfcce1c58
 8007bf4:	3f800e6a 	.word	0x3f800e6a
 8007bf8:	40040000 	.word	0x40040000
 8007bfc:	00000000 	.word	0x00000000

08007c00 <can1_ams_cell_voltages_v4s7_decode>:

double can1_ams_cell_voltages_v4s7_decode(uint8_t value)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc6b 	bl	80004e8 <__aeabi_ui2d>
 8007c12:	a30e      	add	r3, pc, #56	; (adr r3, 8007c4c <can1_ams_cell_voltages_v4s7_decode+0x4c>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fce0 	bl	80005dc <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <can1_ams_cell_voltages_v4s7_decode+0x48>)
 8007c2a:	f7f8 fb21 	bl	8000270 <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	ec43 2b17 	vmov	d7, r2, r3
}
 8007c36:	eeb0 0a47 	vmov.f32	s0, s14
 8007c3a:	eef0 0a67 	vmov.f32	s1, s15
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	f3af 8000 	nop.w
 8007c48:	40040000 	.word	0x40040000
 8007c4c:	fcce1c58 	.word	0xfcce1c58
 8007c50:	3f800e6a 	.word	0x3f800e6a
 8007c54:	00000000 	.word	0x00000000

08007c58 <can1_ams_cell_voltages_v10s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s7_encode(double value)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <can1_ams_cell_voltages_v10s7_encode+0x50>)
 8007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6c:	f7f8 fafe 	bl	800026c <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	a309      	add	r3, pc, #36	; (adr r3, 8007ca0 <can1_ams_cell_voltages_v10s7_encode+0x48>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fdd7 	bl	8000830 <__aeabi_ddiv>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 ff7f 	bl	8000b8c <__aeabi_d2uiz>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	b2db      	uxtb	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	fcce1c58 	.word	0xfcce1c58
 8007ca4:	3f800e6a 	.word	0x3f800e6a
 8007ca8:	40040000 	.word	0x40040000
 8007cac:	00000000 	.word	0x00000000

08007cb0 <can1_ams_cell_voltages_v10s7_decode>:

double can1_ams_cell_voltages_v10s7_decode(uint8_t value)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fc13 	bl	80004e8 <__aeabi_ui2d>
 8007cc2:	a30e      	add	r3, pc, #56	; (adr r3, 8007cfc <can1_ams_cell_voltages_v10s7_decode+0x4c>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc88 	bl	80005dc <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <can1_ams_cell_voltages_v10s7_decode+0x48>)
 8007cda:	f7f8 fac9 	bl	8000270 <__adddf3>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8007cea:	eef0 0a67 	vmov.f32	s1, s15
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	40040000 	.word	0x40040000
 8007cfc:	fcce1c58 	.word	0xfcce1c58
 8007d00:	3f800e6a 	.word	0x3f800e6a
 8007d04:	00000000 	.word	0x00000000

08007d08 <can1_ams_cell_voltages_v4s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s8_encode(double value)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <can1_ams_cell_voltages_v4s8_encode+0x50>)
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f7f8 faa6 	bl	800026c <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4610      	mov	r0, r2
 8007d26:	4619      	mov	r1, r3
 8007d28:	a309      	add	r3, pc, #36	; (adr r3, 8007d50 <can1_ams_cell_voltages_v4s8_encode+0x48>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fd7f 	bl	8000830 <__aeabi_ddiv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f7f8 ff27 	bl	8000b8c <__aeabi_d2uiz>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	fcce1c58 	.word	0xfcce1c58
 8007d54:	3f800e6a 	.word	0x3f800e6a
 8007d58:	40040000 	.word	0x40040000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <can1_ams_cell_voltages_v4s8_decode>:

double can1_ams_cell_voltages_v4s8_decode(uint8_t value)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f8 fbbb 	bl	80004e8 <__aeabi_ui2d>
 8007d72:	a30e      	add	r3, pc, #56	; (adr r3, 8007dac <can1_ams_cell_voltages_v4s8_decode+0x4c>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f7f8 fc30 	bl	80005dc <__aeabi_dmul>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <can1_ams_cell_voltages_v4s8_decode+0x48>)
 8007d8a:	f7f8 fa71 	bl	8000270 <__adddf3>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d96:	eeb0 0a47 	vmov.f32	s0, s14
 8007d9a:	eef0 0a67 	vmov.f32	s1, s15
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	f3af 8000 	nop.w
 8007da8:	40040000 	.word	0x40040000
 8007dac:	fcce1c58 	.word	0xfcce1c58
 8007db0:	3f800e6a 	.word	0x3f800e6a
 8007db4:	00000000 	.word	0x00000000

08007db8 <can1_ams_cell_voltages_v10s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s8_encode(double value)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <can1_ams_cell_voltages_v10s8_encode+0x50>)
 8007dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dcc:	f7f8 fa4e 	bl	800026c <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	a309      	add	r3, pc, #36	; (adr r3, 8007e00 <can1_ams_cell_voltages_v10s8_encode+0x48>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fd27 	bl	8000830 <__aeabi_ddiv>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 fecf 	bl	8000b8c <__aeabi_d2uiz>
 8007dee:	4603      	mov	r3, r0
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w
 8007e00:	fcce1c58 	.word	0xfcce1c58
 8007e04:	3f800e6a 	.word	0x3f800e6a
 8007e08:	40040000 	.word	0x40040000
 8007e0c:	00000000 	.word	0x00000000

08007e10 <can1_ams_cell_voltages_v10s8_decode>:

double can1_ams_cell_voltages_v10s8_decode(uint8_t value)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f8 fb63 	bl	80004e8 <__aeabi_ui2d>
 8007e22:	a30e      	add	r3, pc, #56	; (adr r3, 8007e5c <can1_ams_cell_voltages_v10s8_decode+0x4c>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fbd8 	bl	80005dc <__aeabi_dmul>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4610      	mov	r0, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <can1_ams_cell_voltages_v10s8_decode+0x48>)
 8007e3a:	f7f8 fa19 	bl	8000270 <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	ec43 2b17 	vmov	d7, r2, r3
}
 8007e46:	eeb0 0a47 	vmov.f32	s0, s14
 8007e4a:	eef0 0a67 	vmov.f32	s1, s15
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	f3af 8000 	nop.w
 8007e58:	40040000 	.word	0x40040000
 8007e5c:	fcce1c58 	.word	0xfcce1c58
 8007e60:	3f800e6a 	.word	0x3f800e6a
 8007e64:	00000000 	.word	0x00000000

08007e68 <can1_ams_cell_voltages_v4s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s9_encode(double value)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <can1_ams_cell_voltages_v4s9_encode+0x50>)
 8007e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7c:	f7f8 f9f6 	bl	800026c <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	a309      	add	r3, pc, #36	; (adr r3, 8007eb0 <can1_ams_cell_voltages_v4s9_encode+0x48>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fccf 	bl	8000830 <__aeabi_ddiv>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4610      	mov	r0, r2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7f8 fe77 	bl	8000b8c <__aeabi_d2uiz>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	b2db      	uxtb	r3, r3
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w
 8007eb0:	fcce1c58 	.word	0xfcce1c58
 8007eb4:	3f800e6a 	.word	0x3f800e6a
 8007eb8:	40040000 	.word	0x40040000
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <can1_ams_cell_voltages_v4s9_decode>:

double can1_ams_cell_voltages_v4s9_decode(uint8_t value)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb0b 	bl	80004e8 <__aeabi_ui2d>
 8007ed2:	a30e      	add	r3, pc, #56	; (adr r3, 8007f0c <can1_ams_cell_voltages_v4s9_decode+0x4c>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fb80 	bl	80005dc <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <can1_ams_cell_voltages_v4s9_decode+0x48>)
 8007eea:	f7f8 f9c1 	bl	8000270 <__adddf3>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8007efa:	eef0 0a67 	vmov.f32	s1, s15
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	f3af 8000 	nop.w
 8007f08:	40040000 	.word	0x40040000
 8007f0c:	fcce1c58 	.word	0xfcce1c58
 8007f10:	3f800e6a 	.word	0x3f800e6a
 8007f14:	00000000 	.word	0x00000000

08007f18 <can1_ams_cell_voltages_v10s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s9_encode(double value)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <can1_ams_cell_voltages_v10s9_encode+0x50>)
 8007f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2c:	f7f8 f99e 	bl	800026c <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	a309      	add	r3, pc, #36	; (adr r3, 8007f60 <can1_ams_cell_voltages_v10s9_encode+0x48>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fc77 	bl	8000830 <__aeabi_ddiv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f7f8 fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	b2db      	uxtb	r3, r3
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	fcce1c58 	.word	0xfcce1c58
 8007f64:	3f800e6a 	.word	0x3f800e6a
 8007f68:	40040000 	.word	0x40040000
 8007f6c:	00000000 	.word	0x00000000

08007f70 <can1_ams_cell_voltages_v10s9_decode>:

double can1_ams_cell_voltages_v10s9_decode(uint8_t value)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f8 fab3 	bl	80004e8 <__aeabi_ui2d>
 8007f82:	a30e      	add	r3, pc, #56	; (adr r3, 8007fbc <can1_ams_cell_voltages_v10s9_decode+0x4c>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fb28 	bl	80005dc <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <can1_ams_cell_voltages_v10s9_decode+0x48>)
 8007f9a:	f7f8 f969 	bl	8000270 <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8007fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8007faa:	eef0 0a67 	vmov.f32	s1, s15
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	40040000 	.word	0x40040000
 8007fbc:	fcce1c58 	.word	0xfcce1c58
 8007fc0:	3f800e6a 	.word	0x3f800e6a
 8007fc4:	00000000 	.word	0x00000000

08007fc8 <can1_ams_cell_voltages_v4s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s10_encode(double value)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <can1_ams_cell_voltages_v4s10_encode+0x50>)
 8007fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fdc:	f7f8 f946 	bl	800026c <__aeabi_dsub>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	a309      	add	r3, pc, #36	; (adr r3, 8008010 <can1_ams_cell_voltages_v4s10_encode+0x48>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fc1f 	bl	8000830 <__aeabi_ddiv>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7f8 fdc7 	bl	8000b8c <__aeabi_d2uiz>
 8007ffe:	4603      	mov	r3, r0
 8008000:	b2db      	uxtb	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w
 8008010:	fcce1c58 	.word	0xfcce1c58
 8008014:	3f800e6a 	.word	0x3f800e6a
 8008018:	40040000 	.word	0x40040000
 800801c:	00000000 	.word	0x00000000

08008020 <can1_ams_cell_voltages_v4s10_decode>:

double can1_ams_cell_voltages_v4s10_decode(uint8_t value)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	4618      	mov	r0, r3
 800802e:	f7f8 fa5b 	bl	80004e8 <__aeabi_ui2d>
 8008032:	a30e      	add	r3, pc, #56	; (adr r3, 800806c <can1_ams_cell_voltages_v4s10_decode+0x4c>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fad0 	bl	80005dc <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	4b07      	ldr	r3, [pc, #28]	; (8008068 <can1_ams_cell_voltages_v4s10_decode+0x48>)
 800804a:	f7f8 f911 	bl	8000270 <__adddf3>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	ec43 2b17 	vmov	d7, r2, r3
}
 8008056:	eeb0 0a47 	vmov.f32	s0, s14
 800805a:	eef0 0a67 	vmov.f32	s1, s15
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	f3af 8000 	nop.w
 8008068:	40040000 	.word	0x40040000
 800806c:	fcce1c58 	.word	0xfcce1c58
 8008070:	3f800e6a 	.word	0x3f800e6a
 8008074:	00000000 	.word	0x00000000

08008078 <can1_ams_cell_voltages_v10s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s10_encode(double value)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <can1_ams_cell_voltages_v10s10_encode+0x50>)
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	f7f8 f8ee 	bl	800026c <__aeabi_dsub>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4610      	mov	r0, r2
 8008096:	4619      	mov	r1, r3
 8008098:	a309      	add	r3, pc, #36	; (adr r3, 80080c0 <can1_ams_cell_voltages_v10s10_encode+0x48>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 fbc7 	bl	8000830 <__aeabi_ddiv>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7f8 fd6f 	bl	8000b8c <__aeabi_d2uiz>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b2db      	uxtb	r3, r3
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w
 80080c0:	fcce1c58 	.word	0xfcce1c58
 80080c4:	3f800e6a 	.word	0x3f800e6a
 80080c8:	40040000 	.word	0x40040000
 80080cc:	00000000 	.word	0x00000000

080080d0 <can1_ams_cell_voltages_v10s10_decode>:

double can1_ams_cell_voltages_v10s10_decode(uint8_t value)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f8 fa03 	bl	80004e8 <__aeabi_ui2d>
 80080e2:	a30e      	add	r3, pc, #56	; (adr r3, 800811c <can1_ams_cell_voltages_v10s10_decode+0x4c>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 fa78 	bl	80005dc <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	4b07      	ldr	r3, [pc, #28]	; (8008118 <can1_ams_cell_voltages_v10s10_decode+0x48>)
 80080fa:	f7f8 f8b9 	bl	8000270 <__adddf3>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	ec43 2b17 	vmov	d7, r2, r3
}
 8008106:	eeb0 0a47 	vmov.f32	s0, s14
 800810a:	eef0 0a67 	vmov.f32	s1, s15
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	f3af 8000 	nop.w
 8008118:	40040000 	.word	0x40040000
 800811c:	fcce1c58 	.word	0xfcce1c58
 8008120:	3f800e6a 	.word	0x3f800e6a
 8008124:	00000000 	.word	0x00000000

08008128 <can1_ams_cell_voltages_v4s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s11_encode(double value)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <can1_ams_cell_voltages_v4s11_encode+0x50>)
 8008138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813c:	f7f8 f896 	bl	800026c <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	a309      	add	r3, pc, #36	; (adr r3, 8008170 <can1_ams_cell_voltages_v4s11_encode+0x48>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 fb6f 	bl	8000830 <__aeabi_ddiv>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	f7f8 fd17 	bl	8000b8c <__aeabi_d2uiz>
 800815e:	4603      	mov	r3, r0
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w
 8008170:	fcce1c58 	.word	0xfcce1c58
 8008174:	3f800e6a 	.word	0x3f800e6a
 8008178:	40040000 	.word	0x40040000
 800817c:	00000000 	.word	0x00000000

08008180 <can1_ams_cell_voltages_v4s11_decode>:

double can1_ams_cell_voltages_v4s11_decode(uint8_t value)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	4618      	mov	r0, r3
 800818e:	f7f8 f9ab 	bl	80004e8 <__aeabi_ui2d>
 8008192:	a30e      	add	r3, pc, #56	; (adr r3, 80081cc <can1_ams_cell_voltages_v4s11_decode+0x4c>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 fa20 	bl	80005dc <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <can1_ams_cell_voltages_v4s11_decode+0x48>)
 80081aa:	f7f8 f861 	bl	8000270 <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80081b6:	eeb0 0a47 	vmov.f32	s0, s14
 80081ba:	eef0 0a67 	vmov.f32	s1, s15
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	f3af 8000 	nop.w
 80081c8:	40040000 	.word	0x40040000
 80081cc:	fcce1c58 	.word	0xfcce1c58
 80081d0:	3f800e6a 	.word	0x3f800e6a
 80081d4:	00000000 	.word	0x00000000

080081d8 <can1_ams_cell_voltages_v10s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s11_encode(double value)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <can1_ams_cell_voltages_v10s11_encode+0x50>)
 80081e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ec:	f7f8 f83e 	bl	800026c <__aeabi_dsub>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	a309      	add	r3, pc, #36	; (adr r3, 8008220 <can1_ams_cell_voltages_v10s11_encode+0x48>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 fb17 	bl	8000830 <__aeabi_ddiv>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	f7f8 fcbf 	bl	8000b8c <__aeabi_d2uiz>
 800820e:	4603      	mov	r3, r0
 8008210:	b2db      	uxtb	r3, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w
 8008220:	fcce1c58 	.word	0xfcce1c58
 8008224:	3f800e6a 	.word	0x3f800e6a
 8008228:	40040000 	.word	0x40040000
 800822c:	00000000 	.word	0x00000000

08008230 <can1_ams_cell_voltages_v10s11_decode>:

double can1_ams_cell_voltages_v10s11_decode(uint8_t value)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	4618      	mov	r0, r3
 800823e:	f7f8 f953 	bl	80004e8 <__aeabi_ui2d>
 8008242:	a30e      	add	r3, pc, #56	; (adr r3, 800827c <can1_ams_cell_voltages_v10s11_decode+0x4c>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9c8 	bl	80005dc <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <can1_ams_cell_voltages_v10s11_decode+0x48>)
 800825a:	f7f8 f809 	bl	8000270 <__adddf3>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	ec43 2b17 	vmov	d7, r2, r3
}
 8008266:	eeb0 0a47 	vmov.f32	s0, s14
 800826a:	eef0 0a67 	vmov.f32	s1, s15
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	f3af 8000 	nop.w
 8008278:	40040000 	.word	0x40040000
 800827c:	fcce1c58 	.word	0xfcce1c58
 8008280:	3f800e6a 	.word	0x3f800e6a
 8008284:	00000000 	.word	0x00000000

08008288 <can1_ams_cell_voltages_v4s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v4s12_encode(double value)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4b10      	ldr	r3, [pc, #64]	; (80082d8 <can1_ams_cell_voltages_v4s12_encode+0x50>)
 8008298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829c:	f7f7 ffe6 	bl	800026c <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4610      	mov	r0, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	a309      	add	r3, pc, #36	; (adr r3, 80082d0 <can1_ams_cell_voltages_v4s12_encode+0x48>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f8 fabf 	bl	8000830 <__aeabi_ddiv>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4610      	mov	r0, r2
 80082b8:	4619      	mov	r1, r3
 80082ba:	f7f8 fc67 	bl	8000b8c <__aeabi_d2uiz>
 80082be:	4603      	mov	r3, r0
 80082c0:	b2db      	uxtb	r3, r3
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w
 80082d0:	fcce1c58 	.word	0xfcce1c58
 80082d4:	3f800e6a 	.word	0x3f800e6a
 80082d8:	40040000 	.word	0x40040000
 80082dc:	00000000 	.word	0x00000000

080082e0 <can1_ams_cell_voltages_v4s12_decode>:

double can1_ams_cell_voltages_v4s12_decode(uint8_t value)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7f8 f8fb 	bl	80004e8 <__aeabi_ui2d>
 80082f2:	a30e      	add	r3, pc, #56	; (adr r3, 800832c <can1_ams_cell_voltages_v4s12_decode+0x4c>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f970 	bl	80005dc <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <can1_ams_cell_voltages_v4s12_decode+0x48>)
 800830a:	f7f7 ffb1 	bl	8000270 <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	ec43 2b17 	vmov	d7, r2, r3
}
 8008316:	eeb0 0a47 	vmov.f32	s0, s14
 800831a:	eef0 0a67 	vmov.f32	s1, s15
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	f3af 8000 	nop.w
 8008328:	40040000 	.word	0x40040000
 800832c:	fcce1c58 	.word	0xfcce1c58
 8008330:	3f800e6a 	.word	0x3f800e6a
 8008334:	00000000 	.word	0x00000000

08008338 <can1_ams_cell_voltages_v10s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v10s12_encode(double value)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <can1_ams_cell_voltages_v10s12_encode+0x50>)
 8008348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800834c:	f7f7 ff8e 	bl	800026c <__aeabi_dsub>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4610      	mov	r0, r2
 8008356:	4619      	mov	r1, r3
 8008358:	a309      	add	r3, pc, #36	; (adr r3, 8008380 <can1_ams_cell_voltages_v10s12_encode+0x48>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 fa67 	bl	8000830 <__aeabi_ddiv>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f7f8 fc0f 	bl	8000b8c <__aeabi_d2uiz>
 800836e:	4603      	mov	r3, r0
 8008370:	b2db      	uxtb	r3, r3
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	fcce1c58 	.word	0xfcce1c58
 8008384:	3f800e6a 	.word	0x3f800e6a
 8008388:	40040000 	.word	0x40040000
 800838c:	00000000 	.word	0x00000000

08008390 <can1_ams_cell_voltages_v10s12_decode>:

double can1_ams_cell_voltages_v10s12_decode(uint8_t value)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	4618      	mov	r0, r3
 800839e:	f7f8 f8a3 	bl	80004e8 <__aeabi_ui2d>
 80083a2:	a30e      	add	r3, pc, #56	; (adr r3, 80083dc <can1_ams_cell_voltages_v10s12_decode+0x4c>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 f918 	bl	80005dc <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4610      	mov	r0, r2
 80083b2:	4619      	mov	r1, r3
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <can1_ams_cell_voltages_v10s12_decode+0x48>)
 80083ba:	f7f7 ff59 	bl	8000270 <__adddf3>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80083c6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ca:	eef0 0a67 	vmov.f32	s1, s15
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	f3af 8000 	nop.w
 80083d8:	40040000 	.word	0x40040000
 80083dc:	fcce1c58 	.word	0xfcce1c58
 80083e0:	3f800e6a 	.word	0x3f800e6a
 80083e4:	00000000 	.word	0x00000000

080083e8 <can1_ams_cell_voltages_v5s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s1_encode(double value)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <can1_ams_cell_voltages_v5s1_encode+0x50>)
 80083f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fc:	f7f7 ff36 	bl	800026c <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	a309      	add	r3, pc, #36	; (adr r3, 8008430 <can1_ams_cell_voltages_v5s1_encode+0x48>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 fa0f 	bl	8000830 <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 fbb7 	bl	8000b8c <__aeabi_d2uiz>
 800841e:	4603      	mov	r3, r0
 8008420:	b2db      	uxtb	r3, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	fcce1c58 	.word	0xfcce1c58
 8008434:	3f800e6a 	.word	0x3f800e6a
 8008438:	40040000 	.word	0x40040000
 800843c:	00000000 	.word	0x00000000

08008440 <can1_ams_cell_voltages_v5s1_decode>:

double can1_ams_cell_voltages_v5s1_decode(uint8_t value)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	4618      	mov	r0, r3
 800844e:	f7f8 f84b 	bl	80004e8 <__aeabi_ui2d>
 8008452:	a30e      	add	r3, pc, #56	; (adr r3, 800848c <can1_ams_cell_voltages_v5s1_decode+0x4c>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f7f8 f8c0 	bl	80005dc <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4610      	mov	r0, r2
 8008462:	4619      	mov	r1, r3
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <can1_ams_cell_voltages_v5s1_decode+0x48>)
 800846a:	f7f7 ff01 	bl	8000270 <__adddf3>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	ec43 2b17 	vmov	d7, r2, r3
}
 8008476:	eeb0 0a47 	vmov.f32	s0, s14
 800847a:	eef0 0a67 	vmov.f32	s1, s15
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	f3af 8000 	nop.w
 8008488:	40040000 	.word	0x40040000
 800848c:	fcce1c58 	.word	0xfcce1c58
 8008490:	3f800e6a 	.word	0x3f800e6a
 8008494:	00000000 	.word	0x00000000

08008498 <can1_ams_cell_voltages_v11s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s1_encode(double value)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <can1_ams_cell_voltages_v11s1_encode+0x50>)
 80084a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ac:	f7f7 fede 	bl	800026c <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	a309      	add	r3, pc, #36	; (adr r3, 80084e0 <can1_ams_cell_voltages_v11s1_encode+0x48>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f8 f9b7 	bl	8000830 <__aeabi_ddiv>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7f8 fb5f 	bl	8000b8c <__aeabi_d2uiz>
 80084ce:	4603      	mov	r3, r0
 80084d0:	b2db      	uxtb	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	fcce1c58 	.word	0xfcce1c58
 80084e4:	3f800e6a 	.word	0x3f800e6a
 80084e8:	40040000 	.word	0x40040000
 80084ec:	00000000 	.word	0x00000000

080084f0 <can1_ams_cell_voltages_v11s1_decode>:

double can1_ams_cell_voltages_v11s1_decode(uint8_t value)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f7 fff3 	bl	80004e8 <__aeabi_ui2d>
 8008502:	a30e      	add	r3, pc, #56	; (adr r3, 800853c <can1_ams_cell_voltages_v11s1_decode+0x4c>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f8 f868 	bl	80005dc <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4610      	mov	r0, r2
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <can1_ams_cell_voltages_v11s1_decode+0x48>)
 800851a:	f7f7 fea9 	bl	8000270 <__adddf3>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	ec43 2b17 	vmov	d7, r2, r3
}
 8008526:	eeb0 0a47 	vmov.f32	s0, s14
 800852a:	eef0 0a67 	vmov.f32	s1, s15
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	f3af 8000 	nop.w
 8008538:	40040000 	.word	0x40040000
 800853c:	fcce1c58 	.word	0xfcce1c58
 8008540:	3f800e6a 	.word	0x3f800e6a
 8008544:	00000000 	.word	0x00000000

08008548 <can1_ams_cell_voltages_v5s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s2_encode(double value)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <can1_ams_cell_voltages_v5s2_encode+0x50>)
 8008558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800855c:	f7f7 fe86 	bl	800026c <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	a309      	add	r3, pc, #36	; (adr r3, 8008590 <can1_ams_cell_voltages_v5s2_encode+0x48>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 f95f 	bl	8000830 <__aeabi_ddiv>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f7f8 fb07 	bl	8000b8c <__aeabi_d2uiz>
 800857e:	4603      	mov	r3, r0
 8008580:	b2db      	uxtb	r3, r3
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w
 8008590:	fcce1c58 	.word	0xfcce1c58
 8008594:	3f800e6a 	.word	0x3f800e6a
 8008598:	40040000 	.word	0x40040000
 800859c:	00000000 	.word	0x00000000

080085a0 <can1_ams_cell_voltages_v5s2_decode>:

double can1_ams_cell_voltages_v5s2_decode(uint8_t value)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 ff9b 	bl	80004e8 <__aeabi_ui2d>
 80085b2:	a30e      	add	r3, pc, #56	; (adr r3, 80085ec <can1_ams_cell_voltages_v5s2_decode+0x4c>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f8 f810 	bl	80005dc <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4610      	mov	r0, r2
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <can1_ams_cell_voltages_v5s2_decode+0x48>)
 80085ca:	f7f7 fe51 	bl	8000270 <__adddf3>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80085d6:	eeb0 0a47 	vmov.f32	s0, s14
 80085da:	eef0 0a67 	vmov.f32	s1, s15
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	f3af 8000 	nop.w
 80085e8:	40040000 	.word	0x40040000
 80085ec:	fcce1c58 	.word	0xfcce1c58
 80085f0:	3f800e6a 	.word	0x3f800e6a
 80085f4:	00000000 	.word	0x00000000

080085f8 <can1_ams_cell_voltages_v5s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s3_encode(double value)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <can1_ams_cell_voltages_v5s3_encode+0x50>)
 8008608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800860c:	f7f7 fe2e 	bl	800026c <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4610      	mov	r0, r2
 8008616:	4619      	mov	r1, r3
 8008618:	a309      	add	r3, pc, #36	; (adr r3, 8008640 <can1_ams_cell_voltages_v5s3_encode+0x48>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f907 	bl	8000830 <__aeabi_ddiv>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	f7f8 faaf 	bl	8000b8c <__aeabi_d2uiz>
 800862e:	4603      	mov	r3, r0
 8008630:	b2db      	uxtb	r3, r3
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w
 8008640:	fcce1c58 	.word	0xfcce1c58
 8008644:	3f800e6a 	.word	0x3f800e6a
 8008648:	40040000 	.word	0x40040000
 800864c:	00000000 	.word	0x00000000

08008650 <can1_ams_cell_voltages_v5s3_decode>:

double can1_ams_cell_voltages_v5s3_decode(uint8_t value)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 ff43 	bl	80004e8 <__aeabi_ui2d>
 8008662:	a30e      	add	r3, pc, #56	; (adr r3, 800869c <can1_ams_cell_voltages_v5s3_decode+0x4c>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffb8 	bl	80005dc <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <can1_ams_cell_voltages_v5s3_decode+0x48>)
 800867a:	f7f7 fdf9 	bl	8000270 <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	ec43 2b17 	vmov	d7, r2, r3
}
 8008686:	eeb0 0a47 	vmov.f32	s0, s14
 800868a:	eef0 0a67 	vmov.f32	s1, s15
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	f3af 8000 	nop.w
 8008698:	40040000 	.word	0x40040000
 800869c:	fcce1c58 	.word	0xfcce1c58
 80086a0:	3f800e6a 	.word	0x3f800e6a
 80086a4:	00000000 	.word	0x00000000

080086a8 <can1_ams_cell_voltages_v11s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s3_encode(double value)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <can1_ams_cell_voltages_v11s3_encode+0x50>)
 80086b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086bc:	f7f7 fdd6 	bl	800026c <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	a309      	add	r3, pc, #36	; (adr r3, 80086f0 <can1_ams_cell_voltages_v11s3_encode+0x48>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f8 f8af 	bl	8000830 <__aeabi_ddiv>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	f7f8 fa57 	bl	8000b8c <__aeabi_d2uiz>
 80086de:	4603      	mov	r3, r0
 80086e0:	b2db      	uxtb	r3, r3
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w
 80086f0:	fcce1c58 	.word	0xfcce1c58
 80086f4:	3f800e6a 	.word	0x3f800e6a
 80086f8:	40040000 	.word	0x40040000
 80086fc:	00000000 	.word	0x00000000

08008700 <can1_ams_cell_voltages_v11s3_decode>:

double can1_ams_cell_voltages_v11s3_decode(uint8_t value)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 feeb 	bl	80004e8 <__aeabi_ui2d>
 8008712:	a30e      	add	r3, pc, #56	; (adr r3, 800874c <can1_ams_cell_voltages_v11s3_decode+0x4c>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 ff60 	bl	80005dc <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4610      	mov	r0, r2
 8008722:	4619      	mov	r1, r3
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <can1_ams_cell_voltages_v11s3_decode+0x48>)
 800872a:	f7f7 fda1 	bl	8000270 <__adddf3>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	ec43 2b17 	vmov	d7, r2, r3
}
 8008736:	eeb0 0a47 	vmov.f32	s0, s14
 800873a:	eef0 0a67 	vmov.f32	s1, s15
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	f3af 8000 	nop.w
 8008748:	40040000 	.word	0x40040000
 800874c:	fcce1c58 	.word	0xfcce1c58
 8008750:	3f800e6a 	.word	0x3f800e6a
 8008754:	00000000 	.word	0x00000000

08008758 <can1_ams_cell_voltages_v5s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s4_encode(double value)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <can1_ams_cell_voltages_v5s4_encode+0x50>)
 8008768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800876c:	f7f7 fd7e 	bl	800026c <__aeabi_dsub>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	a309      	add	r3, pc, #36	; (adr r3, 80087a0 <can1_ams_cell_voltages_v5s4_encode+0x48>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f8 f857 	bl	8000830 <__aeabi_ddiv>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	f7f8 f9ff 	bl	8000b8c <__aeabi_d2uiz>
 800878e:	4603      	mov	r3, r0
 8008790:	b2db      	uxtb	r3, r3
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w
 80087a0:	fcce1c58 	.word	0xfcce1c58
 80087a4:	3f800e6a 	.word	0x3f800e6a
 80087a8:	40040000 	.word	0x40040000
 80087ac:	00000000 	.word	0x00000000

080087b0 <can1_ams_cell_voltages_v5s4_decode>:

double can1_ams_cell_voltages_v5s4_decode(uint8_t value)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f7 fe93 	bl	80004e8 <__aeabi_ui2d>
 80087c2:	a30e      	add	r3, pc, #56	; (adr r3, 80087fc <can1_ams_cell_voltages_v5s4_decode+0x4c>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 ff08 	bl	80005dc <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4610      	mov	r0, r2
 80087d2:	4619      	mov	r1, r3
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <can1_ams_cell_voltages_v5s4_decode+0x48>)
 80087da:	f7f7 fd49 	bl	8000270 <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80087e6:	eeb0 0a47 	vmov.f32	s0, s14
 80087ea:	eef0 0a67 	vmov.f32	s1, s15
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	f3af 8000 	nop.w
 80087f8:	40040000 	.word	0x40040000
 80087fc:	fcce1c58 	.word	0xfcce1c58
 8008800:	3f800e6a 	.word	0x3f800e6a
 8008804:	00000000 	.word	0x00000000

08008808 <can1_ams_cell_voltages_v5s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s5_encode(double value)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <can1_ams_cell_voltages_v5s5_encode+0x50>)
 8008818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800881c:	f7f7 fd26 	bl	800026c <__aeabi_dsub>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4610      	mov	r0, r2
 8008826:	4619      	mov	r1, r3
 8008828:	a309      	add	r3, pc, #36	; (adr r3, 8008850 <can1_ams_cell_voltages_v5s5_encode+0x48>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 ffff 	bl	8000830 <__aeabi_ddiv>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f8 f9a7 	bl	8000b8c <__aeabi_d2uiz>
 800883e:	4603      	mov	r3, r0
 8008840:	b2db      	uxtb	r3, r3
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
 8008850:	fcce1c58 	.word	0xfcce1c58
 8008854:	3f800e6a 	.word	0x3f800e6a
 8008858:	40040000 	.word	0x40040000
 800885c:	00000000 	.word	0x00000000

08008860 <can1_ams_cell_voltages_v5s5_decode>:

double can1_ams_cell_voltages_v5s5_decode(uint8_t value)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4618      	mov	r0, r3
 800886e:	f7f7 fe3b 	bl	80004e8 <__aeabi_ui2d>
 8008872:	a30e      	add	r3, pc, #56	; (adr r3, 80088ac <can1_ams_cell_voltages_v5s5_decode+0x4c>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 feb0 	bl	80005dc <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <can1_ams_cell_voltages_v5s5_decode+0x48>)
 800888a:	f7f7 fcf1 	bl	8000270 <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	ec43 2b17 	vmov	d7, r2, r3
}
 8008896:	eeb0 0a47 	vmov.f32	s0, s14
 800889a:	eef0 0a67 	vmov.f32	s1, s15
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	f3af 8000 	nop.w
 80088a8:	40040000 	.word	0x40040000
 80088ac:	fcce1c58 	.word	0xfcce1c58
 80088b0:	3f800e6a 	.word	0x3f800e6a
 80088b4:	00000000 	.word	0x00000000

080088b8 <can1_ams_cell_voltages_v11s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s5_encode(double value)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <can1_ams_cell_voltages_v11s5_encode+0x50>)
 80088c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088cc:	f7f7 fcce 	bl	800026c <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	a309      	add	r3, pc, #36	; (adr r3, 8008900 <can1_ams_cell_voltages_v11s5_encode+0x48>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 ffa7 	bl	8000830 <__aeabi_ddiv>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f94f 	bl	8000b8c <__aeabi_d2uiz>
 80088ee:	4603      	mov	r3, r0
 80088f0:	b2db      	uxtb	r3, r3
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	fcce1c58 	.word	0xfcce1c58
 8008904:	3f800e6a 	.word	0x3f800e6a
 8008908:	40040000 	.word	0x40040000
 800890c:	00000000 	.word	0x00000000

08008910 <can1_ams_cell_voltages_v11s5_decode>:

double can1_ams_cell_voltages_v11s5_decode(uint8_t value)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	4618      	mov	r0, r3
 800891e:	f7f7 fde3 	bl	80004e8 <__aeabi_ui2d>
 8008922:	a30e      	add	r3, pc, #56	; (adr r3, 800895c <can1_ams_cell_voltages_v11s5_decode+0x4c>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe58 	bl	80005dc <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <can1_ams_cell_voltages_v11s5_decode+0x48>)
 800893a:	f7f7 fc99 	bl	8000270 <__adddf3>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	ec43 2b17 	vmov	d7, r2, r3
}
 8008946:	eeb0 0a47 	vmov.f32	s0, s14
 800894a:	eef0 0a67 	vmov.f32	s1, s15
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	f3af 8000 	nop.w
 8008958:	40040000 	.word	0x40040000
 800895c:	fcce1c58 	.word	0xfcce1c58
 8008960:	3f800e6a 	.word	0x3f800e6a
 8008964:	00000000 	.word	0x00000000

08008968 <can1_ams_cell_voltages_v5s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s6_encode(double value)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <can1_ams_cell_voltages_v5s6_encode+0x50>)
 8008978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897c:	f7f7 fc76 	bl	800026c <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4610      	mov	r0, r2
 8008986:	4619      	mov	r1, r3
 8008988:	a309      	add	r3, pc, #36	; (adr r3, 80089b0 <can1_ams_cell_voltages_v5s6_encode+0x48>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 ff4f 	bl	8000830 <__aeabi_ddiv>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	f7f8 f8f7 	bl	8000b8c <__aeabi_d2uiz>
 800899e:	4603      	mov	r3, r0
 80089a0:	b2db      	uxtb	r3, r3
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w
 80089b0:	fcce1c58 	.word	0xfcce1c58
 80089b4:	3f800e6a 	.word	0x3f800e6a
 80089b8:	40040000 	.word	0x40040000
 80089bc:	00000000 	.word	0x00000000

080089c0 <can1_ams_cell_voltages_v5s6_decode>:

double can1_ams_cell_voltages_v5s6_decode(uint8_t value)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f7 fd8b 	bl	80004e8 <__aeabi_ui2d>
 80089d2:	a30e      	add	r3, pc, #56	; (adr r3, 8008a0c <can1_ams_cell_voltages_v5s6_decode+0x4c>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe00 	bl	80005dc <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4610      	mov	r0, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <can1_ams_cell_voltages_v5s6_decode+0x48>)
 80089ea:	f7f7 fc41 	bl	8000270 <__adddf3>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80089f6:	eeb0 0a47 	vmov.f32	s0, s14
 80089fa:	eef0 0a67 	vmov.f32	s1, s15
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	f3af 8000 	nop.w
 8008a08:	40040000 	.word	0x40040000
 8008a0c:	fcce1c58 	.word	0xfcce1c58
 8008a10:	3f800e6a 	.word	0x3f800e6a
 8008a14:	00000000 	.word	0x00000000

08008a18 <can1_ams_cell_voltages_v5s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s7_encode(double value)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <can1_ams_cell_voltages_v5s7_encode+0x50>)
 8008a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a2c:	f7f7 fc1e 	bl	800026c <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4610      	mov	r0, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	a309      	add	r3, pc, #36	; (adr r3, 8008a60 <can1_ams_cell_voltages_v5s7_encode+0x48>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fef7 	bl	8000830 <__aeabi_ddiv>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f89f 	bl	8000b8c <__aeabi_d2uiz>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	b2db      	uxtb	r3, r3
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	fcce1c58 	.word	0xfcce1c58
 8008a64:	3f800e6a 	.word	0x3f800e6a
 8008a68:	40040000 	.word	0x40040000
 8008a6c:	00000000 	.word	0x00000000

08008a70 <can1_ams_cell_voltages_v5s7_decode>:

double can1_ams_cell_voltages_v5s7_decode(uint8_t value)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f7 fd33 	bl	80004e8 <__aeabi_ui2d>
 8008a82:	a30e      	add	r3, pc, #56	; (adr r3, 8008abc <can1_ams_cell_voltages_v5s7_decode+0x4c>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fda8 	bl	80005dc <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4610      	mov	r0, r2
 8008a92:	4619      	mov	r1, r3
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <can1_ams_cell_voltages_v5s7_decode+0x48>)
 8008a9a:	f7f7 fbe9 	bl	8000270 <__adddf3>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8008aaa:	eef0 0a67 	vmov.f32	s1, s15
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	40040000 	.word	0x40040000
 8008abc:	fcce1c58 	.word	0xfcce1c58
 8008ac0:	3f800e6a 	.word	0x3f800e6a
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <can1_ams_cell_voltages_v11s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s7_encode(double value)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <can1_ams_cell_voltages_v11s7_encode+0x50>)
 8008ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008adc:	f7f7 fbc6 	bl	800026c <__aeabi_dsub>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	a309      	add	r3, pc, #36	; (adr r3, 8008b10 <can1_ams_cell_voltages_v11s7_encode+0x48>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fe9f 	bl	8000830 <__aeabi_ddiv>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7f8 f847 	bl	8000b8c <__aeabi_d2uiz>
 8008afe:	4603      	mov	r3, r0
 8008b00:	b2db      	uxtb	r3, r3
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	fcce1c58 	.word	0xfcce1c58
 8008b14:	3f800e6a 	.word	0x3f800e6a
 8008b18:	40040000 	.word	0x40040000
 8008b1c:	00000000 	.word	0x00000000

08008b20 <can1_ams_cell_voltages_v11s7_decode>:

double can1_ams_cell_voltages_v11s7_decode(uint8_t value)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f7 fcdb 	bl	80004e8 <__aeabi_ui2d>
 8008b32:	a30e      	add	r3, pc, #56	; (adr r3, 8008b6c <can1_ams_cell_voltages_v11s7_decode+0x4c>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd50 	bl	80005dc <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4610      	mov	r0, r2
 8008b42:	4619      	mov	r1, r3
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <can1_ams_cell_voltages_v11s7_decode+0x48>)
 8008b4a:	f7f7 fb91 	bl	8000270 <__adddf3>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	ec43 2b17 	vmov	d7, r2, r3
}
 8008b56:	eeb0 0a47 	vmov.f32	s0, s14
 8008b5a:	eef0 0a67 	vmov.f32	s1, s15
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	f3af 8000 	nop.w
 8008b68:	40040000 	.word	0x40040000
 8008b6c:	fcce1c58 	.word	0xfcce1c58
 8008b70:	3f800e6a 	.word	0x3f800e6a
 8008b74:	00000000 	.word	0x00000000

08008b78 <can1_ams_cell_voltages_v5s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s8_encode(double value)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <can1_ams_cell_voltages_v5s8_encode+0x50>)
 8008b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b8c:	f7f7 fb6e 	bl	800026c <__aeabi_dsub>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	a309      	add	r3, pc, #36	; (adr r3, 8008bc0 <can1_ams_cell_voltages_v5s8_encode+0x48>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fe47 	bl	8000830 <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f7 ffef 	bl	8000b8c <__aeabi_d2uiz>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b2db      	uxtb	r3, r3
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	fcce1c58 	.word	0xfcce1c58
 8008bc4:	3f800e6a 	.word	0x3f800e6a
 8008bc8:	40040000 	.word	0x40040000
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <can1_ams_cell_voltages_v5s8_decode>:

double can1_ams_cell_voltages_v5s8_decode(uint8_t value)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fc83 	bl	80004e8 <__aeabi_ui2d>
 8008be2:	a30e      	add	r3, pc, #56	; (adr r3, 8008c1c <can1_ams_cell_voltages_v5s8_decode+0x4c>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fcf8 	bl	80005dc <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <can1_ams_cell_voltages_v5s8_decode+0x48>)
 8008bfa:	f7f7 fb39 	bl	8000270 <__adddf3>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	ec43 2b17 	vmov	d7, r2, r3
}
 8008c06:	eeb0 0a47 	vmov.f32	s0, s14
 8008c0a:	eef0 0a67 	vmov.f32	s1, s15
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	f3af 8000 	nop.w
 8008c18:	40040000 	.word	0x40040000
 8008c1c:	fcce1c58 	.word	0xfcce1c58
 8008c20:	3f800e6a 	.word	0x3f800e6a
 8008c24:	00000000 	.word	0x00000000

08008c28 <can1_ams_cell_voltages_v5s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s9_encode(double value)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <can1_ams_cell_voltages_v5s9_encode+0x50>)
 8008c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c3c:	f7f7 fb16 	bl	800026c <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	a309      	add	r3, pc, #36	; (adr r3, 8008c70 <can1_ams_cell_voltages_v5s9_encode+0x48>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fdef 	bl	8000830 <__aeabi_ddiv>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7f7 ff97 	bl	8000b8c <__aeabi_d2uiz>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	b2db      	uxtb	r3, r3
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w
 8008c70:	fcce1c58 	.word	0xfcce1c58
 8008c74:	3f800e6a 	.word	0x3f800e6a
 8008c78:	40040000 	.word	0x40040000
 8008c7c:	00000000 	.word	0x00000000

08008c80 <can1_ams_cell_voltages_v5s9_decode>:

double can1_ams_cell_voltages_v5s9_decode(uint8_t value)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fc2b 	bl	80004e8 <__aeabi_ui2d>
 8008c92:	a30e      	add	r3, pc, #56	; (adr r3, 8008ccc <can1_ams_cell_voltages_v5s9_decode+0x4c>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fca0 	bl	80005dc <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <can1_ams_cell_voltages_v5s9_decode+0x48>)
 8008caa:	f7f7 fae1 	bl	8000270 <__adddf3>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008cba:	eef0 0a67 	vmov.f32	s1, s15
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	f3af 8000 	nop.w
 8008cc8:	40040000 	.word	0x40040000
 8008ccc:	fcce1c58 	.word	0xfcce1c58
 8008cd0:	3f800e6a 	.word	0x3f800e6a
 8008cd4:	00000000 	.word	0x00000000

08008cd8 <can1_ams_cell_voltages_v11s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s9_encode(double value)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <can1_ams_cell_voltages_v11s9_encode+0x50>)
 8008ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cec:	f7f7 fabe 	bl	800026c <__aeabi_dsub>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	a309      	add	r3, pc, #36	; (adr r3, 8008d20 <can1_ams_cell_voltages_v11s9_encode+0x48>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fd97 	bl	8000830 <__aeabi_ddiv>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff3f 	bl	8000b8c <__aeabi_d2uiz>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	b2db      	uxtb	r3, r3
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	fcce1c58 	.word	0xfcce1c58
 8008d24:	3f800e6a 	.word	0x3f800e6a
 8008d28:	40040000 	.word	0x40040000
 8008d2c:	00000000 	.word	0x00000000

08008d30 <can1_ams_cell_voltages_v11s9_decode>:

double can1_ams_cell_voltages_v11s9_decode(uint8_t value)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f7 fbd3 	bl	80004e8 <__aeabi_ui2d>
 8008d42:	a30e      	add	r3, pc, #56	; (adr r3, 8008d7c <can1_ams_cell_voltages_v11s9_decode+0x4c>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fc48 	bl	80005dc <__aeabi_dmul>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4610      	mov	r0, r2
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <can1_ams_cell_voltages_v11s9_decode+0x48>)
 8008d5a:	f7f7 fa89 	bl	8000270 <__adddf3>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	ec43 2b17 	vmov	d7, r2, r3
}
 8008d66:	eeb0 0a47 	vmov.f32	s0, s14
 8008d6a:	eef0 0a67 	vmov.f32	s1, s15
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	f3af 8000 	nop.w
 8008d78:	40040000 	.word	0x40040000
 8008d7c:	fcce1c58 	.word	0xfcce1c58
 8008d80:	3f800e6a 	.word	0x3f800e6a
 8008d84:	00000000 	.word	0x00000000

08008d88 <can1_ams_cell_voltages_v5s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s10_encode(double value)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <can1_ams_cell_voltages_v5s10_encode+0x50>)
 8008d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d9c:	f7f7 fa66 	bl	800026c <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	a309      	add	r3, pc, #36	; (adr r3, 8008dd0 <can1_ams_cell_voltages_v5s10_encode+0x48>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fd3f 	bl	8000830 <__aeabi_ddiv>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7f7 fee7 	bl	8000b8c <__aeabi_d2uiz>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b2db      	uxtb	r3, r3
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	fcce1c58 	.word	0xfcce1c58
 8008dd4:	3f800e6a 	.word	0x3f800e6a
 8008dd8:	40040000 	.word	0x40040000
 8008ddc:	00000000 	.word	0x00000000

08008de0 <can1_ams_cell_voltages_v5s10_decode>:

double can1_ams_cell_voltages_v5s10_decode(uint8_t value)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fb7b 	bl	80004e8 <__aeabi_ui2d>
 8008df2:	a30e      	add	r3, pc, #56	; (adr r3, 8008e2c <can1_ams_cell_voltages_v5s10_decode+0x4c>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fbf0 	bl	80005dc <__aeabi_dmul>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4610      	mov	r0, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <can1_ams_cell_voltages_v5s10_decode+0x48>)
 8008e0a:	f7f7 fa31 	bl	8000270 <__adddf3>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e16:	eeb0 0a47 	vmov.f32	s0, s14
 8008e1a:	eef0 0a67 	vmov.f32	s1, s15
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	f3af 8000 	nop.w
 8008e28:	40040000 	.word	0x40040000
 8008e2c:	fcce1c58 	.word	0xfcce1c58
 8008e30:	3f800e6a 	.word	0x3f800e6a
 8008e34:	00000000 	.word	0x00000000

08008e38 <can1_ams_cell_voltages_v5s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s11_encode(double value)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <can1_ams_cell_voltages_v5s11_encode+0x50>)
 8008e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e4c:	f7f7 fa0e 	bl	800026c <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	a309      	add	r3, pc, #36	; (adr r3, 8008e80 <can1_ams_cell_voltages_v5s11_encode+0x48>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fce7 	bl	8000830 <__aeabi_ddiv>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7f7 fe8f 	bl	8000b8c <__aeabi_d2uiz>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b2db      	uxtb	r3, r3
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
 8008e80:	fcce1c58 	.word	0xfcce1c58
 8008e84:	3f800e6a 	.word	0x3f800e6a
 8008e88:	40040000 	.word	0x40040000
 8008e8c:	00000000 	.word	0x00000000

08008e90 <can1_ams_cell_voltages_v5s11_decode>:

double can1_ams_cell_voltages_v5s11_decode(uint8_t value)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f7 fb23 	bl	80004e8 <__aeabi_ui2d>
 8008ea2:	a30e      	add	r3, pc, #56	; (adr r3, 8008edc <can1_ams_cell_voltages_v5s11_decode+0x4c>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	f7f7 fb98 	bl	80005dc <__aeabi_dmul>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <can1_ams_cell_voltages_v5s11_decode+0x48>)
 8008eba:	f7f7 f9d9 	bl	8000270 <__adddf3>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	ec43 2b17 	vmov	d7, r2, r3
}
 8008ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eca:	eef0 0a67 	vmov.f32	s1, s15
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	40040000 	.word	0x40040000
 8008edc:	fcce1c58 	.word	0xfcce1c58
 8008ee0:	3f800e6a 	.word	0x3f800e6a
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <can1_ams_cell_voltages_v11s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v11s11_encode(double value)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <can1_ams_cell_voltages_v11s11_encode+0x50>)
 8008ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008efc:	f7f7 f9b6 	bl	800026c <__aeabi_dsub>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4610      	mov	r0, r2
 8008f06:	4619      	mov	r1, r3
 8008f08:	a309      	add	r3, pc, #36	; (adr r3, 8008f30 <can1_ams_cell_voltages_v11s11_encode+0x48>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fc8f 	bl	8000830 <__aeabi_ddiv>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f7f7 fe37 	bl	8000b8c <__aeabi_d2uiz>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	f3af 8000 	nop.w
 8008f30:	fcce1c58 	.word	0xfcce1c58
 8008f34:	3f800e6a 	.word	0x3f800e6a
 8008f38:	40040000 	.word	0x40040000
 8008f3c:	00000000 	.word	0x00000000

08008f40 <can1_ams_cell_voltages_v11s11_decode>:

double can1_ams_cell_voltages_v11s11_decode(uint8_t value)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 facb 	bl	80004e8 <__aeabi_ui2d>
 8008f52:	a30e      	add	r3, pc, #56	; (adr r3, 8008f8c <can1_ams_cell_voltages_v11s11_decode+0x4c>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 fb40 	bl	80005dc <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <can1_ams_cell_voltages_v11s11_decode+0x48>)
 8008f6a:	f7f7 f981 	bl	8000270 <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	ec43 2b17 	vmov	d7, r2, r3
}
 8008f76:	eeb0 0a47 	vmov.f32	s0, s14
 8008f7a:	eef0 0a67 	vmov.f32	s1, s15
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	f3af 8000 	nop.w
 8008f88:	40040000 	.word	0x40040000
 8008f8c:	fcce1c58 	.word	0xfcce1c58
 8008f90:	3f800e6a 	.word	0x3f800e6a
 8008f94:	00000000 	.word	0x00000000

08008f98 <can1_ams_cell_voltages_v5s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v5s12_encode(double value)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8008fa2:	f04f 0200 	mov.w	r2, #0
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <can1_ams_cell_voltages_v5s12_encode+0x50>)
 8008fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fac:	f7f7 f95e 	bl	800026c <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	a309      	add	r3, pc, #36	; (adr r3, 8008fe0 <can1_ams_cell_voltages_v5s12_encode+0x48>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 fc37 	bl	8000830 <__aeabi_ddiv>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7f7 fddf 	bl	8000b8c <__aeabi_d2uiz>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	b2db      	uxtb	r3, r3
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	fcce1c58 	.word	0xfcce1c58
 8008fe4:	3f800e6a 	.word	0x3f800e6a
 8008fe8:	40040000 	.word	0x40040000
 8008fec:	00000000 	.word	0x00000000

08008ff0 <can1_ams_cell_voltages_v5s12_decode>:

double can1_ams_cell_voltages_v5s12_decode(uint8_t value)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f7 fa73 	bl	80004e8 <__aeabi_ui2d>
 8009002:	a30e      	add	r3, pc, #56	; (adr r3, 800903c <can1_ams_cell_voltages_v5s12_decode+0x4c>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 fae8 	bl	80005dc <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4610      	mov	r0, r2
 8009012:	4619      	mov	r1, r3
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <can1_ams_cell_voltages_v5s12_decode+0x48>)
 800901a:	f7f7 f929 	bl	8000270 <__adddf3>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	ec43 2b17 	vmov	d7, r2, r3
}
 8009026:	eeb0 0a47 	vmov.f32	s0, s14
 800902a:	eef0 0a67 	vmov.f32	s1, s15
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	f3af 8000 	nop.w
 8009038:	40040000 	.word	0x40040000
 800903c:	fcce1c58 	.word	0xfcce1c58
 8009040:	3f800e6a 	.word	0x3f800e6a
 8009044:	00000000 	.word	0x00000000

08009048 <can1_ams_cell_voltages_v6s1_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s1_encode(double value)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	4b10      	ldr	r3, [pc, #64]	; (8009098 <can1_ams_cell_voltages_v6s1_encode+0x50>)
 8009058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905c:	f7f7 f906 	bl	800026c <__aeabi_dsub>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	a309      	add	r3, pc, #36	; (adr r3, 8009090 <can1_ams_cell_voltages_v6s1_encode+0x48>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fbdf 	bl	8000830 <__aeabi_ddiv>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4610      	mov	r0, r2
 8009078:	4619      	mov	r1, r3
 800907a:	f7f7 fd87 	bl	8000b8c <__aeabi_d2uiz>
 800907e:	4603      	mov	r3, r0
 8009080:	b2db      	uxtb	r3, r3
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	f3af 8000 	nop.w
 8009090:	fcce1c58 	.word	0xfcce1c58
 8009094:	3f800e6a 	.word	0x3f800e6a
 8009098:	40040000 	.word	0x40040000
 800909c:	00000000 	.word	0x00000000

080090a0 <can1_ams_cell_voltages_v6s1_decode>:

double can1_ams_cell_voltages_v6s1_decode(uint8_t value)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 fa1b 	bl	80004e8 <__aeabi_ui2d>
 80090b2:	a30e      	add	r3, pc, #56	; (adr r3, 80090ec <can1_ams_cell_voltages_v6s1_decode+0x4c>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 fa90 	bl	80005dc <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4610      	mov	r0, r2
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <can1_ams_cell_voltages_v6s1_decode+0x48>)
 80090ca:	f7f7 f8d1 	bl	8000270 <__adddf3>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80090d6:	eeb0 0a47 	vmov.f32	s0, s14
 80090da:	eef0 0a67 	vmov.f32	s1, s15
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	f3af 8000 	nop.w
 80090e8:	40040000 	.word	0x40040000
 80090ec:	fcce1c58 	.word	0xfcce1c58
 80090f0:	3f800e6a 	.word	0x3f800e6a
 80090f4:	00000000 	.word	0x00000000

080090f8 <can1_ams_cell_voltages_v6s2_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s2_encode(double value)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <can1_ams_cell_voltages_v6s2_encode+0x50>)
 8009108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800910c:	f7f7 f8ae 	bl	800026c <__aeabi_dsub>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4610      	mov	r0, r2
 8009116:	4619      	mov	r1, r3
 8009118:	a309      	add	r3, pc, #36	; (adr r3, 8009140 <can1_ams_cell_voltages_v6s2_encode+0x48>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fb87 	bl	8000830 <__aeabi_ddiv>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4610      	mov	r0, r2
 8009128:	4619      	mov	r1, r3
 800912a:	f7f7 fd2f 	bl	8000b8c <__aeabi_d2uiz>
 800912e:	4603      	mov	r3, r0
 8009130:	b2db      	uxtb	r3, r3
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	fcce1c58 	.word	0xfcce1c58
 8009144:	3f800e6a 	.word	0x3f800e6a
 8009148:	40040000 	.word	0x40040000
 800914c:	00000000 	.word	0x00000000

08009150 <can1_ams_cell_voltages_v6s2_decode>:

double can1_ams_cell_voltages_v6s2_decode(uint8_t value)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	4618      	mov	r0, r3
 800915e:	f7f7 f9c3 	bl	80004e8 <__aeabi_ui2d>
 8009162:	a30e      	add	r3, pc, #56	; (adr r3, 800919c <can1_ams_cell_voltages_v6s2_decode+0x4c>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa38 	bl	80005dc <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4610      	mov	r0, r2
 8009172:	4619      	mov	r1, r3
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <can1_ams_cell_voltages_v6s2_decode+0x48>)
 800917a:	f7f7 f879 	bl	8000270 <__adddf3>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	ec43 2b17 	vmov	d7, r2, r3
}
 8009186:	eeb0 0a47 	vmov.f32	s0, s14
 800918a:	eef0 0a67 	vmov.f32	s1, s15
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	f3af 8000 	nop.w
 8009198:	40040000 	.word	0x40040000
 800919c:	fcce1c58 	.word	0xfcce1c58
 80091a0:	3f800e6a 	.word	0x3f800e6a
 80091a4:	00000000 	.word	0x00000000

080091a8 <can1_ams_cell_voltages_v6s3_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s3_encode(double value)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <can1_ams_cell_voltages_v6s3_encode+0x50>)
 80091b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091bc:	f7f7 f856 	bl	800026c <__aeabi_dsub>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4610      	mov	r0, r2
 80091c6:	4619      	mov	r1, r3
 80091c8:	a309      	add	r3, pc, #36	; (adr r3, 80091f0 <can1_ams_cell_voltages_v6s3_encode+0x48>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fb2f 	bl	8000830 <__aeabi_ddiv>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	f7f7 fcd7 	bl	8000b8c <__aeabi_d2uiz>
 80091de:	4603      	mov	r3, r0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w
 80091f0:	fcce1c58 	.word	0xfcce1c58
 80091f4:	3f800e6a 	.word	0x3f800e6a
 80091f8:	40040000 	.word	0x40040000
 80091fc:	00000000 	.word	0x00000000

08009200 <can1_ams_cell_voltages_v6s3_decode>:

double can1_ams_cell_voltages_v6s3_decode(uint8_t value)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4618      	mov	r0, r3
 800920e:	f7f7 f96b 	bl	80004e8 <__aeabi_ui2d>
 8009212:	a30e      	add	r3, pc, #56	; (adr r3, 800924c <can1_ams_cell_voltages_v6s3_decode+0x4c>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f9e0 	bl	80005dc <__aeabi_dmul>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <can1_ams_cell_voltages_v6s3_decode+0x48>)
 800922a:	f7f7 f821 	bl	8000270 <__adddf3>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	ec43 2b17 	vmov	d7, r2, r3
}
 8009236:	eeb0 0a47 	vmov.f32	s0, s14
 800923a:	eef0 0a67 	vmov.f32	s1, s15
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	f3af 8000 	nop.w
 8009248:	40040000 	.word	0x40040000
 800924c:	fcce1c58 	.word	0xfcce1c58
 8009250:	3f800e6a 	.word	0x3f800e6a
 8009254:	00000000 	.word	0x00000000

08009258 <can1_ams_cell_voltages_v6s4_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s4_encode(double value)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <can1_ams_cell_voltages_v6s4_encode+0x50>)
 8009268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800926c:	f7f6 fffe 	bl	800026c <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4610      	mov	r0, r2
 8009276:	4619      	mov	r1, r3
 8009278:	a309      	add	r3, pc, #36	; (adr r3, 80092a0 <can1_ams_cell_voltages_v6s4_encode+0x48>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 fad7 	bl	8000830 <__aeabi_ddiv>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 fc7f 	bl	8000b8c <__aeabi_d2uiz>
 800928e:	4603      	mov	r3, r0
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	f3af 8000 	nop.w
 80092a0:	fcce1c58 	.word	0xfcce1c58
 80092a4:	3f800e6a 	.word	0x3f800e6a
 80092a8:	40040000 	.word	0x40040000
 80092ac:	00000000 	.word	0x00000000

080092b0 <can1_ams_cell_voltages_v6s4_decode>:

double can1_ams_cell_voltages_v6s4_decode(uint8_t value)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f7 f913 	bl	80004e8 <__aeabi_ui2d>
 80092c2:	a30e      	add	r3, pc, #56	; (adr r3, 80092fc <can1_ams_cell_voltages_v6s4_decode+0x4c>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f7 f988 	bl	80005dc <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <can1_ams_cell_voltages_v6s4_decode+0x48>)
 80092da:	f7f6 ffc9 	bl	8000270 <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80092e6:	eeb0 0a47 	vmov.f32	s0, s14
 80092ea:	eef0 0a67 	vmov.f32	s1, s15
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	f3af 8000 	nop.w
 80092f8:	40040000 	.word	0x40040000
 80092fc:	fcce1c58 	.word	0xfcce1c58
 8009300:	3f800e6a 	.word	0x3f800e6a
 8009304:	00000000 	.word	0x00000000

08009308 <can1_ams_cell_voltages_v6s5_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s5_encode(double value)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <can1_ams_cell_voltages_v6s5_encode+0x50>)
 8009318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931c:	f7f6 ffa6 	bl	800026c <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	a309      	add	r3, pc, #36	; (adr r3, 8009350 <can1_ams_cell_voltages_v6s5_encode+0x48>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f7 fa7f 	bl	8000830 <__aeabi_ddiv>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f7f7 fc27 	bl	8000b8c <__aeabi_d2uiz>
 800933e:	4603      	mov	r3, r0
 8009340:	b2db      	uxtb	r3, r3
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	fcce1c58 	.word	0xfcce1c58
 8009354:	3f800e6a 	.word	0x3f800e6a
 8009358:	40040000 	.word	0x40040000
 800935c:	00000000 	.word	0x00000000

08009360 <can1_ams_cell_voltages_v6s5_decode>:

double can1_ams_cell_voltages_v6s5_decode(uint8_t value)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	4618      	mov	r0, r3
 800936e:	f7f7 f8bb 	bl	80004e8 <__aeabi_ui2d>
 8009372:	a30e      	add	r3, pc, #56	; (adr r3, 80093ac <can1_ams_cell_voltages_v6s5_decode+0x4c>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 f930 	bl	80005dc <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <can1_ams_cell_voltages_v6s5_decode+0x48>)
 800938a:	f7f6 ff71 	bl	8000270 <__adddf3>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ec43 2b17 	vmov	d7, r2, r3
}
 8009396:	eeb0 0a47 	vmov.f32	s0, s14
 800939a:	eef0 0a67 	vmov.f32	s1, s15
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	f3af 8000 	nop.w
 80093a8:	40040000 	.word	0x40040000
 80093ac:	fcce1c58 	.word	0xfcce1c58
 80093b0:	3f800e6a 	.word	0x3f800e6a
 80093b4:	00000000 	.word	0x00000000

080093b8 <can1_ams_cell_voltages_v6s6_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s6_encode(double value)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <can1_ams_cell_voltages_v6s6_encode+0x50>)
 80093c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093cc:	f7f6 ff4e 	bl	800026c <__aeabi_dsub>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4610      	mov	r0, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	a309      	add	r3, pc, #36	; (adr r3, 8009400 <can1_ams_cell_voltages_v6s6_encode+0x48>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 fa27 	bl	8000830 <__aeabi_ddiv>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4610      	mov	r0, r2
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7f7 fbcf 	bl	8000b8c <__aeabi_d2uiz>
 80093ee:	4603      	mov	r3, r0
 80093f0:	b2db      	uxtb	r3, r3
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	fcce1c58 	.word	0xfcce1c58
 8009404:	3f800e6a 	.word	0x3f800e6a
 8009408:	40040000 	.word	0x40040000
 800940c:	00000000 	.word	0x00000000

08009410 <can1_ams_cell_voltages_v6s6_decode>:

double can1_ams_cell_voltages_v6s6_decode(uint8_t value)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	4618      	mov	r0, r3
 800941e:	f7f7 f863 	bl	80004e8 <__aeabi_ui2d>
 8009422:	a30e      	add	r3, pc, #56	; (adr r3, 800945c <can1_ams_cell_voltages_v6s6_decode+0x4c>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8d8 	bl	80005dc <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	4b07      	ldr	r3, [pc, #28]	; (8009458 <can1_ams_cell_voltages_v6s6_decode+0x48>)
 800943a:	f7f6 ff19 	bl	8000270 <__adddf3>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	ec43 2b17 	vmov	d7, r2, r3
}
 8009446:	eeb0 0a47 	vmov.f32	s0, s14
 800944a:	eef0 0a67 	vmov.f32	s1, s15
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	f3af 8000 	nop.w
 8009458:	40040000 	.word	0x40040000
 800945c:	fcce1c58 	.word	0xfcce1c58
 8009460:	3f800e6a 	.word	0x3f800e6a
 8009464:	00000000 	.word	0x00000000

08009468 <can1_ams_cell_voltages_v6s7_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s7_encode(double value)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <can1_ams_cell_voltages_v6s7_encode+0x50>)
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	f7f6 fef6 	bl	800026c <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	a309      	add	r3, pc, #36	; (adr r3, 80094b0 <can1_ams_cell_voltages_v6s7_encode+0x48>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f9cf 	bl	8000830 <__aeabi_ddiv>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4610      	mov	r0, r2
 8009498:	4619      	mov	r1, r3
 800949a:	f7f7 fb77 	bl	8000b8c <__aeabi_d2uiz>
 800949e:	4603      	mov	r3, r0
 80094a0:	b2db      	uxtb	r3, r3
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w
 80094b0:	fcce1c58 	.word	0xfcce1c58
 80094b4:	3f800e6a 	.word	0x3f800e6a
 80094b8:	40040000 	.word	0x40040000
 80094bc:	00000000 	.word	0x00000000

080094c0 <can1_ams_cell_voltages_v6s7_decode>:

double can1_ams_cell_voltages_v6s7_decode(uint8_t value)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f7 f80b 	bl	80004e8 <__aeabi_ui2d>
 80094d2:	a30e      	add	r3, pc, #56	; (adr r3, 800950c <can1_ams_cell_voltages_v6s7_decode+0x4c>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f7 f880 	bl	80005dc <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4610      	mov	r0, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <can1_ams_cell_voltages_v6s7_decode+0x48>)
 80094ea:	f7f6 fec1 	bl	8000270 <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80094f6:	eeb0 0a47 	vmov.f32	s0, s14
 80094fa:	eef0 0a67 	vmov.f32	s1, s15
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	f3af 8000 	nop.w
 8009508:	40040000 	.word	0x40040000
 800950c:	fcce1c58 	.word	0xfcce1c58
 8009510:	3f800e6a 	.word	0x3f800e6a
 8009514:	00000000 	.word	0x00000000

08009518 <can1_ams_cell_voltages_v6s8_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s8_encode(double value)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	4b10      	ldr	r3, [pc, #64]	; (8009568 <can1_ams_cell_voltages_v6s8_encode+0x50>)
 8009528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800952c:	f7f6 fe9e 	bl	800026c <__aeabi_dsub>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	a309      	add	r3, pc, #36	; (adr r3, 8009560 <can1_ams_cell_voltages_v6s8_encode+0x48>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f977 	bl	8000830 <__aeabi_ddiv>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4610      	mov	r0, r2
 8009548:	4619      	mov	r1, r3
 800954a:	f7f7 fb1f 	bl	8000b8c <__aeabi_d2uiz>
 800954e:	4603      	mov	r3, r0
 8009550:	b2db      	uxtb	r3, r3
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	fcce1c58 	.word	0xfcce1c58
 8009564:	3f800e6a 	.word	0x3f800e6a
 8009568:	40040000 	.word	0x40040000
 800956c:	00000000 	.word	0x00000000

08009570 <can1_ams_cell_voltages_v6s8_decode>:

double can1_ams_cell_voltages_v6s8_decode(uint8_t value)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 ffb3 	bl	80004e8 <__aeabi_ui2d>
 8009582:	a30e      	add	r3, pc, #56	; (adr r3, 80095bc <can1_ams_cell_voltages_v6s8_decode+0x4c>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f7 f828 	bl	80005dc <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4610      	mov	r0, r2
 8009592:	4619      	mov	r1, r3
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <can1_ams_cell_voltages_v6s8_decode+0x48>)
 800959a:	f7f6 fe69 	bl	8000270 <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80095a6:	eeb0 0a47 	vmov.f32	s0, s14
 80095aa:	eef0 0a67 	vmov.f32	s1, s15
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	f3af 8000 	nop.w
 80095b8:	40040000 	.word	0x40040000
 80095bc:	fcce1c58 	.word	0xfcce1c58
 80095c0:	3f800e6a 	.word	0x3f800e6a
 80095c4:	00000000 	.word	0x00000000

080095c8 <can1_ams_cell_voltages_v6s9_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s9_encode(double value)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <can1_ams_cell_voltages_v6s9_encode+0x50>)
 80095d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095dc:	f7f6 fe46 	bl	800026c <__aeabi_dsub>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	a309      	add	r3, pc, #36	; (adr r3, 8009610 <can1_ams_cell_voltages_v6s9_encode+0x48>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f7 f91f 	bl	8000830 <__aeabi_ddiv>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	f7f7 fac7 	bl	8000b8c <__aeabi_d2uiz>
 80095fe:	4603      	mov	r3, r0
 8009600:	b2db      	uxtb	r3, r3
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w
 8009610:	fcce1c58 	.word	0xfcce1c58
 8009614:	3f800e6a 	.word	0x3f800e6a
 8009618:	40040000 	.word	0x40040000
 800961c:	00000000 	.word	0x00000000

08009620 <can1_ams_cell_voltages_v6s9_decode>:

double can1_ams_cell_voltages_v6s9_decode(uint8_t value)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	4618      	mov	r0, r3
 800962e:	f7f6 ff5b 	bl	80004e8 <__aeabi_ui2d>
 8009632:	a30e      	add	r3, pc, #56	; (adr r3, 800966c <can1_ams_cell_voltages_v6s9_decode+0x4c>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 ffd0 	bl	80005dc <__aeabi_dmul>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4610      	mov	r0, r2
 8009642:	4619      	mov	r1, r3
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <can1_ams_cell_voltages_v6s9_decode+0x48>)
 800964a:	f7f6 fe11 	bl	8000270 <__adddf3>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	ec43 2b17 	vmov	d7, r2, r3
}
 8009656:	eeb0 0a47 	vmov.f32	s0, s14
 800965a:	eef0 0a67 	vmov.f32	s1, s15
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	f3af 8000 	nop.w
 8009668:	40040000 	.word	0x40040000
 800966c:	fcce1c58 	.word	0xfcce1c58
 8009670:	3f800e6a 	.word	0x3f800e6a
 8009674:	00000000 	.word	0x00000000

08009678 <can1_ams_cell_voltages_v6s10_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s10_encode(double value)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <can1_ams_cell_voltages_v6s10_encode+0x50>)
 8009688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968c:	f7f6 fdee 	bl	800026c <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4610      	mov	r0, r2
 8009696:	4619      	mov	r1, r3
 8009698:	a309      	add	r3, pc, #36	; (adr r3, 80096c0 <can1_ams_cell_voltages_v6s10_encode+0x48>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 f8c7 	bl	8000830 <__aeabi_ddiv>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7f7 fa6f 	bl	8000b8c <__aeabi_d2uiz>
 80096ae:	4603      	mov	r3, r0
 80096b0:	b2db      	uxtb	r3, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	fcce1c58 	.word	0xfcce1c58
 80096c4:	3f800e6a 	.word	0x3f800e6a
 80096c8:	40040000 	.word	0x40040000
 80096cc:	00000000 	.word	0x00000000

080096d0 <can1_ams_cell_voltages_v6s10_decode>:

double can1_ams_cell_voltages_v6s10_decode(uint8_t value)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f6 ff03 	bl	80004e8 <__aeabi_ui2d>
 80096e2:	a30e      	add	r3, pc, #56	; (adr r3, 800971c <can1_ams_cell_voltages_v6s10_decode+0x4c>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 ff78 	bl	80005dc <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <can1_ams_cell_voltages_v6s10_decode+0x48>)
 80096fa:	f7f6 fdb9 	bl	8000270 <__adddf3>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	ec43 2b17 	vmov	d7, r2, r3
}
 8009706:	eeb0 0a47 	vmov.f32	s0, s14
 800970a:	eef0 0a67 	vmov.f32	s1, s15
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	f3af 8000 	nop.w
 8009718:	40040000 	.word	0x40040000
 800971c:	fcce1c58 	.word	0xfcce1c58
 8009720:	3f800e6a 	.word	0x3f800e6a
 8009724:	00000000 	.word	0x00000000

08009728 <can1_ams_cell_voltages_v6s11_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s11_encode(double value)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <can1_ams_cell_voltages_v6s11_encode+0x50>)
 8009738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800973c:	f7f6 fd96 	bl	800026c <__aeabi_dsub>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4610      	mov	r0, r2
 8009746:	4619      	mov	r1, r3
 8009748:	a309      	add	r3, pc, #36	; (adr r3, 8009770 <can1_ams_cell_voltages_v6s11_encode+0x48>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f86f 	bl	8000830 <__aeabi_ddiv>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	f7f7 fa17 	bl	8000b8c <__aeabi_d2uiz>
 800975e:	4603      	mov	r3, r0
 8009760:	b2db      	uxtb	r3, r3
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	fcce1c58 	.word	0xfcce1c58
 8009774:	3f800e6a 	.word	0x3f800e6a
 8009778:	40040000 	.word	0x40040000
 800977c:	00000000 	.word	0x00000000

08009780 <can1_ams_cell_voltages_v6s11_decode>:

double can1_ams_cell_voltages_v6s11_decode(uint8_t value)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4618      	mov	r0, r3
 800978e:	f7f6 feab 	bl	80004e8 <__aeabi_ui2d>
 8009792:	a30e      	add	r3, pc, #56	; (adr r3, 80097cc <can1_ams_cell_voltages_v6s11_decode+0x4c>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 ff20 	bl	80005dc <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4610      	mov	r0, r2
 80097a2:	4619      	mov	r1, r3
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <can1_ams_cell_voltages_v6s11_decode+0x48>)
 80097aa:	f7f6 fd61 	bl	8000270 <__adddf3>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80097b6:	eeb0 0a47 	vmov.f32	s0, s14
 80097ba:	eef0 0a67 	vmov.f32	s1, s15
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	f3af 8000 	nop.w
 80097c8:	40040000 	.word	0x40040000
 80097cc:	fcce1c58 	.word	0xfcce1c58
 80097d0:	3f800e6a 	.word	0x3f800e6a
 80097d4:	00000000 	.word	0x00000000

080097d8 <can1_ams_cell_voltages_v6s12_encode>:

    return (true);
}

uint8_t can1_ams_cell_voltages_v6s12_encode(double value)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)((value - 2.5) / 0.00784);
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <can1_ams_cell_voltages_v6s12_encode+0x50>)
 80097e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ec:	f7f6 fd3e 	bl	800026c <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	a309      	add	r3, pc, #36	; (adr r3, 8009820 <can1_ams_cell_voltages_v6s12_encode+0x48>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f7 f817 	bl	8000830 <__aeabi_ddiv>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f9bf 	bl	8000b8c <__aeabi_d2uiz>
 800980e:	4603      	mov	r3, r0
 8009810:	b2db      	uxtb	r3, r3
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	fcce1c58 	.word	0xfcce1c58
 8009824:	3f800e6a 	.word	0x3f800e6a
 8009828:	40040000 	.word	0x40040000
 800982c:	00000000 	.word	0x00000000

08009830 <can1_ams_cell_voltages_v6s12_decode>:

double can1_ams_cell_voltages_v6s12_decode(uint8_t value)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
    return (((double)value * 0.00784) + 2.5);
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	4618      	mov	r0, r3
 800983e:	f7f6 fe53 	bl	80004e8 <__aeabi_ui2d>
 8009842:	a30e      	add	r3, pc, #56	; (adr r3, 800987c <can1_ams_cell_voltages_v6s12_decode+0x4c>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fec8 	bl	80005dc <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f04f 0200 	mov.w	r2, #0
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <can1_ams_cell_voltages_v6s12_decode+0x48>)
 800985a:	f7f6 fd09 	bl	8000270 <__adddf3>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	ec43 2b17 	vmov	d7, r2, r3
}
 8009866:	eeb0 0a47 	vmov.f32	s0, s14
 800986a:	eef0 0a67 	vmov.f32	s1, s15
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	f3af 8000 	nop.w
 8009878:	40040000 	.word	0x40040000
 800987c:	fcce1c58 	.word	0xfcce1c58
 8009880:	3f800e6a 	.word	0x3f800e6a

08009884 <can1_ams_cell_temperatures_pack>:

int can1_ams_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct can1_ams_cell_temperatures_t *src_p,
    size_t size)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b0a2      	sub	sp, #136	; 0x88
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b07      	cmp	r3, #7
 8009894:	d803      	bhi.n	800989e <can1_ams_cell_temperatures_pack+0x1a>
        return (-EINVAL);
 8009896:	f06f 0315 	mvn.w	r3, #21
 800989a:	f001 b90d 	b.w	800aab8 <can1_ams_cell_temperatures_pack+0x1234>
    }

    memset(&dst_p[0], 0, 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f025 f844 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->temperature_multiplexor, 0u, 0x0fu);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	220f      	movs	r2, #15
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f7 fb8d 	bl	8000fd0 <pack_left_shift_u8>
 80098b6:	4603      	mov	r3, r0
 80098b8:	461a      	mov	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4313      	orrs	r3, r2
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	701a      	strb	r2, [r3, #0]

    switch (src_p->temperature_multiplexor) {
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b0b      	cmp	r3, #11
 80098cc:	f201 80f2 	bhi.w	800aab4 <can1_ams_cell_temperatures_pack+0x1230>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <can1_ams_cell_temperatures_pack+0x54>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009909 	.word	0x08009909
 80098dc:	08009a71 	.word	0x08009a71
 80098e0:	08009bd9 	.word	0x08009bd9
 80098e4:	08009d41 	.word	0x08009d41
 80098e8:	08009ea9 	.word	0x08009ea9
 80098ec:	0800a017 	.word	0x0800a017
 80098f0:	0800a19d 	.word	0x0800a19d
 80098f4:	0800a321 	.word	0x0800a321
 80098f8:	0800a4a5 	.word	0x0800a4a5
 80098fc:	0800a629 	.word	0x0800a629
 8009900:	0800a7ad 	.word	0x0800a7ad
 8009904:	0800a931 	.word	0x0800a931

    case 0:
        t1s1 = (uint16_t)src_p->t1s1;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800990e:	833b      	strh	r3, [r7, #24]
        dst_p[0] |= pack_left_shift_u16(t1s1, 4u, 0xf0u);
 8009910:	8b3b      	ldrh	r3, [r7, #24]
 8009912:	22f0      	movs	r2, #240	; 0xf0
 8009914:	2104      	movs	r1, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7f7 fb71 	bl	8000ffe <pack_left_shift_u16>
 800991c:	4603      	mov	r3, r0
 800991e:	461a      	mov	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	4313      	orrs	r3, r2
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s1, 4u, 0xffu);
 800992c:	8b3b      	ldrh	r3, [r7, #24]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	2104      	movs	r1, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 fb7a 	bl	800102c <pack_right_shift_u16>
 8009938:	4603      	mov	r3, r0
 800993a:	4619      	mov	r1, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	430a      	orrs	r2, r1
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]
        t2s1 = (uint16_t)src_p->t2s1;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009952:	82fb      	strh	r3, [r7, #22]
        dst_p[2] |= pack_left_shift_u16(t2s1, 0u, 0xffu);
 8009954:	8afb      	ldrh	r3, [r7, #22]
 8009956:	22ff      	movs	r2, #255	; 0xff
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 fb4f 	bl	8000ffe <pack_left_shift_u16>
 8009960:	4603      	mov	r3, r0
 8009962:	4619      	mov	r1, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3302      	adds	r3, #2
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3302      	adds	r3, #2
 800996e:	430a      	orrs	r2, r1
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s1, 8u, 0x0fu);
 8009974:	8afb      	ldrh	r3, [r7, #22]
 8009976:	220f      	movs	r2, #15
 8009978:	2108      	movs	r1, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f7f7 fb56 	bl	800102c <pack_right_shift_u16>
 8009980:	4603      	mov	r3, r0
 8009982:	4619      	mov	r1, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3303      	adds	r3, #3
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3303      	adds	r3, #3
 800998e:	430a      	orrs	r2, r1
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
        t3s1 = (uint16_t)src_p->t3s1;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800999a:	82bb      	strh	r3, [r7, #20]
        dst_p[3] |= pack_left_shift_u16(t3s1, 4u, 0xf0u);
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	22f0      	movs	r2, #240	; 0xf0
 80099a0:	2104      	movs	r1, #4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f7 fb2b 	bl	8000ffe <pack_left_shift_u16>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4619      	mov	r1, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3303      	adds	r3, #3
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3303      	adds	r3, #3
 80099b6:	430a      	orrs	r2, r1
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s1, 4u, 0xffu);
 80099bc:	8abb      	ldrh	r3, [r7, #20]
 80099be:	22ff      	movs	r2, #255	; 0xff
 80099c0:	2104      	movs	r1, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 fb32 	bl	800102c <pack_right_shift_u16>
 80099c8:	4603      	mov	r3, r0
 80099ca:	4619      	mov	r1, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3304      	adds	r3, #4
 80099d0:	781a      	ldrb	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3304      	adds	r3, #4
 80099d6:	430a      	orrs	r2, r1
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
        t4s1 = (uint16_t)src_p->t4s1;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80099e2:	827b      	strh	r3, [r7, #18]
        dst_p[5] |= pack_left_shift_u16(t4s1, 0u, 0xffu);
 80099e4:	8a7b      	ldrh	r3, [r7, #18]
 80099e6:	22ff      	movs	r2, #255	; 0xff
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 fb07 	bl	8000ffe <pack_left_shift_u16>
 80099f0:	4603      	mov	r3, r0
 80099f2:	4619      	mov	r1, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3305      	adds	r3, #5
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3305      	adds	r3, #5
 80099fe:	430a      	orrs	r2, r1
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s1, 8u, 0x0fu);
 8009a04:	8a7b      	ldrh	r3, [r7, #18]
 8009a06:	220f      	movs	r2, #15
 8009a08:	2108      	movs	r1, #8
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f7 fb0e 	bl	800102c <pack_right_shift_u16>
 8009a10:	4603      	mov	r3, r0
 8009a12:	4619      	mov	r1, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3306      	adds	r3, #6
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3306      	adds	r3, #6
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
        t5s1 = (uint16_t)src_p->t5s1;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8009a2a:	823b      	strh	r3, [r7, #16]
        dst_p[6] |= pack_left_shift_u16(t5s1, 4u, 0xf0u);
 8009a2c:	8a3b      	ldrh	r3, [r7, #16]
 8009a2e:	22f0      	movs	r2, #240	; 0xf0
 8009a30:	2104      	movs	r1, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f7 fae3 	bl	8000ffe <pack_left_shift_u16>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3306      	adds	r3, #6
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3306      	adds	r3, #6
 8009a46:	430a      	orrs	r2, r1
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s1, 4u, 0xffu);
 8009a4c:	8a3b      	ldrh	r3, [r7, #16]
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	2104      	movs	r1, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f7 faea 	bl	800102c <pack_right_shift_u16>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	430a      	orrs	r2, r1
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
        break;
 8009a6c:	f001 b823 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 1:
        t1s2 = (uint16_t)src_p->t1s2;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009a76:	847b      	strh	r3, [r7, #34]	; 0x22
        dst_p[0] |= pack_left_shift_u16(t1s2, 4u, 0xf0u);
 8009a78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a7a:	22f0      	movs	r2, #240	; 0xf0
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f7 fabd 	bl	8000ffe <pack_left_shift_u16>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s2, 4u, 0xffu);
 8009a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f7 fac6 	bl	800102c <pack_right_shift_u16>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
        t2s2 = (uint16_t)src_p->t2s2;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009aba:	843b      	strh	r3, [r7, #32]
        dst_p[2] |= pack_left_shift_u16(t2s2, 0u, 0xffu);
 8009abc:	8c3b      	ldrh	r3, [r7, #32]
 8009abe:	22ff      	movs	r2, #255	; 0xff
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f7 fa9b 	bl	8000ffe <pack_left_shift_u16>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4619      	mov	r1, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s2, 8u, 0x0fu);
 8009adc:	8c3b      	ldrh	r3, [r7, #32]
 8009ade:	220f      	movs	r2, #15
 8009ae0:	2108      	movs	r1, #8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7f7 faa2 	bl	800102c <pack_right_shift_u16>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4619      	mov	r1, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3303      	adds	r3, #3
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3303      	adds	r3, #3
 8009af6:	430a      	orrs	r2, r1
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
        t3s2 = (uint16_t)src_p->t3s2;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009b02:	83fb      	strh	r3, [r7, #30]
        dst_p[3] |= pack_left_shift_u16(t3s2, 4u, 0xf0u);
 8009b04:	8bfb      	ldrh	r3, [r7, #30]
 8009b06:	22f0      	movs	r2, #240	; 0xf0
 8009b08:	2104      	movs	r1, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f7 fa77 	bl	8000ffe <pack_left_shift_u16>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4619      	mov	r1, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3303      	adds	r3, #3
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s2, 4u, 0xffu);
 8009b24:	8bfb      	ldrh	r3, [r7, #30]
 8009b26:	22ff      	movs	r2, #255	; 0xff
 8009b28:	2104      	movs	r1, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f7 fa7e 	bl	800102c <pack_right_shift_u16>
 8009b30:	4603      	mov	r3, r0
 8009b32:	4619      	mov	r1, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3304      	adds	r3, #4
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
        t4s2 = (uint16_t)src_p->t4s2;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8009b4a:	83bb      	strh	r3, [r7, #28]
        dst_p[5] |= pack_left_shift_u16(t4s2, 0u, 0xffu);
 8009b4c:	8bbb      	ldrh	r3, [r7, #28]
 8009b4e:	22ff      	movs	r2, #255	; 0xff
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 fa53 	bl	8000ffe <pack_left_shift_u16>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3305      	adds	r3, #5
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3305      	adds	r3, #5
 8009b66:	430a      	orrs	r2, r1
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s2, 8u, 0x0fu);
 8009b6c:	8bbb      	ldrh	r3, [r7, #28]
 8009b6e:	220f      	movs	r2, #15
 8009b70:	2108      	movs	r1, #8
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f7 fa5a 	bl	800102c <pack_right_shift_u16>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3306      	adds	r3, #6
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3306      	adds	r3, #6
 8009b86:	430a      	orrs	r2, r1
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
        t5s2 = (uint16_t)src_p->t5s2;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8009b92:	837b      	strh	r3, [r7, #26]
        dst_p[6] |= pack_left_shift_u16(t5s2, 4u, 0xf0u);
 8009b94:	8b7b      	ldrh	r3, [r7, #26]
 8009b96:	22f0      	movs	r2, #240	; 0xf0
 8009b98:	2104      	movs	r1, #4
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f7 fa2f 	bl	8000ffe <pack_left_shift_u16>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3306      	adds	r3, #6
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3306      	adds	r3, #6
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s2, 4u, 0xffu);
 8009bb4:	8b7b      	ldrh	r3, [r7, #26]
 8009bb6:	22ff      	movs	r2, #255	; 0xff
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f7 fa36 	bl	800102c <pack_right_shift_u16>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3307      	adds	r3, #7
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]
        break;
 8009bd4:	f000 bf6f 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 2:
        t1s3 = (uint16_t)src_p->t1s3;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
        dst_p[0] |= pack_left_shift_u16(t1s3, 4u, 0xf0u);
 8009be0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009be2:	22f0      	movs	r2, #240	; 0xf0
 8009be4:	2104      	movs	r1, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f7 fa09 	bl	8000ffe <pack_left_shift_u16>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s3, 4u, 0xffu);
 8009bfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	2104      	movs	r1, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f7 fa12 	bl	800102c <pack_right_shift_u16>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	430a      	orrs	r2, r1
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	701a      	strb	r2, [r3, #0]
        t2s3 = (uint16_t)src_p->t2s3;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009c22:	857b      	strh	r3, [r7, #42]	; 0x2a
        dst_p[2] |= pack_left_shift_u16(t2s3, 0u, 0xffu);
 8009c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f7 f9e7 	bl	8000ffe <pack_left_shift_u16>
 8009c30:	4603      	mov	r3, r0
 8009c32:	4619      	mov	r1, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3302      	adds	r3, #2
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s3, 8u, 0x0fu);
 8009c44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c46:	220f      	movs	r2, #15
 8009c48:	2108      	movs	r1, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f7 f9ee 	bl	800102c <pack_right_shift_u16>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4619      	mov	r1, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3303      	adds	r3, #3
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3303      	adds	r3, #3
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        t3s3 = (uint16_t)src_p->t3s3;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8009c6a:	853b      	strh	r3, [r7, #40]	; 0x28
        dst_p[3] |= pack_left_shift_u16(t3s3, 4u, 0xf0u);
 8009c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c6e:	22f0      	movs	r2, #240	; 0xf0
 8009c70:	2104      	movs	r1, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f7 f9c3 	bl	8000ffe <pack_left_shift_u16>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3303      	adds	r3, #3
 8009c86:	430a      	orrs	r2, r1
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s3, 4u, 0xffu);
 8009c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c8e:	22ff      	movs	r2, #255	; 0xff
 8009c90:	2104      	movs	r1, #4
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f7 f9ca 	bl	800102c <pack_right_shift_u16>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
        t4s3 = (uint16_t)src_p->t4s3;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8009cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        dst_p[5] |= pack_left_shift_u16(t4s3, 0u, 0xffu);
 8009cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cb6:	22ff      	movs	r2, #255	; 0xff
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f7 f99f 	bl	8000ffe <pack_left_shift_u16>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3305      	adds	r3, #5
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3305      	adds	r3, #5
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s3, 8u, 0x0fu);
 8009cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cd6:	220f      	movs	r2, #15
 8009cd8:	2108      	movs	r1, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f7 f9a6 	bl	800102c <pack_right_shift_u16>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3306      	adds	r3, #6
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3306      	adds	r3, #6
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]
        t5s3 = (uint16_t)src_p->t5s3;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8009cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
        dst_p[6] |= pack_left_shift_u16(t5s3, 4u, 0xf0u);
 8009cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfe:	22f0      	movs	r2, #240	; 0xf0
 8009d00:	2104      	movs	r1, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f7 f97b 	bl	8000ffe <pack_left_shift_u16>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3306      	adds	r3, #6
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3306      	adds	r3, #6
 8009d16:	430a      	orrs	r2, r1
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s3, 4u, 0xffu);
 8009d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	2104      	movs	r1, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f7 f982 	bl	800102c <pack_right_shift_u16>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3307      	adds	r3, #7
 8009d36:	430a      	orrs	r2, r1
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
        break;
 8009d3c:	f000 bebb 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 3:
        t1s4 = (uint16_t)src_p->t1s4;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d46:	86fb      	strh	r3, [r7, #54]	; 0x36
        dst_p[0] |= pack_left_shift_u16(t1s4, 4u, 0xf0u);
 8009d48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d4a:	22f0      	movs	r2, #240	; 0xf0
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f7 f955 	bl	8000ffe <pack_left_shift_u16>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s4, 4u, 0xffu);
 8009d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d66:	22ff      	movs	r2, #255	; 0xff
 8009d68:	2104      	movs	r1, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f7 f95e 	bl	800102c <pack_right_shift_u16>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4619      	mov	r1, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3301      	adds	r3, #1
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	b2d2      	uxtb	r2, r2
 8009d82:	701a      	strb	r2, [r3, #0]
        t2s4 = (uint16_t)src_p->t2s4;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009d8a:	86bb      	strh	r3, [r7, #52]	; 0x34
        dst_p[2] |= pack_left_shift_u16(t2s4, 0u, 0xffu);
 8009d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d8e:	22ff      	movs	r2, #255	; 0xff
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f7 f933 	bl	8000ffe <pack_left_shift_u16>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3302      	adds	r3, #2
 8009da6:	430a      	orrs	r2, r1
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s4, 8u, 0x0fu);
 8009dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dae:	220f      	movs	r2, #15
 8009db0:	2108      	movs	r1, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f7 f93a 	bl	800102c <pack_right_shift_u16>
 8009db8:	4603      	mov	r3, r0
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3303      	adds	r3, #3
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3303      	adds	r3, #3
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	b2d2      	uxtb	r2, r2
 8009dca:	701a      	strb	r2, [r3, #0]
        t3s4 = (uint16_t)src_p->t3s4;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8009dd2:	867b      	strh	r3, [r7, #50]	; 0x32
        dst_p[3] |= pack_left_shift_u16(t3s4, 4u, 0xf0u);
 8009dd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009dd6:	22f0      	movs	r2, #240	; 0xf0
 8009dd8:	2104      	movs	r1, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f7 f90f 	bl	8000ffe <pack_left_shift_u16>
 8009de0:	4603      	mov	r3, r0
 8009de2:	4619      	mov	r1, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3303      	adds	r3, #3
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3303      	adds	r3, #3
 8009dee:	430a      	orrs	r2, r1
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s4, 4u, 0xffu);
 8009df4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009df6:	22ff      	movs	r2, #255	; 0xff
 8009df8:	2104      	movs	r1, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7f7 f916 	bl	800102c <pack_right_shift_u16>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4619      	mov	r1, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3304      	adds	r3, #4
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
        t4s4 = (uint16_t)src_p->t4s4;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009e1a:	863b      	strh	r3, [r7, #48]	; 0x30
        dst_p[5] |= pack_left_shift_u16(t4s4, 0u, 0xffu);
 8009e1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e1e:	22ff      	movs	r2, #255	; 0xff
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f7 f8eb 	bl	8000ffe <pack_left_shift_u16>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3305      	adds	r3, #5
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3305      	adds	r3, #5
 8009e36:	430a      	orrs	r2, r1
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s4, 8u, 0x0fu);
 8009e3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009e3e:	220f      	movs	r2, #15
 8009e40:	2108      	movs	r1, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f7 f8f2 	bl	800102c <pack_right_shift_u16>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3306      	adds	r3, #6
 8009e50:	781a      	ldrb	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3306      	adds	r3, #6
 8009e56:	430a      	orrs	r2, r1
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]
        t5s4 = (uint16_t)src_p->t5s4;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8009e62:	85fb      	strh	r3, [r7, #46]	; 0x2e
        dst_p[6] |= pack_left_shift_u16(t5s4, 4u, 0xf0u);
 8009e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e66:	22f0      	movs	r2, #240	; 0xf0
 8009e68:	2104      	movs	r1, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f7 f8c7 	bl	8000ffe <pack_left_shift_u16>
 8009e70:	4603      	mov	r3, r0
 8009e72:	4619      	mov	r1, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3306      	adds	r3, #6
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3306      	adds	r3, #6
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s4, 4u, 0xffu);
 8009e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e86:	22ff      	movs	r2, #255	; 0xff
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f7 f8ce 	bl	800102c <pack_right_shift_u16>
 8009e90:	4603      	mov	r3, r0
 8009e92:	4619      	mov	r1, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3307      	adds	r3, #7
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]
        break;
 8009ea4:	f000 be07 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 4:
        t1s5 = (uint16_t)src_p->t1s5;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009eae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        dst_p[0] |= pack_left_shift_u16(t1s5, 4u, 0xf0u);
 8009eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009eb6:	22f0      	movs	r2, #240	; 0xf0
 8009eb8:	2104      	movs	r1, #4
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f7 f89f 	bl	8000ffe <pack_left_shift_u16>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s5, 4u, 0xffu);
 8009ed0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	2104      	movs	r1, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f7 f8a7 	bl	800102c <pack_right_shift_u16>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	430a      	orrs	r2, r1
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]
        t2s5 = (uint16_t)src_p->t2s5;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8009ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        dst_p[2] |= pack_left_shift_u16(t2s5, 0u, 0xffu);
 8009efa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009efc:	22ff      	movs	r2, #255	; 0xff
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7f7 f87c 	bl	8000ffe <pack_left_shift_u16>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3302      	adds	r3, #2
 8009f14:	430a      	orrs	r2, r1
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s5, 8u, 0x0fu);
 8009f1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f1c:	220f      	movs	r2, #15
 8009f1e:	2108      	movs	r1, #8
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f7 f883 	bl	800102c <pack_right_shift_u16>
 8009f26:	4603      	mov	r3, r0
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3303      	adds	r3, #3
 8009f34:	430a      	orrs	r2, r1
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
        t3s5 = (uint16_t)src_p->t3s5;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8009f40:	87bb      	strh	r3, [r7, #60]	; 0x3c
        dst_p[3] |= pack_left_shift_u16(t3s5, 4u, 0xf0u);
 8009f42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f44:	22f0      	movs	r2, #240	; 0xf0
 8009f46:	2104      	movs	r1, #4
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f7 f858 	bl	8000ffe <pack_left_shift_u16>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4619      	mov	r1, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3303      	adds	r3, #3
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3303      	adds	r3, #3
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s5, 4u, 0xffu);
 8009f62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	2104      	movs	r1, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f7 f85f 	bl	800102c <pack_right_shift_u16>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4619      	mov	r1, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3304      	adds	r3, #4
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
        t4s5 = (uint16_t)src_p->t4s5;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009f88:	877b      	strh	r3, [r7, #58]	; 0x3a
        dst_p[5] |= pack_left_shift_u16(t4s5, 0u, 0xffu);
 8009f8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f7 f834 	bl	8000ffe <pack_left_shift_u16>
 8009f96:	4603      	mov	r3, r0
 8009f98:	4619      	mov	r1, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3305      	adds	r3, #5
 8009f9e:	781a      	ldrb	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3305      	adds	r3, #5
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s5, 8u, 0x0fu);
 8009faa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009fac:	220f      	movs	r2, #15
 8009fae:	2108      	movs	r1, #8
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7f7 f83b 	bl	800102c <pack_right_shift_u16>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3306      	adds	r3, #6
 8009fbe:	781a      	ldrb	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3306      	adds	r3, #6
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
        t5s5 = (uint16_t)src_p->t5s5;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8009fd0:	873b      	strh	r3, [r7, #56]	; 0x38
        dst_p[6] |= pack_left_shift_u16(t5s5, 4u, 0xf0u);
 8009fd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009fd4:	22f0      	movs	r2, #240	; 0xf0
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f7 f810 	bl	8000ffe <pack_left_shift_u16>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3306      	adds	r3, #6
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3306      	adds	r3, #6
 8009fec:	430a      	orrs	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s5, 4u, 0xffu);
 8009ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f7 f817 	bl	800102c <pack_right_shift_u16>
 8009ffe:	4603      	mov	r3, r0
 800a000:	4619      	mov	r1, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3307      	adds	r3, #7
 800a00c:	430a      	orrs	r2, r1
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
        break;
 800a012:	f000 bd50 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 5:
        t1s6 = (uint16_t)src_p->t1s6;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a01c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        dst_p[0] |= pack_left_shift_u16(t1s6, 4u, 0xf0u);
 800a020:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a024:	22f0      	movs	r2, #240	; 0xf0
 800a026:	2104      	movs	r1, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 ffe8 	bl	8000ffe <pack_left_shift_u16>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4313      	orrs	r3, r2
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s6, 4u, 0xffu);
 800a03e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a042:	22ff      	movs	r2, #255	; 0xff
 800a044:	2104      	movs	r1, #4
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 fff0 	bl	800102c <pack_right_shift_u16>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4619      	mov	r1, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	430a      	orrs	r2, r1
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
        t2s6 = (uint16_t)src_p->t2s6;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800a066:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        dst_p[2] |= pack_left_shift_u16(t2s6, 0u, 0xffu);
 800a06a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 ffc3 	bl	8000ffe <pack_left_shift_u16>
 800a078:	4603      	mov	r3, r0
 800a07a:	4619      	mov	r1, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3302      	adds	r3, #2
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3302      	adds	r3, #2
 800a086:	430a      	orrs	r2, r1
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s6, 8u, 0x0fu);
 800a08c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a090:	220f      	movs	r2, #15
 800a092:	2108      	movs	r1, #8
 800a094:	4618      	mov	r0, r3
 800a096:	f7f6 ffc9 	bl	800102c <pack_right_shift_u16>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4619      	mov	r1, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3303      	adds	r3, #3
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]
        t3s6 = (uint16_t)src_p->t3s6;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        dst_p[3] |= pack_left_shift_u16(t3s6, 4u, 0xf0u);
 800a0b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0bc:	22f0      	movs	r2, #240	; 0xf0
 800a0be:	2104      	movs	r1, #4
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f6 ff9c 	bl	8000ffe <pack_left_shift_u16>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s6, 4u, 0xffu);
 800a0da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a0de:	22ff      	movs	r2, #255	; 0xff
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 ffa2 	bl	800102c <pack_right_shift_u16>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	701a      	strb	r2, [r3, #0]
        t4s6 = (uint16_t)src_p->t4s6;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800a102:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        dst_p[5] |= pack_left_shift_u16(t4s6, 0u, 0xffu);
 800a106:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a10a:	22ff      	movs	r2, #255	; 0xff
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f6 ff75 	bl	8000ffe <pack_left_shift_u16>
 800a114:	4603      	mov	r3, r0
 800a116:	4619      	mov	r1, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3305      	adds	r3, #5
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3305      	adds	r3, #5
 800a122:	430a      	orrs	r2, r1
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s6, 8u, 0x0fu);
 800a128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a12c:	220f      	movs	r2, #15
 800a12e:	2108      	movs	r1, #8
 800a130:	4618      	mov	r0, r3
 800a132:	f7f6 ff7b 	bl	800102c <pack_right_shift_u16>
 800a136:	4603      	mov	r3, r0
 800a138:	4619      	mov	r1, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3306      	adds	r3, #6
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3306      	adds	r3, #6
 800a144:	430a      	orrs	r2, r1
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
        t5s6 = (uint16_t)src_p->t5s6;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800a150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        dst_p[6] |= pack_left_shift_u16(t5s6, 4u, 0xf0u);
 800a154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a158:	22f0      	movs	r2, #240	; 0xf0
 800a15a:	2104      	movs	r1, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 ff4e 	bl	8000ffe <pack_left_shift_u16>
 800a162:	4603      	mov	r3, r0
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3306      	adds	r3, #6
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3306      	adds	r3, #6
 800a170:	430a      	orrs	r2, r1
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s6, 4u, 0xffu);
 800a176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a17a:	22ff      	movs	r2, #255	; 0xff
 800a17c:	2104      	movs	r1, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f7f6 ff54 	bl	800102c <pack_right_shift_u16>
 800a184:	4603      	mov	r3, r0
 800a186:	4619      	mov	r1, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3307      	adds	r3, #7
 800a192:	430a      	orrs	r2, r1
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
        break;
 800a198:	f000 bc8d 	b.w	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 6:
        t1s7 = (uint16_t)src_p->t1s7;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a1a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        dst_p[0] |= pack_left_shift_u16(t1s7, 4u, 0xf0u);
 800a1a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1aa:	22f0      	movs	r2, #240	; 0xf0
 800a1ac:	2104      	movs	r1, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f6 ff25 	bl	8000ffe <pack_left_shift_u16>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s7, 4u, 0xffu);
 800a1c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 ff2d 	bl	800102c <pack_right_shift_u16>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
        t2s7 = (uint16_t)src_p->t2s7;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a1ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        dst_p[2] |= pack_left_shift_u16(t2s7, 0u, 0xffu);
 800a1f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f6 ff00 	bl	8000ffe <pack_left_shift_u16>
 800a1fe:	4603      	mov	r3, r0
 800a200:	4619      	mov	r1, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3302      	adds	r3, #2
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3302      	adds	r3, #2
 800a20c:	430a      	orrs	r2, r1
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s7, 8u, 0x0fu);
 800a212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a216:	220f      	movs	r2, #15
 800a218:	2108      	movs	r1, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 ff06 	bl	800102c <pack_right_shift_u16>
 800a220:	4603      	mov	r3, r0
 800a222:	4619      	mov	r1, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3303      	adds	r3, #3
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3303      	adds	r3, #3
 800a22e:	430a      	orrs	r2, r1
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
        t3s7 = (uint16_t)src_p->t3s7;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a23a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        dst_p[3] |= pack_left_shift_u16(t3s7, 4u, 0xf0u);
 800a23e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a242:	22f0      	movs	r2, #240	; 0xf0
 800a244:	2104      	movs	r1, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7f6 fed9 	bl	8000ffe <pack_left_shift_u16>
 800a24c:	4603      	mov	r3, r0
 800a24e:	4619      	mov	r1, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3303      	adds	r3, #3
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3303      	adds	r3, #3
 800a25a:	430a      	orrs	r2, r1
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s7, 4u, 0xffu);
 800a260:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	2104      	movs	r1, #4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f6 fedf 	bl	800102c <pack_right_shift_u16>
 800a26e:	4603      	mov	r3, r0
 800a270:	4619      	mov	r1, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3304      	adds	r3, #4
 800a27c:	430a      	orrs	r2, r1
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
        t4s7 = (uint16_t)src_p->t4s7;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800a288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        dst_p[5] |= pack_left_shift_u16(t4s7, 0u, 0xffu);
 800a28c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f7f6 feb2 	bl	8000ffe <pack_left_shift_u16>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4619      	mov	r1, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3305      	adds	r3, #5
 800a2a2:	781a      	ldrb	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3305      	adds	r3, #5
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s7, 8u, 0x0fu);
 800a2ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2b2:	220f      	movs	r2, #15
 800a2b4:	2108      	movs	r1, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 feb8 	bl	800102c <pack_right_shift_u16>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3306      	adds	r3, #6
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3306      	adds	r3, #6
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
        t5s7 = (uint16_t)src_p->t5s7;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 800a2d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        dst_p[6] |= pack_left_shift_u16(t5s7, 4u, 0xf0u);
 800a2da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a2de:	22f0      	movs	r2, #240	; 0xf0
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f6 fe8b 	bl	8000ffe <pack_left_shift_u16>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3306      	adds	r3, #6
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3306      	adds	r3, #6
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s7, 4u, 0xffu);
 800a2fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	2104      	movs	r1, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7f6 fe91 	bl	800102c <pack_right_shift_u16>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4619      	mov	r1, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3307      	adds	r3, #7
 800a318:	430a      	orrs	r2, r1
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
        break;
 800a31e:	e3ca      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 7:
        t1s8 = (uint16_t)src_p->t1s8;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a326:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        dst_p[0] |= pack_left_shift_u16(t1s8, 4u, 0xf0u);
 800a32a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a32e:	22f0      	movs	r2, #240	; 0xf0
 800a330:	2104      	movs	r1, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 fe63 	bl	8000ffe <pack_left_shift_u16>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	b2da      	uxtb	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s8, 4u, 0xffu);
 800a348:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	2104      	movs	r1, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fe6b 	bl	800102c <pack_right_shift_u16>
 800a356:	4603      	mov	r3, r0
 800a358:	4619      	mov	r1, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	430a      	orrs	r2, r1
 800a366:	b2d2      	uxtb	r2, r2
 800a368:	701a      	strb	r2, [r3, #0]
        t2s8 = (uint16_t)src_p->t2s8;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800a370:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        dst_p[2] |= pack_left_shift_u16(t2s8, 0u, 0xffu);
 800a374:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a378:	22ff      	movs	r2, #255	; 0xff
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f6 fe3e 	bl	8000ffe <pack_left_shift_u16>
 800a382:	4603      	mov	r3, r0
 800a384:	4619      	mov	r1, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3302      	adds	r3, #2
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3302      	adds	r3, #2
 800a390:	430a      	orrs	r2, r1
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s8, 8u, 0x0fu);
 800a396:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a39a:	220f      	movs	r2, #15
 800a39c:	2108      	movs	r1, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fe44 	bl	800102c <pack_right_shift_u16>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3303      	adds	r3, #3
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
        t3s8 = (uint16_t)src_p->t3s8;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        dst_p[3] |= pack_left_shift_u16(t3s8, 4u, 0xf0u);
 800a3c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3c6:	22f0      	movs	r2, #240	; 0xf0
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 fe17 	bl	8000ffe <pack_left_shift_u16>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3303      	adds	r3, #3
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s8, 4u, 0xffu);
 800a3e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3e8:	22ff      	movs	r2, #255	; 0xff
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 fe1d 	bl	800102c <pack_right_shift_u16>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3304      	adds	r3, #4
 800a400:	430a      	orrs	r2, r1
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
        t4s8 = (uint16_t)src_p->t4s8;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a40c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        dst_p[5] |= pack_left_shift_u16(t4s8, 0u, 0xffu);
 800a410:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	2100      	movs	r1, #0
 800a418:	4618      	mov	r0, r3
 800a41a:	f7f6 fdf0 	bl	8000ffe <pack_left_shift_u16>
 800a41e:	4603      	mov	r3, r0
 800a420:	4619      	mov	r1, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3305      	adds	r3, #5
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3305      	adds	r3, #5
 800a42c:	430a      	orrs	r2, r1
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s8, 8u, 0x0fu);
 800a432:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a436:	220f      	movs	r2, #15
 800a438:	2108      	movs	r1, #8
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 fdf6 	bl	800102c <pack_right_shift_u16>
 800a440:	4603      	mov	r3, r0
 800a442:	4619      	mov	r1, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3306      	adds	r3, #6
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3306      	adds	r3, #6
 800a44e:	430a      	orrs	r2, r1
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
        t5s8 = (uint16_t)src_p->t5s8;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800a45a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        dst_p[6] |= pack_left_shift_u16(t5s8, 4u, 0xf0u);
 800a45e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a462:	22f0      	movs	r2, #240	; 0xf0
 800a464:	2104      	movs	r1, #4
 800a466:	4618      	mov	r0, r3
 800a468:	f7f6 fdc9 	bl	8000ffe <pack_left_shift_u16>
 800a46c:	4603      	mov	r3, r0
 800a46e:	4619      	mov	r1, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3306      	adds	r3, #6
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3306      	adds	r3, #6
 800a47a:	430a      	orrs	r2, r1
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s8, 4u, 0xffu);
 800a480:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a484:	22ff      	movs	r2, #255	; 0xff
 800a486:	2104      	movs	r1, #4
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f6 fdcf 	bl	800102c <pack_right_shift_u16>
 800a48e:	4603      	mov	r3, r0
 800a490:	4619      	mov	r1, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3307      	adds	r3, #7
 800a496:	781a      	ldrb	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3307      	adds	r3, #7
 800a49c:	430a      	orrs	r2, r1
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
        break;
 800a4a2:	e308      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 8:
        t1s9 = (uint16_t)src_p->t1s9;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4aa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        dst_p[0] |= pack_left_shift_u16(t1s9, 4u, 0xf0u);
 800a4ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4b2:	22f0      	movs	r2, #240	; 0xf0
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f6 fda1 	bl	8000ffe <pack_left_shift_u16>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s9, 4u, 0xffu);
 800a4cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	2104      	movs	r1, #4
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fda9 	bl	800102c <pack_right_shift_u16>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
        t2s9 = (uint16_t)src_p->t2s9;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800a4f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        dst_p[2] |= pack_left_shift_u16(t2s9, 0u, 0xffu);
 800a4f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f7f6 fd7c 	bl	8000ffe <pack_left_shift_u16>
 800a506:	4603      	mov	r3, r0
 800a508:	4619      	mov	r1, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3302      	adds	r3, #2
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3302      	adds	r3, #2
 800a514:	430a      	orrs	r2, r1
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s9, 8u, 0x0fu);
 800a51a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a51e:	220f      	movs	r2, #15
 800a520:	2108      	movs	r1, #8
 800a522:	4618      	mov	r0, r3
 800a524:	f7f6 fd82 	bl	800102c <pack_right_shift_u16>
 800a528:	4603      	mov	r3, r0
 800a52a:	4619      	mov	r1, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3303      	adds	r3, #3
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3303      	adds	r3, #3
 800a536:	430a      	orrs	r2, r1
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	701a      	strb	r2, [r3, #0]
        t3s9 = (uint16_t)src_p->t3s9;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800a542:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        dst_p[3] |= pack_left_shift_u16(t3s9, 4u, 0xf0u);
 800a546:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a54a:	22f0      	movs	r2, #240	; 0xf0
 800a54c:	2104      	movs	r1, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 fd55 	bl	8000ffe <pack_left_shift_u16>
 800a554:	4603      	mov	r3, r0
 800a556:	4619      	mov	r1, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3303      	adds	r3, #3
 800a55c:	781a      	ldrb	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3303      	adds	r3, #3
 800a562:	430a      	orrs	r2, r1
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s9, 4u, 0xffu);
 800a568:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a56c:	22ff      	movs	r2, #255	; 0xff
 800a56e:	2104      	movs	r1, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7f6 fd5b 	bl	800102c <pack_right_shift_u16>
 800a576:	4603      	mov	r3, r0
 800a578:	4619      	mov	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3304      	adds	r3, #4
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3304      	adds	r3, #4
 800a584:	430a      	orrs	r2, r1
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
        t4s9 = (uint16_t)src_p->t4s9;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800a590:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        dst_p[5] |= pack_left_shift_u16(t4s9, 0u, 0xffu);
 800a594:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f6 fd2e 	bl	8000ffe <pack_left_shift_u16>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3305      	adds	r3, #5
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3305      	adds	r3, #5
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s9, 8u, 0x0fu);
 800a5b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a5ba:	220f      	movs	r2, #15
 800a5bc:	2108      	movs	r1, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f6 fd34 	bl	800102c <pack_right_shift_u16>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3306      	adds	r3, #6
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3306      	adds	r3, #6
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
        t5s9 = (uint16_t)src_p->t5s9;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800a5de:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        dst_p[6] |= pack_left_shift_u16(t5s9, 4u, 0xf0u);
 800a5e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a5e6:	22f0      	movs	r2, #240	; 0xf0
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f6 fd07 	bl	8000ffe <pack_left_shift_u16>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3306      	adds	r3, #6
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3306      	adds	r3, #6
 800a5fe:	430a      	orrs	r2, r1
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s9, 4u, 0xffu);
 800a604:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	2104      	movs	r1, #4
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7f6 fd0d 	bl	800102c <pack_right_shift_u16>
 800a612:	4603      	mov	r3, r0
 800a614:	4619      	mov	r1, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3307      	adds	r3, #7
 800a620:	430a      	orrs	r2, r1
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
        break;
 800a626:	e246      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 9:
        t1s10 = (uint16_t)src_p->t1s10;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a62e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        dst_p[0] |= pack_left_shift_u16(t1s10, 4u, 0xf0u);
 800a632:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a636:	22f0      	movs	r2, #240	; 0xf0
 800a638:	2104      	movs	r1, #4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f6 fcdf 	bl	8000ffe <pack_left_shift_u16>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4313      	orrs	r3, r2
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s10, 4u, 0xffu);
 800a650:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	2104      	movs	r1, #4
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f6 fce7 	bl	800102c <pack_right_shift_u16>
 800a65e:	4603      	mov	r3, r0
 800a660:	4619      	mov	r1, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3301      	adds	r3, #1
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	430a      	orrs	r2, r1
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]
        t2s10 = (uint16_t)src_p->t2s10;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800a678:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        dst_p[2] |= pack_left_shift_u16(t2s10, 0u, 0xffu);
 800a67c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a680:	22ff      	movs	r2, #255	; 0xff
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f7f6 fcba 	bl	8000ffe <pack_left_shift_u16>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4619      	mov	r1, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3302      	adds	r3, #2
 800a692:	781a      	ldrb	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3302      	adds	r3, #2
 800a698:	430a      	orrs	r2, r1
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s10, 8u, 0x0fu);
 800a69e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800a6a2:	220f      	movs	r2, #15
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f6 fcc0 	bl	800102c <pack_right_shift_u16>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3303      	adds	r3, #3
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
        t3s10 = (uint16_t)src_p->t3s10;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a6c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        dst_p[3] |= pack_left_shift_u16(t3s10, 4u, 0xf0u);
 800a6ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6ce:	22f0      	movs	r2, #240	; 0xf0
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f6 fc93 	bl	8000ffe <pack_left_shift_u16>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4619      	mov	r1, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3303      	adds	r3, #3
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3303      	adds	r3, #3
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s10, 4u, 0xffu);
 800a6ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f6 fc99 	bl	800102c <pack_right_shift_u16>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3304      	adds	r3, #4
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3304      	adds	r3, #4
 800a708:	430a      	orrs	r2, r1
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
        t4s10 = (uint16_t)src_p->t4s10;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800a714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        dst_p[5] |= pack_left_shift_u16(t4s10, 0u, 0xffu);
 800a718:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a71c:	22ff      	movs	r2, #255	; 0xff
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f7f6 fc6c 	bl	8000ffe <pack_left_shift_u16>
 800a726:	4603      	mov	r3, r0
 800a728:	4619      	mov	r1, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3305      	adds	r3, #5
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3305      	adds	r3, #5
 800a734:	430a      	orrs	r2, r1
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s10, 8u, 0x0fu);
 800a73a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a73e:	220f      	movs	r2, #15
 800a740:	2108      	movs	r1, #8
 800a742:	4618      	mov	r0, r3
 800a744:	f7f6 fc72 	bl	800102c <pack_right_shift_u16>
 800a748:	4603      	mov	r3, r0
 800a74a:	4619      	mov	r1, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3306      	adds	r3, #6
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3306      	adds	r3, #6
 800a756:	430a      	orrs	r2, r1
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
        t5s10 = (uint16_t)src_p->t5s10;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800a762:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        dst_p[6] |= pack_left_shift_u16(t5s10, 4u, 0xf0u);
 800a766:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a76a:	22f0      	movs	r2, #240	; 0xf0
 800a76c:	2104      	movs	r1, #4
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f6 fc45 	bl	8000ffe <pack_left_shift_u16>
 800a774:	4603      	mov	r3, r0
 800a776:	4619      	mov	r1, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3306      	adds	r3, #6
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3306      	adds	r3, #6
 800a782:	430a      	orrs	r2, r1
 800a784:	b2d2      	uxtb	r2, r2
 800a786:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s10, 4u, 0xffu);
 800a788:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a78c:	22ff      	movs	r2, #255	; 0xff
 800a78e:	2104      	movs	r1, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7f6 fc4b 	bl	800102c <pack_right_shift_u16>
 800a796:	4603      	mov	r3, r0
 800a798:	4619      	mov	r1, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
        break;
 800a7aa:	e184      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 10:
        t1s11 = (uint16_t)src_p->t1s11;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a7b2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        dst_p[0] |= pack_left_shift_u16(t1s11, 4u, 0xf0u);
 800a7b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7ba:	22f0      	movs	r2, #240	; 0xf0
 800a7bc:	2104      	movs	r1, #4
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f6 fc1d 	bl	8000ffe <pack_left_shift_u16>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s11, 4u, 0xffu);
 800a7d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a7d8:	22ff      	movs	r2, #255	; 0xff
 800a7da:	2104      	movs	r1, #4
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f6 fc25 	bl	800102c <pack_right_shift_u16>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
        t2s11 = (uint16_t)src_p->t2s11;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a7fc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        dst_p[2] |= pack_left_shift_u16(t2s11, 0u, 0xffu);
 800a800:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a804:	22ff      	movs	r2, #255	; 0xff
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f7f6 fbf8 	bl	8000ffe <pack_left_shift_u16>
 800a80e:	4603      	mov	r3, r0
 800a810:	4619      	mov	r1, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3302      	adds	r3, #2
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3302      	adds	r3, #2
 800a81c:	430a      	orrs	r2, r1
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s11, 8u, 0x0fu);
 800a822:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a826:	220f      	movs	r2, #15
 800a828:	2108      	movs	r1, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fbfe 	bl	800102c <pack_right_shift_u16>
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3303      	adds	r3, #3
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3303      	adds	r3, #3
 800a83e:	430a      	orrs	r2, r1
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]
        t3s11 = (uint16_t)src_p->t3s11;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a84a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        dst_p[3] |= pack_left_shift_u16(t3s11, 4u, 0xf0u);
 800a84e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a852:	22f0      	movs	r2, #240	; 0xf0
 800a854:	2104      	movs	r1, #4
 800a856:	4618      	mov	r0, r3
 800a858:	f7f6 fbd1 	bl	8000ffe <pack_left_shift_u16>
 800a85c:	4603      	mov	r3, r0
 800a85e:	4619      	mov	r1, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3303      	adds	r3, #3
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3303      	adds	r3, #3
 800a86a:	430a      	orrs	r2, r1
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s11, 4u, 0xffu);
 800a870:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a874:	22ff      	movs	r2, #255	; 0xff
 800a876:	2104      	movs	r1, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f6 fbd7 	bl	800102c <pack_right_shift_u16>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3304      	adds	r3, #4
 800a88c:	430a      	orrs	r2, r1
 800a88e:	b2d2      	uxtb	r2, r2
 800a890:	701a      	strb	r2, [r3, #0]
        t4s11 = (uint16_t)src_p->t4s11;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800a898:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        dst_p[5] |= pack_left_shift_u16(t4s11, 0u, 0xffu);
 800a89c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8a0:	22ff      	movs	r2, #255	; 0xff
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7f6 fbaa 	bl	8000ffe <pack_left_shift_u16>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3305      	adds	r3, #5
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3305      	adds	r3, #5
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s11, 8u, 0x0fu);
 800a8be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a8c2:	220f      	movs	r2, #15
 800a8c4:	2108      	movs	r1, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f6 fbb0 	bl	800102c <pack_right_shift_u16>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3306      	adds	r3, #6
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
        t5s11 = (uint16_t)src_p->t5s11;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800a8e6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        dst_p[6] |= pack_left_shift_u16(t5s11, 4u, 0xf0u);
 800a8ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a8ee:	22f0      	movs	r2, #240	; 0xf0
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7f6 fb83 	bl	8000ffe <pack_left_shift_u16>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3306      	adds	r3, #6
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3306      	adds	r3, #6
 800a906:	430a      	orrs	r2, r1
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s11, 4u, 0xffu);
 800a90c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	2104      	movs	r1, #4
 800a914:	4618      	mov	r0, r3
 800a916:	f7f6 fb89 	bl	800102c <pack_right_shift_u16>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4619      	mov	r1, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3307      	adds	r3, #7
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3307      	adds	r3, #7
 800a928:	430a      	orrs	r2, r1
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]
        break;
 800a92e:	e0c2      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    case 11:
        t1s12 = (uint16_t)src_p->t1s12;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a936:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        dst_p[0] |= pack_left_shift_u16(t1s12, 4u, 0xf0u);
 800a93a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a93e:	22f0      	movs	r2, #240	; 0xf0
 800a940:	2104      	movs	r1, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7f6 fb5b 	bl	8000ffe <pack_left_shift_u16>
 800a948:	4603      	mov	r3, r0
 800a94a:	461a      	mov	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	b2da      	uxtb	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	701a      	strb	r2, [r3, #0]
        dst_p[1] |= pack_right_shift_u16(t1s12, 4u, 0xffu);
 800a958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	2104      	movs	r1, #4
 800a960:	4618      	mov	r0, r3
 800a962:	f7f6 fb63 	bl	800102c <pack_right_shift_u16>
 800a966:	4603      	mov	r3, r0
 800a968:	4619      	mov	r1, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3301      	adds	r3, #1
 800a96e:	781a      	ldrb	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	430a      	orrs	r2, r1
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
        t2s12 = (uint16_t)src_p->t2s12;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a980:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        dst_p[2] |= pack_left_shift_u16(t2s12, 0u, 0xffu);
 800a984:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f6 fb36 	bl	8000ffe <pack_left_shift_u16>
 800a992:	4603      	mov	r3, r0
 800a994:	4619      	mov	r1, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3302      	adds	r3, #2
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3302      	adds	r3, #2
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_right_shift_u16(t2s12, 8u, 0x0fu);
 800a9a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a9aa:	220f      	movs	r2, #15
 800a9ac:	2108      	movs	r1, #8
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f6 fb3c 	bl	800102c <pack_right_shift_u16>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	b2d2      	uxtb	r2, r2
 800a9c6:	701a      	strb	r2, [r3, #0]
        t3s12 = (uint16_t)src_p->t3s12;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a9ce:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        dst_p[3] |= pack_left_shift_u16(t3s12, 4u, 0xf0u);
 800a9d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9d6:	22f0      	movs	r2, #240	; 0xf0
 800a9d8:	2104      	movs	r1, #4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f6 fb0f 	bl	8000ffe <pack_left_shift_u16>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3303      	adds	r3, #3
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3303      	adds	r3, #3
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	701a      	strb	r2, [r3, #0]
        dst_p[4] |= pack_right_shift_u16(t3s12, 4u, 0xffu);
 800a9f4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 fb15 	bl	800102c <pack_right_shift_u16>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4619      	mov	r1, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	781a      	ldrb	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	430a      	orrs	r2, r1
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	701a      	strb	r2, [r3, #0]
        t4s12 = (uint16_t)src_p->t4s12;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800aa1c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        dst_p[5] |= pack_left_shift_u16(t4s12, 0u, 0xffu);
 800aa20:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa24:	22ff      	movs	r2, #255	; 0xff
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7f6 fae8 	bl	8000ffe <pack_left_shift_u16>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4619      	mov	r1, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3305      	adds	r3, #5
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3305      	adds	r3, #5
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
        dst_p[6] |= pack_right_shift_u16(t4s12, 8u, 0x0fu);
 800aa42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800aa46:	220f      	movs	r2, #15
 800aa48:	2108      	movs	r1, #8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f6 faee 	bl	800102c <pack_right_shift_u16>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4619      	mov	r1, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3306      	adds	r3, #6
 800aa58:	781a      	ldrb	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3306      	adds	r3, #6
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	701a      	strb	r2, [r3, #0]
        t5s12 = (uint16_t)src_p->t5s12;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800aa6a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        dst_p[6] |= pack_left_shift_u16(t5s12, 4u, 0xf0u);
 800aa6e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa72:	22f0      	movs	r2, #240	; 0xf0
 800aa74:	2104      	movs	r1, #4
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f6 fac1 	bl	8000ffe <pack_left_shift_u16>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4619      	mov	r1, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3306      	adds	r3, #6
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3306      	adds	r3, #6
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
        dst_p[7] |= pack_right_shift_u16(t5s12, 4u, 0xffu);
 800aa90:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	2104      	movs	r1, #4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 fac7 	bl	800102c <pack_right_shift_u16>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3307      	adds	r3, #7
 800aaac:	430a      	orrs	r2, r1
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
        break;
 800aab2:	e000      	b.n	800aab6 <can1_ams_cell_temperatures_pack+0x1232>

    default:
        break;
 800aab4:	bf00      	nop
    }

    return (8);
 800aab6:	2308      	movs	r3, #8
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3788      	adds	r7, #136	; 0x88
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <can1_ams_cell_temperatures_unpack>:

int can1_ams_cell_temperatures_unpack(
    struct can1_ams_cell_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b0a2      	sub	sp, #136	; 0x88
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
    uint16_t t5s6;
    uint16_t t5s7;
    uint16_t t5s8;
    uint16_t t5s9;

    if (size < 8u) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d803      	bhi.n	800aada <can1_ams_cell_temperatures_unpack+0x1a>
        return (-EINVAL);
 800aad2:	f06f 0315 	mvn.w	r3, #21
 800aad6:	f001 ba11 	b.w	800befc <can1_ams_cell_temperatures_unpack+0x143c>
    }

    dst_p->temperature_multiplexor = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	220f      	movs	r2, #15
 800aae0:	2100      	movs	r1, #0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f6 fad1 	bl	800108a <unpack_right_shift_u8>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	701a      	strb	r2, [r3, #0]

    switch (dst_p->temperature_multiplexor) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b0b      	cmp	r3, #11
 800aaf6:	f201 81ff 	bhi.w	800bef8 <can1_ams_cell_temperatures_unpack+0x1438>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <can1_ams_cell_temperatures_unpack+0x40>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab31 	.word	0x0800ab31
 800ab04:	0800acd7 	.word	0x0800acd7
 800ab08:	0800ae7d 	.word	0x0800ae7d
 800ab0c:	0800b023 	.word	0x0800b023
 800ab10:	0800b1c9 	.word	0x0800b1c9
 800ab14:	0800b36f 	.word	0x0800b36f
 800ab18:	0800b515 	.word	0x0800b515
 800ab1c:	0800b6bb 	.word	0x0800b6bb
 800ab20:	0800b861 	.word	0x0800b861
 800ab24:	0800ba07 	.word	0x0800ba07
 800ab28:	0800bbad 	.word	0x0800bbad
 800ab2c:	0800bd53 	.word	0x0800bd53

    case 0:
        t1s1 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	22f0      	movs	r2, #240	; 0xf0
 800ab36:	2104      	movs	r1, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f6 fabe 	bl	80010ba <unpack_right_shift_u16>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        t1s1 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3301      	adds	r3, #1
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	22ff      	movs	r2, #255	; 0xff
 800ab4c:	2104      	movs	r1, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7f6 fa83 	bl	800105a <unpack_left_shift_u16>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

        if ((t1s1 & (1u << 11)) != 0u) {
 800ab62:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d007      	beq.n	800ab7e <can1_ams_cell_temperatures_unpack+0xbe>
            t1s1 |= 0xf000u;
 800ab6e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ab72:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ab76:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ab7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        }

        dst_p->t1s1 = (int16_t)t1s1;
 800ab7e:	f9b7 2080 	ldrsh.w	r2, [r7, #128]	; 0x80
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	805a      	strh	r2, [r3, #2]
        t2s1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	3302      	adds	r3, #2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	22ff      	movs	r2, #255	; 0xff
 800ab8e:	2100      	movs	r1, #0
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f6 fa92 	bl	80010ba <unpack_right_shift_u16>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        t2s1 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3303      	adds	r3, #3
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	220f      	movs	r2, #15
 800aba4:	2108      	movs	r1, #8
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f6 fa57 	bl	800105a <unpack_left_shift_u16>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

        if ((t2s1 & (1u << 11)) != 0u) {
 800abba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <can1_ams_cell_temperatures_unpack+0x116>
            t2s1 |= 0xf000u;
 800abc6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800abca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800abce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800abd2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        }

        dst_p->t2s1 = (int16_t)t2s1;
 800abd6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	835a      	strh	r2, [r3, #26]
        t3s1 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	3303      	adds	r3, #3
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	22f0      	movs	r2, #240	; 0xf0
 800abe6:	2104      	movs	r1, #4
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f6 fa66 	bl	80010ba <unpack_right_shift_u16>
 800abee:	4603      	mov	r3, r0
 800abf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        t3s1 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3304      	adds	r3, #4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	22ff      	movs	r2, #255	; 0xff
 800abfc:	2104      	movs	r1, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f6 fa2b 	bl	800105a <unpack_left_shift_u16>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

        if ((t3s1 & (1u << 11)) != 0u) {
 800ac12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <can1_ams_cell_temperatures_unpack+0x16e>
            t3s1 |= 0xf000u;
 800ac1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ac22:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac26:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        }

        dst_p->t3s1 = (int16_t)t3s1;
 800ac2e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	865a      	strh	r2, [r3, #50]	; 0x32
        t4s1 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3305      	adds	r3, #5
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f6 fa3a 	bl	80010ba <unpack_right_shift_u16>
 800ac46:	4603      	mov	r3, r0
 800ac48:	873b      	strh	r3, [r7, #56]	; 0x38
        t4s1 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3306      	adds	r3, #6
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	220f      	movs	r2, #15
 800ac52:	2108      	movs	r1, #8
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7f6 fa00 	bl	800105a <unpack_left_shift_u16>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac60:	4313      	orrs	r3, r2
 800ac62:	873b      	strh	r3, [r7, #56]	; 0x38

        if ((t4s1 & (1u << 11)) != 0u) {
 800ac64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <can1_ams_cell_temperatures_unpack+0x1ba>
            t4s1 |= 0xf000u;
 800ac6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ac74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ac78:	873b      	strh	r3, [r7, #56]	; 0x38
        }

        dst_p->t4s1 = (int16_t)t4s1;
 800ac7a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        t5s1 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3306      	adds	r3, #6
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	22f0      	movs	r2, #240	; 0xf0
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f6 fa13 	bl	80010ba <unpack_right_shift_u16>
 800ac94:	4603      	mov	r3, r0
 800ac96:	843b      	strh	r3, [r7, #32]
        t5s1 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	3307      	adds	r3, #7
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	22ff      	movs	r2, #255	; 0xff
 800aca0:	2104      	movs	r1, #4
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f6 f9d9 	bl	800105a <unpack_left_shift_u16>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	8c3b      	ldrh	r3, [r7, #32]
 800acae:	4313      	orrs	r3, r2
 800acb0:	843b      	strh	r3, [r7, #32]

        if ((t5s1 & (1u << 11)) != 0u) {
 800acb2:	8c3b      	ldrh	r3, [r7, #32]
 800acb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <can1_ams_cell_temperatures_unpack+0x208>
            t5s1 |= 0xf000u;
 800acbc:	8c3b      	ldrh	r3, [r7, #32]
 800acbe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800acc2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800acc6:	843b      	strh	r3, [r7, #32]
        }

        dst_p->t5s1 = (int16_t)t5s1;
 800acc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        break;
 800acd2:	f001 b912 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 1:
        t1s2 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	22f0      	movs	r2, #240	; 0xf0
 800acdc:	2104      	movs	r1, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f6 f9eb 	bl	80010ba <unpack_right_shift_u16>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        t1s2 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	3301      	adds	r3, #1
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	22ff      	movs	r2, #255	; 0xff
 800acf2:	2104      	movs	r1, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f6 f9b0 	bl	800105a <unpack_left_shift_u16>
 800acfa:	4603      	mov	r3, r0
 800acfc:	461a      	mov	r2, r3
 800acfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if ((t1s2 & (1u << 11)) != 0u) {
 800ad08:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <can1_ams_cell_temperatures_unpack+0x264>
            t1s2 |= 0xf000u;
 800ad14:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ad18:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad1c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        }

        dst_p->t1s2 = (int16_t)t1s2;
 800ad24:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	809a      	strh	r2, [r3, #4]
        t2s2 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3302      	adds	r3, #2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	22ff      	movs	r2, #255	; 0xff
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f6 f9bf 	bl	80010ba <unpack_right_shift_u16>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        t2s2 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3303      	adds	r3, #3
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	220f      	movs	r2, #15
 800ad4a:	2108      	movs	r1, #8
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f6 f984 	bl	800105a <unpack_left_shift_u16>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        if ((t2s2 & (1u << 11)) != 0u) {
 800ad60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <can1_ams_cell_temperatures_unpack+0x2bc>
            t2s2 |= 0xf000u;
 800ad6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ad70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ad74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ad78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        }

        dst_p->t2s2 = (int16_t)t2s2;
 800ad7c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	839a      	strh	r2, [r3, #28]
        t3s2 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	3303      	adds	r3, #3
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	22f0      	movs	r2, #240	; 0xf0
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f6 f993 	bl	80010ba <unpack_right_shift_u16>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        t3s2 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	2104      	movs	r1, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f6 f958 	bl	800105a <unpack_left_shift_u16>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        if ((t3s2 & (1u << 11)) != 0u) {
 800adb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <can1_ams_cell_temperatures_unpack+0x314>
            t3s2 |= 0xf000u;
 800adc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adc8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800adcc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800add0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        dst_p->t3s2 = (int16_t)t3s2;
 800add4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	869a      	strh	r2, [r3, #52]	; 0x34
        t4s2 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3305      	adds	r3, #5
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	22ff      	movs	r2, #255	; 0xff
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f6 f967 	bl	80010ba <unpack_right_shift_u16>
 800adec:	4603      	mov	r3, r0
 800adee:	86fb      	strh	r3, [r7, #54]	; 0x36
        t4s2 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3306      	adds	r3, #6
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	220f      	movs	r2, #15
 800adf8:	2108      	movs	r1, #8
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f6 f92d 	bl	800105a <unpack_left_shift_u16>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae06:	4313      	orrs	r3, r2
 800ae08:	86fb      	strh	r3, [r7, #54]	; 0x36

        if ((t4s2 & (1u << 11)) != 0u) {
 800ae0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <can1_ams_cell_temperatures_unpack+0x360>
            t4s2 |= 0xf000u;
 800ae14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        dst_p->t4s2 = (int16_t)t4s2;
 800ae20:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        t5s2 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3306      	adds	r3, #6
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	22f0      	movs	r2, #240	; 0xf0
 800ae32:	2104      	movs	r1, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f6 f940 	bl	80010ba <unpack_right_shift_u16>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	83fb      	strh	r3, [r7, #30]
        t5s2 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	3307      	adds	r3, #7
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	22ff      	movs	r2, #255	; 0xff
 800ae46:	2104      	movs	r1, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f6 f906 	bl	800105a <unpack_left_shift_u16>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	8bfb      	ldrh	r3, [r7, #30]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	83fb      	strh	r3, [r7, #30]

        if ((t5s2 & (1u << 11)) != 0u) {
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <can1_ams_cell_temperatures_unpack+0x3ae>
            t5s2 |= 0xf000u;
 800ae62:	8bfb      	ldrh	r3, [r7, #30]
 800ae64:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae68:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae6c:	83fb      	strh	r3, [r7, #30]
        }

        dst_p->t5s2 = (int16_t)t5s2;
 800ae6e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        break;
 800ae78:	f001 b83f 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 2:
        t1s3 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	22f0      	movs	r2, #240	; 0xf0
 800ae82:	2104      	movs	r1, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f6 f918 	bl	80010ba <unpack_right_shift_u16>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        t1s3 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	3301      	adds	r3, #1
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	22ff      	movs	r2, #255	; 0xff
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f6 f8dd 	bl	800105a <unpack_left_shift_u16>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

        if ((t1s3 & (1u << 11)) != 0u) {
 800aeae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aeb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <can1_ams_cell_temperatures_unpack+0x40a>
            t1s3 |= 0xf000u;
 800aeba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800aebe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800aec2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800aec6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        }

        dst_p->t1s3 = (int16_t)t1s3;
 800aeca:	f9b7 207c 	ldrsh.w	r2, [r7, #124]	; 0x7c
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	80da      	strh	r2, [r3, #6]
        t2s3 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	3302      	adds	r3, #2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	22ff      	movs	r2, #255	; 0xff
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f6 f8ec 	bl	80010ba <unpack_right_shift_u16>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        t2s3 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	3303      	adds	r3, #3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	220f      	movs	r2, #15
 800aef0:	2108      	movs	r1, #8
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f6 f8b1 	bl	800105a <unpack_left_shift_u16>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af00:	4313      	orrs	r3, r2
 800af02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

        if ((t2s3 & (1u << 11)) != 0u) {
 800af06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d007      	beq.n	800af22 <can1_ams_cell_temperatures_unpack+0x462>
            t2s3 |= 0xf000u;
 800af12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        }

        dst_p->t2s3 = (int16_t)t2s3;
 800af22:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	83da      	strh	r2, [r3, #30]
        t3s3 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3303      	adds	r3, #3
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	22f0      	movs	r2, #240	; 0xf0
 800af32:	2104      	movs	r1, #4
 800af34:	4618      	mov	r0, r3
 800af36:	f7f6 f8c0 	bl	80010ba <unpack_right_shift_u16>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        t3s3 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3304      	adds	r3, #4
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	22ff      	movs	r2, #255	; 0xff
 800af48:	2104      	movs	r1, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f6 f885 	bl	800105a <unpack_left_shift_u16>
 800af50:	4603      	mov	r3, r0
 800af52:	461a      	mov	r2, r3
 800af54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af58:	4313      	orrs	r3, r2
 800af5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((t3s3 & (1u << 11)) != 0u) {
 800af5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <can1_ams_cell_temperatures_unpack+0x4ba>
            t3s3 |= 0xf000u;
 800af6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af6e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af72:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        }

        dst_p->t3s3 = (int16_t)t3s3;
 800af7a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	86da      	strh	r2, [r3, #54]	; 0x36
        t4s3 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3305      	adds	r3, #5
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	22ff      	movs	r2, #255	; 0xff
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7f6 f894 	bl	80010ba <unpack_right_shift_u16>
 800af92:	4603      	mov	r3, r0
 800af94:	86bb      	strh	r3, [r7, #52]	; 0x34
        t4s3 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	3306      	adds	r3, #6
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	220f      	movs	r2, #15
 800af9e:	2108      	movs	r1, #8
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7f6 f85a 	bl	800105a <unpack_left_shift_u16>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afac:	4313      	orrs	r3, r2
 800afae:	86bb      	strh	r3, [r7, #52]	; 0x34

        if ((t4s3 & (1u << 11)) != 0u) {
 800afb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <can1_ams_cell_temperatures_unpack+0x506>
            t4s3 |= 0xf000u;
 800afba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afbc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800afc0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800afc4:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        dst_p->t4s3 = (int16_t)t4s3;
 800afc6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        t5s3 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3306      	adds	r3, #6
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	22f0      	movs	r2, #240	; 0xf0
 800afd8:	2104      	movs	r1, #4
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f6 f86d 	bl	80010ba <unpack_right_shift_u16>
 800afe0:	4603      	mov	r3, r0
 800afe2:	83bb      	strh	r3, [r7, #28]
        t5s3 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	3307      	adds	r3, #7
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	22ff      	movs	r2, #255	; 0xff
 800afec:	2104      	movs	r1, #4
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f6 f833 	bl	800105a <unpack_left_shift_u16>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	4313      	orrs	r3, r2
 800affc:	83bb      	strh	r3, [r7, #28]

        if ((t5s3 & (1u << 11)) != 0u) {
 800affe:	8bbb      	ldrh	r3, [r7, #28]
 800b000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <can1_ams_cell_temperatures_unpack+0x554>
            t5s3 |= 0xf000u;
 800b008:	8bbb      	ldrh	r3, [r7, #28]
 800b00a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b00e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b012:	83bb      	strh	r3, [r7, #28]
        }

        dst_p->t5s3 = (int16_t)t5s3;
 800b014:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        break;
 800b01e:	f000 bf6c 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 3:
        t1s4 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	22f0      	movs	r2, #240	; 0xf0
 800b028:	2104      	movs	r1, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f6 f845 	bl	80010ba <unpack_right_shift_u16>
 800b030:	4603      	mov	r3, r0
 800b032:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        t1s4 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	22ff      	movs	r2, #255	; 0xff
 800b03e:	2104      	movs	r1, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7f6 f80a 	bl	800105a <unpack_left_shift_u16>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b04e:	4313      	orrs	r3, r2
 800b050:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

        if ((t1s4 & (1u << 11)) != 0u) {
 800b054:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <can1_ams_cell_temperatures_unpack+0x5b0>
            t1s4 |= 0xf000u;
 800b060:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b064:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b068:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b06c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        }

        dst_p->t1s4 = (int16_t)t1s4;
 800b070:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	811a      	strh	r2, [r3, #8]
        t2s4 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	3302      	adds	r3, #2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	22ff      	movs	r2, #255	; 0xff
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f7f6 f819 	bl	80010ba <unpack_right_shift_u16>
 800b088:	4603      	mov	r3, r0
 800b08a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        t2s4 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	3303      	adds	r3, #3
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	220f      	movs	r2, #15
 800b096:	2108      	movs	r1, #8
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f5 ffde 	bl	800105a <unpack_left_shift_u16>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        if ((t2s4 & (1u << 11)) != 0u) {
 800b0ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <can1_ams_cell_temperatures_unpack+0x608>
            t2s4 |= 0xf000u;
 800b0b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0bc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b0c0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b0c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        }

        dst_p->t2s4 = (int16_t)t2s4;
 800b0c8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	841a      	strh	r2, [r3, #32]
        t3s4 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3303      	adds	r3, #3
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	22f0      	movs	r2, #240	; 0xf0
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f5 ffed 	bl	80010ba <unpack_right_shift_u16>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        t3s4 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 ffb2 	bl	800105a <unpack_left_shift_u16>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((t3s4 & (1u << 11)) != 0u) {
 800b104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <can1_ams_cell_temperatures_unpack+0x660>
            t3s4 |= 0xf000u;
 800b110:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b114:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b118:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b11c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        dst_p->t3s4 = (int16_t)t3s4;
 800b120:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	871a      	strh	r2, [r3, #56]	; 0x38
        t4s4 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3305      	adds	r3, #5
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	22ff      	movs	r2, #255	; 0xff
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f7f5 ffc1 	bl	80010ba <unpack_right_shift_u16>
 800b138:	4603      	mov	r3, r0
 800b13a:	867b      	strh	r3, [r7, #50]	; 0x32
        t4s4 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3306      	adds	r3, #6
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	220f      	movs	r2, #15
 800b144:	2108      	movs	r1, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f7f5 ff87 	bl	800105a <unpack_left_shift_u16>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b152:	4313      	orrs	r3, r2
 800b154:	867b      	strh	r3, [r7, #50]	; 0x32

        if ((t4s4 & (1u << 11)) != 0u) {
 800b156:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <can1_ams_cell_temperatures_unpack+0x6ac>
            t4s4 |= 0xf000u;
 800b160:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b162:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b166:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b16a:	867b      	strh	r3, [r7, #50]	; 0x32
        }

        dst_p->t4s4 = (int16_t)t4s4;
 800b16c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        t5s4 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3306      	adds	r3, #6
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	22f0      	movs	r2, #240	; 0xf0
 800b17e:	2104      	movs	r1, #4
 800b180:	4618      	mov	r0, r3
 800b182:	f7f5 ff9a 	bl	80010ba <unpack_right_shift_u16>
 800b186:	4603      	mov	r3, r0
 800b188:	837b      	strh	r3, [r7, #26]
        t5s4 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3307      	adds	r3, #7
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	2104      	movs	r1, #4
 800b194:	4618      	mov	r0, r3
 800b196:	f7f5 ff60 	bl	800105a <unpack_left_shift_u16>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	8b7b      	ldrh	r3, [r7, #26]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	837b      	strh	r3, [r7, #26]

        if ((t5s4 & (1u << 11)) != 0u) {
 800b1a4:	8b7b      	ldrh	r3, [r7, #26]
 800b1a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <can1_ams_cell_temperatures_unpack+0x6fa>
            t5s4 |= 0xf000u;
 800b1ae:	8b7b      	ldrh	r3, [r7, #26]
 800b1b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b1b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b1b8:	837b      	strh	r3, [r7, #26]
        }

        dst_p->t5s4 = (int16_t)t5s4;
 800b1ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        break;
 800b1c4:	f000 be99 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 4:
        t1s5 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	22f0      	movs	r2, #240	; 0xf0
 800b1ce:	2104      	movs	r1, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f5 ff72 	bl	80010ba <unpack_right_shift_u16>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        t1s5 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f5 ff37 	bl	800105a <unpack_left_shift_u16>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

        if ((t1s5 & (1u << 11)) != 0u) {
 800b1fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b1fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <can1_ams_cell_temperatures_unpack+0x756>
            t1s5 |= 0xf000u;
 800b206:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b20a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b20e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b212:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        }

        dst_p->t1s5 = (int16_t)t1s5;
 800b216:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	815a      	strh	r2, [r3, #10]
        t2s5 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	3302      	adds	r3, #2
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	2100      	movs	r1, #0
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f5 ff46 	bl	80010ba <unpack_right_shift_u16>
 800b22e:	4603      	mov	r3, r0
 800b230:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        t2s5 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	3303      	adds	r3, #3
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	220f      	movs	r2, #15
 800b23c:	2108      	movs	r1, #8
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f5 ff0b 	bl	800105a <unpack_left_shift_u16>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

        if ((t2s5 & (1u << 11)) != 0u) {
 800b252:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <can1_ams_cell_temperatures_unpack+0x7ae>
            t2s5 |= 0xf000u;
 800b25e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800b262:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b266:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b26a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        }

        dst_p->t2s5 = (int16_t)t2s5;
 800b26e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	845a      	strh	r2, [r3, #34]	; 0x22
        t3s5 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	3303      	adds	r3, #3
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	22f0      	movs	r2, #240	; 0xf0
 800b27e:	2104      	movs	r1, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7f5 ff1a 	bl	80010ba <unpack_right_shift_u16>
 800b286:	4603      	mov	r3, r0
 800b288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        t3s5 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	3304      	adds	r3, #4
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	22ff      	movs	r2, #255	; 0xff
 800b294:	2104      	movs	r1, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7f5 fedf 	bl	800105a <unpack_left_shift_u16>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

        if ((t3s5 & (1u << 11)) != 0u) {
 800b2aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d007      	beq.n	800b2c6 <can1_ams_cell_temperatures_unpack+0x806>
            t3s5 |= 0xf000u;
 800b2b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2ba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b2be:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b2c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        }

        dst_p->t3s5 = (int16_t)t3s5;
 800b2c6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	875a      	strh	r2, [r3, #58]	; 0x3a
        t4s5 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3305      	adds	r3, #5
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f5 feee 	bl	80010ba <unpack_right_shift_u16>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	863b      	strh	r3, [r7, #48]	; 0x30
        t4s5 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	3306      	adds	r3, #6
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	220f      	movs	r2, #15
 800b2ea:	2108      	movs	r1, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f5 feb4 	bl	800105a <unpack_left_shift_u16>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	863b      	strh	r3, [r7, #48]	; 0x30

        if ((t4s5 & (1u << 11)) != 0u) {
 800b2fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <can1_ams_cell_temperatures_unpack+0x852>
            t4s5 |= 0xf000u;
 800b306:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b308:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b30c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b310:	863b      	strh	r3, [r7, #48]	; 0x30
        }

        dst_p->t4s5 = (int16_t)t4s5;
 800b312:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        t5s5 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3306      	adds	r3, #6
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	22f0      	movs	r2, #240	; 0xf0
 800b324:	2104      	movs	r1, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7f5 fec7 	bl	80010ba <unpack_right_shift_u16>
 800b32c:	4603      	mov	r3, r0
 800b32e:	833b      	strh	r3, [r7, #24]
        t5s5 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3307      	adds	r3, #7
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	22ff      	movs	r2, #255	; 0xff
 800b338:	2104      	movs	r1, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7f5 fe8d 	bl	800105a <unpack_left_shift_u16>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	8b3b      	ldrh	r3, [r7, #24]
 800b346:	4313      	orrs	r3, r2
 800b348:	833b      	strh	r3, [r7, #24]

        if ((t5s5 & (1u << 11)) != 0u) {
 800b34a:	8b3b      	ldrh	r3, [r7, #24]
 800b34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <can1_ams_cell_temperatures_unpack+0x8a0>
            t5s5 |= 0xf000u;
 800b354:	8b3b      	ldrh	r3, [r7, #24]
 800b356:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b35a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b35e:	833b      	strh	r3, [r7, #24]
        }

        dst_p->t5s5 = (int16_t)t5s5;
 800b360:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        break;
 800b36a:	f000 bdc6 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 5:
        t1s6 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	22f0      	movs	r2, #240	; 0xf0
 800b374:	2104      	movs	r1, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7f5 fe9f 	bl	80010ba <unpack_right_shift_u16>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        t1s6 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	3301      	adds	r3, #1
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	22ff      	movs	r2, #255	; 0xff
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f5 fe64 	bl	800105a <unpack_left_shift_u16>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        if ((t1s6 & (1u << 11)) != 0u) {
 800b3a0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d007      	beq.n	800b3bc <can1_ams_cell_temperatures_unpack+0x8fc>
            t1s6 |= 0xf000u;
 800b3ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b3b0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b3b4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b3b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        }

        dst_p->t1s6 = (int16_t)t1s6;
 800b3bc:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	819a      	strh	r2, [r3, #12]
        t2s6 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	22ff      	movs	r2, #255	; 0xff
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7f5 fe73 	bl	80010ba <unpack_right_shift_u16>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        t2s6 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	220f      	movs	r2, #15
 800b3e2:	2108      	movs	r1, #8
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f5 fe38 	bl	800105a <unpack_left_shift_u16>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if ((t2s6 & (1u << 11)) != 0u) {
 800b3f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b400:	2b00      	cmp	r3, #0
 800b402:	d007      	beq.n	800b414 <can1_ams_cell_temperatures_unpack+0x954>
            t2s6 |= 0xf000u;
 800b404:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b408:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b40c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b410:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        }

        dst_p->t2s6 = (int16_t)t2s6;
 800b414:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	849a      	strh	r2, [r3, #36]	; 0x24
        t3s6 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	22f0      	movs	r2, #240	; 0xf0
 800b424:	2104      	movs	r1, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 fe47 	bl	80010ba <unpack_right_shift_u16>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        t3s6 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	22ff      	movs	r2, #255	; 0xff
 800b43a:	2104      	movs	r1, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f5 fe0c 	bl	800105a <unpack_left_shift_u16>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b44a:	4313      	orrs	r3, r2
 800b44c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        if ((t3s6 & (1u << 11)) != 0u) {
 800b450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <can1_ams_cell_temperatures_unpack+0x9ac>
            t3s6 |= 0xf000u;
 800b45c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b460:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b464:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b468:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }

        dst_p->t3s6 = (int16_t)t3s6;
 800b46c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	879a      	strh	r2, [r3, #60]	; 0x3c
        t4s6 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3305      	adds	r3, #5
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	22ff      	movs	r2, #255	; 0xff
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f5 fe1b 	bl	80010ba <unpack_right_shift_u16>
 800b484:	4603      	mov	r3, r0
 800b486:	85fb      	strh	r3, [r7, #46]	; 0x2e
        t4s6 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3306      	adds	r3, #6
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	220f      	movs	r2, #15
 800b490:	2108      	movs	r1, #8
 800b492:	4618      	mov	r0, r3
 800b494:	f7f5 fde1 	bl	800105a <unpack_left_shift_u16>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if ((t4s6 & (1u << 11)) != 0u) {
 800b4a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <can1_ams_cell_temperatures_unpack+0x9f8>
            t4s6 |= 0xf000u;
 800b4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b4b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }

        dst_p->t4s6 = (int16_t)t4s6;
 800b4b8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        t5s6 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3306      	adds	r3, #6
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	22f0      	movs	r2, #240	; 0xf0
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 fdf4 	bl	80010ba <unpack_right_shift_u16>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	82fb      	strh	r3, [r7, #22]
        t5s6 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	22ff      	movs	r2, #255	; 0xff
 800b4de:	2104      	movs	r1, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f5 fdba 	bl	800105a <unpack_left_shift_u16>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	8afb      	ldrh	r3, [r7, #22]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	82fb      	strh	r3, [r7, #22]

        if ((t5s6 & (1u << 11)) != 0u) {
 800b4f0:	8afb      	ldrh	r3, [r7, #22]
 800b4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <can1_ams_cell_temperatures_unpack+0xa46>
            t5s6 |= 0xf000u;
 800b4fa:	8afb      	ldrh	r3, [r7, #22]
 800b4fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b500:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b504:	82fb      	strh	r3, [r7, #22]
        }

        dst_p->t5s6 = (int16_t)t5s6;
 800b506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        break;
 800b510:	f000 bcf3 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 6:
        t1s7 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	22f0      	movs	r2, #240	; 0xf0
 800b51a:	2104      	movs	r1, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7f5 fdcc 	bl	80010ba <unpack_right_shift_u16>
 800b522:	4603      	mov	r3, r0
 800b524:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        t1s7 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3301      	adds	r3, #1
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	22ff      	movs	r2, #255	; 0xff
 800b530:	2104      	movs	r1, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f7f5 fd91 	bl	800105a <unpack_left_shift_u16>
 800b538:	4603      	mov	r3, r0
 800b53a:	461a      	mov	r2, r3
 800b53c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b540:	4313      	orrs	r3, r2
 800b542:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        if ((t1s7 & (1u << 11)) != 0u) {
 800b546:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b54a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <can1_ams_cell_temperatures_unpack+0xaa2>
            t1s7 |= 0xf000u;
 800b552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b556:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b55a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b55e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        }

        dst_p->t1s7 = (int16_t)t1s7;
 800b562:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	81da      	strh	r2, [r3, #14]
        t2s7 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	3302      	adds	r3, #2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	22ff      	movs	r2, #255	; 0xff
 800b572:	2100      	movs	r1, #0
 800b574:	4618      	mov	r0, r3
 800b576:	f7f5 fda0 	bl	80010ba <unpack_right_shift_u16>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        t2s7 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3303      	adds	r3, #3
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	220f      	movs	r2, #15
 800b588:	2108      	movs	r1, #8
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f5 fd65 	bl	800105a <unpack_left_shift_u16>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b598:	4313      	orrs	r3, r2
 800b59a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        if ((t2s7 & (1u << 11)) != 0u) {
 800b59e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d007      	beq.n	800b5ba <can1_ams_cell_temperatures_unpack+0xafa>
            t2s7 |= 0xf000u;
 800b5aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b5ae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b5b2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b5b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        dst_p->t2s7 = (int16_t)t2s7;
 800b5ba:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	84da      	strh	r2, [r3, #38]	; 0x26
        t3s7 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	3303      	adds	r3, #3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	22f0      	movs	r2, #240	; 0xf0
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f5 fd74 	bl	80010ba <unpack_right_shift_u16>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        t3s7 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	22ff      	movs	r2, #255	; 0xff
 800b5e0:	2104      	movs	r1, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f5 fd39 	bl	800105a <unpack_left_shift_u16>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if ((t3s7 & (1u << 11)) != 0u) {
 800b5f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b5fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <can1_ams_cell_temperatures_unpack+0xb52>
            t3s7 |= 0xf000u;
 800b602:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b606:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b60a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b60e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        dst_p->t3s7 = (int16_t)t3s7;
 800b612:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	87da      	strh	r2, [r3, #62]	; 0x3e
        t4s7 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	3305      	adds	r3, #5
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	22ff      	movs	r2, #255	; 0xff
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7f5 fd48 	bl	80010ba <unpack_right_shift_u16>
 800b62a:	4603      	mov	r3, r0
 800b62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        t4s7 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3306      	adds	r3, #6
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	220f      	movs	r2, #15
 800b636:	2108      	movs	r1, #8
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f5 fd0e 	bl	800105a <unpack_left_shift_u16>
 800b63e:	4603      	mov	r3, r0
 800b640:	461a      	mov	r2, r3
 800b642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b644:	4313      	orrs	r3, r2
 800b646:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if ((t4s7 & (1u << 11)) != 0u) {
 800b648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b64a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <can1_ams_cell_temperatures_unpack+0xb9e>
            t4s7 |= 0xf000u;
 800b652:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b654:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b658:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b65c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }

        dst_p->t4s7 = (int16_t)t4s7;
 800b65e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        t5s7 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3306      	adds	r3, #6
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	22f0      	movs	r2, #240	; 0xf0
 800b670:	2104      	movs	r1, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7f5 fd21 	bl	80010ba <unpack_right_shift_u16>
 800b678:	4603      	mov	r3, r0
 800b67a:	82bb      	strh	r3, [r7, #20]
        t5s7 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3307      	adds	r3, #7
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	22ff      	movs	r2, #255	; 0xff
 800b684:	2104      	movs	r1, #4
 800b686:	4618      	mov	r0, r3
 800b688:	f7f5 fce7 	bl	800105a <unpack_left_shift_u16>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	8abb      	ldrh	r3, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	82bb      	strh	r3, [r7, #20]

        if ((t5s7 & (1u << 11)) != 0u) {
 800b696:	8abb      	ldrh	r3, [r7, #20]
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <can1_ams_cell_temperatures_unpack+0xbec>
            t5s7 |= 0xf000u;
 800b6a0:	8abb      	ldrh	r3, [r7, #20]
 800b6a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b6a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b6aa:	82bb      	strh	r3, [r7, #20]
        }

        dst_p->t5s7 = (int16_t)t5s7;
 800b6ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        break;
 800b6b6:	f000 bc20 	b.w	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 7:
        t1s8 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	22f0      	movs	r2, #240	; 0xf0
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f5 fcf9 	bl	80010ba <unpack_right_shift_u16>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        t1s8 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	22ff      	movs	r2, #255	; 0xff
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f5 fcbe 	bl	800105a <unpack_left_shift_u16>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        if ((t1s8 & (1u << 11)) != 0u) {
 800b6ec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d007      	beq.n	800b708 <can1_ams_cell_temperatures_unpack+0xc48>
            t1s8 |= 0xf000u;
 800b6f8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b6fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b700:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b704:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        }

        dst_p->t1s8 = (int16_t)t1s8;
 800b708:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	821a      	strh	r2, [r3, #16]
        t2s8 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	3302      	adds	r3, #2
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	22ff      	movs	r2, #255	; 0xff
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f5 fccd 	bl	80010ba <unpack_right_shift_u16>
 800b720:	4603      	mov	r3, r0
 800b722:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        t2s8 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3303      	adds	r3, #3
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	220f      	movs	r2, #15
 800b72e:	2108      	movs	r1, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f7f5 fc92 	bl	800105a <unpack_left_shift_u16>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b73e:	4313      	orrs	r3, r2
 800b740:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if ((t2s8 & (1u << 11)) != 0u) {
 800b744:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <can1_ams_cell_temperatures_unpack+0xca0>
            t2s8 |= 0xf000u;
 800b750:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b754:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b758:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b75c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        }

        dst_p->t2s8 = (int16_t)t2s8;
 800b760:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	851a      	strh	r2, [r3, #40]	; 0x28
        t3s8 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	3303      	adds	r3, #3
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	22f0      	movs	r2, #240	; 0xf0
 800b770:	2104      	movs	r1, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7f5 fca1 	bl	80010ba <unpack_right_shift_u16>
 800b778:	4603      	mov	r3, r0
 800b77a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        t3s8 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	3304      	adds	r3, #4
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	22ff      	movs	r2, #255	; 0xff
 800b786:	2104      	movs	r1, #4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f5 fc66 	bl	800105a <unpack_left_shift_u16>
 800b78e:	4603      	mov	r3, r0
 800b790:	461a      	mov	r2, r3
 800b792:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b796:	4313      	orrs	r3, r2
 800b798:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if ((t3s8 & (1u << 11)) != 0u) {
 800b79c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <can1_ams_cell_temperatures_unpack+0xcf8>
            t3s8 |= 0xf000u;
 800b7a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7ac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b7b0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b7b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        }

        dst_p->t3s8 = (int16_t)t3s8;
 800b7b8:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        t4s8 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3305      	adds	r3, #5
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	22ff      	movs	r2, #255	; 0xff
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f5 fc74 	bl	80010ba <unpack_right_shift_u16>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	857b      	strh	r3, [r7, #42]	; 0x2a
        t4s8 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	3306      	adds	r3, #6
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	220f      	movs	r2, #15
 800b7de:	2108      	movs	r1, #8
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f5 fc3a 	bl	800105a <unpack_left_shift_u16>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((t4s8 & (1u << 11)) != 0u) {
 800b7f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <can1_ams_cell_temperatures_unpack+0xd46>
            t4s8 |= 0xf000u;
 800b7fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b7fc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b800:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b804:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        dst_p->t4s8 = (int16_t)t4s8;
 800b806:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        t5s8 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	3306      	adds	r3, #6
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	22f0      	movs	r2, #240	; 0xf0
 800b818:	2104      	movs	r1, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f5 fc4d 	bl	80010ba <unpack_right_shift_u16>
 800b820:	4603      	mov	r3, r0
 800b822:	827b      	strh	r3, [r7, #18]
        t5s8 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	3307      	adds	r3, #7
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	22ff      	movs	r2, #255	; 0xff
 800b82c:	2104      	movs	r1, #4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f5 fc13 	bl	800105a <unpack_left_shift_u16>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	8a7b      	ldrh	r3, [r7, #18]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	827b      	strh	r3, [r7, #18]

        if ((t5s8 & (1u << 11)) != 0u) {
 800b83e:	8a7b      	ldrh	r3, [r7, #18]
 800b840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <can1_ams_cell_temperatures_unpack+0xd94>
            t5s8 |= 0xf000u;
 800b848:	8a7b      	ldrh	r3, [r7, #18]
 800b84a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b84e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b852:	827b      	strh	r3, [r7, #18]
        }

        dst_p->t5s8 = (int16_t)t5s8;
 800b854:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        break;
 800b85e:	e34c      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 8:
        t1s9 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	22f0      	movs	r2, #240	; 0xf0
 800b866:	2104      	movs	r1, #4
 800b868:	4618      	mov	r0, r3
 800b86a:	f7f5 fc26 	bl	80010ba <unpack_right_shift_u16>
 800b86e:	4603      	mov	r3, r0
 800b870:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        t1s9 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	3301      	adds	r3, #1
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	22ff      	movs	r2, #255	; 0xff
 800b87c:	2104      	movs	r1, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f5 fbeb 	bl	800105a <unpack_left_shift_u16>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b88c:	4313      	orrs	r3, r2
 800b88e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

        if ((t1s9 & (1u << 11)) != 0u) {
 800b892:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <can1_ams_cell_temperatures_unpack+0xdee>
            t1s9 |= 0xf000u;
 800b89e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800b8a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        }

        dst_p->t1s9 = (int16_t)t1s9;
 800b8ae:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	825a      	strh	r2, [r3, #18]
        t2s9 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	3302      	adds	r3, #2
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	22ff      	movs	r2, #255	; 0xff
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f5 fbfa 	bl	80010ba <unpack_right_shift_u16>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        t2s9 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3303      	adds	r3, #3
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	220f      	movs	r2, #15
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f5 fbbf 	bl	800105a <unpack_left_shift_u16>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        if ((t2s9 & (1u << 11)) != 0u) {
 800b8ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <can1_ams_cell_temperatures_unpack+0xe46>
            t2s9 |= 0xf000u;
 800b8f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b8fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b902:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        }

        dst_p->t2s9 = (int16_t)t2s9;
 800b906:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	855a      	strh	r2, [r3, #42]	; 0x2a
        t3s9 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3303      	adds	r3, #3
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	22f0      	movs	r2, #240	; 0xf0
 800b916:	2104      	movs	r1, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f5 fbce 	bl	80010ba <unpack_right_shift_u16>
 800b91e:	4603      	mov	r3, r0
 800b920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        t3s9 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	22ff      	movs	r2, #255	; 0xff
 800b92c:	2104      	movs	r1, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f5 fb93 	bl	800105a <unpack_left_shift_u16>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        if ((t3s9 & (1u << 11)) != 0u) {
 800b942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <can1_ams_cell_temperatures_unpack+0xe9e>
            t3s9 |= 0xf000u;
 800b94e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b952:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b956:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b95a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }

        dst_p->t3s9 = (int16_t)t3s9;
 800b95e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        t4s9 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3305      	adds	r3, #5
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	22ff      	movs	r2, #255	; 0xff
 800b970:	2100      	movs	r1, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f7f5 fba1 	bl	80010ba <unpack_right_shift_u16>
 800b978:	4603      	mov	r3, r0
 800b97a:	853b      	strh	r3, [r7, #40]	; 0x28
        t4s9 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	3306      	adds	r3, #6
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	220f      	movs	r2, #15
 800b984:	2108      	movs	r1, #8
 800b986:	4618      	mov	r0, r3
 800b988:	f7f5 fb67 	bl	800105a <unpack_left_shift_u16>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b992:	4313      	orrs	r3, r2
 800b994:	853b      	strh	r3, [r7, #40]	; 0x28

        if ((t4s9 & (1u << 11)) != 0u) {
 800b996:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <can1_ams_cell_temperatures_unpack+0xeec>
            t4s9 |= 0xf000u;
 800b9a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9a6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9aa:	853b      	strh	r3, [r7, #40]	; 0x28
        }

        dst_p->t4s9 = (int16_t)t4s9;
 800b9ac:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        t5s9 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	3306      	adds	r3, #6
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	22f0      	movs	r2, #240	; 0xf0
 800b9be:	2104      	movs	r1, #4
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f5 fb7a 	bl	80010ba <unpack_right_shift_u16>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	823b      	strh	r3, [r7, #16]
        t5s9 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3307      	adds	r3, #7
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	22ff      	movs	r2, #255	; 0xff
 800b9d2:	2104      	movs	r1, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f5 fb40 	bl	800105a <unpack_left_shift_u16>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	8a3b      	ldrh	r3, [r7, #16]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	823b      	strh	r3, [r7, #16]

        if ((t5s9 & (1u << 11)) != 0u) {
 800b9e4:	8a3b      	ldrh	r3, [r7, #16]
 800b9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <can1_ams_cell_temperatures_unpack+0xf3a>
            t5s9 |= 0xf000u;
 800b9ee:	8a3b      	ldrh	r3, [r7, #16]
 800b9f0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b9f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b9f8:	823b      	strh	r3, [r7, #16]
        }

        dst_p->t5s9 = (int16_t)t5s9;
 800b9fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        break;
 800ba04:	e279      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 9:
        t1s10 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	22f0      	movs	r2, #240	; 0xf0
 800ba0c:	2104      	movs	r1, #4
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f5 fb53 	bl	80010ba <unpack_right_shift_u16>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        t1s10 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	22ff      	movs	r2, #255	; 0xff
 800ba22:	2104      	movs	r1, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fb18 	bl	800105a <unpack_left_shift_u16>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba32:	4313      	orrs	r3, r2
 800ba34:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if ((t1s10 & (1u << 11)) != 0u) {
 800ba38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d007      	beq.n	800ba54 <can1_ams_cell_temperatures_unpack+0xf94>
            t1s10 |= 0xf000u;
 800ba44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ba4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ba50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        }

        dst_p->t1s10 = (int16_t)t1s10;
 800ba54:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	829a      	strh	r2, [r3, #20]
        t2s10 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3302      	adds	r3, #2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	22ff      	movs	r2, #255	; 0xff
 800ba64:	2100      	movs	r1, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f5 fb27 	bl	80010ba <unpack_right_shift_u16>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        t2s10 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	3303      	adds	r3, #3
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	220f      	movs	r2, #15
 800ba7a:	2108      	movs	r1, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f5 faec 	bl	800105a <unpack_left_shift_u16>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

        if ((t2s10 & (1u << 11)) != 0u) {
 800ba90:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d007      	beq.n	800baac <can1_ams_cell_temperatures_unpack+0xfec>
            t2s10 |= 0xf000u;
 800ba9c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800baa0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800baa4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800baa8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        }

        dst_p->t2s10 = (int16_t)t2s10;
 800baac:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	859a      	strh	r2, [r3, #44]	; 0x2c
        t3s10 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3303      	adds	r3, #3
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	22f0      	movs	r2, #240	; 0xf0
 800babc:	2104      	movs	r1, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f5 fafb 	bl	80010ba <unpack_right_shift_u16>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        t3s10 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3304      	adds	r3, #4
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	2104      	movs	r1, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f5 fac0 	bl	800105a <unpack_left_shift_u16>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

        if ((t3s10 & (1u << 11)) != 0u) {
 800bae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <can1_ams_cell_temperatures_unpack+0x1044>
            t3s10 |= 0xf000u;
 800baf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800baf8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bafc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        }

        dst_p->t3s10 = (int16_t)t3s10;
 800bb04:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        t4s10 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	3305      	adds	r3, #5
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f5 face 	bl	80010ba <unpack_right_shift_u16>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        t4s10 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	3306      	adds	r3, #6
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	220f      	movs	r2, #15
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f5 fa94 	bl	800105a <unpack_left_shift_u16>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	87fb      	strh	r3, [r7, #62]	; 0x3e

        if ((t4s10 & (1u << 11)) != 0u) {
 800bb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <can1_ams_cell_temperatures_unpack+0x1092>
            t4s10 |= 0xf000u;
 800bb46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb48:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb4c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb50:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        dst_p->t4s10 = (int16_t)t4s10;
 800bb52:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        t5s10 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	3306      	adds	r3, #6
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	22f0      	movs	r2, #240	; 0xf0
 800bb64:	2104      	movs	r1, #4
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f5 faa7 	bl	80010ba <unpack_right_shift_u16>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        t5s10 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	3307      	adds	r3, #7
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	22ff      	movs	r2, #255	; 0xff
 800bb78:	2104      	movs	r1, #4
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f5 fa6d 	bl	800105a <unpack_left_shift_u16>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb86:	4313      	orrs	r3, r2
 800bb88:	84fb      	strh	r3, [r7, #38]	; 0x26

        if ((t5s10 & (1u << 11)) != 0u) {
 800bb8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <can1_ams_cell_temperatures_unpack+0x10e0>
            t5s10 |= 0xf000u;
 800bb94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bb9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bb9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        dst_p->t5s10 = (int16_t)t5s10;
 800bba0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        break;
 800bbaa:	e1a6      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 10:
        t1s11 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	22f0      	movs	r2, #240	; 0xf0
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f5 fa80 	bl	80010ba <unpack_right_shift_u16>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        t1s11 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	22ff      	movs	r2, #255	; 0xff
 800bbc8:	2104      	movs	r1, #4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f5 fa45 	bl	800105a <unpack_left_shift_u16>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        if ((t1s11 & (1u << 11)) != 0u) {
 800bbde:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <can1_ams_cell_temperatures_unpack+0x113a>
            t1s11 |= 0xf000u;
 800bbea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bbee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bbf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bbf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        dst_p->t1s11 = (int16_t)t1s11;
 800bbfa:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	82da      	strh	r2, [r3, #22]
        t2s11 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3302      	adds	r3, #2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	22ff      	movs	r2, #255	; 0xff
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f5 fa54 	bl	80010ba <unpack_right_shift_u16>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        t2s11 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3303      	adds	r3, #3
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	220f      	movs	r2, #15
 800bc20:	2108      	movs	r1, #8
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f5 fa19 	bl	800105a <unpack_left_shift_u16>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

        if ((t2s11 & (1u << 11)) != 0u) {
 800bc36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <can1_ams_cell_temperatures_unpack+0x1192>
            t2s11 |= 0xf000u;
 800bc42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bc4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bc4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        dst_p->t2s11 = (int16_t)t2s11;
 800bc52:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	85da      	strh	r2, [r3, #46]	; 0x2e
        t3s11 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	3303      	adds	r3, #3
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	22f0      	movs	r2, #240	; 0xf0
 800bc62:	2104      	movs	r1, #4
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f5 fa28 	bl	80010ba <unpack_right_shift_u16>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        t3s11 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3304      	adds	r3, #4
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	22ff      	movs	r2, #255	; 0xff
 800bc78:	2104      	movs	r1, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f5 f9ed 	bl	800105a <unpack_left_shift_u16>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

        if ((t3s11 & (1u << 11)) != 0u) {
 800bc8e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <can1_ams_cell_temperatures_unpack+0x11ea>
            t3s11 |= 0xf000u;
 800bc9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc9e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bca2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bca6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        dst_p->t3s11 = (int16_t)t3s11;
 800bcaa:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        t4s11 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	3305      	adds	r3, #5
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	22ff      	movs	r2, #255	; 0xff
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f5 f9fb 	bl	80010ba <unpack_right_shift_u16>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        t4s11 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3306      	adds	r3, #6
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	220f      	movs	r2, #15
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f5 f9c1 	bl	800105a <unpack_left_shift_u16>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcde:	4313      	orrs	r3, r2
 800bce0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        if ((t4s11 & (1u << 11)) != 0u) {
 800bce2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <can1_ams_cell_temperatures_unpack+0x1238>
            t4s11 |= 0xf000u;
 800bcec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bcee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bcf2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bcf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        }

        dst_p->t4s11 = (int16_t)t4s11;
 800bcf8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        t5s11 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3306      	adds	r3, #6
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	22f0      	movs	r2, #240	; 0xf0
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f5 f9d4 	bl	80010ba <unpack_right_shift_u16>
 800bd12:	4603      	mov	r3, r0
 800bd14:	84bb      	strh	r3, [r7, #36]	; 0x24
        t5s11 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3307      	adds	r3, #7
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	22ff      	movs	r2, #255	; 0xff
 800bd1e:	2104      	movs	r1, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f5 f99a 	bl	800105a <unpack_left_shift_u16>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	84bb      	strh	r3, [r7, #36]	; 0x24

        if ((t5s11 & (1u << 11)) != 0u) {
 800bd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <can1_ams_cell_temperatures_unpack+0x1286>
            t5s11 |= 0xf000u;
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd40:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd44:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        dst_p->t5s11 = (int16_t)t5s11;
 800bd46:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        break;
 800bd50:	e0d3      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    case 11:
        t1s12 = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	22f0      	movs	r2, #240	; 0xf0
 800bd58:	2104      	movs	r1, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f5 f9ad 	bl	80010ba <unpack_right_shift_u16>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        t1s12 |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	22ff      	movs	r2, #255	; 0xff
 800bd6e:	2104      	movs	r1, #4
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f5 f972 	bl	800105a <unpack_left_shift_u16>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

        if ((t1s12 & (1u << 11)) != 0u) {
 800bd84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <can1_ams_cell_temperatures_unpack+0x12e0>
            t1s12 |= 0xf000u;
 800bd90:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800bd94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bd98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bd9c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        }

        dst_p->t1s12 = (int16_t)t1s12;
 800bda0:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	; 0x82
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	831a      	strh	r2, [r3, #24]
        t2s12 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	3302      	adds	r3, #2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	22ff      	movs	r2, #255	; 0xff
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f5 f981 	bl	80010ba <unpack_right_shift_u16>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        t2s12 |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3303      	adds	r3, #3
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	220f      	movs	r2, #15
 800bdc6:	2108      	movs	r1, #8
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f5 f946 	bl	800105a <unpack_left_shift_u16>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        if ((t2s12 & (1u << 11)) != 0u) {
 800bddc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bde0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d007      	beq.n	800bdf8 <can1_ams_cell_temperatures_unpack+0x1338>
            t2s12 |= 0xf000u;
 800bde8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bdf0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bdf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        }

        dst_p->t2s12 = (int16_t)t2s12;
 800bdf8:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	861a      	strh	r2, [r3, #48]	; 0x30
        t3s12 = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3303      	adds	r3, #3
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	22f0      	movs	r2, #240	; 0xf0
 800be08:	2104      	movs	r1, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f5 f955 	bl	80010ba <unpack_right_shift_u16>
 800be10:	4603      	mov	r3, r0
 800be12:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        t3s12 |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	3304      	adds	r3, #4
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	22ff      	movs	r2, #255	; 0xff
 800be1e:	2104      	movs	r1, #4
 800be20:	4618      	mov	r0, r3
 800be22:	f7f5 f91a 	bl	800105a <unpack_left_shift_u16>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((t3s12 & (1u << 11)) != 0u) {
 800be34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <can1_ams_cell_temperatures_unpack+0x1390>
            t3s12 |= 0xf000u;
 800be40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be44:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be48:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        }

        dst_p->t3s12 = (int16_t)t3s12;
 800be50:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        t4s12 = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3305      	adds	r3, #5
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	22ff      	movs	r2, #255	; 0xff
 800be62:	2100      	movs	r1, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f7f5 f928 	bl	80010ba <unpack_right_shift_u16>
 800be6a:	4603      	mov	r3, r0
 800be6c:	877b      	strh	r3, [r7, #58]	; 0x3a
        t4s12 |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	3306      	adds	r3, #6
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	220f      	movs	r2, #15
 800be76:	2108      	movs	r1, #8
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f5 f8ee 	bl	800105a <unpack_left_shift_u16>
 800be7e:	4603      	mov	r3, r0
 800be80:	461a      	mov	r2, r3
 800be82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be84:	4313      	orrs	r3, r2
 800be86:	877b      	strh	r3, [r7, #58]	; 0x3a

        if ((t4s12 & (1u << 11)) != 0u) {
 800be88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <can1_ams_cell_temperatures_unpack+0x13de>
            t4s12 |= 0xf000u;
 800be92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800be98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800be9c:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        dst_p->t4s12 = (int16_t)t4s12;
 800be9e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        t5s12 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	3306      	adds	r3, #6
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	22f0      	movs	r2, #240	; 0xf0
 800beb0:	2104      	movs	r1, #4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f5 f901 	bl	80010ba <unpack_right_shift_u16>
 800beb8:	4603      	mov	r3, r0
 800beba:	847b      	strh	r3, [r7, #34]	; 0x22
        t5s12 |= unpack_left_shift_u16(src_p[7], 4u, 0xffu);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3307      	adds	r3, #7
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	22ff      	movs	r2, #255	; 0xff
 800bec4:	2104      	movs	r1, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f5 f8c7 	bl	800105a <unpack_left_shift_u16>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed2:	4313      	orrs	r3, r2
 800bed4:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((t5s12 & (1u << 11)) != 0u) {
 800bed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <can1_ams_cell_temperatures_unpack+0x142c>
            t5s12 |= 0xf000u;
 800bee0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bee2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bee6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800beea:	847b      	strh	r3, [r7, #34]	; 0x22
        }

        dst_p->t5s12 = (int16_t)t5s12;
 800beec:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        break;
 800bef6:	e000      	b.n	800befa <can1_ams_cell_temperatures_unpack+0x143a>

    default:
        break;
 800bef8:	bf00      	nop
    }

    return (0);
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3788      	adds	r7, #136	; 0x88
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>:

uint8_t can1_ams_cell_temperatures_temperature_multiplexor_encode(double value)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800bf0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf12:	f7f4 fe3b 	bl	8000b8c <__aeabi_d2uiz>
 800bf16:	4603      	mov	r3, r0
 800bf18:	b2db      	uxtb	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	0000      	movs	r0, r0
 800bf24:	0000      	movs	r0, r0
	...

0800bf28 <can1_ams_cell_temperatures_t1s1_encode>:
{
    return (value <= 15u);
}

int16_t can1_ams_cell_temperatures_t1s1_encode(double value)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <can1_ams_cell_temperatures_t1s1_encode+0x50>)
 800bf38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf3c:	f7f4 f998 	bl	8000270 <__adddf3>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4610      	mov	r0, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	a309      	add	r3, pc, #36	; (adr r3, 800bf70 <can1_ams_cell_temperatures_t1s1_encode+0x48>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fc6f 	bl	8000830 <__aeabi_ddiv>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4610      	mov	r0, r2
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7f4 fdef 	bl	8000b3c <__aeabi_d2iz>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b21b      	sxth	r3, r3
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	757928e1 	.word	0x757928e1
 800bf74:	3fa9018e 	.word	0x3fa9018e
 800bf78:	40240000 	.word	0x40240000
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <can1_ams_cell_temperatures_t1s1_decode>:

double can1_ams_cell_temperatures_t1s1_decode(int16_t value)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800bf8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f4 faba 	bl	8000508 <__aeabi_i2d>
 800bf94:	a30d      	add	r3, pc, #52	; (adr r3, 800bfcc <can1_ams_cell_temperatures_t1s1_decode+0x4c>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 fb1f 	bl	80005dc <__aeabi_dmul>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <can1_ams_cell_temperatures_t1s1_decode+0x48>)
 800bfac:	f7f4 f95e 	bl	800026c <__aeabi_dsub>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800bfb8:	eeb0 0a47 	vmov.f32	s0, s14
 800bfbc:	eef0 0a67 	vmov.f32	s1, s15
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	40240000 	.word	0x40240000
 800bfcc:	757928e1 	.word	0x757928e1
 800bfd0:	3fa9018e 	.word	0x3fa9018e
 800bfd4:	00000000 	.word	0x00000000

0800bfd8 <can1_ams_cell_temperatures_t1s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s2_encode(double value)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <can1_ams_cell_temperatures_t1s2_encode+0x50>)
 800bfe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfec:	f7f4 f940 	bl	8000270 <__adddf3>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4610      	mov	r0, r2
 800bff6:	4619      	mov	r1, r3
 800bff8:	a309      	add	r3, pc, #36	; (adr r3, 800c020 <can1_ams_cell_temperatures_t1s2_encode+0x48>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f7f4 fc17 	bl	8000830 <__aeabi_ddiv>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4610      	mov	r0, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	f7f4 fd97 	bl	8000b3c <__aeabi_d2iz>
 800c00e:	4603      	mov	r3, r0
 800c010:	b21b      	sxth	r3, r3
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	f3af 8000 	nop.w
 800c020:	757928e1 	.word	0x757928e1
 800c024:	3fa9018e 	.word	0x3fa9018e
 800c028:	40240000 	.word	0x40240000
 800c02c:	00000000 	.word	0x00000000

0800c030 <can1_ams_cell_temperatures_t1s2_decode>:

double can1_ams_cell_temperatures_t1s2_decode(int16_t value)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c03a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f4 fa62 	bl	8000508 <__aeabi_i2d>
 800c044:	a30d      	add	r3, pc, #52	; (adr r3, 800c07c <can1_ams_cell_temperatures_t1s2_decode+0x4c>)
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	f7f4 fac7 	bl	80005dc <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4610      	mov	r0, r2
 800c054:	4619      	mov	r1, r3
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	4b07      	ldr	r3, [pc, #28]	; (800c078 <can1_ams_cell_temperatures_t1s2_decode+0x48>)
 800c05c:	f7f4 f906 	bl	800026c <__aeabi_dsub>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	ec43 2b17 	vmov	d7, r2, r3
}
 800c068:	eeb0 0a47 	vmov.f32	s0, s14
 800c06c:	eef0 0a67 	vmov.f32	s1, s15
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40240000 	.word	0x40240000
 800c07c:	757928e1 	.word	0x757928e1
 800c080:	3fa9018e 	.word	0x3fa9018e
 800c084:	00000000 	.word	0x00000000

0800c088 <can1_ams_cell_temperatures_t1s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s3_encode(double value)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c092:	f04f 0200 	mov.w	r2, #0
 800c096:	4b10      	ldr	r3, [pc, #64]	; (800c0d8 <can1_ams_cell_temperatures_t1s3_encode+0x50>)
 800c098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c09c:	f7f4 f8e8 	bl	8000270 <__adddf3>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	a309      	add	r3, pc, #36	; (adr r3, 800c0d0 <can1_ams_cell_temperatures_t1s3_encode+0x48>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 fbbf 	bl	8000830 <__aeabi_ddiv>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f7f4 fd3f 	bl	8000b3c <__aeabi_d2iz>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	b21b      	sxth	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	757928e1 	.word	0x757928e1
 800c0d4:	3fa9018e 	.word	0x3fa9018e
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	00000000 	.word	0x00000000

0800c0e0 <can1_ams_cell_temperatures_t1s3_decode>:

double can1_ams_cell_temperatures_t1s3_decode(int16_t value)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c0ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f4 fa0a 	bl	8000508 <__aeabi_i2d>
 800c0f4:	a30d      	add	r3, pc, #52	; (adr r3, 800c12c <can1_ams_cell_temperatures_t1s3_decode+0x4c>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 fa6f 	bl	80005dc <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4610      	mov	r0, r2
 800c104:	4619      	mov	r1, r3
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <can1_ams_cell_temperatures_t1s3_decode+0x48>)
 800c10c:	f7f4 f8ae 	bl	800026c <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	ec43 2b17 	vmov	d7, r2, r3
}
 800c118:	eeb0 0a47 	vmov.f32	s0, s14
 800c11c:	eef0 0a67 	vmov.f32	s1, s15
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	40240000 	.word	0x40240000
 800c12c:	757928e1 	.word	0x757928e1
 800c130:	3fa9018e 	.word	0x3fa9018e
 800c134:	00000000 	.word	0x00000000

0800c138 <can1_ams_cell_temperatures_t1s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s4_encode(double value)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	4b10      	ldr	r3, [pc, #64]	; (800c188 <can1_ams_cell_temperatures_t1s4_encode+0x50>)
 800c148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c14c:	f7f4 f890 	bl	8000270 <__adddf3>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4610      	mov	r0, r2
 800c156:	4619      	mov	r1, r3
 800c158:	a309      	add	r3, pc, #36	; (adr r3, 800c180 <can1_ams_cell_temperatures_t1s4_encode+0x48>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 fb67 	bl	8000830 <__aeabi_ddiv>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4610      	mov	r0, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	f7f4 fce7 	bl	8000b3c <__aeabi_d2iz>
 800c16e:	4603      	mov	r3, r0
 800c170:	b21b      	sxth	r3, r3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	f3af 8000 	nop.w
 800c180:	757928e1 	.word	0x757928e1
 800c184:	3fa9018e 	.word	0x3fa9018e
 800c188:	40240000 	.word	0x40240000
 800c18c:	00000000 	.word	0x00000000

0800c190 <can1_ams_cell_temperatures_t1s4_decode>:

double can1_ams_cell_temperatures_t1s4_decode(int16_t value)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c19a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f4 f9b2 	bl	8000508 <__aeabi_i2d>
 800c1a4:	a30d      	add	r3, pc, #52	; (adr r3, 800c1dc <can1_ams_cell_temperatures_t1s4_decode+0x4c>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 fa17 	bl	80005dc <__aeabi_dmul>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f04f 0200 	mov.w	r2, #0
 800c1ba:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <can1_ams_cell_temperatures_t1s4_decode+0x48>)
 800c1bc:	f7f4 f856 	bl	800026c <__aeabi_dsub>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800c1cc:	eef0 0a67 	vmov.f32	s1, s15
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	40240000 	.word	0x40240000
 800c1dc:	757928e1 	.word	0x757928e1
 800c1e0:	3fa9018e 	.word	0x3fa9018e
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <can1_ams_cell_temperatures_t1s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s5_encode(double value)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <can1_ams_cell_temperatures_t1s5_encode+0x50>)
 800c1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1fc:	f7f4 f838 	bl	8000270 <__adddf3>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4610      	mov	r0, r2
 800c206:	4619      	mov	r1, r3
 800c208:	a309      	add	r3, pc, #36	; (adr r3, 800c230 <can1_ams_cell_temperatures_t1s5_encode+0x48>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 fb0f 	bl	8000830 <__aeabi_ddiv>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4610      	mov	r0, r2
 800c218:	4619      	mov	r1, r3
 800c21a:	f7f4 fc8f 	bl	8000b3c <__aeabi_d2iz>
 800c21e:	4603      	mov	r3, r0
 800c220:	b21b      	sxth	r3, r3
}
 800c222:	4618      	mov	r0, r3
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	757928e1 	.word	0x757928e1
 800c234:	3fa9018e 	.word	0x3fa9018e
 800c238:	40240000 	.word	0x40240000
 800c23c:	00000000 	.word	0x00000000

0800c240 <can1_ams_cell_temperatures_t1s5_decode>:

double can1_ams_cell_temperatures_t1s5_decode(int16_t value)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f4 f95a 	bl	8000508 <__aeabi_i2d>
 800c254:	a30d      	add	r3, pc, #52	; (adr r3, 800c28c <can1_ams_cell_temperatures_t1s5_decode+0x4c>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f9bf 	bl	80005dc <__aeabi_dmul>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4610      	mov	r0, r2
 800c264:	4619      	mov	r1, r3
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <can1_ams_cell_temperatures_t1s5_decode+0x48>)
 800c26c:	f7f3 fffe 	bl	800026c <__aeabi_dsub>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	ec43 2b17 	vmov	d7, r2, r3
}
 800c278:	eeb0 0a47 	vmov.f32	s0, s14
 800c27c:	eef0 0a67 	vmov.f32	s1, s15
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40240000 	.word	0x40240000
 800c28c:	757928e1 	.word	0x757928e1
 800c290:	3fa9018e 	.word	0x3fa9018e
 800c294:	00000000 	.word	0x00000000

0800c298 <can1_ams_cell_temperatures_t1s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s6_encode(double value)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <can1_ams_cell_temperatures_t1s6_encode+0x50>)
 800c2a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ac:	f7f3 ffe0 	bl	8000270 <__adddf3>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	a309      	add	r3, pc, #36	; (adr r3, 800c2e0 <can1_ams_cell_temperatures_t1s6_encode+0x48>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f4 fab7 	bl	8000830 <__aeabi_ddiv>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f7f4 fc37 	bl	8000b3c <__aeabi_d2iz>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	b21b      	sxth	r3, r3
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	757928e1 	.word	0x757928e1
 800c2e4:	3fa9018e 	.word	0x3fa9018e
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	00000000 	.word	0x00000000

0800c2f0 <can1_ams_cell_temperatures_t1s6_decode>:

double can1_ams_cell_temperatures_t1s6_decode(int16_t value)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7f4 f902 	bl	8000508 <__aeabi_i2d>
 800c304:	a30d      	add	r3, pc, #52	; (adr r3, 800c33c <can1_ams_cell_temperatures_t1s6_decode+0x4c>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f4 f967 	bl	80005dc <__aeabi_dmul>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f04f 0200 	mov.w	r2, #0
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <can1_ams_cell_temperatures_t1s6_decode+0x48>)
 800c31c:	f7f3 ffa6 	bl	800026c <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	ec43 2b17 	vmov	d7, r2, r3
}
 800c328:	eeb0 0a47 	vmov.f32	s0, s14
 800c32c:	eef0 0a67 	vmov.f32	s1, s15
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40240000 	.word	0x40240000
 800c33c:	757928e1 	.word	0x757928e1
 800c340:	3fa9018e 	.word	0x3fa9018e
 800c344:	00000000 	.word	0x00000000

0800c348 <can1_ams_cell_temperatures_t1s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s7_encode(double value)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	4b10      	ldr	r3, [pc, #64]	; (800c398 <can1_ams_cell_temperatures_t1s7_encode+0x50>)
 800c358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c35c:	f7f3 ff88 	bl	8000270 <__adddf3>
 800c360:	4602      	mov	r2, r0
 800c362:	460b      	mov	r3, r1
 800c364:	4610      	mov	r0, r2
 800c366:	4619      	mov	r1, r3
 800c368:	a309      	add	r3, pc, #36	; (adr r3, 800c390 <can1_ams_cell_temperatures_t1s7_encode+0x48>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f4 fa5f 	bl	8000830 <__aeabi_ddiv>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	f7f4 fbdf 	bl	8000b3c <__aeabi_d2iz>
 800c37e:	4603      	mov	r3, r0
 800c380:	b21b      	sxth	r3, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	757928e1 	.word	0x757928e1
 800c394:	3fa9018e 	.word	0x3fa9018e
 800c398:	40240000 	.word	0x40240000
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <can1_ams_cell_temperatures_t1s7_decode>:

double can1_ams_cell_temperatures_t1s7_decode(int16_t value)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c3aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 f8aa 	bl	8000508 <__aeabi_i2d>
 800c3b4:	a30d      	add	r3, pc, #52	; (adr r3, 800c3ec <can1_ams_cell_temperatures_t1s7_decode+0x4c>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f4 f90f 	bl	80005dc <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <can1_ams_cell_temperatures_t1s7_decode+0x48>)
 800c3cc:	f7f3 ff4e 	bl	800026c <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c3d8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3dc:	eef0 0a67 	vmov.f32	s1, s15
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	757928e1 	.word	0x757928e1
 800c3f0:	3fa9018e 	.word	0x3fa9018e
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <can1_ams_cell_temperatures_t1s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s8_encode(double value)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	4b10      	ldr	r3, [pc, #64]	; (800c448 <can1_ams_cell_temperatures_t1s8_encode+0x50>)
 800c408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c40c:	f7f3 ff30 	bl	8000270 <__adddf3>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4610      	mov	r0, r2
 800c416:	4619      	mov	r1, r3
 800c418:	a309      	add	r3, pc, #36	; (adr r3, 800c440 <can1_ams_cell_temperatures_t1s8_encode+0x48>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f4 fa07 	bl	8000830 <__aeabi_ddiv>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fb87 	bl	8000b3c <__aeabi_d2iz>
 800c42e:	4603      	mov	r3, r0
 800c430:	b21b      	sxth	r3, r3
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	757928e1 	.word	0x757928e1
 800c444:	3fa9018e 	.word	0x3fa9018e
 800c448:	40240000 	.word	0x40240000
 800c44c:	00000000 	.word	0x00000000

0800c450 <can1_ams_cell_temperatures_t1s8_decode>:

double can1_ams_cell_temperatures_t1s8_decode(int16_t value)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c45a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f4 f852 	bl	8000508 <__aeabi_i2d>
 800c464:	a30d      	add	r3, pc, #52	; (adr r3, 800c49c <can1_ams_cell_temperatures_t1s8_decode+0x4c>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f4 f8b7 	bl	80005dc <__aeabi_dmul>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4610      	mov	r0, r2
 800c474:	4619      	mov	r1, r3
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <can1_ams_cell_temperatures_t1s8_decode+0x48>)
 800c47c:	f7f3 fef6 	bl	800026c <__aeabi_dsub>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	ec43 2b17 	vmov	d7, r2, r3
}
 800c488:	eeb0 0a47 	vmov.f32	s0, s14
 800c48c:	eef0 0a67 	vmov.f32	s1, s15
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	40240000 	.word	0x40240000
 800c49c:	757928e1 	.word	0x757928e1
 800c4a0:	3fa9018e 	.word	0x3fa9018e
 800c4a4:	00000000 	.word	0x00000000

0800c4a8 <can1_ams_cell_temperatures_t1s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s9_encode(double value)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <can1_ams_cell_temperatures_t1s9_encode+0x50>)
 800c4b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4bc:	f7f3 fed8 	bl	8000270 <__adddf3>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	a309      	add	r3, pc, #36	; (adr r3, 800c4f0 <can1_ams_cell_temperatures_t1s9_encode+0x48>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f9af 	bl	8000830 <__aeabi_ddiv>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f7f4 fb2f 	bl	8000b3c <__aeabi_d2iz>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	b21b      	sxth	r3, r3
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	757928e1 	.word	0x757928e1
 800c4f4:	3fa9018e 	.word	0x3fa9018e
 800c4f8:	40240000 	.word	0x40240000
 800c4fc:	00000000 	.word	0x00000000

0800c500 <can1_ams_cell_temperatures_t1s9_decode>:

double can1_ams_cell_temperatures_t1s9_decode(int16_t value)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f3 fffa 	bl	8000508 <__aeabi_i2d>
 800c514:	a30d      	add	r3, pc, #52	; (adr r3, 800c54c <can1_ams_cell_temperatures_t1s9_decode+0x4c>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 f85f 	bl	80005dc <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4610      	mov	r0, r2
 800c524:	4619      	mov	r1, r3
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	4b07      	ldr	r3, [pc, #28]	; (800c548 <can1_ams_cell_temperatures_t1s9_decode+0x48>)
 800c52c:	f7f3 fe9e 	bl	800026c <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	ec43 2b17 	vmov	d7, r2, r3
}
 800c538:	eeb0 0a47 	vmov.f32	s0, s14
 800c53c:	eef0 0a67 	vmov.f32	s1, s15
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	40240000 	.word	0x40240000
 800c54c:	757928e1 	.word	0x757928e1
 800c550:	3fa9018e 	.word	0x3fa9018e
 800c554:	00000000 	.word	0x00000000

0800c558 <can1_ams_cell_temperatures_t1s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s10_encode(double value)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <can1_ams_cell_temperatures_t1s10_encode+0x50>)
 800c568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c56c:	f7f3 fe80 	bl	8000270 <__adddf3>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4610      	mov	r0, r2
 800c576:	4619      	mov	r1, r3
 800c578:	a309      	add	r3, pc, #36	; (adr r3, 800c5a0 <can1_ams_cell_temperatures_t1s10_encode+0x48>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f4 f957 	bl	8000830 <__aeabi_ddiv>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4610      	mov	r0, r2
 800c588:	4619      	mov	r1, r3
 800c58a:	f7f4 fad7 	bl	8000b3c <__aeabi_d2iz>
 800c58e:	4603      	mov	r3, r0
 800c590:	b21b      	sxth	r3, r3
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	f3af 8000 	nop.w
 800c5a0:	757928e1 	.word	0x757928e1
 800c5a4:	3fa9018e 	.word	0x3fa9018e
 800c5a8:	40240000 	.word	0x40240000
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <can1_ams_cell_temperatures_t1s10_decode>:

double can1_ams_cell_temperatures_t1s10_decode(int16_t value)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c5ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7f3 ffa2 	bl	8000508 <__aeabi_i2d>
 800c5c4:	a30d      	add	r3, pc, #52	; (adr r3, 800c5fc <can1_ams_cell_temperatures_t1s10_decode+0x4c>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f4 f807 	bl	80005dc <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f04f 0200 	mov.w	r2, #0
 800c5da:	4b07      	ldr	r3, [pc, #28]	; (800c5f8 <can1_ams_cell_temperatures_t1s10_decode+0x48>)
 800c5dc:	f7f3 fe46 	bl	800026c <__aeabi_dsub>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c5e8:	eeb0 0a47 	vmov.f32	s0, s14
 800c5ec:	eef0 0a67 	vmov.f32	s1, s15
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	757928e1 	.word	0x757928e1
 800c600:	3fa9018e 	.word	0x3fa9018e
 800c604:	00000000 	.word	0x00000000

0800c608 <can1_ams_cell_temperatures_t1s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s11_encode(double value)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	4b10      	ldr	r3, [pc, #64]	; (800c658 <can1_ams_cell_temperatures_t1s11_encode+0x50>)
 800c618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c61c:	f7f3 fe28 	bl	8000270 <__adddf3>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	a309      	add	r3, pc, #36	; (adr r3, 800c650 <can1_ams_cell_temperatures_t1s11_encode+0x48>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f4 f8ff 	bl	8000830 <__aeabi_ddiv>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4610      	mov	r0, r2
 800c638:	4619      	mov	r1, r3
 800c63a:	f7f4 fa7f 	bl	8000b3c <__aeabi_d2iz>
 800c63e:	4603      	mov	r3, r0
 800c640:	b21b      	sxth	r3, r3
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w
 800c650:	757928e1 	.word	0x757928e1
 800c654:	3fa9018e 	.word	0x3fa9018e
 800c658:	40240000 	.word	0x40240000
 800c65c:	00000000 	.word	0x00000000

0800c660 <can1_ams_cell_temperatures_t1s11_decode>:

double can1_ams_cell_temperatures_t1s11_decode(int16_t value)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c66a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f3 ff4a 	bl	8000508 <__aeabi_i2d>
 800c674:	a30d      	add	r3, pc, #52	; (adr r3, 800c6ac <can1_ams_cell_temperatures_t1s11_decode+0x4c>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 ffaf 	bl	80005dc <__aeabi_dmul>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4610      	mov	r0, r2
 800c684:	4619      	mov	r1, r3
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <can1_ams_cell_temperatures_t1s11_decode+0x48>)
 800c68c:	f7f3 fdee 	bl	800026c <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	ec43 2b17 	vmov	d7, r2, r3
}
 800c698:	eeb0 0a47 	vmov.f32	s0, s14
 800c69c:	eef0 0a67 	vmov.f32	s1, s15
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	757928e1 	.word	0x757928e1
 800c6b0:	3fa9018e 	.word	0x3fa9018e
 800c6b4:	00000000 	.word	0x00000000

0800c6b8 <can1_ams_cell_temperatures_t1s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t1s12_encode(double value)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	4b10      	ldr	r3, [pc, #64]	; (800c708 <can1_ams_cell_temperatures_t1s12_encode+0x50>)
 800c6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6cc:	f7f3 fdd0 	bl	8000270 <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	a309      	add	r3, pc, #36	; (adr r3, 800c700 <can1_ams_cell_temperatures_t1s12_encode+0x48>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f4 f8a7 	bl	8000830 <__aeabi_ddiv>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f7f4 fa27 	bl	8000b3c <__aeabi_d2iz>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	b21b      	sxth	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	f3af 8000 	nop.w
 800c700:	757928e1 	.word	0x757928e1
 800c704:	3fa9018e 	.word	0x3fa9018e
 800c708:	40240000 	.word	0x40240000
 800c70c:	00000000 	.word	0x00000000

0800c710 <can1_ams_cell_temperatures_t1s12_decode>:

double can1_ams_cell_temperatures_t1s12_decode(int16_t value)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c71a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 fef2 	bl	8000508 <__aeabi_i2d>
 800c724:	a30d      	add	r3, pc, #52	; (adr r3, 800c75c <can1_ams_cell_temperatures_t1s12_decode+0x4c>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 ff57 	bl	80005dc <__aeabi_dmul>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4610      	mov	r0, r2
 800c734:	4619      	mov	r1, r3
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <can1_ams_cell_temperatures_t1s12_decode+0x48>)
 800c73c:	f7f3 fd96 	bl	800026c <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	ec43 2b17 	vmov	d7, r2, r3
}
 800c748:	eeb0 0a47 	vmov.f32	s0, s14
 800c74c:	eef0 0a67 	vmov.f32	s1, s15
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	40240000 	.word	0x40240000
 800c75c:	757928e1 	.word	0x757928e1
 800c760:	3fa9018e 	.word	0x3fa9018e
 800c764:	00000000 	.word	0x00000000

0800c768 <can1_ams_cell_temperatures_t2s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s1_encode(double value)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c772:	f04f 0200 	mov.w	r2, #0
 800c776:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <can1_ams_cell_temperatures_t2s1_encode+0x50>)
 800c778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c77c:	f7f3 fd78 	bl	8000270 <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4610      	mov	r0, r2
 800c786:	4619      	mov	r1, r3
 800c788:	a309      	add	r3, pc, #36	; (adr r3, 800c7b0 <can1_ams_cell_temperatures_t2s1_encode+0x48>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f7f4 f84f 	bl	8000830 <__aeabi_ddiv>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	f7f4 f9cf 	bl	8000b3c <__aeabi_d2iz>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	b21b      	sxth	r3, r3
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	757928e1 	.word	0x757928e1
 800c7b4:	3fa9018e 	.word	0x3fa9018e
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	00000000 	.word	0x00000000

0800c7c0 <can1_ams_cell_temperatures_t2s1_decode>:

double can1_ams_cell_temperatures_t2s1_decode(int16_t value)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c7ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 fe9a 	bl	8000508 <__aeabi_i2d>
 800c7d4:	a30d      	add	r3, pc, #52	; (adr r3, 800c80c <can1_ams_cell_temperatures_t2s1_decode+0x4c>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 feff 	bl	80005dc <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <can1_ams_cell_temperatures_t2s1_decode+0x48>)
 800c7ec:	f7f3 fd3e 	bl	800026c <__aeabi_dsub>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c7f8:	eeb0 0a47 	vmov.f32	s0, s14
 800c7fc:	eef0 0a67 	vmov.f32	s1, s15
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	40240000 	.word	0x40240000
 800c80c:	757928e1 	.word	0x757928e1
 800c810:	3fa9018e 	.word	0x3fa9018e
 800c814:	00000000 	.word	0x00000000

0800c818 <can1_ams_cell_temperatures_t2s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s2_encode(double value)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c822:	f04f 0200 	mov.w	r2, #0
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <can1_ams_cell_temperatures_t2s2_encode+0x50>)
 800c828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82c:	f7f3 fd20 	bl	8000270 <__adddf3>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4610      	mov	r0, r2
 800c836:	4619      	mov	r1, r3
 800c838:	a309      	add	r3, pc, #36	; (adr r3, 800c860 <can1_ams_cell_temperatures_t2s2_encode+0x48>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fff7 	bl	8000830 <__aeabi_ddiv>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f977 	bl	8000b3c <__aeabi_d2iz>
 800c84e:	4603      	mov	r3, r0
 800c850:	b21b      	sxth	r3, r3
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
 800c860:	757928e1 	.word	0x757928e1
 800c864:	3fa9018e 	.word	0x3fa9018e
 800c868:	40240000 	.word	0x40240000
 800c86c:	00000000 	.word	0x00000000

0800c870 <can1_ams_cell_temperatures_t2s2_decode>:

double can1_ams_cell_temperatures_t2s2_decode(int16_t value)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f3 fe42 	bl	8000508 <__aeabi_i2d>
 800c884:	a30d      	add	r3, pc, #52	; (adr r3, 800c8bc <can1_ams_cell_temperatures_t2s2_decode+0x4c>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fea7 	bl	80005dc <__aeabi_dmul>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4610      	mov	r0, r2
 800c894:	4619      	mov	r1, r3
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <can1_ams_cell_temperatures_t2s2_decode+0x48>)
 800c89c:	f7f3 fce6 	bl	800026c <__aeabi_dsub>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800c8a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ac:	eef0 0a67 	vmov.f32	s1, s15
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40240000 	.word	0x40240000
 800c8bc:	757928e1 	.word	0x757928e1
 800c8c0:	3fa9018e 	.word	0x3fa9018e
 800c8c4:	00000000 	.word	0x00000000

0800c8c8 <can1_ams_cell_temperatures_t2s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s3_encode(double value)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <can1_ams_cell_temperatures_t2s3_encode+0x50>)
 800c8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8dc:	f7f3 fcc8 	bl	8000270 <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	a309      	add	r3, pc, #36	; (adr r3, 800c910 <can1_ams_cell_temperatures_t2s3_encode+0x48>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 ff9f 	bl	8000830 <__aeabi_ddiv>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7f4 f91f 	bl	8000b3c <__aeabi_d2iz>
 800c8fe:	4603      	mov	r3, r0
 800c900:	b21b      	sxth	r3, r3
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	f3af 8000 	nop.w
 800c910:	757928e1 	.word	0x757928e1
 800c914:	3fa9018e 	.word	0x3fa9018e
 800c918:	40240000 	.word	0x40240000
 800c91c:	00000000 	.word	0x00000000

0800c920 <can1_ams_cell_temperatures_t2s3_decode>:

double can1_ams_cell_temperatures_t2s3_decode(int16_t value)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c92a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f3 fdea 	bl	8000508 <__aeabi_i2d>
 800c934:	a30d      	add	r3, pc, #52	; (adr r3, 800c96c <can1_ams_cell_temperatures_t2s3_decode+0x4c>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fe4f 	bl	80005dc <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4610      	mov	r0, r2
 800c944:	4619      	mov	r1, r3
 800c946:	f04f 0200 	mov.w	r2, #0
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <can1_ams_cell_temperatures_t2s3_decode+0x48>)
 800c94c:	f7f3 fc8e 	bl	800026c <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	ec43 2b17 	vmov	d7, r2, r3
}
 800c958:	eeb0 0a47 	vmov.f32	s0, s14
 800c95c:	eef0 0a67 	vmov.f32	s1, s15
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	40240000 	.word	0x40240000
 800c96c:	757928e1 	.word	0x757928e1
 800c970:	3fa9018e 	.word	0x3fa9018e
 800c974:	00000000 	.word	0x00000000

0800c978 <can1_ams_cell_temperatures_t2s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s4_encode(double value)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800c982:	f04f 0200 	mov.w	r2, #0
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <can1_ams_cell_temperatures_t2s4_encode+0x50>)
 800c988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c98c:	f7f3 fc70 	bl	8000270 <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	a309      	add	r3, pc, #36	; (adr r3, 800c9c0 <can1_ams_cell_temperatures_t2s4_encode+0x48>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 ff47 	bl	8000830 <__aeabi_ddiv>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f7f4 f8c7 	bl	8000b3c <__aeabi_d2iz>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	b21b      	sxth	r3, r3
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	757928e1 	.word	0x757928e1
 800c9c4:	3fa9018e 	.word	0x3fa9018e
 800c9c8:	40240000 	.word	0x40240000
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <can1_ams_cell_temperatures_t2s4_decode>:

double can1_ams_cell_temperatures_t2s4_decode(int16_t value)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800c9da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fd92 	bl	8000508 <__aeabi_i2d>
 800c9e4:	a30d      	add	r3, pc, #52	; (adr r3, 800ca1c <can1_ams_cell_temperatures_t2s4_decode+0x4c>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fdf7 	bl	80005dc <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <can1_ams_cell_temperatures_t2s4_decode+0x48>)
 800c9fc:	f7f3 fc36 	bl	800026c <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	ec43 2b17 	vmov	d7, r2, r3
}
 800ca08:	eeb0 0a47 	vmov.f32	s0, s14
 800ca0c:	eef0 0a67 	vmov.f32	s1, s15
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	40240000 	.word	0x40240000
 800ca1c:	757928e1 	.word	0x757928e1
 800ca20:	3fa9018e 	.word	0x3fa9018e
 800ca24:	00000000 	.word	0x00000000

0800ca28 <can1_ams_cell_temperatures_t2s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s5_encode(double value)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <can1_ams_cell_temperatures_t2s5_encode+0x50>)
 800ca38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3c:	f7f3 fc18 	bl	8000270 <__adddf3>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	a309      	add	r3, pc, #36	; (adr r3, 800ca70 <can1_ams_cell_temperatures_t2s5_encode+0x48>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 feef 	bl	8000830 <__aeabi_ddiv>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4610      	mov	r0, r2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f7f4 f86f 	bl	8000b3c <__aeabi_d2iz>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	b21b      	sxth	r3, r3
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
 800ca70:	757928e1 	.word	0x757928e1
 800ca74:	3fa9018e 	.word	0x3fa9018e
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	00000000 	.word	0x00000000

0800ca80 <can1_ams_cell_temperatures_t2s5_decode>:

double can1_ams_cell_temperatures_t2s5_decode(int16_t value)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ca8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f3 fd3a 	bl	8000508 <__aeabi_i2d>
 800ca94:	a30d      	add	r3, pc, #52	; (adr r3, 800cacc <can1_ams_cell_temperatures_t2s5_decode+0x4c>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fd9f 	bl	80005dc <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4610      	mov	r0, r2
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <can1_ams_cell_temperatures_t2s5_decode+0x48>)
 800caac:	f7f3 fbde 	bl	800026c <__aeabi_dsub>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cab8:	eeb0 0a47 	vmov.f32	s0, s14
 800cabc:	eef0 0a67 	vmov.f32	s1, s15
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	40240000 	.word	0x40240000
 800cacc:	757928e1 	.word	0x757928e1
 800cad0:	3fa9018e 	.word	0x3fa9018e
 800cad4:	00000000 	.word	0x00000000

0800cad8 <can1_ams_cell_temperatures_t2s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s6_encode(double value)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cae2:	f04f 0200 	mov.w	r2, #0
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <can1_ams_cell_temperatures_t2s6_encode+0x50>)
 800cae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caec:	f7f3 fbc0 	bl	8000270 <__adddf3>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4610      	mov	r0, r2
 800caf6:	4619      	mov	r1, r3
 800caf8:	a309      	add	r3, pc, #36	; (adr r3, 800cb20 <can1_ams_cell_temperatures_t2s6_encode+0x48>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fe97 	bl	8000830 <__aeabi_ddiv>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4610      	mov	r0, r2
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f7f4 f817 	bl	8000b3c <__aeabi_d2iz>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	b21b      	sxth	r3, r3
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	f3af 8000 	nop.w
 800cb20:	757928e1 	.word	0x757928e1
 800cb24:	3fa9018e 	.word	0x3fa9018e
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <can1_ams_cell_temperatures_t2s6_decode>:

double can1_ams_cell_temperatures_t2s6_decode(int16_t value)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cb3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f3 fce2 	bl	8000508 <__aeabi_i2d>
 800cb44:	a30d      	add	r3, pc, #52	; (adr r3, 800cb7c <can1_ams_cell_temperatures_t2s6_decode+0x4c>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fd47 	bl	80005dc <__aeabi_dmul>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4610      	mov	r0, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	f04f 0200 	mov.w	r2, #0
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <can1_ams_cell_temperatures_t2s6_decode+0x48>)
 800cb5c:	f7f3 fb86 	bl	800026c <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	ec43 2b17 	vmov	d7, r2, r3
}
 800cb68:	eeb0 0a47 	vmov.f32	s0, s14
 800cb6c:	eef0 0a67 	vmov.f32	s1, s15
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	40240000 	.word	0x40240000
 800cb7c:	757928e1 	.word	0x757928e1
 800cb80:	3fa9018e 	.word	0x3fa9018e
 800cb84:	00000000 	.word	0x00000000

0800cb88 <can1_ams_cell_temperatures_t2s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s7_encode(double value)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <can1_ams_cell_temperatures_t2s7_encode+0x50>)
 800cb98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb9c:	f7f3 fb68 	bl	8000270 <__adddf3>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4610      	mov	r0, r2
 800cba6:	4619      	mov	r1, r3
 800cba8:	a309      	add	r3, pc, #36	; (adr r3, 800cbd0 <can1_ams_cell_temperatures_t2s7_encode+0x48>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fe3f 	bl	8000830 <__aeabi_ddiv>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f7f3 ffbf 	bl	8000b3c <__aeabi_d2iz>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	b21b      	sxth	r3, r3
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	f3af 8000 	nop.w
 800cbd0:	757928e1 	.word	0x757928e1
 800cbd4:	3fa9018e 	.word	0x3fa9018e
 800cbd8:	40240000 	.word	0x40240000
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <can1_ams_cell_temperatures_t2s7_decode>:

double can1_ams_cell_temperatures_t2s7_decode(int16_t value)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f3 fc8a 	bl	8000508 <__aeabi_i2d>
 800cbf4:	a30d      	add	r3, pc, #52	; (adr r3, 800cc2c <can1_ams_cell_temperatures_t2s7_decode+0x4c>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fcef 	bl	80005dc <__aeabi_dmul>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4610      	mov	r0, r2
 800cc04:	4619      	mov	r1, r3
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <can1_ams_cell_temperatures_t2s7_decode+0x48>)
 800cc0c:	f7f3 fb2e 	bl	800026c <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	ec43 2b17 	vmov	d7, r2, r3
}
 800cc18:	eeb0 0a47 	vmov.f32	s0, s14
 800cc1c:	eef0 0a67 	vmov.f32	s1, s15
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	40240000 	.word	0x40240000
 800cc2c:	757928e1 	.word	0x757928e1
 800cc30:	3fa9018e 	.word	0x3fa9018e
 800cc34:	00000000 	.word	0x00000000

0800cc38 <can1_ams_cell_temperatures_t2s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s8_encode(double value)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cc42:	f04f 0200 	mov.w	r2, #0
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <can1_ams_cell_temperatures_t2s8_encode+0x50>)
 800cc48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc4c:	f7f3 fb10 	bl	8000270 <__adddf3>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4610      	mov	r0, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	a309      	add	r3, pc, #36	; (adr r3, 800cc80 <can1_ams_cell_temperatures_t2s8_encode+0x48>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fde7 	bl	8000830 <__aeabi_ddiv>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4610      	mov	r0, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f7f3 ff67 	bl	8000b3c <__aeabi_d2iz>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	b21b      	sxth	r3, r3
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w
 800cc80:	757928e1 	.word	0x757928e1
 800cc84:	3fa9018e 	.word	0x3fa9018e
 800cc88:	40240000 	.word	0x40240000
 800cc8c:	00000000 	.word	0x00000000

0800cc90 <can1_ams_cell_temperatures_t2s8_decode>:

double can1_ams_cell_temperatures_t2s8_decode(int16_t value)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cc9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f3 fc32 	bl	8000508 <__aeabi_i2d>
 800cca4:	a30d      	add	r3, pc, #52	; (adr r3, 800ccdc <can1_ams_cell_temperatures_t2s8_decode+0x4c>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fc97 	bl	80005dc <__aeabi_dmul>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <can1_ams_cell_temperatures_t2s8_decode+0x48>)
 800ccbc:	f7f3 fad6 	bl	800026c <__aeabi_dsub>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ccc8:	eeb0 0a47 	vmov.f32	s0, s14
 800cccc:	eef0 0a67 	vmov.f32	s1, s15
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40240000 	.word	0x40240000
 800ccdc:	757928e1 	.word	0x757928e1
 800cce0:	3fa9018e 	.word	0x3fa9018e
 800cce4:	00000000 	.word	0x00000000

0800cce8 <can1_ams_cell_temperatures_t2s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s9_encode(double value)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ccf2:	f04f 0200 	mov.w	r2, #0
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <can1_ams_cell_temperatures_t2s9_encode+0x50>)
 800ccf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccfc:	f7f3 fab8 	bl	8000270 <__adddf3>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4610      	mov	r0, r2
 800cd06:	4619      	mov	r1, r3
 800cd08:	a309      	add	r3, pc, #36	; (adr r3, 800cd30 <can1_ams_cell_temperatures_t2s9_encode+0x48>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fd8f 	bl	8000830 <__aeabi_ddiv>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4610      	mov	r0, r2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f7f3 ff0f 	bl	8000b3c <__aeabi_d2iz>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	b21b      	sxth	r3, r3
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
 800cd30:	757928e1 	.word	0x757928e1
 800cd34:	3fa9018e 	.word	0x3fa9018e
 800cd38:	40240000 	.word	0x40240000
 800cd3c:	00000000 	.word	0x00000000

0800cd40 <can1_ams_cell_temperatures_t2s9_decode>:

double can1_ams_cell_temperatures_t2s9_decode(int16_t value)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cd4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f3 fbda 	bl	8000508 <__aeabi_i2d>
 800cd54:	a30d      	add	r3, pc, #52	; (adr r3, 800cd8c <can1_ams_cell_temperatures_t2s9_decode+0x4c>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fc3f 	bl	80005dc <__aeabi_dmul>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4610      	mov	r0, r2
 800cd64:	4619      	mov	r1, r3
 800cd66:	f04f 0200 	mov.w	r2, #0
 800cd6a:	4b07      	ldr	r3, [pc, #28]	; (800cd88 <can1_ams_cell_temperatures_t2s9_decode+0x48>)
 800cd6c:	f7f3 fa7e 	bl	800026c <__aeabi_dsub>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	ec43 2b17 	vmov	d7, r2, r3
}
 800cd78:	eeb0 0a47 	vmov.f32	s0, s14
 800cd7c:	eef0 0a67 	vmov.f32	s1, s15
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	40240000 	.word	0x40240000
 800cd8c:	757928e1 	.word	0x757928e1
 800cd90:	3fa9018e 	.word	0x3fa9018e
 800cd94:	00000000 	.word	0x00000000

0800cd98 <can1_ams_cell_temperatures_t2s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s10_encode(double value)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cda2:	f04f 0200 	mov.w	r2, #0
 800cda6:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <can1_ams_cell_temperatures_t2s10_encode+0x50>)
 800cda8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdac:	f7f3 fa60 	bl	8000270 <__adddf3>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	a309      	add	r3, pc, #36	; (adr r3, 800cde0 <can1_ams_cell_temperatures_t2s10_encode+0x48>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 fd37 	bl	8000830 <__aeabi_ddiv>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f7f3 feb7 	bl	8000b3c <__aeabi_d2iz>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	b21b      	sxth	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
 800cde0:	757928e1 	.word	0x757928e1
 800cde4:	3fa9018e 	.word	0x3fa9018e
 800cde8:	40240000 	.word	0x40240000
 800cdec:	00000000 	.word	0x00000000

0800cdf0 <can1_ams_cell_temperatures_t2s10_decode>:

double can1_ams_cell_temperatures_t2s10_decode(int16_t value)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cdfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f3 fb82 	bl	8000508 <__aeabi_i2d>
 800ce04:	a30d      	add	r3, pc, #52	; (adr r3, 800ce3c <can1_ams_cell_temperatures_t2s10_decode+0x4c>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fbe7 	bl	80005dc <__aeabi_dmul>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4610      	mov	r0, r2
 800ce14:	4619      	mov	r1, r3
 800ce16:	f04f 0200 	mov.w	r2, #0
 800ce1a:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <can1_ams_cell_temperatures_t2s10_decode+0x48>)
 800ce1c:	f7f3 fa26 	bl	800026c <__aeabi_dsub>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce28:	eeb0 0a47 	vmov.f32	s0, s14
 800ce2c:	eef0 0a67 	vmov.f32	s1, s15
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	40240000 	.word	0x40240000
 800ce3c:	757928e1 	.word	0x757928e1
 800ce40:	3fa9018e 	.word	0x3fa9018e
 800ce44:	00000000 	.word	0x00000000

0800ce48 <can1_ams_cell_temperatures_t2s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s11_encode(double value)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <can1_ams_cell_temperatures_t2s11_encode+0x50>)
 800ce58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce5c:	f7f3 fa08 	bl	8000270 <__adddf3>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	4610      	mov	r0, r2
 800ce66:	4619      	mov	r1, r3
 800ce68:	a309      	add	r3, pc, #36	; (adr r3, 800ce90 <can1_ams_cell_temperatures_t2s11_encode+0x48>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fcdf 	bl	8000830 <__aeabi_ddiv>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4610      	mov	r0, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7f3 fe5f 	bl	8000b3c <__aeabi_d2iz>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	b21b      	sxth	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w
 800ce90:	757928e1 	.word	0x757928e1
 800ce94:	3fa9018e 	.word	0x3fa9018e
 800ce98:	40240000 	.word	0x40240000
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <can1_ams_cell_temperatures_t2s11_decode>:

double can1_ams_cell_temperatures_t2s11_decode(int16_t value)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ceaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f3 fb2a 	bl	8000508 <__aeabi_i2d>
 800ceb4:	a30d      	add	r3, pc, #52	; (adr r3, 800ceec <can1_ams_cell_temperatures_t2s11_decode+0x4c>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fb8f 	bl	80005dc <__aeabi_dmul>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4610      	mov	r0, r2
 800cec4:	4619      	mov	r1, r3
 800cec6:	f04f 0200 	mov.w	r2, #0
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <can1_ams_cell_temperatures_t2s11_decode+0x48>)
 800cecc:	f7f3 f9ce 	bl	800026c <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ced8:	eeb0 0a47 	vmov.f32	s0, s14
 800cedc:	eef0 0a67 	vmov.f32	s1, s15
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	40240000 	.word	0x40240000
 800ceec:	757928e1 	.word	0x757928e1
 800cef0:	3fa9018e 	.word	0x3fa9018e
 800cef4:	00000000 	.word	0x00000000

0800cef8 <can1_ams_cell_temperatures_t2s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t2s12_encode(double value)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cf02:	f04f 0200 	mov.w	r2, #0
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <can1_ams_cell_temperatures_t2s12_encode+0x50>)
 800cf08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf0c:	f7f3 f9b0 	bl	8000270 <__adddf3>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	a309      	add	r3, pc, #36	; (adr r3, 800cf40 <can1_ams_cell_temperatures_t2s12_encode+0x48>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 fc87 	bl	8000830 <__aeabi_ddiv>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f7f3 fe07 	bl	8000b3c <__aeabi_d2iz>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	b21b      	sxth	r3, r3
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w
 800cf40:	757928e1 	.word	0x757928e1
 800cf44:	3fa9018e 	.word	0x3fa9018e
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <can1_ams_cell_temperatures_t2s12_decode>:

double can1_ams_cell_temperatures_t2s12_decode(int16_t value)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800cf5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f3 fad2 	bl	8000508 <__aeabi_i2d>
 800cf64:	a30d      	add	r3, pc, #52	; (adr r3, 800cf9c <can1_ams_cell_temperatures_t2s12_decode+0x4c>)
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f3 fb37 	bl	80005dc <__aeabi_dmul>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4610      	mov	r0, r2
 800cf74:	4619      	mov	r1, r3
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	4b07      	ldr	r3, [pc, #28]	; (800cf98 <can1_ams_cell_temperatures_t2s12_decode+0x48>)
 800cf7c:	f7f3 f976 	bl	800026c <__aeabi_dsub>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf88:	eeb0 0a47 	vmov.f32	s0, s14
 800cf8c:	eef0 0a67 	vmov.f32	s1, s15
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	40240000 	.word	0x40240000
 800cf9c:	757928e1 	.word	0x757928e1
 800cfa0:	3fa9018e 	.word	0x3fa9018e
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <can1_ams_cell_temperatures_t3s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s1_encode(double value)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <can1_ams_cell_temperatures_t3s1_encode+0x50>)
 800cfb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfbc:	f7f3 f958 	bl	8000270 <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	a309      	add	r3, pc, #36	; (adr r3, 800cff0 <can1_ams_cell_temperatures_t3s1_encode+0x48>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 fc2f 	bl	8000830 <__aeabi_ddiv>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f7f3 fdaf 	bl	8000b3c <__aeabi_d2iz>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	b21b      	sxth	r3, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w
 800cff0:	757928e1 	.word	0x757928e1
 800cff4:	3fa9018e 	.word	0x3fa9018e
 800cff8:	40240000 	.word	0x40240000
 800cffc:	00000000 	.word	0x00000000

0800d000 <can1_ams_cell_temperatures_t3s1_decode>:

double can1_ams_cell_temperatures_t3s1_decode(int16_t value)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d00a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f3 fa7a 	bl	8000508 <__aeabi_i2d>
 800d014:	a30d      	add	r3, pc, #52	; (adr r3, 800d04c <can1_ams_cell_temperatures_t3s1_decode+0x4c>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 fadf 	bl	80005dc <__aeabi_dmul>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <can1_ams_cell_temperatures_t3s1_decode+0x48>)
 800d02c:	f7f3 f91e 	bl	800026c <__aeabi_dsub>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	ec43 2b17 	vmov	d7, r2, r3
}
 800d038:	eeb0 0a47 	vmov.f32	s0, s14
 800d03c:	eef0 0a67 	vmov.f32	s1, s15
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	40240000 	.word	0x40240000
 800d04c:	757928e1 	.word	0x757928e1
 800d050:	3fa9018e 	.word	0x3fa9018e
 800d054:	00000000 	.word	0x00000000

0800d058 <can1_ams_cell_temperatures_t3s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s2_encode(double value)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d062:	f04f 0200 	mov.w	r2, #0
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <can1_ams_cell_temperatures_t3s2_encode+0x50>)
 800d068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d06c:	f7f3 f900 	bl	8000270 <__adddf3>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4610      	mov	r0, r2
 800d076:	4619      	mov	r1, r3
 800d078:	a309      	add	r3, pc, #36	; (adr r3, 800d0a0 <can1_ams_cell_temperatures_t3s2_encode+0x48>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 fbd7 	bl	8000830 <__aeabi_ddiv>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4610      	mov	r0, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	f7f3 fd57 	bl	8000b3c <__aeabi_d2iz>
 800d08e:	4603      	mov	r3, r0
 800d090:	b21b      	sxth	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
 800d0a0:	757928e1 	.word	0x757928e1
 800d0a4:	3fa9018e 	.word	0x3fa9018e
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <can1_ams_cell_temperatures_t3s2_decode>:

double can1_ams_cell_temperatures_t3s2_decode(int16_t value)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f3 fa22 	bl	8000508 <__aeabi_i2d>
 800d0c4:	a30d      	add	r3, pc, #52	; (adr r3, 800d0fc <can1_ams_cell_temperatures_t3s2_decode+0x4c>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 fa87 	bl	80005dc <__aeabi_dmul>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f04f 0200 	mov.w	r2, #0
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <can1_ams_cell_temperatures_t3s2_decode+0x48>)
 800d0dc:	f7f3 f8c6 	bl	800026c <__aeabi_dsub>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d0e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d0ec:	eef0 0a67 	vmov.f32	s1, s15
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	40240000 	.word	0x40240000
 800d0fc:	757928e1 	.word	0x757928e1
 800d100:	3fa9018e 	.word	0x3fa9018e
 800d104:	00000000 	.word	0x00000000

0800d108 <can1_ams_cell_temperatures_t3s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s3_encode(double value)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d112:	f04f 0200 	mov.w	r2, #0
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <can1_ams_cell_temperatures_t3s3_encode+0x50>)
 800d118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d11c:	f7f3 f8a8 	bl	8000270 <__adddf3>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4610      	mov	r0, r2
 800d126:	4619      	mov	r1, r3
 800d128:	a309      	add	r3, pc, #36	; (adr r3, 800d150 <can1_ams_cell_temperatures_t3s3_encode+0x48>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 fb7f 	bl	8000830 <__aeabi_ddiv>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4610      	mov	r0, r2
 800d138:	4619      	mov	r1, r3
 800d13a:	f7f3 fcff 	bl	8000b3c <__aeabi_d2iz>
 800d13e:	4603      	mov	r3, r0
 800d140:	b21b      	sxth	r3, r3
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	f3af 8000 	nop.w
 800d150:	757928e1 	.word	0x757928e1
 800d154:	3fa9018e 	.word	0x3fa9018e
 800d158:	40240000 	.word	0x40240000
 800d15c:	00000000 	.word	0x00000000

0800d160 <can1_ams_cell_temperatures_t3s3_decode>:

double can1_ams_cell_temperatures_t3s3_decode(int16_t value)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d16a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9ca 	bl	8000508 <__aeabi_i2d>
 800d174:	a30d      	add	r3, pc, #52	; (adr r3, 800d1ac <can1_ams_cell_temperatures_t3s3_decode+0x4c>)
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f7f3 fa2f 	bl	80005dc <__aeabi_dmul>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4610      	mov	r0, r2
 800d184:	4619      	mov	r1, r3
 800d186:	f04f 0200 	mov.w	r2, #0
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <can1_ams_cell_temperatures_t3s3_decode+0x48>)
 800d18c:	f7f3 f86e 	bl	800026c <__aeabi_dsub>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	ec43 2b17 	vmov	d7, r2, r3
}
 800d198:	eeb0 0a47 	vmov.f32	s0, s14
 800d19c:	eef0 0a67 	vmov.f32	s1, s15
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40240000 	.word	0x40240000
 800d1ac:	757928e1 	.word	0x757928e1
 800d1b0:	3fa9018e 	.word	0x3fa9018e
 800d1b4:	00000000 	.word	0x00000000

0800d1b8 <can1_ams_cell_temperatures_t3s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s4_encode(double value)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d1c2:	f04f 0200 	mov.w	r2, #0
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <can1_ams_cell_temperatures_t3s4_encode+0x50>)
 800d1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1cc:	f7f3 f850 	bl	8000270 <__adddf3>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	a309      	add	r3, pc, #36	; (adr r3, 800d200 <can1_ams_cell_temperatures_t3s4_encode+0x48>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 fb27 	bl	8000830 <__aeabi_ddiv>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	f7f3 fca7 	bl	8000b3c <__aeabi_d2iz>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	b21b      	sxth	r3, r3
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	757928e1 	.word	0x757928e1
 800d204:	3fa9018e 	.word	0x3fa9018e
 800d208:	40240000 	.word	0x40240000
 800d20c:	00000000 	.word	0x00000000

0800d210 <can1_ams_cell_temperatures_t3s4_decode>:

double can1_ams_cell_temperatures_t3s4_decode(int16_t value)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d21a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f3 f972 	bl	8000508 <__aeabi_i2d>
 800d224:	a30d      	add	r3, pc, #52	; (adr r3, 800d25c <can1_ams_cell_temperatures_t3s4_decode+0x4c>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f3 f9d7 	bl	80005dc <__aeabi_dmul>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f04f 0200 	mov.w	r2, #0
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <can1_ams_cell_temperatures_t3s4_decode+0x48>)
 800d23c:	f7f3 f816 	bl	800026c <__aeabi_dsub>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	ec43 2b17 	vmov	d7, r2, r3
}
 800d248:	eeb0 0a47 	vmov.f32	s0, s14
 800d24c:	eef0 0a67 	vmov.f32	s1, s15
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	40240000 	.word	0x40240000
 800d25c:	757928e1 	.word	0x757928e1
 800d260:	3fa9018e 	.word	0x3fa9018e
 800d264:	00000000 	.word	0x00000000

0800d268 <can1_ams_cell_temperatures_t3s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s5_encode(double value)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d272:	f04f 0200 	mov.w	r2, #0
 800d276:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <can1_ams_cell_temperatures_t3s5_encode+0x50>)
 800d278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d27c:	f7f2 fff8 	bl	8000270 <__adddf3>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4610      	mov	r0, r2
 800d286:	4619      	mov	r1, r3
 800d288:	a309      	add	r3, pc, #36	; (adr r3, 800d2b0 <can1_ams_cell_temperatures_t3s5_encode+0x48>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	f7f3 facf 	bl	8000830 <__aeabi_ddiv>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4610      	mov	r0, r2
 800d298:	4619      	mov	r1, r3
 800d29a:	f7f3 fc4f 	bl	8000b3c <__aeabi_d2iz>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	b21b      	sxth	r3, r3
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	757928e1 	.word	0x757928e1
 800d2b4:	3fa9018e 	.word	0x3fa9018e
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	00000000 	.word	0x00000000

0800d2c0 <can1_ams_cell_temperatures_t3s5_decode>:

double can1_ams_cell_temperatures_t3s5_decode(int16_t value)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f3 f91a 	bl	8000508 <__aeabi_i2d>
 800d2d4:	a30d      	add	r3, pc, #52	; (adr r3, 800d30c <can1_ams_cell_temperatures_t3s5_decode+0x4c>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f3 f97f 	bl	80005dc <__aeabi_dmul>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f04f 0200 	mov.w	r2, #0
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <can1_ams_cell_temperatures_t3s5_decode+0x48>)
 800d2ec:	f7f2 ffbe 	bl	800026c <__aeabi_dsub>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d2f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d2fc:	eef0 0a67 	vmov.f32	s1, s15
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	40240000 	.word	0x40240000
 800d30c:	757928e1 	.word	0x757928e1
 800d310:	3fa9018e 	.word	0x3fa9018e
 800d314:	00000000 	.word	0x00000000

0800d318 <can1_ams_cell_temperatures_t3s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s6_encode(double value)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	4b10      	ldr	r3, [pc, #64]	; (800d368 <can1_ams_cell_temperatures_t3s6_encode+0x50>)
 800d328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d32c:	f7f2 ffa0 	bl	8000270 <__adddf3>
 800d330:	4602      	mov	r2, r0
 800d332:	460b      	mov	r3, r1
 800d334:	4610      	mov	r0, r2
 800d336:	4619      	mov	r1, r3
 800d338:	a309      	add	r3, pc, #36	; (adr r3, 800d360 <can1_ams_cell_temperatures_t3s6_encode+0x48>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f7f3 fa77 	bl	8000830 <__aeabi_ddiv>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4610      	mov	r0, r2
 800d348:	4619      	mov	r1, r3
 800d34a:	f7f3 fbf7 	bl	8000b3c <__aeabi_d2iz>
 800d34e:	4603      	mov	r3, r0
 800d350:	b21b      	sxth	r3, r3
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	f3af 8000 	nop.w
 800d360:	757928e1 	.word	0x757928e1
 800d364:	3fa9018e 	.word	0x3fa9018e
 800d368:	40240000 	.word	0x40240000
 800d36c:	00000000 	.word	0x00000000

0800d370 <can1_ams_cell_temperatures_t3s6_decode>:

double can1_ams_cell_temperatures_t3s6_decode(int16_t value)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d37a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f3 f8c2 	bl	8000508 <__aeabi_i2d>
 800d384:	a30d      	add	r3, pc, #52	; (adr r3, 800d3bc <can1_ams_cell_temperatures_t3s6_decode+0x4c>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f3 f927 	bl	80005dc <__aeabi_dmul>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4610      	mov	r0, r2
 800d394:	4619      	mov	r1, r3
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <can1_ams_cell_temperatures_t3s6_decode+0x48>)
 800d39c:	f7f2 ff66 	bl	800026c <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d3a8:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ac:	eef0 0a67 	vmov.f32	s1, s15
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	757928e1 	.word	0x757928e1
 800d3c0:	3fa9018e 	.word	0x3fa9018e
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <can1_ams_cell_temperatures_t3s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s7_encode(double value)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d3d2:	f04f 0200 	mov.w	r2, #0
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <can1_ams_cell_temperatures_t3s7_encode+0x50>)
 800d3d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3dc:	f7f2 ff48 	bl	8000270 <__adddf3>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	a309      	add	r3, pc, #36	; (adr r3, 800d410 <can1_ams_cell_temperatures_t3s7_encode+0x48>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 fa1f 	bl	8000830 <__aeabi_ddiv>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f7f3 fb9f 	bl	8000b3c <__aeabi_d2iz>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b21b      	sxth	r3, r3
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	f3af 8000 	nop.w
 800d410:	757928e1 	.word	0x757928e1
 800d414:	3fa9018e 	.word	0x3fa9018e
 800d418:	40240000 	.word	0x40240000
 800d41c:	00000000 	.word	0x00000000

0800d420 <can1_ams_cell_temperatures_t3s7_decode>:

double can1_ams_cell_temperatures_t3s7_decode(int16_t value)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d42a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f3 f86a 	bl	8000508 <__aeabi_i2d>
 800d434:	a30d      	add	r3, pc, #52	; (adr r3, 800d46c <can1_ams_cell_temperatures_t3s7_decode+0x4c>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f3 f8cf 	bl	80005dc <__aeabi_dmul>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4610      	mov	r0, r2
 800d444:	4619      	mov	r1, r3
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <can1_ams_cell_temperatures_t3s7_decode+0x48>)
 800d44c:	f7f2 ff0e 	bl	800026c <__aeabi_dsub>
 800d450:	4602      	mov	r2, r0
 800d452:	460b      	mov	r3, r1
 800d454:	ec43 2b17 	vmov	d7, r2, r3
}
 800d458:	eeb0 0a47 	vmov.f32	s0, s14
 800d45c:	eef0 0a67 	vmov.f32	s1, s15
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	40240000 	.word	0x40240000
 800d46c:	757928e1 	.word	0x757928e1
 800d470:	3fa9018e 	.word	0x3fa9018e
 800d474:	00000000 	.word	0x00000000

0800d478 <can1_ams_cell_temperatures_t3s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s8_encode(double value)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	4b10      	ldr	r3, [pc, #64]	; (800d4c8 <can1_ams_cell_temperatures_t3s8_encode+0x50>)
 800d488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d48c:	f7f2 fef0 	bl	8000270 <__adddf3>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4610      	mov	r0, r2
 800d496:	4619      	mov	r1, r3
 800d498:	a309      	add	r3, pc, #36	; (adr r3, 800d4c0 <can1_ams_cell_temperatures_t3s8_encode+0x48>)
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	f7f3 f9c7 	bl	8000830 <__aeabi_ddiv>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7f3 fb47 	bl	8000b3c <__aeabi_d2iz>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b21b      	sxth	r3, r3
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	757928e1 	.word	0x757928e1
 800d4c4:	3fa9018e 	.word	0x3fa9018e
 800d4c8:	40240000 	.word	0x40240000
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <can1_ams_cell_temperatures_t3s8_decode>:

double can1_ams_cell_temperatures_t3s8_decode(int16_t value)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d4da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f3 f812 	bl	8000508 <__aeabi_i2d>
 800d4e4:	a30d      	add	r3, pc, #52	; (adr r3, 800d51c <can1_ams_cell_temperatures_t3s8_decode+0x4c>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f3 f877 	bl	80005dc <__aeabi_dmul>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f04f 0200 	mov.w	r2, #0
 800d4fa:	4b07      	ldr	r3, [pc, #28]	; (800d518 <can1_ams_cell_temperatures_t3s8_decode+0x48>)
 800d4fc:	f7f2 feb6 	bl	800026c <__aeabi_dsub>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	ec43 2b17 	vmov	d7, r2, r3
}
 800d508:	eeb0 0a47 	vmov.f32	s0, s14
 800d50c:	eef0 0a67 	vmov.f32	s1, s15
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	40240000 	.word	0x40240000
 800d51c:	757928e1 	.word	0x757928e1
 800d520:	3fa9018e 	.word	0x3fa9018e
 800d524:	00000000 	.word	0x00000000

0800d528 <can1_ams_cell_temperatures_t3s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s9_encode(double value)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <can1_ams_cell_temperatures_t3s9_encode+0x50>)
 800d538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d53c:	f7f2 fe98 	bl	8000270 <__adddf3>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4610      	mov	r0, r2
 800d546:	4619      	mov	r1, r3
 800d548:	a309      	add	r3, pc, #36	; (adr r3, 800d570 <can1_ams_cell_temperatures_t3s9_encode+0x48>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f3 f96f 	bl	8000830 <__aeabi_ddiv>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4610      	mov	r0, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	f7f3 faef 	bl	8000b3c <__aeabi_d2iz>
 800d55e:	4603      	mov	r3, r0
 800d560:	b21b      	sxth	r3, r3
}
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	f3af 8000 	nop.w
 800d570:	757928e1 	.word	0x757928e1
 800d574:	3fa9018e 	.word	0x3fa9018e
 800d578:	40240000 	.word	0x40240000
 800d57c:	00000000 	.word	0x00000000

0800d580 <can1_ams_cell_temperatures_t3s9_decode>:

double can1_ams_cell_temperatures_t3s9_decode(int16_t value)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f2 ffba 	bl	8000508 <__aeabi_i2d>
 800d594:	a30d      	add	r3, pc, #52	; (adr r3, 800d5cc <can1_ams_cell_temperatures_t3s9_decode+0x4c>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 f81f 	bl	80005dc <__aeabi_dmul>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <can1_ams_cell_temperatures_t3s9_decode+0x48>)
 800d5ac:	f7f2 fe5e 	bl	800026c <__aeabi_dsub>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d5b8:	eeb0 0a47 	vmov.f32	s0, s14
 800d5bc:	eef0 0a67 	vmov.f32	s1, s15
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	40240000 	.word	0x40240000
 800d5cc:	757928e1 	.word	0x757928e1
 800d5d0:	3fa9018e 	.word	0x3fa9018e
 800d5d4:	00000000 	.word	0x00000000

0800d5d8 <can1_ams_cell_temperatures_t3s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s10_encode(double value)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	4b10      	ldr	r3, [pc, #64]	; (800d628 <can1_ams_cell_temperatures_t3s10_encode+0x50>)
 800d5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5ec:	f7f2 fe40 	bl	8000270 <__adddf3>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	a309      	add	r3, pc, #36	; (adr r3, 800d620 <can1_ams_cell_temperatures_t3s10_encode+0x48>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f3 f917 	bl	8000830 <__aeabi_ddiv>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4610      	mov	r0, r2
 800d608:	4619      	mov	r1, r3
 800d60a:	f7f3 fa97 	bl	8000b3c <__aeabi_d2iz>
 800d60e:	4603      	mov	r3, r0
 800d610:	b21b      	sxth	r3, r3
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w
 800d620:	757928e1 	.word	0x757928e1
 800d624:	3fa9018e 	.word	0x3fa9018e
 800d628:	40240000 	.word	0x40240000
 800d62c:	00000000 	.word	0x00000000

0800d630 <can1_ams_cell_temperatures_t3s10_decode>:

double can1_ams_cell_temperatures_t3s10_decode(int16_t value)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d63a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f2 ff62 	bl	8000508 <__aeabi_i2d>
 800d644:	a30d      	add	r3, pc, #52	; (adr r3, 800d67c <can1_ams_cell_temperatures_t3s10_decode+0x4c>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 ffc7 	bl	80005dc <__aeabi_dmul>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	4b07      	ldr	r3, [pc, #28]	; (800d678 <can1_ams_cell_temperatures_t3s10_decode+0x48>)
 800d65c:	f7f2 fe06 	bl	800026c <__aeabi_dsub>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	ec43 2b17 	vmov	d7, r2, r3
}
 800d668:	eeb0 0a47 	vmov.f32	s0, s14
 800d66c:	eef0 0a67 	vmov.f32	s1, s15
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40240000 	.word	0x40240000
 800d67c:	757928e1 	.word	0x757928e1
 800d680:	3fa9018e 	.word	0x3fa9018e
 800d684:	00000000 	.word	0x00000000

0800d688 <can1_ams_cell_temperatures_t3s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s11_encode(double value)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <can1_ams_cell_temperatures_t3s11_encode+0x50>)
 800d698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d69c:	f7f2 fde8 	bl	8000270 <__adddf3>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	a309      	add	r3, pc, #36	; (adr r3, 800d6d0 <can1_ams_cell_temperatures_t3s11_encode+0x48>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f3 f8bf 	bl	8000830 <__aeabi_ddiv>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f7f3 fa3f 	bl	8000b3c <__aeabi_d2iz>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	b21b      	sxth	r3, r3
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	757928e1 	.word	0x757928e1
 800d6d4:	3fa9018e 	.word	0x3fa9018e
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <can1_ams_cell_temperatures_t3s11_decode>:

double can1_ams_cell_temperatures_t3s11_decode(int16_t value)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d6ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f2 ff0a 	bl	8000508 <__aeabi_i2d>
 800d6f4:	a30d      	add	r3, pc, #52	; (adr r3, 800d72c <can1_ams_cell_temperatures_t3s11_decode+0x4c>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 ff6f 	bl	80005dc <__aeabi_dmul>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4610      	mov	r0, r2
 800d704:	4619      	mov	r1, r3
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <can1_ams_cell_temperatures_t3s11_decode+0x48>)
 800d70c:	f7f2 fdae 	bl	800026c <__aeabi_dsub>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	ec43 2b17 	vmov	d7, r2, r3
}
 800d718:	eeb0 0a47 	vmov.f32	s0, s14
 800d71c:	eef0 0a67 	vmov.f32	s1, s15
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40240000 	.word	0x40240000
 800d72c:	757928e1 	.word	0x757928e1
 800d730:	3fa9018e 	.word	0x3fa9018e
 800d734:	00000000 	.word	0x00000000

0800d738 <can1_ams_cell_temperatures_t3s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t3s12_encode(double value)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d742:	f04f 0200 	mov.w	r2, #0
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <can1_ams_cell_temperatures_t3s12_encode+0x50>)
 800d748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d74c:	f7f2 fd90 	bl	8000270 <__adddf3>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4610      	mov	r0, r2
 800d756:	4619      	mov	r1, r3
 800d758:	a309      	add	r3, pc, #36	; (adr r3, 800d780 <can1_ams_cell_temperatures_t3s12_encode+0x48>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f3 f867 	bl	8000830 <__aeabi_ddiv>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	f7f3 f9e7 	bl	8000b3c <__aeabi_d2iz>
 800d76e:	4603      	mov	r3, r0
 800d770:	b21b      	sxth	r3, r3
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w
 800d780:	757928e1 	.word	0x757928e1
 800d784:	3fa9018e 	.word	0x3fa9018e
 800d788:	40240000 	.word	0x40240000
 800d78c:	00000000 	.word	0x00000000

0800d790 <can1_ams_cell_temperatures_t3s12_decode>:

double can1_ams_cell_temperatures_t3s12_decode(int16_t value)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d79a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f2 feb2 	bl	8000508 <__aeabi_i2d>
 800d7a4:	a30d      	add	r3, pc, #52	; (adr r3, 800d7dc <can1_ams_cell_temperatures_t3s12_decode+0x4c>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 ff17 	bl	80005dc <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f04f 0200 	mov.w	r2, #0
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <can1_ams_cell_temperatures_t3s12_decode+0x48>)
 800d7bc:	f7f2 fd56 	bl	800026c <__aeabi_dsub>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d7c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7cc:	eef0 0a67 	vmov.f32	s1, s15
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	757928e1 	.word	0x757928e1
 800d7e0:	3fa9018e 	.word	0x3fa9018e
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <can1_ams_cell_temperatures_t4s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s1_encode(double value)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	4b10      	ldr	r3, [pc, #64]	; (800d838 <can1_ams_cell_temperatures_t4s1_encode+0x50>)
 800d7f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7fc:	f7f2 fd38 	bl	8000270 <__adddf3>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4610      	mov	r0, r2
 800d806:	4619      	mov	r1, r3
 800d808:	a309      	add	r3, pc, #36	; (adr r3, 800d830 <can1_ams_cell_temperatures_t4s1_encode+0x48>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f3 f80f 	bl	8000830 <__aeabi_ddiv>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4610      	mov	r0, r2
 800d818:	4619      	mov	r1, r3
 800d81a:	f7f3 f98f 	bl	8000b3c <__aeabi_d2iz>
 800d81e:	4603      	mov	r3, r0
 800d820:	b21b      	sxth	r3, r3
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	f3af 8000 	nop.w
 800d830:	757928e1 	.word	0x757928e1
 800d834:	3fa9018e 	.word	0x3fa9018e
 800d838:	40240000 	.word	0x40240000
 800d83c:	00000000 	.word	0x00000000

0800d840 <can1_ams_cell_temperatures_t4s1_decode>:

double can1_ams_cell_temperatures_t4s1_decode(int16_t value)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d84a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f2 fe5a 	bl	8000508 <__aeabi_i2d>
 800d854:	a30d      	add	r3, pc, #52	; (adr r3, 800d88c <can1_ams_cell_temperatures_t4s1_decode+0x4c>)
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f7f2 febf 	bl	80005dc <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0200 	mov.w	r2, #0
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <can1_ams_cell_temperatures_t4s1_decode+0x48>)
 800d86c:	f7f2 fcfe 	bl	800026c <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	ec43 2b17 	vmov	d7, r2, r3
}
 800d878:	eeb0 0a47 	vmov.f32	s0, s14
 800d87c:	eef0 0a67 	vmov.f32	s1, s15
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	40240000 	.word	0x40240000
 800d88c:	757928e1 	.word	0x757928e1
 800d890:	3fa9018e 	.word	0x3fa9018e
 800d894:	00000000 	.word	0x00000000

0800d898 <can1_ams_cell_temperatures_t4s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s2_encode(double value)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <can1_ams_cell_temperatures_t4s2_encode+0x50>)
 800d8a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d8ac:	f7f2 fce0 	bl	8000270 <__adddf3>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	a309      	add	r3, pc, #36	; (adr r3, 800d8e0 <can1_ams_cell_temperatures_t4s2_encode+0x48>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 ffb7 	bl	8000830 <__aeabi_ddiv>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7f3 f937 	bl	8000b3c <__aeabi_d2iz>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	b21b      	sxth	r3, r3
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	757928e1 	.word	0x757928e1
 800d8e4:	3fa9018e 	.word	0x3fa9018e
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <can1_ams_cell_temperatures_t4s2_decode>:

double can1_ams_cell_temperatures_t4s2_decode(int16_t value)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f2 fe02 	bl	8000508 <__aeabi_i2d>
 800d904:	a30d      	add	r3, pc, #52	; (adr r3, 800d93c <can1_ams_cell_temperatures_t4s2_decode+0x4c>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fe67 	bl	80005dc <__aeabi_dmul>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <can1_ams_cell_temperatures_t4s2_decode+0x48>)
 800d91c:	f7f2 fca6 	bl	800026c <__aeabi_dsub>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	ec43 2b17 	vmov	d7, r2, r3
}
 800d928:	eeb0 0a47 	vmov.f32	s0, s14
 800d92c:	eef0 0a67 	vmov.f32	s1, s15
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	40240000 	.word	0x40240000
 800d93c:	757928e1 	.word	0x757928e1
 800d940:	3fa9018e 	.word	0x3fa9018e
 800d944:	00000000 	.word	0x00000000

0800d948 <can1_ams_cell_temperatures_t4s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s3_encode(double value)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800d952:	f04f 0200 	mov.w	r2, #0
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <can1_ams_cell_temperatures_t4s3_encode+0x50>)
 800d958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d95c:	f7f2 fc88 	bl	8000270 <__adddf3>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	a309      	add	r3, pc, #36	; (adr r3, 800d990 <can1_ams_cell_temperatures_t4s3_encode+0x48>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 ff5f 	bl	8000830 <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4610      	mov	r0, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	f7f3 f8df 	bl	8000b3c <__aeabi_d2iz>
 800d97e:	4603      	mov	r3, r0
 800d980:	b21b      	sxth	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	757928e1 	.word	0x757928e1
 800d994:	3fa9018e 	.word	0x3fa9018e
 800d998:	40240000 	.word	0x40240000
 800d99c:	00000000 	.word	0x00000000

0800d9a0 <can1_ams_cell_temperatures_t4s3_decode>:

double can1_ams_cell_temperatures_t4s3_decode(int16_t value)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800d9aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f2 fdaa 	bl	8000508 <__aeabi_i2d>
 800d9b4:	a30d      	add	r3, pc, #52	; (adr r3, 800d9ec <can1_ams_cell_temperatures_t4s3_decode+0x4c>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fe0f 	bl	80005dc <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <can1_ams_cell_temperatures_t4s3_decode+0x48>)
 800d9cc:	f7f2 fc4e 	bl	800026c <__aeabi_dsub>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d9d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d9dc:	eef0 0a67 	vmov.f32	s1, s15
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	40240000 	.word	0x40240000
 800d9ec:	757928e1 	.word	0x757928e1
 800d9f0:	3fa9018e 	.word	0x3fa9018e
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <can1_ams_cell_temperatures_t4s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s4_encode(double value)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <can1_ams_cell_temperatures_t4s4_encode+0x50>)
 800da08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da0c:	f7f2 fc30 	bl	8000270 <__adddf3>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4610      	mov	r0, r2
 800da16:	4619      	mov	r1, r3
 800da18:	a309      	add	r3, pc, #36	; (adr r3, 800da40 <can1_ams_cell_temperatures_t4s4_encode+0x48>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 ff07 	bl	8000830 <__aeabi_ddiv>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4610      	mov	r0, r2
 800da28:	4619      	mov	r1, r3
 800da2a:	f7f3 f887 	bl	8000b3c <__aeabi_d2iz>
 800da2e:	4603      	mov	r3, r0
 800da30:	b21b      	sxth	r3, r3
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	f3af 8000 	nop.w
 800da40:	757928e1 	.word	0x757928e1
 800da44:	3fa9018e 	.word	0x3fa9018e
 800da48:	40240000 	.word	0x40240000
 800da4c:	00000000 	.word	0x00000000

0800da50 <can1_ams_cell_temperatures_t4s4_decode>:

double can1_ams_cell_temperatures_t4s4_decode(int16_t value)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800da5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fd52 	bl	8000508 <__aeabi_i2d>
 800da64:	a30d      	add	r3, pc, #52	; (adr r3, 800da9c <can1_ams_cell_temperatures_t4s4_decode+0x4c>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	f7f2 fdb7 	bl	80005dc <__aeabi_dmul>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4610      	mov	r0, r2
 800da74:	4619      	mov	r1, r3
 800da76:	f04f 0200 	mov.w	r2, #0
 800da7a:	4b07      	ldr	r3, [pc, #28]	; (800da98 <can1_ams_cell_temperatures_t4s4_decode+0x48>)
 800da7c:	f7f2 fbf6 	bl	800026c <__aeabi_dsub>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	ec43 2b17 	vmov	d7, r2, r3
}
 800da88:	eeb0 0a47 	vmov.f32	s0, s14
 800da8c:	eef0 0a67 	vmov.f32	s1, s15
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	40240000 	.word	0x40240000
 800da9c:	757928e1 	.word	0x757928e1
 800daa0:	3fa9018e 	.word	0x3fa9018e
 800daa4:	00000000 	.word	0x00000000

0800daa8 <can1_ams_cell_temperatures_t4s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s5_encode(double value)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <can1_ams_cell_temperatures_t4s5_encode+0x50>)
 800dab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dabc:	f7f2 fbd8 	bl	8000270 <__adddf3>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4610      	mov	r0, r2
 800dac6:	4619      	mov	r1, r3
 800dac8:	a309      	add	r3, pc, #36	; (adr r3, 800daf0 <can1_ams_cell_temperatures_t4s5_encode+0x48>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 feaf 	bl	8000830 <__aeabi_ddiv>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4610      	mov	r0, r2
 800dad8:	4619      	mov	r1, r3
 800dada:	f7f3 f82f 	bl	8000b3c <__aeabi_d2iz>
 800dade:	4603      	mov	r3, r0
 800dae0:	b21b      	sxth	r3, r3
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
 800daf0:	757928e1 	.word	0x757928e1
 800daf4:	3fa9018e 	.word	0x3fa9018e
 800daf8:	40240000 	.word	0x40240000
 800dafc:	00000000 	.word	0x00000000

0800db00 <can1_ams_cell_temperatures_t4s5_decode>:

double can1_ams_cell_temperatures_t4s5_decode(int16_t value)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	4603      	mov	r3, r0
 800db08:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800db0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f2 fcfa 	bl	8000508 <__aeabi_i2d>
 800db14:	a30d      	add	r3, pc, #52	; (adr r3, 800db4c <can1_ams_cell_temperatures_t4s5_decode+0x4c>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fd5f 	bl	80005dc <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4610      	mov	r0, r2
 800db24:	4619      	mov	r1, r3
 800db26:	f04f 0200 	mov.w	r2, #0
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <can1_ams_cell_temperatures_t4s5_decode+0x48>)
 800db2c:	f7f2 fb9e 	bl	800026c <__aeabi_dsub>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	ec43 2b17 	vmov	d7, r2, r3
}
 800db38:	eeb0 0a47 	vmov.f32	s0, s14
 800db3c:	eef0 0a67 	vmov.f32	s1, s15
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	40240000 	.word	0x40240000
 800db4c:	757928e1 	.word	0x757928e1
 800db50:	3fa9018e 	.word	0x3fa9018e
 800db54:	00000000 	.word	0x00000000

0800db58 <can1_ams_cell_temperatures_t4s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s6_encode(double value)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800db62:	f04f 0200 	mov.w	r2, #0
 800db66:	4b10      	ldr	r3, [pc, #64]	; (800dba8 <can1_ams_cell_temperatures_t4s6_encode+0x50>)
 800db68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db6c:	f7f2 fb80 	bl	8000270 <__adddf3>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4610      	mov	r0, r2
 800db76:	4619      	mov	r1, r3
 800db78:	a309      	add	r3, pc, #36	; (adr r3, 800dba0 <can1_ams_cell_temperatures_t4s6_encode+0x48>)
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f7f2 fe57 	bl	8000830 <__aeabi_ddiv>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4610      	mov	r0, r2
 800db88:	4619      	mov	r1, r3
 800db8a:	f7f2 ffd7 	bl	8000b3c <__aeabi_d2iz>
 800db8e:	4603      	mov	r3, r0
 800db90:	b21b      	sxth	r3, r3
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w
 800dba0:	757928e1 	.word	0x757928e1
 800dba4:	3fa9018e 	.word	0x3fa9018e
 800dba8:	40240000 	.word	0x40240000
 800dbac:	00000000 	.word	0x00000000

0800dbb0 <can1_ams_cell_temperatures_t4s6_decode>:

double can1_ams_cell_temperatures_t4s6_decode(int16_t value)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dbba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f2 fca2 	bl	8000508 <__aeabi_i2d>
 800dbc4:	a30d      	add	r3, pc, #52	; (adr r3, 800dbfc <can1_ams_cell_temperatures_t4s6_decode+0x4c>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fd07 	bl	80005dc <__aeabi_dmul>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f04f 0200 	mov.w	r2, #0
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <can1_ams_cell_temperatures_t4s6_decode+0x48>)
 800dbdc:	f7f2 fb46 	bl	800026c <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dbe8:	eeb0 0a47 	vmov.f32	s0, s14
 800dbec:	eef0 0a67 	vmov.f32	s1, s15
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	40240000 	.word	0x40240000
 800dbfc:	757928e1 	.word	0x757928e1
 800dc00:	3fa9018e 	.word	0x3fa9018e
 800dc04:	00000000 	.word	0x00000000

0800dc08 <can1_ams_cell_temperatures_t4s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s7_encode(double value)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <can1_ams_cell_temperatures_t4s7_encode+0x50>)
 800dc18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc1c:	f7f2 fb28 	bl	8000270 <__adddf3>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4610      	mov	r0, r2
 800dc26:	4619      	mov	r1, r3
 800dc28:	a309      	add	r3, pc, #36	; (adr r3, 800dc50 <can1_ams_cell_temperatures_t4s7_encode+0x48>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fdff 	bl	8000830 <__aeabi_ddiv>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4610      	mov	r0, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7f2 ff7f 	bl	8000b3c <__aeabi_d2iz>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	b21b      	sxth	r3, r3
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w
 800dc50:	757928e1 	.word	0x757928e1
 800dc54:	3fa9018e 	.word	0x3fa9018e
 800dc58:	40240000 	.word	0x40240000
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <can1_ams_cell_temperatures_t4s7_decode>:

double can1_ams_cell_temperatures_t4s7_decode(int16_t value)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dc6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f2 fc4a 	bl	8000508 <__aeabi_i2d>
 800dc74:	a30d      	add	r3, pc, #52	; (adr r3, 800dcac <can1_ams_cell_temperatures_t4s7_decode+0x4c>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fcaf 	bl	80005dc <__aeabi_dmul>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	460b      	mov	r3, r1
 800dc82:	4610      	mov	r0, r2
 800dc84:	4619      	mov	r1, r3
 800dc86:	f04f 0200 	mov.w	r2, #0
 800dc8a:	4b07      	ldr	r3, [pc, #28]	; (800dca8 <can1_ams_cell_temperatures_t4s7_decode+0x48>)
 800dc8c:	f7f2 faee 	bl	800026c <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	ec43 2b17 	vmov	d7, r2, r3
}
 800dc98:	eeb0 0a47 	vmov.f32	s0, s14
 800dc9c:	eef0 0a67 	vmov.f32	s1, s15
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	40240000 	.word	0x40240000
 800dcac:	757928e1 	.word	0x757928e1
 800dcb0:	3fa9018e 	.word	0x3fa9018e
 800dcb4:	00000000 	.word	0x00000000

0800dcb8 <can1_ams_cell_temperatures_t4s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s8_encode(double value)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <can1_ams_cell_temperatures_t4s8_encode+0x50>)
 800dcc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dccc:	f7f2 fad0 	bl	8000270 <__adddf3>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	a309      	add	r3, pc, #36	; (adr r3, 800dd00 <can1_ams_cell_temperatures_t4s8_encode+0x48>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fda7 	bl	8000830 <__aeabi_ddiv>
 800dce2:	4602      	mov	r2, r0
 800dce4:	460b      	mov	r3, r1
 800dce6:	4610      	mov	r0, r2
 800dce8:	4619      	mov	r1, r3
 800dcea:	f7f2 ff27 	bl	8000b3c <__aeabi_d2iz>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b21b      	sxth	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w
 800dd00:	757928e1 	.word	0x757928e1
 800dd04:	3fa9018e 	.word	0x3fa9018e
 800dd08:	40240000 	.word	0x40240000
 800dd0c:	00000000 	.word	0x00000000

0800dd10 <can1_ams_cell_temperatures_t4s8_decode>:

double can1_ams_cell_temperatures_t4s8_decode(int16_t value)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dd1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fbf2 	bl	8000508 <__aeabi_i2d>
 800dd24:	a30d      	add	r3, pc, #52	; (adr r3, 800dd5c <can1_ams_cell_temperatures_t4s8_decode+0x4c>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fc57 	bl	80005dc <__aeabi_dmul>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4610      	mov	r0, r2
 800dd34:	4619      	mov	r1, r3
 800dd36:	f04f 0200 	mov.w	r2, #0
 800dd3a:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <can1_ams_cell_temperatures_t4s8_decode+0x48>)
 800dd3c:	f7f2 fa96 	bl	800026c <__aeabi_dsub>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	ec43 2b17 	vmov	d7, r2, r3
}
 800dd48:	eeb0 0a47 	vmov.f32	s0, s14
 800dd4c:	eef0 0a67 	vmov.f32	s1, s15
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	40240000 	.word	0x40240000
 800dd5c:	757928e1 	.word	0x757928e1
 800dd60:	3fa9018e 	.word	0x3fa9018e
 800dd64:	00000000 	.word	0x00000000

0800dd68 <can1_ams_cell_temperatures_t4s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s9_encode(double value)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800dd72:	f04f 0200 	mov.w	r2, #0
 800dd76:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <can1_ams_cell_temperatures_t4s9_encode+0x50>)
 800dd78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dd7c:	f7f2 fa78 	bl	8000270 <__adddf3>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4610      	mov	r0, r2
 800dd86:	4619      	mov	r1, r3
 800dd88:	a309      	add	r3, pc, #36	; (adr r3, 800ddb0 <can1_ams_cell_temperatures_t4s9_encode+0x48>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fd4f 	bl	8000830 <__aeabi_ddiv>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4610      	mov	r0, r2
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7f2 fecf 	bl	8000b3c <__aeabi_d2iz>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	b21b      	sxth	r3, r3
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	757928e1 	.word	0x757928e1
 800ddb4:	3fa9018e 	.word	0x3fa9018e
 800ddb8:	40240000 	.word	0x40240000
 800ddbc:	00000000 	.word	0x00000000

0800ddc0 <can1_ams_cell_temperatures_t4s9_decode>:

double can1_ams_cell_temperatures_t4s9_decode(int16_t value)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800ddca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7f2 fb9a 	bl	8000508 <__aeabi_i2d>
 800ddd4:	a30d      	add	r3, pc, #52	; (adr r3, 800de0c <can1_ams_cell_temperatures_t4s9_decode+0x4c>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	f7f2 fbff 	bl	80005dc <__aeabi_dmul>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4610      	mov	r0, r2
 800dde4:	4619      	mov	r1, r3
 800dde6:	f04f 0200 	mov.w	r2, #0
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <can1_ams_cell_temperatures_t4s9_decode+0x48>)
 800ddec:	f7f2 fa3e 	bl	800026c <__aeabi_dsub>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ddf8:	eeb0 0a47 	vmov.f32	s0, s14
 800ddfc:	eef0 0a67 	vmov.f32	s1, s15
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	40240000 	.word	0x40240000
 800de0c:	757928e1 	.word	0x757928e1
 800de10:	3fa9018e 	.word	0x3fa9018e
 800de14:	00000000 	.word	0x00000000

0800de18 <can1_ams_cell_temperatures_t4s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s10_encode(double value)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	4b10      	ldr	r3, [pc, #64]	; (800de68 <can1_ams_cell_temperatures_t4s10_encode+0x50>)
 800de28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de2c:	f7f2 fa20 	bl	8000270 <__adddf3>
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4610      	mov	r0, r2
 800de36:	4619      	mov	r1, r3
 800de38:	a309      	add	r3, pc, #36	; (adr r3, 800de60 <can1_ams_cell_temperatures_t4s10_encode+0x48>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fcf7 	bl	8000830 <__aeabi_ddiv>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4610      	mov	r0, r2
 800de48:	4619      	mov	r1, r3
 800de4a:	f7f2 fe77 	bl	8000b3c <__aeabi_d2iz>
 800de4e:	4603      	mov	r3, r0
 800de50:	b21b      	sxth	r3, r3
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	f3af 8000 	nop.w
 800de60:	757928e1 	.word	0x757928e1
 800de64:	3fa9018e 	.word	0x3fa9018e
 800de68:	40240000 	.word	0x40240000
 800de6c:	00000000 	.word	0x00000000

0800de70 <can1_ams_cell_temperatures_t4s10_decode>:

double can1_ams_cell_temperatures_t4s10_decode(int16_t value)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	4603      	mov	r3, r0
 800de78:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800de7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f2 fb42 	bl	8000508 <__aeabi_i2d>
 800de84:	a30d      	add	r3, pc, #52	; (adr r3, 800debc <can1_ams_cell_temperatures_t4s10_decode+0x4c>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	f7f2 fba7 	bl	80005dc <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4610      	mov	r0, r2
 800de94:	4619      	mov	r1, r3
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <can1_ams_cell_temperatures_t4s10_decode+0x48>)
 800de9c:	f7f2 f9e6 	bl	800026c <__aeabi_dsub>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	ec43 2b17 	vmov	d7, r2, r3
}
 800dea8:	eeb0 0a47 	vmov.f32	s0, s14
 800deac:	eef0 0a67 	vmov.f32	s1, s15
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	40240000 	.word	0x40240000
 800debc:	757928e1 	.word	0x757928e1
 800dec0:	3fa9018e 	.word	0x3fa9018e
 800dec4:	00000000 	.word	0x00000000

0800dec8 <can1_ams_cell_temperatures_t4s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s11_encode(double value)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800ded2:	f04f 0200 	mov.w	r2, #0
 800ded6:	4b10      	ldr	r3, [pc, #64]	; (800df18 <can1_ams_cell_temperatures_t4s11_encode+0x50>)
 800ded8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dedc:	f7f2 f9c8 	bl	8000270 <__adddf3>
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4610      	mov	r0, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	a309      	add	r3, pc, #36	; (adr r3, 800df10 <can1_ams_cell_temperatures_t4s11_encode+0x48>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fc9f 	bl	8000830 <__aeabi_ddiv>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4610      	mov	r0, r2
 800def8:	4619      	mov	r1, r3
 800defa:	f7f2 fe1f 	bl	8000b3c <__aeabi_d2iz>
 800defe:	4603      	mov	r3, r0
 800df00:	b21b      	sxth	r3, r3
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	757928e1 	.word	0x757928e1
 800df14:	3fa9018e 	.word	0x3fa9018e
 800df18:	40240000 	.word	0x40240000
 800df1c:	00000000 	.word	0x00000000

0800df20 <can1_ams_cell_temperatures_t4s11_decode>:

double can1_ams_cell_temperatures_t4s11_decode(int16_t value)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	4603      	mov	r3, r0
 800df28:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800df2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f2 faea 	bl	8000508 <__aeabi_i2d>
 800df34:	a30d      	add	r3, pc, #52	; (adr r3, 800df6c <can1_ams_cell_temperatures_t4s11_decode+0x4c>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f7f2 fb4f 	bl	80005dc <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4610      	mov	r0, r2
 800df44:	4619      	mov	r1, r3
 800df46:	f04f 0200 	mov.w	r2, #0
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <can1_ams_cell_temperatures_t4s11_decode+0x48>)
 800df4c:	f7f2 f98e 	bl	800026c <__aeabi_dsub>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	ec43 2b17 	vmov	d7, r2, r3
}
 800df58:	eeb0 0a47 	vmov.f32	s0, s14
 800df5c:	eef0 0a67 	vmov.f32	s1, s15
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40240000 	.word	0x40240000
 800df6c:	757928e1 	.word	0x757928e1
 800df70:	3fa9018e 	.word	0x3fa9018e
 800df74:	00000000 	.word	0x00000000

0800df78 <can1_ams_cell_temperatures_t4s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t4s12_encode(double value)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	4b10      	ldr	r3, [pc, #64]	; (800dfc8 <can1_ams_cell_temperatures_t4s12_encode+0x50>)
 800df88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df8c:	f7f2 f970 	bl	8000270 <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4610      	mov	r0, r2
 800df96:	4619      	mov	r1, r3
 800df98:	a309      	add	r3, pc, #36	; (adr r3, 800dfc0 <can1_ams_cell_temperatures_t4s12_encode+0x48>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 fc47 	bl	8000830 <__aeabi_ddiv>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f7f2 fdc7 	bl	8000b3c <__aeabi_d2iz>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	b21b      	sxth	r3, r3
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	757928e1 	.word	0x757928e1
 800dfc4:	3fa9018e 	.word	0x3fa9018e
 800dfc8:	40240000 	.word	0x40240000
 800dfcc:	00000000 	.word	0x00000000

0800dfd0 <can1_ams_cell_temperatures_t4s12_decode>:

double can1_ams_cell_temperatures_t4s12_decode(int16_t value)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800dfda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f2 fa92 	bl	8000508 <__aeabi_i2d>
 800dfe4:	a30d      	add	r3, pc, #52	; (adr r3, 800e01c <can1_ams_cell_temperatures_t4s12_decode+0x4c>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 faf7 	bl	80005dc <__aeabi_dmul>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4610      	mov	r0, r2
 800dff4:	4619      	mov	r1, r3
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	4b07      	ldr	r3, [pc, #28]	; (800e018 <can1_ams_cell_temperatures_t4s12_decode+0x48>)
 800dffc:	f7f2 f936 	bl	800026c <__aeabi_dsub>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	ec43 2b17 	vmov	d7, r2, r3
}
 800e008:	eeb0 0a47 	vmov.f32	s0, s14
 800e00c:	eef0 0a67 	vmov.f32	s1, s15
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	40240000 	.word	0x40240000
 800e01c:	757928e1 	.word	0x757928e1
 800e020:	3fa9018e 	.word	0x3fa9018e
 800e024:	00000000 	.word	0x00000000

0800e028 <can1_ams_cell_temperatures_t5s1_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s1_encode(double value)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e032:	f04f 0200 	mov.w	r2, #0
 800e036:	4b10      	ldr	r3, [pc, #64]	; (800e078 <can1_ams_cell_temperatures_t5s1_encode+0x50>)
 800e038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e03c:	f7f2 f918 	bl	8000270 <__adddf3>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4610      	mov	r0, r2
 800e046:	4619      	mov	r1, r3
 800e048:	a309      	add	r3, pc, #36	; (adr r3, 800e070 <can1_ams_cell_temperatures_t5s1_encode+0x48>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 fbef 	bl	8000830 <__aeabi_ddiv>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fd6f 	bl	8000b3c <__aeabi_d2iz>
 800e05e:	4603      	mov	r3, r0
 800e060:	b21b      	sxth	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w
 800e070:	757928e1 	.word	0x757928e1
 800e074:	3fa9018e 	.word	0x3fa9018e
 800e078:	40240000 	.word	0x40240000
 800e07c:	00000000 	.word	0x00000000

0800e080 <can1_ams_cell_temperatures_t5s1_decode>:

double can1_ams_cell_temperatures_t5s1_decode(int16_t value)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7f2 fa3a 	bl	8000508 <__aeabi_i2d>
 800e094:	a30d      	add	r3, pc, #52	; (adr r3, 800e0cc <can1_ams_cell_temperatures_t5s1_decode+0x4c>)
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	f7f2 fa9f 	bl	80005dc <__aeabi_dmul>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <can1_ams_cell_temperatures_t5s1_decode+0x48>)
 800e0ac:	f7f2 f8de 	bl	800026c <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e0b8:	eeb0 0a47 	vmov.f32	s0, s14
 800e0bc:	eef0 0a67 	vmov.f32	s1, s15
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	757928e1 	.word	0x757928e1
 800e0d0:	3fa9018e 	.word	0x3fa9018e
 800e0d4:	00000000 	.word	0x00000000

0800e0d8 <can1_ams_cell_temperatures_t5s2_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s2_encode(double value)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e0e2:	f04f 0200 	mov.w	r2, #0
 800e0e6:	4b10      	ldr	r3, [pc, #64]	; (800e128 <can1_ams_cell_temperatures_t5s2_encode+0x50>)
 800e0e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e0ec:	f7f2 f8c0 	bl	8000270 <__adddf3>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	a309      	add	r3, pc, #36	; (adr r3, 800e120 <can1_ams_cell_temperatures_t5s2_encode+0x48>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 fb97 	bl	8000830 <__aeabi_ddiv>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4610      	mov	r0, r2
 800e108:	4619      	mov	r1, r3
 800e10a:	f7f2 fd17 	bl	8000b3c <__aeabi_d2iz>
 800e10e:	4603      	mov	r3, r0
 800e110:	b21b      	sxth	r3, r3
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	757928e1 	.word	0x757928e1
 800e124:	3fa9018e 	.word	0x3fa9018e
 800e128:	40240000 	.word	0x40240000
 800e12c:	00000000 	.word	0x00000000

0800e130 <can1_ams_cell_temperatures_t5s2_decode>:

double can1_ams_cell_temperatures_t5s2_decode(int16_t value)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e13a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f2 f9e2 	bl	8000508 <__aeabi_i2d>
 800e144:	a30d      	add	r3, pc, #52	; (adr r3, 800e17c <can1_ams_cell_temperatures_t5s2_decode+0x4c>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f7f2 fa47 	bl	80005dc <__aeabi_dmul>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4610      	mov	r0, r2
 800e154:	4619      	mov	r1, r3
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	4b07      	ldr	r3, [pc, #28]	; (800e178 <can1_ams_cell_temperatures_t5s2_decode+0x48>)
 800e15c:	f7f2 f886 	bl	800026c <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	ec43 2b17 	vmov	d7, r2, r3
}
 800e168:	eeb0 0a47 	vmov.f32	s0, s14
 800e16c:	eef0 0a67 	vmov.f32	s1, s15
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	40240000 	.word	0x40240000
 800e17c:	757928e1 	.word	0x757928e1
 800e180:	3fa9018e 	.word	0x3fa9018e
 800e184:	00000000 	.word	0x00000000

0800e188 <can1_ams_cell_temperatures_t5s3_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s3_encode(double value)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	4b10      	ldr	r3, [pc, #64]	; (800e1d8 <can1_ams_cell_temperatures_t5s3_encode+0x50>)
 800e198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e19c:	f7f2 f868 	bl	8000270 <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	a309      	add	r3, pc, #36	; (adr r3, 800e1d0 <can1_ams_cell_temperatures_t5s3_encode+0x48>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 fb3f 	bl	8000830 <__aeabi_ddiv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f7f2 fcbf 	bl	8000b3c <__aeabi_d2iz>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b21b      	sxth	r3, r3
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	757928e1 	.word	0x757928e1
 800e1d4:	3fa9018e 	.word	0x3fa9018e
 800e1d8:	40240000 	.word	0x40240000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <can1_ams_cell_temperatures_t5s3_decode>:

double can1_ams_cell_temperatures_t5s3_decode(int16_t value)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f2 f98a 	bl	8000508 <__aeabi_i2d>
 800e1f4:	a30d      	add	r3, pc, #52	; (adr r3, 800e22c <can1_ams_cell_temperatures_t5s3_decode+0x4c>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f9ef 	bl	80005dc <__aeabi_dmul>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4610      	mov	r0, r2
 800e204:	4619      	mov	r1, r3
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	4b07      	ldr	r3, [pc, #28]	; (800e228 <can1_ams_cell_temperatures_t5s3_decode+0x48>)
 800e20c:	f7f2 f82e 	bl	800026c <__aeabi_dsub>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	ec43 2b17 	vmov	d7, r2, r3
}
 800e218:	eeb0 0a47 	vmov.f32	s0, s14
 800e21c:	eef0 0a67 	vmov.f32	s1, s15
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	40240000 	.word	0x40240000
 800e22c:	757928e1 	.word	0x757928e1
 800e230:	3fa9018e 	.word	0x3fa9018e
 800e234:	00000000 	.word	0x00000000

0800e238 <can1_ams_cell_temperatures_t5s4_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s4_encode(double value)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e242:	f04f 0200 	mov.w	r2, #0
 800e246:	4b10      	ldr	r3, [pc, #64]	; (800e288 <can1_ams_cell_temperatures_t5s4_encode+0x50>)
 800e248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e24c:	f7f2 f810 	bl	8000270 <__adddf3>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4610      	mov	r0, r2
 800e256:	4619      	mov	r1, r3
 800e258:	a309      	add	r3, pc, #36	; (adr r3, 800e280 <can1_ams_cell_temperatures_t5s4_encode+0x48>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 fae7 	bl	8000830 <__aeabi_ddiv>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	f7f2 fc67 	bl	8000b3c <__aeabi_d2iz>
 800e26e:	4603      	mov	r3, r0
 800e270:	b21b      	sxth	r3, r3
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	757928e1 	.word	0x757928e1
 800e284:	3fa9018e 	.word	0x3fa9018e
 800e288:	40240000 	.word	0x40240000
 800e28c:	00000000 	.word	0x00000000

0800e290 <can1_ams_cell_temperatures_t5s4_decode>:

double can1_ams_cell_temperatures_t5s4_decode(int16_t value)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e29a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f2 f932 	bl	8000508 <__aeabi_i2d>
 800e2a4:	a30d      	add	r3, pc, #52	; (adr r3, 800e2dc <can1_ams_cell_temperatures_t5s4_decode+0x4c>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f2 f997 	bl	80005dc <__aeabi_dmul>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f04f 0200 	mov.w	r2, #0
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <can1_ams_cell_temperatures_t5s4_decode+0x48>)
 800e2bc:	f7f1 ffd6 	bl	800026c <__aeabi_dsub>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e2c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e2cc:	eef0 0a67 	vmov.f32	s1, s15
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	40240000 	.word	0x40240000
 800e2dc:	757928e1 	.word	0x757928e1
 800e2e0:	3fa9018e 	.word	0x3fa9018e
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <can1_ams_cell_temperatures_t5s5_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s5_encode(double value)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	4b10      	ldr	r3, [pc, #64]	; (800e338 <can1_ams_cell_temperatures_t5s5_encode+0x50>)
 800e2f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e2fc:	f7f1 ffb8 	bl	8000270 <__adddf3>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4610      	mov	r0, r2
 800e306:	4619      	mov	r1, r3
 800e308:	a309      	add	r3, pc, #36	; (adr r3, 800e330 <can1_ams_cell_temperatures_t5s5_encode+0x48>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f7f2 fa8f 	bl	8000830 <__aeabi_ddiv>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4610      	mov	r0, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	f7f2 fc0f 	bl	8000b3c <__aeabi_d2iz>
 800e31e:	4603      	mov	r3, r0
 800e320:	b21b      	sxth	r3, r3
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
 800e330:	757928e1 	.word	0x757928e1
 800e334:	3fa9018e 	.word	0x3fa9018e
 800e338:	40240000 	.word	0x40240000
 800e33c:	00000000 	.word	0x00000000

0800e340 <can1_ams_cell_temperatures_t5s5_decode>:

double can1_ams_cell_temperatures_t5s5_decode(int16_t value)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e34a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f2 f8da 	bl	8000508 <__aeabi_i2d>
 800e354:	a30d      	add	r3, pc, #52	; (adr r3, 800e38c <can1_ams_cell_temperatures_t5s5_decode+0x4c>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f2 f93f 	bl	80005dc <__aeabi_dmul>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4610      	mov	r0, r2
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	4b07      	ldr	r3, [pc, #28]	; (800e388 <can1_ams_cell_temperatures_t5s5_decode+0x48>)
 800e36c:	f7f1 ff7e 	bl	800026c <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	ec43 2b17 	vmov	d7, r2, r3
}
 800e378:	eeb0 0a47 	vmov.f32	s0, s14
 800e37c:	eef0 0a67 	vmov.f32	s1, s15
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	40240000 	.word	0x40240000
 800e38c:	757928e1 	.word	0x757928e1
 800e390:	3fa9018e 	.word	0x3fa9018e
 800e394:	00000000 	.word	0x00000000

0800e398 <can1_ams_cell_temperatures_t5s6_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s6_encode(double value)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e3a2:	f04f 0200 	mov.w	r2, #0
 800e3a6:	4b10      	ldr	r3, [pc, #64]	; (800e3e8 <can1_ams_cell_temperatures_t5s6_encode+0x50>)
 800e3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ac:	f7f1 ff60 	bl	8000270 <__adddf3>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	a309      	add	r3, pc, #36	; (adr r3, 800e3e0 <can1_ams_cell_temperatures_t5s6_encode+0x48>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	f7f2 fa37 	bl	8000830 <__aeabi_ddiv>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7f2 fbb7 	bl	8000b3c <__aeabi_d2iz>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b21b      	sxth	r3, r3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	757928e1 	.word	0x757928e1
 800e3e4:	3fa9018e 	.word	0x3fa9018e
 800e3e8:	40240000 	.word	0x40240000
 800e3ec:	00000000 	.word	0x00000000

0800e3f0 <can1_ams_cell_temperatures_t5s6_decode>:

double can1_ams_cell_temperatures_t5s6_decode(int16_t value)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e3fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f2 f882 	bl	8000508 <__aeabi_i2d>
 800e404:	a30d      	add	r3, pc, #52	; (adr r3, 800e43c <can1_ams_cell_temperatures_t5s6_decode+0x4c>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	f7f2 f8e7 	bl	80005dc <__aeabi_dmul>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4610      	mov	r0, r2
 800e414:	4619      	mov	r1, r3
 800e416:	f04f 0200 	mov.w	r2, #0
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <can1_ams_cell_temperatures_t5s6_decode+0x48>)
 800e41c:	f7f1 ff26 	bl	800026c <__aeabi_dsub>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	ec43 2b17 	vmov	d7, r2, r3
}
 800e428:	eeb0 0a47 	vmov.f32	s0, s14
 800e42c:	eef0 0a67 	vmov.f32	s1, s15
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	40240000 	.word	0x40240000
 800e43c:	757928e1 	.word	0x757928e1
 800e440:	3fa9018e 	.word	0x3fa9018e
 800e444:	00000000 	.word	0x00000000

0800e448 <can1_ams_cell_temperatures_t5s7_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s7_encode(double value)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	4b10      	ldr	r3, [pc, #64]	; (800e498 <can1_ams_cell_temperatures_t5s7_encode+0x50>)
 800e458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e45c:	f7f1 ff08 	bl	8000270 <__adddf3>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4610      	mov	r0, r2
 800e466:	4619      	mov	r1, r3
 800e468:	a309      	add	r3, pc, #36	; (adr r3, 800e490 <can1_ams_cell_temperatures_t5s7_encode+0x48>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f2 f9df 	bl	8000830 <__aeabi_ddiv>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4610      	mov	r0, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	f7f2 fb5f 	bl	8000b3c <__aeabi_d2iz>
 800e47e:	4603      	mov	r3, r0
 800e480:	b21b      	sxth	r3, r3
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w
 800e490:	757928e1 	.word	0x757928e1
 800e494:	3fa9018e 	.word	0x3fa9018e
 800e498:	40240000 	.word	0x40240000
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <can1_ams_cell_temperatures_t5s7_decode>:

double can1_ams_cell_temperatures_t5s7_decode(int16_t value)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f2 f82a 	bl	8000508 <__aeabi_i2d>
 800e4b4:	a30d      	add	r3, pc, #52	; (adr r3, 800e4ec <can1_ams_cell_temperatures_t5s7_decode+0x4c>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f7f2 f88f 	bl	80005dc <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	f04f 0200 	mov.w	r2, #0
 800e4ca:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <can1_ams_cell_temperatures_t5s7_decode+0x48>)
 800e4cc:	f7f1 fece 	bl	800026c <__aeabi_dsub>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e4d8:	eeb0 0a47 	vmov.f32	s0, s14
 800e4dc:	eef0 0a67 	vmov.f32	s1, s15
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	40240000 	.word	0x40240000
 800e4ec:	757928e1 	.word	0x757928e1
 800e4f0:	3fa9018e 	.word	0x3fa9018e
 800e4f4:	00000000 	.word	0x00000000

0800e4f8 <can1_ams_cell_temperatures_t5s8_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s8_encode(double value)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e502:	f04f 0200 	mov.w	r2, #0
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <can1_ams_cell_temperatures_t5s8_encode+0x50>)
 800e508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e50c:	f7f1 feb0 	bl	8000270 <__adddf3>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4610      	mov	r0, r2
 800e516:	4619      	mov	r1, r3
 800e518:	a309      	add	r3, pc, #36	; (adr r3, 800e540 <can1_ams_cell_temperatures_t5s8_encode+0x48>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f2 f987 	bl	8000830 <__aeabi_ddiv>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	4610      	mov	r0, r2
 800e528:	4619      	mov	r1, r3
 800e52a:	f7f2 fb07 	bl	8000b3c <__aeabi_d2iz>
 800e52e:	4603      	mov	r3, r0
 800e530:	b21b      	sxth	r3, r3
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w
 800e540:	757928e1 	.word	0x757928e1
 800e544:	3fa9018e 	.word	0x3fa9018e
 800e548:	40240000 	.word	0x40240000
 800e54c:	00000000 	.word	0x00000000

0800e550 <can1_ams_cell_temperatures_t5s8_decode>:

double can1_ams_cell_temperatures_t5s8_decode(int16_t value)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e55a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f1 ffd2 	bl	8000508 <__aeabi_i2d>
 800e564:	a30d      	add	r3, pc, #52	; (adr r3, 800e59c <can1_ams_cell_temperatures_t5s8_decode+0x4c>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f7f2 f837 	bl	80005dc <__aeabi_dmul>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4610      	mov	r0, r2
 800e574:	4619      	mov	r1, r3
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <can1_ams_cell_temperatures_t5s8_decode+0x48>)
 800e57c:	f7f1 fe76 	bl	800026c <__aeabi_dsub>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	ec43 2b17 	vmov	d7, r2, r3
}
 800e588:	eeb0 0a47 	vmov.f32	s0, s14
 800e58c:	eef0 0a67 	vmov.f32	s1, s15
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	40240000 	.word	0x40240000
 800e59c:	757928e1 	.word	0x757928e1
 800e5a0:	3fa9018e 	.word	0x3fa9018e
 800e5a4:	00000000 	.word	0x00000000

0800e5a8 <can1_ams_cell_temperatures_t5s9_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s9_encode(double value)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <can1_ams_cell_temperatures_t5s9_encode+0x50>)
 800e5b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5bc:	f7f1 fe58 	bl	8000270 <__adddf3>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	a309      	add	r3, pc, #36	; (adr r3, 800e5f0 <can1_ams_cell_temperatures_t5s9_encode+0x48>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f2 f92f 	bl	8000830 <__aeabi_ddiv>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	4619      	mov	r1, r3
 800e5da:	f7f2 faaf 	bl	8000b3c <__aeabi_d2iz>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	b21b      	sxth	r3, r3
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	757928e1 	.word	0x757928e1
 800e5f4:	3fa9018e 	.word	0x3fa9018e
 800e5f8:	40240000 	.word	0x40240000
 800e5fc:	00000000 	.word	0x00000000

0800e600 <can1_ams_cell_temperatures_t5s9_decode>:

double can1_ams_cell_temperatures_t5s9_decode(int16_t value)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e60a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f1 ff7a 	bl	8000508 <__aeabi_i2d>
 800e614:	a30d      	add	r3, pc, #52	; (adr r3, 800e64c <can1_ams_cell_temperatures_t5s9_decode+0x4c>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f1 ffdf 	bl	80005dc <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4610      	mov	r0, r2
 800e624:	4619      	mov	r1, r3
 800e626:	f04f 0200 	mov.w	r2, #0
 800e62a:	4b07      	ldr	r3, [pc, #28]	; (800e648 <can1_ams_cell_temperatures_t5s9_decode+0x48>)
 800e62c:	f7f1 fe1e 	bl	800026c <__aeabi_dsub>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	ec43 2b17 	vmov	d7, r2, r3
}
 800e638:	eeb0 0a47 	vmov.f32	s0, s14
 800e63c:	eef0 0a67 	vmov.f32	s1, s15
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	40240000 	.word	0x40240000
 800e64c:	757928e1 	.word	0x757928e1
 800e650:	3fa9018e 	.word	0x3fa9018e
 800e654:	00000000 	.word	0x00000000

0800e658 <can1_ams_cell_temperatures_t5s10_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s10_encode(double value)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e662:	f04f 0200 	mov.w	r2, #0
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <can1_ams_cell_temperatures_t5s10_encode+0x50>)
 800e668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e66c:	f7f1 fe00 	bl	8000270 <__adddf3>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	a309      	add	r3, pc, #36	; (adr r3, 800e6a0 <can1_ams_cell_temperatures_t5s10_encode+0x48>)
 800e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67e:	f7f2 f8d7 	bl	8000830 <__aeabi_ddiv>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4610      	mov	r0, r2
 800e688:	4619      	mov	r1, r3
 800e68a:	f7f2 fa57 	bl	8000b3c <__aeabi_d2iz>
 800e68e:	4603      	mov	r3, r0
 800e690:	b21b      	sxth	r3, r3
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	f3af 8000 	nop.w
 800e6a0:	757928e1 	.word	0x757928e1
 800e6a4:	3fa9018e 	.word	0x3fa9018e
 800e6a8:	40240000 	.word	0x40240000
 800e6ac:	00000000 	.word	0x00000000

0800e6b0 <can1_ams_cell_temperatures_t5s10_decode>:

double can1_ams_cell_temperatures_t5s10_decode(int16_t value)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e6ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f1 ff22 	bl	8000508 <__aeabi_i2d>
 800e6c4:	a30d      	add	r3, pc, #52	; (adr r3, 800e6fc <can1_ams_cell_temperatures_t5s10_decode+0x4c>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7f1 ff87 	bl	80005dc <__aeabi_dmul>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	4b07      	ldr	r3, [pc, #28]	; (800e6f8 <can1_ams_cell_temperatures_t5s10_decode+0x48>)
 800e6dc:	f7f1 fdc6 	bl	800026c <__aeabi_dsub>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800e6e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e6ec:	eef0 0a67 	vmov.f32	s1, s15
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	757928e1 	.word	0x757928e1
 800e700:	3fa9018e 	.word	0x3fa9018e
 800e704:	00000000 	.word	0x00000000

0800e708 <can1_ams_cell_temperatures_t5s11_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s11_encode(double value)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e712:	f04f 0200 	mov.w	r2, #0
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <can1_ams_cell_temperatures_t5s11_encode+0x50>)
 800e718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e71c:	f7f1 fda8 	bl	8000270 <__adddf3>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4610      	mov	r0, r2
 800e726:	4619      	mov	r1, r3
 800e728:	a309      	add	r3, pc, #36	; (adr r3, 800e750 <can1_ams_cell_temperatures_t5s11_encode+0x48>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f2 f87f 	bl	8000830 <__aeabi_ddiv>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4610      	mov	r0, r2
 800e738:	4619      	mov	r1, r3
 800e73a:	f7f2 f9ff 	bl	8000b3c <__aeabi_d2iz>
 800e73e:	4603      	mov	r3, r0
 800e740:	b21b      	sxth	r3, r3
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	f3af 8000 	nop.w
 800e750:	757928e1 	.word	0x757928e1
 800e754:	3fa9018e 	.word	0x3fa9018e
 800e758:	40240000 	.word	0x40240000
 800e75c:	00000000 	.word	0x00000000

0800e760 <can1_ams_cell_temperatures_t5s11_decode>:

double can1_ams_cell_temperatures_t5s11_decode(int16_t value)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e76a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f1 feca 	bl	8000508 <__aeabi_i2d>
 800e774:	a30d      	add	r3, pc, #52	; (adr r3, 800e7ac <can1_ams_cell_temperatures_t5s11_decode+0x4c>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 ff2f 	bl	80005dc <__aeabi_dmul>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4610      	mov	r0, r2
 800e784:	4619      	mov	r1, r3
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <can1_ams_cell_temperatures_t5s11_decode+0x48>)
 800e78c:	f7f1 fd6e 	bl	800026c <__aeabi_dsub>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	ec43 2b17 	vmov	d7, r2, r3
}
 800e798:	eeb0 0a47 	vmov.f32	s0, s14
 800e79c:	eef0 0a67 	vmov.f32	s1, s15
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	40240000 	.word	0x40240000
 800e7ac:	757928e1 	.word	0x757928e1
 800e7b0:	3fa9018e 	.word	0x3fa9018e
 800e7b4:	00000000 	.word	0x00000000

0800e7b8 <can1_ams_cell_temperatures_t5s12_encode>:
{
    return ((value >= 0) && (value <= 4095));
}

int16_t can1_ams_cell_temperatures_t5s12_encode(double value)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)((value - -10.0) / 0.04884);
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <can1_ams_cell_temperatures_t5s12_encode+0x50>)
 800e7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7cc:	f7f1 fd50 	bl	8000270 <__adddf3>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	a309      	add	r3, pc, #36	; (adr r3, 800e800 <can1_ams_cell_temperatures_t5s12_encode+0x48>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f7f2 f827 	bl	8000830 <__aeabi_ddiv>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f7f2 f9a7 	bl	8000b3c <__aeabi_d2iz>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	b21b      	sxth	r3, r3
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
 800e800:	757928e1 	.word	0x757928e1
 800e804:	3fa9018e 	.word	0x3fa9018e
 800e808:	40240000 	.word	0x40240000
 800e80c:	00000000 	.word	0x00000000

0800e810 <can1_ams_cell_temperatures_t5s12_decode>:

double can1_ams_cell_temperatures_t5s12_decode(int16_t value)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.04884) + -10.0);
 800e81a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f1 fe72 	bl	8000508 <__aeabi_i2d>
 800e824:	a30d      	add	r3, pc, #52	; (adr r3, 800e85c <can1_ams_cell_temperatures_t5s12_decode+0x4c>)
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	f7f1 fed7 	bl	80005dc <__aeabi_dmul>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4610      	mov	r0, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	4b07      	ldr	r3, [pc, #28]	; (800e858 <can1_ams_cell_temperatures_t5s12_decode+0x48>)
 800e83c:	f7f1 fd16 	bl	800026c <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	ec43 2b17 	vmov	d7, r2, r3
}
 800e848:	eeb0 0a47 	vmov.f32	s0, s14
 800e84c:	eef0 0a67 	vmov.f32	s1, s15
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	40240000 	.word	0x40240000
 800e85c:	757928e1 	.word	0x757928e1
 800e860:	3fa9018e 	.word	0x3fa9018e

0800e864 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]
 800e86e:	460b      	mov	r3, r1
 800e870:	71bb      	strb	r3, [r7, #6]
 800e872:	4613      	mov	r3, r2
 800e874:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e876:	79fa      	ldrb	r2, [r7, #7]
 800e878:	79bb      	ldrb	r3, [r7, #6]
 800e87a:	fa02 f303 	lsl.w	r3, r2, r3
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	797b      	ldrb	r3, [r7, #5]
 800e882:	4013      	ands	r3, r2
 800e884:	b2db      	uxtb	r3, r3
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	4603      	mov	r3, r0
 800e89a:	80fb      	strh	r3, [r7, #6]
 800e89c:	460b      	mov	r3, r1
 800e89e:	717b      	strb	r3, [r7, #5]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8a4:	88fa      	ldrh	r2, [r7, #6]
 800e8a6:	797b      	ldrb	r3, [r7, #5]
 800e8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	793b      	ldrb	r3, [r7, #4]
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	b2db      	uxtb	r3, r3
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <pack_left_shift_u64>:

static inline uint8_t pack_left_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e8c0:	b4f0      	push	{r4, r5, r6, r7}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	71fb      	strb	r3, [r7, #7]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800e8d6:	79f9      	ldrb	r1, [r7, #7]
 800e8d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8dc:	f1a1 0620 	sub.w	r6, r1, #32
 800e8e0:	f1c1 0020 	rsb	r0, r1, #32
 800e8e4:	fa03 f501 	lsl.w	r5, r3, r1
 800e8e8:	fa02 f606 	lsl.w	r6, r2, r6
 800e8ec:	4335      	orrs	r5, r6
 800e8ee:	fa22 f000 	lsr.w	r0, r2, r0
 800e8f2:	4305      	orrs	r5, r0
 800e8f4:	fa02 f401 	lsl.w	r4, r2, r1
 800e8f8:	b2e2      	uxtb	r2, r4
 800e8fa:	79bb      	ldrb	r3, [r7, #6]
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	b2db      	uxtb	r3, r3
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bcf0      	pop	{r4, r5, r6, r7}
 800e908:	4770      	bx	lr

0800e90a <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	4603      	mov	r3, r0
 800e912:	80fb      	strh	r3, [r7, #6]
 800e914:	460b      	mov	r3, r1
 800e916:	717b      	strb	r3, [r7, #5]
 800e918:	4613      	mov	r3, r2
 800e91a:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	797b      	ldrb	r3, [r7, #5]
 800e920:	fa42 f303 	asr.w	r3, r2, r3
 800e924:	b2da      	uxtb	r2, r3
 800e926:	793b      	ldrb	r3, [r7, #4]
 800e928:	4013      	ands	r3, r2
 800e92a:	b2db      	uxtb	r3, r3
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <pack_right_shift_u64>:

static inline uint8_t pack_right_shift_u64(
    uint64_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e938:	b4f0      	push	{r4, r5, r6, r7}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	460b      	mov	r3, r1
 800e948:	71fb      	strb	r3, [r7, #7]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71bb      	strb	r3, [r7, #6]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800e94e:	79f9      	ldrb	r1, [r7, #7]
 800e950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e954:	f1c1 0620 	rsb	r6, r1, #32
 800e958:	f1a1 0020 	sub.w	r0, r1, #32
 800e95c:	fa22 f401 	lsr.w	r4, r2, r1
 800e960:	fa03 f606 	lsl.w	r6, r3, r6
 800e964:	4334      	orrs	r4, r6
 800e966:	fa23 f000 	lsr.w	r0, r3, r0
 800e96a:	4304      	orrs	r4, r0
 800e96c:	fa23 f501 	lsr.w	r5, r3, r1
 800e970:	b2e2      	uxtb	r2, r4
 800e972:	79bb      	ldrb	r3, [r7, #6]
 800e974:	4013      	ands	r3, r2
 800e976:	b2db      	uxtb	r3, r3
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bcf0      	pop	{r4, r5, r6, r7}
 800e980:	4770      	bx	lr

0800e982 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	4603      	mov	r3, r0
 800e98a:	71fb      	strb	r3, [r7, #7]
 800e98c:	460b      	mov	r3, r1
 800e98e:	71bb      	strb	r3, [r7, #6]
 800e990:	4613      	mov	r3, r2
 800e992:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800e994:	79fa      	ldrb	r2, [r7, #7]
 800e996:	797b      	ldrb	r3, [r7, #5]
 800e998:	4013      	ands	r3, r2
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	461a      	mov	r2, r3
 800e99e:	79bb      	ldrb	r3, [r7, #6]
 800e9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a4:	b29b      	uxth	r3, r3
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	370c      	adds	r7, #12
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800e9b2:	b4f0      	push	{r4, r5, r6, r7}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	71fb      	strb	r3, [r7, #7]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	71bb      	strb	r3, [r7, #6]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 800e9c4:	79fa      	ldrb	r2, [r7, #7]
 800e9c6:	797b      	ldrb	r3, [r7, #5]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	f04f 0300 	mov.w	r3, #0
 800e9d2:	79b9      	ldrb	r1, [r7, #6]
 800e9d4:	f1a1 0620 	sub.w	r6, r1, #32
 800e9d8:	f1c1 0020 	rsb	r0, r1, #32
 800e9dc:	fa03 f501 	lsl.w	r5, r3, r1
 800e9e0:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e4:	4335      	orrs	r5, r6
 800e9e6:	fa22 f000 	lsr.w	r0, r2, r0
 800e9ea:	4305      	orrs	r5, r0
 800e9ec:	fa02 f401 	lsl.w	r4, r2, r1
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
}
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bcf0      	pop	{r4, r5, r6, r7}
 800e9fe:	4770      	bx	lr

0800ea00 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	71bb      	strb	r3, [r7, #6]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800ea12:	79fa      	ldrb	r2, [r7, #7]
 800ea14:	797b      	ldrb	r3, [r7, #5]
 800ea16:	4013      	ands	r3, r2
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	79bb      	ldrb	r3, [r7, #6]
 800ea1e:	fa42 f303 	asr.w	r3, r2, r3
 800ea22:	b2db      	uxtb	r3, r3
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	71bb      	strb	r3, [r7, #6]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800ea42:	79fa      	ldrb	r2, [r7, #7]
 800ea44:	797b      	ldrb	r3, [r7, #5]
 800ea46:	4013      	ands	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	79bb      	ldrb	r3, [r7, #6]
 800ea4e:	fa42 f303 	asr.w	r3, r2, r3
 800ea52:	b29b      	uxth	r3, r3
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800ea60:	b4f0      	push	{r4, r5, r6, r7}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	71fb      	strb	r3, [r7, #7]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	71bb      	strb	r3, [r7, #6]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800ea72:	79fa      	ldrb	r2, [r7, #7]
 800ea74:	797b      	ldrb	r3, [r7, #5]
 800ea76:	4013      	ands	r3, r2
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	f04f 0300 	mov.w	r3, #0
 800ea80:	79b9      	ldrb	r1, [r7, #6]
 800ea82:	f1c1 0620 	rsb	r6, r1, #32
 800ea86:	f1a1 0020 	sub.w	r0, r1, #32
 800ea8a:	fa22 f401 	lsr.w	r4, r2, r1
 800ea8e:	fa03 f606 	lsl.w	r6, r3, r6
 800ea92:	4334      	orrs	r4, r6
 800ea94:	fa23 f000 	lsr.w	r0, r3, r0
 800ea98:	4304      	orrs	r4, r0
 800ea9a:	fa23 f501 	lsr.w	r5, r3, r1
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
}
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bcf0      	pop	{r4, r5, r6, r7}
 800eaac:	4770      	bx	lr

0800eaae <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b07      	cmp	r3, #7
 800eabe:	d802      	bhi.n	800eac6 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 800eac0:	f06f 0315 	mvn.w	r3, #21
 800eac4:	e081      	b.n	800ebca <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	3301      	adds	r3, #1
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2201      	movs	r2, #1
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff ff95 	bl	800ea00 <unpack_right_shift_u8>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	3301      	adds	r3, #1
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2202      	movs	r2, #2
 800eae6:	2101      	movs	r1, #1
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff ff89 	bl	800ea00 <unpack_right_shift_u8>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2204      	movs	r2, #4
 800eafe:	2102      	movs	r1, #2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff ff7d 	bl	800ea00 <unpack_right_shift_u8>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	3301      	adds	r3, #1
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2208      	movs	r2, #8
 800eb16:	2103      	movs	r1, #3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff71 	bl	800ea00 <unpack_right_shift_u8>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3302      	adds	r3, #2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	22ff      	movs	r2, #255	; 0xff
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff ff7d 	bl	800ea30 <unpack_right_shift_u16>
 800eb36:	4603      	mov	r3, r0
 800eb38:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	3303      	adds	r3, #3
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	22ff      	movs	r2, #255	; 0xff
 800eb42:	2108      	movs	r1, #8
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff1c 	bl	800e982 <unpack_left_shift_u16>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	8afb      	ldrh	r3, [r7, #22]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800eb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	22ff      	movs	r2, #255	; 0xff
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ff62 	bl	800ea30 <unpack_right_shift_u16>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	3305      	adds	r3, #5
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	22ff      	movs	r2, #255	; 0xff
 800eb78:	2108      	movs	r1, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ff01 	bl	800e982 <unpack_left_shift_u16>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	8abb      	ldrh	r3, [r7, #20]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 800eb8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	3306      	adds	r3, #6
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	22ff      	movs	r2, #255	; 0xff
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff ff47 	bl	800ea30 <unpack_right_shift_u16>
 800eba2:	4603      	mov	r3, r0
 800eba4:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	3307      	adds	r3, #7
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	22ff      	movs	r2, #255	; 0xff
 800ebae:	2108      	movs	r1, #8
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff fee6 	bl	800e982 <unpack_left_shift_u16>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461a      	mov	r2, r3
 800ebba:	8a7b      	ldrh	r3, [r7, #18]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 800ebc0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	811a      	strh	r2, [r3, #8]

    return (0);
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_inverter_on_decode(uint8_t value)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	4603      	mov	r3, r0
 800ebda:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f1 fc82 	bl	80004e8 <__aeabi_ui2d>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	ec43 2b17 	vmov	d7, r2, r3
}
 800ebec:	eeb0 0a47 	vmov.f32	s0, s14
 800ebf0:	eef0 0a67 	vmov.f32	s1, s15
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_dc_on_decode(uint8_t value)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	4603      	mov	r3, r0
 800ec02:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f1 fc6e 	bl	80004e8 <__aeabi_ui2d>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec14:	eeb0 0a47 	vmov.f32	s0, s14
 800ec18:	eef0 0a67 	vmov.f32	s1, s15
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_enable_decode(uint8_t value)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	4603      	mov	r3, r0
 800ec2a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f1 fc5a 	bl	80004e8 <__aeabi_ui2d>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ec40:	eef0 0a67 	vmov.f32	s1, s15
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>:
{
    return (uint8_t)(value);
}

double can2_amk1_setpoints_1_amk1_control_error_reset_decode(uint8_t value)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	4603      	mov	r3, r0
 800ec52:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f1 fc46 	bl	80004e8 <__aeabi_ui2d>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec64:	eeb0 0a47 	vmov.f32	s0, s14
 800ec68:	eef0 0a67 	vmov.f32	s1, s15
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_target_velocity_decode(int16_t value)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	4603      	mov	r3, r0
 800ec7a:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ec7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f1 fc41 	bl	8000508 <__aeabi_i2d>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	ec43 2b17 	vmov	d7, r2, r3
}
 800ec8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ec92:	eef0 0a67 	vmov.f32	s1, s15
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(int16_t value)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800eca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f1 fc2c 	bl	8000508 <__aeabi_i2d>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	ec43 2b17 	vmov	d7, r2, r3
}
 800ecb8:	eeb0 0a47 	vmov.f32	s0, s14
 800ecbc:	eef0 0a67 	vmov.f32	s1, s15
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>:
{
    return (int16_t)(value);
}

double can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(int16_t value)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	4603      	mov	r3, r0
 800ecce:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800ecd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f1 fc17 	bl	8000508 <__aeabi_i2d>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	ec43 2b17 	vmov	d7, r2, r3
}
 800ece2:	eeb0 0a47 	vmov.f32	s0, s14
 800ece6:	eef0 0a67 	vmov.f32	s1, s15
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <can2_ivt_msg_result_i_pack>:

int can2_ivt_msg_result_i_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_i_t *src_p,
    size_t size)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
    uint64_t i_ts;

    if (size < 6u) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b05      	cmp	r3, #5
 800ed00:	d802      	bhi.n	800ed08 <can2_ivt_msg_result_i_pack+0x18>
        return (-EINVAL);
 800ed02:	f06f 0315 	mvn.w	r3, #21
 800ed06:	e068      	b.n	800edda <can2_ivt_msg_result_i_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800ed08:	2206      	movs	r2, #6
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f01f fe0f 	bl	802e930 <memset>

    i_ts = (uint64_t)src_p->i_ts;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(i_ts, 40u, 0xffu);
 800ed1c:	23ff      	movs	r3, #255	; 0xff
 800ed1e:	2228      	movs	r2, #40	; 0x28
 800ed20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed24:	f7ff fe08 	bl	800e938 <pack_right_shift_u64>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(i_ts, 32u, 0xffu);
 800ed38:	23ff      	movs	r3, #255	; 0xff
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed40:	f7ff fdfa 	bl	800e938 <pack_right_shift_u64>
 800ed44:	4603      	mov	r3, r0
 800ed46:	4619      	mov	r1, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3301      	adds	r3, #1
 800ed52:	430a      	orrs	r2, r1
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(i_ts, 24u, 0xffu);
 800ed58:	23ff      	movs	r3, #255	; 0xff
 800ed5a:	2218      	movs	r2, #24
 800ed5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed60:	f7ff fdea 	bl	800e938 <pack_right_shift_u64>
 800ed64:	4603      	mov	r3, r0
 800ed66:	4619      	mov	r1, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3302      	adds	r3, #2
 800ed72:	430a      	orrs	r2, r1
 800ed74:	b2d2      	uxtb	r2, r2
 800ed76:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(i_ts, 16u, 0xffu);
 800ed78:	23ff      	movs	r3, #255	; 0xff
 800ed7a:	2210      	movs	r2, #16
 800ed7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed80:	f7ff fdda 	bl	800e938 <pack_right_shift_u64>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4619      	mov	r1, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3303      	adds	r3, #3
 800ed8c:	781a      	ldrb	r2, [r3, #0]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3303      	adds	r3, #3
 800ed92:	430a      	orrs	r2, r1
 800ed94:	b2d2      	uxtb	r2, r2
 800ed96:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(i_ts, 8u, 0xffu);
 800ed98:	23ff      	movs	r3, #255	; 0xff
 800ed9a:	2208      	movs	r2, #8
 800ed9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eda0:	f7ff fdca 	bl	800e938 <pack_right_shift_u64>
 800eda4:	4603      	mov	r3, r0
 800eda6:	4619      	mov	r1, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	3304      	adds	r3, #4
 800edac:	781a      	ldrb	r2, [r3, #0]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3304      	adds	r3, #4
 800edb2:	430a      	orrs	r2, r1
 800edb4:	b2d2      	uxtb	r2, r2
 800edb6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(i_ts, 0u, 0xffu);
 800edb8:	23ff      	movs	r3, #255	; 0xff
 800edba:	2200      	movs	r2, #0
 800edbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800edc0:	f7ff fd7e 	bl	800e8c0 <pack_left_shift_u64>
 800edc4:	4603      	mov	r3, r0
 800edc6:	4619      	mov	r1, r3
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	3305      	adds	r3, #5
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3305      	adds	r3, #5
 800edd2:	430a      	orrs	r2, r1
 800edd4:	b2d2      	uxtb	r2, r2
 800edd6:	701a      	strb	r2, [r3, #0]

    return (6);
 800edd8:	2306      	movs	r3, #6
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800ede4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ede8:	b08e      	sub	sp, #56	; 0x38
 800edea:	af00      	add	r7, sp, #0
 800edec:	62f8      	str	r0, [r7, #44]	; 0x2c
 800edee:	62b9      	str	r1, [r7, #40]	; 0x28
 800edf0:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2b05      	cmp	r3, #5
 800edf6:	d802      	bhi.n	800edfe <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 800edf8:	f06f 0315 	mvn.w	r3, #21
 800edfc:	e081      	b.n	800ef02 <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	22ff      	movs	r2, #255	; 0xff
 800ee04:	2128      	movs	r1, #40	; 0x28
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fdd3 	bl	800e9b2 <unpack_left_shift_u64>
 800ee0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	3301      	adds	r3, #1
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	22ff      	movs	r2, #255	; 0xff
 800ee18:	2120      	movs	r1, #32
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fdc9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee24:	ea42 0400 	orr.w	r4, r2, r0
 800ee28:	ea43 0501 	orr.w	r5, r3, r1
 800ee2c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	3302      	adds	r3, #2
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	22ff      	movs	r2, #255	; 0xff
 800ee38:	2118      	movs	r1, #24
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff fdb9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee44:	ea42 0800 	orr.w	r8, r2, r0
 800ee48:	ea43 0901 	orr.w	r9, r3, r1
 800ee4c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	3303      	adds	r3, #3
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	22ff      	movs	r2, #255	; 0xff
 800ee58:	2110      	movs	r1, #16
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fda9 	bl	800e9b2 <unpack_left_shift_u64>
 800ee60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee64:	ea42 0400 	orr.w	r4, r2, r0
 800ee68:	613c      	str	r4, [r7, #16]
 800ee6a:	430b      	orrs	r3, r1
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ee72:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	3304      	adds	r3, #4
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	22ff      	movs	r2, #255	; 0xff
 800ee7e:	2108      	movs	r1, #8
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fd96 	bl	800e9b2 <unpack_left_shift_u64>
 800ee86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee8a:	ea42 0400 	orr.w	r4, r2, r0
 800ee8e:	60bc      	str	r4, [r7, #8]
 800ee90:	430b      	orrs	r3, r1
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ee98:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	3305      	adds	r3, #5
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	22ff      	movs	r2, #255	; 0xff
 800eea4:	2100      	movs	r1, #0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fdda 	bl	800ea60 <unpack_right_shift_u64>
 800eeac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eeb0:	ea42 0400 	orr.w	r4, r2, r0
 800eeb4:	603c      	str	r4, [r7, #0]
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eebe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 800eec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eec6:	f04f 0000 	mov.w	r0, #0
 800eeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eece:	ea02 0400 	and.w	r4, r2, r0
 800eed2:	61bc      	str	r4, [r7, #24]
 800eed4:	400b      	ands	r3, r1
 800eed6:	61fb      	str	r3, [r7, #28]
 800eed8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800eedc:	4323      	orrs	r3, r4
 800eede:	d00a      	beq.n	800eef6 <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 800eee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eee4:	f04f 0000 	mov.w	r0, #0
 800eee8:	4908      	ldr	r1, [pc, #32]	; (800ef0c <can2_ivt_msg_result_i_unpack+0x128>)
 800eeea:	ea42 0a00 	orr.w	sl, r2, r0
 800eeee:	ea43 0b01 	orr.w	fp, r3, r1
 800eef2:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 800eef6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eefa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefc:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3738      	adds	r7, #56	; 0x38
 800ef06:	46bd      	mov	sp, r7
 800ef08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef0c:	ffff0000 	.word	0xffff0000

0800ef10 <can2_ivt_msg_result_i_i_ts_encode>:

int64_t can2_ivt_msg_result_i_i_ts_encode(double value)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800ef1a:	a30b      	add	r3, pc, #44	; (adr r3, 800ef48 <can2_ivt_msg_result_i_i_ts_encode+0x38>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef24:	f7f1 fc84 	bl	8000830 <__aeabi_ddiv>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f7f1 feb4 	bl	8000c9c <__aeabi_d2lz>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
}
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef4c:	3f50624d 	.word	0x3f50624d

0800ef50 <can2_ivt_msg_result_i_i_ts_decode>:

double can2_ivt_msg_result_i_i_ts_decode(int64_t value)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800ef5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef5e:	f7f1 fb0f 	bl	8000580 <__aeabi_l2d>
 800ef62:	a309      	add	r3, pc, #36	; (adr r3, 800ef88 <can2_ivt_msg_result_i_i_ts_decode+0x38>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f7f1 fb38 	bl	80005dc <__aeabi_dmul>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	ec43 2b17 	vmov	d7, r2, r3
}
 800ef74:	eeb0 0a47 	vmov.f32	s0, s14
 800ef78:	eef0 0a67 	vmov.f32	s1, s15
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef8c:	3f50624d 	.word	0x3f50624d

0800ef90 <can2_ivt_msg_result_u1_pack>:

int can2_ivt_msg_result_u1_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u1_t *src_p,
    size_t size)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    uint64_t u_cells;

    if (size < 6u) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b05      	cmp	r3, #5
 800efa0:	d802      	bhi.n	800efa8 <can2_ivt_msg_result_u1_pack+0x18>
        return (-EINVAL);
 800efa2:	f06f 0315 	mvn.w	r3, #21
 800efa6:	e068      	b.n	800f07a <can2_ivt_msg_result_u1_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800efa8:	2206      	movs	r2, #6
 800efaa:	2100      	movs	r1, #0
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f01f fcbf 	bl	802e930 <memset>

    u_cells = (uint64_t)src_p->u_cells;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_cells, 40u, 0xffu);
 800efbc:	23ff      	movs	r3, #255	; 0xff
 800efbe:	2228      	movs	r2, #40	; 0x28
 800efc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efc4:	f7ff fcb8 	bl	800e938 <pack_right_shift_u64>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_cells, 32u, 0xffu);
 800efd8:	23ff      	movs	r3, #255	; 0xff
 800efda:	2220      	movs	r2, #32
 800efdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efe0:	f7ff fcaa 	bl	800e938 <pack_right_shift_u64>
 800efe4:	4603      	mov	r3, r0
 800efe6:	4619      	mov	r1, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3301      	adds	r3, #1
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3301      	adds	r3, #1
 800eff2:	430a      	orrs	r2, r1
 800eff4:	b2d2      	uxtb	r2, r2
 800eff6:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_cells, 24u, 0xffu);
 800eff8:	23ff      	movs	r3, #255	; 0xff
 800effa:	2218      	movs	r2, #24
 800effc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f000:	f7ff fc9a 	bl	800e938 <pack_right_shift_u64>
 800f004:	4603      	mov	r3, r0
 800f006:	4619      	mov	r1, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3302      	adds	r3, #2
 800f00c:	781a      	ldrb	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3302      	adds	r3, #2
 800f012:	430a      	orrs	r2, r1
 800f014:	b2d2      	uxtb	r2, r2
 800f016:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_cells, 16u, 0xffu);
 800f018:	23ff      	movs	r3, #255	; 0xff
 800f01a:	2210      	movs	r2, #16
 800f01c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f020:	f7ff fc8a 	bl	800e938 <pack_right_shift_u64>
 800f024:	4603      	mov	r3, r0
 800f026:	4619      	mov	r1, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3303      	adds	r3, #3
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3303      	adds	r3, #3
 800f032:	430a      	orrs	r2, r1
 800f034:	b2d2      	uxtb	r2, r2
 800f036:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_cells, 8u, 0xffu);
 800f038:	23ff      	movs	r3, #255	; 0xff
 800f03a:	2208      	movs	r2, #8
 800f03c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f040:	f7ff fc7a 	bl	800e938 <pack_right_shift_u64>
 800f044:	4603      	mov	r3, r0
 800f046:	4619      	mov	r1, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3304      	adds	r3, #4
 800f052:	430a      	orrs	r2, r1
 800f054:	b2d2      	uxtb	r2, r2
 800f056:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_cells, 0u, 0xffu);
 800f058:	23ff      	movs	r3, #255	; 0xff
 800f05a:	2200      	movs	r2, #0
 800f05c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f060:	f7ff fc2e 	bl	800e8c0 <pack_left_shift_u64>
 800f064:	4603      	mov	r3, r0
 800f066:	4619      	mov	r1, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3305      	adds	r3, #5
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3305      	adds	r3, #5
 800f072:	430a      	orrs	r2, r1
 800f074:	b2d2      	uxtb	r2, r2
 800f076:	701a      	strb	r2, [r3, #0]

    return (6);
 800f078:	2306      	movs	r3, #6
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f088:	b08e      	sub	sp, #56	; 0x38
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f08e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f090:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 800f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f094:	2b05      	cmp	r3, #5
 800f096:	d802      	bhi.n	800f09e <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800f098:	f06f 0315 	mvn.w	r3, #21
 800f09c:	e081      	b.n	800f1a2 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	22ff      	movs	r2, #255	; 0xff
 800f0a4:	2128      	movs	r1, #40	; 0x28
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc83 	bl	800e9b2 <unpack_left_shift_u64>
 800f0ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	22ff      	movs	r2, #255	; 0xff
 800f0b8:	2120      	movs	r1, #32
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fc79 	bl	800e9b2 <unpack_left_shift_u64>
 800f0c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0c4:	ea42 0400 	orr.w	r4, r2, r0
 800f0c8:	ea43 0501 	orr.w	r5, r3, r1
 800f0cc:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	3302      	adds	r3, #2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	22ff      	movs	r2, #255	; 0xff
 800f0d8:	2118      	movs	r1, #24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fc69 	bl	800e9b2 <unpack_left_shift_u64>
 800f0e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0e4:	ea42 0800 	orr.w	r8, r2, r0
 800f0e8:	ea43 0901 	orr.w	r9, r3, r1
 800f0ec:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	3303      	adds	r3, #3
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	22ff      	movs	r2, #255	; 0xff
 800f0f8:	2110      	movs	r1, #16
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fc59 	bl	800e9b2 <unpack_left_shift_u64>
 800f100:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f104:	ea42 0400 	orr.w	r4, r2, r0
 800f108:	613c      	str	r4, [r7, #16]
 800f10a:	430b      	orrs	r3, r1
 800f10c:	617b      	str	r3, [r7, #20]
 800f10e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f112:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	3304      	adds	r3, #4
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	22ff      	movs	r2, #255	; 0xff
 800f11e:	2108      	movs	r1, #8
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc46 	bl	800e9b2 <unpack_left_shift_u64>
 800f126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f12a:	ea42 0400 	orr.w	r4, r2, r0
 800f12e:	60bc      	str	r4, [r7, #8]
 800f130:	430b      	orrs	r3, r1
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f138:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	3305      	adds	r3, #5
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	22ff      	movs	r2, #255	; 0xff
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff fc8a 	bl	800ea60 <unpack_right_shift_u64>
 800f14c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f150:	ea42 0400 	orr.w	r4, r2, r0
 800f154:	603c      	str	r4, [r7, #0]
 800f156:	430b      	orrs	r3, r1
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f15e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 800f162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f166:	f04f 0000 	mov.w	r0, #0
 800f16a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f16e:	ea02 0400 	and.w	r4, r2, r0
 800f172:	61bc      	str	r4, [r7, #24]
 800f174:	400b      	ands	r3, r1
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f17c:	4323      	orrs	r3, r4
 800f17e:	d00a      	beq.n	800f196 <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 800f180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f184:	f04f 0000 	mov.w	r0, #0
 800f188:	4908      	ldr	r1, [pc, #32]	; (800f1ac <can2_ivt_msg_result_u1_unpack+0x128>)
 800f18a:	ea42 0a00 	orr.w	sl, r2, r0
 800f18e:	ea43 0b01 	orr.w	fp, r3, r1
 800f192:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800f196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f19c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3738      	adds	r7, #56	; 0x38
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1ac:	ffff0000 	.word	0xffff0000

0800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>:

int64_t can2_ivt_msg_result_u1_u_cells_encode(double value)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f1ba:	a30b      	add	r3, pc, #44	; (adr r3, 800f1e8 <can2_ivt_msg_result_u1_u_cells_encode+0x38>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1c4:	f7f1 fb34 	bl	8000830 <__aeabi_ddiv>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	f7f1 fd64 	bl	8000c9c <__aeabi_d2lz>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
}
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4619      	mov	r1, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f1ec:	3f50624d 	.word	0x3f50624d

0800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>:

double can2_ivt_msg_result_u1_u_cells_decode(int64_t value)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f1fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f1fe:	f7f1 f9bf 	bl	8000580 <__aeabi_l2d>
 800f202:	a309      	add	r3, pc, #36	; (adr r3, 800f228 <can2_ivt_msg_result_u1_u_cells_decode+0x38>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f9e8 	bl	80005dc <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	ec43 2b17 	vmov	d7, r2, r3
}
 800f214:	eeb0 0a47 	vmov.f32	s0, s14
 800f218:	eef0 0a67 	vmov.f32	s1, s15
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	f3af 8000 	nop.w
 800f228:	d2f1a9fc 	.word	0xd2f1a9fc
 800f22c:	3f50624d 	.word	0x3f50624d

0800f230 <can2_ivt_msg_result_u3_pack>:

int can2_ivt_msg_result_u3_pack(
    uint8_t *dst_p,
    const struct can2_ivt_msg_result_u3_t *src_p,
    size_t size)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
    uint64_t u_vehicle;

    if (size < 6u) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b05      	cmp	r3, #5
 800f240:	d802      	bhi.n	800f248 <can2_ivt_msg_result_u3_pack+0x18>
        return (-EINVAL);
 800f242:	f06f 0315 	mvn.w	r3, #21
 800f246:	e068      	b.n	800f31a <can2_ivt_msg_result_u3_pack+0xea>
    }

    memset(&dst_p[0], 0, 6);
 800f248:	2206      	movs	r2, #6
 800f24a:	2100      	movs	r1, #0
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f01f fb6f 	bl	802e930 <memset>

    u_vehicle = (uint64_t)src_p->u_vehicle;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dst_p[0] |= pack_right_shift_u64(u_vehicle, 40u, 0xffu);
 800f25c:	23ff      	movs	r3, #255	; 0xff
 800f25e:	2228      	movs	r2, #40	; 0x28
 800f260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f264:	f7ff fb68 	bl	800e938 <pack_right_shift_u64>
 800f268:	4603      	mov	r3, r0
 800f26a:	461a      	mov	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	4313      	orrs	r3, r2
 800f272:	b2da      	uxtb	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u64(u_vehicle, 32u, 0xffu);
 800f278:	23ff      	movs	r3, #255	; 0xff
 800f27a:	2220      	movs	r2, #32
 800f27c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f280:	f7ff fb5a 	bl	800e938 <pack_right_shift_u64>
 800f284:	4603      	mov	r3, r0
 800f286:	4619      	mov	r1, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3301      	adds	r3, #1
 800f292:	430a      	orrs	r2, r1
 800f294:	b2d2      	uxtb	r2, r2
 800f296:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u64(u_vehicle, 24u, 0xffu);
 800f298:	23ff      	movs	r3, #255	; 0xff
 800f29a:	2218      	movs	r2, #24
 800f29c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2a0:	f7ff fb4a 	bl	800e938 <pack_right_shift_u64>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	b2d2      	uxtb	r2, r2
 800f2b6:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u64(u_vehicle, 16u, 0xffu);
 800f2b8:	23ff      	movs	r3, #255	; 0xff
 800f2ba:	2210      	movs	r2, #16
 800f2bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2c0:	f7ff fb3a 	bl	800e938 <pack_right_shift_u64>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	3303      	adds	r3, #3
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3303      	adds	r3, #3
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u64(u_vehicle, 8u, 0xffu);
 800f2d8:	23ff      	movs	r3, #255	; 0xff
 800f2da:	2208      	movs	r2, #8
 800f2dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f2e0:	f7ff fb2a 	bl	800e938 <pack_right_shift_u64>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	781a      	ldrb	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	430a      	orrs	r2, r1
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_left_shift_u64(u_vehicle, 0u, 0xffu);
 800f2f8:	23ff      	movs	r3, #255	; 0xff
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f300:	f7ff fade 	bl	800e8c0 <pack_left_shift_u64>
 800f304:	4603      	mov	r3, r0
 800f306:	4619      	mov	r1, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3305      	adds	r3, #5
 800f30c:	781a      	ldrb	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3305      	adds	r3, #5
 800f312:	430a      	orrs	r2, r1
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]

    return (6);
 800f318:	2306      	movs	r3, #6
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f328:	b08e      	sub	sp, #56	; 0x38
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f32e:	62b9      	str	r1, [r7, #40]	; 0x28
 800f330:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	2b05      	cmp	r3, #5
 800f336:	d802      	bhi.n	800f33e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 800f338:	f06f 0315 	mvn.w	r3, #21
 800f33c:	e081      	b.n	800f442 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	22ff      	movs	r2, #255	; 0xff
 800f344:	2128      	movs	r1, #40	; 0x28
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff fb33 	bl	800e9b2 <unpack_left_shift_u64>
 800f34c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	3301      	adds	r3, #1
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	22ff      	movs	r2, #255	; 0xff
 800f358:	2120      	movs	r1, #32
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff fb29 	bl	800e9b2 <unpack_left_shift_u64>
 800f360:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f364:	ea42 0400 	orr.w	r4, r2, r0
 800f368:	ea43 0501 	orr.w	r5, r3, r1
 800f36c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	3302      	adds	r3, #2
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	22ff      	movs	r2, #255	; 0xff
 800f378:	2118      	movs	r1, #24
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff fb19 	bl	800e9b2 <unpack_left_shift_u64>
 800f380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f384:	ea42 0800 	orr.w	r8, r2, r0
 800f388:	ea43 0901 	orr.w	r9, r3, r1
 800f38c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	3303      	adds	r3, #3
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	22ff      	movs	r2, #255	; 0xff
 800f398:	2110      	movs	r1, #16
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fb09 	bl	800e9b2 <unpack_left_shift_u64>
 800f3a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3a4:	ea42 0400 	orr.w	r4, r2, r0
 800f3a8:	613c      	str	r4, [r7, #16]
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	617b      	str	r3, [r7, #20]
 800f3ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f3b2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	22ff      	movs	r2, #255	; 0xff
 800f3be:	2108      	movs	r1, #8
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff faf6 	bl	800e9b2 <unpack_left_shift_u64>
 800f3c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3ca:	ea42 0400 	orr.w	r4, r2, r0
 800f3ce:	60bc      	str	r4, [r7, #8]
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f3d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	3305      	adds	r3, #5
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	22ff      	movs	r2, #255	; 0xff
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff fb3a 	bl	800ea60 <unpack_right_shift_u64>
 800f3ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3f0:	ea42 0400 	orr.w	r4, r2, r0
 800f3f4:	603c      	str	r4, [r7, #0]
 800f3f6:	430b      	orrs	r3, r1
 800f3f8:	607b      	str	r3, [r7, #4]
 800f3fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f3fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 800f402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f406:	f04f 0000 	mov.w	r0, #0
 800f40a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f40e:	ea02 0400 	and.w	r4, r2, r0
 800f412:	61bc      	str	r4, [r7, #24]
 800f414:	400b      	ands	r3, r1
 800f416:	61fb      	str	r3, [r7, #28]
 800f418:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f41c:	4323      	orrs	r3, r4
 800f41e:	d00a      	beq.n	800f436 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 800f420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f424:	f04f 0000 	mov.w	r0, #0
 800f428:	4908      	ldr	r1, [pc, #32]	; (800f44c <can2_ivt_msg_result_u3_unpack+0x128>)
 800f42a:	ea42 0a00 	orr.w	sl, r2, r0
 800f42e:	ea43 0b01 	orr.w	fp, r3, r1
 800f432:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 800f436:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f43c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3738      	adds	r7, #56	; 0x38
 800f446:	46bd      	mov	sp, r7
 800f448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f44c:	ffff0000 	.word	0xffff0000

0800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>:

int64_t can2_ivt_msg_result_u3_u_vehicle_encode(double value)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	ed87 0b00 	vstr	d0, [r7]
    return (int64_t)(value / 0.001);
 800f45a:	a30b      	add	r3, pc, #44	; (adr r3, 800f488 <can2_ivt_msg_result_u3_u_vehicle_encode+0x38>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f464:	f7f1 f9e4 	bl	8000830 <__aeabi_ddiv>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4610      	mov	r0, r2
 800f46e:	4619      	mov	r1, r3
 800f470:	f7f1 fc14 	bl	8000c9c <__aeabi_d2lz>
 800f474:	4602      	mov	r2, r0
 800f476:	460b      	mov	r3, r1
}
 800f478:	4610      	mov	r0, r2
 800f47a:	4619      	mov	r1, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	d2f1a9fc 	.word	0xd2f1a9fc
 800f48c:	3f50624d 	.word	0x3f50624d

0800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>:

double can2_ivt_msg_result_u3_u_vehicle_decode(int64_t value)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	e9c7 0100 	strd	r0, r1, [r7]
    return ((double)value * 0.001);
 800f49a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f49e:	f7f1 f86f 	bl	8000580 <__aeabi_l2d>
 800f4a2:	a309      	add	r3, pc, #36	; (adr r3, 800f4c8 <can2_ivt_msg_result_u3_u_vehicle_decode+0x38>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f898 	bl	80005dc <__aeabi_dmul>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	ec43 2b17 	vmov	d7, r2, r3
}
 800f4b4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4b8:	eef0 0a67 	vmov.f32	s1, s15
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	f3af 8000 	nop.w
 800f4c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800f4cc:	3f50624d 	.word	0x3f50624d

0800f4d0 <can2_charger_config_pack>:

int can2_charger_config_pack(
    uint8_t *dst_p,
    const struct can2_charger_config_t *src_p,
    size_t size)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b03      	cmp	r3, #3
 800f4e0:	d802      	bhi.n	800f4e8 <can2_charger_config_pack+0x18>
        return (-EINVAL);
 800f4e2:	f06f 0315 	mvn.w	r3, #21
 800f4e6:	e0b5      	b.n	800f654 <can2_charger_config_pack+0x184>
    }

    memset(&dst_p[0], 0, 4);
 800f4e8:	2204      	movs	r2, #4
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f01f fa1f 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->set_mux, 0u, 0xffu);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff f9b2 	bl	800e864 <pack_left_shift_u8>
 800f500:	4603      	mov	r3, r0
 800f502:	461a      	mov	r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	4313      	orrs	r3, r2
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	701a      	strb	r2, [r3, #0]

    switch (src_p->set_mux) {
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	3b40      	subs	r3, #64	; 0x40
 800f516:	2b04      	cmp	r3, #4
 800f518:	f200 809a 	bhi.w	800f650 <can2_charger_config_pack+0x180>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <can2_charger_config_pack+0x54>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f539 	.word	0x0800f539
 800f528:	0800f57f 	.word	0x0800f57f
 800f52c:	0800f5c5 	.word	0x0800f5c5
 800f530:	0800f651 	.word	0x0800f651
 800f534:	0800f60b 	.word	0x0800f60b

    case 64:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_voltage_limit, 8u, 0xffu);
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	885b      	ldrh	r3, [r3, #2]
 800f53c:	22ff      	movs	r2, #255	; 0xff
 800f53e:	2108      	movs	r1, #8
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff f9e2 	bl	800e90a <pack_right_shift_u16>
 800f546:	4603      	mov	r3, r0
 800f548:	4619      	mov	r1, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3301      	adds	r3, #1
 800f54e:	781a      	ldrb	r2, [r3, #0]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	430a      	orrs	r2, r1
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_voltage_limit, 0u, 0xffu);
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	885b      	ldrh	r3, [r3, #2]
 800f55e:	22ff      	movs	r2, #255	; 0xff
 800f560:	2100      	movs	r1, #0
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff f995 	bl	800e892 <pack_left_shift_u16>
 800f568:	4603      	mov	r3, r0
 800f56a:	4619      	mov	r1, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3302      	adds	r3, #2
 800f570:	781a      	ldrb	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3302      	adds	r3, #2
 800f576:	430a      	orrs	r2, r1
 800f578:	b2d2      	uxtb	r2, r2
 800f57a:	701a      	strb	r2, [r3, #0]
        break;
 800f57c:	e069      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 65:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_current_limit, 8u, 0xffu);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	889b      	ldrh	r3, [r3, #4]
 800f582:	22ff      	movs	r2, #255	; 0xff
 800f584:	2108      	movs	r1, #8
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff f9bf 	bl	800e90a <pack_right_shift_u16>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4619      	mov	r1, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	3301      	adds	r3, #1
 800f594:	781a      	ldrb	r2, [r3, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3301      	adds	r3, #1
 800f59a:	430a      	orrs	r2, r1
 800f59c:	b2d2      	uxtb	r2, r2
 800f59e:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_current_limit, 0u, 0xffu);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	889b      	ldrh	r3, [r3, #4]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff f972 	bl	800e892 <pack_left_shift_u16>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	b2d2      	uxtb	r2, r2
 800f5c0:	701a      	strb	r2, [r3, #0]
        break;
 800f5c2:	e046      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 66:
        dst_p[1] |= pack_right_shift_u16(src_p->msg_set_power_limit, 8u, 0xffu);
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	88db      	ldrh	r3, [r3, #6]
 800f5c8:	22ff      	movs	r2, #255	; 0xff
 800f5ca:	2108      	movs	r1, #8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff f99c 	bl	800e90a <pack_right_shift_u16>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	b2d2      	uxtb	r2, r2
 800f5e4:	701a      	strb	r2, [r3, #0]
        dst_p[2] |= pack_left_shift_u16(src_p->msg_set_power_limit, 0u, 0xffu);
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	88db      	ldrh	r3, [r3, #6]
 800f5ea:	22ff      	movs	r2, #255	; 0xff
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff f94f 	bl	800e892 <pack_left_shift_u16>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3302      	adds	r3, #2
 800f602:	430a      	orrs	r2, r1
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	701a      	strb	r2, [r3, #0]
        break;
 800f608:	e023      	b.n	800f652 <can2_charger_config_pack+0x182>

    case 68:
        dst_p[2] |= pack_left_shift_u8(src_p->msg_set_enabled, 0u, 0xffu);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7a1b      	ldrb	r3, [r3, #8]
 800f60e:	22ff      	movs	r2, #255	; 0xff
 800f610:	2100      	movs	r1, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f7ff f926 	bl	800e864 <pack_left_shift_u8>
 800f618:	4603      	mov	r3, r0
 800f61a:	4619      	mov	r1, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3302      	adds	r3, #2
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3302      	adds	r3, #2
 800f626:	430a      	orrs	r2, r1
 800f628:	b2d2      	uxtb	r2, r2
 800f62a:	701a      	strb	r2, [r3, #0]
        dst_p[3] |= pack_left_shift_u8(src_p->msg_set_time_out, 0u, 0xffu);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	7a5b      	ldrb	r3, [r3, #9]
 800f630:	22ff      	movs	r2, #255	; 0xff
 800f632:	2100      	movs	r1, #0
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff f915 	bl	800e864 <pack_left_shift_u8>
 800f63a:	4603      	mov	r3, r0
 800f63c:	4619      	mov	r1, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3303      	adds	r3, #3
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3303      	adds	r3, #3
 800f648:	430a      	orrs	r2, r1
 800f64a:	b2d2      	uxtb	r2, r2
 800f64c:	701a      	strb	r2, [r3, #0]
        break;
 800f64e:	e000      	b.n	800f652 <can2_charger_config_pack+0x182>

    default:
        break;
 800f650:	bf00      	nop
    }

    return (4);
 800f652:	2304      	movs	r3, #4
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <can2_charger_config_unpack>:

int can2_charger_config_unpack(
    struct can2_charger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
    if (size < 4u) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d802      	bhi.n	800f674 <can2_charger_config_unpack+0x18>
        return (-EINVAL);
 800f66e:	f06f 0315 	mvn.w	r3, #21
 800f672:	e08f      	b.n	800f794 <can2_charger_config_unpack+0x138>
    }

    dst_p->set_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	22ff      	movs	r2, #255	; 0xff
 800f67a:	2100      	movs	r1, #0
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff f9bf 	bl	800ea00 <unpack_right_shift_u8>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	701a      	strb	r2, [r3, #0]

    switch (dst_p->set_mux) {
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	3b40      	subs	r3, #64	; 0x40
 800f690:	2b04      	cmp	r3, #4
 800f692:	d87d      	bhi.n	800f790 <can2_charger_config_unpack+0x134>
 800f694:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <can2_charger_config_unpack+0x40>)
 800f696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69a:	bf00      	nop
 800f69c:	0800f6b1 	.word	0x0800f6b1
 800f6a0:	0800f6eb 	.word	0x0800f6eb
 800f6a4:	0800f725 	.word	0x0800f725
 800f6a8:	0800f791 	.word	0x0800f791
 800f6ac:	0800f75f 	.word	0x0800f75f

    case 64:
        dst_p->msg_set_voltage_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	22ff      	movs	r2, #255	; 0xff
 800f6b8:	2108      	movs	r1, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff f961 	bl	800e982 <unpack_left_shift_u16>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	805a      	strh	r2, [r3, #2]
        dst_p->msg_set_voltage_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	22ff      	movs	r2, #255	; 0xff
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff f9ac 	bl	800ea30 <unpack_right_shift_u16>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	885b      	ldrh	r3, [r3, #2]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	805a      	strh	r2, [r3, #2]
        break;
 800f6e8:	e053      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 65:
        dst_p->msg_set_current_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	22ff      	movs	r2, #255	; 0xff
 800f6f2:	2108      	movs	r1, #8
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff f944 	bl	800e982 <unpack_left_shift_u16>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	809a      	strh	r2, [r3, #4]
        dst_p->msg_set_current_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	3302      	adds	r3, #2
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	22ff      	movs	r2, #255	; 0xff
 800f70a:	2100      	movs	r1, #0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff f98f 	bl	800ea30 <unpack_right_shift_u16>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	889b      	ldrh	r3, [r3, #4]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	809a      	strh	r2, [r3, #4]
        break;
 800f722:	e036      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 66:
        dst_p->msg_set_power_limit = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	3301      	adds	r3, #1
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	22ff      	movs	r2, #255	; 0xff
 800f72c:	2108      	movs	r1, #8
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff f927 	bl	800e982 <unpack_left_shift_u16>
 800f734:	4603      	mov	r3, r0
 800f736:	461a      	mov	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	80da      	strh	r2, [r3, #6]
        dst_p->msg_set_power_limit |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3302      	adds	r3, #2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	22ff      	movs	r2, #255	; 0xff
 800f744:	2100      	movs	r1, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff f972 	bl	800ea30 <unpack_right_shift_u16>
 800f74c:	4603      	mov	r3, r0
 800f74e:	461a      	mov	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	88db      	ldrh	r3, [r3, #6]
 800f754:	4313      	orrs	r3, r2
 800f756:	b29a      	uxth	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	80da      	strh	r2, [r3, #6]
        break;
 800f75c:	e019      	b.n	800f792 <can2_charger_config_unpack+0x136>

    case 68:
        dst_p->msg_set_enabled = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3302      	adds	r3, #2
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	2100      	movs	r1, #0
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff f949 	bl	800ea00 <unpack_right_shift_u8>
 800f76e:	4603      	mov	r3, r0
 800f770:	461a      	mov	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	721a      	strb	r2, [r3, #8]
        dst_p->msg_set_time_out = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	3303      	adds	r3, #3
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	22ff      	movs	r2, #255	; 0xff
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff f93d 	bl	800ea00 <unpack_right_shift_u8>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	725a      	strb	r2, [r3, #9]
        break;
 800f78e:	e000      	b.n	800f792 <can2_charger_config_unpack+0x136>

    default:
        break;
 800f790:	bf00      	nop
    }

    return (0);
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <can2_charger_config_set_mux_encode>:

uint8_t can2_charger_config_set_mux_encode(double value)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f7a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7aa:	f7f1 f9ef 	bl	8000b8c <__aeabi_d2uiz>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <can2_charger_config_msg_set_voltage_limit_encode>:

    return (true);
}

uint16_t can2_charger_config_msg_set_voltage_limit_encode(double value)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f7c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7c8:	f7f1 f9e0 	bl	8000b8c <__aeabi_d2uiz>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	b29b      	uxth	r3, r3
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>:

double can2_charger_config_msg_set_voltage_limit_decode(uint16_t value)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f7e2:	88fb      	ldrh	r3, [r7, #6]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f0 fe7f 	bl	80004e8 <__aeabi_ui2d>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	ec43 2b17 	vmov	d7, r2, r3
}
 800f7f2:	eeb0 0a47 	vmov.f32	s0, s14
 800f7f6:	eef0 0a67 	vmov.f32	s1, s15
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <can2_charger_config_msg_set_current_limit_encode>:
{
    return (value <= 900u);
}

uint16_t can2_charger_config_msg_set_current_limit_encode(double value)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value / 0.1);
 800f80a:	a309      	add	r3, pc, #36	; (adr r3, 800f830 <can2_charger_config_msg_set_current_limit_encode+0x30>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f814:	f7f1 f80c 	bl	8000830 <__aeabi_ddiv>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4610      	mov	r0, r2
 800f81e:	4619      	mov	r1, r3
 800f820:	f7f1 f9b4 	bl	8000b8c <__aeabi_d2uiz>
 800f824:	4603      	mov	r3, r0
 800f826:	b29b      	uxth	r3, r3
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	9999999a 	.word	0x9999999a
 800f834:	3fb99999 	.word	0x3fb99999

0800f838 <can2_charger_config_msg_set_current_limit_decode>:

double can2_charger_config_msg_set_current_limit_decode(uint16_t value)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	80fb      	strh	r3, [r7, #6]
    return ((double)value * 0.1);
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	4618      	mov	r0, r3
 800f846:	f7f0 fe4f 	bl	80004e8 <__aeabi_ui2d>
 800f84a:	a309      	add	r3, pc, #36	; (adr r3, 800f870 <can2_charger_config_msg_set_current_limit_decode+0x38>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 fec4 	bl	80005dc <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	ec43 2b17 	vmov	d7, r2, r3
}
 800f85c:	eeb0 0a47 	vmov.f32	s0, s14
 800f860:	eef0 0a67 	vmov.f32	s1, s15
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	f3af 8000 	nop.w
 800f870:	9999999a 	.word	0x9999999a
 800f874:	3fb99999 	.word	0x3fb99999

0800f878 <can2_charger_config_msg_set_power_limit_encode>:
{
    return (value <= 133u);
}

uint16_t can2_charger_config_msg_set_power_limit_encode(double value)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	ed87 0b00 	vstr	d0, [r7]
    return (uint16_t)(value);
 800f882:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f886:	f7f1 f981 	bl	8000b8c <__aeabi_d2uiz>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b29b      	uxth	r3, r3
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <can2_charger_config_msg_set_power_limit_decode>:

double can2_charger_config_msg_set_power_limit_decode(uint16_t value)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b082      	sub	sp, #8
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	4603      	mov	r3, r0
 800f89e:	80fb      	strh	r3, [r7, #6]
    return ((double)value);
 800f8a0:	88fb      	ldrh	r3, [r7, #6]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f0 fe20 	bl	80004e8 <__aeabi_ui2d>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8b0:	eeb0 0a47 	vmov.f32	s0, s14
 800f8b4:	eef0 0a67 	vmov.f32	s1, s15
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <can2_charger_config_msg_set_enabled_encode>:
{
    return (value <= 2559u);
}

uint8_t can2_charger_config_msg_set_enabled_encode(double value)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f8c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8cc:	f7f1 f95e 	bl	8000b8c <__aeabi_d2uiz>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	b2db      	uxtb	r3, r3
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <can2_charger_config_msg_set_enabled_decode>:

double can2_charger_config_msg_set_enabled_decode(uint8_t value)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f0 fdfd 	bl	80004e8 <__aeabi_ui2d>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8f6:	eeb0 0a47 	vmov.f32	s0, s14
 800f8fa:	eef0 0a67 	vmov.f32	s1, s15
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <can2_charger_config_msg_set_time_out_encode>:
{
    return (value <= 1u);
}

uint8_t can2_charger_config_msg_set_time_out_encode(double value)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f90e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f912:	f7f1 f93b 	bl	8000b8c <__aeabi_d2uiz>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <can2_charger_config_msg_set_time_out_decode>:

double can2_charger_config_msg_set_time_out_decode(uint8_t value)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b082      	sub	sp, #8
 800f926:	af00      	add	r7, sp, #0
 800f928:	4603      	mov	r3, r0
 800f92a:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f0 fdda 	bl	80004e8 <__aeabi_ui2d>
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	ec43 2b17 	vmov	d7, r2, r3
}
 800f93c:	eeb0 0a47 	vmov.f32	s0, s14
 800f940:	eef0 0a67 	vmov.f32	s1, s15
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <can2_cc_status_pack>:

int can2_cc_status_pack(
    uint8_t *dst_p,
    const struct can2_cc_status_t *src_p,
    size_t size)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d102      	bne.n	800f962 <can2_cc_status_pack+0x18>
        return (-EINVAL);
 800f95c:	f06f 0315 	mvn.w	r3, #21
 800f960:	e014      	b.n	800f98c <can2_cc_status_pack+0x42>
    }

    memset(&dst_p[0], 0, 1);
 800f962:	2201      	movs	r2, #1
 800f964:	2100      	movs	r1, #0
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f01e ffe2 	bl	802e930 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->enable_ams_charging, 0u, 0x01u);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2201      	movs	r2, #1
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe ff75 	bl	800e864 <pack_left_shift_u8>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	4313      	orrs	r3, r2
 800f984:	b2da      	uxtb	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	701a      	strb	r2, [r3, #0]

    return (1);
 800f98a:	2301      	movs	r3, #1
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3710      	adds	r7, #16
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 800f9a6:	f06f 0315 	mvn.w	r3, #21
 800f9aa:	e00b      	b.n	800f9c4 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff f823 	bl	800ea00 <unpack_right_shift_u8>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461a      	mov	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	701a      	strb	r2, [r3, #0]

    return (0);
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3710      	adds	r7, #16
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <can2_cc_status_enable_ams_charging_encode>:

uint8_t can2_cc_status_enable_ams_charging_encode(double value)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	ed87 0b00 	vstr	d0, [r7]
    return (uint8_t)(value);
 800f9d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9da:	f7f1 f8d7 	bl	8000b8c <__aeabi_d2uiz>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	b2db      	uxtb	r3, r3
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <can2_cc_status_enable_ams_charging_decode>:

double can2_cc_status_enable_ams_charging_decode(uint8_t value)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b082      	sub	sp, #8
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 800f9f4:	79fb      	ldrb	r3, [r7, #7]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f0 fd76 	bl	80004e8 <__aeabi_ui2d>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	ec43 2b17 	vmov	d7, r2, r3
}
 800fa04:	eeb0 0a47 	vmov.f32	s0, s14
 800fa08:	eef0 0a67 	vmov.f32	s1, s15
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <can1_ams_cell_voltages_array_raise>:
static uint8_t can2_cc_status_flag = 0;

static CAN_HandleTypeDef* _hcan1;
static CAN_HandleTypeDef* _hcan2;

static void can1_ams_cell_voltages_array_raise(uint8_t index) {
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  23 / 8];
    static uint8_t count = 0;

    if(index < 23) {
 800fa1e:	79fb      	ldrb	r3, [r7, #7]
 800fa20:	2b16      	cmp	r3, #22
 800fa22:	d844      	bhi.n	800faae <can1_ams_cell_voltages_array_raise+0x9a>
        uint8_t div = index / 8;
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	08db      	lsrs	r3, r3, #3
 800fa28:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fa2a:	79fb      	ldrb	r3, [r7, #7]
 800fa2c:	f003 0307 	and.w	r3, r3, #7
 800fa30:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800fa32:	7abb      	ldrb	r3, [r7, #10]
 800fa34:	2201      	movs	r2, #1
 800fa36:	fa02 f303 	lsl.w	r3, r2, r3
 800fa3a:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800fa3c:	7afb      	ldrb	r3, [r7, #11]
 800fa3e:	4a1f      	ldr	r2, [pc, #124]	; (800fabc <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa40:	5cd2      	ldrb	r2, [r2, r3]
 800fa42:	7a7b      	ldrb	r3, [r7, #9]
 800fa44:	4013      	ands	r3, r2
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d130      	bne.n	800faae <can1_ams_cell_voltages_array_raise+0x9a>
            array[div] |= flag;
 800fa4c:	7afb      	ldrb	r3, [r7, #11]
 800fa4e:	4a1b      	ldr	r2, [pc, #108]	; (800fabc <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa50:	5cd1      	ldrb	r1, [r2, r3]
 800fa52:	7afb      	ldrb	r3, [r7, #11]
 800fa54:	7a7a      	ldrb	r2, [r7, #9]
 800fa56:	430a      	orrs	r2, r1
 800fa58:	b2d1      	uxtb	r1, r2
 800fa5a:	4a18      	ldr	r2, [pc, #96]	; (800fabc <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa5c:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 23;
 800fa5e:	4b18      	ldr	r3, [pc, #96]	; (800fac0 <can1_ams_cell_voltages_array_raise+0xac>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	4b17      	ldr	r3, [pc, #92]	; (800fac4 <can1_ams_cell_voltages_array_raise+0xb0>)
 800fa66:	fb83 1302 	smull	r1, r3, r3, r2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	1119      	asrs	r1, r3, #4
 800fa6e:	17d3      	asrs	r3, r2, #31
 800fa70:	1ac9      	subs	r1, r1, r3
 800fa72:	460b      	mov	r3, r1
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	440b      	add	r3, r1
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	1a5b      	subs	r3, r3, r1
 800fa7c:	1ad1      	subs	r1, r2, r3
 800fa7e:	b2ca      	uxtb	r2, r1
 800fa80:	4b0f      	ldr	r3, [pc, #60]	; (800fac0 <can1_ams_cell_voltages_array_raise+0xac>)
 800fa82:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fa84:	4b0e      	ldr	r3, [pc, #56]	; (800fac0 <can1_ams_cell_voltages_array_raise+0xac>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d110      	bne.n	800faae <can1_ams_cell_voltages_array_raise+0x9a>
                for(int i = 0; i < (1 + 23 / 8); i++) {
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	60fb      	str	r3, [r7, #12]
 800fa90:	e007      	b.n	800faa2 <can1_ams_cell_voltages_array_raise+0x8e>
                    array[i] = 0;
 800fa92:	4a0a      	ldr	r2, [pc, #40]	; (800fabc <can1_ams_cell_voltages_array_raise+0xa8>)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	4413      	add	r3, r2
 800fa98:	2200      	movs	r2, #0
 800fa9a:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 23 / 8); i++) {
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	60fb      	str	r3, [r7, #12]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	ddf4      	ble.n	800fa92 <can1_ams_cell_voltages_array_raise+0x7e>
                }
                can1_ams_cell_voltages_flag = 1;
 800faa8:	4b07      	ldr	r3, [pc, #28]	; (800fac8 <can1_ams_cell_voltages_array_raise+0xb4>)
 800faaa:	2201      	movs	r2, #1
 800faac:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800faae:	bf00      	nop
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	20001638 	.word	0x20001638
 800fac0:	2000163b 	.word	0x2000163b
 800fac4:	b21642c9 	.word	0xb21642c9
 800fac8:	20001628 	.word	0x20001628

0800facc <can1_ams_cell_temperatures_array_raise>:
static void can1_ams_cell_temperatures_array_raise(uint8_t index) {
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  11 / 8];
    static uint8_t count = 0;

    if(index < 11) {
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	2b0a      	cmp	r3, #10
 800fada:	d843      	bhi.n	800fb64 <can1_ams_cell_temperatures_array_raise+0x98>
        uint8_t div = index / 8;
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	08db      	lsrs	r3, r3, #3
 800fae0:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fae2:	79fb      	ldrb	r3, [r7, #7]
 800fae4:	f003 0307 	and.w	r3, r3, #7
 800fae8:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800faea:	7abb      	ldrb	r3, [r7, #10]
 800faec:	2201      	movs	r2, #1
 800faee:	fa02 f303 	lsl.w	r3, r2, r3
 800faf2:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800faf4:	7afb      	ldrb	r3, [r7, #11]
 800faf6:	4a1e      	ldr	r2, [pc, #120]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa4>)
 800faf8:	5cd2      	ldrb	r2, [r2, r3]
 800fafa:	7a7b      	ldrb	r3, [r7, #9]
 800fafc:	4013      	ands	r3, r2
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d12f      	bne.n	800fb64 <can1_ams_cell_temperatures_array_raise+0x98>
            array[div] |= flag;
 800fb04:	7afb      	ldrb	r3, [r7, #11]
 800fb06:	4a1a      	ldr	r2, [pc, #104]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb08:	5cd1      	ldrb	r1, [r2, r3]
 800fb0a:	7afb      	ldrb	r3, [r7, #11]
 800fb0c:	7a7a      	ldrb	r2, [r7, #9]
 800fb0e:	430a      	orrs	r2, r1
 800fb10:	b2d1      	uxtb	r1, r2
 800fb12:	4a17      	ldr	r2, [pc, #92]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb14:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 11;
 800fb16:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	1c59      	adds	r1, r3, #1
 800fb1c:	4b16      	ldr	r3, [pc, #88]	; (800fb78 <can1_ams_cell_temperatures_array_raise+0xac>)
 800fb1e:	fb83 2301 	smull	r2, r3, r3, r1
 800fb22:	105a      	asrs	r2, r3, #1
 800fb24:	17cb      	asrs	r3, r1, #31
 800fb26:	1ad2      	subs	r2, r2, r3
 800fb28:	4613      	mov	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	005b      	lsls	r3, r3, #1
 800fb30:	4413      	add	r3, r2
 800fb32:	1aca      	subs	r2, r1, r3
 800fb34:	b2d2      	uxtb	r2, r2
 800fb36:	4b0f      	ldr	r3, [pc, #60]	; (800fb74 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb38:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fb3a:	4b0e      	ldr	r3, [pc, #56]	; (800fb74 <can1_ams_cell_temperatures_array_raise+0xa8>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d110      	bne.n	800fb64 <can1_ams_cell_temperatures_array_raise+0x98>
                for(int i = 0; i < (1 + 11 / 8); i++) {
 800fb42:	2300      	movs	r3, #0
 800fb44:	60fb      	str	r3, [r7, #12]
 800fb46:	e007      	b.n	800fb58 <can1_ams_cell_temperatures_array_raise+0x8c>
                    array[i] = 0;
 800fb48:	4a09      	ldr	r2, [pc, #36]	; (800fb70 <can1_ams_cell_temperatures_array_raise+0xa4>)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	2200      	movs	r2, #0
 800fb50:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 11 / 8); i++) {
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60fb      	str	r3, [r7, #12]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	ddf4      	ble.n	800fb48 <can1_ams_cell_temperatures_array_raise+0x7c>
                }
                can1_ams_cell_temperatures_flag = 1;
 800fb5e:	4b07      	ldr	r3, [pc, #28]	; (800fb7c <can1_ams_cell_temperatures_array_raise+0xb0>)
 800fb60:	2201      	movs	r2, #1
 800fb62:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800fb64:	bf00      	nop
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	2000163c 	.word	0x2000163c
 800fb74:	2000163e 	.word	0x2000163e
 800fb78:	2e8ba2e9 	.word	0x2e8ba2e9
 800fb7c:	20001629 	.word	0x20001629

0800fb80 <can2_charger_config_array_raise>:
static void can2_charger_config_array_raise(uint8_t index) {
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	71fb      	strb	r3, [r7, #7]
    static uint8_t array[1 +  68 / 8];
    static uint8_t count = 0;

    if(index < 68) {
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	2b43      	cmp	r3, #67	; 0x43
 800fb8e:	d842      	bhi.n	800fc16 <can2_charger_config_array_raise+0x96>
        uint8_t div = index / 8;
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	08db      	lsrs	r3, r3, #3
 800fb94:	72fb      	strb	r3, [r7, #11]
        uint8_t rem = index % 8;
 800fb96:	79fb      	ldrb	r3, [r7, #7]
 800fb98:	f003 0307 	and.w	r3, r3, #7
 800fb9c:	72bb      	strb	r3, [r7, #10]
        uint8_t flag = (1 << rem);
 800fb9e:	7abb      	ldrb	r3, [r7, #10]
 800fba0:	2201      	movs	r2, #1
 800fba2:	fa02 f303 	lsl.w	r3, r2, r3
 800fba6:	727b      	strb	r3, [r7, #9]
        
        if(!(array[div] & flag)) {
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	4a1e      	ldr	r2, [pc, #120]	; (800fc24 <can2_charger_config_array_raise+0xa4>)
 800fbac:	5cd2      	ldrb	r2, [r2, r3]
 800fbae:	7a7b      	ldrb	r3, [r7, #9]
 800fbb0:	4013      	ands	r3, r2
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d12e      	bne.n	800fc16 <can2_charger_config_array_raise+0x96>
            array[div] |= flag;
 800fbb8:	7afb      	ldrb	r3, [r7, #11]
 800fbba:	4a1a      	ldr	r2, [pc, #104]	; (800fc24 <can2_charger_config_array_raise+0xa4>)
 800fbbc:	5cd1      	ldrb	r1, [r2, r3]
 800fbbe:	7afb      	ldrb	r3, [r7, #11]
 800fbc0:	7a7a      	ldrb	r2, [r7, #9]
 800fbc2:	430a      	orrs	r2, r1
 800fbc4:	b2d1      	uxtb	r1, r2
 800fbc6:	4a17      	ldr	r2, [pc, #92]	; (800fc24 <can2_charger_config_array_raise+0xa4>)
 800fbc8:	54d1      	strb	r1, [r2, r3]
            count = (count + 1) % 68;
 800fbca:	4b17      	ldr	r3, [pc, #92]	; (800fc28 <can2_charger_config_array_raise+0xa8>)
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	1c5a      	adds	r2, r3, #1
 800fbd0:	4b16      	ldr	r3, [pc, #88]	; (800fc2c <can2_charger_config_array_raise+0xac>)
 800fbd2:	fb83 1302 	smull	r1, r3, r3, r2
 800fbd6:	1159      	asrs	r1, r3, #5
 800fbd8:	17d3      	asrs	r3, r2, #31
 800fbda:	1ac9      	subs	r1, r1, r3
 800fbdc:	460b      	mov	r3, r1
 800fbde:	011b      	lsls	r3, r3, #4
 800fbe0:	440b      	add	r3, r1
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	1ad1      	subs	r1, r2, r3
 800fbe6:	b2ca      	uxtb	r2, r1
 800fbe8:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <can2_charger_config_array_raise+0xa8>)
 800fbea:	701a      	strb	r2, [r3, #0]

            if(count == 0) {
 800fbec:	4b0e      	ldr	r3, [pc, #56]	; (800fc28 <can2_charger_config_array_raise+0xa8>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d110      	bne.n	800fc16 <can2_charger_config_array_raise+0x96>
                for(int i = 0; i < (1 + 68 / 8); i++) {
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	e007      	b.n	800fc0a <can2_charger_config_array_raise+0x8a>
                    array[i] = 0;
 800fbfa:	4a0a      	ldr	r2, [pc, #40]	; (800fc24 <can2_charger_config_array_raise+0xa4>)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4413      	add	r3, r2
 800fc00:	2200      	movs	r2, #0
 800fc02:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < (1 + 68 / 8); i++) {
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	3301      	adds	r3, #1
 800fc08:	60fb      	str	r3, [r7, #12]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2b08      	cmp	r3, #8
 800fc0e:	ddf4      	ble.n	800fbfa <can2_charger_config_array_raise+0x7a>
                }
                can2_charger_config_flag = 1;
 800fc10:	4b07      	ldr	r3, [pc, #28]	; (800fc30 <can2_charger_config_array_raise+0xb0>)
 800fc12:	2201      	movs	r2, #1
 800fc14:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 800fc16:	bf00      	nop
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	20001640 	.word	0x20001640
 800fc28:	20001649 	.word	0x20001649
 800fc2c:	78787879 	.word	0x78787879
 800fc30:	2000162e 	.word	0x2000162e

0800fc34 <can1_ams_status_1_decode>:
/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_decode() {
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
   can1_ams_status_1_unpack(&can1_ams_status_1, rx_data, 8);
 800fc38:	2208      	movs	r2, #8
 800fc3a:	4905      	ldr	r1, [pc, #20]	; (800fc50 <can1_ams_status_1_decode+0x1c>)
 800fc3c:	4805      	ldr	r0, [pc, #20]	; (800fc54 <can1_ams_status_1_decode+0x20>)
 800fc3e:	f7f1 fb5f 	bl	8001300 <can1_ams_status_1_unpack>
   can1_ams_status_1_flag = 1;
 800fc42:	4b05      	ldr	r3, [pc, #20]	; (800fc58 <can1_ams_status_1_decode+0x24>)
 800fc44:	2201      	movs	r2, #1
 800fc46:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1_receive();
 800fc48:	f002 fbc0 	bl	80123cc <can1_ams_status_1_receive>
}
 800fc4c:	bf00      	nop
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	200014d0 	.word	0x200014d0
 800fc54:	200014d8 	.word	0x200014d8
 800fc58:	20001625 	.word	0x20001625

0800fc5c <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800fc60:	2208      	movs	r2, #8
 800fc62:	4905      	ldr	r1, [pc, #20]	; (800fc78 <can1_dbu_status_1_decode+0x1c>)
 800fc64:	4805      	ldr	r0, [pc, #20]	; (800fc7c <can1_dbu_status_1_decode+0x20>)
 800fc66:	f7f1 ff16 	bl	8001a96 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <can1_dbu_status_1_decode+0x24>)
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1_receive();
 800fc70:	f002 fc6c 	bl	801254c <can1_dbu_status_1_receive>
}
 800fc74:	bf00      	nop
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	200014d0 	.word	0x200014d0
 800fc7c:	200014e8 	.word	0x200014e8
 800fc80:	20001626 	.word	0x20001626

0800fc84 <can1_ams_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_decode() {
 800fc84:	b580      	push	{r7, lr}
 800fc86:	af00      	add	r7, sp, #0
   can1_ams_temperatures_unpack(&can1_ams_temperatures, rx_data, 6);
 800fc88:	2206      	movs	r2, #6
 800fc8a:	4905      	ldr	r1, [pc, #20]	; (800fca0 <can1_ams_temperatures_decode+0x1c>)
 800fc8c:	4805      	ldr	r0, [pc, #20]	; (800fca4 <can1_ams_temperatures_decode+0x20>)
 800fc8e:	f7f2 f891 	bl	8001db4 <can1_ams_temperatures_unpack>
   can1_ams_temperatures_flag = 1;
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <can1_ams_temperatures_decode+0x24>)
 800fc94:	2201      	movs	r2, #1
 800fc96:	701a      	strb	r2, [r3, #0]
   can1_ams_temperatures_receive();
 800fc98:	f002 fc96 	bl	80125c8 <can1_ams_temperatures_receive>
}
 800fc9c:	bf00      	nop
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	200014d0 	.word	0x200014d0
 800fca4:	200014ec 	.word	0x200014ec
 800fca8:	20001627 	.word	0x20001627

0800fcac <can1_ams_cell_voltages_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_decode() {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0
   can1_ams_cell_voltages_unpack(&can1_ams_cell_voltages, rx_data, 7);
 800fcb0:	2207      	movs	r2, #7
 800fcb2:	4906      	ldr	r1, [pc, #24]	; (800fccc <can1_ams_cell_voltages_decode+0x20>)
 800fcb4:	4806      	ldr	r0, [pc, #24]	; (800fcd0 <can1_ams_cell_voltages_decode+0x24>)
 800fcb6:	f7f3 fbc7 	bl	8003448 <can1_ams_cell_voltages_unpack>
   can1_ams_cell_voltages_array_raise(can1_ams_cell_voltages.voltage_multiplexor);
 800fcba:	4b05      	ldr	r3, [pc, #20]	; (800fcd0 <can1_ams_cell_voltages_decode+0x24>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff fea8 	bl	800fa14 <can1_ams_cell_voltages_array_raise>
   can1_ams_cell_voltages_receive();
 800fcc4:	f002 fcc6 	bl	8012654 <can1_ams_cell_voltages_receive>
}
 800fcc8:	bf00      	nop
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	200014d0 	.word	0x200014d0
 800fcd0:	200014f4 	.word	0x200014f4

0800fcd4 <can1_ams_cell_temperatures_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_decode() {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	af00      	add	r7, sp, #0
   can1_ams_cell_temperatures_unpack(&can1_ams_cell_temperatures, rx_data, 8);
 800fcd8:	2208      	movs	r2, #8
 800fcda:	4906      	ldr	r1, [pc, #24]	; (800fcf4 <can1_ams_cell_temperatures_decode+0x20>)
 800fcdc:	4806      	ldr	r0, [pc, #24]	; (800fcf8 <can1_ams_cell_temperatures_decode+0x24>)
 800fcde:	f7fa feef 	bl	800aac0 <can1_ams_cell_temperatures_unpack>
   can1_ams_cell_temperatures_array_raise(can1_ams_cell_temperatures.temperature_multiplexor);
 800fce2:	4b05      	ldr	r3, [pc, #20]	; (800fcf8 <can1_ams_cell_temperatures_decode+0x24>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff fef0 	bl	800facc <can1_ams_cell_temperatures_array_raise>
   can1_ams_cell_temperatures_receive();
 800fcec:	f003 fb1e 	bl	801332c <can1_ams_cell_temperatures_receive>
}
 800fcf0:	bf00      	nop
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	200014d0 	.word	0x200014d0
 800fcf8:	20001574 	.word	0x20001574

0800fcfc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 800fd00:	2208      	movs	r2, #8
 800fd02:	4905      	ldr	r1, [pc, #20]	; (800fd18 <can2_amk1_setpoints_1_decode+0x1c>)
 800fd04:	4805      	ldr	r0, [pc, #20]	; (800fd1c <can2_amk1_setpoints_1_decode+0x20>)
 800fd06:	f7fe fed2 	bl	800eaae <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 800fd0a:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <can2_amk1_setpoints_1_decode+0x24>)
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	701a      	strb	r2, [r3, #0]
   can2_amk1_setpoints_1_receive();
 800fd10:	f003 fe36 	bl	8013980 <can2_amk1_setpoints_1_receive>
}
 800fd14:	bf00      	nop
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	200014d0 	.word	0x200014d0
 800fd1c:	200015f0 	.word	0x200015f0
 800fd20:	2000162a 	.word	0x2000162a

0800fd24 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 800fd28:	2206      	movs	r2, #6
 800fd2a:	4905      	ldr	r1, [pc, #20]	; (800fd40 <can2_ivt_msg_result_i_decode+0x1c>)
 800fd2c:	4805      	ldr	r0, [pc, #20]	; (800fd44 <can2_ivt_msg_result_i_decode+0x20>)
 800fd2e:	f7ff f859 	bl	800ede4 <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 800fd32:	4b05      	ldr	r3, [pc, #20]	; (800fd48 <can2_ivt_msg_result_i_decode+0x24>)
 800fd34:	2201      	movs	r2, #1
 800fd36:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_i_receive();
 800fd38:	f003 fe9e 	bl	8013a78 <can2_ivt_msg_result_i_receive>
}
 800fd3c:	bf00      	nop
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	200014d0 	.word	0x200014d0
 800fd44:	20001600 	.word	0x20001600
 800fd48:	2000162b 	.word	0x2000162b

0800fd4c <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 800fd50:	2206      	movs	r2, #6
 800fd52:	4905      	ldr	r1, [pc, #20]	; (800fd68 <can2_ivt_msg_result_u1_decode+0x1c>)
 800fd54:	4805      	ldr	r0, [pc, #20]	; (800fd6c <can2_ivt_msg_result_u1_decode+0x20>)
 800fd56:	f7ff f995 	bl	800f084 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 800fd5a:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <can2_ivt_msg_result_u1_decode+0x24>)
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u1_receive();
 800fd60:	f003 feae 	bl	8013ac0 <can2_ivt_msg_result_u1_receive>
}
 800fd64:	bf00      	nop
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	200014d0 	.word	0x200014d0
 800fd6c:	20001608 	.word	0x20001608
 800fd70:	2000162c 	.word	0x2000162c

0800fd74 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 800fd74:	b580      	push	{r7, lr}
 800fd76:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800fd78:	2206      	movs	r2, #6
 800fd7a:	4905      	ldr	r1, [pc, #20]	; (800fd90 <can2_ivt_msg_result_u3_decode+0x1c>)
 800fd7c:	4805      	ldr	r0, [pc, #20]	; (800fd94 <can2_ivt_msg_result_u3_decode+0x20>)
 800fd7e:	f7ff fad1 	bl	800f324 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 800fd82:	4b05      	ldr	r3, [pc, #20]	; (800fd98 <can2_ivt_msg_result_u3_decode+0x24>)
 800fd84:	2201      	movs	r2, #1
 800fd86:	701a      	strb	r2, [r3, #0]
   can2_ivt_msg_result_u3_receive();
 800fd88:	f003 febe 	bl	8013b08 <can2_ivt_msg_result_u3_receive>
}
 800fd8c:	bf00      	nop
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	200014d0 	.word	0x200014d0
 800fd94:	20001610 	.word	0x20001610
 800fd98:	2000162d 	.word	0x2000162d

0800fd9c <can2_charger_config_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_decode() {
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
   can2_charger_config_unpack(&can2_charger_config, rx_data, 4);
 800fda0:	2204      	movs	r2, #4
 800fda2:	4906      	ldr	r1, [pc, #24]	; (800fdbc <can2_charger_config_decode+0x20>)
 800fda4:	4806      	ldr	r0, [pc, #24]	; (800fdc0 <can2_charger_config_decode+0x24>)
 800fda6:	f7ff fc59 	bl	800f65c <can2_charger_config_unpack>
   can2_charger_config_array_raise(can2_charger_config.set_mux);
 800fdaa:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <can2_charger_config_decode+0x24>)
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff fee6 	bl	800fb80 <can2_charger_config_array_raise>
   can2_charger_config_receive();
 800fdb4:	f003 fecc 	bl	8013b50 <can2_charger_config_receive>
}
 800fdb8:	bf00      	nop
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	200014d0 	.word	0x200014d0
 800fdc0:	20001618 	.word	0x20001618

0800fdc4 <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 800fdc8:	2201      	movs	r2, #1
 800fdca:	4905      	ldr	r1, [pc, #20]	; (800fde0 <can2_cc_status_decode+0x1c>)
 800fdcc:	4805      	ldr	r0, [pc, #20]	; (800fde4 <can2_cc_status_decode+0x20>)
 800fdce:	f7ff fde1 	bl	800f994 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800fdd2:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <can2_cc_status_decode+0x24>)
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	701a      	strb	r2, [r3, #0]
   can2_cc_status_receive();
 800fdd8:	f003 ff0e 	bl	8013bf8 <can2_cc_status_receive>
}
 800fddc:	bf00      	nop
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	200014d0 	.word	0x200014d0
 800fde4:	20001624 	.word	0x20001624
 800fde8:	2000162f 	.word	0x2000162f

0800fdec <can1_ams_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_transmit() {
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b09a      	sub	sp, #104	; 0x68
 800fdf0:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800fdf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	601a      	str	r2, [r3, #0]
 800fdfa:	605a      	str	r2, [r3, #4]
 800fdfc:	609a      	str	r2, [r3, #8]
 800fdfe:	60da      	str	r2, [r3, #12]
 800fe00:	611a      	str	r2, [r3, #16]
 800fe02:	615a      	str	r2, [r3, #20]
 800fe04:	2320      	movs	r3, #32
 800fe06:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe08:	2308      	movs	r3, #8
 800fe0a:	65bb      	str	r3, [r7, #88]	; 0x58
       .StdId = 32,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_status_1_t ams_status_1;
   can1_ams_status_1_tx_callback(&ams_status_1);
 800fe0c:	463b      	mov	r3, r7
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f005 fd84 	bl	801591c <can1_ams_status_1_tx_callback>

   can1_ams_status_1.charging_status = can1_ams_status_1_charging_status_encode(ams_status_1.charging_status);
 800fe14:	78fb      	ldrb	r3, [r7, #3]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7f0 fb66 	bl	80004e8 <__aeabi_ui2d>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	ec43 2b10 	vmov	d0, r2, r3
 800fe24:	f7f1 fb46 	bl	80014b4 <can1_ams_status_1_charging_status_encode>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	4b60      	ldr	r3, [pc, #384]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fe2e:	701a      	strb	r2, [r3, #0]
   can1_ams_status_1.air1_closed = can1_ams_status_1_air1_closed_encode(ams_status_1.air1_closed);
 800fe30:	783b      	ldrb	r3, [r7, #0]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7f0 fb58 	bl	80004e8 <__aeabi_ui2d>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	ec43 2b10 	vmov	d0, r2, r3
 800fe40:	f7f1 fb5b 	bl	80014fa <can1_ams_status_1_air1_closed_encode>
 800fe44:	4603      	mov	r3, r0
 800fe46:	461a      	mov	r2, r3
 800fe48:	4b59      	ldr	r3, [pc, #356]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fe4a:	705a      	strb	r2, [r3, #1]
   can1_ams_status_1.air2_closed = can1_ams_status_1_air2_closed_encode(ams_status_1.air2_closed);
 800fe4c:	787b      	ldrb	r3, [r7, #1]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f0 fb4a 	bl	80004e8 <__aeabi_ui2d>
 800fe54:	4602      	mov	r2, r0
 800fe56:	460b      	mov	r3, r1
 800fe58:	ec43 2b10 	vmov	d0, r2, r3
 800fe5c:	f7f1 fb70 	bl	8001540 <can1_ams_status_1_air2_closed_encode>
 800fe60:	4603      	mov	r3, r0
 800fe62:	461a      	mov	r2, r3
 800fe64:	4b52      	ldr	r3, [pc, #328]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fe66:	709a      	strb	r2, [r3, #2]
   can1_ams_status_1.sc_closed = can1_ams_status_1_sc_closed_encode(ams_status_1.sc_closed);
 800fe68:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f0 fb3b 	bl	80004e8 <__aeabi_ui2d>
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	ec43 2b10 	vmov	d0, r2, r3
 800fe7a:	f7f1 fb84 	bl	8001586 <can1_ams_status_1_sc_closed_encode>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	461a      	mov	r2, r3
 800fe82:	4b4b      	ldr	r3, [pc, #300]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fe84:	70da      	strb	r2, [r3, #3]
   can1_ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_encode(ams_status_1.pre_charge_status);
 800fe86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7f0 fb2c 	bl	80004e8 <__aeabi_ui2d>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	ec43 2b10 	vmov	d0, r2, r3
 800fe98:	f7f1 fb98 	bl	80015cc <can1_ams_status_1_pre_charge_status_encode>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	461a      	mov	r2, r3
 800fea0:	4b43      	ldr	r3, [pc, #268]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fea2:	711a      	strb	r2, [r3, #4]
   can1_ams_status_1.ams_error = can1_ams_status_1_ams_error_encode(ams_status_1.ams_error);
 800fea4:	78bb      	ldrb	r3, [r7, #2]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f0 fb1e 	bl	80004e8 <__aeabi_ui2d>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	ec43 2b10 	vmov	d0, r2, r3
 800feb4:	f7f1 fbad 	bl	8001612 <can1_ams_status_1_ams_error_encode>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
 800febc:	4b3c      	ldr	r3, [pc, #240]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800febe:	715a      	strb	r2, [r3, #5]
   can1_ams_status_1.imd_error = can1_ams_status_1_imd_error_encode(ams_status_1.imd_error);
 800fec0:	7c3b      	ldrb	r3, [r7, #16]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f0 fb10 	bl	80004e8 <__aeabi_ui2d>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	ec43 2b10 	vmov	d0, r2, r3
 800fed0:	f7f1 fbc2 	bl	8001658 <can1_ams_status_1_imd_error_encode>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b35      	ldr	r3, [pc, #212]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800feda:	719a      	strb	r2, [r3, #6]
   can1_ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_encode(ams_status_1.state_of_charge);
 800fedc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800fee0:	eeb0 0a47 	vmov.f32	s0, s14
 800fee4:	eef0 0a67 	vmov.f32	s1, s15
 800fee8:	f7f1 fbd9 	bl	800169e <can1_ams_status_1_state_of_charge_encode>
 800feec:	4603      	mov	r3, r0
 800feee:	461a      	mov	r2, r3
 800fef0:	4b2f      	ldr	r3, [pc, #188]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800fef2:	71da      	strb	r2, [r3, #7]
   can1_ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_encode(ams_status_1.min_cell_voltage);
 800fef4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800fef8:	eeb0 0a47 	vmov.f32	s0, s14
 800fefc:	eef0 0a67 	vmov.f32	s1, s15
 800ff00:	f7f1 fbf2 	bl	80016e8 <can1_ams_status_1_min_cell_voltage_encode>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	4b29      	ldr	r3, [pc, #164]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff0a:	721a      	strb	r2, [r3, #8]
   can1_ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_encode(ams_status_1.max_cell_voltage);
 800ff0c:	ed97 7b08 	vldr	d7, [r7, #32]
 800ff10:	eeb0 0a47 	vmov.f32	s0, s14
 800ff14:	eef0 0a67 	vmov.f32	s1, s15
 800ff18:	f7f1 fc3e 	bl	8001798 <can1_ams_status_1_max_cell_voltage_encode>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461a      	mov	r2, r3
 800ff20:	4b23      	ldr	r3, [pc, #140]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff22:	725a      	strb	r2, [r3, #9]
   can1_ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_encode(ams_status_1.min_cell_temperature);
 800ff24:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800ff28:	eeb0 0a47 	vmov.f32	s0, s14
 800ff2c:	eef0 0a67 	vmov.f32	s1, s15
 800ff30:	f7f1 fc8a 	bl	8001848 <can1_ams_status_1_min_cell_temperature_encode>
 800ff34:	4603      	mov	r3, r0
 800ff36:	461a      	mov	r2, r3
 800ff38:	4b1d      	ldr	r3, [pc, #116]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff3a:	815a      	strh	r2, [r3, #10]
   can1_ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_encode(ams_status_1.max_cell_temperature);
 800ff3c:	ed97 7b06 	vldr	d7, [r7, #24]
 800ff40:	eeb0 0a47 	vmov.f32	s0, s14
 800ff44:	eef0 0a67 	vmov.f32	s1, s15
 800ff48:	f7f1 fcd6 	bl	80018f8 <can1_ams_status_1_max_cell_temperature_encode>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4b17      	ldr	r3, [pc, #92]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff52:	819a      	strh	r2, [r3, #12]
   can1_ams_status_1.fan_speed = can1_ams_status_1_fan_speed_encode(ams_status_1.fan_speed);
 800ff54:	ed97 7b02 	vldr	d7, [r7, #8]
 800ff58:	eeb0 0a47 	vmov.f32	s0, s14
 800ff5c:	eef0 0a67 	vmov.f32	s1, s15
 800ff60:	f7f1 fd20 	bl	80019a4 <can1_ams_status_1_fan_speed_encode>
 800ff64:	4603      	mov	r3, r0
 800ff66:	461a      	mov	r2, r3
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff6a:	739a      	strb	r2, [r3, #14]

   can1_ams_status_1_pack(tx_data, &can1_ams_status_1, 8);
 800ff6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ff70:	2208      	movs	r2, #8
 800ff72:	490f      	ldr	r1, [pc, #60]	; (800ffb0 <can1_ams_status_1_transmit+0x1c4>)
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7f1 f8b8 	bl	80010ea <can1_ams_status_1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 800ff7a:	bf00      	nop
 800ff7c:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <can1_ams_status_1_transmit+0x1c8>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f015 fdb4 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d0f7      	beq.n	800ff7c <can1_ams_status_1_transmit+0x190>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 800ff8c:	4b09      	ldr	r3, [pc, #36]	; (800ffb4 <can1_ams_status_1_transmit+0x1c8>)
 800ff8e:	6818      	ldr	r0, [r3, #0]
 800ff90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ff94:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ff98:	4b07      	ldr	r3, [pc, #28]	; (800ffb8 <can1_ams_status_1_transmit+0x1cc>)
 800ff9a:	f015 fccd 	bl	8025938 <HAL_CAN_AddTxMessage>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d001      	beq.n	800ffa8 <can1_ams_status_1_transmit+0x1bc>
       Error_Handler();
 800ffa4:	f007 fc20 	bl	80177e8 <Error_Handler>
   }
}
 800ffa8:	bf00      	nop
 800ffaa:	3768      	adds	r7, #104	; 0x68
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	200014d8 	.word	0x200014d8
 800ffb4:	20001630 	.word	0x20001630
 800ffb8:	200014cc 	.word	0x200014cc

0800ffbc <can1_dbu_status_1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_transmit() {
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b08e      	sub	sp, #56	; 0x38
 800ffc0:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 800ffc2:	f107 0318 	add.w	r3, r7, #24
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	605a      	str	r2, [r3, #4]
 800ffcc:	609a      	str	r2, [r3, #8]
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	611a      	str	r2, [r3, #16]
 800ffd2:	615a      	str	r2, [r3, #20]
 800ffd4:	2340      	movs	r3, #64	; 0x40
 800ffd6:	61bb      	str	r3, [r7, #24]
 800ffd8:	2308      	movs	r3, #8
 800ffda:	62bb      	str	r3, [r7, #40]	; 0x28
       .StdId = 64,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   dbu_status_1_t dbu_status_1;
   can1_dbu_status_1_tx_callback(&dbu_status_1);
 800ffdc:	463b      	mov	r3, r7
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f005 fe48 	bl	8015c74 <can1_dbu_status_1_tx_callback>

   can1_dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_encode(dbu_status_1.activate_ts_button);
 800ffe4:	783b      	ldrb	r3, [r7, #0]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7f0 fa7e 	bl	80004e8 <__aeabi_ui2d>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	ec43 2b10 	vmov	d0, r2, r3
 800fff4:	f7f1 fd9b 	bl	8001b2e <can1_dbu_status_1_activate_ts_button_encode>
 800fff8:	4603      	mov	r3, r0
 800fffa:	461a      	mov	r2, r3
 800fffc:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <can1_dbu_status_1_transmit+0xbc>)
 800fffe:	701a      	strb	r2, [r3, #0]
   can1_dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_encode(dbu_status_1.ready_to_drive_button);
 8010000:	7c3b      	ldrb	r3, [r7, #16]
 8010002:	4618      	mov	r0, r3
 8010004:	f7f0 fa70 	bl	80004e8 <__aeabi_ui2d>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	ec43 2b10 	vmov	d0, r2, r3
 8010010:	f7f1 fdb0 	bl	8001b74 <can1_dbu_status_1_ready_to_drive_button_encode>
 8010014:	4603      	mov	r3, r0
 8010016:	461a      	mov	r2, r3
 8010018:	4b17      	ldr	r3, [pc, #92]	; (8010078 <can1_dbu_status_1_transmit+0xbc>)
 801001a:	705a      	strb	r2, [r3, #1]
   can1_dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_encode(dbu_status_1.dbu_temperature);
 801001c:	ed97 7b02 	vldr	d7, [r7, #8]
 8010020:	eeb0 0a47 	vmov.f32	s0, s14
 8010024:	eef0 0a67 	vmov.f32	s1, s15
 8010028:	f7f1 fdca 	bl	8001bc0 <can1_dbu_status_1_dbu_temperature_encode>
 801002c:	4603      	mov	r3, r0
 801002e:	461a      	mov	r2, r3
 8010030:	4b11      	ldr	r3, [pc, #68]	; (8010078 <can1_dbu_status_1_transmit+0xbc>)
 8010032:	805a      	strh	r2, [r3, #2]

   can1_dbu_status_1_pack(tx_data, &can1_dbu_status_1, 8);
 8010034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010038:	2208      	movs	r2, #8
 801003a:	490f      	ldr	r1, [pc, #60]	; (8010078 <can1_dbu_status_1_transmit+0xbc>)
 801003c:	4618      	mov	r0, r3
 801003e:	f7f1 fcd4 	bl	80019ea <can1_dbu_status_1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010042:	bf00      	nop
 8010044:	4b0d      	ldr	r3, [pc, #52]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4618      	mov	r0, r3
 801004a:	f015 fd50 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d0f7      	beq.n	8010044 <can1_dbu_status_1_transmit+0x88>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010054:	4b09      	ldr	r3, [pc, #36]	; (801007c <can1_dbu_status_1_transmit+0xc0>)
 8010056:	6818      	ldr	r0, [r3, #0]
 8010058:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801005c:	f107 0118 	add.w	r1, r7, #24
 8010060:	4b07      	ldr	r3, [pc, #28]	; (8010080 <can1_dbu_status_1_transmit+0xc4>)
 8010062:	f015 fc69 	bl	8025938 <HAL_CAN_AddTxMessage>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <can1_dbu_status_1_transmit+0xb4>
       Error_Handler();
 801006c:	f007 fbbc 	bl	80177e8 <Error_Handler>
   }
}
 8010070:	bf00      	nop
 8010072:	3738      	adds	r7, #56	; 0x38
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	200014e8 	.word	0x200014e8
 801007c:	20001630 	.word	0x20001630
 8010080:	200014cc 	.word	0x200014cc

08010084 <can1_ams_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_transmit() {
 8010084:	b580      	push	{r7, lr}
 8010086:	b090      	sub	sp, #64	; 0x40
 8010088:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801008a:	f107 0320 	add.w	r3, r7, #32
 801008e:	2200      	movs	r2, #0
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	605a      	str	r2, [r3, #4]
 8010094:	609a      	str	r2, [r3, #8]
 8010096:	60da      	str	r2, [r3, #12]
 8010098:	611a      	str	r2, [r3, #16]
 801009a:	615a      	str	r2, [r3, #20]
 801009c:	2323      	movs	r3, #35	; 0x23
 801009e:	623b      	str	r3, [r7, #32]
 80100a0:	2306      	movs	r3, #6
 80100a2:	633b      	str	r3, [r7, #48]	; 0x30
       .StdId = 35,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_temperatures_t ams_temperatures;
   can1_ams_temperatures_tx_callback(&ams_temperatures);
 80100a4:	463b      	mov	r3, r7
 80100a6:	4618      	mov	r0, r3
 80100a8:	f005 fd42 	bl	8015b30 <can1_ams_temperatures_tx_callback>

   can1_ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_encode(ams_temperatures.pre_charge_resistor_temperature);
 80100ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80100b0:	eeb0 0a47 	vmov.f32	s0, s14
 80100b4:	eef0 0a67 	vmov.f32	s1, s15
 80100b8:	f7f1 ff26 	bl	8001f08 <can1_ams_temperatures_pre_charge_resistor_temperature_encode>
 80100bc:	4603      	mov	r3, r0
 80100be:	461a      	mov	r2, r3
 80100c0:	4b23      	ldr	r3, [pc, #140]	; (8010150 <can1_ams_temperatures_transmit+0xcc>)
 80100c2:	801a      	strh	r2, [r3, #0]
   can1_ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_encode(ams_temperatures.fuse_resistor_temperature);
 80100c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80100c8:	eeb0 0a47 	vmov.f32	s0, s14
 80100cc:	eef0 0a67 	vmov.f32	s1, s15
 80100d0:	f7f1 ff72 	bl	8001fb8 <can1_ams_temperatures_fuse_resistor_temperature_encode>
 80100d4:	4603      	mov	r3, r0
 80100d6:	461a      	mov	r2, r3
 80100d8:	4b1d      	ldr	r3, [pc, #116]	; (8010150 <can1_ams_temperatures_transmit+0xcc>)
 80100da:	805a      	strh	r2, [r3, #2]
   can1_ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_encode(ams_temperatures.aux_1_temperature);
 80100dc:	ed97 7b00 	vldr	d7, [r7]
 80100e0:	eeb0 0a47 	vmov.f32	s0, s14
 80100e4:	eef0 0a67 	vmov.f32	s1, s15
 80100e8:	f7f1 ffbe 	bl	8002068 <can1_ams_temperatures_aux_1_temperature_encode>
 80100ec:	4603      	mov	r3, r0
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b17      	ldr	r3, [pc, #92]	; (8010150 <can1_ams_temperatures_transmit+0xcc>)
 80100f2:	809a      	strh	r2, [r3, #4]
   can1_ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_encode(ams_temperatures.aux_2_temperature);
 80100f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80100f8:	eeb0 0a47 	vmov.f32	s0, s14
 80100fc:	eef0 0a67 	vmov.f32	s1, s15
 8010100:	f7f2 f80a 	bl	8002118 <can1_ams_temperatures_aux_2_temperature_encode>
 8010104:	4603      	mov	r3, r0
 8010106:	461a      	mov	r2, r3
 8010108:	4b11      	ldr	r3, [pc, #68]	; (8010150 <can1_ams_temperatures_transmit+0xcc>)
 801010a:	80da      	strh	r2, [r3, #6]

   can1_ams_temperatures_pack(tx_data, &can1_ams_temperatures, 6);
 801010c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010110:	2206      	movs	r2, #6
 8010112:	490f      	ldr	r1, [pc, #60]	; (8010150 <can1_ams_temperatures_transmit+0xcc>)
 8010114:	4618      	mov	r0, r3
 8010116:	f7f1 fda9 	bl	8001c6c <can1_ams_temperatures_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801011a:	bf00      	nop
 801011c:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <can1_ams_temperatures_transmit+0xd0>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4618      	mov	r0, r3
 8010122:	f015 fce4 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d0f7      	beq.n	801011c <can1_ams_temperatures_transmit+0x98>
   if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801012c:	4b09      	ldr	r3, [pc, #36]	; (8010154 <can1_ams_temperatures_transmit+0xd0>)
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010134:	f107 0120 	add.w	r1, r7, #32
 8010138:	4b07      	ldr	r3, [pc, #28]	; (8010158 <can1_ams_temperatures_transmit+0xd4>)
 801013a:	f015 fbfd 	bl	8025938 <HAL_CAN_AddTxMessage>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d001      	beq.n	8010148 <can1_ams_temperatures_transmit+0xc4>
       Error_Handler();
 8010144:	f007 fb50 	bl	80177e8 <Error_Handler>
   }
}
 8010148:	bf00      	nop
 801014a:	3740      	adds	r7, #64	; 0x40
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	200014ec 	.word	0x200014ec
 8010154:	20001630 	.word	0x20001630
 8010158:	200014cc 	.word	0x200014cc

0801015c <can1_ams_cell_voltages_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_transmit() {
 801015c:	b580      	push	{r7, lr}
 801015e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8010162:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8010164:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	605a      	str	r2, [r3, #4]
 801016e:	609a      	str	r2, [r3, #8]
 8010170:	60da      	str	r2, [r3, #12]
 8010172:	611a      	str	r2, [r3, #16]
 8010174:	615a      	str	r2, [r3, #20]
 8010176:	2321      	movs	r3, #33	; 0x21
 8010178:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801017c:	2307      	movs	r3, #7
 801017e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
       .StdId = 33,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_voltages_t ams_cell_voltages;
   can1_ams_cell_voltages_tx_callback(&ams_cell_voltages);
 8010182:	463b      	mov	r3, r7
 8010184:	4618      	mov	r0, r3
 8010186:	f005 fce7 	bl	8015b58 <can1_ams_cell_voltages_tx_callback>

   can1_ams_cell_voltages.voltage_multiplexor = can1_ams_cell_voltages_voltage_multiplexor_encode(ams_cell_voltages.voltage_multiplexor);
 801018a:	463b      	mov	r3, r7
 801018c:	f893 33f0 	ldrb.w	r3, [r3, #1008]	; 0x3f0
 8010190:	4618      	mov	r0, r3
 8010192:	f7f0 f9a9 	bl	80004e8 <__aeabi_ui2d>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	ec43 2b10 	vmov	d0, r2, r3
 801019e:	f7f4 f811 	bl	80041c4 <can1_ams_cell_voltages_voltage_multiplexor_encode>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	4bec      	ldr	r3, [pc, #944]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101a8:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_encode(ams_cell_voltages.v1s1);
 80101aa:	463b      	mov	r3, r7
 80101ac:	ed93 7b00 	vldr	d7, [r3]
 80101b0:	eeb0 0a47 	vmov.f32	s0, s14
 80101b4:	eef0 0a67 	vmov.f32	s1, s15
 80101b8:	f7f4 f816 	bl	80041e8 <can1_ams_cell_voltages_v1s1_encode>
 80101bc:	4603      	mov	r3, r0
 80101be:	461a      	mov	r2, r3
 80101c0:	4be5      	ldr	r3, [pc, #916]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101c2:	705a      	strb	r2, [r3, #1]
   can1_ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_encode(ams_cell_voltages.v7s1);
 80101c4:	463b      	mov	r3, r7
 80101c6:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 80101ca:	eeb0 0a47 	vmov.f32	s0, s14
 80101ce:	eef0 0a67 	vmov.f32	s1, s15
 80101d2:	f7f4 f861 	bl	8004298 <can1_ams_cell_voltages_v7s1_encode>
 80101d6:	4603      	mov	r3, r0
 80101d8:	461a      	mov	r2, r3
 80101da:	4bdf      	ldr	r3, [pc, #892]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101dc:	709a      	strb	r2, [r3, #2]
   can1_ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_encode(ams_cell_voltages.v1s2);
 80101de:	463b      	mov	r3, r7
 80101e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80101e4:	eeb0 0a47 	vmov.f32	s0, s14
 80101e8:	eef0 0a67 	vmov.f32	s1, s15
 80101ec:	f7f4 f8ac 	bl	8004348 <can1_ams_cell_voltages_v1s2_encode>
 80101f0:	4603      	mov	r3, r0
 80101f2:	461a      	mov	r2, r3
 80101f4:	4bd8      	ldr	r3, [pc, #864]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80101f6:	70da      	strb	r2, [r3, #3]
   can1_ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_encode(ams_cell_voltages.v7s2);
 80101f8:	463b      	mov	r3, r7
 80101fa:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 80101fe:	eeb0 0a47 	vmov.f32	s0, s14
 8010202:	eef0 0a67 	vmov.f32	s1, s15
 8010206:	f7f4 f8f7 	bl	80043f8 <can1_ams_cell_voltages_v7s2_encode>
 801020a:	4603      	mov	r3, r0
 801020c:	461a      	mov	r2, r3
 801020e:	4bd2      	ldr	r3, [pc, #840]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010210:	711a      	strb	r2, [r3, #4]
   can1_ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_encode(ams_cell_voltages.v1s3);
 8010212:	463b      	mov	r3, r7
 8010214:	ed93 7b04 	vldr	d7, [r3, #16]
 8010218:	eeb0 0a47 	vmov.f32	s0, s14
 801021c:	eef0 0a67 	vmov.f32	s1, s15
 8010220:	f7f4 f942 	bl	80044a8 <can1_ams_cell_voltages_v1s3_encode>
 8010224:	4603      	mov	r3, r0
 8010226:	461a      	mov	r2, r3
 8010228:	4bcb      	ldr	r3, [pc, #812]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801022a:	715a      	strb	r2, [r3, #5]
   can1_ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_encode(ams_cell_voltages.v7s3);
 801022c:	463b      	mov	r3, r7
 801022e:	ed93 7b94 	vldr	d7, [r3, #592]	; 0x250
 8010232:	eeb0 0a47 	vmov.f32	s0, s14
 8010236:	eef0 0a67 	vmov.f32	s1, s15
 801023a:	f7f4 f98d 	bl	8004558 <can1_ams_cell_voltages_v7s3_encode>
 801023e:	4603      	mov	r3, r0
 8010240:	461a      	mov	r2, r3
 8010242:	4bc5      	ldr	r3, [pc, #788]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010244:	719a      	strb	r2, [r3, #6]
   can1_ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_encode(ams_cell_voltages.v1s4);
 8010246:	463b      	mov	r3, r7
 8010248:	ed93 7b06 	vldr	d7, [r3, #24]
 801024c:	eeb0 0a47 	vmov.f32	s0, s14
 8010250:	eef0 0a67 	vmov.f32	s1, s15
 8010254:	f7f4 f9d8 	bl	8004608 <can1_ams_cell_voltages_v1s4_encode>
 8010258:	4603      	mov	r3, r0
 801025a:	461a      	mov	r2, r3
 801025c:	4bbe      	ldr	r3, [pc, #760]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801025e:	71da      	strb	r2, [r3, #7]
   can1_ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_encode(ams_cell_voltages.v7s4);
 8010260:	463b      	mov	r3, r7
 8010262:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
 8010266:	eeb0 0a47 	vmov.f32	s0, s14
 801026a:	eef0 0a67 	vmov.f32	s1, s15
 801026e:	f7f4 fa23 	bl	80046b8 <can1_ams_cell_voltages_v7s4_encode>
 8010272:	4603      	mov	r3, r0
 8010274:	461a      	mov	r2, r3
 8010276:	4bb8      	ldr	r3, [pc, #736]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010278:	721a      	strb	r2, [r3, #8]
   can1_ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_encode(ams_cell_voltages.v1s5);
 801027a:	463b      	mov	r3, r7
 801027c:	ed93 7b08 	vldr	d7, [r3, #32]
 8010280:	eeb0 0a47 	vmov.f32	s0, s14
 8010284:	eef0 0a67 	vmov.f32	s1, s15
 8010288:	f7f4 fa6e 	bl	8004768 <can1_ams_cell_voltages_v1s5_encode>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	4bb1      	ldr	r3, [pc, #708]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010292:	725a      	strb	r2, [r3, #9]
   can1_ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_encode(ams_cell_voltages.v7s5);
 8010294:	463b      	mov	r3, r7
 8010296:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 801029a:	eeb0 0a47 	vmov.f32	s0, s14
 801029e:	eef0 0a67 	vmov.f32	s1, s15
 80102a2:	f7f4 fab9 	bl	8004818 <can1_ams_cell_voltages_v7s5_encode>
 80102a6:	4603      	mov	r3, r0
 80102a8:	461a      	mov	r2, r3
 80102aa:	4bab      	ldr	r3, [pc, #684]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102ac:	729a      	strb	r2, [r3, #10]
   can1_ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_encode(ams_cell_voltages.v1s6);
 80102ae:	463b      	mov	r3, r7
 80102b0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80102b4:	eeb0 0a47 	vmov.f32	s0, s14
 80102b8:	eef0 0a67 	vmov.f32	s1, s15
 80102bc:	f7f4 fb04 	bl	80048c8 <can1_ams_cell_voltages_v1s6_encode>
 80102c0:	4603      	mov	r3, r0
 80102c2:	461a      	mov	r2, r3
 80102c4:	4ba4      	ldr	r3, [pc, #656]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102c6:	72da      	strb	r2, [r3, #11]
   can1_ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_encode(ams_cell_voltages.v7s6);
 80102c8:	463b      	mov	r3, r7
 80102ca:	ed93 7b9a 	vldr	d7, [r3, #616]	; 0x268
 80102ce:	eeb0 0a47 	vmov.f32	s0, s14
 80102d2:	eef0 0a67 	vmov.f32	s1, s15
 80102d6:	f7f4 fb4f 	bl	8004978 <can1_ams_cell_voltages_v7s6_encode>
 80102da:	4603      	mov	r3, r0
 80102dc:	461a      	mov	r2, r3
 80102de:	4b9e      	ldr	r3, [pc, #632]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102e0:	731a      	strb	r2, [r3, #12]
   can1_ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_encode(ams_cell_voltages.v1s7);
 80102e2:	463b      	mov	r3, r7
 80102e4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80102e8:	eeb0 0a47 	vmov.f32	s0, s14
 80102ec:	eef0 0a67 	vmov.f32	s1, s15
 80102f0:	f7f4 fb9a 	bl	8004a28 <can1_ams_cell_voltages_v1s7_encode>
 80102f4:	4603      	mov	r3, r0
 80102f6:	461a      	mov	r2, r3
 80102f8:	4b97      	ldr	r3, [pc, #604]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80102fa:	735a      	strb	r2, [r3, #13]
   can1_ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_encode(ams_cell_voltages.v7s7);
 80102fc:	463b      	mov	r3, r7
 80102fe:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 8010302:	eeb0 0a47 	vmov.f32	s0, s14
 8010306:	eef0 0a67 	vmov.f32	s1, s15
 801030a:	f7f4 fbe5 	bl	8004ad8 <can1_ams_cell_voltages_v7s7_encode>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	4b91      	ldr	r3, [pc, #580]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010314:	739a      	strb	r2, [r3, #14]
   can1_ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_encode(ams_cell_voltages.v1s8);
 8010316:	463b      	mov	r3, r7
 8010318:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 801031c:	eeb0 0a47 	vmov.f32	s0, s14
 8010320:	eef0 0a67 	vmov.f32	s1, s15
 8010324:	f7f4 fc30 	bl	8004b88 <can1_ams_cell_voltages_v1s8_encode>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
 801032c:	4b8a      	ldr	r3, [pc, #552]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801032e:	73da      	strb	r2, [r3, #15]
   can1_ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_encode(ams_cell_voltages.v7s8);
 8010330:	463b      	mov	r3, r7
 8010332:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 8010336:	eeb0 0a47 	vmov.f32	s0, s14
 801033a:	eef0 0a67 	vmov.f32	s1, s15
 801033e:	f7f4 fc7b 	bl	8004c38 <can1_ams_cell_voltages_v7s8_encode>
 8010342:	4603      	mov	r3, r0
 8010344:	461a      	mov	r2, r3
 8010346:	4b84      	ldr	r3, [pc, #528]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010348:	741a      	strb	r2, [r3, #16]
   can1_ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_encode(ams_cell_voltages.v1s9);
 801034a:	463b      	mov	r3, r7
 801034c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8010350:	eeb0 0a47 	vmov.f32	s0, s14
 8010354:	eef0 0a67 	vmov.f32	s1, s15
 8010358:	f7f4 fcc6 	bl	8004ce8 <can1_ams_cell_voltages_v1s9_encode>
 801035c:	4603      	mov	r3, r0
 801035e:	461a      	mov	r2, r3
 8010360:	4b7d      	ldr	r3, [pc, #500]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010362:	745a      	strb	r2, [r3, #17]
   can1_ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_encode(ams_cell_voltages.v7s9);
 8010364:	463b      	mov	r3, r7
 8010366:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 801036a:	eeb0 0a47 	vmov.f32	s0, s14
 801036e:	eef0 0a67 	vmov.f32	s1, s15
 8010372:	f7f4 fd11 	bl	8004d98 <can1_ams_cell_voltages_v7s9_encode>
 8010376:	4603      	mov	r3, r0
 8010378:	461a      	mov	r2, r3
 801037a:	4b77      	ldr	r3, [pc, #476]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801037c:	749a      	strb	r2, [r3, #18]
   can1_ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_encode(ams_cell_voltages.v1s10);
 801037e:	463b      	mov	r3, r7
 8010380:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8010384:	eeb0 0a47 	vmov.f32	s0, s14
 8010388:	eef0 0a67 	vmov.f32	s1, s15
 801038c:	f7f4 fd5c 	bl	8004e48 <can1_ams_cell_voltages_v1s10_encode>
 8010390:	4603      	mov	r3, r0
 8010392:	461a      	mov	r2, r3
 8010394:	4b70      	ldr	r3, [pc, #448]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010396:	74da      	strb	r2, [r3, #19]
   can1_ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_encode(ams_cell_voltages.v7s10);
 8010398:	463b      	mov	r3, r7
 801039a:	ed93 7ba2 	vldr	d7, [r3, #648]	; 0x288
 801039e:	eeb0 0a47 	vmov.f32	s0, s14
 80103a2:	eef0 0a67 	vmov.f32	s1, s15
 80103a6:	f7f4 fda7 	bl	8004ef8 <can1_ams_cell_voltages_v7s10_encode>
 80103aa:	4603      	mov	r3, r0
 80103ac:	461a      	mov	r2, r3
 80103ae:	4b6a      	ldr	r3, [pc, #424]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103b0:	751a      	strb	r2, [r3, #20]
   can1_ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_encode(ams_cell_voltages.v1s11);
 80103b2:	463b      	mov	r3, r7
 80103b4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80103b8:	eeb0 0a47 	vmov.f32	s0, s14
 80103bc:	eef0 0a67 	vmov.f32	s1, s15
 80103c0:	f7f4 fdf2 	bl	8004fa8 <can1_ams_cell_voltages_v1s11_encode>
 80103c4:	4603      	mov	r3, r0
 80103c6:	461a      	mov	r2, r3
 80103c8:	4b63      	ldr	r3, [pc, #396]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103ca:	755a      	strb	r2, [r3, #21]
   can1_ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_encode(ams_cell_voltages.v7s11);
 80103cc:	463b      	mov	r3, r7
 80103ce:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
 80103d2:	eeb0 0a47 	vmov.f32	s0, s14
 80103d6:	eef0 0a67 	vmov.f32	s1, s15
 80103da:	f7f4 fe3d 	bl	8005058 <can1_ams_cell_voltages_v7s11_encode>
 80103de:	4603      	mov	r3, r0
 80103e0:	461a      	mov	r2, r3
 80103e2:	4b5d      	ldr	r3, [pc, #372]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103e4:	759a      	strb	r2, [r3, #22]
   can1_ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_encode(ams_cell_voltages.v1s12);
 80103e6:	463b      	mov	r3, r7
 80103e8:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80103ec:	eeb0 0a47 	vmov.f32	s0, s14
 80103f0:	eef0 0a67 	vmov.f32	s1, s15
 80103f4:	f7f4 fe88 	bl	8005108 <can1_ams_cell_voltages_v1s12_encode>
 80103f8:	4603      	mov	r3, r0
 80103fa:	461a      	mov	r2, r3
 80103fc:	4b56      	ldr	r3, [pc, #344]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80103fe:	75da      	strb	r2, [r3, #23]
   can1_ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_encode(ams_cell_voltages.v7s12);
 8010400:	463b      	mov	r3, r7
 8010402:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 8010406:	eeb0 0a47 	vmov.f32	s0, s14
 801040a:	eef0 0a67 	vmov.f32	s1, s15
 801040e:	f7f4 fed3 	bl	80051b8 <can1_ams_cell_voltages_v7s12_encode>
 8010412:	4603      	mov	r3, r0
 8010414:	461a      	mov	r2, r3
 8010416:	4b50      	ldr	r3, [pc, #320]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010418:	761a      	strb	r2, [r3, #24]
   can1_ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_encode(ams_cell_voltages.v2s1);
 801041a:	463b      	mov	r3, r7
 801041c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8010420:	eeb0 0a47 	vmov.f32	s0, s14
 8010424:	eef0 0a67 	vmov.f32	s1, s15
 8010428:	f7f4 ff1e 	bl	8005268 <can1_ams_cell_voltages_v2s1_encode>
 801042c:	4603      	mov	r3, r0
 801042e:	461a      	mov	r2, r3
 8010430:	4b49      	ldr	r3, [pc, #292]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010432:	765a      	strb	r2, [r3, #25]
   can1_ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_encode(ams_cell_voltages.v8s1);
 8010434:	463b      	mov	r3, r7
 8010436:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 801043a:	eeb0 0a47 	vmov.f32	s0, s14
 801043e:	eef0 0a67 	vmov.f32	s1, s15
 8010442:	f7f4 ff69 	bl	8005318 <can1_ams_cell_voltages_v8s1_encode>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	4b43      	ldr	r3, [pc, #268]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801044c:	769a      	strb	r2, [r3, #26]
   can1_ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_encode(ams_cell_voltages.v2s2);
 801044e:	463b      	mov	r3, r7
 8010450:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8010454:	eeb0 0a47 	vmov.f32	s0, s14
 8010458:	eef0 0a67 	vmov.f32	s1, s15
 801045c:	f7f4 ffb4 	bl	80053c8 <can1_ams_cell_voltages_v2s2_encode>
 8010460:	4603      	mov	r3, r0
 8010462:	461a      	mov	r2, r3
 8010464:	4b3c      	ldr	r3, [pc, #240]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010466:	76da      	strb	r2, [r3, #27]
   can1_ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_encode(ams_cell_voltages.v8s2);
 8010468:	463b      	mov	r3, r7
 801046a:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 801046e:	eeb0 0a47 	vmov.f32	s0, s14
 8010472:	eef0 0a67 	vmov.f32	s1, s15
 8010476:	f7f4 ffff 	bl	8005478 <can1_ams_cell_voltages_v8s2_encode>
 801047a:	4603      	mov	r3, r0
 801047c:	461a      	mov	r2, r3
 801047e:	4b36      	ldr	r3, [pc, #216]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010480:	771a      	strb	r2, [r3, #28]
   can1_ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_encode(ams_cell_voltages.v2s3);
 8010482:	463b      	mov	r3, r7
 8010484:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8010488:	eeb0 0a47 	vmov.f32	s0, s14
 801048c:	eef0 0a67 	vmov.f32	s1, s15
 8010490:	f7f5 f84a 	bl	8005528 <can1_ams_cell_voltages_v2s3_encode>
 8010494:	4603      	mov	r3, r0
 8010496:	461a      	mov	r2, r3
 8010498:	4b2f      	ldr	r3, [pc, #188]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801049a:	775a      	strb	r2, [r3, #29]
   can1_ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_encode(ams_cell_voltages.v8s3);
 801049c:	463b      	mov	r3, r7
 801049e:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 80104a2:	eeb0 0a47 	vmov.f32	s0, s14
 80104a6:	eef0 0a67 	vmov.f32	s1, s15
 80104aa:	f7f5 f895 	bl	80055d8 <can1_ams_cell_voltages_v8s3_encode>
 80104ae:	4603      	mov	r3, r0
 80104b0:	461a      	mov	r2, r3
 80104b2:	4b29      	ldr	r3, [pc, #164]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104b4:	779a      	strb	r2, [r3, #30]
   can1_ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_encode(ams_cell_voltages.v2s4);
 80104b6:	463b      	mov	r3, r7
 80104b8:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80104bc:	eeb0 0a47 	vmov.f32	s0, s14
 80104c0:	eef0 0a67 	vmov.f32	s1, s15
 80104c4:	f7f5 f8e0 	bl	8005688 <can1_ams_cell_voltages_v2s4_encode>
 80104c8:	4603      	mov	r3, r0
 80104ca:	461a      	mov	r2, r3
 80104cc:	4b22      	ldr	r3, [pc, #136]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104ce:	77da      	strb	r2, [r3, #31]
   can1_ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_encode(ams_cell_voltages.v8s4);
 80104d0:	463b      	mov	r3, r7
 80104d2:	ed93 7bae 	vldr	d7, [r3, #696]	; 0x2b8
 80104d6:	eeb0 0a47 	vmov.f32	s0, s14
 80104da:	eef0 0a67 	vmov.f32	s1, s15
 80104de:	f7f5 f92b 	bl	8005738 <can1_ams_cell_voltages_v8s4_encode>
 80104e2:	4603      	mov	r3, r0
 80104e4:	461a      	mov	r2, r3
 80104e6:	4b1c      	ldr	r3, [pc, #112]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 80104e8:	f883 2020 	strb.w	r2, [r3, #32]
   can1_ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_encode(ams_cell_voltages.v2s5);
 80104ec:	463b      	mov	r3, r7
 80104ee:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80104f2:	eeb0 0a47 	vmov.f32	s0, s14
 80104f6:	eef0 0a67 	vmov.f32	s1, s15
 80104fa:	f7f5 f975 	bl	80057e8 <can1_ams_cell_voltages_v2s5_encode>
 80104fe:	4603      	mov	r3, r0
 8010500:	461a      	mov	r2, r3
 8010502:	4b15      	ldr	r3, [pc, #84]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   can1_ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_encode(ams_cell_voltages.v8s5);
 8010508:	463b      	mov	r3, r7
 801050a:	ed93 7bb0 	vldr	d7, [r3, #704]	; 0x2c0
 801050e:	eeb0 0a47 	vmov.f32	s0, s14
 8010512:	eef0 0a67 	vmov.f32	s1, s15
 8010516:	f7f5 f9bf 	bl	8005898 <can1_ams_cell_voltages_v8s5_encode>
 801051a:	4603      	mov	r3, r0
 801051c:	461a      	mov	r2, r3
 801051e:	4b0e      	ldr	r3, [pc, #56]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 8010520:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   can1_ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_encode(ams_cell_voltages.v2s6);
 8010524:	463b      	mov	r3, r7
 8010526:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 801052a:	eeb0 0a47 	vmov.f32	s0, s14
 801052e:	eef0 0a67 	vmov.f32	s1, s15
 8010532:	f7f5 fa09 	bl	8005948 <can1_ams_cell_voltages_v2s6_encode>
 8010536:	4603      	mov	r3, r0
 8010538:	461a      	mov	r2, r3
 801053a:	4b07      	ldr	r3, [pc, #28]	; (8010558 <can1_ams_cell_voltages_transmit+0x3fc>)
 801053c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   can1_ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_encode(ams_cell_voltages.v8s6);
 8010540:	463b      	mov	r3, r7
 8010542:	ed93 7bb2 	vldr	d7, [r3, #712]	; 0x2c8
 8010546:	eeb0 0a47 	vmov.f32	s0, s14
 801054a:	eef0 0a67 	vmov.f32	s1, s15
 801054e:	f7f5 fa53 	bl	80059f8 <can1_ams_cell_voltages_v8s6_encode>
 8010552:	4603      	mov	r3, r0
 8010554:	461a      	mov	r2, r3
 8010556:	e001      	b.n	801055c <can1_ams_cell_voltages_transmit+0x400>
 8010558:	200014f4 	.word	0x200014f4
 801055c:	4bed      	ldr	r3, [pc, #948]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801055e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   can1_ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_encode(ams_cell_voltages.v2s7);
 8010562:	463b      	mov	r3, r7
 8010564:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8010568:	eeb0 0a47 	vmov.f32	s0, s14
 801056c:	eef0 0a67 	vmov.f32	s1, s15
 8010570:	f7f5 fa9a 	bl	8005aa8 <can1_ams_cell_voltages_v2s7_encode>
 8010574:	4603      	mov	r3, r0
 8010576:	461a      	mov	r2, r3
 8010578:	4be6      	ldr	r3, [pc, #920]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801057a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   can1_ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_encode(ams_cell_voltages.v8s7);
 801057e:	463b      	mov	r3, r7
 8010580:	ed93 7bb4 	vldr	d7, [r3, #720]	; 0x2d0
 8010584:	eeb0 0a47 	vmov.f32	s0, s14
 8010588:	eef0 0a67 	vmov.f32	s1, s15
 801058c:	f7f5 fae4 	bl	8005b58 <can1_ams_cell_voltages_v8s7_encode>
 8010590:	4603      	mov	r3, r0
 8010592:	461a      	mov	r2, r3
 8010594:	4bdf      	ldr	r3, [pc, #892]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   can1_ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_encode(ams_cell_voltages.v2s8);
 801059a:	463b      	mov	r3, r7
 801059c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80105a0:	eeb0 0a47 	vmov.f32	s0, s14
 80105a4:	eef0 0a67 	vmov.f32	s1, s15
 80105a8:	f7f5 fb2e 	bl	8005c08 <can1_ams_cell_voltages_v2s8_encode>
 80105ac:	4603      	mov	r3, r0
 80105ae:	461a      	mov	r2, r3
 80105b0:	4bd8      	ldr	r3, [pc, #864]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   can1_ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_encode(ams_cell_voltages.v8s8);
 80105b6:	463b      	mov	r3, r7
 80105b8:	ed93 7bb6 	vldr	d7, [r3, #728]	; 0x2d8
 80105bc:	eeb0 0a47 	vmov.f32	s0, s14
 80105c0:	eef0 0a67 	vmov.f32	s1, s15
 80105c4:	f7f5 fb78 	bl	8005cb8 <can1_ams_cell_voltages_v8s8_encode>
 80105c8:	4603      	mov	r3, r0
 80105ca:	461a      	mov	r2, r3
 80105cc:	4bd1      	ldr	r3, [pc, #836]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   can1_ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_encode(ams_cell_voltages.v2s9);
 80105d2:	463b      	mov	r3, r7
 80105d4:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80105d8:	eeb0 0a47 	vmov.f32	s0, s14
 80105dc:	eef0 0a67 	vmov.f32	s1, s15
 80105e0:	f7f5 fbc2 	bl	8005d68 <can1_ams_cell_voltages_v2s9_encode>
 80105e4:	4603      	mov	r3, r0
 80105e6:	461a      	mov	r2, r3
 80105e8:	4bca      	ldr	r3, [pc, #808]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80105ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   can1_ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_encode(ams_cell_voltages.v8s9);
 80105ee:	463b      	mov	r3, r7
 80105f0:	ed93 7bb8 	vldr	d7, [r3, #736]	; 0x2e0
 80105f4:	eeb0 0a47 	vmov.f32	s0, s14
 80105f8:	eef0 0a67 	vmov.f32	s1, s15
 80105fc:	f7f5 fc0c 	bl	8005e18 <can1_ams_cell_voltages_v8s9_encode>
 8010600:	4603      	mov	r3, r0
 8010602:	461a      	mov	r2, r3
 8010604:	4bc3      	ldr	r3, [pc, #780]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010606:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   can1_ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_encode(ams_cell_voltages.v2s10);
 801060a:	463b      	mov	r3, r7
 801060c:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8010610:	eeb0 0a47 	vmov.f32	s0, s14
 8010614:	eef0 0a67 	vmov.f32	s1, s15
 8010618:	f7f5 fc56 	bl	8005ec8 <can1_ams_cell_voltages_v2s10_encode>
 801061c:	4603      	mov	r3, r0
 801061e:	461a      	mov	r2, r3
 8010620:	4bbc      	ldr	r3, [pc, #752]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010622:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   can1_ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_encode(ams_cell_voltages.v8s10);
 8010626:	463b      	mov	r3, r7
 8010628:	ed93 7bba 	vldr	d7, [r3, #744]	; 0x2e8
 801062c:	eeb0 0a47 	vmov.f32	s0, s14
 8010630:	eef0 0a67 	vmov.f32	s1, s15
 8010634:	f7f5 fca0 	bl	8005f78 <can1_ams_cell_voltages_v8s10_encode>
 8010638:	4603      	mov	r3, r0
 801063a:	461a      	mov	r2, r3
 801063c:	4bb5      	ldr	r3, [pc, #724]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801063e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   can1_ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_encode(ams_cell_voltages.v2s11);
 8010642:	463b      	mov	r3, r7
 8010644:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8010648:	eeb0 0a47 	vmov.f32	s0, s14
 801064c:	eef0 0a67 	vmov.f32	s1, s15
 8010650:	f7f5 fcea 	bl	8006028 <can1_ams_cell_voltages_v2s11_encode>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	4bae      	ldr	r3, [pc, #696]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801065a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   can1_ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_encode(ams_cell_voltages.v8s11);
 801065e:	463b      	mov	r3, r7
 8010660:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 8010664:	eeb0 0a47 	vmov.f32	s0, s14
 8010668:	eef0 0a67 	vmov.f32	s1, s15
 801066c:	f7f5 fd34 	bl	80060d8 <can1_ams_cell_voltages_v8s11_encode>
 8010670:	4603      	mov	r3, r0
 8010672:	461a      	mov	r2, r3
 8010674:	4ba7      	ldr	r3, [pc, #668]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010676:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   can1_ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_encode(ams_cell_voltages.v2s12);
 801067a:	463b      	mov	r3, r7
 801067c:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8010680:	eeb0 0a47 	vmov.f32	s0, s14
 8010684:	eef0 0a67 	vmov.f32	s1, s15
 8010688:	f7f5 fd7e 	bl	8006188 <can1_ams_cell_voltages_v2s12_encode>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	4ba0      	ldr	r3, [pc, #640]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010692:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   can1_ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_encode(ams_cell_voltages.v8s12);
 8010696:	463b      	mov	r3, r7
 8010698:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 801069c:	eeb0 0a47 	vmov.f32	s0, s14
 80106a0:	eef0 0a67 	vmov.f32	s1, s15
 80106a4:	f7f5 fdc8 	bl	8006238 <can1_ams_cell_voltages_v8s12_encode>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	4b99      	ldr	r3, [pc, #612]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   can1_ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_encode(ams_cell_voltages.v3s1);
 80106b2:	463b      	mov	r3, r7
 80106b4:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 80106b8:	eeb0 0a47 	vmov.f32	s0, s14
 80106bc:	eef0 0a67 	vmov.f32	s1, s15
 80106c0:	f7f5 fe12 	bl	80062e8 <can1_ams_cell_voltages_v3s1_encode>
 80106c4:	4603      	mov	r3, r0
 80106c6:	461a      	mov	r2, r3
 80106c8:	4b92      	ldr	r3, [pc, #584]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   can1_ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_encode(ams_cell_voltages.v9s1);
 80106ce:	463b      	mov	r3, r7
 80106d0:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 80106d4:	eeb0 0a47 	vmov.f32	s0, s14
 80106d8:	eef0 0a67 	vmov.f32	s1, s15
 80106dc:	f7f5 fe5c 	bl	8006398 <can1_ams_cell_voltages_v9s1_encode>
 80106e0:	4603      	mov	r3, r0
 80106e2:	461a      	mov	r2, r3
 80106e4:	4b8b      	ldr	r3, [pc, #556]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80106e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   can1_ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_encode(ams_cell_voltages.v3s2);
 80106ea:	463b      	mov	r3, r7
 80106ec:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80106f0:	eeb0 0a47 	vmov.f32	s0, s14
 80106f4:	eef0 0a67 	vmov.f32	s1, s15
 80106f8:	f7f5 fea6 	bl	8006448 <can1_ams_cell_voltages_v3s2_encode>
 80106fc:	4603      	mov	r3, r0
 80106fe:	461a      	mov	r2, r3
 8010700:	4b84      	ldr	r3, [pc, #528]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010702:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   can1_ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_encode(ams_cell_voltages.v9s2);
 8010706:	463b      	mov	r3, r7
 8010708:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 801070c:	eeb0 0a47 	vmov.f32	s0, s14
 8010710:	eef0 0a67 	vmov.f32	s1, s15
 8010714:	f7f5 fef0 	bl	80064f8 <can1_ams_cell_voltages_v9s2_encode>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
 801071c:	4b7d      	ldr	r3, [pc, #500]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801071e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   can1_ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_encode(ams_cell_voltages.v3s3);
 8010722:	463b      	mov	r3, r7
 8010724:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8010728:	eeb0 0a47 	vmov.f32	s0, s14
 801072c:	eef0 0a67 	vmov.f32	s1, s15
 8010730:	f7f5 ff3a 	bl	80065a8 <can1_ams_cell_voltages_v3s3_encode>
 8010734:	4603      	mov	r3, r0
 8010736:	461a      	mov	r2, r3
 8010738:	4b76      	ldr	r3, [pc, #472]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801073a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   can1_ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_encode(ams_cell_voltages.v9s3);
 801073e:	463b      	mov	r3, r7
 8010740:	ed93 7bc4 	vldr	d7, [r3, #784]	; 0x310
 8010744:	eeb0 0a47 	vmov.f32	s0, s14
 8010748:	eef0 0a67 	vmov.f32	s1, s15
 801074c:	f7f5 ff84 	bl	8006658 <can1_ams_cell_voltages_v9s3_encode>
 8010750:	4603      	mov	r3, r0
 8010752:	461a      	mov	r2, r3
 8010754:	4b6f      	ldr	r3, [pc, #444]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010756:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
   can1_ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_encode(ams_cell_voltages.v3s4);
 801075a:	463b      	mov	r3, r7
 801075c:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8010760:	eeb0 0a47 	vmov.f32	s0, s14
 8010764:	eef0 0a67 	vmov.f32	s1, s15
 8010768:	f7f5 ffce 	bl	8006708 <can1_ams_cell_voltages_v3s4_encode>
 801076c:	4603      	mov	r3, r0
 801076e:	461a      	mov	r2, r3
 8010770:	4b68      	ldr	r3, [pc, #416]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010772:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   can1_ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_encode(ams_cell_voltages.v9s4);
 8010776:	463b      	mov	r3, r7
 8010778:	ed93 7bc6 	vldr	d7, [r3, #792]	; 0x318
 801077c:	eeb0 0a47 	vmov.f32	s0, s14
 8010780:	eef0 0a67 	vmov.f32	s1, s15
 8010784:	f7f6 f818 	bl	80067b8 <can1_ams_cell_voltages_v9s4_encode>
 8010788:	4603      	mov	r3, r0
 801078a:	461a      	mov	r2, r3
 801078c:	4b61      	ldr	r3, [pc, #388]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801078e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   can1_ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_encode(ams_cell_voltages.v3s5);
 8010792:	463b      	mov	r3, r7
 8010794:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 8010798:	eeb0 0a47 	vmov.f32	s0, s14
 801079c:	eef0 0a67 	vmov.f32	s1, s15
 80107a0:	f7f6 f862 	bl	8006868 <can1_ams_cell_voltages_v3s5_encode>
 80107a4:	4603      	mov	r3, r0
 80107a6:	461a      	mov	r2, r3
 80107a8:	4b5a      	ldr	r3, [pc, #360]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   can1_ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_encode(ams_cell_voltages.v9s5);
 80107ae:	463b      	mov	r3, r7
 80107b0:	ed93 7bc8 	vldr	d7, [r3, #800]	; 0x320
 80107b4:	eeb0 0a47 	vmov.f32	s0, s14
 80107b8:	eef0 0a67 	vmov.f32	s1, s15
 80107bc:	f7f6 f8ac 	bl	8006918 <can1_ams_cell_voltages_v9s5_encode>
 80107c0:	4603      	mov	r3, r0
 80107c2:	461a      	mov	r2, r3
 80107c4:	4b53      	ldr	r3, [pc, #332]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   can1_ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_encode(ams_cell_voltages.v3s6);
 80107ca:	463b      	mov	r3, r7
 80107cc:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 80107d0:	eeb0 0a47 	vmov.f32	s0, s14
 80107d4:	eef0 0a67 	vmov.f32	s1, s15
 80107d8:	f7f6 f8f6 	bl	80069c8 <can1_ams_cell_voltages_v3s6_encode>
 80107dc:	4603      	mov	r3, r0
 80107de:	461a      	mov	r2, r3
 80107e0:	4b4c      	ldr	r3, [pc, #304]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   can1_ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_encode(ams_cell_voltages.v9s6);
 80107e6:	463b      	mov	r3, r7
 80107e8:	ed93 7bca 	vldr	d7, [r3, #808]	; 0x328
 80107ec:	eeb0 0a47 	vmov.f32	s0, s14
 80107f0:	eef0 0a67 	vmov.f32	s1, s15
 80107f4:	f7f6 f940 	bl	8006a78 <can1_ams_cell_voltages_v9s6_encode>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	4b45      	ldr	r3, [pc, #276]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80107fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   can1_ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_encode(ams_cell_voltages.v3s7);
 8010802:	463b      	mov	r3, r7
 8010804:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8010808:	eeb0 0a47 	vmov.f32	s0, s14
 801080c:	eef0 0a67 	vmov.f32	s1, s15
 8010810:	f7f6 f98a 	bl	8006b28 <can1_ams_cell_voltages_v3s7_encode>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	4b3e      	ldr	r3, [pc, #248]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801081a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   can1_ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_encode(ams_cell_voltages.v9s7);
 801081e:	463b      	mov	r3, r7
 8010820:	ed93 7bcc 	vldr	d7, [r3, #816]	; 0x330
 8010824:	eeb0 0a47 	vmov.f32	s0, s14
 8010828:	eef0 0a67 	vmov.f32	s1, s15
 801082c:	f7f6 f9d4 	bl	8006bd8 <can1_ams_cell_voltages_v9s7_encode>
 8010830:	4603      	mov	r3, r0
 8010832:	461a      	mov	r2, r3
 8010834:	4b37      	ldr	r3, [pc, #220]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   can1_ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_encode(ams_cell_voltages.v3s8);
 801083a:	463b      	mov	r3, r7
 801083c:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8010840:	eeb0 0a47 	vmov.f32	s0, s14
 8010844:	eef0 0a67 	vmov.f32	s1, s15
 8010848:	f7f6 fa1e 	bl	8006c88 <can1_ams_cell_voltages_v3s8_encode>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	4b30      	ldr	r3, [pc, #192]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 8010852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   can1_ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_encode(ams_cell_voltages.v9s8);
 8010856:	463b      	mov	r3, r7
 8010858:	ed93 7bce 	vldr	d7, [r3, #824]	; 0x338
 801085c:	eeb0 0a47 	vmov.f32	s0, s14
 8010860:	eef0 0a67 	vmov.f32	s1, s15
 8010864:	f7f6 fa68 	bl	8006d38 <can1_ams_cell_voltages_v9s8_encode>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	4b29      	ldr	r3, [pc, #164]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801086e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_encode(ams_cell_voltages.v3s9);
 8010872:	463b      	mov	r3, r7
 8010874:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8010878:	eeb0 0a47 	vmov.f32	s0, s14
 801087c:	eef0 0a67 	vmov.f32	s1, s15
 8010880:	f7f6 fab2 	bl	8006de8 <can1_ams_cell_voltages_v3s9_encode>
 8010884:	4603      	mov	r3, r0
 8010886:	461a      	mov	r2, r3
 8010888:	4b22      	ldr	r3, [pc, #136]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 801088a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   can1_ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_encode(ams_cell_voltages.v9s9);
 801088e:	463b      	mov	r3, r7
 8010890:	ed93 7bd0 	vldr	d7, [r3, #832]	; 0x340
 8010894:	eeb0 0a47 	vmov.f32	s0, s14
 8010898:	eef0 0a67 	vmov.f32	s1, s15
 801089c:	f7f6 fafc 	bl	8006e98 <can1_ams_cell_voltages_v9s9_encode>
 80108a0:	4603      	mov	r3, r0
 80108a2:	461a      	mov	r2, r3
 80108a4:	4b1b      	ldr	r3, [pc, #108]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_encode(ams_cell_voltages.v3s10);
 80108aa:	463b      	mov	r3, r7
 80108ac:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 80108b0:	eeb0 0a47 	vmov.f32	s0, s14
 80108b4:	eef0 0a67 	vmov.f32	s1, s15
 80108b8:	f7f6 fb46 	bl	8006f48 <can1_ams_cell_voltages_v3s10_encode>
 80108bc:	4603      	mov	r3, r0
 80108be:	461a      	mov	r2, r3
 80108c0:	4b14      	ldr	r3, [pc, #80]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   can1_ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_encode(ams_cell_voltages.v9s10);
 80108c6:	463b      	mov	r3, r7
 80108c8:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 80108cc:	eeb0 0a47 	vmov.f32	s0, s14
 80108d0:	eef0 0a67 	vmov.f32	s1, s15
 80108d4:	f7f6 fb90 	bl	8006ff8 <can1_ams_cell_voltages_v9s10_encode>
 80108d8:	4603      	mov	r3, r0
 80108da:	461a      	mov	r2, r3
 80108dc:	4b0d      	ldr	r3, [pc, #52]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_encode(ams_cell_voltages.v3s11);
 80108e2:	463b      	mov	r3, r7
 80108e4:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 80108e8:	eeb0 0a47 	vmov.f32	s0, s14
 80108ec:	eef0 0a67 	vmov.f32	s1, s15
 80108f0:	f7f6 fbda 	bl	80070a8 <can1_ams_cell_voltages_v3s11_encode>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	4b06      	ldr	r3, [pc, #24]	; (8010914 <can1_ams_cell_voltages_transmit+0x7b8>)
 80108fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   can1_ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_encode(ams_cell_voltages.v9s11);
 80108fe:	463b      	mov	r3, r7
 8010900:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
 8010904:	eeb0 0a47 	vmov.f32	s0, s14
 8010908:	eef0 0a67 	vmov.f32	s1, s15
 801090c:	f7f6 fc24 	bl	8007158 <can1_ams_cell_voltages_v9s11_encode>
 8010910:	e002      	b.n	8010918 <can1_ams_cell_voltages_transmit+0x7bc>
 8010912:	bf00      	nop
 8010914:	200014f4 	.word	0x200014f4
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	4bed      	ldr	r3, [pc, #948]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 801091e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_encode(ams_cell_voltages.v3s12);
 8010922:	463b      	mov	r3, r7
 8010924:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8010928:	eeb0 0a47 	vmov.f32	s0, s14
 801092c:	eef0 0a67 	vmov.f32	s1, s15
 8010930:	f7f6 fc6a 	bl	8007208 <can1_ams_cell_voltages_v3s12_encode>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	4be6      	ldr	r3, [pc, #920]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 801093a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   can1_ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_encode(ams_cell_voltages.v9s12);
 801093e:	463b      	mov	r3, r7
 8010940:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8010944:	eeb0 0a47 	vmov.f32	s0, s14
 8010948:	eef0 0a67 	vmov.f32	s1, s15
 801094c:	f7f6 fcb4 	bl	80072b8 <can1_ams_cell_voltages_v9s12_encode>
 8010950:	4603      	mov	r3, r0
 8010952:	461a      	mov	r2, r3
 8010954:	4bdf      	ldr	r3, [pc, #892]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_encode(ams_cell_voltages.v4s1);
 801095a:	463b      	mov	r3, r7
 801095c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8010960:	eeb0 0a47 	vmov.f32	s0, s14
 8010964:	eef0 0a67 	vmov.f32	s1, s15
 8010968:	f7f6 fcfe 	bl	8007368 <can1_ams_cell_voltages_v4s1_encode>
 801096c:	4603      	mov	r3, r0
 801096e:	461a      	mov	r2, r3
 8010970:	4bd8      	ldr	r3, [pc, #864]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010972:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   can1_ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_encode(ams_cell_voltages.v10s1);
 8010976:	463b      	mov	r3, r7
 8010978:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
 801097c:	eeb0 0a47 	vmov.f32	s0, s14
 8010980:	eef0 0a67 	vmov.f32	s1, s15
 8010984:	f7f6 fd48 	bl	8007418 <can1_ams_cell_voltages_v10s1_encode>
 8010988:	4603      	mov	r3, r0
 801098a:	461a      	mov	r2, r3
 801098c:	4bd1      	ldr	r3, [pc, #836]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 801098e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_encode(ams_cell_voltages.v4s2);
 8010992:	463b      	mov	r3, r7
 8010994:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8010998:	eeb0 0a47 	vmov.f32	s0, s14
 801099c:	eef0 0a67 	vmov.f32	s1, s15
 80109a0:	f7f6 fd92 	bl	80074c8 <can1_ams_cell_voltages_v4s2_encode>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	4bca      	ldr	r3, [pc, #808]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109aa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
   can1_ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_encode(ams_cell_voltages.v10s2);
 80109ae:	463b      	mov	r3, r7
 80109b0:	ed93 7bda 	vldr	d7, [r3, #872]	; 0x368
 80109b4:	eeb0 0a47 	vmov.f32	s0, s14
 80109b8:	eef0 0a67 	vmov.f32	s1, s15
 80109bc:	f7f6 fddc 	bl	8007578 <can1_ams_cell_voltages_v10s2_encode>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	4bc3      	ldr	r3, [pc, #780]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_encode(ams_cell_voltages.v4s3);
 80109ca:	463b      	mov	r3, r7
 80109cc:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80109d0:	eeb0 0a47 	vmov.f32	s0, s14
 80109d4:	eef0 0a67 	vmov.f32	s1, s15
 80109d8:	f7f6 fe26 	bl	8007628 <can1_ams_cell_voltages_v4s3_encode>
 80109dc:	4603      	mov	r3, r0
 80109de:	461a      	mov	r2, r3
 80109e0:	4bbc      	ldr	r3, [pc, #752]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
   can1_ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_encode(ams_cell_voltages.v10s3);
 80109e6:	463b      	mov	r3, r7
 80109e8:	ed93 7bdc 	vldr	d7, [r3, #880]	; 0x370
 80109ec:	eeb0 0a47 	vmov.f32	s0, s14
 80109f0:	eef0 0a67 	vmov.f32	s1, s15
 80109f4:	f7f6 fe70 	bl	80076d8 <can1_ams_cell_voltages_v10s3_encode>
 80109f8:	4603      	mov	r3, r0
 80109fa:	461a      	mov	r2, r3
 80109fc:	4bb5      	ldr	r3, [pc, #724]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 80109fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_encode(ams_cell_voltages.v4s4);
 8010a02:	463b      	mov	r3, r7
 8010a04:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8010a08:	eeb0 0a47 	vmov.f32	s0, s14
 8010a0c:	eef0 0a67 	vmov.f32	s1, s15
 8010a10:	f7f6 feba 	bl	8007788 <can1_ams_cell_voltages_v4s4_encode>
 8010a14:	4603      	mov	r3, r0
 8010a16:	461a      	mov	r2, r3
 8010a18:	4bae      	ldr	r3, [pc, #696]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a1a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
   can1_ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_encode(ams_cell_voltages.v10s4);
 8010a1e:	463b      	mov	r3, r7
 8010a20:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
 8010a24:	eeb0 0a47 	vmov.f32	s0, s14
 8010a28:	eef0 0a67 	vmov.f32	s1, s15
 8010a2c:	f7f6 ff04 	bl	8007838 <can1_ams_cell_voltages_v10s4_encode>
 8010a30:	4603      	mov	r3, r0
 8010a32:	461a      	mov	r2, r3
 8010a34:	4ba7      	ldr	r3, [pc, #668]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_encode(ams_cell_voltages.v4s5);
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8010a40:	eeb0 0a47 	vmov.f32	s0, s14
 8010a44:	eef0 0a67 	vmov.f32	s1, s15
 8010a48:	f7f6 ff4e 	bl	80078e8 <can1_ams_cell_voltages_v4s5_encode>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	461a      	mov	r2, r3
 8010a50:	4ba0      	ldr	r3, [pc, #640]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
   can1_ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_encode(ams_cell_voltages.v10s5);
 8010a56:	463b      	mov	r3, r7
 8010a58:	ed93 7be0 	vldr	d7, [r3, #896]	; 0x380
 8010a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8010a60:	eef0 0a67 	vmov.f32	s1, s15
 8010a64:	f7f6 ff98 	bl	8007998 <can1_ams_cell_voltages_v10s5_encode>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	4b99      	ldr	r3, [pc, #612]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_encode(ams_cell_voltages.v4s6);
 8010a72:	463b      	mov	r3, r7
 8010a74:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8010a78:	eeb0 0a47 	vmov.f32	s0, s14
 8010a7c:	eef0 0a67 	vmov.f32	s1, s15
 8010a80:	f7f6 ffe2 	bl	8007a48 <can1_ams_cell_voltages_v4s6_encode>
 8010a84:	4603      	mov	r3, r0
 8010a86:	461a      	mov	r2, r3
 8010a88:	4b92      	ldr	r3, [pc, #584]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010a8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
   can1_ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_encode(ams_cell_voltages.v10s6);
 8010a8e:	463b      	mov	r3, r7
 8010a90:	ed93 7be2 	vldr	d7, [r3, #904]	; 0x388
 8010a94:	eeb0 0a47 	vmov.f32	s0, s14
 8010a98:	eef0 0a67 	vmov.f32	s1, s15
 8010a9c:	f7f7 f82c 	bl	8007af8 <can1_ams_cell_voltages_v10s6_encode>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	4b8b      	ldr	r3, [pc, #556]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_encode(ams_cell_voltages.v4s7);
 8010aaa:	463b      	mov	r3, r7
 8010aac:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8010ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ab4:	eef0 0a67 	vmov.f32	s1, s15
 8010ab8:	f7f7 f876 	bl	8007ba8 <can1_ams_cell_voltages_v4s7_encode>
 8010abc:	4603      	mov	r3, r0
 8010abe:	461a      	mov	r2, r3
 8010ac0:	4b84      	ldr	r3, [pc, #528]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ac2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
   can1_ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_encode(ams_cell_voltages.v10s7);
 8010ac6:	463b      	mov	r3, r7
 8010ac8:	ed93 7be4 	vldr	d7, [r3, #912]	; 0x390
 8010acc:	eeb0 0a47 	vmov.f32	s0, s14
 8010ad0:	eef0 0a67 	vmov.f32	s1, s15
 8010ad4:	f7f7 f8c0 	bl	8007c58 <can1_ams_cell_voltages_v10s7_encode>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	4b7d      	ldr	r3, [pc, #500]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ade:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_encode(ams_cell_voltages.v4s8);
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8010ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8010aec:	eef0 0a67 	vmov.f32	s1, s15
 8010af0:	f7f7 f90a 	bl	8007d08 <can1_ams_cell_voltages_v4s8_encode>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b76      	ldr	r3, [pc, #472]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010afa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
   can1_ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_encode(ams_cell_voltages.v10s8);
 8010afe:	463b      	mov	r3, r7
 8010b00:	ed93 7be6 	vldr	d7, [r3, #920]	; 0x398
 8010b04:	eeb0 0a47 	vmov.f32	s0, s14
 8010b08:	eef0 0a67 	vmov.f32	s1, s15
 8010b0c:	f7f7 f954 	bl	8007db8 <can1_ams_cell_voltages_v10s8_encode>
 8010b10:	4603      	mov	r3, r0
 8010b12:	461a      	mov	r2, r3
 8010b14:	4b6f      	ldr	r3, [pc, #444]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_encode(ams_cell_voltages.v4s9);
 8010b1a:	463b      	mov	r3, r7
 8010b1c:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8010b20:	eeb0 0a47 	vmov.f32	s0, s14
 8010b24:	eef0 0a67 	vmov.f32	s1, s15
 8010b28:	f7f7 f99e 	bl	8007e68 <can1_ams_cell_voltages_v4s9_encode>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4b68      	ldr	r3, [pc, #416]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
   can1_ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_encode(ams_cell_voltages.v10s9);
 8010b36:	463b      	mov	r3, r7
 8010b38:	ed93 7be8 	vldr	d7, [r3, #928]	; 0x3a0
 8010b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010b40:	eef0 0a67 	vmov.f32	s1, s15
 8010b44:	f7f7 f9e8 	bl	8007f18 <can1_ams_cell_voltages_v10s9_encode>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	4b61      	ldr	r3, [pc, #388]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b4e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_encode(ams_cell_voltages.v4s10);
 8010b52:	463b      	mov	r3, r7
 8010b54:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8010b58:	eeb0 0a47 	vmov.f32	s0, s14
 8010b5c:	eef0 0a67 	vmov.f32	s1, s15
 8010b60:	f7f7 fa32 	bl	8007fc8 <can1_ams_cell_voltages_v4s10_encode>
 8010b64:	4603      	mov	r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	4b5a      	ldr	r3, [pc, #360]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b6a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
   can1_ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_encode(ams_cell_voltages.v10s10);
 8010b6e:	463b      	mov	r3, r7
 8010b70:	ed93 7bea 	vldr	d7, [r3, #936]	; 0x3a8
 8010b74:	eeb0 0a47 	vmov.f32	s0, s14
 8010b78:	eef0 0a67 	vmov.f32	s1, s15
 8010b7c:	f7f7 fa7c 	bl	8008078 <can1_ams_cell_voltages_v10s10_encode>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	4b53      	ldr	r3, [pc, #332]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_encode(ams_cell_voltages.v4s11);
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8010b90:	eeb0 0a47 	vmov.f32	s0, s14
 8010b94:	eef0 0a67 	vmov.f32	s1, s15
 8010b98:	f7f7 fac6 	bl	8008128 <can1_ams_cell_voltages_v4s11_encode>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	4b4c      	ldr	r3, [pc, #304]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   can1_ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_encode(ams_cell_voltages.v10s11);
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	ed93 7bec 	vldr	d7, [r3, #944]	; 0x3b0
 8010bac:	eeb0 0a47 	vmov.f32	s0, s14
 8010bb0:	eef0 0a67 	vmov.f32	s1, s15
 8010bb4:	f7f7 fb10 	bl	80081d8 <can1_ams_cell_voltages_v10s11_encode>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4b45      	ldr	r3, [pc, #276]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bbe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_encode(ams_cell_voltages.v4s12);
 8010bc2:	463b      	mov	r3, r7
 8010bc4:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8010bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8010bcc:	eef0 0a67 	vmov.f32	s1, s15
 8010bd0:	f7f7 fb5a 	bl	8008288 <can1_ams_cell_voltages_v4s12_encode>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b3e      	ldr	r3, [pc, #248]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bda:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
   can1_ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_encode(ams_cell_voltages.v10s12);
 8010bde:	463b      	mov	r3, r7
 8010be0:	ed93 7bee 	vldr	d7, [r3, #952]	; 0x3b8
 8010be4:	eeb0 0a47 	vmov.f32	s0, s14
 8010be8:	eef0 0a67 	vmov.f32	s1, s15
 8010bec:	f7f7 fba4 	bl	8008338 <can1_ams_cell_voltages_v10s12_encode>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4b37      	ldr	r3, [pc, #220]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010bf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_encode(ams_cell_voltages.v5s1);
 8010bfa:	463b      	mov	r3, r7
 8010bfc:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8010c00:	eeb0 0a47 	vmov.f32	s0, s14
 8010c04:	eef0 0a67 	vmov.f32	s1, s15
 8010c08:	f7f7 fbee 	bl	80083e8 <can1_ams_cell_voltages_v5s1_encode>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	4b30      	ldr	r3, [pc, #192]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c12:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
   can1_ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_encode(ams_cell_voltages.v11s1);
 8010c16:	463b      	mov	r3, r7
 8010c18:	ed93 7bf0 	vldr	d7, [r3, #960]	; 0x3c0
 8010c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c20:	eef0 0a67 	vmov.f32	s1, s15
 8010c24:	f7f7 fc38 	bl	8008498 <can1_ams_cell_voltages_v11s1_encode>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	4b29      	ldr	r3, [pc, #164]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c2e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_encode(ams_cell_voltages.v5s2);
 8010c32:	463b      	mov	r3, r7
 8010c34:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8010c38:	eeb0 0a47 	vmov.f32	s0, s14
 8010c3c:	eef0 0a67 	vmov.f32	s1, s15
 8010c40:	f7f7 fc82 	bl	8008548 <can1_ams_cell_voltages_v5s2_encode>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
 8010c48:	4b22      	ldr	r3, [pc, #136]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c4a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
   can1_ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_encode(ams_cell_voltages.v5s3);
 8010c4e:	463b      	mov	r3, r7
 8010c50:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8010c54:	eeb0 0a47 	vmov.f32	s0, s14
 8010c58:	eef0 0a67 	vmov.f32	s1, s15
 8010c5c:	f7f7 fccc 	bl	80085f8 <can1_ams_cell_voltages_v5s3_encode>
 8010c60:	4603      	mov	r3, r0
 8010c62:	461a      	mov	r2, r3
 8010c64:	4b1b      	ldr	r3, [pc, #108]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c66:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_encode(ams_cell_voltages.v11s3);
 8010c6a:	463b      	mov	r3, r7
 8010c6c:	ed93 7bf2 	vldr	d7, [r3, #968]	; 0x3c8
 8010c70:	eeb0 0a47 	vmov.f32	s0, s14
 8010c74:	eef0 0a67 	vmov.f32	s1, s15
 8010c78:	f7f7 fd16 	bl	80086a8 <can1_ams_cell_voltages_v11s3_encode>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	461a      	mov	r2, r3
 8010c80:	4b14      	ldr	r3, [pc, #80]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c82:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   can1_ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_encode(ams_cell_voltages.v5s4);
 8010c86:	463b      	mov	r3, r7
 8010c88:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8010c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8010c90:	eef0 0a67 	vmov.f32	s1, s15
 8010c94:	f7f7 fd60 	bl	8008758 <can1_ams_cell_voltages_v5s4_encode>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	4b0d      	ldr	r3, [pc, #52]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010c9e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_encode(ams_cell_voltages.v5s5);
 8010ca2:	463b      	mov	r3, r7
 8010ca4:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8010ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8010cac:	eef0 0a67 	vmov.f32	s1, s15
 8010cb0:	f7f7 fdaa 	bl	8008808 <can1_ams_cell_voltages_v5s5_encode>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	4b06      	ldr	r3, [pc, #24]	; (8010cd4 <can1_ams_cell_voltages_transmit+0xb78>)
 8010cba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   can1_ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_encode(ams_cell_voltages.v11s5);
 8010cbe:	463b      	mov	r3, r7
 8010cc0:	ed93 7bf4 	vldr	d7, [r3, #976]	; 0x3d0
 8010cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8010cc8:	eef0 0a67 	vmov.f32	s1, s15
 8010ccc:	f7f7 fdf4 	bl	80088b8 <can1_ams_cell_voltages_v11s5_encode>
 8010cd0:	e002      	b.n	8010cd8 <can1_ams_cell_voltages_transmit+0xb7c>
 8010cd2:	bf00      	nop
 8010cd4:	200014f4 	.word	0x200014f4
 8010cd8:	4603      	mov	r3, r0
 8010cda:	461a      	mov	r2, r3
 8010cdc:	4be0      	ldr	r3, [pc, #896]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010cde:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_encode(ams_cell_voltages.v5s6);
 8010ce2:	463b      	mov	r3, r7
 8010ce4:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8010ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8010cec:	eef0 0a67 	vmov.f32	s1, s15
 8010cf0:	f7f7 fe3a 	bl	8008968 <can1_ams_cell_voltages_v5s6_encode>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	4bd9      	ldr	r3, [pc, #868]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010cfa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   can1_ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_encode(ams_cell_voltages.v5s7);
 8010cfe:	463b      	mov	r3, r7
 8010d00:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8010d04:	eeb0 0a47 	vmov.f32	s0, s14
 8010d08:	eef0 0a67 	vmov.f32	s1, s15
 8010d0c:	f7f7 fe84 	bl	8008a18 <can1_ams_cell_voltages_v5s7_encode>
 8010d10:	4603      	mov	r3, r0
 8010d12:	461a      	mov	r2, r3
 8010d14:	4bd2      	ldr	r3, [pc, #840]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d16:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_encode(ams_cell_voltages.v11s7);
 8010d1a:	463b      	mov	r3, r7
 8010d1c:	ed93 7bf6 	vldr	d7, [r3, #984]	; 0x3d8
 8010d20:	eeb0 0a47 	vmov.f32	s0, s14
 8010d24:	eef0 0a67 	vmov.f32	s1, s15
 8010d28:	f7f7 fece 	bl	8008ac8 <can1_ams_cell_voltages_v11s7_encode>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	461a      	mov	r2, r3
 8010d30:	4bcb      	ldr	r3, [pc, #812]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d32:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
   can1_ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_encode(ams_cell_voltages.v5s8);
 8010d36:	463b      	mov	r3, r7
 8010d38:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8010d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8010d40:	eef0 0a67 	vmov.f32	s1, s15
 8010d44:	f7f7 ff18 	bl	8008b78 <can1_ams_cell_voltages_v5s8_encode>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	4bc4      	ldr	r3, [pc, #784]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_encode(ams_cell_voltages.v5s9);
 8010d52:	463b      	mov	r3, r7
 8010d54:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8010d58:	eeb0 0a47 	vmov.f32	s0, s14
 8010d5c:	eef0 0a67 	vmov.f32	s1, s15
 8010d60:	f7f7 ff62 	bl	8008c28 <can1_ams_cell_voltages_v5s9_encode>
 8010d64:	4603      	mov	r3, r0
 8010d66:	461a      	mov	r2, r3
 8010d68:	4bbd      	ldr	r3, [pc, #756]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d6a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
   can1_ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_encode(ams_cell_voltages.v11s9);
 8010d6e:	463b      	mov	r3, r7
 8010d70:	ed93 7bf8 	vldr	d7, [r3, #992]	; 0x3e0
 8010d74:	eeb0 0a47 	vmov.f32	s0, s14
 8010d78:	eef0 0a67 	vmov.f32	s1, s15
 8010d7c:	f7f7 ffac 	bl	8008cd8 <can1_ams_cell_voltages_v11s9_encode>
 8010d80:	4603      	mov	r3, r0
 8010d82:	461a      	mov	r2, r3
 8010d84:	4bb6      	ldr	r3, [pc, #728]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010d86:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_encode(ams_cell_voltages.v5s10);
 8010d8a:	463b      	mov	r3, r7
 8010d8c:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8010d90:	eeb0 0a47 	vmov.f32	s0, s14
 8010d94:	eef0 0a67 	vmov.f32	s1, s15
 8010d98:	f7f7 fff6 	bl	8008d88 <can1_ams_cell_voltages_v5s10_encode>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	461a      	mov	r2, r3
 8010da0:	4baf      	ldr	r3, [pc, #700]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010da2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
   can1_ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_encode(ams_cell_voltages.v5s11);
 8010da6:	463b      	mov	r3, r7
 8010da8:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8010dac:	eeb0 0a47 	vmov.f32	s0, s14
 8010db0:	eef0 0a67 	vmov.f32	s1, s15
 8010db4:	f7f8 f840 	bl	8008e38 <can1_ams_cell_voltages_v5s11_encode>
 8010db8:	4603      	mov	r3, r0
 8010dba:	461a      	mov	r2, r3
 8010dbc:	4ba8      	ldr	r3, [pc, #672]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_encode(ams_cell_voltages.v11s11);
 8010dc2:	463b      	mov	r3, r7
 8010dc4:	ed93 7bfa 	vldr	d7, [r3, #1000]	; 0x3e8
 8010dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8010dcc:	eef0 0a67 	vmov.f32	s1, s15
 8010dd0:	f7f8 f88a 	bl	8008ee8 <can1_ams_cell_voltages_v11s11_encode>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4ba1      	ldr	r3, [pc, #644]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010dda:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
   can1_ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_encode(ams_cell_voltages.v5s12);
 8010dde:	463b      	mov	r3, r7
 8010de0:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8010de4:	eeb0 0a47 	vmov.f32	s0, s14
 8010de8:	eef0 0a67 	vmov.f32	s1, s15
 8010dec:	f7f8 f8d4 	bl	8008f98 <can1_ams_cell_voltages_v5s12_encode>
 8010df0:	4603      	mov	r3, r0
 8010df2:	461a      	mov	r2, r3
 8010df4:	4b9a      	ldr	r3, [pc, #616]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010df6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_encode(ams_cell_voltages.v6s1);
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8010e00:	eeb0 0a47 	vmov.f32	s0, s14
 8010e04:	eef0 0a67 	vmov.f32	s1, s15
 8010e08:	f7f8 f91e 	bl	8009048 <can1_ams_cell_voltages_v6s1_encode>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	4b93      	ldr	r3, [pc, #588]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e12:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
   can1_ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_encode(ams_cell_voltages.v6s2);
 8010e16:	463b      	mov	r3, r7
 8010e18:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8010e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e20:	eef0 0a67 	vmov.f32	s1, s15
 8010e24:	f7f8 f968 	bl	80090f8 <can1_ams_cell_voltages_v6s2_encode>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	4b8c      	ldr	r3, [pc, #560]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_encode(ams_cell_voltages.v6s3);
 8010e32:	463b      	mov	r3, r7
 8010e34:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8010e38:	eeb0 0a47 	vmov.f32	s0, s14
 8010e3c:	eef0 0a67 	vmov.f32	s1, s15
 8010e40:	f7f8 f9b2 	bl	80091a8 <can1_ams_cell_voltages_v6s3_encode>
 8010e44:	4603      	mov	r3, r0
 8010e46:	461a      	mov	r2, r3
 8010e48:	4b85      	ldr	r3, [pc, #532]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e4a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
   can1_ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_encode(ams_cell_voltages.v6s4);
 8010e4e:	463b      	mov	r3, r7
 8010e50:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8010e54:	eeb0 0a47 	vmov.f32	s0, s14
 8010e58:	eef0 0a67 	vmov.f32	s1, s15
 8010e5c:	f7f8 f9fc 	bl	8009258 <can1_ams_cell_voltages_v6s4_encode>
 8010e60:	4603      	mov	r3, r0
 8010e62:	461a      	mov	r2, r3
 8010e64:	4b7e      	ldr	r3, [pc, #504]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e66:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_encode(ams_cell_voltages.v6s5);
 8010e6a:	463b      	mov	r3, r7
 8010e6c:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 8010e70:	eeb0 0a47 	vmov.f32	s0, s14
 8010e74:	eef0 0a67 	vmov.f32	s1, s15
 8010e78:	f7f8 fa46 	bl	8009308 <can1_ams_cell_voltages_v6s5_encode>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	461a      	mov	r2, r3
 8010e80:	4b77      	ldr	r3, [pc, #476]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e82:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
   can1_ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_encode(ams_cell_voltages.v6s6);
 8010e86:	463b      	mov	r3, r7
 8010e88:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
 8010e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e90:	eef0 0a67 	vmov.f32	s1, s15
 8010e94:	f7f8 fa90 	bl	80093b8 <can1_ams_cell_voltages_v6s6_encode>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	4b70      	ldr	r3, [pc, #448]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   can1_ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_encode(ams_cell_voltages.v6s7);
 8010ea2:	463b      	mov	r3, r7
 8010ea4:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8010ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8010eac:	eef0 0a67 	vmov.f32	s1, s15
 8010eb0:	f7f8 fada 	bl	8009468 <can1_ams_cell_voltages_v6s7_encode>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4b69      	ldr	r3, [pc, #420]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010eba:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   can1_ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_encode(ams_cell_voltages.v6s8);
 8010ebe:	463b      	mov	r3, r7
 8010ec0:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 8010ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8010ec8:	eef0 0a67 	vmov.f32	s1, s15
 8010ecc:	f7f8 fb24 	bl	8009518 <can1_ams_cell_voltages_v6s8_encode>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	4b62      	ldr	r3, [pc, #392]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ed6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   can1_ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_encode(ams_cell_voltages.v6s9);
 8010eda:	463b      	mov	r3, r7
 8010edc:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8010ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ee4:	eef0 0a67 	vmov.f32	s1, s15
 8010ee8:	f7f8 fb6e 	bl	80095c8 <can1_ams_cell_voltages_v6s9_encode>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4b5b      	ldr	r3, [pc, #364]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010ef2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   can1_ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_encode(ams_cell_voltages.v6s10);
 8010ef6:	463b      	mov	r3, r7
 8010ef8:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 8010efc:	eeb0 0a47 	vmov.f32	s0, s14
 8010f00:	eef0 0a67 	vmov.f32	s1, s15
 8010f04:	f7f8 fbb8 	bl	8009678 <can1_ams_cell_voltages_v6s10_encode>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4b54      	ldr	r3, [pc, #336]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   can1_ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_encode(ams_cell_voltages.v6s11);
 8010f12:	463b      	mov	r3, r7
 8010f14:	ed93 7b8c 	vldr	d7, [r3, #560]	; 0x230
 8010f18:	eeb0 0a47 	vmov.f32	s0, s14
 8010f1c:	eef0 0a67 	vmov.f32	s1, s15
 8010f20:	f7f8 fc02 	bl	8009728 <can1_ams_cell_voltages_v6s11_encode>
 8010f24:	4603      	mov	r3, r0
 8010f26:	461a      	mov	r2, r3
 8010f28:	4b4d      	ldr	r3, [pc, #308]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f2a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   can1_ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_encode(ams_cell_voltages.v6s12);
 8010f2e:	463b      	mov	r3, r7
 8010f30:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 8010f34:	eeb0 0a47 	vmov.f32	s0, s14
 8010f38:	eef0 0a67 	vmov.f32	s1, s15
 8010f3c:	f7f8 fc4c 	bl	80097d8 <can1_ams_cell_voltages_v6s12_encode>
 8010f40:	4603      	mov	r3, r0
 8010f42:	461a      	mov	r2, r3
 8010f44:	4b46      	ldr	r3, [pc, #280]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f46:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

       can1_ams_cell_voltages.voltage_multiplexor = 0;
 8010f4a:	4b45      	ldr	r3, [pc, #276]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010f50:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f54:	2207      	movs	r2, #7
 8010f56:	4942      	ldr	r1, [pc, #264]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f1 f933 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010f5e:	bf00      	nop
 8010f60:	4b40      	ldr	r3, [pc, #256]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4618      	mov	r0, r3
 8010f66:	f014 fdc2 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0f7      	beq.n	8010f60 <can1_ams_cell_voltages_transmit+0xe04>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010f70:	4b3c      	ldr	r3, [pc, #240]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010f72:	6818      	ldr	r0, [r3, #0]
 8010f74:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010f78:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010f7c:	4b3a      	ldr	r3, [pc, #232]	; (8011068 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010f7e:	f014 fcdb 	bl	8025938 <HAL_CAN_AddTxMessage>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <can1_ams_cell_voltages_transmit+0xe30>
           Error_Handler();
 8010f88:	f006 fc2e 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 1;
 8010f8c:	4b34      	ldr	r3, [pc, #208]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f8e:	2201      	movs	r2, #1
 8010f90:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010f92:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010f96:	2207      	movs	r2, #7
 8010f98:	4931      	ldr	r1, [pc, #196]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7f1 f912 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010fa0:	bf00      	nop
 8010fa2:	4b30      	ldr	r3, [pc, #192]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f014 fda1 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d0f7      	beq.n	8010fa2 <can1_ams_cell_voltages_transmit+0xe46>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010fb2:	4b2c      	ldr	r3, [pc, #176]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010fb4:	6818      	ldr	r0, [r3, #0]
 8010fb6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010fba:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8010fbe:	4b2a      	ldr	r3, [pc, #168]	; (8011068 <can1_ams_cell_voltages_transmit+0xf0c>)
 8010fc0:	f014 fcba 	bl	8025938 <HAL_CAN_AddTxMessage>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d001      	beq.n	8010fce <can1_ams_cell_voltages_transmit+0xe72>
           Error_Handler();
 8010fca:	f006 fc0d 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 2;
 8010fce:	4b24      	ldr	r3, [pc, #144]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010fd0:	2202      	movs	r2, #2
 8010fd2:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8010fd4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010fd8:	2207      	movs	r2, #7
 8010fda:	4921      	ldr	r1, [pc, #132]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7f1 f8f1 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8010fe2:	bf00      	nop
 8010fe4:	4b1f      	ldr	r3, [pc, #124]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f014 fd80 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d0f7      	beq.n	8010fe4 <can1_ams_cell_voltages_transmit+0xe88>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8010ff4:	4b1b      	ldr	r3, [pc, #108]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8010ff6:	6818      	ldr	r0, [r3, #0]
 8010ff8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8010ffc:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011000:	4b19      	ldr	r3, [pc, #100]	; (8011068 <can1_ams_cell_voltages_transmit+0xf0c>)
 8011002:	f014 fc99 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <can1_ams_cell_voltages_transmit+0xeb4>
           Error_Handler();
 801100c:	f006 fbec 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 3;
 8011010:	4b13      	ldr	r3, [pc, #76]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8011012:	2203      	movs	r2, #3
 8011014:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011016:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801101a:	2207      	movs	r2, #7
 801101c:	4910      	ldr	r1, [pc, #64]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 801101e:	4618      	mov	r0, r3
 8011020:	f7f1 f8d0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011024:	bf00      	nop
 8011026:	4b0f      	ldr	r3, [pc, #60]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4618      	mov	r0, r3
 801102c:	f014 fd5f 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d0f7      	beq.n	8011026 <can1_ams_cell_voltages_transmit+0xeca>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011036:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <can1_ams_cell_voltages_transmit+0xf08>)
 8011038:	6818      	ldr	r0, [r3, #0]
 801103a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801103e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011042:	4b09      	ldr	r3, [pc, #36]	; (8011068 <can1_ams_cell_voltages_transmit+0xf0c>)
 8011044:	f014 fc78 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <can1_ams_cell_voltages_transmit+0xef6>
           Error_Handler();
 801104e:	f006 fbcb 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 4;
 8011052:	4b03      	ldr	r3, [pc, #12]	; (8011060 <can1_ams_cell_voltages_transmit+0xf04>)
 8011054:	2204      	movs	r2, #4
 8011056:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011058:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801105c:	e006      	b.n	801106c <can1_ams_cell_voltages_transmit+0xf10>
 801105e:	bf00      	nop
 8011060:	200014f4 	.word	0x200014f4
 8011064:	20001630 	.word	0x20001630
 8011068:	200014cc 	.word	0x200014cc
 801106c:	2207      	movs	r2, #7
 801106e:	49c7      	ldr	r1, [pc, #796]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011070:	4618      	mov	r0, r3
 8011072:	f7f1 f8a7 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011076:	bf00      	nop
 8011078:	4bc5      	ldr	r3, [pc, #788]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4618      	mov	r0, r3
 801107e:	f014 fd36 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d0f7      	beq.n	8011078 <can1_ams_cell_voltages_transmit+0xf1c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011088:	4bc1      	ldr	r3, [pc, #772]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801108a:	6818      	ldr	r0, [r3, #0]
 801108c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011090:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011094:	4bbf      	ldr	r3, [pc, #764]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 8011096:	f014 fc4f 	bl	8025938 <HAL_CAN_AddTxMessage>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <can1_ams_cell_voltages_transmit+0xf48>
           Error_Handler();
 80110a0:	f006 fba2 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 5;
 80110a4:	4bb9      	ldr	r3, [pc, #740]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80110a6:	2205      	movs	r2, #5
 80110a8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80110aa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80110ae:	2207      	movs	r2, #7
 80110b0:	49b6      	ldr	r1, [pc, #728]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7f1 f886 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80110b8:	bf00      	nop
 80110ba:	4bb5      	ldr	r3, [pc, #724]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4618      	mov	r0, r3
 80110c0:	f014 fd15 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d0f7      	beq.n	80110ba <can1_ams_cell_voltages_transmit+0xf5e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80110ca:	4bb1      	ldr	r3, [pc, #708]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80110cc:	6818      	ldr	r0, [r3, #0]
 80110ce:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80110d2:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80110d6:	4baf      	ldr	r3, [pc, #700]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 80110d8:	f014 fc2e 	bl	8025938 <HAL_CAN_AddTxMessage>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d001      	beq.n	80110e6 <can1_ams_cell_voltages_transmit+0xf8a>
           Error_Handler();
 80110e2:	f006 fb81 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 6;
 80110e6:	4ba9      	ldr	r3, [pc, #676]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80110e8:	2206      	movs	r2, #6
 80110ea:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80110ec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80110f0:	2207      	movs	r2, #7
 80110f2:	49a6      	ldr	r1, [pc, #664]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7f1 f865 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80110fa:	bf00      	nop
 80110fc:	4ba4      	ldr	r3, [pc, #656]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4618      	mov	r0, r3
 8011102:	f014 fcf4 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d0f7      	beq.n	80110fc <can1_ams_cell_voltages_transmit+0xfa0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801110c:	4ba0      	ldr	r3, [pc, #640]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011114:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011118:	4b9e      	ldr	r3, [pc, #632]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 801111a:	f014 fc0d 	bl	8025938 <HAL_CAN_AddTxMessage>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <can1_ams_cell_voltages_transmit+0xfcc>
           Error_Handler();
 8011124:	f006 fb60 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 7;
 8011128:	4b98      	ldr	r3, [pc, #608]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 801112a:	2207      	movs	r2, #7
 801112c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801112e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011132:	2207      	movs	r2, #7
 8011134:	4995      	ldr	r1, [pc, #596]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011136:	4618      	mov	r0, r3
 8011138:	f7f1 f844 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801113c:	bf00      	nop
 801113e:	4b94      	ldr	r3, [pc, #592]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4618      	mov	r0, r3
 8011144:	f014 fcd3 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0f7      	beq.n	801113e <can1_ams_cell_voltages_transmit+0xfe2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801114e:	4b90      	ldr	r3, [pc, #576]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011150:	6818      	ldr	r0, [r3, #0]
 8011152:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011156:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801115a:	4b8e      	ldr	r3, [pc, #568]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 801115c:	f014 fbec 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d001      	beq.n	801116a <can1_ams_cell_voltages_transmit+0x100e>
           Error_Handler();
 8011166:	f006 fb3f 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 8;
 801116a:	4b88      	ldr	r3, [pc, #544]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 801116c:	2208      	movs	r2, #8
 801116e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011170:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011174:	2207      	movs	r2, #7
 8011176:	4985      	ldr	r1, [pc, #532]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011178:	4618      	mov	r0, r3
 801117a:	f7f1 f823 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801117e:	bf00      	nop
 8011180:	4b83      	ldr	r3, [pc, #524]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f014 fcb2 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d0f7      	beq.n	8011180 <can1_ams_cell_voltages_transmit+0x1024>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011190:	4b7f      	ldr	r3, [pc, #508]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011192:	6818      	ldr	r0, [r3, #0]
 8011194:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011198:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801119c:	4b7d      	ldr	r3, [pc, #500]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 801119e:	f014 fbcb 	bl	8025938 <HAL_CAN_AddTxMessage>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d001      	beq.n	80111ac <can1_ams_cell_voltages_transmit+0x1050>
           Error_Handler();
 80111a8:	f006 fb1e 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 9;
 80111ac:	4b77      	ldr	r3, [pc, #476]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80111ae:	2209      	movs	r2, #9
 80111b0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80111b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111b6:	2207      	movs	r2, #7
 80111b8:	4974      	ldr	r1, [pc, #464]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7f1 f802 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80111c0:	bf00      	nop
 80111c2:	4b73      	ldr	r3, [pc, #460]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f014 fc91 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0f7      	beq.n	80111c2 <can1_ams_cell_voltages_transmit+0x1066>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80111d2:	4b6f      	ldr	r3, [pc, #444]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80111d4:	6818      	ldr	r0, [r3, #0]
 80111d6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80111da:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80111de:	4b6d      	ldr	r3, [pc, #436]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 80111e0:	f014 fbaa 	bl	8025938 <HAL_CAN_AddTxMessage>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <can1_ams_cell_voltages_transmit+0x1092>
           Error_Handler();
 80111ea:	f006 fafd 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 10;
 80111ee:	4b67      	ldr	r3, [pc, #412]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80111f0:	220a      	movs	r2, #10
 80111f2:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80111f4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80111f8:	2207      	movs	r2, #7
 80111fa:	4964      	ldr	r1, [pc, #400]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7f0 ffe1 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011202:	bf00      	nop
 8011204:	4b62      	ldr	r3, [pc, #392]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4618      	mov	r0, r3
 801120a:	f014 fc70 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d0f7      	beq.n	8011204 <can1_ams_cell_voltages_transmit+0x10a8>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011214:	4b5e      	ldr	r3, [pc, #376]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011216:	6818      	ldr	r0, [r3, #0]
 8011218:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801121c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011220:	4b5c      	ldr	r3, [pc, #368]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 8011222:	f014 fb89 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <can1_ams_cell_voltages_transmit+0x10d4>
           Error_Handler();
 801122c:	f006 fadc 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 11;
 8011230:	4b56      	ldr	r3, [pc, #344]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011232:	220b      	movs	r2, #11
 8011234:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011236:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801123a:	2207      	movs	r2, #7
 801123c:	4953      	ldr	r1, [pc, #332]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 801123e:	4618      	mov	r0, r3
 8011240:	f7f0 ffc0 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011244:	bf00      	nop
 8011246:	4b52      	ldr	r3, [pc, #328]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4618      	mov	r0, r3
 801124c:	f014 fc4f 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d0f7      	beq.n	8011246 <can1_ams_cell_voltages_transmit+0x10ea>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011256:	4b4e      	ldr	r3, [pc, #312]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011258:	6818      	ldr	r0, [r3, #0]
 801125a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801125e:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011262:	4b4c      	ldr	r3, [pc, #304]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 8011264:	f014 fb68 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d001      	beq.n	8011272 <can1_ams_cell_voltages_transmit+0x1116>
           Error_Handler();
 801126e:	f006 fabb 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 12;
 8011272:	4b46      	ldr	r3, [pc, #280]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011274:	220c      	movs	r2, #12
 8011276:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011278:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801127c:	2207      	movs	r2, #7
 801127e:	4943      	ldr	r1, [pc, #268]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011280:	4618      	mov	r0, r3
 8011282:	f7f0 ff9f 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011286:	bf00      	nop
 8011288:	4b41      	ldr	r3, [pc, #260]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4618      	mov	r0, r3
 801128e:	f014 fc2e 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d0f7      	beq.n	8011288 <can1_ams_cell_voltages_transmit+0x112c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011298:	4b3d      	ldr	r3, [pc, #244]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801129a:	6818      	ldr	r0, [r3, #0]
 801129c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80112a0:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80112a4:	4b3b      	ldr	r3, [pc, #236]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 80112a6:	f014 fb47 	bl	8025938 <HAL_CAN_AddTxMessage>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <can1_ams_cell_voltages_transmit+0x1158>
           Error_Handler();
 80112b0:	f006 fa9a 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 13;
 80112b4:	4b35      	ldr	r3, [pc, #212]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80112b6:	220d      	movs	r2, #13
 80112b8:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80112ba:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80112be:	2207      	movs	r2, #7
 80112c0:	4932      	ldr	r1, [pc, #200]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f0 ff7e 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80112c8:	bf00      	nop
 80112ca:	4b31      	ldr	r3, [pc, #196]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f014 fc0d 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0f7      	beq.n	80112ca <can1_ams_cell_voltages_transmit+0x116e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80112da:	4b2d      	ldr	r3, [pc, #180]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 80112dc:	6818      	ldr	r0, [r3, #0]
 80112de:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80112e2:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80112e6:	4b2b      	ldr	r3, [pc, #172]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 80112e8:	f014 fb26 	bl	8025938 <HAL_CAN_AddTxMessage>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <can1_ams_cell_voltages_transmit+0x119a>
           Error_Handler();
 80112f2:	f006 fa79 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 14;
 80112f6:	4b25      	ldr	r3, [pc, #148]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 80112f8:	220e      	movs	r2, #14
 80112fa:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80112fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011300:	2207      	movs	r2, #7
 8011302:	4922      	ldr	r1, [pc, #136]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011304:	4618      	mov	r0, r3
 8011306:	f7f0 ff5d 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801130a:	bf00      	nop
 801130c:	4b20      	ldr	r3, [pc, #128]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4618      	mov	r0, r3
 8011312:	f014 fbec 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d0f7      	beq.n	801130c <can1_ams_cell_voltages_transmit+0x11b0>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801131c:	4b1c      	ldr	r3, [pc, #112]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 801131e:	6818      	ldr	r0, [r3, #0]
 8011320:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011324:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011328:	4b1a      	ldr	r3, [pc, #104]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 801132a:	f014 fb05 	bl	8025938 <HAL_CAN_AddTxMessage>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <can1_ams_cell_voltages_transmit+0x11dc>
           Error_Handler();
 8011334:	f006 fa58 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 15;
 8011338:	4b14      	ldr	r3, [pc, #80]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 801133a:	220f      	movs	r2, #15
 801133c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801133e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011342:	2207      	movs	r2, #7
 8011344:	4911      	ldr	r1, [pc, #68]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011346:	4618      	mov	r0, r3
 8011348:	f7f0 ff3c 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801134c:	bf00      	nop
 801134e:	4b10      	ldr	r3, [pc, #64]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4618      	mov	r0, r3
 8011354:	f014 fbcb 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0f7      	beq.n	801134e <can1_ams_cell_voltages_transmit+0x11f2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801135e:	4b0c      	ldr	r3, [pc, #48]	; (8011390 <can1_ams_cell_voltages_transmit+0x1234>)
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011366:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801136a:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <can1_ams_cell_voltages_transmit+0x1238>)
 801136c:	f014 fae4 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <can1_ams_cell_voltages_transmit+0x121e>
           Error_Handler();
 8011376:	f006 fa37 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 16;
 801137a:	4b04      	ldr	r3, [pc, #16]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 801137c:	2210      	movs	r2, #16
 801137e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011380:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011384:	2207      	movs	r2, #7
 8011386:	4901      	ldr	r1, [pc, #4]	; (801138c <can1_ams_cell_voltages_transmit+0x1230>)
 8011388:	4618      	mov	r0, r3
 801138a:	e005      	b.n	8011398 <can1_ams_cell_voltages_transmit+0x123c>
 801138c:	200014f4 	.word	0x200014f4
 8011390:	20001630 	.word	0x20001630
 8011394:	200014cc 	.word	0x200014cc
 8011398:	f7f0 ff14 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801139c:	bf00      	nop
 801139e:	4b81      	ldr	r3, [pc, #516]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f014 fba3 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0f7      	beq.n	801139e <can1_ams_cell_voltages_transmit+0x1242>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113ae:	4b7d      	ldr	r3, [pc, #500]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113b0:	6818      	ldr	r0, [r3, #0]
 80113b2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113b6:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113ba:	4b7b      	ldr	r3, [pc, #492]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 80113bc:	f014 fabc 	bl	8025938 <HAL_CAN_AddTxMessage>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d001      	beq.n	80113ca <can1_ams_cell_voltages_transmit+0x126e>
           Error_Handler();
 80113c6:	f006 fa0f 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 17;
 80113ca:	4b78      	ldr	r3, [pc, #480]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 80113cc:	2211      	movs	r2, #17
 80113ce:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80113d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80113d4:	2207      	movs	r2, #7
 80113d6:	4975      	ldr	r1, [pc, #468]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f0 fef3 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80113de:	bf00      	nop
 80113e0:	4b70      	ldr	r3, [pc, #448]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f014 fb82 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d0f7      	beq.n	80113e0 <can1_ams_cell_voltages_transmit+0x1284>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80113f0:	4b6c      	ldr	r3, [pc, #432]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80113f2:	6818      	ldr	r0, [r3, #0]
 80113f4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80113f8:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80113fc:	4b6a      	ldr	r3, [pc, #424]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 80113fe:	f014 fa9b 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d001      	beq.n	801140c <can1_ams_cell_voltages_transmit+0x12b0>
           Error_Handler();
 8011408:	f006 f9ee 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 18;
 801140c:	4b67      	ldr	r3, [pc, #412]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 801140e:	2212      	movs	r2, #18
 8011410:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011412:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011416:	2207      	movs	r2, #7
 8011418:	4964      	ldr	r1, [pc, #400]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 801141a:	4618      	mov	r0, r3
 801141c:	f7f0 fed2 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011420:	bf00      	nop
 8011422:	4b60      	ldr	r3, [pc, #384]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4618      	mov	r0, r3
 8011428:	f014 fb61 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d0f7      	beq.n	8011422 <can1_ams_cell_voltages_transmit+0x12c6>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011432:	4b5c      	ldr	r3, [pc, #368]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011434:	6818      	ldr	r0, [r3, #0]
 8011436:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801143a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 801143e:	4b5a      	ldr	r3, [pc, #360]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011440:	f014 fa7a 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d001      	beq.n	801144e <can1_ams_cell_voltages_transmit+0x12f2>
           Error_Handler();
 801144a:	f006 f9cd 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 19;
 801144e:	4b57      	ldr	r3, [pc, #348]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011450:	2213      	movs	r2, #19
 8011452:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011454:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011458:	2207      	movs	r2, #7
 801145a:	4954      	ldr	r1, [pc, #336]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 801145c:	4618      	mov	r0, r3
 801145e:	f7f0 feb1 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011462:	bf00      	nop
 8011464:	4b4f      	ldr	r3, [pc, #316]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f014 fb40 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d0f7      	beq.n	8011464 <can1_ams_cell_voltages_transmit+0x1308>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011474:	4b4b      	ldr	r3, [pc, #300]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 8011476:	6818      	ldr	r0, [r3, #0]
 8011478:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801147c:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011480:	4b49      	ldr	r3, [pc, #292]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011482:	f014 fa59 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d001      	beq.n	8011490 <can1_ams_cell_voltages_transmit+0x1334>
           Error_Handler();
 801148c:	f006 f9ac 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 20;
 8011490:	4b46      	ldr	r3, [pc, #280]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011492:	2214      	movs	r2, #20
 8011494:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 8011496:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801149a:	2207      	movs	r2, #7
 801149c:	4943      	ldr	r1, [pc, #268]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 801149e:	4618      	mov	r0, r3
 80114a0:	f7f0 fe90 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80114a4:	bf00      	nop
 80114a6:	4b3f      	ldr	r3, [pc, #252]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f014 fb1f 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d0f7      	beq.n	80114a6 <can1_ams_cell_voltages_transmit+0x134a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80114b6:	4b3b      	ldr	r3, [pc, #236]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80114b8:	6818      	ldr	r0, [r3, #0]
 80114ba:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80114be:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80114c2:	4b39      	ldr	r3, [pc, #228]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 80114c4:	f014 fa38 	bl	8025938 <HAL_CAN_AddTxMessage>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <can1_ams_cell_voltages_transmit+0x1376>
           Error_Handler();
 80114ce:	f006 f98b 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 21;
 80114d2:	4b36      	ldr	r3, [pc, #216]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 80114d4:	2215      	movs	r2, #21
 80114d6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 80114d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80114dc:	2207      	movs	r2, #7
 80114de:	4933      	ldr	r1, [pc, #204]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7f0 fe6f 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 80114e6:	bf00      	nop
 80114e8:	4b2e      	ldr	r3, [pc, #184]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f014 fafe 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d0f7      	beq.n	80114e8 <can1_ams_cell_voltages_transmit+0x138c>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80114f8:	4b2a      	ldr	r3, [pc, #168]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 80114fa:	6818      	ldr	r0, [r3, #0]
 80114fc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011500:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011504:	4b28      	ldr	r3, [pc, #160]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011506:	f014 fa17 	bl	8025938 <HAL_CAN_AddTxMessage>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d001      	beq.n	8011514 <can1_ams_cell_voltages_transmit+0x13b8>
           Error_Handler();
 8011510:	f006 f96a 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 22;
 8011514:	4b25      	ldr	r3, [pc, #148]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011516:	2216      	movs	r2, #22
 8011518:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801151a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801151e:	2207      	movs	r2, #7
 8011520:	4922      	ldr	r1, [pc, #136]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011522:	4618      	mov	r0, r3
 8011524:	f7f0 fe4e 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011528:	bf00      	nop
 801152a:	4b1e      	ldr	r3, [pc, #120]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4618      	mov	r0, r3
 8011530:	f014 fadd 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d0f7      	beq.n	801152a <can1_ams_cell_voltages_transmit+0x13ce>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801153a:	4b1a      	ldr	r3, [pc, #104]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 801153c:	6818      	ldr	r0, [r3, #0]
 801153e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011542:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011546:	4b18      	ldr	r3, [pc, #96]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 8011548:	f014 f9f6 	bl	8025938 <HAL_CAN_AddTxMessage>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <can1_ams_cell_voltages_transmit+0x13fa>
           Error_Handler();
 8011552:	f006 f949 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_voltages.voltage_multiplexor = 23;
 8011556:	4b15      	ldr	r3, [pc, #84]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011558:	2217      	movs	r2, #23
 801155a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_voltages_pack(tx_data, &can1_ams_cell_voltages, 7);
 801155c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011560:	2207      	movs	r2, #7
 8011562:	4912      	ldr	r1, [pc, #72]	; (80115ac <can1_ams_cell_voltages_transmit+0x1450>)
 8011564:	4618      	mov	r0, r3
 8011566:	f7f0 fe2d 	bl	80021c4 <can1_ams_cell_voltages_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 801156a:	bf00      	nop
 801156c:	4b0d      	ldr	r3, [pc, #52]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4618      	mov	r0, r3
 8011572:	f014 fabc 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d0f7      	beq.n	801156c <can1_ams_cell_voltages_transmit+0x1410>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801157c:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <can1_ams_cell_voltages_transmit+0x1448>)
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011584:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011588:	4b07      	ldr	r3, [pc, #28]	; (80115a8 <can1_ams_cell_voltages_transmit+0x144c>)
 801158a:	f014 f9d5 	bl	8025938 <HAL_CAN_AddTxMessage>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <can1_ams_cell_voltages_transmit+0x143c>
           Error_Handler();
 8011594:	f006 f928 	bl	80177e8 <Error_Handler>
       }
}
 8011598:	bf00      	nop
 801159a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	20001630 	.word	0x20001630
 80115a8:	200014cc 	.word	0x200014cc
 80115ac:	200014f4 	.word	0x200014f4

080115b0 <can1_ams_cell_temperatures_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_transmit() {
 80115b0:	b580      	push	{r7, lr}
 80115b2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80115b6:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80115b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80115bc:	2200      	movs	r2, #0
 80115be:	601a      	str	r2, [r3, #0]
 80115c0:	605a      	str	r2, [r3, #4]
 80115c2:	609a      	str	r2, [r3, #8]
 80115c4:	60da      	str	r2, [r3, #12]
 80115c6:	611a      	str	r2, [r3, #16]
 80115c8:	615a      	str	r2, [r3, #20]
 80115ca:	2322      	movs	r3, #34	; 0x22
 80115cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80115d0:	2308      	movs	r3, #8
 80115d2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
       .StdId = 34,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ams_cell_temperatures_t ams_cell_temperatures;
   can1_ams_cell_temperatures_tx_callback(&ams_cell_temperatures);
 80115d6:	463b      	mov	r3, r7
 80115d8:	4618      	mov	r0, r3
 80115da:	f004 fad1 	bl	8015b80 <can1_ams_cell_temperatures_tx_callback>

   can1_ams_cell_temperatures.temperature_multiplexor = can1_ams_cell_temperatures_temperature_multiplexor_encode(ams_cell_temperatures.temperature_multiplexor);
 80115de:	463b      	mov	r3, r7
 80115e0:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7ee ff7f 	bl	80004e8 <__aeabi_ui2d>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	ec43 2b10 	vmov	d0, r2, r3
 80115f2:	f7fa fc87 	bl	800bf04 <can1_ams_cell_temperatures_temperature_multiplexor_encode>
 80115f6:	4603      	mov	r3, r0
 80115f8:	461a      	mov	r2, r3
 80115fa:	4bde      	ldr	r3, [pc, #888]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80115fc:	701a      	strb	r2, [r3, #0]
   can1_ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_encode(ams_cell_temperatures.t1s1);
 80115fe:	463b      	mov	r3, r7
 8011600:	ed93 7b00 	vldr	d7, [r3]
 8011604:	eeb0 0a47 	vmov.f32	s0, s14
 8011608:	eef0 0a67 	vmov.f32	s1, s15
 801160c:	f7fa fc8c 	bl	800bf28 <can1_ams_cell_temperatures_t1s1_encode>
 8011610:	4603      	mov	r3, r0
 8011612:	461a      	mov	r2, r3
 8011614:	4bd7      	ldr	r3, [pc, #860]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011616:	805a      	strh	r2, [r3, #2]
   can1_ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_encode(ams_cell_temperatures.t1s2);
 8011618:	463b      	mov	r3, r7
 801161a:	ed93 7b02 	vldr	d7, [r3, #8]
 801161e:	eeb0 0a47 	vmov.f32	s0, s14
 8011622:	eef0 0a67 	vmov.f32	s1, s15
 8011626:	f7fa fcd7 	bl	800bfd8 <can1_ams_cell_temperatures_t1s2_encode>
 801162a:	4603      	mov	r3, r0
 801162c:	461a      	mov	r2, r3
 801162e:	4bd1      	ldr	r3, [pc, #836]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011630:	809a      	strh	r2, [r3, #4]
   can1_ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_encode(ams_cell_temperatures.t1s3);
 8011632:	463b      	mov	r3, r7
 8011634:	ed93 7b04 	vldr	d7, [r3, #16]
 8011638:	eeb0 0a47 	vmov.f32	s0, s14
 801163c:	eef0 0a67 	vmov.f32	s1, s15
 8011640:	f7fa fd22 	bl	800c088 <can1_ams_cell_temperatures_t1s3_encode>
 8011644:	4603      	mov	r3, r0
 8011646:	461a      	mov	r2, r3
 8011648:	4bca      	ldr	r3, [pc, #808]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801164a:	80da      	strh	r2, [r3, #6]
   can1_ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_encode(ams_cell_temperatures.t1s4);
 801164c:	463b      	mov	r3, r7
 801164e:	ed93 7b06 	vldr	d7, [r3, #24]
 8011652:	eeb0 0a47 	vmov.f32	s0, s14
 8011656:	eef0 0a67 	vmov.f32	s1, s15
 801165a:	f7fa fd6d 	bl	800c138 <can1_ams_cell_temperatures_t1s4_encode>
 801165e:	4603      	mov	r3, r0
 8011660:	461a      	mov	r2, r3
 8011662:	4bc4      	ldr	r3, [pc, #784]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011664:	811a      	strh	r2, [r3, #8]
   can1_ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_encode(ams_cell_temperatures.t1s5);
 8011666:	463b      	mov	r3, r7
 8011668:	ed93 7b08 	vldr	d7, [r3, #32]
 801166c:	eeb0 0a47 	vmov.f32	s0, s14
 8011670:	eef0 0a67 	vmov.f32	s1, s15
 8011674:	f7fa fdb8 	bl	800c1e8 <can1_ams_cell_temperatures_t1s5_encode>
 8011678:	4603      	mov	r3, r0
 801167a:	461a      	mov	r2, r3
 801167c:	4bbd      	ldr	r3, [pc, #756]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801167e:	815a      	strh	r2, [r3, #10]
   can1_ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_encode(ams_cell_temperatures.t1s6);
 8011680:	463b      	mov	r3, r7
 8011682:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8011686:	eeb0 0a47 	vmov.f32	s0, s14
 801168a:	eef0 0a67 	vmov.f32	s1, s15
 801168e:	f7fa fe03 	bl	800c298 <can1_ams_cell_temperatures_t1s6_encode>
 8011692:	4603      	mov	r3, r0
 8011694:	461a      	mov	r2, r3
 8011696:	4bb7      	ldr	r3, [pc, #732]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011698:	819a      	strh	r2, [r3, #12]
   can1_ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_encode(ams_cell_temperatures.t1s7);
 801169a:	463b      	mov	r3, r7
 801169c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80116a0:	eeb0 0a47 	vmov.f32	s0, s14
 80116a4:	eef0 0a67 	vmov.f32	s1, s15
 80116a8:	f7fa fe4e 	bl	800c348 <can1_ams_cell_temperatures_t1s7_encode>
 80116ac:	4603      	mov	r3, r0
 80116ae:	461a      	mov	r2, r3
 80116b0:	4bb0      	ldr	r3, [pc, #704]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116b2:	81da      	strh	r2, [r3, #14]
   can1_ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_encode(ams_cell_temperatures.t1s8);
 80116b4:	463b      	mov	r3, r7
 80116b6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80116ba:	eeb0 0a47 	vmov.f32	s0, s14
 80116be:	eef0 0a67 	vmov.f32	s1, s15
 80116c2:	f7fa fe99 	bl	800c3f8 <can1_ams_cell_temperatures_t1s8_encode>
 80116c6:	4603      	mov	r3, r0
 80116c8:	461a      	mov	r2, r3
 80116ca:	4baa      	ldr	r3, [pc, #680]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116cc:	821a      	strh	r2, [r3, #16]
   can1_ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_encode(ams_cell_temperatures.t1s9);
 80116ce:	463b      	mov	r3, r7
 80116d0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80116d4:	eeb0 0a47 	vmov.f32	s0, s14
 80116d8:	eef0 0a67 	vmov.f32	s1, s15
 80116dc:	f7fa fee4 	bl	800c4a8 <can1_ams_cell_temperatures_t1s9_encode>
 80116e0:	4603      	mov	r3, r0
 80116e2:	461a      	mov	r2, r3
 80116e4:	4ba3      	ldr	r3, [pc, #652]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80116e6:	825a      	strh	r2, [r3, #18]
   can1_ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_encode(ams_cell_temperatures.t1s10);
 80116e8:	463b      	mov	r3, r7
 80116ea:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80116ee:	eeb0 0a47 	vmov.f32	s0, s14
 80116f2:	eef0 0a67 	vmov.f32	s1, s15
 80116f6:	f7fa ff2f 	bl	800c558 <can1_ams_cell_temperatures_t1s10_encode>
 80116fa:	4603      	mov	r3, r0
 80116fc:	461a      	mov	r2, r3
 80116fe:	4b9d      	ldr	r3, [pc, #628]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011700:	829a      	strh	r2, [r3, #20]
   can1_ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_encode(ams_cell_temperatures.t1s11);
 8011702:	463b      	mov	r3, r7
 8011704:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8011708:	eeb0 0a47 	vmov.f32	s0, s14
 801170c:	eef0 0a67 	vmov.f32	s1, s15
 8011710:	f7fa ff7a 	bl	800c608 <can1_ams_cell_temperatures_t1s11_encode>
 8011714:	4603      	mov	r3, r0
 8011716:	461a      	mov	r2, r3
 8011718:	4b96      	ldr	r3, [pc, #600]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801171a:	82da      	strh	r2, [r3, #22]
   can1_ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_encode(ams_cell_temperatures.t1s12);
 801171c:	463b      	mov	r3, r7
 801171e:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8011722:	eeb0 0a47 	vmov.f32	s0, s14
 8011726:	eef0 0a67 	vmov.f32	s1, s15
 801172a:	f7fa ffc5 	bl	800c6b8 <can1_ams_cell_temperatures_t1s12_encode>
 801172e:	4603      	mov	r3, r0
 8011730:	461a      	mov	r2, r3
 8011732:	4b90      	ldr	r3, [pc, #576]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011734:	831a      	strh	r2, [r3, #24]
   can1_ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_encode(ams_cell_temperatures.t2s1);
 8011736:	463b      	mov	r3, r7
 8011738:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 801173c:	eeb0 0a47 	vmov.f32	s0, s14
 8011740:	eef0 0a67 	vmov.f32	s1, s15
 8011744:	f7fb f810 	bl	800c768 <can1_ams_cell_temperatures_t2s1_encode>
 8011748:	4603      	mov	r3, r0
 801174a:	461a      	mov	r2, r3
 801174c:	4b89      	ldr	r3, [pc, #548]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801174e:	835a      	strh	r2, [r3, #26]
   can1_ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_encode(ams_cell_temperatures.t2s2);
 8011750:	463b      	mov	r3, r7
 8011752:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8011756:	eeb0 0a47 	vmov.f32	s0, s14
 801175a:	eef0 0a67 	vmov.f32	s1, s15
 801175e:	f7fb f85b 	bl	800c818 <can1_ams_cell_temperatures_t2s2_encode>
 8011762:	4603      	mov	r3, r0
 8011764:	461a      	mov	r2, r3
 8011766:	4b83      	ldr	r3, [pc, #524]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011768:	839a      	strh	r2, [r3, #28]
   can1_ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_encode(ams_cell_temperatures.t2s3);
 801176a:	463b      	mov	r3, r7
 801176c:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8011770:	eeb0 0a47 	vmov.f32	s0, s14
 8011774:	eef0 0a67 	vmov.f32	s1, s15
 8011778:	f7fb f8a6 	bl	800c8c8 <can1_ams_cell_temperatures_t2s3_encode>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	4b7c      	ldr	r3, [pc, #496]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011782:	83da      	strh	r2, [r3, #30]
   can1_ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_encode(ams_cell_temperatures.t2s4);
 8011784:	463b      	mov	r3, r7
 8011786:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 801178a:	eeb0 0a47 	vmov.f32	s0, s14
 801178e:	eef0 0a67 	vmov.f32	s1, s15
 8011792:	f7fb f8f1 	bl	800c978 <can1_ams_cell_temperatures_t2s4_encode>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	4b76      	ldr	r3, [pc, #472]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801179c:	841a      	strh	r2, [r3, #32]
   can1_ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_encode(ams_cell_temperatures.t2s5);
 801179e:	463b      	mov	r3, r7
 80117a0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80117a4:	eeb0 0a47 	vmov.f32	s0, s14
 80117a8:	eef0 0a67 	vmov.f32	s1, s15
 80117ac:	f7fb f93c 	bl	800ca28 <can1_ams_cell_temperatures_t2s5_encode>
 80117b0:	4603      	mov	r3, r0
 80117b2:	461a      	mov	r2, r3
 80117b4:	4b6f      	ldr	r3, [pc, #444]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117b6:	845a      	strh	r2, [r3, #34]	; 0x22
   can1_ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_encode(ams_cell_temperatures.t2s6);
 80117b8:	463b      	mov	r3, r7
 80117ba:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80117be:	eeb0 0a47 	vmov.f32	s0, s14
 80117c2:	eef0 0a67 	vmov.f32	s1, s15
 80117c6:	f7fb f987 	bl	800cad8 <can1_ams_cell_temperatures_t2s6_encode>
 80117ca:	4603      	mov	r3, r0
 80117cc:	461a      	mov	r2, r3
 80117ce:	4b69      	ldr	r3, [pc, #420]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117d0:	849a      	strh	r2, [r3, #36]	; 0x24
   can1_ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_encode(ams_cell_temperatures.t2s7);
 80117d2:	463b      	mov	r3, r7
 80117d4:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80117d8:	eeb0 0a47 	vmov.f32	s0, s14
 80117dc:	eef0 0a67 	vmov.f32	s1, s15
 80117e0:	f7fb f9d2 	bl	800cb88 <can1_ams_cell_temperatures_t2s7_encode>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	4b62      	ldr	r3, [pc, #392]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80117ea:	84da      	strh	r2, [r3, #38]	; 0x26
   can1_ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_encode(ams_cell_temperatures.t2s8);
 80117ec:	463b      	mov	r3, r7
 80117ee:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80117f2:	eeb0 0a47 	vmov.f32	s0, s14
 80117f6:	eef0 0a67 	vmov.f32	s1, s15
 80117fa:	f7fb fa1d 	bl	800cc38 <can1_ams_cell_temperatures_t2s8_encode>
 80117fe:	4603      	mov	r3, r0
 8011800:	461a      	mov	r2, r3
 8011802:	4b5c      	ldr	r3, [pc, #368]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011804:	851a      	strh	r2, [r3, #40]	; 0x28
   can1_ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_encode(ams_cell_temperatures.t2s9);
 8011806:	463b      	mov	r3, r7
 8011808:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 801180c:	eeb0 0a47 	vmov.f32	s0, s14
 8011810:	eef0 0a67 	vmov.f32	s1, s15
 8011814:	f7fb fa68 	bl	800cce8 <can1_ams_cell_temperatures_t2s9_encode>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
 801181c:	4b55      	ldr	r3, [pc, #340]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801181e:	855a      	strh	r2, [r3, #42]	; 0x2a
   can1_ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_encode(ams_cell_temperatures.t2s10);
 8011820:	463b      	mov	r3, r7
 8011822:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8011826:	eeb0 0a47 	vmov.f32	s0, s14
 801182a:	eef0 0a67 	vmov.f32	s1, s15
 801182e:	f7fb fab3 	bl	800cd98 <can1_ams_cell_temperatures_t2s10_encode>
 8011832:	4603      	mov	r3, r0
 8011834:	461a      	mov	r2, r3
 8011836:	4b4f      	ldr	r3, [pc, #316]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011838:	859a      	strh	r2, [r3, #44]	; 0x2c
   can1_ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_encode(ams_cell_temperatures.t2s11);
 801183a:	463b      	mov	r3, r7
 801183c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8011840:	eeb0 0a47 	vmov.f32	s0, s14
 8011844:	eef0 0a67 	vmov.f32	s1, s15
 8011848:	f7fb fafe 	bl	800ce48 <can1_ams_cell_temperatures_t2s11_encode>
 801184c:	4603      	mov	r3, r0
 801184e:	461a      	mov	r2, r3
 8011850:	4b48      	ldr	r3, [pc, #288]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011852:	85da      	strh	r2, [r3, #46]	; 0x2e
   can1_ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_encode(ams_cell_temperatures.t2s12);
 8011854:	463b      	mov	r3, r7
 8011856:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 801185a:	eeb0 0a47 	vmov.f32	s0, s14
 801185e:	eef0 0a67 	vmov.f32	s1, s15
 8011862:	f7fb fb49 	bl	800cef8 <can1_ams_cell_temperatures_t2s12_encode>
 8011866:	4603      	mov	r3, r0
 8011868:	461a      	mov	r2, r3
 801186a:	4b42      	ldr	r3, [pc, #264]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801186c:	861a      	strh	r2, [r3, #48]	; 0x30
   can1_ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_encode(ams_cell_temperatures.t3s1);
 801186e:	463b      	mov	r3, r7
 8011870:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8011874:	eeb0 0a47 	vmov.f32	s0, s14
 8011878:	eef0 0a67 	vmov.f32	s1, s15
 801187c:	f7fb fb94 	bl	800cfa8 <can1_ams_cell_temperatures_t3s1_encode>
 8011880:	4603      	mov	r3, r0
 8011882:	461a      	mov	r2, r3
 8011884:	4b3b      	ldr	r3, [pc, #236]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011886:	865a      	strh	r2, [r3, #50]	; 0x32
   can1_ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_encode(ams_cell_temperatures.t3s2);
 8011888:	463b      	mov	r3, r7
 801188a:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 801188e:	eeb0 0a47 	vmov.f32	s0, s14
 8011892:	eef0 0a67 	vmov.f32	s1, s15
 8011896:	f7fb fbdf 	bl	800d058 <can1_ams_cell_temperatures_t3s2_encode>
 801189a:	4603      	mov	r3, r0
 801189c:	461a      	mov	r2, r3
 801189e:	4b35      	ldr	r3, [pc, #212]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118a0:	869a      	strh	r2, [r3, #52]	; 0x34
   can1_ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_encode(ams_cell_temperatures.t3s3);
 80118a2:	463b      	mov	r3, r7
 80118a4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80118a8:	eeb0 0a47 	vmov.f32	s0, s14
 80118ac:	eef0 0a67 	vmov.f32	s1, s15
 80118b0:	f7fb fc2a 	bl	800d108 <can1_ams_cell_temperatures_t3s3_encode>
 80118b4:	4603      	mov	r3, r0
 80118b6:	461a      	mov	r2, r3
 80118b8:	4b2e      	ldr	r3, [pc, #184]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118ba:	86da      	strh	r2, [r3, #54]	; 0x36
   can1_ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_encode(ams_cell_temperatures.t3s4);
 80118bc:	463b      	mov	r3, r7
 80118be:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 80118c2:	eeb0 0a47 	vmov.f32	s0, s14
 80118c6:	eef0 0a67 	vmov.f32	s1, s15
 80118ca:	f7fb fc75 	bl	800d1b8 <can1_ams_cell_temperatures_t3s4_encode>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	4b28      	ldr	r3, [pc, #160]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118d4:	871a      	strh	r2, [r3, #56]	; 0x38
   can1_ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_encode(ams_cell_temperatures.t3s5);
 80118d6:	463b      	mov	r3, r7
 80118d8:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 80118dc:	eeb0 0a47 	vmov.f32	s0, s14
 80118e0:	eef0 0a67 	vmov.f32	s1, s15
 80118e4:	f7fb fcc0 	bl	800d268 <can1_ams_cell_temperatures_t3s5_encode>
 80118e8:	4603      	mov	r3, r0
 80118ea:	461a      	mov	r2, r3
 80118ec:	4b21      	ldr	r3, [pc, #132]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 80118ee:	875a      	strh	r2, [r3, #58]	; 0x3a
   can1_ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_encode(ams_cell_temperatures.t3s6);
 80118f0:	463b      	mov	r3, r7
 80118f2:	ed93 7b3a 	vldr	d7, [r3, #232]	; 0xe8
 80118f6:	eeb0 0a47 	vmov.f32	s0, s14
 80118fa:	eef0 0a67 	vmov.f32	s1, s15
 80118fe:	f7fb fd0b 	bl	800d318 <can1_ams_cell_temperatures_t3s6_encode>
 8011902:	4603      	mov	r3, r0
 8011904:	461a      	mov	r2, r3
 8011906:	4b1b      	ldr	r3, [pc, #108]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011908:	879a      	strh	r2, [r3, #60]	; 0x3c
   can1_ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_encode(ams_cell_temperatures.t3s7);
 801190a:	463b      	mov	r3, r7
 801190c:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
 8011910:	eeb0 0a47 	vmov.f32	s0, s14
 8011914:	eef0 0a67 	vmov.f32	s1, s15
 8011918:	f7fb fd56 	bl	800d3c8 <can1_ams_cell_temperatures_t3s7_encode>
 801191c:	4603      	mov	r3, r0
 801191e:	461a      	mov	r2, r3
 8011920:	4b14      	ldr	r3, [pc, #80]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011922:	87da      	strh	r2, [r3, #62]	; 0x3e
   can1_ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_encode(ams_cell_temperatures.t3s8);
 8011924:	463b      	mov	r3, r7
 8011926:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 801192a:	eeb0 0a47 	vmov.f32	s0, s14
 801192e:	eef0 0a67 	vmov.f32	s1, s15
 8011932:	f7fb fda1 	bl	800d478 <can1_ams_cell_temperatures_t3s8_encode>
 8011936:	4603      	mov	r3, r0
 8011938:	461a      	mov	r2, r3
 801193a:	4b0e      	ldr	r3, [pc, #56]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 801193c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
   can1_ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_encode(ams_cell_temperatures.t3s9);
 8011940:	463b      	mov	r3, r7
 8011942:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8011946:	eeb0 0a47 	vmov.f32	s0, s14
 801194a:	eef0 0a67 	vmov.f32	s1, s15
 801194e:	f7fb fdeb 	bl	800d528 <can1_ams_cell_temperatures_t3s9_encode>
 8011952:	4603      	mov	r3, r0
 8011954:	461a      	mov	r2, r3
 8011956:	4b07      	ldr	r3, [pc, #28]	; (8011974 <can1_ams_cell_temperatures_transmit+0x3c4>)
 8011958:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   can1_ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_encode(ams_cell_temperatures.t3s10);
 801195c:	463b      	mov	r3, r7
 801195e:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8011962:	eeb0 0a47 	vmov.f32	s0, s14
 8011966:	eef0 0a67 	vmov.f32	s1, s15
 801196a:	f7fb fe35 	bl	800d5d8 <can1_ams_cell_temperatures_t3s10_encode>
 801196e:	4603      	mov	r3, r0
 8011970:	e002      	b.n	8011978 <can1_ams_cell_temperatures_transmit+0x3c8>
 8011972:	bf00      	nop
 8011974:	20001574 	.word	0x20001574
 8011978:	461a      	mov	r2, r3
 801197a:	4be4      	ldr	r3, [pc, #912]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 801197c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   can1_ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_encode(ams_cell_temperatures.t3s11);
 8011980:	463b      	mov	r3, r7
 8011982:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8011986:	eeb0 0a47 	vmov.f32	s0, s14
 801198a:	eef0 0a67 	vmov.f32	s1, s15
 801198e:	f7fb fe7b 	bl	800d688 <can1_ams_cell_temperatures_t3s11_encode>
 8011992:	4603      	mov	r3, r0
 8011994:	461a      	mov	r2, r3
 8011996:	4bdd      	ldr	r3, [pc, #884]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   can1_ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_encode(ams_cell_temperatures.t3s12);
 801199c:	463b      	mov	r3, r7
 801199e:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 80119a2:	eeb0 0a47 	vmov.f32	s0, s14
 80119a6:	eef0 0a67 	vmov.f32	s1, s15
 80119aa:	f7fb fec5 	bl	800d738 <can1_ams_cell_temperatures_t3s12_encode>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	4bd6      	ldr	r3, [pc, #856]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
   can1_ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_encode(ams_cell_temperatures.t4s1);
 80119b8:	463b      	mov	r3, r7
 80119ba:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80119be:	eeb0 0a47 	vmov.f32	s0, s14
 80119c2:	eef0 0a67 	vmov.f32	s1, s15
 80119c6:	f7fb ff0f 	bl	800d7e8 <can1_ams_cell_temperatures_t4s1_encode>
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	4bcf      	ldr	r3, [pc, #828]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   can1_ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_encode(ams_cell_temperatures.t4s2);
 80119d4:	463b      	mov	r3, r7
 80119d6:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 80119da:	eeb0 0a47 	vmov.f32	s0, s14
 80119de:	eef0 0a67 	vmov.f32	s1, s15
 80119e2:	f7fb ff59 	bl	800d898 <can1_ams_cell_temperatures_t4s2_encode>
 80119e6:	4603      	mov	r3, r0
 80119e8:	461a      	mov	r2, r3
 80119ea:	4bc8      	ldr	r3, [pc, #800]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 80119ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   can1_ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_encode(ams_cell_temperatures.t4s3);
 80119f0:	463b      	mov	r3, r7
 80119f2:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80119f6:	eeb0 0a47 	vmov.f32	s0, s14
 80119fa:	eef0 0a67 	vmov.f32	s1, s15
 80119fe:	f7fb ffa3 	bl	800d948 <can1_ams_cell_temperatures_t4s3_encode>
 8011a02:	4603      	mov	r3, r0
 8011a04:	461a      	mov	r2, r3
 8011a06:	4bc1      	ldr	r3, [pc, #772]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   can1_ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_encode(ams_cell_temperatures.t4s4);
 8011a0c:	463b      	mov	r3, r7
 8011a0e:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8011a12:	eeb0 0a47 	vmov.f32	s0, s14
 8011a16:	eef0 0a67 	vmov.f32	s1, s15
 8011a1a:	f7fb ffed 	bl	800d9f8 <can1_ams_cell_temperatures_t4s4_encode>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	4bba      	ldr	r3, [pc, #744]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   can1_ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_encode(ams_cell_temperatures.t4s5);
 8011a28:	463b      	mov	r3, r7
 8011a2a:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8011a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a32:	eef0 0a67 	vmov.f32	s1, s15
 8011a36:	f7fc f837 	bl	800daa8 <can1_ams_cell_temperatures_t4s5_encode>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	4bb3      	ldr	r3, [pc, #716]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   can1_ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_encode(ams_cell_temperatures.t4s6);
 8011a44:	463b      	mov	r3, r7
 8011a46:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
 8011a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a4e:	eef0 0a67 	vmov.f32	s1, s15
 8011a52:	f7fc f881 	bl	800db58 <can1_ams_cell_temperatures_t4s6_encode>
 8011a56:	4603      	mov	r3, r0
 8011a58:	461a      	mov	r2, r3
 8011a5a:	4bac      	ldr	r3, [pc, #688]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   can1_ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_encode(ams_cell_temperatures.t4s7);
 8011a60:	463b      	mov	r3, r7
 8011a62:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 8011a66:	eeb0 0a47 	vmov.f32	s0, s14
 8011a6a:	eef0 0a67 	vmov.f32	s1, s15
 8011a6e:	f7fc f8cb 	bl	800dc08 <can1_ams_cell_temperatures_t4s7_encode>
 8011a72:	4603      	mov	r3, r0
 8011a74:	461a      	mov	r2, r3
 8011a76:	4ba5      	ldr	r3, [pc, #660]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
   can1_ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_encode(ams_cell_temperatures.t4s8);
 8011a7c:	463b      	mov	r3, r7
 8011a7e:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8011a82:	eeb0 0a47 	vmov.f32	s0, s14
 8011a86:	eef0 0a67 	vmov.f32	s1, s15
 8011a8a:	f7fc f915 	bl	800dcb8 <can1_ams_cell_temperatures_t4s8_encode>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b9e      	ldr	r3, [pc, #632]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011a94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
   can1_ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_encode(ams_cell_temperatures.t4s9);
 8011a98:	463b      	mov	r3, r7
 8011a9a:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8011a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8011aa2:	eef0 0a67 	vmov.f32	s1, s15
 8011aa6:	f7fc f95f 	bl	800dd68 <can1_ams_cell_temperatures_t4s9_encode>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	461a      	mov	r2, r3
 8011aae:	4b97      	ldr	r3, [pc, #604]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ab0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
   can1_ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_encode(ams_cell_temperatures.t4s10);
 8011ab4:	463b      	mov	r3, r7
 8011ab6:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
 8011aba:	eeb0 0a47 	vmov.f32	s0, s14
 8011abe:	eef0 0a67 	vmov.f32	s1, s15
 8011ac2:	f7fc f9a9 	bl	800de18 <can1_ams_cell_temperatures_t4s10_encode>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4b90      	ldr	r3, [pc, #576]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
   can1_ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_encode(ams_cell_temperatures.t4s11);
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	ed93 7b5c 	vldr	d7, [r3, #368]	; 0x170
 8011ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8011ada:	eef0 0a67 	vmov.f32	s1, s15
 8011ade:	f7fc f9f3 	bl	800dec8 <can1_ams_cell_temperatures_t4s11_encode>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	4b89      	ldr	r3, [pc, #548]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
   can1_ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_encode(ams_cell_temperatures.t4s12);
 8011aec:	463b      	mov	r3, r7
 8011aee:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8011af2:	eeb0 0a47 	vmov.f32	s0, s14
 8011af6:	eef0 0a67 	vmov.f32	s1, s15
 8011afa:	f7fc fa3d 	bl	800df78 <can1_ams_cell_temperatures_t4s12_encode>
 8011afe:	4603      	mov	r3, r0
 8011b00:	461a      	mov	r2, r3
 8011b02:	4b82      	ldr	r3, [pc, #520]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
   can1_ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_encode(ams_cell_temperatures.t5s1);
 8011b08:	463b      	mov	r3, r7
 8011b0a:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
 8011b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b12:	eef0 0a67 	vmov.f32	s1, s15
 8011b16:	f7fc fa87 	bl	800e028 <can1_ams_cell_temperatures_t5s1_encode>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	4b7b      	ldr	r3, [pc, #492]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
   can1_ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_encode(ams_cell_temperatures.t5s2);
 8011b24:	463b      	mov	r3, r7
 8011b26:	ed93 7b62 	vldr	d7, [r3, #392]	; 0x188
 8011b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b2e:	eef0 0a67 	vmov.f32	s1, s15
 8011b32:	f7fc fad1 	bl	800e0d8 <can1_ams_cell_temperatures_t5s2_encode>
 8011b36:	4603      	mov	r3, r0
 8011b38:	461a      	mov	r2, r3
 8011b3a:	4b74      	ldr	r3, [pc, #464]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
   can1_ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_encode(ams_cell_temperatures.t5s3);
 8011b40:	463b      	mov	r3, r7
 8011b42:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8011b46:	eeb0 0a47 	vmov.f32	s0, s14
 8011b4a:	eef0 0a67 	vmov.f32	s1, s15
 8011b4e:	f7fc fb1b 	bl	800e188 <can1_ams_cell_temperatures_t5s3_encode>
 8011b52:	4603      	mov	r3, r0
 8011b54:	461a      	mov	r2, r3
 8011b56:	4b6d      	ldr	r3, [pc, #436]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
   can1_ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_encode(ams_cell_temperatures.t5s4);
 8011b5c:	463b      	mov	r3, r7
 8011b5e:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8011b62:	eeb0 0a47 	vmov.f32	s0, s14
 8011b66:	eef0 0a67 	vmov.f32	s1, s15
 8011b6a:	f7fc fb65 	bl	800e238 <can1_ams_cell_temperatures_t5s4_encode>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	4b66      	ldr	r3, [pc, #408]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
   can1_ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_encode(ams_cell_temperatures.t5s5);
 8011b78:	463b      	mov	r3, r7
 8011b7a:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
 8011b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8011b82:	eef0 0a67 	vmov.f32	s1, s15
 8011b86:	f7fc fbaf 	bl	800e2e8 <can1_ams_cell_temperatures_t5s5_encode>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4b5f      	ldr	r3, [pc, #380]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   can1_ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_encode(ams_cell_temperatures.t5s6);
 8011b94:	463b      	mov	r3, r7
 8011b96:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8011b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b9e:	eef0 0a67 	vmov.f32	s1, s15
 8011ba2:	f7fc fbf9 	bl	800e398 <can1_ams_cell_temperatures_t5s6_encode>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	4b58      	ldr	r3, [pc, #352]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bac:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   can1_ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_encode(ams_cell_temperatures.t5s7);
 8011bb0:	463b      	mov	r3, r7
 8011bb2:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8011bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8011bba:	eef0 0a67 	vmov.f32	s1, s15
 8011bbe:	f7fc fc43 	bl	800e448 <can1_ams_cell_temperatures_t5s7_encode>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b51      	ldr	r3, [pc, #324]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011bc8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
   can1_ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_encode(ams_cell_temperatures.t5s8);
 8011bcc:	463b      	mov	r3, r7
 8011bce:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8011bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8011bd6:	eef0 0a67 	vmov.f32	s1, s15
 8011bda:	f7fc fc8d 	bl	800e4f8 <can1_ams_cell_temperatures_t5s8_encode>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	4b4a      	ldr	r3, [pc, #296]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011be4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   can1_ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_encode(ams_cell_temperatures.t5s9);
 8011be8:	463b      	mov	r3, r7
 8011bea:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8011bee:	eeb0 0a47 	vmov.f32	s0, s14
 8011bf2:	eef0 0a67 	vmov.f32	s1, s15
 8011bf6:	f7fc fcd7 	bl	800e5a8 <can1_ams_cell_temperatures_t5s9_encode>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	4b43      	ldr	r3, [pc, #268]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c00:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   can1_ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_encode(ams_cell_temperatures.t5s10);
 8011c04:	463b      	mov	r3, r7
 8011c06:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8011c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8011c0e:	eef0 0a67 	vmov.f32	s1, s15
 8011c12:	f7fc fd21 	bl	800e658 <can1_ams_cell_temperatures_t5s10_encode>
 8011c16:	4603      	mov	r3, r0
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4b3c      	ldr	r3, [pc, #240]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c1c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
   can1_ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_encode(ams_cell_temperatures.t5s11);
 8011c20:	463b      	mov	r3, r7
 8011c22:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
 8011c26:	eeb0 0a47 	vmov.f32	s0, s14
 8011c2a:	eef0 0a67 	vmov.f32	s1, s15
 8011c2e:	f7fc fd6b 	bl	800e708 <can1_ams_cell_temperatures_t5s11_encode>
 8011c32:	4603      	mov	r3, r0
 8011c34:	461a      	mov	r2, r3
 8011c36:	4b35      	ldr	r3, [pc, #212]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c38:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   can1_ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_encode(ams_cell_temperatures.t5s12);
 8011c3c:	463b      	mov	r3, r7
 8011c3e:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
 8011c42:	eeb0 0a47 	vmov.f32	s0, s14
 8011c46:	eef0 0a67 	vmov.f32	s1, s15
 8011c4a:	f7fc fdb5 	bl	800e7b8 <can1_ams_cell_temperatures_t5s12_encode>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	4b2e      	ldr	r3, [pc, #184]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

       can1_ams_cell_temperatures.temperature_multiplexor = 0;
 8011c58:	4b2c      	ldr	r3, [pc, #176]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011c62:	2208      	movs	r2, #8
 8011c64:	4929      	ldr	r1, [pc, #164]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f7 fe0c 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011c6c:	bf00      	nop
 8011c6e:	4b28      	ldr	r3, [pc, #160]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f013 ff3b 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d0f7      	beq.n	8011c6e <can1_ams_cell_temperatures_transmit+0x6be>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011c7e:	4b24      	ldr	r3, [pc, #144]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011c80:	6818      	ldr	r0, [r3, #0]
 8011c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011c86:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011c8a:	4b22      	ldr	r3, [pc, #136]	; (8011d14 <can1_ams_cell_temperatures_transmit+0x764>)
 8011c8c:	f013 fe54 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <can1_ams_cell_temperatures_transmit+0x6ea>
           Error_Handler();
 8011c96:	f005 fda7 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 1;
 8011c9a:	4b1c      	ldr	r3, [pc, #112]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ca4:	2208      	movs	r2, #8
 8011ca6:	4919      	ldr	r1, [pc, #100]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7f7 fdeb 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011cae:	bf00      	nop
 8011cb0:	4b17      	ldr	r3, [pc, #92]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f013 ff1a 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d0f7      	beq.n	8011cb0 <can1_ams_cell_temperatures_transmit+0x700>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011cc0:	4b13      	ldr	r3, [pc, #76]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011cc2:	6818      	ldr	r0, [r3, #0]
 8011cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011cc8:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011ccc:	4b11      	ldr	r3, [pc, #68]	; (8011d14 <can1_ams_cell_temperatures_transmit+0x764>)
 8011cce:	f013 fe33 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d001      	beq.n	8011cdc <can1_ams_cell_temperatures_transmit+0x72c>
           Error_Handler();
 8011cd8:	f005 fd86 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 2;
 8011cdc:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011cde:	2202      	movs	r2, #2
 8011ce0:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ce6:	2208      	movs	r2, #8
 8011ce8:	4908      	ldr	r1, [pc, #32]	; (8011d0c <can1_ams_cell_temperatures_transmit+0x75c>)
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7f7 fdca 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011cf0:	bf00      	nop
 8011cf2:	4b07      	ldr	r3, [pc, #28]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f013 fef9 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d0f7      	beq.n	8011cf2 <can1_ams_cell_temperatures_transmit+0x742>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d02:	4b03      	ldr	r3, [pc, #12]	; (8011d10 <can1_ams_cell_temperatures_transmit+0x760>)
 8011d04:	6818      	ldr	r0, [r3, #0]
 8011d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d0a:	e005      	b.n	8011d18 <can1_ams_cell_temperatures_transmit+0x768>
 8011d0c:	20001574 	.word	0x20001574
 8011d10:	20001630 	.word	0x20001630
 8011d14:	200014cc 	.word	0x200014cc
 8011d18:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d1c:	4b9a      	ldr	r3, [pc, #616]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011d1e:	f013 fe0b 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <can1_ams_cell_temperatures_transmit+0x77c>
           Error_Handler();
 8011d28:	f005 fd5e 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 3;
 8011d2c:	4b97      	ldr	r3, [pc, #604]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d2e:	2203      	movs	r2, #3
 8011d30:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d36:	2208      	movs	r2, #8
 8011d38:	4994      	ldr	r1, [pc, #592]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7f7 fda2 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011d40:	bf00      	nop
 8011d42:	4b93      	ldr	r3, [pc, #588]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4618      	mov	r0, r3
 8011d48:	f013 fed1 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d0f7      	beq.n	8011d42 <can1_ams_cell_temperatures_transmit+0x792>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d52:	4b8f      	ldr	r3, [pc, #572]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d54:	6818      	ldr	r0, [r3, #0]
 8011d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d5a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011d5e:	4b8a      	ldr	r3, [pc, #552]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011d60:	f013 fdea 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <can1_ams_cell_temperatures_transmit+0x7be>
           Error_Handler();
 8011d6a:	f005 fd3d 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 4;
 8011d6e:	4b87      	ldr	r3, [pc, #540]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d70:	2204      	movs	r2, #4
 8011d72:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011d78:	2208      	movs	r2, #8
 8011d7a:	4984      	ldr	r1, [pc, #528]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f7 fd81 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011d82:	bf00      	nop
 8011d84:	4b82      	ldr	r3, [pc, #520]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f013 feb0 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d0f7      	beq.n	8011d84 <can1_ams_cell_temperatures_transmit+0x7d4>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011d94:	4b7e      	ldr	r3, [pc, #504]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011d96:	6818      	ldr	r0, [r3, #0]
 8011d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011d9c:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011da0:	4b79      	ldr	r3, [pc, #484]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011da2:	f013 fdc9 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d001      	beq.n	8011db0 <can1_ams_cell_temperatures_transmit+0x800>
           Error_Handler();
 8011dac:	f005 fd1c 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 5;
 8011db0:	4b76      	ldr	r3, [pc, #472]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011db2:	2205      	movs	r2, #5
 8011db4:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011dba:	2208      	movs	r2, #8
 8011dbc:	4973      	ldr	r1, [pc, #460]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7f7 fd60 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011dc4:	bf00      	nop
 8011dc6:	4b72      	ldr	r3, [pc, #456]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f013 fe8f 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d0f7      	beq.n	8011dc6 <can1_ams_cell_temperatures_transmit+0x816>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011dd6:	4b6e      	ldr	r3, [pc, #440]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011dd8:	6818      	ldr	r0, [r3, #0]
 8011dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011dde:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011de2:	4b69      	ldr	r3, [pc, #420]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011de4:	f013 fda8 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <can1_ams_cell_temperatures_transmit+0x842>
           Error_Handler();
 8011dee:	f005 fcfb 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 6;
 8011df2:	4b66      	ldr	r3, [pc, #408]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011df4:	2206      	movs	r2, #6
 8011df6:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011dfc:	2208      	movs	r2, #8
 8011dfe:	4963      	ldr	r1, [pc, #396]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f7 fd3f 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e06:	bf00      	nop
 8011e08:	4b61      	ldr	r3, [pc, #388]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f013 fe6e 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d0f7      	beq.n	8011e08 <can1_ams_cell_temperatures_transmit+0x858>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e18:	4b5d      	ldr	r3, [pc, #372]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e1a:	6818      	ldr	r0, [r3, #0]
 8011e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e20:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e24:	4b58      	ldr	r3, [pc, #352]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011e26:	f013 fd87 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d001      	beq.n	8011e34 <can1_ams_cell_temperatures_transmit+0x884>
           Error_Handler();
 8011e30:	f005 fcda 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 7;
 8011e34:	4b55      	ldr	r3, [pc, #340]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e36:	2207      	movs	r2, #7
 8011e38:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e3e:	2208      	movs	r2, #8
 8011e40:	4952      	ldr	r1, [pc, #328]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7f7 fd1e 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e48:	bf00      	nop
 8011e4a:	4b51      	ldr	r3, [pc, #324]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f013 fe4d 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d0f7      	beq.n	8011e4a <can1_ams_cell_temperatures_transmit+0x89a>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e5a:	4b4d      	ldr	r3, [pc, #308]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011e62:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011e66:	4b48      	ldr	r3, [pc, #288]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011e68:	f013 fd66 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d001      	beq.n	8011e76 <can1_ams_cell_temperatures_transmit+0x8c6>
           Error_Handler();
 8011e72:	f005 fcb9 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 8;
 8011e76:	4b45      	ldr	r3, [pc, #276]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e78:	2208      	movs	r2, #8
 8011e7a:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011e80:	2208      	movs	r2, #8
 8011e82:	4942      	ldr	r1, [pc, #264]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7f7 fcfd 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011e8a:	bf00      	nop
 8011e8c:	4b40      	ldr	r3, [pc, #256]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f013 fe2c 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d0f7      	beq.n	8011e8c <can1_ams_cell_temperatures_transmit+0x8dc>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011e9c:	4b3c      	ldr	r3, [pc, #240]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011e9e:	6818      	ldr	r0, [r3, #0]
 8011ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011ea4:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011ea8:	4b37      	ldr	r3, [pc, #220]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011eaa:	f013 fd45 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d001      	beq.n	8011eb8 <can1_ams_cell_temperatures_transmit+0x908>
           Error_Handler();
 8011eb4:	f005 fc98 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 9;
 8011eb8:	4b34      	ldr	r3, [pc, #208]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011eba:	2209      	movs	r2, #9
 8011ebc:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011ec2:	2208      	movs	r2, #8
 8011ec4:	4931      	ldr	r1, [pc, #196]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7f7 fcdc 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011ecc:	bf00      	nop
 8011ece:	4b30      	ldr	r3, [pc, #192]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f013 fe0b 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d0f7      	beq.n	8011ece <can1_ams_cell_temperatures_transmit+0x91e>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011ede:	4b2c      	ldr	r3, [pc, #176]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011ee0:	6818      	ldr	r0, [r3, #0]
 8011ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011ee6:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011eea:	4b27      	ldr	r3, [pc, #156]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011eec:	f013 fd24 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <can1_ams_cell_temperatures_transmit+0x94a>
           Error_Handler();
 8011ef6:	f005 fc77 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 10;
 8011efa:	4b24      	ldr	r3, [pc, #144]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011efc:	220a      	movs	r2, #10
 8011efe:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f04:	2208      	movs	r2, #8
 8011f06:	4921      	ldr	r1, [pc, #132]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7f7 fcbb 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011f0e:	bf00      	nop
 8011f10:	4b1f      	ldr	r3, [pc, #124]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f013 fdea 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d0f7      	beq.n	8011f10 <can1_ams_cell_temperatures_transmit+0x960>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f20:	4b1b      	ldr	r3, [pc, #108]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f22:	6818      	ldr	r0, [r3, #0]
 8011f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f28:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f2c:	4b16      	ldr	r3, [pc, #88]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011f2e:	f013 fd03 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d001      	beq.n	8011f3c <can1_ams_cell_temperatures_transmit+0x98c>
           Error_Handler();
 8011f38:	f005 fc56 	bl	80177e8 <Error_Handler>
       }
       can1_ams_cell_temperatures.temperature_multiplexor = 11;
 8011f3c:	4b13      	ldr	r3, [pc, #76]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f3e:	220b      	movs	r2, #11
 8011f40:	701a      	strb	r2, [r3, #0]
       can1_ams_cell_temperatures_pack(tx_data, &can1_ams_cell_temperatures, 8);
 8011f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011f46:	2208      	movs	r2, #8
 8011f48:	4910      	ldr	r1, [pc, #64]	; (8011f8c <can1_ams_cell_temperatures_transmit+0x9dc>)
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7f7 fc9a 	bl	8009884 <can1_ams_cell_temperatures_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan1));
 8011f50:	bf00      	nop
 8011f52:	4b0f      	ldr	r3, [pc, #60]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f013 fdc9 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d0f7      	beq.n	8011f52 <can1_ams_cell_temperatures_transmit+0x9a2>
       if (HAL_CAN_AddTxMessage(_hcan1, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011f62:	4b0b      	ldr	r3, [pc, #44]	; (8011f90 <can1_ams_cell_temperatures_transmit+0x9e0>)
 8011f64:	6818      	ldr	r0, [r3, #0]
 8011f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8011f6a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8011f6e:	4b06      	ldr	r3, [pc, #24]	; (8011f88 <can1_ams_cell_temperatures_transmit+0x9d8>)
 8011f70:	f013 fce2 	bl	8025938 <HAL_CAN_AddTxMessage>
 8011f74:	4603      	mov	r3, r0
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d001      	beq.n	8011f7e <can1_ams_cell_temperatures_transmit+0x9ce>
           Error_Handler();
 8011f7a:	f005 fc35 	bl	80177e8 <Error_Handler>
       }
}
 8011f7e:	bf00      	nop
 8011f80:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	200014cc 	.word	0x200014cc
 8011f8c:	20001574 	.word	0x20001574
 8011f90:	20001630 	.word	0x20001630

08011f94 <can2_ivt_msg_result_i_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_transmit() {
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b08a      	sub	sp, #40	; 0x28
 8011f98:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8011f9a:	f107 0308 	add.w	r3, r7, #8
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	605a      	str	r2, [r3, #4]
 8011fa4:	609a      	str	r2, [r3, #8]
 8011fa6:	60da      	str	r2, [r3, #12]
 8011fa8:	611a      	str	r2, [r3, #16]
 8011faa:	615a      	str	r2, [r3, #20]
 8011fac:	f240 5321 	movw	r3, #1313	; 0x521
 8011fb0:	60bb      	str	r3, [r7, #8]
 8011fb2:	2306      	movs	r3, #6
 8011fb4:	61bb      	str	r3, [r7, #24]
       .StdId = 1313,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_i_t ivt_msg_result_i;
   can2_ivt_msg_result_i_tx_callback(&ivt_msg_result_i);
 8011fb6:	463b      	mov	r3, r7
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f003 fdf5 	bl	8015ba8 <can2_ivt_msg_result_i_tx_callback>

   can2_ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_encode(ivt_msg_result_i.i_ts);
 8011fbe:	ed97 7b00 	vldr	d7, [r7]
 8011fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8011fc6:	eef0 0a67 	vmov.f32	s1, s15
 8011fca:	f7fc ffa1 	bl	800ef10 <can2_ivt_msg_result_i_i_ts_encode>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	4912      	ldr	r1, [pc, #72]	; (801201c <can2_ivt_msg_result_i_transmit+0x88>)
 8011fd4:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_i_pack(tx_data, &can2_ivt_msg_result_i, 6);
 8011fd8:	f107 0320 	add.w	r3, r7, #32
 8011fdc:	2206      	movs	r2, #6
 8011fde:	490f      	ldr	r1, [pc, #60]	; (801201c <can2_ivt_msg_result_i_transmit+0x88>)
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7fc fe85 	bl	800ecf0 <can2_ivt_msg_result_i_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8011fe6:	bf00      	nop
 8011fe8:	4b0d      	ldr	r3, [pc, #52]	; (8012020 <can2_ivt_msg_result_i_transmit+0x8c>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f013 fd7e 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d0f7      	beq.n	8011fe8 <can2_ivt_msg_result_i_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8011ff8:	4b09      	ldr	r3, [pc, #36]	; (8012020 <can2_ivt_msg_result_i_transmit+0x8c>)
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	f107 0220 	add.w	r2, r7, #32
 8012000:	f107 0108 	add.w	r1, r7, #8
 8012004:	4b07      	ldr	r3, [pc, #28]	; (8012024 <can2_ivt_msg_result_i_transmit+0x90>)
 8012006:	f013 fc97 	bl	8025938 <HAL_CAN_AddTxMessage>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <can2_ivt_msg_result_i_transmit+0x80>
       Error_Handler();
 8012010:	f005 fbea 	bl	80177e8 <Error_Handler>
   }
}
 8012014:	bf00      	nop
 8012016:	3728      	adds	r7, #40	; 0x28
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20001600 	.word	0x20001600
 8012020:	20001634 	.word	0x20001634
 8012024:	200014cc 	.word	0x200014cc

08012028 <can2_ivt_msg_result_u1_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_transmit() {
 8012028:	b580      	push	{r7, lr}
 801202a:	b08a      	sub	sp, #40	; 0x28
 801202c:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801202e:	f107 0308 	add.w	r3, r7, #8
 8012032:	2200      	movs	r2, #0
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	605a      	str	r2, [r3, #4]
 8012038:	609a      	str	r2, [r3, #8]
 801203a:	60da      	str	r2, [r3, #12]
 801203c:	611a      	str	r2, [r3, #16]
 801203e:	615a      	str	r2, [r3, #20]
 8012040:	f240 5322 	movw	r3, #1314	; 0x522
 8012044:	60bb      	str	r3, [r7, #8]
 8012046:	2306      	movs	r3, #6
 8012048:	61bb      	str	r3, [r7, #24]
       .StdId = 1314,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u1_t ivt_msg_result_u1;
   can2_ivt_msg_result_u1_tx_callback(&ivt_msg_result_u1);
 801204a:	463b      	mov	r3, r7
 801204c:	4618      	mov	r0, r3
 801204e:	f003 fdbf 	bl	8015bd0 <can2_ivt_msg_result_u1_tx_callback>

   can2_ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_encode(ivt_msg_result_u1.u_cells);
 8012052:	ed97 7b00 	vldr	d7, [r7]
 8012056:	eeb0 0a47 	vmov.f32	s0, s14
 801205a:	eef0 0a67 	vmov.f32	s1, s15
 801205e:	f7fd f8a7 	bl	800f1b0 <can2_ivt_msg_result_u1_u_cells_encode>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	4912      	ldr	r1, [pc, #72]	; (80120b0 <can2_ivt_msg_result_u1_transmit+0x88>)
 8012068:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u1_pack(tx_data, &can2_ivt_msg_result_u1, 6);
 801206c:	f107 0320 	add.w	r3, r7, #32
 8012070:	2206      	movs	r2, #6
 8012072:	490f      	ldr	r1, [pc, #60]	; (80120b0 <can2_ivt_msg_result_u1_transmit+0x88>)
 8012074:	4618      	mov	r0, r3
 8012076:	f7fc ff8b 	bl	800ef90 <can2_ivt_msg_result_u1_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801207a:	bf00      	nop
 801207c:	4b0d      	ldr	r3, [pc, #52]	; (80120b4 <can2_ivt_msg_result_u1_transmit+0x8c>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4618      	mov	r0, r3
 8012082:	f013 fd34 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d0f7      	beq.n	801207c <can2_ivt_msg_result_u1_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801208c:	4b09      	ldr	r3, [pc, #36]	; (80120b4 <can2_ivt_msg_result_u1_transmit+0x8c>)
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	f107 0220 	add.w	r2, r7, #32
 8012094:	f107 0108 	add.w	r1, r7, #8
 8012098:	4b07      	ldr	r3, [pc, #28]	; (80120b8 <can2_ivt_msg_result_u1_transmit+0x90>)
 801209a:	f013 fc4d 	bl	8025938 <HAL_CAN_AddTxMessage>
 801209e:	4603      	mov	r3, r0
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <can2_ivt_msg_result_u1_transmit+0x80>
       Error_Handler();
 80120a4:	f005 fba0 	bl	80177e8 <Error_Handler>
   }
}
 80120a8:	bf00      	nop
 80120aa:	3728      	adds	r7, #40	; 0x28
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	20001608 	.word	0x20001608
 80120b4:	20001634 	.word	0x20001634
 80120b8:	200014cc 	.word	0x200014cc

080120bc <can2_ivt_msg_result_u3_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_transmit() {
 80120bc:	b580      	push	{r7, lr}
 80120be:	b08a      	sub	sp, #40	; 0x28
 80120c0:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 80120c2:	f107 0308 	add.w	r3, r7, #8
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
 80120ca:	605a      	str	r2, [r3, #4]
 80120cc:	609a      	str	r2, [r3, #8]
 80120ce:	60da      	str	r2, [r3, #12]
 80120d0:	611a      	str	r2, [r3, #16]
 80120d2:	615a      	str	r2, [r3, #20]
 80120d4:	f240 5324 	movw	r3, #1316	; 0x524
 80120d8:	60bb      	str	r3, [r7, #8]
 80120da:	2306      	movs	r3, #6
 80120dc:	61bb      	str	r3, [r7, #24]
       .StdId = 1316,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   ivt_msg_result_u3_t ivt_msg_result_u3;
   can2_ivt_msg_result_u3_tx_callback(&ivt_msg_result_u3);
 80120de:	463b      	mov	r3, r7
 80120e0:	4618      	mov	r0, r3
 80120e2:	f003 fd89 	bl	8015bf8 <can2_ivt_msg_result_u3_tx_callback>

   can2_ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_encode(ivt_msg_result_u3.u_vehicle);
 80120e6:	ed97 7b00 	vldr	d7, [r7]
 80120ea:	eeb0 0a47 	vmov.f32	s0, s14
 80120ee:	eef0 0a67 	vmov.f32	s1, s15
 80120f2:	f7fd f9ad 	bl	800f450 <can2_ivt_msg_result_u3_u_vehicle_encode>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	4912      	ldr	r1, [pc, #72]	; (8012144 <can2_ivt_msg_result_u3_transmit+0x88>)
 80120fc:	e9c1 2300 	strd	r2, r3, [r1]

   can2_ivt_msg_result_u3_pack(tx_data, &can2_ivt_msg_result_u3, 6);
 8012100:	f107 0320 	add.w	r3, r7, #32
 8012104:	2206      	movs	r2, #6
 8012106:	490f      	ldr	r1, [pc, #60]	; (8012144 <can2_ivt_msg_result_u3_transmit+0x88>)
 8012108:	4618      	mov	r0, r3
 801210a:	f7fd f891 	bl	800f230 <can2_ivt_msg_result_u3_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801210e:	bf00      	nop
 8012110:	4b0d      	ldr	r3, [pc, #52]	; (8012148 <can2_ivt_msg_result_u3_transmit+0x8c>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	4618      	mov	r0, r3
 8012116:	f013 fcea 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d0f7      	beq.n	8012110 <can2_ivt_msg_result_u3_transmit+0x54>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012120:	4b09      	ldr	r3, [pc, #36]	; (8012148 <can2_ivt_msg_result_u3_transmit+0x8c>)
 8012122:	6818      	ldr	r0, [r3, #0]
 8012124:	f107 0220 	add.w	r2, r7, #32
 8012128:	f107 0108 	add.w	r1, r7, #8
 801212c:	4b07      	ldr	r3, [pc, #28]	; (801214c <can2_ivt_msg_result_u3_transmit+0x90>)
 801212e:	f013 fc03 	bl	8025938 <HAL_CAN_AddTxMessage>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d001      	beq.n	801213c <can2_ivt_msg_result_u3_transmit+0x80>
       Error_Handler();
 8012138:	f005 fb56 	bl	80177e8 <Error_Handler>
   }
}
 801213c:	bf00      	nop
 801213e:	3728      	adds	r7, #40	; 0x28
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	20001610 	.word	0x20001610
 8012148:	20001634 	.word	0x20001634
 801214c:	200014cc 	.word	0x200014cc

08012150 <can2_charger_config_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_transmit() {
 8012150:	b580      	push	{r7, lr}
 8012152:	b094      	sub	sp, #80	; 0x50
 8012154:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 8012156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801215a:	2200      	movs	r2, #0
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	605a      	str	r2, [r3, #4]
 8012160:	609a      	str	r2, [r3, #8]
 8012162:	60da      	str	r2, [r3, #12]
 8012164:	611a      	str	r2, [r3, #16]
 8012166:	615a      	str	r2, [r3, #20]
 8012168:	f44f 731c 	mov.w	r3, #624	; 0x270
 801216c:	633b      	str	r3, [r7, #48]	; 0x30
 801216e:	2304      	movs	r3, #4
 8012170:	643b      	str	r3, [r7, #64]	; 0x40
       .StdId = 624,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   charger_config_t charger_config;
   can2_charger_config_tx_callback(&charger_config);
 8012172:	463b      	mov	r3, r7
 8012174:	4618      	mov	r0, r3
 8012176:	f003 fb9f 	bl	80158b8 <can2_charger_config_tx_callback>

   can2_charger_config.set_mux = can2_charger_config_set_mux_encode(charger_config.set_mux);
 801217a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801217e:	4618      	mov	r0, r3
 8012180:	f7ee f9b2 	bl	80004e8 <__aeabi_ui2d>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	ec43 2b10 	vmov	d0, r2, r3
 801218c:	f7fd fb06 	bl	800f79c <can2_charger_config_set_mux_encode>
 8012190:	4603      	mov	r3, r0
 8012192:	461a      	mov	r2, r3
 8012194:	4b64      	ldr	r3, [pc, #400]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 8012196:	701a      	strb	r2, [r3, #0]
   can2_charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_encode(charger_config.msg_set_voltage_limit);
 8012198:	ed97 7b08 	vldr	d7, [r7, #32]
 801219c:	eeb0 0a47 	vmov.f32	s0, s14
 80121a0:	eef0 0a67 	vmov.f32	s1, s15
 80121a4:	f7fd fb09 	bl	800f7ba <can2_charger_config_msg_set_voltage_limit_encode>
 80121a8:	4603      	mov	r3, r0
 80121aa:	461a      	mov	r2, r3
 80121ac:	4b5e      	ldr	r3, [pc, #376]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80121ae:	805a      	strh	r2, [r3, #2]
   can2_charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_encode(charger_config.msg_set_current_limit);
 80121b0:	ed97 7b00 	vldr	d7, [r7]
 80121b4:	eeb0 0a47 	vmov.f32	s0, s14
 80121b8:	eef0 0a67 	vmov.f32	s1, s15
 80121bc:	f7fd fb20 	bl	800f800 <can2_charger_config_msg_set_current_limit_encode>
 80121c0:	4603      	mov	r3, r0
 80121c2:	461a      	mov	r2, r3
 80121c4:	4b58      	ldr	r3, [pc, #352]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80121c6:	809a      	strh	r2, [r3, #4]
   can2_charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_encode(charger_config.msg_set_power_limit);
 80121c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80121cc:	eeb0 0a47 	vmov.f32	s0, s14
 80121d0:	eef0 0a67 	vmov.f32	s1, s15
 80121d4:	f7fd fb50 	bl	800f878 <can2_charger_config_msg_set_power_limit_encode>
 80121d8:	4603      	mov	r3, r0
 80121da:	461a      	mov	r2, r3
 80121dc:	4b52      	ldr	r3, [pc, #328]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80121de:	80da      	strh	r2, [r3, #6]
   can2_charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_encode(charger_config.msg_set_enabled);
 80121e0:	7a3b      	ldrb	r3, [r7, #8]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7ee f980 	bl	80004e8 <__aeabi_ui2d>
 80121e8:	4602      	mov	r2, r0
 80121ea:	460b      	mov	r3, r1
 80121ec:	ec43 2b10 	vmov	d0, r2, r3
 80121f0:	f7fd fb65 	bl	800f8be <can2_charger_config_msg_set_enabled_encode>
 80121f4:	4603      	mov	r3, r0
 80121f6:	461a      	mov	r2, r3
 80121f8:	4b4b      	ldr	r3, [pc, #300]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80121fa:	721a      	strb	r2, [r3, #8]
   can2_charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_encode(charger_config.msg_set_time_out);
 80121fc:	7e3b      	ldrb	r3, [r7, #24]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ee f972 	bl	80004e8 <__aeabi_ui2d>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	ec43 2b10 	vmov	d0, r2, r3
 801220c:	f7fd fb7a 	bl	800f904 <can2_charger_config_msg_set_time_out_encode>
 8012210:	4603      	mov	r3, r0
 8012212:	461a      	mov	r2, r3
 8012214:	4b44      	ldr	r3, [pc, #272]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 8012216:	725a      	strb	r2, [r3, #9]

       can2_charger_config.set_mux = 64;
 8012218:	4b43      	ldr	r3, [pc, #268]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 801221a:	2240      	movs	r2, #64	; 0x40
 801221c:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 801221e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012222:	2204      	movs	r2, #4
 8012224:	4940      	ldr	r1, [pc, #256]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 8012226:	4618      	mov	r0, r3
 8012228:	f7fd f952 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801222c:	bf00      	nop
 801222e:	4b3f      	ldr	r3, [pc, #252]	; (801232c <can2_charger_config_transmit+0x1dc>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4618      	mov	r0, r3
 8012234:	f013 fc5b 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d0f7      	beq.n	801222e <can2_charger_config_transmit+0xde>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801223e:	4b3b      	ldr	r3, [pc, #236]	; (801232c <can2_charger_config_transmit+0x1dc>)
 8012240:	6818      	ldr	r0, [r3, #0]
 8012242:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012246:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801224a:	4b39      	ldr	r3, [pc, #228]	; (8012330 <can2_charger_config_transmit+0x1e0>)
 801224c:	f013 fb74 	bl	8025938 <HAL_CAN_AddTxMessage>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d001      	beq.n	801225a <can2_charger_config_transmit+0x10a>
           Error_Handler();
 8012256:	f005 fac7 	bl	80177e8 <Error_Handler>
       }
       can2_charger_config.set_mux = 65;
 801225a:	4b33      	ldr	r3, [pc, #204]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 801225c:	2241      	movs	r2, #65	; 0x41
 801225e:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 8012260:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012264:	2204      	movs	r2, #4
 8012266:	4930      	ldr	r1, [pc, #192]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 8012268:	4618      	mov	r0, r3
 801226a:	f7fd f931 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 801226e:	bf00      	nop
 8012270:	4b2e      	ldr	r3, [pc, #184]	; (801232c <can2_charger_config_transmit+0x1dc>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4618      	mov	r0, r3
 8012276:	f013 fc3a 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d0f7      	beq.n	8012270 <can2_charger_config_transmit+0x120>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012280:	4b2a      	ldr	r3, [pc, #168]	; (801232c <can2_charger_config_transmit+0x1dc>)
 8012282:	6818      	ldr	r0, [r3, #0]
 8012284:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012288:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801228c:	4b28      	ldr	r3, [pc, #160]	; (8012330 <can2_charger_config_transmit+0x1e0>)
 801228e:	f013 fb53 	bl	8025938 <HAL_CAN_AddTxMessage>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <can2_charger_config_transmit+0x14c>
           Error_Handler();
 8012298:	f005 faa6 	bl	80177e8 <Error_Handler>
       }
       can2_charger_config.set_mux = 66;
 801229c:	4b22      	ldr	r3, [pc, #136]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 801229e:	2242      	movs	r2, #66	; 0x42
 80122a0:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80122a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122a6:	2204      	movs	r2, #4
 80122a8:	491f      	ldr	r1, [pc, #124]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fd f910 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80122b0:	bf00      	nop
 80122b2:	4b1e      	ldr	r3, [pc, #120]	; (801232c <can2_charger_config_transmit+0x1dc>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f013 fc19 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d0f7      	beq.n	80122b2 <can2_charger_config_transmit+0x162>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 80122c2:	4b1a      	ldr	r3, [pc, #104]	; (801232c <can2_charger_config_transmit+0x1dc>)
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80122ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80122ce:	4b18      	ldr	r3, [pc, #96]	; (8012330 <can2_charger_config_transmit+0x1e0>)
 80122d0:	f013 fb32 	bl	8025938 <HAL_CAN_AddTxMessage>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <can2_charger_config_transmit+0x18e>
           Error_Handler();
 80122da:	f005 fa85 	bl	80177e8 <Error_Handler>
       }
       can2_charger_config.set_mux = 68;
 80122de:	4b12      	ldr	r3, [pc, #72]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80122e0:	2244      	movs	r2, #68	; 0x44
 80122e2:	701a      	strb	r2, [r3, #0]
       can2_charger_config_pack(tx_data, &can2_charger_config, 4);
 80122e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122e8:	2204      	movs	r2, #4
 80122ea:	490f      	ldr	r1, [pc, #60]	; (8012328 <can2_charger_config_transmit+0x1d8>)
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fd f8ef 	bl	800f4d0 <can2_charger_config_pack>
       while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 80122f2:	bf00      	nop
 80122f4:	4b0d      	ldr	r3, [pc, #52]	; (801232c <can2_charger_config_transmit+0x1dc>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f013 fbf8 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d0f7      	beq.n	80122f4 <can2_charger_config_transmit+0x1a4>
       if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8012304:	4b09      	ldr	r3, [pc, #36]	; (801232c <can2_charger_config_transmit+0x1dc>)
 8012306:	6818      	ldr	r0, [r3, #0]
 8012308:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801230c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012310:	4b07      	ldr	r3, [pc, #28]	; (8012330 <can2_charger_config_transmit+0x1e0>)
 8012312:	f013 fb11 	bl	8025938 <HAL_CAN_AddTxMessage>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <can2_charger_config_transmit+0x1d0>
           Error_Handler();
 801231c:	f005 fa64 	bl	80177e8 <Error_Handler>
       }
}
 8012320:	bf00      	nop
 8012322:	3750      	adds	r7, #80	; 0x50
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}
 8012328:	20001618 	.word	0x20001618
 801232c:	20001634 	.word	0x20001634
 8012330:	200014cc 	.word	0x200014cc

08012334 <can2_cc_status_transmit>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_transmit() {
 8012334:	b580      	push	{r7, lr}
 8012336:	b08a      	sub	sp, #40	; 0x28
 8012338:	af00      	add	r7, sp, #0
   uint8_t tx_data[8];
   const CAN_TxHeaderTypeDef tx_header = {
 801233a:	f107 0308 	add.w	r3, r7, #8
 801233e:	2200      	movs	r2, #0
 8012340:	601a      	str	r2, [r3, #0]
 8012342:	605a      	str	r2, [r3, #4]
 8012344:	609a      	str	r2, [r3, #8]
 8012346:	60da      	str	r2, [r3, #12]
 8012348:	611a      	str	r2, [r3, #16]
 801234a:	615a      	str	r2, [r3, #20]
 801234c:	f44f 7314 	mov.w	r3, #592	; 0x250
 8012350:	60bb      	str	r3, [r7, #8]
 8012352:	2301      	movs	r3, #1
 8012354:	61bb      	str	r3, [r7, #24]
       .StdId = 592,
       .RTR = CAN_RTR_DATA,
       .TransmitGlobalTime = DISABLE,
   };
   cc_status_t cc_status;
   can2_cc_status_tx_callback(&cc_status);
 8012356:	1d3b      	adds	r3, r7, #4
 8012358:	4618      	mov	r0, r3
 801235a:	f003 fc61 	bl	8015c20 <can2_cc_status_tx_callback>

   can2_cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_encode(cc_status.enable_ams_charging);
 801235e:	793b      	ldrb	r3, [r7, #4]
 8012360:	4618      	mov	r0, r3
 8012362:	f7ee f8c1 	bl	80004e8 <__aeabi_ui2d>
 8012366:	4602      	mov	r2, r0
 8012368:	460b      	mov	r3, r1
 801236a:	ec43 2b10 	vmov	d0, r2, r3
 801236e:	f7fd fb2d 	bl	800f9cc <can2_cc_status_enable_ams_charging_encode>
 8012372:	4603      	mov	r3, r0
 8012374:	461a      	mov	r2, r3
 8012376:	4b12      	ldr	r3, [pc, #72]	; (80123c0 <can2_cc_status_transmit+0x8c>)
 8012378:	701a      	strb	r2, [r3, #0]

   can2_cc_status_pack(tx_data, &can2_cc_status, 1);
 801237a:	f107 0320 	add.w	r3, r7, #32
 801237e:	2201      	movs	r2, #1
 8012380:	490f      	ldr	r1, [pc, #60]	; (80123c0 <can2_cc_status_transmit+0x8c>)
 8012382:	4618      	mov	r0, r3
 8012384:	f7fd fae1 	bl	800f94a <can2_cc_status_pack>
   while(!HAL_CAN_GetTxMailboxesFreeLevel(_hcan2));
 8012388:	bf00      	nop
 801238a:	4b0e      	ldr	r3, [pc, #56]	; (80123c4 <can2_cc_status_transmit+0x90>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4618      	mov	r0, r3
 8012390:	f013 fbad 	bl	8025aee <HAL_CAN_GetTxMailboxesFreeLevel>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d0f7      	beq.n	801238a <can2_cc_status_transmit+0x56>
   if (HAL_CAN_AddTxMessage(_hcan2, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 801239a:	4b0a      	ldr	r3, [pc, #40]	; (80123c4 <can2_cc_status_transmit+0x90>)
 801239c:	6818      	ldr	r0, [r3, #0]
 801239e:	f107 0220 	add.w	r2, r7, #32
 80123a2:	f107 0108 	add.w	r1, r7, #8
 80123a6:	4b08      	ldr	r3, [pc, #32]	; (80123c8 <can2_cc_status_transmit+0x94>)
 80123a8:	f013 fac6 	bl	8025938 <HAL_CAN_AddTxMessage>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d001      	beq.n	80123b6 <can2_cc_status_transmit+0x82>
       Error_Handler();
 80123b2:	f005 fa19 	bl	80177e8 <Error_Handler>
   }
}
 80123b6:	bf00      	nop
 80123b8:	3728      	adds	r7, #40	; 0x28
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	20001624 	.word	0x20001624
 80123c4:	20001634 	.word	0x20001634
 80123c8:	200014cc 	.word	0x200014cc

080123cc <can1_ams_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_status_1_receive() {
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b092      	sub	sp, #72	; 0x48
 80123d0:	af00      	add	r7, sp, #0
   if(can1_ams_status_1_flag) {
 80123d2:	4b5c      	ldr	r3, [pc, #368]	; (8012544 <can1_ams_status_1_receive+0x178>)
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f000 80af 	beq.w	801253a <can1_ams_status_1_receive+0x16e>
       ams_status_1_t ams_status_1;
       ams_status_1.charging_status = can1_ams_status_1_charging_status_decode(can1_ams_status_1.charging_status);
 80123dc:	4b5a      	ldr	r3, [pc, #360]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7ef f876 	bl	80014d2 <can1_ams_status_1_charging_status_decode>
 80123e6:	ec53 2b10 	vmov	r2, r3, d0
 80123ea:	4610      	mov	r0, r2
 80123ec:	4619      	mov	r1, r3
 80123ee:	f7ee fbcd 	bl	8000b8c <__aeabi_d2uiz>
 80123f2:	4603      	mov	r3, r0
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	70fb      	strb	r3, [r7, #3]
       ams_status_1.air1_closed = can1_ams_status_1_air1_closed_decode(can1_ams_status_1.air1_closed);
 80123f8:	4b53      	ldr	r3, [pc, #332]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80123fa:	785b      	ldrb	r3, [r3, #1]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ef f88b 	bl	8001518 <can1_ams_status_1_air1_closed_decode>
 8012402:	ec53 2b10 	vmov	r2, r3, d0
 8012406:	4610      	mov	r0, r2
 8012408:	4619      	mov	r1, r3
 801240a:	f7ee fbbf 	bl	8000b8c <__aeabi_d2uiz>
 801240e:	4603      	mov	r3, r0
 8012410:	b2db      	uxtb	r3, r3
 8012412:	703b      	strb	r3, [r7, #0]
       ams_status_1.air2_closed = can1_ams_status_1_air2_closed_decode(can1_ams_status_1.air2_closed);
 8012414:	4b4c      	ldr	r3, [pc, #304]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 8012416:	789b      	ldrb	r3, [r3, #2]
 8012418:	4618      	mov	r0, r3
 801241a:	f7ef f8a0 	bl	800155e <can1_ams_status_1_air2_closed_decode>
 801241e:	ec53 2b10 	vmov	r2, r3, d0
 8012422:	4610      	mov	r0, r2
 8012424:	4619      	mov	r1, r3
 8012426:	f7ee fbb1 	bl	8000b8c <__aeabi_d2uiz>
 801242a:	4603      	mov	r3, r0
 801242c:	b2db      	uxtb	r3, r3
 801242e:	707b      	strb	r3, [r7, #1]
       ams_status_1.sc_closed = can1_ams_status_1_sc_closed_decode(can1_ams_status_1.sc_closed);
 8012430:	4b45      	ldr	r3, [pc, #276]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 8012432:	78db      	ldrb	r3, [r3, #3]
 8012434:	4618      	mov	r0, r3
 8012436:	f7ef f8b5 	bl	80015a4 <can1_ams_status_1_sc_closed_decode>
 801243a:	ec53 2b10 	vmov	r2, r3, d0
 801243e:	4610      	mov	r0, r2
 8012440:	4619      	mov	r1, r3
 8012442:	f7ee fba3 	bl	8000b8c <__aeabi_d2uiz>
 8012446:	4603      	mov	r3, r0
 8012448:	b2db      	uxtb	r3, r3
 801244a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
       ams_status_1.pre_charge_status = can1_ams_status_1_pre_charge_status_decode(can1_ams_status_1.pre_charge_status);
 801244e:	4b3e      	ldr	r3, [pc, #248]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 8012450:	791b      	ldrb	r3, [r3, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f7ef f8c9 	bl	80015ea <can1_ams_status_1_pre_charge_status_decode>
 8012458:	ec53 2b10 	vmov	r2, r3, d0
 801245c:	4610      	mov	r0, r2
 801245e:	4619      	mov	r1, r3
 8012460:	f7ee fb94 	bl	8000b8c <__aeabi_d2uiz>
 8012464:	4603      	mov	r3, r0
 8012466:	b2db      	uxtb	r3, r3
 8012468:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
       ams_status_1.ams_error = can1_ams_status_1_ams_error_decode(can1_ams_status_1.ams_error);
 801246c:	4b36      	ldr	r3, [pc, #216]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 801246e:	795b      	ldrb	r3, [r3, #5]
 8012470:	4618      	mov	r0, r3
 8012472:	f7ef f8dd 	bl	8001630 <can1_ams_status_1_ams_error_decode>
 8012476:	ec53 2b10 	vmov	r2, r3, d0
 801247a:	4610      	mov	r0, r2
 801247c:	4619      	mov	r1, r3
 801247e:	f7ee fb85 	bl	8000b8c <__aeabi_d2uiz>
 8012482:	4603      	mov	r3, r0
 8012484:	b2db      	uxtb	r3, r3
 8012486:	70bb      	strb	r3, [r7, #2]
       ams_status_1.imd_error = can1_ams_status_1_imd_error_decode(can1_ams_status_1.imd_error);
 8012488:	4b2f      	ldr	r3, [pc, #188]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 801248a:	799b      	ldrb	r3, [r3, #6]
 801248c:	4618      	mov	r0, r3
 801248e:	f7ef f8f2 	bl	8001676 <can1_ams_status_1_imd_error_decode>
 8012492:	ec53 2b10 	vmov	r2, r3, d0
 8012496:	4610      	mov	r0, r2
 8012498:	4619      	mov	r1, r3
 801249a:	f7ee fb77 	bl	8000b8c <__aeabi_d2uiz>
 801249e:	4603      	mov	r3, r0
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	743b      	strb	r3, [r7, #16]
       ams_status_1.state_of_charge = can1_ams_status_1_state_of_charge_decode(can1_ams_status_1.state_of_charge);
 80124a4:	4b28      	ldr	r3, [pc, #160]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80124a6:	79db      	ldrb	r3, [r3, #7]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ef f907 	bl	80016bc <can1_ams_status_1_state_of_charge_decode>
 80124ae:	eeb0 7a40 	vmov.f32	s14, s0
 80124b2:	eef0 7a60 	vmov.f32	s15, s1
 80124b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
       ams_status_1.min_cell_voltage = can1_ams_status_1_min_cell_voltage_decode(can1_ams_status_1.min_cell_voltage);
 80124ba:	4b23      	ldr	r3, [pc, #140]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80124bc:	7a1b      	ldrb	r3, [r3, #8]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7ef f93e 	bl	8001740 <can1_ams_status_1_min_cell_voltage_decode>
 80124c4:	eeb0 7a40 	vmov.f32	s14, s0
 80124c8:	eef0 7a60 	vmov.f32	s15, s1
 80124cc:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
       ams_status_1.max_cell_voltage = can1_ams_status_1_max_cell_voltage_decode(can1_ams_status_1.max_cell_voltage);
 80124d0:	4b1d      	ldr	r3, [pc, #116]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80124d2:	7a5b      	ldrb	r3, [r3, #9]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7ef f98b 	bl	80017f0 <can1_ams_status_1_max_cell_voltage_decode>
 80124da:	eeb0 7a40 	vmov.f32	s14, s0
 80124de:	eef0 7a60 	vmov.f32	s15, s1
 80124e2:	ed87 7b08 	vstr	d7, [r7, #32]
       ams_status_1.min_cell_temperature = can1_ams_status_1_min_cell_temperature_decode(can1_ams_status_1.min_cell_temperature);
 80124e6:	4b18      	ldr	r3, [pc, #96]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 80124e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7ef f9d7 	bl	80018a0 <can1_ams_status_1_min_cell_temperature_decode>
 80124f2:	eeb0 7a40 	vmov.f32	s14, s0
 80124f6:	eef0 7a60 	vmov.f32	s15, s1
 80124fa:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
       ams_status_1.max_cell_temperature = can1_ams_status_1_max_cell_temperature_decode(can1_ams_status_1.max_cell_temperature);
 80124fe:	4b12      	ldr	r3, [pc, #72]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 8012500:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012504:	4618      	mov	r0, r3
 8012506:	f7ef fa23 	bl	8001950 <can1_ams_status_1_max_cell_temperature_decode>
 801250a:	eeb0 7a40 	vmov.f32	s14, s0
 801250e:	eef0 7a60 	vmov.f32	s15, s1
 8012512:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_status_1.fan_speed = can1_ams_status_1_fan_speed_decode(can1_ams_status_1.fan_speed);
 8012516:	4b0c      	ldr	r3, [pc, #48]	; (8012548 <can1_ams_status_1_receive+0x17c>)
 8012518:	7b9b      	ldrb	r3, [r3, #14]
 801251a:	4618      	mov	r0, r3
 801251c:	f7ef fa51 	bl	80019c2 <can1_ams_status_1_fan_speed_decode>
 8012520:	eeb0 7a40 	vmov.f32	s14, s0
 8012524:	eef0 7a60 	vmov.f32	s15, s1
 8012528:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_status_1_rx_callback(&ams_status_1);
 801252c:	463b      	mov	r3, r7
 801252e:	4618      	mov	r0, r3
 8012530:	f001 fd8e 	bl	8014050 <can1_ams_status_1_rx_callback>
       can1_ams_status_1_flag = 0;
 8012534:	4b03      	ldr	r3, [pc, #12]	; (8012544 <can1_ams_status_1_receive+0x178>)
 8012536:	2200      	movs	r2, #0
 8012538:	701a      	strb	r2, [r3, #0]
   }
}
 801253a:	bf00      	nop
 801253c:	3748      	adds	r7, #72	; 0x48
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20001625 	.word	0x20001625
 8012548:	200014d8 	.word	0x200014d8

0801254c <can1_dbu_status_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_receive() {
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af00      	add	r7, sp, #0
   if(can1_dbu_status_1_flag) {
 8012552:	4b1b      	ldr	r3, [pc, #108]	; (80125c0 <can1_dbu_status_1_receive+0x74>)
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d02e      	beq.n	80125b8 <can1_dbu_status_1_receive+0x6c>
       dbu_status_1_t dbu_status_1;
       dbu_status_1.activate_ts_button = can1_dbu_status_1_activate_ts_button_decode(can1_dbu_status_1.activate_ts_button);
 801255a:	4b1a      	ldr	r3, [pc, #104]	; (80125c4 <can1_dbu_status_1_receive+0x78>)
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	4618      	mov	r0, r3
 8012560:	f7ef faf4 	bl	8001b4c <can1_dbu_status_1_activate_ts_button_decode>
 8012564:	ec53 2b10 	vmov	r2, r3, d0
 8012568:	4610      	mov	r0, r2
 801256a:	4619      	mov	r1, r3
 801256c:	f7ee fb0e 	bl	8000b8c <__aeabi_d2uiz>
 8012570:	4603      	mov	r3, r0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	703b      	strb	r3, [r7, #0]
       dbu_status_1.ready_to_drive_button = can1_dbu_status_1_ready_to_drive_button_decode(can1_dbu_status_1.ready_to_drive_button);
 8012576:	4b13      	ldr	r3, [pc, #76]	; (80125c4 <can1_dbu_status_1_receive+0x78>)
 8012578:	785b      	ldrb	r3, [r3, #1]
 801257a:	4618      	mov	r0, r3
 801257c:	f7ef fb09 	bl	8001b92 <can1_dbu_status_1_ready_to_drive_button_decode>
 8012580:	ec53 2b10 	vmov	r2, r3, d0
 8012584:	4610      	mov	r0, r2
 8012586:	4619      	mov	r1, r3
 8012588:	f7ee fb00 	bl	8000b8c <__aeabi_d2uiz>
 801258c:	4603      	mov	r3, r0
 801258e:	b2db      	uxtb	r3, r3
 8012590:	743b      	strb	r3, [r7, #16]
       dbu_status_1.dbu_temperature = can1_dbu_status_1_dbu_temperature_decode(can1_dbu_status_1.dbu_temperature);
 8012592:	4b0c      	ldr	r3, [pc, #48]	; (80125c4 <can1_dbu_status_1_receive+0x78>)
 8012594:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012598:	4618      	mov	r0, r3
 801259a:	f7ef fb3d 	bl	8001c18 <can1_dbu_status_1_dbu_temperature_decode>
 801259e:	eeb0 7a40 	vmov.f32	s14, s0
 80125a2:	eef0 7a60 	vmov.f32	s15, s1
 80125a6:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_dbu_status_1_rx_callback(&dbu_status_1);
 80125aa:	463b      	mov	r3, r7
 80125ac:	4618      	mov	r0, r3
 80125ae:	f003 f8cd 	bl	801574c <can1_dbu_status_1_rx_callback>
       can1_dbu_status_1_flag = 0;
 80125b2:	4b03      	ldr	r3, [pc, #12]	; (80125c0 <can1_dbu_status_1_receive+0x74>)
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
   }
}
 80125b8:	bf00      	nop
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	20001626 	.word	0x20001626
 80125c4:	200014e8 	.word	0x200014e8

080125c8 <can1_ams_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_temperatures_receive() {
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b088      	sub	sp, #32
 80125cc:	af00      	add	r7, sp, #0
   if(can1_ams_temperatures_flag) {
 80125ce:	4b1f      	ldr	r3, [pc, #124]	; (801264c <can1_ams_temperatures_receive+0x84>)
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d036      	beq.n	8012644 <can1_ams_temperatures_receive+0x7c>
       ams_temperatures_t ams_temperatures;
       ams_temperatures.pre_charge_resistor_temperature = can1_ams_temperatures_pre_charge_resistor_temperature_decode(can1_ams_temperatures.pre_charge_resistor_temperature);
 80125d6:	4b1e      	ldr	r3, [pc, #120]	; (8012650 <can1_ams_temperatures_receive+0x88>)
 80125d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ef fcbf 	bl	8001f60 <can1_ams_temperatures_pre_charge_resistor_temperature_decode>
 80125e2:	eeb0 7a40 	vmov.f32	s14, s0
 80125e6:	eef0 7a60 	vmov.f32	s15, s1
 80125ea:	ed87 7b06 	vstr	d7, [r7, #24]
       ams_temperatures.fuse_resistor_temperature = can1_ams_temperatures_fuse_resistor_temperature_decode(can1_ams_temperatures.fuse_resistor_temperature);
 80125ee:	4b18      	ldr	r3, [pc, #96]	; (8012650 <can1_ams_temperatures_receive+0x88>)
 80125f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ef fd0b 	bl	8002010 <can1_ams_temperatures_fuse_resistor_temperature_decode>
 80125fa:	eeb0 7a40 	vmov.f32	s14, s0
 80125fe:	eef0 7a60 	vmov.f32	s15, s1
 8012602:	ed87 7b04 	vstr	d7, [r7, #16]
       ams_temperatures.aux_1_temperature = can1_ams_temperatures_aux_1_temperature_decode(can1_ams_temperatures.aux_1_temperature);
 8012606:	4b12      	ldr	r3, [pc, #72]	; (8012650 <can1_ams_temperatures_receive+0x88>)
 8012608:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f7ef fd57 	bl	80020c0 <can1_ams_temperatures_aux_1_temperature_decode>
 8012612:	eeb0 7a40 	vmov.f32	s14, s0
 8012616:	eef0 7a60 	vmov.f32	s15, s1
 801261a:	ed87 7b00 	vstr	d7, [r7]
       ams_temperatures.aux_2_temperature = can1_ams_temperatures_aux_2_temperature_decode(can1_ams_temperatures.aux_2_temperature);
 801261e:	4b0c      	ldr	r3, [pc, #48]	; (8012650 <can1_ams_temperatures_receive+0x88>)
 8012620:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012624:	4618      	mov	r0, r3
 8012626:	f7ef fda3 	bl	8002170 <can1_ams_temperatures_aux_2_temperature_decode>
 801262a:	eeb0 7a40 	vmov.f32	s14, s0
 801262e:	eef0 7a60 	vmov.f32	s15, s1
 8012632:	ed87 7b02 	vstr	d7, [r7, #8]
       can1_ams_temperatures_rx_callback(&ams_temperatures);
 8012636:	463b      	mov	r3, r7
 8012638:	4618      	mov	r0, r3
 801263a:	f001 fd13 	bl	8014064 <can1_ams_temperatures_rx_callback>
       can1_ams_temperatures_flag = 0;
 801263e:	4b03      	ldr	r3, [pc, #12]	; (801264c <can1_ams_temperatures_receive+0x84>)
 8012640:	2200      	movs	r2, #0
 8012642:	701a      	strb	r2, [r3, #0]
   }
}
 8012644:	bf00      	nop
 8012646:	3720      	adds	r7, #32
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	20001627 	.word	0x20001627
 8012650:	200014ec 	.word	0x200014ec

08012654 <can1_ams_cell_voltages_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_voltages_receive() {
 8012654:	b580      	push	{r7, lr}
 8012656:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801265a:	af00      	add	r7, sp, #0
   if(can1_ams_cell_voltages_flag) {
 801265c:	4bdb      	ldr	r3, [pc, #876]	; (80129cc <can1_ams_cell_voltages_receive+0x378>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	f000 865a 	beq.w	801331a <can1_ams_cell_voltages_receive+0xcc6>
       ams_cell_voltages_t ams_cell_voltages;
       ams_cell_voltages.v1s1 = can1_ams_cell_voltages_v1s1_decode(can1_ams_cell_voltages.v1s1);
 8012666:	4bda      	ldr	r3, [pc, #872]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012668:	785b      	ldrb	r3, [r3, #1]
 801266a:	4618      	mov	r0, r3
 801266c:	f7f1 fde8 	bl	8004240 <can1_ams_cell_voltages_v1s1_decode>
 8012670:	eeb0 7a40 	vmov.f32	s14, s0
 8012674:	eef0 7a60 	vmov.f32	s15, s1
 8012678:	463b      	mov	r3, r7
 801267a:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_voltages.v7s1 = can1_ams_cell_voltages_v7s1_decode(can1_ams_cell_voltages.v7s1);
 801267e:	4bd4      	ldr	r3, [pc, #848]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012680:	789b      	ldrb	r3, [r3, #2]
 8012682:	4618      	mov	r0, r3
 8012684:	f7f1 fe34 	bl	80042f0 <can1_ams_cell_voltages_v7s1_decode>
 8012688:	eeb0 7a40 	vmov.f32	s14, s0
 801268c:	eef0 7a60 	vmov.f32	s15, s1
 8012690:	463b      	mov	r3, r7
 8012692:	ed83 7b90 	vstr	d7, [r3, #576]	; 0x240
       ams_cell_voltages.v1s2 = can1_ams_cell_voltages_v1s2_decode(can1_ams_cell_voltages.v1s2);
 8012696:	4bce      	ldr	r3, [pc, #824]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012698:	78db      	ldrb	r3, [r3, #3]
 801269a:	4618      	mov	r0, r3
 801269c:	f7f1 fe80 	bl	80043a0 <can1_ams_cell_voltages_v1s2_decode>
 80126a0:	eeb0 7a40 	vmov.f32	s14, s0
 80126a4:	eef0 7a60 	vmov.f32	s15, s1
 80126a8:	463b      	mov	r3, r7
 80126aa:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_voltages.v7s2 = can1_ams_cell_voltages_v7s2_decode(can1_ams_cell_voltages.v7s2);
 80126ae:	4bc8      	ldr	r3, [pc, #800]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80126b0:	791b      	ldrb	r3, [r3, #4]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7f1 fecc 	bl	8004450 <can1_ams_cell_voltages_v7s2_decode>
 80126b8:	eeb0 7a40 	vmov.f32	s14, s0
 80126bc:	eef0 7a60 	vmov.f32	s15, s1
 80126c0:	463b      	mov	r3, r7
 80126c2:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248
       ams_cell_voltages.v1s3 = can1_ams_cell_voltages_v1s3_decode(can1_ams_cell_voltages.v1s3);
 80126c6:	4bc2      	ldr	r3, [pc, #776]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80126c8:	795b      	ldrb	r3, [r3, #5]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7f1 ff18 	bl	8004500 <can1_ams_cell_voltages_v1s3_decode>
 80126d0:	eeb0 7a40 	vmov.f32	s14, s0
 80126d4:	eef0 7a60 	vmov.f32	s15, s1
 80126d8:	463b      	mov	r3, r7
 80126da:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_voltages.v7s3 = can1_ams_cell_voltages_v7s3_decode(can1_ams_cell_voltages.v7s3);
 80126de:	4bbc      	ldr	r3, [pc, #752]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80126e0:	799b      	ldrb	r3, [r3, #6]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f1 ff64 	bl	80045b0 <can1_ams_cell_voltages_v7s3_decode>
 80126e8:	eeb0 7a40 	vmov.f32	s14, s0
 80126ec:	eef0 7a60 	vmov.f32	s15, s1
 80126f0:	463b      	mov	r3, r7
 80126f2:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250
       ams_cell_voltages.v1s4 = can1_ams_cell_voltages_v1s4_decode(can1_ams_cell_voltages.v1s4);
 80126f6:	4bb6      	ldr	r3, [pc, #728]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80126f8:	79db      	ldrb	r3, [r3, #7]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7f1 ffb0 	bl	8004660 <can1_ams_cell_voltages_v1s4_decode>
 8012700:	eeb0 7a40 	vmov.f32	s14, s0
 8012704:	eef0 7a60 	vmov.f32	s15, s1
 8012708:	463b      	mov	r3, r7
 801270a:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_voltages.v7s4 = can1_ams_cell_voltages_v7s4_decode(can1_ams_cell_voltages.v7s4);
 801270e:	4bb0      	ldr	r3, [pc, #704]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012710:	7a1b      	ldrb	r3, [r3, #8]
 8012712:	4618      	mov	r0, r3
 8012714:	f7f1 fffc 	bl	8004710 <can1_ams_cell_voltages_v7s4_decode>
 8012718:	eeb0 7a40 	vmov.f32	s14, s0
 801271c:	eef0 7a60 	vmov.f32	s15, s1
 8012720:	463b      	mov	r3, r7
 8012722:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
       ams_cell_voltages.v1s5 = can1_ams_cell_voltages_v1s5_decode(can1_ams_cell_voltages.v1s5);
 8012726:	4baa      	ldr	r3, [pc, #680]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012728:	7a5b      	ldrb	r3, [r3, #9]
 801272a:	4618      	mov	r0, r3
 801272c:	f7f2 f848 	bl	80047c0 <can1_ams_cell_voltages_v1s5_decode>
 8012730:	eeb0 7a40 	vmov.f32	s14, s0
 8012734:	eef0 7a60 	vmov.f32	s15, s1
 8012738:	463b      	mov	r3, r7
 801273a:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_voltages.v7s5 = can1_ams_cell_voltages_v7s5_decode(can1_ams_cell_voltages.v7s5);
 801273e:	4ba4      	ldr	r3, [pc, #656]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012740:	7a9b      	ldrb	r3, [r3, #10]
 8012742:	4618      	mov	r0, r3
 8012744:	f7f2 f894 	bl	8004870 <can1_ams_cell_voltages_v7s5_decode>
 8012748:	eeb0 7a40 	vmov.f32	s14, s0
 801274c:	eef0 7a60 	vmov.f32	s15, s1
 8012750:	463b      	mov	r3, r7
 8012752:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
       ams_cell_voltages.v1s6 = can1_ams_cell_voltages_v1s6_decode(can1_ams_cell_voltages.v1s6);
 8012756:	4b9e      	ldr	r3, [pc, #632]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012758:	7adb      	ldrb	r3, [r3, #11]
 801275a:	4618      	mov	r0, r3
 801275c:	f7f2 f8e0 	bl	8004920 <can1_ams_cell_voltages_v1s6_decode>
 8012760:	eeb0 7a40 	vmov.f32	s14, s0
 8012764:	eef0 7a60 	vmov.f32	s15, s1
 8012768:	463b      	mov	r3, r7
 801276a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_voltages.v7s6 = can1_ams_cell_voltages_v7s6_decode(can1_ams_cell_voltages.v7s6);
 801276e:	4b98      	ldr	r3, [pc, #608]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012770:	7b1b      	ldrb	r3, [r3, #12]
 8012772:	4618      	mov	r0, r3
 8012774:	f7f2 f92c 	bl	80049d0 <can1_ams_cell_voltages_v7s6_decode>
 8012778:	eeb0 7a40 	vmov.f32	s14, s0
 801277c:	eef0 7a60 	vmov.f32	s15, s1
 8012780:	463b      	mov	r3, r7
 8012782:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268
       ams_cell_voltages.v1s7 = can1_ams_cell_voltages_v1s7_decode(can1_ams_cell_voltages.v1s7);
 8012786:	4b92      	ldr	r3, [pc, #584]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012788:	7b5b      	ldrb	r3, [r3, #13]
 801278a:	4618      	mov	r0, r3
 801278c:	f7f2 f978 	bl	8004a80 <can1_ams_cell_voltages_v1s7_decode>
 8012790:	eeb0 7a40 	vmov.f32	s14, s0
 8012794:	eef0 7a60 	vmov.f32	s15, s1
 8012798:	463b      	mov	r3, r7
 801279a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_voltages.v7s7 = can1_ams_cell_voltages_v7s7_decode(can1_ams_cell_voltages.v7s7);
 801279e:	4b8c      	ldr	r3, [pc, #560]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80127a0:	7b9b      	ldrb	r3, [r3, #14]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7f2 f9c4 	bl	8004b30 <can1_ams_cell_voltages_v7s7_decode>
 80127a8:	eeb0 7a40 	vmov.f32	s14, s0
 80127ac:	eef0 7a60 	vmov.f32	s15, s1
 80127b0:	463b      	mov	r3, r7
 80127b2:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270
       ams_cell_voltages.v1s8 = can1_ams_cell_voltages_v1s8_decode(can1_ams_cell_voltages.v1s8);
 80127b6:	4b86      	ldr	r3, [pc, #536]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80127b8:	7bdb      	ldrb	r3, [r3, #15]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7f2 fa10 	bl	8004be0 <can1_ams_cell_voltages_v1s8_decode>
 80127c0:	eeb0 7a40 	vmov.f32	s14, s0
 80127c4:	eef0 7a60 	vmov.f32	s15, s1
 80127c8:	463b      	mov	r3, r7
 80127ca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_voltages.v7s8 = can1_ams_cell_voltages_v7s8_decode(can1_ams_cell_voltages.v7s8);
 80127ce:	4b80      	ldr	r3, [pc, #512]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80127d0:	7c1b      	ldrb	r3, [r3, #16]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f2 fa5c 	bl	8004c90 <can1_ams_cell_voltages_v7s8_decode>
 80127d8:	eeb0 7a40 	vmov.f32	s14, s0
 80127dc:	eef0 7a60 	vmov.f32	s15, s1
 80127e0:	463b      	mov	r3, r7
 80127e2:	ed83 7b9e 	vstr	d7, [r3, #632]	; 0x278
       ams_cell_voltages.v1s9 = can1_ams_cell_voltages_v1s9_decode(can1_ams_cell_voltages.v1s9);
 80127e6:	4b7a      	ldr	r3, [pc, #488]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80127e8:	7c5b      	ldrb	r3, [r3, #17]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f2 faa8 	bl	8004d40 <can1_ams_cell_voltages_v1s9_decode>
 80127f0:	eeb0 7a40 	vmov.f32	s14, s0
 80127f4:	eef0 7a60 	vmov.f32	s15, s1
 80127f8:	463b      	mov	r3, r7
 80127fa:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_voltages.v7s9 = can1_ams_cell_voltages_v7s9_decode(can1_ams_cell_voltages.v7s9);
 80127fe:	4b74      	ldr	r3, [pc, #464]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012800:	7c9b      	ldrb	r3, [r3, #18]
 8012802:	4618      	mov	r0, r3
 8012804:	f7f2 faf4 	bl	8004df0 <can1_ams_cell_voltages_v7s9_decode>
 8012808:	eeb0 7a40 	vmov.f32	s14, s0
 801280c:	eef0 7a60 	vmov.f32	s15, s1
 8012810:	463b      	mov	r3, r7
 8012812:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280
       ams_cell_voltages.v1s10 = can1_ams_cell_voltages_v1s10_decode(can1_ams_cell_voltages.v1s10);
 8012816:	4b6e      	ldr	r3, [pc, #440]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012818:	7cdb      	ldrb	r3, [r3, #19]
 801281a:	4618      	mov	r0, r3
 801281c:	f7f2 fb40 	bl	8004ea0 <can1_ams_cell_voltages_v1s10_decode>
 8012820:	eeb0 7a40 	vmov.f32	s14, s0
 8012824:	eef0 7a60 	vmov.f32	s15, s1
 8012828:	463b      	mov	r3, r7
 801282a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_voltages.v7s10 = can1_ams_cell_voltages_v7s10_decode(can1_ams_cell_voltages.v7s10);
 801282e:	4b68      	ldr	r3, [pc, #416]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012830:	7d1b      	ldrb	r3, [r3, #20]
 8012832:	4618      	mov	r0, r3
 8012834:	f7f2 fb8c 	bl	8004f50 <can1_ams_cell_voltages_v7s10_decode>
 8012838:	eeb0 7a40 	vmov.f32	s14, s0
 801283c:	eef0 7a60 	vmov.f32	s15, s1
 8012840:	463b      	mov	r3, r7
 8012842:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288
       ams_cell_voltages.v1s11 = can1_ams_cell_voltages_v1s11_decode(can1_ams_cell_voltages.v1s11);
 8012846:	4b62      	ldr	r3, [pc, #392]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012848:	7d5b      	ldrb	r3, [r3, #21]
 801284a:	4618      	mov	r0, r3
 801284c:	f7f2 fbd8 	bl	8005000 <can1_ams_cell_voltages_v1s11_decode>
 8012850:	eeb0 7a40 	vmov.f32	s14, s0
 8012854:	eef0 7a60 	vmov.f32	s15, s1
 8012858:	463b      	mov	r3, r7
 801285a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_voltages.v7s11 = can1_ams_cell_voltages_v7s11_decode(can1_ams_cell_voltages.v7s11);
 801285e:	4b5c      	ldr	r3, [pc, #368]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012860:	7d9b      	ldrb	r3, [r3, #22]
 8012862:	4618      	mov	r0, r3
 8012864:	f7f2 fc24 	bl	80050b0 <can1_ams_cell_voltages_v7s11_decode>
 8012868:	eeb0 7a40 	vmov.f32	s14, s0
 801286c:	eef0 7a60 	vmov.f32	s15, s1
 8012870:	463b      	mov	r3, r7
 8012872:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
       ams_cell_voltages.v1s12 = can1_ams_cell_voltages_v1s12_decode(can1_ams_cell_voltages.v1s12);
 8012876:	4b56      	ldr	r3, [pc, #344]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012878:	7ddb      	ldrb	r3, [r3, #23]
 801287a:	4618      	mov	r0, r3
 801287c:	f7f2 fc70 	bl	8005160 <can1_ams_cell_voltages_v1s12_decode>
 8012880:	eeb0 7a40 	vmov.f32	s14, s0
 8012884:	eef0 7a60 	vmov.f32	s15, s1
 8012888:	463b      	mov	r3, r7
 801288a:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_voltages.v7s12 = can1_ams_cell_voltages_v7s12_decode(can1_ams_cell_voltages.v7s12);
 801288e:	4b50      	ldr	r3, [pc, #320]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012890:	7e1b      	ldrb	r3, [r3, #24]
 8012892:	4618      	mov	r0, r3
 8012894:	f7f2 fcbc 	bl	8005210 <can1_ams_cell_voltages_v7s12_decode>
 8012898:	eeb0 7a40 	vmov.f32	s14, s0
 801289c:	eef0 7a60 	vmov.f32	s15, s1
 80128a0:	463b      	mov	r3, r7
 80128a2:	ed83 7ba6 	vstr	d7, [r3, #664]	; 0x298
       ams_cell_voltages.v2s1 = can1_ams_cell_voltages_v2s1_decode(can1_ams_cell_voltages.v2s1);
 80128a6:	4b4a      	ldr	r3, [pc, #296]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80128a8:	7e5b      	ldrb	r3, [r3, #25]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f2 fd08 	bl	80052c0 <can1_ams_cell_voltages_v2s1_decode>
 80128b0:	eeb0 7a40 	vmov.f32	s14, s0
 80128b4:	eef0 7a60 	vmov.f32	s15, s1
 80128b8:	463b      	mov	r3, r7
 80128ba:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_voltages.v8s1 = can1_ams_cell_voltages_v8s1_decode(can1_ams_cell_voltages.v8s1);
 80128be:	4b44      	ldr	r3, [pc, #272]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80128c0:	7e9b      	ldrb	r3, [r3, #26]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7f2 fd54 	bl	8005370 <can1_ams_cell_voltages_v8s1_decode>
 80128c8:	eeb0 7a40 	vmov.f32	s14, s0
 80128cc:	eef0 7a60 	vmov.f32	s15, s1
 80128d0:	463b      	mov	r3, r7
 80128d2:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0
       ams_cell_voltages.v2s2 = can1_ams_cell_voltages_v2s2_decode(can1_ams_cell_voltages.v2s2);
 80128d6:	4b3e      	ldr	r3, [pc, #248]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80128d8:	7edb      	ldrb	r3, [r3, #27]
 80128da:	4618      	mov	r0, r3
 80128dc:	f7f2 fda0 	bl	8005420 <can1_ams_cell_voltages_v2s2_decode>
 80128e0:	eeb0 7a40 	vmov.f32	s14, s0
 80128e4:	eef0 7a60 	vmov.f32	s15, s1
 80128e8:	463b      	mov	r3, r7
 80128ea:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_voltages.v8s2 = can1_ams_cell_voltages_v8s2_decode(can1_ams_cell_voltages.v8s2);
 80128ee:	4b38      	ldr	r3, [pc, #224]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80128f0:	7f1b      	ldrb	r3, [r3, #28]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7f2 fdec 	bl	80054d0 <can1_ams_cell_voltages_v8s2_decode>
 80128f8:	eeb0 7a40 	vmov.f32	s14, s0
 80128fc:	eef0 7a60 	vmov.f32	s15, s1
 8012900:	463b      	mov	r3, r7
 8012902:	ed83 7baa 	vstr	d7, [r3, #680]	; 0x2a8
       ams_cell_voltages.v2s3 = can1_ams_cell_voltages_v2s3_decode(can1_ams_cell_voltages.v2s3);
 8012906:	4b32      	ldr	r3, [pc, #200]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012908:	7f5b      	ldrb	r3, [r3, #29]
 801290a:	4618      	mov	r0, r3
 801290c:	f7f2 fe38 	bl	8005580 <can1_ams_cell_voltages_v2s3_decode>
 8012910:	eeb0 7a40 	vmov.f32	s14, s0
 8012914:	eef0 7a60 	vmov.f32	s15, s1
 8012918:	463b      	mov	r3, r7
 801291a:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_voltages.v8s3 = can1_ams_cell_voltages_v8s3_decode(can1_ams_cell_voltages.v8s3);
 801291e:	4b2c      	ldr	r3, [pc, #176]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012920:	7f9b      	ldrb	r3, [r3, #30]
 8012922:	4618      	mov	r0, r3
 8012924:	f7f2 fe84 	bl	8005630 <can1_ams_cell_voltages_v8s3_decode>
 8012928:	eeb0 7a40 	vmov.f32	s14, s0
 801292c:	eef0 7a60 	vmov.f32	s15, s1
 8012930:	463b      	mov	r3, r7
 8012932:	ed83 7bac 	vstr	d7, [r3, #688]	; 0x2b0
       ams_cell_voltages.v2s4 = can1_ams_cell_voltages_v2s4_decode(can1_ams_cell_voltages.v2s4);
 8012936:	4b26      	ldr	r3, [pc, #152]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012938:	7fdb      	ldrb	r3, [r3, #31]
 801293a:	4618      	mov	r0, r3
 801293c:	f7f2 fed0 	bl	80056e0 <can1_ams_cell_voltages_v2s4_decode>
 8012940:	eeb0 7a40 	vmov.f32	s14, s0
 8012944:	eef0 7a60 	vmov.f32	s15, s1
 8012948:	463b      	mov	r3, r7
 801294a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_voltages.v8s4 = can1_ams_cell_voltages_v8s4_decode(can1_ams_cell_voltages.v8s4);
 801294e:	4b20      	ldr	r3, [pc, #128]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012954:	4618      	mov	r0, r3
 8012956:	f7f2 ff1b 	bl	8005790 <can1_ams_cell_voltages_v8s4_decode>
 801295a:	eeb0 7a40 	vmov.f32	s14, s0
 801295e:	eef0 7a60 	vmov.f32	s15, s1
 8012962:	463b      	mov	r3, r7
 8012964:	ed83 7bae 	vstr	d7, [r3, #696]	; 0x2b8
       ams_cell_voltages.v2s5 = can1_ams_cell_voltages_v2s5_decode(can1_ams_cell_voltages.v2s5);
 8012968:	4b19      	ldr	r3, [pc, #100]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 801296a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801296e:	4618      	mov	r0, r3
 8012970:	f7f2 ff66 	bl	8005840 <can1_ams_cell_voltages_v2s5_decode>
 8012974:	eeb0 7a40 	vmov.f32	s14, s0
 8012978:	eef0 7a60 	vmov.f32	s15, s1
 801297c:	463b      	mov	r3, r7
 801297e:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_voltages.v8s5 = can1_ams_cell_voltages_v8s5_decode(can1_ams_cell_voltages.v8s5);
 8012982:	4b13      	ldr	r3, [pc, #76]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 8012984:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012988:	4618      	mov	r0, r3
 801298a:	f7f2 ffb1 	bl	80058f0 <can1_ams_cell_voltages_v8s5_decode>
 801298e:	eeb0 7a40 	vmov.f32	s14, s0
 8012992:	eef0 7a60 	vmov.f32	s15, s1
 8012996:	463b      	mov	r3, r7
 8012998:	ed83 7bb0 	vstr	d7, [r3, #704]	; 0x2c0
       ams_cell_voltages.v2s6 = can1_ams_cell_voltages_v2s6_decode(can1_ams_cell_voltages.v2s6);
 801299c:	4b0c      	ldr	r3, [pc, #48]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 801299e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f2 fffc 	bl	80059a0 <can1_ams_cell_voltages_v2s6_decode>
 80129a8:	eeb0 7a40 	vmov.f32	s14, s0
 80129ac:	eef0 7a60 	vmov.f32	s15, s1
 80129b0:	463b      	mov	r3, r7
 80129b2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_voltages.v8s6 = can1_ams_cell_voltages_v8s6_decode(can1_ams_cell_voltages.v8s6);
 80129b6:	4b06      	ldr	r3, [pc, #24]	; (80129d0 <can1_ams_cell_voltages_receive+0x37c>)
 80129b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80129bc:	4618      	mov	r0, r3
 80129be:	f7f3 f847 	bl	8005a50 <can1_ams_cell_voltages_v8s6_decode>
 80129c2:	eeb0 7a40 	vmov.f32	s14, s0
 80129c6:	eef0 7a60 	vmov.f32	s15, s1
 80129ca:	e003      	b.n	80129d4 <can1_ams_cell_voltages_receive+0x380>
 80129cc:	20001628 	.word	0x20001628
 80129d0:	200014f4 	.word	0x200014f4
 80129d4:	463b      	mov	r3, r7
 80129d6:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8
       ams_cell_voltages.v2s7 = can1_ams_cell_voltages_v2s7_decode(can1_ams_cell_voltages.v2s7);
 80129da:	4bec      	ldr	r3, [pc, #944]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 80129dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7f3 f88d 	bl	8005b00 <can1_ams_cell_voltages_v2s7_decode>
 80129e6:	eeb0 7a40 	vmov.f32	s14, s0
 80129ea:	eef0 7a60 	vmov.f32	s15, s1
 80129ee:	463b      	mov	r3, r7
 80129f0:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_voltages.v8s7 = can1_ams_cell_voltages_v8s7_decode(can1_ams_cell_voltages.v8s7);
 80129f4:	4be5      	ldr	r3, [pc, #916]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 80129f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7f3 f8d8 	bl	8005bb0 <can1_ams_cell_voltages_v8s7_decode>
 8012a00:	eeb0 7a40 	vmov.f32	s14, s0
 8012a04:	eef0 7a60 	vmov.f32	s15, s1
 8012a08:	463b      	mov	r3, r7
 8012a0a:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0
       ams_cell_voltages.v2s8 = can1_ams_cell_voltages_v2s8_decode(can1_ams_cell_voltages.v2s8);
 8012a0e:	4bdf      	ldr	r3, [pc, #892]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f3 f923 	bl	8005c60 <can1_ams_cell_voltages_v2s8_decode>
 8012a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8012a1e:	eef0 7a60 	vmov.f32	s15, s1
 8012a22:	463b      	mov	r3, r7
 8012a24:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_voltages.v8s8 = can1_ams_cell_voltages_v8s8_decode(can1_ams_cell_voltages.v8s8);
 8012a28:	4bd8      	ldr	r3, [pc, #864]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7f3 f96e 	bl	8005d10 <can1_ams_cell_voltages_v8s8_decode>
 8012a34:	eeb0 7a40 	vmov.f32	s14, s0
 8012a38:	eef0 7a60 	vmov.f32	s15, s1
 8012a3c:	463b      	mov	r3, r7
 8012a3e:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8
       ams_cell_voltages.v2s9 = can1_ams_cell_voltages_v2s9_decode(can1_ams_cell_voltages.v2s9);
 8012a42:	4bd2      	ldr	r3, [pc, #840]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f3 f9b9 	bl	8005dc0 <can1_ams_cell_voltages_v2s9_decode>
 8012a4e:	eeb0 7a40 	vmov.f32	s14, s0
 8012a52:	eef0 7a60 	vmov.f32	s15, s1
 8012a56:	463b      	mov	r3, r7
 8012a58:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_voltages.v8s9 = can1_ams_cell_voltages_v8s9_decode(can1_ams_cell_voltages.v8s9);
 8012a5c:	4bcb      	ldr	r3, [pc, #812]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f3 fa04 	bl	8005e70 <can1_ams_cell_voltages_v8s9_decode>
 8012a68:	eeb0 7a40 	vmov.f32	s14, s0
 8012a6c:	eef0 7a60 	vmov.f32	s15, s1
 8012a70:	463b      	mov	r3, r7
 8012a72:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0
       ams_cell_voltages.v2s10 = can1_ams_cell_voltages_v2s10_decode(can1_ams_cell_voltages.v2s10);
 8012a76:	4bc5      	ldr	r3, [pc, #788]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a78:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7f3 fa4f 	bl	8005f20 <can1_ams_cell_voltages_v2s10_decode>
 8012a82:	eeb0 7a40 	vmov.f32	s14, s0
 8012a86:	eef0 7a60 	vmov.f32	s15, s1
 8012a8a:	463b      	mov	r3, r7
 8012a8c:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_voltages.v8s10 = can1_ams_cell_voltages_v8s10_decode(can1_ams_cell_voltages.v8s10);
 8012a90:	4bbe      	ldr	r3, [pc, #760]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012a92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7f3 fa9a 	bl	8005fd0 <can1_ams_cell_voltages_v8s10_decode>
 8012a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8012aa0:	eef0 7a60 	vmov.f32	s15, s1
 8012aa4:	463b      	mov	r3, r7
 8012aa6:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8
       ams_cell_voltages.v2s11 = can1_ams_cell_voltages_v2s11_decode(can1_ams_cell_voltages.v2s11);
 8012aaa:	4bb8      	ldr	r3, [pc, #736]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012aac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f3 fae5 	bl	8006080 <can1_ams_cell_voltages_v2s11_decode>
 8012ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8012aba:	eef0 7a60 	vmov.f32	s15, s1
 8012abe:	463b      	mov	r3, r7
 8012ac0:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_voltages.v8s11 = can1_ams_cell_voltages_v8s11_decode(can1_ams_cell_voltages.v8s11);
 8012ac4:	4bb1      	ldr	r3, [pc, #708]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012ac6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f3 fb30 	bl	8006130 <can1_ams_cell_voltages_v8s11_decode>
 8012ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ad4:	eef0 7a60 	vmov.f32	s15, s1
 8012ad8:	463b      	mov	r3, r7
 8012ada:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0
       ams_cell_voltages.v2s12 = can1_ams_cell_voltages_v2s12_decode(can1_ams_cell_voltages.v2s12);
 8012ade:	4bab      	ldr	r3, [pc, #684]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012ae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f3 fb7b 	bl	80061e0 <can1_ams_cell_voltages_v2s12_decode>
 8012aea:	eeb0 7a40 	vmov.f32	s14, s0
 8012aee:	eef0 7a60 	vmov.f32	s15, s1
 8012af2:	463b      	mov	r3, r7
 8012af4:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_voltages.v8s12 = can1_ams_cell_voltages_v8s12_decode(can1_ams_cell_voltages.v8s12);
 8012af8:	4ba4      	ldr	r3, [pc, #656]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7f3 fbc6 	bl	8006290 <can1_ams_cell_voltages_v8s12_decode>
 8012b04:	eeb0 7a40 	vmov.f32	s14, s0
 8012b08:	eef0 7a60 	vmov.f32	s15, s1
 8012b0c:	463b      	mov	r3, r7
 8012b0e:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8
       ams_cell_voltages.v3s1 = can1_ams_cell_voltages_v3s1_decode(can1_ams_cell_voltages.v3s1);
 8012b12:	4b9e      	ldr	r3, [pc, #632]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f3 fc11 	bl	8006340 <can1_ams_cell_voltages_v3s1_decode>
 8012b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8012b22:	eef0 7a60 	vmov.f32	s15, s1
 8012b26:	463b      	mov	r3, r7
 8012b28:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_voltages.v9s1 = can1_ams_cell_voltages_v9s1_decode(can1_ams_cell_voltages.v9s1);
 8012b2c:	4b97      	ldr	r3, [pc, #604]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7f3 fc5c 	bl	80063f0 <can1_ams_cell_voltages_v9s1_decode>
 8012b38:	eeb0 7a40 	vmov.f32	s14, s0
 8012b3c:	eef0 7a60 	vmov.f32	s15, s1
 8012b40:	463b      	mov	r3, r7
 8012b42:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300
       ams_cell_voltages.v3s2 = can1_ams_cell_voltages_v3s2_decode(can1_ams_cell_voltages.v3s2);
 8012b46:	4b91      	ldr	r3, [pc, #580]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7f3 fca7 	bl	80064a0 <can1_ams_cell_voltages_v3s2_decode>
 8012b52:	eeb0 7a40 	vmov.f32	s14, s0
 8012b56:	eef0 7a60 	vmov.f32	s15, s1
 8012b5a:	463b      	mov	r3, r7
 8012b5c:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_voltages.v9s2 = can1_ams_cell_voltages_v9s2_decode(can1_ams_cell_voltages.v9s2);
 8012b60:	4b8a      	ldr	r3, [pc, #552]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7f3 fcf2 	bl	8006550 <can1_ams_cell_voltages_v9s2_decode>
 8012b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8012b70:	eef0 7a60 	vmov.f32	s15, s1
 8012b74:	463b      	mov	r3, r7
 8012b76:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308
       ams_cell_voltages.v3s3 = can1_ams_cell_voltages_v3s3_decode(can1_ams_cell_voltages.v3s3);
 8012b7a:	4b84      	ldr	r3, [pc, #528]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7f3 fd3d 	bl	8006600 <can1_ams_cell_voltages_v3s3_decode>
 8012b86:	eeb0 7a40 	vmov.f32	s14, s0
 8012b8a:	eef0 7a60 	vmov.f32	s15, s1
 8012b8e:	463b      	mov	r3, r7
 8012b90:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_voltages.v9s3 = can1_ams_cell_voltages_v9s3_decode(can1_ams_cell_voltages.v9s3);
 8012b94:	4b7d      	ldr	r3, [pc, #500]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012b96:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7f3 fd88 	bl	80066b0 <can1_ams_cell_voltages_v9s3_decode>
 8012ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ba4:	eef0 7a60 	vmov.f32	s15, s1
 8012ba8:	463b      	mov	r3, r7
 8012baa:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310
       ams_cell_voltages.v3s4 = can1_ams_cell_voltages_v3s4_decode(can1_ams_cell_voltages.v3s4);
 8012bae:	4b77      	ldr	r3, [pc, #476]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012bb0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7f3 fdd3 	bl	8006760 <can1_ams_cell_voltages_v3s4_decode>
 8012bba:	eeb0 7a40 	vmov.f32	s14, s0
 8012bbe:	eef0 7a60 	vmov.f32	s15, s1
 8012bc2:	463b      	mov	r3, r7
 8012bc4:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_voltages.v9s4 = can1_ams_cell_voltages_v9s4_decode(can1_ams_cell_voltages.v9s4);
 8012bc8:	4b70      	ldr	r3, [pc, #448]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012bca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f3 fe1e 	bl	8006810 <can1_ams_cell_voltages_v9s4_decode>
 8012bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8012bd8:	eef0 7a60 	vmov.f32	s15, s1
 8012bdc:	463b      	mov	r3, r7
 8012bde:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318
       ams_cell_voltages.v3s5 = can1_ams_cell_voltages_v3s5_decode(can1_ams_cell_voltages.v3s5);
 8012be2:	4b6a      	ldr	r3, [pc, #424]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012be4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7f3 fe69 	bl	80068c0 <can1_ams_cell_voltages_v3s5_decode>
 8012bee:	eeb0 7a40 	vmov.f32	s14, s0
 8012bf2:	eef0 7a60 	vmov.f32	s15, s1
 8012bf6:	463b      	mov	r3, r7
 8012bf8:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_voltages.v9s5 = can1_ams_cell_voltages_v9s5_decode(can1_ams_cell_voltages.v9s5);
 8012bfc:	4b63      	ldr	r3, [pc, #396]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012bfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7f3 feb4 	bl	8006970 <can1_ams_cell_voltages_v9s5_decode>
 8012c08:	eeb0 7a40 	vmov.f32	s14, s0
 8012c0c:	eef0 7a60 	vmov.f32	s15, s1
 8012c10:	463b      	mov	r3, r7
 8012c12:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
       ams_cell_voltages.v3s6 = can1_ams_cell_voltages_v3s6_decode(can1_ams_cell_voltages.v3s6);
 8012c16:	4b5d      	ldr	r3, [pc, #372]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c18:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f3 feff 	bl	8006a20 <can1_ams_cell_voltages_v3s6_decode>
 8012c22:	eeb0 7a40 	vmov.f32	s14, s0
 8012c26:	eef0 7a60 	vmov.f32	s15, s1
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_voltages.v9s6 = can1_ams_cell_voltages_v9s6_decode(can1_ams_cell_voltages.v9s6);
 8012c30:	4b56      	ldr	r3, [pc, #344]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7f3 ff4a 	bl	8006ad0 <can1_ams_cell_voltages_v9s6_decode>
 8012c3c:	eeb0 7a40 	vmov.f32	s14, s0
 8012c40:	eef0 7a60 	vmov.f32	s15, s1
 8012c44:	463b      	mov	r3, r7
 8012c46:	ed83 7bca 	vstr	d7, [r3, #808]	; 0x328
       ams_cell_voltages.v3s7 = can1_ams_cell_voltages_v3s7_decode(can1_ams_cell_voltages.v3s7);
 8012c4a:	4b50      	ldr	r3, [pc, #320]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f3 ff95 	bl	8006b80 <can1_ams_cell_voltages_v3s7_decode>
 8012c56:	eeb0 7a40 	vmov.f32	s14, s0
 8012c5a:	eef0 7a60 	vmov.f32	s15, s1
 8012c5e:	463b      	mov	r3, r7
 8012c60:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_voltages.v9s7 = can1_ams_cell_voltages_v9s7_decode(can1_ams_cell_voltages.v9s7);
 8012c64:	4b49      	ldr	r3, [pc, #292]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7f3 ffe0 	bl	8006c30 <can1_ams_cell_voltages_v9s7_decode>
 8012c70:	eeb0 7a40 	vmov.f32	s14, s0
 8012c74:	eef0 7a60 	vmov.f32	s15, s1
 8012c78:	463b      	mov	r3, r7
 8012c7a:	ed83 7bcc 	vstr	d7, [r3, #816]	; 0x330
       ams_cell_voltages.v3s8 = can1_ams_cell_voltages_v3s8_decode(can1_ams_cell_voltages.v3s8);
 8012c7e:	4b43      	ldr	r3, [pc, #268]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7f4 f82b 	bl	8006ce0 <can1_ams_cell_voltages_v3s8_decode>
 8012c8a:	eeb0 7a40 	vmov.f32	s14, s0
 8012c8e:	eef0 7a60 	vmov.f32	s15, s1
 8012c92:	463b      	mov	r3, r7
 8012c94:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_voltages.v9s8 = can1_ams_cell_voltages_v9s8_decode(can1_ams_cell_voltages.v9s8);
 8012c98:	4b3c      	ldr	r3, [pc, #240]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f4 f876 	bl	8006d90 <can1_ams_cell_voltages_v9s8_decode>
 8012ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8012ca8:	eef0 7a60 	vmov.f32	s15, s1
 8012cac:	463b      	mov	r3, r7
 8012cae:	ed83 7bce 	vstr	d7, [r3, #824]	; 0x338
       ams_cell_voltages.v3s9 = can1_ams_cell_voltages_v3s9_decode(can1_ams_cell_voltages.v3s9);
 8012cb2:	4b36      	ldr	r3, [pc, #216]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f4 f8c1 	bl	8006e40 <can1_ams_cell_voltages_v3s9_decode>
 8012cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8012cc2:	eef0 7a60 	vmov.f32	s15, s1
 8012cc6:	463b      	mov	r3, r7
 8012cc8:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_voltages.v9s9 = can1_ams_cell_voltages_v9s9_decode(can1_ams_cell_voltages.v9s9);
 8012ccc:	4b2f      	ldr	r3, [pc, #188]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7f4 f90c 	bl	8006ef0 <can1_ams_cell_voltages_v9s9_decode>
 8012cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8012cdc:	eef0 7a60 	vmov.f32	s15, s1
 8012ce0:	463b      	mov	r3, r7
 8012ce2:	ed83 7bd0 	vstr	d7, [r3, #832]	; 0x340
       ams_cell_voltages.v3s10 = can1_ams_cell_voltages_v3s10_decode(can1_ams_cell_voltages.v3s10);
 8012ce6:	4b29      	ldr	r3, [pc, #164]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f4 f957 	bl	8006fa0 <can1_ams_cell_voltages_v3s10_decode>
 8012cf2:	eeb0 7a40 	vmov.f32	s14, s0
 8012cf6:	eef0 7a60 	vmov.f32	s15, s1
 8012cfa:	463b      	mov	r3, r7
 8012cfc:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_voltages.v9s10 = can1_ams_cell_voltages_v9s10_decode(can1_ams_cell_voltages.v9s10);
 8012d00:	4b22      	ldr	r3, [pc, #136]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7f4 f9a2 	bl	8007050 <can1_ams_cell_voltages_v9s10_decode>
 8012d0c:	eeb0 7a40 	vmov.f32	s14, s0
 8012d10:	eef0 7a60 	vmov.f32	s15, s1
 8012d14:	463b      	mov	r3, r7
 8012d16:	ed83 7bd2 	vstr	d7, [r3, #840]	; 0x348
       ams_cell_voltages.v3s11 = can1_ams_cell_voltages_v3s11_decode(can1_ams_cell_voltages.v3s11);
 8012d1a:	4b1c      	ldr	r3, [pc, #112]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7f4 f9ed 	bl	8007100 <can1_ams_cell_voltages_v3s11_decode>
 8012d26:	eeb0 7a40 	vmov.f32	s14, s0
 8012d2a:	eef0 7a60 	vmov.f32	s15, s1
 8012d2e:	463b      	mov	r3, r7
 8012d30:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_voltages.v9s11 = can1_ams_cell_voltages_v9s11_decode(can1_ams_cell_voltages.v9s11);
 8012d34:	4b15      	ldr	r3, [pc, #84]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d36:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7f4 fa38 	bl	80071b0 <can1_ams_cell_voltages_v9s11_decode>
 8012d40:	eeb0 7a40 	vmov.f32	s14, s0
 8012d44:	eef0 7a60 	vmov.f32	s15, s1
 8012d48:	463b      	mov	r3, r7
 8012d4a:	ed83 7bd4 	vstr	d7, [r3, #848]	; 0x350
       ams_cell_voltages.v3s12 = can1_ams_cell_voltages_v3s12_decode(can1_ams_cell_voltages.v3s12);
 8012d4e:	4b0f      	ldr	r3, [pc, #60]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d50:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f4 fa83 	bl	8007260 <can1_ams_cell_voltages_v3s12_decode>
 8012d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8012d5e:	eef0 7a60 	vmov.f32	s15, s1
 8012d62:	463b      	mov	r3, r7
 8012d64:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_voltages.v9s12 = can1_ams_cell_voltages_v9s12_decode(can1_ams_cell_voltages.v9s12);
 8012d68:	4b08      	ldr	r3, [pc, #32]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7f4 face 	bl	8007310 <can1_ams_cell_voltages_v9s12_decode>
 8012d74:	eeb0 7a40 	vmov.f32	s14, s0
 8012d78:	eef0 7a60 	vmov.f32	s15, s1
 8012d7c:	463b      	mov	r3, r7
 8012d7e:	ed83 7bd6 	vstr	d7, [r3, #856]	; 0x358
       ams_cell_voltages.v4s1 = can1_ams_cell_voltages_v4s1_decode(can1_ams_cell_voltages.v4s1);
 8012d82:	4b02      	ldr	r3, [pc, #8]	; (8012d8c <can1_ams_cell_voltages_receive+0x738>)
 8012d84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012d88:	e002      	b.n	8012d90 <can1_ams_cell_voltages_receive+0x73c>
 8012d8a:	bf00      	nop
 8012d8c:	200014f4 	.word	0x200014f4
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7f4 fb15 	bl	80073c0 <can1_ams_cell_voltages_v4s1_decode>
 8012d96:	eeb0 7a40 	vmov.f32	s14, s0
 8012d9a:	eef0 7a60 	vmov.f32	s15, s1
 8012d9e:	463b      	mov	r3, r7
 8012da0:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_voltages.v10s1 = can1_ams_cell_voltages_v10s1_decode(can1_ams_cell_voltages.v10s1);
 8012da4:	4beb      	ldr	r3, [pc, #940]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012da6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7f4 fb60 	bl	8007470 <can1_ams_cell_voltages_v10s1_decode>
 8012db0:	eeb0 7a40 	vmov.f32	s14, s0
 8012db4:	eef0 7a60 	vmov.f32	s15, s1
 8012db8:	463b      	mov	r3, r7
 8012dba:	ed83 7bd8 	vstr	d7, [r3, #864]	; 0x360
       ams_cell_voltages.v4s2 = can1_ams_cell_voltages_v4s2_decode(can1_ams_cell_voltages.v4s2);
 8012dbe:	4be5      	ldr	r3, [pc, #916]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012dc0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f4 fbab 	bl	8007520 <can1_ams_cell_voltages_v4s2_decode>
 8012dca:	eeb0 7a40 	vmov.f32	s14, s0
 8012dce:	eef0 7a60 	vmov.f32	s15, s1
 8012dd2:	463b      	mov	r3, r7
 8012dd4:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_voltages.v10s2 = can1_ams_cell_voltages_v10s2_decode(can1_ams_cell_voltages.v10s2);
 8012dd8:	4bde      	ldr	r3, [pc, #888]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012dda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7f4 fbf6 	bl	80075d0 <can1_ams_cell_voltages_v10s2_decode>
 8012de4:	eeb0 7a40 	vmov.f32	s14, s0
 8012de8:	eef0 7a60 	vmov.f32	s15, s1
 8012dec:	463b      	mov	r3, r7
 8012dee:	ed83 7bda 	vstr	d7, [r3, #872]	; 0x368
       ams_cell_voltages.v4s3 = can1_ams_cell_voltages_v4s3_decode(can1_ams_cell_voltages.v4s3);
 8012df2:	4bd8      	ldr	r3, [pc, #864]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012df4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7f4 fc41 	bl	8007680 <can1_ams_cell_voltages_v4s3_decode>
 8012dfe:	eeb0 7a40 	vmov.f32	s14, s0
 8012e02:	eef0 7a60 	vmov.f32	s15, s1
 8012e06:	463b      	mov	r3, r7
 8012e08:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_voltages.v10s3 = can1_ams_cell_voltages_v10s3_decode(can1_ams_cell_voltages.v10s3);
 8012e0c:	4bd1      	ldr	r3, [pc, #836]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e0e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7f4 fc8c 	bl	8007730 <can1_ams_cell_voltages_v10s3_decode>
 8012e18:	eeb0 7a40 	vmov.f32	s14, s0
 8012e1c:	eef0 7a60 	vmov.f32	s15, s1
 8012e20:	463b      	mov	r3, r7
 8012e22:	ed83 7bdc 	vstr	d7, [r3, #880]	; 0x370
       ams_cell_voltages.v4s4 = can1_ams_cell_voltages_v4s4_decode(can1_ams_cell_voltages.v4s4);
 8012e26:	4bcb      	ldr	r3, [pc, #812]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e28:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f4 fcd7 	bl	80077e0 <can1_ams_cell_voltages_v4s4_decode>
 8012e32:	eeb0 7a40 	vmov.f32	s14, s0
 8012e36:	eef0 7a60 	vmov.f32	s15, s1
 8012e3a:	463b      	mov	r3, r7
 8012e3c:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_voltages.v10s4 = can1_ams_cell_voltages_v10s4_decode(can1_ams_cell_voltages.v10s4);
 8012e40:	4bc4      	ldr	r3, [pc, #784]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f4 fd22 	bl	8007890 <can1_ams_cell_voltages_v10s4_decode>
 8012e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8012e50:	eef0 7a60 	vmov.f32	s15, s1
 8012e54:	463b      	mov	r3, r7
 8012e56:	ed83 7bde 	vstr	d7, [r3, #888]	; 0x378
       ams_cell_voltages.v4s5 = can1_ams_cell_voltages_v4s5_decode(can1_ams_cell_voltages.v4s5);
 8012e5a:	4bbe      	ldr	r3, [pc, #760]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7f4 fd6d 	bl	8007940 <can1_ams_cell_voltages_v4s5_decode>
 8012e66:	eeb0 7a40 	vmov.f32	s14, s0
 8012e6a:	eef0 7a60 	vmov.f32	s15, s1
 8012e6e:	463b      	mov	r3, r7
 8012e70:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_voltages.v10s5 = can1_ams_cell_voltages_v10s5_decode(can1_ams_cell_voltages.v10s5);
 8012e74:	4bb7      	ldr	r3, [pc, #732]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e76:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7f4 fdb8 	bl	80079f0 <can1_ams_cell_voltages_v10s5_decode>
 8012e80:	eeb0 7a40 	vmov.f32	s14, s0
 8012e84:	eef0 7a60 	vmov.f32	s15, s1
 8012e88:	463b      	mov	r3, r7
 8012e8a:	ed83 7be0 	vstr	d7, [r3, #896]	; 0x380
       ams_cell_voltages.v4s6 = can1_ams_cell_voltages_v4s6_decode(can1_ams_cell_voltages.v4s6);
 8012e8e:	4bb1      	ldr	r3, [pc, #708]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012e90:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7f4 fe03 	bl	8007aa0 <can1_ams_cell_voltages_v4s6_decode>
 8012e9a:	eeb0 7a40 	vmov.f32	s14, s0
 8012e9e:	eef0 7a60 	vmov.f32	s15, s1
 8012ea2:	463b      	mov	r3, r7
 8012ea4:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_voltages.v10s6 = can1_ams_cell_voltages_v10s6_decode(can1_ams_cell_voltages.v10s6);
 8012ea8:	4baa      	ldr	r3, [pc, #680]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012eaa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7f4 fe4e 	bl	8007b50 <can1_ams_cell_voltages_v10s6_decode>
 8012eb4:	eeb0 7a40 	vmov.f32	s14, s0
 8012eb8:	eef0 7a60 	vmov.f32	s15, s1
 8012ebc:	463b      	mov	r3, r7
 8012ebe:	ed83 7be2 	vstr	d7, [r3, #904]	; 0x388
       ams_cell_voltages.v4s7 = can1_ams_cell_voltages_v4s7_decode(can1_ams_cell_voltages.v4s7);
 8012ec2:	4ba4      	ldr	r3, [pc, #656]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012ec4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7f4 fe99 	bl	8007c00 <can1_ams_cell_voltages_v4s7_decode>
 8012ece:	eeb0 7a40 	vmov.f32	s14, s0
 8012ed2:	eef0 7a60 	vmov.f32	s15, s1
 8012ed6:	463b      	mov	r3, r7
 8012ed8:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_voltages.v10s7 = can1_ams_cell_voltages_v10s7_decode(can1_ams_cell_voltages.v10s7);
 8012edc:	4b9d      	ldr	r3, [pc, #628]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012ede:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7f4 fee4 	bl	8007cb0 <can1_ams_cell_voltages_v10s7_decode>
 8012ee8:	eeb0 7a40 	vmov.f32	s14, s0
 8012eec:	eef0 7a60 	vmov.f32	s15, s1
 8012ef0:	463b      	mov	r3, r7
 8012ef2:	ed83 7be4 	vstr	d7, [r3, #912]	; 0x390
       ams_cell_voltages.v4s8 = can1_ams_cell_voltages_v4s8_decode(can1_ams_cell_voltages.v4s8);
 8012ef6:	4b97      	ldr	r3, [pc, #604]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012ef8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f4 ff2f 	bl	8007d60 <can1_ams_cell_voltages_v4s8_decode>
 8012f02:	eeb0 7a40 	vmov.f32	s14, s0
 8012f06:	eef0 7a60 	vmov.f32	s15, s1
 8012f0a:	463b      	mov	r3, r7
 8012f0c:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_voltages.v10s8 = can1_ams_cell_voltages_v10s8_decode(can1_ams_cell_voltages.v10s8);
 8012f10:	4b90      	ldr	r3, [pc, #576]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7f4 ff7a 	bl	8007e10 <can1_ams_cell_voltages_v10s8_decode>
 8012f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8012f20:	eef0 7a60 	vmov.f32	s15, s1
 8012f24:	463b      	mov	r3, r7
 8012f26:	ed83 7be6 	vstr	d7, [r3, #920]	; 0x398
       ams_cell_voltages.v4s9 = can1_ams_cell_voltages_v4s9_decode(can1_ams_cell_voltages.v4s9);
 8012f2a:	4b8a      	ldr	r3, [pc, #552]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f4 ffc5 	bl	8007ec0 <can1_ams_cell_voltages_v4s9_decode>
 8012f36:	eeb0 7a40 	vmov.f32	s14, s0
 8012f3a:	eef0 7a60 	vmov.f32	s15, s1
 8012f3e:	463b      	mov	r3, r7
 8012f40:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_voltages.v10s9 = can1_ams_cell_voltages_v10s9_decode(can1_ams_cell_voltages.v10s9);
 8012f44:	4b83      	ldr	r3, [pc, #524]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f46:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f5 f810 	bl	8007f70 <can1_ams_cell_voltages_v10s9_decode>
 8012f50:	eeb0 7a40 	vmov.f32	s14, s0
 8012f54:	eef0 7a60 	vmov.f32	s15, s1
 8012f58:	463b      	mov	r3, r7
 8012f5a:	ed83 7be8 	vstr	d7, [r3, #928]	; 0x3a0
       ams_cell_voltages.v4s10 = can1_ams_cell_voltages_v4s10_decode(can1_ams_cell_voltages.v4s10);
 8012f5e:	4b7d      	ldr	r3, [pc, #500]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f60:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7f5 f85b 	bl	8008020 <can1_ams_cell_voltages_v4s10_decode>
 8012f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8012f6e:	eef0 7a60 	vmov.f32	s15, s1
 8012f72:	463b      	mov	r3, r7
 8012f74:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_voltages.v10s10 = can1_ams_cell_voltages_v10s10_decode(can1_ams_cell_voltages.v10s10);
 8012f78:	4b76      	ldr	r3, [pc, #472]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7f5 f8a6 	bl	80080d0 <can1_ams_cell_voltages_v10s10_decode>
 8012f84:	eeb0 7a40 	vmov.f32	s14, s0
 8012f88:	eef0 7a60 	vmov.f32	s15, s1
 8012f8c:	463b      	mov	r3, r7
 8012f8e:	ed83 7bea 	vstr	d7, [r3, #936]	; 0x3a8
       ams_cell_voltages.v4s11 = can1_ams_cell_voltages_v4s11_decode(can1_ams_cell_voltages.v4s11);
 8012f92:	4b70      	ldr	r3, [pc, #448]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f5 f8f1 	bl	8008180 <can1_ams_cell_voltages_v4s11_decode>
 8012f9e:	eeb0 7a40 	vmov.f32	s14, s0
 8012fa2:	eef0 7a60 	vmov.f32	s15, s1
 8012fa6:	463b      	mov	r3, r7
 8012fa8:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_voltages.v10s11 = can1_ams_cell_voltages_v10s11_decode(can1_ams_cell_voltages.v10s11);
 8012fac:	4b69      	ldr	r3, [pc, #420]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012fae:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7f5 f93c 	bl	8008230 <can1_ams_cell_voltages_v10s11_decode>
 8012fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8012fbc:	eef0 7a60 	vmov.f32	s15, s1
 8012fc0:	463b      	mov	r3, r7
 8012fc2:	ed83 7bec 	vstr	d7, [r3, #944]	; 0x3b0
       ams_cell_voltages.v4s12 = can1_ams_cell_voltages_v4s12_decode(can1_ams_cell_voltages.v4s12);
 8012fc6:	4b63      	ldr	r3, [pc, #396]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012fc8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f5 f987 	bl	80082e0 <can1_ams_cell_voltages_v4s12_decode>
 8012fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8012fd6:	eef0 7a60 	vmov.f32	s15, s1
 8012fda:	463b      	mov	r3, r7
 8012fdc:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_voltages.v10s12 = can1_ams_cell_voltages_v10s12_decode(can1_ams_cell_voltages.v10s12);
 8012fe0:	4b5c      	ldr	r3, [pc, #368]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012fe2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7f5 f9d2 	bl	8008390 <can1_ams_cell_voltages_v10s12_decode>
 8012fec:	eeb0 7a40 	vmov.f32	s14, s0
 8012ff0:	eef0 7a60 	vmov.f32	s15, s1
 8012ff4:	463b      	mov	r3, r7
 8012ff6:	ed83 7bee 	vstr	d7, [r3, #952]	; 0x3b8
       ams_cell_voltages.v5s1 = can1_ams_cell_voltages_v5s1_decode(can1_ams_cell_voltages.v5s1);
 8012ffa:	4b56      	ldr	r3, [pc, #344]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8012ffc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013000:	4618      	mov	r0, r3
 8013002:	f7f5 fa1d 	bl	8008440 <can1_ams_cell_voltages_v5s1_decode>
 8013006:	eeb0 7a40 	vmov.f32	s14, s0
 801300a:	eef0 7a60 	vmov.f32	s15, s1
 801300e:	463b      	mov	r3, r7
 8013010:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_voltages.v11s1 = can1_ams_cell_voltages_v11s1_decode(can1_ams_cell_voltages.v11s1);
 8013014:	4b4f      	ldr	r3, [pc, #316]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013016:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801301a:	4618      	mov	r0, r3
 801301c:	f7f5 fa68 	bl	80084f0 <can1_ams_cell_voltages_v11s1_decode>
 8013020:	eeb0 7a40 	vmov.f32	s14, s0
 8013024:	eef0 7a60 	vmov.f32	s15, s1
 8013028:	463b      	mov	r3, r7
 801302a:	ed83 7bf0 	vstr	d7, [r3, #960]	; 0x3c0
       ams_cell_voltages.v5s2 = can1_ams_cell_voltages_v5s2_decode(can1_ams_cell_voltages.v5s2);
 801302e:	4b49      	ldr	r3, [pc, #292]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013030:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8013034:	4618      	mov	r0, r3
 8013036:	f7f5 fab3 	bl	80085a0 <can1_ams_cell_voltages_v5s2_decode>
 801303a:	eeb0 7a40 	vmov.f32	s14, s0
 801303e:	eef0 7a60 	vmov.f32	s15, s1
 8013042:	463b      	mov	r3, r7
 8013044:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_voltages.v5s3 = can1_ams_cell_voltages_v5s3_decode(can1_ams_cell_voltages.v5s3);
 8013048:	4b42      	ldr	r3, [pc, #264]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 801304a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801304e:	4618      	mov	r0, r3
 8013050:	f7f5 fafe 	bl	8008650 <can1_ams_cell_voltages_v5s3_decode>
 8013054:	eeb0 7a40 	vmov.f32	s14, s0
 8013058:	eef0 7a60 	vmov.f32	s15, s1
 801305c:	463b      	mov	r3, r7
 801305e:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_voltages.v11s3 = can1_ams_cell_voltages_v11s3_decode(can1_ams_cell_voltages.v11s3);
 8013062:	4b3c      	ldr	r3, [pc, #240]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013064:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8013068:	4618      	mov	r0, r3
 801306a:	f7f5 fb49 	bl	8008700 <can1_ams_cell_voltages_v11s3_decode>
 801306e:	eeb0 7a40 	vmov.f32	s14, s0
 8013072:	eef0 7a60 	vmov.f32	s15, s1
 8013076:	463b      	mov	r3, r7
 8013078:	ed83 7bf2 	vstr	d7, [r3, #968]	; 0x3c8
       ams_cell_voltages.v5s4 = can1_ams_cell_voltages_v5s4_decode(can1_ams_cell_voltages.v5s4);
 801307c:	4b35      	ldr	r3, [pc, #212]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 801307e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013082:	4618      	mov	r0, r3
 8013084:	f7f5 fb94 	bl	80087b0 <can1_ams_cell_voltages_v5s4_decode>
 8013088:	eeb0 7a40 	vmov.f32	s14, s0
 801308c:	eef0 7a60 	vmov.f32	s15, s1
 8013090:	463b      	mov	r3, r7
 8013092:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_voltages.v5s5 = can1_ams_cell_voltages_v5s5_decode(can1_ams_cell_voltages.v5s5);
 8013096:	4b2f      	ldr	r3, [pc, #188]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013098:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 801309c:	4618      	mov	r0, r3
 801309e:	f7f5 fbdf 	bl	8008860 <can1_ams_cell_voltages_v5s5_decode>
 80130a2:	eeb0 7a40 	vmov.f32	s14, s0
 80130a6:	eef0 7a60 	vmov.f32	s15, s1
 80130aa:	463b      	mov	r3, r7
 80130ac:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_voltages.v11s5 = can1_ams_cell_voltages_v11s5_decode(can1_ams_cell_voltages.v11s5);
 80130b0:	4b28      	ldr	r3, [pc, #160]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 80130b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7f5 fc2a 	bl	8008910 <can1_ams_cell_voltages_v11s5_decode>
 80130bc:	eeb0 7a40 	vmov.f32	s14, s0
 80130c0:	eef0 7a60 	vmov.f32	s15, s1
 80130c4:	463b      	mov	r3, r7
 80130c6:	ed83 7bf4 	vstr	d7, [r3, #976]	; 0x3d0
       ams_cell_voltages.v5s6 = can1_ams_cell_voltages_v5s6_decode(can1_ams_cell_voltages.v5s6);
 80130ca:	4b22      	ldr	r3, [pc, #136]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 80130cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f5 fc75 	bl	80089c0 <can1_ams_cell_voltages_v5s6_decode>
 80130d6:	eeb0 7a40 	vmov.f32	s14, s0
 80130da:	eef0 7a60 	vmov.f32	s15, s1
 80130de:	463b      	mov	r3, r7
 80130e0:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_voltages.v5s7 = can1_ams_cell_voltages_v5s7_decode(can1_ams_cell_voltages.v5s7);
 80130e4:	4b1b      	ldr	r3, [pc, #108]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 80130e6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f5 fcc0 	bl	8008a70 <can1_ams_cell_voltages_v5s7_decode>
 80130f0:	eeb0 7a40 	vmov.f32	s14, s0
 80130f4:	eef0 7a60 	vmov.f32	s15, s1
 80130f8:	463b      	mov	r3, r7
 80130fa:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_voltages.v11s7 = can1_ams_cell_voltages_v11s7_decode(can1_ams_cell_voltages.v11s7);
 80130fe:	4b15      	ldr	r3, [pc, #84]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013100:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8013104:	4618      	mov	r0, r3
 8013106:	f7f5 fd0b 	bl	8008b20 <can1_ams_cell_voltages_v11s7_decode>
 801310a:	eeb0 7a40 	vmov.f32	s14, s0
 801310e:	eef0 7a60 	vmov.f32	s15, s1
 8013112:	463b      	mov	r3, r7
 8013114:	ed83 7bf6 	vstr	d7, [r3, #984]	; 0x3d8
       ams_cell_voltages.v5s8 = can1_ams_cell_voltages_v5s8_decode(can1_ams_cell_voltages.v5s8);
 8013118:	4b0e      	ldr	r3, [pc, #56]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 801311a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801311e:	4618      	mov	r0, r3
 8013120:	f7f5 fd56 	bl	8008bd0 <can1_ams_cell_voltages_v5s8_decode>
 8013124:	eeb0 7a40 	vmov.f32	s14, s0
 8013128:	eef0 7a60 	vmov.f32	s15, s1
 801312c:	463b      	mov	r3, r7
 801312e:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_voltages.v5s9 = can1_ams_cell_voltages_v5s9_decode(can1_ams_cell_voltages.v5s9);
 8013132:	4b08      	ldr	r3, [pc, #32]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 8013134:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8013138:	4618      	mov	r0, r3
 801313a:	f7f5 fda1 	bl	8008c80 <can1_ams_cell_voltages_v5s9_decode>
 801313e:	eeb0 7a40 	vmov.f32	s14, s0
 8013142:	eef0 7a60 	vmov.f32	s15, s1
 8013146:	463b      	mov	r3, r7
 8013148:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_voltages.v11s9 = can1_ams_cell_voltages_v11s9_decode(can1_ams_cell_voltages.v11s9);
 801314c:	4b01      	ldr	r3, [pc, #4]	; (8013154 <can1_ams_cell_voltages_receive+0xb00>)
 801314e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8013152:	e001      	b.n	8013158 <can1_ams_cell_voltages_receive+0xb04>
 8013154:	200014f4 	.word	0x200014f4
 8013158:	4618      	mov	r0, r3
 801315a:	f7f5 fde9 	bl	8008d30 <can1_ams_cell_voltages_v11s9_decode>
 801315e:	eeb0 7a40 	vmov.f32	s14, s0
 8013162:	eef0 7a60 	vmov.f32	s15, s1
 8013166:	463b      	mov	r3, r7
 8013168:	ed83 7bf8 	vstr	d7, [r3, #992]	; 0x3e0
       ams_cell_voltages.v5s10 = can1_ams_cell_voltages_v5s10_decode(can1_ams_cell_voltages.v5s10);
 801316c:	4b6d      	ldr	r3, [pc, #436]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 801316e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8013172:	4618      	mov	r0, r3
 8013174:	f7f5 fe34 	bl	8008de0 <can1_ams_cell_voltages_v5s10_decode>
 8013178:	eeb0 7a40 	vmov.f32	s14, s0
 801317c:	eef0 7a60 	vmov.f32	s15, s1
 8013180:	463b      	mov	r3, r7
 8013182:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_voltages.v5s11 = can1_ams_cell_voltages_v5s11_decode(can1_ams_cell_voltages.v5s11);
 8013186:	4b67      	ldr	r3, [pc, #412]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 8013188:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801318c:	4618      	mov	r0, r3
 801318e:	f7f5 fe7f 	bl	8008e90 <can1_ams_cell_voltages_v5s11_decode>
 8013192:	eeb0 7a40 	vmov.f32	s14, s0
 8013196:	eef0 7a60 	vmov.f32	s15, s1
 801319a:	463b      	mov	r3, r7
 801319c:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_voltages.v11s11 = can1_ams_cell_voltages_v11s11_decode(can1_ams_cell_voltages.v11s11);
 80131a0:	4b60      	ldr	r3, [pc, #384]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80131a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f5 feca 	bl	8008f40 <can1_ams_cell_voltages_v11s11_decode>
 80131ac:	eeb0 7a40 	vmov.f32	s14, s0
 80131b0:	eef0 7a60 	vmov.f32	s15, s1
 80131b4:	463b      	mov	r3, r7
 80131b6:	ed83 7bfa 	vstr	d7, [r3, #1000]	; 0x3e8
       ams_cell_voltages.v5s12 = can1_ams_cell_voltages_v5s12_decode(can1_ams_cell_voltages.v5s12);
 80131ba:	4b5a      	ldr	r3, [pc, #360]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80131bc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f5 ff15 	bl	8008ff0 <can1_ams_cell_voltages_v5s12_decode>
 80131c6:	eeb0 7a40 	vmov.f32	s14, s0
 80131ca:	eef0 7a60 	vmov.f32	s15, s1
 80131ce:	463b      	mov	r3, r7
 80131d0:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       ams_cell_voltages.v6s1 = can1_ams_cell_voltages_v6s1_decode(can1_ams_cell_voltages.v6s1);
 80131d4:	4b53      	ldr	r3, [pc, #332]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80131d6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f5 ff60 	bl	80090a0 <can1_ams_cell_voltages_v6s1_decode>
 80131e0:	eeb0 7a40 	vmov.f32	s14, s0
 80131e4:	eef0 7a60 	vmov.f32	s15, s1
 80131e8:	463b      	mov	r3, r7
 80131ea:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
       ams_cell_voltages.v6s2 = can1_ams_cell_voltages_v6s2_decode(can1_ams_cell_voltages.v6s2);
 80131ee:	4b4d      	ldr	r3, [pc, #308]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80131f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7f5 ffab 	bl	8009150 <can1_ams_cell_voltages_v6s2_decode>
 80131fa:	eeb0 7a40 	vmov.f32	s14, s0
 80131fe:	eef0 7a60 	vmov.f32	s15, s1
 8013202:	463b      	mov	r3, r7
 8013204:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8
       ams_cell_voltages.v6s3 = can1_ams_cell_voltages_v6s3_decode(can1_ams_cell_voltages.v6s3);
 8013208:	4b46      	ldr	r3, [pc, #280]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 801320a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801320e:	4618      	mov	r0, r3
 8013210:	f7f5 fff6 	bl	8009200 <can1_ams_cell_voltages_v6s3_decode>
 8013214:	eeb0 7a40 	vmov.f32	s14, s0
 8013218:	eef0 7a60 	vmov.f32	s15, s1
 801321c:	463b      	mov	r3, r7
 801321e:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0
       ams_cell_voltages.v6s4 = can1_ams_cell_voltages_v6s4_decode(can1_ams_cell_voltages.v6s4);
 8013222:	4b40      	ldr	r3, [pc, #256]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 8013224:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8013228:	4618      	mov	r0, r3
 801322a:	f7f6 f841 	bl	80092b0 <can1_ams_cell_voltages_v6s4_decode>
 801322e:	eeb0 7a40 	vmov.f32	s14, s0
 8013232:	eef0 7a60 	vmov.f32	s15, s1
 8013236:	463b      	mov	r3, r7
 8013238:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8
       ams_cell_voltages.v6s5 = can1_ams_cell_voltages_v6s5_decode(can1_ams_cell_voltages.v6s5);
 801323c:	4b39      	ldr	r3, [pc, #228]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 801323e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013242:	4618      	mov	r0, r3
 8013244:	f7f6 f88c 	bl	8009360 <can1_ams_cell_voltages_v6s5_decode>
 8013248:	eeb0 7a40 	vmov.f32	s14, s0
 801324c:	eef0 7a60 	vmov.f32	s15, s1
 8013250:	463b      	mov	r3, r7
 8013252:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200
       ams_cell_voltages.v6s6 = can1_ams_cell_voltages_v6s6_decode(can1_ams_cell_voltages.v6s6);
 8013256:	4b33      	ldr	r3, [pc, #204]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 8013258:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801325c:	4618      	mov	r0, r3
 801325e:	f7f6 f8d7 	bl	8009410 <can1_ams_cell_voltages_v6s6_decode>
 8013262:	eeb0 7a40 	vmov.f32	s14, s0
 8013266:	eef0 7a60 	vmov.f32	s15, s1
 801326a:	463b      	mov	r3, r7
 801326c:	ed83 7b82 	vstr	d7, [r3, #520]	; 0x208
       ams_cell_voltages.v6s7 = can1_ams_cell_voltages_v6s7_decode(can1_ams_cell_voltages.v6s7);
 8013270:	4b2c      	ldr	r3, [pc, #176]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 8013272:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8013276:	4618      	mov	r0, r3
 8013278:	f7f6 f922 	bl	80094c0 <can1_ams_cell_voltages_v6s7_decode>
 801327c:	eeb0 7a40 	vmov.f32	s14, s0
 8013280:	eef0 7a60 	vmov.f32	s15, s1
 8013284:	463b      	mov	r3, r7
 8013286:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210
       ams_cell_voltages.v6s8 = can1_ams_cell_voltages_v6s8_decode(can1_ams_cell_voltages.v6s8);
 801328a:	4b26      	ldr	r3, [pc, #152]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 801328c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8013290:	4618      	mov	r0, r3
 8013292:	f7f6 f96d 	bl	8009570 <can1_ams_cell_voltages_v6s8_decode>
 8013296:	eeb0 7a40 	vmov.f32	s14, s0
 801329a:	eef0 7a60 	vmov.f32	s15, s1
 801329e:	463b      	mov	r3, r7
 80132a0:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218
       ams_cell_voltages.v6s9 = can1_ams_cell_voltages_v6s9_decode(can1_ams_cell_voltages.v6s9);
 80132a4:	4b1f      	ldr	r3, [pc, #124]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80132a6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f6 f9b8 	bl	8009620 <can1_ams_cell_voltages_v6s9_decode>
 80132b0:	eeb0 7a40 	vmov.f32	s14, s0
 80132b4:	eef0 7a60 	vmov.f32	s15, s1
 80132b8:	463b      	mov	r3, r7
 80132ba:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
       ams_cell_voltages.v6s10 = can1_ams_cell_voltages_v6s10_decode(can1_ams_cell_voltages.v6s10);
 80132be:	4b19      	ldr	r3, [pc, #100]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80132c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7f6 fa03 	bl	80096d0 <can1_ams_cell_voltages_v6s10_decode>
 80132ca:	eeb0 7a40 	vmov.f32	s14, s0
 80132ce:	eef0 7a60 	vmov.f32	s15, s1
 80132d2:	463b      	mov	r3, r7
 80132d4:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
       ams_cell_voltages.v6s11 = can1_ams_cell_voltages_v6s11_decode(can1_ams_cell_voltages.v6s11);
 80132d8:	4b12      	ldr	r3, [pc, #72]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80132da:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f6 fa4e 	bl	8009780 <can1_ams_cell_voltages_v6s11_decode>
 80132e4:	eeb0 7a40 	vmov.f32	s14, s0
 80132e8:	eef0 7a60 	vmov.f32	s15, s1
 80132ec:	463b      	mov	r3, r7
 80132ee:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230
       ams_cell_voltages.v6s12 = can1_ams_cell_voltages_v6s12_decode(can1_ams_cell_voltages.v6s12);
 80132f2:	4b0c      	ldr	r3, [pc, #48]	; (8013324 <can1_ams_cell_voltages_receive+0xcd0>)
 80132f4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7f6 fa99 	bl	8009830 <can1_ams_cell_voltages_v6s12_decode>
 80132fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013302:	eef0 7a60 	vmov.f32	s15, s1
 8013306:	463b      	mov	r3, r7
 8013308:	ed83 7b8e 	vstr	d7, [r3, #568]	; 0x238
       can1_ams_cell_voltages_rx_callback(&ams_cell_voltages);
 801330c:	463b      	mov	r3, r7
 801330e:	4618      	mov	r0, r3
 8013310:	f000 feb2 	bl	8014078 <can1_ams_cell_voltages_rx_callback>
       can1_ams_cell_voltages_flag = 0;
 8013314:	4b04      	ldr	r3, [pc, #16]	; (8013328 <can1_ams_cell_voltages_receive+0xcd4>)
 8013316:	2200      	movs	r2, #0
 8013318:	701a      	strb	r2, [r3, #0]
   }
}
 801331a:	bf00      	nop
 801331c:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	200014f4 	.word	0x200014f4
 8013328:	20001628 	.word	0x20001628

0801332c <can1_ams_cell_temperatures_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can1_ams_cell_temperatures_receive() {
 801332c:	b580      	push	{r7, lr}
 801332e:	b0fa      	sub	sp, #488	; 0x1e8
 8013330:	af00      	add	r7, sp, #0
   if(can1_ams_cell_temperatures_flag) {
 8013332:	4beb      	ldr	r3, [pc, #940]	; (80136e0 <can1_ams_cell_temperatures_receive+0x3b4>)
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	f000 8318 	beq.w	801396c <can1_ams_cell_temperatures_receive+0x640>
       ams_cell_temperatures_t ams_cell_temperatures;
       ams_cell_temperatures.t1s1 = can1_ams_cell_temperatures_t1s1_decode(can1_ams_cell_temperatures.t1s1);
 801333c:	4be9      	ldr	r3, [pc, #932]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801333e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013342:	4618      	mov	r0, r3
 8013344:	f7f8 fe1c 	bl	800bf80 <can1_ams_cell_temperatures_t1s1_decode>
 8013348:	eeb0 7a40 	vmov.f32	s14, s0
 801334c:	eef0 7a60 	vmov.f32	s15, s1
 8013350:	463b      	mov	r3, r7
 8013352:	ed83 7b00 	vstr	d7, [r3]
       ams_cell_temperatures.t1s2 = can1_ams_cell_temperatures_t1s2_decode(can1_ams_cell_temperatures.t1s2);
 8013356:	4be3      	ldr	r3, [pc, #908]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013358:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801335c:	4618      	mov	r0, r3
 801335e:	f7f8 fe67 	bl	800c030 <can1_ams_cell_temperatures_t1s2_decode>
 8013362:	eeb0 7a40 	vmov.f32	s14, s0
 8013366:	eef0 7a60 	vmov.f32	s15, s1
 801336a:	463b      	mov	r3, r7
 801336c:	ed83 7b02 	vstr	d7, [r3, #8]
       ams_cell_temperatures.t1s3 = can1_ams_cell_temperatures_t1s3_decode(can1_ams_cell_temperatures.t1s3);
 8013370:	4bdc      	ldr	r3, [pc, #880]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013372:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013376:	4618      	mov	r0, r3
 8013378:	f7f8 feb2 	bl	800c0e0 <can1_ams_cell_temperatures_t1s3_decode>
 801337c:	eeb0 7a40 	vmov.f32	s14, s0
 8013380:	eef0 7a60 	vmov.f32	s15, s1
 8013384:	463b      	mov	r3, r7
 8013386:	ed83 7b04 	vstr	d7, [r3, #16]
       ams_cell_temperatures.t1s4 = can1_ams_cell_temperatures_t1s4_decode(can1_ams_cell_temperatures.t1s4);
 801338a:	4bd6      	ldr	r3, [pc, #856]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801338c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013390:	4618      	mov	r0, r3
 8013392:	f7f8 fefd 	bl	800c190 <can1_ams_cell_temperatures_t1s4_decode>
 8013396:	eeb0 7a40 	vmov.f32	s14, s0
 801339a:	eef0 7a60 	vmov.f32	s15, s1
 801339e:	463b      	mov	r3, r7
 80133a0:	ed83 7b06 	vstr	d7, [r3, #24]
       ams_cell_temperatures.t1s5 = can1_ams_cell_temperatures_t1s5_decode(can1_ams_cell_temperatures.t1s5);
 80133a4:	4bcf      	ldr	r3, [pc, #828]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7f8 ff48 	bl	800c240 <can1_ams_cell_temperatures_t1s5_decode>
 80133b0:	eeb0 7a40 	vmov.f32	s14, s0
 80133b4:	eef0 7a60 	vmov.f32	s15, s1
 80133b8:	463b      	mov	r3, r7
 80133ba:	ed83 7b08 	vstr	d7, [r3, #32]
       ams_cell_temperatures.t1s6 = can1_ams_cell_temperatures_t1s6_decode(can1_ams_cell_temperatures.t1s6);
 80133be:	4bc9      	ldr	r3, [pc, #804]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7f8 ff93 	bl	800c2f0 <can1_ams_cell_temperatures_t1s6_decode>
 80133ca:	eeb0 7a40 	vmov.f32	s14, s0
 80133ce:	eef0 7a60 	vmov.f32	s15, s1
 80133d2:	463b      	mov	r3, r7
 80133d4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
       ams_cell_temperatures.t1s7 = can1_ams_cell_temperatures_t1s7_decode(can1_ams_cell_temperatures.t1s7);
 80133d8:	4bc2      	ldr	r3, [pc, #776]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80133de:	4618      	mov	r0, r3
 80133e0:	f7f8 ffde 	bl	800c3a0 <can1_ams_cell_temperatures_t1s7_decode>
 80133e4:	eeb0 7a40 	vmov.f32	s14, s0
 80133e8:	eef0 7a60 	vmov.f32	s15, s1
 80133ec:	463b      	mov	r3, r7
 80133ee:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
       ams_cell_temperatures.t1s8 = can1_ams_cell_temperatures_t1s8_decode(can1_ams_cell_temperatures.t1s8);
 80133f2:	4bbc      	ldr	r3, [pc, #752]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80133f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7f9 f829 	bl	800c450 <can1_ams_cell_temperatures_t1s8_decode>
 80133fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013402:	eef0 7a60 	vmov.f32	s15, s1
 8013406:	463b      	mov	r3, r7
 8013408:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
       ams_cell_temperatures.t1s9 = can1_ams_cell_temperatures_t1s9_decode(can1_ams_cell_temperatures.t1s9);
 801340c:	4bb5      	ldr	r3, [pc, #724]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801340e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013412:	4618      	mov	r0, r3
 8013414:	f7f9 f874 	bl	800c500 <can1_ams_cell_temperatures_t1s9_decode>
 8013418:	eeb0 7a40 	vmov.f32	s14, s0
 801341c:	eef0 7a60 	vmov.f32	s15, s1
 8013420:	463b      	mov	r3, r7
 8013422:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
       ams_cell_temperatures.t1s10 = can1_ams_cell_temperatures_t1s10_decode(can1_ams_cell_temperatures.t1s10);
 8013426:	4baf      	ldr	r3, [pc, #700]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013428:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801342c:	4618      	mov	r0, r3
 801342e:	f7f9 f8bf 	bl	800c5b0 <can1_ams_cell_temperatures_t1s10_decode>
 8013432:	eeb0 7a40 	vmov.f32	s14, s0
 8013436:	eef0 7a60 	vmov.f32	s15, s1
 801343a:	463b      	mov	r3, r7
 801343c:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
       ams_cell_temperatures.t1s11 = can1_ams_cell_temperatures_t1s11_decode(can1_ams_cell_temperatures.t1s11);
 8013440:	4ba8      	ldr	r3, [pc, #672]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013442:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8013446:	4618      	mov	r0, r3
 8013448:	f7f9 f90a 	bl	800c660 <can1_ams_cell_temperatures_t1s11_decode>
 801344c:	eeb0 7a40 	vmov.f32	s14, s0
 8013450:	eef0 7a60 	vmov.f32	s15, s1
 8013454:	463b      	mov	r3, r7
 8013456:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
       ams_cell_temperatures.t1s12 = can1_ams_cell_temperatures_t1s12_decode(can1_ams_cell_temperatures.t1s12);
 801345a:	4ba2      	ldr	r3, [pc, #648]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801345c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013460:	4618      	mov	r0, r3
 8013462:	f7f9 f955 	bl	800c710 <can1_ams_cell_temperatures_t1s12_decode>
 8013466:	eeb0 7a40 	vmov.f32	s14, s0
 801346a:	eef0 7a60 	vmov.f32	s15, s1
 801346e:	463b      	mov	r3, r7
 8013470:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
       ams_cell_temperatures.t2s1 = can1_ams_cell_temperatures_t2s1_decode(can1_ams_cell_temperatures.t2s1);
 8013474:	4b9b      	ldr	r3, [pc, #620]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013476:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801347a:	4618      	mov	r0, r3
 801347c:	f7f9 f9a0 	bl	800c7c0 <can1_ams_cell_temperatures_t2s1_decode>
 8013480:	eeb0 7a40 	vmov.f32	s14, s0
 8013484:	eef0 7a60 	vmov.f32	s15, s1
 8013488:	463b      	mov	r3, r7
 801348a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
       ams_cell_temperatures.t2s2 = can1_ams_cell_temperatures_t2s2_decode(can1_ams_cell_temperatures.t2s2);
 801348e:	4b95      	ldr	r3, [pc, #596]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013490:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013494:	4618      	mov	r0, r3
 8013496:	f7f9 f9eb 	bl	800c870 <can1_ams_cell_temperatures_t2s2_decode>
 801349a:	eeb0 7a40 	vmov.f32	s14, s0
 801349e:	eef0 7a60 	vmov.f32	s15, s1
 80134a2:	463b      	mov	r3, r7
 80134a4:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
       ams_cell_temperatures.t2s3 = can1_ams_cell_temperatures_t2s3_decode(can1_ams_cell_temperatures.t2s3);
 80134a8:	4b8e      	ldr	r3, [pc, #568]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134aa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7f9 fa36 	bl	800c920 <can1_ams_cell_temperatures_t2s3_decode>
 80134b4:	eeb0 7a40 	vmov.f32	s14, s0
 80134b8:	eef0 7a60 	vmov.f32	s15, s1
 80134bc:	463b      	mov	r3, r7
 80134be:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
       ams_cell_temperatures.t2s4 = can1_ams_cell_temperatures_t2s4_decode(can1_ams_cell_temperatures.t2s4);
 80134c2:	4b88      	ldr	r3, [pc, #544]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134c4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7f9 fa81 	bl	800c9d0 <can1_ams_cell_temperatures_t2s4_decode>
 80134ce:	eeb0 7a40 	vmov.f32	s14, s0
 80134d2:	eef0 7a60 	vmov.f32	s15, s1
 80134d6:	463b      	mov	r3, r7
 80134d8:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
       ams_cell_temperatures.t2s5 = can1_ams_cell_temperatures_t2s5_decode(can1_ams_cell_temperatures.t2s5);
 80134dc:	4b81      	ldr	r3, [pc, #516]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f9 facc 	bl	800ca80 <can1_ams_cell_temperatures_t2s5_decode>
 80134e8:	eeb0 7a40 	vmov.f32	s14, s0
 80134ec:	eef0 7a60 	vmov.f32	s15, s1
 80134f0:	463b      	mov	r3, r7
 80134f2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
       ams_cell_temperatures.t2s6 = can1_ams_cell_temperatures_t2s6_decode(can1_ams_cell_temperatures.t2s6);
 80134f6:	4b7b      	ldr	r3, [pc, #492]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80134f8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f9 fb17 	bl	800cb30 <can1_ams_cell_temperatures_t2s6_decode>
 8013502:	eeb0 7a40 	vmov.f32	s14, s0
 8013506:	eef0 7a60 	vmov.f32	s15, s1
 801350a:	463b      	mov	r3, r7
 801350c:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
       ams_cell_temperatures.t2s7 = can1_ams_cell_temperatures_t2s7_decode(can1_ams_cell_temperatures.t2s7);
 8013510:	4b74      	ldr	r3, [pc, #464]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013512:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013516:	4618      	mov	r0, r3
 8013518:	f7f9 fb62 	bl	800cbe0 <can1_ams_cell_temperatures_t2s7_decode>
 801351c:	eeb0 7a40 	vmov.f32	s14, s0
 8013520:	eef0 7a60 	vmov.f32	s15, s1
 8013524:	463b      	mov	r3, r7
 8013526:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
       ams_cell_temperatures.t2s8 = can1_ams_cell_temperatures_t2s8_decode(can1_ams_cell_temperatures.t2s8);
 801352a:	4b6e      	ldr	r3, [pc, #440]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801352c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8013530:	4618      	mov	r0, r3
 8013532:	f7f9 fbad 	bl	800cc90 <can1_ams_cell_temperatures_t2s8_decode>
 8013536:	eeb0 7a40 	vmov.f32	s14, s0
 801353a:	eef0 7a60 	vmov.f32	s15, s1
 801353e:	463b      	mov	r3, r7
 8013540:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
       ams_cell_temperatures.t2s9 = can1_ams_cell_temperatures_t2s9_decode(can1_ams_cell_temperatures.t2s9);
 8013544:	4b67      	ldr	r3, [pc, #412]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013546:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801354a:	4618      	mov	r0, r3
 801354c:	f7f9 fbf8 	bl	800cd40 <can1_ams_cell_temperatures_t2s9_decode>
 8013550:	eeb0 7a40 	vmov.f32	s14, s0
 8013554:	eef0 7a60 	vmov.f32	s15, s1
 8013558:	463b      	mov	r3, r7
 801355a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
       ams_cell_temperatures.t2s10 = can1_ams_cell_temperatures_t2s10_decode(can1_ams_cell_temperatures.t2s10);
 801355e:	4b61      	ldr	r3, [pc, #388]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013560:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013564:	4618      	mov	r0, r3
 8013566:	f7f9 fc43 	bl	800cdf0 <can1_ams_cell_temperatures_t2s10_decode>
 801356a:	eeb0 7a40 	vmov.f32	s14, s0
 801356e:	eef0 7a60 	vmov.f32	s15, s1
 8013572:	463b      	mov	r3, r7
 8013574:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
       ams_cell_temperatures.t2s11 = can1_ams_cell_temperatures_t2s11_decode(can1_ams_cell_temperatures.t2s11);
 8013578:	4b5a      	ldr	r3, [pc, #360]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801357a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 801357e:	4618      	mov	r0, r3
 8013580:	f7f9 fc8e 	bl	800cea0 <can1_ams_cell_temperatures_t2s11_decode>
 8013584:	eeb0 7a40 	vmov.f32	s14, s0
 8013588:	eef0 7a60 	vmov.f32	s15, s1
 801358c:	463b      	mov	r3, r7
 801358e:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
       ams_cell_temperatures.t2s12 = can1_ams_cell_temperatures_t2s12_decode(can1_ams_cell_temperatures.t2s12);
 8013592:	4b54      	ldr	r3, [pc, #336]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013598:	4618      	mov	r0, r3
 801359a:	f7f9 fcd9 	bl	800cf50 <can1_ams_cell_temperatures_t2s12_decode>
 801359e:	eeb0 7a40 	vmov.f32	s14, s0
 80135a2:	eef0 7a60 	vmov.f32	s15, s1
 80135a6:	463b      	mov	r3, r7
 80135a8:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
       ams_cell_temperatures.t3s1 = can1_ams_cell_temperatures_t3s1_decode(can1_ams_cell_temperatures.t3s1);
 80135ac:	4b4d      	ldr	r3, [pc, #308]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135ae:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7f9 fd24 	bl	800d000 <can1_ams_cell_temperatures_t3s1_decode>
 80135b8:	eeb0 7a40 	vmov.f32	s14, s0
 80135bc:	eef0 7a60 	vmov.f32	s15, s1
 80135c0:	463b      	mov	r3, r7
 80135c2:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
       ams_cell_temperatures.t3s2 = can1_ams_cell_temperatures_t3s2_decode(can1_ams_cell_temperatures.t3s2);
 80135c6:	4b47      	ldr	r3, [pc, #284]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135c8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7f9 fd6f 	bl	800d0b0 <can1_ams_cell_temperatures_t3s2_decode>
 80135d2:	eeb0 7a40 	vmov.f32	s14, s0
 80135d6:	eef0 7a60 	vmov.f32	s15, s1
 80135da:	463b      	mov	r3, r7
 80135dc:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
       ams_cell_temperatures.t3s3 = can1_ams_cell_temperatures_t3s3_decode(can1_ams_cell_temperatures.t3s3);
 80135e0:	4b40      	ldr	r3, [pc, #256]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135e2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f9 fdba 	bl	800d160 <can1_ams_cell_temperatures_t3s3_decode>
 80135ec:	eeb0 7a40 	vmov.f32	s14, s0
 80135f0:	eef0 7a60 	vmov.f32	s15, s1
 80135f4:	463b      	mov	r3, r7
 80135f6:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
       ams_cell_temperatures.t3s4 = can1_ams_cell_temperatures_t3s4_decode(can1_ams_cell_temperatures.t3s4);
 80135fa:	4b3a      	ldr	r3, [pc, #232]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80135fc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8013600:	4618      	mov	r0, r3
 8013602:	f7f9 fe05 	bl	800d210 <can1_ams_cell_temperatures_t3s4_decode>
 8013606:	eeb0 7a40 	vmov.f32	s14, s0
 801360a:	eef0 7a60 	vmov.f32	s15, s1
 801360e:	463b      	mov	r3, r7
 8013610:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
       ams_cell_temperatures.t3s5 = can1_ams_cell_temperatures_t3s5_decode(can1_ams_cell_temperatures.t3s5);
 8013614:	4b33      	ldr	r3, [pc, #204]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013616:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 801361a:	4618      	mov	r0, r3
 801361c:	f7f9 fe50 	bl	800d2c0 <can1_ams_cell_temperatures_t3s5_decode>
 8013620:	eeb0 7a40 	vmov.f32	s14, s0
 8013624:	eef0 7a60 	vmov.f32	s15, s1
 8013628:	463b      	mov	r3, r7
 801362a:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
       ams_cell_temperatures.t3s6 = can1_ams_cell_temperatures_t3s6_decode(can1_ams_cell_temperatures.t3s6);
 801362e:	4b2d      	ldr	r3, [pc, #180]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013630:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013634:	4618      	mov	r0, r3
 8013636:	f7f9 fe9b 	bl	800d370 <can1_ams_cell_temperatures_t3s6_decode>
 801363a:	eeb0 7a40 	vmov.f32	s14, s0
 801363e:	eef0 7a60 	vmov.f32	s15, s1
 8013642:	463b      	mov	r3, r7
 8013644:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
       ams_cell_temperatures.t3s7 = can1_ams_cell_temperatures_t3s7_decode(can1_ams_cell_temperatures.t3s7);
 8013648:	4b26      	ldr	r3, [pc, #152]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801364a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801364e:	4618      	mov	r0, r3
 8013650:	f7f9 fee6 	bl	800d420 <can1_ams_cell_temperatures_t3s7_decode>
 8013654:	eeb0 7a40 	vmov.f32	s14, s0
 8013658:	eef0 7a60 	vmov.f32	s15, s1
 801365c:	463b      	mov	r3, r7
 801365e:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
       ams_cell_temperatures.t3s8 = can1_ams_cell_temperatures_t3s8_decode(can1_ams_cell_temperatures.t3s8);
 8013662:	4b20      	ldr	r3, [pc, #128]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013664:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013668:	4618      	mov	r0, r3
 801366a:	f7f9 ff31 	bl	800d4d0 <can1_ams_cell_temperatures_t3s8_decode>
 801366e:	eeb0 7a40 	vmov.f32	s14, s0
 8013672:	eef0 7a60 	vmov.f32	s15, s1
 8013676:	463b      	mov	r3, r7
 8013678:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8
       ams_cell_temperatures.t3s9 = can1_ams_cell_temperatures_t3s9_decode(can1_ams_cell_temperatures.t3s9);
 801367c:	4b19      	ldr	r3, [pc, #100]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 801367e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8013682:	4618      	mov	r0, r3
 8013684:	f7f9 ff7c 	bl	800d580 <can1_ams_cell_temperatures_t3s9_decode>
 8013688:	eeb0 7a40 	vmov.f32	s14, s0
 801368c:	eef0 7a60 	vmov.f32	s15, s1
 8013690:	463b      	mov	r3, r7
 8013692:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
       ams_cell_temperatures.t3s10 = can1_ams_cell_temperatures_t3s10_decode(can1_ams_cell_temperatures.t3s10);
 8013696:	4b13      	ldr	r3, [pc, #76]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 8013698:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801369c:	4618      	mov	r0, r3
 801369e:	f7f9 ffc7 	bl	800d630 <can1_ams_cell_temperatures_t3s10_decode>
 80136a2:	eeb0 7a40 	vmov.f32	s14, s0
 80136a6:	eef0 7a60 	vmov.f32	s15, s1
 80136aa:	463b      	mov	r3, r7
 80136ac:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
       ams_cell_temperatures.t3s11 = can1_ams_cell_temperatures_t3s11_decode(can1_ams_cell_temperatures.t3s11);
 80136b0:	4b0c      	ldr	r3, [pc, #48]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80136b2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7fa f812 	bl	800d6e0 <can1_ams_cell_temperatures_t3s11_decode>
 80136bc:	eeb0 7a40 	vmov.f32	s14, s0
 80136c0:	eef0 7a60 	vmov.f32	s15, s1
 80136c4:	463b      	mov	r3, r7
 80136c6:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
       ams_cell_temperatures.t3s12 = can1_ams_cell_temperatures_t3s12_decode(can1_ams_cell_temperatures.t3s12);
 80136ca:	4b06      	ldr	r3, [pc, #24]	; (80136e4 <can1_ams_cell_temperatures_receive+0x3b8>)
 80136cc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fa f85d 	bl	800d790 <can1_ams_cell_temperatures_t3s12_decode>
 80136d6:	eeb0 7a40 	vmov.f32	s14, s0
 80136da:	eef0 7a60 	vmov.f32	s15, s1
 80136de:	e003      	b.n	80136e8 <can1_ams_cell_temperatures_receive+0x3bc>
 80136e0:	20001629 	.word	0x20001629
 80136e4:	20001574 	.word	0x20001574
 80136e8:	463b      	mov	r3, r7
 80136ea:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
       ams_cell_temperatures.t4s1 = can1_ams_cell_temperatures_t4s1_decode(can1_ams_cell_temperatures.t4s1);
 80136ee:	4ba2      	ldr	r3, [pc, #648]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80136f0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fa f8a3 	bl	800d840 <can1_ams_cell_temperatures_t4s1_decode>
 80136fa:	eeb0 7a40 	vmov.f32	s14, s0
 80136fe:	eef0 7a60 	vmov.f32	s15, s1
 8013702:	463b      	mov	r3, r7
 8013704:	ed83 7b48 	vstr	d7, [r3, #288]	; 0x120
       ams_cell_temperatures.t4s2 = can1_ams_cell_temperatures_t4s2_decode(can1_ams_cell_temperatures.t4s2);
 8013708:	4b9b      	ldr	r3, [pc, #620]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801370a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801370e:	4618      	mov	r0, r3
 8013710:	f7fa f8ee 	bl	800d8f0 <can1_ams_cell_temperatures_t4s2_decode>
 8013714:	eeb0 7a40 	vmov.f32	s14, s0
 8013718:	eef0 7a60 	vmov.f32	s15, s1
 801371c:	463b      	mov	r3, r7
 801371e:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128
       ams_cell_temperatures.t4s3 = can1_ams_cell_temperatures_t4s3_decode(can1_ams_cell_temperatures.t4s3);
 8013722:	4b95      	ldr	r3, [pc, #596]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013724:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8013728:	4618      	mov	r0, r3
 801372a:	f7fa f939 	bl	800d9a0 <can1_ams_cell_temperatures_t4s3_decode>
 801372e:	eeb0 7a40 	vmov.f32	s14, s0
 8013732:	eef0 7a60 	vmov.f32	s15, s1
 8013736:	463b      	mov	r3, r7
 8013738:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
       ams_cell_temperatures.t4s4 = can1_ams_cell_temperatures_t4s4_decode(can1_ams_cell_temperatures.t4s4);
 801373c:	4b8e      	ldr	r3, [pc, #568]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801373e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8013742:	4618      	mov	r0, r3
 8013744:	f7fa f984 	bl	800da50 <can1_ams_cell_temperatures_t4s4_decode>
 8013748:	eeb0 7a40 	vmov.f32	s14, s0
 801374c:	eef0 7a60 	vmov.f32	s15, s1
 8013750:	463b      	mov	r3, r7
 8013752:	ed83 7b4e 	vstr	d7, [r3, #312]	; 0x138
       ams_cell_temperatures.t4s5 = can1_ams_cell_temperatures_t4s5_decode(can1_ams_cell_temperatures.t4s5);
 8013756:	4b88      	ldr	r3, [pc, #544]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013758:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801375c:	4618      	mov	r0, r3
 801375e:	f7fa f9cf 	bl	800db00 <can1_ams_cell_temperatures_t4s5_decode>
 8013762:	eeb0 7a40 	vmov.f32	s14, s0
 8013766:	eef0 7a60 	vmov.f32	s15, s1
 801376a:	463b      	mov	r3, r7
 801376c:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140
       ams_cell_temperatures.t4s6 = can1_ams_cell_temperatures_t4s6_decode(can1_ams_cell_temperatures.t4s6);
 8013770:	4b81      	ldr	r3, [pc, #516]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013772:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013776:	4618      	mov	r0, r3
 8013778:	f7fa fa1a 	bl	800dbb0 <can1_ams_cell_temperatures_t4s6_decode>
 801377c:	eeb0 7a40 	vmov.f32	s14, s0
 8013780:	eef0 7a60 	vmov.f32	s15, s1
 8013784:	463b      	mov	r3, r7
 8013786:	ed83 7b52 	vstr	d7, [r3, #328]	; 0x148
       ams_cell_temperatures.t4s7 = can1_ams_cell_temperatures_t4s7_decode(can1_ams_cell_temperatures.t4s7);
 801378a:	4b7b      	ldr	r3, [pc, #492]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801378c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8013790:	4618      	mov	r0, r3
 8013792:	f7fa fa65 	bl	800dc60 <can1_ams_cell_temperatures_t4s7_decode>
 8013796:	eeb0 7a40 	vmov.f32	s14, s0
 801379a:	eef0 7a60 	vmov.f32	s15, s1
 801379e:	463b      	mov	r3, r7
 80137a0:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
       ams_cell_temperatures.t4s8 = can1_ams_cell_temperatures_t4s8_decode(can1_ams_cell_temperatures.t4s8);
 80137a4:	4b74      	ldr	r3, [pc, #464]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80137a6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fa fab0 	bl	800dd10 <can1_ams_cell_temperatures_t4s8_decode>
 80137b0:	eeb0 7a40 	vmov.f32	s14, s0
 80137b4:	eef0 7a60 	vmov.f32	s15, s1
 80137b8:	463b      	mov	r3, r7
 80137ba:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
       ams_cell_temperatures.t4s9 = can1_ams_cell_temperatures_t4s9_decode(can1_ams_cell_temperatures.t4s9);
 80137be:	4b6e      	ldr	r3, [pc, #440]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80137c0:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fa fafb 	bl	800ddc0 <can1_ams_cell_temperatures_t4s9_decode>
 80137ca:	eeb0 7a40 	vmov.f32	s14, s0
 80137ce:	eef0 7a60 	vmov.f32	s15, s1
 80137d2:	463b      	mov	r3, r7
 80137d4:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
       ams_cell_temperatures.t4s10 = can1_ams_cell_temperatures_t4s10_decode(can1_ams_cell_temperatures.t4s10);
 80137d8:	4b67      	ldr	r3, [pc, #412]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80137da:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fa fb46 	bl	800de70 <can1_ams_cell_temperatures_t4s10_decode>
 80137e4:	eeb0 7a40 	vmov.f32	s14, s0
 80137e8:	eef0 7a60 	vmov.f32	s15, s1
 80137ec:	463b      	mov	r3, r7
 80137ee:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
       ams_cell_temperatures.t4s11 = can1_ams_cell_temperatures_t4s11_decode(can1_ams_cell_temperatures.t4s11);
 80137f2:	4b61      	ldr	r3, [pc, #388]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80137f4:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fa fb91 	bl	800df20 <can1_ams_cell_temperatures_t4s11_decode>
 80137fe:	eeb0 7a40 	vmov.f32	s14, s0
 8013802:	eef0 7a60 	vmov.f32	s15, s1
 8013806:	463b      	mov	r3, r7
 8013808:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170
       ams_cell_temperatures.t4s12 = can1_ams_cell_temperatures_t4s12_decode(can1_ams_cell_temperatures.t4s12);
 801380c:	4b5a      	ldr	r3, [pc, #360]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801380e:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8013812:	4618      	mov	r0, r3
 8013814:	f7fa fbdc 	bl	800dfd0 <can1_ams_cell_temperatures_t4s12_decode>
 8013818:	eeb0 7a40 	vmov.f32	s14, s0
 801381c:	eef0 7a60 	vmov.f32	s15, s1
 8013820:	463b      	mov	r3, r7
 8013822:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178
       ams_cell_temperatures.t5s1 = can1_ams_cell_temperatures_t5s1_decode(can1_ams_cell_temperatures.t5s1);
 8013826:	4b54      	ldr	r3, [pc, #336]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013828:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 801382c:	4618      	mov	r0, r3
 801382e:	f7fa fc27 	bl	800e080 <can1_ams_cell_temperatures_t5s1_decode>
 8013832:	eeb0 7a40 	vmov.f32	s14, s0
 8013836:	eef0 7a60 	vmov.f32	s15, s1
 801383a:	463b      	mov	r3, r7
 801383c:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180
       ams_cell_temperatures.t5s2 = can1_ams_cell_temperatures_t5s2_decode(can1_ams_cell_temperatures.t5s2);
 8013840:	4b4d      	ldr	r3, [pc, #308]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013842:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013846:	4618      	mov	r0, r3
 8013848:	f7fa fc72 	bl	800e130 <can1_ams_cell_temperatures_t5s2_decode>
 801384c:	eeb0 7a40 	vmov.f32	s14, s0
 8013850:	eef0 7a60 	vmov.f32	s15, s1
 8013854:	463b      	mov	r3, r7
 8013856:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188
       ams_cell_temperatures.t5s3 = can1_ams_cell_temperatures_t5s3_decode(can1_ams_cell_temperatures.t5s3);
 801385a:	4b47      	ldr	r3, [pc, #284]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801385c:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8013860:	4618      	mov	r0, r3
 8013862:	f7fa fcbd 	bl	800e1e0 <can1_ams_cell_temperatures_t5s3_decode>
 8013866:	eeb0 7a40 	vmov.f32	s14, s0
 801386a:	eef0 7a60 	vmov.f32	s15, s1
 801386e:	463b      	mov	r3, r7
 8013870:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
       ams_cell_temperatures.t5s4 = can1_ams_cell_temperatures_t5s4_decode(can1_ams_cell_temperatures.t5s4);
 8013874:	4b40      	ldr	r3, [pc, #256]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013876:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 801387a:	4618      	mov	r0, r3
 801387c:	f7fa fd08 	bl	800e290 <can1_ams_cell_temperatures_t5s4_decode>
 8013880:	eeb0 7a40 	vmov.f32	s14, s0
 8013884:	eef0 7a60 	vmov.f32	s15, s1
 8013888:	463b      	mov	r3, r7
 801388a:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198
       ams_cell_temperatures.t5s5 = can1_ams_cell_temperatures_t5s5_decode(can1_ams_cell_temperatures.t5s5);
 801388e:	4b3a      	ldr	r3, [pc, #232]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013890:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8013894:	4618      	mov	r0, r3
 8013896:	f7fa fd53 	bl	800e340 <can1_ams_cell_temperatures_t5s5_decode>
 801389a:	eeb0 7a40 	vmov.f32	s14, s0
 801389e:	eef0 7a60 	vmov.f32	s15, s1
 80138a2:	463b      	mov	r3, r7
 80138a4:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
       ams_cell_temperatures.t5s6 = can1_ams_cell_temperatures_t5s6_decode(can1_ams_cell_temperatures.t5s6);
 80138a8:	4b33      	ldr	r3, [pc, #204]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80138aa:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fa fd9e 	bl	800e3f0 <can1_ams_cell_temperatures_t5s6_decode>
 80138b4:	eeb0 7a40 	vmov.f32	s14, s0
 80138b8:	eef0 7a60 	vmov.f32	s15, s1
 80138bc:	463b      	mov	r3, r7
 80138be:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
       ams_cell_temperatures.t5s7 = can1_ams_cell_temperatures_t5s7_decode(can1_ams_cell_temperatures.t5s7);
 80138c2:	4b2d      	ldr	r3, [pc, #180]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80138c4:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7fa fde9 	bl	800e4a0 <can1_ams_cell_temperatures_t5s7_decode>
 80138ce:	eeb0 7a40 	vmov.f32	s14, s0
 80138d2:	eef0 7a60 	vmov.f32	s15, s1
 80138d6:	463b      	mov	r3, r7
 80138d8:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
       ams_cell_temperatures.t5s8 = can1_ams_cell_temperatures_t5s8_decode(can1_ams_cell_temperatures.t5s8);
 80138dc:	4b26      	ldr	r3, [pc, #152]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80138de:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fa fe34 	bl	800e550 <can1_ams_cell_temperatures_t5s8_decode>
 80138e8:	eeb0 7a40 	vmov.f32	s14, s0
 80138ec:	eef0 7a60 	vmov.f32	s15, s1
 80138f0:	463b      	mov	r3, r7
 80138f2:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
       ams_cell_temperatures.t5s9 = can1_ams_cell_temperatures_t5s9_decode(can1_ams_cell_temperatures.t5s9);
 80138f6:	4b20      	ldr	r3, [pc, #128]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 80138f8:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7fa fe7f 	bl	800e600 <can1_ams_cell_temperatures_t5s9_decode>
 8013902:	eeb0 7a40 	vmov.f32	s14, s0
 8013906:	eef0 7a60 	vmov.f32	s15, s1
 801390a:	463b      	mov	r3, r7
 801390c:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
       ams_cell_temperatures.t5s10 = can1_ams_cell_temperatures_t5s10_decode(can1_ams_cell_temperatures.t5s10);
 8013910:	4b19      	ldr	r3, [pc, #100]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013912:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013916:	4618      	mov	r0, r3
 8013918:	f7fa feca 	bl	800e6b0 <can1_ams_cell_temperatures_t5s10_decode>
 801391c:	eeb0 7a40 	vmov.f32	s14, s0
 8013920:	eef0 7a60 	vmov.f32	s15, s1
 8013924:	463b      	mov	r3, r7
 8013926:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
       ams_cell_temperatures.t5s11 = can1_ams_cell_temperatures_t5s11_decode(can1_ams_cell_temperatures.t5s11);
 801392a:	4b13      	ldr	r3, [pc, #76]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 801392c:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8013930:	4618      	mov	r0, r3
 8013932:	f7fa ff15 	bl	800e760 <can1_ams_cell_temperatures_t5s11_decode>
 8013936:	eeb0 7a40 	vmov.f32	s14, s0
 801393a:	eef0 7a60 	vmov.f32	s15, s1
 801393e:	463b      	mov	r3, r7
 8013940:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
       ams_cell_temperatures.t5s12 = can1_ams_cell_temperatures_t5s12_decode(can1_ams_cell_temperatures.t5s12);
 8013944:	4b0c      	ldr	r3, [pc, #48]	; (8013978 <can1_ams_cell_temperatures_receive+0x64c>)
 8013946:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801394a:	4618      	mov	r0, r3
 801394c:	f7fa ff60 	bl	800e810 <can1_ams_cell_temperatures_t5s12_decode>
 8013950:	eeb0 7a40 	vmov.f32	s14, s0
 8013954:	eef0 7a60 	vmov.f32	s15, s1
 8013958:	463b      	mov	r3, r7
 801395a:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
       can1_ams_cell_temperatures_rx_callback(&ams_cell_temperatures);
 801395e:	463b      	mov	r3, r7
 8013960:	4618      	mov	r0, r3
 8013962:	f000 fb93 	bl	801408c <can1_ams_cell_temperatures_rx_callback>
       can1_ams_cell_temperatures_flag = 0;
 8013966:	4b05      	ldr	r3, [pc, #20]	; (801397c <can1_ams_cell_temperatures_receive+0x650>)
 8013968:	2200      	movs	r2, #0
 801396a:	701a      	strb	r2, [r3, #0]
   }
}
 801396c:	bf00      	nop
 801396e:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	20001574 	.word	0x20001574
 801397c:	20001629 	.word	0x20001629

08013980 <can2_amk1_setpoints_1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_receive() {
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
   if(can2_amk1_setpoints_1_flag) {
 8013986:	4b3a      	ldr	r3, [pc, #232]	; (8013a70 <can2_amk1_setpoints_1_receive+0xf0>)
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d06b      	beq.n	8013a66 <can2_amk1_setpoints_1_receive+0xe6>
       amk1_setpoints_1_t amk1_setpoints_1;
       amk1_setpoints_1.amk1_control_inverter_on = can2_amk1_setpoints_1_amk1_control_inverter_on_decode(can2_amk1_setpoints_1.amk1_control_inverter_on);
 801398e:	4b39      	ldr	r3, [pc, #228]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	4618      	mov	r0, r3
 8013994:	f7fb f91d 	bl	800ebd2 <can2_amk1_setpoints_1_amk1_control_inverter_on_decode>
 8013998:	ec53 2b10 	vmov	r2, r3, d0
 801399c:	4610      	mov	r0, r2
 801399e:	4619      	mov	r1, r3
 80139a0:	f7ed f8f4 	bl	8000b8c <__aeabi_d2uiz>
 80139a4:	4603      	mov	r3, r0
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	71fb      	strb	r3, [r7, #7]
       amk1_setpoints_1.amk1_control_dc_on = can2_amk1_setpoints_1_amk1_control_dc_on_decode(can2_amk1_setpoints_1.amk1_control_dc_on);
 80139aa:	4b32      	ldr	r3, [pc, #200]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 80139ac:	785b      	ldrb	r3, [r3, #1]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fb f923 	bl	800ebfa <can2_amk1_setpoints_1_amk1_control_dc_on_decode>
 80139b4:	ec53 2b10 	vmov	r2, r3, d0
 80139b8:	4610      	mov	r0, r2
 80139ba:	4619      	mov	r1, r3
 80139bc:	f7ed f8e6 	bl	8000b8c <__aeabi_d2uiz>
 80139c0:	4603      	mov	r3, r0
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	713b      	strb	r3, [r7, #4]
       amk1_setpoints_1.amk1_control_enable = can2_amk1_setpoints_1_amk1_control_enable_decode(can2_amk1_setpoints_1.amk1_control_enable);
 80139c6:	4b2b      	ldr	r3, [pc, #172]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 80139c8:	789b      	ldrb	r3, [r3, #2]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fb f929 	bl	800ec22 <can2_amk1_setpoints_1_amk1_control_enable_decode>
 80139d0:	ec53 2b10 	vmov	r2, r3, d0
 80139d4:	4610      	mov	r0, r2
 80139d6:	4619      	mov	r1, r3
 80139d8:	f7ed f8d8 	bl	8000b8c <__aeabi_d2uiz>
 80139dc:	4603      	mov	r3, r0
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	717b      	strb	r3, [r7, #5]
       amk1_setpoints_1.amk1_control_error_reset = can2_amk1_setpoints_1_amk1_control_error_reset_decode(can2_amk1_setpoints_1.amk1_control_error_reset);
 80139e2:	4b24      	ldr	r3, [pc, #144]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 80139e4:	78db      	ldrb	r3, [r3, #3]
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fb f92f 	bl	800ec4a <can2_amk1_setpoints_1_amk1_control_error_reset_decode>
 80139ec:	ec53 2b10 	vmov	r2, r3, d0
 80139f0:	4610      	mov	r0, r2
 80139f2:	4619      	mov	r1, r3
 80139f4:	f7ed f8ca 	bl	8000b8c <__aeabi_d2uiz>
 80139f8:	4603      	mov	r3, r0
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	71bb      	strb	r3, [r7, #6]
       amk1_setpoints_1.amk1_target_velocity = can2_amk1_setpoints_1_amk1_target_velocity_decode(can2_amk1_setpoints_1.amk1_target_velocity);
 80139fe:	4b1d      	ldr	r3, [pc, #116]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 8013a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7fb f934 	bl	800ec72 <can2_amk1_setpoints_1_amk1_target_velocity_decode>
 8013a0a:	ec53 2b10 	vmov	r2, r3, d0
 8013a0e:	4610      	mov	r0, r2
 8013a10:	4619      	mov	r1, r3
 8013a12:	f7ed f893 	bl	8000b3c <__aeabi_d2iz>
 8013a16:	4603      	mov	r3, r0
 8013a18:	b21b      	sxth	r3, r3
 8013a1a:	813b      	strh	r3, [r7, #8]
       amk1_setpoints_1.amk1_torque_limit_positiv = can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode(can2_amk1_setpoints_1.amk1_torque_limit_positiv);
 8013a1c:	4b15      	ldr	r3, [pc, #84]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 8013a1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7fb f93a 	bl	800ec9c <can2_amk1_setpoints_1_amk1_torque_limit_positiv_decode>
 8013a28:	ec53 2b10 	vmov	r2, r3, d0
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	4619      	mov	r1, r3
 8013a30:	f7ed f884 	bl	8000b3c <__aeabi_d2iz>
 8013a34:	4603      	mov	r3, r0
 8013a36:	b21b      	sxth	r3, r3
 8013a38:	81bb      	strh	r3, [r7, #12]
       amk1_setpoints_1.amk1_torque_limit_negativ = can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode(can2_amk1_setpoints_1.amk1_torque_limit_negativ);
 8013a3a:	4b0e      	ldr	r3, [pc, #56]	; (8013a74 <can2_amk1_setpoints_1_receive+0xf4>)
 8013a3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fb f940 	bl	800ecc6 <can2_amk1_setpoints_1_amk1_torque_limit_negativ_decode>
 8013a46:	ec53 2b10 	vmov	r2, r3, d0
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	f7ed f875 	bl	8000b3c <__aeabi_d2iz>
 8013a52:	4603      	mov	r3, r0
 8013a54:	b21b      	sxth	r3, r3
 8013a56:	817b      	strh	r3, [r7, #10]
       can2_amk1_setpoints_1_rx_callback(&amk1_setpoints_1);
 8013a58:	1d3b      	adds	r3, r7, #4
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f000 fb20 	bl	80140a0 <can2_amk1_setpoints_1_rx_callback>
       can2_amk1_setpoints_1_flag = 0;
 8013a60:	4b03      	ldr	r3, [pc, #12]	; (8013a70 <can2_amk1_setpoints_1_receive+0xf0>)
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
   }
}
 8013a66:	bf00      	nop
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	2000162a 	.word	0x2000162a
 8013a74:	200015f0 	.word	0x200015f0

08013a78 <can2_ivt_msg_result_i_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_receive() {
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_i_flag) {
 8013a7e:	4b0e      	ldr	r3, [pc, #56]	; (8013ab8 <can2_ivt_msg_result_i_receive+0x40>)
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d013      	beq.n	8013aae <can2_ivt_msg_result_i_receive+0x36>
       ivt_msg_result_i_t ivt_msg_result_i;
       ivt_msg_result_i.i_ts = can2_ivt_msg_result_i_i_ts_decode(can2_ivt_msg_result_i.i_ts);
 8013a86:	4b0d      	ldr	r3, [pc, #52]	; (8013abc <can2_ivt_msg_result_i_receive+0x44>)
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	4610      	mov	r0, r2
 8013a8e:	4619      	mov	r1, r3
 8013a90:	f7fb fa5e 	bl	800ef50 <can2_ivt_msg_result_i_i_ts_decode>
 8013a94:	eeb0 7a40 	vmov.f32	s14, s0
 8013a98:	eef0 7a60 	vmov.f32	s15, s1
 8013a9c:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_i_rx_callback(&ivt_msg_result_i);
 8013aa0:	463b      	mov	r3, r7
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f001 fe80 	bl	80157a8 <can2_ivt_msg_result_i_rx_callback>
       can2_ivt_msg_result_i_flag = 0;
 8013aa8:	4b03      	ldr	r3, [pc, #12]	; (8013ab8 <can2_ivt_msg_result_i_receive+0x40>)
 8013aaa:	2200      	movs	r2, #0
 8013aac:	701a      	strb	r2, [r3, #0]
   }
}
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2000162b 	.word	0x2000162b
 8013abc:	20001600 	.word	0x20001600

08013ac0 <can2_ivt_msg_result_u1_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_receive() {
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u1_flag) {
 8013ac6:	4b0e      	ldr	r3, [pc, #56]	; (8013b00 <can2_ivt_msg_result_u1_receive+0x40>)
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d013      	beq.n	8013af6 <can2_ivt_msg_result_u1_receive+0x36>
       ivt_msg_result_u1_t ivt_msg_result_u1;
       ivt_msg_result_u1.u_cells = can2_ivt_msg_result_u1_u_cells_decode(can2_ivt_msg_result_u1.u_cells);
 8013ace:	4b0d      	ldr	r3, [pc, #52]	; (8013b04 <can2_ivt_msg_result_u1_receive+0x44>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	f7fb fb8a 	bl	800f1f0 <can2_ivt_msg_result_u1_u_cells_decode>
 8013adc:	eeb0 7a40 	vmov.f32	s14, s0
 8013ae0:	eef0 7a60 	vmov.f32	s15, s1
 8013ae4:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u1_rx_callback(&ivt_msg_result_u1);
 8013ae8:	463b      	mov	r3, r7
 8013aea:	4618      	mov	r0, r3
 8013aec:	f001 fe7e 	bl	80157ec <can2_ivt_msg_result_u1_rx_callback>
       can2_ivt_msg_result_u1_flag = 0;
 8013af0:	4b03      	ldr	r3, [pc, #12]	; (8013b00 <can2_ivt_msg_result_u1_receive+0x40>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	701a      	strb	r2, [r3, #0]
   }
}
 8013af6:	bf00      	nop
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	2000162c 	.word	0x2000162c
 8013b04:	20001608 	.word	0x20001608

08013b08 <can2_ivt_msg_result_u3_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_receive() {
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
   if(can2_ivt_msg_result_u3_flag) {
 8013b0e:	4b0e      	ldr	r3, [pc, #56]	; (8013b48 <can2_ivt_msg_result_u3_receive+0x40>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d013      	beq.n	8013b3e <can2_ivt_msg_result_u3_receive+0x36>
       ivt_msg_result_u3_t ivt_msg_result_u3;
       ivt_msg_result_u3.u_vehicle = can2_ivt_msg_result_u3_u_vehicle_decode(can2_ivt_msg_result_u3.u_vehicle);
 8013b16:	4b0d      	ldr	r3, [pc, #52]	; (8013b4c <can2_ivt_msg_result_u3_receive+0x44>)
 8013b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	4619      	mov	r1, r3
 8013b20:	f7fb fcb6 	bl	800f490 <can2_ivt_msg_result_u3_u_vehicle_decode>
 8013b24:	eeb0 7a40 	vmov.f32	s14, s0
 8013b28:	eef0 7a60 	vmov.f32	s15, s1
 8013b2c:	ed87 7b00 	vstr	d7, [r7]
       can2_ivt_msg_result_u3_rx_callback(&ivt_msg_result_u3);
 8013b30:	463b      	mov	r3, r7
 8013b32:	4618      	mov	r0, r3
 8013b34:	f001 fe7c 	bl	8015830 <can2_ivt_msg_result_u3_rx_callback>
       can2_ivt_msg_result_u3_flag = 0;
 8013b38:	4b03      	ldr	r3, [pc, #12]	; (8013b48 <can2_ivt_msg_result_u3_receive+0x40>)
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	701a      	strb	r2, [r3, #0]
   }
}
 8013b3e:	bf00      	nop
 8013b40:	3708      	adds	r7, #8
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	2000162d 	.word	0x2000162d
 8013b4c:	20001610 	.word	0x20001610

08013b50 <can2_charger_config_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_charger_config_receive() {
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b08c      	sub	sp, #48	; 0x30
 8013b54:	af00      	add	r7, sp, #0
   if(can2_charger_config_flag) {
 8013b56:	4b26      	ldr	r3, [pc, #152]	; (8013bf0 <can2_charger_config_receive+0xa0>)
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d043      	beq.n	8013be6 <can2_charger_config_receive+0x96>
       charger_config_t charger_config;
       charger_config.msg_set_voltage_limit = can2_charger_config_msg_set_voltage_limit_decode(can2_charger_config.msg_set_voltage_limit);
 8013b5e:	4b25      	ldr	r3, [pc, #148]	; (8013bf4 <can2_charger_config_receive+0xa4>)
 8013b60:	885b      	ldrh	r3, [r3, #2]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fb fe38 	bl	800f7d8 <can2_charger_config_msg_set_voltage_limit_decode>
 8013b68:	eeb0 7a40 	vmov.f32	s14, s0
 8013b6c:	eef0 7a60 	vmov.f32	s15, s1
 8013b70:	ed87 7b08 	vstr	d7, [r7, #32]
       charger_config.msg_set_current_limit = can2_charger_config_msg_set_current_limit_decode(can2_charger_config.msg_set_current_limit);
 8013b74:	4b1f      	ldr	r3, [pc, #124]	; (8013bf4 <can2_charger_config_receive+0xa4>)
 8013b76:	889b      	ldrh	r3, [r3, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fb fe5d 	bl	800f838 <can2_charger_config_msg_set_current_limit_decode>
 8013b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8013b82:	eef0 7a60 	vmov.f32	s15, s1
 8013b86:	ed87 7b00 	vstr	d7, [r7]
       charger_config.msg_set_power_limit = can2_charger_config_msg_set_power_limit_decode(can2_charger_config.msg_set_power_limit);
 8013b8a:	4b1a      	ldr	r3, [pc, #104]	; (8013bf4 <can2_charger_config_receive+0xa4>)
 8013b8c:	88db      	ldrh	r3, [r3, #6]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fb fe81 	bl	800f896 <can2_charger_config_msg_set_power_limit_decode>
 8013b94:	eeb0 7a40 	vmov.f32	s14, s0
 8013b98:	eef0 7a60 	vmov.f32	s15, s1
 8013b9c:	ed87 7b04 	vstr	d7, [r7, #16]
       charger_config.msg_set_enabled = can2_charger_config_msg_set_enabled_decode(can2_charger_config.msg_set_enabled);
 8013ba0:	4b14      	ldr	r3, [pc, #80]	; (8013bf4 <can2_charger_config_receive+0xa4>)
 8013ba2:	7a1b      	ldrb	r3, [r3, #8]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fb fe99 	bl	800f8dc <can2_charger_config_msg_set_enabled_decode>
 8013baa:	ec53 2b10 	vmov	r2, r3, d0
 8013bae:	4610      	mov	r0, r2
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	f7ec ffeb 	bl	8000b8c <__aeabi_d2uiz>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	723b      	strb	r3, [r7, #8]
       charger_config.msg_set_time_out = can2_charger_config_msg_set_time_out_decode(can2_charger_config.msg_set_time_out);
 8013bbc:	4b0d      	ldr	r3, [pc, #52]	; (8013bf4 <can2_charger_config_receive+0xa4>)
 8013bbe:	7a5b      	ldrb	r3, [r3, #9]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7fb feae 	bl	800f922 <can2_charger_config_msg_set_time_out_decode>
 8013bc6:	ec53 2b10 	vmov	r2, r3, d0
 8013bca:	4610      	mov	r0, r2
 8013bcc:	4619      	mov	r1, r3
 8013bce:	f7ec ffdd 	bl	8000b8c <__aeabi_d2uiz>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	763b      	strb	r3, [r7, #24]
       can2_charger_config_rx_callback(&charger_config);
 8013bd8:	463b      	mov	r3, r7
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f002 f892 	bl	8015d04 <can2_charger_config_rx_callback>
       can2_charger_config_flag = 0;
 8013be0:	4b03      	ldr	r3, [pc, #12]	; (8013bf0 <can2_charger_config_receive+0xa0>)
 8013be2:	2200      	movs	r2, #0
 8013be4:	701a      	strb	r2, [r3, #0]
   }
}
 8013be6:	bf00      	nop
 8013be8:	3730      	adds	r7, #48	; 0x30
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	2000162e 	.word	0x2000162e
 8013bf4:	20001618 	.word	0x20001618

08013bf8 <can2_cc_status_receive>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_receive() {
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
   if(can2_cc_status_flag) {
 8013bfe:	4b0e      	ldr	r3, [pc, #56]	; (8013c38 <can2_cc_status_receive+0x40>)
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d014      	beq.n	8013c30 <can2_cc_status_receive+0x38>
       cc_status_t cc_status;
       cc_status.enable_ams_charging = can2_cc_status_enable_ams_charging_decode(can2_cc_status.enable_ams_charging);
 8013c06:	4b0d      	ldr	r3, [pc, #52]	; (8013c3c <can2_cc_status_receive+0x44>)
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fb feed 	bl	800f9ea <can2_cc_status_enable_ams_charging_decode>
 8013c10:	ec53 2b10 	vmov	r2, r3, d0
 8013c14:	4610      	mov	r0, r2
 8013c16:	4619      	mov	r1, r3
 8013c18:	f7ec ffb8 	bl	8000b8c <__aeabi_d2uiz>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	713b      	strb	r3, [r7, #4]
       can2_cc_status_rx_callback(&cc_status);
 8013c22:	1d3b      	adds	r3, r7, #4
 8013c24:	4618      	mov	r0, r3
 8013c26:	f001 fe25 	bl	8015874 <can2_cc_status_rx_callback>
       can2_cc_status_flag = 0;
 8013c2a:	4b03      	ldr	r3, [pc, #12]	; (8013c38 <can2_cc_status_receive+0x40>)
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	701a      	strb	r2, [r3, #0]
   }
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	2000162f 	.word	0x2000162f
 8013c3c:	20001624 	.word	0x20001624

08013c40 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b08a      	sub	sp, #40	; 0x28
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8013c48:	f107 020c 	add.w	r2, r7, #12
 8013c4c:	4b53      	ldr	r3, [pc, #332]	; (8013d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8013c4e:	2100      	movs	r1, #0
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f011 ff81 	bl	8025b58 <HAL_CAN_GetRxMessage>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f040 809a 	bne.w	8013d92 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f240 5224 	movw	r2, #1316	; 0x524
 8013c64:	4293      	cmp	r3, r2
 8013c66:	f000 808b 	beq.w	8013d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
 8013c6a:	f240 5224 	movw	r2, #1316	; 0x524
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	f200 8090 	bhi.w	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c74:	f240 5222 	movw	r2, #1314	; 0x522
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d07e      	beq.n	8013d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8013c7c:	f240 5222 	movw	r2, #1314	; 0x522
 8013c80:	4293      	cmp	r3, r2
 8013c82:	f200 8087 	bhi.w	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c86:	f240 5221 	movw	r2, #1313	; 0x521
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d072      	beq.n	8013d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 8013c8e:	f240 5221 	movw	r2, #1313	; 0x521
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d87e      	bhi.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013c96:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013c9a:	d074      	beq.n	8013d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x146>
 8013c9c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013ca0:	d878      	bhi.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013ca2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013ca6:	d071      	beq.n	8013d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
 8013ca8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013cac:	d872      	bhi.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013cae:	2b40      	cmp	r3, #64	; 0x40
 8013cb0:	d84a      	bhi.n	8013d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 8013cb2:	2b20      	cmp	r3, #32
 8013cb4:	d36e      	bcc.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013cb6:	3b20      	subs	r3, #32
 8013cb8:	2b20      	cmp	r3, #32
 8013cba:	d86b      	bhi.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8013cbc:	a201      	add	r2, pc, #4	; (adr r2, 8013cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8013cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc2:	bf00      	nop
 8013cc4:	08013d51 	.word	0x08013d51
 8013cc8:	08013d63 	.word	0x08013d63
 8013ccc:	08013d69 	.word	0x08013d69
 8013cd0:	08013d5d 	.word	0x08013d5d
 8013cd4:	08013d95 	.word	0x08013d95
 8013cd8:	08013d95 	.word	0x08013d95
 8013cdc:	08013d95 	.word	0x08013d95
 8013ce0:	08013d95 	.word	0x08013d95
 8013ce4:	08013d95 	.word	0x08013d95
 8013ce8:	08013d95 	.word	0x08013d95
 8013cec:	08013d95 	.word	0x08013d95
 8013cf0:	08013d95 	.word	0x08013d95
 8013cf4:	08013d95 	.word	0x08013d95
 8013cf8:	08013d95 	.word	0x08013d95
 8013cfc:	08013d95 	.word	0x08013d95
 8013d00:	08013d95 	.word	0x08013d95
 8013d04:	08013d95 	.word	0x08013d95
 8013d08:	08013d95 	.word	0x08013d95
 8013d0c:	08013d95 	.word	0x08013d95
 8013d10:	08013d95 	.word	0x08013d95
 8013d14:	08013d95 	.word	0x08013d95
 8013d18:	08013d95 	.word	0x08013d95
 8013d1c:	08013d95 	.word	0x08013d95
 8013d20:	08013d95 	.word	0x08013d95
 8013d24:	08013d95 	.word	0x08013d95
 8013d28:	08013d95 	.word	0x08013d95
 8013d2c:	08013d95 	.word	0x08013d95
 8013d30:	08013d95 	.word	0x08013d95
 8013d34:	08013d95 	.word	0x08013d95
 8013d38:	08013d95 	.word	0x08013d95
 8013d3c:	08013d95 	.word	0x08013d95
 8013d40:	08013d95 	.word	0x08013d95
 8013d44:	08013d57 	.word	0x08013d57
 8013d48:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013d4c:	d00f      	beq.n	8013d6e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013d4e:	e021      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8013d50:	f7fb ff70 	bl	800fc34 <can1_ams_status_1_decode>
               break;
 8013d54:	e01e      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8013d56:	f7fb ff81 	bl	800fc5c <can1_dbu_status_1_decode>
               break;
 8013d5a:	e01b      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 8013d5c:	f7fb ff92 	bl	800fc84 <can1_ams_temperatures_decode>
               break;
 8013d60:	e018      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8013d62:	f7fb ffa3 	bl	800fcac <can1_ams_cell_voltages_decode>
               break;
 8013d66:	e015      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8013d68:	f7fb ffb4 	bl	800fcd4 <can1_ams_cell_temperatures_decode>
               break;
 8013d6c:	e012      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 8013d6e:	f7fb ffc5 	bl	800fcfc <can2_amk1_setpoints_1_decode>
               break;
 8013d72:	e00f      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8013d74:	f7fb ffd6 	bl	800fd24 <can2_ivt_msg_result_i_decode>
               break;
 8013d78:	e00c      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 8013d7a:	f7fb ffe7 	bl	800fd4c <can2_ivt_msg_result_u1_decode>
               break;
 8013d7e:	e009      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 8013d80:	f7fb fff8 	bl	800fd74 <can2_ivt_msg_result_u3_decode>
               break;
 8013d84:	e006      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_charger_config_decode();
 8013d86:	f7fc f809 	bl	800fd9c <can2_charger_config_decode>
               break;
 8013d8a:	e003      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
               can2_cc_status_decode();
 8013d8c:	f7fc f81a 	bl	800fdc4 <can2_cc_status_decode>
               break;
 8013d90:	e000      	b.n	8013d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
    }
 8013d92:	bf00      	nop
}
 8013d94:	bf00      	nop
 8013d96:	3728      	adds	r7, #40	; 0x28
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	200014d0 	.word	0x200014d0

08013da0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b08a      	sub	sp, #40	; 0x28
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8013da8:	f107 020c 	add.w	r2, r7, #12
 8013dac:	4b53      	ldr	r3, [pc, #332]	; (8013efc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8013dae:	2101      	movs	r1, #1
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f011 fed1 	bl	8025b58 <HAL_CAN_GetRxMessage>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f040 809a 	bne.w	8013ef2 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
       switch(rx_header.StdId) {
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f240 5224 	movw	r2, #1316	; 0x524
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	f000 808b 	beq.w	8013ee0 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>
 8013dca:	f240 5224 	movw	r2, #1316	; 0x524
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	f200 8090 	bhi.w	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013dd4:	f240 5222 	movw	r2, #1314	; 0x522
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d07e      	beq.n	8013eda <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 8013ddc:	f240 5222 	movw	r2, #1314	; 0x522
 8013de0:	4293      	cmp	r3, r2
 8013de2:	f200 8087 	bhi.w	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013de6:	f240 5221 	movw	r2, #1313	; 0x521
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d072      	beq.n	8013ed4 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
 8013dee:	f240 5221 	movw	r2, #1313	; 0x521
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d87e      	bhi.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013df6:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013dfa:	d074      	beq.n	8013ee6 <HAL_CAN_RxFifo1MsgPendingCallback+0x146>
 8013dfc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8013e00:	d878      	bhi.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013e02:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013e06:	d071      	beq.n	8013eec <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>
 8013e08:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013e0c:	d872      	bhi.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013e0e:	2b40      	cmp	r3, #64	; 0x40
 8013e10:	d84a      	bhi.n	8013ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>
 8013e12:	2b20      	cmp	r3, #32
 8013e14:	d36e      	bcc.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013e16:	3b20      	subs	r3, #32
 8013e18:	2b20      	cmp	r3, #32
 8013e1a:	d86b      	bhi.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
 8013e1c:	a201      	add	r2, pc, #4	; (adr r2, 8013e24 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8013e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e22:	bf00      	nop
 8013e24:	08013eb1 	.word	0x08013eb1
 8013e28:	08013ec3 	.word	0x08013ec3
 8013e2c:	08013ec9 	.word	0x08013ec9
 8013e30:	08013ebd 	.word	0x08013ebd
 8013e34:	08013ef5 	.word	0x08013ef5
 8013e38:	08013ef5 	.word	0x08013ef5
 8013e3c:	08013ef5 	.word	0x08013ef5
 8013e40:	08013ef5 	.word	0x08013ef5
 8013e44:	08013ef5 	.word	0x08013ef5
 8013e48:	08013ef5 	.word	0x08013ef5
 8013e4c:	08013ef5 	.word	0x08013ef5
 8013e50:	08013ef5 	.word	0x08013ef5
 8013e54:	08013ef5 	.word	0x08013ef5
 8013e58:	08013ef5 	.word	0x08013ef5
 8013e5c:	08013ef5 	.word	0x08013ef5
 8013e60:	08013ef5 	.word	0x08013ef5
 8013e64:	08013ef5 	.word	0x08013ef5
 8013e68:	08013ef5 	.word	0x08013ef5
 8013e6c:	08013ef5 	.word	0x08013ef5
 8013e70:	08013ef5 	.word	0x08013ef5
 8013e74:	08013ef5 	.word	0x08013ef5
 8013e78:	08013ef5 	.word	0x08013ef5
 8013e7c:	08013ef5 	.word	0x08013ef5
 8013e80:	08013ef5 	.word	0x08013ef5
 8013e84:	08013ef5 	.word	0x08013ef5
 8013e88:	08013ef5 	.word	0x08013ef5
 8013e8c:	08013ef5 	.word	0x08013ef5
 8013e90:	08013ef5 	.word	0x08013ef5
 8013e94:	08013ef5 	.word	0x08013ef5
 8013e98:	08013ef5 	.word	0x08013ef5
 8013e9c:	08013ef5 	.word	0x08013ef5
 8013ea0:	08013ef5 	.word	0x08013ef5
 8013ea4:	08013eb7 	.word	0x08013eb7
 8013ea8:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8013eac:	d00f      	beq.n	8013ece <HAL_CAN_RxFifo1MsgPendingCallback+0x12e>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 8013eae:	e021      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_status_1_decode();
 8013eb0:	f7fb fec0 	bl	800fc34 <can1_ams_status_1_decode>
               break;
 8013eb4:	e01e      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_dbu_status_1_decode();
 8013eb6:	f7fb fed1 	bl	800fc5c <can1_dbu_status_1_decode>
               break;
 8013eba:	e01b      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_temperatures_decode();
 8013ebc:	f7fb fee2 	bl	800fc84 <can1_ams_temperatures_decode>
               break;
 8013ec0:	e018      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_voltages_decode();
 8013ec2:	f7fb fef3 	bl	800fcac <can1_ams_cell_voltages_decode>
               break;
 8013ec6:	e015      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can1_ams_cell_temperatures_decode();
 8013ec8:	f7fb ff04 	bl	800fcd4 <can1_ams_cell_temperatures_decode>
               break;
 8013ecc:	e012      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_amk1_setpoints_1_decode();
 8013ece:	f7fb ff15 	bl	800fcfc <can2_amk1_setpoints_1_decode>
               break;
 8013ed2:	e00f      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_i_decode();
 8013ed4:	f7fb ff26 	bl	800fd24 <can2_ivt_msg_result_i_decode>
               break;
 8013ed8:	e00c      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u1_decode();
 8013eda:	f7fb ff37 	bl	800fd4c <can2_ivt_msg_result_u1_decode>
               break;
 8013ede:	e009      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_ivt_msg_result_u3_decode();
 8013ee0:	f7fb ff48 	bl	800fd74 <can2_ivt_msg_result_u3_decode>
               break;
 8013ee4:	e006      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_charger_config_decode();
 8013ee6:	f7fb ff59 	bl	800fd9c <can2_charger_config_decode>
               break;
 8013eea:	e003      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
               can2_cc_status_decode();
 8013eec:	f7fb ff6a 	bl	800fdc4 <can2_cc_status_decode>
               break;
 8013ef0:	e000      	b.n	8013ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
    }
 8013ef2:	bf00      	nop
}
 8013ef4:	bf00      	nop
 8013ef6:	3728      	adds	r7, #40	; 0x28
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	200014d0 	.word	0x200014d0

08013f00 <simple_filter>:


void simple_filter() {
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b08a      	sub	sp, #40	; 0x28
 8013f04:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   
   filter_config.FilterActivation = ENABLE;
 8013f06:	2301      	movs	r3, #1
 8013f08:	623b      	str	r3, [r7, #32]
   filter_config.FilterBank = 0;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	617b      	str	r3, [r7, #20]
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	61bb      	str	r3, [r7, #24]
   filter_config.FilterIdHigh = 0x0000;
 8013f12:	2300      	movs	r3, #0
 8013f14:	603b      	str	r3, [r7, #0]
   filter_config.FilterIdLow = 0x0000;
 8013f16:	2300      	movs	r3, #0
 8013f18:	607b      	str	r3, [r7, #4]
   filter_config.FilterMaskIdHigh = 0x0000;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	60bb      	str	r3, [r7, #8]
   filter_config.FilterMaskIdLow = 0x0000;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60fb      	str	r3, [r7, #12]
   filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8013f22:	2301      	movs	r3, #1
 8013f24:	61fb      	str	r3, [r7, #28]

   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013f2a:	4b1d      	ldr	r3, [pc, #116]	; (8013fa0 <simple_filter+0xa0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	463a      	mov	r2, r7
 8013f30:	4611      	mov	r1, r2
 8013f32:	4618      	mov	r0, r3
 8013f34:	f011 fb9a 	bl	802566c <HAL_CAN_ConfigFilter>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <simple_filter+0x42>
       Error_Handler();
 8013f3e:	f003 fc53 	bl	80177e8 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013f42:	2301      	movs	r3, #1
 8013f44:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan1, &filter_config) != HAL_OK) {
 8013f46:	4b16      	ldr	r3, [pc, #88]	; (8013fa0 <simple_filter+0xa0>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	463a      	mov	r2, r7
 8013f4c:	4611      	mov	r1, r2
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f011 fb8c 	bl	802566c <HAL_CAN_ConfigFilter>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d001      	beq.n	8013f5e <simple_filter+0x5e>
       Error_Handler();
 8013f5a:	f003 fc45 	bl	80177e8 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013f62:	4b10      	ldr	r3, [pc, #64]	; (8013fa4 <simple_filter+0xa4>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	463a      	mov	r2, r7
 8013f68:	4611      	mov	r1, r2
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f011 fb7e 	bl	802566c <HAL_CAN_ConfigFilter>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <simple_filter+0x7a>
       Error_Handler();
 8013f76:	f003 fc37 	bl	80177e8 <Error_Handler>
   }
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	613b      	str	r3, [r7, #16]
   if (HAL_CAN_ConfigFilter(_hcan2, &filter_config) != HAL_OK) {
 8013f7e:	4b09      	ldr	r3, [pc, #36]	; (8013fa4 <simple_filter+0xa4>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	463a      	mov	r2, r7
 8013f84:	4611      	mov	r1, r2
 8013f86:	4618      	mov	r0, r3
 8013f88:	f011 fb70 	bl	802566c <HAL_CAN_ConfigFilter>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <simple_filter+0x96>
       Error_Handler();
 8013f92:	f003 fc29 	bl	80177e8 <Error_Handler>
   }


}
 8013f96:	bf00      	nop
 8013f98:	3728      	adds	r7, #40	; 0x28
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	20001630 	.word	0x20001630
 8013fa4:	20001634 	.word	0x20001634

08013fa8 <initialize_CAN>:

void initialize_CAN(CAN_HandleTypeDef* __hcan1, CAN_HandleTypeDef* __hcan2) {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
   _hcan1 = __hcan1;
 8013fb2:	4a25      	ldr	r2, [pc, #148]	; (8014048 <initialize_CAN+0xa0>)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan1) != HAL_OK) {
 8013fb8:	4b23      	ldr	r3, [pc, #140]	; (8014048 <initialize_CAN+0xa0>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f011 fc35 	bl	802582c <HAL_CAN_Start>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d001      	beq.n	8013fcc <initialize_CAN+0x24>
       Error_Handler();
 8013fc8:	f003 fc0e 	bl	80177e8 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan1) != HAL_OK) {
 8013fcc:	4b1e      	ldr	r3, [pc, #120]	; (8014048 <initialize_CAN+0xa0>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f011 fc6f 	bl	80258b4 <HAL_CAN_WakeUp>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <initialize_CAN+0x38>
       Error_Handler();
 8013fdc:	f003 fc04 	bl	80177e8 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8013fe0:	4b19      	ldr	r3, [pc, #100]	; (8014048 <initialize_CAN+0xa0>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2112      	movs	r1, #18
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f011 fec8 	bl	8025d7c <HAL_CAN_ActivateNotification>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <initialize_CAN+0x4e>
       Error_Handler();
 8013ff2:	f003 fbf9 	bl	80177e8 <Error_Handler>
   }

   _hcan2 = __hcan2;
 8013ff6:	4a15      	ldr	r2, [pc, #84]	; (801404c <initialize_CAN+0xa4>)
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	6013      	str	r3, [r2, #0]

   if (HAL_CAN_Start(_hcan2) != HAL_OK) {
 8013ffc:	4b13      	ldr	r3, [pc, #76]	; (801404c <initialize_CAN+0xa4>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4618      	mov	r0, r3
 8014002:	f011 fc13 	bl	802582c <HAL_CAN_Start>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d001      	beq.n	8014010 <initialize_CAN+0x68>
       Error_Handler();
 801400c:	f003 fbec 	bl	80177e8 <Error_Handler>
   }
   if (HAL_CAN_WakeUp(_hcan2) != HAL_OK) {
 8014010:	4b0e      	ldr	r3, [pc, #56]	; (801404c <initialize_CAN+0xa4>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4618      	mov	r0, r3
 8014016:	f011 fc4d 	bl	80258b4 <HAL_CAN_WakeUp>
 801401a:	4603      	mov	r3, r0
 801401c:	2b00      	cmp	r3, #0
 801401e:	d001      	beq.n	8014024 <initialize_CAN+0x7c>
       Error_Handler();
 8014020:	f003 fbe2 	bl	80177e8 <Error_Handler>
   }
   if (HAL_CAN_ActivateNotification(_hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8014024:	4b09      	ldr	r3, [pc, #36]	; (801404c <initialize_CAN+0xa4>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	2112      	movs	r1, #18
 801402a:	4618      	mov	r0, r3
 801402c:	f011 fea6 	bl	8025d7c <HAL_CAN_ActivateNotification>
 8014030:	4603      	mov	r3, r0
 8014032:	2b00      	cmp	r3, #0
 8014034:	d001      	beq.n	801403a <initialize_CAN+0x92>
       Error_Handler();
 8014036:	f003 fbd7 	bl	80177e8 <Error_Handler>
   }


   simple_filter();
 801403a:	f7ff ff61 	bl	8013f00 <simple_filter>

}
 801403e:	bf00      	nop
 8014040:	3708      	adds	r7, #8
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	20001630 	.word	0x20001630
 801404c:	20001634 	.word	0x20001634

08014050 <can1_ams_status_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_status_1_rx_callback(ams_status_1_t* ams_status_1) {
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]

}
 8014058:	bf00      	nop
 801405a:	370c      	adds	r7, #12
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <can1_ams_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_temperatures_rx_callback(ams_temperatures_t* ams_temperatures) {
 8014064:	b480      	push	{r7}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]

}
 801406c:	bf00      	nop
 801406e:	370c      	adds	r7, #12
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr

08014078 <can1_ams_cell_voltages_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_voltages_rx_callback(ams_cell_voltages_t* ams_cell_voltages) {
 8014078:	b480      	push	{r7}
 801407a:	b083      	sub	sp, #12
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]

}
 8014080:	bf00      	nop
 8014082:	370c      	adds	r7, #12
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <can1_ams_cell_temperatures_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can1_ams_cell_temperatures_rx_callback(ams_cell_temperatures_t* ams_cell_temperatures) {
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]

}
 8014094:	bf00      	nop
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <can2_amk1_setpoints_1_rx_callback>:
/*
 * @Brief  
 * @Param  A pointer to the message which was received
 * @Retval None
 */
__weak void can2_amk1_setpoints_1_rx_callback(amk1_setpoints_1_t* amk1_setpoints_1) {
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]

}
 80140a8:	bf00      	nop
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80140b4:	b480      	push	{r7}
 80140b6:	b083      	sub	sp, #12
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	4603      	mov	r3, r0
 80140bc:	6039      	str	r1, [r7, #0]
 80140be:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80140c0:	79fb      	ldrb	r3, [r7, #7]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d006      	beq.n	80140d4 <inc_res+0x20>
		ptr[0]++;
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	3301      	adds	r3, #1
 80140cc:	b2da      	uxtb	r2, r3
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 80140d2:	e002      	b.n	80140da <inc_res+0x26>
		ptr[0] = 0;
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	2200      	movs	r2, #0
 80140d8:	701a      	strb	r2, [r3, #0]
}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr
	...

080140e8 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 80140e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ea:	b087      	sub	sp, #28
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	460b      	mov	r3, r1
 80140f2:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 80140f4:	4b2e      	ldr	r3, [pc, #184]	; (80141b0 <COM_voltages_ok+0xc8>)
 80140f6:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80140f8:	4b2e      	ldr	r3, [pc, #184]	; (80141b4 <COM_voltages_ok+0xcc>)
 80140fa:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80140fc:	2300      	movs	r3, #0
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	e04d      	b.n	801419e <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	4413      	add	r3, r2
 801410a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801410e:	6938      	ldr	r0, [r7, #16]
 8014110:	f7ec fa0c 	bl	800052c <__aeabi_f2d>
 8014114:	4602      	mov	r2, r0
 8014116:	460b      	mov	r3, r1
 8014118:	2101      	movs	r1, #1
 801411a:	460e      	mov	r6, r1
 801411c:	4620      	mov	r0, r4
 801411e:	4629      	mov	r1, r5
 8014120:	f7ec fcec 	bl	8000afc <__aeabi_dcmpgt>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d101      	bne.n	801412e <COM_voltages_ok+0x46>
 801412a:	2300      	movs	r3, #0
 801412c:	461e      	mov	r6, r3
 801412e:	b2f3      	uxtb	r3, r6
 8014130:	4618      	mov	r0, r3
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	4a20      	ldr	r2, [pc, #128]	; (80141b8 <COM_voltages_ok+0xd0>)
 8014136:	4413      	add	r3, r2
 8014138:	4619      	mov	r1, r3
 801413a:	f7ff ffbb 	bl	80140b4 <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 801413e:	68f8      	ldr	r0, [r7, #12]
 8014140:	f7ec f9f4 	bl	800052c <__aeabi_f2d>
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	00db      	lsls	r3, r3, #3
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	4413      	add	r3, r2
 801414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014150:	2401      	movs	r4, #1
 8014152:	f7ec fcd3 	bl	8000afc <__aeabi_dcmpgt>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d101      	bne.n	8014160 <COM_voltages_ok+0x78>
 801415c:	2300      	movs	r3, #0
 801415e:	461c      	mov	r4, r3
 8014160:	b2e3      	uxtb	r3, r4
 8014162:	4618      	mov	r0, r3
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	4a15      	ldr	r2, [pc, #84]	; (80141bc <COM_voltages_ok+0xd4>)
 8014168:	4413      	add	r3, r2
 801416a:	4619      	mov	r1, r3
 801416c:	f7ff ffa2 	bl	80140b4 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 8014170:	4a11      	ldr	r2, [pc, #68]	; (80141b8 <COM_voltages_ok+0xd0>)
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	4413      	add	r3, r2
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	b29b      	uxth	r3, r3
 801417a:	887a      	ldrh	r2, [r7, #2]
 801417c:	429a      	cmp	r2, r3
 801417e:	d201      	bcs.n	8014184 <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 8014180:	2316      	movs	r3, #22
 8014182:	e010      	b.n	80141a6 <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 8014184:	4a0d      	ldr	r2, [pc, #52]	; (80141bc <COM_voltages_ok+0xd4>)
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	4413      	add	r3, r2
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	b29b      	uxth	r3, r3
 801418e:	887a      	ldrh	r2, [r7, #2]
 8014190:	429a      	cmp	r2, r3
 8014192:	d201      	bcs.n	8014198 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 8014194:	2315      	movs	r3, #21
 8014196:	e006      	b.n	80141a6 <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	3301      	adds	r3, #1
 801419c:	617b      	str	r3, [r7, #20]
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	2b7d      	cmp	r3, #125	; 0x7d
 80141a2:	ddae      	ble.n	8014102 <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 80141a4:	2300      	movs	r3, #0

}
 80141a6:	4618      	mov	r0, r3
 80141a8:	371c      	adds	r7, #28
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ae:	bf00      	nop
 80141b0:	4086147b 	.word	0x4086147b
 80141b4:	4033d70a 	.word	0x4033d70a
 80141b8:	2000164c 	.word	0x2000164c
 80141bc:	200016cc 	.word	0x200016cc

080141c0 <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 80141c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c2:	b087      	sub	sp, #28
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 80141cc:	4b2e      	ldr	r3, [pc, #184]	; (8014288 <COM_temperatures_ok+0xc8>)
 80141ce:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80141d0:	4b2e      	ldr	r3, [pc, #184]	; (801428c <COM_temperatures_ok+0xcc>)
 80141d2:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80141d4:	2300      	movs	r3, #0
 80141d6:	617b      	str	r3, [r7, #20]
 80141d8:	e04d      	b.n	8014276 <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	4413      	add	r3, r2
 80141e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80141e6:	6938      	ldr	r0, [r7, #16]
 80141e8:	f7ec f9a0 	bl	800052c <__aeabi_f2d>
 80141ec:	4602      	mov	r2, r0
 80141ee:	460b      	mov	r3, r1
 80141f0:	2101      	movs	r1, #1
 80141f2:	460e      	mov	r6, r1
 80141f4:	4620      	mov	r0, r4
 80141f6:	4629      	mov	r1, r5
 80141f8:	f7ec fc80 	bl	8000afc <__aeabi_dcmpgt>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d101      	bne.n	8014206 <COM_temperatures_ok+0x46>
 8014202:	2300      	movs	r3, #0
 8014204:	461e      	mov	r6, r3
 8014206:	b2f3      	uxtb	r3, r6
 8014208:	4618      	mov	r0, r3
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	4a20      	ldr	r2, [pc, #128]	; (8014290 <COM_temperatures_ok+0xd0>)
 801420e:	4413      	add	r3, r2
 8014210:	4619      	mov	r1, r3
 8014212:	f7ff ff4f 	bl	80140b4 <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 8014216:	68f8      	ldr	r0, [r7, #12]
 8014218:	f7ec f988 	bl	800052c <__aeabi_f2d>
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	687a      	ldr	r2, [r7, #4]
 8014222:	4413      	add	r3, r2
 8014224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014228:	2401      	movs	r4, #1
 801422a:	f7ec fc67 	bl	8000afc <__aeabi_dcmpgt>
 801422e:	4603      	mov	r3, r0
 8014230:	2b00      	cmp	r3, #0
 8014232:	d101      	bne.n	8014238 <COM_temperatures_ok+0x78>
 8014234:	2300      	movs	r3, #0
 8014236:	461c      	mov	r4, r3
 8014238:	b2e3      	uxtb	r3, r4
 801423a:	4618      	mov	r0, r3
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	4a15      	ldr	r2, [pc, #84]	; (8014294 <COM_temperatures_ok+0xd4>)
 8014240:	4413      	add	r3, r2
 8014242:	4619      	mov	r1, r3
 8014244:	f7ff ff36 	bl	80140b4 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8014248:	4a11      	ldr	r2, [pc, #68]	; (8014290 <COM_temperatures_ok+0xd0>)
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	4413      	add	r3, r2
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	b29b      	uxth	r3, r3
 8014252:	887a      	ldrh	r2, [r7, #2]
 8014254:	429a      	cmp	r2, r3
 8014256:	d201      	bcs.n	801425c <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8014258:	2318      	movs	r3, #24
 801425a:	e010      	b.n	801427e <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 801425c:	4a0d      	ldr	r2, [pc, #52]	; (8014294 <COM_temperatures_ok+0xd4>)
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	4413      	add	r3, r2
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	b29b      	uxth	r3, r3
 8014266:	887a      	ldrh	r2, [r7, #2]
 8014268:	429a      	cmp	r2, r3
 801426a:	d201      	bcs.n	8014270 <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 801426c:	2317      	movs	r3, #23
 801426e:	e006      	b.n	801427e <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	3301      	adds	r3, #1
 8014274:	617b      	str	r3, [r7, #20]
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	2b3b      	cmp	r3, #59	; 0x3b
 801427a:	ddae      	ble.n	80141da <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 801427c:	2300      	movs	r3, #0

}
 801427e:	4618      	mov	r0, r3
 8014280:	371c      	adds	r7, #28
 8014282:	46bd      	mov	sp, r7
 8014284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014286:	bf00      	nop
 8014288:	42700000 	.word	0x42700000
 801428c:	c1a00000 	.word	0xc1a00000
 8014290:	2000174c 	.word	0x2000174c
 8014294:	20001788 	.word	0x20001788

08014298 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 8014298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801429a:	b085      	sub	sp, #20
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	460b      	mov	r3, r1
 80142a2:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 80142a4:	4b21      	ldr	r3, [pc, #132]	; (801432c <COM_current_ok+0x94>)
 80142a6:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 80142a8:	4b21      	ldr	r3, [pc, #132]	; (8014330 <COM_current_ok+0x98>)
 80142aa:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80142b2:	68f8      	ldr	r0, [r7, #12]
 80142b4:	f7ec f93a 	bl	800052c <__aeabi_f2d>
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	2101      	movs	r1, #1
 80142be:	460e      	mov	r6, r1
 80142c0:	4620      	mov	r0, r4
 80142c2:	4629      	mov	r1, r5
 80142c4:	f7ec fc1a 	bl	8000afc <__aeabi_dcmpgt>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d101      	bne.n	80142d2 <COM_current_ok+0x3a>
 80142ce:	2300      	movs	r3, #0
 80142d0:	461e      	mov	r6, r3
 80142d2:	b2f3      	uxtb	r3, r6
 80142d4:	4917      	ldr	r1, [pc, #92]	; (8014334 <COM_current_ok+0x9c>)
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7ff feec 	bl	80140b4 <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 80142dc:	68b8      	ldr	r0, [r7, #8]
 80142de:	f7ec f925 	bl	800052c <__aeabi_f2d>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	2401      	movs	r4, #1
 80142ea:	f7ec fc07 	bl	8000afc <__aeabi_dcmpgt>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d101      	bne.n	80142f8 <COM_current_ok+0x60>
 80142f4:	2300      	movs	r3, #0
 80142f6:	461c      	mov	r4, r3
 80142f8:	b2e3      	uxtb	r3, r4
 80142fa:	490f      	ldr	r1, [pc, #60]	; (8014338 <COM_current_ok+0xa0>)
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7ff fed9 	bl	80140b4 <inc_res>

	if (over_current > sample_constraint) {
 8014302:	4b0c      	ldr	r3, [pc, #48]	; (8014334 <COM_current_ok+0x9c>)
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	b29b      	uxth	r3, r3
 8014308:	887a      	ldrh	r2, [r7, #2]
 801430a:	429a      	cmp	r2, r3
 801430c:	d201      	bcs.n	8014312 <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 801430e:	2320      	movs	r3, #32
 8014310:	e008      	b.n	8014324 <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 8014312:	4b09      	ldr	r3, [pc, #36]	; (8014338 <COM_current_ok+0xa0>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	b29b      	uxth	r3, r3
 8014318:	887a      	ldrh	r2, [r7, #2]
 801431a:	429a      	cmp	r2, r3
 801431c:	d201      	bcs.n	8014322 <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 801431e:	231f      	movs	r3, #31
 8014320:	e000      	b.n	8014324 <COM_current_ok+0x8c>
	}

	return 0;
 8014322:	2300      	movs	r3, #0

}
 8014324:	4618      	mov	r0, r3
 8014326:	3714      	adds	r7, #20
 8014328:	46bd      	mov	sp, r7
 801432a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801432c:	42c80000 	.word	0x42c80000
 8014330:	c2200000 	.word	0xc2200000
 8014334:	200017c4 	.word	0x200017c4
 8014338:	200017c5 	.word	0x200017c5

0801433c <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8014344:	4b10      	ldr	r3, [pc, #64]	; (8014388 <FAN_initialize+0x4c>)
 8014346:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8014348:	eddf 6a10 	vldr	s13, [pc, #64]	; 801438c <FAN_initialize+0x50>
 801434c:	ed97 7a03 	vldr	s14, [r7, #12]
 8014350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801435c:	ee17 2a90 	vmov	r2, s15
 8014360:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	0852      	lsrs	r2, r2, #1
 801436e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2200      	movs	r2, #0
 8014376:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8014378:	2108      	movs	r1, #8
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f014 f94c 	bl	8028618 <HAL_TIM_PWM_Start>

}
 8014380:	bf00      	nop
 8014382:	3710      	adds	r7, #16
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	447a0000 	.word	0x447a0000
 801438c:	477fff00 	.word	0x477fff00

08014390 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 801439c:	edd7 7a00 	vldr	s15, [r7]
 80143a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a8:	d502      	bpl.n	80143b0 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 80143aa:	f04f 0300 	mov.w	r3, #0
 80143ae:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 80143b0:	edd7 7a00 	vldr	s15, [r7]
 80143b4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014408 <FAN_duty_cycle+0x78>
 80143b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c0:	dd01      	ble.n	80143c6 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 80143c2:	4b12      	ldr	r3, [pc, #72]	; (801440c <FAN_duty_cycle+0x7c>)
 80143c4:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 80143c6:	edd7 7a00 	vldr	s15, [r7]
 80143ca:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8014408 <FAN_duty_cycle+0x78>
 80143ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d8:	ee07 3a90 	vmov	s15, r3
 80143dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143ec:	ee17 2a90 	vmov	r2, s15
 80143f0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2200      	movs	r2, #0
 80143f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80143fa:	bf00      	nop
 80143fc:	370c      	adds	r7, #12
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr
 8014406:	bf00      	nop
 8014408:	42c80000 	.word	0x42c80000
 801440c:	42c80000 	.word	0x42c80000

08014410 <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8014410:	b580      	push	{r7, lr}
 8014412:	b086      	sub	sp, #24
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8014418:	f04f 0300 	mov.w	r3, #0
 801441c:	617b      	str	r3, [r7, #20]
	float conq = 0;
 801441e:	f04f 0300 	mov.w	r3, #0
 8014422:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014424:	2300      	movs	r3, #0
 8014426:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014430:	d148      	bne.n	80144c4 <HAL_TIM_IC_CaptureCallback+0xb4>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8014432:	2104      	movs	r1, #4
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f014 ff85 	bl	8029344 <HAL_TIM_ReadCapturedValue>
 801443a:	ee07 0a90 	vmov	s15, r0
 801443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014442:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8014446:	2100      	movs	r1, #0
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f014 ff7b 	bl	8029344 <HAL_TIM_ReadCapturedValue>
 801444e:	ee07 0a90 	vmov	s15, r0
 8014452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014456:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 801445a:	ed97 7a05 	vldr	s14, [r7, #20]
 801445e:	edd7 7a04 	vldr	s15, [r7, #16]
 8014462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014466:	ee16 0a90 	vmov	r0, s13
 801446a:	f7ec f85f 	bl	800052c <__aeabi_f2d>
 801446e:	4602      	mov	r2, r0
 8014470:	460b      	mov	r3, r1
 8014472:	4916      	ldr	r1, [pc, #88]	; (80144cc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8014474:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 8014478:	edd7 7a04 	vldr	s15, [r7, #16]
 801447c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014484:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80144d0 <HAL_TIM_IC_CaptureCallback+0xc0>
 8014488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801448c:	ee16 0a90 	vmov	r0, s13
 8014490:	f7ec f84c 	bl	800052c <__aeabi_f2d>
 8014494:	4602      	mov	r2, r0
 8014496:	460b      	mov	r3, r1
 8014498:	490c      	ldr	r1, [pc, #48]	; (80144cc <HAL_TIM_IC_CaptureCallback+0xbc>)
 801449a:	e9c1 2302 	strd	r2, r3, [r1, #8]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 801449e:	4b0d      	ldr	r3, [pc, #52]	; (80144d4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80144a0:	6818      	ldr	r0, [r3, #0]
 80144a2:	f107 020c 	add.w	r2, r7, #12
 80144a6:	2302      	movs	r3, #2
 80144a8:	4908      	ldr	r1, [pc, #32]	; (80144cc <HAL_TIM_IC_CaptureCallback+0xbc>)
 80144aa:	f016 fa2b 	bl	802a904 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d007      	beq.n	80144c4 <HAL_TIM_IC_CaptureCallback+0xb4>
 80144b4:	4b08      	ldr	r3, [pc, #32]	; (80144d8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80144b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ba:	601a      	str	r2, [r3, #0]
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	f3bf 8f6f 	isb	sy
	}
}
 80144c4:	bf00      	nop
 80144c6:	3718      	adds	r7, #24
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	200017c8 	.word	0x200017c8
 80144d0:	4cbebc20 	.word	0x4cbebc20
 80144d4:	2001b718 	.word	0x2001b718
 80144d8:	e000ed04 	.word	0xe000ed04

080144dc <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4a0b      	ldr	r2, [pc, #44]	; (8014518 <initialize_IMD+0x3c>)
 80144ea:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 80144ec:	2100      	movs	r1, #0
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f014 fa90 	bl	8028a14 <HAL_TIM_IC_Start_IT>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d001      	beq.n	80144fe <initialize_IMD+0x22>
		Error_Handler();
 80144fa:	f003 f975 	bl	80177e8 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 80144fe:	2104      	movs	r1, #4
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f014 f9ab 	bl	802885c <HAL_TIM_IC_Start>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	d001      	beq.n	8014510 <initialize_IMD+0x34>
		Error_Handler();
 801450c:	f003 f96c 	bl	80177e8 <Error_Handler>
	}
}
 8014510:	bf00      	nop
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	0280de80 	.word	0x0280de80

0801451c <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 801451c:	b480      	push	{r7}
 801451e:	b085      	sub	sp, #20
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	6039      	str	r1, [r7, #0]
 8014526:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8014528:	2310      	movs	r3, #16
 801452a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 801452c:	2300      	movs	r3, #0
 801452e:	737b      	strb	r3, [r7, #13]
 8014530:	e018      	b.n	8014564 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8014532:	89fb      	ldrh	r3, [r7, #14]
 8014534:	09db      	lsrs	r3, r3, #7
 8014536:	b29a      	uxth	r2, r3
 8014538:	7b7b      	ldrb	r3, [r7, #13]
 801453a:	6839      	ldr	r1, [r7, #0]
 801453c:	440b      	add	r3, r1
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	b29b      	uxth	r3, r3
 8014542:	4053      	eors	r3, r2
 8014544:	b29b      	uxth	r3, r3
 8014546:	b2db      	uxtb	r3, r3
 8014548:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 801454a:	89fb      	ldrh	r3, [r7, #14]
 801454c:	021b      	lsls	r3, r3, #8
 801454e:	b29a      	uxth	r2, r3
 8014550:	897b      	ldrh	r3, [r7, #10]
 8014552:	490b      	ldr	r1, [pc, #44]	; (8014580 <pec15_calc+0x64>)
 8014554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014558:	b29b      	uxth	r3, r3
 801455a:	4053      	eors	r3, r2
 801455c:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 801455e:	7b7b      	ldrb	r3, [r7, #13]
 8014560:	3301      	adds	r3, #1
 8014562:	737b      	strb	r3, [r7, #13]
 8014564:	7b7a      	ldrb	r2, [r7, #13]
 8014566:	79fb      	ldrb	r3, [r7, #7]
 8014568:	429a      	cmp	r2, r3
 801456a:	d3e2      	bcc.n	8014532 <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 801456c:	89fb      	ldrh	r3, [r7, #14]
 801456e:	005b      	lsls	r3, r3, #1
 8014570:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 8014572:	4618      	mov	r0, r3
 8014574:	3714      	adds	r7, #20
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr
 801457e:	bf00      	nop
 8014580:	0802f68c 	.word	0x0802f68c

08014584 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 801458c:	4a04      	ldr	r2, [pc, #16]	; (80145a0 <initialize_LTC+0x1c>)
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6013      	str	r3, [r2, #0]
}
 8014592:	bf00      	nop
 8014594:	370c      	adds	r7, #12
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	2001b754 	.word	0x2001b754

080145a4 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 80145a8:	2200      	movs	r2, #0
 80145aa:	2110      	movs	r1, #16
 80145ac:	4802      	ldr	r0, [pc, #8]	; (80145b8 <LTC_CS_select+0x14>)
 80145ae:	f012 fc1f 	bl	8026df0 <HAL_GPIO_WritePin>
}
 80145b2:	bf00      	nop
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	40020800 	.word	0x40020800

080145bc <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 80145c0:	2201      	movs	r2, #1
 80145c2:	2110      	movs	r1, #16
 80145c4:	4802      	ldr	r0, [pc, #8]	; (80145d0 <LTC_CS_deselect+0x14>)
 80145c6:	f012 fc13 	bl	8026df0 <HAL_GPIO_WritePin>
}
 80145ca:	bf00      	nop
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	40020800 	.word	0x40020800

080145d4 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 80145da:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 80145de:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 80145e0:	88fb      	ldrh	r3, [r7, #6]
 80145e2:	0a1b      	lsrs	r3, r3, #8
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	b2da      	uxtb	r2, r3
 80145e8:	4b12      	ldr	r3, [pc, #72]	; (8014634 <LTC_wake+0x60>)
 80145ea:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 80145ec:	88fb      	ldrh	r3, [r7, #6]
 80145ee:	b2da      	uxtb	r2, r3
 80145f0:	4b10      	ldr	r3, [pc, #64]	; (8014634 <LTC_wake+0x60>)
 80145f2:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 80145f4:	490f      	ldr	r1, [pc, #60]	; (8014634 <LTC_wake+0x60>)
 80145f6:	2002      	movs	r0, #2
 80145f8:	f7ff ff90 	bl	801451c <pec15_calc>
 80145fc:	4603      	mov	r3, r0
 80145fe:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 8014600:	88bb      	ldrh	r3, [r7, #4]
 8014602:	0a1b      	lsrs	r3, r3, #8
 8014604:	b29b      	uxth	r3, r3
 8014606:	b2da      	uxtb	r2, r3
 8014608:	4b0a      	ldr	r3, [pc, #40]	; (8014634 <LTC_wake+0x60>)
 801460a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801460c:	88bb      	ldrh	r3, [r7, #4]
 801460e:	b2da      	uxtb	r2, r3
 8014610:	4b08      	ldr	r3, [pc, #32]	; (8014634 <LTC_wake+0x60>)
 8014612:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8014614:	f7ff ffc6 	bl	80145a4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8014618:	4b07      	ldr	r3, [pc, #28]	; (8014638 <LTC_wake+0x64>)
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	2300      	movs	r3, #0
 801461e:	2204      	movs	r2, #4
 8014620:	4904      	ldr	r1, [pc, #16]	; (8014634 <LTC_wake+0x60>)
 8014622:	f013 f958 	bl	80278d6 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8014626:	f7ff ffc9 	bl	80145bc <LTC_CS_deselect>

	return 1;
 801462a:	2301      	movs	r3, #1
}
 801462c:	4618      	mov	r0, r3
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	2001b764 	.word	0x2001b764
 8014638:	2001b754 	.word	0x2001b754

0801463c <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	4603      	mov	r3, r0
 8014644:	460a      	mov	r2, r1
 8014646:	71fb      	strb	r3, [r7, #7]
 8014648:	4613      	mov	r3, r2
 801464a:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 801464c:	79fb      	ldrb	r3, [r7, #7]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d006      	beq.n	8014660 <LTC_command+0x24>
		if (!LTC_wake()) {
 8014652:	f7ff ffbf 	bl	80145d4 <LTC_wake>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d101      	bne.n	8014660 <LTC_command+0x24>
			return 0;
 801465c:	2300      	movs	r3, #0
 801465e:	e025      	b.n	80146ac <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 8014660:	88bb      	ldrh	r3, [r7, #4]
 8014662:	0a1b      	lsrs	r3, r3, #8
 8014664:	b29b      	uxth	r3, r3
 8014666:	b2da      	uxtb	r2, r3
 8014668:	4b12      	ldr	r3, [pc, #72]	; (80146b4 <LTC_command+0x78>)
 801466a:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 801466c:	88bb      	ldrh	r3, [r7, #4]
 801466e:	b2da      	uxtb	r2, r3
 8014670:	4b10      	ldr	r3, [pc, #64]	; (80146b4 <LTC_command+0x78>)
 8014672:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8014674:	490f      	ldr	r1, [pc, #60]	; (80146b4 <LTC_command+0x78>)
 8014676:	2002      	movs	r0, #2
 8014678:	f7ff ff50 	bl	801451c <pec15_calc>
 801467c:	4603      	mov	r3, r0
 801467e:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014680:	89fb      	ldrh	r3, [r7, #14]
 8014682:	0a1b      	lsrs	r3, r3, #8
 8014684:	b29b      	uxth	r3, r3
 8014686:	b2da      	uxtb	r2, r3
 8014688:	4b0a      	ldr	r3, [pc, #40]	; (80146b4 <LTC_command+0x78>)
 801468a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801468c:	89fb      	ldrh	r3, [r7, #14]
 801468e:	b2da      	uxtb	r2, r3
 8014690:	4b08      	ldr	r3, [pc, #32]	; (80146b4 <LTC_command+0x78>)
 8014692:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 8014694:	f7ff ff86 	bl	80145a4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8014698:	4b07      	ldr	r3, [pc, #28]	; (80146b8 <LTC_command+0x7c>)
 801469a:	6818      	ldr	r0, [r3, #0]
 801469c:	2300      	movs	r3, #0
 801469e:	2204      	movs	r2, #4
 80146a0:	4904      	ldr	r1, [pc, #16]	; (80146b4 <LTC_command+0x78>)
 80146a2:	f013 f918 	bl	80278d6 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80146a6:	f7ff ff89 	bl	80145bc <LTC_CS_deselect>

	return 1;
 80146aa:	2301      	movs	r3, #1
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3710      	adds	r7, #16
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	2001b764 	.word	0x2001b764
 80146b8:	2001b754 	.word	0x2001b754

080146bc <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	4603      	mov	r3, r0
 80146c4:	460a      	mov	r2, r1
 80146c6:	71fb      	strb	r3, [r7, #7]
 80146c8:	4613      	mov	r3, r2
 80146ca:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80146cc:	79fb      	ldrb	r3, [r7, #7]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d006      	beq.n	80146e0 <LTC_read_command+0x24>
		if (!LTC_wake()) {
 80146d2:	f7ff ff7f 	bl	80145d4 <LTC_wake>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d101      	bne.n	80146e0 <LTC_read_command+0x24>
			return 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	e042      	b.n	8014766 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 80146e0:	88bb      	ldrh	r3, [r7, #4]
 80146e2:	0a1b      	lsrs	r3, r3, #8
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	b2da      	uxtb	r2, r3
 80146e8:	4b21      	ldr	r3, [pc, #132]	; (8014770 <LTC_read_command+0xb4>)
 80146ea:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 80146ec:	88bb      	ldrh	r3, [r7, #4]
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	4b1f      	ldr	r3, [pc, #124]	; (8014770 <LTC_read_command+0xb4>)
 80146f2:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 80146f4:	491e      	ldr	r1, [pc, #120]	; (8014770 <LTC_read_command+0xb4>)
 80146f6:	2002      	movs	r0, #2
 80146f8:	f7ff ff10 	bl	801451c <pec15_calc>
 80146fc:	4603      	mov	r3, r0
 80146fe:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 8014700:	89fb      	ldrh	r3, [r7, #14]
 8014702:	0a1b      	lsrs	r3, r3, #8
 8014704:	b29b      	uxth	r3, r3
 8014706:	b2da      	uxtb	r2, r3
 8014708:	4b19      	ldr	r3, [pc, #100]	; (8014770 <LTC_read_command+0xb4>)
 801470a:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 801470c:	89fb      	ldrh	r3, [r7, #14]
 801470e:	b2da      	uxtb	r2, r3
 8014710:	4b17      	ldr	r3, [pc, #92]	; (8014770 <LTC_read_command+0xb4>)
 8014712:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8014714:	f7ff ff46 	bl	80145a4 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8014718:	4b16      	ldr	r3, [pc, #88]	; (8014774 <LTC_read_command+0xb8>)
 801471a:	6818      	ldr	r0, [r3, #0]
 801471c:	2300      	movs	r3, #0
 801471e:	2204      	movs	r2, #4
 8014720:	4913      	ldr	r1, [pc, #76]	; (8014770 <LTC_read_command+0xb4>)
 8014722:	f013 f8d8 	bl	80278d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8014726:	4b13      	ldr	r3, [pc, #76]	; (8014774 <LTC_read_command+0xb8>)
 8014728:	6818      	ldr	r0, [r3, #0]
 801472a:	2300      	movs	r3, #0
 801472c:	220a      	movs	r2, #10
 801472e:	4912      	ldr	r1, [pc, #72]	; (8014778 <LTC_read_command+0xbc>)
 8014730:	f013 fa0d 	bl	8027b4e <HAL_SPI_Receive>
	LTC_CS_deselect();
 8014734:	f7ff ff42 	bl	80145bc <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8014738:	490f      	ldr	r1, [pc, #60]	; (8014778 <LTC_read_command+0xbc>)
 801473a:	2008      	movs	r0, #8
 801473c:	f7ff feee 	bl	801451c <pec15_calc>
 8014740:	4603      	mov	r3, r0
 8014742:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8014744:	89fb      	ldrh	r3, [r7, #14]
 8014746:	0a1b      	lsrs	r3, r3, #8
 8014748:	b29b      	uxth	r3, r3
 801474a:	b2db      	uxtb	r3, r3
 801474c:	4a0a      	ldr	r2, [pc, #40]	; (8014778 <LTC_read_command+0xbc>)
 801474e:	7a12      	ldrb	r2, [r2, #8]
 8014750:	4293      	cmp	r3, r2
 8014752:	d005      	beq.n	8014760 <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8014754:	89fb      	ldrh	r3, [r7, #14]
 8014756:	b2db      	uxtb	r3, r3
 8014758:	4a07      	ldr	r2, [pc, #28]	; (8014778 <LTC_read_command+0xbc>)
 801475a:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 801475c:	4293      	cmp	r3, r2
 801475e:	d101      	bne.n	8014764 <LTC_read_command+0xa8>
		return 0;
 8014760:	2300      	movs	r3, #0
 8014762:	e000      	b.n	8014766 <LTC_read_command+0xaa>
	}

	return 1;
 8014764:	2301      	movs	r3, #1
}
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	2001b764 	.word	0x2001b764
 8014774:	2001b754 	.word	0x2001b754
 8014778:	2001b758 	.word	0x2001b758

0801477c <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af00      	add	r7, sp, #0
 8014782:	4603      	mov	r3, r0
 8014784:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 8014786:	f44f 735c 	mov.w	r3, #880	; 0x370
 801478a:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	b29a      	uxth	r2, r3
 8014790:	79fb      	ldrb	r3, [r7, #7]
 8014792:	4611      	mov	r1, r2
 8014794:	4618      	mov	r0, r3
 8014796:	f7ff ff51 	bl	801463c <LTC_command>

	HAL_Delay(2);
 801479a:	2002      	movs	r0, #2
 801479c:	f010 f8ea 	bl	8024974 <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 80147a0:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80147a4:	60fb      	str	r3, [r7, #12]

	LTC_command(0, command);
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	4619      	mov	r1, r3
 80147ac:	2000      	movs	r0, #0
 80147ae:	f7ff ff45 	bl	801463c <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80147b2:	2002      	movs	r0, #2
 80147b4:	f010 f8de 	bl	8024974 <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 80147b8:	2300      	movs	r3, #0
 80147ba:	61fb      	str	r3, [r7, #28]

	for (k = 0; k < 12; k++) { // 12 segments
 80147bc:	2300      	movs	r3, #0
 80147be:	61bb      	str	r3, [r7, #24]
 80147c0:	e041      	b.n	8014846 <LTC_acquire_data+0xca>
		for (i = 0; i < 6; i++) {
 80147c2:	2300      	movs	r3, #0
 80147c4:	617b      	str	r3, [r7, #20]
 80147c6:	e038      	b.n	801483a <LTC_acquire_data+0xbe>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 80147c8:	69bb      	ldr	r3, [r7, #24]
 80147ca:	02db      	lsls	r3, r3, #11
 80147cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80147d0:	f043 0304 	orr.w	r3, r3, #4
 80147d4:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	4413      	add	r3, r2
 80147de:	60fb      	str	r3, [r7, #12]

			if(!LTC_read_command(0, command)) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	4619      	mov	r1, r3
 80147e6:	2000      	movs	r0, #0
 80147e8:	f7ff ff68 	bl	80146bc <LTC_read_command>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d101      	bne.n	80147f6 <LTC_acquire_data+0x7a>
				/* Data wasn't to be read */
				return 0;
 80147f2:	2300      	movs	r3, #0
 80147f4:	e039      	b.n	801486a <LTC_acquire_data+0xee>
			}

			for (j = 0; j < 3; j++) {
 80147f6:	2300      	movs	r3, #0
 80147f8:	613b      	str	r3, [r7, #16]
 80147fa:	e018      	b.n	801482e <LTC_acquire_data+0xb2>
				LTC_data[p] = LTC_read_buffer[2 * j]
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	005b      	lsls	r3, r3, #1
 8014800:	4a1c      	ldr	r2, [pc, #112]	; (8014874 <LTC_acquire_data+0xf8>)
 8014802:	5cd3      	ldrb	r3, [r2, r3]
 8014804:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	3301      	adds	r3, #1
 801480c:	4919      	ldr	r1, [pc, #100]	; (8014874 <LTC_acquire_data+0xf8>)
 801480e:	5ccb      	ldrb	r3, [r1, r3]
 8014810:	021b      	lsls	r3, r3, #8
 8014812:	b21b      	sxth	r3, r3
 8014814:	4313      	orrs	r3, r2
 8014816:	b21b      	sxth	r3, r3
 8014818:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 801481a:	4a17      	ldr	r2, [pc, #92]	; (8014878 <LTC_acquire_data+0xfc>)
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				p++;
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	3301      	adds	r3, #1
 8014826:	61fb      	str	r3, [r7, #28]
			for (j = 0; j < 3; j++) {
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	3301      	adds	r3, #1
 801482c:	613b      	str	r3, [r7, #16]
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	2b02      	cmp	r3, #2
 8014832:	dde3      	ble.n	80147fc <LTC_acquire_data+0x80>
		for (i = 0; i < 6; i++) {
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	3301      	adds	r3, #1
 8014838:	617b      	str	r3, [r7, #20]
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	2b05      	cmp	r3, #5
 801483e:	ddc3      	ble.n	80147c8 <LTC_acquire_data+0x4c>
	for (k = 0; k < 12; k++) { // 12 segments
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	3301      	adds	r3, #1
 8014844:	61bb      	str	r3, [r7, #24]
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	2b0b      	cmp	r3, #11
 801484a:	ddba      	ble.n	80147c2 <LTC_acquire_data+0x46>
			}
		}

	}

	if(!LTC_make_voltages()) {
 801484c:	f000 f818 	bl	8014880 <LTC_make_voltages>
 8014850:	4603      	mov	r3, r0
 8014852:	2b00      	cmp	r3, #0
 8014854:	d101      	bne.n	801485a <LTC_acquire_data+0xde>
		/* Data was corrupted, or voltage reference was off */
		return 0;
 8014856:	2300      	movs	r3, #0
 8014858:	e007      	b.n	801486a <LTC_acquire_data+0xee>
	}
	if(!LTC_make_temperatures()) {
 801485a:	f000 f879 	bl	8014950 <LTC_make_temperatures>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d101      	bne.n	8014868 <LTC_acquire_data+0xec>
		/* Data was corrupted, or voltage reference was off */
		return 0;
 8014864:	2300      	movs	r3, #0
 8014866:	e000      	b.n	801486a <LTC_acquire_data+0xee>
	}

	/* Everything is fine ! */
	return 1;
 8014868:	2301      	movs	r3, #1
}
 801486a:	4618      	mov	r0, r3
 801486c:	3720      	adds	r7, #32
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	2001b758 	.word	0x2001b758
 8014878:	2001bb58 	.word	0x2001bb58
 801487c:	00000000 	.word	0x00000000

08014880 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 8014880:	b590      	push	{r4, r7, lr}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	p = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 801488a:	2300      	movs	r3, #0
 801488c:	80fb      	strh	r3, [r7, #6]
 801488e:	e04e      	b.n	801492e <LTC_make_voltages+0xae>
		K = cellstack_voltage_count(cellstack);
 8014890:	88fb      	ldrh	r3, [r7, #6]
 8014892:	f003 0301 	and.w	r3, r3, #1
 8014896:	b29b      	uxth	r3, r3
 8014898:	f1c3 030b 	rsb	r3, r3, #11
 801489c:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 801489e:	2300      	movs	r3, #0
 80148a0:	80bb      	strh	r3, [r7, #4]
 80148a2:	e03d      	b.n	8014920 <LTC_make_voltages+0xa0>
			if(LTC_data[18 * cellstack + k] == 0) {
 80148a4:	88fa      	ldrh	r2, [r7, #6]
 80148a6:	4613      	mov	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	4413      	add	r3, r2
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	461a      	mov	r2, r3
 80148b0:	88bb      	ldrh	r3, [r7, #4]
 80148b2:	4413      	add	r3, r2
 80148b4:	4a24      	ldr	r2, [pc, #144]	; (8014948 <LTC_make_voltages+0xc8>)
 80148b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d101      	bne.n	80148c2 <LTC_make_voltages+0x42>
				/* The voltage reference is not on */
				return 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	e039      	b.n	8014936 <LTC_make_voltages+0xb6>
			}
			if(LTC_data[18 * cellstack + k] == 0xffff) {
 80148c2:	88fa      	ldrh	r2, [r7, #6]
 80148c4:	4613      	mov	r3, r2
 80148c6:	00db      	lsls	r3, r3, #3
 80148c8:	4413      	add	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	461a      	mov	r2, r3
 80148ce:	88bb      	ldrh	r3, [r7, #4]
 80148d0:	4413      	add	r3, r2
 80148d2:	4a1d      	ldr	r2, [pc, #116]	; (8014948 <LTC_make_voltages+0xc8>)
 80148d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148dc:	4293      	cmp	r3, r2
 80148de:	d101      	bne.n	80148e4 <LTC_make_voltages+0x64>
				/* The data is corrupted */
				return 0;
 80148e0:	2300      	movs	r3, #0
 80148e2:	e028      	b.n	8014936 <LTC_make_voltages+0xb6>
			}

			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 80148e4:	88fa      	ldrh	r2, [r7, #6]
 80148e6:	4613      	mov	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	4413      	add	r3, r2
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	461a      	mov	r2, r3
 80148f0:	88bb      	ldrh	r3, [r7, #4]
 80148f2:	4413      	add	r3, r2
 80148f4:	4a14      	ldr	r2, [pc, #80]	; (8014948 <LTC_make_voltages+0xc8>)
 80148f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7eb fe04 	bl	8000508 <__aeabi_i2d>
 8014900:	887c      	ldrh	r4, [r7, #2]
 8014902:	a30f      	add	r3, pc, #60	; (adr r3, 8014940 <LTC_make_voltages+0xc0>)
 8014904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014908:	f7eb fe68 	bl	80005dc <__aeabi_dmul>
 801490c:	4602      	mov	r2, r0
 801490e:	460b      	mov	r3, r1
 8014910:	480e      	ldr	r0, [pc, #56]	; (801494c <LTC_make_voltages+0xcc>)
 8014912:	00e1      	lsls	r1, r4, #3
 8014914:	4401      	add	r1, r0
 8014916:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 801491a:	88bb      	ldrh	r3, [r7, #4]
 801491c:	3301      	adds	r3, #1
 801491e:	80bb      	strh	r3, [r7, #4]
 8014920:	88ba      	ldrh	r2, [r7, #4]
 8014922:	883b      	ldrh	r3, [r7, #0]
 8014924:	429a      	cmp	r2, r3
 8014926:	d3bd      	bcc.n	80148a4 <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014928:	88fb      	ldrh	r3, [r7, #6]
 801492a:	3301      	adds	r3, #1
 801492c:	80fb      	strh	r3, [r7, #6]
 801492e:	88fb      	ldrh	r3, [r7, #6]
 8014930:	2b0b      	cmp	r3, #11
 8014932:	d9ad      	bls.n	8014890 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 8014934:	2301      	movs	r3, #1
}
 8014936:	4618      	mov	r0, r3
 8014938:	370c      	adds	r7, #12
 801493a:	46bd      	mov	sp, r7
 801493c:	bd90      	pop	{r4, r7, pc}
 801493e:	bf00      	nop
 8014940:	eb1c432d 	.word	0xeb1c432d
 8014944:	3f1a36e2 	.word	0x3f1a36e2
 8014948:	2001bb58 	.word	0x2001bb58
 801494c:	2001b768 	.word	0x2001b768

08014950 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8014950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014954:	b08d      	sub	sp, #52	; 0x34
 8014956:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;
	double beta = 3500;
 8014958:	a35f      	add	r3, pc, #380	; (adr r3, 8014ad8 <LTC_make_temperatures+0x188>)
 801495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 8014962:	a35f      	add	r3, pc, #380	; (adr r3, 8014ae0 <LTC_make_temperatures+0x190>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 801496c:	6a38      	ldr	r0, [r7, #32]
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8014974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014978:	f7eb ff5a 	bl	8000830 <__aeabi_ddiv>
 801497c:	4602      	mov	r2, r0
 801497e:	460b      	mov	r3, r1
 8014980:	ec43 2b17 	vmov	d7, r2, r3
 8014984:	eeb0 0a47 	vmov.f32	s0, s14
 8014988:	eef0 0a67 	vmov.f32	s1, s15
 801498c:	f01a f8f0 	bl	802eb70 <exp>
 8014990:	ec51 0b10 	vmov	r0, r1, d0
 8014994:	a354      	add	r3, pc, #336	; (adr r3, 8014ae8 <LTC_make_temperatures+0x198>)
 8014996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499a:	f7eb fe1f 	bl	80005dc <__aeabi_dmul>
 801499e:	4602      	mov	r2, r0
 80149a0:	460b      	mov	r3, r1
 80149a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 80149a6:	a350      	add	r3, pc, #320	; (adr r3, 8014ae8 <LTC_make_temperatures+0x198>)
 80149a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 80149b0:	2300      	movs	r3, #0
 80149b2:	80fb      	strh	r3, [r7, #6]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80149b4:	2300      	movs	r3, #0
 80149b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80149b8:	e07b      	b.n	8014ab2 <LTC_make_temperatures+0x162>
		K = 5;
 80149ba:	2305      	movs	r3, #5
 80149bc:	80bb      	strh	r3, [r7, #4]

		for (k = 0; k < K; k++) {
 80149be:	2300      	movs	r3, #0
 80149c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80149c2:	e06f      	b.n	8014aa4 <LTC_make_temperatures+0x154>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80149c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80149c6:	4613      	mov	r3, r2
 80149c8:	00db      	lsls	r3, r3, #3
 80149ca:	4413      	add	r3, r2
 80149cc:	005b      	lsls	r3, r3, #1
 80149ce:	f103 020c 	add.w	r2, r3, #12
 80149d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149d4:	4413      	add	r3, r2
 80149d6:	4a3e      	ldr	r2, [pc, #248]	; (8014ad0 <LTC_make_temperatures+0x180>)
 80149d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7eb fd93 	bl	8000508 <__aeabi_i2d>
 80149e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80149e6:	f7eb fdf9 	bl	80005dc <__aeabi_dmul>
 80149ea:	4602      	mov	r2, r0
 80149ec:	460b      	mov	r3, r1
 80149ee:	ec43 2b17 	vmov	d7, r2, r3
 80149f2:	eeb0 0a47 	vmov.f32	s0, s14
 80149f6:	eef0 0a67 	vmov.f32	s1, s15
 80149fa:	f01a f909 	bl	802ec10 <log>
 80149fe:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8014a02:	693c      	ldr	r4, [r7, #16]
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 8014a0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	4413      	add	r3, r2
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	f103 020c 	add.w	r2, r3, #12
 8014a18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a1a:	4413      	add	r3, r2
 8014a1c:	4a2c      	ldr	r2, [pc, #176]	; (8014ad0 <LTC_make_temperatures+0x180>)
 8014a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a22:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8014a24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a26:	4613      	mov	r3, r2
 8014a28:	00db      	lsls	r3, r3, #3
 8014a2a:	4413      	add	r3, r2
 8014a2c:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8014a2e:	f103 020c 	add.w	r2, r3, #12
 8014a32:	88bb      	ldrh	r3, [r7, #4]
 8014a34:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8014a36:	4a26      	ldr	r2, [pc, #152]	; (8014ad0 <LTC_make_temperatures+0x180>)
 8014a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a3c:	1acb      	subs	r3, r1, r3
							- log(
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7eb fd62 	bl	8000508 <__aeabi_i2d>
 8014a44:	4602      	mov	r2, r0
 8014a46:	460b      	mov	r3, r1
 8014a48:	4620      	mov	r0, r4
 8014a4a:	4629      	mov	r1, r5
 8014a4c:	f7eb fdc6 	bl	80005dc <__aeabi_dmul>
 8014a50:	4602      	mov	r2, r0
 8014a52:	460b      	mov	r3, r1
 8014a54:	ec43 2b17 	vmov	d7, r2, r3
 8014a58:	eeb0 0a47 	vmov.f32	s0, s14
 8014a5c:	eef0 0a67 	vmov.f32	s1, s15
 8014a60:	f01a f8d6 	bl	802ec10 <log>
 8014a64:	ec53 2b10 	vmov	r2, r3, d0
 8014a68:	4640      	mov	r0, r8
 8014a6a:	4649      	mov	r1, r9
 8014a6c:	f7eb fbfe 	bl	800026c <__aeabi_dsub>
 8014a70:	4602      	mov	r2, r0
 8014a72:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8014a74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014a78:	f7eb feda 	bl	8000830 <__aeabi_ddiv>
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	460b      	mov	r3, r1
 8014a80:	4610      	mov	r0, r2
 8014a82:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 8014a84:	88fe      	ldrh	r6, [r7, #6]
					- 273.15;
 8014a86:	a310      	add	r3, pc, #64	; (adr r3, 8014ac8 <LTC_make_temperatures+0x178>)
 8014a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8c:	f7eb fbee 	bl	800026c <__aeabi_dsub>
 8014a90:	4602      	mov	r2, r0
 8014a92:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8014a94:	480f      	ldr	r0, [pc, #60]	; (8014ad4 <LTC_make_temperatures+0x184>)
 8014a96:	00f1      	lsls	r1, r6, #3
 8014a98:	4401      	add	r1, r0
 8014a9a:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8014a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014aa4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8014aa6:	88bb      	ldrh	r3, [r7, #4]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d38b      	bcc.n	80149c4 <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8014aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014aae:	3301      	adds	r3, #1
 8014ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ab4:	2b0b      	cmp	r3, #11
 8014ab6:	d980      	bls.n	80149ba <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 8014ab8:	2301      	movs	r3, #1
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	3734      	adds	r7, #52	; 0x34
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ac4:	f3af 8000 	nop.w
 8014ac8:	66666666 	.word	0x66666666
 8014acc:	40711266 	.word	0x40711266
 8014ad0:	2001bb58 	.word	0x2001bb58
 8014ad4:	2001bd08 	.word	0x2001bd08
 8014ad8:	00000000 	.word	0x00000000
 8014adc:	40ab5800 	.word	0x40ab5800
 8014ae0:	66666666 	.word	0x66666666
 8014ae4:	4072a266 	.word	0x4072a266
 8014ae8:	00000000 	.word	0x00000000
 8014aec:	40c38800 	.word	0x40c38800

08014af0 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8014af0:	b480      	push	{r7}
 8014af2:	b087      	sub	sp, #28
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	683a      	ldr	r2, [r7, #0]
 8014b00:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	ed93 7a01 	vldr	s14, [r3, #4]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8014b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f103 0218 	add.w	r2, r3, #24
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	617a      	str	r2, [r7, #20]
 8014b24:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	ed93 7a00 	vldr	s14, [r3]
 8014b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014b30:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	edd3 6a01 	vldr	s13, [r3, #4]
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8014b44:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	edd3 7a04 	vldr	s15, [r3, #16]
 8014b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8014b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b66:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	68da      	ldr	r2, [r3, #12]
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	693a      	ldr	r2, [r7, #16]
 8014b76:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	ed93 7a02 	vldr	s14, [r3, #8]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8014b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b98:	d503      	bpl.n	8014ba2 <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	695a      	ldr	r2, [r3, #20]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	ed93 7a04 	vldr	s14, [r3, #16]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	edd3 7a02 	vldr	s15, [r3, #8]
 8014bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb6:	d503      	bpl.n	8014bc0 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	691a      	ldr	r2, [r3, #16]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8014bc0:	2301      	movs	r3, #1
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	371c      	adds	r7, #28
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr

08014bce <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8014bce:	b580      	push	{r7, lr}
 8014bd0:	b088      	sub	sp, #32
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	61f8      	str	r0, [r7, #28]
 8014bd6:	ed87 0a06 	vstr	s0, [r7, #24]
 8014bda:	edc7 0a05 	vstr	s1, [r7, #20]
 8014bde:	ed87 1a04 	vstr	s2, [r7, #16]
 8014be2:	edc7 1a03 	vstr	s3, [r7, #12]
 8014be6:	ed87 2a02 	vstr	s4, [r7, #8]
 8014bea:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8014bee:	ed97 7a01 	vldr	s14, [r7, #4]
 8014bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8014bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfe:	d501      	bpl.n	8014c04 <PID_initialize+0x36>
		return 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e024      	b.n	8014c4e <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	f04f 0200 	mov.w	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	f04f 0200 	mov.w	r2, #0
 8014c12:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	f04f 0200 	mov.w	r2, #0
 8014c1a:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	69ba      	ldr	r2, [r7, #24]
 8014c20:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8014c22:	69fb      	ldr	r3, [r7, #28]
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8014c28:	69fb      	ldr	r3, [r7, #28]
 8014c2a:	68ba      	ldr	r2, [r7, #8]
 8014c2c:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	697a      	ldr	r2, [r7, #20]
 8014c32:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8014c34:	69fb      	ldr	r3, [r7, #28]
 8014c36:	693a      	ldr	r2, [r7, #16]
 8014c38:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8014c40:	69fb      	ldr	r3, [r7, #28]
 8014c42:	3318      	adds	r3, #24
 8014c44:	2101      	movs	r1, #1
 8014c46:	4618      	mov	r0, r3
 8014c48:	f019 fe0c 	bl	802e864 <arm_pid_init_f32>

	return 1;
 8014c4c:	2301      	movs	r3, #1
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3720      	adds	r7, #32
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
	...

08014c58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8014c5c:	4803      	ldr	r0, [pc, #12]	; (8014c6c <_cbSendSystemDesc+0x14>)
 8014c5e:	f019 fb6d 	bl	802e33c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8014c62:	4803      	ldr	r0, [pc, #12]	; (8014c70 <_cbSendSystemDesc+0x18>)
 8014c64:	f019 fb6a 	bl	802e33c <SEGGER_SYSVIEW_SendSysDesc>
}
 8014c68:	bf00      	nop
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	0802f520 	.word	0x0802f520
 8014c70:	0802f54c 	.word	0x0802f54c

08014c74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8014c74:	b580      	push	{r7, lr}
 8014c76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8014c78:	4b06      	ldr	r3, [pc, #24]	; (8014c94 <SEGGER_SYSVIEW_Conf+0x20>)
 8014c7a:	6818      	ldr	r0, [r3, #0]
 8014c7c:	4b05      	ldr	r3, [pc, #20]	; (8014c94 <SEGGER_SYSVIEW_Conf+0x20>)
 8014c7e:	6819      	ldr	r1, [r3, #0]
 8014c80:	4b05      	ldr	r3, [pc, #20]	; (8014c98 <SEGGER_SYSVIEW_Conf+0x24>)
 8014c82:	4a06      	ldr	r2, [pc, #24]	; (8014c9c <SEGGER_SYSVIEW_Conf+0x28>)
 8014c84:	f018 fed8 	bl	802da38 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8014c88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014c8c:	f018 ff18 	bl	802dac0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8014c90:	bf00      	nop
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	20000084 	.word	0x20000084
 8014c98:	08014c59 	.word	0x08014c59
 8014c9c:	0802fa8c 	.word	0x0802fa8c

08014ca0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8014ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca2:	b085      	sub	sp, #20
 8014ca4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	607b      	str	r3, [r7, #4]
 8014caa:	e048      	b.n	8014d3e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8014cac:	4929      	ldr	r1, [pc, #164]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	4413      	add	r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	440b      	add	r3, r1
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f017 f943 	bl	802bf48 <uxTaskGetStackHighWaterMark>
 8014cc2:	4601      	mov	r1, r0
 8014cc4:	4823      	ldr	r0, [pc, #140]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	4413      	add	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4403      	add	r3, r0
 8014cd2:	3310      	adds	r3, #16
 8014cd4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8014cd6:	491f      	ldr	r1, [pc, #124]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	4413      	add	r3, r2
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	440b      	add	r3, r1
 8014ce4:	6818      	ldr	r0, [r3, #0]
 8014ce6:	491b      	ldr	r1, [pc, #108]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	4613      	mov	r3, r2
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	4413      	add	r3, r2
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	440b      	add	r3, r1
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	6819      	ldr	r1, [r3, #0]
 8014cf8:	4c16      	ldr	r4, [pc, #88]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	4413      	add	r3, r2
 8014d02:	009b      	lsls	r3, r3, #2
 8014d04:	4423      	add	r3, r4
 8014d06:	3308      	adds	r3, #8
 8014d08:	681c      	ldr	r4, [r3, #0]
 8014d0a:	4d12      	ldr	r5, [pc, #72]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	4413      	add	r3, r2
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	442b      	add	r3, r5
 8014d18:	330c      	adds	r3, #12
 8014d1a:	681d      	ldr	r5, [r3, #0]
 8014d1c:	4e0d      	ldr	r6, [pc, #52]	; (8014d54 <_cbSendTaskList+0xb4>)
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	4613      	mov	r3, r2
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	4413      	add	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4433      	add	r3, r6
 8014d2a:	3310      	adds	r3, #16
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	462b      	mov	r3, r5
 8014d32:	4622      	mov	r2, r4
 8014d34:	f000 f8b6 	bl	8014ea4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	607b      	str	r3, [r7, #4]
 8014d3e:	4b06      	ldr	r3, [pc, #24]	; (8014d58 <_cbSendTaskList+0xb8>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d3b1      	bcc.n	8014cac <_cbSendTaskList+0xc>
  }
}
 8014d48:	bf00      	nop
 8014d4a:	bf00      	nop
 8014d4c:	370c      	adds	r7, #12
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d52:	bf00      	nop
 8014d54:	200017d8 	.word	0x200017d8
 8014d58:	20001918 	.word	0x20001918

08014d5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8014d5c:	b5b0      	push	{r4, r5, r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8014d62:	f016 fdc9 	bl	802b8f8 <xTaskGetTickCountFromISR>
 8014d66:	4603      	mov	r3, r0
 8014d68:	461a      	mov	r2, r3
 8014d6a:	f04f 0300 	mov.w	r3, #0
 8014d6e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8014d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014d76:	4602      	mov	r2, r0
 8014d78:	460b      	mov	r3, r1
 8014d7a:	f04f 0400 	mov.w	r4, #0
 8014d7e:	f04f 0500 	mov.w	r5, #0
 8014d82:	015d      	lsls	r5, r3, #5
 8014d84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8014d88:	0154      	lsls	r4, r2, #5
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	462b      	mov	r3, r5
 8014d8e:	1a12      	subs	r2, r2, r0
 8014d90:	eb63 0301 	sbc.w	r3, r3, r1
 8014d94:	f04f 0400 	mov.w	r4, #0
 8014d98:	f04f 0500 	mov.w	r5, #0
 8014d9c:	009d      	lsls	r5, r3, #2
 8014d9e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8014da2:	0094      	lsls	r4, r2, #2
 8014da4:	4622      	mov	r2, r4
 8014da6:	462b      	mov	r3, r5
 8014da8:	1812      	adds	r2, r2, r0
 8014daa:	eb41 0303 	adc.w	r3, r1, r3
 8014dae:	f04f 0000 	mov.w	r0, #0
 8014db2:	f04f 0100 	mov.w	r1, #0
 8014db6:	00d9      	lsls	r1, r3, #3
 8014db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014dbc:	00d0      	lsls	r0, r2, #3
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8014dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8014dca:	4610      	mov	r0, r2
 8014dcc:	4619      	mov	r1, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bdb0      	pop	{r4, r5, r7, pc}

08014dd4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b086      	sub	sp, #24
 8014dd8:	af02      	add	r7, sp, #8
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	607a      	str	r2, [r7, #4]
 8014de0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8014de2:	2205      	movs	r2, #5
 8014de4:	492b      	ldr	r1, [pc, #172]	; (8014e94 <SYSVIEW_AddTask+0xc0>)
 8014de6:	68b8      	ldr	r0, [r7, #8]
 8014de8:	f019 fd86 	bl	802e8f8 <memcmp>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d04b      	beq.n	8014e8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8014df2:	4b29      	ldr	r3, [pc, #164]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	2b0f      	cmp	r3, #15
 8014df8:	d903      	bls.n	8014e02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8014dfa:	4828      	ldr	r0, [pc, #160]	; (8014e9c <SYSVIEW_AddTask+0xc8>)
 8014dfc:	f019 fcd6 	bl	802e7ac <SEGGER_SYSVIEW_Warn>
    return;
 8014e00:	e044      	b.n	8014e8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8014e02:	4b25      	ldr	r3, [pc, #148]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	4926      	ldr	r1, [pc, #152]	; (8014ea0 <SYSVIEW_AddTask+0xcc>)
 8014e08:	4613      	mov	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	4413      	add	r3, r2
 8014e0e:	009b      	lsls	r3, r3, #2
 8014e10:	440b      	add	r3, r1
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8014e16:	4b20      	ldr	r3, [pc, #128]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	4921      	ldr	r1, [pc, #132]	; (8014ea0 <SYSVIEW_AddTask+0xcc>)
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	4413      	add	r3, r2
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	440b      	add	r3, r1
 8014e26:	3304      	adds	r3, #4
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8014e2c:	4b1a      	ldr	r3, [pc, #104]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	491b      	ldr	r1, [pc, #108]	; (8014ea0 <SYSVIEW_AddTask+0xcc>)
 8014e32:	4613      	mov	r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4413      	add	r3, r2
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	440b      	add	r3, r1
 8014e3c:	3308      	adds	r3, #8
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8014e42:	4b15      	ldr	r3, [pc, #84]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	4916      	ldr	r1, [pc, #88]	; (8014ea0 <SYSVIEW_AddTask+0xcc>)
 8014e48:	4613      	mov	r3, r2
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	4413      	add	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	440b      	add	r3, r1
 8014e52:	330c      	adds	r3, #12
 8014e54:	683a      	ldr	r2, [r7, #0]
 8014e56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8014e58:	4b0f      	ldr	r3, [pc, #60]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	4910      	ldr	r1, [pc, #64]	; (8014ea0 <SYSVIEW_AddTask+0xcc>)
 8014e5e:	4613      	mov	r3, r2
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	4413      	add	r3, r2
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	440b      	add	r3, r1
 8014e68:	3310      	adds	r3, #16
 8014e6a:	69ba      	ldr	r2, [r7, #24]
 8014e6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8014e6e:	4b0a      	ldr	r3, [pc, #40]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	3301      	adds	r3, #1
 8014e74:	4a08      	ldr	r2, [pc, #32]	; (8014e98 <SYSVIEW_AddTask+0xc4>)
 8014e76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	68b9      	ldr	r1, [r7, #8]
 8014e82:	68f8      	ldr	r0, [r7, #12]
 8014e84:	f000 f80e 	bl	8014ea4 <SYSVIEW_SendTaskInfo>
 8014e88:	e000      	b.n	8014e8c <SYSVIEW_AddTask+0xb8>
    return;
 8014e8a:	bf00      	nop

}
 8014e8c:	3710      	adds	r7, #16
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	0802f55c 	.word	0x0802f55c
 8014e98:	20001918 	.word	0x20001918
 8014e9c:	0802f564 	.word	0x0802f564
 8014ea0:	200017d8 	.word	0x200017d8

08014ea4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b08a      	sub	sp, #40	; 0x28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
 8014eb0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8014eb2:	f107 0314 	add.w	r3, r7, #20
 8014eb6:	2214      	movs	r2, #20
 8014eb8:	2100      	movs	r1, #0
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f019 fd38 	bl	802e930 <memset>
  TaskInfo.TaskID     = TaskID;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8014ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8014ed4:	f107 0314 	add.w	r3, r7, #20
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f019 f937 	bl	802e14c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8014ede:	bf00      	nop
 8014ee0:	3728      	adds	r7, #40	; 0x28
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
	...

08014ee8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b084      	sub	sp, #16
 8014eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8014eee:	463b      	mov	r3, r7
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	605a      	str	r2, [r3, #4]
 8014ef6:	609a      	str	r2, [r3, #8]
 8014ef8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8014efa:	4b37      	ldr	r3, [pc, #220]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014efc:	4a37      	ldr	r2, [pc, #220]	; (8014fdc <MX_ADC1_Init+0xf4>)
 8014efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8014f00:	4b35      	ldr	r3, [pc, #212]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014f08:	4b33      	ldr	r3, [pc, #204]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8014f0e:	4b32      	ldr	r3, [pc, #200]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f10:	2201      	movs	r2, #1
 8014f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8014f14:	4b30      	ldr	r3, [pc, #192]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014f1a:	4b2f      	ldr	r3, [pc, #188]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8014f22:	4b2d      	ldr	r3, [pc, #180]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8014f2a:	4b2b      	ldr	r3, [pc, #172]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014f30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014f32:	4b29      	ldr	r3, [pc, #164]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8014f38:	4b27      	ldr	r3, [pc, #156]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f3a:	2204      	movs	r2, #4
 8014f3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8014f3e:	4b26      	ldr	r3, [pc, #152]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f40:	2200      	movs	r2, #0
 8014f42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014f46:	4b24      	ldr	r3, [pc, #144]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f48:	2201      	movs	r2, #1
 8014f4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014f4c:	4822      	ldr	r0, [pc, #136]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f4e:	f00f fd35 	bl	80249bc <HAL_ADC_Init>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d001      	beq.n	8014f5c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8014f58:	f002 fc46 	bl	80177e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8014f60:	2301      	movs	r3, #1
 8014f62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014f64:	2302      	movs	r3, #2
 8014f66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014f68:	463b      	mov	r3, r7
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	481a      	ldr	r0, [pc, #104]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f6e:	f00f ffd7 	bl	8024f20 <HAL_ADC_ConfigChannel>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d001      	beq.n	8014f7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8014f78:	f002 fc36 	bl	80177e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8014f80:	2302      	movs	r3, #2
 8014f82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014f84:	463b      	mov	r3, r7
 8014f86:	4619      	mov	r1, r3
 8014f88:	4813      	ldr	r0, [pc, #76]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014f8a:	f00f ffc9 	bl	8024f20 <HAL_ADC_ConfigChannel>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d001      	beq.n	8014f98 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8014f94:	f002 fc28 	bl	80177e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8014f98:	2303      	movs	r3, #3
 8014f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014fa0:	463b      	mov	r3, r7
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	480c      	ldr	r0, [pc, #48]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014fa6:	f00f ffbb 	bl	8024f20 <HAL_ADC_ConfigChannel>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8014fb0:	f002 fc1a 	bl	80177e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8014fb4:	2304      	movs	r3, #4
 8014fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8014fb8:	2304      	movs	r3, #4
 8014fba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014fbc:	463b      	mov	r3, r7
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	4805      	ldr	r0, [pc, #20]	; (8014fd8 <MX_ADC1_Init+0xf0>)
 8014fc2:	f00f ffad 	bl	8024f20 <HAL_ADC_ConfigChannel>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d001      	beq.n	8014fd0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8014fcc:	f002 fc0c 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8014fd0:	bf00      	nop
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	2001bee8 	.word	0x2001bee8
 8014fdc:	40012000 	.word	0x40012000

08014fe0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b08a      	sub	sp, #40	; 0x28
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014fe8:	f107 0314 	add.w	r3, r7, #20
 8014fec:	2200      	movs	r2, #0
 8014fee:	601a      	str	r2, [r3, #0]
 8014ff0:	605a      	str	r2, [r3, #4]
 8014ff2:	609a      	str	r2, [r3, #8]
 8014ff4:	60da      	str	r2, [r3, #12]
 8014ff6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a33      	ldr	r2, [pc, #204]	; (80150cc <HAL_ADC_MspInit+0xec>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d15f      	bne.n	80150c2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8015002:	2300      	movs	r3, #0
 8015004:	613b      	str	r3, [r7, #16]
 8015006:	4b32      	ldr	r3, [pc, #200]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 8015008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801500a:	4a31      	ldr	r2, [pc, #196]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 801500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015010:	6453      	str	r3, [r2, #68]	; 0x44
 8015012:	4b2f      	ldr	r3, [pc, #188]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 8015014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801501a:	613b      	str	r3, [r7, #16]
 801501c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801501e:	2300      	movs	r3, #0
 8015020:	60fb      	str	r3, [r7, #12]
 8015022:	4b2b      	ldr	r3, [pc, #172]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 8015024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015026:	4a2a      	ldr	r2, [pc, #168]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 8015028:	f043 0301 	orr.w	r3, r3, #1
 801502c:	6313      	str	r3, [r2, #48]	; 0x30
 801502e:	4b28      	ldr	r3, [pc, #160]	; (80150d0 <HAL_ADC_MspInit+0xf0>)
 8015030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015032:	f003 0301 	and.w	r3, r3, #1
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 801503a:	231e      	movs	r3, #30
 801503c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801503e:	2303      	movs	r3, #3
 8015040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015042:	2300      	movs	r3, #0
 8015044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015046:	f107 0314 	add.w	r3, r7, #20
 801504a:	4619      	mov	r1, r3
 801504c:	4821      	ldr	r0, [pc, #132]	; (80150d4 <HAL_ADC_MspInit+0xf4>)
 801504e:	f011 fd33 	bl	8026ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8015052:	4b21      	ldr	r3, [pc, #132]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015054:	4a21      	ldr	r2, [pc, #132]	; (80150dc <HAL_ADC_MspInit+0xfc>)
 8015056:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8015058:	4b1f      	ldr	r3, [pc, #124]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 801505a:	2200      	movs	r2, #0
 801505c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801505e:	4b1e      	ldr	r3, [pc, #120]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015060:	2200      	movs	r2, #0
 8015062:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8015064:	4b1c      	ldr	r3, [pc, #112]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015066:	2200      	movs	r2, #0
 8015068:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801506a:	4b1b      	ldr	r3, [pc, #108]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 801506c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015070:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8015072:	4b19      	ldr	r3, [pc, #100]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015078:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801507a:	4b17      	ldr	r3, [pc, #92]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 801507c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015080:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8015082:	4b15      	ldr	r3, [pc, #84]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015084:	2200      	movs	r2, #0
 8015086:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8015088:	4b13      	ldr	r3, [pc, #76]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 801508a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801508e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015090:	4b11      	ldr	r3, [pc, #68]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015092:	2200      	movs	r2, #0
 8015094:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8015096:	4810      	ldr	r0, [pc, #64]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 8015098:	f011 f99e 	bl	80263d8 <HAL_DMA_Init>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d001      	beq.n	80150a6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80150a2:	f002 fba1 	bl	80177e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4a0b      	ldr	r2, [pc, #44]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 80150aa:	639a      	str	r2, [r3, #56]	; 0x38
 80150ac:	4a0a      	ldr	r2, [pc, #40]	; (80150d8 <HAL_ADC_MspInit+0xf8>)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80150b2:	2200      	movs	r2, #0
 80150b4:	2105      	movs	r1, #5
 80150b6:	2012      	movs	r0, #18
 80150b8:	f011 f964 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80150bc:	2012      	movs	r0, #18
 80150be:	f011 f97d 	bl	80263bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80150c2:	bf00      	nop
 80150c4:	3728      	adds	r7, #40	; 0x28
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	40012000 	.word	0x40012000
 80150d0:	40023800 	.word	0x40023800
 80150d4:	40020000 	.word	0x40020000
 80150d8:	2001bf30 	.word	0x2001bf30
 80150dc:	40026410 	.word	0x40026410

080150e0 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 80150e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80150e4:	b08e      	sub	sp, #56	; 0x38
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	60f8      	str	r0, [r7, #12]
 80150ea:	60b9      	str	r1, [r7, #8]
 80150ec:	4613      	mov	r3, r2
 80150ee:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 80150f0:	4bd3      	ldr	r3, [pc, #844]	; (8015440 <interpret_ADC_buffer+0x360>)
 80150f2:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 80150f4:	4bd3      	ldr	r3, [pc, #844]	; (8015444 <interpret_ADC_buffer+0x364>)
 80150f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 80150f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80150fc:	eeb1 7a67 	vneg.f32	s14, s15
 8015100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015104:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015108:	ee16 0a90 	vmov	r0, s13
 801510c:	f7eb fa0e 	bl	800052c <__aeabi_f2d>
 8015110:	4602      	mov	r2, r0
 8015112:	460b      	mov	r3, r1
 8015114:	ec43 2b10 	vmov	d0, r2, r3
 8015118:	f019 fd2a 	bl	802eb70 <exp>
 801511c:	ec51 0b10 	vmov	r0, r1, d0
 8015120:	a3c3      	add	r3, pc, #780	; (adr r3, 8015430 <interpret_ADC_buffer+0x350>)
 8015122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015126:	f7eb fa59 	bl	80005dc <__aeabi_dmul>
 801512a:	4602      	mov	r2, r0
 801512c:	460b      	mov	r3, r1
 801512e:	4610      	mov	r0, r2
 8015130:	4619      	mov	r1, r3
 8015132:	f7eb fd4b 	bl	8000bcc <__aeabi_d2f>
 8015136:	4603      	mov	r3, r0
 8015138:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 801513a:	4bc3      	ldr	r3, [pc, #780]	; (8015448 <interpret_ADC_buffer+0x368>)
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 801513e:	4bc3      	ldr	r3, [pc, #780]	; (801544c <interpret_ADC_buffer+0x36c>)
 8015140:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 8015142:	2300      	movs	r3, #0
 8015144:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015146:	e063      	b.n	8015210 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8015148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015150:	4413      	add	r3, r2
 8015152:	3b28      	subs	r3, #40	; 0x28
 8015154:	f04f 0200 	mov.w	r2, #0
 8015158:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 801515a:	2300      	movs	r3, #0
 801515c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801515e:	e020      	b.n	80151a2 <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8015160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015168:	4413      	add	r3, r2
 801516a:	3b28      	subs	r3, #40	; 0x28
 801516c:	ed93 7a00 	vldr	s14, [r3]
 8015170:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015172:	009a      	lsls	r2, r3, #2
 8015174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015176:	4413      	add	r3, r2
 8015178:	005b      	lsls	r3, r3, #1
 801517a:	68ba      	ldr	r2, [r7, #8]
 801517c:	4413      	add	r3, r2
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	ee07 3a90 	vmov	s15, r3
 8015184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801518a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801518e:	009b      	lsls	r3, r3, #2
 8015190:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015194:	4413      	add	r3, r2
 8015196:	3b28      	subs	r3, #40	; 0x28
 8015198:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 801519c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801519e:	3301      	adds	r3, #1
 80151a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80151a2:	79fb      	ldrb	r3, [r7, #7]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d3d9      	bcc.n	8015160 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 80151ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80151b4:	4413      	add	r3, r2
 80151b6:	3b28      	subs	r3, #40	; 0x28
 80151b8:	edd3 6a00 	vldr	s13, [r3]
 80151bc:	79fb      	ldrb	r3, [r7, #7]
 80151be:	ee07 3a90 	vmov	s15, r3
 80151c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80151c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80151d2:	4413      	add	r3, r2
 80151d4:	3b28      	subs	r3, #40	; 0x28
 80151d6:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 80151da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151dc:	009b      	lsls	r3, r3, #2
 80151de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80151e2:	4413      	add	r3, r2
 80151e4:	3b28      	subs	r3, #40	; 0x28
 80151e6:	edd3 7a00 	vldr	s15, [r3]
 80151ea:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80151ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80151f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f6:	d508      	bpl.n	801520a <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 80151f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015200:	4413      	add	r3, r2
 8015202:	3b28      	subs	r3, #40	; 0x28
 8015204:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015208:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 801520a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801520c:	3301      	adds	r3, #1
 801520e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015210:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015212:	2b03      	cmp	r3, #3
 8015214:	d998      	bls.n	8015148 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 8015216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015218:	f7eb f988 	bl	800052c <__aeabi_f2d>
 801521c:	4604      	mov	r4, r0
 801521e:	460d      	mov	r5, r1
 8015220:	ed97 7a04 	vldr	s14, [r7, #16]
 8015224:	edd7 6a08 	vldr	s13, [r7, #32]
 8015228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801522c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015230:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015234:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015238:	ee67 7a27 	vmul.f32	s15, s14, s15
 801523c:	ee17 0a90 	vmov	r0, s15
 8015240:	f7eb f974 	bl	800052c <__aeabi_f2d>
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	ec43 2b10 	vmov	d0, r2, r3
 801524c:	f019 fce0 	bl	802ec10 <log>
 8015250:	ec59 8b10 	vmov	r8, r9, d0
 8015254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015256:	f7eb f969 	bl	800052c <__aeabi_f2d>
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	ec43 2b10 	vmov	d0, r2, r3
 8015262:	f019 fcd5 	bl	802ec10 <log>
 8015266:	ec53 2b10 	vmov	r2, r3, d0
 801526a:	4640      	mov	r0, r8
 801526c:	4649      	mov	r1, r9
 801526e:	f7ea fffd 	bl	800026c <__aeabi_dsub>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4620      	mov	r0, r4
 8015278:	4629      	mov	r1, r5
 801527a:	f7eb fad9 	bl	8000830 <__aeabi_ddiv>
 801527e:	4602      	mov	r2, r0
 8015280:	460b      	mov	r3, r1
 8015282:	4610      	mov	r0, r2
 8015284:	4619      	mov	r1, r3
			- 273.15;
 8015286:	a36c      	add	r3, pc, #432	; (adr r3, 8015438 <interpret_ADC_buffer+0x358>)
 8015288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528c:	f7ea ffee 	bl	800026c <__aeabi_dsub>
 8015290:	4602      	mov	r2, r0
 8015292:	460b      	mov	r3, r1
	temperatures->precharge_resistor = beta
 8015294:	68f9      	ldr	r1, [r7, #12]
 8015296:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 801529a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801529c:	f7eb f946 	bl	800052c <__aeabi_f2d>
 80152a0:	4604      	mov	r4, r0
 80152a2:	460d      	mov	r5, r1
 80152a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80152a8:	edd7 6a08 	vldr	s13, [r7, #32]
 80152ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80152b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80152b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80152bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152c0:	ee17 0a90 	vmov	r0, s15
 80152c4:	f7eb f932 	bl	800052c <__aeabi_f2d>
 80152c8:	4602      	mov	r2, r0
 80152ca:	460b      	mov	r3, r1
 80152cc:	ec43 2b10 	vmov	d0, r2, r3
 80152d0:	f019 fc9e 	bl	802ec10 <log>
 80152d4:	ec59 8b10 	vmov	r8, r9, d0
 80152d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152da:	f7eb f927 	bl	800052c <__aeabi_f2d>
 80152de:	4602      	mov	r2, r0
 80152e0:	460b      	mov	r3, r1
 80152e2:	ec43 2b10 	vmov	d0, r2, r3
 80152e6:	f019 fc93 	bl	802ec10 <log>
 80152ea:	ec53 2b10 	vmov	r2, r3, d0
 80152ee:	4640      	mov	r0, r8
 80152f0:	4649      	mov	r1, r9
 80152f2:	f7ea ffbb 	bl	800026c <__aeabi_dsub>
 80152f6:	4602      	mov	r2, r0
 80152f8:	460b      	mov	r3, r1
 80152fa:	4620      	mov	r0, r4
 80152fc:	4629      	mov	r1, r5
 80152fe:	f7eb fa97 	bl	8000830 <__aeabi_ddiv>
 8015302:	4602      	mov	r2, r0
 8015304:	460b      	mov	r3, r1
 8015306:	4610      	mov	r0, r2
 8015308:	4619      	mov	r1, r3
			- 273.15;
 801530a:	a34b      	add	r3, pc, #300	; (adr r3, 8015438 <interpret_ADC_buffer+0x358>)
 801530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015310:	f7ea ffac 	bl	800026c <__aeabi_dsub>
 8015314:	4602      	mov	r2, r0
 8015316:	460b      	mov	r3, r1
	temperatures->fuse = beta
 8015318:	68f9      	ldr	r1, [r7, #12]
 801531a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 801531e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015320:	f7eb f904 	bl	800052c <__aeabi_f2d>
 8015324:	4604      	mov	r4, r0
 8015326:	460d      	mov	r5, r1
 8015328:	ed97 7a06 	vldr	s14, [r7, #24]
 801532c:	edd7 6a08 	vldr	s13, [r7, #32]
 8015330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015338:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801533c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015344:	ee17 0a90 	vmov	r0, s15
 8015348:	f7eb f8f0 	bl	800052c <__aeabi_f2d>
 801534c:	4602      	mov	r2, r0
 801534e:	460b      	mov	r3, r1
 8015350:	ec43 2b10 	vmov	d0, r2, r3
 8015354:	f019 fc5c 	bl	802ec10 <log>
 8015358:	ec59 8b10 	vmov	r8, r9, d0
 801535c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801535e:	f7eb f8e5 	bl	800052c <__aeabi_f2d>
 8015362:	4602      	mov	r2, r0
 8015364:	460b      	mov	r3, r1
 8015366:	ec43 2b10 	vmov	d0, r2, r3
 801536a:	f019 fc51 	bl	802ec10 <log>
 801536e:	ec53 2b10 	vmov	r2, r3, d0
 8015372:	4640      	mov	r0, r8
 8015374:	4649      	mov	r1, r9
 8015376:	f7ea ff79 	bl	800026c <__aeabi_dsub>
 801537a:	4602      	mov	r2, r0
 801537c:	460b      	mov	r3, r1
 801537e:	4620      	mov	r0, r4
 8015380:	4629      	mov	r1, r5
 8015382:	f7eb fa55 	bl	8000830 <__aeabi_ddiv>
 8015386:	4602      	mov	r2, r0
 8015388:	460b      	mov	r3, r1
 801538a:	4610      	mov	r0, r2
 801538c:	4619      	mov	r1, r3
			- 273.15;
 801538e:	a32a      	add	r3, pc, #168	; (adr r3, 8015438 <interpret_ADC_buffer+0x358>)
 8015390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015394:	f7ea ff6a 	bl	800026c <__aeabi_dsub>
 8015398:	4602      	mov	r2, r0
 801539a:	460b      	mov	r3, r1
	temperatures->aux_1 = beta
 801539c:	68f9      	ldr	r1, [r7, #12]
 801539e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 80153a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153a4:	f7eb f8c2 	bl	800052c <__aeabi_f2d>
 80153a8:	4604      	mov	r4, r0
 80153aa:	460d      	mov	r5, r1
 80153ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80153b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80153b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80153b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80153bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80153c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80153c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153c8:	ee17 0a90 	vmov	r0, s15
 80153cc:	f7eb f8ae 	bl	800052c <__aeabi_f2d>
 80153d0:	4602      	mov	r2, r0
 80153d2:	460b      	mov	r3, r1
 80153d4:	ec43 2b10 	vmov	d0, r2, r3
 80153d8:	f019 fc1a 	bl	802ec10 <log>
 80153dc:	ec59 8b10 	vmov	r8, r9, d0
 80153e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153e2:	f7eb f8a3 	bl	800052c <__aeabi_f2d>
 80153e6:	4602      	mov	r2, r0
 80153e8:	460b      	mov	r3, r1
 80153ea:	ec43 2b10 	vmov	d0, r2, r3
 80153ee:	f019 fc0f 	bl	802ec10 <log>
 80153f2:	ec53 2b10 	vmov	r2, r3, d0
 80153f6:	4640      	mov	r0, r8
 80153f8:	4649      	mov	r1, r9
 80153fa:	f7ea ff37 	bl	800026c <__aeabi_dsub>
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	4620      	mov	r0, r4
 8015404:	4629      	mov	r1, r5
 8015406:	f7eb fa13 	bl	8000830 <__aeabi_ddiv>
 801540a:	4602      	mov	r2, r0
 801540c:	460b      	mov	r3, r1
 801540e:	4610      	mov	r0, r2
 8015410:	4619      	mov	r1, r3
			- 273.15;
 8015412:	a309      	add	r3, pc, #36	; (adr r3, 8015438 <interpret_ADC_buffer+0x358>)
 8015414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015418:	f7ea ff28 	bl	800026c <__aeabi_dsub>
 801541c:	4602      	mov	r2, r0
 801541e:	460b      	mov	r3, r1
	temperatures->aux_2 = beta
 8015420:	68f9      	ldr	r1, [r7, #12]
 8015422:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8015426:	bf00      	nop
 8015428:	3738      	adds	r7, #56	; 0x38
 801542a:	46bd      	mov	sp, r7
 801542c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015430:	00000000 	.word	0x00000000
 8015434:	40c38800 	.word	0x40c38800
 8015438:	66666666 	.word	0x66666666
 801543c:	40711266 	.word	0x40711266
 8015440:	455ac000 	.word	0x455ac000
 8015444:	43951333 	.word	0x43951333
 8015448:	461c4000 	.word	0x461c4000
 801544c:	457ff000 	.word	0x457ff000

08015450 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	2241      	movs	r2, #65	; 0x41
 801545e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f012 ffa7 	bl	80283b4 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 8015466:	4b03      	ldr	r3, [pc, #12]	; (8015474 <ADC_initialize+0x24>)
 8015468:	2201      	movs	r2, #1
 801546a:	801a      	strh	r2, [r3, #0]
}
 801546c:	bf00      	nop
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	20000000 	.word	0x20000000

08015478 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	460b      	mov	r3, r1
 8015482:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8015484:	4b08      	ldr	r3, [pc, #32]	; (80154a8 <ADC_step+0x30>)
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	2b01      	cmp	r3, #1
 801548a:	d108      	bne.n	801549e <ADC_step+0x26>
		ADC_FLAG = 0;
 801548c:	4b06      	ldr	r3, [pc, #24]	; (80154a8 <ADC_step+0x30>)
 801548e:	2200      	movs	r2, #0
 8015490:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8015492:	887b      	ldrh	r3, [r7, #2]
 8015494:	461a      	mov	r2, r3
 8015496:	6879      	ldr	r1, [r7, #4]
 8015498:	4804      	ldr	r0, [pc, #16]	; (80154ac <ADC_step+0x34>)
 801549a:	f00f fc13 	bl	8024cc4 <HAL_ADC_Start_DMA>
	}
}
 801549e:	bf00      	nop
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	bf00      	nop
 80154a8:	20000000 	.word	0x20000000
 80154ac:	2001bee8 	.word	0x2001bee8

080154b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80154b0:	b480      	push	{r7}
 80154b2:	b083      	sub	sp, #12
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 80154b8:	4b04      	ldr	r3, [pc, #16]	; (80154cc <HAL_ADC_ConvCpltCallback+0x1c>)
 80154ba:	2201      	movs	r2, #1
 80154bc:	801a      	strh	r2, [r3, #0]

}
 80154be:	bf00      	nop
 80154c0:	370c      	adds	r7, #12
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	20000000 	.word	0x20000000

080154d0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80154d4:	4b17      	ldr	r3, [pc, #92]	; (8015534 <MX_CAN1_Init+0x64>)
 80154d6:	4a18      	ldr	r2, [pc, #96]	; (8015538 <MX_CAN1_Init+0x68>)
 80154d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80154da:	4b16      	ldr	r3, [pc, #88]	; (8015534 <MX_CAN1_Init+0x64>)
 80154dc:	2202      	movs	r2, #2
 80154de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80154e0:	4b14      	ldr	r3, [pc, #80]	; (8015534 <MX_CAN1_Init+0x64>)
 80154e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80154e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80154e8:	4b12      	ldr	r3, [pc, #72]	; (8015534 <MX_CAN1_Init+0x64>)
 80154ea:	2200      	movs	r2, #0
 80154ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80154ee:	4b11      	ldr	r3, [pc, #68]	; (8015534 <MX_CAN1_Init+0x64>)
 80154f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80154f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80154f6:	4b0f      	ldr	r3, [pc, #60]	; (8015534 <MX_CAN1_Init+0x64>)
 80154f8:	2200      	movs	r2, #0
 80154fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80154fc:	4b0d      	ldr	r3, [pc, #52]	; (8015534 <MX_CAN1_Init+0x64>)
 80154fe:	2200      	movs	r2, #0
 8015500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8015502:	4b0c      	ldr	r3, [pc, #48]	; (8015534 <MX_CAN1_Init+0x64>)
 8015504:	2200      	movs	r2, #0
 8015506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8015508:	4b0a      	ldr	r3, [pc, #40]	; (8015534 <MX_CAN1_Init+0x64>)
 801550a:	2200      	movs	r2, #0
 801550c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 801550e:	4b09      	ldr	r3, [pc, #36]	; (8015534 <MX_CAN1_Init+0x64>)
 8015510:	2200      	movs	r2, #0
 8015512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8015514:	4b07      	ldr	r3, [pc, #28]	; (8015534 <MX_CAN1_Init+0x64>)
 8015516:	2200      	movs	r2, #0
 8015518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 801551a:	4b06      	ldr	r3, [pc, #24]	; (8015534 <MX_CAN1_Init+0x64>)
 801551c:	2200      	movs	r2, #0
 801551e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8015520:	4804      	ldr	r0, [pc, #16]	; (8015534 <MX_CAN1_Init+0x64>)
 8015522:	f00f ffa7 	bl	8025474 <HAL_CAN_Init>
 8015526:	4603      	mov	r3, r0
 8015528:	2b00      	cmp	r3, #0
 801552a:	d001      	beq.n	8015530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 801552c:	f002 f95c 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8015530:	bf00      	nop
 8015532:	bd80      	pop	{r7, pc}
 8015534:	2001bfb8 	.word	0x2001bfb8
 8015538:	40006400 	.word	0x40006400

0801553c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8015540:	4b17      	ldr	r3, [pc, #92]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015542:	4a18      	ldr	r2, [pc, #96]	; (80155a4 <MX_CAN2_Init+0x68>)
 8015544:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8015546:	4b16      	ldr	r3, [pc, #88]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015548:	2204      	movs	r2, #4
 801554a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 801554c:	4b14      	ldr	r3, [pc, #80]	; (80155a0 <MX_CAN2_Init+0x64>)
 801554e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015552:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8015554:	4b12      	ldr	r3, [pc, #72]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015556:	2200      	movs	r2, #0
 8015558:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 801555a:	4b11      	ldr	r3, [pc, #68]	; (80155a0 <MX_CAN2_Init+0x64>)
 801555c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8015560:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8015562:	4b0f      	ldr	r3, [pc, #60]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015564:	2200      	movs	r2, #0
 8015566:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8015568:	4b0d      	ldr	r3, [pc, #52]	; (80155a0 <MX_CAN2_Init+0x64>)
 801556a:	2200      	movs	r2, #0
 801556c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 801556e:	4b0c      	ldr	r3, [pc, #48]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015570:	2200      	movs	r2, #0
 8015572:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8015574:	4b0a      	ldr	r3, [pc, #40]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015576:	2200      	movs	r2, #0
 8015578:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 801557a:	4b09      	ldr	r3, [pc, #36]	; (80155a0 <MX_CAN2_Init+0x64>)
 801557c:	2200      	movs	r2, #0
 801557e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8015580:	4b07      	ldr	r3, [pc, #28]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015582:	2200      	movs	r2, #0
 8015584:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8015586:	4b06      	ldr	r3, [pc, #24]	; (80155a0 <MX_CAN2_Init+0x64>)
 8015588:	2200      	movs	r2, #0
 801558a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 801558c:	4804      	ldr	r0, [pc, #16]	; (80155a0 <MX_CAN2_Init+0x64>)
 801558e:	f00f ff71 	bl	8025474 <HAL_CAN_Init>
 8015592:	4603      	mov	r3, r0
 8015594:	2b00      	cmp	r3, #0
 8015596:	d001      	beq.n	801559c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8015598:	f002 f926 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 801559c:	bf00      	nop
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	2001bf90 	.word	0x2001bf90
 80155a4:	40006800 	.word	0x40006800

080155a8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08c      	sub	sp, #48	; 0x30
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155b0:	f107 031c 	add.w	r3, r7, #28
 80155b4:	2200      	movs	r2, #0
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	605a      	str	r2, [r3, #4]
 80155ba:	609a      	str	r2, [r3, #8]
 80155bc:	60da      	str	r2, [r3, #12]
 80155be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4a5b      	ldr	r2, [pc, #364]	; (8015734 <HAL_CAN_MspInit+0x18c>)
 80155c6:	4293      	cmp	r3, r2
 80155c8:	d14e      	bne.n	8015668 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80155ca:	4b5b      	ldr	r3, [pc, #364]	; (8015738 <HAL_CAN_MspInit+0x190>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3301      	adds	r3, #1
 80155d0:	4a59      	ldr	r2, [pc, #356]	; (8015738 <HAL_CAN_MspInit+0x190>)
 80155d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80155d4:	4b58      	ldr	r3, [pc, #352]	; (8015738 <HAL_CAN_MspInit+0x190>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d10d      	bne.n	80155f8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80155dc:	2300      	movs	r3, #0
 80155de:	61bb      	str	r3, [r7, #24]
 80155e0:	4b56      	ldr	r3, [pc, #344]	; (801573c <HAL_CAN_MspInit+0x194>)
 80155e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155e4:	4a55      	ldr	r2, [pc, #340]	; (801573c <HAL_CAN_MspInit+0x194>)
 80155e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80155ea:	6413      	str	r3, [r2, #64]	; 0x40
 80155ec:	4b53      	ldr	r3, [pc, #332]	; (801573c <HAL_CAN_MspInit+0x194>)
 80155ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80155f4:	61bb      	str	r3, [r7, #24]
 80155f6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80155f8:	2300      	movs	r3, #0
 80155fa:	617b      	str	r3, [r7, #20]
 80155fc:	4b4f      	ldr	r3, [pc, #316]	; (801573c <HAL_CAN_MspInit+0x194>)
 80155fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015600:	4a4e      	ldr	r2, [pc, #312]	; (801573c <HAL_CAN_MspInit+0x194>)
 8015602:	f043 0301 	orr.w	r3, r3, #1
 8015606:	6313      	str	r3, [r2, #48]	; 0x30
 8015608:	4b4c      	ldr	r3, [pc, #304]	; (801573c <HAL_CAN_MspInit+0x194>)
 801560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801560c:	f003 0301 	and.w	r3, r3, #1
 8015610:	617b      	str	r3, [r7, #20]
 8015612:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015614:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801561a:	2302      	movs	r3, #2
 801561c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801561e:	2300      	movs	r3, #0
 8015620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015622:	2303      	movs	r3, #3
 8015624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8015626:	2309      	movs	r3, #9
 8015628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801562a:	f107 031c 	add.w	r3, r7, #28
 801562e:	4619      	mov	r1, r3
 8015630:	4843      	ldr	r0, [pc, #268]	; (8015740 <HAL_CAN_MspInit+0x198>)
 8015632:	f011 fa41 	bl	8026ab8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8015636:	2200      	movs	r2, #0
 8015638:	2105      	movs	r1, #5
 801563a:	2013      	movs	r0, #19
 801563c:	f010 fea2 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8015640:	2013      	movs	r0, #19
 8015642:	f010 febb 	bl	80263bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8015646:	2200      	movs	r2, #0
 8015648:	2105      	movs	r1, #5
 801564a:	2014      	movs	r0, #20
 801564c:	f010 fe9a 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8015650:	2014      	movs	r0, #20
 8015652:	f010 feb3 	bl	80263bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8015656:	2200      	movs	r2, #0
 8015658:	2105      	movs	r1, #5
 801565a:	2015      	movs	r0, #21
 801565c:	f010 fe92 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8015660:	2015      	movs	r0, #21
 8015662:	f010 feab 	bl	80263bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8015666:	e060      	b.n	801572a <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4a35      	ldr	r2, [pc, #212]	; (8015744 <HAL_CAN_MspInit+0x19c>)
 801566e:	4293      	cmp	r3, r2
 8015670:	d15b      	bne.n	801572a <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8015672:	2300      	movs	r3, #0
 8015674:	613b      	str	r3, [r7, #16]
 8015676:	4b31      	ldr	r3, [pc, #196]	; (801573c <HAL_CAN_MspInit+0x194>)
 8015678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801567a:	4a30      	ldr	r2, [pc, #192]	; (801573c <HAL_CAN_MspInit+0x194>)
 801567c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015680:	6413      	str	r3, [r2, #64]	; 0x40
 8015682:	4b2e      	ldr	r3, [pc, #184]	; (801573c <HAL_CAN_MspInit+0x194>)
 8015684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801568a:	613b      	str	r3, [r7, #16]
 801568c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 801568e:	4b2a      	ldr	r3, [pc, #168]	; (8015738 <HAL_CAN_MspInit+0x190>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	3301      	adds	r3, #1
 8015694:	4a28      	ldr	r2, [pc, #160]	; (8015738 <HAL_CAN_MspInit+0x190>)
 8015696:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8015698:	4b27      	ldr	r3, [pc, #156]	; (8015738 <HAL_CAN_MspInit+0x190>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b01      	cmp	r3, #1
 801569e:	d10d      	bne.n	80156bc <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]
 80156a4:	4b25      	ldr	r3, [pc, #148]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156a8:	4a24      	ldr	r2, [pc, #144]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80156ae:	6413      	str	r3, [r2, #64]	; 0x40
 80156b0:	4b22      	ldr	r3, [pc, #136]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156b8:	60fb      	str	r3, [r7, #12]
 80156ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80156bc:	2300      	movs	r3, #0
 80156be:	60bb      	str	r3, [r7, #8]
 80156c0:	4b1e      	ldr	r3, [pc, #120]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156c4:	4a1d      	ldr	r2, [pc, #116]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156c6:	f043 0302 	orr.w	r3, r3, #2
 80156ca:	6313      	str	r3, [r2, #48]	; 0x30
 80156cc:	4b1b      	ldr	r3, [pc, #108]	; (801573c <HAL_CAN_MspInit+0x194>)
 80156ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156d0:	f003 0302 	and.w	r3, r3, #2
 80156d4:	60bb      	str	r3, [r7, #8]
 80156d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80156d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80156dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156de:	2302      	movs	r3, #2
 80156e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156e2:	2300      	movs	r3, #0
 80156e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156e6:	2303      	movs	r3, #3
 80156e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80156ea:	2309      	movs	r3, #9
 80156ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80156ee:	f107 031c 	add.w	r3, r7, #28
 80156f2:	4619      	mov	r1, r3
 80156f4:	4814      	ldr	r0, [pc, #80]	; (8015748 <HAL_CAN_MspInit+0x1a0>)
 80156f6:	f011 f9df 	bl	8026ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80156fa:	2200      	movs	r2, #0
 80156fc:	2105      	movs	r1, #5
 80156fe:	203f      	movs	r0, #63	; 0x3f
 8015700:	f010 fe40 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8015704:	203f      	movs	r0, #63	; 0x3f
 8015706:	f010 fe59 	bl	80263bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 801570a:	2200      	movs	r2, #0
 801570c:	2105      	movs	r1, #5
 801570e:	2040      	movs	r0, #64	; 0x40
 8015710:	f010 fe38 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8015714:	2040      	movs	r0, #64	; 0x40
 8015716:	f010 fe51 	bl	80263bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 801571a:	2200      	movs	r2, #0
 801571c:	2105      	movs	r1, #5
 801571e:	2041      	movs	r0, #65	; 0x41
 8015720:	f010 fe30 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8015724:	2041      	movs	r0, #65	; 0x41
 8015726:	f010 fe49 	bl	80263bc <HAL_NVIC_EnableIRQ>
}
 801572a:	bf00      	nop
 801572c:	3730      	adds	r7, #48	; 0x30
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	40006400 	.word	0x40006400
 8015738:	2000191c 	.word	0x2000191c
 801573c:	40023800 	.word	0x40023800
 8015740:	40020000 	.word	0x40020000
 8015744:	40006800 	.word	0x40006800
 8015748:	40020400 	.word	0x40020400

0801574c <can1_dbu_status_1_rx_callback>:
#include "programme_functions.h"
#include "programme_queues.h"
#include "canlib_data.h"
#include "canlib_callbacks.h"

void can1_dbu_status_1_rx_callback(dbu_status_1_t *dbu_status_1) {
 801574c:	b580      	push	{r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015754:	2300      	movs	r3, #0
 8015756:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_drive_queue,
 8015758:	4b10      	ldr	r3, [pc, #64]	; (801579c <can1_dbu_status_1_rx_callback+0x50>)
 801575a:	6818      	ldr	r0, [r3, #0]
 801575c:	6879      	ldr	r1, [r7, #4]
 801575e:	f107 020c 	add.w	r2, r7, #12
 8015762:	2302      	movs	r3, #2
 8015764:	f015 f8ce 	bl	802a904 <xQueueGenericSendFromISR>
			&dbu_status_1->activate_ts_button, &xHigherPriorityTaskWoken);
	xQueueOverwriteFromISR(start_balance_queue,
 8015768:	4b0d      	ldr	r3, [pc, #52]	; (80157a0 <can1_dbu_status_1_rx_callback+0x54>)
 801576a:	6818      	ldr	r0, [r3, #0]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f103 0110 	add.w	r1, r3, #16
 8015772:	f107 020c 	add.w	r2, r7, #12
 8015776:	2302      	movs	r3, #2
 8015778:	f015 f8c4 	bl	802a904 <xQueueGenericSendFromISR>
			&dbu_status_1->ready_to_drive_button, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d007      	beq.n	8015792 <can1_dbu_status_1_rx_callback+0x46>
 8015782:	4b08      	ldr	r3, [pc, #32]	; (80157a4 <can1_dbu_status_1_rx_callback+0x58>)
 8015784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	f3bf 8f4f 	dsb	sy
 801578e:	f3bf 8f6f 	isb	sy
}
 8015792:	bf00      	nop
 8015794:	3710      	adds	r7, #16
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	2001b708 	.word	0x2001b708
 80157a0:	2001b738 	.word	0x2001b738
 80157a4:	e000ed04 	.word	0xe000ed04

080157a8 <can2_ivt_msg_result_i_rx_callback>:

void can2_ivt_msg_result_i_rx_callback(ivt_msg_result_i_t *ivt_msg_result_i) {
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b084      	sub	sp, #16
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80157b0:	2300      	movs	r3, #0
 80157b2:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_current_queue, &ivt_msg_result_i->i_ts,
 80157b4:	4b0b      	ldr	r3, [pc, #44]	; (80157e4 <can2_ivt_msg_result_i_rx_callback+0x3c>)
 80157b6:	6818      	ldr	r0, [r3, #0]
 80157b8:	6879      	ldr	r1, [r7, #4]
 80157ba:	f107 020c 	add.w	r2, r7, #12
 80157be:	2302      	movs	r3, #2
 80157c0:	f015 f8a0 	bl	802a904 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d007      	beq.n	80157da <can2_ivt_msg_result_i_rx_callback+0x32>
 80157ca:	4b07      	ldr	r3, [pc, #28]	; (80157e8 <can2_ivt_msg_result_i_rx_callback+0x40>)
 80157cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	f3bf 8f4f 	dsb	sy
 80157d6:	f3bf 8f6f 	isb	sy
}
 80157da:	bf00      	nop
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	2001b740 	.word	0x2001b740
 80157e8:	e000ed04 	.word	0xe000ed04

080157ec <can2_ivt_msg_result_u1_rx_callback>:

void can2_ivt_msg_result_u1_rx_callback(ivt_msg_result_u1_t *ivt_msg_result_u1) {
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80157f4:	2300      	movs	r3, #0
 80157f6:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(accumulator_voltage_queue,
 80157f8:	4b0b      	ldr	r3, [pc, #44]	; (8015828 <can2_ivt_msg_result_u1_rx_callback+0x3c>)
 80157fa:	6818      	ldr	r0, [r3, #0]
 80157fc:	6879      	ldr	r1, [r7, #4]
 80157fe:	f107 020c 	add.w	r2, r7, #12
 8015802:	2302      	movs	r3, #2
 8015804:	f015 f87e 	bl	802a904 <xQueueGenericSendFromISR>
			&ivt_msg_result_u1->u_cells, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d007      	beq.n	801581e <can2_ivt_msg_result_u1_rx_callback+0x32>
 801580e:	4b07      	ldr	r3, [pc, #28]	; (801582c <can2_ivt_msg_result_u1_rx_callback+0x40>)
 8015810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015814:	601a      	str	r2, [r3, #0]
 8015816:	f3bf 8f4f 	dsb	sy
 801581a:	f3bf 8f6f 	isb	sy
}
 801581e:	bf00      	nop
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	2001b734 	.word	0x2001b734
 801582c:	e000ed04 	.word	0xe000ed04

08015830 <can2_ivt_msg_result_u3_rx_callback>:

void can2_ivt_msg_result_u3_rx_callback(ivt_msg_result_u3_t *ivt_msg_result_u3) {
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015838:	2300      	movs	r3, #0
 801583a:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(vehicle_voltage_queue, &ivt_msg_result_u3->u_vehicle,
 801583c:	4b0b      	ldr	r3, [pc, #44]	; (801586c <can2_ivt_msg_result_u3_rx_callback+0x3c>)
 801583e:	6818      	ldr	r0, [r3, #0]
 8015840:	6879      	ldr	r1, [r7, #4]
 8015842:	f107 020c 	add.w	r2, r7, #12
 8015846:	2302      	movs	r3, #2
 8015848:	f015 f85c 	bl	802a904 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d007      	beq.n	8015862 <can2_ivt_msg_result_u3_rx_callback+0x32>
 8015852:	4b07      	ldr	r3, [pc, #28]	; (8015870 <can2_ivt_msg_result_u3_rx_callback+0x40>)
 8015854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015858:	601a      	str	r2, [r3, #0]
 801585a:	f3bf 8f4f 	dsb	sy
 801585e:	f3bf 8f6f 	isb	sy
}
 8015862:	bf00      	nop
 8015864:	3710      	adds	r7, #16
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	2001b724 	.word	0x2001b724
 8015870:	e000ed04 	.word	0xe000ed04

08015874 <can2_cc_status_rx_callback>:

void can2_cc_status_rx_callback(cc_status_t *cc_status) {
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801587c:	2300      	movs	r3, #0
 801587e:	60fb      	str	r3, [r7, #12]
	xQueueOverwriteFromISR(start_charge_queue, &cc_status->enable_ams_charging,
 8015880:	4b0b      	ldr	r3, [pc, #44]	; (80158b0 <can2_cc_status_rx_callback+0x3c>)
 8015882:	6818      	ldr	r0, [r3, #0]
 8015884:	6879      	ldr	r1, [r7, #4]
 8015886:	f107 020c 	add.w	r2, r7, #12
 801588a:	2302      	movs	r3, #2
 801588c:	f015 f83a 	bl	802a904 <xQueueGenericSendFromISR>
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d007      	beq.n	80158a6 <can2_cc_status_rx_callback+0x32>
 8015896:	4b07      	ldr	r3, [pc, #28]	; (80158b4 <can2_cc_status_rx_callback+0x40>)
 8015898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801589c:	601a      	str	r2, [r3, #0]
 801589e:	f3bf 8f4f 	dsb	sy
 80158a2:	f3bf 8f6f 	isb	sy
}
 80158a6:	bf00      	nop
 80158a8:	3710      	adds	r7, #16
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	2001b71c 	.word	0x2001b71c
 80158b4:	e000ed04 	.word	0xe000ed04

080158b8 <can2_charger_config_tx_callback>:

uint8_t can2_charger_config_tx_callback(charger_config_t *charger_config) {
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b088      	sub	sp, #32
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
	charger_t charger;
	if (xQueuePeek(charger_queue, &charger, 0)) {
 80158c0:	4b15      	ldr	r3, [pc, #84]	; (8015918 <can2_charger_config_tx_callback+0x60>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	f107 0108 	add.w	r1, r7, #8
 80158c8:	2200      	movs	r2, #0
 80158ca:	4618      	mov	r0, r3
 80158cc:	f015 f9da 	bl	802ac84 <xQueuePeek>
 80158d0:	4603      	mov	r3, r0
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d01c      	beq.n	8015910 <can2_charger_config_tx_callback+0x58>
		charger_config->msg_set_current_limit = charger.charger_current_limit;
 80158d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80158da:	6879      	ldr	r1, [r7, #4]
 80158dc:	e9c1 2300 	strd	r2, r3, [r1]
		charger_config->msg_set_voltage_limit = charger.charger_voltage_limit;
 80158e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80158e4:	6879      	ldr	r1, [r7, #4]
 80158e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		charger_config->msg_set_power_limit = charger.charger_current_limit
 80158ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
				* charger.charger_voltage_limit;
 80158ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80158f2:	f7ea fe73 	bl	80005dc <__aeabi_dmul>
 80158f6:	4602      	mov	r2, r0
 80158f8:	460b      	mov	r3, r1
		charger_config->msg_set_power_limit = charger.charger_current_limit
 80158fa:	6879      	ldr	r1, [r7, #4]
 80158fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		charger_config->msg_set_time_out = 60;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	223c      	movs	r2, #60	; 0x3c
 8015904:	761a      	strb	r2, [r3, #24]
		charger_config->msg_set_enabled = charger.enable_charger;
 8015906:	7e3a      	ldrb	r2, [r7, #24]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	721a      	strb	r2, [r3, #8]
		return 1;
 801590c:	2301      	movs	r3, #1
 801590e:	e7ff      	b.n	8015910 <can2_charger_config_tx_callback+0x58>
	}
}
 8015910:	4618      	mov	r0, r3
 8015912:	3720      	adds	r7, #32
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	2001b72c 	.word	0x2001b72c

0801591c <can1_ams_status_1_tx_callback>:

uint8_t can1_ams_status_1_tx_callback(ams_status_1_t *ams_status_1) {
 801591c:	b580      	push	{r7, lr}
 801591e:	b0a6      	sub	sp, #152	; 0x98
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
	charger_t charger;
	GPIO_t GPIO;
	pPID_t PID;
	CSE_t CSE;

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8015924:	4b7a      	ldr	r3, [pc, #488]	; (8015b10 <can1_ams_status_1_tx_callback+0x1f4>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801592c:	2200      	movs	r2, #0
 801592e:	4618      	mov	r0, r3
 8015930:	f015 f9a8 	bl	802ac84 <xQueuePeek>
 8015934:	4603      	mov	r3, r0
 8015936:	2b00      	cmp	r3, #0
 8015938:	f000 80e5 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)
 801593c:	4b75      	ldr	r3, [pc, #468]	; (8015b14 <can1_ams_status_1_tx_callback+0x1f8>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015944:	2200      	movs	r2, #0
 8015946:	4618      	mov	r0, r3
 8015948:	f015 f99c 	bl	802ac84 <xQueuePeek>
 801594c:	4603      	mov	r3, r0
 801594e:	2b00      	cmp	r3, #0
 8015950:	f000 80d9 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(temperatures_queue, &temperatures, 0)
 8015954:	4b70      	ldr	r3, [pc, #448]	; (8015b18 <can1_ams_status_1_tx_callback+0x1fc>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801595c:	2200      	movs	r2, #0
 801595e:	4618      	mov	r0, r3
 8015960:	f015 f990 	bl	802ac84 <xQueuePeek>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	f000 80cd 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(charger_queue, &charger, 0)
 801596c:	4b6b      	ldr	r3, [pc, #428]	; (8015b1c <can1_ams_status_1_tx_callback+0x200>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015974:	2200      	movs	r2, #0
 8015976:	4618      	mov	r0, r3
 8015978:	f015 f984 	bl	802ac84 <xQueuePeek>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	f000 80c1 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(GPIO_queue, &GPIO, 0)
 8015984:	4b66      	ldr	r3, [pc, #408]	; (8015b20 <can1_ams_status_1_tx_callback+0x204>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801598c:	2200      	movs	r2, #0
 801598e:	4618      	mov	r0, r3
 8015990:	f015 f978 	bl	802ac84 <xQueuePeek>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	f000 80b5 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(PID_queue, &PID, 0)
 801599c:	4b61      	ldr	r3, [pc, #388]	; (8015b24 <can1_ams_status_1_tx_callback+0x208>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	f107 0118 	add.w	r1, r7, #24
 80159a4:	2200      	movs	r2, #0
 80159a6:	4618      	mov	r0, r3
 80159a8:	f015 f96c 	bl	802ac84 <xQueuePeek>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	f000 80a9 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
			&& xQueuePeek(CSE_queue, &CSE, 0)) {
 80159b4:	4b5c      	ldr	r3, [pc, #368]	; (8015b28 <can1_ams_status_1_tx_callback+0x20c>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f107 0108 	add.w	r1, r7, #8
 80159bc:	2200      	movs	r2, #0
 80159be:	4618      	mov	r0, r3
 80159c0:	f015 f960 	bl	802ac84 <xQueuePeek>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	f000 809d 	beq.w	8015b06 <can1_ams_status_1_tx_callback+0x1ea>
		maximum_cell_temperature = cell_temperatures[0];
 80159cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		minimum_cell_temperature = cell_temperatures[0];
 80159d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159dc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		maximum_cell_voltage = cell_voltages[0];
 80159e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		minimum_cell_voltage = cell_voltages[0];
 80159ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80159ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (int i = 0; i < 126; i++) {
 80159f4:	2300      	movs	r3, #0
 80159f6:	677b      	str	r3, [r7, #116]	; 0x74
 80159f8:	e03e      	b.n	8015a78 <can1_ams_status_1_tx_callback+0x15c>
			if (maximum_cell_temperature < cell_temperatures[0]) {
 80159fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a00:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8015a04:	f7eb f85c 	bl	8000ac0 <__aeabi_dcmplt>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d004      	beq.n	8015a18 <can1_ams_status_1_tx_callback+0xfc>
				maximum_cell_temperature = cell_temperatures[0];
 8015a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a14:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			}
			if (minimum_cell_temperature > cell_temperatures[0]) {
 8015a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8015a22:	f7eb f86b 	bl	8000afc <__aeabi_dcmpgt>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d004      	beq.n	8015a36 <can1_ams_status_1_tx_callback+0x11a>
				minimum_cell_temperature = cell_temperatures[0];
 8015a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a32:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			}
			if (maximum_cell_voltage < cell_voltages[0]) {
 8015a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8015a40:	f7eb f83e 	bl	8000ac0 <__aeabi_dcmplt>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d004      	beq.n	8015a54 <can1_ams_status_1_tx_callback+0x138>
				maximum_cell_voltage = cell_voltages[0];
 8015a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a50:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			}
			if (minimum_cell_voltage > cell_voltages[0]) {
 8015a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8015a5e:	f7eb f84d 	bl	8000afc <__aeabi_dcmpgt>
 8015a62:	4603      	mov	r3, r0
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d004      	beq.n	8015a72 <can1_ams_status_1_tx_callback+0x156>
				minimum_cell_voltage = cell_voltages[0];
 8015a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (int i = 0; i < 126; i++) {
 8015a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a74:	3301      	adds	r3, #1
 8015a76:	677b      	str	r3, [r7, #116]	; 0x74
 8015a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a7a:	2b7d      	cmp	r3, #125	; 0x7d
 8015a7c:	ddbd      	ble.n	80159fa <can1_ams_status_1_tx_callback+0xde>
			}

		}

		ams_status_1->air1_closed = GPIO.AIR_minus_closed;
 8015a7e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	701a      	strb	r2, [r3, #0]
		ams_status_1->air2_closed = GPIO.AIR_plus_closed;
 8015a86:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	705a      	strb	r2, [r3, #1]
		ams_status_1->ams_error = GPIO.AMS_error_latched;
 8015a8e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	709a      	strb	r2, [r3, #2]
		ams_status_1->imd_error = GPIO.IMD_error_latched;
 8015a96:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	741a      	strb	r2, [r3, #16]
		ams_status_1->charging_status = charger.enable_charger;
 8015a9e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	70da      	strb	r2, [r3, #3]
		ams_status_1->fan_speed = PID.duty_cycle;
 8015aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ams_status_1->max_cell_temperature = maximum_cell_temperature;
 8015ab0:	6879      	ldr	r1, [r7, #4]
 8015ab2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8015ab6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ams_status_1->max_cell_voltage = maximum_cell_voltage;
 8015aba:	6879      	ldr	r1, [r7, #4]
 8015abc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8015ac0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ams_status_1->min_cell_temperature = minimum_cell_temperature;
 8015ac4:	6879      	ldr	r1, [r7, #4]
 8015ac6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8015aca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ams_status_1->min_cell_voltage = minimum_cell_voltage;
 8015ace:	6879      	ldr	r1, [r7, #4]
 8015ad0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8015ad4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		ams_status_1->pre_charge_status = 1;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2201      	movs	r2, #1
 8015adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		ams_status_1->sc_closed = GPIO.SC_probe;
 8015ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		ams_status_1->state_of_charge = CSE.SOC * 100;
 8015aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015aee:	f04f 0200 	mov.w	r2, #0
 8015af2:	4b0e      	ldr	r3, [pc, #56]	; (8015b2c <can1_ams_status_1_tx_callback+0x210>)
 8015af4:	f7ea fd72 	bl	80005dc <__aeabi_dmul>
 8015af8:	4602      	mov	r2, r0
 8015afa:	460b      	mov	r3, r1
 8015afc:	6879      	ldr	r1, [r7, #4]
 8015afe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		return 1;
 8015b02:	2301      	movs	r3, #1
 8015b04:	e000      	b.n	8015b08 <can1_ams_status_1_tx_callback+0x1ec>
	} else {
		return 0;
 8015b06:	2300      	movs	r3, #0
	}

}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3798      	adds	r7, #152	; 0x98
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	2001b704 	.word	0x2001b704
 8015b14:	2001b720 	.word	0x2001b720
 8015b18:	2001b710 	.word	0x2001b710
 8015b1c:	2001b72c 	.word	0x2001b72c
 8015b20:	2001b730 	.word	0x2001b730
 8015b24:	2001b728 	.word	0x2001b728
 8015b28:	2001b73c 	.word	0x2001b73c
 8015b2c:	40590000 	.word	0x40590000

08015b30 <can1_ams_temperatures_tx_callback>:

uint8_t can1_ams_temperatures_tx_callback(ams_temperatures_t *ams_temperatures) {
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
	return xQueuePeek(temperatures_queue, &ams_temperatures->aux_1_temperature,
 8015b38:	4b06      	ldr	r3, [pc, #24]	; (8015b54 <can1_ams_temperatures_tx_callback+0x24>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	6879      	ldr	r1, [r7, #4]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	4618      	mov	r0, r3
 8015b42:	f015 f89f 	bl	802ac84 <xQueuePeek>
 8015b46:	4603      	mov	r3, r0
 8015b48:	b2db      	uxtb	r3, r3
			0);
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3708      	adds	r7, #8
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}
 8015b52:	bf00      	nop
 8015b54:	2001b710 	.word	0x2001b710

08015b58 <can1_ams_cell_voltages_tx_callback>:

uint8_t can1_ams_cell_voltages_tx_callback(
		ams_cell_voltages_t *ams_cell_voltages) {
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_voltages_queue, &ams_cell_voltages->v1s1, 0);
 8015b60:	4b06      	ldr	r3, [pc, #24]	; (8015b7c <can1_ams_cell_voltages_tx_callback+0x24>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	6879      	ldr	r1, [r7, #4]
 8015b66:	2200      	movs	r2, #0
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f015 f88b 	bl	802ac84 <xQueuePeek>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	b2db      	uxtb	r3, r3
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3708      	adds	r7, #8
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	2001b704 	.word	0x2001b704

08015b80 <can1_ams_cell_temperatures_tx_callback>:

uint8_t can1_ams_cell_temperatures_tx_callback(
		ams_cell_temperatures_t *ams_cell_temperatures) {
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
	return xQueuePeek(cell_temperatures_queue, &ams_cell_temperatures->t1s1, 0);
 8015b88:	4b06      	ldr	r3, [pc, #24]	; (8015ba4 <can1_ams_cell_temperatures_tx_callback+0x24>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	6879      	ldr	r1, [r7, #4]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	4618      	mov	r0, r3
 8015b92:	f015 f877 	bl	802ac84 <xQueuePeek>
 8015b96:	4603      	mov	r3, r0
 8015b98:	b2db      	uxtb	r3, r3
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3708      	adds	r7, #8
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	2001b720 	.word	0x2001b720

08015ba8 <can2_ivt_msg_result_i_tx_callback>:
#include "canlib_data.h"
#include "canlib_callbacks.h"
#include "SIM0.h"


uint8_t can2_ivt_msg_result_i_tx_callback(ivt_msg_result_i_t* ivt_msg_result_i){
 8015ba8:	b480      	push	{r7}
 8015baa:	b083      	sub	sp, #12
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
	ivt_msg_result_i->i_ts = SIM0_Y.current;
 8015bb0:	4b06      	ldr	r3, [pc, #24]	; (8015bcc <can2_ivt_msg_result_i_tx_callback+0x24>)
 8015bb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8015bb6:	6879      	ldr	r1, [r7, #4]
 8015bb8:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015bbc:	2301      	movs	r3, #1
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	370c      	adds	r7, #12
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc8:	4770      	bx	lr
 8015bca:	bf00      	nop
 8015bcc:	2001dae8 	.word	0x2001dae8

08015bd0 <can2_ivt_msg_result_u1_tx_callback>:

uint8_t can2_ivt_msg_result_u1_tx_callback(ivt_msg_result_u1_t* ivt_msg_result_u1) {
 8015bd0:	b480      	push	{r7}
 8015bd2:	b083      	sub	sp, #12
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u1->u_cells = SIM0_Y.accumulator_voltage;
 8015bd8:	4b06      	ldr	r3, [pc, #24]	; (8015bf4 <can2_ivt_msg_result_u1_tx_callback+0x24>)
 8015bda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8015bde:	6879      	ldr	r1, [r7, #4]
 8015be0:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015be4:	2301      	movs	r3, #1
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr
 8015bf2:	bf00      	nop
 8015bf4:	2001dae8 	.word	0x2001dae8

08015bf8 <can2_ivt_msg_result_u3_tx_callback>:

uint8_t can2_ivt_msg_result_u3_tx_callback(ivt_msg_result_u3_t* ivt_msg_result_u3) {
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
	ivt_msg_result_u3->u_vehicle = SIM0_Y.vehicle_voltage;
 8015c00:	4b06      	ldr	r3, [pc, #24]	; (8015c1c <can2_ivt_msg_result_u3_tx_callback+0x24>)
 8015c02:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8015c06:	6879      	ldr	r1, [r7, #4]
 8015c08:	e9c1 2300 	strd	r2, r3, [r1]
	return 1;
 8015c0c:	2301      	movs	r3, #1
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	370c      	adds	r7, #12
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop
 8015c1c:	2001dae8 	.word	0x2001dae8

08015c20 <can2_cc_status_tx_callback>:

uint8_t can2_cc_status_tx_callback(cc_status_t* cc_status) {
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
	cc_status->enable_ams_charging = SIM0_U.charge && !SIM0_U.drive;
 8015c28:	4b11      	ldr	r3, [pc, #68]	; (8015c70 <can2_cc_status_tx_callback+0x50>)
 8015c2a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015c2e:	f04f 0200 	mov.w	r2, #0
 8015c32:	f04f 0300 	mov.w	r3, #0
 8015c36:	f7ea ff39 	bl	8000aac <__aeabi_dcmpeq>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d10d      	bne.n	8015c5c <can2_cc_status_tx_callback+0x3c>
 8015c40:	4b0b      	ldr	r3, [pc, #44]	; (8015c70 <can2_cc_status_tx_callback+0x50>)
 8015c42:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015c46:	f04f 0200 	mov.w	r2, #0
 8015c4a:	f04f 0300 	mov.w	r3, #0
 8015c4e:	f7ea ff2d 	bl	8000aac <__aeabi_dcmpeq>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d001      	beq.n	8015c5c <can2_cc_status_tx_callback+0x3c>
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e000      	b.n	8015c5e <can2_cc_status_tx_callback+0x3e>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	b2da      	uxtb	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	701a      	strb	r2, [r3, #0]
	return 1;
 8015c64:	2301      	movs	r3, #1
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3708      	adds	r7, #8
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	2001e8e0 	.word	0x2001e8e0

08015c74 <can1_dbu_status_1_tx_callback>:

uint8_t can1_dbu_status_1_tx_callback(dbu_status_1_t* dbu_status_1) {
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
	dbu_status_1->activate_ts_button = SIM0_U.drive && !SIM0_U.charge;
 8015c7c:	4b20      	ldr	r3, [pc, #128]	; (8015d00 <can1_dbu_status_1_tx_callback+0x8c>)
 8015c7e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015c82:	f04f 0200 	mov.w	r2, #0
 8015c86:	f04f 0300 	mov.w	r3, #0
 8015c8a:	f7ea ff0f 	bl	8000aac <__aeabi_dcmpeq>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d10d      	bne.n	8015cb0 <can1_dbu_status_1_tx_callback+0x3c>
 8015c94:	4b1a      	ldr	r3, [pc, #104]	; (8015d00 <can1_dbu_status_1_tx_callback+0x8c>)
 8015c96:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015c9a:	f04f 0200 	mov.w	r2, #0
 8015c9e:	f04f 0300 	mov.w	r3, #0
 8015ca2:	f7ea ff03 	bl	8000aac <__aeabi_dcmpeq>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d001      	beq.n	8015cb0 <can1_dbu_status_1_tx_callback+0x3c>
 8015cac:	2301      	movs	r3, #1
 8015cae:	e000      	b.n	8015cb2 <can1_dbu_status_1_tx_callback+0x3e>
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	b2da      	uxtb	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	701a      	strb	r2, [r3, #0]
	dbu_status_1->ready_to_drive_button = SIM0_U.charge && SIM0_U.drive;
 8015cb8:	4b11      	ldr	r3, [pc, #68]	; (8015d00 <can1_dbu_status_1_tx_callback+0x8c>)
 8015cba:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8015cbe:	f04f 0200 	mov.w	r2, #0
 8015cc2:	f04f 0300 	mov.w	r3, #0
 8015cc6:	f7ea fef1 	bl	8000aac <__aeabi_dcmpeq>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d10d      	bne.n	8015cec <can1_dbu_status_1_tx_callback+0x78>
 8015cd0:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <can1_dbu_status_1_tx_callback+0x8c>)
 8015cd2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8015cd6:	f04f 0200 	mov.w	r2, #0
 8015cda:	f04f 0300 	mov.w	r3, #0
 8015cde:	f7ea fee5 	bl	8000aac <__aeabi_dcmpeq>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d101      	bne.n	8015cec <can1_dbu_status_1_tx_callback+0x78>
 8015ce8:	2301      	movs	r3, #1
 8015cea:	e000      	b.n	8015cee <can1_dbu_status_1_tx_callback+0x7a>
 8015cec:	2300      	movs	r3, #0
 8015cee:	b2da      	uxtb	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	741a      	strb	r2, [r3, #16]
	return 1;
 8015cf4:	2301      	movs	r3, #1
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	2001e8e0 	.word	0x2001e8e0

08015d04 <can2_charger_config_rx_callback>:

void can2_charger_config_rx_callback(charger_config_t *charger_config) {
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
	SIM0_U.CurrentLimit = charger_config->msg_set_current_limit;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d12:	490b      	ldr	r1, [pc, #44]	; (8015d40 <can2_charger_config_rx_callback+0x3c>)
 8015d14:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	SIM0_U.VoltageLimit = charger_config->msg_set_voltage_limit;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d1e:	4908      	ldr	r1, [pc, #32]	; (8015d40 <can2_charger_config_rx_callback+0x3c>)
 8015d20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	SIM0_U.EnableCharge = charger_config->msg_set_enabled;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	7a1b      	ldrb	r3, [r3, #8]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7ea fbdd 	bl	80004e8 <__aeabi_ui2d>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	460b      	mov	r3, r1
 8015d32:	4903      	ldr	r1, [pc, #12]	; (8015d40 <can2_charger_config_rx_callback+0x3c>)
 8015d34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8015d38:	bf00      	nop
 8015d3a:	3708      	adds	r7, #8
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	2001e8e0 	.word	0x2001e8e0

08015d44 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 8015d44:	b480      	push	{r7}
 8015d46:	b085      	sub	sp, #20
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 8015d4e:	79fb      	ldrb	r3, [r7, #7]
 8015d50:	4a0a      	ldr	r2, [pc, #40]	; (8015d7c <swap+0x38>)
 8015d52:	5cd3      	ldrb	r3, [r2, r3]
 8015d54:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 8015d56:	79fb      	ldrb	r3, [r7, #7]
 8015d58:	1e5a      	subs	r2, r3, #1
 8015d5a:	79fb      	ldrb	r3, [r7, #7]
 8015d5c:	4907      	ldr	r1, [pc, #28]	; (8015d7c <swap+0x38>)
 8015d5e:	5c89      	ldrb	r1, [r1, r2]
 8015d60:	4a06      	ldr	r2, [pc, #24]	; (8015d7c <swap+0x38>)
 8015d62:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 8015d64:	79fb      	ldrb	r3, [r7, #7]
 8015d66:	3b01      	subs	r3, #1
 8015d68:	4904      	ldr	r1, [pc, #16]	; (8015d7c <swap+0x38>)
 8015d6a:	7bfa      	ldrb	r2, [r7, #15]
 8015d6c:	54ca      	strb	r2, [r1, r3]
}
 8015d6e:	bf00      	nop
 8015d70:	3714      	adds	r7, #20
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	20000004 	.word	0x20000004

08015d80 <compare>:

uint8_t compare(uint8_t g) {
 8015d80:	b590      	push	{r4, r7, lr}
 8015d82:	b083      	sub	sp, #12
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	4603      	mov	r3, r0
 8015d88:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 8015d8a:	4b10      	ldr	r3, [pc, #64]	; (8015dcc <compare+0x4c>)
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	79fb      	ldrb	r3, [r7, #7]
 8015d90:	490f      	ldr	r1, [pc, #60]	; (8015dd0 <compare+0x50>)
 8015d92:	5ccb      	ldrb	r3, [r1, r3]
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	4413      	add	r3, r2
 8015d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d9c:	4b0b      	ldr	r3, [pc, #44]	; (8015dcc <compare+0x4c>)
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	79fb      	ldrb	r3, [r7, #7]
 8015da2:	3b01      	subs	r3, #1
 8015da4:	4c0a      	ldr	r4, [pc, #40]	; (8015dd0 <compare+0x50>)
 8015da6:	5ce3      	ldrb	r3, [r4, r3]
 8015da8:	00db      	lsls	r3, r3, #3
 8015daa:	4413      	add	r3, r2
 8015dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db0:	2401      	movs	r4, #1
 8015db2:	f7ea fe85 	bl	8000ac0 <__aeabi_dcmplt>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d101      	bne.n	8015dc0 <compare+0x40>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	461c      	mov	r4, r3
 8015dc0:	b2e3      	uxtb	r3, r4
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	370c      	adds	r7, #12
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd90      	pop	{r4, r7, pc}
 8015dca:	bf00      	nop
 8015dcc:	2001c04c 	.word	0x2001c04c
 8015dd0:	20000004 	.word	0x20000004

08015dd4 <gnome_sort>:

void gnome_sort() {
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015dde:	e014      	b.n	8015e0a <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8015de0:	79fb      	ldrb	r3, [r7, #7]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d006      	beq.n	8015df4 <gnome_sort+0x20>
 8015de6:	79fb      	ldrb	r3, [r7, #7]
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7ff ffc9 	bl	8015d80 <compare>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d003      	beq.n	8015dfc <gnome_sort+0x28>
			gnome++;
 8015df4:	79fb      	ldrb	r3, [r7, #7]
 8015df6:	3301      	adds	r3, #1
 8015df8:	71fb      	strb	r3, [r7, #7]
 8015dfa:	e006      	b.n	8015e0a <gnome_sort+0x36>
		} else {
			swap(gnome);
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7ff ffa0 	bl	8015d44 <swap>
			gnome--;
 8015e04:	79fb      	ldrb	r3, [r7, #7]
 8015e06:	3b01      	subs	r3, #1
 8015e08:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8015e0a:	79fb      	ldrb	r3, [r7, #7]
 8015e0c:	2b7d      	cmp	r3, #125	; 0x7d
 8015e0e:	d9e7      	bls.n	8015de0 <gnome_sort+0xc>
		}
	}
}
 8015e10:	bf00      	nop
 8015e12:	bf00      	nop
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
	...

08015e1c <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8015e22:	4b19      	ldr	r3, [pc, #100]	; (8015e88 <do_cell_balancing+0x6c>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2200      	movs	r2, #0
 8015e28:	4918      	ldr	r1, [pc, #96]	; (8015e8c <do_cell_balancing+0x70>)
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f014 ff2a 	bl	802ac84 <xQueuePeek>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d023      	beq.n	8015e7e <do_cell_balancing+0x62>
		gnome_sort();
 8015e36:	f7ff ffcd 	bl	8015dd4 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	607b      	str	r3, [r7, #4]
 8015e3e:	e009      	b.n	8015e54 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	2200      	movs	r2, #0
 8015e46:	4619      	mov	r1, r3
 8015e48:	2000      	movs	r0, #0
 8015e4a:	f001 fdc7 	bl	80179dc <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	3301      	adds	r3, #1
 8015e52:	607b      	str	r3, [r7, #4]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2b7d      	cmp	r3, #125	; 0x7d
 8015e58:	ddf2      	ble.n	8015e40 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	603b      	str	r3, [r7, #0]
 8015e5e:	e00b      	b.n	8015e78 <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 8015e60:	4a0b      	ldr	r2, [pc, #44]	; (8015e90 <do_cell_balancing+0x74>)
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	4413      	add	r3, r2
 8015e66:	781b      	ldrb	r3, [r3, #0]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f001 fdb5 	bl	80179dc <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	3301      	adds	r3, #1
 8015e76:	603b      	str	r3, [r7, #0]
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	2b28      	cmp	r3, #40	; 0x28
 8015e7c:	ddf0      	ble.n	8015e60 <do_cell_balancing+0x44>

		}
	}
	return 1;
 8015e7e:	2301      	movs	r3, #1
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	2001b704 	.word	0x2001b704
 8015e8c:	2001c04c 	.word	0x2001c04c
 8015e90:	20000004 	.word	0x20000004

08015e94 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	607b      	str	r3, [r7, #4]
 8015e9e:	e009      	b.n	8015eb4 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	f001 fd97 	bl	80179dc <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	607b      	str	r3, [r7, #4]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2b7d      	cmp	r3, #125	; 0x7d
 8015eb8:	ddf2      	ble.n	8015ea0 <end_cell_balancing+0xc>
	}
	return 1;
 8015eba:	2301      	movs	r3, #1
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3708      	adds	r7, #8
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8015eca:	2300      	movs	r3, #0
 8015ecc:	607b      	str	r3, [r7, #4]
 8015ece:	4b0c      	ldr	r3, [pc, #48]	; (8015f00 <MX_DMA_Init+0x3c>)
 8015ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ed2:	4a0b      	ldr	r2, [pc, #44]	; (8015f00 <MX_DMA_Init+0x3c>)
 8015ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8015eda:	4b09      	ldr	r3, [pc, #36]	; (8015f00 <MX_DMA_Init+0x3c>)
 8015edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015ee2:	607b      	str	r3, [r7, #4]
 8015ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	2105      	movs	r1, #5
 8015eea:	2038      	movs	r0, #56	; 0x38
 8015eec:	f010 fa4a 	bl	8026384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8015ef0:	2038      	movs	r0, #56	; 0x38
 8015ef2:	f010 fa63 	bl	80263bc <HAL_NVIC_EnableIRQ>

}
 8015ef6:	bf00      	nop
 8015ef8:	3708      	adds	r7, #8
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	40023800 	.word	0x40023800

08015f04 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08a      	sub	sp, #40	; 0x28
 8015f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f0a:	f107 0314 	add.w	r3, r7, #20
 8015f0e:	2200      	movs	r2, #0
 8015f10:	601a      	str	r2, [r3, #0]
 8015f12:	605a      	str	r2, [r3, #4]
 8015f14:	609a      	str	r2, [r3, #8]
 8015f16:	60da      	str	r2, [r3, #12]
 8015f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	613b      	str	r3, [r7, #16]
 8015f1e:	4b5c      	ldr	r3, [pc, #368]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f22:	4a5b      	ldr	r2, [pc, #364]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f24:	f043 0310 	orr.w	r3, r3, #16
 8015f28:	6313      	str	r3, [r2, #48]	; 0x30
 8015f2a:	4b59      	ldr	r3, [pc, #356]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f2e:	f003 0310 	and.w	r3, r3, #16
 8015f32:	613b      	str	r3, [r7, #16]
 8015f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015f36:	2300      	movs	r3, #0
 8015f38:	60fb      	str	r3, [r7, #12]
 8015f3a:	4b55      	ldr	r3, [pc, #340]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f3e:	4a54      	ldr	r2, [pc, #336]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f40:	f043 0304 	orr.w	r3, r3, #4
 8015f44:	6313      	str	r3, [r2, #48]	; 0x30
 8015f46:	4b52      	ldr	r3, [pc, #328]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f4a:	f003 0304 	and.w	r3, r3, #4
 8015f4e:	60fb      	str	r3, [r7, #12]
 8015f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f52:	2300      	movs	r3, #0
 8015f54:	60bb      	str	r3, [r7, #8]
 8015f56:	4b4e      	ldr	r3, [pc, #312]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f5a:	4a4d      	ldr	r2, [pc, #308]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f5c:	f043 0301 	orr.w	r3, r3, #1
 8015f60:	6313      	str	r3, [r2, #48]	; 0x30
 8015f62:	4b4b      	ldr	r3, [pc, #300]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	f003 0301 	and.w	r3, r3, #1
 8015f6a:	60bb      	str	r3, [r7, #8]
 8015f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015f6e:	2300      	movs	r3, #0
 8015f70:	607b      	str	r3, [r7, #4]
 8015f72:	4b47      	ldr	r3, [pc, #284]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f76:	4a46      	ldr	r2, [pc, #280]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f78:	f043 0302 	orr.w	r3, r3, #2
 8015f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8015f7e:	4b44      	ldr	r3, [pc, #272]	; (8016090 <MX_GPIO_Init+0x18c>)
 8015f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f82:	f003 0302 	and.w	r3, r3, #2
 8015f86:	607b      	str	r3, [r7, #4]
 8015f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	210e      	movs	r1, #14
 8015f8e:	4841      	ldr	r0, [pc, #260]	; (8016094 <MX_GPIO_Init+0x190>)
 8015f90:	f010 ff2e 	bl	8026df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8015f94:	2200      	movs	r2, #0
 8015f96:	21e0      	movs	r1, #224	; 0xe0
 8015f98:	483f      	ldr	r0, [pc, #252]	; (8016098 <MX_GPIO_Init+0x194>)
 8015f9a:	f010 ff29 	bl	8026df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8015fa4:	483d      	ldr	r0, [pc, #244]	; (801609c <MX_GPIO_Init+0x198>)
 8015fa6:	f010 ff23 	bl	8026df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8015faa:	230e      	movs	r3, #14
 8015fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015fae:	2301      	movs	r3, #1
 8015fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015fba:	f107 0314 	add.w	r3, r7, #20
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	4834      	ldr	r0, [pc, #208]	; (8016094 <MX_GPIO_Init+0x190>)
 8015fc2:	f010 fd79 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8015fc6:	2370      	movs	r3, #112	; 0x70
 8015fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8015fca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8015fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015fd4:	f107 0314 	add.w	r3, r7, #20
 8015fd8:	4619      	mov	r1, r3
 8015fda:	482e      	ldr	r0, [pc, #184]	; (8016094 <MX_GPIO_Init+0x190>)
 8015fdc:	f010 fd6c 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8015fe0:	23e0      	movs	r3, #224	; 0xe0
 8015fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015fec:	2300      	movs	r3, #0
 8015fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ff0:	f107 0314 	add.w	r3, r7, #20
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	4828      	ldr	r0, [pc, #160]	; (8016098 <MX_GPIO_Init+0x194>)
 8015ff8:	f010 fd5e 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8015ffc:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8016000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016002:	2301      	movs	r3, #1
 8016004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016006:	2300      	movs	r3, #0
 8016008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801600a:	2300      	movs	r3, #0
 801600c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801600e:	f107 0314 	add.w	r3, r7, #20
 8016012:	4619      	mov	r1, r3
 8016014:	4821      	ldr	r0, [pc, #132]	; (801609c <MX_GPIO_Init+0x198>)
 8016016:	f010 fd4f 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_probe_Pin;
 801601a:	2302      	movs	r3, #2
 801601c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801601e:	2300      	movs	r3, #0
 8016020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016022:	2300      	movs	r3, #0
 8016024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC_probe_GPIO_Port, &GPIO_InitStruct);
 8016026:	f107 0314 	add.w	r3, r7, #20
 801602a:	4619      	mov	r1, r3
 801602c:	481c      	ldr	r0, [pc, #112]	; (80160a0 <MX_GPIO_Init+0x19c>)
 801602e:	f010 fd43 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_ok_Pin;
 8016032:	2304      	movs	r3, #4
 8016034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8016036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 801603a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801603c:	2300      	movs	r3, #0
 801603e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_ok_GPIO_Port, &GPIO_InitStruct);
 8016040:	f107 0314 	add.w	r3, r7, #20
 8016044:	4619      	mov	r1, r3
 8016046:	4816      	ldr	r0, [pc, #88]	; (80160a0 <MX_GPIO_Init+0x19c>)
 8016048:	f010 fd36 	bl	8026ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 801604c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8016050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016052:	2300      	movs	r3, #0
 8016054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016056:	2300      	movs	r3, #0
 8016058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801605a:	f107 0314 	add.w	r3, r7, #20
 801605e:	4619      	mov	r1, r3
 8016060:	480e      	ldr	r0, [pc, #56]	; (801609c <MX_GPIO_Init+0x198>)
 8016062:	f010 fd29 	bl	8026ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8016066:	2200      	movs	r2, #0
 8016068:	2105      	movs	r1, #5
 801606a:	200a      	movs	r0, #10
 801606c:	f010 f98a 	bl	8026384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8016070:	200a      	movs	r0, #10
 8016072:	f010 f9a3 	bl	80263bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8016076:	2200      	movs	r2, #0
 8016078:	2105      	movs	r1, #5
 801607a:	2017      	movs	r0, #23
 801607c:	f010 f982 	bl	8026384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8016080:	2017      	movs	r0, #23
 8016082:	f010 f99b 	bl	80263bc <HAL_NVIC_EnableIRQ>

}
 8016086:	bf00      	nop
 8016088:	3728      	adds	r7, #40	; 0x28
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	40023800 	.word	0x40023800
 8016094:	40021000 	.word	0x40021000
 8016098:	40020000 	.word	0x40020000
 801609c:	40020800 	.word	0x40020800
 80160a0:	40020400 	.word	0x40020400

080160a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

/* RELAY MONITORING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	4603      	mov	r3, r0
 80160ac:	80fb      	strh	r3, [r7, #6]
#ifdef SIMULATION
	switch (GPIO_Pin) {
 80160ae:	88fb      	ldrh	r3, [r7, #6]
 80160b0:	2b40      	cmp	r3, #64	; 0x40
 80160b2:	d014      	beq.n	80160de <HAL_GPIO_EXTI_Callback+0x3a>
 80160b4:	2b40      	cmp	r3, #64	; 0x40
 80160b6:	dc56      	bgt.n	8016166 <HAL_GPIO_EXTI_Callback+0xc2>
 80160b8:	2b20      	cmp	r3, #32
 80160ba:	d025      	beq.n	8016108 <HAL_GPIO_EXTI_Callback+0x64>
 80160bc:	2b20      	cmp	r3, #32
 80160be:	dc52      	bgt.n	8016166 <HAL_GPIO_EXTI_Callback+0xc2>
 80160c0:	2b04      	cmp	r3, #4
 80160c2:	d002      	beq.n	80160ca <HAL_GPIO_EXTI_Callback+0x26>
 80160c4:	2b10      	cmp	r3, #16
 80160c6:	d035      	beq.n	8016134 <HAL_GPIO_EXTI_Callback+0x90>
			__raise_ams_error(ERROR_AIR_PLUS);
		}
		break;
	}
#endif
}
 80160c8:	e04d      	b.n	8016166 <HAL_GPIO_EXTI_Callback+0xc2>
		GPIO.IMD_ok = get_imd_ok_ext();
 80160ca:	f001 fc7f 	bl	80179cc <get_imd_ok_ext>
 80160ce:	4603      	mov	r3, r0
 80160d0:	b2da      	uxtb	r2, r3
 80160d2:	4b27      	ldr	r3, [pc, #156]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 80160d4:	70da      	strb	r2, [r3, #3]
		__raise_imd_error(ERROR_IMD);
 80160d6:	2002      	movs	r0, #2
 80160d8:	f000 fb38 	bl	801674c <__raise_imd_error>
		break;
 80160dc:	e043      	b.n	8016166 <HAL_GPIO_EXTI_Callback+0xc2>
		GPIO.precharge_closed = get_precharge_ext();
 80160de:	f001 fc05 	bl	80178ec <get_precharge_ext>
 80160e2:	4603      	mov	r3, r0
 80160e4:	b2da      	uxtb	r2, r3
 80160e6:	4b22      	ldr	r3, [pc, #136]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 80160e8:	711a      	strb	r2, [r3, #4]
		GPIO.enable_AIR_minus = get_set_precharge_ext();
 80160ea:	f001 fc0f 	bl	801790c <get_set_precharge_ext>
 80160ee:	4603      	mov	r3, r0
 80160f0:	b2da      	uxtb	r2, r3
 80160f2:	4b1f      	ldr	r3, [pc, #124]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 80160f4:	721a      	strb	r2, [r3, #8]
		if (GPIO.precharge_closed != GPIO.enable_precharge) {
 80160f6:	4b1e      	ldr	r3, [pc, #120]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 80160f8:	791a      	ldrb	r2, [r3, #4]
 80160fa:	4b1d      	ldr	r3, [pc, #116]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 80160fc:	79db      	ldrb	r3, [r3, #7]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d002      	beq.n	8016108 <HAL_GPIO_EXTI_Callback+0x64>
			__raise_ams_error(ERROR_PRECHARGE);
 8016102:	202b      	movs	r0, #43	; 0x2b
 8016104:	f000 fb00 	bl	8016708 <__raise_ams_error>
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8016108:	f001 fbbc 	bl	8017884 <get_air_minus_ext>
 801610c:	4603      	mov	r3, r0
 801610e:	b2da      	uxtb	r2, r3
 8016110:	4b17      	ldr	r3, [pc, #92]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 8016112:	715a      	strb	r2, [r3, #5]
		GPIO.enable_AIR_minus = get_set_air_minus_ext();
 8016114:	f001 fbc6 	bl	80178a4 <get_set_air_minus_ext>
 8016118:	4603      	mov	r3, r0
 801611a:	b2da      	uxtb	r2, r3
 801611c:	4b14      	ldr	r3, [pc, #80]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 801611e:	721a      	strb	r2, [r3, #8]
		if (GPIO.AIR_minus_closed != GPIO.enable_AIR_minus) {
 8016120:	4b13      	ldr	r3, [pc, #76]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 8016122:	795a      	ldrb	r2, [r3, #5]
 8016124:	4b12      	ldr	r3, [pc, #72]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 8016126:	7a1b      	ldrb	r3, [r3, #8]
 8016128:	429a      	cmp	r2, r3
 801612a:	d019      	beq.n	8016160 <HAL_GPIO_EXTI_Callback+0xbc>
			__raise_ams_error(ERROR_AIR_MINUS);
 801612c:	2029      	movs	r0, #41	; 0x29
 801612e:	f000 faeb 	bl	8016708 <__raise_ams_error>
		break;
 8016132:	e015      	b.n	8016160 <HAL_GPIO_EXTI_Callback+0xbc>
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8016134:	f001 fb72 	bl	801781c <get_air_plus_ext>
 8016138:	4603      	mov	r3, r0
 801613a:	b2da      	uxtb	r2, r3
 801613c:	4b0c      	ldr	r3, [pc, #48]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 801613e:	719a      	strb	r2, [r3, #6]
		GPIO.enable_AIR_plus = get_set_air_plus_ext();
 8016140:	f001 fb7c 	bl	801783c <get_set_air_plus_ext>
 8016144:	4603      	mov	r3, r0
 8016146:	b2da      	uxtb	r2, r3
 8016148:	4b09      	ldr	r3, [pc, #36]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 801614a:	725a      	strb	r2, [r3, #9]
		if (GPIO.AIR_plus_closed != GPIO.enable_AIR_plus) {
 801614c:	4b08      	ldr	r3, [pc, #32]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 801614e:	799a      	ldrb	r2, [r3, #6]
 8016150:	4b07      	ldr	r3, [pc, #28]	; (8016170 <HAL_GPIO_EXTI_Callback+0xcc>)
 8016152:	7a5b      	ldrb	r3, [r3, #9]
 8016154:	429a      	cmp	r2, r3
 8016156:	d005      	beq.n	8016164 <HAL_GPIO_EXTI_Callback+0xc0>
			__raise_ams_error(ERROR_AIR_PLUS);
 8016158:	202a      	movs	r0, #42	; 0x2a
 801615a:	f000 fad5 	bl	8016708 <__raise_ams_error>
		break;
 801615e:	e001      	b.n	8016164 <HAL_GPIO_EXTI_Callback+0xc0>
		break;
 8016160:	bf00      	nop
 8016162:	e000      	b.n	8016166 <HAL_GPIO_EXTI_Callback+0xc2>
		break;
 8016164:	bf00      	nop
}
 8016166:	bf00      	nop
 8016168:	3708      	adds	r7, #8
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}
 801616e:	bf00      	nop
 8016170:	2001b6f8 	.word	0x2001b6f8

08016174 <initialize_IWDG>:

}

/* USER CODE BEGIN 1 */

void initialize_IWDG(IWDG_HandleTypeDef *hiwdg, float periodicity) {
 8016174:	b580      	push	{r7, lr}
 8016176:	b086      	sub	sp, #24
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	ed87 0a00 	vstr	s0, [r7]
	const float clock_frequency = 32000;
 8016180:	4b16      	ldr	r3, [pc, #88]	; (80161dc <initialize_IWDG+0x68>)
 8016182:	617b      	str	r3, [r7, #20]
	float prescaler = 8;
 8016184:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8016188:	613b      	str	r3, [r7, #16]
	float margin = 1.2;
 801618a:	4b15      	ldr	r3, [pc, #84]	; (80161e0 <initialize_IWDG+0x6c>)
 801618c:	60fb      	str	r3, [r7, #12]


	hiwdg->Instance = IWDG;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	4a14      	ldr	r2, [pc, #80]	; (80161e4 <initialize_IWDG+0x70>)
 8016192:	601a      	str	r2, [r3, #0]
	hiwdg->Init.Prescaler = IWDG_PRESCALER_8;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2201      	movs	r2, #1
 8016198:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = margin * clock_frequency * periodicity / prescaler;
 801619a:	ed97 7a03 	vldr	s14, [r7, #12]
 801619e:	edd7 7a05 	vldr	s15, [r7, #20]
 80161a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161a6:	edd7 7a00 	vldr	s15, [r7]
 80161aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80161ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80161b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80161b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161ba:	ee17 2a90 	vmov	r2, s15
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(hiwdg) != HAL_OK) {
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f010 fe46 	bl	8026e54 <HAL_IWDG_Init>
 80161c8:	4603      	mov	r3, r0
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d001      	beq.n	80161d2 <initialize_IWDG+0x5e>
		Error_Handler();
 80161ce:	f001 fb0b 	bl	80177e8 <Error_Handler>
	}

}
 80161d2:	bf00      	nop
 80161d4:	3718      	adds	r7, #24
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	46fa0000 	.word	0x46fa0000
 80161e0:	3f99999a 	.word	0x3f99999a
 80161e4:	40003000 	.word	0x40003000

080161e8 <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 80161e8:	b580      	push	{r7, lr}
 80161ea:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 80161ec:	f7fe fd42 	bl	8014c74 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 80161f0:	f00e fb7e 	bl	80248f0 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 80161f4:	f000 f99a 	bl	801652c <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 80161f8:	f7ff fe84 	bl	8015f04 <MX_GPIO_Init>
	MX_SPI2_Init();
 80161fc:	f001 fc0a 	bl	8017a14 <MX_SPI2_Init>
	MX_CAN1_Init();
 8016200:	f7ff f966 	bl	80154d0 <MX_CAN1_Init>
	MX_CAN2_Init();
 8016204:	f7ff f99a 	bl	801553c <MX_CAN2_Init>
	MX_TIM1_Init();
 8016208:	f001 fdd0 	bl	8017dac <MX_TIM1_Init>
	MX_DMA_Init();
 801620c:	f7ff fe5a 	bl	8015ec4 <MX_DMA_Init>
	MX_TIM3_Init();
 8016210:	f001 ff08 	bl	8018024 <MX_TIM3_Init>
	MX_TIM2_Init();
 8016214:	f001 fe6a 	bl	8017eec <MX_TIM2_Init>
	MX_ADC1_Init();
 8016218:	f7fe fe66 	bl	8014ee8 <MX_ADC1_Init>

	initialize_CAN(&hcan1, &hcan2);
 801621c:	498e      	ldr	r1, [pc, #568]	; (8016458 <main+0x270>)
 801621e:	488f      	ldr	r0, [pc, #572]	; (801645c <main+0x274>)
 8016220:	f7fd fec2 	bl	8013fa8 <initialize_CAN>
	initialize_LTC(&hspi2);
 8016224:	488e      	ldr	r0, [pc, #568]	; (8016460 <main+0x278>)
 8016226:	f7fe f9ad 	bl	8014584 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 801622a:	f013 fedf 	bl	8029fec <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 801622e:	2301      	movs	r3, #1
 8016230:	220a      	movs	r2, #10
 8016232:	4611      	mov	r1, r2
 8016234:	2200      	movs	r2, #0
 8016236:	4618      	mov	r0, r3
 8016238:	f014 f9da 	bl	802a5f0 <xQueueGenericCreate>
 801623c:	4603      	mov	r3, r0
 801623e:	4a89      	ldr	r2, [pc, #548]	; (8016464 <main+0x27c>)
 8016240:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8016242:	2301      	movs	r3, #1
 8016244:	2210      	movs	r2, #16
 8016246:	4611      	mov	r1, r2
 8016248:	2200      	movs	r2, #0
 801624a:	4618      	mov	r0, r3
 801624c:	f014 f9d0 	bl	802a5f0 <xQueueGenericCreate>
 8016250:	4603      	mov	r3, r0
 8016252:	4a85      	ldr	r2, [pc, #532]	; (8016468 <main+0x280>)
 8016254:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	CSE_queue = xQueueCreate(CSE_queue_info.element_count,
 8016256:	2301      	movs	r3, #1
 8016258:	2210      	movs	r2, #16
 801625a:	4611      	mov	r1, r2
 801625c:	2200      	movs	r2, #0
 801625e:	4618      	mov	r0, r3
 8016260:	f014 f9c6 	bl	802a5f0 <xQueueGenericCreate>
 8016264:	4603      	mov	r3, r0
 8016266:	4a81      	ldr	r2, [pc, #516]	; (801646c <main+0x284>)
 8016268:	6013      	str	r3, [r2, #0]
			CSE_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 801626a:	2301      	movs	r3, #1
 801626c:	2220      	movs	r2, #32
 801626e:	4611      	mov	r1, r2
 8016270:	2200      	movs	r2, #0
 8016272:	4618      	mov	r0, r3
 8016274:	f014 f9bc 	bl	802a5f0 <xQueueGenericCreate>
 8016278:	4603      	mov	r3, r0
 801627a:	4a7d      	ldr	r2, [pc, #500]	; (8016470 <main+0x288>)
 801627c:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	PID_queue = xQueueCreate(PID_queue_info.element_count,
 801627e:	2301      	movs	r3, #1
 8016280:	2208      	movs	r2, #8
 8016282:	4611      	mov	r1, r2
 8016284:	2200      	movs	r2, #0
 8016286:	4618      	mov	r0, r3
 8016288:	f014 f9b2 	bl	802a5f0 <xQueueGenericCreate>
 801628c:	4603      	mov	r3, r0
 801628e:	4a79      	ldr	r2, [pc, #484]	; (8016474 <main+0x28c>)
 8016290:	6013      	str	r3, [r2, #0]
			PID_queue_info.element_size);

	charger_queue = xQueueCreate(charger_queue_info.element_count,
 8016292:	2301      	movs	r3, #1
 8016294:	2218      	movs	r2, #24
 8016296:	4611      	mov	r1, r2
 8016298:	2200      	movs	r2, #0
 801629a:	4618      	mov	r0, r3
 801629c:	f014 f9a8 	bl	802a5f0 <xQueueGenericCreate>
 80162a0:	4603      	mov	r3, r0
 80162a2:	4a75      	ldr	r2, [pc, #468]	; (8016478 <main+0x290>)
 80162a4:	6013      	str	r3, [r2, #0]
			charger_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 80162a6:	2301      	movs	r3, #1
 80162a8:	2208      	movs	r2, #8
 80162aa:	4611      	mov	r1, r2
 80162ac:	2200      	movs	r2, #0
 80162ae:	4618      	mov	r0, r3
 80162b0:	f014 f99e 	bl	802a5f0 <xQueueGenericCreate>
 80162b4:	4603      	mov	r3, r0
 80162b6:	4a71      	ldr	r2, [pc, #452]	; (801647c <main+0x294>)
 80162b8:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 80162ba:	2301      	movs	r3, #1
 80162bc:	2208      	movs	r2, #8
 80162be:	4611      	mov	r1, r2
 80162c0:	2200      	movs	r2, #0
 80162c2:	4618      	mov	r0, r3
 80162c4:	f014 f994 	bl	802a5f0 <xQueueGenericCreate>
 80162c8:	4603      	mov	r3, r0
 80162ca:	4a6d      	ldr	r2, [pc, #436]	; (8016480 <main+0x298>)
 80162cc:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 80162ce:	2301      	movs	r3, #1
 80162d0:	2208      	movs	r2, #8
 80162d2:	4611      	mov	r1, r2
 80162d4:	2200      	movs	r2, #0
 80162d6:	4618      	mov	r0, r3
 80162d8:	f014 f98a 	bl	802a5f0 <xQueueGenericCreate>
 80162dc:	4603      	mov	r3, r0
 80162de:	4a69      	ldr	r2, [pc, #420]	; (8016484 <main+0x29c>)
 80162e0:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 80162e2:	2301      	movs	r3, #1
 80162e4:	2204      	movs	r2, #4
 80162e6:	4611      	mov	r1, r2
 80162e8:	2200      	movs	r2, #0
 80162ea:	4618      	mov	r0, r3
 80162ec:	f014 f980 	bl	802a5f0 <xQueueGenericCreate>
 80162f0:	4603      	mov	r3, r0
 80162f2:	4a65      	ldr	r2, [pc, #404]	; (8016488 <main+0x2a0>)
 80162f4:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 80162f6:	2301      	movs	r3, #1
 80162f8:	2204      	movs	r2, #4
 80162fa:	4611      	mov	r1, r2
 80162fc:	2200      	movs	r2, #0
 80162fe:	4618      	mov	r0, r3
 8016300:	f014 f976 	bl	802a5f0 <xQueueGenericCreate>
 8016304:	4603      	mov	r3, r0
 8016306:	4a61      	ldr	r2, [pc, #388]	; (801648c <main+0x2a4>)
 8016308:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 801630a:	2301      	movs	r3, #1
 801630c:	2201      	movs	r2, #1
 801630e:	4611      	mov	r1, r2
 8016310:	2200      	movs	r2, #0
 8016312:	4618      	mov	r0, r3
 8016314:	f014 f96c 	bl	802a5f0 <xQueueGenericCreate>
 8016318:	4603      	mov	r3, r0
 801631a:	4a5d      	ldr	r2, [pc, #372]	; (8016490 <main+0x2a8>)
 801631c:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 801631e:	2301      	movs	r3, #1
 8016320:	2201      	movs	r2, #1
 8016322:	4611      	mov	r1, r2
 8016324:	2200      	movs	r2, #0
 8016326:	4618      	mov	r0, r3
 8016328:	f014 f962 	bl	802a5f0 <xQueueGenericCreate>
 801632c:	4603      	mov	r3, r0
 801632e:	4a59      	ldr	r2, [pc, #356]	; (8016494 <main+0x2ac>)
 8016330:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8016332:	2301      	movs	r3, #1
 8016334:	2201      	movs	r2, #1
 8016336:	4611      	mov	r1, r2
 8016338:	2200      	movs	r2, #0
 801633a:	4618      	mov	r0, r3
 801633c:	f014 f958 	bl	802a5f0 <xQueueGenericCreate>
 8016340:	4603      	mov	r3, r0
 8016342:	4a55      	ldr	r2, [pc, #340]	; (8016498 <main+0x2b0>)
 8016344:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 8016346:	2301      	movs	r3, #1
 8016348:	2201      	movs	r2, #1
 801634a:	4611      	mov	r1, r2
 801634c:	2200      	movs	r2, #0
 801634e:	4618      	mov	r0, r3
 8016350:	f014 f94e 	bl	802a5f0 <xQueueGenericCreate>
 8016354:	4603      	mov	r3, r0
 8016356:	4a51      	ldr	r2, [pc, #324]	; (801649c <main+0x2b4>)
 8016358:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 801635a:	2301      	movs	r3, #1
 801635c:	2201      	movs	r2, #1
 801635e:	4611      	mov	r1, r2
 8016360:	2200      	movs	r2, #0
 8016362:	4618      	mov	r0, r3
 8016364:	f014 f944 	bl	802a5f0 <xQueueGenericCreate>
 8016368:	4603      	mov	r3, r0
 801636a:	4a4d      	ldr	r2, [pc, #308]	; (80164a0 <main+0x2b8>)
 801636c:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 801636e:	f013 fe87 	bl	802a080 <osKernelGetTickCount>
 8016372:	4603      	mov	r3, r0
 8016374:	4618      	mov	r0, r3
 8016376:	f7ea f8b7 	bl	80004e8 <__aeabi_ui2d>
 801637a:	a335      	add	r3, pc, #212	; (adr r3, 8016450 <main+0x268>)
 801637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016380:	f7e9 ff76 	bl	8000270 <__adddf3>
 8016384:	4602      	mov	r2, r0
 8016386:	460b      	mov	r3, r1
 8016388:	4610      	mov	r0, r2
 801638a:	4619      	mov	r1, r3
 801638c:	f7ea fbfe 	bl	8000b8c <__aeabi_d2uiz>
 8016390:	4603      	mov	r3, r0
 8016392:	4a44      	ldr	r2, [pc, #272]	; (80164a4 <main+0x2bc>)
 8016394:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8016396:	4a44      	ldr	r2, [pc, #272]	; (80164a8 <main+0x2c0>)
 8016398:	2100      	movs	r1, #0
 801639a:	4844      	ldr	r0, [pc, #272]	; (80164ac <main+0x2c4>)
 801639c:	f013 fe85 	bl	802a0aa <osThreadNew>
 80163a0:	4603      	mov	r3, r0
 80163a2:	4a43      	ldr	r2, [pc, #268]	; (80164b0 <main+0x2c8>)
 80163a4:	6013      	str	r3, [r2, #0]

#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 80163a6:	4a43      	ldr	r2, [pc, #268]	; (80164b4 <main+0x2cc>)
 80163a8:	2100      	movs	r1, #0
 80163aa:	4843      	ldr	r0, [pc, #268]	; (80164b8 <main+0x2d0>)
 80163ac:	f013 fe7d 	bl	802a0aa <osThreadNew>
 80163b0:	4603      	mov	r3, r0
 80163b2:	4a42      	ldr	r2, [pc, #264]	; (80164bc <main+0x2d4>)
 80163b4:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 80163b6:	4a42      	ldr	r2, [pc, #264]	; (80164c0 <main+0x2d8>)
 80163b8:	2100      	movs	r1, #0
 80163ba:	4842      	ldr	r0, [pc, #264]	; (80164c4 <main+0x2dc>)
 80163bc:	f013 fe75 	bl	802a0aa <osThreadNew>
 80163c0:	4603      	mov	r3, r0
 80163c2:	4a41      	ldr	r2, [pc, #260]	; (80164c8 <main+0x2e0>)
 80163c4:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 80163c6:	4a41      	ldr	r2, [pc, #260]	; (80164cc <main+0x2e4>)
 80163c8:	2100      	movs	r1, #0
 80163ca:	4841      	ldr	r0, [pc, #260]	; (80164d0 <main+0x2e8>)
 80163cc:	f013 fe6d 	bl	802a0aa <osThreadNew>
 80163d0:	4603      	mov	r3, r0
 80163d2:	4a40      	ldr	r2, [pc, #256]	; (80164d4 <main+0x2ec>)
 80163d4:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 80163d6:	4a40      	ldr	r2, [pc, #256]	; (80164d8 <main+0x2f0>)
 80163d8:	2100      	movs	r1, #0
 80163da:	4840      	ldr	r0, [pc, #256]	; (80164dc <main+0x2f4>)
 80163dc:	f013 fe65 	bl	802a0aa <osThreadNew>
 80163e0:	4603      	mov	r3, r0
 80163e2:	4a3f      	ldr	r2, [pc, #252]	; (80164e0 <main+0x2f8>)
 80163e4:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 80163e6:	4a3f      	ldr	r2, [pc, #252]	; (80164e4 <main+0x2fc>)
 80163e8:	2100      	movs	r1, #0
 80163ea:	483f      	ldr	r0, [pc, #252]	; (80164e8 <main+0x300>)
 80163ec:	f013 fe5d 	bl	802a0aa <osThreadNew>
 80163f0:	4603      	mov	r3, r0
 80163f2:	4a3e      	ldr	r2, [pc, #248]	; (80164ec <main+0x304>)
 80163f4:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 80163f6:	4a3e      	ldr	r2, [pc, #248]	; (80164f0 <main+0x308>)
 80163f8:	2100      	movs	r1, #0
 80163fa:	483e      	ldr	r0, [pc, #248]	; (80164f4 <main+0x30c>)
 80163fc:	f013 fe55 	bl	802a0aa <osThreadNew>
 8016400:	4603      	mov	r3, r0
 8016402:	4a3d      	ldr	r2, [pc, #244]	; (80164f8 <main+0x310>)
 8016404:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 8016406:	4a3d      	ldr	r2, [pc, #244]	; (80164fc <main+0x314>)
 8016408:	2100      	movs	r1, #0
 801640a:	483d      	ldr	r0, [pc, #244]	; (8016500 <main+0x318>)
 801640c:	f013 fe4d 	bl	802a0aa <osThreadNew>
 8016410:	4603      	mov	r3, r0
 8016412:	4a3c      	ldr	r2, [pc, #240]	; (8016504 <main+0x31c>)
 8016414:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8016416:	4a3c      	ldr	r2, [pc, #240]	; (8016508 <main+0x320>)
 8016418:	2100      	movs	r1, #0
 801641a:	483c      	ldr	r0, [pc, #240]	; (801650c <main+0x324>)
 801641c:	f013 fe45 	bl	802a0aa <osThreadNew>
 8016420:	4603      	mov	r3, r0
 8016422:	4a3b      	ldr	r2, [pc, #236]	; (8016510 <main+0x328>)
 8016424:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8016426:	4a3b      	ldr	r2, [pc, #236]	; (8016514 <main+0x32c>)
 8016428:	2100      	movs	r1, #0
 801642a:	483b      	ldr	r0, [pc, #236]	; (8016518 <main+0x330>)
 801642c:	f013 fe3d 	bl	802a0aa <osThreadNew>
 8016430:	4603      	mov	r3, r0
 8016432:	4a3a      	ldr	r2, [pc, #232]	; (801651c <main+0x334>)
 8016434:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8016436:	4a3a      	ldr	r2, [pc, #232]	; (8016520 <main+0x338>)
 8016438:	2100      	movs	r1, #0
 801643a:	483a      	ldr	r0, [pc, #232]	; (8016524 <main+0x33c>)
 801643c:	f013 fe35 	bl	802a0aa <osThreadNew>
 8016440:	4603      	mov	r3, r0
 8016442:	4a39      	ldr	r2, [pc, #228]	; (8016528 <main+0x340>)
 8016444:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8016446:	f013 fdf5 	bl	802a034 <osKernelStart>

	for (;;)
 801644a:	e7fe      	b.n	801644a <main+0x262>
 801644c:	f3af 8000 	nop.w
 8016450:	aaaaaaab 	.word	0xaaaaaaab
 8016454:	406a0aaa 	.word	0x406a0aaa
 8016458:	2001bf90 	.word	0x2001bf90
 801645c:	2001bfb8 	.word	0x2001bfb8
 8016460:	2001c08c 	.word	0x2001c08c
 8016464:	2001b730 	.word	0x2001b730
 8016468:	2001b718 	.word	0x2001b718
 801646c:	2001b73c 	.word	0x2001b73c
 8016470:	2001b710 	.word	0x2001b710
 8016474:	2001b728 	.word	0x2001b728
 8016478:	2001b72c 	.word	0x2001b72c
 801647c:	2001b734 	.word	0x2001b734
 8016480:	2001b724 	.word	0x2001b724
 8016484:	2001b740 	.word	0x2001b740
 8016488:	2001b704 	.word	0x2001b704
 801648c:	2001b720 	.word	0x2001b720
 8016490:	2001b708 	.word	0x2001b708
 8016494:	2001b71c 	.word	0x2001b71c
 8016498:	2001b738 	.word	0x2001b738
 801649c:	2001b70c 	.word	0x2001b70c
 80164a0:	2001b714 	.word	0x2001b714
 80164a4:	2001c080 	.word	0x2001c080
 80164a8:	0802fa94 	.word	0x0802fa94
 80164ac:	08016791 	.word	0x08016791
 80164b0:	2001c068 	.word	0x2001c068
 80164b4:	0802fac4 	.word	0x0802fac4
 80164b8:	080175a9 	.word	0x080175a9
 80164bc:	2001c06c 	.word	0x2001c06c
 80164c0:	0802fb24 	.word	0x0802fb24
 80164c4:	080170d1 	.word	0x080170d1
 80164c8:	2001c074 	.word	0x2001c074
 80164cc:	0802fc14 	.word	0x0802fc14
 80164d0:	08016b21 	.word	0x08016b21
 80164d4:	2001c088 	.word	0x2001c088
 80164d8:	0802fbe4 	.word	0x0802fbe4
 80164dc:	08016c01 	.word	0x08016c01
 80164e0:	2001c064 	.word	0x2001c064
 80164e4:	0802fbb4 	.word	0x0802fbb4
 80164e8:	08016cf1 	.word	0x08016cf1
 80164ec:	2001c078 	.word	0x2001c078
 80164f0:	0802faf4 	.word	0x0802faf4
 80164f4:	08017261 	.word	0x08017261
 80164f8:	2001c070 	.word	0x2001c070
 80164fc:	0802fb54 	.word	0x0802fb54
 8016500:	08016fd9 	.word	0x08016fd9
 8016504:	2001c07c 	.word	0x2001c07c
 8016508:	0802fb84 	.word	0x0802fb84
 801650c:	08016dd1 	.word	0x08016dd1
 8016510:	2001c060 	.word	0x2001c060
 8016514:	0802fc74 	.word	0x0802fc74
 8016518:	080174e9 	.word	0x080174e9
 801651c:	2001c084 	.word	0x2001c084
 8016520:	0802fc44 	.word	0x0802fc44
 8016524:	080173f1 	.word	0x080173f1
 8016528:	2001c05c 	.word	0x2001c05c

0801652c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 801652c:	b580      	push	{r7, lr}
 801652e:	b094      	sub	sp, #80	; 0x50
 8016530:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8016532:	f107 0320 	add.w	r3, r7, #32
 8016536:	2230      	movs	r2, #48	; 0x30
 8016538:	2100      	movs	r1, #0
 801653a:	4618      	mov	r0, r3
 801653c:	f018 f9f8 	bl	802e930 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8016540:	f107 030c 	add.w	r3, r7, #12
 8016544:	2200      	movs	r2, #0
 8016546:	601a      	str	r2, [r3, #0]
 8016548:	605a      	str	r2, [r3, #4]
 801654a:	609a      	str	r2, [r3, #8]
 801654c:	60da      	str	r2, [r3, #12]
 801654e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8016550:	2300      	movs	r3, #0
 8016552:	60bb      	str	r3, [r7, #8]
 8016554:	4b29      	ldr	r3, [pc, #164]	; (80165fc <SystemClock_Config+0xd0>)
 8016556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016558:	4a28      	ldr	r2, [pc, #160]	; (80165fc <SystemClock_Config+0xd0>)
 801655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801655e:	6413      	str	r3, [r2, #64]	; 0x40
 8016560:	4b26      	ldr	r3, [pc, #152]	; (80165fc <SystemClock_Config+0xd0>)
 8016562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016568:	60bb      	str	r3, [r7, #8]
 801656a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801656c:	2300      	movs	r3, #0
 801656e:	607b      	str	r3, [r7, #4]
 8016570:	4b23      	ldr	r3, [pc, #140]	; (8016600 <SystemClock_Config+0xd4>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	4a22      	ldr	r2, [pc, #136]	; (8016600 <SystemClock_Config+0xd4>)
 8016576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801657a:	6013      	str	r3, [r2, #0]
 801657c:	4b20      	ldr	r3, [pc, #128]	; (8016600 <SystemClock_Config+0xd4>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016584:	607b      	str	r3, [r7, #4]
 8016586:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8016588:	230a      	movs	r3, #10
 801658a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801658c:	2301      	movs	r3, #1
 801658e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8016590:	2310      	movs	r3, #16
 8016592:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8016594:	2301      	movs	r3, #1
 8016596:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016598:	2302      	movs	r3, #2
 801659a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801659c:	2300      	movs	r3, #0
 801659e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80165a0:	2308      	movs	r3, #8
 80165a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 80165a4:	23a0      	movs	r3, #160	; 0xa0
 80165a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80165a8:	2302      	movs	r3, #2
 80165aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80165ac:	2304      	movs	r3, #4
 80165ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80165b0:	f107 0320 	add.w	r3, r7, #32
 80165b4:	4618      	mov	r0, r3
 80165b6:	f010 fc9f 	bl	8026ef8 <HAL_RCC_OscConfig>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d001      	beq.n	80165c4 <SystemClock_Config+0x98>
		Error_Handler();
 80165c0:	f001 f912 	bl	80177e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80165c4:	230f      	movs	r3, #15
 80165c6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80165c8:	2302      	movs	r3, #2
 80165ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80165cc:	2300      	movs	r3, #0
 80165ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80165d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80165d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80165d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80165da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80165dc:	f107 030c 	add.w	r3, r7, #12
 80165e0:	2105      	movs	r1, #5
 80165e2:	4618      	mov	r0, r3
 80165e4:	f010 ff00 	bl	80273e8 <HAL_RCC_ClockConfig>
 80165e8:	4603      	mov	r3, r0
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d001      	beq.n	80165f2 <SystemClock_Config+0xc6>
		Error_Handler();
 80165ee:	f001 f8fb 	bl	80177e8 <Error_Handler>
	}
}
 80165f2:	bf00      	nop
 80165f4:	3750      	adds	r7, #80	; 0x50
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}
 80165fa:	bf00      	nop
 80165fc:	40023800 	.word	0x40023800
 8016600:	40007000 	.word	0x40007000

08016604 <__wait_for_data>:
#define WAIT_FOR_ACCUMULATOR_VOLTAGE	0x0004
#define WAIT_FOR_ACCUMULATOR_CURRENT	0x0008
#define WAIT_FOR_VEHICLE_VOLTAGE		0x0010
#define WAIT_FOR_ALL 					0x001F

void __wait_for_data(uint16_t FLAGS) {
 8016604:	b580      	push	{r7, lr}
 8016606:	b088      	sub	sp, #32
 8016608:	af00      	add	r7, sp, #0
 801660a:	4603      	mov	r3, r0
 801660c:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = FLAGS;
 801660e:	88fb      	ldrh	r3, [r7, #6]
 8016610:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8016612:	e067      	b.n	80166e4 <__wait_for_data+0xe0>
		osDelay(0.500 * TICK2HZ);
 8016614:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8016618:	f013 fdd9 	bl	802a1ce <osDelay>
		if (FLAGS & WAIT_FOR_CELL_VOLTAGES) {
 801661c:	88fb      	ldrh	r3, [r7, #6]
 801661e:	f003 0301 	and.w	r3, r3, #1
 8016622:	2b00      	cmp	r3, #0
 8016624:	d00e      	beq.n	8016644 <__wait_for_data+0x40>
			if (xQueuePeek(cell_voltages_queue, &_dptr, 0)) {
 8016626:	4b33      	ldr	r3, [pc, #204]	; (80166f4 <__wait_for_data+0xf0>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	f107 010c 	add.w	r1, r7, #12
 801662e:	2200      	movs	r2, #0
 8016630:	4618      	mov	r0, r3
 8016632:	f014 fb27 	bl	802ac84 <xQueuePeek>
 8016636:	4603      	mov	r3, r0
 8016638:	2b00      	cmp	r3, #0
 801663a:	d003      	beq.n	8016644 <__wait_for_data+0x40>
				NOT_OK &= ~WAIT_FOR_CELL_VOLTAGES;
 801663c:	7ffb      	ldrb	r3, [r7, #31]
 801663e:	f023 0301 	bic.w	r3, r3, #1
 8016642:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_CELL_TEMPERATURES) {
 8016644:	88fb      	ldrh	r3, [r7, #6]
 8016646:	f003 0302 	and.w	r3, r3, #2
 801664a:	2b00      	cmp	r3, #0
 801664c:	d00e      	beq.n	801666c <__wait_for_data+0x68>
			if (xQueuePeek(cell_temperatures_queue, &_dptr, 0)) {
 801664e:	4b2a      	ldr	r3, [pc, #168]	; (80166f8 <__wait_for_data+0xf4>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	f107 010c 	add.w	r1, r7, #12
 8016656:	2200      	movs	r2, #0
 8016658:	4618      	mov	r0, r3
 801665a:	f014 fb13 	bl	802ac84 <xQueuePeek>
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	d003      	beq.n	801666c <__wait_for_data+0x68>
				NOT_OK &= ~WAIT_FOR_CELL_TEMPERATURES;
 8016664:	7ffb      	ldrb	r3, [r7, #31]
 8016666:	f023 0302 	bic.w	r3, r3, #2
 801666a:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_CURRENT) {
 801666c:	88fb      	ldrh	r3, [r7, #6]
 801666e:	f003 0308 	and.w	r3, r3, #8
 8016672:	2b00      	cmp	r3, #0
 8016674:	d00e      	beq.n	8016694 <__wait_for_data+0x90>
			if (xQueuePeek(accumulator_current_queue, &_d, 0)) {
 8016676:	4b21      	ldr	r3, [pc, #132]	; (80166fc <__wait_for_data+0xf8>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f107 0110 	add.w	r1, r7, #16
 801667e:	2200      	movs	r2, #0
 8016680:	4618      	mov	r0, r3
 8016682:	f014 faff 	bl	802ac84 <xQueuePeek>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d003      	beq.n	8016694 <__wait_for_data+0x90>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_CURRENT;
 801668c:	7ffb      	ldrb	r3, [r7, #31]
 801668e:	f023 0308 	bic.w	r3, r3, #8
 8016692:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_ACCUMULATOR_VOLTAGE) {
 8016694:	88fb      	ldrh	r3, [r7, #6]
 8016696:	f003 0304 	and.w	r3, r3, #4
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00e      	beq.n	80166bc <__wait_for_data+0xb8>
			if (xQueuePeek(accumulator_voltage_queue, &_d, 0)) {
 801669e:	4b18      	ldr	r3, [pc, #96]	; (8016700 <__wait_for_data+0xfc>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	f107 0110 	add.w	r1, r7, #16
 80166a6:	2200      	movs	r2, #0
 80166a8:	4618      	mov	r0, r3
 80166aa:	f014 faeb 	bl	802ac84 <xQueuePeek>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d003      	beq.n	80166bc <__wait_for_data+0xb8>
				NOT_OK &= ~WAIT_FOR_ACCUMULATOR_VOLTAGE;
 80166b4:	7ffb      	ldrb	r3, [r7, #31]
 80166b6:	f023 0304 	bic.w	r3, r3, #4
 80166ba:	77fb      	strb	r3, [r7, #31]
			}
		}
		if (FLAGS & WAIT_FOR_VEHICLE_VOLTAGE) {
 80166bc:	88fb      	ldrh	r3, [r7, #6]
 80166be:	f003 0310 	and.w	r3, r3, #16
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00e      	beq.n	80166e4 <__wait_for_data+0xe0>
			if (xQueuePeek(vehicle_voltage_queue, &_d, 0)) {
 80166c6:	4b0f      	ldr	r3, [pc, #60]	; (8016704 <__wait_for_data+0x100>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f107 0110 	add.w	r1, r7, #16
 80166ce:	2200      	movs	r2, #0
 80166d0:	4618      	mov	r0, r3
 80166d2:	f014 fad7 	bl	802ac84 <xQueuePeek>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d003      	beq.n	80166e4 <__wait_for_data+0xe0>
				NOT_OK &= ~WAIT_FOR_VEHICLE_VOLTAGE;
 80166dc:	7ffb      	ldrb	r3, [r7, #31]
 80166de:	f023 0310 	bic.w	r3, r3, #16
 80166e2:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 80166e4:	7ffb      	ldrb	r3, [r7, #31]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d194      	bne.n	8016614 <__wait_for_data+0x10>
			}
		}
	}
}
 80166ea:	bf00      	nop
 80166ec:	bf00      	nop
 80166ee:	3720      	adds	r7, #32
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	2001b704 	.word	0x2001b704
 80166f8:	2001b720 	.word	0x2001b720
 80166fc:	2001b740 	.word	0x2001b740
 8016700:	2001b734 	.word	0x2001b734
 8016704:	2001b724 	.word	0x2001b724

08016708 <__raise_ams_error>:

void __raise_ams_error(error_t error) {
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 8016712:	2001      	movs	r0, #1
 8016714:	f001 f90a 	bl	801792c <set_ams_error_ext>
	__error = error;
 8016718:	79fa      	ldrb	r2, [r7, #7]
 801671a:	4b09      	ldr	r3, [pc, #36]	; (8016740 <__raise_ams_error+0x38>)
 801671c:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 801671e:	79fb      	ldrb	r3, [r7, #7]
 8016720:	4619      	mov	r1, r3
 8016722:	4808      	ldr	r0, [pc, #32]	; (8016744 <__raise_ams_error+0x3c>)
 8016724:	f018 f82e 	bl	802e784 <SEGGER_SYSVIEW_PrintfHost>
#endif
	xQueueOverwrite(error_queue, &error);
 8016728:	4b07      	ldr	r3, [pc, #28]	; (8016748 <__raise_ams_error+0x40>)
 801672a:	6818      	ldr	r0, [r3, #0]
 801672c:	1df9      	adds	r1, r7, #7
 801672e:	2302      	movs	r3, #2
 8016730:	2200      	movs	r2, #0
 8016732:	f013 ffc1 	bl	802a6b8 <xQueueGenericSend>
}
 8016736:	bf00      	nop
 8016738:	3708      	adds	r7, #8
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}
 801673e:	bf00      	nop
 8016740:	2001b6f4 	.word	0x2001b6f4
 8016744:	0802f63c 	.word	0x0802f63c
 8016748:	2001b714 	.word	0x2001b714

0801674c <__raise_imd_error>:

void __raise_imd_error(error_t error) {
 801674c:	b580      	push	{r7, lr}
 801674e:	b082      	sub	sp, #8
 8016750:	af00      	add	r7, sp, #0
 8016752:	4603      	mov	r3, r0
 8016754:	71fb      	strb	r3, [r7, #7]
	set_imd_error_ext(1);
 8016756:	2001      	movs	r0, #1
 8016758:	f001 f908 	bl	801796c <set_imd_error_ext>
	__error = error;
 801675c:	79fa      	ldrb	r2, [r7, #7]
 801675e:	4b09      	ldr	r3, [pc, #36]	; (8016784 <__raise_imd_error+0x38>)
 8016760:	701a      	strb	r2, [r3, #0]
#ifdef STREAM_DATA
	SEGGER_SYSVIEW_PrintfHost("error %i", error);
 8016762:	79fb      	ldrb	r3, [r7, #7]
 8016764:	4619      	mov	r1, r3
 8016766:	4808      	ldr	r0, [pc, #32]	; (8016788 <__raise_imd_error+0x3c>)
 8016768:	f018 f80c 	bl	802e784 <SEGGER_SYSVIEW_PrintfHost>
#endif
	xQueueOverwrite(error_queue, &error);
 801676c:	4b07      	ldr	r3, [pc, #28]	; (801678c <__raise_imd_error+0x40>)
 801676e:	6818      	ldr	r0, [r3, #0]
 8016770:	1df9      	adds	r1, r7, #7
 8016772:	2302      	movs	r3, #2
 8016774:	2200      	movs	r2, #0
 8016776:	f013 ff9f 	bl	802a6b8 <xQueueGenericSend>
}
 801677a:	bf00      	nop
 801677c:	3708      	adds	r7, #8
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	2001b6f4 	.word	0x2001b6f4
 8016788:	0802f63c 	.word	0x0802f63c
 801678c:	2001b714 	.word	0x2001b714

08016790 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8016790:	b5b0      	push	{r4, r5, r7, lr}
 8016792:	b09a      	sub	sp, #104	; 0x68
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8016798:	f017 fb5e 	bl	802de58 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 801679c:	4baa      	ldr	r3, [pc, #680]	; (8016a48 <start_SM_task+0x2b8>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 80167a2:	4baa      	ldr	r3, [pc, #680]	; (8016a4c <start_SM_task+0x2bc>)
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7e9 fec1 	bl	800052c <__aeabi_f2d>
 80167aa:	a3a5      	add	r3, pc, #660	; (adr r3, 8016a40 <start_SM_task+0x2b0>)
 80167ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b0:	f7e9 ff14 	bl	80005dc <__aeabi_dmul>
 80167b4:	4602      	mov	r2, r0
 80167b6:	460b      	mov	r3, r1
 80167b8:	4610      	mov	r0, r2
 80167ba:	4619      	mov	r1, r3
 80167bc:	f7ea f9e6 	bl	8000b8c <__aeabi_d2uiz>
 80167c0:	4603      	mov	r3, r0
 80167c2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Make task-specific structures */
	charger_t charger;
	ams_inputs.Ts = SM_task_info.periodicity;
 80167c4:	4aa1      	ldr	r2, [pc, #644]	; (8016a4c <start_SM_task+0x2bc>)
 80167c6:	4ba2      	ldr	r3, [pc, #648]	; (8016a50 <start_SM_task+0x2c0>)
 80167c8:	63da      	str	r2, [r3, #60]	; 0x3c
	double mean;
	double variance;
	double maximum;

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 80167ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80167cc:	f7e9 fe8c 	bl	80004e8 <__aeabi_ui2d>
 80167d0:	4604      	mov	r4, r0
 80167d2:	460d      	mov	r5, r1
 80167d4:	f04f 0300 	mov.w	r3, #0
 80167d8:	4618      	mov	r0, r3
 80167da:	f7e9 fea7 	bl	800052c <__aeabi_f2d>
 80167de:	a398      	add	r3, pc, #608	; (adr r3, 8016a40 <start_SM_task+0x2b0>)
 80167e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e4:	f7e9 fefa 	bl	80005dc <__aeabi_dmul>
 80167e8:	4602      	mov	r2, r0
 80167ea:	460b      	mov	r3, r1
 80167ec:	4620      	mov	r0, r4
 80167ee:	4629      	mov	r1, r5
 80167f0:	f7e9 fd3e 	bl	8000270 <__adddf3>
 80167f4:	4602      	mov	r2, r0
 80167f6:	460b      	mov	r3, r1
 80167f8:	4610      	mov	r0, r2
 80167fa:	4619      	mov	r1, r3
 80167fc:	f7ea f9c6 	bl	8000b8c <__aeabi_d2uiz>
 8016800:	4603      	mov	r3, r0
 8016802:	667b      	str	r3, [r7, #100]	; 0x64
	osDelayUntil(next_tick);
 8016804:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8016806:	f013 fcfd 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 801680a:	201f      	movs	r0, #31
 801680c:	f7ff fefa 	bl	8016604 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8016810:	4b90      	ldr	r3, [pc, #576]	; (8016a54 <start_SM_task+0x2c4>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	f107 010c 	add.w	r1, r7, #12
 8016818:	2200      	movs	r2, #0
 801681a:	4618      	mov	r0, r3
 801681c:	f014 fa32 	bl	802ac84 <xQueuePeek>
 8016820:	4603      	mov	r3, r0
 8016822:	2b00      	cmp	r3, #0
 8016824:	f000 8134 	beq.w	8016a90 <start_SM_task+0x300>
				&& xQueuePeek(accumulator_current_queue,
 8016828:	4b8b      	ldr	r3, [pc, #556]	; (8016a58 <start_SM_task+0x2c8>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2200      	movs	r2, #0
 801682e:	498b      	ldr	r1, [pc, #556]	; (8016a5c <start_SM_task+0x2cc>)
 8016830:	4618      	mov	r0, r3
 8016832:	f014 fa27 	bl	802ac84 <xQueuePeek>
 8016836:	4603      	mov	r3, r0
 8016838:	2b00      	cmp	r3, #0
 801683a:	f000 8129 	beq.w	8016a90 <start_SM_task+0x300>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 801683e:	4b88      	ldr	r3, [pc, #544]	; (8016a60 <start_SM_task+0x2d0>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2200      	movs	r2, #0
 8016844:	4982      	ldr	r1, [pc, #520]	; (8016a50 <start_SM_task+0x2c0>)
 8016846:	4618      	mov	r0, r3
 8016848:	f014 fa1c 	bl	802ac84 <xQueuePeek>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	f000 811e 	beq.w	8016a90 <start_SM_task+0x300>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 8016854:	4b83      	ldr	r3, [pc, #524]	; (8016a64 <start_SM_task+0x2d4>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	2200      	movs	r2, #0
 801685a:	4983      	ldr	r1, [pc, #524]	; (8016a68 <start_SM_task+0x2d8>)
 801685c:	4618      	mov	r0, r3
 801685e:	f014 fa11 	bl	802ac84 <xQueuePeek>
 8016862:	4603      	mov	r3, r0
 8016864:	2b00      	cmp	r3, #0
 8016866:	f000 8113 	beq.w	8016a90 <start_SM_task+0x300>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 801686a:	f04f 0200 	mov.w	r2, #0
 801686e:	f04f 0300 	mov.w	r3, #0
 8016872:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				variance = 0;
 8016876:	f04f 0200 	mov.w	r2, #0
 801687a:	f04f 0300 	mov.w	r3, #0
 801687e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				maximum = cell_voltages[0];
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016888:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				minimum = cell_voltages[0];
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016892:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 8016896:	2300      	movs	r3, #0
 8016898:	63fb      	str	r3, [r7, #60]	; 0x3c
 801689a:	e03a      	b.n	8016912 <start_SM_task+0x182>
					mean += cell_voltages[i];
 801689c:	68fa      	ldr	r2, [r7, #12]
 801689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168a0:	00db      	lsls	r3, r3, #3
 80168a2:	4413      	add	r3, r2
 80168a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80168ac:	f7e9 fce0 	bl	8000270 <__adddf3>
 80168b0:	4602      	mov	r2, r0
 80168b2:	460b      	mov	r3, r1
 80168b4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					if (cell_voltages[i] > maximum) {
 80168b8:	68fa      	ldr	r2, [r7, #12]
 80168ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168bc:	00db      	lsls	r3, r3, #3
 80168be:	4413      	add	r3, r2
 80168c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80168c8:	f7ea f8fa 	bl	8000ac0 <__aeabi_dcmplt>
 80168cc:	4603      	mov	r3, r0
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d007      	beq.n	80168e2 <start_SM_task+0x152>
						maximum = cell_voltages[i];
 80168d2:	68fa      	ldr	r2, [r7, #12]
 80168d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168d6:	00db      	lsls	r3, r3, #3
 80168d8:	4413      	add	r3, r2
 80168da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					}
					if (cell_voltages[i] < minimum) {
 80168e2:	68fa      	ldr	r2, [r7, #12]
 80168e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	4413      	add	r3, r2
 80168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80168f2:	f7ea f903 	bl	8000afc <__aeabi_dcmpgt>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d007      	beq.n	801690c <start_SM_task+0x17c>
						minimum = cell_voltages[i];
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	4413      	add	r3, r2
 8016904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016908:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 801690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801690e:	3301      	adds	r3, #1
 8016910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016914:	2b7d      	cmp	r3, #125	; 0x7d
 8016916:	ddc1      	ble.n	801689c <start_SM_task+0x10c>
					}
				}
				mean /= 126;
 8016918:	f04f 0200 	mov.w	r2, #0
 801691c:	4b53      	ldr	r3, [pc, #332]	; (8016a6c <start_SM_task+0x2dc>)
 801691e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016922:	f7e9 ff85 	bl	8000830 <__aeabi_ddiv>
 8016926:	4602      	mov	r2, r0
 8016928:	460b      	mov	r3, r1
 801692a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				for (int i = 0; i < 126; i++) {
 801692e:	2300      	movs	r3, #0
 8016930:	63bb      	str	r3, [r7, #56]	; 0x38
 8016932:	e020      	b.n	8016976 <start_SM_task+0x1e6>
					double svar = cell_voltages[i] - mean;
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016938:	00db      	lsls	r3, r3, #3
 801693a:	4413      	add	r3, r2
 801693c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016944:	f7e9 fc92 	bl	800026c <__aeabi_dsub>
 8016948:	4602      	mov	r2, r0
 801694a:	460b      	mov	r3, r1
 801694c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					variance += svar * svar;
 8016950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016954:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016958:	f7e9 fe40 	bl	80005dc <__aeabi_dmul>
 801695c:	4602      	mov	r2, r0
 801695e:	460b      	mov	r3, r1
 8016960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8016964:	f7e9 fc84 	bl	8000270 <__adddf3>
 8016968:	4602      	mov	r2, r0
 801696a:	460b      	mov	r3, r1
 801696c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				for (int i = 0; i < 126; i++) {
 8016970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016972:	3301      	adds	r3, #1
 8016974:	63bb      	str	r3, [r7, #56]	; 0x38
 8016976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016978:	2b7d      	cmp	r3, #125	; 0x7d
 801697a:	dddb      	ble.n	8016934 <start_SM_task+0x1a4>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 801697c:	4934      	ldr	r1, [pc, #208]	; (8016a50 <start_SM_task+0x2c0>)
 801697e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016982:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ams_inputs.maximum_cell_voltage = maximum;
 8016986:	4932      	ldr	r1, [pc, #200]	; (8016a50 <start_SM_task+0x2c0>)
 8016988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801698c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			ams_inputs.minimum_cell_voltage = minimum;
 8016990:	492f      	ldr	r1, [pc, #188]	; (8016a50 <start_SM_task+0x2c0>)
 8016992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8016996:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ams_inputs.charger_is_awake = 1;
 801699a:	4b2d      	ldr	r3, [pc, #180]	; (8016a50 <start_SM_task+0x2c0>)
 801699c:	2201      	movs	r2, #1
 801699e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			ams_inputs.ams_error = get_ams_error_latched_ext();
 80169a2:	f000 ffd7 	bl	8017954 <get_ams_error_latched_ext>
 80169a6:	4603      	mov	r3, r0
 80169a8:	461a      	mov	r2, r3
 80169aa:	4b29      	ldr	r3, [pc, #164]	; (8016a50 <start_SM_task+0x2c0>)
 80169ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			ams_inputs.imd_error = get_imd_error_latched_ext();
 80169b0:	f000 fff0 	bl	8017994 <get_imd_error_latched_ext>
 80169b4:	4603      	mov	r3, r0
 80169b6:	461a      	mov	r2, r3
 80169b8:	4b25      	ldr	r3, [pc, #148]	; (8016a50 <start_SM_task+0x2c0>)
 80169ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			ams_inputs.air_minus_closed = get_air_minus_ext();
 80169be:	f000 ff61 	bl	8017884 <get_air_minus_ext>
 80169c2:	4603      	mov	r3, r0
 80169c4:	461a      	mov	r2, r3
 80169c6:	4b22      	ldr	r3, [pc, #136]	; (8016a50 <start_SM_task+0x2c0>)
 80169c8:	721a      	strb	r2, [r3, #8]
			ams_inputs.air_plus_closed = get_air_plus_ext();
 80169ca:	f000 ff27 	bl	801781c <get_air_plus_ext>
 80169ce:	4603      	mov	r3, r0
 80169d0:	461a      	mov	r2, r3
 80169d2:	4b1f      	ldr	r3, [pc, #124]	; (8016a50 <start_SM_task+0x2c0>)
 80169d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			ams_inputs.precharge_closed = get_precharge_ext();
 80169d8:	f000 ff88 	bl	80178ec <get_precharge_ext>
 80169dc:	4603      	mov	r3, r0
 80169de:	461a      	mov	r2, r3
 80169e0:	4b1b      	ldr	r3, [pc, #108]	; (8016a50 <start_SM_task+0x2c0>)
 80169e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			ams_inputs.SC = get_sc_probe_ext();
 80169e6:	f000 ffe1 	bl	80179ac <get_sc_probe_ext>
 80169ea:	4603      	mov	r3, r0
 80169ec:	461a      	mov	r2, r3
 80169ee:	4b18      	ldr	r3, [pc, #96]	; (8016a50 <start_SM_task+0x2c0>)
 80169f0:	761a      	strb	r2, [r3, #24]

			/* Try to get the trigger signals */
			xQueueReceive(start_drive_queue, &ams_inputs.drive, 0);
 80169f2:	4b1f      	ldr	r3, [pc, #124]	; (8016a70 <start_SM_task+0x2e0>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2200      	movs	r2, #0
 80169f8:	491e      	ldr	r1, [pc, #120]	; (8016a74 <start_SM_task+0x2e4>)
 80169fa:	4618      	mov	r0, r3
 80169fc:	f014 f832 	bl	802aa64 <xQueueReceive>
			xQueueReceive(start_charge_queue, &ams_inputs.charge, 0);
 8016a00:	4b1d      	ldr	r3, [pc, #116]	; (8016a78 <start_SM_task+0x2e8>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2200      	movs	r2, #0
 8016a06:	491d      	ldr	r1, [pc, #116]	; (8016a7c <start_SM_task+0x2ec>)
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f014 f82b 	bl	802aa64 <xQueueReceive>
			xQueueReceive(start_balance_queue, &ams_inputs.balance, 0);
 8016a0e:	4b1c      	ldr	r3, [pc, #112]	; (8016a80 <start_SM_task+0x2f0>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	2200      	movs	r2, #0
 8016a14:	491b      	ldr	r1, [pc, #108]	; (8016a84 <start_SM_task+0x2f4>)
 8016a16:	4618      	mov	r0, r3
 8016a18:	f014 f824 	bl	802aa64 <xQueueReceive>

			ams_state_t state = ams_function(); // _step
 8016a1c:	f00d fee4 	bl	80247e8 <ams_function>
 8016a20:	4603      	mov	r3, r0
 8016a22:	72fb      	strb	r3, [r7, #11]

#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("state %i", state);
 8016a24:	7afb      	ldrb	r3, [r7, #11]
 8016a26:	4619      	mov	r1, r3
 8016a28:	4817      	ldr	r0, [pc, #92]	; (8016a88 <start_SM_task+0x2f8>)
 8016a2a:	f017 feab 	bl	802e784 <SEGGER_SYSVIEW_PrintfHost>
#endif
			xQueueOverwrite(state_queue, &state);
 8016a2e:	4b17      	ldr	r3, [pc, #92]	; (8016a8c <start_SM_task+0x2fc>)
 8016a30:	6818      	ldr	r0, [r3, #0]
 8016a32:	f107 010b 	add.w	r1, r7, #11
 8016a36:	2302      	movs	r3, #2
 8016a38:	2200      	movs	r2, #0
 8016a3a:	f013 fe3d 	bl	802a6b8 <xQueueGenericSend>
						&ams_inputs.vehicle_voltage, 0)) {
 8016a3e:	e02a      	b.n	8016a96 <start_SM_task+0x306>
 8016a40:	aaaaaaab 	.word	0xaaaaaaab
 8016a44:	408a0aaa 	.word	0x408a0aaa
 8016a48:	2001c080 	.word	0x2001c080
 8016a4c:	3dcccccd 	.word	0x3dcccccd
 8016a50:	2001bfe0 	.word	0x2001bfe0
 8016a54:	2001b704 	.word	0x2001b704
 8016a58:	2001b740 	.word	0x2001b740
 8016a5c:	2001c030 	.word	0x2001c030
 8016a60:	2001b734 	.word	0x2001b734
 8016a64:	2001b724 	.word	0x2001b724
 8016a68:	2001c000 	.word	0x2001c000
 8016a6c:	405f8000 	.word	0x405f8000
 8016a70:	2001b708 	.word	0x2001b708
 8016a74:	2001c038 	.word	0x2001c038
 8016a78:	2001b71c 	.word	0x2001b71c
 8016a7c:	2001c039 	.word	0x2001c039
 8016a80:	2001b738 	.word	0x2001b738
 8016a84:	2001c02a 	.word	0x2001c02a
 8016a88:	0802f648 	.word	0x0802f648
 8016a8c:	2001b70c 	.word	0x2001b70c
		} else {
			__raise_ams_error(ERROR_AMS);
 8016a90:	2003      	movs	r0, #3
 8016a92:	f7ff fe39 	bl	8016708 <__raise_ams_error>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.error) {
 8016a96:	4b20      	ldr	r3, [pc, #128]	; (8016b18 <start_SM_task+0x388>)
 8016a98:	7a1b      	ldrb	r3, [r3, #8]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d004      	beq.n	8016aa8 <start_SM_task+0x318>
			__raise_ams_error((error_t) ams_outputs.error);
 8016a9e:	4b1e      	ldr	r3, [pc, #120]	; (8016b18 <start_SM_task+0x388>)
 8016aa0:	7a1b      	ldrb	r3, [r3, #8]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7ff fe30 	bl	8016708 <__raise_ams_error>
		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 8016aa8:	a317      	add	r3, pc, #92	; (adr r3, 8016b08 <start_SM_task+0x378>)
 8016aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aae:	e9c7 2304 	strd	r2, r3, [r7, #16]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times count of cells
 8016ab2:	a317      	add	r3, pc, #92	; (adr r3, 8016b10 <start_SM_task+0x380>)
 8016ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		charger.enable_charger = ams_outputs.enable_charger;
 8016abc:	4b16      	ldr	r3, [pc, #88]	; (8016b18 <start_SM_task+0x388>)
 8016abe:	791b      	ldrb	r3, [r3, #4]
 8016ac0:	f887 3020 	strb.w	r3, [r7, #32]

		xQueueOverwrite(charger_queue, &charger);
 8016ac4:	4b15      	ldr	r3, [pc, #84]	; (8016b1c <start_SM_task+0x38c>)
 8016ac6:	6818      	ldr	r0, [r3, #0]
 8016ac8:	f107 0110 	add.w	r1, r7, #16
 8016acc:	2302      	movs	r3, #2
 8016ace:	2200      	movs	r2, #0
 8016ad0:	f013 fdf2 	bl	802a6b8 <xQueueGenericSend>

		set_air_minus_ext(ams_outputs.close_air_minus);
 8016ad4:	4b10      	ldr	r3, [pc, #64]	; (8016b18 <start_SM_task+0x388>)
 8016ad6:	799b      	ldrb	r3, [r3, #6]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f000 febf 	bl	801785c <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 8016ade:	4b0e      	ldr	r3, [pc, #56]	; (8016b18 <start_SM_task+0x388>)
 8016ae0:	78db      	ldrb	r3, [r3, #3]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f000 fe86 	bl	80177f4 <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 8016ae8:	4b0b      	ldr	r3, [pc, #44]	; (8016b18 <start_SM_task+0x388>)
 8016aea:	79db      	ldrb	r3, [r3, #7]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f000 fee9 	bl	80178c4 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 8016af2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016af6:	4413      	add	r3, r2
 8016af8:	667b      	str	r3, [r7, #100]	; 0x64
		osDelayUntil(next_tick);
 8016afa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8016afc:	f013 fb82 	bl	802a204 <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 8016b00:	e686      	b.n	8016810 <start_SM_task+0x80>
 8016b02:	bf00      	nop
 8016b04:	f3af 8000 	nop.w
 8016b08:	66666666 	.word	0x66666666
 8016b0c:	402a6666 	.word	0x402a6666
 8016b10:	33333334 	.word	0x33333334
 8016b14:	40805733 	.word	0x40805733
 8016b18:	2001c040 	.word	0x2001c040
 8016b1c:	2001b72c 	.word	0x2001b72c

08016b20 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8016b20:	b5b0      	push	{r4, r5, r7, lr}
 8016b22:	b08a      	sub	sp, #40	; 0x28
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016b28:	4b2f      	ldr	r3, [pc, #188]	; (8016be8 <start_IMD_task+0xc8>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8016b2e:	4b2f      	ldr	r3, [pc, #188]	; (8016bec <start_IMD_task+0xcc>)
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7e9 fcfb 	bl	800052c <__aeabi_f2d>
 8016b36:	a32a      	add	r3, pc, #168	; (adr r3, 8016be0 <start_IMD_task+0xc0>)
 8016b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3c:	f7e9 fd4e 	bl	80005dc <__aeabi_dmul>
 8016b40:	4602      	mov	r2, r0
 8016b42:	460b      	mov	r3, r1
 8016b44:	4610      	mov	r0, r2
 8016b46:	4619      	mov	r1, r3
 8016b48:	f7ea f820 	bl	8000b8c <__aeabi_d2uiz>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8016b50:	4827      	ldr	r0, [pc, #156]	; (8016bf0 <start_IMD_task+0xd0>)
 8016b52:	f7fd fcc3 	bl	80144dc <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8016b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b58:	f7e9 fcc6 	bl	80004e8 <__aeabi_ui2d>
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	460d      	mov	r5, r1
 8016b60:	f04f 0300 	mov.w	r3, #0
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7e9 fce1 	bl	800052c <__aeabi_f2d>
 8016b6a:	a31d      	add	r3, pc, #116	; (adr r3, 8016be0 <start_IMD_task+0xc0>)
 8016b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b70:	f7e9 fd34 	bl	80005dc <__aeabi_dmul>
 8016b74:	4602      	mov	r2, r0
 8016b76:	460b      	mov	r3, r1
 8016b78:	4620      	mov	r0, r4
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	f7e9 fb78 	bl	8000270 <__adddf3>
 8016b80:	4602      	mov	r2, r0
 8016b82:	460b      	mov	r3, r1
 8016b84:	4610      	mov	r0, r2
 8016b86:	4619      	mov	r1, r3
 8016b88:	f7ea f800 	bl	8000b8c <__aeabi_d2uiz>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(next_tick);
 8016b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b92:	f013 fb37 	bl	802a204 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 8016b96:	4b17      	ldr	r3, [pc, #92]	; (8016bf4 <start_IMD_task+0xd4>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f107 0108 	add.w	r1, r7, #8
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f014 f86f 	bl	802ac84 <xQueuePeek>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d00e      	beq.n	8016bca <start_IMD_task+0xaa>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8016bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016bb0:	f04f 0200 	mov.w	r2, #0
 8016bb4:	4b10      	ldr	r3, [pc, #64]	; (8016bf8 <start_IMD_task+0xd8>)
 8016bb6:	f7e9 fe3b 	bl	8000830 <__aeabi_ddiv>
 8016bba:	4602      	mov	r2, r0
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	4610      	mov	r0, r2
 8016bc0:	4619      	mov	r1, r3
 8016bc2:	f7e9 ffe3 	bl	8000b8c <__aeabi_d2uiz>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	77fb      	strb	r3, [r7, #31]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 8016bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bcc:	6a3b      	ldr	r3, [r7, #32]
 8016bce:	4413      	add	r3, r2
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(next_tick);
 8016bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bd4:	f013 fb16 	bl	802a204 <osDelayUntil>
		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 8016bd8:	e7dd      	b.n	8016b96 <start_IMD_task+0x76>
 8016bda:	bf00      	nop
 8016bdc:	f3af 8000 	nop.w
 8016be0:	aaaaaaab 	.word	0xaaaaaaab
 8016be4:	408a0aaa 	.word	0x408a0aaa
 8016be8:	2001c080 	.word	0x2001c080
 8016bec:	3dcccccd 	.word	0x3dcccccd
 8016bf0:	2001c1bc 	.word	0x2001c1bc
 8016bf4:	2001b718 	.word	0x2001b718
 8016bf8:	40240000 	.word	0x40240000
 8016bfc:	00000000 	.word	0x00000000

08016c00 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8016c00:	b5b0      	push	{r4, r5, r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016c08:	4b35      	ldr	r3, [pc, #212]	; (8016ce0 <start_GPIO_task+0xe0>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8016c0e:	4b35      	ldr	r3, [pc, #212]	; (8016ce4 <start_GPIO_task+0xe4>)
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7e9 fc8b 	bl	800052c <__aeabi_f2d>
 8016c16:	a330      	add	r3, pc, #192	; (adr r3, 8016cd8 <start_GPIO_task+0xd8>)
 8016c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1c:	f7e9 fcde 	bl	80005dc <__aeabi_dmul>
 8016c20:	4602      	mov	r2, r0
 8016c22:	460b      	mov	r3, r1
 8016c24:	4610      	mov	r0, r2
 8016c26:	4619      	mov	r1, r3
 8016c28:	f7e9 ffb0 	bl	8000b8c <__aeabi_d2uiz>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f7e9 fc59 	bl	80004e8 <__aeabi_ui2d>
 8016c36:	4604      	mov	r4, r0
 8016c38:	460d      	mov	r5, r1
 8016c3a:	f04f 0300 	mov.w	r3, #0
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7e9 fc74 	bl	800052c <__aeabi_f2d>
 8016c44:	a324      	add	r3, pc, #144	; (adr r3, 8016cd8 <start_GPIO_task+0xd8>)
 8016c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c4a:	f7e9 fcc7 	bl	80005dc <__aeabi_dmul>
 8016c4e:	4602      	mov	r2, r0
 8016c50:	460b      	mov	r3, r1
 8016c52:	4620      	mov	r0, r4
 8016c54:	4629      	mov	r1, r5
 8016c56:	f7e9 fb0b 	bl	8000270 <__adddf3>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	4610      	mov	r0, r2
 8016c60:	4619      	mov	r1, r3
 8016c62:	f7e9 ff93 	bl	8000b8c <__aeabi_d2uiz>
 8016c66:	4603      	mov	r3, r0
 8016c68:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8016c6a:	68f8      	ldr	r0, [r7, #12]
 8016c6c:	f013 faca 	bl	802a204 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8016c70:	f000 fe70 	bl	8017954 <get_ams_error_latched_ext>
 8016c74:	4603      	mov	r3, r0
 8016c76:	461a      	mov	r2, r3
 8016c78:	4b1b      	ldr	r3, [pc, #108]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016c7a:	701a      	strb	r2, [r3, #0]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8016c7c:	f000 fe8a 	bl	8017994 <get_imd_error_latched_ext>
 8016c80:	4603      	mov	r3, r0
 8016c82:	461a      	mov	r2, r3
 8016c84:	4b18      	ldr	r3, [pc, #96]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016c86:	705a      	strb	r2, [r3, #1]
		GPIO.SC_probe = get_sc_probe_ext();
 8016c88:	f000 fe90 	bl	80179ac <get_sc_probe_ext>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	461a      	mov	r2, r3
 8016c90:	4b15      	ldr	r3, [pc, #84]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016c92:	709a      	strb	r2, [r3, #2]
		GPIO.IMD_ok = get_imd_ok_ext();
 8016c94:	f000 fe9a 	bl	80179cc <get_imd_ok_ext>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4b12      	ldr	r3, [pc, #72]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016c9e:	70da      	strb	r2, [r3, #3]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8016ca0:	f000 fdbc 	bl	801781c <get_air_plus_ext>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	4b0f      	ldr	r3, [pc, #60]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016caa:	719a      	strb	r2, [r3, #6]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8016cac:	f000 fdea 	bl	8017884 <get_air_minus_ext>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	4b0c      	ldr	r3, [pc, #48]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016cb6:	715a      	strb	r2, [r3, #5]
		GPIO.precharge_closed = get_precharge_ext();
 8016cb8:	f000 fe18 	bl	80178ec <get_precharge_ext>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	461a      	mov	r2, r3
 8016cc0:	4b09      	ldr	r3, [pc, #36]	; (8016ce8 <start_GPIO_task+0xe8>)
 8016cc2:	711a      	strb	r2, [r3, #4]

		/* Wait until next period */
		next_tick += tick_increment;
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	4413      	add	r3, r2
 8016cca:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f013 fa99 	bl	802a204 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8016cd2:	e7cd      	b.n	8016c70 <start_GPIO_task+0x70>
 8016cd4:	f3af 8000 	nop.w
 8016cd8:	aaaaaaab 	.word	0xaaaaaaab
 8016cdc:	408a0aaa 	.word	0x408a0aaa
 8016ce0:	2001c080 	.word	0x2001c080
 8016ce4:	3dcccccd 	.word	0x3dcccccd
 8016ce8:	2001b6f8 	.word	0x2001b6f8
 8016cec:	00000000 	.word	0x00000000

08016cf0 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8016cf0:	b5b0      	push	{r4, r5, r7, lr}
 8016cf2:	b0ac      	sub	sp, #176	; 0xb0
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016cf8:	4b31      	ldr	r3, [pc, #196]	; (8016dc0 <start_ADC_task+0xd0>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8016d00:	4b30      	ldr	r3, [pc, #192]	; (8016dc4 <start_ADC_task+0xd4>)
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7e9 fc12 	bl	800052c <__aeabi_f2d>
 8016d08:	a32b      	add	r3, pc, #172	; (adr r3, 8016db8 <start_ADC_task+0xc8>)
 8016d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0e:	f7e9 fc65 	bl	80005dc <__aeabi_dmul>
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	4610      	mov	r0, r2
 8016d18:	4619      	mov	r1, r3
 8016d1a:	f7e9 ff37 	bl	8000b8c <__aeabi_d2uiz>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 8016d24:	4828      	ldr	r0, [pc, #160]	; (8016dc8 <start_ADC_task+0xd8>)
 8016d26:	f7fe fb93 	bl	8015450 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 8016d2a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016d2e:	f7e9 fbdb 	bl	80004e8 <__aeabi_ui2d>
 8016d32:	4604      	mov	r4, r0
 8016d34:	460d      	mov	r5, r1
 8016d36:	f04f 0300 	mov.w	r3, #0
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7e9 fbf6 	bl	800052c <__aeabi_f2d>
 8016d40:	a31d      	add	r3, pc, #116	; (adr r3, 8016db8 <start_ADC_task+0xc8>)
 8016d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d46:	f7e9 fc49 	bl	80005dc <__aeabi_dmul>
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	460b      	mov	r3, r1
 8016d4e:	4620      	mov	r0, r4
 8016d50:	4629      	mov	r1, r5
 8016d52:	f7e9 fa8d 	bl	8000270 <__adddf3>
 8016d56:	4602      	mov	r2, r0
 8016d58:	460b      	mov	r3, r1
 8016d5a:	4610      	mov	r0, r2
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	f7e9 ff15 	bl	8000b8c <__aeabi_d2uiz>
 8016d62:	4603      	mov	r3, r0
 8016d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	osDelayUntil(next_tick);
 8016d68:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016d6c:	f013 fa4a 	bl	802a204 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8016d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016d74:	2104      	movs	r1, #4
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fe fb7e 	bl	8015478 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 8016d7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8016d80:	f107 0308 	add.w	r3, r7, #8
 8016d84:	2210      	movs	r2, #16
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7fe f9aa 	bl	80150e0 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 8016d8c:	4b0f      	ldr	r3, [pc, #60]	; (8016dcc <start_ADC_task+0xdc>)
 8016d8e:	6818      	ldr	r0, [r3, #0]
 8016d90:	f107 0108 	add.w	r1, r7, #8
 8016d94:	2302      	movs	r3, #2
 8016d96:	2200      	movs	r2, #0
 8016d98:	f013 fc8e 	bl	802a6b8 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8016d9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016da4:	4413      	add	r3, r2
 8016da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		osDelayUntil(next_tick);
 8016daa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016dae:	f013 fa29 	bl	802a204 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8016db2:	e7dd      	b.n	8016d70 <start_ADC_task+0x80>
 8016db4:	f3af 8000 	nop.w
 8016db8:	aaaaaaab 	.word	0xaaaaaaab
 8016dbc:	408a0aaa 	.word	0x408a0aaa
 8016dc0:	2001c080 	.word	0x2001c080
 8016dc4:	3dcccccd 	.word	0x3dcccccd
 8016dc8:	2001c12c 	.word	0x2001c12c
 8016dcc:	2001b710 	.word	0x2001b710

08016dd0 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8016dd0:	b5b0      	push	{r4, r5, r7, lr}
 8016dd2:	b090      	sub	sp, #64	; 0x40
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016dd8:	4b77      	ldr	r3, [pc, #476]	; (8016fb8 <start_COM_task+0x1e8>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8016dde:	4b77      	ldr	r3, [pc, #476]	; (8016fbc <start_COM_task+0x1ec>)
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7e9 fba3 	bl	800052c <__aeabi_f2d>
 8016de6:	a372      	add	r3, pc, #456	; (adr r3, 8016fb0 <start_COM_task+0x1e0>)
 8016de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dec:	f7e9 fbf6 	bl	80005dc <__aeabi_dmul>
 8016df0:	4602      	mov	r2, r0
 8016df2:	460b      	mov	r3, r1
 8016df4:	4610      	mov	r0, r2
 8016df6:	4619      	mov	r1, r3
 8016df8:	f7e9 fec8 	bl	8000b8c <__aeabi_d2uiz>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	63bb      	str	r3, [r7, #56]	; 0x38
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

#ifdef STREAM_DATA
	uint8_t __k = 0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif

	const float voltage_time_constraint = 0.5;
 8016e06:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8016e0a:	633b      	str	r3, [r7, #48]	; 0x30
	const float temperature_time_constraint = 1.0;
 8016e0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float current_time_constraint = 0.5;
 8016e12:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8016e16:	62bb      	str	r3, [r7, #40]	; 0x28

	uint16_t voltage_sample_constraint = 1
			+ (voltage_time_constraint / COM_task_info.periodicity);
 8016e18:	eddf 6a69 	vldr	s13, [pc, #420]	; 8016fc0 <start_COM_task+0x1f0>
 8016e1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e28:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t voltage_sample_constraint = 1
 8016e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e30:	ee17 3a90 	vmov	r3, s15
 8016e34:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint16_t temperature_sample_constraint = 1
			+ (temperature_time_constraint / COM_task_info.periodicity);
 8016e36:	eddf 6a62 	vldr	s13, [pc, #392]	; 8016fc0 <start_COM_task+0x1f0>
 8016e3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e46:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t temperature_sample_constraint = 1
 8016e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e4e:	ee17 3a90 	vmov	r3, s15
 8016e52:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint16_t current_sample_constraint = 1
			+ (current_time_constraint / COM_task_info.periodicity);
 8016e54:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8016fc0 <start_COM_task+0x1f0>
 8016e58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e64:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t current_sample_constraint = 1
 8016e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016e6c:	ee17 3a90 	vmov	r3, s15
 8016e70:	847b      	strh	r3, [r7, #34]	; 0x22

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8016e72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e74:	f7e9 fb38 	bl	80004e8 <__aeabi_ui2d>
 8016e78:	4604      	mov	r4, r0
 8016e7a:	460d      	mov	r5, r1
 8016e7c:	f04f 0300 	mov.w	r3, #0
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7e9 fb53 	bl	800052c <__aeabi_f2d>
 8016e86:	a34a      	add	r3, pc, #296	; (adr r3, 8016fb0 <start_COM_task+0x1e0>)
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	f7e9 fba6 	bl	80005dc <__aeabi_dmul>
 8016e90:	4602      	mov	r2, r0
 8016e92:	460b      	mov	r3, r1
 8016e94:	4620      	mov	r0, r4
 8016e96:	4629      	mov	r1, r5
 8016e98:	f7e9 f9ea 	bl	8000270 <__adddf3>
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	4610      	mov	r0, r2
 8016ea2:	4619      	mov	r1, r3
 8016ea4:	f7e9 fe72 	bl	8000b8c <__aeabi_d2uiz>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 8016eac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016eae:	f013 f9a9 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 8016eb2:	2008      	movs	r0, #8
 8016eb4:	f7ff fba6 	bl	8016604 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016eb8:	4b42      	ldr	r3, [pc, #264]	; (8016fc4 <start_COM_task+0x1f4>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f107 0108 	add.w	r1, r7, #8
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f013 fede 	bl	802ac84 <xQueuePeek>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				&accumulator_current, 0);

		/* Get new data over isoSPI */
		cell_data_valid = LTC_acquire_data(1);
 8016ece:	2001      	movs	r0, #1
 8016ed0:	f7fd fc54 	bl	801477c <LTC_acquire_data>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f887 3020 	strb.w	r3, [r7, #32]

		/* Get data from the program */
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
 8016eda:	4b3b      	ldr	r3, [pc, #236]	; (8016fc8 <start_COM_task+0x1f8>)
 8016edc:	61bb      	str	r3, [r7, #24]
		cell_temperatures = SIM0_Y.cell_temperatures;
 8016ede:	4b3b      	ldr	r3, [pc, #236]	; (8016fcc <start_COM_task+0x1fc>)
 8016ee0:	617b      	str	r3, [r7, #20]
		cell_data_valid = 1;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	f887 3020 	strb.w	r3, [r7, #32]
		cell_voltages = LTC_voltages;
		cell_temperatures = LTC_temperatures;
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 8016ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d010      	beq.n	8016f12 <start_COM_task+0x142>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 8016ef0:	4b37      	ldr	r3, [pc, #220]	; (8016fd0 <start_COM_task+0x200>)
 8016ef2:	6818      	ldr	r0, [r3, #0]
 8016ef4:	f107 0118 	add.w	r1, r7, #24
 8016ef8:	2302      	movs	r3, #2
 8016efa:	2200      	movs	r2, #0
 8016efc:	f013 fbdc 	bl	802a6b8 <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 8016f00:	4b34      	ldr	r3, [pc, #208]	; (8016fd4 <start_COM_task+0x204>)
 8016f02:	6818      	ldr	r0, [r3, #0]
 8016f04:	f107 0114 	add.w	r1, r7, #20
 8016f08:	2302      	movs	r3, #2
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	f013 fbd4 	bl	802a6b8 <xQueueGenericSend>
 8016f10:	e002      	b.n	8016f18 <start_COM_task+0x148>
		} else {
			__raise_ams_error(ERROR_NO_LTC_DATA);
 8016f12:	200a      	movs	r0, #10
 8016f14:	f7ff fbf8 	bl	8016708 <__raise_ams_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 8016f18:	69bb      	ldr	r3, [r7, #24]
 8016f1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f1c:	4611      	mov	r1, r2
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7fd f8e2 	bl	80140e8 <COM_voltages_ok>
 8016f24:	4603      	mov	r3, r0
 8016f26:	77fb      	strb	r3, [r7, #31]
				voltage_sample_constraint);

		if (cell_voltages_error) {
 8016f28:	7ffb      	ldrb	r3, [r7, #31]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d003      	beq.n	8016f36 <start_COM_task+0x166>
			__raise_ams_error(cell_voltages_error);
 8016f2e:	7ffb      	ldrb	r3, [r7, #31]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff fbe9 	bl	8016708 <__raise_ams_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 8016f36:	697a      	ldr	r2, [r7, #20]
 8016f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	bf0c      	ite	eq
 8016f3e:	2301      	moveq	r3, #1
 8016f40:	2300      	movne	r3, #0
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	4619      	mov	r1, r3
 8016f48:	4610      	mov	r0, r2
 8016f4a:	f7fd f939 	bl	80141c0 <COM_temperatures_ok>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	77bb      	strb	r3, [r7, #30]
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 8016f52:	7fbb      	ldrb	r3, [r7, #30]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d003      	beq.n	8016f60 <start_COM_task+0x190>
			__raise_ams_error(cell_temperatures_error);
 8016f58:	7fbb      	ldrb	r3, [r7, #30]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7ff fbd4 	bl	8016708 <__raise_ams_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 8016f60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d102      	bne.n	8016f6e <start_COM_task+0x19e>
			__raise_ams_error(ERROR_NO_CURRENT_DATA);
 8016f68:	200b      	movs	r0, #11
 8016f6a:	f7ff fbcd 	bl	8016708 <__raise_ams_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8016f6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016f70:	f107 0308 	add.w	r3, r7, #8
 8016f74:	4611      	mov	r1, r2
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7fd f98e 	bl	8014298 <COM_current_ok>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	777b      	strb	r3, [r7, #29]
				current_sample_constraint);

		if (accumulator_current_error) {
 8016f80:	7f7b      	ldrb	r3, [r7, #29]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d008      	beq.n	8016f98 <start_COM_task+0x1c8>
			__raise_ams_error(accumulator_current_error);
 8016f86:	7f7b      	ldrb	r3, [r7, #29]
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7ff fbbd 	bl	8016708 <__raise_ams_error>
		 __k = (__k + 7) % 126;
		 #endif
		 */

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8016f8e:	e003      	b.n	8016f98 <start_COM_task+0x1c8>
			next_tick += tick_increment;
 8016f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f94:	4413      	add	r3, r2
 8016f96:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8016f98:	f013 f872 	bl	802a080 <osKernelGetTickCount>
 8016f9c:	4602      	mov	r2, r0
 8016f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	d3f5      	bcc.n	8016f90 <start_COM_task+0x1c0>
		}
		osDelayUntil(next_tick);
 8016fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016fa6:	f013 f92d 	bl	802a204 <osDelayUntil>
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 8016faa:	e785      	b.n	8016eb8 <start_COM_task+0xe8>
 8016fac:	f3af 8000 	nop.w
 8016fb0:	aaaaaaab 	.word	0xaaaaaaab
 8016fb4:	408a0aaa 	.word	0x408a0aaa
 8016fb8:	2001c080 	.word	0x2001c080
 8016fbc:	3dcccccd 	.word	0x3dcccccd
 8016fc0:	3dcccccd 	.word	0x3dcccccd
 8016fc4:	2001b740 	.word	0x2001b740
 8016fc8:	2001db28 	.word	0x2001db28
 8016fcc:	2001e6f8 	.word	0x2001e6f8
 8016fd0:	2001b704 	.word	0x2001b704
 8016fd4:	2001b720 	.word	0x2001b720

08016fd8 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8016fd8:	b5b0      	push	{r4, r5, r7, lr}
 8016fda:	b086      	sub	sp, #24
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8016fe0:	4b37      	ldr	r3, [pc, #220]	; (80170c0 <start_CAN_task+0xe8>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8016fe6:	4b37      	ldr	r3, [pc, #220]	; (80170c4 <start_CAN_task+0xec>)
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7e9 fa9f 	bl	800052c <__aeabi_f2d>
 8016fee:	a332      	add	r3, pc, #200	; (adr r3, 80170b8 <start_CAN_task+0xe0>)
 8016ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff4:	f7e9 faf2 	bl	80005dc <__aeabi_dmul>
 8016ff8:	4602      	mov	r2, r0
 8016ffa:	460b      	mov	r3, r1
 8016ffc:	4610      	mov	r0, r2
 8016ffe:	4619      	mov	r1, r3
 8017000:	f7e9 fdc4 	bl	8000b8c <__aeabi_d2uiz>
 8017004:	4603      	mov	r3, r0
 8017006:	60fb      	str	r3, [r7, #12]

	/* Make task-specific structures */
	uint32_t k = 0;
 8017008:	2300      	movs	r3, #0
 801700a:	613b      	str	r3, [r7, #16]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 801700c:	6978      	ldr	r0, [r7, #20]
 801700e:	f7e9 fa6b 	bl	80004e8 <__aeabi_ui2d>
 8017012:	4604      	mov	r4, r0
 8017014:	460d      	mov	r5, r1
 8017016:	f04f 0300 	mov.w	r3, #0
 801701a:	4618      	mov	r0, r3
 801701c:	f7e9 fa86 	bl	800052c <__aeabi_f2d>
 8017020:	a325      	add	r3, pc, #148	; (adr r3, 80170b8 <start_CAN_task+0xe0>)
 8017022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017026:	f7e9 fad9 	bl	80005dc <__aeabi_dmul>
 801702a:	4602      	mov	r2, r0
 801702c:	460b      	mov	r3, r1
 801702e:	4620      	mov	r0, r4
 8017030:	4629      	mov	r1, r5
 8017032:	f7e9 f91d 	bl	8000270 <__adddf3>
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	4610      	mov	r0, r2
 801703c:	4619      	mov	r1, r3
 801703e:	f7e9 fda5 	bl	8000b8c <__aeabi_d2uiz>
 8017042:	4603      	mov	r3, r0
 8017044:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8017046:	6978      	ldr	r0, [r7, #20]
 8017048:	f013 f8dc 	bl	802a204 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		if (!(k % 2)) {
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	f003 0301 	and.w	r3, r3, #1
 8017052:	2b00      	cmp	r3, #0
 8017054:	d101      	bne.n	801705a <start_CAN_task+0x82>
			can1_ams_status_1_transmit();
 8017056:	f7f8 fec9 	bl	800fdec <can1_ams_status_1_transmit>
		}
		if (!(k % 2)) {
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	f003 0301 	and.w	r3, r3, #1
 8017060:	2b00      	cmp	r3, #0
 8017062:	d101      	bne.n	8017068 <start_CAN_task+0x90>
			can1_ams_temperatures_transmit();
 8017064:	f7f9 f80e 	bl	8010084 <can1_ams_temperatures_transmit>
		}
		if (!(k % 3)) {
 8017068:	6939      	ldr	r1, [r7, #16]
 801706a:	4b17      	ldr	r3, [pc, #92]	; (80170c8 <start_CAN_task+0xf0>)
 801706c:	fba3 2301 	umull	r2, r3, r3, r1
 8017070:	085a      	lsrs	r2, r3, #1
 8017072:	4613      	mov	r3, r2
 8017074:	005b      	lsls	r3, r3, #1
 8017076:	4413      	add	r3, r2
 8017078:	1aca      	subs	r2, r1, r3
 801707a:	2a00      	cmp	r2, #0
 801707c:	d101      	bne.n	8017082 <start_CAN_task+0xaa>
			can2_charger_config_transmit();
 801707e:	f7fb f867 	bl	8012150 <can2_charger_config_transmit>
		}
		if (!(k % 4)) {
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	f003 0303 	and.w	r3, r3, #3
 8017088:	2b00      	cmp	r3, #0
 801708a:	d103      	bne.n	8017094 <start_CAN_task+0xbc>
			can1_ams_cell_temperatures_transmit();
 801708c:	f7fa fa90 	bl	80115b0 <can1_ams_cell_temperatures_transmit>
			can1_ams_cell_voltages_transmit();
 8017090:	f7f9 f864 	bl	801015c <can1_ams_cell_voltages_transmit>
		}
		k++;
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	3301      	adds	r3, #1
 8017098:	613b      	str	r3, [r7, #16]
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 801709a:	e003      	b.n	80170a4 <start_CAN_task+0xcc>
			next_tick += tick_increment;
 801709c:	697a      	ldr	r2, [r7, #20]
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	4413      	add	r3, r2
 80170a2:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 80170a4:	f012 ffec 	bl	802a080 <osKernelGetTickCount>
 80170a8:	4602      	mov	r2, r0
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d3f5      	bcc.n	801709c <start_CAN_task+0xc4>
		}
		osDelayUntil(next_tick);
 80170b0:	6978      	ldr	r0, [r7, #20]
 80170b2:	f013 f8a7 	bl	802a204 <osDelayUntil>
		if (!(k % 2)) {
 80170b6:	e7c9      	b.n	801704c <start_CAN_task+0x74>
 80170b8:	aaaaaaab 	.word	0xaaaaaaab
 80170bc:	408a0aaa 	.word	0x408a0aaa
 80170c0:	2001c080 	.word	0x2001c080
 80170c4:	3dcccccd 	.word	0x3dcccccd
 80170c8:	aaaaaaab 	.word	0xaaaaaaab
 80170cc:	00000000 	.word	0x00000000

080170d0 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 80170d0:	b5b0      	push	{r4, r5, r7, lr}
 80170d2:	b090      	sub	sp, #64	; 0x40
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80170d8:	4b59      	ldr	r3, [pc, #356]	; (8017240 <start_CSE_task+0x170>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 80170de:	4b59      	ldr	r3, [pc, #356]	; (8017244 <start_CSE_task+0x174>)
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7e9 fa23 	bl	800052c <__aeabi_f2d>
 80170e6:	a352      	add	r3, pc, #328	; (adr r3, 8017230 <start_CSE_task+0x160>)
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	f7e9 fa76 	bl	80005dc <__aeabi_dmul>
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	4610      	mov	r0, r2
 80170f6:	4619      	mov	r1, r3
 80170f8:	f7e9 fd48 	bl	8000b8c <__aeabi_d2uiz>
 80170fc:	4603      	mov	r3, r0
 80170fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Make task-specific structures */
	CSE_initialize();
 8017100:	f003 f816 	bl	801a130 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8017104:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017106:	f7e9 f9ef 	bl	80004e8 <__aeabi_ui2d>
 801710a:	4604      	mov	r4, r0
 801710c:	460d      	mov	r5, r1
 801710e:	f04f 0300 	mov.w	r3, #0
 8017112:	4618      	mov	r0, r3
 8017114:	f7e9 fa0a 	bl	800052c <__aeabi_f2d>
 8017118:	a345      	add	r3, pc, #276	; (adr r3, 8017230 <start_CSE_task+0x160>)
 801711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711e:	f7e9 fa5d 	bl	80005dc <__aeabi_dmul>
 8017122:	4602      	mov	r2, r0
 8017124:	460b      	mov	r3, r1
 8017126:	4620      	mov	r0, r4
 8017128:	4629      	mov	r1, r5
 801712a:	f7e9 f8a1 	bl	8000270 <__adddf3>
 801712e:	4602      	mov	r2, r0
 8017130:	460b      	mov	r3, r1
 8017132:	4610      	mov	r0, r2
 8017134:	4619      	mov	r1, r3
 8017136:	f7e9 fd29 	bl	8000b8c <__aeabi_d2uiz>
 801713a:	4603      	mov	r3, r0
 801713c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 801713e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017140:	f013 f860 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8017144:	201f      	movs	r0, #31
 8017146:	f7ff fa5d 	bl	8016604 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 801714a:	4b3f      	ldr	r3, [pc, #252]	; (8017248 <start_CSE_task+0x178>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	f107 0108 	add.w	r1, r7, #8
 8017152:	2200      	movs	r2, #0
 8017154:	4618      	mov	r0, r3
 8017156:	f013 fd95 	bl	802ac84 <xQueuePeek>
 801715a:	4603      	mov	r3, r0
 801715c:	2b00      	cmp	r3, #0
 801715e:	d05c      	beq.n	801721a <start_CSE_task+0x14a>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8017160:	4b3a      	ldr	r3, [pc, #232]	; (801724c <start_CSE_task+0x17c>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	f107 0114 	add.w	r1, r7, #20
 8017168:	2200      	movs	r2, #0
 801716a:	4618      	mov	r0, r3
 801716c:	f013 fd8a 	bl	802ac84 <xQueuePeek>
 8017170:	4603      	mov	r3, r0
 8017172:	2b00      	cmp	r3, #0
 8017174:	d051      	beq.n	801721a <start_CSE_task+0x14a>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8017176:	f04f 0200 	mov.w	r2, #0
 801717a:	f04f 0300 	mov.w	r3, #0
 801717e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8017182:	2300      	movs	r3, #0
 8017184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017186:	e010      	b.n	80171aa <start_CSE_task+0xda>
				mean_cell_voltage += cell_voltages[i];
 8017188:	697a      	ldr	r2, [r7, #20]
 801718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	4413      	add	r3, r2
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017198:	f7e9 f86a 	bl	8000270 <__adddf3>
 801719c:	4602      	mov	r2, r0
 801719e:	460b      	mov	r3, r1
 80171a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 80171a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a6:	3301      	adds	r3, #1
 80171a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ac:	2b7d      	cmp	r3, #125	; 0x7d
 80171ae:	ddeb      	ble.n	8017188 <start_CSE_task+0xb8>
			}
			mean_cell_voltage /= 126;
 80171b0:	f04f 0200 	mov.w	r2, #0
 80171b4:	4b26      	ldr	r3, [pc, #152]	; (8017250 <start_CSE_task+0x180>)
 80171b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80171ba:	f7e9 fb39 	bl	8000830 <__aeabi_ddiv>
 80171be:	4602      	mov	r2, r0
 80171c0:	460b      	mov	r3, r1
 80171c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			CSE_U.current = accumulator_current;
 80171c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80171ca:	4922      	ldr	r1, [pc, #136]	; (8017254 <start_CSE_task+0x184>)
 80171cc:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 80171d0:	4920      	ldr	r1, [pc, #128]	; (8017254 <start_CSE_task+0x184>)
 80171d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80171d6:	e9c1 2302 	strd	r2, r3, [r1, #8]

			CSE_step();
 80171da:	f001 fca5 	bl	8018b28 <CSE_step>

			CSE.SOC = CSE_Y.soc;
 80171de:	4b1e      	ldr	r3, [pc, #120]	; (8017258 <start_CSE_task+0x188>)
 80171e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			CSE.SOH = CSE_Y.capacity / (6.6 * 3600);
 80171e8:	4b1b      	ldr	r3, [pc, #108]	; (8017258 <start_CSE_task+0x188>)
 80171ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80171ee:	a312      	add	r3, pc, #72	; (adr r3, 8017238 <start_CSE_task+0x168>)
 80171f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f4:	f7e9 fb1c 	bl	8000830 <__aeabi_ddiv>
 80171f8:	4602      	mov	r2, r0
 80171fa:	460b      	mov	r3, r1
 80171fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
			xQueueOverwrite(CSE_queue, &CSE);
 8017200:	4b16      	ldr	r3, [pc, #88]	; (801725c <start_CSE_task+0x18c>)
 8017202:	6818      	ldr	r0, [r3, #0]
 8017204:	f107 0118 	add.w	r1, r7, #24
 8017208:	2302      	movs	r3, #2
 801720a:	2200      	movs	r2, #0
 801720c:	f013 fa54 	bl	802a6b8 <xQueueGenericSend>

		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8017210:	e003      	b.n	801721a <start_CSE_task+0x14a>
			next_tick += tick_increment;
 8017212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017216:	4413      	add	r3, r2
 8017218:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 801721a:	f012 ff31 	bl	802a080 <osKernelGetTickCount>
 801721e:	4602      	mov	r2, r0
 8017220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017222:	4293      	cmp	r3, r2
 8017224:	d3f5      	bcc.n	8017212 <start_CSE_task+0x142>
		}
		osDelayUntil(next_tick);
 8017226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017228:	f012 ffec 	bl	802a204 <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 801722c:	e78d      	b.n	801714a <start_CSE_task+0x7a>
 801722e:	bf00      	nop
 8017230:	aaaaaaab 	.word	0xaaaaaaab
 8017234:	408a0aaa 	.word	0x408a0aaa
 8017238:	00000000 	.word	0x00000000
 801723c:	40d73400 	.word	0x40d73400
 8017240:	2001c080 	.word	0x2001c080
 8017244:	3dcccccd 	.word	0x3dcccccd
 8017248:	2001b740 	.word	0x2001b740
 801724c:	2001b704 	.word	0x2001b704
 8017250:	405f8000 	.word	0x405f8000
 8017254:	2001c218 	.word	0x2001c218
 8017258:	2001c208 	.word	0x2001c208
 801725c:	2001b73c 	.word	0x2001b73c

08017260 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8017260:	b5b0      	push	{r4, r5, r7, lr}
 8017262:	b09c      	sub	sp, #112	; 0x70
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8017268:	4b59      	ldr	r3, [pc, #356]	; (80173d0 <start_COOL_task+0x170>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 801726e:	4b59      	ldr	r3, [pc, #356]	; (80173d4 <start_COOL_task+0x174>)
 8017270:	4618      	mov	r0, r3
 8017272:	f7e9 f95b 	bl	800052c <__aeabi_f2d>
 8017276:	a354      	add	r3, pc, #336	; (adr r3, 80173c8 <start_COOL_task+0x168>)
 8017278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727c:	f7e9 f9ae 	bl	80005dc <__aeabi_dmul>
 8017280:	4602      	mov	r2, r0
 8017282:	460b      	mov	r3, r1
 8017284:	4610      	mov	r0, r2
 8017286:	4619      	mov	r1, r3
 8017288:	f7e9 fc80 	bl	8000b8c <__aeabi_d2uiz>
 801728c:	4603      	mov	r3, r0
 801728e:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Make task-specific structures */
	PID_t PID;
	pPID_t pPID;

	PID_initialize(&PID, // *ptr
 8017290:	f107 031c 	add.w	r3, r7, #28
 8017294:	eddf 2a50 	vldr	s5, [pc, #320]	; 80173d8 <start_COOL_task+0x178>
 8017298:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 801729c:	eddf 1a4f 	vldr	s3, [pc, #316]	; 80173dc <start_COOL_task+0x17c>
 80172a0:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 80173dc <start_COOL_task+0x17c>
 80172a4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80172a8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80172ac:	4618      	mov	r0, r3
 80172ae:	f7fd fc8e 	bl	8014bce <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 80172b2:	484b      	ldr	r0, [pc, #300]	; (80173e0 <start_COOL_task+0x180>)
 80172b4:	f7fd f842 	bl	801433c <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 80172b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80172ba:	f7e9 f915 	bl	80004e8 <__aeabi_ui2d>
 80172be:	4604      	mov	r4, r0
 80172c0:	460d      	mov	r5, r1
 80172c2:	f04f 0300 	mov.w	r3, #0
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7e9 f930 	bl	800052c <__aeabi_f2d>
 80172cc:	a33e      	add	r3, pc, #248	; (adr r3, 80173c8 <start_COOL_task+0x168>)
 80172ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d2:	f7e9 f983 	bl	80005dc <__aeabi_dmul>
 80172d6:	4602      	mov	r2, r0
 80172d8:	460b      	mov	r3, r1
 80172da:	4620      	mov	r0, r4
 80172dc:	4629      	mov	r1, r5
 80172de:	f7e8 ffc7 	bl	8000270 <__adddf3>
 80172e2:	4602      	mov	r2, r0
 80172e4:	460b      	mov	r3, r1
 80172e6:	4610      	mov	r0, r2
 80172e8:	4619      	mov	r1, r3
 80172ea:	f7e9 fc4f 	bl	8000b8c <__aeabi_d2uiz>
 80172ee:	4603      	mov	r3, r0
 80172f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	osDelayUntil(next_tick);
 80172f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80172f4:	f012 ff86 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 80172f8:	2002      	movs	r0, #2
 80172fa:	f7ff f983 	bl	8016604 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 80172fe:	4b39      	ldr	r3, [pc, #228]	; (80173e4 <start_COOL_task+0x184>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f107 010c 	add.w	r1, r7, #12
 8017306:	2200      	movs	r2, #0
 8017308:	4618      	mov	r0, r3
 801730a:	f013 fcbb 	bl	802ac84 <xQueuePeek>
 801730e:	4603      	mov	r3, r0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d04f      	beq.n	80173b4 <start_COOL_task+0x154>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8017314:	f04f 0200 	mov.w	r2, #0
 8017318:	f04f 0300 	mov.w	r3, #0
 801731c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8017320:	2300      	movs	r3, #0
 8017322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017324:	e010      	b.n	8017348 <start_COOL_task+0xe8>
				max_cell_temperature += cell_temperatures[i];
 8017326:	68fa      	ldr	r2, [r7, #12]
 8017328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	4413      	add	r3, r2
 801732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017332:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8017336:	f7e8 ff9b 	bl	8000270 <__adddf3>
 801733a:	4602      	mov	r2, r0
 801733c:	460b      	mov	r3, r1
 801733e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8017342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017344:	3301      	adds	r3, #1
 8017346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801734a:	2b7d      	cmp	r3, #125	; 0x7d
 801734c:	ddeb      	ble.n	8017326 <start_COOL_task+0xc6>
			}
			max_cell_temperature /= 126;
 801734e:	f04f 0200 	mov.w	r2, #0
 8017352:	4b25      	ldr	r3, [pc, #148]	; (80173e8 <start_COOL_task+0x188>)
 8017354:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8017358:	f7e9 fa6a 	bl	8000830 <__aeabi_ddiv>
 801735c:	4602      	mov	r2, r0
 801735e:	460b      	mov	r3, r1
 8017360:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 8017364:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8017368:	f7e9 fc30 	bl	8000bcc <__aeabi_d2f>
 801736c:	4602      	mov	r2, r0
 801736e:	f107 031c 	add.w	r3, r7, #28
 8017372:	ee00 2a10 	vmov	s0, r2
 8017376:	4618      	mov	r0, r3
 8017378:	f7fd fbba 	bl	8014af0 <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 801737c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017380:	eeb0 0a67 	vmov.f32	s0, s15
 8017384:	4816      	ldr	r0, [pc, #88]	; (80173e0 <start_COOL_task+0x180>)
 8017386:	f7fd f803 	bl	8014390 <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 801738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738c:	4618      	mov	r0, r3
 801738e:	f7e9 f8cd 	bl	800052c <__aeabi_f2d>
 8017392:	4602      	mov	r2, r0
 8017394:	460b      	mov	r3, r1
 8017396:	e9c7 2304 	strd	r2, r3, [r7, #16]
			xQueueOverwrite(PID_queue, &pPID);
 801739a:	4b14      	ldr	r3, [pc, #80]	; (80173ec <start_COOL_task+0x18c>)
 801739c:	6818      	ldr	r0, [r3, #0]
 801739e:	f107 0110 	add.w	r1, r7, #16
 80173a2:	2302      	movs	r3, #2
 80173a4:	2200      	movs	r2, #0
 80173a6:	f013 f987 	bl	802a6b8 <xQueueGenericSend>
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80173aa:	e003      	b.n	80173b4 <start_COOL_task+0x154>
			next_tick += tick_increment;
 80173ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80173ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80173b0:	4413      	add	r3, r2
 80173b2:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (next_tick < osKernelGetTickCount()) {
 80173b4:	f012 fe64 	bl	802a080 <osKernelGetTickCount>
 80173b8:	4602      	mov	r2, r0
 80173ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173bc:	4293      	cmp	r3, r2
 80173be:	d3f5      	bcc.n	80173ac <start_COOL_task+0x14c>
		}
		osDelayUntil(next_tick);
 80173c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80173c2:	f012 ff1f 	bl	802a204 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 80173c6:	e79a      	b.n	80172fe <start_COOL_task+0x9e>
 80173c8:	aaaaaaab 	.word	0xaaaaaaab
 80173cc:	408a0aaa 	.word	0x408a0aaa
 80173d0:	2001c080 	.word	0x2001c080
 80173d4:	3dcccccd 	.word	0x3dcccccd
 80173d8:	42c80000 	.word	0x42c80000
 80173dc:	00000000 	.word	0x00000000
 80173e0:	2001c174 	.word	0x2001c174
 80173e4:	2001b720 	.word	0x2001b720
 80173e8:	405f8000 	.word	0x405f8000
 80173ec:	2001b728 	.word	0x2001b728

080173f0 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 80173f0:	b5b0      	push	{r4, r5, r7, lr}
 80173f2:	b086      	sub	sp, #24
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80173f8:	4b37      	ldr	r3, [pc, #220]	; (80174d8 <start_event_handler_task+0xe8>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 80173fe:	4b37      	ldr	r3, [pc, #220]	; (80174dc <start_event_handler_task+0xec>)
 8017400:	4618      	mov	r0, r3
 8017402:	f7e9 f893 	bl	800052c <__aeabi_f2d>
 8017406:	a332      	add	r3, pc, #200	; (adr r3, 80174d0 <start_event_handler_task+0xe0>)
 8017408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740c:	f7e9 f8e6 	bl	80005dc <__aeabi_dmul>
 8017410:	4602      	mov	r2, r0
 8017412:	460b      	mov	r3, r1
 8017414:	4610      	mov	r0, r2
 8017416:	4619      	mov	r1, r3
 8017418:	f7e9 fbb8 	bl	8000b8c <__aeabi_d2uiz>
 801741c:	4603      	mov	r3, r0
 801741e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	error_t error;

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8017420:	6978      	ldr	r0, [r7, #20]
 8017422:	f7e9 f861 	bl	80004e8 <__aeabi_ui2d>
 8017426:	4604      	mov	r4, r0
 8017428:	460d      	mov	r5, r1
 801742a:	f04f 0300 	mov.w	r3, #0
 801742e:	4618      	mov	r0, r3
 8017430:	f7e9 f87c 	bl	800052c <__aeabi_f2d>
 8017434:	a326      	add	r3, pc, #152	; (adr r3, 80174d0 <start_event_handler_task+0xe0>)
 8017436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801743a:	f7e9 f8cf 	bl	80005dc <__aeabi_dmul>
 801743e:	4602      	mov	r2, r0
 8017440:	460b      	mov	r3, r1
 8017442:	4620      	mov	r0, r4
 8017444:	4629      	mov	r1, r5
 8017446:	f7e8 ff13 	bl	8000270 <__adddf3>
 801744a:	4602      	mov	r2, r0
 801744c:	460b      	mov	r3, r1
 801744e:	4610      	mov	r0, r2
 8017450:	4619      	mov	r1, r3
 8017452:	f7e9 fb9b 	bl	8000b8c <__aeabi_d2uiz>
 8017456:	4603      	mov	r3, r0
 8017458:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 801745a:	6978      	ldr	r0, [r7, #20]
 801745c:	f012 fed2 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8017460:	201f      	movs	r0, #31
 8017462:	f7ff f8cf 	bl	8016604 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		if (xQueueReceive(error_queue, &error, 0)) {
 8017466:	4b1e      	ldr	r3, [pc, #120]	; (80174e0 <start_event_handler_task+0xf0>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	f107 010f 	add.w	r1, r7, #15
 801746e:	2200      	movs	r2, #0
 8017470:	4618      	mov	r0, r3
 8017472:	f013 faf7 	bl	802aa64 <xQueueReceive>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d00a      	beq.n	8017492 <start_event_handler_task+0xa2>
			switch (error) {
 801747c:	7bfb      	ldrb	r3, [r7, #15]
 801747e:	2b02      	cmp	r3, #2
 8017480:	d103      	bne.n	801748a <start_event_handler_task+0x9a>
			case ERROR_IMD:
				set_imd_error_ext(1);
 8017482:	2001      	movs	r0, #1
 8017484:	f000 fa72 	bl	801796c <set_imd_error_ext>
				break;
 8017488:	e011      	b.n	80174ae <start_event_handler_task+0xbe>
			default:
				set_ams_error_ext(1);
 801748a:	2001      	movs	r0, #1
 801748c:	f000 fa4e 	bl	801792c <set_ams_error_ext>
				break;
 8017490:	e00d      	b.n	80174ae <start_event_handler_task+0xbe>
			}
		} else {
			set_ams_error_ext(0);
 8017492:	2000      	movs	r0, #0
 8017494:	f000 fa4a 	bl	801792c <set_ams_error_ext>
			set_imd_error_ext(0);
 8017498:	2000      	movs	r0, #0
 801749a:	f000 fa67 	bl	801796c <set_imd_error_ext>
			if (!get_ams_error_latched_ext()) {
 801749e:	f000 fa59 	bl	8017954 <get_ams_error_latched_ext>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d107      	bne.n	80174b8 <start_event_handler_task+0xc8>
				__error = 0;
 80174a8:	4b0e      	ldr	r3, [pc, #56]	; (80174e4 <start_event_handler_task+0xf4>)
 80174aa:	2200      	movs	r2, #0
 80174ac:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80174ae:	e003      	b.n	80174b8 <start_event_handler_task+0xc8>
			next_tick += tick_increment;
 80174b0:	697a      	ldr	r2, [r7, #20]
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	4413      	add	r3, r2
 80174b6:	617b      	str	r3, [r7, #20]
		while (next_tick < osKernelGetTickCount()) {
 80174b8:	f012 fde2 	bl	802a080 <osKernelGetTickCount>
 80174bc:	4602      	mov	r2, r0
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d3f5      	bcc.n	80174b0 <start_event_handler_task+0xc0>
		}
		osDelayUntil(next_tick);
 80174c4:	6978      	ldr	r0, [r7, #20]
 80174c6:	f012 fe9d 	bl	802a204 <osDelayUntil>
		if (xQueueReceive(error_queue, &error, 0)) {
 80174ca:	e7cc      	b.n	8017466 <start_event_handler_task+0x76>
 80174cc:	f3af 8000 	nop.w
 80174d0:	aaaaaaab 	.word	0xaaaaaaab
 80174d4:	408a0aaa 	.word	0x408a0aaa
 80174d8:	2001c080 	.word	0x2001c080
 80174dc:	3dcccccd 	.word	0x3dcccccd
 80174e0:	2001b714 	.word	0x2001b714
 80174e4:	2001b6f4 	.word	0x2001b6f4

080174e8 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 80174e8:	b5b0      	push	{r4, r5, r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80174f0:	4b29      	ldr	r3, [pc, #164]	; (8017598 <start_IWDG_task+0xb0>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 80174f6:	4b29      	ldr	r3, [pc, #164]	; (801759c <start_IWDG_task+0xb4>)
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7e9 f817 	bl	800052c <__aeabi_f2d>
 80174fe:	a324      	add	r3, pc, #144	; (adr r3, 8017590 <start_IWDG_task+0xa8>)
 8017500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017504:	f7e9 f86a 	bl	80005dc <__aeabi_dmul>
 8017508:	4602      	mov	r2, r0
 801750a:	460b      	mov	r3, r1
 801750c:	4610      	mov	r0, r2
 801750e:	4619      	mov	r1, r3
 8017510:	f7e9 fb3c 	bl	8000b8c <__aeabi_d2uiz>
 8017514:	4603      	mov	r3, r0
 8017516:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f7e8 ffe5 	bl	80004e8 <__aeabi_ui2d>
 801751e:	4604      	mov	r4, r0
 8017520:	460d      	mov	r5, r1
 8017522:	f04f 0300 	mov.w	r3, #0
 8017526:	4618      	mov	r0, r3
 8017528:	f7e9 f800 	bl	800052c <__aeabi_f2d>
 801752c:	a318      	add	r3, pc, #96	; (adr r3, 8017590 <start_IWDG_task+0xa8>)
 801752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017532:	f7e9 f853 	bl	80005dc <__aeabi_dmul>
 8017536:	4602      	mov	r2, r0
 8017538:	460b      	mov	r3, r1
 801753a:	4620      	mov	r0, r4
 801753c:	4629      	mov	r1, r5
 801753e:	f7e8 fe97 	bl	8000270 <__adddf3>
 8017542:	4602      	mov	r2, r0
 8017544:	460b      	mov	r3, r1
 8017546:	4610      	mov	r0, r2
 8017548:	4619      	mov	r1, r3
 801754a:	f7e9 fb1f 	bl	8000b8c <__aeabi_d2uiz>
 801754e:	4603      	mov	r3, r0
 8017550:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	f012 fe56 	bl	802a204 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8017558:	201f      	movs	r0, #31
 801755a:	f7ff f853 	bl	8016604 <__wait_for_data>

	initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);
 801755e:	eddf 7a10 	vldr	s15, [pc, #64]	; 80175a0 <start_IWDG_task+0xb8>
 8017562:	eeb0 0a67 	vmov.f32	s0, s15
 8017566:	480f      	ldr	r0, [pc, #60]	; (80175a4 <start_IWDG_task+0xbc>)
 8017568:	f7fe fe04 	bl	8016174 <initialize_IWDG>

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 801756c:	480d      	ldr	r0, [pc, #52]	; (80175a4 <start_IWDG_task+0xbc>)
 801756e:	f00f fcb3 	bl	8026ed8 <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8017572:	e003      	b.n	801757c <start_IWDG_task+0x94>
			next_tick += tick_increment;
 8017574:	68fa      	ldr	r2, [r7, #12]
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	4413      	add	r3, r2
 801757a:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 801757c:	f012 fd80 	bl	802a080 <osKernelGetTickCount>
 8017580:	4602      	mov	r2, r0
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	4293      	cmp	r3, r2
 8017586:	d3f5      	bcc.n	8017574 <start_IWDG_task+0x8c>
		}
		osDelayUntil(next_tick);
 8017588:	68f8      	ldr	r0, [r7, #12]
 801758a:	f012 fe3b 	bl	802a204 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 801758e:	e7ed      	b.n	801756c <start_IWDG_task+0x84>
 8017590:	aaaaaaab 	.word	0xaaaaaaab
 8017594:	408a0aaa 	.word	0x408a0aaa
 8017598:	2001c080 	.word	0x2001c080
 801759c:	3dcccccd 	.word	0x3dcccccd
 80175a0:	3dcccccd 	.word	0x3dcccccd
 80175a4:	2001c050 	.word	0x2001c050

080175a8 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 80175a8:	b5b0      	push	{r4, r5, r7, lr}
 80175aa:	b08c      	sub	sp, #48	; 0x30
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80175b0:	4b7d      	ldr	r3, [pc, #500]	; (80177a8 <start_SIM_task+0x200>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 80175b6:	4b7d      	ldr	r3, [pc, #500]	; (80177ac <start_SIM_task+0x204>)
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7e8 ffb7 	bl	800052c <__aeabi_f2d>
 80175be:	a378      	add	r3, pc, #480	; (adr r3, 80177a0 <start_SIM_task+0x1f8>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	f7e9 f80a 	bl	80005dc <__aeabi_dmul>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	4610      	mov	r0, r2
 80175ce:	4619      	mov	r1, r3
 80175d0:	f7e9 fadc 	bl	8000b8c <__aeabi_d2uiz>
 80175d4:	4603      	mov	r3, r0
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Make task-specific structures */
	SIM0_initialize();
 80175d8:	f003 fee2 	bl	801b3a0 <SIM0_initialize>
	charger_t charger;
	uint16_t k = 0;
 80175dc:	2300      	movs	r3, #0
 80175de:	857b      	strh	r3, [r7, #42]	; 0x2a

	uint8_t SC = 1;
 80175e0:	2301      	movs	r3, #1
 80175e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t start_drive = 1;
 80175e6:	2301      	movs	r3, #1
 80175e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t start_charge = 0;
 80175ec:	2300      	movs	r3, #0
 80175ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t start_balance = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	f887 3020 	strb.w	r3, [r7, #32]

	SIM0_P.Ts = SIM_task_info.periodicity;
 80175f8:	4b6c      	ldr	r3, [pc, #432]	; (80177ac <start_SIM_task+0x204>)
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7e8 ff96 	bl	800052c <__aeabi_f2d>
 8017600:	4602      	mov	r2, r0
 8017602:	460b      	mov	r3, r1
 8017604:	496a      	ldr	r1, [pc, #424]	; (80177b0 <start_SIM_task+0x208>)
 8017606:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = SC;
 801760a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801760e:	4618      	mov	r0, r3
 8017610:	f7e8 ff6a 	bl	80004e8 <__aeabi_ui2d>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	4966      	ldr	r1, [pc, #408]	; (80177b4 <start_SIM_task+0x20c>)
 801761a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = start_drive ^ start_balance;
 801761e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017622:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017626:	4053      	eors	r3, r2
 8017628:	b2db      	uxtb	r3, r3
 801762a:	4618      	mov	r0, r3
 801762c:	f7e8 ff6c 	bl	8000508 <__aeabi_i2d>
 8017630:	4602      	mov	r2, r0
 8017632:	460b      	mov	r3, r1
 8017634:	495f      	ldr	r1, [pc, #380]	; (80177b4 <start_SIM_task+0x20c>)
 8017636:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = start_charge ^ start_balance;
 801763a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801763e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017642:	4053      	eors	r3, r2
 8017644:	b2db      	uxtb	r3, r3
 8017646:	4618      	mov	r0, r3
 8017648:	f7e8 ff5e 	bl	8000508 <__aeabi_i2d>
 801764c:	4602      	mov	r2, r0
 801764e:	460b      	mov	r3, r1
 8017650:	4958      	ldr	r1, [pc, #352]	; (80177b4 <start_SIM_task+0x20c>)
 8017652:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -10;
 8017656:	4b57      	ldr	r3, [pc, #348]	; (80177b4 <start_SIM_task+0x20c>)
 8017658:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 801765c:	f04f 0200 	mov.w	r2, #0
 8017660:	4b55      	ldr	r3, [pc, #340]	; (80177b8 <start_SIM_task+0x210>)
 8017662:	e9c1 2300 	strd	r2, r3, [r1]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8017666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017668:	f7e8 ff3e 	bl	80004e8 <__aeabi_ui2d>
 801766c:	4604      	mov	r4, r0
 801766e:	460d      	mov	r5, r1
 8017670:	f04f 0300 	mov.w	r3, #0
 8017674:	4618      	mov	r0, r3
 8017676:	f7e8 ff59 	bl	800052c <__aeabi_f2d>
 801767a:	a349      	add	r3, pc, #292	; (adr r3, 80177a0 <start_SIM_task+0x1f8>)
 801767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017680:	f7e8 ffac 	bl	80005dc <__aeabi_dmul>
 8017684:	4602      	mov	r2, r0
 8017686:	460b      	mov	r3, r1
 8017688:	4620      	mov	r0, r4
 801768a:	4629      	mov	r1, r5
 801768c:	f7e8 fdf0 	bl	8000270 <__adddf3>
 8017690:	4602      	mov	r2, r0
 8017692:	460b      	mov	r3, r1
 8017694:	4610      	mov	r0, r2
 8017696:	4619      	mov	r1, r3
 8017698:	f7e9 fa78 	bl	8000b8c <__aeabi_d2uiz>
 801769c:	4603      	mov	r3, r0
 801769e:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 80176a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176a2:	f012 fdaf 	bl	802a204 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		SIM0_step();
 80176a6:	f002 fd67 	bl	801a178 <SIM0_step>
		if (k == 4000) {
 80176aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80176ac:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80176b0:	d10c      	bne.n	80176cc <start_SIM_task+0x124>
			SIM0_U.drive = 0;
 80176b2:	4940      	ldr	r1, [pc, #256]	; (80177b4 <start_SIM_task+0x20c>)
 80176b4:	f04f 0200 	mov.w	r2, #0
 80176b8:	f04f 0300 	mov.w	r3, #0
 80176bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			SIM0_U.charge = 1;
 80176c0:	493c      	ldr	r1, [pc, #240]	; (80177b4 <start_SIM_task+0x20c>)
 80176c2:	f04f 0200 	mov.w	r2, #0
 80176c6:	4b3d      	ldr	r3, [pc, #244]	; (80177bc <start_SIM_task+0x214>)
 80176c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		if (k == 8000) {
 80176cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80176ce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80176d2:	d10b      	bne.n	80176ec <start_SIM_task+0x144>
			SIM0_U.drive = 1;
 80176d4:	4937      	ldr	r1, [pc, #220]	; (80177b4 <start_SIM_task+0x20c>)
 80176d6:	f04f 0200 	mov.w	r2, #0
 80176da:	4b38      	ldr	r3, [pc, #224]	; (80177bc <start_SIM_task+0x214>)
 80176dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			SIM0_U.charge = 1;
 80176e0:	4934      	ldr	r1, [pc, #208]	; (80177b4 <start_SIM_task+0x20c>)
 80176e2:	f04f 0200 	mov.w	r2, #0
 80176e6:	4b35      	ldr	r3, [pc, #212]	; (80177bc <start_SIM_task+0x214>)
 80176e8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		if ((k % 5) == 0) {
 80176ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80176ee:	4b34      	ldr	r3, [pc, #208]	; (80177c0 <start_SIM_task+0x218>)
 80176f0:	fba3 1302 	umull	r1, r3, r3, r2
 80176f4:	0899      	lsrs	r1, r3, #2
 80176f6:	460b      	mov	r3, r1
 80176f8:	009b      	lsls	r3, r3, #2
 80176fa:	440b      	add	r3, r1
 80176fc:	1ad3      	subs	r3, r2, r3
 80176fe:	b29b      	uxth	r3, r3
 8017700:	2b00      	cmp	r3, #0
 8017702:	d101      	bne.n	8017708 <start_SIM_task+0x160>
			can1_dbu_status_1_transmit();
 8017704:	f7f8 fc5a 	bl	800ffbc <can1_dbu_status_1_transmit>
		}
		if ((k % 5) == 1) {
 8017708:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801770a:	4b2d      	ldr	r3, [pc, #180]	; (80177c0 <start_SIM_task+0x218>)
 801770c:	fba3 1302 	umull	r1, r3, r3, r2
 8017710:	0899      	lsrs	r1, r3, #2
 8017712:	460b      	mov	r3, r1
 8017714:	009b      	lsls	r3, r3, #2
 8017716:	440b      	add	r3, r1
 8017718:	1ad3      	subs	r3, r2, r3
 801771a:	b29b      	uxth	r3, r3
 801771c:	2b01      	cmp	r3, #1
 801771e:	d101      	bne.n	8017724 <start_SIM_task+0x17c>
			can2_cc_status_transmit();
 8017720:	f7fa fe08 	bl	8012334 <can2_cc_status_transmit>
		}
		if ((k % 5) == 2) {
 8017724:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8017726:	4b26      	ldr	r3, [pc, #152]	; (80177c0 <start_SIM_task+0x218>)
 8017728:	fba3 1302 	umull	r1, r3, r3, r2
 801772c:	0899      	lsrs	r1, r3, #2
 801772e:	460b      	mov	r3, r1
 8017730:	009b      	lsls	r3, r3, #2
 8017732:	440b      	add	r3, r1
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	b29b      	uxth	r3, r3
 8017738:	2b02      	cmp	r3, #2
 801773a:	d101      	bne.n	8017740 <start_SIM_task+0x198>
			can2_ivt_msg_result_i_transmit();
 801773c:	f7fa fc2a 	bl	8011f94 <can2_ivt_msg_result_i_transmit>

		}
		if ((k % 5) == 3) {
 8017740:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8017742:	4b1f      	ldr	r3, [pc, #124]	; (80177c0 <start_SIM_task+0x218>)
 8017744:	fba3 1302 	umull	r1, r3, r3, r2
 8017748:	0899      	lsrs	r1, r3, #2
 801774a:	460b      	mov	r3, r1
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	440b      	add	r3, r1
 8017750:	1ad3      	subs	r3, r2, r3
 8017752:	b29b      	uxth	r3, r3
 8017754:	2b03      	cmp	r3, #3
 8017756:	d101      	bne.n	801775c <start_SIM_task+0x1b4>
			can2_ivt_msg_result_u1_transmit();
 8017758:	f7fa fc66 	bl	8012028 <can2_ivt_msg_result_u1_transmit>

		}
		if ((k % 5) == 4) {
 801775c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801775e:	4b18      	ldr	r3, [pc, #96]	; (80177c0 <start_SIM_task+0x218>)
 8017760:	fba3 1302 	umull	r1, r3, r3, r2
 8017764:	0899      	lsrs	r1, r3, #2
 8017766:	460b      	mov	r3, r1
 8017768:	009b      	lsls	r3, r3, #2
 801776a:	440b      	add	r3, r1
 801776c:	1ad3      	subs	r3, r2, r3
 801776e:	b29b      	uxth	r3, r3
 8017770:	2b04      	cmp	r3, #4
 8017772:	d101      	bne.n	8017778 <start_SIM_task+0x1d0>
			can2_ivt_msg_result_u3_transmit();
 8017774:	f7fa fca2 	bl	80120bc <can2_ivt_msg_result_u3_transmit>

		}
		k++;
 8017778:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801777a:	3301      	adds	r3, #1
 801777c:	857b      	strh	r3, [r7, #42]	; 0x2a

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 801777e:	e003      	b.n	8017788 <start_SIM_task+0x1e0>
			next_tick += tick_increment;
 8017780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017784:	4413      	add	r3, r2
 8017786:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (next_tick < osKernelGetTickCount()) {
 8017788:	f012 fc7a 	bl	802a080 <osKernelGetTickCount>
 801778c:	4602      	mov	r2, r0
 801778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017790:	4293      	cmp	r3, r2
 8017792:	d3f5      	bcc.n	8017780 <start_SIM_task+0x1d8>
		}
		osDelayUntil(next_tick);
 8017794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017796:	f012 fd35 	bl	802a204 <osDelayUntil>
		SIM0_step();
 801779a:	e784      	b.n	80176a6 <start_SIM_task+0xfe>
 801779c:	f3af 8000 	nop.w
 80177a0:	aaaaaaab 	.word	0xaaaaaaab
 80177a4:	408a0aaa 	.word	0x408a0aaa
 80177a8:	2001c080 	.word	0x2001c080
 80177ac:	3dcccccd 	.word	0x3dcccccd
 80177b0:	20000360 	.word	0x20000360
 80177b4:	2001e8e0 	.word	0x2001e8e0
 80177b8:	c0240000 	.word	0xc0240000
 80177bc:	3ff00000 	.word	0x3ff00000
 80177c0:	cccccccd 	.word	0xcccccccd

080177c4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	4a04      	ldr	r2, [pc, #16]	; (80177e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d101      	bne.n	80177da <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80177d6:	f00d f8ad 	bl	8024934 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80177da:	bf00      	nop
 80177dc:	3708      	adds	r7, #8
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}
 80177e2:	bf00      	nop
 80177e4:	40000c00 	.word	0x40000c00

080177e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80177e8:	b480      	push	{r7}
 80177ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80177ec:	b672      	cpsid	i
}
 80177ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80177f0:	e7fe      	b.n	80177f0 <Error_Handler+0x8>
	...

080177f4 <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b082      	sub	sp, #8
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	4603      	mov	r3, r0
 80177fc:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
 80177fe:	79fb      	ldrb	r3, [r7, #7]
 8017800:	4618      	mov	r0, r3
 8017802:	f7e8 fe71 	bl	80004e8 <__aeabi_ui2d>
 8017806:	4602      	mov	r2, r0
 8017808:	460b      	mov	r3, r1
 801780a:	4903      	ldr	r1, [pc, #12]	; (8017818 <set_air_plus_ext+0x24>)
 801780c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
#else
	HAL_GPIO_WritePin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin, closed);
#endif
}
 8017810:	bf00      	nop
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	2001e8e0 	.word	0x2001e8e0

0801781c <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 801781c:	b580      	push	{r7, lr}
 801781e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
 8017820:	4b05      	ldr	r3, [pc, #20]	; (8017838 <get_air_plus_ext+0x1c>)
 8017822:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8017826:	4610      	mov	r0, r2
 8017828:	4619      	mov	r1, r3
 801782a:	f7e9 f9af 	bl	8000b8c <__aeabi_d2uiz>
 801782e:	4603      	mov	r3, r0
 8017830:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port, AIR_plus_closed_Pin);
#endif
}
 8017832:	4618      	mov	r0, r3
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	2001dae8 	.word	0x2001dae8

0801783c <get_set_air_plus_ext>:

uint8_t get_set_air_plus_ext() {
 801783c:	b580      	push	{r7, lr}
 801783e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirPlus;
 8017840:	4b05      	ldr	r3, [pc, #20]	; (8017858 <get_set_air_plus_ext+0x1c>)
 8017842:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8017846:	4610      	mov	r0, r2
 8017848:	4619      	mov	r1, r3
 801784a:	f7e9 f99f 	bl	8000b8c <__aeabi_d2uiz>
 801784e:	4603      	mov	r3, r0
 8017850:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_plus_GPIO_Port, enable_AIR_plus_Pin);
#endif
}
 8017852:	4618      	mov	r0, r3
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	2001e8e0 	.word	0x2001e8e0

0801785c <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	4603      	mov	r3, r0
 8017864:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
 8017866:	79fb      	ldrb	r3, [r7, #7]
 8017868:	4618      	mov	r0, r3
 801786a:	f7e8 fe3d 	bl	80004e8 <__aeabi_ui2d>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	4903      	ldr	r1, [pc, #12]	; (8017880 <set_air_minus_ext+0x24>)
 8017874:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
#else
	HAL_GPIO_WritePin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin, closed);
#endif
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}
 8017880:	2001e8e0 	.word	0x2001e8e0

08017884 <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 8017884:	b580      	push	{r7, lr}
 8017886:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
 8017888:	4b05      	ldr	r3, [pc, #20]	; (80178a0 <get_air_minus_ext+0x1c>)
 801788a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801788e:	4610      	mov	r0, r2
 8017890:	4619      	mov	r1, r3
 8017892:	f7e9 f97b 	bl	8000b8c <__aeabi_d2uiz>
 8017896:	4603      	mov	r3, r0
 8017898:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port, AIR_minus_closed_Pin);
#endif
}
 801789a:	4618      	mov	r0, r3
 801789c:	bd80      	pop	{r7, pc}
 801789e:	bf00      	nop
 80178a0:	2001dae8 	.word	0x2001dae8

080178a4 <get_set_air_minus_ext>:

uint8_t get_set_air_minus_ext() {
 80178a4:	b580      	push	{r7, lr}
 80178a6:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnableAirMinus;
 80178a8:	4b05      	ldr	r3, [pc, #20]	; (80178c0 <get_set_air_minus_ext+0x1c>)
 80178aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80178ae:	4610      	mov	r0, r2
 80178b0:	4619      	mov	r1, r3
 80178b2:	f7e9 f96b 	bl	8000b8c <__aeabi_d2uiz>
 80178b6:	4603      	mov	r3, r0
 80178b8:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_AIR_minus_GPIO_Port, enable_AIR_minus_Pin);
#endif
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	bd80      	pop	{r7, pc}
 80178be:	bf00      	nop
 80178c0:	2001e8e0 	.word	0x2001e8e0

080178c4 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b082      	sub	sp, #8
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	4603      	mov	r3, r0
 80178cc:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
 80178ce:	79fb      	ldrb	r3, [r7, #7]
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7e8 fe09 	bl	80004e8 <__aeabi_ui2d>
 80178d6:	4602      	mov	r2, r0
 80178d8:	460b      	mov	r3, r1
 80178da:	4903      	ldr	r1, [pc, #12]	; (80178e8 <set_precharge_ext+0x24>)
 80178dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#else
	HAL_GPIO_WritePin(enable_precharge_GPIO_Port, enable_precharge_Pin, closed);
#endif
}
 80178e0:	bf00      	nop
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	2001e8e0 	.word	0x2001e8e0

080178ec <get_precharge_ext>:

uint8_t get_precharge_ext() {
 80178ec:	b580      	push	{r7, lr}
 80178ee:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
 80178f0:	4b05      	ldr	r3, [pc, #20]	; (8017908 <get_precharge_ext+0x1c>)
 80178f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80178f6:	4610      	mov	r0, r2
 80178f8:	4619      	mov	r1, r3
 80178fa:	f7e9 f947 	bl	8000b8c <__aeabi_d2uiz>
 80178fe:	4603      	mov	r3, r0
 8017900:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(precharge_closed_GPIO_Port, precharge_closed_Pin);
#endif

}
 8017902:	4618      	mov	r0, r3
 8017904:	bd80      	pop	{r7, pc}
 8017906:	bf00      	nop
 8017908:	2001dae8 	.word	0x2001dae8

0801790c <get_set_precharge_ext>:

uint8_t get_set_precharge_ext() {
 801790c:	b580      	push	{r7, lr}
 801790e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_U.EnablePrecharge;
 8017910:	4b05      	ldr	r3, [pc, #20]	; (8017928 <get_set_precharge_ext+0x1c>)
 8017912:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8017916:	4610      	mov	r0, r2
 8017918:	4619      	mov	r1, r3
 801791a:	f7e9 f937 	bl	8000b8c <__aeabi_d2uiz>
 801791e:	4603      	mov	r3, r0
 8017920:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(enable_precharge_GPIO_Port, enable_precharge_Pin);
#endif
}
 8017922:	4618      	mov	r0, r3
 8017924:	bd80      	pop	{r7, pc}
 8017926:	bf00      	nop
 8017928:	2001e8e0 	.word	0x2001e8e0

0801792c <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	4603      	mov	r3, r0
 8017934:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
 8017936:	79fb      	ldrb	r3, [r7, #7]
 8017938:	4618      	mov	r0, r3
 801793a:	f7e8 fdd5 	bl	80004e8 <__aeabi_ui2d>
 801793e:	4602      	mov	r2, r0
 8017940:	460b      	mov	r3, r1
 8017942:	4903      	ldr	r1, [pc, #12]	; (8017950 <set_ams_error_ext+0x24>)
 8017944:	e9c1 2300 	strd	r2, r3, [r1]
#else
	HAL_GPIO_WritePin(AMS_error_GPIO_Port, AMS_error_Pin, raise_error);
#endif
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	2001e8e0 	.word	0x2001e8e0

08017954 <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 8017954:	b480      	push	{r7}
 8017956:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
 8017958:	4b03      	ldr	r3, [pc, #12]	; (8017968 <get_ams_error_latched_ext+0x14>)
 801795a:	781b      	ldrb	r3, [r3, #0]
#else
	return HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port, AMS_error_latched_Pin);
#endif
}
 801795c:	4618      	mov	r0, r3
 801795e:	46bd      	mov	sp, r7
 8017960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017964:	4770      	bx	lr
 8017966:	bf00      	nop
 8017968:	2001dae8 	.word	0x2001dae8

0801796c <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	4603      	mov	r3, r0
 8017974:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
 8017976:	79fb      	ldrb	r3, [r7, #7]
 8017978:	4618      	mov	r0, r3
 801797a:	f7e8 fdb5 	bl	80004e8 <__aeabi_ui2d>
 801797e:	4602      	mov	r2, r0
 8017980:	460b      	mov	r3, r1
 8017982:	4903      	ldr	r1, [pc, #12]	; (8017990 <set_imd_error_ext+0x24>)
 8017984:	e9c1 2304 	strd	r2, r3, [r1, #16]
#else
	return HAL_GPIO_ReadPin(IMD_error_GPIO_Port, IMD_error_Pin);
#endif
}
 8017988:	bf00      	nop
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	2001e8e0 	.word	0x2001e8e0

08017994 <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 8017994:	b480      	push	{r7}
 8017996:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
 8017998:	4b03      	ldr	r3, [pc, #12]	; (80179a8 <get_imd_error_latched_ext+0x14>)
 801799a:	785b      	ldrb	r3, [r3, #1]
#else
	return HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port, IMD_error_latched_Pin);
#endif
}
 801799c:	4618      	mov	r0, r3
 801799e:	46bd      	mov	sp, r7
 80179a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop
 80179a8:	2001dae8 	.word	0x2001dae8

080179ac <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 80179ac:	b580      	push	{r7, lr}
 80179ae:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
 80179b0:	4b05      	ldr	r3, [pc, #20]	; (80179c8 <get_sc_probe_ext+0x1c>)
 80179b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80179b6:	4610      	mov	r0, r2
 80179b8:	4619      	mov	r1, r3
 80179ba:	f7e9 f8e7 	bl	8000b8c <__aeabi_d2uiz>
 80179be:	4603      	mov	r3, r0
 80179c0:	b2db      	uxtb	r3, r3
#else
	return HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
#endif
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	2001dae8 	.word	0x2001dae8

080179cc <get_imd_ok_ext>:

uint8_t get_imd_ok_ext() {
 80179cc:	b480      	push	{r7}
 80179ce:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return 1;
 80179d0:	2301      	movs	r3, #1
#else
	return HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
#endif
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <set_balance_ext>:


void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 80179dc:	b590      	push	{r4, r7, lr}
 80179de:	b083      	sub	sp, #12
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	4603      	mov	r3, r0
 80179e4:	603a      	str	r2, [r7, #0]
 80179e6:	71fb      	strb	r3, [r7, #7]
 80179e8:	460b      	mov	r3, r1
 80179ea:	71bb      	strb	r3, [r7, #6]
#ifdef SIMULATION
	SIM0_U.BalanceOut[index] = closed;
 80179ec:	79bc      	ldrb	r4, [r7, #6]
 80179ee:	79fb      	ldrb	r3, [r7, #7]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7e8 fd79 	bl	80004e8 <__aeabi_ui2d>
 80179f6:	4602      	mov	r2, r0
 80179f8:	460b      	mov	r3, r1
 80179fa:	4805      	ldr	r0, [pc, #20]	; (8017a10 <set_balance_ext+0x34>)
 80179fc:	f104 010d 	add.w	r1, r4, #13
 8017a00:	00c9      	lsls	r1, r1, #3
 8017a02:	4401      	add	r1, r0
 8017a04:	e9c1 2300 	strd	r2, r3, [r1]
#else

#endif

}
 8017a08:	bf00      	nop
 8017a0a:	370c      	adds	r7, #12
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd90      	pop	{r4, r7, pc}
 8017a10:	2001e8e0 	.word	0x2001e8e0

08017a14 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8017a18:	4b17      	ldr	r3, [pc, #92]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a1a:	4a18      	ldr	r2, [pc, #96]	; (8017a7c <MX_SPI2_Init+0x68>)
 8017a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017a1e:	4b16      	ldr	r3, [pc, #88]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017a26:	4b14      	ldr	r3, [pc, #80]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a28:	2200      	movs	r2, #0
 8017a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017a2c:	4b12      	ldr	r3, [pc, #72]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a2e:	2200      	movs	r2, #0
 8017a30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017a32:	4b11      	ldr	r3, [pc, #68]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a34:	2200      	movs	r2, #0
 8017a36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017a38:	4b0f      	ldr	r3, [pc, #60]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017a3e:	4b0e      	ldr	r3, [pc, #56]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8017a46:	4b0c      	ldr	r3, [pc, #48]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a48:	2220      	movs	r2, #32
 8017a4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017a4c:	4b0a      	ldr	r3, [pc, #40]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a4e:	2200      	movs	r2, #0
 8017a50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017a52:	4b09      	ldr	r3, [pc, #36]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a54:	2200      	movs	r2, #0
 8017a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017a58:	4b07      	ldr	r3, [pc, #28]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017a5e:	4b06      	ldr	r3, [pc, #24]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a60:	220a      	movs	r2, #10
 8017a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017a64:	4804      	ldr	r0, [pc, #16]	; (8017a78 <MX_SPI2_Init+0x64>)
 8017a66:	f00f fead 	bl	80277c4 <HAL_SPI_Init>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d001      	beq.n	8017a74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017a70:	f7ff feba 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017a74:	bf00      	nop
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	2001c08c 	.word	0x2001c08c
 8017a7c:	40003800 	.word	0x40003800

08017a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b08a      	sub	sp, #40	; 0x28
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a88:	f107 0314 	add.w	r3, r7, #20
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	601a      	str	r2, [r3, #0]
 8017a90:	605a      	str	r2, [r3, #4]
 8017a92:	609a      	str	r2, [r3, #8]
 8017a94:	60da      	str	r2, [r3, #12]
 8017a96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4a28      	ldr	r2, [pc, #160]	; (8017b40 <HAL_SPI_MspInit+0xc0>)
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	d14a      	bne.n	8017b38 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	613b      	str	r3, [r7, #16]
 8017aa6:	4b27      	ldr	r3, [pc, #156]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aaa:	4a26      	ldr	r2, [pc, #152]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8017ab2:	4b24      	ldr	r3, [pc, #144]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017aba:	613b      	str	r3, [r7, #16]
 8017abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017abe:	2300      	movs	r3, #0
 8017ac0:	60fb      	str	r3, [r7, #12]
 8017ac2:	4b20      	ldr	r3, [pc, #128]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ac6:	4a1f      	ldr	r2, [pc, #124]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ac8:	f043 0304 	orr.w	r3, r3, #4
 8017acc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ace:	4b1d      	ldr	r3, [pc, #116]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad2:	f003 0304 	and.w	r3, r3, #4
 8017ad6:	60fb      	str	r3, [r7, #12]
 8017ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ada:	2300      	movs	r3, #0
 8017adc:	60bb      	str	r3, [r7, #8]
 8017ade:	4b19      	ldr	r3, [pc, #100]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae2:	4a18      	ldr	r2, [pc, #96]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017ae4:	f043 0302 	orr.w	r3, r3, #2
 8017ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8017aea:	4b16      	ldr	r3, [pc, #88]	; (8017b44 <HAL_SPI_MspInit+0xc4>)
 8017aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aee:	f003 0302 	and.w	r3, r3, #2
 8017af2:	60bb      	str	r3, [r7, #8]
 8017af4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8017af6:	230c      	movs	r3, #12
 8017af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017afa:	2302      	movs	r3, #2
 8017afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b02:	2303      	movs	r3, #3
 8017b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017b06:	2305      	movs	r3, #5
 8017b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017b0a:	f107 0314 	add.w	r3, r7, #20
 8017b0e:	4619      	mov	r1, r3
 8017b10:	480d      	ldr	r0, [pc, #52]	; (8017b48 <HAL_SPI_MspInit+0xc8>)
 8017b12:	f00e ffd1 	bl	8026ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8017b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b1c:	2302      	movs	r3, #2
 8017b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b20:	2300      	movs	r3, #0
 8017b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b24:	2303      	movs	r3, #3
 8017b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017b28:	2305      	movs	r3, #5
 8017b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017b2c:	f107 0314 	add.w	r3, r7, #20
 8017b30:	4619      	mov	r1, r3
 8017b32:	4806      	ldr	r0, [pc, #24]	; (8017b4c <HAL_SPI_MspInit+0xcc>)
 8017b34:	f00e ffc0 	bl	8026ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8017b38:	bf00      	nop
 8017b3a:	3728      	adds	r7, #40	; 0x28
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	40003800 	.word	0x40003800
 8017b44:	40023800 	.word	0x40023800
 8017b48:	40020800 	.word	0x40020800
 8017b4c:	40020400 	.word	0x40020400

08017b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b082      	sub	sp, #8
 8017b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017b56:	2300      	movs	r3, #0
 8017b58:	607b      	str	r3, [r7, #4]
 8017b5a:	4b12      	ldr	r3, [pc, #72]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b5e:	4a11      	ldr	r2, [pc, #68]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017b64:	6453      	str	r3, [r2, #68]	; 0x44
 8017b66:	4b0f      	ldr	r3, [pc, #60]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017b6e:	607b      	str	r3, [r7, #4]
 8017b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017b72:	2300      	movs	r3, #0
 8017b74:	603b      	str	r3, [r7, #0]
 8017b76:	4b0b      	ldr	r3, [pc, #44]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b7a:	4a0a      	ldr	r2, [pc, #40]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017b80:	6413      	str	r3, [r2, #64]	; 0x40
 8017b82:	4b08      	ldr	r3, [pc, #32]	; (8017ba4 <HAL_MspInit+0x54>)
 8017b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017b8a:	603b      	str	r3, [r7, #0]
 8017b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017b8e:	2200      	movs	r2, #0
 8017b90:	210f      	movs	r1, #15
 8017b92:	f06f 0001 	mvn.w	r0, #1
 8017b96:	f00e fbf5 	bl	8026384 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017b9a:	bf00      	nop
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	40023800 	.word	0x40023800

08017ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b08c      	sub	sp, #48	; 0x30
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8017bb8:	2200      	movs	r2, #0
 8017bba:	6879      	ldr	r1, [r7, #4]
 8017bbc:	2032      	movs	r0, #50	; 0x32
 8017bbe:	f00e fbe1 	bl	8026384 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8017bc2:	2032      	movs	r0, #50	; 0x32
 8017bc4:	f00e fbfa 	bl	80263bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8017bc8:	2300      	movs	r3, #0
 8017bca:	60fb      	str	r3, [r7, #12]
 8017bcc:	4b1f      	ldr	r3, [pc, #124]	; (8017c4c <HAL_InitTick+0xa4>)
 8017bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bd0:	4a1e      	ldr	r2, [pc, #120]	; (8017c4c <HAL_InitTick+0xa4>)
 8017bd2:	f043 0308 	orr.w	r3, r3, #8
 8017bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8017bd8:	4b1c      	ldr	r3, [pc, #112]	; (8017c4c <HAL_InitTick+0xa4>)
 8017bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bdc:	f003 0308 	and.w	r3, r3, #8
 8017be0:	60fb      	str	r3, [r7, #12]
 8017be2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017be4:	f107 0210 	add.w	r2, r7, #16
 8017be8:	f107 0314 	add.w	r3, r7, #20
 8017bec:	4611      	mov	r1, r2
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f00f fdb6 	bl	8027760 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017bf4:	f00f fda0 	bl	8027738 <HAL_RCC_GetPCLK1Freq>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8017bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c00:	4a13      	ldr	r2, [pc, #76]	; (8017c50 <HAL_InitTick+0xa8>)
 8017c02:	fba2 2303 	umull	r2, r3, r2, r3
 8017c06:	0c9b      	lsrs	r3, r3, #18
 8017c08:	3b01      	subs	r3, #1
 8017c0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8017c0c:	4b11      	ldr	r3, [pc, #68]	; (8017c54 <HAL_InitTick+0xac>)
 8017c0e:	4a12      	ldr	r2, [pc, #72]	; (8017c58 <HAL_InitTick+0xb0>)
 8017c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8017c12:	4b10      	ldr	r3, [pc, #64]	; (8017c54 <HAL_InitTick+0xac>)
 8017c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017c18:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8017c1a:	4a0e      	ldr	r2, [pc, #56]	; (8017c54 <HAL_InitTick+0xac>)
 8017c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c1e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8017c20:	4b0c      	ldr	r3, [pc, #48]	; (8017c54 <HAL_InitTick+0xac>)
 8017c22:	2200      	movs	r2, #0
 8017c24:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017c26:	4b0b      	ldr	r3, [pc, #44]	; (8017c54 <HAL_InitTick+0xac>)
 8017c28:	2200      	movs	r2, #0
 8017c2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8017c2c:	4809      	ldr	r0, [pc, #36]	; (8017c54 <HAL_InitTick+0xac>)
 8017c2e:	f010 fb71 	bl	8028314 <HAL_TIM_Base_Init>
 8017c32:	4603      	mov	r3, r0
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d104      	bne.n	8017c42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8017c38:	4806      	ldr	r0, [pc, #24]	; (8017c54 <HAL_InitTick+0xac>)
 8017c3a:	f010 fc23 	bl	8028484 <HAL_TIM_Base_Start_IT>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	e000      	b.n	8017c44 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8017c42:	2301      	movs	r3, #1
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3730      	adds	r7, #48	; 0x30
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	40023800 	.word	0x40023800
 8017c50:	431bde83 	.word	0x431bde83
 8017c54:	2001c0e4 	.word	0x2001c0e4
 8017c58:	40000c00 	.word	0x40000c00

08017c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017c60:	e7fe      	b.n	8017c60 <NMI_Handler+0x4>

08017c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017c62:	b480      	push	{r7}
 8017c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017c66:	e7fe      	b.n	8017c66 <HardFault_Handler+0x4>

08017c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017c68:	b480      	push	{r7}
 8017c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017c6c:	e7fe      	b.n	8017c6c <MemManage_Handler+0x4>

08017c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017c6e:	b480      	push	{r7}
 8017c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017c72:	e7fe      	b.n	8017c72 <BusFault_Handler+0x4>

08017c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017c74:	b480      	push	{r7}
 8017c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017c78:	e7fe      	b.n	8017c78 <UsageFault_Handler+0x4>

08017c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017c7a:	b480      	push	{r7}
 8017c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017c7e:	bf00      	nop
 8017c80:	46bd      	mov	sp, r7
 8017c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c86:	4770      	bx	lr

08017c88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_plus_closed_Pin);
 8017c8c:	2010      	movs	r0, #16
 8017c8e:	f00f f8c9 	bl	8026e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8017c92:	bf00      	nop
 8017c94:	bd80      	pop	{r7, pc}
	...

08017c98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017c9c:	4802      	ldr	r0, [pc, #8]	; (8017ca8 <ADC_IRQHandler+0x10>)
 8017c9e:	f00c fed0 	bl	8024a42 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8017ca2:	bf00      	nop
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	2001bee8 	.word	0x2001bee8

08017cac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017cb0:	4802      	ldr	r0, [pc, #8]	; (8017cbc <CAN1_TX_IRQHandler+0x10>)
 8017cb2:	f00e f889 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8017cb6:	bf00      	nop
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	2001bfb8 	.word	0x2001bfb8

08017cc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017cc4:	4802      	ldr	r0, [pc, #8]	; (8017cd0 <CAN1_RX0_IRQHandler+0x10>)
 8017cc6:	f00e f87f 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8017cca:	bf00      	nop
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	2001bfb8 	.word	0x2001bfb8

08017cd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017cd8:	4802      	ldr	r0, [pc, #8]	; (8017ce4 <CAN1_RX1_IRQHandler+0x10>)
 8017cda:	f00e f875 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8017cde:	bf00      	nop
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	2001bfb8 	.word	0x2001bfb8

08017ce8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AIR_minus_closed_Pin);
 8017cec:	2020      	movs	r0, #32
 8017cee:	f00f f899 	bl	8026e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(precharge_closed_Pin);
 8017cf2:	2040      	movs	r0, #64	; 0x40
 8017cf4:	f00f f896 	bl	8026e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8017cf8:	bf00      	nop
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8017d00:	4802      	ldr	r0, [pc, #8]	; (8017d0c <TIM2_IRQHandler+0x10>)
 8017d02:	f010 ffaf 	bl	8028c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8017d06:	bf00      	nop
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	2001c1bc 	.word	0x2001c1bc

08017d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017d14:	4802      	ldr	r0, [pc, #8]	; (8017d20 <TIM3_IRQHandler+0x10>)
 8017d16:	f010 ffa5 	bl	8028c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017d1a:	bf00      	nop
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	2001c12c 	.word	0x2001c12c

08017d24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017d28:	4802      	ldr	r0, [pc, #8]	; (8017d34 <TIM5_IRQHandler+0x10>)
 8017d2a:	f010 ff9b 	bl	8028c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8017d2e:	bf00      	nop
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	2001c0e4 	.word	0x2001c0e4

08017d38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017d3c:	4802      	ldr	r0, [pc, #8]	; (8017d48 <DMA2_Stream0_IRQHandler+0x10>)
 8017d3e:	f00e fc51 	bl	80265e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017d42:	bf00      	nop
 8017d44:	bd80      	pop	{r7, pc}
 8017d46:	bf00      	nop
 8017d48:	2001bf30 	.word	0x2001bf30

08017d4c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017d50:	4802      	ldr	r0, [pc, #8]	; (8017d5c <CAN2_TX_IRQHandler+0x10>)
 8017d52:	f00e f839 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8017d56:	bf00      	nop
 8017d58:	bd80      	pop	{r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	2001bf90 	.word	0x2001bf90

08017d60 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017d64:	4802      	ldr	r0, [pc, #8]	; (8017d70 <CAN2_RX0_IRQHandler+0x10>)
 8017d66:	f00e f82f 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8017d6a:	bf00      	nop
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	2001bf90 	.word	0x2001bf90

08017d74 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017d78:	4802      	ldr	r0, [pc, #8]	; (8017d84 <CAN2_RX1_IRQHandler+0x10>)
 8017d7a:	f00e f825 	bl	8025dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8017d7e:	bf00      	nop
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	2001bf90 	.word	0x2001bf90

08017d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017d8c:	4b06      	ldr	r3, [pc, #24]	; (8017da8 <SystemInit+0x20>)
 8017d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d92:	4a05      	ldr	r2, [pc, #20]	; (8017da8 <SystemInit+0x20>)
 8017d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017d9c:	bf00      	nop
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da4:	4770      	bx	lr
 8017da6:	bf00      	nop
 8017da8:	e000ed00 	.word	0xe000ed00

08017dac <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b096      	sub	sp, #88	; 0x58
 8017db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017db6:	2200      	movs	r2, #0
 8017db8:	601a      	str	r2, [r3, #0]
 8017dba:	605a      	str	r2, [r3, #4]
 8017dbc:	609a      	str	r2, [r3, #8]
 8017dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017dce:	2200      	movs	r2, #0
 8017dd0:	601a      	str	r2, [r3, #0]
 8017dd2:	605a      	str	r2, [r3, #4]
 8017dd4:	609a      	str	r2, [r3, #8]
 8017dd6:	60da      	str	r2, [r3, #12]
 8017dd8:	611a      	str	r2, [r3, #16]
 8017dda:	615a      	str	r2, [r3, #20]
 8017ddc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017dde:	1d3b      	adds	r3, r7, #4
 8017de0:	2220      	movs	r2, #32
 8017de2:	2100      	movs	r1, #0
 8017de4:	4618      	mov	r0, r3
 8017de6:	f016 fda3 	bl	802e930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017dea:	4b3e      	ldr	r3, [pc, #248]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017dec:	4a3e      	ldr	r2, [pc, #248]	; (8017ee8 <MX_TIM1_Init+0x13c>)
 8017dee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8017df0:	4b3c      	ldr	r3, [pc, #240]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017df2:	2200      	movs	r2, #0
 8017df4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017df6:	4b3b      	ldr	r3, [pc, #236]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017df8:	2200      	movs	r2, #0
 8017dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8017dfc:	4b39      	ldr	r3, [pc, #228]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017e04:	4b37      	ldr	r3, [pc, #220]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e06:	2200      	movs	r2, #0
 8017e08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017e0a:	4b36      	ldr	r3, [pc, #216]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e10:	4b34      	ldr	r3, [pc, #208]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e12:	2200      	movs	r2, #0
 8017e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017e16:	4833      	ldr	r0, [pc, #204]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e18:	f010 fa7c 	bl	8028314 <HAL_TIM_Base_Init>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d001      	beq.n	8017e26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8017e22:	f7ff fce1 	bl	80177e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017e2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017e30:	4619      	mov	r1, r3
 8017e32:	482c      	ldr	r0, [pc, #176]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e34:	f011 f97c 	bl	8029130 <HAL_TIM_ConfigClockSource>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d001      	beq.n	8017e42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8017e3e:	f7ff fcd3 	bl	80177e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8017e42:	4828      	ldr	r0, [pc, #160]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e44:	f010 fb8e 	bl	8028564 <HAL_TIM_PWM_Init>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d001      	beq.n	8017e52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8017e4e:	f7ff fccb 	bl	80177e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017e52:	2300      	movs	r3, #0
 8017e54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e56:	2300      	movs	r3, #0
 8017e58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017e5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e5e:	4619      	mov	r1, r3
 8017e60:	4820      	ldr	r0, [pc, #128]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e62:	f011 ff9d 	bl	8029da0 <HAL_TIMEx_MasterConfigSynchronization>
 8017e66:	4603      	mov	r3, r0
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d001      	beq.n	8017e70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8017e6c:	f7ff fcbc 	bl	80177e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017e70:	2360      	movs	r3, #96	; 0x60
 8017e72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8017e74:	2300      	movs	r3, #0
 8017e76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017e80:	2300      	movs	r3, #0
 8017e82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017e84:	2300      	movs	r3, #0
 8017e86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8017e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017e90:	2208      	movs	r2, #8
 8017e92:	4619      	mov	r1, r3
 8017e94:	4813      	ldr	r0, [pc, #76]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017e96:	f011 f889 	bl	8028fac <HAL_TIM_PWM_ConfigChannel>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d001      	beq.n	8017ea4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8017ea0:	f7ff fca2 	bl	80177e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017eac:	2300      	movs	r3, #0
 8017eae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017ebc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8017ec2:	1d3b      	adds	r3, r7, #4
 8017ec4:	4619      	mov	r1, r3
 8017ec6:	4807      	ldr	r0, [pc, #28]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017ec8:	f011 ffe6 	bl	8029e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8017ed2:	f7ff fc89 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8017ed6:	4803      	ldr	r0, [pc, #12]	; (8017ee4 <MX_TIM1_Init+0x138>)
 8017ed8:	f000 f974 	bl	80181c4 <HAL_TIM_MspPostInit>

}
 8017edc:	bf00      	nop
 8017ede:	3758      	adds	r7, #88	; 0x58
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}
 8017ee4:	2001c174 	.word	0x2001c174
 8017ee8:	40010000 	.word	0x40010000

08017eec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b090      	sub	sp, #64	; 0x40
 8017ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	601a      	str	r2, [r3, #0]
 8017efa:	605a      	str	r2, [r3, #4]
 8017efc:	609a      	str	r2, [r3, #8]
 8017efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8017f00:	f107 031c 	add.w	r3, r7, #28
 8017f04:	2200      	movs	r2, #0
 8017f06:	601a      	str	r2, [r3, #0]
 8017f08:	605a      	str	r2, [r3, #4]
 8017f0a:	609a      	str	r2, [r3, #8]
 8017f0c:	60da      	str	r2, [r3, #12]
 8017f0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8017f10:	f107 030c 	add.w	r3, r7, #12
 8017f14:	2200      	movs	r2, #0
 8017f16:	601a      	str	r2, [r3, #0]
 8017f18:	605a      	str	r2, [r3, #4]
 8017f1a:	609a      	str	r2, [r3, #8]
 8017f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017f1e:	1d3b      	adds	r3, r7, #4
 8017f20:	2200      	movs	r2, #0
 8017f22:	601a      	str	r2, [r3, #0]
 8017f24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8017f26:	4b3e      	ldr	r3, [pc, #248]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8017f2e:	4b3c      	ldr	r3, [pc, #240]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f30:	2200      	movs	r2, #0
 8017f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017f34:	4b3a      	ldr	r3, [pc, #232]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f36:	2200      	movs	r2, #0
 8017f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8017f3a:	4b39      	ldr	r3, [pc, #228]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017f42:	4b37      	ldr	r3, [pc, #220]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f44:	2200      	movs	r2, #0
 8017f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017f48:	4b35      	ldr	r3, [pc, #212]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8017f4e:	4834      	ldr	r0, [pc, #208]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f50:	f010 f9e0 	bl	8028314 <HAL_TIM_Base_Init>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d001      	beq.n	8017f5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8017f5a:	f7ff fc45 	bl	80177e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8017f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017f68:	4619      	mov	r1, r3
 8017f6a:	482d      	ldr	r0, [pc, #180]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f6c:	f011 f8e0 	bl	8029130 <HAL_TIM_ConfigClockSource>
 8017f70:	4603      	mov	r3, r0
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d001      	beq.n	8017f7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8017f76:	f7ff fc37 	bl	80177e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8017f7a:	4829      	ldr	r0, [pc, #164]	; (8018020 <MX_TIM2_Init+0x134>)
 8017f7c:	f010 fc14 	bl	80287a8 <HAL_TIM_IC_Init>
 8017f80:	4603      	mov	r3, r0
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d001      	beq.n	8017f8a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8017f86:	f7ff fc2f 	bl	80177e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8017f8a:	2304      	movs	r3, #4
 8017f8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8017f8e:	2350      	movs	r3, #80	; 0x50
 8017f90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017f92:	2300      	movs	r3, #0
 8017f94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8017f96:	2300      	movs	r3, #0
 8017f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8017f9e:	f107 031c 	add.w	r3, r7, #28
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	481e      	ldr	r0, [pc, #120]	; (8018020 <MX_TIM2_Init+0x134>)
 8017fa6:	f011 f98a 	bl	80292be <HAL_TIM_SlaveConfigSynchro>
 8017faa:	4603      	mov	r3, r0
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d001      	beq.n	8017fb4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8017fb0:	f7ff fc1a 	bl	80177e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8017fb8:	2301      	movs	r3, #1
 8017fba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8017fc4:	f107 030c 	add.w	r3, r7, #12
 8017fc8:	2200      	movs	r2, #0
 8017fca:	4619      	mov	r1, r3
 8017fcc:	4814      	ldr	r0, [pc, #80]	; (8018020 <MX_TIM2_Init+0x134>)
 8017fce:	f010 ff51 	bl	8028e74 <HAL_TIM_IC_ConfigChannel>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d001      	beq.n	8017fdc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8017fd8:	f7ff fc06 	bl	80177e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8017fdc:	2302      	movs	r3, #2
 8017fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8017fe0:	2302      	movs	r3, #2
 8017fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8017fe4:	f107 030c 	add.w	r3, r7, #12
 8017fe8:	2204      	movs	r2, #4
 8017fea:	4619      	mov	r1, r3
 8017fec:	480c      	ldr	r0, [pc, #48]	; (8018020 <MX_TIM2_Init+0x134>)
 8017fee:	f010 ff41 	bl	8028e74 <HAL_TIM_IC_ConfigChannel>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d001      	beq.n	8017ffc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8017ff8:	f7ff fbf6 	bl	80177e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018000:	2300      	movs	r3, #0
 8018002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8018004:	1d3b      	adds	r3, r7, #4
 8018006:	4619      	mov	r1, r3
 8018008:	4805      	ldr	r0, [pc, #20]	; (8018020 <MX_TIM2_Init+0x134>)
 801800a:	f011 fec9 	bl	8029da0 <HAL_TIMEx_MasterConfigSynchronization>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d001      	beq.n	8018018 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8018014:	f7ff fbe8 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8018018:	bf00      	nop
 801801a:	3740      	adds	r7, #64	; 0x40
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}
 8018020:	2001c1bc 	.word	0x2001c1bc

08018024 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b086      	sub	sp, #24
 8018028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801802a:	f107 0308 	add.w	r3, r7, #8
 801802e:	2200      	movs	r2, #0
 8018030:	601a      	str	r2, [r3, #0]
 8018032:	605a      	str	r2, [r3, #4]
 8018034:	609a      	str	r2, [r3, #8]
 8018036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018038:	463b      	mov	r3, r7
 801803a:	2200      	movs	r2, #0
 801803c:	601a      	str	r2, [r3, #0]
 801803e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8018040:	4b1d      	ldr	r3, [pc, #116]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018042:	4a1e      	ldr	r2, [pc, #120]	; (80180bc <MX_TIM3_Init+0x98>)
 8018044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8018046:	4b1c      	ldr	r3, [pc, #112]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018048:	2200      	movs	r2, #0
 801804a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801804c:	4b1a      	ldr	r3, [pc, #104]	; (80180b8 <MX_TIM3_Init+0x94>)
 801804e:	2200      	movs	r2, #0
 8018050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8018052:	4b19      	ldr	r3, [pc, #100]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018058:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801805a:	4b17      	ldr	r3, [pc, #92]	; (80180b8 <MX_TIM3_Init+0x94>)
 801805c:	2200      	movs	r2, #0
 801805e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018060:	4b15      	ldr	r3, [pc, #84]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018062:	2200      	movs	r2, #0
 8018064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8018066:	4814      	ldr	r0, [pc, #80]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018068:	f010 f954 	bl	8028314 <HAL_TIM_Base_Init>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d001      	beq.n	8018076 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8018072:	f7ff fbb9 	bl	80177e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801807a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801807c:	f107 0308 	add.w	r3, r7, #8
 8018080:	4619      	mov	r1, r3
 8018082:	480d      	ldr	r0, [pc, #52]	; (80180b8 <MX_TIM3_Init+0x94>)
 8018084:	f011 f854 	bl	8029130 <HAL_TIM_ConfigClockSource>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d001      	beq.n	8018092 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 801808e:	f7ff fbab 	bl	80177e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8018092:	2320      	movs	r3, #32
 8018094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018096:	2300      	movs	r3, #0
 8018098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801809a:	463b      	mov	r3, r7
 801809c:	4619      	mov	r1, r3
 801809e:	4806      	ldr	r0, [pc, #24]	; (80180b8 <MX_TIM3_Init+0x94>)
 80180a0:	f011 fe7e 	bl	8029da0 <HAL_TIMEx_MasterConfigSynchronization>
 80180a4:	4603      	mov	r3, r0
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d001      	beq.n	80180ae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80180aa:	f7ff fb9d 	bl	80177e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80180ae:	bf00      	nop
 80180b0:	3718      	adds	r7, #24
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd80      	pop	{r7, pc}
 80180b6:	bf00      	nop
 80180b8:	2001c12c 	.word	0x2001c12c
 80180bc:	40000400 	.word	0x40000400

080180c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b08c      	sub	sp, #48	; 0x30
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80180c8:	f107 031c 	add.w	r3, r7, #28
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
 80180d0:	605a      	str	r2, [r3, #4]
 80180d2:	609a      	str	r2, [r3, #8]
 80180d4:	60da      	str	r2, [r3, #12]
 80180d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	4a35      	ldr	r2, [pc, #212]	; (80181b4 <HAL_TIM_Base_MspInit+0xf4>)
 80180de:	4293      	cmp	r3, r2
 80180e0:	d10e      	bne.n	8018100 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80180e2:	2300      	movs	r3, #0
 80180e4:	61bb      	str	r3, [r7, #24]
 80180e6:	4b34      	ldr	r3, [pc, #208]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 80180e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ea:	4a33      	ldr	r2, [pc, #204]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 80180ec:	f043 0301 	orr.w	r3, r3, #1
 80180f0:	6453      	str	r3, [r2, #68]	; 0x44
 80180f2:	4b31      	ldr	r3, [pc, #196]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 80180f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180f6:	f003 0301 	and.w	r3, r3, #1
 80180fa:	61bb      	str	r3, [r7, #24]
 80180fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80180fe:	e055      	b.n	80181ac <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018108:	d135      	bne.n	8018176 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 801810a:	2300      	movs	r3, #0
 801810c:	617b      	str	r3, [r7, #20]
 801810e:	4b2a      	ldr	r3, [pc, #168]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018112:	4a29      	ldr	r2, [pc, #164]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018114:	f043 0301 	orr.w	r3, r3, #1
 8018118:	6413      	str	r3, [r2, #64]	; 0x40
 801811a:	4b27      	ldr	r3, [pc, #156]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 801811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801811e:	f003 0301 	and.w	r3, r3, #1
 8018122:	617b      	str	r3, [r7, #20]
 8018124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018126:	2300      	movs	r3, #0
 8018128:	613b      	str	r3, [r7, #16]
 801812a:	4b23      	ldr	r3, [pc, #140]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 801812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801812e:	4a22      	ldr	r2, [pc, #136]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018130:	f043 0301 	orr.w	r3, r3, #1
 8018134:	6313      	str	r3, [r2, #48]	; 0x30
 8018136:	4b20      	ldr	r3, [pc, #128]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801813a:	f003 0301 	and.w	r3, r3, #1
 801813e:	613b      	str	r3, [r7, #16]
 8018140:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8018142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018148:	2302      	movs	r3, #2
 801814a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801814c:	2300      	movs	r3, #0
 801814e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018150:	2300      	movs	r3, #0
 8018152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8018154:	2301      	movs	r3, #1
 8018156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8018158:	f107 031c 	add.w	r3, r7, #28
 801815c:	4619      	mov	r1, r3
 801815e:	4817      	ldr	r0, [pc, #92]	; (80181bc <HAL_TIM_Base_MspInit+0xfc>)
 8018160:	f00e fcaa 	bl	8026ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8018164:	2200      	movs	r2, #0
 8018166:	2105      	movs	r1, #5
 8018168:	201c      	movs	r0, #28
 801816a:	f00e f90b 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801816e:	201c      	movs	r0, #28
 8018170:	f00e f924 	bl	80263bc <HAL_NVIC_EnableIRQ>
}
 8018174:	e01a      	b.n	80181ac <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a11      	ldr	r2, [pc, #68]	; (80181c0 <HAL_TIM_Base_MspInit+0x100>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d115      	bne.n	80181ac <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8018180:	2300      	movs	r3, #0
 8018182:	60fb      	str	r3, [r7, #12]
 8018184:	4b0c      	ldr	r3, [pc, #48]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018188:	4a0b      	ldr	r2, [pc, #44]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 801818a:	f043 0302 	orr.w	r3, r3, #2
 801818e:	6413      	str	r3, [r2, #64]	; 0x40
 8018190:	4b09      	ldr	r3, [pc, #36]	; (80181b8 <HAL_TIM_Base_MspInit+0xf8>)
 8018192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018194:	f003 0302 	and.w	r3, r3, #2
 8018198:	60fb      	str	r3, [r7, #12]
 801819a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 801819c:	2200      	movs	r2, #0
 801819e:	2105      	movs	r1, #5
 80181a0:	201d      	movs	r0, #29
 80181a2:	f00e f8ef 	bl	8026384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80181a6:	201d      	movs	r0, #29
 80181a8:	f00e f908 	bl	80263bc <HAL_NVIC_EnableIRQ>
}
 80181ac:	bf00      	nop
 80181ae:	3730      	adds	r7, #48	; 0x30
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	40010000 	.word	0x40010000
 80181b8:	40023800 	.word	0x40023800
 80181bc:	40020000 	.word	0x40020000
 80181c0:	40000400 	.word	0x40000400

080181c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b088      	sub	sp, #32
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181cc:	f107 030c 	add.w	r3, r7, #12
 80181d0:	2200      	movs	r2, #0
 80181d2:	601a      	str	r2, [r3, #0]
 80181d4:	605a      	str	r2, [r3, #4]
 80181d6:	609a      	str	r2, [r3, #8]
 80181d8:	60da      	str	r2, [r3, #12]
 80181da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	4a12      	ldr	r2, [pc, #72]	; (801822c <HAL_TIM_MspPostInit+0x68>)
 80181e2:	4293      	cmp	r3, r2
 80181e4:	d11e      	bne.n	8018224 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80181e6:	2300      	movs	r3, #0
 80181e8:	60bb      	str	r3, [r7, #8]
 80181ea:	4b11      	ldr	r3, [pc, #68]	; (8018230 <HAL_TIM_MspPostInit+0x6c>)
 80181ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ee:	4a10      	ldr	r2, [pc, #64]	; (8018230 <HAL_TIM_MspPostInit+0x6c>)
 80181f0:	f043 0310 	orr.w	r3, r3, #16
 80181f4:	6313      	str	r3, [r2, #48]	; 0x30
 80181f6:	4b0e      	ldr	r3, [pc, #56]	; (8018230 <HAL_TIM_MspPostInit+0x6c>)
 80181f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181fa:	f003 0310 	and.w	r3, r3, #16
 80181fe:	60bb      	str	r3, [r7, #8]
 8018200:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8018202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018208:	2302      	movs	r3, #2
 801820a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801820c:	2300      	movs	r3, #0
 801820e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018210:	2300      	movs	r3, #0
 8018212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8018214:	2301      	movs	r3, #1
 8018216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8018218:	f107 030c 	add.w	r3, r7, #12
 801821c:	4619      	mov	r1, r3
 801821e:	4805      	ldr	r0, [pc, #20]	; (8018234 <HAL_TIM_MspPostInit+0x70>)
 8018220:	f00e fc4a 	bl	8026ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8018224:	bf00      	nop
 8018226:	3720      	adds	r7, #32
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}
 801822c:	40010000 	.word	0x40010000
 8018230:	40023800 	.word	0x40023800
 8018234:	40021000 	.word	0x40021000

08018238 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8018238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801823c:	b086      	sub	sp, #24
 801823e:	af00      	add	r7, sp, #0
 8018240:	6078      	str	r0, [r7, #4]
 8018242:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	3308      	adds	r3, #8
 8018248:	e9d3 0100 	ldrd	r0, r1, [r3]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	3310      	adds	r3, #16
 8018250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018254:	f7e8 faec 	bl	8000830 <__aeabi_ddiv>
 8018258:	4602      	mov	r2, r0
 801825a:	460b      	mov	r3, r1
 801825c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8018260:	4b3e      	ldr	r3, [pc, #248]	; (801835c <CSE_S_x+0x124>)
 8018262:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8018266:	4614      	mov	r4, r2
 8018268:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801826c:	220c      	movs	r2, #12
 801826e:	493c      	ldr	r1, [pc, #240]	; (8018360 <CSE_S_x+0x128>)
 8018270:	483c      	ldr	r0, [pc, #240]	; (8018364 <CSE_S_x+0x12c>)
 8018272:	ed97 0b04 	vldr	d0, [r7, #16]
 8018276:	f005 fb4f 	bl	801d918 <look1_binlxpw>
 801827a:	ec53 2b10 	vmov	r2, r3, d0
 801827e:	4620      	mov	r0, r4
 8018280:	4629      	mov	r1, r5
 8018282:	f7e8 fad5 	bl	8000830 <__aeabi_ddiv>
 8018286:	4602      	mov	r2, r0
 8018288:	460b      	mov	r3, r1
 801828a:	ec43 2b17 	vmov	d7, r2, r3
 801828e:	eeb0 0a47 	vmov.f32	s0, s14
 8018292:	eef0 0a67 	vmov.f32	s1, s15
 8018296:	f016 fc6b 	bl	802eb70 <exp>
 801829a:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 801829e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80182a2:	f04f 0000 	mov.w	r0, #0
 80182a6:	4930      	ldr	r1, [pc, #192]	; (8018368 <CSE_S_x+0x130>)
 80182a8:	f7e7 ffe0 	bl	800026c <__aeabi_dsub>
 80182ac:	4602      	mov	r2, r0
 80182ae:	460b      	mov	r3, r1
 80182b0:	4610      	mov	r0, r2
 80182b2:	4619      	mov	r1, r3
 80182b4:	4b2d      	ldr	r3, [pc, #180]	; (801836c <CSE_S_x+0x134>)
 80182b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ba:	f7e8 f98f 	bl	80005dc <__aeabi_dmul>
 80182be:	4602      	mov	r2, r0
 80182c0:	460b      	mov	r3, r1
 80182c2:	4614      	mov	r4, r2
 80182c4:	461d      	mov	r5, r3
 80182c6:	220c      	movs	r2, #12
 80182c8:	4924      	ldr	r1, [pc, #144]	; (801835c <CSE_S_x+0x124>)
 80182ca:	4826      	ldr	r0, [pc, #152]	; (8018364 <CSE_S_x+0x12c>)
 80182cc:	ed97 0b04 	vldr	d0, [r7, #16]
 80182d0:	f005 fb22 	bl	801d918 <look1_binlxpw>
 80182d4:	ec53 2b10 	vmov	r2, r3, d0
 80182d8:	4620      	mov	r0, r4
 80182da:	4629      	mov	r1, r5
 80182dc:	f7e8 f97e 	bl	80005dc <__aeabi_dmul>
 80182e0:	4602      	mov	r2, r0
 80182e2:	460b      	mov	r3, r1
 80182e4:	4614      	mov	r4, r2
 80182e6:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80182ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80182f2:	f7e8 f973 	bl	80005dc <__aeabi_dmul>
 80182f6:	4602      	mov	r2, r0
 80182f8:	460b      	mov	r3, r1
 80182fa:	4620      	mov	r0, r4
 80182fc:	4629      	mov	r1, r5
 80182fe:	f7e7 ffb7 	bl	8000270 <__adddf3>
 8018302:	4602      	mov	r2, r0
 8018304:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8018306:	6839      	ldr	r1, [r7, #0]
 8018308:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 801830c:	4b17      	ldr	r3, [pc, #92]	; (801836c <CSE_S_x+0x134>)
 801830e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018312:	4b12      	ldr	r3, [pc, #72]	; (801835c <CSE_S_x+0x124>)
 8018314:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8018318:	f7e8 f960 	bl	80005dc <__aeabi_dmul>
 801831c:	4602      	mov	r2, r0
 801831e:	460b      	mov	r3, r1
 8018320:	4690      	mov	r8, r2
 8018322:	4699      	mov	r9, r3
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	3308      	adds	r3, #8
 8018328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801832c:	6839      	ldr	r1, [r7, #0]
 801832e:	f101 0408 	add.w	r4, r1, #8
 8018332:	4640      	mov	r0, r8
 8018334:	4649      	mov	r1, r9
 8018336:	f7e7 ff9b 	bl	8000270 <__adddf3>
 801833a:	4602      	mov	r2, r0
 801833c:	460b      	mov	r3, r1
 801833e:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	f103 0110 	add.w	r1, r3, #16
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801834e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018352:	bf00      	nop
 8018354:	3718      	adds	r7, #24
 8018356:	46bd      	mov	sp, r7
 8018358:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801835c:	20000088 	.word	0x20000088
 8018360:	20000230 	.word	0x20000230
 8018364:	200001c8 	.word	0x200001c8
 8018368:	3ff00000 	.word	0x3ff00000
 801836c:	2001c218 	.word	0x2001c218

08018370 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8018370:	b5b0      	push	{r4, r5, r7, lr}
 8018372:	b084      	sub	sp, #16
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
 8018378:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	3308      	adds	r3, #8
 801837e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	3310      	adds	r3, #16
 8018386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801838a:	f7e8 fa51 	bl	8000830 <__aeabi_ddiv>
 801838e:	4602      	mov	r2, r0
 8018390:	460b      	mov	r3, r1
 8018392:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8018396:	4b19      	ldr	r3, [pc, #100]	; (80183fc <CSE_M_x+0x8c>)
 8018398:	e9d3 4500 	ldrd	r4, r5, [r3]
 801839c:	220c      	movs	r2, #12
 801839e:	4918      	ldr	r1, [pc, #96]	; (8018400 <CSE_M_x+0x90>)
 80183a0:	4818      	ldr	r0, [pc, #96]	; (8018404 <CSE_M_x+0x94>)
 80183a2:	ed97 0b02 	vldr	d0, [r7, #8]
 80183a6:	f005 fab7 	bl	801d918 <look1_binlxpw>
 80183aa:	ec53 2b10 	vmov	r2, r3, d0
 80183ae:	4620      	mov	r0, r4
 80183b0:	4629      	mov	r1, r5
 80183b2:	f7e8 f913 	bl	80005dc <__aeabi_dmul>
 80183b6:	4602      	mov	r2, r0
 80183b8:	460b      	mov	r3, r1
 80183ba:	4614      	mov	r4, r2
 80183bc:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 80183be:	220c      	movs	r2, #12
 80183c0:	4911      	ldr	r1, [pc, #68]	; (8018408 <CSE_M_x+0x98>)
 80183c2:	4810      	ldr	r0, [pc, #64]	; (8018404 <CSE_M_x+0x94>)
 80183c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80183c8:	f005 faa6 	bl	801d918 <look1_binlxpw>
 80183cc:	ec53 2b10 	vmov	r2, r3, d0
 80183d0:	4620      	mov	r0, r4
 80183d2:	4629      	mov	r1, r5
 80183d4:	f7e7 ff4c 	bl	8000270 <__adddf3>
 80183d8:	4602      	mov	r2, r0
 80183da:	460b      	mov	r3, r1
 80183dc:	4610      	mov	r0, r2
 80183de:	4619      	mov	r1, r3
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e6:	f7e7 ff43 	bl	8000270 <__adddf3>
 80183ea:	4602      	mov	r2, r0
 80183ec:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80183ee:	6839      	ldr	r1, [r7, #0]
 80183f0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80183f4:	bf00      	nop
 80183f6:	3710      	adds	r7, #16
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bdb0      	pop	{r4, r5, r7, pc}
 80183fc:	2001c218 	.word	0x2001c218
 8018400:	200000f0 	.word	0x200000f0
 8018404:	200001c8 	.word	0x200001c8
 8018408:	20000160 	.word	0x20000160

0801840c <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 801840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018410:	ed2d 8b02 	vpush	{d8}
 8018414:	b0e1      	sub	sp, #388	; 0x184
 8018416:	af04      	add	r7, sp, #16
 8018418:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801841c:	ed84 0b00 	vstr	d0, [r4]
 8018420:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8018424:	6020      	str	r0, [r4, #0]
 8018426:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801842a:	6001      	str	r1, [r0, #0]
 801842c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018430:	ed81 1b00 	vstr	d1, [r1]
 8018434:	f107 0120 	add.w	r1, r7, #32
 8018438:	ed81 2b00 	vstr	d2, [r1]
 801843c:	f107 0118 	add.w	r1, r7, #24
 8018440:	ed81 3b00 	vstr	d3, [r1]
 8018444:	f107 0114 	add.w	r1, r7, #20
 8018448:	600a      	str	r2, [r1, #0]
 801844a:	f107 0210 	add.w	r2, r7, #16
 801844e:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8018450:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018454:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801845c:	f7e8 f8be 	bl	80005dc <__aeabi_dmul>
 8018460:	4602      	mov	r2, r0
 8018462:	460b      	mov	r3, r1
 8018464:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018468:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 801846c:	f107 0118 	add.w	r1, r7, #24
 8018470:	f04f 0200 	mov.w	r2, #0
 8018474:	4b96      	ldr	r3, [pc, #600]	; (80186d0 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8018476:	e9d1 0100 	ldrd	r0, r1, [r1]
 801847a:	f7e7 fef9 	bl	8000270 <__adddf3>
 801847e:	4602      	mov	r2, r0
 8018480:	460b      	mov	r3, r1
 8018482:	4610      	mov	r0, r2
 8018484:	4619      	mov	r1, r3
 8018486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848e:	f7e8 f8a5 	bl	80005dc <__aeabi_dmul>
 8018492:	4602      	mov	r2, r0
 8018494:	460b      	mov	r3, r1
 8018496:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801849a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 801849e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80184a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a6:	f04f 0000 	mov.w	r0, #0
 80184aa:	4989      	ldr	r1, [pc, #548]	; (80186d0 <UKFCorrectorAdditive_getPredict+0x2c4>)
 80184ac:	f7e8 f9c0 	bl	8000830 <__aeabi_ddiv>
 80184b0:	4602      	mov	r2, r0
 80184b2:	460b      	mov	r3, r1
 80184b4:	f04f 0000 	mov.w	r0, #0
 80184b8:	4986      	ldr	r1, [pc, #536]	; (80186d4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80184ba:	f7e7 fed7 	bl	800026c <__aeabi_dsub>
 80184be:	4602      	mov	r2, r0
 80184c0:	460b      	mov	r3, r1
 80184c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80184c6:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 80184ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80184ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	f7e7 fecb 	bl	8000270 <__adddf3>
 80184da:	4602      	mov	r2, r0
 80184dc:	460b      	mov	r3, r1
 80184de:	f04f 0000 	mov.w	r0, #0
 80184e2:	497c      	ldr	r1, [pc, #496]	; (80186d4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80184e4:	f7e8 f9a4 	bl	8000830 <__aeabi_ddiv>
 80184e8:	4602      	mov	r2, r0
 80184ea:	460b      	mov	r3, r1
 80184ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80184f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80184f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fc:	f04f 0000 	mov.w	r0, #0
 8018500:	4974      	ldr	r1, [pc, #464]	; (80186d4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8018502:	f7e7 feb3 	bl	800026c <__aeabi_dsub>
 8018506:	4602      	mov	r2, r0
 8018508:	460b      	mov	r3, r1
 801850a:	4610      	mov	r0, r2
 801850c:	4619      	mov	r1, r3
 801850e:	f107 0320 	add.w	r3, r7, #32
 8018512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018516:	f7e7 feab 	bl	8000270 <__adddf3>
 801851a:	4602      	mov	r2, r0
 801851c:	460b      	mov	r3, r1
 801851e:	4610      	mov	r0, r2
 8018520:	4619      	mov	r1, r3
 8018522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801852a:	f7e7 fea1 	bl	8000270 <__adddf3>
 801852e:	4602      	mov	r2, r0
 8018530:	460b      	mov	r3, r1
 8018532:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018536:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 801853a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801853e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018542:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018546:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 801854a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801854e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018552:	f04f 0200 	mov.w	r2, #0
 8018556:	f04f 0300 	mov.w	r3, #0
 801855a:	f7e8 faa7 	bl	8000aac <__aeabi_dcmpeq>
 801855e:	4603      	mov	r3, r0
 8018560:	2b00      	cmp	r3, #0
 8018562:	d154      	bne.n	801860e <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8018564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018570:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8018574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018580:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8018584:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018588:	e9d3 0100 	ldrd	r0, r1, [r3]
 801858c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018594:	f7e8 f94c 	bl	8000830 <__aeabi_ddiv>
 8018598:	4602      	mov	r2, r0
 801859a:	460b      	mov	r3, r1
 801859c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80185a0:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 80185a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80185a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80185ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80185b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185b4:	f7e8 f93c 	bl	8000830 <__aeabi_ddiv>
 80185b8:	4602      	mov	r2, r0
 80185ba:	460b      	mov	r3, r1
 80185bc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80185c0:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 80185c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80185c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80185cc:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 80185d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80185d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80185d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e0:	f7e8 f926 	bl	8000830 <__aeabi_ddiv>
 80185e4:	4602      	mov	r2, r0
 80185e6:	460b      	mov	r3, r1
 80185e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80185ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80185f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80185f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80185fc:	f7e8 f918 	bl	8000830 <__aeabi_ddiv>
 8018600:	4602      	mov	r2, r0
 8018602:	460b      	mov	r3, r1
 8018604:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018608:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801860c:	e006      	b.n	801861c <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 801860e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018612:	f04f 0200 	mov.w	r2, #0
 8018616:	4b2f      	ldr	r3, [pc, #188]	; (80186d4 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8018618:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 801861c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018620:	ed93 7b00 	vldr	d7, [r3]
 8018624:	eeb0 0a47 	vmov.f32	s0, s14
 8018628:	eef0 0a67 	vmov.f32	s1, s15
 801862c:	f016 fb38 	bl	802eca0 <sqrt>
 8018630:	eeb0 7a40 	vmov.f32	s14, s0
 8018634:	eef0 7a60 	vmov.f32	s15, s1
 8018638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801863c:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8018640:	2300      	movs	r3, #0
 8018642:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018646:	e037      	b.n	80186b8 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8018648:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801864c:	00db      	lsls	r3, r3, #3
 801864e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018652:	6812      	ldr	r2, [r2, #0]
 8018654:	4413      	add	r3, r2
 8018656:	e9d3 0100 	ldrd	r0, r1, [r3]
 801865a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018662:	f7e7 ffbb 	bl	80005dc <__aeabi_dmul>
 8018666:	4602      	mov	r2, r0
 8018668:	460b      	mov	r3, r1
 801866a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801866e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8018672:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801867a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 801867e:	00c9      	lsls	r1, r1, #3
 8018680:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018684:	4401      	add	r1, r0
 8018686:	39a0      	subs	r1, #160	; 0xa0
 8018688:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 801868c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018694:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8018698:	3109      	adds	r1, #9
 801869a:	4690      	mov	r8, r2
 801869c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80186a0:	00cb      	lsls	r3, r1, #3
 80186a2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80186a6:	4413      	add	r3, r2
 80186a8:	3ba0      	subs	r3, #160	; 0xa0
 80186aa:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 80186ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80186b2:	3301      	adds	r3, #1
 80186b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80186b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80186bc:	2b08      	cmp	r3, #8
 80186be:	ddc3      	ble.n	8018648 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 80186c0:	2300      	movs	r3, #0
 80186c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80186c6:	2300      	movs	r3, #0
 80186c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80186cc:	e065      	b.n	801879a <UKFCorrectorAdditive_getPredict+0x38e>
 80186ce:	bf00      	nop
 80186d0:	40080000 	.word	0x40080000
 80186d4:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 80186d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80186dc:	00db      	lsls	r3, r3, #3
 80186de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80186e2:	4413      	add	r3, r2
 80186e4:	3ba0      	subs	r3, #160	; 0xa0
 80186e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80186ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186f4:	f7e7 fdbc 	bl	8000270 <__adddf3>
 80186f8:	4602      	mov	r2, r0
 80186fa:	460b      	mov	r3, r1
 80186fc:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8018700:	00c9      	lsls	r1, r1, #3
 8018702:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018706:	4401      	add	r1, r0
 8018708:	39a0      	subs	r1, #160	; 0xa0
 801870a:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 801870e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018712:	3301      	adds	r3, #1
 8018714:	00db      	lsls	r3, r3, #3
 8018716:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801871a:	4413      	add	r3, r2
 801871c:	3ba0      	subs	r3, #160	; 0xa0
 801871e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	3308      	adds	r3, #8
 801872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872e:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8018732:	3401      	adds	r4, #1
 8018734:	f7e7 fd9c 	bl	8000270 <__adddf3>
 8018738:	4602      	mov	r2, r0
 801873a:	460b      	mov	r3, r1
 801873c:	00e1      	lsls	r1, r4, #3
 801873e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8018742:	4401      	add	r1, r0
 8018744:	39a0      	subs	r1, #160	; 0xa0
 8018746:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 801874a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801874e:	3302      	adds	r3, #2
 8018750:	00db      	lsls	r3, r3, #3
 8018752:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8018756:	4413      	add	r3, r2
 8018758:	3ba0      	subs	r3, #160	; 0xa0
 801875a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801875e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	3310      	adds	r3, #16
 8018766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801876a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 801876e:	3402      	adds	r4, #2
 8018770:	f7e7 fd7e 	bl	8000270 <__adddf3>
 8018774:	4602      	mov	r2, r0
 8018776:	460b      	mov	r3, r1
 8018778:	00e1      	lsls	r1, r4, #3
 801877a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 801877e:	4401      	add	r1, r0
 8018780:	39a0      	subs	r1, #160	; 0xa0
 8018782:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8018786:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801878a:	3303      	adds	r3, #3
 801878c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8018790:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018794:	3301      	adds	r3, #1
 8018796:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801879a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801879e:	2b05      	cmp	r3, #5
 80187a0:	dd9a      	ble.n	80186d8 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 80187a2:	2300      	movs	r3, #0
 80187a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80187a8:	2300      	movs	r3, #0
 80187aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80187ae:	e018      	b.n	80187e2 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 80187b0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80187b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80187b8:	00db      	lsls	r3, r3, #3
 80187ba:	18d0      	adds	r0, r2, r3
 80187bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80187c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	4413      	add	r3, r2
 80187c8:	4619      	mov	r1, r3
 80187ca:	f7ff fdd1 	bl	8018370 <CSE_M_x>
    knt_0 += 3;
 80187ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80187d2:	3303      	adds	r3, #3
 80187d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80187d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80187dc:	3301      	adds	r3, #1
 80187de:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80187e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80187e6:	2b05      	cmp	r3, #5
 80187e8:	dde2      	ble.n	80187b0 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80187ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80187ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80187f2:	4611      	mov	r1, r2
 80187f4:	6818      	ldr	r0, [r3, #0]
 80187f6:	f7ff fdbb 	bl	8018370 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80187fa:	2300      	movs	r3, #0
 80187fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018800:	e027      	b.n	8018852 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8018802:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018806:	00db      	lsls	r3, r3, #3
 8018808:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801880c:	4413      	add	r3, r2
 801880e:	3bd0      	subs	r3, #208	; 0xd0
 8018810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018814:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801881c:	f7e7 fd26 	bl	800026c <__aeabi_dsub>
 8018820:	4602      	mov	r2, r0
 8018822:	460b      	mov	r3, r1
 8018824:	4610      	mov	r0, r2
 8018826:	4619      	mov	r1, r3
 8018828:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018830:	f7e7 fd1e 	bl	8000270 <__adddf3>
 8018834:	4602      	mov	r2, r0
 8018836:	460b      	mov	r3, r1
 8018838:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801883c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8018840:	00c9      	lsls	r1, r1, #3
 8018842:	4401      	add	r1, r0
 8018844:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8018848:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801884c:	3301      	adds	r3, #1
 801884e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018852:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018856:	2b05      	cmp	r3, #5
 8018858:	ddd3      	ble.n	8018802 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 801885a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801885e:	ed93 7b00 	vldr	d7, [r3]
 8018862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018866:	ed93 6b00 	vldr	d6, [r3]
 801886a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801886e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8018872:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018876:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801887a:	f107 0210 	add.w	r2, r7, #16
 801887e:	6812      	ldr	r2, [r2, #0]
 8018880:	9203      	str	r2, [sp, #12]
 8018882:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018886:	9202      	str	r2, [sp, #8]
 8018888:	f107 0214 	add.w	r2, r7, #20
 801888c:	6812      	ldr	r2, [r2, #0]
 801888e:	9201      	str	r2, [sp, #4]
 8018890:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8018894:	9200      	str	r2, [sp, #0]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	4622      	mov	r2, r4
 801889a:	eeb0 1a46 	vmov.f32	s2, s12
 801889e:	eef0 1a66 	vmov.f32	s3, s13
 80188a2:	eeb0 0a47 	vmov.f32	s0, s14
 80188a6:	eef0 0a67 	vmov.f32	s1, s15
 80188aa:	f004 fbdb 	bl	801d064 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 80188ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80188ba:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 80188be:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80188c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80188c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 80188ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80188da:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 80188de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80188e2:	2202      	movs	r2, #2
 80188e4:	4619      	mov	r1, r3
 80188e6:	2001      	movs	r0, #1
 80188e8:	f009 feec 	bl	80226c4 <xnrm2_Mnmxg9YT>
 80188ec:	eeb0 7a40 	vmov.f32	s14, s0
 80188f0:	eef0 7a60 	vmov.f32	s15, s1
 80188f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80188f8:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80188fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018904:	f04f 0200 	mov.w	r2, #0
 8018908:	f04f 0300 	mov.w	r3, #0
 801890c:	f7e8 f8ce 	bl	8000aac <__aeabi_dcmpeq>
 8018910:	4603      	mov	r3, r0
 8018912:	2b00      	cmp	r3, #0
 8018914:	d000      	beq.n	8018918 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 8018916:	e0fa      	b.n	8018b0e <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8018918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801891c:	ed93 7b00 	vldr	d7, [r3]
 8018920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018924:	ed93 6b00 	vldr	d6, [r3]
 8018928:	eeb0 1a46 	vmov.f32	s2, s12
 801892c:	eef0 1a66 	vmov.f32	s3, s13
 8018930:	eeb0 0a47 	vmov.f32	s0, s14
 8018934:	eef0 0a67 	vmov.f32	s1, s15
 8018938:	f007 fb3a 	bl	801ffb0 <rt_hypotd_snf>
 801893c:	eeb0 7a40 	vmov.f32	s14, s0
 8018940:	eef0 7a60 	vmov.f32	s15, s1
 8018944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018948:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 801894c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018954:	f04f 0200 	mov.w	r2, #0
 8018958:	f04f 0300 	mov.w	r3, #0
 801895c:	f7e8 f8c4 	bl	8000ae8 <__aeabi_dcmpge>
 8018960:	4603      	mov	r3, r0
 8018962:	2b00      	cmp	r3, #0
 8018964:	d00a      	beq.n	801897c <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8018966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801896e:	4615      	mov	r5, r2
 8018970:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8018974:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018978:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 801897c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018984:	60ba      	str	r2, [r7, #8]
 8018986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801898a:	60fb      	str	r3, [r7, #12]
 801898c:	f04f 0200 	mov.w	r2, #0
 8018990:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018998:	f7e8 f892 	bl	8000ac0 <__aeabi_dcmplt>
 801899c:	4603      	mov	r3, r0
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f000 80ad 	beq.w	8018afe <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 80189a4:	2300      	movs	r3, #0
 80189a6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 80189aa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80189ae:	3301      	adds	r3, #1
 80189b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 80189b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80189b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80189bc:	f04f 0200 	mov.w	r2, #0
 80189c0:	4b57      	ldr	r3, [pc, #348]	; (8018b20 <UKFCorrectorAdditive_getPredict+0x714>)
 80189c2:	f7e7 fe0b 	bl	80005dc <__aeabi_dmul>
 80189c6:	4602      	mov	r2, r0
 80189c8:	460b      	mov	r3, r1
 80189ca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80189ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 80189d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80189d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80189da:	f04f 0200 	mov.w	r2, #0
 80189de:	4b50      	ldr	r3, [pc, #320]	; (8018b20 <UKFCorrectorAdditive_getPredict+0x714>)
 80189e0:	f7e7 fdfc 	bl	80005dc <__aeabi_dmul>
 80189e4:	4602      	mov	r2, r0
 80189e6:	460b      	mov	r3, r1
 80189e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80189ec:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 80189f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80189f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80189f8:	f04f 0200 	mov.w	r2, #0
 80189fc:	4b48      	ldr	r3, [pc, #288]	; (8018b20 <UKFCorrectorAdditive_getPredict+0x714>)
 80189fe:	f7e7 fded 	bl	80005dc <__aeabi_dmul>
 8018a02:	4602      	mov	r2, r0
 8018a04:	460b      	mov	r3, r1
 8018a06:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018a0a:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8018a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a16:	603a      	str	r2, [r7, #0]
 8018a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a1c:	607b      	str	r3, [r7, #4]
 8018a1e:	f04f 0200 	mov.w	r2, #0
 8018a22:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018a2a:	f7e8 f849 	bl	8000ac0 <__aeabi_dcmplt>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d003      	beq.n	8018a3c <UKFCorrectorAdditive_getPredict+0x630>
 8018a34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018a38:	2b13      	cmp	r3, #19
 8018a3a:	ddb6      	ble.n	80189aa <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8018a3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018a40:	ed93 8b00 	vldr	d8, [r3]
 8018a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018a48:	2202      	movs	r2, #2
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	2001      	movs	r0, #1
 8018a4e:	f009 fe39 	bl	80226c4 <xnrm2_Mnmxg9YT>
 8018a52:	eeb0 7a40 	vmov.f32	s14, s0
 8018a56:	eef0 7a60 	vmov.f32	s15, s1
 8018a5a:	eeb0 1a47 	vmov.f32	s2, s14
 8018a5e:	eef0 1a67 	vmov.f32	s3, s15
 8018a62:	eeb0 0a48 	vmov.f32	s0, s16
 8018a66:	eef0 0a68 	vmov.f32	s1, s17
 8018a6a:	f007 faa1 	bl	801ffb0 <rt_hypotd_snf>
 8018a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8018a72:	eef0 7a60 	vmov.f32	s15, s1
 8018a76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a7a:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8018a7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018a86:	f04f 0200 	mov.w	r2, #0
 8018a8a:	f04f 0300 	mov.w	r3, #0
 8018a8e:	f7e8 f82b 	bl	8000ae8 <__aeabi_dcmpge>
 8018a92:	4603      	mov	r3, r0
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d00a      	beq.n	8018aae <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8018a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa0:	4692      	mov	sl, r2
 8018aa2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8018aa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018aaa:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8018aae:	2300      	movs	r3, #0
 8018ab0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8018ab4:	e014      	b.n	8018ae0 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8018ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018abe:	f04f 0200 	mov.w	r2, #0
 8018ac2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8018ac6:	f7e7 fd89 	bl	80005dc <__aeabi_dmul>
 8018aca:	4602      	mov	r2, r0
 8018acc:	460b      	mov	r3, r1
 8018ace:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018ad2:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8018ad6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8018ada:	3301      	adds	r3, #1
 8018adc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8018ae0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8018ae4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	dbe4      	blt.n	8018ab6 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8018aec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018af8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018afc:	e007      	b.n	8018b0e <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8018afe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b06:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8018b0a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8018b0e:	bf00      	nop
 8018b10:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8018b14:	46bd      	mov	sp, r7
 8018b16:	ecbd 8b02 	vpop	{d8}
 8018b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b1e:	bf00      	nop
 8018b20:	7c900000 	.word	0x7c900000
 8018b24:	00000000 	.word	0x00000000

08018b28 <CSE_step>:

void CSE_step(void)
{
 8018b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b2c:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8018b30:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8018b32:	4bb3      	ldr	r3, [pc, #716]	; (8018e00 <CSE_step+0x2d8>)
 8018b34:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f001 803e 	beq.w	8019bba <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8018b44:	f107 0308 	add.w	r3, r7, #8
 8018b48:	4619      	mov	r1, r3
 8018b4a:	48ae      	ldr	r0, [pc, #696]	; (8018e04 <CSE_step+0x2dc>)
 8018b4c:	f7ff fc10 	bl	8018370 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8018b50:	4bab      	ldr	r3, [pc, #684]	; (8018e00 <CSE_step+0x2d8>)
 8018b52:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8018b56:	f107 0110 	add.w	r1, r7, #16
 8018b5a:	f107 0208 	add.w	r2, r7, #8
 8018b5e:	463b      	mov	r3, r7
 8018b60:	9300      	str	r3, [sp, #0]
 8018b62:	460b      	mov	r3, r1
 8018b64:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8018de8 <CSE_step+0x2c0>
 8018b68:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8018df0 <CSE_step+0x2c8>
 8018b6c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8018df8 <CSE_step+0x2d0>
 8018b70:	49a5      	ldr	r1, [pc, #660]	; (8018e08 <CSE_step+0x2e0>)
 8018b72:	48a4      	ldr	r0, [pc, #656]	; (8018e04 <CSE_step+0x2dc>)
 8018b74:	eeb0 0a47 	vmov.f32	s0, s14
 8018b78:	eef0 0a67 	vmov.f32	s1, s15
 8018b7c:	f7ff fc46 	bl	801840c <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8018b80:	4ba2      	ldr	r3, [pc, #648]	; (8018e0c <CSE_step+0x2e4>)
 8018b82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018b86:	f107 0308 	add.w	r3, r7, #8
 8018b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b8e:	f7e7 fb6d 	bl	800026c <__aeabi_dsub>
 8018b92:	4602      	mov	r2, r0
 8018b94:	460b      	mov	r3, r1
 8018b96:	f107 0108 	add.w	r1, r7, #8
 8018b9a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018baa:	e04a      	b.n	8018c42 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8018bac:	4a96      	ldr	r2, [pc, #600]	; (8018e08 <CSE_step+0x2e0>)
 8018bae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018bb2:	00db      	lsls	r3, r3, #3
 8018bb4:	4413      	add	r3, r2
 8018bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bba:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018bbe:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8018bc2:	00c9      	lsls	r1, r1, #3
 8018bc4:	4401      	add	r1, r0
 8018bc6:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8018bca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018bce:	3303      	adds	r3, #3
 8018bd0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018bd4:	1c51      	adds	r1, r2, #1
 8018bd6:	4a8c      	ldr	r2, [pc, #560]	; (8018e08 <CSE_step+0x2e0>)
 8018bd8:	00db      	lsls	r3, r3, #3
 8018bda:	4413      	add	r3, r2
 8018bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018be4:	00c9      	lsls	r1, r1, #3
 8018be6:	4401      	add	r1, r0
 8018be8:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8018bec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018bf0:	3306      	adds	r3, #6
 8018bf2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8018bf6:	1c91      	adds	r1, r2, #2
 8018bf8:	4a83      	ldr	r2, [pc, #524]	; (8018e08 <CSE_step+0x2e0>)
 8018bfa:	00db      	lsls	r3, r3, #3
 8018bfc:	4413      	add	r3, r2
 8018bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c02:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8018c06:	00c9      	lsls	r1, r1, #3
 8018c08:	4401      	add	r1, r0
 8018c0a:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8018c0e:	f107 0210 	add.w	r2, r7, #16
 8018c12:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018c16:	00db      	lsls	r3, r3, #3
 8018c18:	4413      	add	r3, r2
 8018c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8018c22:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8018c26:	00c9      	lsls	r1, r1, #3
 8018c28:	4401      	add	r1, r0
 8018c2a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8018c2e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018c32:	3303      	adds	r3, #3
 8018c34:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8018c38:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018c3c:	3301      	adds	r3, #1
 8018c3e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018c42:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018c46:	2b02      	cmp	r3, #2
 8018c48:	ddb0      	ble.n	8018bac <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8018c4a:	463b      	mov	r3, r7
 8018c4c:	ed93 7b00 	vldr	d7, [r3]
 8018c50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c54:	4618      	mov	r0, r3
 8018c56:	eeb0 0a47 	vmov.f32	s0, s14
 8018c5a:	eef0 0a67 	vmov.f32	s1, s15
 8018c5e:	f009 f8cb 	bl	8021df8 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8018c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018c6e:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8018c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018c7a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018c7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8018c82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018c86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018c8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018c8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8018c92:	463b      	mov	r3, r7
 8018c94:	ed93 7b00 	vldr	d7, [r3]
 8018c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8018ca2:	eef0 0a67 	vmov.f32	s1, s15
 8018ca6:	f009 f8a7 	bl	8021df8 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8018caa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018cb2:	463b      	mov	r3, r7
 8018cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cb8:	f7e7 fc90 	bl	80005dc <__aeabi_dmul>
 8018cbc:	4602      	mov	r2, r0
 8018cbe:	460b      	mov	r3, r1
 8018cc0:	f107 0110 	add.w	r1, r7, #16
 8018cc4:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018cc8:	2300      	movs	r3, #0
 8018cca:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018cce:	e011      	b.n	8018cf4 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8018cd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018cda:	00db      	lsls	r3, r3, #3
 8018cdc:	18d1      	adds	r1, r2, r3
 8018cde:	f04f 0200 	mov.w	r2, #0
 8018ce2:	f04f 0300 	mov.w	r3, #0
 8018ce6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8018cea:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018cee:	3301      	adds	r3, #1
 8018cf0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8018cf4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	dde9      	ble.n	8018cd0 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8018cfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8018d04:	463b      	mov	r3, r7
 8018d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0a:	f7e7 fc67 	bl	80005dc <__aeabi_dmul>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	460b      	mov	r3, r1
 8018d12:	f107 0110 	add.w	r1, r7, #16
 8018d16:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8018d1a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8018d1e:	f04f 0200 	mov.w	r2, #0
 8018d22:	f04f 0300 	mov.w	r3, #0
 8018d26:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8018d2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d2e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8018d32:	463b      	mov	r3, r7
 8018d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d38:	f7e7 fc50 	bl	80005dc <__aeabi_dmul>
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	460b      	mov	r3, r1
 8018d40:	f107 0110 	add.w	r1, r7, #16
 8018d44:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8018d48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018d50:	2301      	movs	r3, #1
 8018d52:	461e      	mov	r6, r3
 8018d54:	f04f 0200 	mov.w	r2, #0
 8018d58:	f04f 0300 	mov.w	r3, #0
 8018d5c:	f7e7 fea6 	bl	8000aac <__aeabi_dcmpeq>
 8018d60:	4603      	mov	r3, r0
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d101      	bne.n	8018d6a <CSE_step+0x242>
 8018d66:	2300      	movs	r3, #0
 8018d68:	461e      	mov	r6, r3
 8018d6a:	b2f3      	uxtb	r3, r6
 8018d6c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8018d70:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d113      	bne.n	8018da0 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8018d78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018d7c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8018d80:	2301      	movs	r3, #1
 8018d82:	461e      	mov	r6, r3
 8018d84:	f04f 0200 	mov.w	r2, #0
 8018d88:	f04f 0300 	mov.w	r3, #0
 8018d8c:	f7e7 fe8e 	bl	8000aac <__aeabi_dcmpeq>
 8018d90:	4603      	mov	r3, r0
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d101      	bne.n	8018d9a <CSE_step+0x272>
 8018d96:	2300      	movs	r3, #0
 8018d98:	461e      	mov	r6, r3
 8018d9a:	b2f3      	uxtb	r3, r6
 8018d9c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8018da0:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d113      	bne.n	8018dd0 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8018da8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018dac:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8018db0:	2301      	movs	r3, #1
 8018db2:	461e      	mov	r6, r3
 8018db4:	f04f 0200 	mov.w	r2, #0
 8018db8:	f04f 0300 	mov.w	r3, #0
 8018dbc:	f7e7 fe76 	bl	8000aac <__aeabi_dcmpeq>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d101      	bne.n	8018dca <CSE_step+0x2a2>
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	461e      	mov	r6, r3
 8018dca:	b2f3      	uxtb	r3, r6
 8018dcc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8018dd6:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d018      	beq.n	8018e10 <CSE_step+0x2e8>
      guard1 = true;
 8018dde:	2301      	movs	r3, #1
 8018de0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8018de4:	e395      	b.n	8019512 <CSE_step+0x9ea>
 8018de6:	bf00      	nop
	...
 8018df4:	40000000 	.word	0x40000000
 8018df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8018dfc:	3f50624d 	.word	0x3f50624d
 8018e00:	20000088 	.word	0x20000088
 8018e04:	2001c270 	.word	0x2001c270
 8018e08:	2001c228 	.word	0x2001c228
 8018e0c:	2001c218 	.word	0x2001c218
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8018e10:	f107 0310 	add.w	r3, r7, #16
 8018e14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018e1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8018e20:	f107 0310 	add.w	r3, r7, #16
 8018e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e30:	f7e7 fcfe 	bl	8000830 <__aeabi_ddiv>
 8018e34:	4602      	mov	r2, r0
 8018e36:	460b      	mov	r3, r1
 8018e38:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018e3c:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8018e40:	f107 0310 	add.w	r3, r7, #16
 8018e44:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8018e48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018e54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8018e58:	f7e7 fbc0 	bl	80005dc <__aeabi_dmul>
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	460b      	mov	r3, r1
 8018e60:	4640      	mov	r0, r8
 8018e62:	4649      	mov	r1, r9
 8018e64:	f7e7 fa02 	bl	800026c <__aeabi_dsub>
 8018e68:	4602      	mov	r2, r0
 8018e6a:	460b      	mov	r3, r1
 8018e6c:	4610      	mov	r0, r2
 8018e6e:	4619      	mov	r1, r3
 8018e70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018e78:	f7e7 fcda 	bl	8000830 <__aeabi_ddiv>
 8018e7c:	4602      	mov	r2, r0
 8018e7e:	460b      	mov	r3, r1
 8018e80:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018e84:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8018e88:	f107 0310 	add.w	r3, r7, #16
 8018e8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e90:	4639      	mov	r1, r7
 8018e92:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018e96:	2300      	movs	r3, #0
 8018e98:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018e9c:	e025      	b.n	8018eea <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8018e9e:	463b      	mov	r3, r7
 8018ea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018ea4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018ea8:	3306      	adds	r3, #6
 8018eaa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018eae:	00db      	lsls	r3, r3, #3
 8018eb0:	4413      	add	r3, r2
 8018eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018eb6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018eba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018ebe:	00db      	lsls	r3, r3, #3
 8018ec0:	4413      	add	r3, r2
 8018ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec6:	f7e7 fb89 	bl	80005dc <__aeabi_dmul>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4640      	mov	r0, r8
 8018ed0:	4649      	mov	r1, r9
 8018ed2:	f7e7 f9cb 	bl	800026c <__aeabi_dsub>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	460b      	mov	r3, r1
 8018eda:	4639      	mov	r1, r7
 8018edc:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8018ee0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018ee4:	3301      	adds	r3, #1
 8018ee6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018eea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018eee:	2b01      	cmp	r3, #1
 8018ef0:	ddd5      	ble.n	8018e9e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8018ef2:	463b      	mov	r3, r7
 8018ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018ef8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8018efc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8018f00:	f7e7 fc96 	bl	8000830 <__aeabi_ddiv>
 8018f04:	4602      	mov	r2, r0
 8018f06:	460b      	mov	r3, r1
 8018f08:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018f0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8018f10:	f04f 0200 	mov.w	r2, #0
 8018f14:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018f18:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8018f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f24:	4611      	mov	r1, r2
 8018f26:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f2e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8018f32:	f04f 0200 	mov.w	r2, #0
 8018f36:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018f3a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018f3e:	f7e7 fddd 	bl	8000afc <__aeabi_dcmpgt>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d00a      	beq.n	8018f5e <CSE_step+0x436>
        temp = 1.0;
 8018f48:	4639      	mov	r1, r7
 8018f4a:	f04f 0200 	mov.w	r2, #0
 8018f4e:	4bbf      	ldr	r3, [pc, #764]	; (801924c <CSE_step+0x724>)
 8018f50:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8018f54:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018f58:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8018f5c:	e016      	b.n	8018f8c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8018f5e:	f04f 0200 	mov.w	r2, #0
 8018f62:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8018f66:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018f6a:	f7e7 fc61 	bl	8000830 <__aeabi_ddiv>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	460b      	mov	r3, r1
 8018f72:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8018f76:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018f7a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8018f7e:	f7e7 fb2d 	bl	80005dc <__aeabi_dmul>
 8018f82:	4602      	mov	r2, r0
 8018f84:	460b      	mov	r3, r1
 8018f86:	4639      	mov	r1, r7
 8018f88:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8018f8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018f90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018f94:	4611      	mov	r1, r2
 8018f96:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8018f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f9e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8018fa2:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8018fa6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8018faa:	f7e7 fda7 	bl	8000afc <__aeabi_dcmpgt>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d02b      	beq.n	801900c <CSE_step+0x4e4>
        t = scale / absxk;
 8018fb4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8018fb8:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8018fbc:	f7e7 fc38 	bl	8000830 <__aeabi_ddiv>
 8018fc0:	4602      	mov	r2, r0
 8018fc2:	460b      	mov	r3, r1
 8018fc4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8018fc8:	463b      	mov	r3, r7
 8018fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018fce:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018fd2:	f7e7 fb03 	bl	80005dc <__aeabi_dmul>
 8018fd6:	4602      	mov	r2, r0
 8018fd8:	460b      	mov	r3, r1
 8018fda:	4610      	mov	r0, r2
 8018fdc:	4619      	mov	r1, r3
 8018fde:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8018fe2:	f7e7 fafb 	bl	80005dc <__aeabi_dmul>
 8018fe6:	4602      	mov	r2, r0
 8018fe8:	460b      	mov	r3, r1
 8018fea:	4610      	mov	r0, r2
 8018fec:	4619      	mov	r1, r3
 8018fee:	f04f 0200 	mov.w	r2, #0
 8018ff2:	4b96      	ldr	r3, [pc, #600]	; (801924c <CSE_step+0x724>)
 8018ff4:	f7e7 f93c 	bl	8000270 <__adddf3>
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	460b      	mov	r3, r1
 8018ffc:	4639      	mov	r1, r7
 8018ffe:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8019002:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8019006:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 801900a:	e01d      	b.n	8019048 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 801900c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8019010:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8019014:	f7e7 fc0c 	bl	8000830 <__aeabi_ddiv>
 8019018:	4602      	mov	r2, r0
 801901a:	460b      	mov	r3, r1
 801901c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8019020:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8019024:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8019028:	f7e7 fad8 	bl	80005dc <__aeabi_dmul>
 801902c:	4602      	mov	r2, r0
 801902e:	460b      	mov	r3, r1
 8019030:	4610      	mov	r0, r2
 8019032:	4619      	mov	r1, r3
 8019034:	463b      	mov	r3, r7
 8019036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903a:	f7e7 f919 	bl	8000270 <__adddf3>
 801903e:	4602      	mov	r2, r0
 8019040:	460b      	mov	r3, r1
 8019042:	4639      	mov	r1, r7
 8019044:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8019048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801904c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019050:	4611      	mov	r1, r2
 8019052:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8019056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801905a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 801905e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8019062:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8019066:	f7e7 fd49 	bl	8000afc <__aeabi_dcmpgt>
 801906a:	4603      	mov	r3, r0
 801906c:	2b00      	cmp	r3, #0
 801906e:	d02b      	beq.n	80190c8 <CSE_step+0x5a0>
        t = scale / absxk;
 8019070:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8019074:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8019078:	f7e7 fbda 	bl	8000830 <__aeabi_ddiv>
 801907c:	4602      	mov	r2, r0
 801907e:	460b      	mov	r3, r1
 8019080:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8019084:	463b      	mov	r3, r7
 8019086:	e9d3 0100 	ldrd	r0, r1, [r3]
 801908a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 801908e:	f7e7 faa5 	bl	80005dc <__aeabi_dmul>
 8019092:	4602      	mov	r2, r0
 8019094:	460b      	mov	r3, r1
 8019096:	4610      	mov	r0, r2
 8019098:	4619      	mov	r1, r3
 801909a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 801909e:	f7e7 fa9d 	bl	80005dc <__aeabi_dmul>
 80190a2:	4602      	mov	r2, r0
 80190a4:	460b      	mov	r3, r1
 80190a6:	4610      	mov	r0, r2
 80190a8:	4619      	mov	r1, r3
 80190aa:	f04f 0200 	mov.w	r2, #0
 80190ae:	4b67      	ldr	r3, [pc, #412]	; (801924c <CSE_step+0x724>)
 80190b0:	f7e7 f8de 	bl	8000270 <__adddf3>
 80190b4:	4602      	mov	r2, r0
 80190b6:	460b      	mov	r3, r1
 80190b8:	4639      	mov	r1, r7
 80190ba:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80190be:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80190c2:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80190c6:	e01d      	b.n	8019104 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 80190c8:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80190cc:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80190d0:	f7e7 fbae 	bl	8000830 <__aeabi_ddiv>
 80190d4:	4602      	mov	r2, r0
 80190d6:	460b      	mov	r3, r1
 80190d8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80190dc:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80190e0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80190e4:	f7e7 fa7a 	bl	80005dc <__aeabi_dmul>
 80190e8:	4602      	mov	r2, r0
 80190ea:	460b      	mov	r3, r1
 80190ec:	4610      	mov	r0, r2
 80190ee:	4619      	mov	r1, r3
 80190f0:	463b      	mov	r3, r7
 80190f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f6:	f7e7 f8bb 	bl	8000270 <__adddf3>
 80190fa:	4602      	mov	r2, r0
 80190fc:	460b      	mov	r3, r1
 80190fe:	4639      	mov	r1, r7
 8019100:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8019104:	463b      	mov	r3, r7
 8019106:	ed93 7b00 	vldr	d7, [r3]
 801910a:	eeb0 0a47 	vmov.f32	s0, s14
 801910e:	eef0 0a67 	vmov.f32	s1, s15
 8019112:	f015 fdc5 	bl	802eca0 <sqrt>
 8019116:	ec51 0b10 	vmov	r0, r1, d0
 801911a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 801911e:	f7e7 fa5d 	bl	80005dc <__aeabi_dmul>
 8019122:	4602      	mov	r2, r0
 8019124:	460b      	mov	r3, r1
 8019126:	4639      	mov	r1, r7
 8019128:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 801912c:	463b      	mov	r3, r7
 801912e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019132:	f04f 0200 	mov.w	r2, #0
 8019136:	4b45      	ldr	r3, [pc, #276]	; (801924c <CSE_step+0x724>)
 8019138:	f7e7 fcd6 	bl	8000ae8 <__aeabi_dcmpge>
 801913c:	4603      	mov	r3, r0
 801913e:	2b00      	cmp	r3, #0
 8019140:	d003      	beq.n	801914a <CSE_step+0x622>
        guard1 = true;
 8019142:	2301      	movs	r3, #1
 8019144:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8019148:	e1e3      	b.n	8019512 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 801914a:	463b      	mov	r3, r7
 801914c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019150:	463b      	mov	r3, r7
 8019152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019156:	f7e7 fa41 	bl	80005dc <__aeabi_dmul>
 801915a:	4602      	mov	r2, r0
 801915c:	460b      	mov	r3, r1
 801915e:	f04f 0000 	mov.w	r0, #0
 8019162:	493a      	ldr	r1, [pc, #232]	; (801924c <CSE_step+0x724>)
 8019164:	f7e7 f882 	bl	800026c <__aeabi_dsub>
 8019168:	4602      	mov	r2, r0
 801916a:	460b      	mov	r3, r1
 801916c:	ec43 2b17 	vmov	d7, r2, r3
 8019170:	eeb0 0a47 	vmov.f32	s0, s14
 8019174:	eef0 0a67 	vmov.f32	s1, s15
 8019178:	f015 fd92 	bl	802eca0 <sqrt>
 801917c:	eeb0 6a40 	vmov.f32	s12, s0
 8019180:	eef0 6a60 	vmov.f32	s13, s1
 8019184:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019188:	ed93 7b04 	vldr	d7, [r3, #16]
 801918c:	463a      	mov	r2, r7
 801918e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019192:	f103 0110 	add.w	r1, r3, #16
 8019196:	f107 0310 	add.w	r3, r7, #16
 801919a:	3310      	adds	r3, #16
 801919c:	4618      	mov	r0, r3
 801919e:	eeb0 1a47 	vmov.f32	s2, s14
 80191a2:	eef0 1a67 	vmov.f32	s3, s15
 80191a6:	eeb0 0a46 	vmov.f32	s0, s12
 80191aa:	eef0 0a66 	vmov.f32	s1, s13
 80191ae:	f006 fd75 	bl	801fc9c <rotate_LZ7ctbe0>
        C[2] = 0.0;
 80191b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80191b6:	f04f 0200 	mov.w	r2, #0
 80191ba:	f04f 0300 	mov.w	r3, #0
 80191be:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 80191c2:	463b      	mov	r3, r7
 80191c4:	ed93 7b00 	vldr	d7, [r3]
 80191c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80191cc:	ed93 6b02 	vldr	d6, [r3, #8]
 80191d0:	463a      	mov	r2, r7
 80191d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80191d6:	f103 0108 	add.w	r1, r3, #8
 80191da:	f107 0310 	add.w	r3, r7, #16
 80191de:	3308      	adds	r3, #8
 80191e0:	4618      	mov	r0, r3
 80191e2:	eeb0 1a46 	vmov.f32	s2, s12
 80191e6:	eef0 1a66 	vmov.f32	s3, s13
 80191ea:	eeb0 0a47 	vmov.f32	s0, s14
 80191ee:	eef0 0a67 	vmov.f32	s1, s15
 80191f2:	f006 fd53 	bl	801fc9c <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80191f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80191fa:	f04f 0200 	mov.w	r2, #0
 80191fe:	f04f 0300 	mov.w	r3, #0
 8019202:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 8019206:	463b      	mov	r3, r7
 8019208:	ed93 7b00 	vldr	d7, [r3]
 801920c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019210:	ed93 6b00 	vldr	d6, [r3]
 8019214:	463a      	mov	r2, r7
 8019216:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801921a:	f107 0310 	add.w	r3, r7, #16
 801921e:	4618      	mov	r0, r3
 8019220:	eeb0 1a46 	vmov.f32	s2, s12
 8019224:	eef0 1a66 	vmov.f32	s3, s13
 8019228:	eeb0 0a47 	vmov.f32	s0, s14
 801922c:	eef0 0a67 	vmov.f32	s1, s15
 8019230:	f006 fd34 	bl	801fc9c <rotate_LZ7ctbe0>
        C[0] = 0.0;
 8019234:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8019238:	f04f 0200 	mov.w	r2, #0
 801923c:	f04f 0300 	mov.w	r3, #0
 8019240:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8019244:	2300      	movs	r3, #0
 8019246:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801924a:	e06e      	b.n	801932a <CSE_step+0x802>
 801924c:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8019250:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019254:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019258:	00db      	lsls	r3, r3, #3
 801925a:	4413      	add	r3, r2
 801925c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019260:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019264:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019268:	00db      	lsls	r3, r3, #3
 801926a:	4413      	add	r3, r2
 801926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019270:	f7e7 f9b4 	bl	80005dc <__aeabi_dmul>
 8019274:	4602      	mov	r2, r0
 8019276:	460b      	mov	r3, r1
 8019278:	4639      	mov	r1, r7
 801927a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 801927e:	f107 0210 	add.w	r2, r7, #16
 8019282:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	4413      	add	r3, r2
 801928a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801928e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019292:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	4413      	add	r3, r2
 801929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801929e:	f7e7 f99d 	bl	80005dc <__aeabi_dmul>
 80192a2:	4602      	mov	r2, r0
 80192a4:	460b      	mov	r3, r1
 80192a6:	4690      	mov	r8, r2
 80192a8:	4699      	mov	r9, r3
 80192aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80192ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192b2:	00db      	lsls	r3, r3, #3
 80192b4:	4413      	add	r3, r2
 80192b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80192be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c2:	f7e7 f98b 	bl	80005dc <__aeabi_dmul>
 80192c6:	4602      	mov	r2, r0
 80192c8:	460b      	mov	r3, r1
 80192ca:	4640      	mov	r0, r8
 80192cc:	4649      	mov	r1, r9
 80192ce:	f7e6 ffcd 	bl	800026c <__aeabi_dsub>
 80192d2:	4602      	mov	r2, r0
 80192d4:	460b      	mov	r3, r1
 80192d6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80192da:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80192de:	00c9      	lsls	r1, r1, #3
 80192e0:	4401      	add	r1, r0
 80192e2:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80192e6:	f107 0210 	add.w	r2, r7, #16
 80192ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80192ee:	00db      	lsls	r3, r3, #3
 80192f0:	4413      	add	r3, r2
 80192f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80192f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80192fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192fe:	f7e7 f96d 	bl	80005dc <__aeabi_dmul>
 8019302:	4602      	mov	r2, r0
 8019304:	460b      	mov	r3, r1
 8019306:	4610      	mov	r0, r2
 8019308:	4619      	mov	r1, r3
 801930a:	463b      	mov	r3, r7
 801930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019310:	f7e6 ffae 	bl	8000270 <__adddf3>
 8019314:	4602      	mov	r2, r0
 8019316:	460b      	mov	r3, r1
 8019318:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801931c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8019320:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019324:	3b01      	subs	r3, #1
 8019326:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801932a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801932e:	2b00      	cmp	r3, #0
 8019330:	da8e      	bge.n	8019250 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8019332:	2301      	movs	r3, #1
 8019334:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019338:	e06f      	b.n	801941a <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 801933a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801933e:	3303      	adds	r3, #3
 8019340:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019344:	00db      	lsls	r3, r3, #3
 8019346:	4413      	add	r3, r2
 8019348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934c:	4639      	mov	r1, r7
 801934e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8019352:	f107 0210 	add.w	r2, r7, #16
 8019356:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	4413      	add	r3, r2
 801935e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019362:	463b      	mov	r3, r7
 8019364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019368:	f7e7 f938 	bl	80005dc <__aeabi_dmul>
 801936c:	4602      	mov	r2, r0
 801936e:	460b      	mov	r3, r1
 8019370:	4690      	mov	r8, r2
 8019372:	4699      	mov	r9, r3
 8019374:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019378:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801937c:	00db      	lsls	r3, r3, #3
 801937e:	4413      	add	r3, r2
 8019380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019384:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019388:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801938c:	f7e7 f926 	bl	80005dc <__aeabi_dmul>
 8019390:	4602      	mov	r2, r0
 8019392:	460b      	mov	r3, r1
 8019394:	4610      	mov	r0, r2
 8019396:	4619      	mov	r1, r3
 8019398:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801939c:	1cde      	adds	r6, r3, #3
 801939e:	4602      	mov	r2, r0
 80193a0:	460b      	mov	r3, r1
 80193a2:	4640      	mov	r0, r8
 80193a4:	4649      	mov	r1, r9
 80193a6:	f7e6 ff61 	bl	800026c <__aeabi_dsub>
 80193aa:	4602      	mov	r2, r0
 80193ac:	460b      	mov	r3, r1
 80193ae:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80193b2:	00f1      	lsls	r1, r6, #3
 80193b4:	4401      	add	r1, r0
 80193b6:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 80193ba:	f107 0210 	add.w	r2, r7, #16
 80193be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193c2:	00db      	lsls	r3, r3, #3
 80193c4:	4413      	add	r3, r2
 80193c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80193ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80193ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80193d2:	f7e7 f903 	bl	80005dc <__aeabi_dmul>
 80193d6:	4602      	mov	r2, r0
 80193d8:	460b      	mov	r3, r1
 80193da:	4690      	mov	r8, r2
 80193dc:	4699      	mov	r9, r3
 80193de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80193e2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	4413      	add	r3, r2
 80193ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80193ee:	463b      	mov	r3, r7
 80193f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f4:	f7e7 f8f2 	bl	80005dc <__aeabi_dmul>
 80193f8:	4602      	mov	r2, r0
 80193fa:	460b      	mov	r3, r1
 80193fc:	4640      	mov	r0, r8
 80193fe:	4649      	mov	r1, r9
 8019400:	f7e6 ff36 	bl	8000270 <__adddf3>
 8019404:	4602      	mov	r2, r0
 8019406:	460b      	mov	r3, r1
 8019408:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801940c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8019410:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019414:	3b01      	subs	r3, #1
 8019416:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801941a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801941e:	2b00      	cmp	r3, #0
 8019420:	da8b      	bge.n	801933a <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8019422:	2302      	movs	r3, #2
 8019424:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019428:	e06f      	b.n	801950a <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 801942a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801942e:	3306      	adds	r3, #6
 8019430:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	4413      	add	r3, r2
 8019438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801943c:	4639      	mov	r1, r7
 801943e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8019442:	f107 0210 	add.w	r2, r7, #16
 8019446:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801944a:	00db      	lsls	r3, r3, #3
 801944c:	4413      	add	r3, r2
 801944e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019452:	463b      	mov	r3, r7
 8019454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019458:	f7e7 f8c0 	bl	80005dc <__aeabi_dmul>
 801945c:	4602      	mov	r2, r0
 801945e:	460b      	mov	r3, r1
 8019460:	4690      	mov	r8, r2
 8019462:	4699      	mov	r9, r3
 8019464:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019468:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801946c:	00db      	lsls	r3, r3, #3
 801946e:	4413      	add	r3, r2
 8019470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019474:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019478:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801947c:	f7e7 f8ae 	bl	80005dc <__aeabi_dmul>
 8019480:	4602      	mov	r2, r0
 8019482:	460b      	mov	r3, r1
 8019484:	4610      	mov	r0, r2
 8019486:	4619      	mov	r1, r3
 8019488:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801948c:	1d9e      	adds	r6, r3, #6
 801948e:	4602      	mov	r2, r0
 8019490:	460b      	mov	r3, r1
 8019492:	4640      	mov	r0, r8
 8019494:	4649      	mov	r1, r9
 8019496:	f7e6 fee9 	bl	800026c <__aeabi_dsub>
 801949a:	4602      	mov	r2, r0
 801949c:	460b      	mov	r3, r1
 801949e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80194a2:	00f1      	lsls	r1, r6, #3
 80194a4:	4401      	add	r1, r0
 80194a6:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 80194aa:	f107 0210 	add.w	r2, r7, #16
 80194ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80194b2:	00db      	lsls	r3, r3, #3
 80194b4:	4413      	add	r3, r2
 80194b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80194be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80194c2:	f7e7 f88b 	bl	80005dc <__aeabi_dmul>
 80194c6:	4602      	mov	r2, r0
 80194c8:	460b      	mov	r3, r1
 80194ca:	4690      	mov	r8, r2
 80194cc:	4699      	mov	r9, r3
 80194ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80194d6:	00db      	lsls	r3, r3, #3
 80194d8:	4413      	add	r3, r2
 80194da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80194de:	463b      	mov	r3, r7
 80194e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e4:	f7e7 f87a 	bl	80005dc <__aeabi_dmul>
 80194e8:	4602      	mov	r2, r0
 80194ea:	460b      	mov	r3, r1
 80194ec:	4640      	mov	r0, r8
 80194ee:	4649      	mov	r1, r9
 80194f0:	f7e6 febe 	bl	8000270 <__adddf3>
 80194f4:	4602      	mov	r2, r0
 80194f6:	460b      	mov	r3, r1
 80194f8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80194fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8019500:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019504:	3b01      	subs	r3, #1
 8019506:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 801950a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801950e:	2b00      	cmp	r3, #0
 8019510:	da8b      	bge.n	801942a <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 8019512:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8019516:	2b00      	cmp	r3, #0
 8019518:	f000 82e1 	beq.w	8019ade <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 801951c:	2300      	movs	r3, #0
 801951e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8019522:	2300      	movs	r3, #0
 8019524:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019528:	e0d6      	b.n	80196d8 <CSE_step+0xbb0>
        coffset = 0;
 801952a:	2300      	movs	r3, #0
 801952c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8019530:	2300      	movs	r3, #0
 8019532:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8019536:	e0c0      	b.n	80196ba <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8019538:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801953c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019540:	4413      	add	r3, r2
 8019542:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8019546:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801954a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	18d1      	adds	r1, r2, r3
 8019552:	f04f 0200 	mov.w	r2, #0
 8019556:	f04f 0300 	mov.w	r3, #0
 801955a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 801955e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019562:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019566:	00db      	lsls	r3, r3, #3
 8019568:	4413      	add	r3, r2
 801956a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801956e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019572:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019576:	00db      	lsls	r3, r3, #3
 8019578:	4413      	add	r3, r2
 801957a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801957e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019582:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019586:	00db      	lsls	r3, r3, #3
 8019588:	4413      	add	r3, r2
 801958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958e:	f7e7 f825 	bl	80005dc <__aeabi_dmul>
 8019592:	4602      	mov	r2, r0
 8019594:	460b      	mov	r3, r1
 8019596:	4640      	mov	r0, r8
 8019598:	4649      	mov	r1, r9
 801959a:	f7e6 fe69 	bl	8000270 <__adddf3>
 801959e:	4602      	mov	r2, r0
 80195a0:	460b      	mov	r3, r1
 80195a2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80195a6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80195aa:	00c9      	lsls	r1, r1, #3
 80195ac:	4401      	add	r1, r0
 80195ae:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 80195b2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80195b6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80195ba:	00db      	lsls	r3, r3, #3
 80195bc:	4413      	add	r3, r2
 80195be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80195c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80195c6:	3301      	adds	r3, #1
 80195c8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80195cc:	00db      	lsls	r3, r3, #3
 80195ce:	4413      	add	r3, r2
 80195d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80195d4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80195d8:	3301      	adds	r3, #1
 80195da:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80195de:	00db      	lsls	r3, r3, #3
 80195e0:	4413      	add	r3, r2
 80195e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e6:	f7e6 fff9 	bl	80005dc <__aeabi_dmul>
 80195ea:	4602      	mov	r2, r0
 80195ec:	460b      	mov	r3, r1
 80195ee:	4640      	mov	r0, r8
 80195f0:	4649      	mov	r1, r9
 80195f2:	f7e6 fe3d 	bl	8000270 <__adddf3>
 80195f6:	4602      	mov	r2, r0
 80195f8:	460b      	mov	r3, r1
 80195fa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80195fe:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8019602:	00c9      	lsls	r1, r1, #3
 8019604:	4401      	add	r1, r0
 8019606:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 801960a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801960e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	4413      	add	r3, r2
 8019616:	e9d3 8900 	ldrd	r8, r9, [r3]
 801961a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801961e:	3302      	adds	r3, #2
 8019620:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019624:	00db      	lsls	r3, r3, #3
 8019626:	4413      	add	r3, r2
 8019628:	e9d3 0100 	ldrd	r0, r1, [r3]
 801962c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019630:	3302      	adds	r3, #2
 8019632:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019636:	00db      	lsls	r3, r3, #3
 8019638:	4413      	add	r3, r2
 801963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963e:	f7e6 ffcd 	bl	80005dc <__aeabi_dmul>
 8019642:	4602      	mov	r2, r0
 8019644:	460b      	mov	r3, r1
 8019646:	4640      	mov	r0, r8
 8019648:	4649      	mov	r1, r9
 801964a:	f7e6 fe11 	bl	8000270 <__adddf3>
 801964e:	4602      	mov	r2, r0
 8019650:	460b      	mov	r3, r1
 8019652:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019656:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801965a:	00c9      	lsls	r1, r1, #3
 801965c:	4401      	add	r1, r0
 801965e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8019662:	f107 0210 	add.w	r2, r7, #16
 8019666:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801966a:	00db      	lsls	r3, r3, #3
 801966c:	4413      	add	r3, r2
 801966e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019672:	f107 0210 	add.w	r2, r7, #16
 8019676:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	4413      	add	r3, r2
 801967e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019682:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8019686:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801968a:	4433      	add	r3, r6
 801968c:	461e      	mov	r6, r3
 801968e:	4642      	mov	r2, r8
 8019690:	464b      	mov	r3, r9
 8019692:	f7e6 ffa3 	bl	80005dc <__aeabi_dmul>
 8019696:	4602      	mov	r2, r0
 8019698:	460b      	mov	r3, r1
 801969a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801969e:	00f1      	lsls	r1, r6, #3
 80196a0:	4401      	add	r1, r0
 80196a2:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80196a6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80196aa:	3303      	adds	r3, #3
 80196ac:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80196b0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80196b4:	3301      	adds	r3, #1
 80196b6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80196ba:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80196be:	2b02      	cmp	r3, #2
 80196c0:	f77f af3a 	ble.w	8019538 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 80196c4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80196c8:	3303      	adds	r3, #3
 80196ca:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80196ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80196d2:	3301      	adds	r3, #1
 80196d4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80196d8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80196dc:	2b02      	cmp	r3, #2
 80196de:	f77f af24 	ble.w	801952a <CSE_step+0xa02>
      }

      errorCondition = true;
 80196e2:	2301      	movs	r3, #1
 80196e4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80196e8:	2300      	movs	r3, #0
 80196ea:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80196ee:	e045      	b.n	801977c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80196f0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80196f4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80196f8:	00db      	lsls	r3, r3, #3
 80196fa:	4413      	add	r3, r2
 80196fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019700:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8019704:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019708:	00db      	lsls	r3, r3, #3
 801970a:	4413      	add	r3, r2
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	f7e6 fdac 	bl	800026c <__aeabi_dsub>
 8019714:	4602      	mov	r2, r0
 8019716:	460b      	mov	r3, r1
 8019718:	4639      	mov	r1, r7
 801971a:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801971e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019722:	2b00      	cmp	r3, #0
 8019724:	d01a      	beq.n	801975c <CSE_step+0xc34>
 8019726:	463b      	mov	r3, r7
 8019728:	ed93 7b00 	vldr	d7, [r3]
 801972c:	eeb0 0a47 	vmov.f32	s0, s14
 8019730:	eef0 0a67 	vmov.f32	s1, s15
 8019734:	f006 fd26 	bl	8020184 <rtIsInf>
 8019738:	4603      	mov	r3, r0
 801973a:	2b00      	cmp	r3, #0
 801973c:	d10b      	bne.n	8019756 <CSE_step+0xc2e>
 801973e:	463b      	mov	r3, r7
 8019740:	ed93 7b00 	vldr	d7, [r3]
 8019744:	eeb0 0a47 	vmov.f32	s0, s14
 8019748:	eef0 0a67 	vmov.f32	s1, s15
 801974c:	f006 fd3e 	bl	80201cc <rtIsNaN>
 8019750:	4603      	mov	r3, r0
 8019752:	2b00      	cmp	r3, #0
 8019754:	d002      	beq.n	801975c <CSE_step+0xc34>
          errorCondition = false;
 8019756:	2300      	movs	r3, #0
 8019758:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 801975c:	463b      	mov	r3, r7
 801975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019762:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8019766:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801976a:	00c9      	lsls	r1, r1, #3
 801976c:	4401      	add	r1, r0
 801976e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8019772:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019776:	3301      	adds	r3, #1
 8019778:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801977c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019780:	2b08      	cmp	r3, #8
 8019782:	ddb5      	ble.n	80196f0 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8019784:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019788:	2b00      	cmp	r3, #0
 801978a:	d00a      	beq.n	80197a2 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 801978c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019790:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019794:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8019798:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 801979c:	f006 fd68 	bl	8020270 <svd_u3DvUgOe>
 80197a0:	e02c      	b.n	80197fc <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 80197a2:	4bd2      	ldr	r3, [pc, #840]	; (8019aec <CSE_step+0xfc4>)
 80197a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80197ac:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 80197b0:	4bce      	ldr	r3, [pc, #824]	; (8019aec <CSE_step+0xfc4>)
 80197b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80197ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 80197be:	4bcb      	ldr	r3, [pc, #812]	; (8019aec <CSE_step+0xfc4>)
 80197c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80197c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80197cc:	2300      	movs	r3, #0
 80197ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80197d2:	e00f      	b.n	80197f4 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 80197d4:	4bc5      	ldr	r3, [pc, #788]	; (8019aec <CSE_step+0xfc4>)
 80197d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197da:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80197de:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80197e2:	00c9      	lsls	r1, r1, #3
 80197e4:	4401      	add	r1, r0
 80197e6:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80197ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197ee:	3301      	adds	r3, #1
 80197f0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80197f4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80197f8:	2b08      	cmp	r3, #8
 80197fa:	ddeb      	ble.n	80197d4 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80197fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019800:	2248      	movs	r2, #72	; 0x48
 8019802:	2100      	movs	r1, #0
 8019804:	4618      	mov	r0, r3
 8019806:	f015 f893 	bl	802e930 <memset>
      Ss[0] = s[0];
 801980a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019812:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019816:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801981a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801981e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019822:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019826:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801982a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801982e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019832:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8019836:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 801983a:	2300      	movs	r3, #0
 801983c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019840:	e01e      	b.n	8019880 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8019842:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019846:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801984a:	00db      	lsls	r3, r3, #3
 801984c:	4413      	add	r3, r2
 801984e:	ed93 7b00 	vldr	d7, [r3]
 8019852:	eeb0 0a47 	vmov.f32	s0, s14
 8019856:	eef0 0a67 	vmov.f32	s1, s15
 801985a:	f015 fa21 	bl	802eca0 <sqrt>
 801985e:	eeb0 7a40 	vmov.f32	s14, s0
 8019862:	eef0 7a60 	vmov.f32	s15, s1
 8019866:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801986a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801986e:	00db      	lsls	r3, r3, #3
 8019870:	4413      	add	r3, r2
 8019872:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019876:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801987a:	3301      	adds	r3, #1
 801987c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019880:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019884:	2b08      	cmp	r3, #8
 8019886:	dddc      	ble.n	8019842 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8019888:	2300      	movs	r3, #0
 801988a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801988e:	2300      	movs	r3, #0
 8019890:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019894:	e0b4      	b.n	8019a00 <CSE_step+0xed8>
        coffset = 0;
 8019896:	2300      	movs	r3, #0
 8019898:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 801989c:	2300      	movs	r3, #0
 801989e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80198a2:	e09e      	b.n	80199e2 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 80198a4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80198a8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80198ac:	4413      	add	r3, r2
 80198ae:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 80198b2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198b6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80198ba:	00db      	lsls	r3, r3, #3
 80198bc:	18d1      	adds	r1, r2, r3
 80198be:	f04f 0200 	mov.w	r2, #0
 80198c2:	f04f 0300 	mov.w	r3, #0
 80198c6:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 80198ca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80198ce:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	4413      	add	r3, r2
 80198d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80198da:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80198de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80198e2:	00db      	lsls	r3, r3, #3
 80198e4:	4413      	add	r3, r2
 80198e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80198ea:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80198ee:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80198f2:	00db      	lsls	r3, r3, #3
 80198f4:	4413      	add	r3, r2
 80198f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fa:	f7e6 fe6f 	bl	80005dc <__aeabi_dmul>
 80198fe:	4602      	mov	r2, r0
 8019900:	460b      	mov	r3, r1
 8019902:	4640      	mov	r0, r8
 8019904:	4649      	mov	r1, r9
 8019906:	f7e6 fcb3 	bl	8000270 <__adddf3>
 801990a:	4602      	mov	r2, r0
 801990c:	460b      	mov	r3, r1
 801990e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8019912:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8019916:	00c9      	lsls	r1, r1, #3
 8019918:	4401      	add	r1, r0
 801991a:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 801991e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019922:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8019926:	00db      	lsls	r3, r3, #3
 8019928:	4413      	add	r3, r2
 801992a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801992e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019932:	3301      	adds	r3, #1
 8019934:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019938:	00db      	lsls	r3, r3, #3
 801993a:	4413      	add	r3, r2
 801993c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019940:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019944:	3303      	adds	r3, #3
 8019946:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801994a:	00db      	lsls	r3, r3, #3
 801994c:	4413      	add	r3, r2
 801994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019952:	f7e6 fe43 	bl	80005dc <__aeabi_dmul>
 8019956:	4602      	mov	r2, r0
 8019958:	460b      	mov	r3, r1
 801995a:	4640      	mov	r0, r8
 801995c:	4649      	mov	r1, r9
 801995e:	f7e6 fc87 	bl	8000270 <__adddf3>
 8019962:	4602      	mov	r2, r0
 8019964:	460b      	mov	r3, r1
 8019966:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 801996a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 801996e:	00c9      	lsls	r1, r1, #3
 8019970:	4401      	add	r1, r0
 8019972:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8019976:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801997a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 801997e:	00db      	lsls	r3, r3, #3
 8019980:	4413      	add	r3, r2
 8019982:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019986:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801998a:	3302      	adds	r3, #2
 801998c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019990:	00db      	lsls	r3, r3, #3
 8019992:	4413      	add	r3, r2
 8019994:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019998:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801999c:	3306      	adds	r3, #6
 801999e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80199a2:	00db      	lsls	r3, r3, #3
 80199a4:	4413      	add	r3, r2
 80199a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199aa:	f7e6 fe17 	bl	80005dc <__aeabi_dmul>
 80199ae:	4602      	mov	r2, r0
 80199b0:	460b      	mov	r3, r1
 80199b2:	4640      	mov	r0, r8
 80199b4:	4649      	mov	r1, r9
 80199b6:	f7e6 fc5b 	bl	8000270 <__adddf3>
 80199ba:	4602      	mov	r2, r0
 80199bc:	460b      	mov	r3, r1
 80199be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80199c2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80199c6:	00c9      	lsls	r1, r1, #3
 80199c8:	4401      	add	r1, r0
 80199ca:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80199ce:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80199d2:	3303      	adds	r3, #3
 80199d4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80199d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80199dc:	3301      	adds	r3, #1
 80199de:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80199e2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80199e6:	2b02      	cmp	r3, #2
 80199e8:	f77f af5c 	ble.w	80198a4 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 80199ec:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80199f0:	3303      	adds	r3, #3
 80199f2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80199f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80199fa:	3301      	adds	r3, #1
 80199fc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019a00:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a04:	2b02      	cmp	r3, #2
 8019a06:	f77f af46 	ble.w	8019896 <CSE_step+0xd6e>
      }

      errorCondition = true;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8019a10:	2300      	movs	r3, #0
 8019a12:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8019a16:	2300      	movs	r3, #0
 8019a18:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8019a1c:	e042      	b.n	8019aa4 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8019a1e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a22:	3301      	adds	r3, #1
 8019a24:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8019a28:	2300      	movs	r3, #0
 8019a2a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8019a2e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a32:	2b02      	cmp	r3, #2
 8019a34:	dc23      	bgt.n	8019a7e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8019a36:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019a3a:	4613      	mov	r3, r2
 8019a3c:	005b      	lsls	r3, r3, #1
 8019a3e:	441a      	add	r2, r3
 8019a40:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a44:	4413      	add	r3, r2
 8019a46:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019a4a:	00db      	lsls	r3, r3, #3
 8019a4c:	4413      	add	r3, r2
 8019a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019a52:	f04f 0200 	mov.w	r2, #0
 8019a56:	f04f 0300 	mov.w	r3, #0
 8019a5a:	f7e7 f827 	bl	8000aac <__aeabi_dcmpeq>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d106      	bne.n	8019a72 <CSE_step+0xf4a>
              errorCondition = false;
 8019a64:	2300      	movs	r3, #0
 8019a66:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8019a70:	e00d      	b.n	8019a8e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8019a72:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019a76:	3301      	adds	r3, #1
 8019a78:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019a7c:	e007      	b.n	8019a8e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8019a7e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019a82:	3301      	adds	r3, #1
 8019a84:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8019a88:	2302      	movs	r3, #2
 8019a8a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8019a8e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d0c8      	beq.n	8019a28 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8019a96:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8019a9a:	2b01      	cmp	r3, #1
 8019a9c:	d102      	bne.n	8019aa4 <CSE_step+0xf7c>
          exitg2 = true;
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8019aa4:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d103      	bne.n	8019ab4 <CSE_step+0xf8c>
 8019aac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019ab0:	2b02      	cmp	r3, #2
 8019ab2:	ddb4      	ble.n	8019a1e <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8019ab4:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d110      	bne.n	8019ade <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8019abc:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019ac0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019ac4:	2248      	movs	r2, #72	; 0x48
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f014 ff24 	bl	802e914 <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8019acc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019ad0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8019ad4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f004 f807 	bl	801daec <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019aea:	e062      	b.n	8019bb2 <CSE_step+0x108a>
 8019aec:	2001ed50 	.word	0x2001ed50
      CSE_DW.P[iAcol_0] = R[iAcol];
 8019af0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019af4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019af8:	00db      	lsls	r3, r3, #3
 8019afa:	4413      	add	r3, r2
 8019afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b00:	48a5      	ldr	r0, [pc, #660]	; (8019d98 <CSE_step+0x1270>)
 8019b02:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019b06:	00c9      	lsls	r1, r1, #3
 8019b08:	4401      	add	r1, r0
 8019b0a:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8019b0e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b12:	3303      	adds	r3, #3
 8019b14:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019b18:	1c51      	adds	r1, r2, #1
 8019b1a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019b1e:	00db      	lsls	r3, r3, #3
 8019b20:	4413      	add	r3, r2
 8019b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b26:	489c      	ldr	r0, [pc, #624]	; (8019d98 <CSE_step+0x1270>)
 8019b28:	00c9      	lsls	r1, r1, #3
 8019b2a:	4401      	add	r1, r0
 8019b2c:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8019b30:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b34:	3306      	adds	r3, #6
 8019b36:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019b3a:	1c91      	adds	r1, r2, #2
 8019b3c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019b40:	00db      	lsls	r3, r3, #3
 8019b42:	4413      	add	r3, r2
 8019b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b48:	4893      	ldr	r0, [pc, #588]	; (8019d98 <CSE_step+0x1270>)
 8019b4a:	00c9      	lsls	r1, r1, #3
 8019b4c:	4401      	add	r1, r0
 8019b4e:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8019b52:	4a91      	ldr	r2, [pc, #580]	; (8019d98 <CSE_step+0x1270>)
 8019b54:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b58:	3309      	adds	r3, #9
 8019b5a:	00db      	lsls	r3, r3, #3
 8019b5c:	4413      	add	r3, r2
 8019b5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019b62:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019b66:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019b6a:	00db      	lsls	r3, r3, #3
 8019b6c:	4413      	add	r3, r2
 8019b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019b72:	f107 0308 	add.w	r3, r7, #8
 8019b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b7a:	f7e6 fd2f 	bl	80005dc <__aeabi_dmul>
 8019b7e:	4602      	mov	r2, r0
 8019b80:	460b      	mov	r3, r1
 8019b82:	4640      	mov	r0, r8
 8019b84:	4649      	mov	r1, r9
 8019b86:	f7e6 fb73 	bl	8000270 <__adddf3>
 8019b8a:	4602      	mov	r2, r0
 8019b8c:	460b      	mov	r3, r1
 8019b8e:	4882      	ldr	r0, [pc, #520]	; (8019d98 <CSE_step+0x1270>)
 8019b90:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8019b94:	3109      	adds	r1, #9
 8019b96:	00c9      	lsls	r1, r1, #3
 8019b98:	4401      	add	r1, r0
 8019b9a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8019b9e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ba2:	3303      	adds	r3, #3
 8019ba4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019ba8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019bac:	3301      	adds	r3, #1
 8019bae:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019bb2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019bb6:	2b02      	cmp	r3, #2
 8019bb8:	dd9a      	ble.n	8019af0 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8019bba:	4b77      	ldr	r3, [pc, #476]	; (8019d98 <CSE_step+0x1270>)
 8019bbc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8019bc0:	4b75      	ldr	r3, [pc, #468]	; (8019d98 <CSE_step+0x1270>)
 8019bc2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019bc6:	f7e6 fe33 	bl	8000830 <__aeabi_ddiv>
 8019bca:	4602      	mov	r2, r0
 8019bcc:	460b      	mov	r3, r1
 8019bce:	4973      	ldr	r1, [pc, #460]	; (8019d9c <CSE_step+0x1274>)
 8019bd0:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8019bd4:	4b70      	ldr	r3, [pc, #448]	; (8019d98 <CSE_step+0x1270>)
 8019bd6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019bda:	4970      	ldr	r1, [pc, #448]	; (8019d9c <CSE_step+0x1274>)
 8019bdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8019be0:	f107 0310 	add.w	r3, r7, #16
 8019be4:	4619      	mov	r1, r3
 8019be6:	486e      	ldr	r0, [pc, #440]	; (8019da0 <CSE_step+0x1278>)
 8019be8:	f7fe fb26 	bl	8018238 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019bec:	2300      	movs	r3, #0
 8019bee:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019bf2:	e034      	b.n	8019c5e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8019bf4:	4a68      	ldr	r2, [pc, #416]	; (8019d98 <CSE_step+0x1270>)
 8019bf6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019bfa:	00db      	lsls	r3, r3, #3
 8019bfc:	4413      	add	r3, r2
 8019bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c02:	a363      	add	r3, pc, #396	; (adr r3, 8019d90 <CSE_step+0x1268>)
 8019c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c08:	f7e6 fce8 	bl	80005dc <__aeabi_dmul>
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	460b      	mov	r3, r1
 8019c10:	f107 0108 	add.w	r1, r7, #8
 8019c14:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8019c18:	f107 0308 	add.w	r3, r7, #8
 8019c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c20:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019c24:	00c9      	lsls	r1, r1, #3
 8019c26:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019c2a:	4401      	add	r1, r0
 8019c2c:	39d0      	subs	r1, #208	; 0xd0
 8019c2e:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8019c32:	f107 0308 	add.w	r3, r7, #8
 8019c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c3a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019c3e:	3109      	adds	r1, #9
 8019c40:	4614      	mov	r4, r2
 8019c42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8019c46:	00cb      	lsls	r3, r1, #3
 8019c48:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019c4c:	4413      	add	r3, r2
 8019c4e:	3bd0      	subs	r3, #208	; 0xd0
 8019c50:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8019c54:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c58:	3301      	adds	r3, #1
 8019c5a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019c5e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c62:	2b08      	cmp	r3, #8
 8019c64:	ddc6      	ble.n	8019bf4 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8019c66:	2300      	movs	r3, #0
 8019c68:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019c72:	e058      	b.n	8019d26 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8019c74:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019c78:	00db      	lsls	r3, r3, #3
 8019c7a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019c7e:	4413      	add	r3, r2
 8019c80:	3bd0      	subs	r3, #208	; 0xd0
 8019c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019c86:	4b44      	ldr	r3, [pc, #272]	; (8019d98 <CSE_step+0x1270>)
 8019c88:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8019c8c:	f7e6 faf0 	bl	8000270 <__adddf3>
 8019c90:	4602      	mov	r2, r0
 8019c92:	460b      	mov	r3, r1
 8019c94:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019c98:	00c9      	lsls	r1, r1, #3
 8019c9a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019c9e:	4401      	add	r1, r0
 8019ca0:	39d0      	subs	r1, #208	; 0xd0
 8019ca2:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8019ca6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019caa:	3301      	adds	r3, #1
 8019cac:	00db      	lsls	r3, r3, #3
 8019cae:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019cb2:	4413      	add	r3, r2
 8019cb4:	3bd0      	subs	r3, #208	; 0xd0
 8019cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019cba:	4b37      	ldr	r3, [pc, #220]	; (8019d98 <CSE_step+0x1270>)
 8019cbc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8019cc0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019cc4:	3401      	adds	r4, #1
 8019cc6:	f7e6 fad3 	bl	8000270 <__adddf3>
 8019cca:	4602      	mov	r2, r0
 8019ccc:	460b      	mov	r3, r1
 8019cce:	00e1      	lsls	r1, r4, #3
 8019cd0:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019cd4:	4401      	add	r1, r0
 8019cd6:	39d0      	subs	r1, #208	; 0xd0
 8019cd8:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8019cdc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019ce0:	3302      	adds	r3, #2
 8019ce2:	00db      	lsls	r3, r3, #3
 8019ce4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8019ce8:	4413      	add	r3, r2
 8019cea:	3bd0      	subs	r3, #208	; 0xd0
 8019cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019cf0:	4b29      	ldr	r3, [pc, #164]	; (8019d98 <CSE_step+0x1270>)
 8019cf2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8019cf6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8019cfa:	3402      	adds	r4, #2
 8019cfc:	f7e6 fab8 	bl	8000270 <__adddf3>
 8019d00:	4602      	mov	r2, r0
 8019d02:	460b      	mov	r3, r1
 8019d04:	00e1      	lsls	r1, r4, #3
 8019d06:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8019d0a:	4401      	add	r1, r0
 8019d0c:	39d0      	subs	r1, #208	; 0xd0
 8019d0e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8019d12:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d16:	3303      	adds	r3, #3
 8019d18:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019d1c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d20:	3301      	adds	r3, #1
 8019d22:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019d26:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d2a:	2b05      	cmp	r3, #5
 8019d2c:	dda2      	ble.n	8019c74 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019d34:	2300      	movs	r3, #0
 8019d36:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019d3a:	e018      	b.n	8019d6e <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8019d3c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8019d40:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d44:	00db      	lsls	r3, r3, #3
 8019d46:	18d0      	adds	r0, r2, r3
 8019d48:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8019d4c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d50:	00db      	lsls	r3, r3, #3
 8019d52:	4413      	add	r3, r2
 8019d54:	4619      	mov	r1, r3
 8019d56:	f7fe fa6f 	bl	8018238 <CSE_S_x>
    iAcol_0 += 3;
 8019d5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019d5e:	3303      	adds	r3, #3
 8019d60:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8019d64:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d68:	3301      	adds	r3, #1
 8019d6a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019d6e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019d72:	2b05      	cmp	r3, #5
 8019d74:	dde2      	ble.n	8019d3c <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8019d76:	f107 0310 	add.w	r3, r7, #16
 8019d7a:	4619      	mov	r1, r3
 8019d7c:	4808      	ldr	r0, [pc, #32]	; (8019da0 <CSE_step+0x1278>)
 8019d7e:	f7fe fa5b 	bl	8018238 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019d82:	2300      	movs	r3, #0
 8019d84:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019d88:	e021      	b.n	8019dce <CSE_step+0x12a6>
 8019d8a:	bf00      	nop
 8019d8c:	f3af 8000 	nop.w
 8019d90:	64b487da 	.word	0x64b487da
 8019d94:	3f5c60bf 	.word	0x3f5c60bf
 8019d98:	2001c228 	.word	0x2001c228
 8019d9c:	2001c208 	.word	0x2001c208
 8019da0:	2001c270 	.word	0x2001c270
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8019da4:	4ab8      	ldr	r2, [pc, #736]	; (801a088 <CSE_step+0x1560>)
 8019da6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019daa:	3309      	adds	r3, #9
 8019dac:	00db      	lsls	r3, r3, #3
 8019dae:	4413      	add	r3, r2
 8019db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8019db8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019dbc:	00c9      	lsls	r1, r1, #3
 8019dbe:	4401      	add	r1, r0
 8019dc0:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019dc4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019dc8:	3301      	adds	r3, #1
 8019dca:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019dce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019dd2:	2b02      	cmp	r3, #2
 8019dd4:	dde6      	ble.n	8019da4 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8019dd6:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8019dda:	f107 0210 	add.w	r2, r7, #16
 8019dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019de2:	9304      	str	r3, [sp, #16]
 8019de4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019de8:	9303      	str	r3, [sp, #12]
 8019dea:	4ba8      	ldr	r3, [pc, #672]	; (801a08c <CSE_step+0x1564>)
 8019dec:	9302      	str	r3, [sp, #8]
 8019dee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8019df2:	9301      	str	r3, [sp, #4]
 8019df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019df8:	9300      	str	r3, [sp, #0]
 8019dfa:	460b      	mov	r3, r1
 8019dfc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 801a080 <CSE_step+0x1558>
 8019e00:	49a3      	ldr	r1, [pc, #652]	; (801a090 <CSE_step+0x1568>)
 8019e02:	48a4      	ldr	r0, [pc, #656]	; (801a094 <CSE_step+0x156c>)
 8019e04:	f001 fc42 	bl	801b68c <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8019e08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019e0c:	2248      	movs	r2, #72	; 0x48
 8019e0e:	2100      	movs	r1, #0
 8019e10:	4618      	mov	r0, r3
 8019e12:	f014 fd8d 	bl	802e930 <memset>
  R[0] = 1.0;
 8019e16:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019e1a:	f04f 0200 	mov.w	r2, #0
 8019e1e:	4b9e      	ldr	r3, [pc, #632]	; (801a098 <CSE_step+0x1570>)
 8019e20:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8019e24:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019e28:	f04f 0200 	mov.w	r2, #0
 8019e2c:	4b9a      	ldr	r3, [pc, #616]	; (801a098 <CSE_step+0x1570>)
 8019e2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8019e32:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8019e36:	f04f 0200 	mov.w	r2, #0
 8019e3a:	4b97      	ldr	r3, [pc, #604]	; (801a098 <CSE_step+0x1570>)
 8019e3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019e40:	2300      	movs	r3, #0
 8019e42:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019e46:	e07e      	b.n	8019f46 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8019e48:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019e4c:	4613      	mov	r3, r2
 8019e4e:	005b      	lsls	r3, r3, #1
 8019e50:	4413      	add	r3, r2
 8019e52:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019e56:	2300      	movs	r3, #0
 8019e58:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019e5c:	e06a      	b.n	8019f34 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8019e5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8019e62:	4613      	mov	r3, r2
 8019e64:	005b      	lsls	r3, r3, #1
 8019e66:	4413      	add	r3, r2
 8019e68:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019e6c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019e70:	3301      	adds	r3, #1
 8019e72:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019e76:	00db      	lsls	r3, r3, #3
 8019e78:	4413      	add	r3, r2
 8019e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019e7e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019e82:	3303      	adds	r3, #3
 8019e84:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019e88:	00db      	lsls	r3, r3, #3
 8019e8a:	4413      	add	r3, r2
 8019e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e90:	f7e6 fba4 	bl	80005dc <__aeabi_dmul>
 8019e94:	4602      	mov	r2, r0
 8019e96:	460b      	mov	r3, r1
 8019e98:	4614      	mov	r4, r2
 8019e9a:	461d      	mov	r5, r3
 8019e9c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019ea0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019ea4:	00db      	lsls	r3, r3, #3
 8019ea6:	4413      	add	r3, r2
 8019ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019eac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019eb0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	4413      	add	r3, r2
 8019eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019ebc:	f7e6 fb8e 	bl	80005dc <__aeabi_dmul>
 8019ec0:	4602      	mov	r2, r0
 8019ec2:	460b      	mov	r3, r1
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	4629      	mov	r1, r5
 8019ec8:	f7e6 f9d2 	bl	8000270 <__adddf3>
 8019ecc:	4602      	mov	r2, r0
 8019ece:	460b      	mov	r3, r1
 8019ed0:	4690      	mov	r8, r2
 8019ed2:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019ed4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8019ed8:	3302      	adds	r3, #2
 8019eda:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8019ede:	00db      	lsls	r3, r3, #3
 8019ee0:	4413      	add	r3, r2
 8019ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019ee6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019eea:	3306      	adds	r3, #6
 8019eec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019ef0:	00db      	lsls	r3, r3, #3
 8019ef2:	4413      	add	r3, r2
 8019ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef8:	f7e6 fb70 	bl	80005dc <__aeabi_dmul>
 8019efc:	4602      	mov	r2, r0
 8019efe:	460b      	mov	r3, r1
 8019f00:	4610      	mov	r0, r2
 8019f02:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019f04:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8019f08:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f0c:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8019f0e:	4602      	mov	r2, r0
 8019f10:	460b      	mov	r3, r1
 8019f12:	4640      	mov	r0, r8
 8019f14:	4649      	mov	r1, r9
 8019f16:	f7e6 f9ab 	bl	8000270 <__adddf3>
 8019f1a:	4602      	mov	r2, r0
 8019f1c:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8019f1e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8019f22:	00e1      	lsls	r1, r4, #3
 8019f24:	4401      	add	r1, r0
 8019f26:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8019f2a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f2e:	3301      	adds	r3, #1
 8019f30:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8019f34:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f38:	2b02      	cmp	r3, #2
 8019f3a:	dd90      	ble.n	8019e5e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8019f3c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019f40:	3301      	adds	r3, #1
 8019f42:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8019f46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019f4a:	2b02      	cmp	r3, #2
 8019f4c:	f77f af7c 	ble.w	8019e48 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8019f50:	2300      	movs	r3, #0
 8019f52:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8019f56:	2300      	movs	r3, #0
 8019f58:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8019f62:	e077      	b.n	801a054 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8019f64:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019f68:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019f6c:	00db      	lsls	r3, r3, #3
 8019f6e:	4413      	add	r3, r2
 8019f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f74:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019f78:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8019f7c:	00c9      	lsls	r1, r1, #3
 8019f7e:	4401      	add	r1, r0
 8019f80:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8019f84:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8019f88:	1cd9      	adds	r1, r3, #3
 8019f8a:	4a44      	ldr	r2, [pc, #272]	; (801a09c <CSE_step+0x1574>)
 8019f8c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019f90:	3344      	adds	r3, #68	; 0x44
 8019f92:	00db      	lsls	r3, r3, #3
 8019f94:	4413      	add	r3, r2
 8019f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019f9e:	00c9      	lsls	r1, r1, #3
 8019fa0:	4401      	add	r1, r0
 8019fa2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8019fa6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019faa:	3301      	adds	r3, #1
 8019fac:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019fb0:	1c51      	adds	r1, r2, #1
 8019fb2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019fb6:	00db      	lsls	r3, r3, #3
 8019fb8:	4413      	add	r3, r2
 8019fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fbe:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019fc2:	00c9      	lsls	r1, r1, #3
 8019fc4:	4401      	add	r1, r0
 8019fc6:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8019fca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8019fce:	3303      	adds	r3, #3
 8019fd0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019fd4:	1d11      	adds	r1, r2, #4
 8019fd6:	4a31      	ldr	r2, [pc, #196]	; (801a09c <CSE_step+0x1574>)
 8019fd8:	3344      	adds	r3, #68	; 0x44
 8019fda:	00db      	lsls	r3, r3, #3
 8019fdc:	4413      	add	r3, r2
 8019fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8019fe6:	00c9      	lsls	r1, r1, #3
 8019fe8:	4401      	add	r1, r0
 8019fea:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8019fee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8019ff2:	3302      	adds	r3, #2
 8019ff4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8019ff8:	1c91      	adds	r1, r2, #2
 8019ffa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	4413      	add	r3, r2
 801a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a006:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 801a00a:	00c9      	lsls	r1, r1, #3
 801a00c:	4401      	add	r1, r0
 801a00e:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 801a012:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801a016:	3306      	adds	r3, #6
 801a018:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801a01c:	1d51      	adds	r1, r2, #5
 801a01e:	4a1f      	ldr	r2, [pc, #124]	; (801a09c <CSE_step+0x1574>)
 801a020:	3344      	adds	r3, #68	; 0x44
 801a022:	00db      	lsls	r3, r3, #3
 801a024:	4413      	add	r3, r2
 801a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 801a02e:	00c9      	lsls	r1, r1, #3
 801a030:	4401      	add	r1, r0
 801a032:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 801a036:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801a03a:	3306      	adds	r3, #6
 801a03c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 801a040:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a044:	3303      	adds	r3, #3
 801a046:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 801a04a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801a04e:	3301      	adds	r3, #1
 801a050:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 801a054:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801a058:	2b02      	cmp	r3, #2
 801a05a:	dd83      	ble.n	8019f64 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 801a05c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801a060:	f507 7108 	add.w	r1, r7, #544	; 0x220
 801a064:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a068:	4618      	mov	r0, r3
 801a06a:	f004 fcc7 	bl	801e9fc <qr_DvOBrgQi>
  iAcol_0 = 0;
 801a06e:	2300      	movs	r3, #0
 801a070:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801a074:	2300      	movs	r3, #0
 801a076:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801a07a:	e04c      	b.n	801a116 <CSE_step+0x15ee>
 801a07c:	f3af 8000 	nop.w
 801a080:	00000000 	.word	0x00000000
 801a084:	c12e847e 	.word	0xc12e847e
 801a088:	2001c228 	.word	0x2001c228
 801a08c:	2001c270 	.word	0x2001c270
 801a090:	0802fcd0 	.word	0x0802fcd0
 801a094:	0802fcc0 	.word	0x0802fcc0
 801a098:	3ff00000 	.word	0x3ff00000
 801a09c:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 801a0a0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801a0a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a0a8:	00db      	lsls	r3, r3, #3
 801a0aa:	4413      	add	r3, r2
 801a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b0:	481e      	ldr	r0, [pc, #120]	; (801a12c <CSE_step+0x1604>)
 801a0b2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801a0b6:	00c9      	lsls	r1, r1, #3
 801a0b8:	4401      	add	r1, r0
 801a0ba:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 801a0be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a0c2:	3303      	adds	r3, #3
 801a0c4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801a0c8:	1c51      	adds	r1, r2, #1
 801a0ca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801a0ce:	00db      	lsls	r3, r3, #3
 801a0d0:	4413      	add	r3, r2
 801a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0d6:	4815      	ldr	r0, [pc, #84]	; (801a12c <CSE_step+0x1604>)
 801a0d8:	00c9      	lsls	r1, r1, #3
 801a0da:	4401      	add	r1, r0
 801a0dc:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 801a0e0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a0e4:	3306      	adds	r3, #6
 801a0e6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 801a0ea:	1c91      	adds	r1, r2, #2
 801a0ec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801a0f0:	00db      	lsls	r3, r3, #3
 801a0f2:	4413      	add	r3, r2
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	480c      	ldr	r0, [pc, #48]	; (801a12c <CSE_step+0x1604>)
 801a0fa:	00c9      	lsls	r1, r1, #3
 801a0fc:	4401      	add	r1, r0
 801a0fe:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 801a102:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801a106:	3303      	adds	r3, #3
 801a108:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801a10c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a110:	3301      	adds	r3, #1
 801a112:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801a116:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801a11a:	2b02      	cmp	r3, #2
 801a11c:	ddc0      	ble.n	801a0a0 <CSE_step+0x1578>
  }
}
 801a11e:	bf00      	nop
 801a120:	bf00      	nop
 801a122:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 801a126:	46bd      	mov	sp, r7
 801a128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a12c:	2001c228 	.word	0x2001c228

0801a130 <CSE_initialize>:

void CSE_initialize(void)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 801a134:	2008      	movs	r0, #8
 801a136:	f005 ffe1 	bl	80200fc <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 801a13a:	2248      	movs	r2, #72	; 0x48
 801a13c:	490b      	ldr	r1, [pc, #44]	; (801a16c <CSE_initialize+0x3c>)
 801a13e:	480c      	ldr	r0, [pc, #48]	; (801a170 <CSE_initialize+0x40>)
 801a140:	f014 fbe8 	bl	802e914 <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 801a144:	4b0b      	ldr	r3, [pc, #44]	; (801a174 <CSE_initialize+0x44>)
 801a146:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 801a14a:	4909      	ldr	r1, [pc, #36]	; (801a170 <CSE_initialize+0x40>)
 801a14c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 801a150:	4b08      	ldr	r3, [pc, #32]	; (801a174 <CSE_initialize+0x44>)
 801a152:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 801a156:	4906      	ldr	r1, [pc, #24]	; (801a170 <CSE_initialize+0x40>)
 801a158:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 801a15c:	4b05      	ldr	r3, [pc, #20]	; (801a174 <CSE_initialize+0x44>)
 801a15e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 801a162:	4903      	ldr	r1, [pc, #12]	; (801a170 <CSE_initialize+0x40>)
 801a164:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 801a168:	bf00      	nop
 801a16a:	bd80      	pop	{r7, pc}
 801a16c:	200002f8 	.word	0x200002f8
 801a170:	2001c228 	.word	0x2001c228
 801a174:	20000088 	.word	0x20000088

0801a178 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 801a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 801a180:	b087      	sub	sp, #28
 801a182:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 801a184:	4b20      	ldr	r3, [pc, #128]	; (801a208 <SIM0_step+0x90>)
 801a186:	f603 0308 	addw	r3, r3, #2056	; 0x808
 801a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a18e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a192:	f101 0118 	add.w	r1, r1, #24
 801a196:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 801a19a:	4b1c      	ldr	r3, [pc, #112]	; (801a20c <SIM0_step+0x94>)
 801a19c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 801a1a0:	4b1a      	ldr	r3, [pc, #104]	; (801a20c <SIM0_step+0x94>)
 801a1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a1a6:	a316      	add	r3, pc, #88	; (adr r3, 801a200 <SIM0_step+0x88>)
 801a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ac:	f7e6 fa16 	bl	80005dc <__aeabi_dmul>
 801a1b0:	4602      	mov	r2, r0
 801a1b2:	460b      	mov	r3, r1
 801a1b4:	4650      	mov	r0, sl
 801a1b6:	4659      	mov	r1, fp
 801a1b8:	f7e6 fb3a 	bl	8000830 <__aeabi_ddiv>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	4610      	mov	r0, r2
 801a1c2:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 801a1c4:	4b10      	ldr	r3, [pc, #64]	; (801a208 <SIM0_step+0x90>)
 801a1c6:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 801a1ce:	f7e6 fa05 	bl	80005dc <__aeabi_dmul>
 801a1d2:	4602      	mov	r2, r0
 801a1d4:	460b      	mov	r3, r1
 801a1d6:	ec43 2b17 	vmov	d7, r2, r3
 801a1da:	eeb0 0a47 	vmov.f32	s0, s14
 801a1de:	eef0 0a67 	vmov.f32	s1, s15
 801a1e2:	f014 fcc5 	bl	802eb70 <exp>
 801a1e6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a1ea:	f103 0308 	add.w	r3, r3, #8
 801a1ee:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a1f8:	f102 020c 	add.w	r2, r2, #12
 801a1fc:	6013      	str	r3, [r2, #0]
 801a1fe:	e243      	b.n	801a688 <SIM0_step+0x510>
 801a200:	00000000 	.word	0x00000000
 801a204:	40ac2000 	.word	0x40ac2000
 801a208:	2001c288 	.word	0x2001c288
 801a20c:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 801a210:	4aca      	ldr	r2, [pc, #808]	; (801a53c <SIM0_step+0x3c4>)
 801a212:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a216:	f103 030c 	add.w	r3, r3, #12
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	3305      	adds	r3, #5
 801a21e:	00db      	lsls	r3, r3, #3
 801a220:	4413      	add	r3, r2
 801a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a226:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 801a22a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a22e:	f101 010c 	add.w	r1, r1, #12
 801a232:	6809      	ldr	r1, [r1, #0]
 801a234:	00c9      	lsls	r1, r1, #3
 801a236:	4401      	add	r1, r0
 801a238:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a23c:	4abf      	ldr	r2, [pc, #764]	; (801a53c <SIM0_step+0x3c4>)
 801a23e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a242:	f103 030c 	add.w	r3, r3, #12
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	4413      	add	r3, r2
 801a250:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 801a254:	4ab9      	ldr	r2, [pc, #740]	; (801a53c <SIM0_step+0x3c4>)
 801a256:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a25a:	f103 030c 	add.w	r3, r3, #12
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a264:	00db      	lsls	r3, r3, #3
 801a266:	4413      	add	r3, r2
 801a268:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 801a26c:	f7e6 fae0 	bl	8000830 <__aeabi_ddiv>
 801a270:	4602      	mov	r2, r0
 801a272:	460b      	mov	r3, r1
 801a274:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a278:	f101 0108 	add.w	r1, r1, #8
 801a27c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 801a280:	220c      	movs	r2, #12
 801a282:	49af      	ldr	r1, [pc, #700]	; (801a540 <SIM0_step+0x3c8>)
 801a284:	48af      	ldr	r0, [pc, #700]	; (801a544 <SIM0_step+0x3cc>)
 801a286:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a28a:	f103 0308 	add.w	r3, r3, #8
 801a28e:	ed93 0b00 	vldr	d0, [r3]
 801a292:	f003 fb41 	bl	801d918 <look1_binlxpw>
 801a296:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a29a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 801a29e:	220c      	movs	r2, #12
 801a2a0:	49a9      	ldr	r1, [pc, #676]	; (801a548 <SIM0_step+0x3d0>)
 801a2a2:	48a8      	ldr	r0, [pc, #672]	; (801a544 <SIM0_step+0x3cc>)
 801a2a4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a2a8:	f103 0308 	add.w	r3, r3, #8
 801a2ac:	ed93 0b00 	vldr	d0, [r3]
 801a2b0:	f003 fb32 	bl	801d918 <look1_binlxpw>
 801a2b4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a2b8:	f103 0318 	add.w	r3, r3, #24
 801a2bc:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 801a2c0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a2c4:	f103 0318 	add.w	r3, r3, #24
 801a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2cc:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2d4:	f7e6 f982 	bl	80005dc <__aeabi_dmul>
 801a2d8:	4602      	mov	r2, r0
 801a2da:	460b      	mov	r3, r1
 801a2dc:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a2e0:	f101 0118 	add.w	r1, r1, #24
 801a2e4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a2e8:	220c      	movs	r2, #12
 801a2ea:	4998      	ldr	r1, [pc, #608]	; (801a54c <SIM0_step+0x3d4>)
 801a2ec:	4895      	ldr	r0, [pc, #596]	; (801a544 <SIM0_step+0x3cc>)
 801a2ee:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a2f2:	f103 0308 	add.w	r3, r3, #8
 801a2f6:	ed93 0b00 	vldr	d0, [r3]
 801a2fa:	f003 fb0d 	bl	801d918 <look1_binlxpw>
 801a2fe:	ec51 0b10 	vmov	r0, r1, d0
 801a302:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a30a:	f7e5 ffb1 	bl	8000270 <__adddf3>
 801a30e:	4602      	mov	r2, r0
 801a310:	460b      	mov	r3, r1
 801a312:	4610      	mov	r0, r2
 801a314:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 801a316:	4b8e      	ldr	r3, [pc, #568]	; (801a550 <SIM0_step+0x3d8>)
 801a318:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a31c:	f7e6 f95e 	bl	80005dc <__aeabi_dmul>
 801a320:	4602      	mov	r2, r0
 801a322:	460b      	mov	r3, r1
 801a324:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a328:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a32c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a330:	f103 0318 	add.w	r3, r3, #24
 801a334:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a338:	4602      	mov	r2, r0
 801a33a:	460b      	mov	r3, r1
 801a33c:	f7e5 ff98 	bl	8000270 <__adddf3>
 801a340:	4602      	mov	r2, r0
 801a342:	460b      	mov	r3, r1
 801a344:	4610      	mov	r0, r2
 801a346:	4619      	mov	r1, r3
 801a348:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a350:	f7e5 ff8e 	bl	8000270 <__adddf3>
 801a354:	4602      	mov	r2, r0
 801a356:	460b      	mov	r3, r1
 801a358:	4610      	mov	r0, r2
 801a35a:	4619      	mov	r1, r3
 801a35c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a360:	f103 0318 	add.w	r3, r3, #24
 801a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a368:	f7e6 f938 	bl	80005dc <__aeabi_dmul>
 801a36c:	4602      	mov	r2, r0
 801a36e:	460b      	mov	r3, r1
 801a370:	4692      	mov	sl, r2
 801a372:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a374:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 801a378:	f103 0318 	add.w	r3, r3, #24
 801a37c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a380:	4602      	mov	r2, r0
 801a382:	460b      	mov	r3, r1
 801a384:	f7e5 ff74 	bl	8000270 <__adddf3>
 801a388:	4602      	mov	r2, r0
 801a38a:	460b      	mov	r3, r1
 801a38c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a390:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a394:	f7e5 ff6a 	bl	800026c <__aeabi_dsub>
 801a398:	4602      	mov	r2, r0
 801a39a:	460b      	mov	r3, r1
 801a39c:	4610      	mov	r0, r2
 801a39e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a3a0:	4b66      	ldr	r3, [pc, #408]	; (801a53c <SIM0_step+0x3c4>)
 801a3a2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 801a3aa:	f7e6 f917 	bl	80005dc <__aeabi_dmul>
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a3b2:	4650      	mov	r0, sl
 801a3b4:	4659      	mov	r1, fp
 801a3b6:	f7e5 ff5b 	bl	8000270 <__adddf3>
 801a3ba:	4602      	mov	r2, r0
 801a3bc:	460b      	mov	r3, r1
 801a3be:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a3c2:	4b63      	ldr	r3, [pc, #396]	; (801a550 <SIM0_step+0x3d8>)
 801a3c4:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 801a3c8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a3cc:	f103 0318 	add.w	r3, r3, #24
 801a3d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a3d4:	4602      	mov	r2, r0
 801a3d6:	460b      	mov	r3, r1
 801a3d8:	f7e5 ff4a 	bl	8000270 <__adddf3>
 801a3dc:	4602      	mov	r2, r0
 801a3de:	460b      	mov	r3, r1
 801a3e0:	4650      	mov	r0, sl
 801a3e2:	4659      	mov	r1, fp
 801a3e4:	f7e5 ff42 	bl	800026c <__aeabi_dsub>
 801a3e8:	4602      	mov	r2, r0
 801a3ea:	460b      	mov	r3, r1
 801a3ec:	4610      	mov	r0, r2
 801a3ee:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a3f0:	4a52      	ldr	r2, [pc, #328]	; (801a53c <SIM0_step+0x3c4>)
 801a3f2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a3f6:	f103 030c 	add.w	r3, r3, #12
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	3383      	adds	r3, #131	; 0x83
 801a3fe:	00db      	lsls	r3, r3, #3
 801a400:	4413      	add	r3, r2
 801a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a406:	f7e6 f8e9 	bl	80005dc <__aeabi_dmul>
 801a40a:	4602      	mov	r2, r0
 801a40c:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 801a40e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a412:	f7e5 ff2b 	bl	800026c <__aeabi_dsub>
 801a416:	4602      	mov	r2, r0
 801a418:	460b      	mov	r3, r1
 801a41a:	4692      	mov	sl, r2
 801a41c:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a41e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a422:	f103 0318 	add.w	r3, r3, #24
 801a426:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a42a:	4602      	mov	r2, r0
 801a42c:	460b      	mov	r3, r1
 801a42e:	f7e5 ff1f 	bl	8000270 <__adddf3>
 801a432:	4602      	mov	r2, r0
 801a434:	460b      	mov	r3, r1
 801a436:	4610      	mov	r0, r2
 801a438:	4619      	mov	r1, r3
      SIM0_P.Ts);
 801a43a:	4b45      	ldr	r3, [pc, #276]	; (801a550 <SIM0_step+0x3d8>)
 801a43c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 801a440:	f7e5 ff16 	bl	8000270 <__adddf3>
 801a444:	4602      	mov	r2, r0
 801a446:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 801a448:	4650      	mov	r0, sl
 801a44a:	4659      	mov	r1, fp
 801a44c:	f7e6 f9f0 	bl	8000830 <__aeabi_ddiv>
 801a450:	4602      	mov	r2, r0
 801a452:	460b      	mov	r3, r1
 801a454:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a458:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 801a45c:	220c      	movs	r2, #12
 801a45e:	493d      	ldr	r1, [pc, #244]	; (801a554 <SIM0_step+0x3dc>)
 801a460:	4838      	ldr	r0, [pc, #224]	; (801a544 <SIM0_step+0x3cc>)
 801a462:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a466:	f103 0308 	add.w	r3, r3, #8
 801a46a:	ed93 0b00 	vldr	d0, [r3]
 801a46e:	f003 fa53 	bl	801d918 <look1_binlxpw>
 801a472:	ec53 2b10 	vmov	r2, r3, d0
 801a476:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a47e:	f7e5 fef7 	bl	8000270 <__adddf3>
 801a482:	4602      	mov	r2, r0
 801a484:	460b      	mov	r3, r1
 801a486:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a48a:	f101 0118 	add.w	r1, r1, #24
 801a48e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 801a492:	4a31      	ldr	r2, [pc, #196]	; (801a558 <SIM0_step+0x3e0>)
 801a494:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a498:	f103 030c 	add.w	r3, r3, #12
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	3308      	adds	r3, #8
 801a4a0:	00db      	lsls	r3, r3, #3
 801a4a2:	18d1      	adds	r1, r2, r3
 801a4a4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4a8:	f103 0318 	add.w	r3, r3, #24
 801a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b0:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 801a4b4:	4a28      	ldr	r2, [pc, #160]	; (801a558 <SIM0_step+0x3e0>)
 801a4b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4ba:	f103 030c 	add.w	r3, r3, #12
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	3386      	adds	r3, #134	; 0x86
 801a4c2:	00db      	lsls	r3, r3, #3
 801a4c4:	18d1      	adds	r1, r2, r3
 801a4c6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a4ca:	f103 0308 	add.w	r3, r3, #8
 801a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 801a4d6:	4a19      	ldr	r2, [pc, #100]	; (801a53c <SIM0_step+0x3c4>)
 801a4d8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a4dc:	f103 030c 	add.w	r3, r3, #12
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	4413      	add	r3, r2
 801a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ee:	481a      	ldr	r0, [pc, #104]	; (801a558 <SIM0_step+0x3e0>)
 801a4f0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a4f4:	f101 010c 	add.w	r1, r1, #12
 801a4f8:	6809      	ldr	r1, [r1, #0]
 801a4fa:	f501 7182 	add.w	r1, r1, #260	; 0x104
 801a4fe:	00c9      	lsls	r1, r1, #3
 801a500:	4401      	add	r1, r0
 801a502:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 801a506:	4a0d      	ldr	r2, [pc, #52]	; (801a53c <SIM0_step+0x3c4>)
 801a508:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a50c:	f103 030c 	add.w	r3, r3, #12
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	f203 1381 	addw	r3, r3, #385	; 0x181
 801a516:	00db      	lsls	r3, r3, #3
 801a518:	4413      	add	r3, r2
 801a51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a51e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a522:	f103 0308 	add.w	r3, r3, #8
 801a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a52a:	f7e6 f857 	bl	80005dc <__aeabi_dmul>
 801a52e:	4602      	mov	r2, r0
 801a530:	460b      	mov	r3, r1
 801a532:	f507 60fd 	add.w	r0, r7, #2024	; 0x7e8
 801a536:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a53a:	e00f      	b.n	801a55c <SIM0_step+0x3e4>
 801a53c:	2001c288 	.word	0x2001c288
 801a540:	200003e8 	.word	0x200003e8
 801a544:	20000e80 	.word	0x20000e80
 801a548:	20000ee8 	.word	0x20000ee8
 801a54c:	20000380 	.word	0x20000380
 801a550:	20000360 	.word	0x20000360
 801a554:	20000e18 	.word	0x20000e18
 801a558:	2001dae8 	.word	0x2001dae8
 801a55c:	f101 010c 	add.w	r1, r1, #12
 801a560:	6809      	ldr	r1, [r1, #0]
 801a562:	00c9      	lsls	r1, r1, #3
 801a564:	4401      	add	r1, r0
 801a566:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 801a56a:	f107 0318 	add.w	r3, r7, #24
 801a56e:	3b10      	subs	r3, #16
 801a570:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a574:	f102 020c 	add.w	r2, r2, #12
 801a578:	6812      	ldr	r2, [r2, #0]
 801a57a:	00d2      	lsls	r2, r2, #3
 801a57c:	1899      	adds	r1, r3, r2
 801a57e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a586:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a58a:	4aa2      	ldr	r2, [pc, #648]	; (801a814 <SIM0_step+0x69c>)
 801a58c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a590:	f103 030c 	add.w	r3, r3, #12
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	4413      	add	r3, r2
 801a59e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a5a2:	4b9d      	ldr	r3, [pc, #628]	; (801a818 <SIM0_step+0x6a0>)
 801a5a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a5a8:	f7e6 f942 	bl	8000830 <__aeabi_ddiv>
 801a5ac:	4602      	mov	r2, r0
 801a5ae:	460b      	mov	r3, r1
 801a5b0:	4610      	mov	r0, r2
 801a5b2:	4619      	mov	r1, r3
                  * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain +
 801a5b4:	4a97      	ldr	r2, [pc, #604]	; (801a814 <SIM0_step+0x69c>)
 801a5b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a5ba:	f103 030c 	add.w	r3, r3, #12
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a5c4:	00db      	lsls	r3, r3, #3
 801a5c6:	4413      	add	r3, r2
 801a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5cc:	f7e6 f806 	bl	80005dc <__aeabi_dmul>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	4610      	mov	r0, r2
 801a5d6:	4619      	mov	r1, r3
 801a5d8:	4b8f      	ldr	r3, [pc, #572]	; (801a818 <SIM0_step+0x6a0>)
 801a5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a5de:	3318      	adds	r3, #24
 801a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e4:	f7e5 fffa 	bl	80005dc <__aeabi_dmul>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	4610      	mov	r0, r2
 801a5ee:	4619      	mov	r1, r3
 801a5f0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a5f4:	f103 0318 	add.w	r3, r3, #24
 801a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5fc:	f7e5 fe38 	bl	8000270 <__adddf3>
 801a600:	4602      	mov	r2, r0
 801a602:	460b      	mov	r3, r1
 801a604:	4610      	mov	r0, r2
 801a606:	4619      	mov	r1, r3
                  rtb_Memory20) * SIM0_P.Ts + SIM0_DW.Memory_PreviousInput[i];
 801a608:	4b83      	ldr	r3, [pc, #524]	; (801a818 <SIM0_step+0x6a0>)
 801a60a:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 801a60e:	f7e5 ffe5 	bl	80005dc <__aeabi_dmul>
 801a612:	4602      	mov	r2, r0
 801a614:	460b      	mov	r3, r1
 801a616:	4610      	mov	r0, r2
 801a618:	4619      	mov	r1, r3
 801a61a:	4a7e      	ldr	r2, [pc, #504]	; (801a814 <SIM0_step+0x69c>)
 801a61c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a620:	f103 030c 	add.w	r3, r3, #12
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f203 1303 	addw	r3, r3, #259	; 0x103
 801a62a:	00db      	lsls	r3, r3, #3
 801a62c:	4413      	add	r3, r2
 801a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a632:	f7e5 fe1d 	bl	8000270 <__adddf3>
 801a636:	4602      	mov	r2, r0
 801a638:	460b      	mov	r3, r1
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 801a63a:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 801a63e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a642:	f101 010c 	add.w	r1, r1, #12
 801a646:	6809      	ldr	r1, [r1, #0]
 801a648:	00c9      	lsls	r1, r1, #3
 801a64a:	4401      	add	r1, r0
 801a64c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory19[i] = rtb_is_drive;
 801a650:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801a654:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a658:	f103 030c 	add.w	r3, r3, #12
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	00db      	lsls	r3, r3, #3
 801a660:	18d1      	adds	r1, r2, r3
 801a662:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a666:	f103 0318 	add.w	r3, r3, #24
 801a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a66e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801a672:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a676:	f103 030c 	add.w	r3, r3, #12
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	3301      	adds	r3, #1
 801a67e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a682:	f102 020c 	add.w	r2, r2, #12
 801a686:	6013      	str	r3, [r2, #0]
 801a688:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a68c:	f103 030c 	add.w	r3, r3, #12
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	2b7d      	cmp	r3, #125	; 0x7d
 801a694:	f77f adbc 	ble.w	801a210 <SIM0_step+0x98>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a698:	4b5e      	ldr	r3, [pc, #376]	; (801a814 <SIM0_step+0x69c>)
 801a69a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a69e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a6a2:	f04f 0200 	mov.w	r2, #0
 801a6a6:	f04f 0300 	mov.w	r3, #0
 801a6aa:	f7e6 f9ff 	bl	8000aac <__aeabi_dcmpeq>
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d101      	bne.n	801a6b8 <SIM0_step+0x540>
 801a6b4:	2602      	movs	r6, #2
 801a6b6:	e000      	b.n	801a6ba <SIM0_step+0x542>
 801a6b8:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a6ba:	4b56      	ldr	r3, [pc, #344]	; (801a814 <SIM0_step+0x69c>)
 801a6bc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a6c0:	3308      	adds	r3, #8
 801a6c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a6c6:	2301      	movs	r3, #1
 801a6c8:	469a      	mov	sl, r3
 801a6ca:	f04f 0200 	mov.w	r2, #0
 801a6ce:	f04f 0300 	mov.w	r3, #0
 801a6d2:	f7e6 f9eb 	bl	8000aac <__aeabi_dcmpeq>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d001      	beq.n	801a6e0 <SIM0_step+0x568>
 801a6dc:	2300      	movs	r3, #0
 801a6de:	469a      	mov	sl, r3
 801a6e0:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a6e4:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a6e6:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 801a6e8:	4b4a      	ldr	r3, [pc, #296]	; (801a814 <SIM0_step+0x69c>)
 801a6ea:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a6ee:	3318      	adds	r3, #24
 801a6f0:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 801a6f2:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 801a6f4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a6f8:	f102 020c 	add.w	r2, r2, #12
 801a6fc:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 801a6fe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a702:	f103 030c 	add.w	r3, r3, #12
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	4a43      	ldr	r2, [pc, #268]	; (801a818 <SIM0_step+0x6a0>)
 801a70a:	4413      	add	r3, r2
 801a70c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a710:	3318      	adds	r3, #24
 801a712:	781b      	ldrb	r3, [r3, #0]
 801a714:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a718:	f102 0217 	add.w	r2, r2, #23
 801a71c:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 801a71e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a722:	f103 030c 	add.w	r3, r3, #12
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	3308      	adds	r3, #8
 801a72a:	4a3b      	ldr	r2, [pc, #236]	; (801a818 <SIM0_step+0x6a0>)
 801a72c:	4413      	add	r3, r2
 801a72e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801a732:	3318      	adds	r3, #24
 801a734:	781b      	ldrb	r3, [r3, #0]
 801a736:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a73a:	f102 0216 	add.w	r2, r2, #22
 801a73e:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 801a740:	4a36      	ldr	r2, [pc, #216]	; (801a81c <SIM0_step+0x6a4>)
 801a742:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a746:	f103 0317 	add.w	r3, r3, #23
 801a74a:	781b      	ldrb	r3, [r3, #0]
 801a74c:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a74e:	4b31      	ldr	r3, [pc, #196]	; (801a814 <SIM0_step+0x69c>)
 801a750:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a754:	3310      	adds	r3, #16
 801a756:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a75a:	f04f 0200 	mov.w	r2, #0
 801a75e:	f04f 0300 	mov.w	r3, #0
 801a762:	f7e6 f9a3 	bl	8000aac <__aeabi_dcmpeq>
 801a766:	4603      	mov	r3, r0
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d101      	bne.n	801a770 <SIM0_step+0x5f8>
 801a76c:	2602      	movs	r6, #2
 801a76e:	e000      	b.n	801a772 <SIM0_step+0x5fa>
 801a770:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a772:	4b28      	ldr	r3, [pc, #160]	; (801a814 <SIM0_step+0x69c>)
 801a774:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801a778:	3318      	adds	r3, #24
 801a77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a77e:	2301      	movs	r3, #1
 801a780:	469a      	mov	sl, r3
 801a782:	f04f 0200 	mov.w	r2, #0
 801a786:	f04f 0300 	mov.w	r3, #0
 801a78a:	f7e6 f98f 	bl	8000aac <__aeabi_dcmpeq>
 801a78e:	4603      	mov	r3, r0
 801a790:	2b00      	cmp	r3, #0
 801a792:	d001      	beq.n	801a798 <SIM0_step+0x620>
 801a794:	2300      	movs	r3, #0
 801a796:	469a      	mov	sl, r3
 801a798:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a79c:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a79e:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 801a7a0:	4b1c      	ldr	r3, [pc, #112]	; (801a814 <SIM0_step+0x69c>)
 801a7a2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801a7a6:	3319      	adds	r3, #25
 801a7a8:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 801a7aa:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 801a7ac:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a7b0:	f102 020c 	add.w	r2, r2, #12
 801a7b4:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 801a7b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a7ba:	f103 030c 	add.w	r3, r3, #12
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	4a15      	ldr	r2, [pc, #84]	; (801a818 <SIM0_step+0x6a0>)
 801a7c2:	4413      	add	r3, r2
 801a7c4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a7c8:	3308      	adds	r3, #8
 801a7ca:	781b      	ldrb	r3, [r3, #0]
 801a7cc:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801a7d0:	f102 0215 	add.w	r2, r2, #21
 801a7d4:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 801a7d6:	4a11      	ldr	r2, [pc, #68]	; (801a81c <SIM0_step+0x6a4>)
 801a7d8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a7dc:	f103 0315 	add.w	r3, r3, #21
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a7e4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a7e8:	f103 0316 	add.w	r3, r3, #22
 801a7ec:	781b      	ldrb	r3, [r3, #0]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d016      	beq.n	801a820 <SIM0_step+0x6a8>
 801a7f2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a7f6:	f103 030c 	add.w	r3, r3, #12
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	3308      	adds	r3, #8
 801a7fe:	4a06      	ldr	r2, [pc, #24]	; (801a818 <SIM0_step+0x6a0>)
 801a800:	4413      	add	r3, r2
 801a802:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801a806:	3308      	adds	r3, #8
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7e5 fe6c 	bl	80004e8 <__aeabi_ui2d>
 801a810:	e00a      	b.n	801a828 <SIM0_step+0x6b0>
 801a812:	bf00      	nop
 801a814:	2001c288 	.word	0x2001c288
 801a818:	20000360 	.word	0x20000360
 801a81c:	2001dae8 	.word	0x2001dae8
 801a820:	f04f 0000 	mov.w	r0, #0
 801a824:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 801a828:	4bba      	ldr	r3, [pc, #744]	; (801ab14 <SIM0_step+0x99c>)
 801a82a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 801a832:	f7e5 fed3 	bl	80005dc <__aeabi_dmul>
 801a836:	4602      	mov	r2, r0
 801a838:	460b      	mov	r3, r1
 801a83a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a83e:	f101 0108 	add.w	r1, r1, #8
 801a842:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 801a846:	49b4      	ldr	r1, [pc, #720]	; (801ab18 <SIM0_step+0x9a0>)
 801a848:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a84c:	f103 0308 	add.w	r3, r3, #8
 801a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a854:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 801a858:	4bae      	ldr	r3, [pc, #696]	; (801ab14 <SIM0_step+0x99c>)
 801a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a85e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a862:	f101 0108 	add.w	r1, r1, #8
 801a866:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a86a:	f7e5 feb7 	bl	80005dc <__aeabi_dmul>
 801a86e:	4602      	mov	r2, r0
 801a870:	460b      	mov	r3, r1
 801a872:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801a876:	f101 0108 	add.w	r1, r1, #8
 801a87a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 801a87e:	49a6      	ldr	r1, [pc, #664]	; (801ab18 <SIM0_step+0x9a0>)
 801a880:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801a884:	f103 0308 	add.w	r3, r3, #8
 801a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 801a890:	4ba0      	ldr	r3, [pc, #640]	; (801ab14 <SIM0_step+0x99c>)
 801a892:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a896:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a89a:	f101 0108 	add.w	r1, r1, #8
 801a89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8a2:	f7e5 fe9b 	bl	80005dc <__aeabi_dmul>
 801a8a6:	4602      	mov	r2, r0
 801a8a8:	460b      	mov	r3, r1
 801a8aa:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a8ae:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 801a8b2:	4b98      	ldr	r3, [pc, #608]	; (801ab14 <SIM0_step+0x99c>)
 801a8b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a8b8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a8bc:	f101 0108 	add.w	r1, r1, #8
 801a8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8c4:	f7e5 fe8a 	bl	80005dc <__aeabi_dmul>
 801a8c8:	4602      	mov	r2, r0
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a8d0:	f101 0108 	add.w	r1, r1, #8
 801a8d4:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 801a8d8:	2301      	movs	r3, #1
 801a8da:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a8de:	f102 020c 	add.w	r2, r2, #12
 801a8e2:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 801a8e4:	2300      	movs	r3, #0
 801a8e6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a8ea:	f102 0204 	add.w	r2, r2, #4
 801a8ee:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 801a8f0:	f04f 0200 	mov.w	r2, #0
 801a8f4:	f04f 0300 	mov.w	r3, #0
 801a8f8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a8fc:	f101 0118 	add.w	r1, r1, #24
 801a900:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 801a904:	4b83      	ldr	r3, [pc, #524]	; (801ab14 <SIM0_step+0x99c>)
 801a906:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a90a:	3308      	adds	r3, #8
 801a90c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a910:	f04f 0200 	mov.w	r2, #0
 801a914:	f04f 0300 	mov.w	r3, #0
 801a918:	f7e6 f8c8 	bl	8000aac <__aeabi_dcmpeq>
 801a91c:	4603      	mov	r3, r0
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d10c      	bne.n	801a93c <SIM0_step+0x7c4>
    i = 2;
 801a922:	2302      	movs	r3, #2
 801a924:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a928:	f102 020c 	add.w	r2, r2, #12
 801a92c:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 801a92e:	2301      	movs	r3, #1
 801a930:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a934:	f102 0204 	add.w	r2, r2, #4
 801a938:	6013      	str	r3, [r2, #0]
 801a93a:	e01d      	b.n	801a978 <SIM0_step+0x800>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 801a93c:	4b75      	ldr	r3, [pc, #468]	; (801ab14 <SIM0_step+0x99c>)
 801a93e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a942:	3310      	adds	r3, #16
 801a944:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a948:	f04f 0200 	mov.w	r2, #0
 801a94c:	f04f 0300 	mov.w	r3, #0
 801a950:	f7e6 f8ac 	bl	8000aac <__aeabi_dcmpeq>
 801a954:	4603      	mov	r3, r0
 801a956:	2b00      	cmp	r3, #0
 801a958:	d10e      	bne.n	801a978 <SIM0_step+0x800>
    i = 3;
 801a95a:	2303      	movs	r3, #3
 801a95c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a960:	f102 020c 	add.w	r2, r2, #12
 801a964:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 801a966:	f04f 0200 	mov.w	r2, #0
 801a96a:	4b6c      	ldr	r3, [pc, #432]	; (801ab1c <SIM0_step+0x9a4>)
 801a96c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a970:	f101 0118 	add.w	r1, r1, #24
 801a974:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 801a978:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a980:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801a984:	f101 0108 	add.w	r1, r1, #8
 801a988:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a98c:	f7e5 fe26 	bl	80005dc <__aeabi_dmul>
 801a990:	4602      	mov	r2, r0
 801a992:	460b      	mov	r3, r1
 801a994:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a998:	f101 0118 	add.w	r1, r1, #24
 801a99c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 801a9a0:	4b5c      	ldr	r3, [pc, #368]	; (801ab14 <SIM0_step+0x99c>)
 801a9a2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801a9a6:	3318      	adds	r3, #24
 801a9a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a9ac:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801a9b0:	f103 0318 	add.w	r3, r3, #24
 801a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b8:	f7e5 fe10 	bl	80005dc <__aeabi_dmul>
 801a9bc:	4602      	mov	r2, r0
 801a9be:	460b      	mov	r3, r1
 801a9c0:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801a9c4:	f101 0118 	add.w	r1, r1, #24
 801a9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9cc:	f7e5 fe06 	bl	80005dc <__aeabi_dmul>
 801a9d0:	4602      	mov	r2, r0
 801a9d2:	460b      	mov	r3, r1
 801a9d4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a9d8:	f101 0118 	add.w	r1, r1, #24
 801a9dc:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 801a9e0:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 801a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801a9ec:	f101 0110 	add.w	r1, r1, #16
 801a9f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801a9fa:	f102 0208 	add.w	r2, r2, #8
 801a9fe:	6013      	str	r3, [r2, #0]
 801aa00:	e026      	b.n	801aa50 <SIM0_step+0x8d8>
    rtb_y += rtb_Memory15[iU + 1];
 801aa02:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aa06:	f103 0308 	add.w	r3, r3, #8
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 801aa12:	00db      	lsls	r3, r3, #3
 801aa14:	4413      	add	r3, r2
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aa1e:	f101 0110 	add.w	r1, r1, #16
 801aa22:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa26:	f7e5 fc23 	bl	8000270 <__adddf3>
 801aa2a:	4602      	mov	r2, r0
 801aa2c:	460b      	mov	r3, r1
 801aa2e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801aa32:	f101 0110 	add.w	r1, r1, #16
 801aa36:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 801aa3a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aa3e:	f103 0308 	add.w	r3, r3, #8
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	3301      	adds	r3, #1
 801aa46:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801aa4a:	f102 0208 	add.w	r2, r2, #8
 801aa4e:	6013      	str	r3, [r2, #0]
 801aa50:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aa54:	f103 0308 	add.w	r3, r3, #8
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2b7c      	cmp	r3, #124	; 0x7c
 801aa5c:	ddd1      	ble.n	801aa02 <SIM0_step+0x88a>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 801aa5e:	4b2d      	ldr	r3, [pc, #180]	; (801ab14 <SIM0_step+0x99c>)
 801aa60:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa64:	3308      	adds	r3, #8
 801aa66:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa6a:	f04f 0200 	mov.w	r2, #0
 801aa6e:	f04f 0300 	mov.w	r3, #0
 801aa72:	f7e6 f81b 	bl	8000aac <__aeabi_dcmpeq>
 801aa76:	4603      	mov	r3, r0
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d151      	bne.n	801ab20 <SIM0_step+0x9a8>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 801aa7c:	4b25      	ldr	r3, [pc, #148]	; (801ab14 <SIM0_step+0x99c>)
 801aa7e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aa82:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa86:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801aa8a:	f103 0310 	add.w	r3, r3, #16
 801aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa92:	f7e5 fbeb 	bl	800026c <__aeabi_dsub>
 801aa96:	4602      	mov	r2, r0
 801aa98:	460b      	mov	r3, r1
 801aa9a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aa9e:	f101 0110 	add.w	r1, r1, #16
 801aaa2:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 801aaa6:	f04f 0200 	mov.w	r2, #0
 801aaaa:	f04f 0300 	mov.w	r3, #0
 801aaae:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aab2:	f101 0110 	add.w	r1, r1, #16
 801aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaba:	f7e6 f801 	bl	8000ac0 <__aeabi_dcmplt>
 801aabe:	4603      	mov	r3, r0
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d009      	beq.n	801aad8 <SIM0_step+0x960>
      rtb_Current = 0.0;
 801aac4:	f04f 0200 	mov.w	r2, #0
 801aac8:	f04f 0300 	mov.w	r3, #0
 801aacc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aad0:	f101 0110 	add.w	r1, r1, #16
 801aad4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 801aad8:	4b0e      	ldr	r3, [pc, #56]	; (801ab14 <SIM0_step+0x99c>)
 801aada:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aade:	3310      	adds	r3, #16
 801aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aae8:	f101 0110 	add.w	r1, r1, #16
 801aaec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaf0:	f7e6 f804 	bl	8000afc <__aeabi_dcmpgt>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d01c      	beq.n	801ab34 <SIM0_step+0x9bc>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 801aafa:	4b06      	ldr	r3, [pc, #24]	; (801ab14 <SIM0_step+0x99c>)
 801aafc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ab00:	3310      	adds	r3, #16
 801ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab06:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab0a:	f101 0110 	add.w	r1, r1, #16
 801ab0e:	e9c1 2300 	strd	r2, r3, [r1]
 801ab12:	e00f      	b.n	801ab34 <SIM0_step+0x9bc>
 801ab14:	2001c288 	.word	0x2001c288
 801ab18:	2001dae8 	.word	0x2001dae8
 801ab1c:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 801ab20:	f04f 0200 	mov.w	r2, #0
 801ab24:	f04f 0300 	mov.w	r3, #0
 801ab28:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab2c:	f101 0110 	add.w	r1, r1, #16
 801ab30:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 801ab34:	f04f 0200 	mov.w	r2, #0
 801ab38:	f04f 0300 	mov.w	r3, #0
 801ab3c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab40:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 801ab44:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ab48:	f103 030c 	add.w	r3, r3, #12
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	2b01      	cmp	r3, #1
 801ab50:	d109      	bne.n	801ab66 <SIM0_step+0x9ee>
    rtb_Exp = -1.0;
 801ab52:	f04f 0200 	mov.w	r2, #0
 801ab56:	4bc0      	ldr	r3, [pc, #768]	; (801ae58 <SIM0_step+0xce0>)
 801ab58:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ab5c:	f101 0108 	add.w	r1, r1, #8
 801ab60:	e9c1 2300 	strd	r2, r3, [r1]
 801ab64:	e1d3      	b.n	801af0e <SIM0_step+0xd96>
  } else if (i == 2) {
 801ab66:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ab6a:	f103 030c 	add.w	r3, r3, #12
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	2b02      	cmp	r3, #2
 801ab72:	f040 8099 	bne.w	801aca8 <SIM0_step+0xb30>
    if (rtb_Memory22 != 0.0) {
 801ab76:	f04f 0200 	mov.w	r2, #0
 801ab7a:	f04f 0300 	mov.w	r3, #0
 801ab7e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801ab82:	f101 0108 	add.w	r1, r1, #8
 801ab86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab8a:	f7e5 ff8f 	bl	8000aac <__aeabi_dcmpeq>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d17f      	bne.n	801ac94 <SIM0_step+0xb1c>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 801ab94:	f04f 0200 	mov.w	r2, #0
 801ab98:	f04f 0300 	mov.w	r3, #0
 801ab9c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aba4:	f7e5 ff82 	bl	8000aac <__aeabi_dcmpeq>
 801aba8:	4603      	mov	r3, r0
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d00e      	beq.n	801abcc <SIM0_step+0xa54>
 801abae:	f04f 0200 	mov.w	r2, #0
 801abb2:	f04f 0300 	mov.w	r3, #0
 801abb6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801abba:	f101 0108 	add.w	r1, r1, #8
 801abbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abc2:	f7e5 ff73 	bl	8000aac <__aeabi_dcmpeq>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d141      	bne.n	801ac50 <SIM0_step+0xad8>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801abcc:	4ba3      	ldr	r3, [pc, #652]	; (801ae5c <SIM0_step+0xce4>)
 801abce:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801abd2:	3318      	adds	r3, #24
 801abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801abdc:	f101 0110 	add.w	r1, r1, #16
 801abe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abe4:	f7e5 fb42 	bl	800026c <__aeabi_dsub>
 801abe8:	4602      	mov	r2, r0
 801abea:	460b      	mov	r3, r1
 801abec:	4610      	mov	r0, r2
 801abee:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801abf0:	4b9a      	ldr	r3, [pc, #616]	; (801ae5c <SIM0_step+0xce4>)
 801abf2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801abf6:	3318      	adds	r3, #24
 801abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 801abfc:	f7e5 fb38 	bl	8000270 <__adddf3>
 801ac00:	4602      	mov	r2, r0
 801ac02:	460b      	mov	r3, r1
 801ac04:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac08:	f101 0108 	add.w	r1, r1, #8
 801ac0c:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 801ac10:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801ac14:	f103 0304 	add.w	r3, r3, #4
 801ac18:	6818      	ldr	r0, [r3, #0]
 801ac1a:	f7e5 fc75 	bl	8000508 <__aeabi_i2d>
 801ac1e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ac22:	f103 0310 	add.w	r3, r3, #16
 801ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2a:	f7e5 fcd7 	bl	80005dc <__aeabi_dmul>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	460b      	mov	r3, r1
 801ac32:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 801ac36:	f101 0118 	add.w	r1, r1, #24
 801ac3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac3e:	f7e5 fccd 	bl	80005dc <__aeabi_dmul>
 801ac42:	4602      	mov	r2, r0
 801ac44:	460b      	mov	r3, r1
 801ac46:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac4a:	e9c1 2300 	strd	r2, r3, [r1]
 801ac4e:	e15e      	b.n	801af0e <SIM0_step+0xd96>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801ac50:	4b82      	ldr	r3, [pc, #520]	; (801ae5c <SIM0_step+0xce4>)
 801ac52:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac56:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 801ac5a:	4b80      	ldr	r3, [pc, #512]	; (801ae5c <SIM0_step+0xce4>)
 801ac5c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac60:	3318      	adds	r3, #24
 801ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801ac66:	f7e5 fb01 	bl	800026c <__aeabi_dsub>
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	460b      	mov	r3, r1
 801ac6e:	4610      	mov	r0, r2
 801ac70:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 801ac72:	4b7a      	ldr	r3, [pc, #488]	; (801ae5c <SIM0_step+0xce4>)
 801ac74:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ac78:	3318      	adds	r3, #24
 801ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 801ac7e:	f7e5 faf7 	bl	8000270 <__adddf3>
 801ac82:	4602      	mov	r2, r0
 801ac84:	460b      	mov	r3, r1
 801ac86:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac8a:	f101 0108 	add.w	r1, r1, #8
 801ac8e:	e9c1 2300 	strd	r2, r3, [r1]
 801ac92:	e13c      	b.n	801af0e <SIM0_step+0xd96>
      }
    } else {
      rtb_Exp = -1.0;
 801ac94:	f04f 0200 	mov.w	r2, #0
 801ac98:	4b6f      	ldr	r3, [pc, #444]	; (801ae58 <SIM0_step+0xce0>)
 801ac9a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ac9e:	f101 0108 	add.w	r1, r1, #8
 801aca2:	e9c1 2300 	strd	r2, r3, [r1]
 801aca6:	e132      	b.n	801af0e <SIM0_step+0xd96>
    }
  } else if (rtb_Memory22 != 0.0) {
 801aca8:	f04f 0200 	mov.w	r2, #0
 801acac:	f04f 0300 	mov.w	r3, #0
 801acb0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801acb4:	f101 0108 	add.w	r1, r1, #8
 801acb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acbc:	f7e5 fef6 	bl	8000aac <__aeabi_dcmpeq>
 801acc0:	4603      	mov	r3, r0
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	f040 811a 	bne.w	801aefc <SIM0_step+0xd84>
    if (rtb_Product1_n != 0.0) {
 801acc8:	f04f 0200 	mov.w	r2, #0
 801accc:	f04f 0300 	mov.w	r3, #0
 801acd0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801acd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acd8:	f7e5 fee8 	bl	8000aac <__aeabi_dcmpeq>
 801acdc:	4603      	mov	r3, r0
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d152      	bne.n	801ad88 <SIM0_step+0xc10>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801ace2:	4b5e      	ldr	r3, [pc, #376]	; (801ae5c <SIM0_step+0xce4>)
 801ace4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ace8:	3318      	adds	r3, #24
 801acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acee:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801acf2:	f101 0110 	add.w	r1, r1, #16
 801acf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acfa:	f7e5 fab7 	bl	800026c <__aeabi_dsub>
 801acfe:	4602      	mov	r2, r0
 801ad00:	460b      	mov	r3, r1
 801ad02:	4610      	mov	r0, r2
 801ad04:	4619      	mov	r1, r3
 801ad06:	a352      	add	r3, pc, #328	; (adr r3, 801ae50 <SIM0_step+0xcd8>)
 801ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad0c:	f7e5 fc66 	bl	80005dc <__aeabi_dmul>
 801ad10:	4602      	mov	r2, r0
 801ad12:	460b      	mov	r3, r1
 801ad14:	4610      	mov	r0, r2
 801ad16:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801ad18:	4b50      	ldr	r3, [pc, #320]	; (801ae5c <SIM0_step+0xce4>)
 801ad1a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ad1e:	3318      	adds	r3, #24
 801ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 801ad24:	f7e5 faa4 	bl	8000270 <__adddf3>
 801ad28:	4602      	mov	r2, r0
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad30:	f101 0108 	add.w	r1, r1, #8
 801ad34:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 801ad38:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ad3c:	f103 0308 	add.w	r3, r3, #8
 801ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad44:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ad48:	f101 0110 	add.w	r1, r1, #16
 801ad4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad50:	f7e5 fa8c 	bl	800026c <__aeabi_dsub>
 801ad54:	4602      	mov	r2, r0
 801ad56:	460b      	mov	r3, r1
 801ad58:	4610      	mov	r0, r2
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	f04f 0200 	mov.w	r2, #0
 801ad60:	4b3f      	ldr	r3, [pc, #252]	; (801ae60 <SIM0_step+0xce8>)
 801ad62:	f7e5 fd65 	bl	8000830 <__aeabi_ddiv>
 801ad66:	4602      	mov	r2, r0
 801ad68:	460b      	mov	r3, r1
 801ad6a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ad6e:	f101 0118 	add.w	r1, r1, #24
 801ad72:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad76:	f7e5 fa79 	bl	800026c <__aeabi_dsub>
 801ad7a:	4602      	mov	r2, r0
 801ad7c:	460b      	mov	r3, r1
 801ad7e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad82:	e9c1 2300 	strd	r2, r3, [r1]
 801ad86:	e0c2      	b.n	801af0e <SIM0_step+0xd96>
    } else if (rtb_Exp != 0.0) {
 801ad88:	f04f 0200 	mov.w	r2, #0
 801ad8c:	f04f 0300 	mov.w	r3, #0
 801ad90:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ad94:	f101 0108 	add.w	r1, r1, #8
 801ad98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad9c:	f7e5 fe86 	bl	8000aac <__aeabi_dcmpeq>
 801ada0:	4603      	mov	r3, r0
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d162      	bne.n	801ae6c <SIM0_step+0xcf4>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801ada6:	4b2d      	ldr	r3, [pc, #180]	; (801ae5c <SIM0_step+0xce4>)
 801ada8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801adac:	3318      	adds	r3, #24
 801adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adb2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801adb6:	f101 0110 	add.w	r1, r1, #16
 801adba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801adbe:	f7e5 fa55 	bl	800026c <__aeabi_dsub>
 801adc2:	4602      	mov	r2, r0
 801adc4:	460b      	mov	r3, r1
 801adc6:	4610      	mov	r0, r2
 801adc8:	4619      	mov	r1, r3
 801adca:	f04f 0200 	mov.w	r2, #0
 801adce:	4b25      	ldr	r3, [pc, #148]	; (801ae64 <SIM0_step+0xcec>)
 801add0:	f7e5 fd2e 	bl	8000830 <__aeabi_ddiv>
 801add4:	4602      	mov	r2, r0
 801add6:	460b      	mov	r3, r1
 801add8:	4610      	mov	r0, r2
 801adda:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801addc:	4b1f      	ldr	r3, [pc, #124]	; (801ae5c <SIM0_step+0xce4>)
 801adde:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ade2:	3318      	adds	r3, #24
 801ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 801ade8:	f7e5 fa42 	bl	8000270 <__adddf3>
 801adec:	4602      	mov	r2, r0
 801adee:	460b      	mov	r3, r1
 801adf0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801adf4:	f101 0108 	add.w	r1, r1, #8
 801adf8:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 801adfc:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801ae00:	f103 0308 	add.w	r3, r3, #8
 801ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae08:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ae0c:	f101 0110 	add.w	r1, r1, #16
 801ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae14:	f7e5 fa2a 	bl	800026c <__aeabi_dsub>
 801ae18:	4602      	mov	r2, r0
 801ae1a:	460b      	mov	r3, r1
 801ae1c:	4610      	mov	r0, r2
 801ae1e:	4619      	mov	r1, r3
 801ae20:	f04f 0200 	mov.w	r2, #0
 801ae24:	4b10      	ldr	r3, [pc, #64]	; (801ae68 <SIM0_step+0xcf0>)
 801ae26:	f7e5 fd03 	bl	8000830 <__aeabi_ddiv>
 801ae2a:	4602      	mov	r2, r0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801ae32:	f101 0118 	add.w	r1, r1, #24
 801ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae3a:	f7e5 fa17 	bl	800026c <__aeabi_dsub>
 801ae3e:	4602      	mov	r2, r0
 801ae40:	460b      	mov	r3, r1
 801ae42:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801ae46:	e9c1 2300 	strd	r2, r3, [r1]
 801ae4a:	e060      	b.n	801af0e <SIM0_step+0xd96>
 801ae4c:	f3af 8000 	nop.w
 801ae50:	9999999a 	.word	0x9999999a
 801ae54:	3fe99999 	.word	0x3fe99999
 801ae58:	bff00000 	.word	0xbff00000
 801ae5c:	2001c288 	.word	0x2001c288
 801ae60:	3fe00000 	.word	0x3fe00000
 801ae64:	40490000 	.word	0x40490000
 801ae68:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801ae6c:	4bad      	ldr	r3, [pc, #692]	; (801b124 <SIM0_step+0xfac>)
 801ae6e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801ae72:	3318      	adds	r3, #24
 801ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae78:	f04f 0000 	mov.w	r0, #0
 801ae7c:	f04f 0100 	mov.w	r1, #0
 801ae80:	f7e5 f9f4 	bl	800026c <__aeabi_dsub>
 801ae84:	4602      	mov	r2, r0
 801ae86:	460b      	mov	r3, r1
 801ae88:	4610      	mov	r0, r2
 801ae8a:	4619      	mov	r1, r3
 801ae8c:	f04f 0200 	mov.w	r2, #0
 801ae90:	4ba5      	ldr	r3, [pc, #660]	; (801b128 <SIM0_step+0xfb0>)
 801ae92:	f7e5 fccd 	bl	8000830 <__aeabi_ddiv>
 801ae96:	4602      	mov	r2, r0
 801ae98:	460b      	mov	r3, r1
 801ae9a:	4610      	mov	r0, r2
 801ae9c:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 801ae9e:	4ba1      	ldr	r3, [pc, #644]	; (801b124 <SIM0_step+0xfac>)
 801aea0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801aea4:	3318      	adds	r3, #24
 801aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 801aeaa:	f7e5 f9e1 	bl	8000270 <__adddf3>
 801aeae:	4602      	mov	r2, r0
 801aeb0:	460b      	mov	r3, r1
 801aeb2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aeb6:	f101 0108 	add.w	r1, r1, #8
 801aeba:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 801aebe:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801aec2:	f103 0308 	add.w	r3, r3, #8
 801aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeca:	f04f 0000 	mov.w	r0, #0
 801aece:	f04f 0100 	mov.w	r1, #0
 801aed2:	f7e5 f9cb 	bl	800026c <__aeabi_dsub>
 801aed6:	4602      	mov	r2, r0
 801aed8:	460b      	mov	r3, r1
 801aeda:	4690      	mov	r8, r2
 801aedc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 801aee0:	f04f 0200 	mov.w	r2, #0
 801aee4:	4b91      	ldr	r3, [pc, #580]	; (801b12c <SIM0_step+0xfb4>)
 801aee6:	4640      	mov	r0, r8
 801aee8:	4649      	mov	r1, r9
 801aeea:	f7e5 fca1 	bl	8000830 <__aeabi_ddiv>
 801aeee:	4602      	mov	r2, r0
 801aef0:	460b      	mov	r3, r1
 801aef2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801aef6:	e9c1 2300 	strd	r2, r3, [r1]
 801aefa:	e008      	b.n	801af0e <SIM0_step+0xd96>
    }
  } else {
    rtb_Exp = -1.0;
 801aefc:	f04f 0200 	mov.w	r2, #0
 801af00:	4b8b      	ldr	r3, [pc, #556]	; (801b130 <SIM0_step+0xfb8>)
 801af02:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 801af06:	f101 0108 	add.w	r1, r1, #8
 801af0a:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 801af0e:	4989      	ldr	r1, [pc, #548]	; (801b134 <SIM0_step+0xfbc>)
 801af10:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801af14:	f103 0308 	add.w	r3, r3, #8
 801af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 801af20:	4984      	ldr	r1, [pc, #528]	; (801b134 <SIM0_step+0xfbc>)
 801af22:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 801af2e:	4981      	ldr	r1, [pc, #516]	; (801b134 <SIM0_step+0xfbc>)
 801af30:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801af34:	f103 0310 	add.w	r3, r3, #16
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 801af40:	497c      	ldr	r1, [pc, #496]	; (801b134 <SIM0_step+0xfbc>)
 801af42:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af46:	f103 0308 	add.w	r3, r3, #8
 801af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 801af52:	4978      	ldr	r1, [pc, #480]	; (801b134 <SIM0_step+0xfbc>)
 801af54:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 801af60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801af64:	4974      	ldr	r1, [pc, #464]	; (801b138 <SIM0_step+0xfc0>)
 801af66:	4875      	ldr	r0, [pc, #468]	; (801b13c <SIM0_step+0xfc4>)
 801af68:	f013 fcd4 	bl	802e914 <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 801af6c:	4b74      	ldr	r3, [pc, #464]	; (801b140 <SIM0_step+0xfc8>)
 801af6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af72:	4970      	ldr	r1, [pc, #448]	; (801b134 <SIM0_step+0xfbc>)
 801af74:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 801af78:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 801af7c:	4b69      	ldr	r3, [pc, #420]	; (801b124 <SIM0_step+0xfac>)
 801af7e:	f603 0108 	addw	r1, r3, #2056	; 0x808
 801af82:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 801af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af8a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 801af8e:	4b65      	ldr	r3, [pc, #404]	; (801b124 <SIM0_step+0xfac>)
 801af90:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 801af94:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801af98:	f103 0318 	add.w	r3, r3, #24
 801af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 801afa4:	4b5f      	ldr	r3, [pc, #380]	; (801b124 <SIM0_step+0xfac>)
 801afa6:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801afaa:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 801afae:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801afb2:	f103 0318 	add.w	r3, r3, #24
 801afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afba:	f7e5 f959 	bl	8000270 <__adddf3>
 801afbe:	4602      	mov	r2, r0
 801afc0:	460b      	mov	r3, r1
 801afc2:	4614      	mov	r4, r2
 801afc4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801afc8:	4b56      	ldr	r3, [pc, #344]	; (801b124 <SIM0_step+0xfac>)
 801afca:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801afce:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 801afd2:	2300      	movs	r3, #0
 801afd4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801afd8:	f102 020c 	add.w	r2, r2, #12
 801afdc:	6013      	str	r3, [r2, #0]
 801afde:	e109      	b.n	801b1f4 <SIM0_step+0x107c>
    rtb_Memory22 = rtb_Memory21[i];
 801afe0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 801afe4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801afe8:	f103 030c 	add.w	r3, r3, #12
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	00db      	lsls	r3, r3, #3
 801aff0:	4413      	add	r3, r2
 801aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801affa:	f101 0108 	add.w	r1, r1, #8
 801affe:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Rpz[i];
 801b002:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 801b006:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b00a:	f103 030c 	add.w	r3, r3, #12
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	00db      	lsls	r3, r3, #3
 801b012:	4413      	add	r3, r2
 801b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b018:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801b01c:	f101 0118 	add.w	r1, r1, #24
 801b020:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Memory19[i];
 801b024:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 801b028:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b02c:	f103 030c 	add.w	r3, r3, #12
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	00db      	lsls	r3, r3, #3
 801b034:	4413      	add	r3, r2
 801b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801b03e:	f101 0118 	add.w	r1, r1, #24
 801b042:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 801b046:	4a37      	ldr	r2, [pc, #220]	; (801b124 <SIM0_step+0xfac>)
 801b048:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b04c:	f103 030c 	add.w	r3, r3, #12
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	3305      	adds	r3, #5
 801b054:	00db      	lsls	r3, r3, #3
 801b056:	18d1      	adds	r1, r2, r3
 801b058:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b05c:	f103 0318 	add.w	r3, r3, #24
 801b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b064:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 801b068:	f107 0318 	add.w	r3, r7, #24
 801b06c:	3b10      	subs	r3, #16
 801b06e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801b072:	f102 020c 	add.w	r2, r2, #12
 801b076:	6812      	ldr	r2, [r2, #0]
 801b078:	00d2      	lsls	r2, r2, #3
 801b07a:	4413      	add	r3, r2
 801b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b080:	4828      	ldr	r0, [pc, #160]	; (801b124 <SIM0_step+0xfac>)
 801b082:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801b086:	f101 010c 	add.w	r1, r1, #12
 801b08a:	6809      	ldr	r1, [r1, #0]
 801b08c:	3183      	adds	r1, #131	; 0x83
 801b08e:	00c9      	lsls	r1, r1, #3
 801b090:	4401      	add	r1, r0
 801b092:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 801b096:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801b09a:	f103 0308 	add.w	r3, r3, #8
 801b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801b0a6:	f101 0118 	add.w	r1, r1, #24
 801b0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0ae:	f7e5 fd25 	bl	8000afc <__aeabi_dcmpgt>
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d012      	beq.n	801b0de <SIM0_step+0xf66>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 801b0b8:	4a1a      	ldr	r2, [pc, #104]	; (801b124 <SIM0_step+0xfac>)
 801b0ba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b0be:	f103 030c 	add.w	r3, r3, #12
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f203 1303 	addw	r3, r3, #259	; 0x103
 801b0c8:	00db      	lsls	r3, r3, #3
 801b0ca:	18d1      	adds	r1, r2, r3
 801b0cc:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801b0d0:	f103 0308 	add.w	r3, r3, #8
 801b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d8:	e9c1 2300 	strd	r2, r3, [r1]
 801b0dc:	e044      	b.n	801b168 <SIM0_step+0xff0>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 801b0de:	4b18      	ldr	r3, [pc, #96]	; (801b140 <SIM0_step+0xfc8>)
 801b0e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 801b0ec:	f101 0118 	add.w	r1, r1, #24
 801b0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0f4:	f7e5 fce4 	bl	8000ac0 <__aeabi_dcmplt>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d022      	beq.n	801b144 <SIM0_step+0xfcc>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 801b0fe:	4b10      	ldr	r3, [pc, #64]	; (801b140 <SIM0_step+0xfc8>)
 801b100:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b108:	4806      	ldr	r0, [pc, #24]	; (801b124 <SIM0_step+0xfac>)
 801b10a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801b10e:	f101 010c 	add.w	r1, r1, #12
 801b112:	6809      	ldr	r1, [r1, #0]
 801b114:	f201 1103 	addw	r1, r1, #259	; 0x103
 801b118:	00c9      	lsls	r1, r1, #3
 801b11a:	4401      	add	r1, r0
 801b11c:	e9c1 2300 	strd	r2, r3, [r1]
 801b120:	e022      	b.n	801b168 <SIM0_step+0xff0>
 801b122:	bf00      	nop
 801b124:	2001c288 	.word	0x2001c288
 801b128:	40140000 	.word	0x40140000
 801b12c:	40240000 	.word	0x40240000
 801b130:	bff00000 	.word	0xbff00000
 801b134:	2001dae8 	.word	0x2001dae8
 801b138:	20000c38 	.word	0x20000c38
 801b13c:	2001e6f8 	.word	0x2001e6f8
 801b140:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 801b144:	4a94      	ldr	r2, [pc, #592]	; (801b398 <SIM0_step+0x1220>)
 801b146:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b14a:	f103 030c 	add.w	r3, r3, #12
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	f203 1303 	addw	r3, r3, #259	; 0x103
 801b154:	00db      	lsls	r3, r3, #3
 801b156:	18d1      	adds	r1, r2, r3
 801b158:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801b15c:	f103 0318 	add.w	r3, r3, #24
 801b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b164:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 801b168:	4a8b      	ldr	r2, [pc, #556]	; (801b398 <SIM0_step+0x1220>)
 801b16a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b16e:	f103 030c 	add.w	r3, r3, #12
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	f203 1381 	addw	r3, r3, #385	; 0x181
 801b178:	00db      	lsls	r3, r3, #3
 801b17a:	18d1      	adds	r1, r2, r3
 801b17c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 801b180:	f103 0308 	add.w	r3, r3, #8
 801b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b188:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 801b18c:	4a83      	ldr	r2, [pc, #524]	; (801b39c <SIM0_step+0x1224>)
 801b18e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b192:	f103 030c 	add.w	r3, r3, #12
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	330d      	adds	r3, #13
 801b19a:	00db      	lsls	r3, r3, #3
 801b19c:	4413      	add	r3, r2
 801b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a2:	487d      	ldr	r0, [pc, #500]	; (801b398 <SIM0_step+0x1220>)
 801b1a4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 801b1a8:	f101 010c 	add.w	r1, r1, #12
 801b1ac:	6809      	ldr	r1, [r1, #0]
 801b1ae:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801b1b2:	00c9      	lsls	r1, r1, #3
 801b1b4:	4401      	add	r1, r0
 801b1b6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 801b1ba:	4a77      	ldr	r2, [pc, #476]	; (801b398 <SIM0_step+0x1220>)
 801b1bc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b1c0:	f103 030c 	add.w	r3, r3, #12
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b1ca:	00db      	lsls	r3, r3, #3
 801b1cc:	18d1      	adds	r1, r2, r3
 801b1ce:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b1d2:	f103 0318 	add.w	r3, r3, #24
 801b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1da:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 801b1de:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b1e2:	f103 030c 	add.w	r3, r3, #12
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	3301      	adds	r3, #1
 801b1ea:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 801b1ee:	f102 020c 	add.w	r2, r2, #12
 801b1f2:	6013      	str	r3, [r2, #0]
 801b1f4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 801b1f8:	f103 030c 	add.w	r3, r3, #12
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	2b7d      	cmp	r3, #125	; 0x7d
 801b200:	f77f aeee 	ble.w	801afe0 <SIM0_step+0xe68>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 801b204:	4b65      	ldr	r3, [pc, #404]	; (801b39c <SIM0_step+0x1224>)
 801b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b20a:	4963      	ldr	r1, [pc, #396]	; (801b398 <SIM0_step+0x1220>)
 801b20c:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801b210:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 801b214:	4b61      	ldr	r3, [pc, #388]	; (801b39c <SIM0_step+0x1224>)
 801b216:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801b21a:	4b5f      	ldr	r3, [pc, #380]	; (801b398 <SIM0_step+0x1220>)
 801b21c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b220:	3308      	adds	r3, #8
 801b222:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 801b226:	4b5c      	ldr	r3, [pc, #368]	; (801b398 <SIM0_step+0x1220>)
 801b228:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b22c:	3318      	adds	r3, #24
 801b22e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b232:	f102 0217 	add.w	r2, r2, #23
 801b236:	7812      	ldrb	r2, [r2, #0]
 801b238:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 801b23a:	4b58      	ldr	r3, [pc, #352]	; (801b39c <SIM0_step+0x1224>)
 801b23c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b240:	4b55      	ldr	r3, [pc, #340]	; (801b398 <SIM0_step+0x1220>)
 801b242:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b246:	3310      	adds	r3, #16
 801b248:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 801b24c:	4b53      	ldr	r3, [pc, #332]	; (801b39c <SIM0_step+0x1224>)
 801b24e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801b252:	4b51      	ldr	r3, [pc, #324]	; (801b398 <SIM0_step+0x1220>)
 801b254:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b258:	3318      	adds	r3, #24
 801b25a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 801b25e:	4b4e      	ldr	r3, [pc, #312]	; (801b398 <SIM0_step+0x1220>)
 801b260:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b264:	3319      	adds	r3, #25
 801b266:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 801b26a:	f102 0215 	add.w	r2, r2, #21
 801b26e:	7812      	ldrb	r2, [r2, #0]
 801b270:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 801b272:	4b4a      	ldr	r3, [pc, #296]	; (801b39c <SIM0_step+0x1224>)
 801b274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b278:	4947      	ldr	r1, [pc, #284]	; (801b398 <SIM0_step+0x1220>)
 801b27a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b27e:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 801b282:	4b45      	ldr	r3, [pc, #276]	; (801b398 <SIM0_step+0x1220>)
 801b284:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b288:	3308      	adds	r3, #8
 801b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28e:	4942      	ldr	r1, [pc, #264]	; (801b398 <SIM0_step+0x1220>)
 801b290:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 801b294:	4b40      	ldr	r3, [pc, #256]	; (801b398 <SIM0_step+0x1220>)
 801b296:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b29a:	493f      	ldr	r1, [pc, #252]	; (801b398 <SIM0_step+0x1220>)
 801b29c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 801b2a0:	4b3d      	ldr	r3, [pc, #244]	; (801b398 <SIM0_step+0x1220>)
 801b2a2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b2a6:	3310      	adds	r3, #16
 801b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ac:	493a      	ldr	r1, [pc, #232]	; (801b398 <SIM0_step+0x1220>)
 801b2ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 801b2b2:	4b39      	ldr	r3, [pc, #228]	; (801b398 <SIM0_step+0x1220>)
 801b2b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b2b8:	4937      	ldr	r1, [pc, #220]	; (801b398 <SIM0_step+0x1220>)
 801b2ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 801b2be:	4b36      	ldr	r3, [pc, #216]	; (801b398 <SIM0_step+0x1220>)
 801b2c0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c8:	4933      	ldr	r1, [pc, #204]	; (801b398 <SIM0_step+0x1220>)
 801b2ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 801b2ce:	4b33      	ldr	r3, [pc, #204]	; (801b39c <SIM0_step+0x1224>)
 801b2d0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 801b2d4:	4b30      	ldr	r3, [pc, #192]	; (801b398 <SIM0_step+0x1220>)
 801b2d6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b2da:	3308      	adds	r3, #8
 801b2dc:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 801b2e0:	4b2e      	ldr	r3, [pc, #184]	; (801b39c <SIM0_step+0x1224>)
 801b2e2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 801b2e6:	4b2c      	ldr	r3, [pc, #176]	; (801b398 <SIM0_step+0x1220>)
 801b2e8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b2ec:	3310      	adds	r3, #16
 801b2ee:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 801b2f2:	4b2a      	ldr	r3, [pc, #168]	; (801b39c <SIM0_step+0x1224>)
 801b2f4:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801b2f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b2fc:	4b26      	ldr	r3, [pc, #152]	; (801b398 <SIM0_step+0x1220>)
 801b2fe:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b302:	3318      	adds	r3, #24
 801b304:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 801b308:	4b24      	ldr	r3, [pc, #144]	; (801b39c <SIM0_step+0x1224>)
 801b30a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801b30e:	4922      	ldr	r1, [pc, #136]	; (801b398 <SIM0_step+0x1220>)
 801b310:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b314:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 801b318:	4b20      	ldr	r3, [pc, #128]	; (801b39c <SIM0_step+0x1224>)
 801b31a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 801b31e:	4b1e      	ldr	r3, [pc, #120]	; (801b398 <SIM0_step+0x1220>)
 801b320:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b324:	3308      	adds	r3, #8
 801b326:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 801b32a:	4b1c      	ldr	r3, [pc, #112]	; (801b39c <SIM0_step+0x1224>)
 801b32c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b330:	4b19      	ldr	r3, [pc, #100]	; (801b398 <SIM0_step+0x1220>)
 801b332:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b336:	3310      	adds	r3, #16
 801b338:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 801b33c:	4b16      	ldr	r3, [pc, #88]	; (801b398 <SIM0_step+0x1220>)
 801b33e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b342:	3318      	adds	r3, #24
 801b344:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 801b348:	f102 0208 	add.w	r2, r2, #8
 801b34c:	e9d2 0100 	ldrd	r0, r1, [r2]
 801b350:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 801b354:	4b11      	ldr	r3, [pc, #68]	; (801b39c <SIM0_step+0x1224>)
 801b356:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 801b35a:	490f      	ldr	r1, [pc, #60]	; (801b398 <SIM0_step+0x1220>)
 801b35c:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b360:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 801b364:	4b0d      	ldr	r3, [pc, #52]	; (801b39c <SIM0_step+0x1224>)
 801b366:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801b36a:	4b0b      	ldr	r3, [pc, #44]	; (801b398 <SIM0_step+0x1220>)
 801b36c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b370:	3308      	adds	r3, #8
 801b372:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 801b376:	4b09      	ldr	r3, [pc, #36]	; (801b39c <SIM0_step+0x1224>)
 801b378:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801b37c:	4b06      	ldr	r3, [pc, #24]	; (801b398 <SIM0_step+0x1220>)
 801b37e:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b382:	3310      	adds	r3, #16
 801b384:	e9c3 0100 	strd	r0, r1, [r3]
}
 801b388:	bf00      	nop
 801b38a:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 801b38e:	371c      	adds	r7, #28
 801b390:	46bd      	mov	sp, r7
 801b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b396:	bf00      	nop
 801b398:	2001c288 	.word	0x2001c288
 801b39c:	2001e8e0 	.word	0x2001e8e0

0801b3a0 <SIM0_initialize>:

void SIM0_initialize(void)
{
 801b3a0:	b480      	push	{r7}
 801b3a2:	b083      	sub	sp, #12
 801b3a4:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 801b3a6:	4b10      	ldr	r3, [pc, #64]	; (801b3e8 <SIM0_initialize+0x48>)
 801b3a8:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 801b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b0:	490e      	ldr	r1, [pc, #56]	; (801b3ec <SIM0_initialize+0x4c>)
 801b3b2:	f601 0108 	addw	r1, r1, #2056	; 0x808
 801b3b6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 801b3ba:	4b0b      	ldr	r3, [pc, #44]	; (801b3e8 <SIM0_initialize+0x48>)
 801b3bc:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 801b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c4:	4909      	ldr	r1, [pc, #36]	; (801b3ec <SIM0_initialize+0x4c>)
 801b3c6:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 801b3ca:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 801b3ce:	4b06      	ldr	r3, [pc, #24]	; (801b3e8 <SIM0_initialize+0x48>)
 801b3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d8:	4904      	ldr	r1, [pc, #16]	; (801b3ec <SIM0_initialize+0x4c>)
 801b3da:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 801b3de:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	607b      	str	r3, [r7, #4]
 801b3e6:	e05b      	b.n	801b4a0 <SIM0_initialize+0x100>
 801b3e8:	20000360 	.word	0x20000360
 801b3ec:	2001c288 	.word	0x2001c288
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 801b3f0:	4ba4      	ldr	r3, [pc, #656]	; (801b684 <SIM0_initialize+0x2e4>)
 801b3f2:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 801b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3fa:	48a3      	ldr	r0, [pc, #652]	; (801b688 <SIM0_initialize+0x2e8>)
 801b3fc:	6879      	ldr	r1, [r7, #4]
 801b3fe:	3105      	adds	r1, #5
 801b400:	00c9      	lsls	r1, r1, #3
 801b402:	4401      	add	r1, r0
 801b404:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 801b408:	4a9e      	ldr	r2, [pc, #632]	; (801b684 <SIM0_initialize+0x2e4>)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801b410:	00db      	lsls	r3, r3, #3
 801b412:	4413      	add	r3, r2
 801b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b418:	489b      	ldr	r0, [pc, #620]	; (801b688 <SIM0_initialize+0x2e8>)
 801b41a:	6879      	ldr	r1, [r7, #4]
 801b41c:	3183      	adds	r1, #131	; 0x83
 801b41e:	00c9      	lsls	r1, r1, #3
 801b420:	4401      	add	r1, r0
 801b422:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 801b426:	4a97      	ldr	r2, [pc, #604]	; (801b684 <SIM0_initialize+0x2e4>)
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	339d      	adds	r3, #157	; 0x9d
 801b42c:	00db      	lsls	r3, r3, #3
 801b42e:	4413      	add	r3, r2
 801b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b434:	4894      	ldr	r0, [pc, #592]	; (801b688 <SIM0_initialize+0x2e8>)
 801b436:	6879      	ldr	r1, [r7, #4]
 801b438:	f201 1103 	addw	r1, r1, #259	; 0x103
 801b43c:	00c9      	lsls	r1, r1, #3
 801b43e:	4401      	add	r1, r0
 801b440:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 801b444:	4a8f      	ldr	r2, [pc, #572]	; (801b684 <SIM0_initialize+0x2e4>)
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	331f      	adds	r3, #31
 801b44a:	00db      	lsls	r3, r3, #3
 801b44c:	4413      	add	r3, r2
 801b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b452:	488d      	ldr	r0, [pc, #564]	; (801b688 <SIM0_initialize+0x2e8>)
 801b454:	6879      	ldr	r1, [r7, #4]
 801b456:	f201 1181 	addw	r1, r1, #385	; 0x181
 801b45a:	00c9      	lsls	r1, r1, #3
 801b45c:	4401      	add	r1, r0
 801b45e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 801b462:	4b88      	ldr	r3, [pc, #544]	; (801b684 <SIM0_initialize+0x2e4>)
 801b464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b468:	3308      	adds	r3, #8
 801b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46e:	4886      	ldr	r0, [pc, #536]	; (801b688 <SIM0_initialize+0x2e8>)
 801b470:	6879      	ldr	r1, [r7, #4]
 801b472:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801b476:	00c9      	lsls	r1, r1, #3
 801b478:	4401      	add	r1, r0
 801b47a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 801b47e:	4b81      	ldr	r3, [pc, #516]	; (801b684 <SIM0_initialize+0x2e4>)
 801b480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b484:	3310      	adds	r3, #16
 801b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b48a:	487f      	ldr	r0, [pc, #508]	; (801b688 <SIM0_initialize+0x2e8>)
 801b48c:	6879      	ldr	r1, [r7, #4]
 801b48e:	f201 217e 	addw	r1, r1, #638	; 0x27e
 801b492:	00c9      	lsls	r1, r1, #3
 801b494:	4401      	add	r1, r0
 801b496:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	3301      	adds	r3, #1
 801b49e:	607b      	str	r3, [r7, #4]
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	2b7d      	cmp	r3, #125	; 0x7d
 801b4a4:	dda4      	ble.n	801b3f0 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 801b4a6:	4b77      	ldr	r3, [pc, #476]	; (801b684 <SIM0_initialize+0x2e4>)
 801b4a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b4ac:	3308      	adds	r3, #8
 801b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b2:	4975      	ldr	r1, [pc, #468]	; (801b688 <SIM0_initialize+0x2e8>)
 801b4b4:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 801b4b8:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 801b4bc:	4b71      	ldr	r3, [pc, #452]	; (801b684 <SIM0_initialize+0x2e4>)
 801b4be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b4c2:	3310      	adds	r3, #16
 801b4c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4c8:	4b6f      	ldr	r3, [pc, #444]	; (801b688 <SIM0_initialize+0x2e8>)
 801b4ca:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b4ce:	3308      	adds	r3, #8
 801b4d0:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 801b4d4:	4b6b      	ldr	r3, [pc, #428]	; (801b684 <SIM0_initialize+0x2e4>)
 801b4d6:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 801b4da:	4b6b      	ldr	r3, [pc, #428]	; (801b688 <SIM0_initialize+0x2e8>)
 801b4dc:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b4e0:	3318      	adds	r3, #24
 801b4e2:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 801b4e4:	4b67      	ldr	r3, [pc, #412]	; (801b684 <SIM0_initialize+0x2e4>)
 801b4e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 801b4ea:	3318      	adds	r3, #24
 801b4ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4f0:	4b65      	ldr	r3, [pc, #404]	; (801b688 <SIM0_initialize+0x2e8>)
 801b4f2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b4f6:	3310      	adds	r3, #16
 801b4f8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 801b4fc:	4b61      	ldr	r3, [pc, #388]	; (801b684 <SIM0_initialize+0x2e4>)
 801b4fe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b502:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b506:	4b60      	ldr	r3, [pc, #384]	; (801b688 <SIM0_initialize+0x2e8>)
 801b508:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 801b50c:	3318      	adds	r3, #24
 801b50e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 801b512:	4b5c      	ldr	r3, [pc, #368]	; (801b684 <SIM0_initialize+0x2e4>)
 801b514:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 801b518:	4b5b      	ldr	r3, [pc, #364]	; (801b688 <SIM0_initialize+0x2e8>)
 801b51a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b51e:	3319      	adds	r3, #25
 801b520:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 801b522:	4b58      	ldr	r3, [pc, #352]	; (801b684 <SIM0_initialize+0x2e4>)
 801b524:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b528:	3308      	adds	r3, #8
 801b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b52e:	4956      	ldr	r1, [pc, #344]	; (801b688 <SIM0_initialize+0x2e8>)
 801b530:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 801b534:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 801b538:	4b52      	ldr	r3, [pc, #328]	; (801b684 <SIM0_initialize+0x2e4>)
 801b53a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b53e:	3310      	adds	r3, #16
 801b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b544:	4950      	ldr	r1, [pc, #320]	; (801b688 <SIM0_initialize+0x2e8>)
 801b546:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 801b54a:	4b4e      	ldr	r3, [pc, #312]	; (801b684 <SIM0_initialize+0x2e4>)
 801b54c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b550:	3318      	adds	r3, #24
 801b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b556:	494c      	ldr	r1, [pc, #304]	; (801b688 <SIM0_initialize+0x2e8>)
 801b558:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 801b55c:	4b49      	ldr	r3, [pc, #292]	; (801b684 <SIM0_initialize+0x2e4>)
 801b55e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b566:	4948      	ldr	r1, [pc, #288]	; (801b688 <SIM0_initialize+0x2e8>)
 801b568:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 801b56c:	4b45      	ldr	r3, [pc, #276]	; (801b684 <SIM0_initialize+0x2e4>)
 801b56e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801b572:	3318      	adds	r3, #24
 801b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b578:	4943      	ldr	r1, [pc, #268]	; (801b688 <SIM0_initialize+0x2e8>)
 801b57a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 801b57e:	4b41      	ldr	r3, [pc, #260]	; (801b684 <SIM0_initialize+0x2e4>)
 801b580:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b588:	493f      	ldr	r1, [pc, #252]	; (801b688 <SIM0_initialize+0x2e8>)
 801b58a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 801b58e:	4b3d      	ldr	r3, [pc, #244]	; (801b684 <SIM0_initialize+0x2e4>)
 801b590:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b594:	3308      	adds	r3, #8
 801b596:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b59a:	4b3b      	ldr	r3, [pc, #236]	; (801b688 <SIM0_initialize+0x2e8>)
 801b59c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b5a0:	3308      	adds	r3, #8
 801b5a2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 801b5a6:	4b37      	ldr	r3, [pc, #220]	; (801b684 <SIM0_initialize+0x2e4>)
 801b5a8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b5ac:	3310      	adds	r3, #16
 801b5ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5b2:	4b35      	ldr	r3, [pc, #212]	; (801b688 <SIM0_initialize+0x2e8>)
 801b5b4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b5b8:	3310      	adds	r3, #16
 801b5ba:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 801b5be:	4b31      	ldr	r3, [pc, #196]	; (801b684 <SIM0_initialize+0x2e4>)
 801b5c0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801b5c4:	3318      	adds	r3, #24
 801b5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5ca:	4b2f      	ldr	r3, [pc, #188]	; (801b688 <SIM0_initialize+0x2e8>)
 801b5cc:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 801b5d0:	3318      	adds	r3, #24
 801b5d2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 801b5d6:	4b2b      	ldr	r3, [pc, #172]	; (801b684 <SIM0_initialize+0x2e4>)
 801b5d8:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e0:	4929      	ldr	r1, [pc, #164]	; (801b688 <SIM0_initialize+0x2e8>)
 801b5e2:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 801b5e6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 801b5ea:	4b26      	ldr	r3, [pc, #152]	; (801b684 <SIM0_initialize+0x2e4>)
 801b5ec:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b5f0:	3308      	adds	r3, #8
 801b5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5f6:	4b24      	ldr	r3, [pc, #144]	; (801b688 <SIM0_initialize+0x2e8>)
 801b5f8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b5fc:	3308      	adds	r3, #8
 801b5fe:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 801b602:	4b20      	ldr	r3, [pc, #128]	; (801b684 <SIM0_initialize+0x2e4>)
 801b604:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b608:	3310      	adds	r3, #16
 801b60a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b60e:	4b1e      	ldr	r3, [pc, #120]	; (801b688 <SIM0_initialize+0x2e8>)
 801b610:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b614:	3310      	adds	r3, #16
 801b616:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 801b61a:	4b1a      	ldr	r3, [pc, #104]	; (801b684 <SIM0_initialize+0x2e4>)
 801b61c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 801b620:	3318      	adds	r3, #24
 801b622:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b626:	4b18      	ldr	r3, [pc, #96]	; (801b688 <SIM0_initialize+0x2e8>)
 801b628:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 801b62c:	3318      	adds	r3, #24
 801b62e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 801b632:	4b14      	ldr	r3, [pc, #80]	; (801b684 <SIM0_initialize+0x2e4>)
 801b634:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	4912      	ldr	r1, [pc, #72]	; (801b688 <SIM0_initialize+0x2e8>)
 801b63e:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 801b642:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 801b646:	4b0f      	ldr	r3, [pc, #60]	; (801b684 <SIM0_initialize+0x2e4>)
 801b648:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b64c:	3308      	adds	r3, #8
 801b64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b652:	4b0d      	ldr	r3, [pc, #52]	; (801b688 <SIM0_initialize+0x2e8>)
 801b654:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b658:	3308      	adds	r3, #8
 801b65a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 801b65e:	4b09      	ldr	r3, [pc, #36]	; (801b684 <SIM0_initialize+0x2e4>)
 801b660:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 801b664:	3310      	adds	r3, #16
 801b666:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b66a:	4b07      	ldr	r3, [pc, #28]	; (801b688 <SIM0_initialize+0x2e8>)
 801b66c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801b670:	3310      	adds	r3, #16
 801b672:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 801b676:	bf00      	nop
 801b678:	370c      	adds	r7, #12
 801b67a:	46bd      	mov	sp, r7
 801b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b680:	4770      	bx	lr
 801b682:	bf00      	nop
 801b684:	20000360 	.word	0x20000360
 801b688:	2001c288 	.word	0x2001c288

0801b68c <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 801b68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b690:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 801b694:	af00      	add	r7, sp, #0
 801b696:	f107 0414 	add.w	r4, r7, #20
 801b69a:	6020      	str	r0, [r4, #0]
 801b69c:	f107 0010 	add.w	r0, r7, #16
 801b6a0:	6001      	str	r1, [r0, #0]
 801b6a2:	f107 0108 	add.w	r1, r7, #8
 801b6a6:	ed81 0b00 	vstr	d0, [r1]
 801b6aa:	1d39      	adds	r1, r7, #4
 801b6ac:	600a      	str	r2, [r1, #0]
 801b6ae:	463a      	mov	r2, r7
 801b6b0:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 801b6b2:	1d3b      	adds	r3, r7, #4
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b6ba:	f107 0314 	add.w	r3, r7, #20
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c4:	f7e4 ff8a 	bl	80005dc <__aeabi_dmul>
 801b6c8:	4602      	mov	r2, r0
 801b6ca:	460b      	mov	r3, r1
 801b6cc:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b6d0:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 801b6d4:	f107 0314 	add.w	r3, r7, #20
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b6de:	1d3b      	adds	r3, r7, #4
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	3308      	adds	r3, #8
 801b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e8:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b6ec:	3408      	adds	r4, #8
 801b6ee:	f7e4 ff75 	bl	80005dc <__aeabi_dmul>
 801b6f2:	4602      	mov	r2, r0
 801b6f4:	460b      	mov	r3, r1
 801b6f6:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 801b6fa:	f107 0314 	add.w	r3, r7, #20
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b704:	1d3b      	adds	r3, r7, #4
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	3310      	adds	r3, #16
 801b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b70e:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 801b712:	3410      	adds	r4, #16
 801b714:	f7e4 ff62 	bl	80005dc <__aeabi_dmul>
 801b718:	4602      	mov	r2, r0
 801b71a:	460b      	mov	r3, r1
 801b71c:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 801b720:	2300      	movs	r3, #0
 801b722:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b726:	2300      	movs	r3, #0
 801b728:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b72c:	e079      	b.n	801b822 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 801b72e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b732:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b736:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b73a:	00db      	lsls	r3, r3, #3
 801b73c:	463a      	mov	r2, r7
 801b73e:	6812      	ldr	r2, [r2, #0]
 801b740:	4413      	add	r3, r2
 801b742:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b746:	f107 0314 	add.w	r3, r7, #20
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	3308      	adds	r3, #8
 801b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b752:	f7e4 ff43 	bl	80005dc <__aeabi_dmul>
 801b756:	4602      	mov	r2, r0
 801b758:	460b      	mov	r3, r1
 801b75a:	4620      	mov	r0, r4
 801b75c:	4629      	mov	r1, r5
 801b75e:	f7e4 fd87 	bl	8000270 <__adddf3>
 801b762:	4602      	mov	r2, r0
 801b764:	460b      	mov	r3, r1
 801b766:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b76a:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 801b76e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b772:	3308      	adds	r3, #8
 801b774:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b778:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b77c:	3301      	adds	r3, #1
 801b77e:	00db      	lsls	r3, r3, #3
 801b780:	463a      	mov	r2, r7
 801b782:	6812      	ldr	r2, [r2, #0]
 801b784:	4413      	add	r3, r2
 801b786:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b78a:	f107 0314 	add.w	r3, r7, #20
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	3308      	adds	r3, #8
 801b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b796:	f7e4 ff21 	bl	80005dc <__aeabi_dmul>
 801b79a:	4602      	mov	r2, r0
 801b79c:	460b      	mov	r3, r1
 801b79e:	4610      	mov	r0, r2
 801b7a0:	4619      	mov	r1, r3
 801b7a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b7a6:	f103 0608 	add.w	r6, r3, #8
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	460b      	mov	r3, r1
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	4629      	mov	r1, r5
 801b7b2:	f7e4 fd5d 	bl	8000270 <__adddf3>
 801b7b6:	4602      	mov	r2, r0
 801b7b8:	460b      	mov	r3, r1
 801b7ba:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 801b7be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b7c2:	3310      	adds	r3, #16
 801b7c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801b7c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b7cc:	3302      	adds	r3, #2
 801b7ce:	00db      	lsls	r3, r3, #3
 801b7d0:	463a      	mov	r2, r7
 801b7d2:	6812      	ldr	r2, [r2, #0]
 801b7d4:	4413      	add	r3, r2
 801b7d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b7da:	f107 0314 	add.w	r3, r7, #20
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	3308      	adds	r3, #8
 801b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e6:	f7e4 fef9 	bl	80005dc <__aeabi_dmul>
 801b7ea:	4602      	mov	r2, r0
 801b7ec:	460b      	mov	r3, r1
 801b7ee:	4610      	mov	r0, r2
 801b7f0:	4619      	mov	r1, r3
 801b7f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b7f6:	f103 0610 	add.w	r6, r3, #16
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	460b      	mov	r3, r1
 801b7fe:	4620      	mov	r0, r4
 801b800:	4629      	mov	r1, r5
 801b802:	f7e4 fd35 	bl	8000270 <__adddf3>
 801b806:	4602      	mov	r2, r0
 801b808:	460b      	mov	r3, r1
 801b80a:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 801b80e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b812:	3303      	adds	r3, #3
 801b814:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b818:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b81c:	3301      	adds	r3, #1
 801b81e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b822:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b826:	2b05      	cmp	r3, #5
 801b828:	dd81      	ble.n	801b72e <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 801b82a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b832:	f107 0108 	add.w	r1, r7, #8
 801b836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b83a:	f7e4 fecf 	bl	80005dc <__aeabi_dmul>
 801b83e:	4602      	mov	r2, r0
 801b840:	460b      	mov	r3, r1
 801b842:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 801b846:	1d3b      	adds	r3, r7, #4
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b84e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b852:	f7e4 fd0b 	bl	800026c <__aeabi_dsub>
 801b856:	4602      	mov	r2, r0
 801b858:	460b      	mov	r3, r1
 801b85a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 801b85e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 801b862:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b866:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 801b86a:	1d3b      	adds	r3, r7, #4
 801b86c:	6819      	ldr	r1, [r3, #0]
 801b86e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801b872:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 801b876:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b87a:	3308      	adds	r3, #8
 801b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b880:	f107 0108 	add.w	r1, r7, #8
 801b884:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b888:	f7e4 fea8 	bl	80005dc <__aeabi_dmul>
 801b88c:	4602      	mov	r2, r0
 801b88e:	460b      	mov	r3, r1
 801b890:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 801b894:	1d3b      	adds	r3, r7, #4
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	3308      	adds	r3, #8
 801b89a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b89e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b8a2:	f7e4 fce3 	bl	800026c <__aeabi_dsub>
 801b8a6:	4602      	mov	r2, r0
 801b8a8:	460b      	mov	r3, r1
 801b8aa:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 801b8ae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b8b2:	f103 0108 	add.w	r1, r3, #8
 801b8b6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b8ba:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 801b8be:	1d3b      	adds	r3, r7, #4
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	f103 0108 	add.w	r1, r3, #8
 801b8c6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801b8ca:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 801b8ce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b8d2:	3310      	adds	r3, #16
 801b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d8:	f107 0108 	add.w	r1, r7, #8
 801b8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8e0:	f7e4 fe7c 	bl	80005dc <__aeabi_dmul>
 801b8e4:	4602      	mov	r2, r0
 801b8e6:	460b      	mov	r3, r1
 801b8e8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 801b8ec:	1d3b      	adds	r3, r7, #4
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	3310      	adds	r3, #16
 801b8f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b8f6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b8fa:	f7e4 fcb7 	bl	800026c <__aeabi_dsub>
 801b8fe:	4602      	mov	r2, r0
 801b900:	460b      	mov	r3, r1
 801b902:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 801b906:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b90a:	f103 0110 	add.w	r1, r3, #16
 801b90e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b912:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 801b916:	1d3b      	adds	r3, r7, #4
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	f103 0110 	add.w	r1, r3, #16
 801b91e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801b922:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 801b926:	2300      	movs	r3, #0
 801b928:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b92c:	2300      	movs	r3, #0
 801b92e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b932:	e054      	b.n	801b9de <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 801b934:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b938:	00db      	lsls	r3, r3, #3
 801b93a:	463a      	mov	r2, r7
 801b93c:	6812      	ldr	r2, [r2, #0]
 801b93e:	4413      	add	r3, r2
 801b940:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b944:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b94c:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b950:	00e4      	lsls	r4, r4, #3
 801b952:	463d      	mov	r5, r7
 801b954:	682d      	ldr	r5, [r5, #0]
 801b956:	442c      	add	r4, r5
 801b958:	f7e4 fc88 	bl	800026c <__aeabi_dsub>
 801b95c:	4602      	mov	r2, r0
 801b95e:	460b      	mov	r3, r1
 801b960:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 801b964:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b968:	3301      	adds	r3, #1
 801b96a:	00db      	lsls	r3, r3, #3
 801b96c:	463a      	mov	r2, r7
 801b96e:	6812      	ldr	r2, [r2, #0]
 801b970:	4413      	add	r3, r2
 801b972:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b976:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801b97a:	3308      	adds	r3, #8
 801b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b980:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801b984:	3401      	adds	r4, #1
 801b986:	00e4      	lsls	r4, r4, #3
 801b988:	463d      	mov	r5, r7
 801b98a:	682d      	ldr	r5, [r5, #0]
 801b98c:	442c      	add	r4, r5
 801b98e:	f7e4 fc6d 	bl	800026c <__aeabi_dsub>
 801b992:	4602      	mov	r2, r0
 801b994:	460b      	mov	r3, r1
 801b996:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 801b99a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b99e:	3302      	adds	r3, #2
 801b9a0:	00db      	lsls	r3, r3, #3
 801b9a2:	463a      	mov	r2, r7
 801b9a4:	6812      	ldr	r2, [r2, #0]
 801b9a6:	4413      	add	r3, r2
 801b9a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b9ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9b0:	3302      	adds	r3, #2
 801b9b2:	00db      	lsls	r3, r3, #3
 801b9b4:	463a      	mov	r2, r7
 801b9b6:	6812      	ldr	r2, [r2, #0]
 801b9b8:	18d4      	adds	r4, r2, r3
 801b9ba:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801b9be:	f7e4 fc55 	bl	800026c <__aeabi_dsub>
 801b9c2:	4602      	mov	r2, r0
 801b9c4:	460b      	mov	r3, r1
 801b9c6:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801b9ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801b9ce:	3303      	adds	r3, #3
 801b9d0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801b9d4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b9d8:	3301      	adds	r3, #1
 801b9da:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801b9de:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801b9e2:	2b05      	cmp	r3, #5
 801b9e4:	dda6      	ble.n	801b934 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 801b9e6:	f107 0308 	add.w	r3, r7, #8
 801b9ea:	ed93 0b00 	vldr	d0, [r3]
 801b9ee:	f004 fbed 	bl	80201cc <rtIsNaN>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d006      	beq.n	801ba06 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 801b9f8:	f107 0308 	add.w	r3, r7, #8
 801b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba00:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801ba04:	e029      	b.n	801ba5a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 801ba06:	f107 0108 	add.w	r1, r7, #8
 801ba0a:	f04f 0200 	mov.w	r2, #0
 801ba0e:	f04f 0300 	mov.w	r3, #0
 801ba12:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba16:	f7e5 f853 	bl	8000ac0 <__aeabi_dcmplt>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d005      	beq.n	801ba2c <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 801ba20:	f04f 0200 	mov.w	r2, #0
 801ba24:	4bce      	ldr	r3, [pc, #824]	; (801bd60 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801ba26:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 801ba2a:	e016      	b.n	801ba5a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 801ba2c:	f107 0108 	add.w	r1, r7, #8
 801ba30:	f04f 0200 	mov.w	r2, #0
 801ba34:	f04f 0300 	mov.w	r3, #0
 801ba38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba3c:	f7e5 f85e 	bl	8000afc <__aeabi_dcmpgt>
 801ba40:	4603      	mov	r3, r0
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d003      	beq.n	801ba4e <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 801ba46:	f04f 0200 	mov.w	r2, #0
 801ba4a:	4bc6      	ldr	r3, [pc, #792]	; (801bd64 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801ba4c:	e003      	b.n	801ba56 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 801ba4e:	f04f 0200 	mov.w	r2, #0
 801ba52:	f04f 0300 	mov.w	r3, #0
 801ba56:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 801ba5a:	f107 0310 	add.w	r3, r7, #16
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba64:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801ba68:	f7e4 fdb8 	bl	80005dc <__aeabi_dmul>
 801ba6c:	4602      	mov	r2, r0
 801ba6e:	460b      	mov	r3, r1
 801ba70:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 801ba74:	f107 0310 	add.w	r3, r7, #16
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	3308      	adds	r3, #8
 801ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba80:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 801ba84:	f7e4 fdaa 	bl	80005dc <__aeabi_dmul>
 801ba88:	4602      	mov	r2, r0
 801ba8a:	460b      	mov	r3, r1
 801ba8c:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 801ba90:	f107 0408 	add.w	r4, r7, #8
 801ba94:	f107 0108 	add.w	r1, r7, #8
 801ba98:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801ba9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801baa0:	f7e4 fd9c 	bl	80005dc <__aeabi_dmul>
 801baa4:	4602      	mov	r2, r0
 801baa6:	460b      	mov	r3, r1
 801baa8:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 801baac:	f107 0308 	add.w	r3, r7, #8
 801bab0:	ed93 0b00 	vldr	d0, [r3]
 801bab4:	f013 f8f4 	bl	802eca0 <sqrt>
 801bab8:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 801babc:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 801bac0:	f013 f8ee 	bl	802eca0 <sqrt>
 801bac4:	eeb0 7a40 	vmov.f32	s14, s0
 801bac8:	eef0 7a60 	vmov.f32	s15, s1
 801bacc:	f107 0318 	add.w	r3, r7, #24
 801bad0:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 801bad4:	2300      	movs	r3, #0
 801bad6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801bada:	2300      	movs	r3, #0
 801badc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bae0:	e03c      	b.n	801bb5c <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 801bae2:	2300      	movs	r3, #0
 801bae4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801bae8:	2300      	movs	r3, #0
 801baea:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801baee:	e027      	b.n	801bb40 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 801baf0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801baf4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801baf8:	4413      	add	r3, r2
 801bafa:	00db      	lsls	r3, r3, #3
 801bafc:	463a      	mov	r2, r7
 801bafe:	6812      	ldr	r2, [r2, #0]
 801bb00:	4413      	add	r3, r2
 801bb02:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb06:	f107 0318 	add.w	r3, r7, #24
 801bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb0e:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801bb12:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801bb16:	442c      	add	r4, r5
 801bb18:	f7e4 fd60 	bl	80005dc <__aeabi_dmul>
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	460b      	mov	r3, r1
 801bb20:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 801bb24:	00e1      	lsls	r1, r4, #3
 801bb26:	4401      	add	r1, r0
 801bb28:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 801bb2c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801bb30:	3303      	adds	r3, #3
 801bb32:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 801bb36:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801bb3a:	3301      	adds	r3, #1
 801bb3c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801bb40:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801bb44:	2b05      	cmp	r3, #5
 801bb46:	ddd3      	ble.n	801baf0 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 801bb48:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bb4c:	3306      	adds	r3, #6
 801bb4e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 801bb52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bb56:	3301      	adds	r3, #1
 801bb58:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bb5c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bb60:	2b02      	cmp	r3, #2
 801bb62:	ddbe      	ble.n	801bae2 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 801bb64:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 801bb68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801bb6c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bb70:	4618      	mov	r0, r3
 801bb72:	f002 ff43 	bl	801e9fc <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 801bb76:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 801bb7a:	f004 fb27 	bl	80201cc <rtIsNaN>
 801bb7e:	4603      	mov	r3, r0
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d125      	bne.n	801bbd0 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 801bb84:	f04f 0200 	mov.w	r2, #0
 801bb88:	f04f 0300 	mov.w	r3, #0
 801bb8c:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801bb90:	f7e4 ff96 	bl	8000ac0 <__aeabi_dcmplt>
 801bb94:	4603      	mov	r3, r0
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d005      	beq.n	801bba6 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 801bb9a:	f04f 0200 	mov.w	r2, #0
 801bb9e:	4b70      	ldr	r3, [pc, #448]	; (801bd60 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 801bba0:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 801bba4:	e014      	b.n	801bbd0 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801bba6:	f04f 0200 	mov.w	r2, #0
 801bbaa:	f04f 0300 	mov.w	r3, #0
 801bbae:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801bbb2:	f7e4 ffa3 	bl	8000afc <__aeabi_dcmpgt>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d003      	beq.n	801bbc4 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 801bbbc:	f04f 0200 	mov.w	r2, #0
 801bbc0:	4b68      	ldr	r3, [pc, #416]	; (801bd64 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801bbc2:	e003      	b.n	801bbcc <UTMeanCovSqrt_C2vgLQ4W+0x540>
 801bbc4:	f04f 0200 	mov.w	r2, #0
 801bbc8:	f04f 0300 	mov.w	r3, #0
 801bbcc:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 801bbd0:	f04f 0200 	mov.w	r2, #0
 801bbd4:	4b63      	ldr	r3, [pc, #396]	; (801bd64 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 801bbd6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 801bbda:	f7e4 ff67 	bl	8000aac <__aeabi_dcmpeq>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	f000 81bd 	beq.w	801bf60 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bbec:	e011      	b.n	801bc12 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 801bbee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	00db      	lsls	r3, r3, #3
 801bbf6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bbfa:	18d1      	adds	r1, r2, r3
 801bbfc:	f04f 0200 	mov.w	r2, #0
 801bc00:	f04f 0300 	mov.w	r3, #0
 801bc04:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bc08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc0c:	3301      	adds	r3, #1
 801bc0e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bc12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	dde9      	ble.n	801bbee <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 801bc1a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc1e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801bc22:	f04f 0200 	mov.w	r2, #0
 801bc26:	f04f 0300 	mov.w	r3, #0
 801bc2a:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 801bc2e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801bc32:	f04f 0200 	mov.w	r2, #0
 801bc36:	f04f 0300 	mov.w	r3, #0
 801bc3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 801bc3e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bc42:	f04f 0200 	mov.w	r2, #0
 801bc46:	f04f 0300 	mov.w	r3, #0
 801bc4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 801bc4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc52:	ed93 7b00 	vldr	d7, [r3]
 801bc56:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bc5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc5e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bc62:	4618      	mov	r0, r3
 801bc64:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 801bc68:	eeb0 0a47 	vmov.f32	s0, s14
 801bc6c:	eef0 0a67 	vmov.f32	s1, s15
 801bc70:	f004 f814 	bl	801fc9c <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 801bc74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc78:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc7c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bc80:	f7e4 fcac 	bl	80005dc <__aeabi_dmul>
 801bc84:	4602      	mov	r2, r0
 801bc86:	460b      	mov	r3, r1
 801bc88:	4614      	mov	r4, r2
 801bc8a:	461d      	mov	r5, r3
 801bc8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc90:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc94:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bc98:	3318      	adds	r3, #24
 801bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc9e:	f7e4 fc9d 	bl	80005dc <__aeabi_dmul>
 801bca2:	4602      	mov	r2, r0
 801bca4:	460b      	mov	r3, r1
 801bca6:	4620      	mov	r0, r4
 801bca8:	4629      	mov	r1, r5
 801bcaa:	f7e4 fadf 	bl	800026c <__aeabi_dsub>
 801bcae:	4602      	mov	r2, r0
 801bcb0:	460b      	mov	r3, r1
 801bcb2:	f107 0118 	add.w	r1, r7, #24
 801bcb6:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 801bcba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bcbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bcc2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bcc6:	3318      	adds	r3, #24
 801bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bccc:	f7e4 fc86 	bl	80005dc <__aeabi_dmul>
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	460b      	mov	r3, r1
 801bcd4:	4690      	mov	r8, r2
 801bcd6:	4699      	mov	r9, r3
 801bcd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bcdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bce0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bce4:	f7e4 fc7a 	bl	80005dc <__aeabi_dmul>
 801bce8:	4602      	mov	r2, r0
 801bcea:	460b      	mov	r3, r1
 801bcec:	4610      	mov	r0, r2
 801bcee:	4619      	mov	r1, r3
 801bcf0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bcf4:	f103 0418 	add.w	r4, r3, #24
 801bcf8:	4602      	mov	r2, r0
 801bcfa:	460b      	mov	r3, r1
 801bcfc:	4640      	mov	r0, r8
 801bcfe:	4649      	mov	r1, r9
 801bd00:	f7e4 fab6 	bl	8000270 <__adddf3>
 801bd04:	4602      	mov	r2, r0
 801bd06:	460b      	mov	r3, r1
 801bd08:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 801bd0c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bd10:	3320      	adds	r3, #32
 801bd12:	ed93 7b00 	vldr	d7, [r3]
 801bd16:	f107 0318 	add.w	r3, r7, #24
 801bd1a:	ed93 6b00 	vldr	d6, [r3]
 801bd1e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bd22:	f103 0220 	add.w	r2, r3, #32
 801bd26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bd2a:	f103 0108 	add.w	r1, r3, #8
 801bd2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bd32:	3308      	adds	r3, #8
 801bd34:	4618      	mov	r0, r3
 801bd36:	eeb0 1a46 	vmov.f32	s2, s12
 801bd3a:	eef0 1a66 	vmov.f32	s3, s13
 801bd3e:	eeb0 0a47 	vmov.f32	s0, s14
 801bd42:	eef0 0a67 	vmov.f32	s1, s15
 801bd46:	f003 ffa9 	bl	801fc9c <rotate_LZ7ctbe0>
    temp = b_t;
 801bd4a:	f107 0118 	add.w	r1, r7, #24
 801bd4e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801bd52:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bd56:	2300      	movs	r3, #0
 801bd58:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bd5c:	e06f      	b.n	801be3e <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 801bd5e:	bf00      	nop
 801bd60:	bff00000 	.word	0xbff00000
 801bd64:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 801bd68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bd6c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd70:	00db      	lsls	r3, r3, #3
 801bd72:	4413      	add	r3, r2
 801bd74:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bd78:	f107 0318 	add.w	r3, r7, #24
 801bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd80:	f7e4 fc2c 	bl	80005dc <__aeabi_dmul>
 801bd84:	4602      	mov	r2, r0
 801bd86:	460b      	mov	r3, r1
 801bd88:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 801bd8c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bd90:	3306      	adds	r3, #6
 801bd92:	00db      	lsls	r3, r3, #3
 801bd94:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bd98:	4413      	add	r3, r2
 801bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 801bda2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bda6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bdaa:	00db      	lsls	r3, r3, #3
 801bdac:	4413      	add	r3, r2
 801bdae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bdb2:	f107 0318 	add.w	r3, r7, #24
 801bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdba:	f7e4 fc0f 	bl	80005dc <__aeabi_dmul>
 801bdbe:	4602      	mov	r2, r0
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	4614      	mov	r4, r2
 801bdc4:	461d      	mov	r5, r3
 801bdc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bdca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bdce:	00db      	lsls	r3, r3, #3
 801bdd0:	4413      	add	r3, r2
 801bdd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bdd6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801bdda:	f7e4 fbff 	bl	80005dc <__aeabi_dmul>
 801bdde:	4602      	mov	r2, r0
 801bde0:	460b      	mov	r3, r1
 801bde2:	4620      	mov	r0, r4
 801bde4:	4629      	mov	r1, r5
 801bde6:	f7e4 fa41 	bl	800026c <__aeabi_dsub>
 801bdea:	4602      	mov	r2, r0
 801bdec:	460b      	mov	r3, r1
 801bdee:	f107 0118 	add.w	r1, r7, #24
 801bdf2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 801bdf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bdfa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bdfe:	00db      	lsls	r3, r3, #3
 801be00:	4413      	add	r3, r2
 801be02:	e9d3 0100 	ldrd	r0, r1, [r3]
 801be06:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801be0a:	f7e4 fbe7 	bl	80005dc <__aeabi_dmul>
 801be0e:	4602      	mov	r2, r0
 801be10:	460b      	mov	r3, r1
 801be12:	4610      	mov	r0, r2
 801be14:	4619      	mov	r1, r3
 801be16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801be1a:	3306      	adds	r3, #6
 801be1c:	00db      	lsls	r3, r3, #3
 801be1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801be22:	18d4      	adds	r4, r2, r3
 801be24:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801be28:	f7e4 fa22 	bl	8000270 <__adddf3>
 801be2c:	4602      	mov	r2, r0
 801be2e:	460b      	mov	r3, r1
 801be30:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801be34:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801be38:	3301      	adds	r3, #1
 801be3a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801be3e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801be42:	2b01      	cmp	r3, #1
 801be44:	dd90      	ble.n	801bd68 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 801be46:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be4a:	3340      	adds	r3, #64	; 0x40
 801be4c:	ed93 7b00 	vldr	d7, [r3]
 801be50:	f107 0318 	add.w	r3, r7, #24
 801be54:	ed93 6b00 	vldr	d6, [r3]
 801be58:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801be5c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801be60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801be64:	f103 0110 	add.w	r1, r3, #16
 801be68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801be6c:	3310      	adds	r3, #16
 801be6e:	4618      	mov	r0, r3
 801be70:	eeb0 1a46 	vmov.f32	s2, s12
 801be74:	eef0 1a66 	vmov.f32	s3, s13
 801be78:	eeb0 0a47 	vmov.f32	s0, s14
 801be7c:	eef0 0a67 	vmov.f32	s1, s15
 801be80:	f003 ff0c 	bl	801fc9c <rotate_LZ7ctbe0>
    kk = 0;
 801be84:	2300      	movs	r3, #0
 801be86:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801be8a:	2300      	movs	r3, #0
 801be8c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801be90:	e03d      	b.n	801bf0e <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 801be92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801be96:	00db      	lsls	r3, r3, #3
 801be98:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801be9c:	4413      	add	r3, r2
 801be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bea6:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801beaa:	00c9      	lsls	r1, r1, #3
 801beac:	4401      	add	r1, r0
 801beae:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801beb2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801beb6:	3303      	adds	r3, #3
 801beb8:	00db      	lsls	r3, r3, #3
 801beba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bebe:	4413      	add	r3, r2
 801bec0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bec4:	1c51      	adds	r1, r2, #1
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bece:	00c9      	lsls	r1, r1, #3
 801bed0:	4401      	add	r1, r0
 801bed2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801bed6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801beda:	3306      	adds	r3, #6
 801bedc:	00db      	lsls	r3, r3, #3
 801bede:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bee2:	4413      	add	r3, r2
 801bee4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801bee8:	1c91      	adds	r1, r2, #2
 801beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801bef2:	00c9      	lsls	r1, r1, #3
 801bef4:	4401      	add	r1, r0
 801bef6:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801befa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801befe:	3303      	adds	r3, #3
 801bf00:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801bf04:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bf08:	3301      	adds	r3, #1
 801bf0a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bf0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bf12:	2b02      	cmp	r3, #2
 801bf14:	ddbd      	ble.n	801be92 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 801bf16:	2300      	movs	r3, #0
 801bf18:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bf1c:	e01a      	b.n	801bf54 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 801bf1e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801bf22:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf26:	00db      	lsls	r3, r3, #3
 801bf28:	4413      	add	r3, r2
 801bf2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf2e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf32:	00db      	lsls	r3, r3, #3
 801bf34:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bf38:	18d4      	adds	r4, r2, r3
 801bf3a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801bf3e:	f7e4 fb4d 	bl	80005dc <__aeabi_dmul>
 801bf42:	4602      	mov	r2, r0
 801bf44:	460b      	mov	r3, r1
 801bf46:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801bf4a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf4e:	3301      	adds	r3, #1
 801bf50:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801bf54:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801bf58:	2b08      	cmp	r3, #8
 801bf5a:	dde0      	ble.n	801bf1e <UTMeanCovSqrt_C2vgLQ4W+0x892>
 801bf5c:	f000 bf6e 	b.w	801ce3c <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 801bf60:	2300      	movs	r3, #0
 801bf62:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bf66:	2300      	movs	r3, #0
 801bf68:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bf6c:	e011      	b.n	801bf92 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 801bf6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bf72:	3301      	adds	r3, #1
 801bf74:	00db      	lsls	r3, r3, #3
 801bf76:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801bf7a:	18d1      	adds	r1, r2, r3
 801bf7c:	f04f 0200 	mov.w	r2, #0
 801bf80:	f04f 0300 	mov.w	r3, #0
 801bf84:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 801bf88:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bf8c:	3301      	adds	r3, #1
 801bf8e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801bf92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801bf96:	2b01      	cmp	r3, #1
 801bf98:	dde9      	ble.n	801bf6e <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 801bf9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bf9e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801bfa2:	f04f 0200 	mov.w	r2, #0
 801bfa6:	f04f 0300 	mov.w	r3, #0
 801bfaa:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 801bfae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bfb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bfb6:	2301      	movs	r3, #1
 801bfb8:	461c      	mov	r4, r3
 801bfba:	f04f 0200 	mov.w	r2, #0
 801bfbe:	f04f 0300 	mov.w	r3, #0
 801bfc2:	f7e4 fd73 	bl	8000aac <__aeabi_dcmpeq>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d101      	bne.n	801bfd0 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 801bfcc:	2300      	movs	r3, #0
 801bfce:	461c      	mov	r4, r3
 801bfd0:	b2e3      	uxtb	r3, r4
 801bfd2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 801bfd6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d114      	bne.n	801c008 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 801bfde:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801bfe2:	3320      	adds	r3, #32
 801bfe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bfe8:	2301      	movs	r3, #1
 801bfea:	461c      	mov	r4, r3
 801bfec:	f04f 0200 	mov.w	r2, #0
 801bff0:	f04f 0300 	mov.w	r3, #0
 801bff4:	f7e4 fd5a 	bl	8000aac <__aeabi_dcmpeq>
 801bff8:	4603      	mov	r3, r0
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d101      	bne.n	801c002 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 801bffe:	2300      	movs	r3, #0
 801c000:	461c      	mov	r4, r3
 801c002:	b2e3      	uxtb	r3, r4
 801c004:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 801c008:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d114      	bne.n	801c03a <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 801c010:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801c014:	3340      	adds	r3, #64	; 0x40
 801c016:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c01a:	2301      	movs	r3, #1
 801c01c:	461c      	mov	r4, r3
 801c01e:	f04f 0200 	mov.w	r2, #0
 801c022:	f04f 0300 	mov.w	r3, #0
 801c026:	f7e4 fd41 	bl	8000aac <__aeabi_dcmpeq>
 801c02a:	4603      	mov	r3, r0
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d101      	bne.n	801c034 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 801c030:	2300      	movs	r3, #0
 801c032:	461c      	mov	r4, r3
 801c034:	b2e3      	uxtb	r3, r4
 801c036:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 801c03a:	2300      	movs	r3, #0
 801c03c:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 801c040:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c044:	2b00      	cmp	r3, #0
 801c046:	d003      	beq.n	801c050 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 801c048:	2301      	movs	r3, #1
 801c04a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801c04e:	e394      	b.n	801c77a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 801c050:	f107 0120 	add.w	r1, r7, #32
 801c054:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c058:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 801c05c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c064:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c068:	f7e4 fbe2 	bl	8000830 <__aeabi_ddiv>
 801c06c:	4602      	mov	r2, r0
 801c06e:	460b      	mov	r3, r1
 801c070:	f107 0120 	add.w	r1, r7, #32
 801c074:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 801c078:	f107 0320 	add.w	r3, r7, #32
 801c07c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c080:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801c084:	3318      	adds	r3, #24
 801c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c08a:	f7e4 faa7 	bl	80005dc <__aeabi_dmul>
 801c08e:	4602      	mov	r2, r0
 801c090:	460b      	mov	r3, r1
 801c092:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c096:	f7e4 f8e9 	bl	800026c <__aeabi_dsub>
 801c09a:	4602      	mov	r2, r0
 801c09c:	460b      	mov	r3, r1
 801c09e:	4610      	mov	r0, r2
 801c0a0:	4619      	mov	r1, r3
 801c0a2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801c0a6:	3320      	adds	r3, #32
 801c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ac:	f7e4 fbc0 	bl	8000830 <__aeabi_ddiv>
 801c0b0:	4602      	mov	r2, r0
 801c0b2:	460b      	mov	r3, r1
 801c0b4:	f107 0120 	add.w	r1, r7, #32
 801c0b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 801c0bc:	f107 0118 	add.w	r1, r7, #24
 801c0c0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c0c4:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c0ce:	e027      	b.n	801c120 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 801c0d0:	f107 0318 	add.w	r3, r7, #24
 801c0d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c0d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c0dc:	3306      	adds	r3, #6
 801c0de:	00db      	lsls	r3, r3, #3
 801c0e0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c0e4:	4413      	add	r3, r2
 801c0e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c0ea:	f107 0220 	add.w	r2, r7, #32
 801c0ee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c0f2:	00db      	lsls	r3, r3, #3
 801c0f4:	4413      	add	r3, r2
 801c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0fa:	f7e4 fa6f 	bl	80005dc <__aeabi_dmul>
 801c0fe:	4602      	mov	r2, r0
 801c100:	460b      	mov	r3, r1
 801c102:	4620      	mov	r0, r4
 801c104:	4629      	mov	r1, r5
 801c106:	f7e4 f8b1 	bl	800026c <__aeabi_dsub>
 801c10a:	4602      	mov	r2, r0
 801c10c:	460b      	mov	r3, r1
 801c10e:	f107 0118 	add.w	r1, r7, #24
 801c112:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 801c116:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c11a:	3301      	adds	r3, #1
 801c11c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801c120:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c124:	2b01      	cmp	r3, #1
 801c126:	ddd3      	ble.n	801c0d0 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 801c128:	f107 0318 	add.w	r3, r7, #24
 801c12c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c130:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 801c134:	3340      	adds	r3, #64	; 0x40
 801c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c13a:	f7e4 fb79 	bl	8000830 <__aeabi_ddiv>
 801c13e:	4602      	mov	r2, r0
 801c140:	460b      	mov	r3, r1
 801c142:	f107 0120 	add.w	r1, r7, #32
 801c146:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 801c14a:	f04f 0200 	mov.w	r2, #0
 801c14e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801c152:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 801c156:	f107 0320 	add.w	r3, r7, #32
 801c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15e:	4611      	mov	r1, r2
 801c160:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c168:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 801c16c:	f04f 0200 	mov.w	r2, #0
 801c170:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801c174:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c178:	f7e4 fcc0 	bl	8000afc <__aeabi_dcmpgt>
 801c17c:	4603      	mov	r3, r0
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d00b      	beq.n	801c19a <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 801c182:	f107 0118 	add.w	r1, r7, #24
 801c186:	f04f 0200 	mov.w	r2, #0
 801c18a:	4b85      	ldr	r3, [pc, #532]	; (801c3a0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c18c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c190:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c194:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c198:	e017      	b.n	801c1ca <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 801c19a:	f04f 0200 	mov.w	r2, #0
 801c19e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 801c1a2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c1a6:	f7e4 fb43 	bl	8000830 <__aeabi_ddiv>
 801c1aa:	4602      	mov	r2, r0
 801c1ac:	460b      	mov	r3, r1
 801c1ae:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 801c1b2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c1b6:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c1ba:	f7e4 fa0f 	bl	80005dc <__aeabi_dmul>
 801c1be:	4602      	mov	r2, r0
 801c1c0:	460b      	mov	r3, r1
 801c1c2:	f107 0118 	add.w	r1, r7, #24
 801c1c6:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 801c1ca:	f107 0320 	add.w	r3, r7, #32
 801c1ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c1d2:	4611      	mov	r1, r2
 801c1d4:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c1d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c1dc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801c1e0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c1e4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c1e8:	f7e4 fc88 	bl	8000afc <__aeabi_dcmpgt>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d02d      	beq.n	801c24e <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 801c1f2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c1f6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c1fa:	f7e4 fb19 	bl	8000830 <__aeabi_ddiv>
 801c1fe:	4602      	mov	r2, r0
 801c200:	460b      	mov	r3, r1
 801c202:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801c206:	f107 0318 	add.w	r3, r7, #24
 801c20a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c20e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c212:	f7e4 f9e3 	bl	80005dc <__aeabi_dmul>
 801c216:	4602      	mov	r2, r0
 801c218:	460b      	mov	r3, r1
 801c21a:	4610      	mov	r0, r2
 801c21c:	4619      	mov	r1, r3
 801c21e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c222:	f7e4 f9db 	bl	80005dc <__aeabi_dmul>
 801c226:	4602      	mov	r2, r0
 801c228:	460b      	mov	r3, r1
 801c22a:	4610      	mov	r0, r2
 801c22c:	4619      	mov	r1, r3
 801c22e:	f04f 0200 	mov.w	r2, #0
 801c232:	4b5b      	ldr	r3, [pc, #364]	; (801c3a0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c234:	f7e4 f81c 	bl	8000270 <__adddf3>
 801c238:	4602      	mov	r2, r0
 801c23a:	460b      	mov	r3, r1
 801c23c:	f107 0118 	add.w	r1, r7, #24
 801c240:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c244:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c248:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c24c:	e01f      	b.n	801c28e <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 801c24e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c252:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c256:	f7e4 faeb 	bl	8000830 <__aeabi_ddiv>
 801c25a:	4602      	mov	r2, r0
 801c25c:	460b      	mov	r3, r1
 801c25e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c262:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c266:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c26a:	f7e4 f9b7 	bl	80005dc <__aeabi_dmul>
 801c26e:	4602      	mov	r2, r0
 801c270:	460b      	mov	r3, r1
 801c272:	4610      	mov	r0, r2
 801c274:	4619      	mov	r1, r3
 801c276:	f107 0318 	add.w	r3, r7, #24
 801c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c27e:	f7e3 fff7 	bl	8000270 <__adddf3>
 801c282:	4602      	mov	r2, r0
 801c284:	460b      	mov	r3, r1
 801c286:	f107 0118 	add.w	r1, r7, #24
 801c28a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 801c28e:	f107 0320 	add.w	r3, r7, #32
 801c292:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c296:	4611      	mov	r1, r2
 801c298:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801c29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c2a0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 801c2a4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c2a8:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c2ac:	f7e4 fc26 	bl	8000afc <__aeabi_dcmpgt>
 801c2b0:	4603      	mov	r3, r0
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d02d      	beq.n	801c312 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 801c2b6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c2ba:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 801c2be:	f7e4 fab7 	bl	8000830 <__aeabi_ddiv>
 801c2c2:	4602      	mov	r2, r0
 801c2c4:	460b      	mov	r3, r1
 801c2c6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 801c2ca:	f107 0318 	add.w	r3, r7, #24
 801c2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c2d2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c2d6:	f7e4 f981 	bl	80005dc <__aeabi_dmul>
 801c2da:	4602      	mov	r2, r0
 801c2dc:	460b      	mov	r3, r1
 801c2de:	4610      	mov	r0, r2
 801c2e0:	4619      	mov	r1, r3
 801c2e2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c2e6:	f7e4 f979 	bl	80005dc <__aeabi_dmul>
 801c2ea:	4602      	mov	r2, r0
 801c2ec:	460b      	mov	r3, r1
 801c2ee:	4610      	mov	r0, r2
 801c2f0:	4619      	mov	r1, r3
 801c2f2:	f04f 0200 	mov.w	r2, #0
 801c2f6:	4b2a      	ldr	r3, [pc, #168]	; (801c3a0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c2f8:	f7e3 ffba 	bl	8000270 <__adddf3>
 801c2fc:	4602      	mov	r2, r0
 801c2fe:	460b      	mov	r3, r1
 801c300:	f107 0118 	add.w	r1, r7, #24
 801c304:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 801c308:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c30c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 801c310:	e01f      	b.n	801c352 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 801c312:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c316:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 801c31a:	f7e4 fa89 	bl	8000830 <__aeabi_ddiv>
 801c31e:	4602      	mov	r2, r0
 801c320:	460b      	mov	r3, r1
 801c322:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 801c326:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801c32a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 801c32e:	f7e4 f955 	bl	80005dc <__aeabi_dmul>
 801c332:	4602      	mov	r2, r0
 801c334:	460b      	mov	r3, r1
 801c336:	4610      	mov	r0, r2
 801c338:	4619      	mov	r1, r3
 801c33a:	f107 0318 	add.w	r3, r7, #24
 801c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c342:	f7e3 ff95 	bl	8000270 <__adddf3>
 801c346:	4602      	mov	r2, r0
 801c348:	460b      	mov	r3, r1
 801c34a:	f107 0118 	add.w	r1, r7, #24
 801c34e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 801c352:	f107 0318 	add.w	r3, r7, #24
 801c356:	ed93 7b00 	vldr	d7, [r3]
 801c35a:	eeb0 0a47 	vmov.f32	s0, s14
 801c35e:	eef0 0a67 	vmov.f32	s1, s15
 801c362:	f012 fc9d 	bl	802eca0 <sqrt>
 801c366:	ec51 0b10 	vmov	r0, r1, d0
 801c36a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801c36e:	f7e4 f935 	bl	80005dc <__aeabi_dmul>
 801c372:	4602      	mov	r2, r0
 801c374:	460b      	mov	r3, r1
 801c376:	f107 0118 	add.w	r1, r7, #24
 801c37a:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 801c37e:	f107 0318 	add.w	r3, r7, #24
 801c382:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c386:	f04f 0200 	mov.w	r2, #0
 801c38a:	4b05      	ldr	r3, [pc, #20]	; (801c3a0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 801c38c:	f7e4 fbac 	bl	8000ae8 <__aeabi_dcmpge>
 801c390:	4603      	mov	r3, r0
 801c392:	2b00      	cmp	r3, #0
 801c394:	d006      	beq.n	801c3a4 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 801c396:	2301      	movs	r3, #1
 801c398:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 801c39c:	e1ed      	b.n	801c77a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 801c39e:	bf00      	nop
 801c3a0:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 801c3a4:	f107 0318 	add.w	r3, r7, #24
 801c3a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c3ac:	f107 0318 	add.w	r3, r7, #24
 801c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b4:	f7e4 f912 	bl	80005dc <__aeabi_dmul>
 801c3b8:	4602      	mov	r2, r0
 801c3ba:	460b      	mov	r3, r1
 801c3bc:	f04f 0000 	mov.w	r0, #0
 801c3c0:	49b4      	ldr	r1, [pc, #720]	; (801c694 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 801c3c2:	f7e3 ff53 	bl	800026c <__aeabi_dsub>
 801c3c6:	4602      	mov	r2, r0
 801c3c8:	460b      	mov	r3, r1
 801c3ca:	ec43 2b17 	vmov	d7, r2, r3
 801c3ce:	eeb0 0a47 	vmov.f32	s0, s14
 801c3d2:	eef0 0a67 	vmov.f32	s1, s15
 801c3d6:	f012 fc63 	bl	802eca0 <sqrt>
 801c3da:	eeb0 6a40 	vmov.f32	s12, s0
 801c3de:	eef0 6a60 	vmov.f32	s13, s1
 801c3e2:	f107 0320 	add.w	r3, r7, #32
 801c3e6:	ed93 7b04 	vldr	d7, [r3, #16]
 801c3ea:	f107 0218 	add.w	r2, r7, #24
 801c3ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c3f2:	f103 0110 	add.w	r1, r3, #16
 801c3f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c3fa:	3310      	adds	r3, #16
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	eeb0 1a47 	vmov.f32	s2, s14
 801c402:	eef0 1a67 	vmov.f32	s3, s15
 801c406:	eeb0 0a46 	vmov.f32	s0, s12
 801c40a:	eef0 0a66 	vmov.f32	s1, s13
 801c40e:	f003 fc45 	bl	801fc9c <rotate_LZ7ctbe0>
        x[2] = 0.0;
 801c412:	f107 0120 	add.w	r1, r7, #32
 801c416:	f04f 0200 	mov.w	r2, #0
 801c41a:	f04f 0300 	mov.w	r3, #0
 801c41e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 801c422:	f107 0318 	add.w	r3, r7, #24
 801c426:	ed93 7b00 	vldr	d7, [r3]
 801c42a:	f107 0320 	add.w	r3, r7, #32
 801c42e:	ed93 6b02 	vldr	d6, [r3, #8]
 801c432:	f107 0218 	add.w	r2, r7, #24
 801c436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c43a:	f103 0108 	add.w	r1, r3, #8
 801c43e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c442:	3308      	adds	r3, #8
 801c444:	4618      	mov	r0, r3
 801c446:	eeb0 1a46 	vmov.f32	s2, s12
 801c44a:	eef0 1a66 	vmov.f32	s3, s13
 801c44e:	eeb0 0a47 	vmov.f32	s0, s14
 801c452:	eef0 0a67 	vmov.f32	s1, s15
 801c456:	f003 fc21 	bl	801fc9c <rotate_LZ7ctbe0>
        x[1] = 0.0;
 801c45a:	f107 0120 	add.w	r1, r7, #32
 801c45e:	f04f 0200 	mov.w	r2, #0
 801c462:	f04f 0300 	mov.w	r3, #0
 801c466:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 801c46a:	f107 0318 	add.w	r3, r7, #24
 801c46e:	ed93 7b00 	vldr	d7, [r3]
 801c472:	f107 0320 	add.w	r3, r7, #32
 801c476:	ed93 6b00 	vldr	d6, [r3]
 801c47a:	f107 0218 	add.w	r2, r7, #24
 801c47e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c486:	4618      	mov	r0, r3
 801c488:	eeb0 1a46 	vmov.f32	s2, s12
 801c48c:	eef0 1a66 	vmov.f32	s3, s13
 801c490:	eeb0 0a47 	vmov.f32	s0, s14
 801c494:	eef0 0a67 	vmov.f32	s1, s15
 801c498:	f003 fc00 	bl	801fc9c <rotate_LZ7ctbe0>
        x[0] = 0.0;
 801c49c:	f107 0120 	add.w	r1, r7, #32
 801c4a0:	f04f 0200 	mov.w	r2, #0
 801c4a4:	f04f 0300 	mov.w	r3, #0
 801c4a8:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c4b2:	e072      	b.n	801c59a <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 801c4b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c4b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4bc:	00db      	lsls	r3, r3, #3
 801c4be:	4413      	add	r3, r2
 801c4c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c4c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4c8:	00db      	lsls	r3, r3, #3
 801c4ca:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c4ce:	4413      	add	r3, r2
 801c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d4:	f7e4 f882 	bl	80005dc <__aeabi_dmul>
 801c4d8:	4602      	mov	r2, r0
 801c4da:	460b      	mov	r3, r1
 801c4dc:	f107 0118 	add.w	r1, r7, #24
 801c4e0:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 801c4e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c4e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4ec:	00db      	lsls	r3, r3, #3
 801c4ee:	4413      	add	r3, r2
 801c4f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c4f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c4f8:	00db      	lsls	r3, r3, #3
 801c4fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c4fe:	4413      	add	r3, r2
 801c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c504:	f7e4 f86a 	bl	80005dc <__aeabi_dmul>
 801c508:	4602      	mov	r2, r0
 801c50a:	460b      	mov	r3, r1
 801c50c:	4690      	mov	r8, r2
 801c50e:	4699      	mov	r9, r3
 801c510:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c514:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c518:	00db      	lsls	r3, r3, #3
 801c51a:	4413      	add	r3, r2
 801c51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c520:	f107 0320 	add.w	r3, r7, #32
 801c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c528:	f7e4 f858 	bl	80005dc <__aeabi_dmul>
 801c52c:	4602      	mov	r2, r0
 801c52e:	460b      	mov	r3, r1
 801c530:	4610      	mov	r0, r2
 801c532:	4619      	mov	r1, r3
 801c534:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c538:	00db      	lsls	r3, r3, #3
 801c53a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c53e:	18d4      	adds	r4, r2, r3
 801c540:	4602      	mov	r2, r0
 801c542:	460b      	mov	r3, r1
 801c544:	4640      	mov	r0, r8
 801c546:	4649      	mov	r1, r9
 801c548:	f7e3 fe90 	bl	800026c <__aeabi_dsub>
 801c54c:	4602      	mov	r2, r0
 801c54e:	460b      	mov	r3, r1
 801c550:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 801c554:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c558:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c55c:	00db      	lsls	r3, r3, #3
 801c55e:	4413      	add	r3, r2
 801c560:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c564:	f107 0320 	add.w	r3, r7, #32
 801c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c56c:	f7e4 f836 	bl	80005dc <__aeabi_dmul>
 801c570:	4602      	mov	r2, r0
 801c572:	460b      	mov	r3, r1
 801c574:	4610      	mov	r0, r2
 801c576:	4619      	mov	r1, r3
 801c578:	f107 0318 	add.w	r3, r7, #24
 801c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c580:	f7e3 fe76 	bl	8000270 <__adddf3>
 801c584:	4602      	mov	r2, r0
 801c586:	460b      	mov	r3, r1
 801c588:	f107 0120 	add.w	r1, r7, #32
 801c58c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 801c590:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c594:	3b01      	subs	r3, #1
 801c596:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c59a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	da88      	bge.n	801c4b4 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c5a2:	2301      	movs	r3, #1
 801c5a4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c5a8:	e06c      	b.n	801c684 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 801c5aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5ae:	3303      	adds	r3, #3
 801c5b0:	00db      	lsls	r3, r3, #3
 801c5b2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c5b6:	4413      	add	r3, r2
 801c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5bc:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 801c5c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c5c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5c8:	00db      	lsls	r3, r3, #3
 801c5ca:	4413      	add	r3, r2
 801c5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c5d0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c5d4:	f7e4 f802 	bl	80005dc <__aeabi_dmul>
 801c5d8:	4602      	mov	r2, r0
 801c5da:	460b      	mov	r3, r1
 801c5dc:	4690      	mov	r8, r2
 801c5de:	4699      	mov	r9, r3
 801c5e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c5e4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c5e8:	00db      	lsls	r3, r3, #3
 801c5ea:	4413      	add	r3, r2
 801c5ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c5f0:	f107 0320 	add.w	r3, r7, #32
 801c5f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c5f8:	f7e3 fff0 	bl	80005dc <__aeabi_dmul>
 801c5fc:	4602      	mov	r2, r0
 801c5fe:	460b      	mov	r3, r1
 801c600:	4610      	mov	r0, r2
 801c602:	4619      	mov	r1, r3
 801c604:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c608:	3303      	adds	r3, #3
 801c60a:	00db      	lsls	r3, r3, #3
 801c60c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c610:	18d4      	adds	r4, r2, r3
 801c612:	4602      	mov	r2, r0
 801c614:	460b      	mov	r3, r1
 801c616:	4640      	mov	r0, r8
 801c618:	4649      	mov	r1, r9
 801c61a:	f7e3 fe27 	bl	800026c <__aeabi_dsub>
 801c61e:	4602      	mov	r2, r0
 801c620:	460b      	mov	r3, r1
 801c622:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 801c626:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c62a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c62e:	00db      	lsls	r3, r3, #3
 801c630:	4413      	add	r3, r2
 801c632:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c636:	f107 0320 	add.w	r3, r7, #32
 801c63a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c63e:	f7e3 ffcd 	bl	80005dc <__aeabi_dmul>
 801c642:	4602      	mov	r2, r0
 801c644:	460b      	mov	r3, r1
 801c646:	4614      	mov	r4, r2
 801c648:	461d      	mov	r5, r3
 801c64a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c64e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c652:	00db      	lsls	r3, r3, #3
 801c654:	4413      	add	r3, r2
 801c656:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c65a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c65e:	f7e3 ffbd 	bl	80005dc <__aeabi_dmul>
 801c662:	4602      	mov	r2, r0
 801c664:	460b      	mov	r3, r1
 801c666:	4620      	mov	r0, r4
 801c668:	4629      	mov	r1, r5
 801c66a:	f7e3 fe01 	bl	8000270 <__adddf3>
 801c66e:	4602      	mov	r2, r0
 801c670:	460b      	mov	r3, r1
 801c672:	f107 0120 	add.w	r1, r7, #32
 801c676:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 801c67a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c67e:	3b01      	subs	r3, #1
 801c680:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c684:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c688:	2b00      	cmp	r3, #0
 801c68a:	da8e      	bge.n	801c5aa <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c68c:	2302      	movs	r3, #2
 801c68e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c692:	e06e      	b.n	801c772 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 801c694:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 801c698:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c69c:	3306      	adds	r3, #6
 801c69e:	00db      	lsls	r3, r3, #3
 801c6a0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c6a4:	4413      	add	r3, r2
 801c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6aa:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 801c6ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c6b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c6b6:	00db      	lsls	r3, r3, #3
 801c6b8:	4413      	add	r3, r2
 801c6ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c6be:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c6c2:	f7e3 ff8b 	bl	80005dc <__aeabi_dmul>
 801c6c6:	4602      	mov	r2, r0
 801c6c8:	460b      	mov	r3, r1
 801c6ca:	4690      	mov	r8, r2
 801c6cc:	4699      	mov	r9, r3
 801c6ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c6d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c6d6:	00db      	lsls	r3, r3, #3
 801c6d8:	4413      	add	r3, r2
 801c6da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c6de:	f107 0320 	add.w	r3, r7, #32
 801c6e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c6e6:	f7e3 ff79 	bl	80005dc <__aeabi_dmul>
 801c6ea:	4602      	mov	r2, r0
 801c6ec:	460b      	mov	r3, r1
 801c6ee:	4610      	mov	r0, r2
 801c6f0:	4619      	mov	r1, r3
 801c6f2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c6f6:	3306      	adds	r3, #6
 801c6f8:	00db      	lsls	r3, r3, #3
 801c6fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c6fe:	18d4      	adds	r4, r2, r3
 801c700:	4602      	mov	r2, r0
 801c702:	460b      	mov	r3, r1
 801c704:	4640      	mov	r0, r8
 801c706:	4649      	mov	r1, r9
 801c708:	f7e3 fdb0 	bl	800026c <__aeabi_dsub>
 801c70c:	4602      	mov	r2, r0
 801c70e:	460b      	mov	r3, r1
 801c710:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 801c714:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c718:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c71c:	00db      	lsls	r3, r3, #3
 801c71e:	4413      	add	r3, r2
 801c720:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c724:	f107 0320 	add.w	r3, r7, #32
 801c728:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801c72c:	f7e3 ff56 	bl	80005dc <__aeabi_dmul>
 801c730:	4602      	mov	r2, r0
 801c732:	460b      	mov	r3, r1
 801c734:	4614      	mov	r4, r2
 801c736:	461d      	mov	r5, r3
 801c738:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c73c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c740:	00db      	lsls	r3, r3, #3
 801c742:	4413      	add	r3, r2
 801c744:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c748:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801c74c:	f7e3 ff46 	bl	80005dc <__aeabi_dmul>
 801c750:	4602      	mov	r2, r0
 801c752:	460b      	mov	r3, r1
 801c754:	4620      	mov	r0, r4
 801c756:	4629      	mov	r1, r5
 801c758:	f7e3 fd8a 	bl	8000270 <__adddf3>
 801c75c:	4602      	mov	r2, r0
 801c75e:	460b      	mov	r3, r1
 801c760:	f107 0120 	add.w	r1, r7, #32
 801c764:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 801c768:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c76c:	3b01      	subs	r3, #1
 801c76e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c772:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c776:	2b00      	cmp	r3, #0
 801c778:	da8e      	bge.n	801c698 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 801c77a:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 801c77e:	2b00      	cmp	r3, #0
 801c780:	f000 82f0 	beq.w	801cd64 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 801c784:	2300      	movs	r3, #0
 801c786:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c78a:	2300      	movs	r3, #0
 801c78c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c790:	e0d3      	b.n	801c93a <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 801c792:	2300      	movs	r3, #0
 801c794:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c798:	2300      	movs	r3, #0
 801c79a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c79e:	e0bd      	b.n	801c91c <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 801c7a0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801c7a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c7a8:	4413      	add	r3, r2
 801c7aa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 801c7ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c7b2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c7b6:	00db      	lsls	r3, r3, #3
 801c7b8:	18d1      	adds	r1, r2, r3
 801c7ba:	f04f 0200 	mov.w	r2, #0
 801c7be:	f04f 0300 	mov.w	r3, #0
 801c7c2:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 801c7c6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c7ca:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c7ce:	00db      	lsls	r3, r3, #3
 801c7d0:	4413      	add	r3, r2
 801c7d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c7d6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c7da:	00db      	lsls	r3, r3, #3
 801c7dc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c7e0:	4413      	add	r3, r2
 801c7e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c7e6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c7ea:	00db      	lsls	r3, r3, #3
 801c7ec:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c7f0:	4413      	add	r3, r2
 801c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7f6:	f7e3 fef1 	bl	80005dc <__aeabi_dmul>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	460b      	mov	r3, r1
 801c7fe:	4620      	mov	r0, r4
 801c800:	4629      	mov	r1, r5
 801c802:	f7e3 fd35 	bl	8000270 <__adddf3>
 801c806:	4602      	mov	r2, r0
 801c808:	460b      	mov	r3, r1
 801c80a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c80e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c812:	00c9      	lsls	r1, r1, #3
 801c814:	4401      	add	r1, r0
 801c816:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 801c81a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c81e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c822:	00db      	lsls	r3, r3, #3
 801c824:	4413      	add	r3, r2
 801c826:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c82a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c82e:	3301      	adds	r3, #1
 801c830:	00db      	lsls	r3, r3, #3
 801c832:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c836:	4413      	add	r3, r2
 801c838:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c83c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c840:	3301      	adds	r3, #1
 801c842:	00db      	lsls	r3, r3, #3
 801c844:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c848:	4413      	add	r3, r2
 801c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c84e:	f7e3 fec5 	bl	80005dc <__aeabi_dmul>
 801c852:	4602      	mov	r2, r0
 801c854:	460b      	mov	r3, r1
 801c856:	4620      	mov	r0, r4
 801c858:	4629      	mov	r1, r5
 801c85a:	f7e3 fd09 	bl	8000270 <__adddf3>
 801c85e:	4602      	mov	r2, r0
 801c860:	460b      	mov	r3, r1
 801c862:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c866:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c86a:	00c9      	lsls	r1, r1, #3
 801c86c:	4401      	add	r1, r0
 801c86e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 801c872:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c876:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801c87a:	00db      	lsls	r3, r3, #3
 801c87c:	4413      	add	r3, r2
 801c87e:	e9d3 4500 	ldrd	r4, r5, [r3]
 801c882:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c886:	3302      	adds	r3, #2
 801c888:	00db      	lsls	r3, r3, #3
 801c88a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c88e:	4413      	add	r3, r2
 801c890:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c894:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c898:	3302      	adds	r3, #2
 801c89a:	00db      	lsls	r3, r3, #3
 801c89c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801c8a0:	4413      	add	r3, r2
 801c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a6:	f7e3 fe99 	bl	80005dc <__aeabi_dmul>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	460b      	mov	r3, r1
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	4629      	mov	r1, r5
 801c8b2:	f7e3 fcdd 	bl	8000270 <__adddf3>
 801c8b6:	4602      	mov	r2, r0
 801c8b8:	460b      	mov	r3, r1
 801c8ba:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801c8be:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801c8c2:	00c9      	lsls	r1, r1, #3
 801c8c4:	4401      	add	r1, r0
 801c8c6:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 801c8ca:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c8ce:	00db      	lsls	r3, r3, #3
 801c8d0:	1d3a      	adds	r2, r7, #4
 801c8d2:	6812      	ldr	r2, [r2, #0]
 801c8d4:	4413      	add	r3, r2
 801c8d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c8da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c8de:	00db      	lsls	r3, r3, #3
 801c8e0:	1d3a      	adds	r2, r7, #4
 801c8e2:	6812      	ldr	r2, [r2, #0]
 801c8e4:	4413      	add	r3, r2
 801c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ea:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 801c8ee:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 801c8f2:	442c      	add	r4, r5
 801c8f4:	f7e3 fe72 	bl	80005dc <__aeabi_dmul>
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	460b      	mov	r3, r1
 801c8fc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801c900:	00e1      	lsls	r1, r4, #3
 801c902:	4401      	add	r1, r0
 801c904:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 801c908:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801c90c:	3303      	adds	r3, #3
 801c90e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801c912:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c916:	3301      	adds	r3, #1
 801c918:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801c91c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801c920:	2b02      	cmp	r3, #2
 801c922:	f77f af3d 	ble.w	801c7a0 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 801c926:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801c92a:	3303      	adds	r3, #3
 801c92c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801c930:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c934:	3301      	adds	r3, #1
 801c936:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c93a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c93e:	2b02      	cmp	r3, #2
 801c940:	f77f af27 	ble.w	801c792 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 801c944:	2301      	movs	r3, #1
 801c946:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c94a:	2300      	movs	r3, #0
 801c94c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c950:	e049      	b.n	801c9e6 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 801c952:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801c956:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c95a:	00db      	lsls	r3, r3, #3
 801c95c:	4413      	add	r3, r2
 801c95e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c962:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801c966:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c96a:	00db      	lsls	r3, r3, #3
 801c96c:	4413      	add	r3, r2
 801c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c972:	f7e3 fc7b 	bl	800026c <__aeabi_dsub>
 801c976:	4602      	mov	r2, r0
 801c978:	460b      	mov	r3, r1
 801c97a:	f107 0118 	add.w	r1, r7, #24
 801c97e:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 801c982:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c986:	2b00      	cmp	r3, #0
 801c988:	d01c      	beq.n	801c9c4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 801c98a:	f107 0318 	add.w	r3, r7, #24
 801c98e:	ed93 7b00 	vldr	d7, [r3]
 801c992:	eeb0 0a47 	vmov.f32	s0, s14
 801c996:	eef0 0a67 	vmov.f32	s1, s15
 801c99a:	f003 fbf3 	bl	8020184 <rtIsInf>
 801c99e:	4603      	mov	r3, r0
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d10c      	bne.n	801c9be <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 801c9a4:	f107 0318 	add.w	r3, r7, #24
 801c9a8:	ed93 7b00 	vldr	d7, [r3]
 801c9ac:	eeb0 0a47 	vmov.f32	s0, s14
 801c9b0:	eef0 0a67 	vmov.f32	s1, s15
 801c9b4:	f003 fc0a 	bl	80201cc <rtIsNaN>
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d002      	beq.n	801c9c4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 801c9be:	2300      	movs	r3, #0
 801c9c0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 801c9c4:	f107 0318 	add.w	r3, r7, #24
 801c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9cc:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801c9d0:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 801c9d4:	00c9      	lsls	r1, r1, #3
 801c9d6:	4401      	add	r1, r0
 801c9d8:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 801c9dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c9e0:	3301      	adds	r3, #1
 801c9e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801c9e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801c9ea:	2b08      	cmp	r3, #8
 801c9ec:	ddb1      	ble.n	801c952 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 801c9ee:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d00a      	beq.n	801ca0c <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 801c9f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c9fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c9fe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ca02:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801ca06:	f003 fc33 	bl	8020270 <svd_u3DvUgOe>
 801ca0a:	e02c      	b.n	801ca66 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 801ca0c:	4bbc      	ldr	r3, [pc, #752]	; (801cd00 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca12:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ca16:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 801ca1a:	4bb9      	ldr	r3, [pc, #740]	; (801cd00 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca20:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ca24:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 801ca28:	4bb5      	ldr	r3, [pc, #724]	; (801cd00 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ca32:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 801ca36:	2300      	movs	r3, #0
 801ca38:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ca3c:	e00f      	b.n	801ca5e <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 801ca3e:	4bb0      	ldr	r3, [pc, #704]	; (801cd00 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 801ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca44:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ca48:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801ca4c:	00c9      	lsls	r1, r1, #3
 801ca4e:	4401      	add	r1, r0
 801ca50:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 801ca54:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ca58:	3301      	adds	r3, #1
 801ca5a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ca5e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ca62:	2b08      	cmp	r3, #8
 801ca64:	ddeb      	ble.n	801ca3e <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 801ca66:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ca6a:	2248      	movs	r2, #72	; 0x48
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	4618      	mov	r0, r3
 801ca70:	f011 ff5e 	bl	802e930 <memset>
      Ss[0] = s[0];
 801ca74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca7c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801ca80:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 801ca84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ca88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ca8c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801ca90:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 801ca94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ca98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ca9c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 801caa0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 801caa4:	2300      	movs	r3, #0
 801caa6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801caaa:	e01e      	b.n	801caea <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 801caac:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cab0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cab4:	00db      	lsls	r3, r3, #3
 801cab6:	4413      	add	r3, r2
 801cab8:	ed93 7b00 	vldr	d7, [r3]
 801cabc:	eeb0 0a47 	vmov.f32	s0, s14
 801cac0:	eef0 0a67 	vmov.f32	s1, s15
 801cac4:	f012 f8ec 	bl	802eca0 <sqrt>
 801cac8:	eeb0 7a40 	vmov.f32	s14, s0
 801cacc:	eef0 7a60 	vmov.f32	s15, s1
 801cad0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cad4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cad8:	00db      	lsls	r3, r3, #3
 801cada:	4413      	add	r3, r2
 801cadc:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 801cae0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cae4:	3301      	adds	r3, #1
 801cae6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801caea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801caee:	2b08      	cmp	r3, #8
 801caf0:	dddc      	ble.n	801caac <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 801caf2:	2300      	movs	r3, #0
 801caf4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801caf8:	2300      	movs	r3, #0
 801cafa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cafe:	e0c0      	b.n	801cc82 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 801cb00:	2300      	movs	r3, #0
 801cb02:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801cb06:	2300      	movs	r3, #0
 801cb08:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801cb0c:	e0aa      	b.n	801cc64 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 801cb0e:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801cb12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cb16:	4413      	add	r3, r2
 801cb18:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 801cb1c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cb20:	00db      	lsls	r3, r3, #3
 801cb22:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb26:	18d1      	adds	r1, r2, r3
 801cb28:	f04f 0200 	mov.w	r2, #0
 801cb2c:	f04f 0300 	mov.w	r3, #0
 801cb30:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 801cb34:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cb38:	00db      	lsls	r3, r3, #3
 801cb3a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb3e:	4413      	add	r3, r2
 801cb40:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cb44:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cb48:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cb4c:	00db      	lsls	r3, r3, #3
 801cb4e:	4413      	add	r3, r2
 801cb50:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cb54:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801cb58:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cb5c:	00db      	lsls	r3, r3, #3
 801cb5e:	4413      	add	r3, r2
 801cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb64:	f7e3 fd3a 	bl	80005dc <__aeabi_dmul>
 801cb68:	4602      	mov	r2, r0
 801cb6a:	460b      	mov	r3, r1
 801cb6c:	4610      	mov	r0, r2
 801cb6e:	4619      	mov	r1, r3
 801cb70:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cb74:	00db      	lsls	r3, r3, #3
 801cb76:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb7a:	18d6      	adds	r6, r2, r3
 801cb7c:	4602      	mov	r2, r0
 801cb7e:	460b      	mov	r3, r1
 801cb80:	4620      	mov	r0, r4
 801cb82:	4629      	mov	r1, r5
 801cb84:	f7e3 fb74 	bl	8000270 <__adddf3>
 801cb88:	4602      	mov	r2, r0
 801cb8a:	460b      	mov	r3, r1
 801cb8c:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 801cb90:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cb94:	00db      	lsls	r3, r3, #3
 801cb96:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cb9a:	4413      	add	r3, r2
 801cb9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cba0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cba4:	3301      	adds	r3, #1
 801cba6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cbaa:	00db      	lsls	r3, r3, #3
 801cbac:	4413      	add	r3, r2
 801cbae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cbb2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cbb6:	3303      	adds	r3, #3
 801cbb8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801cbbc:	00db      	lsls	r3, r3, #3
 801cbbe:	4413      	add	r3, r2
 801cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc4:	f7e3 fd0a 	bl	80005dc <__aeabi_dmul>
 801cbc8:	4602      	mov	r2, r0
 801cbca:	460b      	mov	r3, r1
 801cbcc:	4610      	mov	r0, r2
 801cbce:	4619      	mov	r1, r3
 801cbd0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cbd4:	00db      	lsls	r3, r3, #3
 801cbd6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbda:	18d6      	adds	r6, r2, r3
 801cbdc:	4602      	mov	r2, r0
 801cbde:	460b      	mov	r3, r1
 801cbe0:	4620      	mov	r0, r4
 801cbe2:	4629      	mov	r1, r5
 801cbe4:	f7e3 fb44 	bl	8000270 <__adddf3>
 801cbe8:	4602      	mov	r2, r0
 801cbea:	460b      	mov	r3, r1
 801cbec:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 801cbf0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cbf4:	00db      	lsls	r3, r3, #3
 801cbf6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cbfa:	4413      	add	r3, r2
 801cbfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cc00:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc04:	3302      	adds	r3, #2
 801cc06:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cc0a:	00db      	lsls	r3, r3, #3
 801cc0c:	4413      	add	r3, r2
 801cc0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc12:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cc16:	3306      	adds	r3, #6
 801cc18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801cc1c:	00db      	lsls	r3, r3, #3
 801cc1e:	4413      	add	r3, r2
 801cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc24:	f7e3 fcda 	bl	80005dc <__aeabi_dmul>
 801cc28:	4602      	mov	r2, r0
 801cc2a:	460b      	mov	r3, r1
 801cc2c:	4610      	mov	r0, r2
 801cc2e:	4619      	mov	r1, r3
 801cc30:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cc34:	00db      	lsls	r3, r3, #3
 801cc36:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cc3a:	18d6      	adds	r6, r2, r3
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	4620      	mov	r0, r4
 801cc42:	4629      	mov	r1, r5
 801cc44:	f7e3 fb14 	bl	8000270 <__adddf3>
 801cc48:	4602      	mov	r2, r0
 801cc4a:	460b      	mov	r3, r1
 801cc4c:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 801cc50:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cc54:	3303      	adds	r3, #3
 801cc56:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 801cc5a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cc5e:	3301      	adds	r3, #1
 801cc60:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801cc64:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cc68:	2b02      	cmp	r3, #2
 801cc6a:	f77f af50 	ble.w	801cb0e <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 801cc6e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cc72:	3303      	adds	r3, #3
 801cc74:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 801cc78:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc7c:	3301      	adds	r3, #1
 801cc7e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cc82:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cc86:	2b02      	cmp	r3, #2
 801cc88:	f77f af3a 	ble.w	801cb00 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 801cc92:	2300      	movs	r3, #0
 801cc94:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801cc9e:	e044      	b.n	801cd2a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 801cca0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cca4:	3301      	adds	r3, #1
 801cca6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 801ccaa:	2300      	movs	r3, #0
 801ccac:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 801ccb0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ccb4:	2b02      	cmp	r3, #2
 801ccb6:	dc25      	bgt.n	801cd04 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 801ccb8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801ccbc:	4613      	mov	r3, r2
 801ccbe:	005b      	lsls	r3, r3, #1
 801ccc0:	441a      	add	r2, r3
 801ccc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ccc6:	4413      	add	r3, r2
 801ccc8:	00db      	lsls	r3, r3, #3
 801ccca:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ccce:	4413      	add	r3, r2
 801ccd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ccd4:	f04f 0200 	mov.w	r2, #0
 801ccd8:	f04f 0300 	mov.w	r3, #0
 801ccdc:	f7e3 fee6 	bl	8000aac <__aeabi_dcmpeq>
 801cce0:	4603      	mov	r3, r0
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d106      	bne.n	801ccf4 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 801cce6:	2300      	movs	r3, #0
 801cce8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 801ccec:	2301      	movs	r3, #1
 801ccee:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801ccf2:	e00f      	b.n	801cd14 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 801ccf4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801ccfe:	e009      	b.n	801cd14 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 801cd00:	2001ed50 	.word	0x2001ed50
            }
          } else {
            kk++;
 801cd04:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd08:	3301      	adds	r3, #1
 801cd0a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 801cd0e:	2302      	movs	r3, #2
 801cd10:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 801cd14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d0c6      	beq.n	801ccaa <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 801cd1c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801cd20:	2b01      	cmp	r3, #1
 801cd22:	d102      	bne.n	801cd2a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 801cd24:	2301      	movs	r3, #1
 801cd26:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 801cd2a:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d103      	bne.n	801cd3a <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 801cd32:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cd36:	2b02      	cmp	r3, #2
 801cd38:	ddb2      	ble.n	801cca0 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 801cd3a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d110      	bne.n	801cd64 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 801cd42:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cd46:	2248      	movs	r2, #72	; 0x48
 801cd48:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	f011 fde1 	bl	802e914 <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 801cd52:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801cd56:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cd5a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cd5e:	4618      	mov	r0, r3
 801cd60:	f000 fec4 	bl	801daec <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 801cd64:	2300      	movs	r3, #0
 801cd66:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cd70:	e03d      	b.n	801cdee <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 801cd72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cd76:	00db      	lsls	r3, r3, #3
 801cd78:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cd7c:	4413      	add	r3, r2
 801cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd82:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cd86:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801cd8a:	00c9      	lsls	r1, r1, #3
 801cd8c:	4401      	add	r1, r0
 801cd8e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 801cd92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cd96:	3303      	adds	r3, #3
 801cd98:	00db      	lsls	r3, r3, #3
 801cd9a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cd9e:	4413      	add	r3, r2
 801cda0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cda4:	1c51      	adds	r1, r2, #1
 801cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdaa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cdae:	00c9      	lsls	r1, r1, #3
 801cdb0:	4401      	add	r1, r0
 801cdb2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 801cdb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cdba:	3306      	adds	r3, #6
 801cdbc:	00db      	lsls	r3, r3, #3
 801cdbe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801cdc2:	4413      	add	r3, r2
 801cdc4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 801cdc8:	1c91      	adds	r1, r2, #2
 801cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cdd2:	00c9      	lsls	r1, r1, #3
 801cdd4:	4401      	add	r1, r0
 801cdd6:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 801cdda:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cdde:	3303      	adds	r3, #3
 801cde0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 801cde4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cde8:	3301      	adds	r3, #1
 801cdea:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 801cdee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cdf2:	2b02      	cmp	r3, #2
 801cdf4:	ddbd      	ble.n	801cd72 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cdfc:	e01a      	b.n	801ce34 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 801cdfe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801ce02:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce06:	00db      	lsls	r3, r3, #3
 801ce08:	4413      	add	r3, r2
 801ce0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce0e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce12:	00db      	lsls	r3, r3, #3
 801ce14:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801ce18:	18d4      	adds	r4, r2, r3
 801ce1a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801ce1e:	f7e3 fbdd 	bl	80005dc <__aeabi_dmul>
 801ce22:	4602      	mov	r2, r0
 801ce24:	460b      	mov	r3, r1
 801ce26:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 801ce2a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce2e:	3301      	adds	r3, #1
 801ce30:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce34:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ce38:	2b08      	cmp	r3, #8
 801ce3a:	dde0      	ble.n	801cdfe <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801ce42:	2300      	movs	r3, #0
 801ce44:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801ce48:	e057      	b.n	801cefa <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 801ce4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ce4e:	00db      	lsls	r3, r3, #3
 801ce50:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801ce54:	4413      	add	r3, r2
 801ce56:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce5a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce62:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801ce66:	00e4      	lsls	r4, r4, #3
 801ce68:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801ce6c:	442c      	add	r4, r5
 801ce6e:	f7e3 f9fd 	bl	800026c <__aeabi_dsub>
 801ce72:	4602      	mov	r2, r0
 801ce74:	460b      	mov	r3, r1
 801ce76:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 801ce7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ce7e:	3301      	adds	r3, #1
 801ce80:	00db      	lsls	r3, r3, #3
 801ce82:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801ce86:	4413      	add	r3, r2
 801ce88:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ce8c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801ce90:	3308      	adds	r3, #8
 801ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce96:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801ce9a:	3401      	adds	r4, #1
 801ce9c:	00e4      	lsls	r4, r4, #3
 801ce9e:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801cea2:	442c      	add	r4, r5
 801cea4:	f7e3 f9e2 	bl	800026c <__aeabi_dsub>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	460b      	mov	r3, r1
 801ceac:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 801ceb0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ceb4:	3302      	adds	r3, #2
 801ceb6:	00db      	lsls	r3, r3, #3
 801ceb8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cebc:	4413      	add	r3, r2
 801cebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cec2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801cec6:	3310      	adds	r3, #16
 801cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cecc:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 801ced0:	3402      	adds	r4, #2
 801ced2:	00e4      	lsls	r4, r4, #3
 801ced4:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 801ced8:	442c      	add	r4, r5
 801ceda:	f7e3 f9c7 	bl	800026c <__aeabi_dsub>
 801cede:	4602      	mov	r2, r0
 801cee0:	460b      	mov	r3, r1
 801cee2:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 801cee6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801ceea:	3303      	adds	r3, #3
 801ceec:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 801cef0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cef4:	3301      	adds	r3, #1
 801cef6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cefa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cefe:	2b05      	cmp	r3, #5
 801cf00:	dda3      	ble.n	801ce4a <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 801cf02:	f107 0308 	add.w	r3, r7, #8
 801cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 801cf0e:	f7e3 fb65 	bl	80005dc <__aeabi_dmul>
 801cf12:	4602      	mov	r2, r0
 801cf14:	460b      	mov	r3, r1
 801cf16:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801cf20:	e071      	b.n	801d006 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 801cf22:	2300      	movs	r3, #0
 801cf24:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801cf28:	2300      	movs	r3, #0
 801cf2a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801cf2e:	e061      	b.n	801cff4 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 801cf30:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801cf34:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cf38:	4413      	add	r3, r2
 801cf3a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 801cf3e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cf42:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cf46:	00db      	lsls	r3, r3, #3
 801cf48:	18d1      	adds	r1, r2, r3
 801cf4a:	f04f 0200 	mov.w	r2, #0
 801cf4e:	f04f 0300 	mov.w	r3, #0
 801cf52:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 801cf56:	2300      	movs	r3, #0
 801cf58:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801cf62:	e039      	b.n	801cfd8 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 801cf64:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801cf68:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801cf6c:	00db      	lsls	r3, r3, #3
 801cf6e:	4413      	add	r3, r2
 801cf70:	e9d3 4500 	ldrd	r4, r5, [r3]
 801cf74:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cf78:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801cf7c:	4413      	add	r3, r2
 801cf7e:	00db      	lsls	r3, r3, #3
 801cf80:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801cf84:	4413      	add	r3, r2
 801cf86:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cf8a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 801cf8e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cf92:	4413      	add	r3, r2
 801cf94:	00db      	lsls	r3, r3, #3
 801cf96:	463a      	mov	r2, r7
 801cf98:	6812      	ldr	r2, [r2, #0]
 801cf9a:	4413      	add	r3, r2
 801cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfa0:	f7e3 fb1c 	bl	80005dc <__aeabi_dmul>
 801cfa4:	4602      	mov	r2, r0
 801cfa6:	460b      	mov	r3, r1
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	4629      	mov	r1, r5
 801cfac:	f7e3 f960 	bl	8000270 <__adddf3>
 801cfb0:	4602      	mov	r2, r0
 801cfb2:	460b      	mov	r3, r1
 801cfb4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 801cfb8:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 801cfbc:	00c9      	lsls	r1, r1, #3
 801cfbe:	4401      	add	r1, r0
 801cfc0:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 801cfc4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801cfc8:	3303      	adds	r3, #3
 801cfca:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 801cfce:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801cfd2:	3301      	adds	r3, #1
 801cfd4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801cfd8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801cfdc:	2b05      	cmp	r3, #5
 801cfde:	ddc1      	ble.n	801cf64 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 801cfe0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801cfe4:	3303      	adds	r3, #3
 801cfe6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 801cfea:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cfee:	3301      	adds	r3, #1
 801cff0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 801cff4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 801cff8:	2b02      	cmp	r3, #2
 801cffa:	dd99      	ble.n	801cf30 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 801cffc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d000:	3301      	adds	r3, #1
 801d002:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801d006:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d00a:	2b02      	cmp	r3, #2
 801d00c:	dd89      	ble.n	801cf22 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 801d00e:	2300      	movs	r3, #0
 801d010:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801d014:	e01a      	b.n	801d04c <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 801d016:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801d01a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d01e:	00db      	lsls	r3, r3, #3
 801d020:	4413      	add	r3, r2
 801d022:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d026:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d02a:	00db      	lsls	r3, r3, #3
 801d02c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 801d030:	18d4      	adds	r4, r2, r3
 801d032:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801d036:	f7e3 fad1 	bl	80005dc <__aeabi_dmul>
 801d03a:	4602      	mov	r2, r0
 801d03c:	460b      	mov	r3, r1
 801d03e:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 801d042:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d046:	3301      	adds	r3, #1
 801d048:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 801d04c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801d050:	2b08      	cmp	r3, #8
 801d052:	dde0      	ble.n	801d016 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 801d054:	bf00      	nop
 801d056:	bf00      	nop
 801d058:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 801d05c:	46bd      	mov	sp, r7
 801d05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d062:	bf00      	nop

0801d064 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 801d064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d068:	ed2d 8b02 	vpush	{d8}
 801d06c:	b0ac      	sub	sp, #176	; 0xb0
 801d06e:	af00      	add	r7, sp, #0
 801d070:	6378      	str	r0, [r7, #52]	; 0x34
 801d072:	6339      	str	r1, [r7, #48]	; 0x30
 801d074:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 801d078:	ed87 1b08 	vstr	d1, [r7, #32]
 801d07c:	61fa      	str	r2, [r7, #28]
 801d07e:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 801d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d082:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d08a:	f7e3 faa7 	bl	80005dc <__aeabi_dmul>
 801d08e:	4602      	mov	r2, r0
 801d090:	460b      	mov	r3, r1
 801d092:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d096:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801d09a:	2300      	movs	r3, #0
 801d09c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d0a0:	e021      	b.n	801d0e6 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 801d0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d0a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d0aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d0ae:	00db      	lsls	r3, r3, #3
 801d0b0:	69fa      	ldr	r2, [r7, #28]
 801d0b2:	4413      	add	r3, r2
 801d0b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0ba:	3308      	adds	r3, #8
 801d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c0:	f7e3 fa8c 	bl	80005dc <__aeabi_dmul>
 801d0c4:	4602      	mov	r2, r0
 801d0c6:	460b      	mov	r3, r1
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	4629      	mov	r1, r5
 801d0cc:	f7e3 f8d0 	bl	8000270 <__adddf3>
 801d0d0:	4602      	mov	r2, r0
 801d0d2:	460b      	mov	r3, r1
 801d0d4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d0d8:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801d0dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d0e0:	3301      	adds	r3, #1
 801d0e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d0e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d0ea:	2b05      	cmp	r3, #5
 801d0ec:	ddd9      	ble.n	801d0a2 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 801d0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d0f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d0f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d0fa:	f7e3 fa6f 	bl	80005dc <__aeabi_dmul>
 801d0fe:	4602      	mov	r2, r0
 801d100:	460b      	mov	r3, r1
 801d102:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d106:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 801d10a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d112:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d116:	f7e3 f8a9 	bl	800026c <__aeabi_dsub>
 801d11a:	4602      	mov	r2, r0
 801d11c:	460b      	mov	r3, r1
 801d11e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 801d122:	2300      	movs	r3, #0
 801d124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d128:	e01c      	b.n	801d164 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 801d12a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d12e:	00db      	lsls	r3, r3, #3
 801d130:	69fa      	ldr	r2, [r7, #28]
 801d132:	4413      	add	r3, r2
 801d134:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d13c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d144:	00db      	lsls	r3, r3, #3
 801d146:	69fa      	ldr	r2, [r7, #28]
 801d148:	18d4      	adds	r4, r2, r3
 801d14a:	4642      	mov	r2, r8
 801d14c:	464b      	mov	r3, r9
 801d14e:	f7e3 f88d 	bl	800026c <__aeabi_dsub>
 801d152:	4602      	mov	r2, r0
 801d154:	460b      	mov	r3, r1
 801d156:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 801d15a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d15e:	3301      	adds	r3, #1
 801d160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d168:	2b05      	cmp	r3, #5
 801d16a:	ddde      	ble.n	801d12a <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 801d16c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d170:	f003 f82c 	bl	80201cc <rtIsNaN>
 801d174:	4603      	mov	r3, r0
 801d176:	2b00      	cmp	r3, #0
 801d178:	d004      	beq.n	801d184 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 801d17a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d17e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801d182:	e025      	b.n	801d1d0 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 801d184:	f04f 0200 	mov.w	r2, #0
 801d188:	f04f 0300 	mov.w	r3, #0
 801d18c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d190:	f7e3 fc96 	bl	8000ac0 <__aeabi_dcmplt>
 801d194:	4603      	mov	r3, r0
 801d196:	2b00      	cmp	r3, #0
 801d198:	d005      	beq.n	801d1a6 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 801d19a:	f04f 0200 	mov.w	r2, #0
 801d19e:	4bc3      	ldr	r3, [pc, #780]	; (801d4ac <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801d1a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801d1a4:	e014      	b.n	801d1d0 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 801d1a6:	f04f 0200 	mov.w	r2, #0
 801d1aa:	f04f 0300 	mov.w	r3, #0
 801d1ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d1b2:	f7e3 fca3 	bl	8000afc <__aeabi_dcmpgt>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d003      	beq.n	801d1c4 <UTMeanCovSqrt_C6QfB9Td+0x160>
 801d1bc:	f04f 0200 	mov.w	r2, #0
 801d1c0:	4bbb      	ldr	r3, [pc, #748]	; (801d4b0 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 801d1c2:	e003      	b.n	801d1cc <UTMeanCovSqrt_C6QfB9Td+0x168>
 801d1c4:	f04f 0200 	mov.w	r2, #0
 801d1c8:	f04f 0300 	mov.w	r3, #0
 801d1cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 801d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d1d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d1da:	f7e3 f9ff 	bl	80005dc <__aeabi_dmul>
 801d1de:	4602      	mov	r2, r0
 801d1e0:	460b      	mov	r3, r1
 801d1e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 801d1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1e8:	3308      	adds	r3, #8
 801d1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d1ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d1f2:	f7e3 f9f3 	bl	80005dc <__aeabi_dmul>
 801d1f6:	4602      	mov	r2, r0
 801d1f8:	460b      	mov	r3, r1
 801d1fa:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 801d1fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d202:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d206:	f7e3 f9e9 	bl	80005dc <__aeabi_dmul>
 801d20a:	4602      	mov	r2, r0
 801d20c:	460b      	mov	r3, r1
 801d20e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 801d212:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 801d216:	f011 fd43 	bl	802eca0 <sqrt>
 801d21a:	eeb0 7a40 	vmov.f32	s14, s0
 801d21e:	eef0 7a60 	vmov.f32	s15, s1
 801d222:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 801d226:	2300      	movs	r3, #0
 801d228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d22c:	e01a      	b.n	801d264 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 801d22e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d232:	00db      	lsls	r3, r3, #3
 801d234:	69fa      	ldr	r2, [r7, #28]
 801d236:	4413      	add	r3, r2
 801d238:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d23c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d240:	f7e3 f9cc 	bl	80005dc <__aeabi_dmul>
 801d244:	4602      	mov	r2, r0
 801d246:	460b      	mov	r3, r1
 801d248:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d24c:	00c9      	lsls	r1, r1, #3
 801d24e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d252:	4401      	add	r1, r0
 801d254:	3948      	subs	r1, #72	; 0x48
 801d256:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 801d25a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d25e:	3301      	adds	r3, #1
 801d260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d268:	2b05      	cmp	r3, #5
 801d26a:	dde0      	ble.n	801d22e <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 801d26c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801d270:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 801d274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d278:	2202      	movs	r2, #2
 801d27a:	4619      	mov	r1, r3
 801d27c:	2005      	movs	r0, #5
 801d27e:	f005 f973 	bl	8022568 <xnrm2_7bm34mDQ>
 801d282:	eeb0 7a40 	vmov.f32	s14, s0
 801d286:	eef0 7a60 	vmov.f32	s15, s1
 801d28a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 801d28e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d292:	f04f 0200 	mov.w	r2, #0
 801d296:	f04f 0300 	mov.w	r3, #0
 801d29a:	f7e3 fc07 	bl	8000aac <__aeabi_dcmpeq>
 801d29e:	4603      	mov	r3, r0
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	f040 80e7 	bne.w	801d474 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 801d2a6:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 801d2aa:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 801d2ae:	eeb0 1a46 	vmov.f32	s2, s12
 801d2b2:	eef0 1a66 	vmov.f32	s3, s13
 801d2b6:	eeb0 0a47 	vmov.f32	s0, s14
 801d2ba:	eef0 0a67 	vmov.f32	s1, s15
 801d2be:	f002 fe77 	bl	801ffb0 <rt_hypotd_snf>
 801d2c2:	eeb0 7a40 	vmov.f32	s14, s0
 801d2c6:	eef0 7a60 	vmov.f32	s15, s1
 801d2ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 801d2ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d2d2:	f04f 0200 	mov.w	r2, #0
 801d2d6:	f04f 0300 	mov.w	r3, #0
 801d2da:	f7e3 fc05 	bl	8000ae8 <__aeabi_dcmpge>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d009      	beq.n	801d2f8 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 801d2e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d2e8:	613a      	str	r2, [r7, #16]
 801d2ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801d2ee:	617b      	str	r3, [r7, #20]
 801d2f0:	ed97 7b04 	vldr	d7, [r7, #16]
 801d2f4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 801d2f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d2fc:	60ba      	str	r2, [r7, #8]
 801d2fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d302:	60fb      	str	r3, [r7, #12]
 801d304:	f04f 0200 	mov.w	r2, #0
 801d308:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d30c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801d310:	f7e3 fbd6 	bl	8000ac0 <__aeabi_dcmplt>
 801d314:	4603      	mov	r3, r0
 801d316:	2b00      	cmp	r3, #0
 801d318:	f000 80a8 	beq.w	801d46c <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 801d31c:	2300      	movs	r3, #0
 801d31e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 801d322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d326:	3301      	adds	r3, #1
 801d328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 801d32c:	2301      	movs	r3, #1
 801d32e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d332:	e01d      	b.n	801d370 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 801d334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d338:	00db      	lsls	r3, r3, #3
 801d33a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d33e:	4413      	add	r3, r2
 801d340:	3b48      	subs	r3, #72	; 0x48
 801d342:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d346:	f04f 0200 	mov.w	r2, #0
 801d34a:	4b5a      	ldr	r3, [pc, #360]	; (801d4b4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d34c:	f7e3 f946 	bl	80005dc <__aeabi_dmul>
 801d350:	4602      	mov	r2, r0
 801d352:	460b      	mov	r3, r1
 801d354:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801d358:	00c9      	lsls	r1, r1, #3
 801d35a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d35e:	4401      	add	r1, r0
 801d360:	3948      	subs	r1, #72	; 0x48
 801d362:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 801d366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d36a:	3301      	adds	r3, #1
 801d36c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d374:	2b05      	cmp	r3, #5
 801d376:	dddd      	ble.n	801d334 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 801d378:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d37c:	f04f 0200 	mov.w	r2, #0
 801d380:	4b4c      	ldr	r3, [pc, #304]	; (801d4b4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d382:	f7e3 f92b 	bl	80005dc <__aeabi_dmul>
 801d386:	4602      	mov	r2, r0
 801d388:	460b      	mov	r3, r1
 801d38a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 801d38e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d392:	f04f 0200 	mov.w	r2, #0
 801d396:	4b47      	ldr	r3, [pc, #284]	; (801d4b4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 801d398:	f7e3 f920 	bl	80005dc <__aeabi_dmul>
 801d39c:	4602      	mov	r2, r0
 801d39e:	460b      	mov	r3, r1
 801d3a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 801d3a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d3a8:	603a      	str	r2, [r7, #0]
 801d3aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d3ae:	607b      	str	r3, [r7, #4]
 801d3b0:	f04f 0200 	mov.w	r2, #0
 801d3b4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d3b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d3bc:	f7e3 fb80 	bl	8000ac0 <__aeabi_dcmplt>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d003      	beq.n	801d3ce <UTMeanCovSqrt_C6QfB9Td+0x36a>
 801d3c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d3ca:	2b13      	cmp	r3, #19
 801d3cc:	dda9      	ble.n	801d322 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 801d3ce:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 801d3d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d3d6:	2202      	movs	r2, #2
 801d3d8:	4619      	mov	r1, r3
 801d3da:	2005      	movs	r0, #5
 801d3dc:	f005 f8c4 	bl	8022568 <xnrm2_7bm34mDQ>
 801d3e0:	eeb0 7a40 	vmov.f32	s14, s0
 801d3e4:	eef0 7a60 	vmov.f32	s15, s1
 801d3e8:	eeb0 1a47 	vmov.f32	s2, s14
 801d3ec:	eef0 1a67 	vmov.f32	s3, s15
 801d3f0:	eeb0 0a48 	vmov.f32	s0, s16
 801d3f4:	eef0 0a68 	vmov.f32	s1, s17
 801d3f8:	f002 fdda 	bl	801ffb0 <rt_hypotd_snf>
 801d3fc:	eeb0 7a40 	vmov.f32	s14, s0
 801d400:	eef0 7a60 	vmov.f32	s15, s1
 801d404:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 801d408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801d40c:	f04f 0200 	mov.w	r2, #0
 801d410:	f04f 0300 	mov.w	r3, #0
 801d414:	f7e3 fb68 	bl	8000ae8 <__aeabi_dcmpge>
 801d418:	4603      	mov	r3, r0
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d006      	beq.n	801d42c <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 801d41e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d422:	4692      	mov	sl, r2
 801d424:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 801d428:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 801d42c:	2300      	movs	r3, #0
 801d42e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d432:	e010      	b.n	801d456 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 801d434:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d438:	f04f 0200 	mov.w	r2, #0
 801d43c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801d440:	f7e3 f8cc 	bl	80005dc <__aeabi_dmul>
 801d444:	4602      	mov	r2, r0
 801d446:	460b      	mov	r3, r1
 801d448:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 801d44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d450:	3301      	adds	r3, #1
 801d452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d456:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d45e:	429a      	cmp	r2, r3
 801d460:	dbe8      	blt.n	801d434 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 801d462:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d466:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801d46a:	e003      	b.n	801d474 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 801d46c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d470:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 801d474:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 801d478:	eeb0 0a47 	vmov.f32	s0, s14
 801d47c:	eef0 0a67 	vmov.f32	s1, s15
 801d480:	f002 fea4 	bl	80201cc <rtIsNaN>
 801d484:	4603      	mov	r3, r0
 801d486:	2b00      	cmp	r3, #0
 801d488:	d12b      	bne.n	801d4e2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 801d48a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d48e:	f04f 0200 	mov.w	r2, #0
 801d492:	f04f 0300 	mov.w	r3, #0
 801d496:	f7e3 fb13 	bl	8000ac0 <__aeabi_dcmplt>
 801d49a:	4603      	mov	r3, r0
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d00b      	beq.n	801d4b8 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 801d4a0:	f04f 0200 	mov.w	r2, #0
 801d4a4:	4b01      	ldr	r3, [pc, #4]	; (801d4ac <UTMeanCovSqrt_C6QfB9Td+0x448>)
 801d4a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801d4aa:	e01a      	b.n	801d4e2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 801d4ac:	bff00000 	.word	0xbff00000
 801d4b0:	3ff00000 	.word	0x3ff00000
 801d4b4:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 801d4b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d4bc:	f04f 0200 	mov.w	r2, #0
 801d4c0:	f04f 0300 	mov.w	r3, #0
 801d4c4:	f7e3 fb1a 	bl	8000afc <__aeabi_dcmpgt>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d003      	beq.n	801d4d6 <UTMeanCovSqrt_C6QfB9Td+0x472>
 801d4ce:	f04f 0200 	mov.w	r2, #0
 801d4d2:	4b99      	ldr	r3, [pc, #612]	; (801d738 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d4d4:	e003      	b.n	801d4de <UTMeanCovSqrt_C6QfB9Td+0x47a>
 801d4d6:	f04f 0200 	mov.w	r2, #0
 801d4da:	f04f 0300 	mov.w	r3, #0
 801d4de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 801d4e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801d4e6:	f04f 0200 	mov.w	r2, #0
 801d4ea:	4b93      	ldr	r3, [pc, #588]	; (801d738 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 801d4ec:	f7e3 fade 	bl	8000aac <__aeabi_dcmpeq>
 801d4f0:	4603      	mov	r3, r0
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d021      	beq.n	801d53a <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 801d4f6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801d4fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d4fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d506:	4618      	mov	r0, r3
 801d508:	ed97 1b08 	vldr	d1, [r7, #32]
 801d50c:	eeb0 0a47 	vmov.f32	s0, s14
 801d510:	eef0 0a67 	vmov.f32	s1, s15
 801d514:	f002 fbc2 	bl	801fc9c <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 801d518:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d51c:	f011 fbc0 	bl	802eca0 <sqrt>
 801d520:	ec51 0b10 	vmov	r0, r1, d0
 801d524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801d528:	f7e3 f858 	bl	80005dc <__aeabi_dmul>
 801d52c:	4602      	mov	r2, r0
 801d52e:	460b      	mov	r3, r1
 801d530:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d534:	e9c1 2300 	strd	r2, r3, [r1]
 801d538:	e016      	b.n	801d568 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 801d53a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d53e:	ed97 0b08 	vldr	d0, [r7, #32]
 801d542:	4618      	mov	r0, r3
 801d544:	f000 f8fa 	bl	801d73c <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 801d548:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801d54c:	f011 fba8 	bl	802eca0 <sqrt>
 801d550:	ec51 0b10 	vmov	r0, r1, d0
 801d554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d558:	f7e3 f840 	bl	80005dc <__aeabi_dmul>
 801d55c:	4602      	mov	r2, r0
 801d55e:	460b      	mov	r3, r1
 801d560:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801d564:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 801d568:	2300      	movs	r3, #0
 801d56a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d56e:	2300      	movs	r3, #0
 801d570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d574:	e054      	b.n	801d620 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 801d576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d57a:	00db      	lsls	r3, r3, #3
 801d57c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d580:	4413      	add	r3, r2
 801d582:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d586:	69bb      	ldr	r3, [r7, #24]
 801d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d58c:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d590:	00e4      	lsls	r4, r4, #3
 801d592:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d596:	442c      	add	r4, r5
 801d598:	f7e2 fe68 	bl	800026c <__aeabi_dsub>
 801d59c:	4602      	mov	r2, r0
 801d59e:	460b      	mov	r3, r1
 801d5a0:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 801d5a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d5a8:	3301      	adds	r3, #1
 801d5aa:	00db      	lsls	r3, r3, #3
 801d5ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d5b0:	4413      	add	r3, r2
 801d5b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d5b6:	69bb      	ldr	r3, [r7, #24]
 801d5b8:	3308      	adds	r3, #8
 801d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5be:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d5c2:	3401      	adds	r4, #1
 801d5c4:	00e4      	lsls	r4, r4, #3
 801d5c6:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d5ca:	442c      	add	r4, r5
 801d5cc:	f7e2 fe4e 	bl	800026c <__aeabi_dsub>
 801d5d0:	4602      	mov	r2, r0
 801d5d2:	460b      	mov	r3, r1
 801d5d4:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 801d5d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d5dc:	3302      	adds	r3, #2
 801d5de:	00db      	lsls	r3, r3, #3
 801d5e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d5e4:	4413      	add	r3, r2
 801d5e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d5ea:	69bb      	ldr	r3, [r7, #24]
 801d5ec:	3310      	adds	r3, #16
 801d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5f2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801d5f6:	3402      	adds	r4, #2
 801d5f8:	00e4      	lsls	r4, r4, #3
 801d5fa:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 801d5fe:	442c      	add	r4, r5
 801d600:	f7e2 fe34 	bl	800026c <__aeabi_dsub>
 801d604:	4602      	mov	r2, r0
 801d606:	460b      	mov	r3, r1
 801d608:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 801d60c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d610:	3303      	adds	r3, #3
 801d612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 801d616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d61a:	3301      	adds	r3, #1
 801d61c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d624:	2b05      	cmp	r3, #5
 801d626:	dda6      	ble.n	801d576 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 801d628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d62c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801d630:	f7e2 ffd4 	bl	80005dc <__aeabi_dmul>
 801d634:	4602      	mov	r2, r0
 801d636:	460b      	mov	r3, r1
 801d638:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 801d63c:	2300      	movs	r3, #0
 801d63e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d642:	e06c      	b.n	801d71e <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 801d644:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d648:	00db      	lsls	r3, r3, #3
 801d64a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d64e:	4413      	add	r3, r2
 801d650:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 801d654:	f04f 0200 	mov.w	r2, #0
 801d658:	f04f 0300 	mov.w	r3, #0
 801d65c:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 801d660:	2300      	movs	r3, #0
 801d662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d666:	2300      	movs	r3, #0
 801d668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d66c:	e037      	b.n	801d6de <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 801d66e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d672:	00db      	lsls	r3, r3, #3
 801d674:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d678:	4413      	add	r3, r2
 801d67a:	3b60      	subs	r3, #96	; 0x60
 801d67c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d680:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d688:	4413      	add	r3, r2
 801d68a:	00db      	lsls	r3, r3, #3
 801d68c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801d690:	4413      	add	r3, r2
 801d692:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d69a:	00db      	lsls	r3, r3, #3
 801d69c:	69fa      	ldr	r2, [r7, #28]
 801d69e:	4413      	add	r3, r2
 801d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a4:	f7e2 ff9a 	bl	80005dc <__aeabi_dmul>
 801d6a8:	4602      	mov	r2, r0
 801d6aa:	460b      	mov	r3, r1
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	4629      	mov	r1, r5
 801d6b0:	f7e2 fdde 	bl	8000270 <__adddf3>
 801d6b4:	4602      	mov	r2, r0
 801d6b6:	460b      	mov	r3, r1
 801d6b8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801d6bc:	00c9      	lsls	r1, r1, #3
 801d6be:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801d6c2:	4401      	add	r1, r0
 801d6c4:	3960      	subs	r1, #96	; 0x60
 801d6c6:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 801d6ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d6ce:	3303      	adds	r3, #3
 801d6d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 801d6d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d6d8:	3301      	adds	r3, #1
 801d6da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801d6de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d6e2:	2b05      	cmp	r3, #5
 801d6e4:	ddc3      	ble.n	801d66e <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 801d6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d6ea:	00db      	lsls	r3, r3, #3
 801d6ec:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801d6f0:	4413      	add	r3, r2
 801d6f2:	3b60      	subs	r3, #96	; 0x60
 801d6f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d6f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801d6fc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 801d700:	00e4      	lsls	r4, r4, #3
 801d702:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 801d706:	442c      	add	r4, r5
 801d708:	f7e2 ff68 	bl	80005dc <__aeabi_dmul>
 801d70c:	4602      	mov	r2, r0
 801d70e:	460b      	mov	r3, r1
 801d710:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 801d714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d718:	3301      	adds	r3, #1
 801d71a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801d71e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d722:	2b02      	cmp	r3, #2
 801d724:	dd8e      	ble.n	801d644 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 801d726:	bf00      	nop
 801d728:	bf00      	nop
 801d72a:	37b0      	adds	r7, #176	; 0xb0
 801d72c:	46bd      	mov	sp, r7
 801d72e:	ecbd 8b02 	vpop	{d8}
 801d732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d736:	bf00      	nop
 801d738:	3ff00000 	.word	0x3ff00000

0801d73c <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 801d73c:	b5b0      	push	{r4, r5, r7, lr}
 801d73e:	b090      	sub	sp, #64	; 0x40
 801d740:	af00      	add	r7, sp, #0
 801d742:	60f8      	str	r0, [r7, #12]
 801d744:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d74e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 801d752:	2300      	movs	r3, #0
 801d754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d75e:	f04f 0200 	mov.w	r2, #0
 801d762:	f04f 0300 	mov.w	r3, #0
 801d766:	f7e3 f9a1 	bl	8000aac <__aeabi_dcmpeq>
 801d76a:	4603      	mov	r3, r0
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d003      	beq.n	801d778 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 801d770:	2302      	movs	r3, #2
 801d772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d776:	e065      	b.n	801d844 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d77e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d782:	f7e3 f855 	bl	8000830 <__aeabi_ddiv>
 801d786:	4602      	mov	r2, r0
 801d788:	460b      	mov	r3, r1
 801d78a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 801d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d790:	63bb      	str	r3, [r7, #56]	; 0x38
 801d792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d798:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 801d79a:	f04f 0200 	mov.w	r2, #0
 801d79e:	4b5c      	ldr	r3, [pc, #368]	; (801d910 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d7a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d7a4:	f7e3 f9a0 	bl	8000ae8 <__aeabi_dcmpge>
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d003      	beq.n	801d7b6 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d7b4:	e046      	b.n	801d844 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 801d7b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d7ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801d7be:	f7e2 ff0d 	bl	80005dc <__aeabi_dmul>
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	460b      	mov	r3, r1
 801d7c6:	f04f 0000 	mov.w	r0, #0
 801d7ca:	4951      	ldr	r1, [pc, #324]	; (801d910 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d7cc:	f7e2 fd4e 	bl	800026c <__aeabi_dsub>
 801d7d0:	4602      	mov	r2, r0
 801d7d2:	460b      	mov	r3, r1
 801d7d4:	ec43 2b17 	vmov	d7, r2, r3
 801d7d8:	eeb0 0a47 	vmov.f32	s0, s14
 801d7dc:	eef0 0a67 	vmov.f32	s1, s15
 801d7e0:	f011 fa5e 	bl	802eca0 <sqrt>
 801d7e4:	eeb0 7a40 	vmov.f32	s14, s0
 801d7e8:	eef0 7a60 	vmov.f32	s15, s1
 801d7ec:	f107 0218 	add.w	r2, r7, #24
 801d7f0:	f107 0110 	add.w	r1, r7, #16
 801d7f4:	f107 0320 	add.w	r3, r7, #32
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 801d7fe:	eeb0 0a47 	vmov.f32	s0, s14
 801d802:	eef0 0a67 	vmov.f32	s1, s15
 801d806:	f002 fa49 	bl	801fc9c <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d810:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d814:	f7e2 fee2 	bl	80005dc <__aeabi_dmul>
 801d818:	4602      	mov	r2, r0
 801d81a:	460b      	mov	r3, r1
 801d81c:	4614      	mov	r4, r2
 801d81e:	461d      	mov	r5, r3
 801d820:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d824:	f04f 0200 	mov.w	r2, #0
 801d828:	f04f 0300 	mov.w	r3, #0
 801d82c:	f7e2 fed6 	bl	80005dc <__aeabi_dmul>
 801d830:	4602      	mov	r2, r0
 801d832:	460b      	mov	r3, r1
 801d834:	4620      	mov	r0, r4
 801d836:	4629      	mov	r1, r5
 801d838:	f7e2 fd18 	bl	800026c <__aeabi_dsub>
 801d83c:	4602      	mov	r2, r0
 801d83e:	460b      	mov	r3, r1
 801d840:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 801d844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d848:	68f9      	ldr	r1, [r7, #12]
 801d84a:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 801d84e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801d852:	2b00      	cmp	r3, #0
 801d854:	d057      	beq.n	801d906 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 801d856:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d85a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d85e:	f7e2 febd 	bl	80005dc <__aeabi_dmul>
 801d862:	4602      	mov	r2, r0
 801d864:	460b      	mov	r3, r1
 801d866:	4614      	mov	r4, r2
 801d868:	461d      	mov	r5, r3
 801d86a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d86e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d872:	f7e2 feb3 	bl	80005dc <__aeabi_dmul>
 801d876:	4602      	mov	r2, r0
 801d878:	460b      	mov	r3, r1
 801d87a:	4620      	mov	r0, r4
 801d87c:	4629      	mov	r1, r5
 801d87e:	f7e2 fcf5 	bl	800026c <__aeabi_dsub>
 801d882:	4602      	mov	r2, r0
 801d884:	460b      	mov	r3, r1
 801d886:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 801d88a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d88e:	f002 fc79 	bl	8020184 <rtIsInf>
 801d892:	4603      	mov	r3, r0
 801d894:	2b00      	cmp	r3, #0
 801d896:	d11d      	bne.n	801d8d4 <cholUpdateFactor_HBMX5a5h+0x198>
 801d898:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d89c:	f002 fc96 	bl	80201cc <rtIsNaN>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d116      	bne.n	801d8d4 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 801d8a6:	f04f 0200 	mov.w	r2, #0
 801d8aa:	4b19      	ldr	r3, [pc, #100]	; (801d910 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 801d8ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 801d8b0:	f04f 0200 	mov.w	r2, #0
 801d8b4:	f04f 0300 	mov.w	r3, #0
 801d8b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801d8bc:	f7e3 f8f6 	bl	8000aac <__aeabi_dcmpeq>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d110      	bne.n	801d8e8 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 801d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c8:	633b      	str	r3, [r7, #48]	; 0x30
 801d8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d8d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 801d8d2:	e009      	b.n	801d8e8 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 801d8d4:	4b0f      	ldr	r3, [pc, #60]	; (801d914 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 801d8de:	4b0d      	ldr	r3, [pc, #52]	; (801d914 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 801d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 801d8e8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801d8ec:	f011 f9d8 	bl	802eca0 <sqrt>
 801d8f0:	ec51 0b10 	vmov	r0, r1, d0
 801d8f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801d8f8:	f7e2 fe70 	bl	80005dc <__aeabi_dmul>
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	460b      	mov	r3, r1
 801d900:	68f9      	ldr	r1, [r7, #12]
 801d902:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 801d906:	bf00      	nop
 801d908:	3740      	adds	r7, #64	; 0x40
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bdb0      	pop	{r4, r5, r7, pc}
 801d90e:	bf00      	nop
 801d910:	3ff00000 	.word	0x3ff00000
 801d914:	2001ed50 	.word	0x2001ed50

0801d918 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 801d918:	b5b0      	push	{r4, r5, r7, lr}
 801d91a:	b08e      	sub	sp, #56	; 0x38
 801d91c:	af00      	add	r7, sp, #0
 801d91e:	ed87 0b04 	vstr	d0, [r7, #16]
 801d922:	60f8      	str	r0, [r7, #12]
 801d924:	60b9      	str	r1, [r7, #8]
 801d926:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d92e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d932:	f7e3 f8cf 	bl	8000ad4 <__aeabi_dcmple>
 801d936:	4603      	mov	r3, r0
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d020      	beq.n	801d97e <look1_binlxpw+0x66>
    iLeft = 0U;
 801d93c:	2300      	movs	r3, #0
 801d93e:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d946:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d94a:	f7e2 fc8f 	bl	800026c <__aeabi_dsub>
 801d94e:	4602      	mov	r2, r0
 801d950:	460b      	mov	r3, r1
 801d952:	4614      	mov	r4, r2
 801d954:	461d      	mov	r5, r3
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	3308      	adds	r3, #8
 801d95a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d964:	f7e2 fc82 	bl	800026c <__aeabi_dsub>
 801d968:	4602      	mov	r2, r0
 801d96a:	460b      	mov	r3, r1
 801d96c:	4620      	mov	r0, r4
 801d96e:	4629      	mov	r1, r5
 801d970:	f7e2 ff5e 	bl	8000830 <__aeabi_ddiv>
 801d974:	4602      	mov	r2, r0
 801d976:	460b      	mov	r3, r1
 801d978:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801d97c:	e087      	b.n	801da8e <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	00db      	lsls	r3, r3, #3
 801d982:	68fa      	ldr	r2, [r7, #12]
 801d984:	4413      	add	r3, r2
 801d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d98a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d98e:	f7e3 f897 	bl	8000ac0 <__aeabi_dcmplt>
 801d992:	4603      	mov	r3, r0
 801d994:	2b00      	cmp	r3, #0
 801d996:	d04b      	beq.n	801da30 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	085b      	lsrs	r3, r3, #1
 801d99c:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 801d9a6:	e016      	b.n	801d9d6 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 801d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9aa:	00db      	lsls	r3, r3, #3
 801d9ac:	68fa      	ldr	r2, [r7, #12]
 801d9ae:	4413      	add	r3, r2
 801d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d9b8:	f7e3 f882 	bl	8000ac0 <__aeabi_dcmplt>
 801d9bc:	4603      	mov	r3, r0
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d002      	beq.n	801d9c8 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 801d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9c4:	627b      	str	r3, [r7, #36]	; 0x24
 801d9c6:	e001      	b.n	801d9cc <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 801d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 801d9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9d0:	4413      	add	r3, r2
 801d9d2:	085b      	lsrs	r3, r3, #1
 801d9d4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 801d9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9da:	1ad3      	subs	r3, r2, r3
 801d9dc:	2b01      	cmp	r3, #1
 801d9de:	d8e3      	bhi.n	801d9a8 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 801d9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9e2:	00db      	lsls	r3, r3, #3
 801d9e4:	68fa      	ldr	r2, [r7, #12]
 801d9e6:	4413      	add	r3, r2
 801d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d9f0:	f7e2 fc3c 	bl	800026c <__aeabi_dsub>
 801d9f4:	4602      	mov	r2, r0
 801d9f6:	460b      	mov	r3, r1
 801d9f8:	4614      	mov	r4, r2
 801d9fa:	461d      	mov	r5, r3
 801d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fe:	3301      	adds	r3, #1
 801da00:	00db      	lsls	r3, r3, #3
 801da02:	68fa      	ldr	r2, [r7, #12]
 801da04:	4413      	add	r3, r2
 801da06:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0c:	00db      	lsls	r3, r3, #3
 801da0e:	68fa      	ldr	r2, [r7, #12]
 801da10:	4413      	add	r3, r2
 801da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da16:	f7e2 fc29 	bl	800026c <__aeabi_dsub>
 801da1a:	4602      	mov	r2, r0
 801da1c:	460b      	mov	r3, r1
 801da1e:	4620      	mov	r0, r4
 801da20:	4629      	mov	r1, r5
 801da22:	f7e2 ff05 	bl	8000830 <__aeabi_ddiv>
 801da26:	4602      	mov	r2, r0
 801da28:	460b      	mov	r3, r1
 801da2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 801da2e:	e02e      	b.n	801da8e <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	3b01      	subs	r3, #1
 801da34:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801da3c:	3b01      	subs	r3, #1
 801da3e:	00db      	lsls	r3, r3, #3
 801da40:	68fa      	ldr	r2, [r7, #12]
 801da42:	4413      	add	r3, r2
 801da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801da4c:	f7e2 fc0e 	bl	800026c <__aeabi_dsub>
 801da50:	4602      	mov	r2, r0
 801da52:	460b      	mov	r3, r1
 801da54:	4614      	mov	r4, r2
 801da56:	461d      	mov	r5, r3
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	00db      	lsls	r3, r3, #3
 801da5c:	68fa      	ldr	r2, [r7, #12]
 801da5e:	4413      	add	r3, r2
 801da60:	e9d3 0100 	ldrd	r0, r1, [r3]
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801da6a:	3b01      	subs	r3, #1
 801da6c:	00db      	lsls	r3, r3, #3
 801da6e:	68fa      	ldr	r2, [r7, #12]
 801da70:	4413      	add	r3, r2
 801da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da76:	f7e2 fbf9 	bl	800026c <__aeabi_dsub>
 801da7a:	4602      	mov	r2, r0
 801da7c:	460b      	mov	r3, r1
 801da7e:	4620      	mov	r0, r4
 801da80:	4629      	mov	r1, r5
 801da82:	f7e2 fed5 	bl	8000830 <__aeabi_ddiv>
 801da86:	4602      	mov	r2, r0
 801da88:	460b      	mov	r3, r1
 801da8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 801da8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da90:	00db      	lsls	r3, r3, #3
 801da92:	68ba      	ldr	r2, [r7, #8]
 801da94:	4413      	add	r3, r2
 801da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 801da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daa0:	3301      	adds	r3, #1
 801daa2:	00db      	lsls	r3, r3, #3
 801daa4:	68ba      	ldr	r2, [r7, #8]
 801daa6:	4413      	add	r3, r2
 801daa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801daac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801dab0:	f7e2 fbdc 	bl	800026c <__aeabi_dsub>
 801dab4:	4602      	mov	r2, r0
 801dab6:	460b      	mov	r3, r1
 801dab8:	4610      	mov	r0, r2
 801daba:	4619      	mov	r1, r3
 801dabc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801dac0:	f7e2 fd8c 	bl	80005dc <__aeabi_dmul>
 801dac4:	4602      	mov	r2, r0
 801dac6:	460b      	mov	r3, r1
 801dac8:	4610      	mov	r0, r2
 801daca:	4619      	mov	r1, r3
 801dacc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801dad0:	f7e2 fbce 	bl	8000270 <__adddf3>
 801dad4:	4602      	mov	r2, r0
 801dad6:	460b      	mov	r3, r1
 801dad8:	ec43 2b17 	vmov	d7, r2, r3
}
 801dadc:	eeb0 0a47 	vmov.f32	s0, s14
 801dae0:	eef0 0a67 	vmov.f32	s1, s15
 801dae4:	3738      	adds	r7, #56	; 0x38
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801daec <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 801daec:	b5b0      	push	{r4, r5, r7, lr}
 801daee:	b0c0      	sub	sp, #256	; 0x100
 801daf0:	af04      	add	r7, sp, #16
 801daf2:	6578      	str	r0, [r7, #84]	; 0x54
 801daf4:	6539      	str	r1, [r7, #80]	; 0x50
 801daf6:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 801daf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dafc:	2248      	movs	r2, #72	; 0x48
 801dafe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801db00:	4618      	mov	r0, r3
 801db02:	f010 ff07 	bl	802e914 <memcpy>
  tau_idx_0 = 0.0;
 801db06:	f04f 0200 	mov.w	r2, #0
 801db0a:	f04f 0300 	mov.w	r3, #0
 801db0e:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 801db12:	f04f 0200 	mov.w	r2, #0
 801db16:	f04f 0300 	mov.w	r3, #0
 801db1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 801db1e:	f04f 0200 	mov.w	r2, #0
 801db22:	f04f 0300 	mov.w	r3, #0
 801db26:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 801db2a:	f04f 0200 	mov.w	r2, #0
 801db2e:	f04f 0300 	mov.w	r3, #0
 801db32:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 801db36:	f04f 0200 	mov.w	r2, #0
 801db3a:	f04f 0300 	mov.w	r3, #0
 801db3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 801db42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801db46:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 801db4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801db4e:	2202      	movs	r2, #2
 801db50:	4619      	mov	r1, r3
 801db52:	2002      	movs	r0, #2
 801db54:	f004 ffc0 	bl	8022ad8 <xnrm2_xDOlDEtw>
 801db58:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801db5c:	f04f 0200 	mov.w	r2, #0
 801db60:	f04f 0300 	mov.w	r3, #0
 801db64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801db68:	f7e2 ffa0 	bl	8000aac <__aeabi_dcmpeq>
 801db6c:	4603      	mov	r3, r0
 801db6e:	2b00      	cmp	r3, #0
 801db70:	f040 8172 	bne.w	801de58 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801db74:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 801db78:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801db7c:	eeb0 0a47 	vmov.f32	s0, s14
 801db80:	eef0 0a67 	vmov.f32	s1, s15
 801db84:	f002 fa14 	bl	801ffb0 <rt_hypotd_snf>
 801db88:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 801db8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801db90:	f04f 0200 	mov.w	r2, #0
 801db94:	f04f 0300 	mov.w	r3, #0
 801db98:	f7e2 ffa6 	bl	8000ae8 <__aeabi_dcmpge>
 801db9c:	4603      	mov	r3, r0
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d009      	beq.n	801dbb6 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 801dba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801dbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dbae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dbb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801dbb6:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 801dbba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dbbe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801dbc2:	f04f 0200 	mov.w	r2, #0
 801dbc6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801dbca:	4620      	mov	r0, r4
 801dbcc:	4629      	mov	r1, r5
 801dbce:	f7e2 ff77 	bl	8000ac0 <__aeabi_dcmplt>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	f000 80f1 	beq.w	801ddbc <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 801dbda:	2300      	movs	r3, #0
 801dbdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801dbe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dbe4:	3301      	adds	r3, #1
 801dbe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801dbea:	2301      	movs	r3, #1
 801dbec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dbf0:	e01f      	b.n	801dc32 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801dbf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dbf6:	00db      	lsls	r3, r3, #3
 801dbf8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dbfc:	4413      	add	r3, r2
 801dbfe:	3b80      	subs	r3, #128	; 0x80
 801dc00:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dc04:	f04f 0200 	mov.w	r2, #0
 801dc08:	4bc9      	ldr	r3, [pc, #804]	; (801df30 <qr_5a2P8Gh6+0x444>)
 801dc0a:	f7e2 fce7 	bl	80005dc <__aeabi_dmul>
 801dc0e:	4602      	mov	r2, r0
 801dc10:	460b      	mov	r3, r1
 801dc12:	4610      	mov	r0, r2
 801dc14:	4619      	mov	r1, r3
 801dc16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dc1a:	00db      	lsls	r3, r3, #3
 801dc1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dc20:	4413      	add	r3, r2
 801dc22:	3b80      	subs	r3, #128	; 0x80
 801dc24:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801dc28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dc2c:	3301      	adds	r3, #1
 801dc2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dc32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dc36:	2b02      	cmp	r3, #2
 801dc38:	dddb      	ble.n	801dbf2 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 801dc3a:	f04f 0200 	mov.w	r2, #0
 801dc3e:	4bbc      	ldr	r3, [pc, #752]	; (801df30 <qr_5a2P8Gh6+0x444>)
 801dc40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dc44:	f7e2 fcca 	bl	80005dc <__aeabi_dmul>
 801dc48:	4602      	mov	r2, r0
 801dc4a:	460b      	mov	r3, r1
 801dc4c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801dc50:	f04f 0200 	mov.w	r2, #0
 801dc54:	4bb6      	ldr	r3, [pc, #728]	; (801df30 <qr_5a2P8Gh6+0x444>)
 801dc56:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dc5a:	f7e2 fcbf 	bl	80005dc <__aeabi_dmul>
 801dc5e:	4602      	mov	r2, r0
 801dc60:	460b      	mov	r3, r1
 801dc62:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801dc66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dc6a:	643b      	str	r3, [r7, #64]	; 0x40
 801dc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dc70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dc74:	647b      	str	r3, [r7, #68]	; 0x44
 801dc76:	f04f 0200 	mov.w	r2, #0
 801dc7a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801dc7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801dc82:	f7e2 ff1d 	bl	8000ac0 <__aeabi_dcmplt>
 801dc86:	4603      	mov	r3, r0
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d003      	beq.n	801dc94 <qr_5a2P8Gh6+0x1a8>
 801dc8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dc90:	2b13      	cmp	r3, #19
 801dc92:	dda5      	ble.n	801dbe0 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 801dc94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dc98:	2202      	movs	r2, #2
 801dc9a:	4619      	mov	r1, r3
 801dc9c:	2002      	movs	r0, #2
 801dc9e:	f004 ff1b 	bl	8022ad8 <xnrm2_xDOlDEtw>
 801dca2:	eeb0 7a40 	vmov.f32	s14, s0
 801dca6:	eef0 7a60 	vmov.f32	s15, s1
 801dcaa:	eeb0 1a47 	vmov.f32	s2, s14
 801dcae:	eef0 1a67 	vmov.f32	s3, s15
 801dcb2:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801dcb6:	f002 f97b 	bl	801ffb0 <rt_hypotd_snf>
 801dcba:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801dcbe:	f04f 0200 	mov.w	r2, #0
 801dcc2:	f04f 0300 	mov.w	r3, #0
 801dcc6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dcca:	f7e2 ff0d 	bl	8000ae8 <__aeabi_dcmpge>
 801dcce:	4603      	mov	r3, r0
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d009      	beq.n	801dce8 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 801dcd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801dcd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801dcdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801dce0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801dce8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dcec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dcf0:	f7e2 fabc 	bl	800026c <__aeabi_dsub>
 801dcf4:	4602      	mov	r2, r0
 801dcf6:	460b      	mov	r3, r1
 801dcf8:	4610      	mov	r0, r2
 801dcfa:	4619      	mov	r1, r3
 801dcfc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dd00:	f7e2 fd96 	bl	8000830 <__aeabi_ddiv>
 801dd04:	4602      	mov	r2, r0
 801dd06:	460b      	mov	r3, r1
 801dd08:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 801dd0c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dd10:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801dd14:	f7e2 faaa 	bl	800026c <__aeabi_dsub>
 801dd18:	4602      	mov	r2, r0
 801dd1a:	460b      	mov	r3, r1
 801dd1c:	f04f 0000 	mov.w	r0, #0
 801dd20:	4984      	ldr	r1, [pc, #528]	; (801df34 <qr_5a2P8Gh6+0x448>)
 801dd22:	f7e2 fd85 	bl	8000830 <__aeabi_ddiv>
 801dd26:	4602      	mov	r2, r0
 801dd28:	460b      	mov	r3, r1
 801dd2a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801dd2e:	2301      	movs	r3, #1
 801dd30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dd34:	e01e      	b.n	801dd74 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 801dd36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dd3a:	00db      	lsls	r3, r3, #3
 801dd3c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dd40:	4413      	add	r3, r2
 801dd42:	3b80      	subs	r3, #128	; 0x80
 801dd44:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dd48:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dd4c:	f7e2 fc46 	bl	80005dc <__aeabi_dmul>
 801dd50:	4602      	mov	r2, r0
 801dd52:	460b      	mov	r3, r1
 801dd54:	4610      	mov	r0, r2
 801dd56:	4619      	mov	r1, r3
 801dd58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dd5c:	00db      	lsls	r3, r3, #3
 801dd5e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801dd62:	4413      	add	r3, r2
 801dd64:	3b80      	subs	r3, #128	; 0x80
 801dd66:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801dd6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dd6e:	3301      	adds	r3, #1
 801dd70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801dd74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dd78:	2b02      	cmp	r3, #2
 801dd7a:	dddc      	ble.n	801dd36 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dd82:	e010      	b.n	801dda6 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 801dd84:	f04f 0200 	mov.w	r2, #0
 801dd88:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801dd8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801dd90:	f7e2 fc24 	bl	80005dc <__aeabi_dmul>
 801dd94:	4602      	mov	r2, r0
 801dd96:	460b      	mov	r3, r1
 801dd98:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801dd9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dda0:	3301      	adds	r3, #1
 801dda2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801dda6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801ddaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ddae:	429a      	cmp	r2, r3
 801ddb0:	dbe8      	blt.n	801dd84 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 801ddb2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801ddb6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801ddba:	e04d      	b.n	801de58 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801ddbc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801ddc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801ddc4:	f7e2 fa52 	bl	800026c <__aeabi_dsub>
 801ddc8:	4602      	mov	r2, r0
 801ddca:	460b      	mov	r3, r1
 801ddcc:	4610      	mov	r0, r2
 801ddce:	4619      	mov	r1, r3
 801ddd0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801ddd4:	f7e2 fd2c 	bl	8000830 <__aeabi_ddiv>
 801ddd8:	4602      	mov	r2, r0
 801ddda:	460b      	mov	r3, r1
 801dddc:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 801dde0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801dde4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801dde8:	f7e2 fa40 	bl	800026c <__aeabi_dsub>
 801ddec:	4602      	mov	r2, r0
 801ddee:	460b      	mov	r3, r1
 801ddf0:	f04f 0000 	mov.w	r0, #0
 801ddf4:	494f      	ldr	r1, [pc, #316]	; (801df34 <qr_5a2P8Gh6+0x448>)
 801ddf6:	f7e2 fd1b 	bl	8000830 <__aeabi_ddiv>
 801ddfa:	4602      	mov	r2, r0
 801ddfc:	460b      	mov	r3, r1
 801ddfe:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801de02:	2301      	movs	r3, #1
 801de04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801de08:	e01e      	b.n	801de48 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 801de0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801de0e:	00db      	lsls	r3, r3, #3
 801de10:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801de14:	4413      	add	r3, r2
 801de16:	3b80      	subs	r3, #128	; 0x80
 801de18:	e9d3 0100 	ldrd	r0, r1, [r3]
 801de1c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801de20:	f7e2 fbdc 	bl	80005dc <__aeabi_dmul>
 801de24:	4602      	mov	r2, r0
 801de26:	460b      	mov	r3, r1
 801de28:	4610      	mov	r0, r2
 801de2a:	4619      	mov	r1, r3
 801de2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801de30:	00db      	lsls	r3, r3, #3
 801de32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801de36:	4413      	add	r3, r2
 801de38:	3b80      	subs	r3, #128	; 0x80
 801de3a:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 801de3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801de42:	3301      	adds	r3, #1
 801de44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801de48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801de4c:	2b02      	cmp	r3, #2
 801de4e:	dddc      	ble.n	801de0a <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 801de50:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801de54:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 801de58:	f04f 0200 	mov.w	r2, #0
 801de5c:	4b35      	ldr	r3, [pc, #212]	; (801df34 <qr_5a2P8Gh6+0x448>)
 801de5e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801de62:	f04f 0200 	mov.w	r2, #0
 801de66:	f04f 0300 	mov.w	r3, #0
 801de6a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801de6e:	f7e2 fe1d 	bl	8000aac <__aeabi_dcmpeq>
 801de72:	4603      	mov	r3, r0
 801de74:	2b00      	cmp	r3, #0
 801de76:	f040 8081 	bne.w	801df7c <qr_5a2P8Gh6+0x490>
    knt = 3;
 801de7a:	2303      	movs	r3, #3
 801de7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 801de80:	2302      	movs	r3, #2
 801de82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801de86:	e009      	b.n	801de9c <qr_5a2P8Gh6+0x3b0>
      knt--;
 801de88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801de8c:	3b01      	subs	r3, #1
 801de8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801de92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801de96:	3b01      	subs	r3, #1
 801de98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801de9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	dd11      	ble.n	801dec8 <qr_5a2P8Gh6+0x3dc>
 801dea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801dea8:	00db      	lsls	r3, r3, #3
 801deaa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801deae:	4413      	add	r3, r2
 801deb0:	3b80      	subs	r3, #128	; 0x80
 801deb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801deb6:	f04f 0200 	mov.w	r2, #0
 801deba:	f04f 0300 	mov.w	r3, #0
 801debe:	f7e2 fdf5 	bl	8000aac <__aeabi_dcmpeq>
 801dec2:	4603      	mov	r3, r0
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d1df      	bne.n	801de88 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 801dec8:	2302      	movs	r3, #2
 801deca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 801dece:	2300      	movs	r3, #0
 801ded0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801ded4:	e049      	b.n	801df6a <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 801ded6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801deda:	4613      	mov	r3, r2
 801dedc:	005b      	lsls	r3, r3, #1
 801dede:	4413      	add	r3, r2
 801dee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 801dee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801dee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 801deec:	2300      	movs	r3, #0
 801deee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 801def2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801def6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801defa:	441a      	add	r2, r3
 801defc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801df00:	4293      	cmp	r3, r2
 801df02:	da1f      	bge.n	801df44 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 801df04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801df08:	00db      	lsls	r3, r3, #3
 801df0a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801df0e:	4413      	add	r3, r2
 801df10:	3b80      	subs	r3, #128	; 0x80
 801df12:	e9d3 0100 	ldrd	r0, r1, [r3]
 801df16:	f04f 0200 	mov.w	r2, #0
 801df1a:	f04f 0300 	mov.w	r3, #0
 801df1e:	f7e2 fdc5 	bl	8000aac <__aeabi_dcmpeq>
 801df22:	4603      	mov	r3, r0
 801df24:	2b00      	cmp	r3, #0
 801df26:	d107      	bne.n	801df38 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 801df28:	2301      	movs	r3, #1
 801df2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801df2e:	e011      	b.n	801df54 <qr_5a2P8Gh6+0x468>
 801df30:	7c900000 	.word	0x7c900000
 801df34:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801df38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801df3c:	3301      	adds	r3, #1
 801df3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801df42:	e007      	b.n	801df54 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 801df44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801df48:	3b01      	subs	r3, #1
 801df4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 801df4e:	2302      	movs	r3, #2
 801df50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801df54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d0c7      	beq.n	801deec <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 801df5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801df60:	2b01      	cmp	r3, #1
 801df62:	d102      	bne.n	801df6a <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 801df64:	2301      	movs	r3, #1
 801df66:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 801df6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d10a      	bne.n	801df88 <qr_5a2P8Gh6+0x49c>
 801df72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801df76:	2b00      	cmp	r3, #0
 801df78:	dcad      	bgt.n	801ded6 <qr_5a2P8Gh6+0x3ea>
 801df7a:	e005      	b.n	801df88 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 801df7c:	2300      	movs	r3, #0
 801df7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801df82:	2300      	movs	r3, #0
 801df84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801df88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	dd29      	ble.n	801dfe4 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 801df90:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801df94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801df98:	9302      	str	r3, [sp, #8]
 801df9a:	2301      	movs	r3, #1
 801df9c:	9301      	str	r3, [sp, #4]
 801df9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dfa2:	9300      	str	r3, [sp, #0]
 801dfa4:	2304      	movs	r3, #4
 801dfa6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801dfaa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801dfae:	f004 f94f 	bl	8022250 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 801dfb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801dfb6:	63bb      	str	r3, [r7, #56]	; 0x38
 801dfb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801dfbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801dfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dfc2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801dfc6:	2304      	movs	r3, #4
 801dfc8:	9301      	str	r3, [sp, #4]
 801dfca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dfce:	9300      	str	r3, [sp, #0]
 801dfd0:	4613      	mov	r3, r2
 801dfd2:	2201      	movs	r2, #1
 801dfd4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801dfd8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801dfdc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801dfe0:	f004 fa3f 	bl	8022462 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 801dfe4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801dfe8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 801dfec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801dff0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 801dff4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dff8:	2206      	movs	r2, #6
 801dffa:	4619      	mov	r1, r3
 801dffc:	2001      	movs	r0, #1
 801dffe:	f004 fd6b 	bl	8022ad8 <xnrm2_xDOlDEtw>
 801e002:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 801e006:	f04f 0200 	mov.w	r2, #0
 801e00a:	f04f 0300 	mov.w	r3, #0
 801e00e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e012:	f7e2 fd4b 	bl	8000aac <__aeabi_dcmpeq>
 801e016:	4603      	mov	r3, r0
 801e018:	2b00      	cmp	r3, #0
 801e01a:	f040 8170 	bne.w	801e2fe <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 801e01e:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 801e022:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 801e026:	eeb0 0a47 	vmov.f32	s0, s14
 801e02a:	eef0 0a67 	vmov.f32	s1, s15
 801e02e:	f001 ffbf 	bl	801ffb0 <rt_hypotd_snf>
 801e032:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 801e036:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801e03a:	f04f 0200 	mov.w	r2, #0
 801e03e:	f04f 0300 	mov.w	r3, #0
 801e042:	f7e2 fd51 	bl	8000ae8 <__aeabi_dcmpge>
 801e046:	4603      	mov	r3, r0
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d009      	beq.n	801e060 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 801e04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801e054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e05c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801e060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e064:	633b      	str	r3, [r7, #48]	; 0x30
 801e066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e06a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e06e:	637b      	str	r3, [r7, #52]	; 0x34
 801e070:	f04f 0200 	mov.w	r2, #0
 801e074:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e078:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801e07c:	f7e2 fd20 	bl	8000ac0 <__aeabi_dcmplt>
 801e080:	4603      	mov	r3, r0
 801e082:	2b00      	cmp	r3, #0
 801e084:	f000 80ef 	beq.w	801e266 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 801e088:	2300      	movs	r3, #0
 801e08a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 801e08e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e092:	3301      	adds	r3, #1
 801e094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e098:	2305      	movs	r3, #5
 801e09a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e09e:	e01f      	b.n	801e0e0 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801e0a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e0a4:	00db      	lsls	r3, r3, #3
 801e0a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e0aa:	4413      	add	r3, r2
 801e0ac:	3b80      	subs	r3, #128	; 0x80
 801e0ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e0b2:	f04f 0200 	mov.w	r2, #0
 801e0b6:	4bc9      	ldr	r3, [pc, #804]	; (801e3dc <qr_5a2P8Gh6+0x8f0>)
 801e0b8:	f7e2 fa90 	bl	80005dc <__aeabi_dmul>
 801e0bc:	4602      	mov	r2, r0
 801e0be:	460b      	mov	r3, r1
 801e0c0:	4610      	mov	r0, r2
 801e0c2:	4619      	mov	r1, r3
 801e0c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e0c8:	00db      	lsls	r3, r3, #3
 801e0ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e0ce:	4413      	add	r3, r2
 801e0d0:	3b80      	subs	r3, #128	; 0x80
 801e0d2:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e0d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e0da:	3301      	adds	r3, #1
 801e0dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e0e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e0e4:	2b05      	cmp	r3, #5
 801e0e6:	dddb      	ble.n	801e0a0 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 801e0e8:	f04f 0200 	mov.w	r2, #0
 801e0ec:	4bbb      	ldr	r3, [pc, #748]	; (801e3dc <qr_5a2P8Gh6+0x8f0>)
 801e0ee:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e0f2:	f7e2 fa73 	bl	80005dc <__aeabi_dmul>
 801e0f6:	4602      	mov	r2, r0
 801e0f8:	460b      	mov	r3, r1
 801e0fa:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 801e0fe:	f04f 0200 	mov.w	r2, #0
 801e102:	4bb6      	ldr	r3, [pc, #728]	; (801e3dc <qr_5a2P8Gh6+0x8f0>)
 801e104:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801e108:	f7e2 fa68 	bl	80005dc <__aeabi_dmul>
 801e10c:	4602      	mov	r2, r0
 801e10e:	460b      	mov	r3, r1
 801e110:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801e114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e118:	62bb      	str	r3, [r7, #40]	; 0x28
 801e11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e122:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e124:	f04f 0200 	mov.w	r2, #0
 801e128:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e12c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801e130:	f7e2 fcc6 	bl	8000ac0 <__aeabi_dcmplt>
 801e134:	4603      	mov	r3, r0
 801e136:	2b00      	cmp	r3, #0
 801e138:	d003      	beq.n	801e142 <qr_5a2P8Gh6+0x656>
 801e13a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e13e:	2b13      	cmp	r3, #19
 801e140:	dda5      	ble.n	801e08e <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 801e142:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e146:	2206      	movs	r2, #6
 801e148:	4619      	mov	r1, r3
 801e14a:	2001      	movs	r0, #1
 801e14c:	f004 fcc4 	bl	8022ad8 <xnrm2_xDOlDEtw>
 801e150:	eeb0 7a40 	vmov.f32	s14, s0
 801e154:	eef0 7a60 	vmov.f32	s15, s1
 801e158:	eeb0 1a47 	vmov.f32	s2, s14
 801e15c:	eef0 1a67 	vmov.f32	s3, s15
 801e160:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 801e164:	f001 ff24 	bl	801ffb0 <rt_hypotd_snf>
 801e168:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 801e16c:	f04f 0200 	mov.w	r2, #0
 801e170:	f04f 0300 	mov.w	r3, #0
 801e174:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801e178:	f7e2 fcb6 	bl	8000ae8 <__aeabi_dcmpge>
 801e17c:	4603      	mov	r3, r0
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d009      	beq.n	801e196 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 801e182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801e18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e18e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801e196:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e19a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e19e:	f7e2 f865 	bl	800026c <__aeabi_dsub>
 801e1a2:	4602      	mov	r2, r0
 801e1a4:	460b      	mov	r3, r1
 801e1a6:	4610      	mov	r0, r2
 801e1a8:	4619      	mov	r1, r3
 801e1aa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e1ae:	f7e2 fb3f 	bl	8000830 <__aeabi_ddiv>
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	460b      	mov	r3, r1
 801e1b6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 801e1ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e1be:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 801e1c2:	f7e2 f853 	bl	800026c <__aeabi_dsub>
 801e1c6:	4602      	mov	r2, r0
 801e1c8:	460b      	mov	r3, r1
 801e1ca:	f04f 0000 	mov.w	r0, #0
 801e1ce:	4984      	ldr	r1, [pc, #528]	; (801e3e0 <qr_5a2P8Gh6+0x8f4>)
 801e1d0:	f7e2 fb2e 	bl	8000830 <__aeabi_ddiv>
 801e1d4:	4602      	mov	r2, r0
 801e1d6:	460b      	mov	r3, r1
 801e1d8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e1dc:	2305      	movs	r3, #5
 801e1de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e1e2:	e01c      	b.n	801e21e <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 801e1e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e1e8:	00db      	lsls	r3, r3, #3
 801e1ea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e1ee:	4413      	add	r3, r2
 801e1f0:	3b80      	subs	r3, #128	; 0x80
 801e1f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e1f6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e1fa:	f7e2 f9ef 	bl	80005dc <__aeabi_dmul>
 801e1fe:	4602      	mov	r2, r0
 801e200:	460b      	mov	r3, r1
 801e202:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e206:	00c9      	lsls	r1, r1, #3
 801e208:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e20c:	4401      	add	r1, r0
 801e20e:	3980      	subs	r1, #128	; 0x80
 801e210:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e214:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e218:	3301      	adds	r3, #1
 801e21a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e21e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e222:	2b05      	cmp	r3, #5
 801e224:	ddde      	ble.n	801e1e4 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e226:	2300      	movs	r3, #0
 801e228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e22c:	e010      	b.n	801e250 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 801e22e:	f04f 0200 	mov.w	r2, #0
 801e232:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801e236:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e23a:	f7e2 f9cf 	bl	80005dc <__aeabi_dmul>
 801e23e:	4602      	mov	r2, r0
 801e240:	460b      	mov	r3, r1
 801e242:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801e246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e24a:	3301      	adds	r3, #1
 801e24c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e250:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e258:	429a      	cmp	r2, r3
 801e25a:	dbe8      	blt.n	801e22e <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 801e25c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e260:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 801e264:	e04b      	b.n	801e2fe <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 801e266:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801e26a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801e26e:	f7e1 fffd 	bl	800026c <__aeabi_dsub>
 801e272:	4602      	mov	r2, r0
 801e274:	460b      	mov	r3, r1
 801e276:	4610      	mov	r0, r2
 801e278:	4619      	mov	r1, r3
 801e27a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e27e:	f7e2 fad7 	bl	8000830 <__aeabi_ddiv>
 801e282:	4602      	mov	r2, r0
 801e284:	460b      	mov	r3, r1
 801e286:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 801e28a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801e28e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e292:	f7e1 ffeb 	bl	800026c <__aeabi_dsub>
 801e296:	4602      	mov	r2, r0
 801e298:	460b      	mov	r3, r1
 801e29a:	f04f 0000 	mov.w	r0, #0
 801e29e:	4950      	ldr	r1, [pc, #320]	; (801e3e0 <qr_5a2P8Gh6+0x8f4>)
 801e2a0:	f7e2 fac6 	bl	8000830 <__aeabi_ddiv>
 801e2a4:	4602      	mov	r2, r0
 801e2a6:	460b      	mov	r3, r1
 801e2a8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e2ac:	2305      	movs	r3, #5
 801e2ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2b2:	e01c      	b.n	801e2ee <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 801e2b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2b8:	00db      	lsls	r3, r3, #3
 801e2ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e2be:	4413      	add	r3, r2
 801e2c0:	3b80      	subs	r3, #128	; 0x80
 801e2c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e2c6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e2ca:	f7e2 f987 	bl	80005dc <__aeabi_dmul>
 801e2ce:	4602      	mov	r2, r0
 801e2d0:	460b      	mov	r3, r1
 801e2d2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e2d6:	00c9      	lsls	r1, r1, #3
 801e2d8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e2dc:	4401      	add	r1, r0
 801e2de:	3980      	subs	r1, #128	; 0x80
 801e2e0:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 801e2e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2e8:	3301      	adds	r3, #1
 801e2ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e2ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e2f2:	2b05      	cmp	r3, #5
 801e2f4:	ddde      	ble.n	801e2b4 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 801e2f6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801e2fa:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 801e2fe:	f04f 0200 	mov.w	r2, #0
 801e302:	4b37      	ldr	r3, [pc, #220]	; (801e3e0 <qr_5a2P8Gh6+0x8f4>)
 801e304:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e308:	f04f 0200 	mov.w	r2, #0
 801e30c:	f04f 0300 	mov.w	r3, #0
 801e310:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e314:	f7e2 fbca 	bl	8000aac <__aeabi_dcmpeq>
 801e318:	4603      	mov	r3, r0
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d162      	bne.n	801e3e4 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 801e31e:	2302      	movs	r3, #2
 801e320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 801e324:	2305      	movs	r3, #5
 801e326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e32a:	e009      	b.n	801e340 <qr_5a2P8Gh6+0x854>
      knt--;
 801e32c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e330:	3b01      	subs	r3, #1
 801e332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 801e336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e33a:	3b01      	subs	r3, #1
 801e33c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801e340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e344:	2b00      	cmp	r3, #0
 801e346:	dd11      	ble.n	801e36c <qr_5a2P8Gh6+0x880>
 801e348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e34c:	00db      	lsls	r3, r3, #3
 801e34e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e352:	4413      	add	r3, r2
 801e354:	3b80      	subs	r3, #128	; 0x80
 801e356:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e35a:	f04f 0200 	mov.w	r2, #0
 801e35e:	f04f 0300 	mov.w	r3, #0
 801e362:	f7e2 fba3 	bl	8000aac <__aeabi_dcmpeq>
 801e366:	4603      	mov	r3, r0
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d1df      	bne.n	801e32c <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 801e36c:	2301      	movs	r3, #1
 801e36e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 801e372:	2307      	movs	r3, #7
 801e374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 801e378:	2300      	movs	r3, #0
 801e37a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 801e37e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e382:	3306      	adds	r3, #6
 801e384:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e388:	429a      	cmp	r2, r3
 801e38a:	dc1b      	bgt.n	801e3c4 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 801e38c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e390:	00db      	lsls	r3, r3, #3
 801e392:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e396:	4413      	add	r3, r2
 801e398:	3b80      	subs	r3, #128	; 0x80
 801e39a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e39e:	f04f 0200 	mov.w	r2, #0
 801e3a2:	f04f 0300 	mov.w	r3, #0
 801e3a6:	f7e2 fb81 	bl	8000aac <__aeabi_dcmpeq>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d103      	bne.n	801e3b8 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 801e3b0:	2301      	movs	r3, #1
 801e3b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e3b6:	e00b      	b.n	801e3d0 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 801e3b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e3bc:	3301      	adds	r3, #1
 801e3be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801e3c2:	e005      	b.n	801e3d0 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 801e3ca:	2301      	movs	r3, #1
 801e3cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e3d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d0cf      	beq.n	801e378 <qr_5a2P8Gh6+0x88c>
 801e3d8:	e00a      	b.n	801e3f0 <qr_5a2P8Gh6+0x904>
 801e3da:	bf00      	nop
 801e3dc:	7c900000 	.word	0x7c900000
 801e3e0:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 801e3f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	dd29      	ble.n	801e44c <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 801e3f8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e3fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e400:	9302      	str	r3, [sp, #8]
 801e402:	2305      	movs	r3, #5
 801e404:	9301      	str	r3, [sp, #4]
 801e406:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e40a:	9300      	str	r3, [sp, #0]
 801e40c:	2308      	movs	r3, #8
 801e40e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e412:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e416:	f003 ff1b 	bl	8022250 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 801e41a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e41e:	623b      	str	r3, [r7, #32]
 801e420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e428:	627b      	str	r3, [r7, #36]	; 0x24
 801e42a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e42e:	2308      	movs	r3, #8
 801e430:	9301      	str	r3, [sp, #4]
 801e432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e436:	9300      	str	r3, [sp, #0]
 801e438:	4613      	mov	r3, r2
 801e43a:	2205      	movs	r2, #5
 801e43c:	ed97 0b08 	vldr	d0, [r7, #32]
 801e440:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801e444:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801e448:	f004 f80b 	bl	8022462 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 801e44c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801e450:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 801e454:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801e458:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e45a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e45e:	2301      	movs	r3, #1
 801e460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e464:	e00f      	b.n	801e486 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 801e466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e46a:	00db      	lsls	r3, r3, #3
 801e46c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e46e:	18d1      	adds	r1, r2, r3
 801e470:	f04f 0200 	mov.w	r2, #0
 801e474:	f04f 0300 	mov.w	r3, #0
 801e478:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801e47c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e480:	3301      	adds	r3, #1
 801e482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e48a:	2b02      	cmp	r3, #2
 801e48c:	ddeb      	ble.n	801e466 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 801e48e:	f04f 0200 	mov.w	r2, #0
 801e492:	f04f 0300 	mov.w	r3, #0
 801e496:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e49a:	2300      	movs	r3, #0
 801e49c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e4a0:	e016      	b.n	801e4d0 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 801e4a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4a6:	3303      	adds	r3, #3
 801e4a8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e4ac:	3203      	adds	r2, #3
 801e4ae:	00d2      	lsls	r2, r2, #3
 801e4b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e4b2:	4411      	add	r1, r2
 801e4b4:	00db      	lsls	r3, r3, #3
 801e4b6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e4ba:	4413      	add	r3, r2
 801e4bc:	3b80      	subs	r3, #128	; 0x80
 801e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e4c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e4d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4d4:	2b01      	cmp	r3, #1
 801e4d6:	dde4      	ble.n	801e4a2 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 801e4d8:	e010      	b.n	801e4fc <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 801e4da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4de:	3303      	adds	r3, #3
 801e4e0:	00db      	lsls	r3, r3, #3
 801e4e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e4e4:	18d1      	adds	r1, r2, r3
 801e4e6:	f04f 0200 	mov.w	r2, #0
 801e4ea:	f04f 0300 	mov.w	r3, #0
 801e4ee:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801e4f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e4f6:	3301      	adds	r3, #1
 801e4f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 801e4fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e500:	2b02      	cmp	r3, #2
 801e502:	ddea      	ble.n	801e4da <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 801e504:	f04f 0200 	mov.w	r2, #0
 801e508:	f04f 0300 	mov.w	r3, #0
 801e50c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e510:	2300      	movs	r3, #0
 801e512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e516:	e016      	b.n	801e546 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 801e518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e51c:	3306      	adds	r3, #6
 801e51e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e522:	3206      	adds	r2, #6
 801e524:	00d2      	lsls	r2, r2, #3
 801e526:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801e528:	4411      	add	r1, r2
 801e52a:	00db      	lsls	r3, r3, #3
 801e52c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e530:	4413      	add	r3, r2
 801e532:	3b80      	subs	r3, #128	; 0x80
 801e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e538:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801e53c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e540:	3301      	adds	r3, #1
 801e542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e54a:	2b02      	cmp	r3, #2
 801e54c:	dde4      	ble.n	801e518 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 801e54e:	f04f 0200 	mov.w	r2, #0
 801e552:	f04f 0300 	mov.w	r3, #0
 801e556:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 801e55a:	f04f 0200 	mov.w	r2, #0
 801e55e:	4bc8      	ldr	r3, [pc, #800]	; (801e880 <qr_5a2P8Gh6+0xd94>)
 801e560:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e564:	2300      	movs	r3, #0
 801e566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e56a:	e014      	b.n	801e596 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 801e56c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e570:	f1c3 0307 	rsb	r3, r3, #7
 801e574:	00db      	lsls	r3, r3, #3
 801e576:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e57a:	4413      	add	r3, r2
 801e57c:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 801e580:	f04f 0200 	mov.w	r2, #0
 801e584:	f04f 0300 	mov.w	r3, #0
 801e588:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801e58c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e590:	3301      	adds	r3, #1
 801e592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e59a:	2b01      	cmp	r3, #1
 801e59c:	dde6      	ble.n	801e56c <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 801e59e:	f04f 0200 	mov.w	r2, #0
 801e5a2:	4bb7      	ldr	r3, [pc, #732]	; (801e880 <qr_5a2P8Gh6+0xd94>)
 801e5a4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 801e5a8:	f04f 0200 	mov.w	r2, #0
 801e5ac:	f04f 0300 	mov.w	r3, #0
 801e5b0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801e5b4:	f7e2 fa7a 	bl	8000aac <__aeabi_dcmpeq>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d15c      	bne.n	801e678 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 801e5be:	2307      	movs	r3, #7
 801e5c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e5c4:	e009      	b.n	801e5da <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 801e5c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e5ca:	3b01      	subs	r3, #1
 801e5cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e5d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e5d4:	3b01      	subs	r3, #1
 801e5d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e5da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	dd12      	ble.n	801e608 <qr_5a2P8Gh6+0xb1c>
 801e5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e5e6:	3b02      	subs	r3, #2
 801e5e8:	00db      	lsls	r3, r3, #3
 801e5ea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e5ee:	4413      	add	r3, r2
 801e5f0:	3b80      	subs	r3, #128	; 0x80
 801e5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e5f6:	f04f 0200 	mov.w	r2, #0
 801e5fa:	f04f 0300 	mov.w	r3, #0
 801e5fe:	f7e2 fa55 	bl	8000aac <__aeabi_dcmpeq>
 801e602:	4603      	mov	r3, r0
 801e604:	2b00      	cmp	r3, #0
 801e606:	d1de      	bne.n	801e5c6 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 801e608:	2301      	movs	r3, #1
 801e60a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 801e60e:	2308      	movs	r3, #8
 801e610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 801e614:	2300      	movs	r3, #0
 801e616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 801e61a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e61e:	3307      	adds	r3, #7
 801e620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e624:	429a      	cmp	r2, r3
 801e626:	dc1c      	bgt.n	801e662 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 801e628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e62c:	3b01      	subs	r3, #1
 801e62e:	00db      	lsls	r3, r3, #3
 801e630:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e634:	4413      	add	r3, r2
 801e636:	3b80      	subs	r3, #128	; 0x80
 801e638:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e63c:	f04f 0200 	mov.w	r2, #0
 801e640:	f04f 0300 	mov.w	r3, #0
 801e644:	f7e2 fa32 	bl	8000aac <__aeabi_dcmpeq>
 801e648:	4603      	mov	r3, r0
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d103      	bne.n	801e656 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 801e64e:	2301      	movs	r3, #1
 801e650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e654:	e00b      	b.n	801e66e <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 801e656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e65a:	3301      	adds	r3, #1
 801e65c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e660:	e005      	b.n	801e66e <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 801e662:	2300      	movs	r3, #0
 801e664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 801e668:	2301      	movs	r3, #1
 801e66a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 801e66e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e672:	2b00      	cmp	r3, #0
 801e674:	d0ce      	beq.n	801e614 <qr_5a2P8Gh6+0xb28>
 801e676:	e005      	b.n	801e684 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 801e678:	2300      	movs	r3, #0
 801e67a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e67e:	2300      	movs	r3, #0
 801e680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e688:	2b00      	cmp	r3, #0
 801e68a:	dd29      	ble.n	801e6e0 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 801e68c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e690:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e694:	9302      	str	r3, [sp, #8]
 801e696:	2305      	movs	r3, #5
 801e698:	9301      	str	r3, [sp, #4]
 801e69a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e69e:	9300      	str	r3, [sp, #0]
 801e6a0:	2308      	movs	r3, #8
 801e6a2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e6a6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e6aa:	f003 fdd1 	bl	8022250 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 801e6ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e6b2:	61bb      	str	r3, [r7, #24]
 801e6b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e6b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e6bc:	61fb      	str	r3, [r7, #28]
 801e6be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e6c2:	2308      	movs	r3, #8
 801e6c4:	9301      	str	r3, [sp, #4]
 801e6c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e6ca:	9300      	str	r3, [sp, #0]
 801e6cc:	4613      	mov	r3, r2
 801e6ce:	2205      	movs	r2, #5
 801e6d0:	ed97 0b06 	vldr	d0, [r7, #24]
 801e6d4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e6d8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e6dc:	f003 fec1 	bl	8022462 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e6e0:	2305      	movs	r3, #5
 801e6e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e6e6:	e024      	b.n	801e732 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 801e6e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e6ec:	00db      	lsls	r3, r3, #3
 801e6ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e6f2:	4413      	add	r3, r2
 801e6f4:	3b80      	subs	r3, #128	; 0x80
 801e6f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e6fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e6fe:	613b      	str	r3, [r7, #16]
 801e700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e708:	617b      	str	r3, [r7, #20]
 801e70a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e70e:	f7e1 ff65 	bl	80005dc <__aeabi_dmul>
 801e712:	4602      	mov	r2, r0
 801e714:	460b      	mov	r3, r1
 801e716:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e71a:	00c9      	lsls	r1, r1, #3
 801e71c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e720:	4401      	add	r1, r0
 801e722:	3980      	subs	r1, #128	; 0x80
 801e724:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 801e728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e72c:	3301      	adds	r3, #1
 801e72e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e736:	2b05      	cmp	r3, #5
 801e738:	ddd6      	ble.n	801e6e8 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 801e73a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801e73e:	f04f 0000 	mov.w	r0, #0
 801e742:	494f      	ldr	r1, [pc, #316]	; (801e880 <qr_5a2P8Gh6+0xd94>)
 801e744:	f7e1 fd92 	bl	800026c <__aeabi_dsub>
 801e748:	4602      	mov	r2, r0
 801e74a:	460b      	mov	r3, r1
 801e74c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 801e750:	f04f 0200 	mov.w	r2, #0
 801e754:	f04f 0300 	mov.w	r3, #0
 801e758:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 801e75c:	f04f 0200 	mov.w	r2, #0
 801e760:	4b47      	ldr	r3, [pc, #284]	; (801e880 <qr_5a2P8Gh6+0xd94>)
 801e762:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 801e766:	f04f 0200 	mov.w	r2, #0
 801e76a:	f04f 0300 	mov.w	r3, #0
 801e76e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801e772:	f7e2 f99b 	bl	8000aac <__aeabi_dcmpeq>
 801e776:	4603      	mov	r3, r0
 801e778:	2b00      	cmp	r3, #0
 801e77a:	f040 8083 	bne.w	801e884 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 801e77e:	2303      	movs	r3, #3
 801e780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 801e784:	2304      	movs	r3, #4
 801e786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e78a:	e009      	b.n	801e7a0 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 801e78c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e790:	3b01      	subs	r3, #1
 801e792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 801e796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e79a:	3b01      	subs	r3, #1
 801e79c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801e7a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	dd12      	ble.n	801e7ce <qr_5a2P8Gh6+0xce2>
 801e7a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7ac:	3b02      	subs	r3, #2
 801e7ae:	00db      	lsls	r3, r3, #3
 801e7b0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e7b4:	4413      	add	r3, r2
 801e7b6:	3b80      	subs	r3, #128	; 0x80
 801e7b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e7bc:	f04f 0200 	mov.w	r2, #0
 801e7c0:	f04f 0300 	mov.w	r3, #0
 801e7c4:	f7e2 f972 	bl	8000aac <__aeabi_dcmpeq>
 801e7c8:	4603      	mov	r3, r0
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d1de      	bne.n	801e78c <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 801e7ce:	2302      	movs	r3, #2
 801e7d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e7da:	e048      	b.n	801e86e <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 801e7dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7e0:	1e5a      	subs	r2, r3, #1
 801e7e2:	4613      	mov	r3, r2
 801e7e4:	005b      	lsls	r3, r3, #1
 801e7e6:	4413      	add	r3, r2
 801e7e8:	3304      	adds	r3, #4
 801e7ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 801e7ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e7f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 801e7fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e804:	4413      	add	r3, r2
 801e806:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e80a:	429a      	cmp	r2, r3
 801e80c:	da1c      	bge.n	801e848 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 801e80e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e812:	3b01      	subs	r3, #1
 801e814:	00db      	lsls	r3, r3, #3
 801e816:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e81a:	4413      	add	r3, r2
 801e81c:	3b80      	subs	r3, #128	; 0x80
 801e81e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e822:	f04f 0200 	mov.w	r2, #0
 801e826:	f04f 0300 	mov.w	r3, #0
 801e82a:	f7e2 f93f 	bl	8000aac <__aeabi_dcmpeq>
 801e82e:	4603      	mov	r3, r0
 801e830:	2b00      	cmp	r3, #0
 801e832:	d103      	bne.n	801e83c <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 801e834:	2301      	movs	r3, #1
 801e836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801e83a:	e00d      	b.n	801e858 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 801e83c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e840:	3301      	adds	r3, #1
 801e842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801e846:	e007      	b.n	801e858 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 801e848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e84c:	3b01      	subs	r3, #1
 801e84e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 801e852:	2302      	movs	r3, #2
 801e854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 801e858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d0ca      	beq.n	801e7f6 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 801e860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e864:	2b01      	cmp	r3, #1
 801e866:	d102      	bne.n	801e86e <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 801e868:	2301      	movs	r3, #1
 801e86a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 801e86e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e872:	2b00      	cmp	r3, #0
 801e874:	d10c      	bne.n	801e890 <qr_5a2P8Gh6+0xda4>
 801e876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	dcae      	bgt.n	801e7dc <qr_5a2P8Gh6+0xcf0>
 801e87e:	e007      	b.n	801e890 <qr_5a2P8Gh6+0xda4>
 801e880:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801e884:	2300      	movs	r3, #0
 801e886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 801e88a:	2300      	movs	r3, #0
 801e88c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 801e890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e894:	2b00      	cmp	r3, #0
 801e896:	dd29      	ble.n	801e8ec <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 801e898:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801e89c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e8a0:	9302      	str	r3, [sp, #8]
 801e8a2:	2301      	movs	r3, #1
 801e8a4:	9301      	str	r3, [sp, #4]
 801e8a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e8aa:	9300      	str	r3, [sp, #0]
 801e8ac:	2304      	movs	r3, #4
 801e8ae:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e8b2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e8b6:	f003 fccb 	bl	8022250 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 801e8ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e8be:	60bb      	str	r3, [r7, #8]
 801e8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e8c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e8c8:	60fb      	str	r3, [r7, #12]
 801e8ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e8ce:	2304      	movs	r3, #4
 801e8d0:	9301      	str	r3, [sp, #4]
 801e8d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e8d6:	9300      	str	r3, [sp, #0]
 801e8d8:	4613      	mov	r3, r2
 801e8da:	2201      	movs	r2, #1
 801e8dc:	ed97 0b02 	vldr	d0, [r7, #8]
 801e8e0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e8e4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801e8e8:	f003 fdbb 	bl	8022462 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e8ec:	2301      	movs	r3, #1
 801e8ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e8f2:	e024      	b.n	801e93e <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 801e8f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e8f8:	00db      	lsls	r3, r3, #3
 801e8fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e8fe:	4413      	add	r3, r2
 801e900:	3b80      	subs	r3, #128	; 0x80
 801e902:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e90a:	603b      	str	r3, [r7, #0]
 801e90c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e910:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801e914:	607b      	str	r3, [r7, #4]
 801e916:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e91a:	f7e1 fe5f 	bl	80005dc <__aeabi_dmul>
 801e91e:	4602      	mov	r2, r0
 801e920:	460b      	mov	r3, r1
 801e922:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801e926:	00c9      	lsls	r1, r1, #3
 801e928:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 801e92c:	4401      	add	r1, r0
 801e92e:	3980      	subs	r1, #128	; 0x80
 801e930:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 801e934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e938:	3301      	adds	r3, #1
 801e93a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e93e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e942:	2b02      	cmp	r3, #2
 801e944:	ddd6      	ble.n	801e8f4 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801e946:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801e94a:	f04f 0000 	mov.w	r0, #0
 801e94e:	492a      	ldr	r1, [pc, #168]	; (801e9f8 <qr_5a2P8Gh6+0xf0c>)
 801e950:	f7e1 fc8c 	bl	800026c <__aeabi_dsub>
 801e954:	4602      	mov	r2, r0
 801e956:	460b      	mov	r3, r1
 801e958:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 801e95c:	2300      	movs	r3, #0
 801e95e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e962:	2300      	movs	r3, #0
 801e964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e968:	e03d      	b.n	801e9e6 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 801e96a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e96e:	00db      	lsls	r3, r3, #3
 801e970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e972:	18d1      	adds	r1, r2, r3
 801e974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e978:	00db      	lsls	r3, r3, #3
 801e97a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e97e:	4413      	add	r3, r2
 801e980:	3b80      	subs	r3, #128	; 0x80
 801e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e986:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 801e98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e98e:	3301      	adds	r3, #1
 801e990:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e994:	3201      	adds	r2, #1
 801e996:	00d2      	lsls	r2, r2, #3
 801e998:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e99a:	4411      	add	r1, r2
 801e99c:	00db      	lsls	r3, r3, #3
 801e99e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e9a2:	4413      	add	r3, r2
 801e9a4:	3b80      	subs	r3, #128	; 0x80
 801e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9aa:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 801e9ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e9b2:	3302      	adds	r3, #2
 801e9b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e9b8:	3202      	adds	r2, #2
 801e9ba:	00d2      	lsls	r2, r2, #3
 801e9bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801e9be:	4411      	add	r1, r2
 801e9c0:	00db      	lsls	r3, r3, #3
 801e9c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801e9c6:	4413      	add	r3, r2
 801e9c8:	3b80      	subs	r3, #128	; 0x80
 801e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ce:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 801e9d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e9d6:	3303      	adds	r3, #3
 801e9d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 801e9dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e9e0:	3301      	adds	r3, #1
 801e9e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e9e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e9ea:	2b02      	cmp	r3, #2
 801e9ec:	ddbd      	ble.n	801e96a <qr_5a2P8Gh6+0xe7e>
  }
}
 801e9ee:	bf00      	nop
 801e9f0:	bf00      	nop
 801e9f2:	37f0      	adds	r7, #240	; 0xf0
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	bdb0      	pop	{r4, r5, r7, pc}
 801e9f8:	3ff00000 	.word	0x3ff00000

0801e9fc <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 801e9fc:	b5b0      	push	{r4, r5, r7, lr}
 801e9fe:	b0da      	sub	sp, #360	; 0x168
 801ea00:	af04      	add	r7, sp, #16
 801ea02:	66f8      	str	r0, [r7, #108]	; 0x6c
 801ea04:	66b9      	str	r1, [r7, #104]	; 0x68
 801ea06:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 801ea08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ea0c:	2290      	movs	r2, #144	; 0x90
 801ea0e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801ea10:	4618      	mov	r0, r3
 801ea12:	f00f ff7f 	bl	802e914 <memcpy>
  work[0] = 0.0;
 801ea16:	f04f 0200 	mov.w	r2, #0
 801ea1a:	f04f 0300 	mov.w	r3, #0
 801ea1e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 801ea22:	f04f 0200 	mov.w	r2, #0
 801ea26:	f04f 0300 	mov.w	r3, #0
 801ea2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 801ea2e:	f04f 0200 	mov.w	r2, #0
 801ea32:	f04f 0300 	mov.w	r3, #0
 801ea36:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 801ea3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801ea3e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 801ea42:	f04f 0200 	mov.w	r2, #0
 801ea46:	f04f 0300 	mov.w	r3, #0
 801ea4a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 801ea4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ea52:	2202      	movs	r2, #2
 801ea54:	4619      	mov	r1, r3
 801ea56:	2005      	movs	r0, #5
 801ea58:	f003 ff90 	bl	802297c <xnrm2_nLdASVZH>
 801ea5c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801ea60:	f04f 0200 	mov.w	r2, #0
 801ea64:	f04f 0300 	mov.w	r3, #0
 801ea68:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ea6c:	f7e2 f81e 	bl	8000aac <__aeabi_dcmpeq>
 801ea70:	4603      	mov	r3, r0
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	f040 8172 	bne.w	801ed5c <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 801ea78:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 801ea7c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801ea80:	eeb0 0a47 	vmov.f32	s0, s14
 801ea84:	eef0 0a67 	vmov.f32	s1, s15
 801ea88:	f001 fa92 	bl	801ffb0 <rt_hypotd_snf>
 801ea8c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 801ea90:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801ea94:	f04f 0200 	mov.w	r2, #0
 801ea98:	f04f 0300 	mov.w	r3, #0
 801ea9c:	f7e2 f824 	bl	8000ae8 <__aeabi_dcmpge>
 801eaa0:	4603      	mov	r3, r0
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d009      	beq.n	801eaba <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 801eaa6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801eaaa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801eaae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801eab2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eab6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801eaba:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 801eabe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801eac2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801eac6:	f04f 0200 	mov.w	r2, #0
 801eaca:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801eace:	4620      	mov	r0, r4
 801ead0:	4629      	mov	r1, r5
 801ead2:	f7e1 fff5 	bl	8000ac0 <__aeabi_dcmplt>
 801ead6:	4603      	mov	r3, r0
 801ead8:	2b00      	cmp	r3, #0
 801eada:	f000 80f1 	beq.w	801ecc0 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 801eade:	2300      	movs	r3, #0
 801eae0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801eae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eae8:	3301      	adds	r3, #1
 801eaea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801eaee:	2301      	movs	r3, #1
 801eaf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801eaf4:	e01f      	b.n	801eb36 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801eaf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eafa:	00db      	lsls	r3, r3, #3
 801eafc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb00:	4413      	add	r3, r2
 801eb02:	3bd0      	subs	r3, #208	; 0xd0
 801eb04:	e9d3 0100 	ldrd	r0, r1, [r3]
 801eb08:	f04f 0200 	mov.w	r2, #0
 801eb0c:	4bca      	ldr	r3, [pc, #808]	; (801ee38 <qr_DvOBrgQi+0x43c>)
 801eb0e:	f7e1 fd65 	bl	80005dc <__aeabi_dmul>
 801eb12:	4602      	mov	r2, r0
 801eb14:	460b      	mov	r3, r1
 801eb16:	4610      	mov	r0, r2
 801eb18:	4619      	mov	r1, r3
 801eb1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eb1e:	00db      	lsls	r3, r3, #3
 801eb20:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801eb24:	4413      	add	r3, r2
 801eb26:	3bd0      	subs	r3, #208	; 0xd0
 801eb28:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801eb2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eb30:	3301      	adds	r3, #1
 801eb32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801eb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eb3a:	2b05      	cmp	r3, #5
 801eb3c:	dddb      	ble.n	801eaf6 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 801eb3e:	f04f 0200 	mov.w	r2, #0
 801eb42:	4bbd      	ldr	r3, [pc, #756]	; (801ee38 <qr_DvOBrgQi+0x43c>)
 801eb44:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801eb48:	f7e1 fd48 	bl	80005dc <__aeabi_dmul>
 801eb4c:	4602      	mov	r2, r0
 801eb4e:	460b      	mov	r3, r1
 801eb50:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801eb54:	f04f 0200 	mov.w	r2, #0
 801eb58:	4bb7      	ldr	r3, [pc, #732]	; (801ee38 <qr_DvOBrgQi+0x43c>)
 801eb5a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801eb5e:	f7e1 fd3d 	bl	80005dc <__aeabi_dmul>
 801eb62:	4602      	mov	r2, r0
 801eb64:	460b      	mov	r3, r1
 801eb66:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801eb6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801eb6e:	65bb      	str	r3, [r7, #88]	; 0x58
 801eb70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801eb74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eb78:	65fb      	str	r3, [r7, #92]	; 0x5c
 801eb7a:	f04f 0200 	mov.w	r2, #0
 801eb7e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801eb82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801eb86:	f7e1 ff9b 	bl	8000ac0 <__aeabi_dcmplt>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d003      	beq.n	801eb98 <qr_DvOBrgQi+0x19c>
 801eb90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eb94:	2b13      	cmp	r3, #19
 801eb96:	dda5      	ble.n	801eae4 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 801eb98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eb9c:	2202      	movs	r2, #2
 801eb9e:	4619      	mov	r1, r3
 801eba0:	2005      	movs	r0, #5
 801eba2:	f003 feeb 	bl	802297c <xnrm2_nLdASVZH>
 801eba6:	eeb0 7a40 	vmov.f32	s14, s0
 801ebaa:	eef0 7a60 	vmov.f32	s15, s1
 801ebae:	eeb0 1a47 	vmov.f32	s2, s14
 801ebb2:	eef0 1a67 	vmov.f32	s3, s15
 801ebb6:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801ebba:	f001 f9f9 	bl	801ffb0 <rt_hypotd_snf>
 801ebbe:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801ebc2:	f04f 0200 	mov.w	r2, #0
 801ebc6:	f04f 0300 	mov.w	r3, #0
 801ebca:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ebce:	f7e1 ff8b 	bl	8000ae8 <__aeabi_dcmpge>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d009      	beq.n	801ebec <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 801ebd8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ebdc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ebe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ebe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ebe8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 801ebec:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ebf0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ebf4:	f7e1 fb3a 	bl	800026c <__aeabi_dsub>
 801ebf8:	4602      	mov	r2, r0
 801ebfa:	460b      	mov	r3, r1
 801ebfc:	4610      	mov	r0, r2
 801ebfe:	4619      	mov	r1, r3
 801ec00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ec04:	f7e1 fe14 	bl	8000830 <__aeabi_ddiv>
 801ec08:	4602      	mov	r2, r0
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 801ec10:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ec14:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801ec18:	f7e1 fb28 	bl	800026c <__aeabi_dsub>
 801ec1c:	4602      	mov	r2, r0
 801ec1e:	460b      	mov	r3, r1
 801ec20:	f04f 0000 	mov.w	r0, #0
 801ec24:	4985      	ldr	r1, [pc, #532]	; (801ee3c <qr_DvOBrgQi+0x440>)
 801ec26:	f7e1 fe03 	bl	8000830 <__aeabi_ddiv>
 801ec2a:	4602      	mov	r2, r0
 801ec2c:	460b      	mov	r3, r1
 801ec2e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801ec32:	2301      	movs	r3, #1
 801ec34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ec38:	e01e      	b.n	801ec78 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 801ec3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ec3e:	00db      	lsls	r3, r3, #3
 801ec40:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ec44:	4413      	add	r3, r2
 801ec46:	3bd0      	subs	r3, #208	; 0xd0
 801ec48:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ec4c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ec50:	f7e1 fcc4 	bl	80005dc <__aeabi_dmul>
 801ec54:	4602      	mov	r2, r0
 801ec56:	460b      	mov	r3, r1
 801ec58:	4610      	mov	r0, r2
 801ec5a:	4619      	mov	r1, r3
 801ec5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ec60:	00db      	lsls	r3, r3, #3
 801ec62:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ec66:	4413      	add	r3, r2
 801ec68:	3bd0      	subs	r3, #208	; 0xd0
 801ec6a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801ec6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ec72:	3301      	adds	r3, #1
 801ec74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801ec78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ec7c:	2b05      	cmp	r3, #5
 801ec7e:	dddc      	ble.n	801ec3a <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801ec80:	2300      	movs	r3, #0
 801ec82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ec86:	e010      	b.n	801ecaa <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 801ec88:	f04f 0200 	mov.w	r2, #0
 801ec8c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ec90:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ec94:	f7e1 fca2 	bl	80005dc <__aeabi_dmul>
 801ec98:	4602      	mov	r2, r0
 801ec9a:	460b      	mov	r3, r1
 801ec9c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801eca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801eca4:	3301      	adds	r3, #1
 801eca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ecaa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801ecae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ecb2:	429a      	cmp	r2, r3
 801ecb4:	dbe8      	blt.n	801ec88 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 801ecb6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ecba:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801ecbe:	e04d      	b.n	801ed5c <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 801ecc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801ecc4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ecc8:	f7e1 fad0 	bl	800026c <__aeabi_dsub>
 801eccc:	4602      	mov	r2, r0
 801ecce:	460b      	mov	r3, r1
 801ecd0:	4610      	mov	r0, r2
 801ecd2:	4619      	mov	r1, r3
 801ecd4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ecd8:	f7e1 fdaa 	bl	8000830 <__aeabi_ddiv>
 801ecdc:	4602      	mov	r2, r0
 801ecde:	460b      	mov	r3, r1
 801ece0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 801ece4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801ece8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ecec:	f7e1 fabe 	bl	800026c <__aeabi_dsub>
 801ecf0:	4602      	mov	r2, r0
 801ecf2:	460b      	mov	r3, r1
 801ecf4:	f04f 0000 	mov.w	r0, #0
 801ecf8:	4950      	ldr	r1, [pc, #320]	; (801ee3c <qr_DvOBrgQi+0x440>)
 801ecfa:	f7e1 fd99 	bl	8000830 <__aeabi_ddiv>
 801ecfe:	4602      	mov	r2, r0
 801ed00:	460b      	mov	r3, r1
 801ed02:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801ed06:	2301      	movs	r3, #1
 801ed08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ed0c:	e01e      	b.n	801ed4c <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 801ed0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ed12:	00db      	lsls	r3, r3, #3
 801ed14:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ed18:	4413      	add	r3, r2
 801ed1a:	3bd0      	subs	r3, #208	; 0xd0
 801ed1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ed20:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801ed24:	f7e1 fc5a 	bl	80005dc <__aeabi_dmul>
 801ed28:	4602      	mov	r2, r0
 801ed2a:	460b      	mov	r3, r1
 801ed2c:	4610      	mov	r0, r2
 801ed2e:	4619      	mov	r1, r3
 801ed30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ed34:	00db      	lsls	r3, r3, #3
 801ed36:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ed3a:	4413      	add	r3, r2
 801ed3c:	3bd0      	subs	r3, #208	; 0xd0
 801ed3e:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 801ed42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ed46:	3301      	adds	r3, #1
 801ed48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801ed4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ed50:	2b05      	cmp	r3, #5
 801ed52:	dddc      	ble.n	801ed0e <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 801ed54:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801ed58:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 801ed5c:	f04f 0200 	mov.w	r2, #0
 801ed60:	4b36      	ldr	r3, [pc, #216]	; (801ee3c <qr_DvOBrgQi+0x440>)
 801ed62:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801ed66:	f04f 0200 	mov.w	r2, #0
 801ed6a:	f04f 0300 	mov.w	r3, #0
 801ed6e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801ed72:	f7e1 fe9b 	bl	8000aac <__aeabi_dcmpeq>
 801ed76:	4603      	mov	r3, r0
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	f040 8083 	bne.w	801ee84 <qr_DvOBrgQi+0x488>
    knt = 6;
 801ed7e:	2306      	movs	r3, #6
 801ed80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 801ed84:	2305      	movs	r3, #5
 801ed86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801ed8a:	e009      	b.n	801eda0 <qr_DvOBrgQi+0x3a4>
      knt--;
 801ed8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ed90:	3b01      	subs	r3, #1
 801ed92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801ed96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ed9a:	3b01      	subs	r3, #1
 801ed9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801eda0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	dd11      	ble.n	801edcc <qr_DvOBrgQi+0x3d0>
 801eda8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801edac:	00db      	lsls	r3, r3, #3
 801edae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801edb2:	4413      	add	r3, r2
 801edb4:	3bd0      	subs	r3, #208	; 0xd0
 801edb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801edba:	f04f 0200 	mov.w	r2, #0
 801edbe:	f04f 0300 	mov.w	r3, #0
 801edc2:	f7e1 fe73 	bl	8000aac <__aeabi_dcmpeq>
 801edc6:	4603      	mov	r3, r0
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d1df      	bne.n	801ed8c <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 801edcc:	2302      	movs	r3, #2
 801edce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 801edd2:	2300      	movs	r3, #0
 801edd4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801edd8:	e04b      	b.n	801ee72 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 801edda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801edde:	4613      	mov	r3, r2
 801ede0:	005b      	lsls	r3, r3, #1
 801ede2:	4413      	add	r3, r2
 801ede4:	005b      	lsls	r3, r3, #1
 801ede6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 801edea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801edee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 801edf2:	2300      	movs	r3, #0
 801edf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 801edf8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801edfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ee00:	441a      	add	r2, r3
 801ee02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ee06:	4293      	cmp	r3, r2
 801ee08:	da20      	bge.n	801ee4c <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 801ee0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ee0e:	00db      	lsls	r3, r3, #3
 801ee10:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801ee14:	4413      	add	r3, r2
 801ee16:	3bd0      	subs	r3, #208	; 0xd0
 801ee18:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ee1c:	f04f 0200 	mov.w	r2, #0
 801ee20:	f04f 0300 	mov.w	r3, #0
 801ee24:	f7e1 fe42 	bl	8000aac <__aeabi_dcmpeq>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d108      	bne.n	801ee40 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 801ee2e:	2301      	movs	r3, #1
 801ee30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801ee34:	e012      	b.n	801ee5c <qr_DvOBrgQi+0x460>
 801ee36:	bf00      	nop
 801ee38:	7c900000 	.word	0x7c900000
 801ee3c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 801ee40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ee44:	3301      	adds	r3, #1
 801ee46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801ee4a:	e007      	b.n	801ee5c <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 801ee4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ee50:	3b01      	subs	r3, #1
 801ee52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 801ee56:	2302      	movs	r3, #2
 801ee58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801ee5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d0c6      	beq.n	801edf2 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 801ee64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ee68:	2b01      	cmp	r3, #1
 801ee6a:	d102      	bne.n	801ee72 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 801ee6c:	2301      	movs	r3, #1
 801ee6e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 801ee72:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d10a      	bne.n	801ee90 <qr_DvOBrgQi+0x494>
 801ee7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	dcab      	bgt.n	801edda <qr_DvOBrgQi+0x3de>
 801ee82:	e005      	b.n	801ee90 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 801ee84:	2300      	movs	r3, #0
 801ee86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801ee90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	dd29      	ble.n	801eeec <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 801ee98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801ee9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801eea0:	9302      	str	r3, [sp, #8]
 801eea2:	2301      	movs	r3, #1
 801eea4:	9301      	str	r3, [sp, #4]
 801eea6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eeaa:	9300      	str	r3, [sp, #0]
 801eeac:	2307      	movs	r3, #7
 801eeae:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801eeb2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801eeb6:	f003 f943 	bl	8022140 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 801eeba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801eebe:	653b      	str	r3, [r7, #80]	; 0x50
 801eec0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801eec4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801eec8:	657b      	str	r3, [r7, #84]	; 0x54
 801eeca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801eece:	2307      	movs	r3, #7
 801eed0:	9301      	str	r3, [sp, #4]
 801eed2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eed6:	9300      	str	r3, [sp, #0]
 801eed8:	4613      	mov	r3, r2
 801eeda:	2201      	movs	r2, #1
 801eedc:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801eee0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801eee4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801eee8:	f003 fa38 	bl	802235c <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 801eeec:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801eef0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 801eef4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801eef8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 801eefc:	f04f 0200 	mov.w	r2, #0
 801ef00:	f04f 0300 	mov.w	r3, #0
 801ef04:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 801ef08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ef0c:	2209      	movs	r2, #9
 801ef0e:	4619      	mov	r1, r3
 801ef10:	2004      	movs	r0, #4
 801ef12:	f003 fd33 	bl	802297c <xnrm2_nLdASVZH>
 801ef16:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801ef1a:	f04f 0200 	mov.w	r2, #0
 801ef1e:	f04f 0300 	mov.w	r3, #0
 801ef22:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801ef26:	f7e1 fdc1 	bl	8000aac <__aeabi_dcmpeq>
 801ef2a:	4603      	mov	r3, r0
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	f040 8174 	bne.w	801f21a <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 801ef32:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 801ef36:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801ef3a:	eeb0 0a47 	vmov.f32	s0, s14
 801ef3e:	eef0 0a67 	vmov.f32	s1, s15
 801ef42:	f001 f835 	bl	801ffb0 <rt_hypotd_snf>
 801ef46:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 801ef4a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801ef4e:	f04f 0200 	mov.w	r2, #0
 801ef52:	f04f 0300 	mov.w	r3, #0
 801ef56:	f7e1 fdc7 	bl	8000ae8 <__aeabi_dcmpge>
 801ef5a:	4603      	mov	r3, r0
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d009      	beq.n	801ef74 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 801ef60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ef64:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801ef68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ef6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801ef70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801ef74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ef78:	64bb      	str	r3, [r7, #72]	; 0x48
 801ef7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ef7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ef82:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ef84:	f04f 0200 	mov.w	r2, #0
 801ef88:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801ef8c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801ef90:	f7e1 fd96 	bl	8000ac0 <__aeabi_dcmplt>
 801ef94:	4603      	mov	r3, r0
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	f000 80f1 	beq.w	801f17e <qr_DvOBrgQi+0x782>
      knt = 0;
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801efa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801efa6:	3301      	adds	r3, #1
 801efa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801efac:	2308      	movs	r3, #8
 801efae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801efb2:	e01f      	b.n	801eff4 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801efb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801efb8:	00db      	lsls	r3, r3, #3
 801efba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801efbe:	4413      	add	r3, r2
 801efc0:	3bd0      	subs	r3, #208	; 0xd0
 801efc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801efc6:	f04f 0200 	mov.w	r2, #0
 801efca:	4bc6      	ldr	r3, [pc, #792]	; (801f2e4 <qr_DvOBrgQi+0x8e8>)
 801efcc:	f7e1 fb06 	bl	80005dc <__aeabi_dmul>
 801efd0:	4602      	mov	r2, r0
 801efd2:	460b      	mov	r3, r1
 801efd4:	4610      	mov	r0, r2
 801efd6:	4619      	mov	r1, r3
 801efd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801efdc:	00db      	lsls	r3, r3, #3
 801efde:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801efe2:	4413      	add	r3, r2
 801efe4:	3bd0      	subs	r3, #208	; 0xd0
 801efe6:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801efea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801efee:	3301      	adds	r3, #1
 801eff0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801eff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801eff8:	2b0b      	cmp	r3, #11
 801effa:	dddb      	ble.n	801efb4 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 801effc:	f04f 0200 	mov.w	r2, #0
 801f000:	4bb8      	ldr	r3, [pc, #736]	; (801f2e4 <qr_DvOBrgQi+0x8e8>)
 801f002:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f006:	f7e1 fae9 	bl	80005dc <__aeabi_dmul>
 801f00a:	4602      	mov	r2, r0
 801f00c:	460b      	mov	r3, r1
 801f00e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801f012:	f04f 0200 	mov.w	r2, #0
 801f016:	4bb3      	ldr	r3, [pc, #716]	; (801f2e4 <qr_DvOBrgQi+0x8e8>)
 801f018:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f01c:	f7e1 fade 	bl	80005dc <__aeabi_dmul>
 801f020:	4602      	mov	r2, r0
 801f022:	460b      	mov	r3, r1
 801f024:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801f028:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f02c:	643b      	str	r3, [r7, #64]	; 0x40
 801f02e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f036:	647b      	str	r3, [r7, #68]	; 0x44
 801f038:	f04f 0200 	mov.w	r2, #0
 801f03c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f040:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801f044:	f7e1 fd3c 	bl	8000ac0 <__aeabi_dcmplt>
 801f048:	4603      	mov	r3, r0
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d003      	beq.n	801f056 <qr_DvOBrgQi+0x65a>
 801f04e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f052:	2b13      	cmp	r3, #19
 801f054:	dda5      	ble.n	801efa2 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 801f056:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f05a:	2209      	movs	r2, #9
 801f05c:	4619      	mov	r1, r3
 801f05e:	2004      	movs	r0, #4
 801f060:	f003 fc8c 	bl	802297c <xnrm2_nLdASVZH>
 801f064:	eeb0 7a40 	vmov.f32	s14, s0
 801f068:	eef0 7a60 	vmov.f32	s15, s1
 801f06c:	eeb0 1a47 	vmov.f32	s2, s14
 801f070:	eef0 1a67 	vmov.f32	s3, s15
 801f074:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801f078:	f000 ff9a 	bl	801ffb0 <rt_hypotd_snf>
 801f07c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801f080:	f04f 0200 	mov.w	r2, #0
 801f084:	f04f 0300 	mov.w	r3, #0
 801f088:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f08c:	f7e1 fd2c 	bl	8000ae8 <__aeabi_dcmpge>
 801f090:	4603      	mov	r3, r0
 801f092:	2b00      	cmp	r3, #0
 801f094:	d009      	beq.n	801f0aa <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 801f096:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f09a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f09e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f0a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f0a6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 801f0aa:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f0ae:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f0b2:	f7e1 f8db 	bl	800026c <__aeabi_dsub>
 801f0b6:	4602      	mov	r2, r0
 801f0b8:	460b      	mov	r3, r1
 801f0ba:	4610      	mov	r0, r2
 801f0bc:	4619      	mov	r1, r3
 801f0be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f0c2:	f7e1 fbb5 	bl	8000830 <__aeabi_ddiv>
 801f0c6:	4602      	mov	r2, r0
 801f0c8:	460b      	mov	r3, r1
 801f0ca:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 801f0ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f0d2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f0d6:	f7e1 f8c9 	bl	800026c <__aeabi_dsub>
 801f0da:	4602      	mov	r2, r0
 801f0dc:	460b      	mov	r3, r1
 801f0de:	f04f 0000 	mov.w	r0, #0
 801f0e2:	4981      	ldr	r1, [pc, #516]	; (801f2e8 <qr_DvOBrgQi+0x8ec>)
 801f0e4:	f7e1 fba4 	bl	8000830 <__aeabi_ddiv>
 801f0e8:	4602      	mov	r2, r0
 801f0ea:	460b      	mov	r3, r1
 801f0ec:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f0f0:	2308      	movs	r3, #8
 801f0f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f0f6:	e01e      	b.n	801f136 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 801f0f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f0fc:	00db      	lsls	r3, r3, #3
 801f0fe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f102:	4413      	add	r3, r2
 801f104:	3bd0      	subs	r3, #208	; 0xd0
 801f106:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f10a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f10e:	f7e1 fa65 	bl	80005dc <__aeabi_dmul>
 801f112:	4602      	mov	r2, r0
 801f114:	460b      	mov	r3, r1
 801f116:	4610      	mov	r0, r2
 801f118:	4619      	mov	r1, r3
 801f11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f11e:	00db      	lsls	r3, r3, #3
 801f120:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f124:	4413      	add	r3, r2
 801f126:	3bd0      	subs	r3, #208	; 0xd0
 801f128:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f12c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f130:	3301      	adds	r3, #1
 801f132:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f13a:	2b0b      	cmp	r3, #11
 801f13c:	dddc      	ble.n	801f0f8 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f13e:	2300      	movs	r3, #0
 801f140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f144:	e010      	b.n	801f168 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 801f146:	f04f 0200 	mov.w	r2, #0
 801f14a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f14e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f152:	f7e1 fa43 	bl	80005dc <__aeabi_dmul>
 801f156:	4602      	mov	r2, r0
 801f158:	460b      	mov	r3, r1
 801f15a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f162:	3301      	adds	r3, #1
 801f164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f168:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f16c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f170:	429a      	cmp	r2, r3
 801f172:	dbe8      	blt.n	801f146 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 801f174:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f178:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801f17c:	e04d      	b.n	801f21a <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 801f17e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801f182:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f186:	f7e1 f871 	bl	800026c <__aeabi_dsub>
 801f18a:	4602      	mov	r2, r0
 801f18c:	460b      	mov	r3, r1
 801f18e:	4610      	mov	r0, r2
 801f190:	4619      	mov	r1, r3
 801f192:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f196:	f7e1 fb4b 	bl	8000830 <__aeabi_ddiv>
 801f19a:	4602      	mov	r2, r0
 801f19c:	460b      	mov	r3, r1
 801f19e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 801f1a2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801f1a6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f1aa:	f7e1 f85f 	bl	800026c <__aeabi_dsub>
 801f1ae:	4602      	mov	r2, r0
 801f1b0:	460b      	mov	r3, r1
 801f1b2:	f04f 0000 	mov.w	r0, #0
 801f1b6:	494c      	ldr	r1, [pc, #304]	; (801f2e8 <qr_DvOBrgQi+0x8ec>)
 801f1b8:	f7e1 fb3a 	bl	8000830 <__aeabi_ddiv>
 801f1bc:	4602      	mov	r2, r0
 801f1be:	460b      	mov	r3, r1
 801f1c0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801f1c4:	2308      	movs	r3, #8
 801f1c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f1ca:	e01e      	b.n	801f20a <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 801f1cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f1d0:	00db      	lsls	r3, r3, #3
 801f1d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f1d6:	4413      	add	r3, r2
 801f1d8:	3bd0      	subs	r3, #208	; 0xd0
 801f1da:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f1de:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f1e2:	f7e1 f9fb 	bl	80005dc <__aeabi_dmul>
 801f1e6:	4602      	mov	r2, r0
 801f1e8:	460b      	mov	r3, r1
 801f1ea:	4610      	mov	r0, r2
 801f1ec:	4619      	mov	r1, r3
 801f1ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f1f2:	00db      	lsls	r3, r3, #3
 801f1f4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f1f8:	4413      	add	r3, r2
 801f1fa:	3bd0      	subs	r3, #208	; 0xd0
 801f1fc:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 801f200:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f204:	3301      	adds	r3, #1
 801f206:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f20a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f20e:	2b0b      	cmp	r3, #11
 801f210:	dddc      	ble.n	801f1cc <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 801f212:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f216:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 801f21a:	f04f 0200 	mov.w	r2, #0
 801f21e:	4b32      	ldr	r3, [pc, #200]	; (801f2e8 <qr_DvOBrgQi+0x8ec>)
 801f220:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f224:	f04f 0200 	mov.w	r2, #0
 801f228:	f04f 0300 	mov.w	r3, #0
 801f22c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f230:	f7e1 fc3c 	bl	8000aac <__aeabi_dcmpeq>
 801f234:	4603      	mov	r3, r0
 801f236:	2b00      	cmp	r3, #0
 801f238:	d163      	bne.n	801f302 <qr_DvOBrgQi+0x906>
    knt = 5;
 801f23a:	2305      	movs	r3, #5
 801f23c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 801f240:	230b      	movs	r3, #11
 801f242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f246:	e009      	b.n	801f25c <qr_DvOBrgQi+0x860>
      knt--;
 801f248:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f24c:	3b01      	subs	r3, #1
 801f24e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 801f252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f256:	3b01      	subs	r3, #1
 801f258:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 801f25c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f260:	2b00      	cmp	r3, #0
 801f262:	dd11      	ble.n	801f288 <qr_DvOBrgQi+0x88c>
 801f264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f268:	00db      	lsls	r3, r3, #3
 801f26a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f26e:	4413      	add	r3, r2
 801f270:	3bd0      	subs	r3, #208	; 0xd0
 801f272:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f276:	f04f 0200 	mov.w	r2, #0
 801f27a:	f04f 0300 	mov.w	r3, #0
 801f27e:	f7e1 fc15 	bl	8000aac <__aeabi_dcmpeq>
 801f282:	4603      	mov	r3, r0
 801f284:	2b00      	cmp	r3, #0
 801f286:	d1df      	bne.n	801f248 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 801f288:	2301      	movs	r3, #1
 801f28a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 801f28e:	230d      	movs	r3, #13
 801f290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 801f294:	2300      	movs	r3, #0
 801f296:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 801f29a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f29e:	f103 020c 	add.w	r2, r3, #12
 801f2a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f2a6:	4293      	cmp	r3, r2
 801f2a8:	dc20      	bgt.n	801f2ec <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 801f2aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f2ae:	00db      	lsls	r3, r3, #3
 801f2b0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f2b4:	4413      	add	r3, r2
 801f2b6:	3bd0      	subs	r3, #208	; 0xd0
 801f2b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f2bc:	f04f 0200 	mov.w	r2, #0
 801f2c0:	f04f 0300 	mov.w	r3, #0
 801f2c4:	f7e1 fbf2 	bl	8000aac <__aeabi_dcmpeq>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d103      	bne.n	801f2d6 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f2d4:	e010      	b.n	801f2f8 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 801f2d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801f2da:	3301      	adds	r3, #1
 801f2dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801f2e0:	e00a      	b.n	801f2f8 <qr_DvOBrgQi+0x8fc>
 801f2e2:	bf00      	nop
 801f2e4:	7c900000 	.word	0x7c900000
 801f2e8:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 801f2ec:	2300      	movs	r3, #0
 801f2ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 801f2f2:	2301      	movs	r3, #1
 801f2f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f2f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d0c9      	beq.n	801f294 <qr_DvOBrgQi+0x898>
 801f300:	e005      	b.n	801f30e <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 801f302:	2300      	movs	r3, #0
 801f304:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 801f308:	2300      	movs	r3, #0
 801f30a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 801f30e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f312:	2b00      	cmp	r3, #0
 801f314:	dd29      	ble.n	801f36a <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 801f316:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f31a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f31e:	9302      	str	r3, [sp, #8]
 801f320:	2308      	movs	r3, #8
 801f322:	9301      	str	r3, [sp, #4]
 801f324:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f328:	9300      	str	r3, [sp, #0]
 801f32a:	230e      	movs	r3, #14
 801f32c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f330:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f334:	f002 ff04 	bl	8022140 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 801f338:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f33c:	63bb      	str	r3, [r7, #56]	; 0x38
 801f33e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f342:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f346:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f348:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f34c:	230e      	movs	r3, #14
 801f34e:	9301      	str	r3, [sp, #4]
 801f350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f354:	9300      	str	r3, [sp, #0]
 801f356:	4613      	mov	r3, r2
 801f358:	2208      	movs	r2, #8
 801f35a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 801f35e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f362:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801f366:	f002 fff9 	bl	802235c <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 801f36a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f36e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 801f372:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f376:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 801f37a:	f04f 0200 	mov.w	r2, #0
 801f37e:	f04f 0300 	mov.w	r3, #0
 801f382:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 801f386:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f38a:	2210      	movs	r2, #16
 801f38c:	4619      	mov	r1, r3
 801f38e:	2003      	movs	r0, #3
 801f390:	f003 faf4 	bl	802297c <xnrm2_nLdASVZH>
 801f394:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 801f398:	f04f 0200 	mov.w	r2, #0
 801f39c:	f04f 0300 	mov.w	r3, #0
 801f3a0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f3a4:	f7e1 fb82 	bl	8000aac <__aeabi_dcmpeq>
 801f3a8:	4603      	mov	r3, r0
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	f040 8170 	bne.w	801f690 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 801f3b0:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 801f3b4:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 801f3b8:	eeb0 0a47 	vmov.f32	s0, s14
 801f3bc:	eef0 0a67 	vmov.f32	s1, s15
 801f3c0:	f000 fdf6 	bl	801ffb0 <rt_hypotd_snf>
 801f3c4:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 801f3c8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f3cc:	f04f 0200 	mov.w	r2, #0
 801f3d0:	f04f 0300 	mov.w	r3, #0
 801f3d4:	f7e1 fb88 	bl	8000ae8 <__aeabi_dcmpge>
 801f3d8:	4603      	mov	r3, r0
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d009      	beq.n	801f3f2 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 801f3de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f3e2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f3e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f3ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f3ee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 801f3f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f3f6:	633b      	str	r3, [r7, #48]	; 0x30
 801f3f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f3fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f400:	637b      	str	r3, [r7, #52]	; 0x34
 801f402:	f04f 0200 	mov.w	r2, #0
 801f406:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f40a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801f40e:	f7e1 fb57 	bl	8000ac0 <__aeabi_dcmplt>
 801f412:	4603      	mov	r3, r0
 801f414:	2b00      	cmp	r3, #0
 801f416:	f000 80ef 	beq.w	801f5f8 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 801f41a:	2300      	movs	r3, #0
 801f41c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 801f420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f424:	3301      	adds	r3, #1
 801f426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f42a:	230f      	movs	r3, #15
 801f42c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f430:	e01f      	b.n	801f472 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 801f432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f436:	00db      	lsls	r3, r3, #3
 801f438:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f43c:	4413      	add	r3, r2
 801f43e:	3bd0      	subs	r3, #208	; 0xd0
 801f440:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f444:	f04f 0200 	mov.w	r2, #0
 801f448:	4bb5      	ldr	r3, [pc, #724]	; (801f720 <qr_DvOBrgQi+0xd24>)
 801f44a:	f7e1 f8c7 	bl	80005dc <__aeabi_dmul>
 801f44e:	4602      	mov	r2, r0
 801f450:	460b      	mov	r3, r1
 801f452:	4610      	mov	r0, r2
 801f454:	4619      	mov	r1, r3
 801f456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f45a:	00db      	lsls	r3, r3, #3
 801f45c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f460:	4413      	add	r3, r2
 801f462:	3bd0      	subs	r3, #208	; 0xd0
 801f464:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f46c:	3301      	adds	r3, #1
 801f46e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f476:	2b11      	cmp	r3, #17
 801f478:	dddb      	ble.n	801f432 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 801f47a:	f04f 0200 	mov.w	r2, #0
 801f47e:	4ba8      	ldr	r3, [pc, #672]	; (801f720 <qr_DvOBrgQi+0xd24>)
 801f480:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f484:	f7e1 f8aa 	bl	80005dc <__aeabi_dmul>
 801f488:	4602      	mov	r2, r0
 801f48a:	460b      	mov	r3, r1
 801f48c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 801f490:	f04f 0200 	mov.w	r2, #0
 801f494:	4ba2      	ldr	r3, [pc, #648]	; (801f720 <qr_DvOBrgQi+0xd24>)
 801f496:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f49a:	f7e1 f89f 	bl	80005dc <__aeabi_dmul>
 801f49e:	4602      	mov	r2, r0
 801f4a0:	460b      	mov	r3, r1
 801f4a2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 801f4a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f4aa:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f4b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f4b6:	f04f 0200 	mov.w	r2, #0
 801f4ba:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f4be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801f4c2:	f7e1 fafd 	bl	8000ac0 <__aeabi_dcmplt>
 801f4c6:	4603      	mov	r3, r0
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d003      	beq.n	801f4d4 <qr_DvOBrgQi+0xad8>
 801f4cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f4d0:	2b13      	cmp	r3, #19
 801f4d2:	dda5      	ble.n	801f420 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 801f4d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f4d8:	2210      	movs	r2, #16
 801f4da:	4619      	mov	r1, r3
 801f4dc:	2003      	movs	r0, #3
 801f4de:	f003 fa4d 	bl	802297c <xnrm2_nLdASVZH>
 801f4e2:	eeb0 7a40 	vmov.f32	s14, s0
 801f4e6:	eef0 7a60 	vmov.f32	s15, s1
 801f4ea:	eeb0 1a47 	vmov.f32	s2, s14
 801f4ee:	eef0 1a67 	vmov.f32	s3, s15
 801f4f2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 801f4f6:	f000 fd5b 	bl	801ffb0 <rt_hypotd_snf>
 801f4fa:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 801f4fe:	f04f 0200 	mov.w	r2, #0
 801f502:	f04f 0300 	mov.w	r3, #0
 801f506:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f50a:	f7e1 faed 	bl	8000ae8 <__aeabi_dcmpge>
 801f50e:	4603      	mov	r3, r0
 801f510:	2b00      	cmp	r3, #0
 801f512:	d009      	beq.n	801f528 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 801f514:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801f518:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801f51c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801f520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f524:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 801f528:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f52c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f530:	f7e0 fe9c 	bl	800026c <__aeabi_dsub>
 801f534:	4602      	mov	r2, r0
 801f536:	460b      	mov	r3, r1
 801f538:	4610      	mov	r0, r2
 801f53a:	4619      	mov	r1, r3
 801f53c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f540:	f7e1 f976 	bl	8000830 <__aeabi_ddiv>
 801f544:	4602      	mov	r2, r0
 801f546:	460b      	mov	r3, r1
 801f548:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 801f54c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f550:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 801f554:	f7e0 fe8a 	bl	800026c <__aeabi_dsub>
 801f558:	4602      	mov	r2, r0
 801f55a:	460b      	mov	r3, r1
 801f55c:	f04f 0000 	mov.w	r0, #0
 801f560:	4970      	ldr	r1, [pc, #448]	; (801f724 <qr_DvOBrgQi+0xd28>)
 801f562:	f7e1 f965 	bl	8000830 <__aeabi_ddiv>
 801f566:	4602      	mov	r2, r0
 801f568:	460b      	mov	r3, r1
 801f56a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f56e:	230f      	movs	r3, #15
 801f570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f574:	e01c      	b.n	801f5b0 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 801f576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f57a:	00db      	lsls	r3, r3, #3
 801f57c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f580:	4413      	add	r3, r2
 801f582:	3bd0      	subs	r3, #208	; 0xd0
 801f584:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f588:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f58c:	f7e1 f826 	bl	80005dc <__aeabi_dmul>
 801f590:	4602      	mov	r2, r0
 801f592:	460b      	mov	r3, r1
 801f594:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f598:	00c9      	lsls	r1, r1, #3
 801f59a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f59e:	4401      	add	r1, r0
 801f5a0:	39d0      	subs	r1, #208	; 0xd0
 801f5a2:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f5a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f5aa:	3301      	adds	r3, #1
 801f5ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f5b4:	2b11      	cmp	r3, #17
 801f5b6:	ddde      	ble.n	801f576 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f5be:	e010      	b.n	801f5e2 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 801f5c0:	f04f 0200 	mov.w	r2, #0
 801f5c4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 801f5c8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f5cc:	f7e1 f806 	bl	80005dc <__aeabi_dmul>
 801f5d0:	4602      	mov	r2, r0
 801f5d2:	460b      	mov	r3, r1
 801f5d4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 801f5d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f5dc:	3301      	adds	r3, #1
 801f5de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f5e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f5e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f5ea:	429a      	cmp	r2, r3
 801f5ec:	dbe8      	blt.n	801f5c0 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 801f5ee:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f5f2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 801f5f6:	e04b      	b.n	801f690 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 801f5f8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801f5fc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801f600:	f7e0 fe34 	bl	800026c <__aeabi_dsub>
 801f604:	4602      	mov	r2, r0
 801f606:	460b      	mov	r3, r1
 801f608:	4610      	mov	r0, r2
 801f60a:	4619      	mov	r1, r3
 801f60c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f610:	f7e1 f90e 	bl	8000830 <__aeabi_ddiv>
 801f614:	4602      	mov	r2, r0
 801f616:	460b      	mov	r3, r1
 801f618:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 801f61c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 801f620:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f624:	f7e0 fe22 	bl	800026c <__aeabi_dsub>
 801f628:	4602      	mov	r2, r0
 801f62a:	460b      	mov	r3, r1
 801f62c:	f04f 0000 	mov.w	r0, #0
 801f630:	493c      	ldr	r1, [pc, #240]	; (801f724 <qr_DvOBrgQi+0xd28>)
 801f632:	f7e1 f8fd 	bl	8000830 <__aeabi_ddiv>
 801f636:	4602      	mov	r2, r0
 801f638:	460b      	mov	r3, r1
 801f63a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f63e:	230f      	movs	r3, #15
 801f640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f644:	e01c      	b.n	801f680 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 801f646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f64a:	00db      	lsls	r3, r3, #3
 801f64c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f650:	4413      	add	r3, r2
 801f652:	3bd0      	subs	r3, #208	; 0xd0
 801f654:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f658:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f65c:	f7e0 ffbe 	bl	80005dc <__aeabi_dmul>
 801f660:	4602      	mov	r2, r0
 801f662:	460b      	mov	r3, r1
 801f664:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801f668:	00c9      	lsls	r1, r1, #3
 801f66a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f66e:	4401      	add	r1, r0
 801f670:	39d0      	subs	r1, #208	; 0xd0
 801f672:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 801f676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f67a:	3301      	adds	r3, #1
 801f67c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f684:	2b11      	cmp	r3, #17
 801f686:	ddde      	ble.n	801f646 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 801f688:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801f68c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 801f690:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801f694:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 801f698:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801f69c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f69e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f6a2:	2301      	movs	r3, #1
 801f6a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f6a8:	e00f      	b.n	801f6ca <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 801f6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6ae:	00db      	lsls	r3, r3, #3
 801f6b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f6b2:	18d1      	adds	r1, r2, r3
 801f6b4:	f04f 0200 	mov.w	r2, #0
 801f6b8:	f04f 0300 	mov.w	r3, #0
 801f6bc:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 801f6c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6c4:	3301      	adds	r3, #1
 801f6c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f6ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6ce:	2b02      	cmp	r3, #2
 801f6d0:	ddeb      	ble.n	801f6aa <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 801f6d2:	f04f 0200 	mov.w	r2, #0
 801f6d6:	f04f 0300 	mov.w	r3, #0
 801f6da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f6de:	2300      	movs	r3, #0
 801f6e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f6e4:	e016      	b.n	801f714 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 801f6e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f6ea:	3306      	adds	r3, #6
 801f6ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f6f0:	3203      	adds	r2, #3
 801f6f2:	00d2      	lsls	r2, r2, #3
 801f6f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f6f6:	4411      	add	r1, r2
 801f6f8:	00db      	lsls	r3, r3, #3
 801f6fa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f6fe:	4413      	add	r3, r2
 801f700:	3bd0      	subs	r3, #208	; 0xd0
 801f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f706:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f70e:	3301      	adds	r3, #1
 801f710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f718:	2b01      	cmp	r3, #1
 801f71a:	dde4      	ble.n	801f6e6 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 801f71c:	e015      	b.n	801f74a <qr_DvOBrgQi+0xd4e>
 801f71e:	bf00      	nop
 801f720:	7c900000 	.word	0x7c900000
 801f724:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 801f728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f72c:	3303      	adds	r3, #3
 801f72e:	00db      	lsls	r3, r3, #3
 801f730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f732:	18d1      	adds	r1, r2, r3
 801f734:	f04f 0200 	mov.w	r2, #0
 801f738:	f04f 0300 	mov.w	r3, #0
 801f73c:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 801f740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f744:	3301      	adds	r3, #1
 801f746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 801f74a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f74e:	2b02      	cmp	r3, #2
 801f750:	ddea      	ble.n	801f728 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 801f752:	f04f 0200 	mov.w	r2, #0
 801f756:	f04f 0300 	mov.w	r3, #0
 801f75a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f75e:	2300      	movs	r3, #0
 801f760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f764:	e016      	b.n	801f794 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 801f766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f76a:	330c      	adds	r3, #12
 801f76c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801f770:	3206      	adds	r2, #6
 801f772:	00d2      	lsls	r2, r2, #3
 801f774:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801f776:	4411      	add	r1, r2
 801f778:	00db      	lsls	r3, r3, #3
 801f77a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f77e:	4413      	add	r3, r2
 801f780:	3bd0      	subs	r3, #208	; 0xd0
 801f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f786:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 801f78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f78e:	3301      	adds	r3, #1
 801f790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f798:	2b02      	cmp	r3, #2
 801f79a:	dde4      	ble.n	801f766 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 801f79c:	f04f 0200 	mov.w	r2, #0
 801f7a0:	f04f 0300 	mov.w	r3, #0
 801f7a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f7a8:	230f      	movs	r3, #15
 801f7aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f7ae:	e024      	b.n	801f7fa <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 801f7b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7b4:	00db      	lsls	r3, r3, #3
 801f7b6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f7ba:	4413      	add	r3, r2
 801f7bc:	3bd0      	subs	r3, #208	; 0xd0
 801f7be:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f7c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801f7c6:	623b      	str	r3, [r7, #32]
 801f7c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801f7cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f7d0:	627b      	str	r3, [r7, #36]	; 0x24
 801f7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f7d6:	f7e0 ff01 	bl	80005dc <__aeabi_dmul>
 801f7da:	4602      	mov	r2, r0
 801f7dc:	460b      	mov	r3, r1
 801f7de:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f7e2:	00c9      	lsls	r1, r1, #3
 801f7e4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f7e8:	4401      	add	r1, r0
 801f7ea:	39d0      	subs	r1, #208	; 0xd0
 801f7ec:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 801f7f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7f4:	3301      	adds	r3, #1
 801f7f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f7fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f7fe:	2b11      	cmp	r3, #17
 801f800:	ddd6      	ble.n	801f7b0 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 801f802:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801f806:	f04f 0000 	mov.w	r0, #0
 801f80a:	49cc      	ldr	r1, [pc, #816]	; (801fb3c <qr_DvOBrgQi+0x1140>)
 801f80c:	f7e0 fd2e 	bl	800026c <__aeabi_dsub>
 801f810:	4602      	mov	r2, r0
 801f812:	460b      	mov	r3, r1
 801f814:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f818:	2300      	movs	r3, #0
 801f81a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f81e:	e014      	b.n	801f84a <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 801f820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f824:	f1c3 030d 	rsb	r3, r3, #13
 801f828:	00db      	lsls	r3, r3, #3
 801f82a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f82e:	4413      	add	r3, r2
 801f830:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 801f834:	f04f 0200 	mov.w	r2, #0
 801f838:	f04f 0300 	mov.w	r3, #0
 801f83c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 801f840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f844:	3301      	adds	r3, #1
 801f846:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801f84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f84e:	2b01      	cmp	r3, #1
 801f850:	dde6      	ble.n	801f820 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 801f852:	f04f 0200 	mov.w	r2, #0
 801f856:	4bb9      	ldr	r3, [pc, #740]	; (801fb3c <qr_DvOBrgQi+0x1140>)
 801f858:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 801f85c:	f04f 0200 	mov.w	r2, #0
 801f860:	f04f 0300 	mov.w	r3, #0
 801f864:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801f868:	f7e1 f920 	bl	8000aac <__aeabi_dcmpeq>
 801f86c:	4603      	mov	r3, r0
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d15f      	bne.n	801f932 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 801f872:	2305      	movs	r3, #5
 801f874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 801f878:	230d      	movs	r3, #13
 801f87a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f87e:	e009      	b.n	801f894 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 801f880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f884:	3b01      	subs	r3, #1
 801f886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801f88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f88e:	3b01      	subs	r3, #1
 801f890:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801f894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f898:	2b00      	cmp	r3, #0
 801f89a:	dd12      	ble.n	801f8c2 <qr_DvOBrgQi+0xec6>
 801f89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f8a0:	3b02      	subs	r3, #2
 801f8a2:	00db      	lsls	r3, r3, #3
 801f8a4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f8a8:	4413      	add	r3, r2
 801f8aa:	3bd0      	subs	r3, #208	; 0xd0
 801f8ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f8b0:	f04f 0200 	mov.w	r2, #0
 801f8b4:	f04f 0300 	mov.w	r3, #0
 801f8b8:	f7e1 f8f8 	bl	8000aac <__aeabi_dcmpeq>
 801f8bc:	4603      	mov	r3, r0
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	d1de      	bne.n	801f880 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 801f8c2:	2301      	movs	r3, #1
 801f8c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 801f8c8:	230e      	movs	r3, #14
 801f8ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 801f8d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f8d8:	330d      	adds	r3, #13
 801f8da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801f8de:	429a      	cmp	r2, r3
 801f8e0:	dc1c      	bgt.n	801f91c <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 801f8e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f8e6:	3b01      	subs	r3, #1
 801f8e8:	00db      	lsls	r3, r3, #3
 801f8ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f8ee:	4413      	add	r3, r2
 801f8f0:	3bd0      	subs	r3, #208	; 0xd0
 801f8f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f8f6:	f04f 0200 	mov.w	r2, #0
 801f8fa:	f04f 0300 	mov.w	r3, #0
 801f8fe:	f7e1 f8d5 	bl	8000aac <__aeabi_dcmpeq>
 801f902:	4603      	mov	r3, r0
 801f904:	2b00      	cmp	r3, #0
 801f906:	d103      	bne.n	801f910 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 801f908:	2301      	movs	r3, #1
 801f90a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801f90e:	e00b      	b.n	801f928 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 801f910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801f914:	3301      	adds	r3, #1
 801f916:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801f91a:	e005      	b.n	801f928 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 801f91c:	2300      	movs	r3, #0
 801f91e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 801f922:	2301      	movs	r3, #1
 801f924:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 801f928:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d0ce      	beq.n	801f8ce <qr_DvOBrgQi+0xed2>
 801f930:	e005      	b.n	801f93e <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 801f932:	2300      	movs	r3, #0
 801f934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801f938:	2300      	movs	r3, #0
 801f93a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801f93e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801f942:	2b00      	cmp	r3, #0
 801f944:	dd29      	ble.n	801f99a <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 801f946:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801f94a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f94e:	9302      	str	r3, [sp, #8]
 801f950:	2308      	movs	r3, #8
 801f952:	9301      	str	r3, [sp, #4]
 801f954:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f958:	9300      	str	r3, [sp, #0]
 801f95a:	230e      	movs	r3, #14
 801f95c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f960:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f964:	f002 fbec 	bl	8022140 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 801f968:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f96c:	61bb      	str	r3, [r7, #24]
 801f96e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f972:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f976:	61fb      	str	r3, [r7, #28]
 801f978:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801f97c:	230e      	movs	r3, #14
 801f97e:	9301      	str	r3, [sp, #4]
 801f980:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f984:	9300      	str	r3, [sp, #0]
 801f986:	4613      	mov	r3, r2
 801f988:	2208      	movs	r2, #8
 801f98a:	ed97 0b06 	vldr	d0, [r7, #24]
 801f98e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f992:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801f996:	f002 fce1 	bl	802235c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f99a:	2308      	movs	r3, #8
 801f99c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f9a0:	e024      	b.n	801f9ec <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 801f9a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f9a6:	00db      	lsls	r3, r3, #3
 801f9a8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801f9ac:	4413      	add	r3, r2
 801f9ae:	3bd0      	subs	r3, #208	; 0xd0
 801f9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f9b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801f9b8:	613b      	str	r3, [r7, #16]
 801f9ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801f9be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801f9c2:	617b      	str	r3, [r7, #20]
 801f9c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f9c8:	f7e0 fe08 	bl	80005dc <__aeabi_dmul>
 801f9cc:	4602      	mov	r2, r0
 801f9ce:	460b      	mov	r3, r1
 801f9d0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801f9d4:	00c9      	lsls	r1, r1, #3
 801f9d6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801f9da:	4401      	add	r1, r0
 801f9dc:	39d0      	subs	r1, #208	; 0xd0
 801f9de:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 801f9e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f9e6:	3301      	adds	r3, #1
 801f9e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801f9ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801f9f0:	2b0b      	cmp	r3, #11
 801f9f2:	ddd6      	ble.n	801f9a2 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 801f9f4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801f9f8:	f04f 0000 	mov.w	r0, #0
 801f9fc:	494f      	ldr	r1, [pc, #316]	; (801fb3c <qr_DvOBrgQi+0x1140>)
 801f9fe:	f7e0 fc35 	bl	800026c <__aeabi_dsub>
 801fa02:	4602      	mov	r2, r0
 801fa04:	460b      	mov	r3, r1
 801fa06:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 801fa0a:	f04f 0200 	mov.w	r2, #0
 801fa0e:	f04f 0300 	mov.w	r3, #0
 801fa12:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 801fa16:	f04f 0200 	mov.w	r2, #0
 801fa1a:	4b48      	ldr	r3, [pc, #288]	; (801fb3c <qr_DvOBrgQi+0x1140>)
 801fa1c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 801fa20:	f04f 0200 	mov.w	r2, #0
 801fa24:	f04f 0300 	mov.w	r3, #0
 801fa28:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801fa2c:	f7e1 f83e 	bl	8000aac <__aeabi_dcmpeq>
 801fa30:	4603      	mov	r3, r0
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	f040 8084 	bne.w	801fb40 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 801fa38:	2306      	movs	r3, #6
 801fa3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 801fa3e:	2307      	movs	r3, #7
 801fa40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801fa44:	e009      	b.n	801fa5a <qr_DvOBrgQi+0x105e>
      c_lastc--;
 801fa46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fa4a:	3b01      	subs	r3, #1
 801fa4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 801fa50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa54:	3b01      	subs	r3, #1
 801fa56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 801fa5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	dd12      	ble.n	801fa88 <qr_DvOBrgQi+0x108c>
 801fa62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa66:	3b02      	subs	r3, #2
 801fa68:	00db      	lsls	r3, r3, #3
 801fa6a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fa6e:	4413      	add	r3, r2
 801fa70:	3bd0      	subs	r3, #208	; 0xd0
 801fa72:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fa76:	f04f 0200 	mov.w	r2, #0
 801fa7a:	f04f 0300 	mov.w	r3, #0
 801fa7e:	f7e1 f815 	bl	8000aac <__aeabi_dcmpeq>
 801fa82:	4603      	mov	r3, r0
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d1de      	bne.n	801fa46 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 801fa88:	2302      	movs	r3, #2
 801fa8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 801fa8e:	2300      	movs	r3, #0
 801fa90:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801fa94:	e049      	b.n	801fb2a <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 801fa96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fa9a:	1e5a      	subs	r2, r3, #1
 801fa9c:	4613      	mov	r3, r2
 801fa9e:	005b      	lsls	r3, r3, #1
 801faa0:	4413      	add	r3, r2
 801faa2:	005b      	lsls	r3, r3, #1
 801faa4:	3307      	adds	r3, #7
 801faa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 801faaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801faae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 801fab2:	2300      	movs	r3, #0
 801fab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 801fab8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801fabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fac0:	4413      	add	r3, r2
 801fac2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801fac6:	429a      	cmp	r2, r3
 801fac8:	da1c      	bge.n	801fb04 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 801faca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801face:	3b01      	subs	r3, #1
 801fad0:	00db      	lsls	r3, r3, #3
 801fad2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fad6:	4413      	add	r3, r2
 801fad8:	3bd0      	subs	r3, #208	; 0xd0
 801fada:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fade:	f04f 0200 	mov.w	r2, #0
 801fae2:	f04f 0300 	mov.w	r3, #0
 801fae6:	f7e0 ffe1 	bl	8000aac <__aeabi_dcmpeq>
 801faea:	4603      	mov	r3, r0
 801faec:	2b00      	cmp	r3, #0
 801faee:	d103      	bne.n	801faf8 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 801faf0:	2301      	movs	r3, #1
 801faf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801faf6:	e00d      	b.n	801fb14 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 801faf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fafc:	3301      	adds	r3, #1
 801fafe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801fb02:	e007      	b.n	801fb14 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 801fb04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fb08:	3b01      	subs	r3, #1
 801fb0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 801fb0e:	2302      	movs	r3, #2
 801fb10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 801fb14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	d0ca      	beq.n	801fab2 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 801fb1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801fb20:	2b01      	cmp	r3, #1
 801fb22:	d102      	bne.n	801fb2a <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 801fb24:	2301      	movs	r3, #1
 801fb26:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 801fb2a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d10c      	bne.n	801fb4c <qr_DvOBrgQi+0x1150>
 801fb32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	dcad      	bgt.n	801fa96 <qr_DvOBrgQi+0x109a>
 801fb3a:	e007      	b.n	801fb4c <qr_DvOBrgQi+0x1150>
 801fb3c:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 801fb40:	2300      	movs	r3, #0
 801fb42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 801fb46:	2300      	movs	r3, #0
 801fb48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 801fb4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	dd29      	ble.n	801fba8 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 801fb54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801fb58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fb5c:	9302      	str	r3, [sp, #8]
 801fb5e:	2301      	movs	r3, #1
 801fb60:	9301      	str	r3, [sp, #4]
 801fb62:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb66:	9300      	str	r3, [sp, #0]
 801fb68:	2307      	movs	r3, #7
 801fb6a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801fb6e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801fb72:	f002 fae5 	bl	8022140 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 801fb76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801fb7a:	60bb      	str	r3, [r7, #8]
 801fb7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801fb80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801fb84:	60fb      	str	r3, [r7, #12]
 801fb86:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801fb8a:	2307      	movs	r3, #7
 801fb8c:	9301      	str	r3, [sp, #4]
 801fb8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb92:	9300      	str	r3, [sp, #0]
 801fb94:	4613      	mov	r3, r2
 801fb96:	2201      	movs	r2, #1
 801fb98:	ed97 0b02 	vldr	d0, [r7, #8]
 801fb9c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801fba0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801fba4:	f002 fbda 	bl	802235c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801fba8:	2301      	movs	r3, #1
 801fbaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801fbae:	e024      	b.n	801fbfa <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 801fbb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fbb4:	00db      	lsls	r3, r3, #3
 801fbb6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fbba:	4413      	add	r3, r2
 801fbbc:	3bd0      	subs	r3, #208	; 0xd0
 801fbbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fbc2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801fbc6:	603b      	str	r3, [r7, #0]
 801fbc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801fbcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801fbd0:	607b      	str	r3, [r7, #4]
 801fbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fbd6:	f7e0 fd01 	bl	80005dc <__aeabi_dmul>
 801fbda:	4602      	mov	r2, r0
 801fbdc:	460b      	mov	r3, r1
 801fbde:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801fbe2:	00c9      	lsls	r1, r1, #3
 801fbe4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801fbe8:	4401      	add	r1, r0
 801fbea:	39d0      	subs	r1, #208	; 0xd0
 801fbec:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 801fbf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fbf4:	3301      	adds	r3, #1
 801fbf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801fbfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fbfe:	2b05      	cmp	r3, #5
 801fc00:	ddd6      	ble.n	801fbb0 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 801fc02:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801fc06:	f04f 0000 	mov.w	r0, #0
 801fc0a:	4923      	ldr	r1, [pc, #140]	; (801fc98 <qr_DvOBrgQi+0x129c>)
 801fc0c:	f7e0 fb2e 	bl	800026c <__aeabi_dsub>
 801fc10:	4602      	mov	r2, r0
 801fc12:	460b      	mov	r3, r1
 801fc14:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 801fc18:	2300      	movs	r3, #0
 801fc1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801fc1e:	2300      	movs	r3, #0
 801fc20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801fc24:	e02d      	b.n	801fc82 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801fc26:	2300      	movs	r3, #0
 801fc28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fc2c:	e01b      	b.n	801fc66 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 801fc2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801fc32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fc36:	4413      	add	r3, r2
 801fc38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 801fc3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fc40:	00db      	lsls	r3, r3, #3
 801fc42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fc44:	18d1      	adds	r1, r2, r3
 801fc46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801fc4a:	00db      	lsls	r3, r3, #3
 801fc4c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801fc50:	4413      	add	r3, r2
 801fc52:	3bd0      	subs	r3, #208	; 0xd0
 801fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc58:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 801fc5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fc60:	3301      	adds	r3, #1
 801fc62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801fc66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801fc6a:	2b05      	cmp	r3, #5
 801fc6c:	dddf      	ble.n	801fc2e <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 801fc6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801fc72:	3306      	adds	r3, #6
 801fc74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 801fc78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fc7c:	3301      	adds	r3, #1
 801fc7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801fc82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801fc86:	2b02      	cmp	r3, #2
 801fc88:	ddcd      	ble.n	801fc26 <qr_DvOBrgQi+0x122a>
  }
}
 801fc8a:	bf00      	nop
 801fc8c:	bf00      	nop
 801fc8e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801fc92:	46bd      	mov	sp, r7
 801fc94:	bdb0      	pop	{r4, r5, r7, pc}
 801fc96:	bf00      	nop
 801fc98:	3ff00000 	.word	0x3ff00000

0801fc9c <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 801fc9c:	b5b0      	push	{r4, r5, r7, lr}
 801fc9e:	b092      	sub	sp, #72	; 0x48
 801fca0:	af00      	add	r7, sp, #0
 801fca2:	ed87 0b06 	vstr	d0, [r7, #24]
 801fca6:	ed87 1b04 	vstr	d1, [r7, #16]
 801fcaa:	60f8      	str	r0, [r7, #12]
 801fcac:	60b9      	str	r1, [r7, #8]
 801fcae:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 801fcb0:	69bb      	ldr	r3, [r7, #24]
 801fcb2:	643b      	str	r3, [r7, #64]	; 0x40
 801fcb4:	69fb      	ldr	r3, [r7, #28]
 801fcb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fcba:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 801fcbc:	693b      	ldr	r3, [r7, #16]
 801fcbe:	63bb      	str	r3, [r7, #56]	; 0x38
 801fcc0:	697b      	ldr	r3, [r7, #20]
 801fcc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 801fcc8:	f04f 0200 	mov.w	r2, #0
 801fccc:	f04f 0300 	mov.w	r3, #0
 801fcd0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fcd4:	f7e0 feea 	bl	8000aac <__aeabi_dcmpeq>
 801fcd8:	4603      	mov	r3, r0
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d012      	beq.n	801fd04 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 801fcde:	68f9      	ldr	r1, [r7, #12]
 801fce0:	f04f 0200 	mov.w	r2, #0
 801fce4:	4b4e      	ldr	r3, [pc, #312]	; (801fe20 <rotate_LZ7ctbe0+0x184>)
 801fce6:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 801fcea:	68b9      	ldr	r1, [r7, #8]
 801fcec:	f04f 0200 	mov.w	r2, #0
 801fcf0:	f04f 0300 	mov.w	r3, #0
 801fcf4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 801fcf8:	6879      	ldr	r1, [r7, #4]
 801fcfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fcfe:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 801fd02:	e088      	b.n	801fe16 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 801fd04:	f04f 0200 	mov.w	r2, #0
 801fd08:	f04f 0300 	mov.w	r3, #0
 801fd0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801fd10:	f7e0 fecc 	bl	8000aac <__aeabi_dcmpeq>
 801fd14:	4603      	mov	r3, r0
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d012      	beq.n	801fd40 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 801fd1a:	68f9      	ldr	r1, [r7, #12]
 801fd1c:	f04f 0200 	mov.w	r2, #0
 801fd20:	f04f 0300 	mov.w	r3, #0
 801fd24:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 801fd28:	68b9      	ldr	r1, [r7, #8]
 801fd2a:	f04f 0200 	mov.w	r2, #0
 801fd2e:	4b3c      	ldr	r3, [pc, #240]	; (801fe20 <rotate_LZ7ctbe0+0x184>)
 801fd30:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 801fd34:	6879      	ldr	r1, [r7, #4]
 801fd36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fd3a:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fd3e:	e06a      	b.n	801fe16 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 801fd40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fd44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801fd48:	f7e0 fa92 	bl	8000270 <__adddf3>
 801fd4c:	4602      	mov	r2, r0
 801fd4e:	460b      	mov	r3, r1
 801fd50:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 801fd54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fd58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801fd5c:	f7e0 fd68 	bl	8000830 <__aeabi_ddiv>
 801fd60:	4602      	mov	r2, r0
 801fd62:	460b      	mov	r3, r1
 801fd64:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 801fd68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fd6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fd70:	f7e0 fd5e 	bl	8000830 <__aeabi_ddiv>
 801fd74:	4602      	mov	r2, r0
 801fd76:	460b      	mov	r3, r1
 801fd78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 801fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd7e:	643b      	str	r3, [r7, #64]	; 0x40
 801fd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fd82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fd86:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 801fd88:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd8c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801fd90:	ec45 4b11 	vmov	d1, r4, r5
 801fd94:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 801fd98:	f000 f90a 	bl	801ffb0 <rt_hypotd_snf>
 801fd9c:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 801fda0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fda4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801fda8:	f7e0 fd42 	bl	8000830 <__aeabi_ddiv>
 801fdac:	4602      	mov	r2, r0
 801fdae:	460b      	mov	r3, r1
 801fdb0:	68f9      	ldr	r1, [r7, #12]
 801fdb2:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 801fdb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801fdba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fdbe:	f7e0 fd37 	bl	8000830 <__aeabi_ddiv>
 801fdc2:	4602      	mov	r2, r0
 801fdc4:	460b      	mov	r3, r1
 801fdc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 801fdca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801fdce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801fdd2:	f7e0 fc03 	bl	80005dc <__aeabi_dmul>
 801fdd6:	4602      	mov	r2, r0
 801fdd8:	460b      	mov	r3, r1
 801fdda:	4610      	mov	r0, r2
 801fddc:	4619      	mov	r1, r3
 801fdde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fde2:	f7e0 fd25 	bl	8000830 <__aeabi_ddiv>
 801fde6:	4602      	mov	r2, r0
 801fde8:	460b      	mov	r3, r1
 801fdea:	68b9      	ldr	r1, [r7, #8]
 801fdec:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 801fdf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801fdf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801fdf8:	f7e0 fbf0 	bl	80005dc <__aeabi_dmul>
 801fdfc:	4602      	mov	r2, r0
 801fdfe:	460b      	mov	r3, r1
 801fe00:	4610      	mov	r0, r2
 801fe02:	4619      	mov	r1, r3
 801fe04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801fe08:	f7e0 fbe8 	bl	80005dc <__aeabi_dmul>
 801fe0c:	4602      	mov	r2, r0
 801fe0e:	460b      	mov	r3, r1
 801fe10:	6879      	ldr	r1, [r7, #4]
 801fe12:	e9c1 2300 	strd	r2, r3, [r1]
}
 801fe16:	bf00      	nop
 801fe18:	3748      	adds	r7, #72	; 0x48
 801fe1a:	46bd      	mov	sp, r7
 801fe1c:	bdb0      	pop	{r4, r5, r7, pc}
 801fe1e:	bf00      	nop
 801fe20:	3ff00000 	.word	0x3ff00000

0801fe24 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b086      	sub	sp, #24
 801fe28:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801fe2a:	2340      	movs	r3, #64	; 0x40
 801fe2c:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 801fe2e:	f04f 0200 	mov.w	r2, #0
 801fe32:	f04f 0300 	mov.w	r3, #0
 801fe36:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801fe3a:	68fb      	ldr	r3, [r7, #12]
 801fe3c:	2b20      	cmp	r3, #32
 801fe3e:	d10b      	bne.n	801fe58 <rtGetInf+0x34>
    inf = rtGetInfF();
 801fe40:	f000 f820 	bl	801fe84 <rtGetInfF>
 801fe44:	ee10 3a10 	vmov	r3, s0
 801fe48:	4618      	mov	r0, r3
 801fe4a:	f7e0 fb6f 	bl	800052c <__aeabi_f2d>
 801fe4e:	4602      	mov	r2, r0
 801fe50:	460b      	mov	r3, r1
 801fe52:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fe56:	e007      	b.n	801fe68 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 801fe58:	4b09      	ldr	r3, [pc, #36]	; (801fe80 <rtGetInf+0x5c>)
 801fe5a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fe5c:	2300      	movs	r3, #0
 801fe5e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 801fe60:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fe64:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 801fe68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fe6c:	ec43 2b17 	vmov	d7, r2, r3
}
 801fe70:	eeb0 0a47 	vmov.f32	s0, s14
 801fe74:	eef0 0a67 	vmov.f32	s1, s15
 801fe78:	3718      	adds	r7, #24
 801fe7a:	46bd      	mov	sp, r7
 801fe7c:	bd80      	pop	{r7, pc}
 801fe7e:	bf00      	nop
 801fe80:	7ff00000 	.word	0x7ff00000

0801fe84 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 801fe84:	b480      	push	{r7}
 801fe86:	b083      	sub	sp, #12
 801fe88:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 801fe8a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801fe8e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	ee07 3a90 	vmov	s15, r3
}
 801fe96:	eeb0 0a67 	vmov.f32	s0, s15
 801fe9a:	370c      	adds	r7, #12
 801fe9c:	46bd      	mov	sp, r7
 801fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fea2:	4770      	bx	lr

0801fea4 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 801fea4:	b580      	push	{r7, lr}
 801fea6:	b086      	sub	sp, #24
 801fea8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801feaa:	2340      	movs	r3, #64	; 0x40
 801feac:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 801feae:	f04f 0200 	mov.w	r2, #0
 801feb2:	f04f 0300 	mov.w	r3, #0
 801feb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801feba:	68fb      	ldr	r3, [r7, #12]
 801febc:	2b20      	cmp	r3, #32
 801febe:	d10b      	bne.n	801fed8 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 801fec0:	f000 f820 	bl	801ff04 <rtGetMinusInfF>
 801fec4:	ee10 3a10 	vmov	r3, s0
 801fec8:	4618      	mov	r0, r3
 801feca:	f7e0 fb2f 	bl	800052c <__aeabi_f2d>
 801fece:	4602      	mov	r2, r0
 801fed0:	460b      	mov	r3, r1
 801fed2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801fed6:	e007      	b.n	801fee8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 801fed8:	4b09      	ldr	r3, [pc, #36]	; (801ff00 <rtGetMinusInf+0x5c>)
 801feda:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801fedc:	2300      	movs	r3, #0
 801fede:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 801fee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 801fee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801feec:	ec43 2b17 	vmov	d7, r2, r3
}
 801fef0:	eeb0 0a47 	vmov.f32	s0, s14
 801fef4:	eef0 0a67 	vmov.f32	s1, s15
 801fef8:	3718      	adds	r7, #24
 801fefa:	46bd      	mov	sp, r7
 801fefc:	bd80      	pop	{r7, pc}
 801fefe:	bf00      	nop
 801ff00:	fff00000 	.word	0xfff00000

0801ff04 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 801ff04:	b480      	push	{r7}
 801ff06:	b083      	sub	sp, #12
 801ff08:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 801ff0a:	4b06      	ldr	r3, [pc, #24]	; (801ff24 <rtGetMinusInfF+0x20>)
 801ff0c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	ee07 3a90 	vmov	s15, r3
}
 801ff14:	eeb0 0a67 	vmov.f32	s0, s15
 801ff18:	370c      	adds	r7, #12
 801ff1a:	46bd      	mov	sp, r7
 801ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff20:	4770      	bx	lr
 801ff22:	bf00      	nop
 801ff24:	ff800000 	.word	0xff800000

0801ff28 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 801ff28:	b580      	push	{r7, lr}
 801ff2a:	b086      	sub	sp, #24
 801ff2c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 801ff2e:	2340      	movs	r3, #64	; 0x40
 801ff30:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 801ff32:	f04f 0200 	mov.w	r2, #0
 801ff36:	f04f 0300 	mov.w	r3, #0
 801ff3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 801ff3e:	68fb      	ldr	r3, [r7, #12]
 801ff40:	2b20      	cmp	r3, #32
 801ff42:	d10b      	bne.n	801ff5c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 801ff44:	f000 f820 	bl	801ff88 <rtGetNaNF>
 801ff48:	ee10 3a10 	vmov	r3, s0
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	f7e0 faed 	bl	800052c <__aeabi_f2d>
 801ff52:	4602      	mov	r2, r0
 801ff54:	460b      	mov	r3, r1
 801ff56:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801ff5a:	e007      	b.n	801ff6c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 801ff5c:	4b09      	ldr	r3, [pc, #36]	; (801ff84 <rtGetNaN+0x5c>)
 801ff5e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 801ff60:	2300      	movs	r3, #0
 801ff62:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 801ff64:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ff68:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 801ff6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ff70:	ec43 2b17 	vmov	d7, r2, r3
}
 801ff74:	eeb0 0a47 	vmov.f32	s0, s14
 801ff78:	eef0 0a67 	vmov.f32	s1, s15
 801ff7c:	3718      	adds	r7, #24
 801ff7e:	46bd      	mov	sp, r7
 801ff80:	bd80      	pop	{r7, pc}
 801ff82:	bf00      	nop
 801ff84:	fff80000 	.word	0xfff80000

0801ff88 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 801ff88:	b480      	push	{r7}
 801ff8a:	b083      	sub	sp, #12
 801ff8c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 801ff8e:	f04f 0300 	mov.w	r3, #0
 801ff92:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 801ff94:	4b05      	ldr	r3, [pc, #20]	; (801ffac <rtGetNaNF+0x24>)
 801ff96:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	ee07 3a90 	vmov	s15, r3
}
 801ff9e:	eeb0 0a67 	vmov.f32	s0, s15
 801ffa2:	370c      	adds	r7, #12
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffaa:	4770      	bx	lr
 801ffac:	ffc00000 	.word	0xffc00000

0801ffb0 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	b088      	sub	sp, #32
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	ed87 0b02 	vstr	d0, [r7, #8]
 801ffba:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 801ffbe:	68bb      	ldr	r3, [r7, #8]
 801ffc0:	613b      	str	r3, [r7, #16]
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ffc8:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 801ffca:	683b      	ldr	r3, [r7, #0]
 801ffcc:	61bb      	str	r3, [r7, #24]
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ffd4:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 801ffd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ffda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ffde:	f7e0 fd6f 	bl	8000ac0 <__aeabi_dcmplt>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d02d      	beq.n	8020044 <rt_hypotd_snf+0x94>
    a /= y;
 801ffe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ffec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801fff0:	f7e0 fc1e 	bl	8000830 <__aeabi_ddiv>
 801fff4:	4602      	mov	r2, r0
 801fff6:	460b      	mov	r3, r1
 801fff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 801fffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020000:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8020004:	f7e0 faea 	bl	80005dc <__aeabi_dmul>
 8020008:	4602      	mov	r2, r0
 802000a:	460b      	mov	r3, r1
 802000c:	4610      	mov	r0, r2
 802000e:	4619      	mov	r1, r3
 8020010:	f04f 0200 	mov.w	r2, #0
 8020014:	4b38      	ldr	r3, [pc, #224]	; (80200f8 <rt_hypotd_snf+0x148>)
 8020016:	f7e0 f92b 	bl	8000270 <__adddf3>
 802001a:	4602      	mov	r2, r0
 802001c:	460b      	mov	r3, r1
 802001e:	ec43 2b17 	vmov	d7, r2, r3
 8020022:	eeb0 0a47 	vmov.f32	s0, s14
 8020026:	eef0 0a67 	vmov.f32	s1, s15
 802002a:	f00e fe39 	bl	802eca0 <sqrt>
 802002e:	ec53 2b10 	vmov	r2, r3, d0
 8020032:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020036:	f7e0 fad1 	bl	80005dc <__aeabi_dmul>
 802003a:	4602      	mov	r2, r0
 802003c:	460b      	mov	r3, r1
 802003e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8020042:	e048      	b.n	80200d6 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 8020044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020048:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802004c:	f7e0 fd56 	bl	8000afc <__aeabi_dcmpgt>
 8020050:	4603      	mov	r3, r0
 8020052:	2b00      	cmp	r3, #0
 8020054:	d02d      	beq.n	80200b2 <rt_hypotd_snf+0x102>
    y /= a;
 8020056:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802005a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802005e:	f7e0 fbe7 	bl	8000830 <__aeabi_ddiv>
 8020062:	4602      	mov	r2, r0
 8020064:	460b      	mov	r3, r1
 8020066:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 802006a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802006e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020072:	f7e0 fab3 	bl	80005dc <__aeabi_dmul>
 8020076:	4602      	mov	r2, r0
 8020078:	460b      	mov	r3, r1
 802007a:	4610      	mov	r0, r2
 802007c:	4619      	mov	r1, r3
 802007e:	f04f 0200 	mov.w	r2, #0
 8020082:	4b1d      	ldr	r3, [pc, #116]	; (80200f8 <rt_hypotd_snf+0x148>)
 8020084:	f7e0 f8f4 	bl	8000270 <__adddf3>
 8020088:	4602      	mov	r2, r0
 802008a:	460b      	mov	r3, r1
 802008c:	ec43 2b17 	vmov	d7, r2, r3
 8020090:	eeb0 0a47 	vmov.f32	s0, s14
 8020094:	eef0 0a67 	vmov.f32	s1, s15
 8020098:	f00e fe02 	bl	802eca0 <sqrt>
 802009c:	ec53 2b10 	vmov	r2, r3, d0
 80200a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80200a4:	f7e0 fa9a 	bl	80005dc <__aeabi_dmul>
 80200a8:	4602      	mov	r2, r0
 80200aa:	460b      	mov	r3, r1
 80200ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80200b0:	e011      	b.n	80200d6 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 80200b2:	ed97 0b06 	vldr	d0, [r7, #24]
 80200b6:	f000 f889 	bl	80201cc <rtIsNaN>
 80200ba:	4603      	mov	r3, r0
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d10a      	bne.n	80200d6 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 80200c0:	a30b      	add	r3, pc, #44	; (adr r3, 80200f0 <rt_hypotd_snf+0x140>)
 80200c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80200ca:	f7e0 fa87 	bl	80005dc <__aeabi_dmul>
 80200ce:	4602      	mov	r2, r0
 80200d0:	460b      	mov	r3, r1
 80200d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 80200d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80200da:	ec43 2b17 	vmov	d7, r2, r3
}
 80200de:	eeb0 0a47 	vmov.f32	s0, s14
 80200e2:	eef0 0a67 	vmov.f32	s1, s15
 80200e6:	3720      	adds	r7, #32
 80200e8:	46bd      	mov	sp, r7
 80200ea:	bd80      	pop	{r7, pc}
 80200ec:	f3af 8000 	nop.w
 80200f0:	667f3bcd 	.word	0x667f3bcd
 80200f4:	3ff6a09e 	.word	0x3ff6a09e
 80200f8:	3ff00000 	.word	0x3ff00000

080200fc <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	b082      	sub	sp, #8
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8020104:	f7ff ff10 	bl	801ff28 <rtGetNaN>
 8020108:	eeb0 7a40 	vmov.f32	s14, s0
 802010c:	eef0 7a60 	vmov.f32	s15, s1
 8020110:	4b16      	ldr	r3, [pc, #88]	; (802016c <rt_InitInfAndNaN+0x70>)
 8020112:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8020116:	f7ff ff37 	bl	801ff88 <rtGetNaNF>
 802011a:	eef0 7a40 	vmov.f32	s15, s0
 802011e:	4b14      	ldr	r3, [pc, #80]	; (8020170 <rt_InitInfAndNaN+0x74>)
 8020120:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8020124:	f7ff fe7e 	bl	801fe24 <rtGetInf>
 8020128:	eeb0 7a40 	vmov.f32	s14, s0
 802012c:	eef0 7a60 	vmov.f32	s15, s1
 8020130:	4b10      	ldr	r3, [pc, #64]	; (8020174 <rt_InitInfAndNaN+0x78>)
 8020132:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8020136:	f7ff fea5 	bl	801fe84 <rtGetInfF>
 802013a:	eef0 7a40 	vmov.f32	s15, s0
 802013e:	4b0e      	ldr	r3, [pc, #56]	; (8020178 <rt_InitInfAndNaN+0x7c>)
 8020140:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8020144:	f7ff feae 	bl	801fea4 <rtGetMinusInf>
 8020148:	eeb0 7a40 	vmov.f32	s14, s0
 802014c:	eef0 7a60 	vmov.f32	s15, s1
 8020150:	4b0a      	ldr	r3, [pc, #40]	; (802017c <rt_InitInfAndNaN+0x80>)
 8020152:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8020156:	f7ff fed5 	bl	801ff04 <rtGetMinusInfF>
 802015a:	eef0 7a40 	vmov.f32	s15, s0
 802015e:	4b08      	ldr	r3, [pc, #32]	; (8020180 <rt_InitInfAndNaN+0x84>)
 8020160:	edc3 7a00 	vstr	s15, [r3]
}
 8020164:	bf00      	nop
 8020166:	3708      	adds	r7, #8
 8020168:	46bd      	mov	sp, r7
 802016a:	bd80      	pop	{r7, pc}
 802016c:	2001ed50 	.word	0x2001ed50
 8020170:	2001ed40 	.word	0x2001ed40
 8020174:	2001ed48 	.word	0x2001ed48
 8020178:	2001ed44 	.word	0x2001ed44
 802017c:	2001ed58 	.word	0x2001ed58
 8020180:	2001ed60 	.word	0x2001ed60

08020184 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 8020184:	b580      	push	{r7, lr}
 8020186:	b082      	sub	sp, #8
 8020188:	af00      	add	r7, sp, #0
 802018a:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 802018e:	4b0d      	ldr	r3, [pc, #52]	; (80201c4 <rtIsInf+0x40>)
 8020190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8020198:	f7e0 fc88 	bl	8000aac <__aeabi_dcmpeq>
 802019c:	4603      	mov	r3, r0
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d109      	bne.n	80201b6 <rtIsInf+0x32>
 80201a2:	4b09      	ldr	r3, [pc, #36]	; (80201c8 <rtIsInf+0x44>)
 80201a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80201ac:	f7e0 fc7e 	bl	8000aac <__aeabi_dcmpeq>
 80201b0:	4603      	mov	r3, r0
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d001      	beq.n	80201ba <rtIsInf+0x36>
 80201b6:	2301      	movs	r3, #1
 80201b8:	e000      	b.n	80201bc <rtIsInf+0x38>
 80201ba:	2300      	movs	r3, #0
}
 80201bc:	4618      	mov	r0, r3
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}
 80201c4:	2001ed48 	.word	0x2001ed48
 80201c8:	2001ed58 	.word	0x2001ed58

080201cc <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 80201cc:	b580      	push	{r7, lr}
 80201ce:	b086      	sub	sp, #24
 80201d0:	af00      	add	r7, sp, #0
 80201d2:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 80201d6:	2300      	movs	r3, #0
 80201d8:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80201da:	2340      	movs	r3, #64	; 0x40
 80201dc:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80201de:	693b      	ldr	r3, [r7, #16]
 80201e0:	2b20      	cmp	r3, #32
 80201e2:	d10b      	bne.n	80201fc <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 80201e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80201e8:	f7e0 fcf0 	bl	8000bcc <__aeabi_d2f>
 80201ec:	4603      	mov	r3, r0
 80201ee:	ee00 3a10 	vmov	s0, r3
 80201f2:	f000 f821 	bl	8020238 <rtIsNaNF>
 80201f6:	4603      	mov	r3, r0
 80201f8:	75fb      	strb	r3, [r7, #23]
 80201fa:	e015      	b.n	8020228 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 80201fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020200:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020204:	68fa      	ldr	r2, [r7, #12]
 8020206:	4b0b      	ldr	r3, [pc, #44]	; (8020234 <rtIsNaN+0x68>)
 8020208:	4013      	ands	r3, r2
 802020a:	4a0a      	ldr	r2, [pc, #40]	; (8020234 <rtIsNaN+0x68>)
 802020c:	4293      	cmp	r3, r2
 802020e:	d109      	bne.n	8020224 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020216:	2b00      	cmp	r3, #0
 8020218:	d102      	bne.n	8020220 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 802021a:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 802021c:	2b00      	cmp	r3, #0
 802021e:	d001      	beq.n	8020224 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8020220:	2301      	movs	r3, #1
 8020222:	e000      	b.n	8020226 <rtIsNaN+0x5a>
 8020224:	2300      	movs	r3, #0
 8020226:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8020228:	7dfb      	ldrb	r3, [r7, #23]
}
 802022a:	4618      	mov	r0, r3
 802022c:	3718      	adds	r7, #24
 802022e:	46bd      	mov	sp, r7
 8020230:	bd80      	pop	{r7, pc}
 8020232:	bf00      	nop
 8020234:	7ff00000 	.word	0x7ff00000

08020238 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 8020238:	b480      	push	{r7}
 802023a:	b085      	sub	sp, #20
 802023c:	af00      	add	r7, sp, #0
 802023e:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8020246:	68fb      	ldr	r3, [r7, #12]
 8020248:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 802024c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020250:	d106      	bne.n	8020260 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8020258:	2b00      	cmp	r3, #0
 802025a:	d001      	beq.n	8020260 <rtIsNaNF+0x28>
 802025c:	2301      	movs	r3, #1
 802025e:	e000      	b.n	8020262 <rtIsNaNF+0x2a>
 8020260:	2300      	movs	r3, #0
 8020262:	b2db      	uxtb	r3, r3
}
 8020264:	4618      	mov	r0, r3
 8020266:	3714      	adds	r7, #20
 8020268:	46bd      	mov	sp, r7
 802026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026e:	4770      	bx	lr

08020270 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 8020270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020274:	ed2d 8b02 	vpush	{d8}
 8020278:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 802027c:	af02      	add	r7, sp, #8
 802027e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8020282:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8020286:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 802028a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 802028e:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 8020290:	f04f 0200 	mov.w	r2, #0
 8020294:	f04f 0300 	mov.w	r3, #0
 8020298:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 802029c:	f04f 0200 	mov.w	r2, #0
 80202a0:	f04f 0300 	mov.w	r3, #0
 80202a4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 80202a8:	f04f 0200 	mov.w	r2, #0
 80202ac:	f04f 0300 	mov.w	r3, #0
 80202b0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 80202b4:	f04f 0200 	mov.w	r2, #0
 80202b8:	f04f 0300 	mov.w	r3, #0
 80202bc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 80202c0:	f04f 0200 	mov.w	r2, #0
 80202c4:	f04f 0300 	mov.w	r3, #0
 80202c8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 80202cc:	f04f 0200 	mov.w	r2, #0
 80202d0:	f04f 0300 	mov.w	r3, #0
 80202d4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 80202d8:	2300      	movs	r3, #0
 80202da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80202de:	e02e      	b.n	802033e <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 80202e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80202e4:	00da      	lsls	r2, r3, #3
 80202e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80202ea:	4413      	add	r3, r2
 80202ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80202f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80202f4:	00db      	lsls	r3, r3, #3
 80202f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80202fa:	4413      	add	r3, r2
 80202fc:	3b88      	subs	r3, #136	; 0x88
 80202fe:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 8020302:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020306:	00da      	lsls	r2, r3, #3
 8020308:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802030c:	1899      	adds	r1, r3, r2
 802030e:	f04f 0200 	mov.w	r2, #0
 8020312:	f04f 0300 	mov.w	r3, #0
 8020316:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 802031a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802031e:	00da      	lsls	r2, r3, #3
 8020320:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	1899      	adds	r1, r3, r2
 8020328:	f04f 0200 	mov.w	r2, #0
 802032c:	f04f 0300 	mov.w	r3, #0
 8020330:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 8020334:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020338:	3301      	adds	r3, #1
 802033a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802033e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020342:	2b08      	cmp	r3, #8
 8020344:	ddcc      	ble.n	80202e0 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 8020346:	2300      	movs	r3, #0
 8020348:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 802034c:	2300      	movs	r3, #0
 802034e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 8020352:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020356:	2201      	movs	r2, #1
 8020358:	4619      	mov	r1, r3
 802035a:	2003      	movs	r0, #3
 802035c:	f002 fbbc 	bl	8022ad8 <xnrm2_xDOlDEtw>
 8020360:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 8020364:	f04f 0200 	mov.w	r2, #0
 8020368:	f04f 0300 	mov.w	r3, #0
 802036c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020370:	f7e0 fbc4 	bl	8000afc <__aeabi_dcmpgt>
 8020374:	4603      	mov	r3, r0
 8020376:	2b00      	cmp	r3, #0
 8020378:	d07b      	beq.n	8020472 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 802037a:	2301      	movs	r3, #1
 802037c:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 8020380:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8020384:	f04f 0200 	mov.w	r2, #0
 8020388:	f04f 0300 	mov.w	r3, #0
 802038c:	f7e0 fb98 	bl	8000ac0 <__aeabi_dcmplt>
 8020390:	4603      	mov	r3, r0
 8020392:	2b00      	cmp	r3, #0
 8020394:	d008      	beq.n	80203a8 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 8020396:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 802039a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802039e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80203a2:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 80203a6:	e003      	b.n	80203b0 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 80203a8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80203ac:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 80203b0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80203b4:	4690      	mov	r8, r2
 80203b6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80203ba:	f04f 0200 	mov.w	r2, #0
 80203be:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80203c2:	4640      	mov	r0, r8
 80203c4:	4649      	mov	r1, r9
 80203c6:	f7e0 fb8f 	bl	8000ae8 <__aeabi_dcmpge>
 80203ca:	4603      	mov	r3, r0
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d016      	beq.n	80203fe <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 80203d0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80203d4:	f04f 0000 	mov.w	r0, #0
 80203d8:	49c1      	ldr	r1, [pc, #772]	; (80206e0 <svd_u3DvUgOe+0x470>)
 80203da:	f7e0 fa29 	bl	8000830 <__aeabi_ddiv>
 80203de:	4602      	mov	r2, r0
 80203e0:	460b      	mov	r3, r1
 80203e2:	ec43 2b17 	vmov	d7, r2, r3
 80203e6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80203ea:	2201      	movs	r2, #1
 80203ec:	4619      	mov	r1, r3
 80203ee:	eeb0 0a47 	vmov.f32	s0, s14
 80203f2:	eef0 0a67 	vmov.f32	s1, s15
 80203f6:	2003      	movs	r0, #3
 80203f8:	f002 fe36 	bl	8023068 <xscal_59GtRAwv>
 80203fc:	e026      	b.n	802044c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 80203fe:	2300      	movs	r3, #0
 8020400:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020404:	e01e      	b.n	8020444 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 8020406:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802040a:	00db      	lsls	r3, r3, #3
 802040c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020410:	4413      	add	r3, r2
 8020412:	3b88      	subs	r3, #136	; 0x88
 8020414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020418:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 802041c:	f7e0 fa08 	bl	8000830 <__aeabi_ddiv>
 8020420:	4602      	mov	r2, r0
 8020422:	460b      	mov	r3, r1
 8020424:	4610      	mov	r0, r2
 8020426:	4619      	mov	r1, r3
 8020428:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802042c:	00db      	lsls	r3, r3, #3
 802042e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020432:	4413      	add	r3, r2
 8020434:	3b88      	subs	r3, #136	; 0x88
 8020436:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 802043a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802043e:	3301      	adds	r3, #1
 8020440:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020444:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020448:	2b02      	cmp	r3, #2
 802044a:	dddc      	ble.n	8020406 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 802044c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8020450:	f04f 0200 	mov.w	r2, #0
 8020454:	4ba2      	ldr	r3, [pc, #648]	; (80206e0 <svd_u3DvUgOe+0x470>)
 8020456:	f7df ff0b 	bl	8000270 <__adddf3>
 802045a:	4602      	mov	r2, r0
 802045c:	460b      	mov	r3, r1
 802045e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 8020462:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020466:	4692      	mov	sl, r2
 8020468:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 802046c:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 8020470:	e005      	b.n	802047e <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 8020472:	f04f 0200 	mov.w	r2, #0
 8020476:	f04f 0300 	mov.w	r3, #0
 802047a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 802047e:	2301      	movs	r3, #1
 8020480:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020484:	e047      	b.n	8020516 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 8020486:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 802048a:	4613      	mov	r3, r2
 802048c:	005b      	lsls	r3, r3, #1
 802048e:	4413      	add	r3, r2
 8020490:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 8020494:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8020498:	2b00      	cmp	r3, #0
 802049a:	d025      	beq.n	80204e8 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 802049c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80204a0:	3301      	adds	r3, #1
 80204a2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80204a6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80204aa:	9300      	str	r3, [sp, #0]
 80204ac:	4613      	mov	r3, r2
 80204ae:	2201      	movs	r2, #1
 80204b0:	2003      	movs	r0, #3
 80204b2:	f001 fdf8 	bl	80220a6 <xdotc_mznw4aLl>
 80204b6:	ec51 0b10 	vmov	r0, r1, d0
 80204ba:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80204be:	f7e0 f9b7 	bl	8000830 <__aeabi_ddiv>
 80204c2:	4602      	mov	r2, r0
 80204c4:	460b      	mov	r3, r1
 80204c6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80204ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80204ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80204d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80204d6:	3301      	adds	r3, #1
 80204d8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80204dc:	2101      	movs	r1, #1
 80204de:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80204e2:	2003      	movs	r0, #3
 80204e4:	f001 fd8b 	bl	8021ffe <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 80204e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80204ec:	00db      	lsls	r3, r3, #3
 80204ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80204f2:	4413      	add	r3, r2
 80204f4:	3b88      	subs	r3, #136	; 0x88
 80204f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80204fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80204fe:	00db      	lsls	r3, r3, #3
 8020500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020504:	4413      	add	r3, r2
 8020506:	3bb8      	subs	r3, #184	; 0xb8
 8020508:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 802050c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020510:	3301      	adds	r3, #1
 8020512:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020516:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802051a:	2b02      	cmp	r3, #2
 802051c:	ddb3      	ble.n	8020486 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 802051e:	e015      	b.n	802054c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 8020520:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020524:	00da      	lsls	r2, r3, #3
 8020526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802052a:	1899      	adds	r1, r3, r2
 802052c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020530:	00db      	lsls	r3, r3, #3
 8020532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020536:	4413      	add	r3, r2
 8020538:	3b88      	subs	r3, #136	; 0x88
 802053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802053e:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 8020542:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020546:	3301      	adds	r3, #1
 8020548:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 802054c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020550:	2b02      	cmp	r3, #2
 8020552:	dde5      	ble.n	8020520 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 8020554:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8020558:	2202      	movs	r2, #2
 802055a:	4619      	mov	r1, r3
 802055c:	2002      	movs	r0, #2
 802055e:	f002 f95f 	bl	8022820 <xnrm2_Rlk0oxWw>
 8020562:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 8020566:	f04f 0200 	mov.w	r2, #0
 802056a:	f04f 0300 	mov.w	r3, #0
 802056e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020572:	f7e0 fa9b 	bl	8000aac <__aeabi_dcmpeq>
 8020576:	4603      	mov	r3, r0
 8020578:	2b00      	cmp	r3, #0
 802057a:	d006      	beq.n	802058a <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 802057c:	f04f 0200 	mov.w	r2, #0
 8020580:	f04f 0300 	mov.w	r3, #0
 8020584:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8020588:	e10d      	b.n	80207a6 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 802058a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 802058e:	f04f 0200 	mov.w	r2, #0
 8020592:	f04f 0300 	mov.w	r3, #0
 8020596:	f7e0 fa93 	bl	8000ac0 <__aeabi_dcmplt>
 802059a:	4603      	mov	r3, r0
 802059c:	2b00      	cmp	r3, #0
 802059e:	d00e      	beq.n	80205be <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 80205a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80205a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80205a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80205ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80205b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80205b4:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 80205b8:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 80205bc:	e003      	b.n	80205c6 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 80205be:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80205c2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 80205c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80205ca:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 80205ce:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80205d2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80205d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80205da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80205de:	f04f 0200 	mov.w	r2, #0
 80205e2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80205e6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80205ea:	f7e0 fa7d 	bl	8000ae8 <__aeabi_dcmpge>
 80205ee:	4603      	mov	r3, r0
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d016      	beq.n	8020622 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 80205f4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80205f8:	f04f 0000 	mov.w	r0, #0
 80205fc:	4938      	ldr	r1, [pc, #224]	; (80206e0 <svd_u3DvUgOe+0x470>)
 80205fe:	f7e0 f917 	bl	8000830 <__aeabi_ddiv>
 8020602:	4602      	mov	r2, r0
 8020604:	460b      	mov	r3, r1
 8020606:	ec43 2b17 	vmov	d7, r2, r3
 802060a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 802060e:	2202      	movs	r2, #2
 8020610:	4619      	mov	r1, r3
 8020612:	eeb0 0a47 	vmov.f32	s0, s14
 8020616:	eef0 0a67 	vmov.f32	s1, s15
 802061a:	2002      	movs	r0, #2
 802061c:	f002 fd58 	bl	80230d0 <xscal_PLmmUlD2>
 8020620:	e026      	b.n	8020670 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 8020622:	2301      	movs	r3, #1
 8020624:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020628:	e01e      	b.n	8020668 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 802062a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802062e:	00db      	lsls	r3, r3, #3
 8020630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020634:	4413      	add	r3, r2
 8020636:	3bb8      	subs	r3, #184	; 0xb8
 8020638:	e9d3 0100 	ldrd	r0, r1, [r3]
 802063c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020640:	f7e0 f8f6 	bl	8000830 <__aeabi_ddiv>
 8020644:	4602      	mov	r2, r0
 8020646:	460b      	mov	r3, r1
 8020648:	4610      	mov	r0, r2
 802064a:	4619      	mov	r1, r3
 802064c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020650:	00db      	lsls	r3, r3, #3
 8020652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020656:	4413      	add	r3, r2
 8020658:	3bb8      	subs	r3, #184	; 0xb8
 802065a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 802065e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020662:	3301      	adds	r3, #1
 8020664:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020668:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802066c:	2b02      	cmp	r3, #2
 802066e:	dddc      	ble.n	802062a <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 8020670:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8020674:	f04f 0200 	mov.w	r2, #0
 8020678:	4b19      	ldr	r3, [pc, #100]	; (80206e0 <svd_u3DvUgOe+0x470>)
 802067a:	f7df fdf9 	bl	8000270 <__adddf3>
 802067e:	4602      	mov	r2, r0
 8020680:	460b      	mov	r3, r1
 8020682:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 8020686:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 802068a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 802068e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8020696:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 802069a:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 802069e:	2302      	movs	r3, #2
 80206a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80206a4:	e013      	b.n	80206ce <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 80206a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80206aa:	3b01      	subs	r3, #1
 80206ac:	00db      	lsls	r3, r3, #3
 80206ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80206b2:	4413      	add	r3, r2
 80206b4:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 80206b8:	f04f 0200 	mov.w	r2, #0
 80206bc:	f04f 0300 	mov.w	r3, #0
 80206c0:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 80206c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80206c8:	3301      	adds	r3, #1
 80206ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80206ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80206d2:	2b03      	cmp	r3, #3
 80206d4:	dde7      	ble.n	80206a6 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 80206d6:	2301      	movs	r3, #1
 80206d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80206dc:	e025      	b.n	802072a <svd_u3DvUgOe+0x4ba>
 80206de:	bf00      	nop
 80206e0:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 80206e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80206e8:	00db      	lsls	r3, r3, #3
 80206ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80206ee:	4413      	add	r3, r2
 80206f0:	3bb8      	subs	r3, #184	; 0xb8
 80206f2:	ed93 7b00 	vldr	d7, [r3]
 80206f6:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80206fa:	4613      	mov	r3, r2
 80206fc:	005b      	lsls	r3, r3, #1
 80206fe:	4413      	add	r3, r2
 8020700:	1c98      	adds	r0, r3, #2
 8020702:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8020706:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 802070a:	2302      	movs	r3, #2
 802070c:	9300      	str	r3, [sp, #0]
 802070e:	4613      	mov	r3, r2
 8020710:	4602      	mov	r2, r0
 8020712:	eeb0 0a47 	vmov.f32	s0, s14
 8020716:	eef0 0a67 	vmov.f32	s1, s15
 802071a:	2002      	movs	r0, #2
 802071c:	f001 fbc7 	bl	8021eae <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 8020720:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020724:	3301      	adds	r3, #1
 8020726:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802072a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802072e:	2b02      	cmp	r3, #2
 8020730:	ddd8      	ble.n	80206e4 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 8020732:	2301      	movs	r3, #1
 8020734:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020738:	e031      	b.n	802079e <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 802073a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802073e:	00db      	lsls	r3, r3, #3
 8020740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020744:	4413      	add	r3, r2
 8020746:	3bb8      	subs	r3, #184	; 0xb8
 8020748:	e9d3 2300 	ldrd	r2, r3, [r3]
 802074c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8020750:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020754:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8020758:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 802075c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8020760:	f7e0 f866 	bl	8000830 <__aeabi_ddiv>
 8020764:	4602      	mov	r2, r0
 8020766:	460b      	mov	r3, r1
 8020768:	ec43 2b17 	vmov	d7, r2, r3
 802076c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020770:	4613      	mov	r3, r2
 8020772:	005b      	lsls	r3, r3, #1
 8020774:	4413      	add	r3, r2
 8020776:	3302      	adds	r3, #2
 8020778:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 802077c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8020780:	9300      	str	r3, [sp, #0]
 8020782:	4613      	mov	r3, r2
 8020784:	2202      	movs	r2, #2
 8020786:	eeb0 0a47 	vmov.f32	s0, s14
 802078a:	eef0 0a67 	vmov.f32	s1, s15
 802078e:	2002      	movs	r0, #2
 8020790:	f001 fbe1 	bl	8021f56 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 8020794:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020798:	3301      	adds	r3, #1
 802079a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802079e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207a2:	2b02      	cmp	r3, #2
 80207a4:	ddc9      	ble.n	802073a <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 80207a6:	2301      	movs	r3, #1
 80207a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80207ac:	e016      	b.n	80207dc <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 80207ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207b2:	00da      	lsls	r2, r3, #3
 80207b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	1899      	adds	r1, r3, r2
 80207bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207c0:	00db      	lsls	r3, r3, #3
 80207c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80207c6:	4413      	add	r3, r2
 80207c8:	3bb8      	subs	r3, #184	; 0xb8
 80207ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ce:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 80207d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207d6:	3301      	adds	r3, #1
 80207d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80207dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80207e0:	2b02      	cmp	r3, #2
 80207e2:	dde4      	ble.n	80207ae <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 80207e4:	2300      	movs	r3, #0
 80207e6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 80207ea:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80207ee:	2205      	movs	r2, #5
 80207f0:	4619      	mov	r1, r3
 80207f2:	2002      	movs	r0, #2
 80207f4:	f002 f970 	bl	8022ad8 <xnrm2_xDOlDEtw>
 80207f8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 80207fc:	f04f 0200 	mov.w	r2, #0
 8020800:	f04f 0300 	mov.w	r3, #0
 8020804:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8020808:	f7e0 f978 	bl	8000afc <__aeabi_dcmpgt>
 802080c:	4603      	mov	r3, r0
 802080e:	2b00      	cmp	r3, #0
 8020810:	f000 808a 	beq.w	8020928 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 8020814:	2301      	movs	r3, #1
 8020816:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 802081a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 802081e:	f04f 0200 	mov.w	r2, #0
 8020822:	f04f 0300 	mov.w	r3, #0
 8020826:	f7e0 f94b 	bl	8000ac0 <__aeabi_dcmplt>
 802082a:	4603      	mov	r3, r0
 802082c:	2b00      	cmp	r3, #0
 802082e:	d00e      	beq.n	802084e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 8020830:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020838:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 802083c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8020844:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8020848:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 802084c:	e003      	b.n	8020856 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 802084e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020852:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 8020856:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 802085a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 802085e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8020866:	f04f 0200 	mov.w	r2, #0
 802086a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 802086e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8020872:	f7e0 f939 	bl	8000ae8 <__aeabi_dcmpge>
 8020876:	4603      	mov	r3, r0
 8020878:	2b00      	cmp	r3, #0
 802087a:	d016      	beq.n	80208aa <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 802087c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020880:	f04f 0000 	mov.w	r0, #0
 8020884:	49d6      	ldr	r1, [pc, #856]	; (8020be0 <svd_u3DvUgOe+0x970>)
 8020886:	f7df ffd3 	bl	8000830 <__aeabi_ddiv>
 802088a:	4602      	mov	r2, r0
 802088c:	460b      	mov	r3, r1
 802088e:	ec43 2b17 	vmov	d7, r2, r3
 8020892:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8020896:	2205      	movs	r2, #5
 8020898:	4619      	mov	r1, r3
 802089a:	eeb0 0a47 	vmov.f32	s0, s14
 802089e:	eef0 0a67 	vmov.f32	s1, s15
 80208a2:	2002      	movs	r0, #2
 80208a4:	f002 fbe0 	bl	8023068 <xscal_59GtRAwv>
 80208a8:	e026      	b.n	80208f8 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 80208aa:	2304      	movs	r3, #4
 80208ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80208b0:	e01e      	b.n	80208f0 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 80208b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208b6:	00db      	lsls	r3, r3, #3
 80208b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80208bc:	4413      	add	r3, r2
 80208be:	3b88      	subs	r3, #136	; 0x88
 80208c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80208c4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80208c8:	f7df ffb2 	bl	8000830 <__aeabi_ddiv>
 80208cc:	4602      	mov	r2, r0
 80208ce:	460b      	mov	r3, r1
 80208d0:	4610      	mov	r0, r2
 80208d2:	4619      	mov	r1, r3
 80208d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208d8:	00db      	lsls	r3, r3, #3
 80208da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80208de:	4413      	add	r3, r2
 80208e0:	3b88      	subs	r3, #136	; 0x88
 80208e2:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 80208e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208ea:	3301      	adds	r3, #1
 80208ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80208f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80208f4:	2b05      	cmp	r3, #5
 80208f6:	dddc      	ble.n	80208b2 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 80208f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80208fc:	f04f 0200 	mov.w	r2, #0
 8020900:	4bb7      	ldr	r3, [pc, #732]	; (8020be0 <svd_u3DvUgOe+0x970>)
 8020902:	f7df fcb5 	bl	8000270 <__adddf3>
 8020906:	4602      	mov	r2, r0
 8020908:	460b      	mov	r3, r1
 802090a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 802090e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020912:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8020916:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802091a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802091e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8020922:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 8020926:	e005      	b.n	8020934 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 8020928:	f04f 0200 	mov.w	r2, #0
 802092c:	f04f 0300 	mov.w	r3, #0
 8020930:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 8020934:	2302      	movs	r3, #2
 8020936:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802093a:	e048      	b.n	80209ce <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 802093c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020940:	4613      	mov	r3, r2
 8020942:	005b      	lsls	r3, r3, #1
 8020944:	4413      	add	r3, r2
 8020946:	3301      	adds	r3, #1
 8020948:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 802094c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8020950:	2b00      	cmp	r3, #0
 8020952:	d025      	beq.n	80209a0 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 8020954:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020958:	3301      	adds	r3, #1
 802095a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 802095e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8020962:	9300      	str	r3, [sp, #0]
 8020964:	4613      	mov	r3, r2
 8020966:	2205      	movs	r2, #5
 8020968:	2002      	movs	r0, #2
 802096a:	f001 fb9c 	bl	80220a6 <xdotc_mznw4aLl>
 802096e:	ec51 0b10 	vmov	r0, r1, d0
 8020972:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8020976:	f7df ff5b 	bl	8000830 <__aeabi_ddiv>
 802097a:	4602      	mov	r2, r0
 802097c:	460b      	mov	r3, r1
 802097e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8020982:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802098a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802098e:	3301      	adds	r3, #1
 8020990:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8020994:	2105      	movs	r1, #5
 8020996:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 802099a:	2002      	movs	r0, #2
 802099c:	f001 fb2f 	bl	8021ffe <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 80209a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80209a4:	00db      	lsls	r3, r3, #3
 80209a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80209aa:	4413      	add	r3, r2
 80209ac:	3b88      	subs	r3, #136	; 0x88
 80209ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80209b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80209b6:	00db      	lsls	r3, r3, #3
 80209b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80209bc:	4413      	add	r3, r2
 80209be:	3bb8      	subs	r3, #184	; 0xb8
 80209c0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 80209c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80209c8:	3301      	adds	r3, #1
 80209ca:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80209ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80209d2:	2b02      	cmp	r3, #2
 80209d4:	ddb2      	ble.n	802093c <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 80209d6:	2301      	movs	r3, #1
 80209d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80209dc:	e017      	b.n	8020a0e <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 80209de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80209e2:	1cd8      	adds	r0, r3, #3
 80209e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80209e8:	3303      	adds	r3, #3
 80209ea:	00da      	lsls	r2, r3, #3
 80209ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209f0:	1899      	adds	r1, r3, r2
 80209f2:	00c3      	lsls	r3, r0, #3
 80209f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80209f8:	4413      	add	r3, r2
 80209fa:	3b88      	subs	r3, #136	; 0x88
 80209fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a00:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 8020a04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020a08:	3301      	adds	r3, #1
 8020a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020a12:	2b02      	cmp	r3, #2
 8020a14:	dde3      	ble.n	80209de <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 8020a16:	2301      	movs	r3, #1
 8020a18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 8020a1c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8020a20:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 8020a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8020a2c:	f04f 0200 	mov.w	r2, #0
 8020a30:	f04f 0300 	mov.w	r3, #0
 8020a34:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 8020a38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8020a40:	f04f 0200 	mov.w	r2, #0
 8020a44:	f04f 0300 	mov.w	r3, #0
 8020a48:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 8020a4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020a50:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8020a54:	f04f 0200 	mov.w	r2, #0
 8020a58:	4b61      	ldr	r3, [pc, #388]	; (8020be0 <svd_u3DvUgOe+0x970>)
 8020a5a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 8020a5e:	2301      	movs	r3, #1
 8020a60:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020a64:	e100      	b.n	8020c68 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 8020a66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a6a:	009b      	lsls	r3, r3, #2
 8020a6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 8020a70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a74:	00db      	lsls	r3, r3, #3
 8020a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8020a7a:	4413      	add	r3, r2
 8020a7c:	3ba0      	subs	r3, #160	; 0xa0
 8020a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a82:	f04f 0200 	mov.w	r2, #0
 8020a86:	f04f 0300 	mov.w	r3, #0
 8020a8a:	f7e0 f80f 	bl	8000aac <__aeabi_dcmpeq>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	f040 80a7 	bne.w	8020be4 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 8020a96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020a9a:	3301      	adds	r3, #1
 8020a9c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8020aa0:	e043      	b.n	8020b2a <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 8020aa2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8020aa6:	4613      	mov	r3, r2
 8020aa8:	005b      	lsls	r3, r3, #1
 8020aaa:	441a      	add	r2, r3
 8020aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020ab0:	4413      	add	r3, r2
 8020ab2:	3301      	adds	r3, #1
 8020ab4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 8020ab8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020abc:	f1c3 0403 	rsb	r4, r3, #3
 8020ac0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020ac4:	f1c3 0003 	rsb	r0, r3, #3
 8020ac8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020acc:	1c5a      	adds	r2, r3, #1
 8020ace:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020ad2:	9300      	str	r3, [sp, #0]
 8020ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020ad8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8020adc:	f001 fae3 	bl	80220a6 <xdotc_mznw4aLl>
 8020ae0:	ec51 0b10 	vmov	r0, r1, d0
 8020ae4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020ae8:	00da      	lsls	r2, r3, #3
 8020aea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020aee:	4413      	add	r3, r2
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7df fe9c 	bl	8000830 <__aeabi_ddiv>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8020b00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8020b08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020b0c:	1c59      	adds	r1, r3, #1
 8020b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b12:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020b16:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8020b1a:	4620      	mov	r0, r4
 8020b1c:	f001 fa6f 	bl	8021ffe <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 8020b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020b24:	3301      	adds	r3, #1
 8020b26:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8020b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020b2e:	2b02      	cmp	r3, #2
 8020b30:	ddb7      	ble.n	8020aa2 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 8020b32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020b36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020b3a:	e026      	b.n	8020b8a <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 8020b3c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020b40:	4613      	mov	r3, r2
 8020b42:	005b      	lsls	r3, r3, #1
 8020b44:	441a      	add	r2, r3
 8020b46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b4a:	4413      	add	r3, r2
 8020b4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 8020b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020b54:	00da      	lsls	r2, r3, #3
 8020b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020b5a:	4413      	add	r3, r2
 8020b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020b64:	00da      	lsls	r2, r3, #3
 8020b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020b6a:	4413      	add	r3, r2
 8020b6c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8020b70:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8020b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8020b78:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8020b7c:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 8020b80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b84:	3301      	adds	r3, #1
 8020b86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8020b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b8e:	2b02      	cmp	r3, #2
 8020b90:	ddd4      	ble.n	8020b3c <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 8020b92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020b96:	00da      	lsls	r2, r3, #3
 8020b98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020b9c:	189c      	adds	r4, r3, r2
 8020b9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8020ba2:	f04f 0200 	mov.w	r2, #0
 8020ba6:	4b0e      	ldr	r3, [pc, #56]	; (8020be0 <svd_u3DvUgOe+0x970>)
 8020ba8:	f7df fb62 	bl	8000270 <__adddf3>
 8020bac:	4602      	mov	r2, r0
 8020bae:	460b      	mov	r3, r1
 8020bb0:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 8020bb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	dd50      	ble.n	8020c5e <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 8020bbc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020bc0:	4613      	mov	r3, r2
 8020bc2:	005b      	lsls	r3, r3, #1
 8020bc4:	4413      	add	r3, r2
 8020bc6:	00db      	lsls	r3, r3, #3
 8020bc8:	461a      	mov	r2, r3
 8020bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020bce:	1899      	adds	r1, r3, r2
 8020bd0:	f04f 0200 	mov.w	r2, #0
 8020bd4:	f04f 0300 	mov.w	r3, #0
 8020bd8:	e9c1 2300 	strd	r2, r3, [r1]
 8020bdc:	e03f      	b.n	8020c5e <svd_u3DvUgOe+0x9ee>
 8020bde:	bf00      	nop
 8020be0:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 8020be4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020be8:	4613      	mov	r3, r2
 8020bea:	005b      	lsls	r3, r3, #1
 8020bec:	4413      	add	r3, r2
 8020bee:	00db      	lsls	r3, r3, #3
 8020bf0:	461a      	mov	r2, r3
 8020bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020bf6:	1899      	adds	r1, r3, r2
 8020bf8:	f04f 0200 	mov.w	r2, #0
 8020bfc:	f04f 0300 	mov.w	r3, #0
 8020c00:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 8020c04:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020c08:	4613      	mov	r3, r2
 8020c0a:	005b      	lsls	r3, r3, #1
 8020c0c:	4413      	add	r3, r2
 8020c0e:	00db      	lsls	r3, r3, #3
 8020c10:	f103 0208 	add.w	r2, r3, #8
 8020c14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020c18:	1899      	adds	r1, r3, r2
 8020c1a:	f04f 0200 	mov.w	r2, #0
 8020c1e:	f04f 0300 	mov.w	r3, #0
 8020c22:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 8020c26:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8020c2a:	4613      	mov	r3, r2
 8020c2c:	005b      	lsls	r3, r3, #1
 8020c2e:	4413      	add	r3, r2
 8020c30:	00db      	lsls	r3, r3, #3
 8020c32:	f103 0210 	add.w	r2, r3, #16
 8020c36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020c3a:	1899      	adds	r1, r3, r2
 8020c3c:	f04f 0200 	mov.w	r2, #0
 8020c40:	f04f 0300 	mov.w	r3, #0
 8020c44:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 8020c48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020c4c:	00da      	lsls	r2, r3, #3
 8020c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020c52:	1899      	adds	r1, r3, r2
 8020c54:	f04f 0200 	mov.w	r2, #0
 8020c58:	4b11      	ldr	r3, [pc, #68]	; (8020ca0 <svd_u3DvUgOe+0xa30>)
 8020c5a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 8020c5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020c62:	3b01      	subs	r3, #1
 8020c64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020c68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	f6bf aefa 	bge.w	8020a66 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 8020c72:	2302      	movs	r3, #2
 8020c74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020c78:	e096      	b.n	8020da8 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 8020c7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	dc4c      	bgt.n	8020d1c <svd_u3DvUgOe+0xaac>
 8020c82:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020c86:	f04f 0200 	mov.w	r2, #0
 8020c8a:	f04f 0300 	mov.w	r3, #0
 8020c8e:	f7df ff0d 	bl	8000aac <__aeabi_dcmpeq>
 8020c92:	4603      	mov	r3, r0
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d141      	bne.n	8020d1c <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 8020c98:	2302      	movs	r3, #2
 8020c9a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020c9e:	e039      	b.n	8020d14 <svd_u3DvUgOe+0xaa4>
 8020ca0:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 8020ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020ca8:	1e5a      	subs	r2, r3, #1
 8020caa:	4613      	mov	r3, r2
 8020cac:	005b      	lsls	r3, r3, #1
 8020cae:	4413      	add	r3, r2
 8020cb0:	3302      	adds	r3, #2
 8020cb2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 8020cb6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020cba:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8020cbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020cc2:	9300      	str	r3, [sp, #0]
 8020cc4:	6813      	ldr	r3, [r2, #0]
 8020cc6:	2202      	movs	r2, #2
 8020cc8:	6809      	ldr	r1, [r1, #0]
 8020cca:	2002      	movs	r0, #2
 8020ccc:	f001 f9eb 	bl	80220a6 <xdotc_mznw4aLl>
 8020cd0:	ec51 0b10 	vmov	r0, r1, d0
 8020cd4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	3308      	adds	r3, #8
 8020cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce0:	f7df fda6 	bl	8000830 <__aeabi_ddiv>
 8020ce4:	4602      	mov	r2, r0
 8020ce6:	460b      	mov	r3, r1
 8020ce8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8020cec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8020cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8020cf4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020cf8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020cfc:	6812      	ldr	r2, [r2, #0]
 8020cfe:	2102      	movs	r1, #2
 8020d00:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8020d04:	2002      	movs	r0, #2
 8020d06:	f001 f97a 	bl	8021ffe <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 8020d0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020d0e:	3301      	adds	r3, #1
 8020d10:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8020d14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8020d18:	2b03      	cmp	r3, #3
 8020d1a:	ddc3      	ble.n	8020ca4 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 8020d1c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020d20:	4613      	mov	r3, r2
 8020d22:	005b      	lsls	r3, r3, #1
 8020d24:	4413      	add	r3, r2
 8020d26:	00db      	lsls	r3, r3, #3
 8020d28:	461a      	mov	r2, r3
 8020d2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020d2e:	681b      	ldr	r3, [r3, #0]
 8020d30:	1899      	adds	r1, r3, r2
 8020d32:	f04f 0200 	mov.w	r2, #0
 8020d36:	f04f 0300 	mov.w	r3, #0
 8020d3a:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 8020d3e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020d42:	4613      	mov	r3, r2
 8020d44:	005b      	lsls	r3, r3, #1
 8020d46:	4413      	add	r3, r2
 8020d48:	00db      	lsls	r3, r3, #3
 8020d4a:	f103 0208 	add.w	r2, r3, #8
 8020d4e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	1899      	adds	r1, r3, r2
 8020d56:	f04f 0200 	mov.w	r2, #0
 8020d5a:	f04f 0300 	mov.w	r3, #0
 8020d5e:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 8020d62:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8020d66:	4613      	mov	r3, r2
 8020d68:	005b      	lsls	r3, r3, #1
 8020d6a:	4413      	add	r3, r2
 8020d6c:	00db      	lsls	r3, r3, #3
 8020d6e:	f103 0210 	add.w	r2, r3, #16
 8020d72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020d76:	681b      	ldr	r3, [r3, #0]
 8020d78:	1899      	adds	r1, r3, r2
 8020d7a:	f04f 0200 	mov.w	r2, #0
 8020d7e:	f04f 0300 	mov.w	r3, #0
 8020d82:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 8020d86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020d8a:	015a      	lsls	r2, r3, #5
 8020d8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020d90:	681b      	ldr	r3, [r3, #0]
 8020d92:	1899      	adds	r1, r3, r2
 8020d94:	f04f 0200 	mov.w	r2, #0
 8020d98:	4bbd      	ldr	r3, [pc, #756]	; (8021090 <svd_u3DvUgOe+0xe20>)
 8020d9a:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 8020d9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020da2:	3b01      	subs	r3, #1
 8020da4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8020da8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	f6bf af64 	bge.w	8020c7a <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 8020db2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8020db6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 8020dba:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020dbe:	f04f 0200 	mov.w	r2, #0
 8020dc2:	f04f 0300 	mov.w	r3, #0
 8020dc6:	f7df fe71 	bl	8000aac <__aeabi_dcmpeq>
 8020dca:	4603      	mov	r3, r0
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	d12a      	bne.n	8020e26 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 8020dd0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8020dd4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8020dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8020de0:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8020de4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 8020de8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8020dec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020df0:	f7df fd1e 	bl	8000830 <__aeabi_ddiv>
 8020df4:	4602      	mov	r2, r0
 8020df6:	460b      	mov	r3, r1
 8020df8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 8020dfc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020e00:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 8020e04:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8020e08:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020e0c:	f7df fd10 	bl	8000830 <__aeabi_ddiv>
 8020e10:	4602      	mov	r2, r0
 8020e12:	460b      	mov	r3, r1
 8020e14:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 8020e18:	2101      	movs	r1, #1
 8020e1a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020e1e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020e22:	f002 f989 	bl	8023138 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020e26:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020e2a:	f04f 0200 	mov.w	r2, #0
 8020e2e:	f04f 0300 	mov.w	r3, #0
 8020e32:	f7df fe3b 	bl	8000aac <__aeabi_dcmpeq>
 8020e36:	4603      	mov	r3, r0
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d12b      	bne.n	8020e94 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 8020e3c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020e40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8020e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8020e4c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8020e50:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020e54:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020e58:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020e5c:	f7df fce8 	bl	8000830 <__aeabi_ddiv>
 8020e60:	4602      	mov	r2, r0
 8020e62:	460b      	mov	r3, r1
 8020e64:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020e68:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020e6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 8020e70:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020e74:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020e78:	f7df fbb0 	bl	80005dc <__aeabi_dmul>
 8020e7c:	4602      	mov	r2, r0
 8020e7e:	460b      	mov	r3, r1
 8020e80:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 8020e84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020e88:	2104      	movs	r1, #4
 8020e8a:	6818      	ldr	r0, [r3, #0]
 8020e8c:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020e90:	f002 f952 	bl	8023138 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 8020e94:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020e98:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 8020e9c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8020ea0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 8020ea4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020ea8:	f04f 0200 	mov.w	r2, #0
 8020eac:	f04f 0300 	mov.w	r3, #0
 8020eb0:	f7df fdfc 	bl	8000aac <__aeabi_dcmpeq>
 8020eb4:	4603      	mov	r3, r0
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	d12a      	bne.n	8020f10 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 8020eba:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8020ebe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8020ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8020eca:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8020ece:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 8020ed2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8020ed6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020eda:	f7df fca9 	bl	8000830 <__aeabi_ddiv>
 8020ede:	4602      	mov	r2, r0
 8020ee0:	460b      	mov	r3, r1
 8020ee2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 8020ee6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020eea:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 8020eee:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8020ef2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020ef6:	f7df fc9b 	bl	8000830 <__aeabi_ddiv>
 8020efa:	4602      	mov	r2, r0
 8020efc:	460b      	mov	r3, r1
 8020efe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 8020f02:	2104      	movs	r1, #4
 8020f04:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020f08:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020f0c:	f002 f914 	bl	8023138 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 8020f10:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8020f14:	f04f 0200 	mov.w	r2, #0
 8020f18:	f04f 0300 	mov.w	r3, #0
 8020f1c:	f7df fdc6 	bl	8000aac <__aeabi_dcmpeq>
 8020f20:	4603      	mov	r3, r0
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d12b      	bne.n	8020f7e <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 8020f26:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8020f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020f36:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8020f3a:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 8020f3e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8020f42:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020f46:	f7df fc73 	bl	8000830 <__aeabi_ddiv>
 8020f4a:	4602      	mov	r2, r0
 8020f4c:	460b      	mov	r3, r1
 8020f4e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 8020f52:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020f56:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 8020f5a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8020f5e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8020f62:	f7df fb3b 	bl	80005dc <__aeabi_dmul>
 8020f66:	4602      	mov	r2, r0
 8020f68:	460b      	mov	r3, r1
 8020f6a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 8020f6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020f72:	2107      	movs	r1, #7
 8020f74:	6818      	ldr	r0, [r3, #0]
 8020f76:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020f7a:	f002 f8dd 	bl	8023138 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 8020f7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8020f82:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 8020f86:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020f8a:	f04f 0200 	mov.w	r2, #0
 8020f8e:	f04f 0300 	mov.w	r3, #0
 8020f92:	f7df fd8b 	bl	8000aac <__aeabi_dcmpeq>
 8020f96:	4603      	mov	r3, r0
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d11e      	bne.n	8020fda <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 8020f9c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8020fa0:	67ba      	str	r2, [r7, #120]	; 0x78
 8020fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020fa8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8020fac:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 8020fb0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8020fb4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020fb8:	f7df fc3a 	bl	8000830 <__aeabi_ddiv>
 8020fbc:	4602      	mov	r2, r0
 8020fbe:	460b      	mov	r3, r1
 8020fc0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 8020fc4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8020fc8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 8020fcc:	2107      	movs	r1, #7
 8020fce:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8020fd2:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8020fd6:	f002 f8af 	bl	8023138 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 8020fda:	f04f 0200 	mov.w	r2, #0
 8020fde:	f04f 0300 	mov.w	r3, #0
 8020fe2:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 8020fe6:	2300      	movs	r3, #0
 8020fe8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 8020fec:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8020ff0:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8020ff4:	eeb0 1a46 	vmov.f32	s2, s12
 8020ff8:	eef0 1a66 	vmov.f32	s3, s13
 8020ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8021000:	eef0 0a67 	vmov.f32	s1, s15
 8021004:	f00d fd62 	bl	802eacc <fmax>
 8021008:	eeb0 8a40 	vmov.f32	s16, s0
 802100c:	eef0 8a60 	vmov.f32	s17, s1
 8021010:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8021014:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8021018:	eeb0 1a46 	vmov.f32	s2, s12
 802101c:	eef0 1a66 	vmov.f32	s3, s13
 8021020:	eeb0 0a47 	vmov.f32	s0, s14
 8021024:	eef0 0a67 	vmov.f32	s1, s15
 8021028:	f00d fd50 	bl	802eacc <fmax>
 802102c:	eeb0 7a40 	vmov.f32	s14, s0
 8021030:	eef0 7a60 	vmov.f32	s15, s1
 8021034:	eeb0 1a47 	vmov.f32	s2, s14
 8021038:	eef0 1a67 	vmov.f32	s3, s15
 802103c:	eeb0 0a48 	vmov.f32	s0, s16
 8021040:	eef0 0a68 	vmov.f32	s1, s17
 8021044:	f00d fd42 	bl	802eacc <fmax>
 8021048:	eeb0 8a40 	vmov.f32	s16, s0
 802104c:	eef0 8a60 	vmov.f32	s17, s1
 8021050:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8021054:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8021088 <svd_u3DvUgOe+0xe18>
 8021058:	eeb0 0a47 	vmov.f32	s0, s14
 802105c:	eef0 0a67 	vmov.f32	s1, s15
 8021060:	f00d fd34 	bl	802eacc <fmax>
 8021064:	eeb0 7a40 	vmov.f32	s14, s0
 8021068:	eef0 7a60 	vmov.f32	s15, s1
 802106c:	eeb0 1a47 	vmov.f32	s2, s14
 8021070:	eef0 1a67 	vmov.f32	s3, s15
 8021074:	eeb0 0a48 	vmov.f32	s0, s16
 8021078:	eef0 0a68 	vmov.f32	s1, s17
 802107c:	f00d fd26 	bl	802eacc <fmax>
 8021080:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 8021084:	f000 be8a 	b.w	8021d9c <svd_u3DvUgOe+0x1b2c>
	...
 8021090:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 8021094:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021098:	3301      	adds	r3, #1
 802109a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 802109e:	2300      	movs	r3, #0
 80210a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 80210a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 80210ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d103      	bne.n	80210bc <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 80210b4:	2301      	movs	r3, #1
 80210b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80210ba:	e092      	b.n	80211e2 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 80210bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210c0:	3b01      	subs	r3, #1
 80210c2:	00db      	lsls	r3, r3, #3
 80210c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80210c8:	4413      	add	r3, r2
 80210ca:	3bb8      	subs	r3, #184	; 0xb8
 80210cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d0:	673a      	str	r2, [r7, #112]	; 0x70
 80210d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80210d6:	677b      	str	r3, [r7, #116]	; 0x74
 80210d8:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80210dc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 80210e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210e4:	3b01      	subs	r3, #1
 80210e6:	00db      	lsls	r3, r3, #3
 80210e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80210ec:	4413      	add	r3, r2
 80210ee:	3ba0      	subs	r3, #160	; 0xa0
 80210f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f4:	66ba      	str	r2, [r7, #104]	; 0x68
 80210f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80210fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80210fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021100:	00db      	lsls	r3, r3, #3
 8021102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021106:	4413      	add	r3, r2
 8021108:	3ba0      	subs	r3, #160	; 0xa0
 802110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802110e:	663a      	str	r2, [r7, #96]	; 0x60
 8021110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021114:	667b      	str	r3, [r7, #100]	; 0x64
 8021116:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 802111a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802111e:	f7df f8a7 	bl	8000270 <__adddf3>
 8021122:	4602      	mov	r2, r0
 8021124:	460b      	mov	r3, r1
 8021126:	4610      	mov	r0, r2
 8021128:	4619      	mov	r1, r3
 802112a:	f04f 0200 	mov.w	r2, #0
 802112e:	4bb2      	ldr	r3, [pc, #712]	; (80213f8 <svd_u3DvUgOe+0x1188>)
 8021130:	f7df fa54 	bl	80005dc <__aeabi_dmul>
 8021134:	4602      	mov	r2, r0
 8021136:	460b      	mov	r3, r1
 8021138:	4610      	mov	r0, r2
 802113a:	4619      	mov	r1, r3
 802113c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021140:	f7df fcd2 	bl	8000ae8 <__aeabi_dcmpge>
 8021144:	4603      	mov	r3, r0
 8021146:	2b00      	cmp	r3, #0
 8021148:	d012      	beq.n	8021170 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 802114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802114e:	3b01      	subs	r3, #1
 8021150:	00db      	lsls	r3, r3, #3
 8021152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021156:	4413      	add	r3, r2
 8021158:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 802115c:	f04f 0200 	mov.w	r2, #0
 8021160:	f04f 0300 	mov.w	r3, #0
 8021164:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8021168:	2301      	movs	r3, #1
 802116a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 802116e:	e038      	b.n	80211e2 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 8021170:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021174:	f04f 0200 	mov.w	r2, #0
 8021178:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 802117c:	f7df fcaa 	bl	8000ad4 <__aeabi_dcmple>
 8021180:	4603      	mov	r3, r0
 8021182:	2b00      	cmp	r3, #0
 8021184:	d115      	bne.n	80211b2 <svd_u3DvUgOe+0xf42>
 8021186:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 802118a:	2b14      	cmp	r3, #20
 802118c:	dd24      	ble.n	80211d8 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 802118e:	f04f 0200 	mov.w	r2, #0
 8021192:	4b99      	ldr	r3, [pc, #612]	; (80213f8 <svd_u3DvUgOe+0x1188>)
 8021194:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8021198:	f7df fa20 	bl	80005dc <__aeabi_dmul>
 802119c:	4602      	mov	r2, r0
 802119e:	460b      	mov	r3, r1
 80211a0:	4610      	mov	r0, r2
 80211a2:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 80211a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80211a8:	f7df fc9e 	bl	8000ae8 <__aeabi_dcmpge>
 80211ac:	4603      	mov	r3, r0
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d012      	beq.n	80211d8 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 80211b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211b6:	3b01      	subs	r3, #1
 80211b8:	00db      	lsls	r3, r3, #3
 80211ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80211be:	4413      	add	r3, r2
 80211c0:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 80211c4:	f04f 0200 	mov.w	r2, #0
 80211c8:	f04f 0300 	mov.w	r3, #0
 80211cc:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 80211d0:	2301      	movs	r3, #1
 80211d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80211d6:	e004      	b.n	80211e2 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 80211d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211dc:	3b01      	subs	r3, #1
 80211de:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 80211e2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	f43f af59 	beq.w	802109e <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 80211ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80211f0:	1c5a      	adds	r2, r3, #1
 80211f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211f6:	4293      	cmp	r3, r2
 80211f8:	d103      	bne.n	8021202 <svd_u3DvUgOe+0xf92>
      kase = 4;
 80211fa:	2304      	movs	r3, #4
 80211fc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8021200:	e0c7      	b.n	8021392 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 8021202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021206:	3302      	adds	r3, #2
 8021208:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 802120c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021210:	3302      	adds	r3, #2
 8021212:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 8021216:	2300      	movs	r3, #0
 8021218:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 802121c:	e092      	b.n	8021344 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 802121e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021222:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 8021226:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 802122a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802122e:	429a      	cmp	r2, r3
 8021230:	d103      	bne.n	802123a <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 8021232:	2301      	movs	r3, #1
 8021234:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021238:	e084      	b.n	8021344 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 802123a:	f04f 0200 	mov.w	r2, #0
 802123e:	f04f 0300 	mov.w	r3, #0
 8021242:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 8021246:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802124a:	1c5a      	adds	r2, r3, #1
 802124c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021250:	4293      	cmp	r3, r2
 8021252:	dc11      	bgt.n	8021278 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 8021254:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021258:	3b01      	subs	r3, #1
 802125a:	00db      	lsls	r3, r3, #3
 802125c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021260:	4413      	add	r3, r2
 8021262:	3bb8      	subs	r3, #184	; 0xb8
 8021264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021268:	65ba      	str	r2, [r7, #88]	; 0x58
 802126a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802126e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021270:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8021274:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 8021278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802127c:	1c5a      	adds	r2, r3, #1
 802127e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021282:	4293      	cmp	r3, r2
 8021284:	dd17      	ble.n	80212b6 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 8021286:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802128a:	3b02      	subs	r3, #2
 802128c:	00db      	lsls	r3, r3, #3
 802128e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021292:	4413      	add	r3, r2
 8021294:	3bb8      	subs	r3, #184	; 0xb8
 8021296:	e9d3 2300 	ldrd	r2, r3, [r3]
 802129a:	653a      	str	r2, [r7, #80]	; 0x50
 802129c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212a0:	657b      	str	r3, [r7, #84]	; 0x54
 80212a2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80212a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80212aa:	f7de ffe1 	bl	8000270 <__adddf3>
 80212ae:	4602      	mov	r2, r0
 80212b0:	460b      	mov	r3, r1
 80212b2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 80212b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80212ba:	3b01      	subs	r3, #1
 80212bc:	00db      	lsls	r3, r3, #3
 80212be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80212c2:	4413      	add	r3, r2
 80212c4:	3ba0      	subs	r3, #160	; 0xa0
 80212c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80212cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80212d2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80212d6:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 80212da:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80212de:	f04f 0200 	mov.w	r2, #0
 80212e2:	4b45      	ldr	r3, [pc, #276]	; (80213f8 <svd_u3DvUgOe+0x1188>)
 80212e4:	f7df f97a 	bl	80005dc <__aeabi_dmul>
 80212e8:	4602      	mov	r2, r0
 80212ea:	460b      	mov	r3, r1
 80212ec:	4610      	mov	r0, r2
 80212ee:	4619      	mov	r1, r3
 80212f0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80212f4:	f7df fbf8 	bl	8000ae8 <__aeabi_dcmpge>
 80212f8:	4603      	mov	r3, r0
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d10a      	bne.n	8021314 <svd_u3DvUgOe+0x10a4>
 80212fe:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8021302:	f04f 0200 	mov.w	r2, #0
 8021306:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 802130a:	f7df fbe3 	bl	8000ad4 <__aeabi_dcmple>
 802130e:	4603      	mov	r3, r0
 8021310:	2b00      	cmp	r3, #0
 8021312:	d012      	beq.n	802133a <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 8021314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8021318:	3b01      	subs	r3, #1
 802131a:	00db      	lsls	r3, r3, #3
 802131c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021320:	4413      	add	r3, r2
 8021322:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 8021326:	f04f 0200 	mov.w	r2, #0
 802132a:	f04f 0300 	mov.w	r3, #0
 802132e:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 8021332:	2301      	movs	r3, #1
 8021334:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 8021338:	e004      	b.n	8021344 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 802133a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802133e:	3b01      	subs	r3, #1
 8021340:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 8021344:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8021348:	2b00      	cmp	r3, #0
 802134a:	d106      	bne.n	802135a <svd_u3DvUgOe+0x10ea>
 802134c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8021350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021354:	429a      	cmp	r2, r3
 8021356:	f6bf af62 	bge.w	802121e <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 802135a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802135e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021362:	429a      	cmp	r2, r3
 8021364:	d103      	bne.n	802136e <svd_u3DvUgOe+0x10fe>
        kase = 3;
 8021366:	2303      	movs	r3, #3
 8021368:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 802136c:	e011      	b.n	8021392 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 802136e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021372:	1c9a      	adds	r2, r3, #2
 8021374:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021378:	4293      	cmp	r3, r2
 802137a:	d103      	bne.n	8021384 <svd_u3DvUgOe+0x1114>
        kase = 1;
 802137c:	2301      	movs	r3, #1
 802137e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8021382:	e006      	b.n	8021392 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 8021384:	2302      	movs	r3, #2
 8021386:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 802138a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802138e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 8021392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021396:	2b03      	cmp	r3, #3
 8021398:	f000 8113 	beq.w	80215c2 <svd_u3DvUgOe+0x1352>
 802139c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80213a0:	2b03      	cmp	r3, #3
 80213a2:	f300 8443 	bgt.w	8021c2c <svd_u3DvUgOe+0x19bc>
 80213a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80213aa:	2b01      	cmp	r3, #1
 80213ac:	d005      	beq.n	80213ba <svd_u3DvUgOe+0x114a>
 80213ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80213b2:	2b02      	cmp	r3, #2
 80213b4:	d07b      	beq.n	80214ae <svd_u3DvUgOe+0x123e>
 80213b6:	f000 bc39 	b.w	8021c2c <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 80213ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213be:	00db      	lsls	r3, r3, #3
 80213c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213c4:	4413      	add	r3, r2
 80213c6:	3bb8      	subs	r3, #184	; 0xb8
 80213c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213cc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 80213d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213d4:	00db      	lsls	r3, r3, #3
 80213d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80213da:	4413      	add	r3, r2
 80213dc:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 80213e0:	f04f 0200 	mov.w	r2, #0
 80213e4:	f04f 0300 	mov.w	r3, #0
 80213e8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 80213ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80213f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80213f4:	e053      	b.n	802149e <svd_u3DvUgOe+0x122e>
 80213f6:	bf00      	nop
 80213f8:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 80213fc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8021400:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021404:	00db      	lsls	r3, r3, #3
 8021406:	18d0      	adds	r0, r2, r3
 8021408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802140c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8021410:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8021414:	f001 fd2a 	bl	8022e6c <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 8021418:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802141c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021420:	429a      	cmp	r2, r3
 8021422:	dd19      	ble.n	8021458 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 8021424:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021428:	643a      	str	r2, [r7, #64]	; 0x40
 802142a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802142e:	647b      	str	r3, [r7, #68]	; 0x44
 8021430:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8021434:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8021438:	f7df f8d0 	bl	80005dc <__aeabi_dmul>
 802143c:	4602      	mov	r2, r0
 802143e:	460b      	mov	r3, r1
 8021440:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 8021444:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8021448:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802144c:	f7df f8c6 	bl	80005dc <__aeabi_dmul>
 8021450:	4602      	mov	r2, r0
 8021452:	460b      	mov	r3, r1
 8021454:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 8021458:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 802145c:	4613      	mov	r3, r2
 802145e:	005b      	lsls	r3, r3, #1
 8021460:	4413      	add	r3, r2
 8021462:	1c59      	adds	r1, r3, #1
 8021464:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021468:	1c5a      	adds	r2, r3, #1
 802146a:	4613      	mov	r3, r2
 802146c:	005b      	lsls	r3, r3, #1
 802146e:	4413      	add	r3, r2
 8021470:	1c5a      	adds	r2, r3, #1
 8021472:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8021476:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 802147a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802147e:	eeb0 1a46 	vmov.f32	s2, s12
 8021482:	eef0 1a66 	vmov.f32	s3, s13
 8021486:	eeb0 0a47 	vmov.f32	s0, s14
 802148a:	eef0 0a67 	vmov.f32	s1, s15
 802148e:	6818      	ldr	r0, [r3, #0]
 8021490:	f001 fbd0 	bl	8022c34 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 8021494:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021498:	3b01      	subs	r3, #1
 802149a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 802149e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80214a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214a6:	429a      	cmp	r2, r3
 80214a8:	daa8      	bge.n	80213fc <svd_u3DvUgOe+0x118c>
      }
      break;
 80214aa:	f000 bc77 	b.w	8021d9c <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 80214ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214b2:	3b01      	subs	r3, #1
 80214b4:	00db      	lsls	r3, r3, #3
 80214b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214ba:	4413      	add	r3, r2
 80214bc:	3bb8      	subs	r3, #184	; 0xb8
 80214be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 80214c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214ca:	3b01      	subs	r3, #1
 80214cc:	00db      	lsls	r3, r3, #3
 80214ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80214d2:	4413      	add	r3, r2
 80214d4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 80214d8:	f04f 0200 	mov.w	r2, #0
 80214dc:	f04f 0300 	mov.w	r3, #0
 80214e0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 80214e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80214e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80214ec:	e061      	b.n	80215b2 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 80214ee:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80214f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80214f6:	00db      	lsls	r3, r3, #3
 80214f8:	18d0      	adds	r0, r2, r3
 80214fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80214fe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8021502:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8021506:	f001 fcb1 	bl	8022e6c <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 802150a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 802150e:	63ba      	str	r2, [r7, #56]	; 0x38
 8021510:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021516:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802151a:	00db      	lsls	r3, r3, #3
 802151c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021520:	4413      	add	r3, r2
 8021522:	3bb8      	subs	r3, #184	; 0xb8
 8021524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021528:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802152c:	f7df f856 	bl	80005dc <__aeabi_dmul>
 8021530:	4602      	mov	r2, r0
 8021532:	460b      	mov	r3, r1
 8021534:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 8021538:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802153c:	00db      	lsls	r3, r3, #3
 802153e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021542:	4413      	add	r3, r2
 8021544:	3bb8      	subs	r3, #184	; 0xb8
 8021546:	e9d3 0100 	ldrd	r0, r1, [r3]
 802154a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802154e:	f7df f845 	bl	80005dc <__aeabi_dmul>
 8021552:	4602      	mov	r2, r0
 8021554:	460b      	mov	r3, r1
 8021556:	4610      	mov	r0, r2
 8021558:	4619      	mov	r1, r3
 802155a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 802155e:	00db      	lsls	r3, r3, #3
 8021560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021564:	4413      	add	r3, r2
 8021566:	3bb8      	subs	r3, #184	; 0xb8
 8021568:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 802156c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021570:	4613      	mov	r3, r2
 8021572:	005b      	lsls	r3, r3, #1
 8021574:	4413      	add	r3, r2
 8021576:	1c59      	adds	r1, r3, #1
 8021578:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802157c:	1e5a      	subs	r2, r3, #1
 802157e:	4613      	mov	r3, r2
 8021580:	005b      	lsls	r3, r3, #1
 8021582:	4413      	add	r3, r2
 8021584:	3301      	adds	r3, #1
 8021586:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 802158a:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 802158e:	eeb0 1a46 	vmov.f32	s2, s12
 8021592:	eef0 1a66 	vmov.f32	s3, s13
 8021596:	eeb0 0a47 	vmov.f32	s0, s14
 802159a:	eef0 0a67 	vmov.f32	s1, s15
 802159e:	461a      	mov	r2, r3
 80215a0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80215a4:	f001 fb46 	bl	8022c34 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 80215a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80215ac:	3301      	adds	r3, #1
 80215ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80215b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80215b6:	1c5a      	adds	r2, r3, #1
 80215b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80215bc:	4293      	cmp	r3, r2
 80215be:	dd96      	ble.n	80214ee <svd_u3DvUgOe+0x127e>
      }
      break;
 80215c0:	e3ec      	b.n	8021d9c <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 80215c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80215c6:	3301      	adds	r3, #1
 80215c8:	00db      	lsls	r3, r3, #3
 80215ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80215ce:	4413      	add	r3, r2
 80215d0:	3ba0      	subs	r3, #160	; 0xa0
 80215d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215d6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 80215da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80215de:	633a      	str	r2, [r7, #48]	; 0x30
 80215e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80215e4:	637b      	str	r3, [r7, #52]	; 0x34
 80215e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80215ea:	00db      	lsls	r3, r3, #3
 80215ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80215f0:	4413      	add	r3, r2
 80215f2:	3ba0      	subs	r3, #160	; 0xa0
 80215f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80215fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80215fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021600:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8021604:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8021608:	f00d fa60 	bl	802eacc <fmax>
 802160c:	eeb0 7a40 	vmov.f32	s14, s0
 8021610:	eef0 7a60 	vmov.f32	s15, s1
 8021614:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021618:	00db      	lsls	r3, r3, #3
 802161a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 802161e:	4413      	add	r3, r2
 8021620:	3bb8      	subs	r3, #184	; 0xb8
 8021622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021626:	623a      	str	r2, [r7, #32]
 8021628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802162c:	627b      	str	r3, [r7, #36]	; 0x24
 802162e:	ed97 1b08 	vldr	d1, [r7, #32]
 8021632:	eeb0 0a47 	vmov.f32	s0, s14
 8021636:	eef0 0a67 	vmov.f32	s1, s15
 802163a:	f00d fa47 	bl	802eacc <fmax>
 802163e:	eeb0 7a40 	vmov.f32	s14, s0
 8021642:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 8021646:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802164a:	00db      	lsls	r3, r3, #3
 802164c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021650:	4413      	add	r3, r2
 8021652:	3ba0      	subs	r3, #160	; 0xa0
 8021654:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8021658:	61ba      	str	r2, [r7, #24]
 802165a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802165e:	61fb      	str	r3, [r7, #28]
 8021660:	ed97 1b06 	vldr	d1, [r7, #24]
 8021664:	eeb0 0a47 	vmov.f32	s0, s14
 8021668:	eef0 0a67 	vmov.f32	s1, s15
 802166c:	f00d fa2e 	bl	802eacc <fmax>
 8021670:	eeb0 7a40 	vmov.f32	s14, s0
 8021674:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 8021678:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802167c:	00db      	lsls	r3, r3, #3
 802167e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021682:	4413      	add	r3, r2
 8021684:	3bb8      	subs	r3, #184	; 0xb8
 8021686:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 802168a:	613a      	str	r2, [r7, #16]
 802168c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021690:	617b      	str	r3, [r7, #20]
 8021692:	ed97 1b04 	vldr	d1, [r7, #16]
 8021696:	eeb0 0a47 	vmov.f32	s0, s14
 802169a:	eef0 0a67 	vmov.f32	s1, s15
 802169e:	f00d fa15 	bl	802eacc <fmax>
 80216a2:	eeb0 7a40 	vmov.f32	s14, s0
 80216a6:	eef0 7a60 	vmov.f32	s15, s1
 80216aa:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 80216ae:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80216b2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80216b6:	f7df f8bb 	bl	8000830 <__aeabi_ddiv>
 80216ba:	4602      	mov	r2, r0
 80216bc:	460b      	mov	r3, r1
 80216be:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 80216c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80216c6:	00db      	lsls	r3, r3, #3
 80216c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80216cc:	4413      	add	r3, r2
 80216ce:	3ba0      	subs	r3, #160	; 0xa0
 80216d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80216d8:	f7df f8aa 	bl	8000830 <__aeabi_ddiv>
 80216dc:	4602      	mov	r2, r0
 80216de:	460b      	mov	r3, r1
 80216e0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 80216e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80216e8:	00db      	lsls	r3, r3, #3
 80216ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80216ee:	4413      	add	r3, r2
 80216f0:	3bb8      	subs	r3, #184	; 0xb8
 80216f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80216fa:	f7df f899 	bl	8000830 <__aeabi_ddiv>
 80216fe:	4602      	mov	r2, r0
 8021700:	460b      	mov	r3, r1
 8021702:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 8021706:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802170a:	00db      	lsls	r3, r3, #3
 802170c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021710:	4413      	add	r3, r2
 8021712:	3ba0      	subs	r3, #160	; 0xa0
 8021714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021718:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802171c:	f7df f888 	bl	8000830 <__aeabi_ddiv>
 8021720:	4602      	mov	r2, r0
 8021722:	460b      	mov	r3, r1
 8021724:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 8021728:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802172c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021730:	f7de fd9e 	bl	8000270 <__adddf3>
 8021734:	4602      	mov	r2, r0
 8021736:	460b      	mov	r3, r1
 8021738:	4614      	mov	r4, r2
 802173a:	461d      	mov	r5, r3
 802173c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021740:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021744:	f7de fd92 	bl	800026c <__aeabi_dsub>
 8021748:	4602      	mov	r2, r0
 802174a:	460b      	mov	r3, r1
 802174c:	4620      	mov	r0, r4
 802174e:	4629      	mov	r1, r5
 8021750:	f7de ff44 	bl	80005dc <__aeabi_dmul>
 8021754:	4602      	mov	r2, r0
 8021756:	460b      	mov	r3, r1
 8021758:	4614      	mov	r4, r2
 802175a:	461d      	mov	r5, r3
 802175c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021760:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021764:	f7de ff3a 	bl	80005dc <__aeabi_dmul>
 8021768:	4602      	mov	r2, r0
 802176a:	460b      	mov	r3, r1
 802176c:	4620      	mov	r0, r4
 802176e:	4629      	mov	r1, r5
 8021770:	f7de fd7e 	bl	8000270 <__adddf3>
 8021774:	4602      	mov	r2, r0
 8021776:	460b      	mov	r3, r1
 8021778:	4610      	mov	r0, r2
 802177a:	4619      	mov	r1, r3
 802177c:	f04f 0200 	mov.w	r2, #0
 8021780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021784:	f7df f854 	bl	8000830 <__aeabi_ddiv>
 8021788:	4602      	mov	r2, r0
 802178a:	460b      	mov	r3, r1
 802178c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 8021790:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021794:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021798:	f7de ff20 	bl	80005dc <__aeabi_dmul>
 802179c:	4602      	mov	r2, r0
 802179e:	460b      	mov	r3, r1
 80217a0:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 80217a4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80217a8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80217ac:	f7de ff16 	bl	80005dc <__aeabi_dmul>
 80217b0:	4602      	mov	r2, r0
 80217b2:	460b      	mov	r3, r1
 80217b4:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 80217b8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80217bc:	f04f 0200 	mov.w	r2, #0
 80217c0:	f04f 0300 	mov.w	r3, #0
 80217c4:	f7df f972 	bl	8000aac <__aeabi_dcmpeq>
 80217c8:	4603      	mov	r3, r0
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d00a      	beq.n	80217e4 <svd_u3DvUgOe+0x1574>
 80217ce:	f04f 0200 	mov.w	r2, #0
 80217d2:	f04f 0300 	mov.w	r3, #0
 80217d6:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80217da:	f7df f967 	bl	8000aac <__aeabi_dcmpeq>
 80217de:	4603      	mov	r3, r0
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d13f      	bne.n	8021864 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 80217e4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80217e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80217ec:	f7de fef6 	bl	80005dc <__aeabi_dmul>
 80217f0:	4602      	mov	r2, r0
 80217f2:	460b      	mov	r3, r1
 80217f4:	4610      	mov	r0, r2
 80217f6:	4619      	mov	r1, r3
 80217f8:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80217fc:	f7de fd38 	bl	8000270 <__adddf3>
 8021800:	4602      	mov	r2, r0
 8021802:	460b      	mov	r3, r1
 8021804:	ec43 2b17 	vmov	d7, r2, r3
 8021808:	eeb0 0a47 	vmov.f32	s0, s14
 802180c:	eef0 0a67 	vmov.f32	s1, s15
 8021810:	f00d fa46 	bl	802eca0 <sqrt>
 8021814:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 8021818:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 802181c:	f04f 0200 	mov.w	r2, #0
 8021820:	f04f 0300 	mov.w	r3, #0
 8021824:	f7df f94c 	bl	8000ac0 <__aeabi_dcmplt>
 8021828:	4603      	mov	r3, r0
 802182a:	2b00      	cmp	r3, #0
 802182c:	d009      	beq.n	8021842 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 802182e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8021832:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8021836:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 802183a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 802183e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 8021842:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021846:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 802184a:	f7de fd11 	bl	8000270 <__adddf3>
 802184e:	4602      	mov	r2, r0
 8021850:	460b      	mov	r3, r1
 8021852:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8021856:	f7de ffeb 	bl	8000830 <__aeabi_ddiv>
 802185a:	4602      	mov	r2, r0
 802185c:	460b      	mov	r3, r1
 802185e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 8021862:	e005      	b.n	8021870 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 8021864:	f04f 0200 	mov.w	r2, #0
 8021868:	f04f 0300 	mov.w	r3, #0
 802186c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 8021870:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021874:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021878:	f7de fcfa 	bl	8000270 <__adddf3>
 802187c:	4602      	mov	r2, r0
 802187e:	460b      	mov	r3, r1
 8021880:	4614      	mov	r4, r2
 8021882:	461d      	mov	r5, r3
 8021884:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021888:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 802188c:	f7de fcee 	bl	800026c <__aeabi_dsub>
 8021890:	4602      	mov	r2, r0
 8021892:	460b      	mov	r3, r1
 8021894:	4620      	mov	r0, r4
 8021896:	4629      	mov	r1, r5
 8021898:	f7de fea0 	bl	80005dc <__aeabi_dmul>
 802189c:	4602      	mov	r2, r0
 802189e:	460b      	mov	r3, r1
 80218a0:	4610      	mov	r0, r2
 80218a2:	4619      	mov	r1, r3
 80218a4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80218a8:	f7de fce2 	bl	8000270 <__adddf3>
 80218ac:	4602      	mov	r2, r0
 80218ae:	460b      	mov	r3, r1
 80218b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 80218b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80218b8:	00db      	lsls	r3, r3, #3
 80218ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80218be:	4413      	add	r3, r2
 80218c0:	3bb8      	subs	r3, #184	; 0xb8
 80218c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80218c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80218ca:	f7de ffb1 	bl	8000830 <__aeabi_ddiv>
 80218ce:	4602      	mov	r2, r0
 80218d0:	460b      	mov	r3, r1
 80218d2:	4610      	mov	r0, r2
 80218d4:	4619      	mov	r1, r3
 80218d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80218da:	f7de fe7f 	bl	80005dc <__aeabi_dmul>
 80218de:	4602      	mov	r2, r0
 80218e0:	460b      	mov	r3, r1
 80218e2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 80218e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80218ea:	3301      	adds	r3, #1
 80218ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80218f0:	e183      	b.n	8021bfa <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 80218f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80218f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80218fa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80218fe:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8021902:	f001 fab3 	bl	8022e6c <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 8021906:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802190a:	1c5a      	adds	r2, r3, #1
 802190c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021910:	4293      	cmp	r3, r2
 8021912:	dd03      	ble.n	802191c <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 8021914:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8021918:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 802191c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021920:	3b01      	subs	r3, #1
 8021922:	00db      	lsls	r3, r3, #3
 8021924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021928:	4413      	add	r3, r2
 802192a:	3bb8      	subs	r3, #184	; 0xb8
 802192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021930:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 8021934:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021938:	3b01      	subs	r3, #1
 802193a:	00db      	lsls	r3, r3, #3
 802193c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021940:	4413      	add	r3, r2
 8021942:	3ba0      	subs	r3, #160	; 0xa0
 8021944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021948:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 802194c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021950:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021954:	f7de fe42 	bl	80005dc <__aeabi_dmul>
 8021958:	4602      	mov	r2, r0
 802195a:	460b      	mov	r3, r1
 802195c:	4690      	mov	r8, r2
 802195e:	4699      	mov	r9, r3
 8021960:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8021964:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021968:	f7de fe38 	bl	80005dc <__aeabi_dmul>
 802196c:	4602      	mov	r2, r0
 802196e:	460b      	mov	r3, r1
 8021970:	4610      	mov	r0, r2
 8021972:	4619      	mov	r1, r3
 8021974:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021978:	1e5c      	subs	r4, r3, #1
 802197a:	4602      	mov	r2, r0
 802197c:	460b      	mov	r3, r1
 802197e:	4640      	mov	r0, r8
 8021980:	4649      	mov	r1, r9
 8021982:	f7de fc73 	bl	800026c <__aeabi_dsub>
 8021986:	4602      	mov	r2, r0
 8021988:	460b      	mov	r3, r1
 802198a:	4610      	mov	r0, r2
 802198c:	4619      	mov	r1, r3
 802198e:	00e3      	lsls	r3, r4, #3
 8021990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021994:	4413      	add	r3, r2
 8021996:	3bb8      	subs	r3, #184	; 0xb8
 8021998:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 802199c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219a0:	00db      	lsls	r3, r3, #3
 80219a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219a6:	4413      	add	r3, r2
 80219a8:	3ba0      	subs	r3, #160	; 0xa0
 80219aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80219ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80219b2:	f7de fe13 	bl	80005dc <__aeabi_dmul>
 80219b6:	4602      	mov	r2, r0
 80219b8:	460b      	mov	r3, r1
 80219ba:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 80219be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219c2:	00db      	lsls	r3, r3, #3
 80219c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219c8:	4413      	add	r3, r2
 80219ca:	3ba0      	subs	r3, #160	; 0xa0
 80219cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80219d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80219d4:	f7de fe02 	bl	80005dc <__aeabi_dmul>
 80219d8:	4602      	mov	r2, r0
 80219da:	460b      	mov	r3, r1
 80219dc:	4610      	mov	r0, r2
 80219de:	4619      	mov	r1, r3
 80219e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219e4:	00db      	lsls	r3, r3, #3
 80219e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80219ea:	4413      	add	r3, r2
 80219ec:	3ba0      	subs	r3, #160	; 0xa0
 80219ee:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 80219f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80219f6:	1e5a      	subs	r2, r3, #1
 80219f8:	4613      	mov	r3, r2
 80219fa:	005b      	lsls	r3, r3, #1
 80219fc:	4413      	add	r3, r2
 80219fe:	1c59      	adds	r1, r3, #1
 8021a00:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021a04:	4613      	mov	r3, r2
 8021a06:	005b      	lsls	r3, r3, #1
 8021a08:	4413      	add	r3, r2
 8021a0a:	1c5a      	adds	r2, r3, #1
 8021a0c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8021a10:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8021a14:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021a18:	eeb0 1a46 	vmov.f32	s2, s12
 8021a1c:	eef0 1a66 	vmov.f32	s3, s13
 8021a20:	eeb0 0a47 	vmov.f32	s0, s14
 8021a24:	eef0 0a67 	vmov.f32	s1, s15
 8021a28:	6818      	ldr	r0, [r3, #0]
 8021a2a:	f001 f903 	bl	8022c34 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 8021a2e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8021a32:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8021a36:	f7de fdd1 	bl	80005dc <__aeabi_dmul>
 8021a3a:	4602      	mov	r2, r0
 8021a3c:	460b      	mov	r3, r1
 8021a3e:	4690      	mov	r8, r2
 8021a40:	4699      	mov	r9, r3
 8021a42:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021a46:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021a4a:	f7de fdc7 	bl	80005dc <__aeabi_dmul>
 8021a4e:	4602      	mov	r2, r0
 8021a50:	460b      	mov	r3, r1
 8021a52:	4610      	mov	r0, r2
 8021a54:	4619      	mov	r1, r3
 8021a56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021a5a:	1e5c      	subs	r4, r3, #1
 8021a5c:	4602      	mov	r2, r0
 8021a5e:	460b      	mov	r3, r1
 8021a60:	4640      	mov	r0, r8
 8021a62:	4649      	mov	r1, r9
 8021a64:	f7de fc04 	bl	8000270 <__adddf3>
 8021a68:	4602      	mov	r2, r0
 8021a6a:	460b      	mov	r3, r1
 8021a6c:	4610      	mov	r0, r2
 8021a6e:	4619      	mov	r1, r3
 8021a70:	00e3      	lsls	r3, r4, #3
 8021a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021a76:	4413      	add	r3, r2
 8021a78:	3ba0      	subs	r3, #160	; 0xa0
 8021a7a:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 8021a7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021a82:	3b01      	subs	r3, #1
 8021a84:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8021a88:	00db      	lsls	r3, r3, #3
 8021a8a:	18d0      	adds	r0, r2, r3
 8021a8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021a90:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8021a94:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8021a98:	f001 f9e8 	bl	8022e6c <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 8021a9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021aa0:	3b01      	subs	r3, #1
 8021aa2:	00db      	lsls	r3, r3, #3
 8021aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021aa8:	4413      	add	r3, r2
 8021aaa:	3bb8      	subs	r3, #184	; 0xb8
 8021aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ab0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021ab4:	f7de fd92 	bl	80005dc <__aeabi_dmul>
 8021ab8:	4602      	mov	r2, r0
 8021aba:	460b      	mov	r3, r1
 8021abc:	4614      	mov	r4, r2
 8021abe:	461d      	mov	r5, r3
 8021ac0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021ac4:	00db      	lsls	r3, r3, #3
 8021ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021aca:	4413      	add	r3, r2
 8021acc:	3ba0      	subs	r3, #160	; 0xa0
 8021ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021ad2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021ad6:	f7de fd81 	bl	80005dc <__aeabi_dmul>
 8021ada:	4602      	mov	r2, r0
 8021adc:	460b      	mov	r3, r1
 8021ade:	4620      	mov	r0, r4
 8021ae0:	4629      	mov	r1, r5
 8021ae2:	f7de fbc5 	bl	8000270 <__adddf3>
 8021ae6:	4602      	mov	r2, r0
 8021ae8:	460b      	mov	r3, r1
 8021aea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 8021aee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021af2:	3b01      	subs	r3, #1
 8021af4:	00db      	lsls	r3, r3, #3
 8021af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021afa:	4413      	add	r3, r2
 8021afc:	3bb8      	subs	r3, #184	; 0xb8
 8021afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b02:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021b06:	60ba      	str	r2, [r7, #8]
 8021b08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021b0c:	60fb      	str	r3, [r7, #12]
 8021b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021b12:	f7de fd63 	bl	80005dc <__aeabi_dmul>
 8021b16:	4602      	mov	r2, r0
 8021b18:	460b      	mov	r3, r1
 8021b1a:	4614      	mov	r4, r2
 8021b1c:	461d      	mov	r5, r3
 8021b1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021b22:	00db      	lsls	r3, r3, #3
 8021b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b28:	4413      	add	r3, r2
 8021b2a:	3ba0      	subs	r3, #160	; 0xa0
 8021b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b30:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021b34:	f7de fd52 	bl	80005dc <__aeabi_dmul>
 8021b38:	4602      	mov	r2, r0
 8021b3a:	460b      	mov	r3, r1
 8021b3c:	4620      	mov	r0, r4
 8021b3e:	4629      	mov	r1, r5
 8021b40:	f7de fb96 	bl	8000270 <__adddf3>
 8021b44:	4602      	mov	r2, r0
 8021b46:	460b      	mov	r3, r1
 8021b48:	4610      	mov	r0, r2
 8021b4a:	4619      	mov	r1, r3
 8021b4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021b50:	00db      	lsls	r3, r3, #3
 8021b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b56:	4413      	add	r3, r2
 8021b58:	3ba0      	subs	r3, #160	; 0xa0
 8021b5a:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 8021b5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021b62:	00db      	lsls	r3, r3, #3
 8021b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b68:	4413      	add	r3, r2
 8021b6a:	3bb8      	subs	r3, #184	; 0xb8
 8021b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b70:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8021b74:	f7de fd32 	bl	80005dc <__aeabi_dmul>
 8021b78:	4602      	mov	r2, r0
 8021b7a:	460b      	mov	r3, r1
 8021b7c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 8021b80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021b84:	00db      	lsls	r3, r3, #3
 8021b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021b8a:	4413      	add	r3, r2
 8021b8c:	3bb8      	subs	r3, #184	; 0xb8
 8021b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8021b96:	f7de fd21 	bl	80005dc <__aeabi_dmul>
 8021b9a:	4602      	mov	r2, r0
 8021b9c:	460b      	mov	r3, r1
 8021b9e:	4610      	mov	r0, r2
 8021ba0:	4619      	mov	r1, r3
 8021ba2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021ba6:	00db      	lsls	r3, r3, #3
 8021ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021bac:	4413      	add	r3, r2
 8021bae:	3bb8      	subs	r3, #184	; 0xb8
 8021bb0:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8021bb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021bb8:	1e5a      	subs	r2, r3, #1
 8021bba:	4613      	mov	r3, r2
 8021bbc:	005b      	lsls	r3, r3, #1
 8021bbe:	4413      	add	r3, r2
 8021bc0:	1c59      	adds	r1, r3, #1
 8021bc2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8021bc6:	4613      	mov	r3, r2
 8021bc8:	005b      	lsls	r3, r3, #1
 8021bca:	4413      	add	r3, r2
 8021bcc:	3301      	adds	r3, #1
 8021bce:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8021bd2:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8021bd6:	eeb0 1a46 	vmov.f32	s2, s12
 8021bda:	eef0 1a66 	vmov.f32	s3, s13
 8021bde:	eeb0 0a47 	vmov.f32	s0, s14
 8021be2:	eef0 0a67 	vmov.f32	s1, s15
 8021be6:	461a      	mov	r2, r3
 8021be8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021bec:	f001 f822 	bl	8022c34 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 8021bf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021bf4:	3301      	adds	r3, #1
 8021bf6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8021bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021bfe:	1c5a      	adds	r2, r3, #1
 8021c00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8021c04:	4293      	cmp	r3, r2
 8021c06:	f77f ae74 	ble.w	80218f2 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 8021c0a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021c0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021c12:	00db      	lsls	r3, r3, #3
 8021c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021c18:	4413      	add	r3, r2
 8021c1a:	3bb8      	subs	r3, #184	; 0xb8
 8021c1c:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 8021c20:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021c24:	3301      	adds	r3, #1
 8021c26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 8021c2a:	e0b7      	b.n	8021d9c <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 8021c2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021c30:	00db      	lsls	r3, r3, #3
 8021c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021c36:	4413      	add	r3, r2
 8021c38:	3ba0      	subs	r3, #160	; 0xa0
 8021c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021c3e:	f04f 0200 	mov.w	r2, #0
 8021c42:	f04f 0300 	mov.w	r3, #0
 8021c46:	f7de ff3b 	bl	8000ac0 <__aeabi_dcmplt>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d025      	beq.n	8021c9c <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 8021c50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021c54:	00db      	lsls	r3, r3, #3
 8021c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021c5a:	4413      	add	r3, r2
 8021c5c:	3ba0      	subs	r3, #160	; 0xa0
 8021c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c62:	603a      	str	r2, [r7, #0]
 8021c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8021c68:	607b      	str	r3, [r7, #4]
 8021c6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021c6e:	00db      	lsls	r3, r3, #3
 8021c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021c74:	4413      	add	r3, r2
 8021c76:	3ba0      	subs	r3, #160	; 0xa0
 8021c78:	ed97 7b00 	vldr	d7, [r7]
 8021c7c:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 8021c80:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021c84:	4613      	mov	r3, r2
 8021c86:	005b      	lsls	r3, r3, #1
 8021c88:	4413      	add	r3, r2
 8021c8a:	1c5a      	adds	r2, r3, #1
 8021c8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021c90:	4611      	mov	r1, r2
 8021c92:	6818      	ldr	r0, [r3, #0]
 8021c94:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8021df0 <svd_u3DvUgOe+0x1b80>
 8021c98:	f001 fa4e 	bl	8023138 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 8021c9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021ca0:	3301      	adds	r3, #1
 8021ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021ca6:	e055      	b.n	8021d54 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 8021ca8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021cac:	00db      	lsls	r3, r3, #3
 8021cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021cb2:	4413      	add	r3, r2
 8021cb4:	3ba0      	subs	r3, #160	; 0xa0
 8021cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cba:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 8021cbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021cc2:	00db      	lsls	r3, r3, #3
 8021cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021cc8:	4413      	add	r3, r2
 8021cca:	3ba0      	subs	r3, #160	; 0xa0
 8021ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021cd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021cd4:	00db      	lsls	r3, r3, #3
 8021cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021cda:	4413      	add	r3, r2
 8021cdc:	3ba0      	subs	r3, #160	; 0xa0
 8021cde:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 8021ce2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8021ce6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021cea:	00db      	lsls	r3, r3, #3
 8021cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021cf0:	4413      	add	r3, r2
 8021cf2:	3ba0      	subs	r3, #160	; 0xa0
 8021cf4:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 8021cf8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021cfc:	4613      	mov	r3, r2
 8021cfe:	005b      	lsls	r3, r3, #1
 8021d00:	4413      	add	r3, r2
 8021d02:	1c59      	adds	r1, r3, #1
 8021d04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021d08:	1c5a      	adds	r2, r3, #1
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	005b      	lsls	r3, r3, #1
 8021d0e:	4413      	add	r3, r2
 8021d10:	3301      	adds	r3, #1
 8021d12:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8021d16:	461a      	mov	r2, r3
 8021d18:	6800      	ldr	r0, [r0, #0]
 8021d1a:	f001 fa3c 	bl	8023196 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 8021d1e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8021d22:	4613      	mov	r3, r2
 8021d24:	005b      	lsls	r3, r3, #1
 8021d26:	4413      	add	r3, r2
 8021d28:	1c59      	adds	r1, r3, #1
 8021d2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021d2e:	1c5a      	adds	r2, r3, #1
 8021d30:	4613      	mov	r3, r2
 8021d32:	005b      	lsls	r3, r3, #1
 8021d34:	4413      	add	r3, r2
 8021d36:	3301      	adds	r3, #1
 8021d38:	461a      	mov	r2, r3
 8021d3a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8021d3e:	f001 fa2a 	bl	8023196 <xswap_JoAqPjUv>
        d = qq;
 8021d42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021d46:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 8021d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021d4e:	3301      	adds	r3, #1
 8021d50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 8021d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021d58:	2b01      	cmp	r3, #1
 8021d5a:	dc16      	bgt.n	8021d8a <svd_u3DvUgOe+0x1b1a>
 8021d5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8021d60:	00db      	lsls	r3, r3, #3
 8021d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021d66:	4413      	add	r3, r2
 8021d68:	3ba0      	subs	r3, #160	; 0xa0
 8021d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021d6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021d72:	00db      	lsls	r3, r3, #3
 8021d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8021d78:	4413      	add	r3, r2
 8021d7a:	3ba0      	subs	r3, #160	; 0xa0
 8021d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d80:	f7de fe9e 	bl	8000ac0 <__aeabi_dcmplt>
 8021d84:	4603      	mov	r3, r0
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d18e      	bne.n	8021ca8 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 8021d8a:	2300      	movs	r3, #0
 8021d8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 8021d90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021d94:	3b01      	subs	r3, #1
 8021d96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 8021d9a:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 8021d9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8021da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021da4:	db04      	blt.n	8021db0 <svd_u3DvUgOe+0x1b40>
 8021da6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8021daa:	2b4a      	cmp	r3, #74	; 0x4a
 8021dac:	f77f a972 	ble.w	8021094 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 8021db0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8021db4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8021db8:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 8021dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021dc0:	f103 0108 	add.w	r1, r3, #8
 8021dc4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8021dc8:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 8021dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8021dd0:	f103 0110 	add.w	r1, r3, #16
 8021dd4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8021dd8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8021ddc:	bf00      	nop
 8021dde:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8021de2:	46bd      	mov	sp, r7
 8021de4:	ecbd 8b02 	vpop	{d8}
 8021de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021dec:	f3af 8000 	nop.w
 8021df0:	00000000 	.word	0x00000000
 8021df4:	bff00000 	.word	0xbff00000

08021df8 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 8021df8:	b590      	push	{r4, r7, lr}
 8021dfa:	b085      	sub	sp, #20
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	ed87 0b02 	vstr	d0, [r7, #8]
 8021e02:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e0a:	f04f 0200 	mov.w	r2, #0
 8021e0e:	f04f 0300 	mov.w	r3, #0
 8021e12:	f7de fe4b 	bl	8000aac <__aeabi_dcmpeq>
 8021e16:	4603      	mov	r3, r0
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d10b      	bne.n	8021e34 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e26:	f7de fd03 	bl	8000830 <__aeabi_ddiv>
 8021e2a:	4602      	mov	r2, r0
 8021e2c:	460b      	mov	r3, r1
 8021e2e:	6879      	ldr	r1, [r7, #4]
 8021e30:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	3308      	adds	r3, #8
 8021e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e3c:	f04f 0200 	mov.w	r2, #0
 8021e40:	f04f 0300 	mov.w	r3, #0
 8021e44:	f7de fe32 	bl	8000aac <__aeabi_dcmpeq>
 8021e48:	4603      	mov	r3, r0
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	d10e      	bne.n	8021e6c <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 8021e4e:	687b      	ldr	r3, [r7, #4]
 8021e50:	3308      	adds	r3, #8
 8021e52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	f103 0408 	add.w	r4, r3, #8
 8021e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e60:	f7de fce6 	bl	8000830 <__aeabi_ddiv>
 8021e64:	4602      	mov	r2, r0
 8021e66:	460b      	mov	r3, r1
 8021e68:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	3310      	adds	r3, #16
 8021e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e74:	f04f 0200 	mov.w	r2, #0
 8021e78:	f04f 0300 	mov.w	r3, #0
 8021e7c:	f7de fe16 	bl	8000aac <__aeabi_dcmpeq>
 8021e80:	4603      	mov	r3, r0
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d000      	beq.n	8021e88 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 8021e86:	e00e      	b.n	8021ea6 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	3310      	adds	r3, #16
 8021e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	f103 0410 	add.w	r4, r3, #16
 8021e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021e9a:	f7de fcc9 	bl	8000830 <__aeabi_ddiv>
 8021e9e:	4602      	mov	r2, r0
 8021ea0:	460b      	mov	r3, r1
 8021ea2:	e9c4 2300 	strd	r2, r3, [r4]
}
 8021ea6:	bf00      	nop
 8021ea8:	3714      	adds	r7, #20
 8021eaa:	46bd      	mov	sp, r7
 8021eac:	bd90      	pop	{r4, r7, pc}

08021eae <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 8021eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021eb0:	b08b      	sub	sp, #44	; 0x2c
 8021eb2:	af00      	add	r7, sp, #0
 8021eb4:	6178      	str	r0, [r7, #20]
 8021eb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8021eba:	6139      	str	r1, [r7, #16]
 8021ebc:	607a      	str	r2, [r7, #4]
 8021ebe:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021ec0:	697b      	ldr	r3, [r7, #20]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	dd43      	ble.n	8021f4e <xaxpy_OQ28XA21+0xa0>
 8021ec6:	f04f 0200 	mov.w	r2, #0
 8021eca:	f04f 0300 	mov.w	r3, #0
 8021ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021ed2:	f7de fdeb 	bl	8000aac <__aeabi_dcmpeq>
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d000      	beq.n	8021ede <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021edc:	e037      	b.n	8021f4e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	3b01      	subs	r3, #1
 8021ee2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021ee6:	3b01      	subs	r3, #1
 8021ee8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021eea:	2300      	movs	r3, #0
 8021eec:	627b      	str	r3, [r7, #36]	; 0x24
 8021eee:	e02a      	b.n	8021f46 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 8021ef0:	69fb      	ldr	r3, [r7, #28]
 8021ef2:	00db      	lsls	r3, r3, #3
 8021ef4:	683a      	ldr	r2, [r7, #0]
 8021ef6:	4413      	add	r3, r2
 8021ef8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021efc:	6a3b      	ldr	r3, [r7, #32]
 8021efe:	00db      	lsls	r3, r3, #3
 8021f00:	693a      	ldr	r2, [r7, #16]
 8021f02:	4413      	add	r3, r2
 8021f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021f0c:	f7de fb66 	bl	80005dc <__aeabi_dmul>
 8021f10:	4602      	mov	r2, r0
 8021f12:	460b      	mov	r3, r1
 8021f14:	4610      	mov	r0, r2
 8021f16:	4619      	mov	r1, r3
 8021f18:	69fb      	ldr	r3, [r7, #28]
 8021f1a:	00db      	lsls	r3, r3, #3
 8021f1c:	683a      	ldr	r2, [r7, #0]
 8021f1e:	18d6      	adds	r6, r2, r3
 8021f20:	4602      	mov	r2, r0
 8021f22:	460b      	mov	r3, r1
 8021f24:	4620      	mov	r0, r4
 8021f26:	4629      	mov	r1, r5
 8021f28:	f7de f9a2 	bl	8000270 <__adddf3>
 8021f2c:	4602      	mov	r2, r0
 8021f2e:	460b      	mov	r3, r1
 8021f30:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021f34:	6a3b      	ldr	r3, [r7, #32]
 8021f36:	3301      	adds	r3, #1
 8021f38:	623b      	str	r3, [r7, #32]
      iy++;
 8021f3a:	69fb      	ldr	r3, [r7, #28]
 8021f3c:	3301      	adds	r3, #1
 8021f3e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f42:	3301      	adds	r3, #1
 8021f44:	627b      	str	r3, [r7, #36]	; 0x24
 8021f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f48:	697b      	ldr	r3, [r7, #20]
 8021f4a:	429a      	cmp	r2, r3
 8021f4c:	dbd0      	blt.n	8021ef0 <xaxpy_OQ28XA21+0x42>
}
 8021f4e:	bf00      	nop
 8021f50:	372c      	adds	r7, #44	; 0x2c
 8021f52:	46bd      	mov	sp, r7
 8021f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021f56 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 8021f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f58:	b08b      	sub	sp, #44	; 0x2c
 8021f5a:	af00      	add	r7, sp, #0
 8021f5c:	6178      	str	r0, [r7, #20]
 8021f5e:	ed87 0b02 	vstr	d0, [r7, #8]
 8021f62:	6139      	str	r1, [r7, #16]
 8021f64:	607a      	str	r2, [r7, #4]
 8021f66:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8021f68:	697b      	ldr	r3, [r7, #20]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	dd43      	ble.n	8021ff6 <xaxpy_Wxch84Fl+0xa0>
 8021f6e:	f04f 0200 	mov.w	r2, #0
 8021f72:	f04f 0300 	mov.w	r3, #0
 8021f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021f7a:	f7de fd97 	bl	8000aac <__aeabi_dcmpeq>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d000      	beq.n	8021f86 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 8021f84:	e037      	b.n	8021ff6 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	3b01      	subs	r3, #1
 8021f8a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8021f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021f8e:	3b01      	subs	r3, #1
 8021f90:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021f92:	2300      	movs	r3, #0
 8021f94:	627b      	str	r3, [r7, #36]	; 0x24
 8021f96:	e02a      	b.n	8021fee <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 8021f98:	69fb      	ldr	r3, [r7, #28]
 8021f9a:	00db      	lsls	r3, r3, #3
 8021f9c:	683a      	ldr	r2, [r7, #0]
 8021f9e:	4413      	add	r3, r2
 8021fa0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021fa4:	6a3b      	ldr	r3, [r7, #32]
 8021fa6:	00db      	lsls	r3, r3, #3
 8021fa8:	693a      	ldr	r2, [r7, #16]
 8021faa:	4413      	add	r3, r2
 8021fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021fb4:	f7de fb12 	bl	80005dc <__aeabi_dmul>
 8021fb8:	4602      	mov	r2, r0
 8021fba:	460b      	mov	r3, r1
 8021fbc:	4610      	mov	r0, r2
 8021fbe:	4619      	mov	r1, r3
 8021fc0:	69fb      	ldr	r3, [r7, #28]
 8021fc2:	00db      	lsls	r3, r3, #3
 8021fc4:	683a      	ldr	r2, [r7, #0]
 8021fc6:	18d6      	adds	r6, r2, r3
 8021fc8:	4602      	mov	r2, r0
 8021fca:	460b      	mov	r3, r1
 8021fcc:	4620      	mov	r0, r4
 8021fce:	4629      	mov	r1, r5
 8021fd0:	f7de f94e 	bl	8000270 <__adddf3>
 8021fd4:	4602      	mov	r2, r0
 8021fd6:	460b      	mov	r3, r1
 8021fd8:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8021fdc:	6a3b      	ldr	r3, [r7, #32]
 8021fde:	3301      	adds	r3, #1
 8021fe0:	623b      	str	r3, [r7, #32]
      iy++;
 8021fe2:	69fb      	ldr	r3, [r7, #28]
 8021fe4:	3301      	adds	r3, #1
 8021fe6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8021fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fea:	3301      	adds	r3, #1
 8021fec:	627b      	str	r3, [r7, #36]	; 0x24
 8021fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ff0:	697b      	ldr	r3, [r7, #20]
 8021ff2:	429a      	cmp	r2, r3
 8021ff4:	dbd0      	blt.n	8021f98 <xaxpy_Wxch84Fl+0x42>
}
 8021ff6:	bf00      	nop
 8021ff8:	372c      	adds	r7, #44	; 0x2c
 8021ffa:	46bd      	mov	sp, r7
 8021ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021ffe <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 8021ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022000:	b08b      	sub	sp, #44	; 0x2c
 8022002:	af00      	add	r7, sp, #0
 8022004:	6178      	str	r0, [r7, #20]
 8022006:	ed87 0b02 	vstr	d0, [r7, #8]
 802200a:	6139      	str	r1, [r7, #16]
 802200c:	607a      	str	r2, [r7, #4]
 802200e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8022010:	697b      	ldr	r3, [r7, #20]
 8022012:	2b00      	cmp	r3, #0
 8022014:	dd43      	ble.n	802209e <xaxpy_guu0hJif+0xa0>
 8022016:	f04f 0200 	mov.w	r2, #0
 802201a:	f04f 0300 	mov.w	r3, #0
 802201e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022022:	f7de fd43 	bl	8000aac <__aeabi_dcmpeq>
 8022026:	4603      	mov	r3, r0
 8022028:	2b00      	cmp	r3, #0
 802202a:	d000      	beq.n	802202e <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 802202c:	e037      	b.n	802209e <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 802202e:	693b      	ldr	r3, [r7, #16]
 8022030:	3b01      	subs	r3, #1
 8022032:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 8022034:	683b      	ldr	r3, [r7, #0]
 8022036:	3b01      	subs	r3, #1
 8022038:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 802203a:	2300      	movs	r3, #0
 802203c:	627b      	str	r3, [r7, #36]	; 0x24
 802203e:	e02a      	b.n	8022096 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 8022040:	69fb      	ldr	r3, [r7, #28]
 8022042:	00db      	lsls	r3, r3, #3
 8022044:	687a      	ldr	r2, [r7, #4]
 8022046:	4413      	add	r3, r2
 8022048:	e9d3 4500 	ldrd	r4, r5, [r3]
 802204c:	6a3b      	ldr	r3, [r7, #32]
 802204e:	00db      	lsls	r3, r3, #3
 8022050:	687a      	ldr	r2, [r7, #4]
 8022052:	4413      	add	r3, r2
 8022054:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802205c:	f7de fabe 	bl	80005dc <__aeabi_dmul>
 8022060:	4602      	mov	r2, r0
 8022062:	460b      	mov	r3, r1
 8022064:	4610      	mov	r0, r2
 8022066:	4619      	mov	r1, r3
 8022068:	69fb      	ldr	r3, [r7, #28]
 802206a:	00db      	lsls	r3, r3, #3
 802206c:	687a      	ldr	r2, [r7, #4]
 802206e:	18d6      	adds	r6, r2, r3
 8022070:	4602      	mov	r2, r0
 8022072:	460b      	mov	r3, r1
 8022074:	4620      	mov	r0, r4
 8022076:	4629      	mov	r1, r5
 8022078:	f7de f8fa 	bl	8000270 <__adddf3>
 802207c:	4602      	mov	r2, r0
 802207e:	460b      	mov	r3, r1
 8022080:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 8022084:	6a3b      	ldr	r3, [r7, #32]
 8022086:	3301      	adds	r3, #1
 8022088:	623b      	str	r3, [r7, #32]
      iy++;
 802208a:	69fb      	ldr	r3, [r7, #28]
 802208c:	3301      	adds	r3, #1
 802208e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 8022090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022092:	3301      	adds	r3, #1
 8022094:	627b      	str	r3, [r7, #36]	; 0x24
 8022096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022098:	697b      	ldr	r3, [r7, #20]
 802209a:	429a      	cmp	r2, r3
 802209c:	dbd0      	blt.n	8022040 <xaxpy_guu0hJif+0x42>
}
 802209e:	bf00      	nop
 80220a0:	372c      	adds	r7, #44	; 0x2c
 80220a2:	46bd      	mov	sp, r7
 80220a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080220a6 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 80220a6:	b580      	push	{r7, lr}
 80220a8:	b08a      	sub	sp, #40	; 0x28
 80220aa:	af00      	add	r7, sp, #0
 80220ac:	60f8      	str	r0, [r7, #12]
 80220ae:	60b9      	str	r1, [r7, #8]
 80220b0:	607a      	str	r2, [r7, #4]
 80220b2:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 80220b4:	f04f 0200 	mov.w	r2, #0
 80220b8:	f04f 0300 	mov.w	r3, #0
 80220bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	dd31      	ble.n	802212a <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 80220ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220cc:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 80220ce:	2300      	movs	r3, #0
 80220d0:	61fb      	str	r3, [r7, #28]
 80220d2:	e026      	b.n	8022122 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 80220d4:	69bb      	ldr	r3, [r7, #24]
 80220d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80220da:	3b01      	subs	r3, #1
 80220dc:	00db      	lsls	r3, r3, #3
 80220de:	68ba      	ldr	r2, [r7, #8]
 80220e0:	4413      	add	r3, r2
 80220e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80220e6:	697b      	ldr	r3, [r7, #20]
 80220e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80220ec:	3b01      	subs	r3, #1
 80220ee:	00db      	lsls	r3, r3, #3
 80220f0:	683a      	ldr	r2, [r7, #0]
 80220f2:	4413      	add	r3, r2
 80220f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220f8:	f7de fa70 	bl	80005dc <__aeabi_dmul>
 80220fc:	4602      	mov	r2, r0
 80220fe:	460b      	mov	r3, r1
 8022100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022104:	f7de f8b4 	bl	8000270 <__adddf3>
 8022108:	4602      	mov	r2, r0
 802210a:	460b      	mov	r3, r1
 802210c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 8022110:	69bb      	ldr	r3, [r7, #24]
 8022112:	3301      	adds	r3, #1
 8022114:	61bb      	str	r3, [r7, #24]
      iy++;
 8022116:	697b      	ldr	r3, [r7, #20]
 8022118:	3301      	adds	r3, #1
 802211a:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 802211c:	69fb      	ldr	r3, [r7, #28]
 802211e:	3301      	adds	r3, #1
 8022120:	61fb      	str	r3, [r7, #28]
 8022122:	69fa      	ldr	r2, [r7, #28]
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	429a      	cmp	r2, r3
 8022128:	dbd4      	blt.n	80220d4 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 802212a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802212e:	ec43 2b17 	vmov	d7, r2, r3
}
 8022132:	eeb0 0a47 	vmov.f32	s0, s14
 8022136:	eef0 0a67 	vmov.f32	s1, s15
 802213a:	3728      	adds	r7, #40	; 0x28
 802213c:	46bd      	mov	sp, r7
 802213e:	bd80      	pop	{r7, pc}

08022140 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 8022140:	b590      	push	{r4, r7, lr}
 8022142:	b08f      	sub	sp, #60	; 0x3c
 8022144:	af00      	add	r7, sp, #0
 8022146:	60f8      	str	r0, [r7, #12]
 8022148:	60b9      	str	r1, [r7, #8]
 802214a:	607a      	str	r2, [r7, #4]
 802214c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	2b00      	cmp	r3, #0
 8022152:	d079      	beq.n	8022248 <xgemv_NQlWbt2i+0x108>
 8022154:	68bb      	ldr	r3, [r7, #8]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d076      	beq.n	8022248 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 802215a:	2300      	movs	r3, #0
 802215c:	637b      	str	r3, [r7, #52]	; 0x34
 802215e:	e00c      	b.n	802217a <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 8022160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022162:	00db      	lsls	r3, r3, #3
 8022164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022166:	18d1      	adds	r1, r2, r3
 8022168:	f04f 0200 	mov.w	r2, #0
 802216c:	f04f 0300 	mov.w	r3, #0
 8022170:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 8022174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022176:	3301      	adds	r3, #1
 8022178:	637b      	str	r3, [r7, #52]	; 0x34
 802217a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802217c:	68bb      	ldr	r3, [r7, #8]
 802217e:	429a      	cmp	r2, r3
 8022180:	dbee      	blt.n	8022160 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 8022182:	2300      	movs	r3, #0
 8022184:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 8022186:	68bb      	ldr	r3, [r7, #8]
 8022188:	1e5a      	subs	r2, r3, #1
 802218a:	4613      	mov	r3, r2
 802218c:	005b      	lsls	r3, r3, #1
 802218e:	4413      	add	r3, r2
 8022190:	005b      	lsls	r3, r3, #1
 8022192:	461a      	mov	r2, r3
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	4413      	add	r3, r2
 8022198:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 802219a:	683b      	ldr	r3, [r7, #0]
 802219c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802219e:	e04f      	b.n	8022240 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 80221a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80221a2:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 80221a4:	f04f 0200 	mov.w	r2, #0
 80221a8:	f04f 0300 	mov.w	r3, #0
 80221ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 80221b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	4413      	add	r3, r2
 80221b6:	3b01      	subs	r3, #1
 80221b8:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 80221ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221bc:	633b      	str	r3, [r7, #48]	; 0x30
 80221be:	e023      	b.n	8022208 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 80221c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80221c6:	3b01      	subs	r3, #1
 80221c8:	00db      	lsls	r3, r3, #3
 80221ca:	687a      	ldr	r2, [r7, #4]
 80221cc:	4413      	add	r3, r2
 80221ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221d2:	69fb      	ldr	r3, [r7, #28]
 80221d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80221d8:	3b01      	subs	r3, #1
 80221da:	00db      	lsls	r3, r3, #3
 80221dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80221de:	4413      	add	r3, r2
 80221e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221e4:	f7de f9fa 	bl	80005dc <__aeabi_dmul>
 80221e8:	4602      	mov	r2, r0
 80221ea:	460b      	mov	r3, r1
 80221ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80221f0:	f7de f83e 	bl	8000270 <__adddf3>
 80221f4:	4602      	mov	r2, r0
 80221f6:	460b      	mov	r3, r1
 80221f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 80221fc:	69fb      	ldr	r3, [r7, #28]
 80221fe:	3301      	adds	r3, #1
 8022200:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 8022202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022204:	3301      	adds	r3, #1
 8022206:	633b      	str	r3, [r7, #48]	; 0x30
 8022208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802220a:	697b      	ldr	r3, [r7, #20]
 802220c:	429a      	cmp	r2, r3
 802220e:	ddd7      	ble.n	80221c0 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 8022210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022212:	00db      	lsls	r3, r3, #3
 8022214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022216:	4413      	add	r3, r2
 8022218:	e9d3 0100 	ldrd	r0, r1, [r3]
 802221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802221e:	00db      	lsls	r3, r3, #3
 8022220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022222:	18d4      	adds	r4, r2, r3
 8022224:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022228:	f7de f822 	bl	8000270 <__adddf3>
 802222c:	4602      	mov	r2, r0
 802222e:	460b      	mov	r3, r1
 8022230:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022236:	3301      	adds	r3, #1
 8022238:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 802223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802223c:	3306      	adds	r3, #6
 802223e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022242:	69bb      	ldr	r3, [r7, #24]
 8022244:	429a      	cmp	r2, r3
 8022246:	ddab      	ble.n	80221a0 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 8022248:	bf00      	nop
 802224a:	373c      	adds	r7, #60	; 0x3c
 802224c:	46bd      	mov	sp, r7
 802224e:	bd90      	pop	{r4, r7, pc}

08022250 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 8022250:	b590      	push	{r4, r7, lr}
 8022252:	b08f      	sub	sp, #60	; 0x3c
 8022254:	af00      	add	r7, sp, #0
 8022256:	60f8      	str	r0, [r7, #12]
 8022258:	60b9      	str	r1, [r7, #8]
 802225a:	607a      	str	r2, [r7, #4]
 802225c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 802225e:	68fb      	ldr	r3, [r7, #12]
 8022260:	2b00      	cmp	r3, #0
 8022262:	d077      	beq.n	8022354 <xgemv_fRiR1I1O+0x104>
 8022264:	68bb      	ldr	r3, [r7, #8]
 8022266:	2b00      	cmp	r3, #0
 8022268:	d074      	beq.n	8022354 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 802226a:	2300      	movs	r3, #0
 802226c:	637b      	str	r3, [r7, #52]	; 0x34
 802226e:	e00c      	b.n	802228a <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 8022270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022272:	00db      	lsls	r3, r3, #3
 8022274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022276:	18d1      	adds	r1, r2, r3
 8022278:	f04f 0200 	mov.w	r2, #0
 802227c:	f04f 0300 	mov.w	r3, #0
 8022280:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 8022284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022286:	3301      	adds	r3, #1
 8022288:	637b      	str	r3, [r7, #52]	; 0x34
 802228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802228c:	68bb      	ldr	r3, [r7, #8]
 802228e:	429a      	cmp	r2, r3
 8022290:	dbee      	blt.n	8022270 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 8022292:	2300      	movs	r3, #0
 8022294:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 8022296:	68bb      	ldr	r3, [r7, #8]
 8022298:	1e5a      	subs	r2, r3, #1
 802229a:	4613      	mov	r3, r2
 802229c:	005b      	lsls	r3, r3, #1
 802229e:	4413      	add	r3, r2
 80222a0:	683a      	ldr	r2, [r7, #0]
 80222a2:	4413      	add	r3, r2
 80222a4:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 80222a6:	683b      	ldr	r3, [r7, #0]
 80222a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80222aa:	e04f      	b.n	802234c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 80222ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80222ae:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 80222b0:	f04f 0200 	mov.w	r2, #0
 80222b4:	f04f 0300 	mov.w	r3, #0
 80222b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 80222bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	4413      	add	r3, r2
 80222c2:	3b01      	subs	r3, #1
 80222c4:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 80222c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80222c8:	633b      	str	r3, [r7, #48]	; 0x30
 80222ca:	e023      	b.n	8022314 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 80222cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80222d2:	3b01      	subs	r3, #1
 80222d4:	00db      	lsls	r3, r3, #3
 80222d6:	687a      	ldr	r2, [r7, #4]
 80222d8:	4413      	add	r3, r2
 80222da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80222de:	69fb      	ldr	r3, [r7, #28]
 80222e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80222e4:	3b01      	subs	r3, #1
 80222e6:	00db      	lsls	r3, r3, #3
 80222e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80222ea:	4413      	add	r3, r2
 80222ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222f0:	f7de f974 	bl	80005dc <__aeabi_dmul>
 80222f4:	4602      	mov	r2, r0
 80222f6:	460b      	mov	r3, r1
 80222f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80222fc:	f7dd ffb8 	bl	8000270 <__adddf3>
 8022300:	4602      	mov	r2, r0
 8022302:	460b      	mov	r3, r1
 8022304:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 8022308:	69fb      	ldr	r3, [r7, #28]
 802230a:	3301      	adds	r3, #1
 802230c:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 802230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022310:	3301      	adds	r3, #1
 8022312:	633b      	str	r3, [r7, #48]	; 0x30
 8022314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022316:	697b      	ldr	r3, [r7, #20]
 8022318:	429a      	cmp	r2, r3
 802231a:	ddd7      	ble.n	80222cc <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 802231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802231e:	00db      	lsls	r3, r3, #3
 8022320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8022322:	4413      	add	r3, r2
 8022324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802232a:	00db      	lsls	r3, r3, #3
 802232c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802232e:	18d4      	adds	r4, r2, r3
 8022330:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022334:	f7dd ff9c 	bl	8000270 <__adddf3>
 8022338:	4602      	mov	r2, r0
 802233a:	460b      	mov	r3, r1
 802233c:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 8022340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022342:	3301      	adds	r3, #1
 8022344:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 8022346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022348:	3303      	adds	r3, #3
 802234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802234c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802234e:	69bb      	ldr	r3, [r7, #24]
 8022350:	429a      	cmp	r2, r3
 8022352:	ddab      	ble.n	80222ac <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 8022354:	bf00      	nop
 8022356:	373c      	adds	r7, #60	; 0x3c
 8022358:	46bd      	mov	sp, r7
 802235a:	bd90      	pop	{r4, r7, pc}

0802235c <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 802235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802235e:	b091      	sub	sp, #68	; 0x44
 8022360:	af00      	add	r7, sp, #0
 8022362:	6178      	str	r0, [r7, #20]
 8022364:	6139      	str	r1, [r7, #16]
 8022366:	ed87 0b02 	vstr	d0, [r7, #8]
 802236a:	607a      	str	r2, [r7, #4]
 802236c:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 802236e:	f04f 0200 	mov.w	r2, #0
 8022372:	f04f 0300 	mov.w	r3, #0
 8022376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802237a:	f7de fb97 	bl	8000aac <__aeabi_dcmpeq>
 802237e:	4603      	mov	r3, r0
 8022380:	2b00      	cmp	r3, #0
 8022382:	d000      	beq.n	8022386 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 8022384:	e069      	b.n	802245a <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 8022386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022388:	3b01      	subs	r3, #1
 802238a:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 802238c:	2300      	movs	r3, #0
 802238e:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 8022390:	2300      	movs	r3, #0
 8022392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022394:	e05d      	b.n	8022452 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 8022396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022398:	00db      	lsls	r3, r3, #3
 802239a:	683a      	ldr	r2, [r7, #0]
 802239c:	4413      	add	r3, r2
 802239e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80223a2:	f04f 0200 	mov.w	r2, #0
 80223a6:	f04f 0300 	mov.w	r3, #0
 80223aa:	f7de fb7f 	bl	8000aac <__aeabi_dcmpeq>
 80223ae:	4603      	mov	r3, r0
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d145      	bne.n	8022440 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 80223b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80223b6:	00db      	lsls	r3, r3, #3
 80223b8:	683a      	ldr	r2, [r7, #0]
 80223ba:	4413      	add	r3, r2
 80223bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80223c4:	f7de f90a 	bl	80005dc <__aeabi_dmul>
 80223c8:	4602      	mov	r2, r0
 80223ca:	460b      	mov	r3, r1
 80223cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 80223d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80223d6:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 80223d8:	697a      	ldr	r2, [r7, #20]
 80223da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80223dc:	4413      	add	r3, r2
 80223de:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 80223e0:	e02a      	b.n	8022438 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 80223e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223e4:	00db      	lsls	r3, r3, #3
 80223e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80223e8:	4413      	add	r3, r2
 80223ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80223ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80223f0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80223f4:	3b01      	subs	r3, #1
 80223f6:	00db      	lsls	r3, r3, #3
 80223f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80223fa:	4413      	add	r3, r2
 80223fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022400:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022404:	f7de f8ea 	bl	80005dc <__aeabi_dmul>
 8022408:	4602      	mov	r2, r0
 802240a:	460b      	mov	r3, r1
 802240c:	4610      	mov	r0, r2
 802240e:	4619      	mov	r1, r3
 8022410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022412:	00db      	lsls	r3, r3, #3
 8022414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022416:	18d6      	adds	r6, r2, r3
 8022418:	4602      	mov	r2, r0
 802241a:	460b      	mov	r3, r1
 802241c:	4620      	mov	r0, r4
 802241e:	4629      	mov	r1, r5
 8022420:	f7dd ff26 	bl	8000270 <__adddf3>
 8022424:	4602      	mov	r2, r0
 8022426:	460b      	mov	r3, r1
 8022428:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 802242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802242e:	3301      	adds	r3, #1
 8022430:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022434:	3301      	adds	r3, #1
 8022436:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 8022438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802243a:	69fb      	ldr	r3, [r7, #28]
 802243c:	429a      	cmp	r2, r3
 802243e:	dbd0      	blt.n	80223e2 <xgerc_R09LiDgJ+0x86>
      jy++;
 8022440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022442:	3301      	adds	r3, #1
 8022444:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 8022446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022448:	3306      	adds	r3, #6
 802244a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 802244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802244e:	3301      	adds	r3, #1
 8022450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022454:	693b      	ldr	r3, [r7, #16]
 8022456:	429a      	cmp	r2, r3
 8022458:	db9d      	blt.n	8022396 <xgerc_R09LiDgJ+0x3a>
}
 802245a:	bf00      	nop
 802245c:	3744      	adds	r7, #68	; 0x44
 802245e:	46bd      	mov	sp, r7
 8022460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022462 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 8022462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022464:	b091      	sub	sp, #68	; 0x44
 8022466:	af00      	add	r7, sp, #0
 8022468:	6178      	str	r0, [r7, #20]
 802246a:	6139      	str	r1, [r7, #16]
 802246c:	ed87 0b02 	vstr	d0, [r7, #8]
 8022470:	607a      	str	r2, [r7, #4]
 8022472:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8022474:	f04f 0200 	mov.w	r2, #0
 8022478:	f04f 0300 	mov.w	r3, #0
 802247c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022480:	f7de fb14 	bl	8000aac <__aeabi_dcmpeq>
 8022484:	4603      	mov	r3, r0
 8022486:	2b00      	cmp	r3, #0
 8022488:	d000      	beq.n	802248c <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 802248a:	e069      	b.n	8022560 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 802248c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802248e:	3b01      	subs	r3, #1
 8022490:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 8022492:	2300      	movs	r3, #0
 8022494:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 8022496:	2300      	movs	r3, #0
 8022498:	63fb      	str	r3, [r7, #60]	; 0x3c
 802249a:	e05d      	b.n	8022558 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 802249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802249e:	00db      	lsls	r3, r3, #3
 80224a0:	683a      	ldr	r2, [r7, #0]
 80224a2:	4413      	add	r3, r2
 80224a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80224a8:	f04f 0200 	mov.w	r2, #0
 80224ac:	f04f 0300 	mov.w	r3, #0
 80224b0:	f7de fafc 	bl	8000aac <__aeabi_dcmpeq>
 80224b4:	4603      	mov	r3, r0
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d145      	bne.n	8022546 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 80224ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80224bc:	00db      	lsls	r3, r3, #3
 80224be:	683a      	ldr	r2, [r7, #0]
 80224c0:	4413      	add	r3, r2
 80224c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80224ca:	f7de f887 	bl	80005dc <__aeabi_dmul>
 80224ce:	4602      	mov	r2, r0
 80224d0:	460b      	mov	r3, r1
 80224d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 80224da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80224dc:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 80224de:	697a      	ldr	r2, [r7, #20]
 80224e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80224e2:	4413      	add	r3, r2
 80224e4:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 80224e6:	e02a      	b.n	802253e <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 80224e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224ea:	00db      	lsls	r3, r3, #3
 80224ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80224ee:	4413      	add	r3, r2
 80224f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80224f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80224fa:	3b01      	subs	r3, #1
 80224fc:	00db      	lsls	r3, r3, #3
 80224fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022500:	4413      	add	r3, r2
 8022502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802250a:	f7de f867 	bl	80005dc <__aeabi_dmul>
 802250e:	4602      	mov	r2, r0
 8022510:	460b      	mov	r3, r1
 8022512:	4610      	mov	r0, r2
 8022514:	4619      	mov	r1, r3
 8022516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022518:	00db      	lsls	r3, r3, #3
 802251a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802251c:	18d6      	adds	r6, r2, r3
 802251e:	4602      	mov	r2, r0
 8022520:	460b      	mov	r3, r1
 8022522:	4620      	mov	r0, r4
 8022524:	4629      	mov	r1, r5
 8022526:	f7dd fea3 	bl	8000270 <__adddf3>
 802252a:	4602      	mov	r2, r0
 802252c:	460b      	mov	r3, r1
 802252e:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 8022532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022534:	3301      	adds	r3, #1
 8022536:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 8022538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802253a:	3301      	adds	r3, #1
 802253c:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 802253e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022540:	69fb      	ldr	r3, [r7, #28]
 8022542:	429a      	cmp	r2, r3
 8022544:	dbd0      	blt.n	80224e8 <xgerc_tNNiazQU+0x86>
      jy++;
 8022546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022548:	3301      	adds	r3, #1
 802254a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 802254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802254e:	3303      	adds	r3, #3
 8022550:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 8022552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022554:	3301      	adds	r3, #1
 8022556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802255a:	693b      	ldr	r3, [r7, #16]
 802255c:	429a      	cmp	r2, r3
 802255e:	db9d      	blt.n	802249c <xgerc_tNNiazQU+0x3a>
}
 8022560:	bf00      	nop
 8022562:	3744      	adds	r7, #68	; 0x44
 8022564:	46bd      	mov	sp, r7
 8022566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022568 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 8022568:	b580      	push	{r7, lr}
 802256a:	b092      	sub	sp, #72	; 0x48
 802256c:	af00      	add	r7, sp, #0
 802256e:	60f8      	str	r0, [r7, #12]
 8022570:	60b9      	str	r1, [r7, #8]
 8022572:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022574:	f04f 0200 	mov.w	r2, #0
 8022578:	f04f 0300 	mov.w	r3, #0
 802257c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022580:	68fb      	ldr	r3, [r7, #12]
 8022582:	2b00      	cmp	r3, #0
 8022584:	f340 8090 	ble.w	80226a8 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 8022588:	68fb      	ldr	r3, [r7, #12]
 802258a:	2b01      	cmp	r3, #1
 802258c:	d10e      	bne.n	80225ac <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022594:	3b01      	subs	r3, #1
 8022596:	00db      	lsls	r3, r3, #3
 8022598:	68ba      	ldr	r2, [r7, #8]
 802259a:	4413      	add	r3, r2
 802259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225a0:	4611      	mov	r1, r2
 80225a2:	6439      	str	r1, [r7, #64]	; 0x40
 80225a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80225a8:	647b      	str	r3, [r7, #68]	; 0x44
 80225aa:	e07d      	b.n	80226a8 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80225ac:	f04f 0200 	mov.w	r2, #0
 80225b0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80225b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80225b8:	687a      	ldr	r2, [r7, #4]
 80225ba:	68fb      	ldr	r3, [r7, #12]
 80225bc:	4413      	add	r3, r2
 80225be:	3b01      	subs	r3, #1
 80225c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80225c6:	e05d      	b.n	8022684 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80225c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80225ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80225ce:	3b01      	subs	r3, #1
 80225d0:	00db      	lsls	r3, r3, #3
 80225d2:	68ba      	ldr	r2, [r7, #8]
 80225d4:	4413      	add	r3, r2
 80225d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225da:	4611      	mov	r1, r2
 80225dc:	6239      	str	r1, [r7, #32]
 80225de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80225e2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80225e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80225e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80225ec:	f7de fa86 	bl	8000afc <__aeabi_dcmpgt>
 80225f0:	4603      	mov	r3, r0
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d029      	beq.n	802264a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 80225f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80225fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80225fe:	f7de f917 	bl	8000830 <__aeabi_ddiv>
 8022602:	4602      	mov	r2, r0
 8022604:	460b      	mov	r3, r1
 8022606:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 802260a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802260e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022612:	f7dd ffe3 	bl	80005dc <__aeabi_dmul>
 8022616:	4602      	mov	r2, r0
 8022618:	460b      	mov	r3, r1
 802261a:	4610      	mov	r0, r2
 802261c:	4619      	mov	r1, r3
 802261e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022622:	f7dd ffdb 	bl	80005dc <__aeabi_dmul>
 8022626:	4602      	mov	r2, r0
 8022628:	460b      	mov	r3, r1
 802262a:	4610      	mov	r0, r2
 802262c:	4619      	mov	r1, r3
 802262e:	f04f 0200 	mov.w	r2, #0
 8022632:	4b23      	ldr	r3, [pc, #140]	; (80226c0 <xnrm2_7bm34mDQ+0x158>)
 8022634:	f7dd fe1c 	bl	8000270 <__adddf3>
 8022638:	4602      	mov	r2, r0
 802263a:	460b      	mov	r3, r1
 802263c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022640:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022644:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022648:	e019      	b.n	802267e <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 802264a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802264e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022652:	f7de f8ed 	bl	8000830 <__aeabi_ddiv>
 8022656:	4602      	mov	r2, r0
 8022658:	460b      	mov	r3, r1
 802265a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 802265e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022662:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022666:	f7dd ffb9 	bl	80005dc <__aeabi_dmul>
 802266a:	4602      	mov	r2, r0
 802266c:	460b      	mov	r3, r1
 802266e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022672:	f7dd fdfd 	bl	8000270 <__adddf3>
 8022676:	4602      	mov	r2, r0
 8022678:	460b      	mov	r3, r1
 802267a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 802267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022680:	3301      	adds	r3, #1
 8022682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022688:	429a      	cmp	r2, r3
 802268a:	dd9d      	ble.n	80225c8 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 802268c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022690:	f00c fb06 	bl	802eca0 <sqrt>
 8022694:	ec53 2b10 	vmov	r2, r3, d0
 8022698:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802269c:	f7dd ff9e 	bl	80005dc <__aeabi_dmul>
 80226a0:	4602      	mov	r2, r0
 80226a2:	460b      	mov	r3, r1
 80226a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80226a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80226ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80226b0:	eeb0 0a47 	vmov.f32	s0, s14
 80226b4:	eef0 0a67 	vmov.f32	s1, s15
 80226b8:	3748      	adds	r7, #72	; 0x48
 80226ba:	46bd      	mov	sp, r7
 80226bc:	bd80      	pop	{r7, pc}
 80226be:	bf00      	nop
 80226c0:	3ff00000 	.word	0x3ff00000

080226c4 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 80226c4:	b580      	push	{r7, lr}
 80226c6:	b092      	sub	sp, #72	; 0x48
 80226c8:	af00      	add	r7, sp, #0
 80226ca:	60f8      	str	r0, [r7, #12]
 80226cc:	60b9      	str	r1, [r7, #8]
 80226ce:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80226d0:	f04f 0200 	mov.w	r2, #0
 80226d4:	f04f 0300 	mov.w	r3, #0
 80226d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	2b00      	cmp	r3, #0
 80226e0:	f340 8090 	ble.w	8022804 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	2b01      	cmp	r3, #1
 80226e8:	d10e      	bne.n	8022708 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80226f0:	3b01      	subs	r3, #1
 80226f2:	00db      	lsls	r3, r3, #3
 80226f4:	68ba      	ldr	r2, [r7, #8]
 80226f6:	4413      	add	r3, r2
 80226f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226fc:	4611      	mov	r1, r2
 80226fe:	6439      	str	r1, [r7, #64]	; 0x40
 8022700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022704:	647b      	str	r3, [r7, #68]	; 0x44
 8022706:	e07d      	b.n	8022804 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022708:	f04f 0200 	mov.w	r2, #0
 802270c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022710:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022714:	687a      	ldr	r2, [r7, #4]
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	4413      	add	r3, r2
 802271a:	3b01      	subs	r3, #1
 802271c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022722:	e05d      	b.n	80227e0 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022726:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802272a:	3b01      	subs	r3, #1
 802272c:	00db      	lsls	r3, r3, #3
 802272e:	68ba      	ldr	r2, [r7, #8]
 8022730:	4413      	add	r3, r2
 8022732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022736:	4611      	mov	r1, r2
 8022738:	6239      	str	r1, [r7, #32]
 802273a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802273e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022740:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022744:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022748:	f7de f9d8 	bl	8000afc <__aeabi_dcmpgt>
 802274c:	4603      	mov	r3, r0
 802274e:	2b00      	cmp	r3, #0
 8022750:	d029      	beq.n	80227a6 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 8022752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022756:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 802275a:	f7de f869 	bl	8000830 <__aeabi_ddiv>
 802275e:	4602      	mov	r2, r0
 8022760:	460b      	mov	r3, r1
 8022762:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8022766:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802276a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802276e:	f7dd ff35 	bl	80005dc <__aeabi_dmul>
 8022772:	4602      	mov	r2, r0
 8022774:	460b      	mov	r3, r1
 8022776:	4610      	mov	r0, r2
 8022778:	4619      	mov	r1, r3
 802277a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802277e:	f7dd ff2d 	bl	80005dc <__aeabi_dmul>
 8022782:	4602      	mov	r2, r0
 8022784:	460b      	mov	r3, r1
 8022786:	4610      	mov	r0, r2
 8022788:	4619      	mov	r1, r3
 802278a:	f04f 0200 	mov.w	r2, #0
 802278e:	4b23      	ldr	r3, [pc, #140]	; (802281c <xnrm2_Mnmxg9YT+0x158>)
 8022790:	f7dd fd6e 	bl	8000270 <__adddf3>
 8022794:	4602      	mov	r2, r0
 8022796:	460b      	mov	r3, r1
 8022798:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 802279c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80227a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80227a4:	e019      	b.n	80227da <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 80227a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80227aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80227ae:	f7de f83f 	bl	8000830 <__aeabi_ddiv>
 80227b2:	4602      	mov	r2, r0
 80227b4:	460b      	mov	r3, r1
 80227b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80227ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80227be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80227c2:	f7dd ff0b 	bl	80005dc <__aeabi_dmul>
 80227c6:	4602      	mov	r2, r0
 80227c8:	460b      	mov	r3, r1
 80227ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80227ce:	f7dd fd4f 	bl	8000270 <__adddf3>
 80227d2:	4602      	mov	r2, r0
 80227d4:	460b      	mov	r3, r1
 80227d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80227da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80227dc:	3301      	adds	r3, #1
 80227de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80227e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80227e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80227e4:	429a      	cmp	r2, r3
 80227e6:	dd9d      	ble.n	8022724 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 80227e8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80227ec:	f00c fa58 	bl	802eca0 <sqrt>
 80227f0:	ec53 2b10 	vmov	r2, r3, d0
 80227f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80227f8:	f7dd fef0 	bl	80005dc <__aeabi_dmul>
 80227fc:	4602      	mov	r2, r0
 80227fe:	460b      	mov	r3, r1
 8022800:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022808:	ec43 2b17 	vmov	d7, r2, r3
}
 802280c:	eeb0 0a47 	vmov.f32	s0, s14
 8022810:	eef0 0a67 	vmov.f32	s1, s15
 8022814:	3748      	adds	r7, #72	; 0x48
 8022816:	46bd      	mov	sp, r7
 8022818:	bd80      	pop	{r7, pc}
 802281a:	bf00      	nop
 802281c:	3ff00000 	.word	0x3ff00000

08022820 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 8022820:	b580      	push	{r7, lr}
 8022822:	b092      	sub	sp, #72	; 0x48
 8022824:	af00      	add	r7, sp, #0
 8022826:	60f8      	str	r0, [r7, #12]
 8022828:	60b9      	str	r1, [r7, #8]
 802282a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 802282c:	f04f 0200 	mov.w	r2, #0
 8022830:	f04f 0300 	mov.w	r3, #0
 8022834:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022838:	68fb      	ldr	r3, [r7, #12]
 802283a:	2b00      	cmp	r3, #0
 802283c:	f340 8090 	ble.w	8022960 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 8022840:	68fb      	ldr	r3, [r7, #12]
 8022842:	2b01      	cmp	r3, #1
 8022844:	d10e      	bne.n	8022864 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802284c:	3b01      	subs	r3, #1
 802284e:	00db      	lsls	r3, r3, #3
 8022850:	68ba      	ldr	r2, [r7, #8]
 8022852:	4413      	add	r3, r2
 8022854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022858:	4611      	mov	r1, r2
 802285a:	6439      	str	r1, [r7, #64]	; 0x40
 802285c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022860:	647b      	str	r3, [r7, #68]	; 0x44
 8022862:	e07d      	b.n	8022960 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022864:	f04f 0200 	mov.w	r2, #0
 8022868:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 802286c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022870:	687a      	ldr	r2, [r7, #4]
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	4413      	add	r3, r2
 8022876:	3b01      	subs	r3, #1
 8022878:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802287e:	e05d      	b.n	802293c <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022882:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022886:	3b01      	subs	r3, #1
 8022888:	00db      	lsls	r3, r3, #3
 802288a:	68ba      	ldr	r2, [r7, #8]
 802288c:	4413      	add	r3, r2
 802288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022892:	4611      	mov	r1, r2
 8022894:	6239      	str	r1, [r7, #32]
 8022896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802289a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 802289c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80228a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80228a4:	f7de f92a 	bl	8000afc <__aeabi_dcmpgt>
 80228a8:	4603      	mov	r3, r0
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d029      	beq.n	8022902 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 80228ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80228b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80228b6:	f7dd ffbb 	bl	8000830 <__aeabi_ddiv>
 80228ba:	4602      	mov	r2, r0
 80228bc:	460b      	mov	r3, r1
 80228be:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80228c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80228c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80228ca:	f7dd fe87 	bl	80005dc <__aeabi_dmul>
 80228ce:	4602      	mov	r2, r0
 80228d0:	460b      	mov	r3, r1
 80228d2:	4610      	mov	r0, r2
 80228d4:	4619      	mov	r1, r3
 80228d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80228da:	f7dd fe7f 	bl	80005dc <__aeabi_dmul>
 80228de:	4602      	mov	r2, r0
 80228e0:	460b      	mov	r3, r1
 80228e2:	4610      	mov	r0, r2
 80228e4:	4619      	mov	r1, r3
 80228e6:	f04f 0200 	mov.w	r2, #0
 80228ea:	4b23      	ldr	r3, [pc, #140]	; (8022978 <xnrm2_Rlk0oxWw+0x158>)
 80228ec:	f7dd fcc0 	bl	8000270 <__adddf3>
 80228f0:	4602      	mov	r2, r0
 80228f2:	460b      	mov	r3, r1
 80228f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 80228f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80228fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022900:	e019      	b.n	8022936 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022902:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022906:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802290a:	f7dd ff91 	bl	8000830 <__aeabi_ddiv>
 802290e:	4602      	mov	r2, r0
 8022910:	460b      	mov	r3, r1
 8022912:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022916:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802291a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802291e:	f7dd fe5d 	bl	80005dc <__aeabi_dmul>
 8022922:	4602      	mov	r2, r0
 8022924:	460b      	mov	r3, r1
 8022926:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802292a:	f7dd fca1 	bl	8000270 <__adddf3>
 802292e:	4602      	mov	r2, r0
 8022930:	460b      	mov	r3, r1
 8022932:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022938:	3301      	adds	r3, #1
 802293a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802293c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022940:	429a      	cmp	r2, r3
 8022942:	dd9d      	ble.n	8022880 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 8022944:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022948:	f00c f9aa 	bl	802eca0 <sqrt>
 802294c:	ec53 2b10 	vmov	r2, r3, d0
 8022950:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022954:	f7dd fe42 	bl	80005dc <__aeabi_dmul>
 8022958:	4602      	mov	r2, r0
 802295a:	460b      	mov	r3, r1
 802295c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022964:	ec43 2b17 	vmov	d7, r2, r3
}
 8022968:	eeb0 0a47 	vmov.f32	s0, s14
 802296c:	eef0 0a67 	vmov.f32	s1, s15
 8022970:	3748      	adds	r7, #72	; 0x48
 8022972:	46bd      	mov	sp, r7
 8022974:	bd80      	pop	{r7, pc}
 8022976:	bf00      	nop
 8022978:	3ff00000 	.word	0x3ff00000

0802297c <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 802297c:	b580      	push	{r7, lr}
 802297e:	b092      	sub	sp, #72	; 0x48
 8022980:	af00      	add	r7, sp, #0
 8022982:	60f8      	str	r0, [r7, #12]
 8022984:	60b9      	str	r1, [r7, #8]
 8022986:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022988:	f04f 0200 	mov.w	r2, #0
 802298c:	f04f 0300 	mov.w	r3, #0
 8022990:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022994:	68fb      	ldr	r3, [r7, #12]
 8022996:	2b00      	cmp	r3, #0
 8022998:	f340 8090 	ble.w	8022abc <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 802299c:	68fb      	ldr	r3, [r7, #12]
 802299e:	2b01      	cmp	r3, #1
 80229a0:	d10e      	bne.n	80229c0 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80229a8:	3b01      	subs	r3, #1
 80229aa:	00db      	lsls	r3, r3, #3
 80229ac:	68ba      	ldr	r2, [r7, #8]
 80229ae:	4413      	add	r3, r2
 80229b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229b4:	4611      	mov	r1, r2
 80229b6:	6439      	str	r1, [r7, #64]	; 0x40
 80229b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80229bc:	647b      	str	r3, [r7, #68]	; 0x44
 80229be:	e07d      	b.n	8022abc <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80229c0:	f04f 0200 	mov.w	r2, #0
 80229c4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80229c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80229cc:	687a      	ldr	r2, [r7, #4]
 80229ce:	68fb      	ldr	r3, [r7, #12]
 80229d0:	4413      	add	r3, r2
 80229d2:	3b01      	subs	r3, #1
 80229d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80229da:	e05d      	b.n	8022a98 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80229dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80229de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80229e2:	3b01      	subs	r3, #1
 80229e4:	00db      	lsls	r3, r3, #3
 80229e6:	68ba      	ldr	r2, [r7, #8]
 80229e8:	4413      	add	r3, r2
 80229ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ee:	4611      	mov	r1, r2
 80229f0:	6239      	str	r1, [r7, #32]
 80229f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80229f6:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80229f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80229fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022a00:	f7de f87c 	bl	8000afc <__aeabi_dcmpgt>
 8022a04:	4603      	mov	r3, r0
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d029      	beq.n	8022a5e <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 8022a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022a0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022a12:	f7dd ff0d 	bl	8000830 <__aeabi_ddiv>
 8022a16:	4602      	mov	r2, r0
 8022a18:	460b      	mov	r3, r1
 8022a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8022a1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022a22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022a26:	f7dd fdd9 	bl	80005dc <__aeabi_dmul>
 8022a2a:	4602      	mov	r2, r0
 8022a2c:	460b      	mov	r3, r1
 8022a2e:	4610      	mov	r0, r2
 8022a30:	4619      	mov	r1, r3
 8022a32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022a36:	f7dd fdd1 	bl	80005dc <__aeabi_dmul>
 8022a3a:	4602      	mov	r2, r0
 8022a3c:	460b      	mov	r3, r1
 8022a3e:	4610      	mov	r0, r2
 8022a40:	4619      	mov	r1, r3
 8022a42:	f04f 0200 	mov.w	r2, #0
 8022a46:	4b23      	ldr	r3, [pc, #140]	; (8022ad4 <xnrm2_nLdASVZH+0x158>)
 8022a48:	f7dd fc12 	bl	8000270 <__adddf3>
 8022a4c:	4602      	mov	r2, r0
 8022a4e:	460b      	mov	r3, r1
 8022a50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022a54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022a58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022a5c:	e019      	b.n	8022a92 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022a5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022a62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022a66:	f7dd fee3 	bl	8000830 <__aeabi_ddiv>
 8022a6a:	4602      	mov	r2, r0
 8022a6c:	460b      	mov	r3, r1
 8022a6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022a76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022a7a:	f7dd fdaf 	bl	80005dc <__aeabi_dmul>
 8022a7e:	4602      	mov	r2, r0
 8022a80:	460b      	mov	r3, r1
 8022a82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022a86:	f7dd fbf3 	bl	8000270 <__adddf3>
 8022a8a:	4602      	mov	r2, r0
 8022a8c:	460b      	mov	r3, r1
 8022a8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022a94:	3301      	adds	r3, #1
 8022a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a9c:	429a      	cmp	r2, r3
 8022a9e:	dd9d      	ble.n	80229dc <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 8022aa0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022aa4:	f00c f8fc 	bl	802eca0 <sqrt>
 8022aa8:	ec53 2b10 	vmov	r2, r3, d0
 8022aac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022ab0:	f7dd fd94 	bl	80005dc <__aeabi_dmul>
 8022ab4:	4602      	mov	r2, r0
 8022ab6:	460b      	mov	r3, r1
 8022ab8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022abc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022ac0:	ec43 2b17 	vmov	d7, r2, r3
}
 8022ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8022ac8:	eef0 0a67 	vmov.f32	s1, s15
 8022acc:	3748      	adds	r7, #72	; 0x48
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	bd80      	pop	{r7, pc}
 8022ad2:	bf00      	nop
 8022ad4:	3ff00000 	.word	0x3ff00000

08022ad8 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 8022ad8:	b580      	push	{r7, lr}
 8022ada:	b092      	sub	sp, #72	; 0x48
 8022adc:	af00      	add	r7, sp, #0
 8022ade:	60f8      	str	r0, [r7, #12]
 8022ae0:	60b9      	str	r1, [r7, #8]
 8022ae2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8022ae4:	f04f 0200 	mov.w	r2, #0
 8022ae8:	f04f 0300 	mov.w	r3, #0
 8022aec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8022af0:	68fb      	ldr	r3, [r7, #12]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	f340 8090 	ble.w	8022c18 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 8022af8:	68fb      	ldr	r3, [r7, #12]
 8022afa:	2b01      	cmp	r3, #1
 8022afc:	d10e      	bne.n	8022b1c <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022b04:	3b01      	subs	r3, #1
 8022b06:	00db      	lsls	r3, r3, #3
 8022b08:	68ba      	ldr	r2, [r7, #8]
 8022b0a:	4413      	add	r3, r2
 8022b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b10:	4611      	mov	r1, r2
 8022b12:	6439      	str	r1, [r7, #64]	; 0x40
 8022b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022b18:	647b      	str	r3, [r7, #68]	; 0x44
 8022b1a:	e07d      	b.n	8022c18 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8022b1c:	f04f 0200 	mov.w	r2, #0
 8022b20:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8022b24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8022b28:	687a      	ldr	r2, [r7, #4]
 8022b2a:	68fb      	ldr	r3, [r7, #12]
 8022b2c:	4413      	add	r3, r2
 8022b2e:	3b01      	subs	r3, #1
 8022b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022b36:	e05d      	b.n	8022bf4 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8022b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022b3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022b3e:	3b01      	subs	r3, #1
 8022b40:	00db      	lsls	r3, r3, #3
 8022b42:	68ba      	ldr	r2, [r7, #8]
 8022b44:	4413      	add	r3, r2
 8022b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b4a:	4611      	mov	r1, r2
 8022b4c:	6239      	str	r1, [r7, #32]
 8022b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022b52:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8022b54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022b5c:	f7dd ffce 	bl	8000afc <__aeabi_dcmpgt>
 8022b60:	4603      	mov	r3, r0
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d029      	beq.n	8022bba <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 8022b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022b6e:	f7dd fe5f 	bl	8000830 <__aeabi_ddiv>
 8022b72:	4602      	mov	r2, r0
 8022b74:	460b      	mov	r3, r1
 8022b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8022b7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022b7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022b82:	f7dd fd2b 	bl	80005dc <__aeabi_dmul>
 8022b86:	4602      	mov	r2, r0
 8022b88:	460b      	mov	r3, r1
 8022b8a:	4610      	mov	r0, r2
 8022b8c:	4619      	mov	r1, r3
 8022b8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022b92:	f7dd fd23 	bl	80005dc <__aeabi_dmul>
 8022b96:	4602      	mov	r2, r0
 8022b98:	460b      	mov	r3, r1
 8022b9a:	4610      	mov	r0, r2
 8022b9c:	4619      	mov	r1, r3
 8022b9e:	f04f 0200 	mov.w	r2, #0
 8022ba2:	4b23      	ldr	r3, [pc, #140]	; (8022c30 <xnrm2_xDOlDEtw+0x158>)
 8022ba4:	f7dd fb64 	bl	8000270 <__adddf3>
 8022ba8:	4602      	mov	r2, r0
 8022baa:	460b      	mov	r3, r1
 8022bac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8022bb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022bb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8022bb8:	e019      	b.n	8022bee <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8022bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022bbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022bc2:	f7dd fe35 	bl	8000830 <__aeabi_ddiv>
 8022bc6:	4602      	mov	r2, r0
 8022bc8:	460b      	mov	r3, r1
 8022bca:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8022bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022bd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022bd6:	f7dd fd01 	bl	80005dc <__aeabi_dmul>
 8022bda:	4602      	mov	r2, r0
 8022bdc:	460b      	mov	r3, r1
 8022bde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022be2:	f7dd fb45 	bl	8000270 <__adddf3>
 8022be6:	4602      	mov	r2, r0
 8022be8:	460b      	mov	r3, r1
 8022bea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8022bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022bf0:	3301      	adds	r3, #1
 8022bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022bf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bf8:	429a      	cmp	r2, r3
 8022bfa:	dd9d      	ble.n	8022b38 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 8022bfc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8022c00:	f00c f84e 	bl	802eca0 <sqrt>
 8022c04:	ec53 2b10 	vmov	r2, r3, d0
 8022c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022c0c:	f7dd fce6 	bl	80005dc <__aeabi_dmul>
 8022c10:	4602      	mov	r2, r0
 8022c12:	460b      	mov	r3, r1
 8022c14:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8022c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022c1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8022c20:	eeb0 0a47 	vmov.f32	s0, s14
 8022c24:	eef0 0a67 	vmov.f32	s1, s15
 8022c28:	3748      	adds	r7, #72	; 0x48
 8022c2a:	46bd      	mov	sp, r7
 8022c2c:	bd80      	pop	{r7, pc}
 8022c2e:	bf00      	nop
 8022c30:	3ff00000 	.word	0x3ff00000

08022c34 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 8022c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8022c38:	b08c      	sub	sp, #48	; 0x30
 8022c3a:	af00      	add	r7, sp, #0
 8022c3c:	61f8      	str	r0, [r7, #28]
 8022c3e:	61b9      	str	r1, [r7, #24]
 8022c40:	617a      	str	r2, [r7, #20]
 8022c42:	ed87 0b02 	vstr	d0, [r7, #8]
 8022c46:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 8022c4a:	697b      	ldr	r3, [r7, #20]
 8022c4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022c50:	3b01      	subs	r3, #1
 8022c52:	00db      	lsls	r3, r3, #3
 8022c54:	69fa      	ldr	r2, [r7, #28]
 8022c56:	4413      	add	r3, r2
 8022c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8022c60:	69bb      	ldr	r3, [r7, #24]
 8022c62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022c66:	3b01      	subs	r3, #1
 8022c68:	00db      	lsls	r3, r3, #3
 8022c6a:	69fa      	ldr	r2, [r7, #28]
 8022c6c:	4413      	add	r3, r2
 8022c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c72:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 8022c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022c7e:	f7dd fcad 	bl	80005dc <__aeabi_dmul>
 8022c82:	4602      	mov	r2, r0
 8022c84:	460b      	mov	r3, r1
 8022c86:	4690      	mov	r8, r2
 8022c88:	4699      	mov	r9, r3
 8022c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022c92:	f7dd fca3 	bl	80005dc <__aeabi_dmul>
 8022c96:	4602      	mov	r2, r0
 8022c98:	460b      	mov	r3, r1
 8022c9a:	4610      	mov	r0, r2
 8022c9c:	4619      	mov	r1, r3
 8022c9e:	697b      	ldr	r3, [r7, #20]
 8022ca0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022ca4:	3b01      	subs	r3, #1
 8022ca6:	00db      	lsls	r3, r3, #3
 8022ca8:	69fa      	ldr	r2, [r7, #28]
 8022caa:	18d4      	adds	r4, r2, r3
 8022cac:	4602      	mov	r2, r0
 8022cae:	460b      	mov	r3, r1
 8022cb0:	4640      	mov	r0, r8
 8022cb2:	4649      	mov	r1, r9
 8022cb4:	f7dd fada 	bl	800026c <__aeabi_dsub>
 8022cb8:	4602      	mov	r2, r0
 8022cba:	460b      	mov	r3, r1
 8022cbc:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 8022cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022cc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022cc8:	f7dd fc88 	bl	80005dc <__aeabi_dmul>
 8022ccc:	4602      	mov	r2, r0
 8022cce:	460b      	mov	r3, r1
 8022cd0:	4690      	mov	r8, r2
 8022cd2:	4699      	mov	r9, r3
 8022cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022cd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022cdc:	f7dd fc7e 	bl	80005dc <__aeabi_dmul>
 8022ce0:	4602      	mov	r2, r0
 8022ce2:	460b      	mov	r3, r1
 8022ce4:	4610      	mov	r0, r2
 8022ce6:	4619      	mov	r1, r3
 8022ce8:	69bb      	ldr	r3, [r7, #24]
 8022cea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8022cee:	3b01      	subs	r3, #1
 8022cf0:	00db      	lsls	r3, r3, #3
 8022cf2:	69fa      	ldr	r2, [r7, #28]
 8022cf4:	18d4      	adds	r4, r2, r3
 8022cf6:	4602      	mov	r2, r0
 8022cf8:	460b      	mov	r3, r1
 8022cfa:	4640      	mov	r0, r8
 8022cfc:	4649      	mov	r1, r9
 8022cfe:	f7dd fab7 	bl	8000270 <__adddf3>
 8022d02:	4602      	mov	r2, r0
 8022d04:	460b      	mov	r3, r1
 8022d06:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 8022d0a:	69bb      	ldr	r3, [r7, #24]
 8022d0c:	00db      	lsls	r3, r3, #3
 8022d0e:	69fa      	ldr	r2, [r7, #28]
 8022d10:	4413      	add	r3, r2
 8022d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022d1a:	f7dd fc5f 	bl	80005dc <__aeabi_dmul>
 8022d1e:	4602      	mov	r2, r0
 8022d20:	460b      	mov	r3, r1
 8022d22:	4614      	mov	r4, r2
 8022d24:	461d      	mov	r5, r3
 8022d26:	697b      	ldr	r3, [r7, #20]
 8022d28:	00db      	lsls	r3, r3, #3
 8022d2a:	69fa      	ldr	r2, [r7, #28]
 8022d2c:	4413      	add	r3, r2
 8022d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022d36:	f7dd fc51 	bl	80005dc <__aeabi_dmul>
 8022d3a:	4602      	mov	r2, r0
 8022d3c:	460b      	mov	r3, r1
 8022d3e:	4620      	mov	r0, r4
 8022d40:	4629      	mov	r1, r5
 8022d42:	f7dd fa95 	bl	8000270 <__adddf3>
 8022d46:	4602      	mov	r2, r0
 8022d48:	460b      	mov	r3, r1
 8022d4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 8022d4e:	697b      	ldr	r3, [r7, #20]
 8022d50:	00db      	lsls	r3, r3, #3
 8022d52:	69fa      	ldr	r2, [r7, #28]
 8022d54:	4413      	add	r3, r2
 8022d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022d5e:	f7dd fc3d 	bl	80005dc <__aeabi_dmul>
 8022d62:	4602      	mov	r2, r0
 8022d64:	460b      	mov	r3, r1
 8022d66:	4690      	mov	r8, r2
 8022d68:	4699      	mov	r9, r3
 8022d6a:	69bb      	ldr	r3, [r7, #24]
 8022d6c:	00db      	lsls	r3, r3, #3
 8022d6e:	69fa      	ldr	r2, [r7, #28]
 8022d70:	4413      	add	r3, r2
 8022d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022d7a:	f7dd fc2f 	bl	80005dc <__aeabi_dmul>
 8022d7e:	4602      	mov	r2, r0
 8022d80:	460b      	mov	r3, r1
 8022d82:	4610      	mov	r0, r2
 8022d84:	4619      	mov	r1, r3
 8022d86:	697b      	ldr	r3, [r7, #20]
 8022d88:	00db      	lsls	r3, r3, #3
 8022d8a:	69fa      	ldr	r2, [r7, #28]
 8022d8c:	18d4      	adds	r4, r2, r3
 8022d8e:	4602      	mov	r2, r0
 8022d90:	460b      	mov	r3, r1
 8022d92:	4640      	mov	r0, r8
 8022d94:	4649      	mov	r1, r9
 8022d96:	f7dd fa69 	bl	800026c <__aeabi_dsub>
 8022d9a:	4602      	mov	r2, r0
 8022d9c:	460b      	mov	r3, r1
 8022d9e:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 8022da2:	69bb      	ldr	r3, [r7, #24]
 8022da4:	00db      	lsls	r3, r3, #3
 8022da6:	69fa      	ldr	r2, [r7, #28]
 8022da8:	18d1      	adds	r1, r2, r3
 8022daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022dae:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 8022db2:	697b      	ldr	r3, [r7, #20]
 8022db4:	3301      	adds	r3, #1
 8022db6:	00db      	lsls	r3, r3, #3
 8022db8:	69fa      	ldr	r2, [r7, #28]
 8022dba:	4413      	add	r3, r2
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 8022dc4:	69bb      	ldr	r3, [r7, #24]
 8022dc6:	3301      	adds	r3, #1
 8022dc8:	00db      	lsls	r3, r3, #3
 8022dca:	69fa      	ldr	r2, [r7, #28]
 8022dcc:	4413      	add	r3, r2
 8022dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dd2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 8022dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022dde:	f7dd fbfd 	bl	80005dc <__aeabi_dmul>
 8022de2:	4602      	mov	r2, r0
 8022de4:	460b      	mov	r3, r1
 8022de6:	4690      	mov	r8, r2
 8022de8:	4699      	mov	r9, r3
 8022dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022dee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022df2:	f7dd fbf3 	bl	80005dc <__aeabi_dmul>
 8022df6:	4602      	mov	r2, r0
 8022df8:	460b      	mov	r3, r1
 8022dfa:	4610      	mov	r0, r2
 8022dfc:	4619      	mov	r1, r3
 8022dfe:	697b      	ldr	r3, [r7, #20]
 8022e00:	3301      	adds	r3, #1
 8022e02:	00db      	lsls	r3, r3, #3
 8022e04:	69fa      	ldr	r2, [r7, #28]
 8022e06:	18d4      	adds	r4, r2, r3
 8022e08:	4602      	mov	r2, r0
 8022e0a:	460b      	mov	r3, r1
 8022e0c:	4640      	mov	r0, r8
 8022e0e:	4649      	mov	r1, r9
 8022e10:	f7dd fa2c 	bl	800026c <__aeabi_dsub>
 8022e14:	4602      	mov	r2, r0
 8022e16:	460b      	mov	r3, r1
 8022e18:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 8022e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022e20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022e24:	f7dd fbda 	bl	80005dc <__aeabi_dmul>
 8022e28:	4602      	mov	r2, r0
 8022e2a:	460b      	mov	r3, r1
 8022e2c:	4690      	mov	r8, r2
 8022e2e:	4699      	mov	r9, r3
 8022e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022e34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022e38:	f7dd fbd0 	bl	80005dc <__aeabi_dmul>
 8022e3c:	4602      	mov	r2, r0
 8022e3e:	460b      	mov	r3, r1
 8022e40:	4610      	mov	r0, r2
 8022e42:	4619      	mov	r1, r3
 8022e44:	69bb      	ldr	r3, [r7, #24]
 8022e46:	3301      	adds	r3, #1
 8022e48:	00db      	lsls	r3, r3, #3
 8022e4a:	69fa      	ldr	r2, [r7, #28]
 8022e4c:	18d4      	adds	r4, r2, r3
 8022e4e:	4602      	mov	r2, r0
 8022e50:	460b      	mov	r3, r1
 8022e52:	4640      	mov	r0, r8
 8022e54:	4649      	mov	r1, r9
 8022e56:	f7dd fa0b 	bl	8000270 <__adddf3>
 8022e5a:	4602      	mov	r2, r0
 8022e5c:	460b      	mov	r3, r1
 8022e5e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8022e62:	bf00      	nop
 8022e64:	3730      	adds	r7, #48	; 0x30
 8022e66:	46bd      	mov	sp, r7
 8022e68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08022e6c <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 8022e6c:	b5b0      	push	{r4, r5, r7, lr}
 8022e6e:	b090      	sub	sp, #64	; 0x40
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	60f8      	str	r0, [r7, #12]
 8022e74:	60b9      	str	r1, [r7, #8]
 8022e76:	607a      	str	r2, [r7, #4]
 8022e78:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 8022e7a:	68bb      	ldr	r3, [r7, #8]
 8022e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e80:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 8022e84:	68fb      	ldr	r3, [r7, #12]
 8022e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e8a:	4611      	mov	r1, r2
 8022e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8022e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 8022e94:	68bb      	ldr	r3, [r7, #8]
 8022e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e9a:	4611      	mov	r1, r2
 8022e9c:	6239      	str	r1, [r7, #32]
 8022e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022ea2:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 8022ea4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022ea8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022eac:	f7dd fe26 	bl	8000afc <__aeabi_dcmpgt>
 8022eb0:	4603      	mov	r3, r0
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d004      	beq.n	8022ec0 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 8022eb6:	68fb      	ldr	r3, [r7, #12]
 8022eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ebc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 8022ec0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022ec4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022ec8:	f7dd f9d2 	bl	8000270 <__adddf3>
 8022ecc:	4602      	mov	r2, r0
 8022ece:	460b      	mov	r3, r1
 8022ed0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 8022ed4:	f04f 0200 	mov.w	r2, #0
 8022ed8:	f04f 0300 	mov.w	r3, #0
 8022edc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022ee0:	f7dd fde4 	bl	8000aac <__aeabi_dcmpeq>
 8022ee4:	4603      	mov	r3, r0
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d01b      	beq.n	8022f22 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 8022eea:	6839      	ldr	r1, [r7, #0]
 8022eec:	f04f 0200 	mov.w	r2, #0
 8022ef0:	f04f 0300 	mov.w	r3, #0
 8022ef4:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 8022ef8:	6879      	ldr	r1, [r7, #4]
 8022efa:	f04f 0200 	mov.w	r2, #0
 8022efe:	4b59      	ldr	r3, [pc, #356]	; (8023064 <xrotg_XzIjz1eG+0x1f8>)
 8022f00:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 8022f04:	68f9      	ldr	r1, [r7, #12]
 8022f06:	f04f 0200 	mov.w	r2, #0
 8022f0a:	f04f 0300 	mov.w	r3, #0
 8022f0e:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 8022f12:	68b9      	ldr	r1, [r7, #8]
 8022f14:	f04f 0200 	mov.w	r2, #0
 8022f18:	f04f 0300 	mov.w	r3, #0
 8022f1c:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 8022f20:	e09b      	b.n	802305a <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 8022f22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022f2a:	f7dd fc81 	bl	8000830 <__aeabi_ddiv>
 8022f2e:	4602      	mov	r2, r0
 8022f30:	460b      	mov	r3, r1
 8022f32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8022f36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022f3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022f3e:	f7dd fc77 	bl	8000830 <__aeabi_ddiv>
 8022f42:	4602      	mov	r2, r0
 8022f44:	460b      	mov	r3, r1
 8022f46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 8022f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022f4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022f52:	f7dd fb43 	bl	80005dc <__aeabi_dmul>
 8022f56:	4602      	mov	r2, r0
 8022f58:	460b      	mov	r3, r1
 8022f5a:	4614      	mov	r4, r2
 8022f5c:	461d      	mov	r5, r3
 8022f5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022f66:	f7dd fb39 	bl	80005dc <__aeabi_dmul>
 8022f6a:	4602      	mov	r2, r0
 8022f6c:	460b      	mov	r3, r1
 8022f6e:	4620      	mov	r0, r4
 8022f70:	4629      	mov	r1, r5
 8022f72:	f7dd f97d 	bl	8000270 <__adddf3>
 8022f76:	4602      	mov	r2, r0
 8022f78:	460b      	mov	r3, r1
 8022f7a:	ec43 2b17 	vmov	d7, r2, r3
 8022f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8022f82:	eef0 0a67 	vmov.f32	s1, s15
 8022f86:	f00b fe8b 	bl	802eca0 <sqrt>
 8022f8a:	ec53 2b10 	vmov	r2, r3, d0
 8022f8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022f92:	f7dd fb23 	bl	80005dc <__aeabi_dmul>
 8022f96:	4602      	mov	r2, r0
 8022f98:	460b      	mov	r3, r1
 8022f9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 8022f9e:	f04f 0200 	mov.w	r2, #0
 8022fa2:	f04f 0300 	mov.w	r3, #0
 8022fa6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8022faa:	f7dd fd89 	bl	8000ac0 <__aeabi_dcmplt>
 8022fae:	4603      	mov	r3, r0
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	d005      	beq.n	8022fc0 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 8022fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8022fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022fba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8022fbe:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 8022fc0:	68fb      	ldr	r3, [r7, #12]
 8022fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022fc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022fca:	f7dd fc31 	bl	8000830 <__aeabi_ddiv>
 8022fce:	4602      	mov	r2, r0
 8022fd0:	460b      	mov	r3, r1
 8022fd2:	6879      	ldr	r1, [r7, #4]
 8022fd4:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8022fd8:	68bb      	ldr	r3, [r7, #8]
 8022fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022fde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022fe2:	f7dd fc25 	bl	8000830 <__aeabi_ddiv>
 8022fe6:	4602      	mov	r2, r0
 8022fe8:	460b      	mov	r3, r1
 8022fea:	6839      	ldr	r1, [r7, #0]
 8022fec:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 8022ff0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022ff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022ff8:	f7dd fd80 	bl	8000afc <__aeabi_dcmpgt>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	d006      	beq.n	8023010 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 8023002:	683b      	ldr	r3, [r7, #0]
 8023004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023008:	68b9      	ldr	r1, [r7, #8]
 802300a:	e9c1 2300 	strd	r2, r3, [r1]
 802300e:	e01f      	b.n	8023050 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023016:	f04f 0200 	mov.w	r2, #0
 802301a:	f04f 0300 	mov.w	r3, #0
 802301e:	f7dd fd45 	bl	8000aac <__aeabi_dcmpeq>
 8023022:	4603      	mov	r3, r0
 8023024:	2b00      	cmp	r3, #0
 8023026:	d10d      	bne.n	8023044 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802302e:	f04f 0000 	mov.w	r0, #0
 8023032:	490c      	ldr	r1, [pc, #48]	; (8023064 <xrotg_XzIjz1eG+0x1f8>)
 8023034:	f7dd fbfc 	bl	8000830 <__aeabi_ddiv>
 8023038:	4602      	mov	r2, r0
 802303a:	460b      	mov	r3, r1
 802303c:	68b9      	ldr	r1, [r7, #8]
 802303e:	e9c1 2300 	strd	r2, r3, [r1]
 8023042:	e005      	b.n	8023050 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 8023044:	68b9      	ldr	r1, [r7, #8]
 8023046:	f04f 0200 	mov.w	r2, #0
 802304a:	4b06      	ldr	r3, [pc, #24]	; (8023064 <xrotg_XzIjz1eG+0x1f8>)
 802304c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8023050:	68f9      	ldr	r1, [r7, #12]
 8023052:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8023056:	e9c1 2300 	strd	r2, r3, [r1]
}
 802305a:	bf00      	nop
 802305c:	3740      	adds	r7, #64	; 0x40
 802305e:	46bd      	mov	sp, r7
 8023060:	bdb0      	pop	{r4, r5, r7, pc}
 8023062:	bf00      	nop
 8023064:	3ff00000 	.word	0x3ff00000

08023068 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8023068:	b590      	push	{r4, r7, lr}
 802306a:	b089      	sub	sp, #36	; 0x24
 802306c:	af00      	add	r7, sp, #0
 802306e:	6178      	str	r0, [r7, #20]
 8023070:	ed87 0b02 	vstr	d0, [r7, #8]
 8023074:	6139      	str	r1, [r7, #16]
 8023076:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8023078:	687a      	ldr	r2, [r7, #4]
 802307a:	697b      	ldr	r3, [r7, #20]
 802307c:	4413      	add	r3, r2
 802307e:	3b01      	subs	r3, #1
 8023080:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	61fb      	str	r3, [r7, #28]
 8023086:	e01a      	b.n	80230be <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 8023088:	69fb      	ldr	r3, [r7, #28]
 802308a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802308e:	3b01      	subs	r3, #1
 8023090:	00db      	lsls	r3, r3, #3
 8023092:	693a      	ldr	r2, [r7, #16]
 8023094:	4413      	add	r3, r2
 8023096:	e9d3 0100 	ldrd	r0, r1, [r3]
 802309a:	69fb      	ldr	r3, [r7, #28]
 802309c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80230a0:	3b01      	subs	r3, #1
 80230a2:	00db      	lsls	r3, r3, #3
 80230a4:	693a      	ldr	r2, [r7, #16]
 80230a6:	18d4      	adds	r4, r2, r3
 80230a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80230ac:	f7dd fa96 	bl	80005dc <__aeabi_dmul>
 80230b0:	4602      	mov	r2, r0
 80230b2:	460b      	mov	r3, r1
 80230b4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 80230b8:	69fb      	ldr	r3, [r7, #28]
 80230ba:	3301      	adds	r3, #1
 80230bc:	61fb      	str	r3, [r7, #28]
 80230be:	69fa      	ldr	r2, [r7, #28]
 80230c0:	69bb      	ldr	r3, [r7, #24]
 80230c2:	429a      	cmp	r2, r3
 80230c4:	dde0      	ble.n	8023088 <xscal_59GtRAwv+0x20>
  }
}
 80230c6:	bf00      	nop
 80230c8:	bf00      	nop
 80230ca:	3724      	adds	r7, #36	; 0x24
 80230cc:	46bd      	mov	sp, r7
 80230ce:	bd90      	pop	{r4, r7, pc}

080230d0 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 80230d0:	b590      	push	{r4, r7, lr}
 80230d2:	b089      	sub	sp, #36	; 0x24
 80230d4:	af00      	add	r7, sp, #0
 80230d6:	6178      	str	r0, [r7, #20]
 80230d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80230dc:	6139      	str	r1, [r7, #16]
 80230de:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 80230e0:	687a      	ldr	r2, [r7, #4]
 80230e2:	697b      	ldr	r3, [r7, #20]
 80230e4:	4413      	add	r3, r2
 80230e6:	3b01      	subs	r3, #1
 80230e8:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	61fb      	str	r3, [r7, #28]
 80230ee:	e01a      	b.n	8023126 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 80230f0:	69fb      	ldr	r3, [r7, #28]
 80230f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80230f6:	3b01      	subs	r3, #1
 80230f8:	00db      	lsls	r3, r3, #3
 80230fa:	693a      	ldr	r2, [r7, #16]
 80230fc:	4413      	add	r3, r2
 80230fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023102:	69fb      	ldr	r3, [r7, #28]
 8023104:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023108:	3b01      	subs	r3, #1
 802310a:	00db      	lsls	r3, r3, #3
 802310c:	693a      	ldr	r2, [r7, #16]
 802310e:	18d4      	adds	r4, r2, r3
 8023110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023114:	f7dd fa62 	bl	80005dc <__aeabi_dmul>
 8023118:	4602      	mov	r2, r0
 802311a:	460b      	mov	r3, r1
 802311c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8023120:	69fb      	ldr	r3, [r7, #28]
 8023122:	3301      	adds	r3, #1
 8023124:	61fb      	str	r3, [r7, #28]
 8023126:	69fa      	ldr	r2, [r7, #28]
 8023128:	69bb      	ldr	r3, [r7, #24]
 802312a:	429a      	cmp	r2, r3
 802312c:	dde0      	ble.n	80230f0 <xscal_PLmmUlD2+0x20>
  }
}
 802312e:	bf00      	nop
 8023130:	bf00      	nop
 8023132:	3724      	adds	r7, #36	; 0x24
 8023134:	46bd      	mov	sp, r7
 8023136:	bd90      	pop	{r4, r7, pc}

08023138 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8023138:	b590      	push	{r4, r7, lr}
 802313a:	b087      	sub	sp, #28
 802313c:	af00      	add	r7, sp, #0
 802313e:	ed87 0b02 	vstr	d0, [r7, #8]
 8023142:	6078      	str	r0, [r7, #4]
 8023144:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 8023146:	683b      	ldr	r3, [r7, #0]
 8023148:	617b      	str	r3, [r7, #20]
 802314a:	e01a      	b.n	8023182 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 802314c:	697b      	ldr	r3, [r7, #20]
 802314e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023152:	3b01      	subs	r3, #1
 8023154:	00db      	lsls	r3, r3, #3
 8023156:	687a      	ldr	r2, [r7, #4]
 8023158:	4413      	add	r3, r2
 802315a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802315e:	697b      	ldr	r3, [r7, #20]
 8023160:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8023164:	3b01      	subs	r3, #1
 8023166:	00db      	lsls	r3, r3, #3
 8023168:	687a      	ldr	r2, [r7, #4]
 802316a:	18d4      	adds	r4, r2, r3
 802316c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023170:	f7dd fa34 	bl	80005dc <__aeabi_dmul>
 8023174:	4602      	mov	r2, r0
 8023176:	460b      	mov	r3, r1
 8023178:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 802317c:	697b      	ldr	r3, [r7, #20]
 802317e:	3301      	adds	r3, #1
 8023180:	617b      	str	r3, [r7, #20]
 8023182:	683b      	ldr	r3, [r7, #0]
 8023184:	3302      	adds	r3, #2
 8023186:	697a      	ldr	r2, [r7, #20]
 8023188:	429a      	cmp	r2, r3
 802318a:	dddf      	ble.n	802314c <xscal_eaAxXsvQ+0x14>
  }
}
 802318c:	bf00      	nop
 802318e:	bf00      	nop
 8023190:	371c      	adds	r7, #28
 8023192:	46bd      	mov	sp, r7
 8023194:	bd90      	pop	{r4, r7, pc}

08023196 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 8023196:	b480      	push	{r7}
 8023198:	b087      	sub	sp, #28
 802319a:	af00      	add	r7, sp, #0
 802319c:	60f8      	str	r0, [r7, #12]
 802319e:	60b9      	str	r1, [r7, #8]
 80231a0:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 80231a2:	68bb      	ldr	r3, [r7, #8]
 80231a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80231a8:	3b01      	subs	r3, #1
 80231aa:	00db      	lsls	r3, r3, #3
 80231ac:	68fa      	ldr	r2, [r7, #12]
 80231ae:	4413      	add	r3, r2
 80231b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80231be:	3b01      	subs	r3, #1
 80231c0:	00db      	lsls	r3, r3, #3
 80231c2:	68fa      	ldr	r2, [r7, #12]
 80231c4:	441a      	add	r2, r3
 80231c6:	68bb      	ldr	r3, [r7, #8]
 80231c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80231cc:	3b01      	subs	r3, #1
 80231ce:	00db      	lsls	r3, r3, #3
 80231d0:	68f9      	ldr	r1, [r7, #12]
 80231d2:	4419      	add	r1, r3
 80231d4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80231d8:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80231e2:	3b01      	subs	r3, #1
 80231e4:	00db      	lsls	r3, r3, #3
 80231e6:	68fa      	ldr	r2, [r7, #12]
 80231e8:	18d1      	adds	r1, r2, r3
 80231ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80231ee:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 80231f2:	68bb      	ldr	r3, [r7, #8]
 80231f4:	00db      	lsls	r3, r3, #3
 80231f6:	68fa      	ldr	r2, [r7, #12]
 80231f8:	4413      	add	r3, r2
 80231fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	00db      	lsls	r3, r3, #3
 8023206:	68fa      	ldr	r2, [r7, #12]
 8023208:	4413      	add	r3, r2
 802320a:	68ba      	ldr	r2, [r7, #8]
 802320c:	00d2      	lsls	r2, r2, #3
 802320e:	68f9      	ldr	r1, [r7, #12]
 8023210:	4411      	add	r1, r2
 8023212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023216:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	00db      	lsls	r3, r3, #3
 802321e:	68fa      	ldr	r2, [r7, #12]
 8023220:	18d1      	adds	r1, r2, r3
 8023222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023226:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 802322a:	68bb      	ldr	r3, [r7, #8]
 802322c:	3301      	adds	r3, #1
 802322e:	00db      	lsls	r3, r3, #3
 8023230:	68fa      	ldr	r2, [r7, #12]
 8023232:	4413      	add	r3, r2
 8023234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023238:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	3301      	adds	r3, #1
 8023240:	00db      	lsls	r3, r3, #3
 8023242:	68fa      	ldr	r2, [r7, #12]
 8023244:	4413      	add	r3, r2
 8023246:	68ba      	ldr	r2, [r7, #8]
 8023248:	3201      	adds	r2, #1
 802324a:	00d2      	lsls	r2, r2, #3
 802324c:	68f9      	ldr	r1, [r7, #12]
 802324e:	4411      	add	r1, r2
 8023250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023254:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	3301      	adds	r3, #1
 802325c:	00db      	lsls	r3, r3, #3
 802325e:	68fa      	ldr	r2, [r7, #12]
 8023260:	18d1      	adds	r1, r2, r3
 8023262:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023266:	e9c1 2300 	strd	r2, r3, [r1]
}
 802326a:	bf00      	nop
 802326c:	371c      	adds	r7, #28
 802326e:	46bd      	mov	sp, r7
 8023270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023274:	4770      	bx	lr

08023276 <ams_error>:

__weak uint8_t end_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 8023276:	b480      	push	{r7}
 8023278:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 802327a:	bf00      	nop
 802327c:	46bd      	mov	sp, r7
 802327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023282:	4770      	bx	lr

08023284 <ams_error_0_function>:
static float timer_r0;
static float timer_r1;
static float timer_r2;
static float timer_r3;

ams_state_t ams_error_0_function() {
 8023284:	b480      	push	{r7}
 8023286:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8023288:	4b04      	ldr	r3, [pc, #16]	; (802329c <ams_error_0_function+0x18>)
 802328a:	f04f 0200 	mov.w	r2, #0
 802328e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 8023290:	2304      	movs	r3, #4
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_0;
}
 8023292:	4618      	mov	r0, r3
 8023294:	46bd      	mov	sp, r7
 8023296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802329a:	4770      	bx	lr
 802329c:	2000192c 	.word	0x2000192c

080232a0 <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 80232a0:	b480      	push	{r7}
 80232a2:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 80232a4:	4b0a      	ldr	r3, [pc, #40]	; (80232d0 <ams_error_error_detected_function+0x30>)
 80232a6:	2200      	movs	r2, #0
 80232a8:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 80232aa:	4b09      	ldr	r3, [pc, #36]	; (80232d0 <ams_error_error_detected_function+0x30>)
 80232ac:	2200      	movs	r2, #0
 80232ae:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 80232b0:	4b07      	ldr	r3, [pc, #28]	; (80232d0 <ams_error_error_detected_function+0x30>)
 80232b2:	2200      	movs	r2, #0
 80232b4:	71da      	strb	r2, [r3, #7]
       ams_outputs.enable_charger=0;
 80232b6:	4b06      	ldr	r3, [pc, #24]	; (80232d0 <ams_error_error_detected_function+0x30>)
 80232b8:	2200      	movs	r2, #0
 80232ba:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 80232bc:	4b05      	ldr	r3, [pc, #20]	; (80232d4 <ams_error_error_detected_function+0x34>)
 80232be:	f04f 0200 	mov.w	r2, #0
 80232c2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 80232c4:	2305      	movs	r3, #5
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 80232c6:	4618      	mov	r0, r3
 80232c8:	46bd      	mov	sp, r7
 80232ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232ce:	4770      	bx	lr
 80232d0:	2001c040 	.word	0x2001c040
 80232d4:	2000192c 	.word	0x2000192c

080232d8 <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 80232d8:	b480      	push	{r7}
 80232da:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 80232dc:	4b11      	ldr	r3, [pc, #68]	; (8023324 <ams_error_relays_opened_function+0x4c>)
 80232de:	edd3 7a00 	vldr	s15, [r3]
 80232e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80232e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80232ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ee:	dd08      	ble.n	8023302 <ams_error_relays_opened_function+0x2a>
       ams_outputs.error=0;
 80232f0:	4b0d      	ldr	r3, [pc, #52]	; (8023328 <ams_error_relays_opened_function+0x50>)
 80232f2:	2200      	movs	r2, #0
 80232f4:	721a      	strb	r2, [r3, #8]
       timer_r2 = 0;
 80232f6:	4b0b      	ldr	r3, [pc, #44]	; (8023324 <ams_error_relays_opened_function+0x4c>)
 80232f8:	f04f 0200 	mov.w	r2, #0
 80232fc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 80232fe:	2306      	movs	r3, #6
 8023300:	e00b      	b.n	802331a <ams_error_relays_opened_function+0x42>
   }

   timer_r2 += ams_inputs.Ts;
 8023302:	4b0a      	ldr	r3, [pc, #40]	; (802332c <ams_error_relays_opened_function+0x54>)
 8023304:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023308:	4b06      	ldr	r3, [pc, #24]	; (8023324 <ams_error_relays_opened_function+0x4c>)
 802330a:	edd3 7a00 	vldr	s15, [r3]
 802330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023312:	4b04      	ldr	r3, [pc, #16]	; (8023324 <ams_error_relays_opened_function+0x4c>)
 8023314:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 8023318:	2305      	movs	r3, #5
}
 802331a:	4618      	mov	r0, r3
 802331c:	46bd      	mov	sp, r7
 802331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023322:	4770      	bx	lr
 8023324:	2000192c 	.word	0x2000192c
 8023328:	2001c040 	.word	0x2001c040
 802332c:	2001bfe0 	.word	0x2001bfe0

08023330 <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 8023330:	b480      	push	{r7}
 8023332:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8023334:	4b08      	ldr	r3, [pc, #32]	; (8023358 <ams_error_awaiting_error_resolution_function+0x28>)
 8023336:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802333a:	4b08      	ldr	r3, [pc, #32]	; (802335c <ams_error_awaiting_error_resolution_function+0x2c>)
 802333c:	edd3 7a00 	vldr	s15, [r3]
 8023340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023344:	4b05      	ldr	r3, [pc, #20]	; (802335c <ams_error_awaiting_error_resolution_function+0x2c>)
 8023346:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 802334a:	2306      	movs	r3, #6
}
 802334c:	4618      	mov	r0, r3
 802334e:	46bd      	mov	sp, r7
 8023350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023354:	4770      	bx	lr
 8023356:	bf00      	nop
 8023358:	2001bfe0 	.word	0x2001bfe0
 802335c:	2000192c 	.word	0x2000192c

08023360 <ams_error_function>:

ams_state_t ams_error_function() {
 8023360:	b5b0      	push	{r4, r5, r7, lr}
 8023362:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8023364:	4b3a      	ldr	r3, [pc, #232]	; (8023450 <ams_error_function+0xf0>)
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	4618      	mov	r0, r3
 802336a:	f7dd f8df 	bl	800052c <__aeabi_f2d>
 802336e:	4604      	mov	r4, r0
 8023370:	460d      	mov	r5, r1
 8023372:	4b38      	ldr	r3, [pc, #224]	; (8023454 <ams_error_function+0xf4>)
 8023374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023376:	4618      	mov	r0, r3
 8023378:	f7dd f8d8 	bl	800052c <__aeabi_f2d>
 802337c:	a332      	add	r3, pc, #200	; (adr r3, 8023448 <ams_error_function+0xe8>)
 802337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023382:	f7dd f92b 	bl	80005dc <__aeabi_dmul>
 8023386:	4602      	mov	r2, r0
 8023388:	460b      	mov	r3, r1
 802338a:	4620      	mov	r0, r4
 802338c:	4629      	mov	r1, r5
 802338e:	f7dd fb97 	bl	8000ac0 <__aeabi_dcmplt>
 8023392:	4603      	mov	r3, r0
 8023394:	2b00      	cmp	r3, #0
 8023396:	d002      	beq.n	802339e <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 8023398:	4b2f      	ldr	r3, [pc, #188]	; (8023458 <ams_error_function+0xf8>)
 802339a:	2203      	movs	r2, #3
 802339c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 802339e:	4b2e      	ldr	r3, [pc, #184]	; (8023458 <ams_error_function+0xf8>)
 80233a0:	781b      	ldrb	r3, [r3, #0]
 80233a2:	3b03      	subs	r3, #3
 80233a4:	2b03      	cmp	r3, #3
 80233a6:	d827      	bhi.n	80233f8 <ams_error_function+0x98>
 80233a8:	a201      	add	r2, pc, #4	; (adr r2, 80233b0 <ams_error_function+0x50>)
 80233aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80233ae:	bf00      	nop
 80233b0:	080233c1 	.word	0x080233c1
 80233b4:	080233cf 	.word	0x080233cf
 80233b8:	080233dd 	.word	0x080233dd
 80233bc:	080233eb 	.word	0x080233eb
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 80233c0:	f7ff ff60 	bl	8023284 <ams_error_0_function>
 80233c4:	4603      	mov	r3, r0
 80233c6:	461a      	mov	r2, r3
 80233c8:	4b23      	ldr	r3, [pc, #140]	; (8023458 <ams_error_function+0xf8>)
 80233ca:	701a      	strb	r2, [r3, #0]
           break;
 80233cc:	e017      	b.n	80233fe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 80233ce:	f7ff ff67 	bl	80232a0 <ams_error_error_detected_function>
 80233d2:	4603      	mov	r3, r0
 80233d4:	461a      	mov	r2, r3
 80233d6:	4b20      	ldr	r3, [pc, #128]	; (8023458 <ams_error_function+0xf8>)
 80233d8:	701a      	strb	r2, [r3, #0]
           break;
 80233da:	e010      	b.n	80233fe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 80233dc:	f7ff ff7c 	bl	80232d8 <ams_error_relays_opened_function>
 80233e0:	4603      	mov	r3, r0
 80233e2:	461a      	mov	r2, r3
 80233e4:	4b1c      	ldr	r3, [pc, #112]	; (8023458 <ams_error_function+0xf8>)
 80233e6:	701a      	strb	r2, [r3, #0]
           break;
 80233e8:	e009      	b.n	80233fe <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 80233ea:	f7ff ffa1 	bl	8023330 <ams_error_awaiting_error_resolution_function>
 80233ee:	4603      	mov	r3, r0
 80233f0:	461a      	mov	r2, r3
 80233f2:	4b19      	ldr	r3, [pc, #100]	; (8023458 <ams_error_function+0xf8>)
 80233f4:	701a      	strb	r2, [r3, #0]
           break;
 80233f6:	e002      	b.n	80233fe <ams_error_function+0x9e>
       default:
           ams_error();
 80233f8:	f7ff ff3d 	bl	8023276 <ams_error>
           break;
 80233fc:	bf00      	nop
   }

   if(!(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 80233fe:	4b17      	ldr	r3, [pc, #92]	; (802345c <ams_error_function+0xfc>)
 8023400:	7a1b      	ldrb	r3, [r3, #8]
 8023402:	2b00      	cmp	r3, #0
 8023404:	d10f      	bne.n	8023426 <ams_error_function+0xc6>
 8023406:	4b13      	ldr	r3, [pc, #76]	; (8023454 <ams_error_function+0xf4>)
 8023408:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802340c:	2b00      	cmp	r3, #0
 802340e:	d10a      	bne.n	8023426 <ams_error_function+0xc6>
 8023410:	4b10      	ldr	r3, [pc, #64]	; (8023454 <ams_error_function+0xf4>)
 8023412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8023416:	2b00      	cmp	r3, #0
 8023418:	d105      	bne.n	8023426 <ams_error_function+0xc6>
       timer_r1 = 0;
 802341a:	4b0d      	ldr	r3, [pc, #52]	; (8023450 <ams_error_function+0xf0>)
 802341c:	f04f 0200 	mov.w	r2, #0
 8023420:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 8023422:	2307      	movs	r3, #7
 8023424:	e00b      	b.n	802343e <ams_error_function+0xde>
   }


   timer_r1 += ams_inputs.Ts;
 8023426:	4b0b      	ldr	r3, [pc, #44]	; (8023454 <ams_error_function+0xf4>)
 8023428:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802342c:	4b08      	ldr	r3, [pc, #32]	; (8023450 <ams_error_function+0xf0>)
 802342e:	edd3 7a00 	vldr	s15, [r3]
 8023432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023436:	4b06      	ldr	r3, [pc, #24]	; (8023450 <ams_error_function+0xf0>)
 8023438:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 802343c:	2302      	movs	r3, #2
}
 802343e:	4618      	mov	r0, r3
 8023440:	bdb0      	pop	{r4, r5, r7, pc}
 8023442:	bf00      	nop
 8023444:	f3af 8000 	nop.w
 8023448:	d2f1a9fc 	.word	0xd2f1a9fc
 802344c:	3f50624d 	.word	0x3f50624d
 8023450:	20001928 	.word	0x20001928
 8023454:	2001bfe0 	.word	0x2001bfe0
 8023458:	20001921 	.word	0x20001921
 802345c:	2001c040 	.word	0x2001c040

08023460 <ams_main_precharge_drive_close_air_minus_function>:

ams_state_t ams_main_precharge_drive_close_air_minus_function() {
 8023460:	b480      	push	{r7}
 8023462:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 8023464:	4b1d      	ldr	r3, [pc, #116]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 8023466:	edd3 7a00 	vldr	s15, [r3]
 802346a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023476:	d50c      	bpl.n	8023492 <ams_main_precharge_drive_close_air_minus_function+0x32>
 8023478:	4b19      	ldr	r3, [pc, #100]	; (80234e0 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 802347a:	7a1b      	ldrb	r3, [r3, #8]
 802347c:	2b00      	cmp	r3, #0
 802347e:	d008      	beq.n	8023492 <ams_main_precharge_drive_close_air_minus_function+0x32>
       ams_outputs.close_precharge=1;
 8023480:	4b18      	ldr	r3, [pc, #96]	; (80234e4 <ams_main_precharge_drive_close_air_minus_function+0x84>)
 8023482:	2201      	movs	r2, #1
 8023484:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023486:	4b15      	ldr	r3, [pc, #84]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 8023488:	f04f 0200 	mov.w	r2, #0
 802348c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 802348e:	230a      	movs	r3, #10
 8023490:	e01e      	b.n	80234d0 <ams_main_precharge_drive_close_air_minus_function+0x70>
   }

   if((timer_r3 > 2)) {
 8023492:	4b12      	ldr	r3, [pc, #72]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 8023494:	edd3 7a00 	vldr	s15, [r3]
 8023498:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802349c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80234a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234a4:	dd08      	ble.n	80234b8 <ams_main_precharge_drive_close_air_minus_function+0x58>
       ams_outputs.error=111;
 80234a6:	4b0f      	ldr	r3, [pc, #60]	; (80234e4 <ams_main_precharge_drive_close_air_minus_function+0x84>)
 80234a8:	226f      	movs	r2, #111	; 0x6f
 80234aa:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 80234ac:	4b0b      	ldr	r3, [pc, #44]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80234ae:	f04f 0200 	mov.w	r2, #0
 80234b2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 80234b4:	230b      	movs	r3, #11
 80234b6:	e00b      	b.n	80234d0 <ams_main_precharge_drive_close_air_minus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 80234b8:	4b09      	ldr	r3, [pc, #36]	; (80234e0 <ams_main_precharge_drive_close_air_minus_function+0x80>)
 80234ba:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80234be:	4b07      	ldr	r3, [pc, #28]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80234c0:	edd3 7a00 	vldr	s15, [r3]
 80234c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80234c8:	4b04      	ldr	r3, [pc, #16]	; (80234dc <ams_main_precharge_drive_close_air_minus_function+0x7c>)
 80234ca:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80234ce:	2309      	movs	r3, #9
}
 80234d0:	4618      	mov	r0, r3
 80234d2:	46bd      	mov	sp, r7
 80234d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d8:	4770      	bx	lr
 80234da:	bf00      	nop
 80234dc:	20001930 	.word	0x20001930
 80234e0:	2001bfe0 	.word	0x2001bfe0
 80234e4:	2001c040 	.word	0x2001c040

080234e8 <ams_main_precharge_drive_close_precharge_function>:

ams_state_t ams_main_precharge_drive_close_precharge_function() {
 80234e8:	b480      	push	{r7}
 80234ea:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 80234ec:	4b1c      	ldr	r3, [pc, #112]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 80234ee:	edd3 7a00 	vldr	s15, [r3]
 80234f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80234f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80234fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234fe:	d50a      	bpl.n	8023516 <ams_main_precharge_drive_close_precharge_function+0x2e>
 8023500:	4b18      	ldr	r3, [pc, #96]	; (8023564 <ams_main_precharge_drive_close_precharge_function+0x7c>)
 8023502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023506:	2b00      	cmp	r3, #0
 8023508:	d005      	beq.n	8023516 <ams_main_precharge_drive_close_precharge_function+0x2e>
       timer_r3 = 0;
 802350a:	4b15      	ldr	r3, [pc, #84]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802350c:	f04f 0200 	mov.w	r2, #0
 8023510:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 8023512:	230c      	movs	r3, #12
 8023514:	e01e      	b.n	8023554 <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 8023516:	4b12      	ldr	r3, [pc, #72]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023518:	edd3 7a00 	vldr	s15, [r3]
 802351c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023528:	dd08      	ble.n	802353c <ams_main_precharge_drive_close_precharge_function+0x54>
       ams_outputs.error=112;
 802352a:	4b0f      	ldr	r3, [pc, #60]	; (8023568 <ams_main_precharge_drive_close_precharge_function+0x80>)
 802352c:	2270      	movs	r2, #112	; 0x70
 802352e:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023530:	4b0b      	ldr	r3, [pc, #44]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023532:	f04f 0200 	mov.w	r2, #0
 8023536:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023538:	230b      	movs	r3, #11
 802353a:	e00b      	b.n	8023554 <ams_main_precharge_drive_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 802353c:	4b09      	ldr	r3, [pc, #36]	; (8023564 <ams_main_precharge_drive_close_precharge_function+0x7c>)
 802353e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023542:	4b07      	ldr	r3, [pc, #28]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 8023544:	edd3 7a00 	vldr	s15, [r3]
 8023548:	ee77 7a27 	vadd.f32	s15, s14, s15
 802354c:	4b04      	ldr	r3, [pc, #16]	; (8023560 <ams_main_precharge_drive_close_precharge_function+0x78>)
 802354e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 8023552:	230a      	movs	r3, #10
}
 8023554:	4618      	mov	r0, r3
 8023556:	46bd      	mov	sp, r7
 8023558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802355c:	4770      	bx	lr
 802355e:	bf00      	nop
 8023560:	20001930 	.word	0x20001930
 8023564:	2001bfe0 	.word	0x2001bfe0
 8023568:	2001c040 	.word	0x2001c040

0802356c <ams_main_precharge_drive_error_function>:

ams_state_t ams_main_precharge_drive_error_function() {
 802356c:	b480      	push	{r7}
 802356e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023570:	4b08      	ldr	r3, [pc, #32]	; (8023594 <ams_main_precharge_drive_error_function+0x28>)
 8023572:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023576:	4b08      	ldr	r3, [pc, #32]	; (8023598 <ams_main_precharge_drive_error_function+0x2c>)
 8023578:	edd3 7a00 	vldr	s15, [r3]
 802357c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023580:	4b05      	ldr	r3, [pc, #20]	; (8023598 <ams_main_precharge_drive_error_function+0x2c>)
 8023582:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023586:	230b      	movs	r3, #11
}
 8023588:	4618      	mov	r0, r3
 802358a:	46bd      	mov	sp, r7
 802358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023590:	4770      	bx	lr
 8023592:	bf00      	nop
 8023594:	2001bfe0 	.word	0x2001bfe0
 8023598:	20001930 	.word	0x20001930
 802359c:	00000000 	.word	0x00000000

080235a0 <ams_main_precharge_drive_wait_function>:

ams_state_t ams_main_precharge_drive_wait_function() {
 80235a0:	b580      	push	{r7, lr}
 80235a2:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 80235a4:	4b2a      	ldr	r3, [pc, #168]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 80235a6:	edd3 7a00 	vldr	s15, [r3]
 80235aa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80235ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80235b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235b6:	dd26      	ble.n	8023606 <ams_main_precharge_drive_wait_function+0x66>
 80235b8:	4b25      	ldr	r3, [pc, #148]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 80235ba:	edd3 7a00 	vldr	s15, [r3]
 80235be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80235c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80235c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235ca:	d51c      	bpl.n	8023606 <ams_main_precharge_drive_wait_function+0x66>
 80235cc:	4b21      	ldr	r3, [pc, #132]	; (8023654 <ams_main_precharge_drive_wait_function+0xb4>)
 80235ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80235d2:	a31d      	add	r3, pc, #116	; (adr r3, 8023648 <ams_main_precharge_drive_wait_function+0xa8>)
 80235d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235d8:	f7dd f800 	bl	80005dc <__aeabi_dmul>
 80235dc:	4602      	mov	r2, r0
 80235de:	460b      	mov	r3, r1
 80235e0:	4610      	mov	r0, r2
 80235e2:	4619      	mov	r1, r3
 80235e4:	4b1b      	ldr	r3, [pc, #108]	; (8023654 <ams_main_precharge_drive_wait_function+0xb4>)
 80235e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80235ea:	f7dd fa69 	bl	8000ac0 <__aeabi_dcmplt>
 80235ee:	4603      	mov	r3, r0
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d008      	beq.n	8023606 <ams_main_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 80235f4:	4b18      	ldr	r3, [pc, #96]	; (8023658 <ams_main_precharge_drive_wait_function+0xb8>)
 80235f6:	2201      	movs	r2, #1
 80235f8:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 80235fa:	4b15      	ldr	r3, [pc, #84]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 80235fc:	f04f 0200 	mov.w	r2, #0
 8023600:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 8023602:	230d      	movs	r3, #13
 8023604:	e01e      	b.n	8023644 <ams_main_precharge_drive_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 8023606:	4b12      	ldr	r3, [pc, #72]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 8023608:	edd3 7a00 	vldr	s15, [r3]
 802360c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023618:	dd08      	ble.n	802362c <ams_main_precharge_drive_wait_function+0x8c>
       ams_outputs.error=113;
 802361a:	4b0f      	ldr	r3, [pc, #60]	; (8023658 <ams_main_precharge_drive_wait_function+0xb8>)
 802361c:	2271      	movs	r2, #113	; 0x71
 802361e:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023620:	4b0b      	ldr	r3, [pc, #44]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 8023622:	f04f 0200 	mov.w	r2, #0
 8023626:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 8023628:	230b      	movs	r3, #11
 802362a:	e00b      	b.n	8023644 <ams_main_precharge_drive_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 802362c:	4b09      	ldr	r3, [pc, #36]	; (8023654 <ams_main_precharge_drive_wait_function+0xb4>)
 802362e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023632:	4b07      	ldr	r3, [pc, #28]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 8023634:	edd3 7a00 	vldr	s15, [r3]
 8023638:	ee77 7a27 	vadd.f32	s15, s14, s15
 802363c:	4b04      	ldr	r3, [pc, #16]	; (8023650 <ams_main_precharge_drive_wait_function+0xb0>)
 802363e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT;
 8023642:	230c      	movs	r3, #12
}
 8023644:	4618      	mov	r0, r3
 8023646:	bd80      	pop	{r7, pc}
 8023648:	66666666 	.word	0x66666666
 802364c:	3fee6666 	.word	0x3fee6666
 8023650:	20001930 	.word	0x20001930
 8023654:	2001bfe0 	.word	0x2001bfe0
 8023658:	2001c040 	.word	0x2001c040

0802365c <ams_main_precharge_drive_close_air_plus_function>:

ams_state_t ams_main_precharge_drive_close_air_plus_function() {
 802365c:	b480      	push	{r7}
 802365e:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 8023660:	4b1d      	ldr	r3, [pc, #116]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8023662:	edd3 7a00 	vldr	s15, [r3]
 8023666:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802366a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023672:	d50d      	bpl.n	8023690 <ams_main_precharge_drive_close_air_plus_function+0x34>
 8023674:	4b19      	ldr	r3, [pc, #100]	; (80236dc <ams_main_precharge_drive_close_air_plus_function+0x80>)
 8023676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802367a:	2b00      	cmp	r3, #0
 802367c:	d008      	beq.n	8023690 <ams_main_precharge_drive_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 802367e:	4b18      	ldr	r3, [pc, #96]	; (80236e0 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 8023680:	2200      	movs	r2, #0
 8023682:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023684:	4b14      	ldr	r3, [pc, #80]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8023686:	f04f 0200 	mov.w	r2, #0
 802368a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 802368c:	230e      	movs	r3, #14
 802368e:	e01e      	b.n	80236ce <ams_main_precharge_drive_close_air_plus_function+0x72>
   }

   if((timer_r3 > 2)) {
 8023690:	4b11      	ldr	r3, [pc, #68]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 8023692:	edd3 7a00 	vldr	s15, [r3]
 8023696:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236a2:	dd08      	ble.n	80236b6 <ams_main_precharge_drive_close_air_plus_function+0x5a>
       ams_outputs.error=114;
 80236a4:	4b0e      	ldr	r3, [pc, #56]	; (80236e0 <ams_main_precharge_drive_close_air_plus_function+0x84>)
 80236a6:	2272      	movs	r2, #114	; 0x72
 80236a8:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 80236aa:	4b0b      	ldr	r3, [pc, #44]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80236ac:	f04f 0200 	mov.w	r2, #0
 80236b0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 80236b2:	230b      	movs	r3, #11
 80236b4:	e00b      	b.n	80236ce <ams_main_precharge_drive_close_air_plus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 80236b6:	4b09      	ldr	r3, [pc, #36]	; (80236dc <ams_main_precharge_drive_close_air_plus_function+0x80>)
 80236b8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80236bc:	4b06      	ldr	r3, [pc, #24]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80236be:	edd3 7a00 	vldr	s15, [r3]
 80236c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80236c6:	4b04      	ldr	r3, [pc, #16]	; (80236d8 <ams_main_precharge_drive_close_air_plus_function+0x7c>)
 80236c8:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80236cc:	230d      	movs	r3, #13
}
 80236ce:	4618      	mov	r0, r3
 80236d0:	46bd      	mov	sp, r7
 80236d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236d6:	4770      	bx	lr
 80236d8:	20001930 	.word	0x20001930
 80236dc:	2001bfe0 	.word	0x2001bfe0
 80236e0:	2001c040 	.word	0x2001c040

080236e4 <ams_main_precharge_drive_open_precharge_function>:

ams_state_t ams_main_precharge_drive_open_precharge_function() {
 80236e4:	b480      	push	{r7}
 80236e6:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 80236e8:	4b1d      	ldr	r3, [pc, #116]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 80236ea:	edd3 7a00 	vldr	s15, [r3]
 80236ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80236f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80236f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236fa:	dd08      	ble.n	802370e <ams_main_precharge_drive_open_precharge_function+0x2a>
       ams_outputs.error=115;
 80236fc:	4b19      	ldr	r3, [pc, #100]	; (8023764 <ams_main_precharge_drive_open_precharge_function+0x80>)
 80236fe:	2273      	movs	r2, #115	; 0x73
 8023700:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023702:	4b17      	ldr	r3, [pc, #92]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023704:	f04f 0200 	mov.w	r2, #0
 8023708:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR;
 802370a:	230b      	movs	r3, #11
 802370c:	e023      	b.n	8023756 <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 802370e:	4b14      	ldr	r3, [pc, #80]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023710:	edd3 7a00 	vldr	s15, [r3]
 8023714:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023718:	eef4 7ac7 	vcmpe.f32	s15, s14
 802371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023720:	d50d      	bpl.n	802373e <ams_main_precharge_drive_open_precharge_function+0x5a>
 8023722:	4b11      	ldr	r3, [pc, #68]	; (8023768 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8023724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023728:	2b00      	cmp	r3, #0
 802372a:	d108      	bne.n	802373e <ams_main_precharge_drive_open_precharge_function+0x5a>
       ams_outputs.precharge_drive_complete=1;
 802372c:	4b0d      	ldr	r3, [pc, #52]	; (8023764 <ams_main_precharge_drive_open_precharge_function+0x80>)
 802372e:	2201      	movs	r2, #1
 8023730:	701a      	strb	r2, [r3, #0]
       timer_r3 = 0;
 8023732:	4b0b      	ldr	r3, [pc, #44]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023734:	f04f 0200 	mov.w	r2, #0
 8023738:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 802373a:	230f      	movs	r3, #15
 802373c:	e00b      	b.n	8023756 <ams_main_precharge_drive_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 802373e:	4b0a      	ldr	r3, [pc, #40]	; (8023768 <ams_main_precharge_drive_open_precharge_function+0x84>)
 8023740:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023744:	4b06      	ldr	r3, [pc, #24]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023746:	edd3 7a00 	vldr	s15, [r3]
 802374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802374e:	4b04      	ldr	r3, [pc, #16]	; (8023760 <ams_main_precharge_drive_open_precharge_function+0x7c>)
 8023750:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8023754:	230e      	movs	r3, #14
}
 8023756:	4618      	mov	r0, r3
 8023758:	46bd      	mov	sp, r7
 802375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802375e:	4770      	bx	lr
 8023760:	20001930 	.word	0x20001930
 8023764:	2001c040 	.word	0x2001c040
 8023768:	2001bfe0 	.word	0x2001bfe0

0802376c <ams_main_precharge_drive_exit_function>:

ams_state_t ams_main_precharge_drive_exit_function() {
 802376c:	b480      	push	{r7}
 802376e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023770:	4b08      	ldr	r3, [pc, #32]	; (8023794 <ams_main_precharge_drive_exit_function+0x28>)
 8023772:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023776:	4b08      	ldr	r3, [pc, #32]	; (8023798 <ams_main_precharge_drive_exit_function+0x2c>)
 8023778:	edd3 7a00 	vldr	s15, [r3]
 802377c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023780:	4b05      	ldr	r3, [pc, #20]	; (8023798 <ams_main_precharge_drive_exit_function+0x2c>)
 8023782:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT;
 8023786:	230f      	movs	r3, #15
}
 8023788:	4618      	mov	r0, r3
 802378a:	46bd      	mov	sp, r7
 802378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023790:	4770      	bx	lr
 8023792:	bf00      	nop
 8023794:	2001bfe0 	.word	0x2001bfe0
 8023798:	20001930 	.word	0x20001930

0802379c <ams_main_precharge_drive_0_function>:

ams_state_t ams_main_precharge_drive_0_function() {
 802379c:	b480      	push	{r7}
 802379e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 80237a0:	4b04      	ldr	r3, [pc, #16]	; (80237b4 <ams_main_precharge_drive_0_function+0x18>)
 80237a2:	f04f 0200 	mov.w	r2, #0
 80237a6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
 80237a8:	2311      	movs	r3, #17
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
}
 80237aa:	4618      	mov	r0, r3
 80237ac:	46bd      	mov	sp, r7
 80237ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237b2:	4770      	bx	lr
 80237b4:	20001930 	.word	0x20001930

080237b8 <ams_main_precharge_drive_entry_function>:

ams_state_t ams_main_precharge_drive_entry_function() {
 80237b8:	b480      	push	{r7}
 80237ba:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 80237bc:	4b06      	ldr	r3, [pc, #24]	; (80237d8 <ams_main_precharge_drive_entry_function+0x20>)
 80237be:	2201      	movs	r2, #1
 80237c0:	719a      	strb	r2, [r3, #6]
       timer_r3 = 0;
 80237c2:	4b06      	ldr	r3, [pc, #24]	; (80237dc <ams_main_precharge_drive_entry_function+0x24>)
 80237c4:	f04f 0200 	mov.w	r2, #0
 80237c8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80237ca:	2309      	movs	r3, #9
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY;
}
 80237cc:	4618      	mov	r0, r3
 80237ce:	46bd      	mov	sp, r7
 80237d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237d4:	4770      	bx	lr
 80237d6:	bf00      	nop
 80237d8:	2001c040 	.word	0x2001c040
 80237dc:	20001930 	.word	0x20001930

080237e0 <ams_main_precharge_drive_function>:

ams_state_t ams_main_precharge_drive_function() {
 80237e0:	b5b0      	push	{r4, r5, r7, lr}
 80237e2:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 80237e4:	4b4c      	ldr	r3, [pc, #304]	; (8023918 <ams_main_precharge_drive_function+0x138>)
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	4618      	mov	r0, r3
 80237ea:	f7dc fe9f 	bl	800052c <__aeabi_f2d>
 80237ee:	4604      	mov	r4, r0
 80237f0:	460d      	mov	r5, r1
 80237f2:	4b4a      	ldr	r3, [pc, #296]	; (802391c <ams_main_precharge_drive_function+0x13c>)
 80237f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80237f6:	4618      	mov	r0, r3
 80237f8:	f7dc fe98 	bl	800052c <__aeabi_f2d>
 80237fc:	a344      	add	r3, pc, #272	; (adr r3, 8023910 <ams_main_precharge_drive_function+0x130>)
 80237fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023802:	f7dc feeb 	bl	80005dc <__aeabi_dmul>
 8023806:	4602      	mov	r2, r0
 8023808:	460b      	mov	r3, r1
 802380a:	4620      	mov	r0, r4
 802380c:	4629      	mov	r1, r5
 802380e:	f7dd f957 	bl	8000ac0 <__aeabi_dcmplt>
 8023812:	4603      	mov	r3, r0
 8023814:	2b00      	cmp	r3, #0
 8023816:	d002      	beq.n	802381e <ams_main_precharge_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_DRIVE_0;
 8023818:	4b41      	ldr	r3, [pc, #260]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 802381a:	2210      	movs	r2, #16
 802381c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802381e:	4b40      	ldr	r3, [pc, #256]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 8023820:	781b      	ldrb	r3, [r3, #0]
 8023822:	3b09      	subs	r3, #9
 8023824:	2b08      	cmp	r3, #8
 8023826:	d854      	bhi.n	80238d2 <ams_main_precharge_drive_function+0xf2>
 8023828:	a201      	add	r2, pc, #4	; (adr r2, 8023830 <ams_main_precharge_drive_function+0x50>)
 802382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802382e:	bf00      	nop
 8023830:	08023855 	.word	0x08023855
 8023834:	08023863 	.word	0x08023863
 8023838:	08023871 	.word	0x08023871
 802383c:	0802387f 	.word	0x0802387f
 8023840:	0802388d 	.word	0x0802388d
 8023844:	0802389b 	.word	0x0802389b
 8023848:	080238a9 	.word	0x080238a9
 802384c:	080238b7 	.word	0x080238b7
 8023850:	080238c5 	.word	0x080238c5
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_drive_close_air_minus_function();
 8023854:	f7ff fe04 	bl	8023460 <ams_main_precharge_drive_close_air_minus_function>
 8023858:	4603      	mov	r3, r0
 802385a:	461a      	mov	r2, r3
 802385c:	4b30      	ldr	r3, [pc, #192]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 802385e:	701a      	strb	r2, [r3, #0]
           break;
 8023860:	e03a      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_drive_close_precharge_function();
 8023862:	f7ff fe41 	bl	80234e8 <ams_main_precharge_drive_close_precharge_function>
 8023866:	4603      	mov	r3, r0
 8023868:	461a      	mov	r2, r3
 802386a:	4b2d      	ldr	r3, [pc, #180]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 802386c:	701a      	strb	r2, [r3, #0]
           break;
 802386e:	e033      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ERROR:
           state_r3 = ams_main_precharge_drive_error_function();
 8023870:	f7ff fe7c 	bl	802356c <ams_main_precharge_drive_error_function>
 8023874:	4603      	mov	r3, r0
 8023876:	461a      	mov	r2, r3
 8023878:	4b29      	ldr	r3, [pc, #164]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 802387a:	701a      	strb	r2, [r3, #0]
           break;
 802387c:	e02c      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_WAIT:
           state_r3 = ams_main_precharge_drive_wait_function();
 802387e:	f7ff fe8f 	bl	80235a0 <ams_main_precharge_drive_wait_function>
 8023882:	4603      	mov	r3, r0
 8023884:	461a      	mov	r2, r3
 8023886:	4b26      	ldr	r3, [pc, #152]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 8023888:	701a      	strb	r2, [r3, #0]
           break;
 802388a:	e025      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_drive_close_air_plus_function();
 802388c:	f7ff fee6 	bl	802365c <ams_main_precharge_drive_close_air_plus_function>
 8023890:	4603      	mov	r3, r0
 8023892:	461a      	mov	r2, r3
 8023894:	4b22      	ldr	r3, [pc, #136]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 8023896:	701a      	strb	r2, [r3, #0]
           break;
 8023898:	e01e      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_drive_open_precharge_function();
 802389a:	f7ff ff23 	bl	80236e4 <ams_main_precharge_drive_open_precharge_function>
 802389e:	4603      	mov	r3, r0
 80238a0:	461a      	mov	r2, r3
 80238a2:	4b1f      	ldr	r3, [pc, #124]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 80238a4:	701a      	strb	r2, [r3, #0]
           break;
 80238a6:	e017      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_EXIT:
           state_r3 = ams_main_precharge_drive_exit_function();
 80238a8:	f7ff ff60 	bl	802376c <ams_main_precharge_drive_exit_function>
 80238ac:	4603      	mov	r3, r0
 80238ae:	461a      	mov	r2, r3
 80238b0:	4b1b      	ldr	r3, [pc, #108]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 80238b2:	701a      	strb	r2, [r3, #0]
           break;
 80238b4:	e010      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_0:
           state_r3 = ams_main_precharge_drive_0_function();
 80238b6:	f7ff ff71 	bl	802379c <ams_main_precharge_drive_0_function>
 80238ba:	4603      	mov	r3, r0
 80238bc:	461a      	mov	r2, r3
 80238be:	4b18      	ldr	r3, [pc, #96]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 80238c0:	701a      	strb	r2, [r3, #0]
           break;
 80238c2:	e009      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_DRIVE_ENTRY:
           state_r3 = ams_main_precharge_drive_entry_function();
 80238c4:	f7ff ff78 	bl	80237b8 <ams_main_precharge_drive_entry_function>
 80238c8:	4603      	mov	r3, r0
 80238ca:	461a      	mov	r2, r3
 80238cc:	4b14      	ldr	r3, [pc, #80]	; (8023920 <ams_main_precharge_drive_function+0x140>)
 80238ce:	701a      	strb	r2, [r3, #0]
           break;
 80238d0:	e002      	b.n	80238d8 <ams_main_precharge_drive_function+0xf8>
       default:
           ams_error();
 80238d2:	f7ff fcd0 	bl	8023276 <ams_error>
           break;
 80238d6:	bf00      	nop
   }

   if(ams_outputs.precharge_drive_complete) {
 80238d8:	4b12      	ldr	r3, [pc, #72]	; (8023924 <ams_main_precharge_drive_function+0x144>)
 80238da:	781b      	ldrb	r3, [r3, #0]
 80238dc:	2b00      	cmp	r3, #0
 80238de:	d008      	beq.n	80238f2 <ams_main_precharge_drive_function+0x112>
       ams_outputs.precharge_drive_complete=0;
 80238e0:	4b10      	ldr	r3, [pc, #64]	; (8023924 <ams_main_precharge_drive_function+0x144>)
 80238e2:	2200      	movs	r2, #0
 80238e4:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80238e6:	4b0c      	ldr	r3, [pc, #48]	; (8023918 <ams_main_precharge_drive_function+0x138>)
 80238e8:	f04f 0200 	mov.w	r2, #0
 80238ec:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE;
 80238ee:	2312      	movs	r3, #18
 80238f0:	e00b      	b.n	802390a <ams_main_precharge_drive_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 80238f2:	4b0a      	ldr	r3, [pc, #40]	; (802391c <ams_main_precharge_drive_function+0x13c>)
 80238f4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80238f8:	4b07      	ldr	r3, [pc, #28]	; (8023918 <ams_main_precharge_drive_function+0x138>)
 80238fa:	edd3 7a00 	vldr	s15, [r3]
 80238fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023902:	4b05      	ldr	r3, [pc, #20]	; (8023918 <ams_main_precharge_drive_function+0x138>)
 8023904:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 8023908:	2308      	movs	r3, #8
}
 802390a:	4618      	mov	r0, r3
 802390c:	bdb0      	pop	{r4, r5, r7, pc}
 802390e:	bf00      	nop
 8023910:	d2f1a9fc 	.word	0xd2f1a9fc
 8023914:	3f50624d 	.word	0x3f50624d
 8023918:	2000192c 	.word	0x2000192c
 802391c:	2001bfe0 	.word	0x2001bfe0
 8023920:	20001922 	.word	0x20001922
 8023924:	2001c040 	.word	0x2001c040

08023928 <ams_main_drive_0_function>:

ams_state_t ams_main_drive_0_function() {
 8023928:	b480      	push	{r7}
 802392a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 802392c:	4b04      	ldr	r3, [pc, #16]	; (8023940 <ams_main_drive_0_function+0x18>)
 802392e:	f04f 0200 	mov.w	r2, #0
 8023932:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_DRIVE;
 8023934:	2314      	movs	r3, #20
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_DRIVE_0;
}
 8023936:	4618      	mov	r0, r3
 8023938:	46bd      	mov	sp, r7
 802393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802393e:	4770      	bx	lr
 8023940:	20001930 	.word	0x20001930
 8023944:	00000000 	.word	0x00000000

08023948 <ams_main_drive_drive_function>:

ams_state_t ams_main_drive_drive_function() {
 8023948:	b580      	push	{r7, lr}
 802394a:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 802394c:	4b14      	ldr	r3, [pc, #80]	; (80239a0 <ams_main_drive_drive_function+0x58>)
 802394e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8023952:	a311      	add	r3, pc, #68	; (adr r3, 8023998 <ams_main_drive_drive_function+0x50>)
 8023954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023958:	f7dd f8b2 	bl	8000ac0 <__aeabi_dcmplt>
 802395c:	4603      	mov	r3, r0
 802395e:	2b00      	cmp	r3, #0
 8023960:	d104      	bne.n	802396c <ams_main_drive_drive_function+0x24>
 8023962:	4b0f      	ldr	r3, [pc, #60]	; (80239a0 <ams_main_drive_drive_function+0x58>)
 8023964:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8023968:	2b00      	cmp	r3, #0
 802396a:	d105      	bne.n	8023978 <ams_main_drive_drive_function+0x30>
       timer_r3 = 0;
 802396c:	4b0d      	ldr	r3, [pc, #52]	; (80239a4 <ams_main_drive_drive_function+0x5c>)
 802396e:	f04f 0200 	mov.w	r2, #0
 8023972:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 8023974:	2315      	movs	r3, #21
 8023976:	e00b      	b.n	8023990 <ams_main_drive_drive_function+0x48>
   }

   timer_r3 += ams_inputs.Ts;
 8023978:	4b09      	ldr	r3, [pc, #36]	; (80239a0 <ams_main_drive_drive_function+0x58>)
 802397a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 802397e:	4b09      	ldr	r3, [pc, #36]	; (80239a4 <ams_main_drive_drive_function+0x5c>)
 8023980:	edd3 7a00 	vldr	s15, [r3]
 8023984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023988:	4b06      	ldr	r3, [pc, #24]	; (80239a4 <ams_main_drive_drive_function+0x5c>)
 802398a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_DRIVE;
 802398e:	2314      	movs	r3, #20
}
 8023990:	4618      	mov	r0, r3
 8023992:	bd80      	pop	{r7, pc}
 8023994:	f3af 8000 	nop.w
 8023998:	cccccccd 	.word	0xcccccccd
 802399c:	4006cccc 	.word	0x4006cccc
 80239a0:	2001bfe0 	.word	0x2001bfe0
 80239a4:	20001930 	.word	0x20001930

080239a8 <ams_main_drive_end_drive_function>:

ams_state_t ams_main_drive_end_drive_function() {
 80239a8:	b580      	push	{r7, lr}
 80239aa:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80239ac:	4b30      	ldr	r3, [pc, #192]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 80239ae:	edd3 7a00 	vldr	s15, [r3]
 80239b2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80239b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80239ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239be:	d528      	bpl.n	8023a12 <ams_main_drive_end_drive_function+0x6a>
 80239c0:	4b2c      	ldr	r3, [pc, #176]	; (8023a74 <ams_main_drive_end_drive_function+0xcc>)
 80239c2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80239c6:	4610      	mov	r0, r2
 80239c8:	4619      	mov	r1, r3
 80239ca:	f7dd f8ff 	bl	8000bcc <__aeabi_d2f>
 80239ce:	ee07 0a90 	vmov	s15, r0
 80239d2:	eef0 7ae7 	vabs.f32	s15, s15
 80239d6:	ee17 0a90 	vmov	r0, s15
 80239da:	f7dc fda7 	bl	800052c <__aeabi_f2d>
 80239de:	a322      	add	r3, pc, #136	; (adr r3, 8023a68 <ams_main_drive_end_drive_function+0xc0>)
 80239e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239e4:	f7dd f86c 	bl	8000ac0 <__aeabi_dcmplt>
 80239e8:	4603      	mov	r3, r0
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d011      	beq.n	8023a12 <ams_main_drive_end_drive_function+0x6a>
       ams_outputs.close_air_plus=0;
 80239ee:	4b22      	ldr	r3, [pc, #136]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 80239f0:	2200      	movs	r2, #0
 80239f2:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 80239f4:	4b20      	ldr	r3, [pc, #128]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 80239f6:	2200      	movs	r2, #0
 80239f8:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 80239fa:	4b1f      	ldr	r3, [pc, #124]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 80239fc:	2200      	movs	r2, #0
 80239fe:	71da      	strb	r2, [r3, #7]
       ams_outputs.drive_complete=1;
 8023a00:	4b1d      	ldr	r3, [pc, #116]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 8023a02:	2201      	movs	r2, #1
 8023a04:	709a      	strb	r2, [r3, #2]
       timer_r3 = 0;
 8023a06:	4b1a      	ldr	r3, [pc, #104]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 8023a08:	f04f 0200 	mov.w	r2, #0
 8023a0c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_EXIT;
 8023a0e:	2316      	movs	r3, #22
 8023a10:	e027      	b.n	8023a62 <ams_main_drive_end_drive_function+0xba>
   }

   if((timer_r3 > 7)) {
 8023a12:	4b17      	ldr	r3, [pc, #92]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 8023a14:	edd3 7a00 	vldr	s15, [r3]
 8023a18:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8023a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a24:	dd11      	ble.n	8023a4a <ams_main_drive_end_drive_function+0xa2>
       ams_outputs.close_air_plus=0;
 8023a26:	4b14      	ldr	r3, [pc, #80]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 8023a28:	2200      	movs	r2, #0
 8023a2a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 8023a2c:	4b12      	ldr	r3, [pc, #72]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 8023a2e:	2200      	movs	r2, #0
 8023a30:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 8023a32:	4b11      	ldr	r3, [pc, #68]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 8023a34:	2200      	movs	r2, #0
 8023a36:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=131;
 8023a38:	4b0f      	ldr	r3, [pc, #60]	; (8023a78 <ams_main_drive_end_drive_function+0xd0>)
 8023a3a:	2283      	movs	r2, #131	; 0x83
 8023a3c:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023a3e:	4b0c      	ldr	r3, [pc, #48]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 8023a40:	f04f 0200 	mov.w	r2, #0
 8023a44:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8023a46:	2317      	movs	r3, #23
 8023a48:	e00b      	b.n	8023a62 <ams_main_drive_end_drive_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 8023a4a:	4b0a      	ldr	r3, [pc, #40]	; (8023a74 <ams_main_drive_end_drive_function+0xcc>)
 8023a4c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023a50:	4b07      	ldr	r3, [pc, #28]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 8023a52:	edd3 7a00 	vldr	s15, [r3]
 8023a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a5a:	4b05      	ldr	r3, [pc, #20]	; (8023a70 <ams_main_drive_end_drive_function+0xc8>)
 8023a5c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_END_DRIVE;
 8023a60:	2315      	movs	r3, #21
}
 8023a62:	4618      	mov	r0, r3
 8023a64:	bd80      	pop	{r7, pc}
 8023a66:	bf00      	nop
 8023a68:	d2f1a9fc 	.word	0xd2f1a9fc
 8023a6c:	3f50624d 	.word	0x3f50624d
 8023a70:	20001930 	.word	0x20001930
 8023a74:	2001bfe0 	.word	0x2001bfe0
 8023a78:	2001c040 	.word	0x2001c040

08023a7c <ams_main_drive_exit_function>:

ams_state_t ams_main_drive_exit_function() {
 8023a7c:	b480      	push	{r7}
 8023a7e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023a80:	4b08      	ldr	r3, [pc, #32]	; (8023aa4 <ams_main_drive_exit_function+0x28>)
 8023a82:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023a86:	4b08      	ldr	r3, [pc, #32]	; (8023aa8 <ams_main_drive_exit_function+0x2c>)
 8023a88:	edd3 7a00 	vldr	s15, [r3]
 8023a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023a90:	4b05      	ldr	r3, [pc, #20]	; (8023aa8 <ams_main_drive_exit_function+0x2c>)
 8023a92:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_EXIT;
 8023a96:	2316      	movs	r3, #22
}
 8023a98:	4618      	mov	r0, r3
 8023a9a:	46bd      	mov	sp, r7
 8023a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aa0:	4770      	bx	lr
 8023aa2:	bf00      	nop
 8023aa4:	2001bfe0 	.word	0x2001bfe0
 8023aa8:	20001930 	.word	0x20001930

08023aac <ams_main_drive_force_quit_function>:

ams_state_t ams_main_drive_force_quit_function() {
 8023aac:	b480      	push	{r7}
 8023aae:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023ab0:	4b08      	ldr	r3, [pc, #32]	; (8023ad4 <ams_main_drive_force_quit_function+0x28>)
 8023ab2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023ab6:	4b08      	ldr	r3, [pc, #32]	; (8023ad8 <ams_main_drive_force_quit_function+0x2c>)
 8023ab8:	edd3 7a00 	vldr	s15, [r3]
 8023abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ac0:	4b05      	ldr	r3, [pc, #20]	; (8023ad8 <ams_main_drive_force_quit_function+0x2c>)
 8023ac2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE_FORCE_QUIT;
 8023ac6:	2317      	movs	r3, #23
}
 8023ac8:	4618      	mov	r0, r3
 8023aca:	46bd      	mov	sp, r7
 8023acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ad0:	4770      	bx	lr
 8023ad2:	bf00      	nop
 8023ad4:	2001bfe0 	.word	0x2001bfe0
 8023ad8:	20001930 	.word	0x20001930
 8023adc:	00000000 	.word	0x00000000

08023ae0 <ams_main_drive_function>:

ams_state_t ams_main_drive_function() {
 8023ae0:	b5b0      	push	{r4, r5, r7, lr}
 8023ae2:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8023ae4:	4b3a      	ldr	r3, [pc, #232]	; (8023bd0 <ams_main_drive_function+0xf0>)
 8023ae6:	681b      	ldr	r3, [r3, #0]
 8023ae8:	4618      	mov	r0, r3
 8023aea:	f7dc fd1f 	bl	800052c <__aeabi_f2d>
 8023aee:	4604      	mov	r4, r0
 8023af0:	460d      	mov	r5, r1
 8023af2:	4b38      	ldr	r3, [pc, #224]	; (8023bd4 <ams_main_drive_function+0xf4>)
 8023af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023af6:	4618      	mov	r0, r3
 8023af8:	f7dc fd18 	bl	800052c <__aeabi_f2d>
 8023afc:	a332      	add	r3, pc, #200	; (adr r3, 8023bc8 <ams_main_drive_function+0xe8>)
 8023afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b02:	f7dc fd6b 	bl	80005dc <__aeabi_dmul>
 8023b06:	4602      	mov	r2, r0
 8023b08:	460b      	mov	r3, r1
 8023b0a:	4620      	mov	r0, r4
 8023b0c:	4629      	mov	r1, r5
 8023b0e:	f7dc ffd7 	bl	8000ac0 <__aeabi_dcmplt>
 8023b12:	4603      	mov	r3, r0
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d002      	beq.n	8023b1e <ams_main_drive_function+0x3e>
       state_r3 = STATE_AMS_MAIN_DRIVE_0;
 8023b18:	4b2f      	ldr	r3, [pc, #188]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b1a:	2213      	movs	r2, #19
 8023b1c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8023b1e:	4b2e      	ldr	r3, [pc, #184]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b20:	781b      	ldrb	r3, [r3, #0]
 8023b22:	3b13      	subs	r3, #19
 8023b24:	2b04      	cmp	r3, #4
 8023b26:	d830      	bhi.n	8023b8a <ams_main_drive_function+0xaa>
 8023b28:	a201      	add	r2, pc, #4	; (adr r2, 8023b30 <ams_main_drive_function+0x50>)
 8023b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b2e:	bf00      	nop
 8023b30:	08023b45 	.word	0x08023b45
 8023b34:	08023b53 	.word	0x08023b53
 8023b38:	08023b61 	.word	0x08023b61
 8023b3c:	08023b6f 	.word	0x08023b6f
 8023b40:	08023b7d 	.word	0x08023b7d
       case STATE_AMS_MAIN_DRIVE_0:
           state_r3 = ams_main_drive_0_function();
 8023b44:	f7ff fef0 	bl	8023928 <ams_main_drive_0_function>
 8023b48:	4603      	mov	r3, r0
 8023b4a:	461a      	mov	r2, r3
 8023b4c:	4b22      	ldr	r3, [pc, #136]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b4e:	701a      	strb	r2, [r3, #0]
           break;
 8023b50:	e01e      	b.n	8023b90 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_DRIVE:
           state_r3 = ams_main_drive_drive_function();
 8023b52:	f7ff fef9 	bl	8023948 <ams_main_drive_drive_function>
 8023b56:	4603      	mov	r3, r0
 8023b58:	461a      	mov	r2, r3
 8023b5a:	4b1f      	ldr	r3, [pc, #124]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b5c:	701a      	strb	r2, [r3, #0]
           break;
 8023b5e:	e017      	b.n	8023b90 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_END_DRIVE:
           state_r3 = ams_main_drive_end_drive_function();
 8023b60:	f7ff ff22 	bl	80239a8 <ams_main_drive_end_drive_function>
 8023b64:	4603      	mov	r3, r0
 8023b66:	461a      	mov	r2, r3
 8023b68:	4b1b      	ldr	r3, [pc, #108]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b6a:	701a      	strb	r2, [r3, #0]
           break;
 8023b6c:	e010      	b.n	8023b90 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_EXIT:
           state_r3 = ams_main_drive_exit_function();
 8023b6e:	f7ff ff85 	bl	8023a7c <ams_main_drive_exit_function>
 8023b72:	4603      	mov	r3, r0
 8023b74:	461a      	mov	r2, r3
 8023b76:	4b18      	ldr	r3, [pc, #96]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b78:	701a      	strb	r2, [r3, #0]
           break;
 8023b7a:	e009      	b.n	8023b90 <ams_main_drive_function+0xb0>
       case STATE_AMS_MAIN_DRIVE_FORCE_QUIT:
           state_r3 = ams_main_drive_force_quit_function();
 8023b7c:	f7ff ff96 	bl	8023aac <ams_main_drive_force_quit_function>
 8023b80:	4603      	mov	r3, r0
 8023b82:	461a      	mov	r2, r3
 8023b84:	4b14      	ldr	r3, [pc, #80]	; (8023bd8 <ams_main_drive_function+0xf8>)
 8023b86:	701a      	strb	r2, [r3, #0]
           break;
 8023b88:	e002      	b.n	8023b90 <ams_main_drive_function+0xb0>
       default:
           ams_error();
 8023b8a:	f7ff fb74 	bl	8023276 <ams_error>
           break;
 8023b8e:	bf00      	nop
   }

   if(ams_outputs.drive_complete) {
 8023b90:	4b12      	ldr	r3, [pc, #72]	; (8023bdc <ams_main_drive_function+0xfc>)
 8023b92:	789b      	ldrb	r3, [r3, #2]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	d008      	beq.n	8023baa <ams_main_drive_function+0xca>
       ams_outputs.drive_complete=0;
 8023b98:	4b10      	ldr	r3, [pc, #64]	; (8023bdc <ams_main_drive_function+0xfc>)
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	709a      	strb	r2, [r3, #2]
       timer_r2 = 0;
 8023b9e:	4b0c      	ldr	r3, [pc, #48]	; (8023bd0 <ams_main_drive_function+0xf0>)
 8023ba0:	f04f 0200 	mov.w	r2, #0
 8023ba4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8023ba6:	2328      	movs	r3, #40	; 0x28
 8023ba8:	e00b      	b.n	8023bc2 <ams_main_drive_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 8023baa:	4b0a      	ldr	r3, [pc, #40]	; (8023bd4 <ams_main_drive_function+0xf4>)
 8023bac:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023bb0:	4b07      	ldr	r3, [pc, #28]	; (8023bd0 <ams_main_drive_function+0xf0>)
 8023bb2:	edd3 7a00 	vldr	s15, [r3]
 8023bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023bba:	4b05      	ldr	r3, [pc, #20]	; (8023bd0 <ams_main_drive_function+0xf0>)
 8023bbc:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_DRIVE;
 8023bc0:	2312      	movs	r3, #18
}
 8023bc2:	4618      	mov	r0, r3
 8023bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8023bc6:	bf00      	nop
 8023bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8023bcc:	3f50624d 	.word	0x3f50624d
 8023bd0:	2000192c 	.word	0x2000192c
 8023bd4:	2001bfe0 	.word	0x2001bfe0
 8023bd8:	20001922 	.word	0x20001922
 8023bdc:	2001c040 	.word	0x2001c040

08023be0 <ams_main_precharge_charge_close_air_minus_function>:

ams_state_t ams_main_precharge_charge_close_air_minus_function() {
 8023be0:	b480      	push	{r7}
 8023be2:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_minus_closed) {
 8023be4:	4b1d      	ldr	r3, [pc, #116]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023be6:	edd3 7a00 	vldr	s15, [r3]
 8023bea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bf6:	d50c      	bpl.n	8023c12 <ams_main_precharge_charge_close_air_minus_function+0x32>
 8023bf8:	4b19      	ldr	r3, [pc, #100]	; (8023c60 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8023bfa:	7a1b      	ldrb	r3, [r3, #8]
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d008      	beq.n	8023c12 <ams_main_precharge_charge_close_air_minus_function+0x32>
       ams_outputs.close_precharge=1;
 8023c00:	4b18      	ldr	r3, [pc, #96]	; (8023c64 <ams_main_precharge_charge_close_air_minus_function+0x84>)
 8023c02:	2201      	movs	r2, #1
 8023c04:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023c06:	4b15      	ldr	r3, [pc, #84]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023c08:	f04f 0200 	mov.w	r2, #0
 8023c0c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023c0e:	231a      	movs	r3, #26
 8023c10:	e01e      	b.n	8023c50 <ams_main_precharge_charge_close_air_minus_function+0x70>
   }

   if((timer_r3 > 2)) {
 8023c12:	4b12      	ldr	r3, [pc, #72]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023c14:	edd3 7a00 	vldr	s15, [r3]
 8023c18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c24:	dd08      	ble.n	8023c38 <ams_main_precharge_charge_close_air_minus_function+0x58>
       ams_outputs.error=122;
 8023c26:	4b0f      	ldr	r3, [pc, #60]	; (8023c64 <ams_main_precharge_charge_close_air_minus_function+0x84>)
 8023c28:	227a      	movs	r2, #122	; 0x7a
 8023c2a:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023c2c:	4b0b      	ldr	r3, [pc, #44]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023c2e:	f04f 0200 	mov.w	r2, #0
 8023c32:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023c34:	231b      	movs	r3, #27
 8023c36:	e00b      	b.n	8023c50 <ams_main_precharge_charge_close_air_minus_function+0x70>
   }

   timer_r3 += ams_inputs.Ts;
 8023c38:	4b09      	ldr	r3, [pc, #36]	; (8023c60 <ams_main_precharge_charge_close_air_minus_function+0x80>)
 8023c3a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023c3e:	4b07      	ldr	r3, [pc, #28]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023c40:	edd3 7a00 	vldr	s15, [r3]
 8023c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c48:	4b04      	ldr	r3, [pc, #16]	; (8023c5c <ams_main_precharge_charge_close_air_minus_function+0x7c>)
 8023c4a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023c4e:	2319      	movs	r3, #25
}
 8023c50:	4618      	mov	r0, r3
 8023c52:	46bd      	mov	sp, r7
 8023c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c58:	4770      	bx	lr
 8023c5a:	bf00      	nop
 8023c5c:	20001930 	.word	0x20001930
 8023c60:	2001bfe0 	.word	0x2001bfe0
 8023c64:	2001c040 	.word	0x2001c040

08023c68 <ams_main_precharge_charge_close_precharge_function>:

ams_state_t ams_main_precharge_charge_close_precharge_function() {
 8023c68:	b480      	push	{r7}
 8023c6a:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.precharge_closed) {
 8023c6c:	4b1c      	ldr	r3, [pc, #112]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023c6e:	edd3 7a00 	vldr	s15, [r3]
 8023c72:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c7e:	d50a      	bpl.n	8023c96 <ams_main_precharge_charge_close_precharge_function+0x2e>
 8023c80:	4b18      	ldr	r3, [pc, #96]	; (8023ce4 <ams_main_precharge_charge_close_precharge_function+0x7c>)
 8023c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023c86:	2b00      	cmp	r3, #0
 8023c88:	d005      	beq.n	8023c96 <ams_main_precharge_charge_close_precharge_function+0x2e>
       timer_r3 = 0;
 8023c8a:	4b15      	ldr	r3, [pc, #84]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023c8c:	f04f 0200 	mov.w	r2, #0
 8023c90:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 8023c92:	231c      	movs	r3, #28
 8023c94:	e01e      	b.n	8023cd4 <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   if((timer_r3 > 2)) {
 8023c96:	4b12      	ldr	r3, [pc, #72]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023c98:	edd3 7a00 	vldr	s15, [r3]
 8023c9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ca8:	dd08      	ble.n	8023cbc <ams_main_precharge_charge_close_precharge_function+0x54>
       ams_outputs.error=123;
 8023caa:	4b0f      	ldr	r3, [pc, #60]	; (8023ce8 <ams_main_precharge_charge_close_precharge_function+0x80>)
 8023cac:	227b      	movs	r2, #123	; 0x7b
 8023cae:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023cb0:	4b0b      	ldr	r3, [pc, #44]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023cb2:	f04f 0200 	mov.w	r2, #0
 8023cb6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023cb8:	231b      	movs	r3, #27
 8023cba:	e00b      	b.n	8023cd4 <ams_main_precharge_charge_close_precharge_function+0x6c>
   }

   timer_r3 += ams_inputs.Ts;
 8023cbc:	4b09      	ldr	r3, [pc, #36]	; (8023ce4 <ams_main_precharge_charge_close_precharge_function+0x7c>)
 8023cbe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023cc2:	4b07      	ldr	r3, [pc, #28]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023cc4:	edd3 7a00 	vldr	s15, [r3]
 8023cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ccc:	4b04      	ldr	r3, [pc, #16]	; (8023ce0 <ams_main_precharge_charge_close_precharge_function+0x78>)
 8023cce:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8023cd2:	231a      	movs	r3, #26
}
 8023cd4:	4618      	mov	r0, r3
 8023cd6:	46bd      	mov	sp, r7
 8023cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cdc:	4770      	bx	lr
 8023cde:	bf00      	nop
 8023ce0:	20001930 	.word	0x20001930
 8023ce4:	2001bfe0 	.word	0x2001bfe0
 8023ce8:	2001c040 	.word	0x2001c040

08023cec <ams_main_precharge_charge_error_function>:

ams_state_t ams_main_precharge_charge_error_function() {
 8023cec:	b480      	push	{r7}
 8023cee:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023cf0:	4b08      	ldr	r3, [pc, #32]	; (8023d14 <ams_main_precharge_charge_error_function+0x28>)
 8023cf2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023cf6:	4b08      	ldr	r3, [pc, #32]	; (8023d18 <ams_main_precharge_charge_error_function+0x2c>)
 8023cf8:	edd3 7a00 	vldr	s15, [r3]
 8023cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d00:	4b05      	ldr	r3, [pc, #20]	; (8023d18 <ams_main_precharge_charge_error_function+0x2c>)
 8023d02:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023d06:	231b      	movs	r3, #27
}
 8023d08:	4618      	mov	r0, r3
 8023d0a:	46bd      	mov	sp, r7
 8023d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d10:	4770      	bx	lr
 8023d12:	bf00      	nop
 8023d14:	2001bfe0 	.word	0x2001bfe0
 8023d18:	20001930 	.word	0x20001930
 8023d1c:	00000000 	.word	0x00000000

08023d20 <ams_main_precharge_charge_wait_function>:

ams_state_t ams_main_precharge_charge_wait_function() {
 8023d20:	b580      	push	{r7, lr}
 8023d22:	af00      	add	r7, sp, #0
   if((timer_r3 > 5)&&(timer_r3 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8023d24:	4b2a      	ldr	r3, [pc, #168]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023d26:	edd3 7a00 	vldr	s15, [r3]
 8023d2a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8023d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d36:	dd26      	ble.n	8023d86 <ams_main_precharge_charge_wait_function+0x66>
 8023d38:	4b25      	ldr	r3, [pc, #148]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023d3a:	edd3 7a00 	vldr	s15, [r3]
 8023d3e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d4a:	d51c      	bpl.n	8023d86 <ams_main_precharge_charge_wait_function+0x66>
 8023d4c:	4b21      	ldr	r3, [pc, #132]	; (8023dd4 <ams_main_precharge_charge_wait_function+0xb4>)
 8023d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023d52:	a31d      	add	r3, pc, #116	; (adr r3, 8023dc8 <ams_main_precharge_charge_wait_function+0xa8>)
 8023d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d58:	f7dc fc40 	bl	80005dc <__aeabi_dmul>
 8023d5c:	4602      	mov	r2, r0
 8023d5e:	460b      	mov	r3, r1
 8023d60:	4610      	mov	r0, r2
 8023d62:	4619      	mov	r1, r3
 8023d64:	4b1b      	ldr	r3, [pc, #108]	; (8023dd4 <ams_main_precharge_charge_wait_function+0xb4>)
 8023d66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023d6a:	f7dc fea9 	bl	8000ac0 <__aeabi_dcmplt>
 8023d6e:	4603      	mov	r3, r0
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d008      	beq.n	8023d86 <ams_main_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8023d74:	4b18      	ldr	r3, [pc, #96]	; (8023dd8 <ams_main_precharge_charge_wait_function+0xb8>)
 8023d76:	2201      	movs	r2, #1
 8023d78:	70da      	strb	r2, [r3, #3]
       timer_r3 = 0;
 8023d7a:	4b15      	ldr	r3, [pc, #84]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023d7c:	f04f 0200 	mov.w	r2, #0
 8023d80:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023d82:	231d      	movs	r3, #29
 8023d84:	e01e      	b.n	8023dc4 <ams_main_precharge_charge_wait_function+0xa4>
   }

   if((timer_r3 > 30)) {
 8023d86:	4b12      	ldr	r3, [pc, #72]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023d88:	edd3 7a00 	vldr	s15, [r3]
 8023d8c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8023d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d98:	dd08      	ble.n	8023dac <ams_main_precharge_charge_wait_function+0x8c>
       ams_outputs.error=124;
 8023d9a:	4b0f      	ldr	r3, [pc, #60]	; (8023dd8 <ams_main_precharge_charge_wait_function+0xb8>)
 8023d9c:	227c      	movs	r2, #124	; 0x7c
 8023d9e:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023da0:	4b0b      	ldr	r3, [pc, #44]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023da2:	f04f 0200 	mov.w	r2, #0
 8023da6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023da8:	231b      	movs	r3, #27
 8023daa:	e00b      	b.n	8023dc4 <ams_main_precharge_charge_wait_function+0xa4>
   }

   timer_r3 += ams_inputs.Ts;
 8023dac:	4b09      	ldr	r3, [pc, #36]	; (8023dd4 <ams_main_precharge_charge_wait_function+0xb4>)
 8023dae:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023db2:	4b07      	ldr	r3, [pc, #28]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023db4:	edd3 7a00 	vldr	s15, [r3]
 8023db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023dbc:	4b04      	ldr	r3, [pc, #16]	; (8023dd0 <ams_main_precharge_charge_wait_function+0xb0>)
 8023dbe:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT;
 8023dc2:	231c      	movs	r3, #28
}
 8023dc4:	4618      	mov	r0, r3
 8023dc6:	bd80      	pop	{r7, pc}
 8023dc8:	66666666 	.word	0x66666666
 8023dcc:	3fee6666 	.word	0x3fee6666
 8023dd0:	20001930 	.word	0x20001930
 8023dd4:	2001bfe0 	.word	0x2001bfe0
 8023dd8:	2001c040 	.word	0x2001c040

08023ddc <ams_main_precharge_charge_close_air_plus_function>:

ams_state_t ams_main_precharge_charge_close_air_plus_function() {
 8023ddc:	b480      	push	{r7}
 8023dde:	af00      	add	r7, sp, #0
   if((timer_r3 < 2)&&ams_inputs.air_plus_closed) {
 8023de0:	4b1d      	ldr	r3, [pc, #116]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023de2:	edd3 7a00 	vldr	s15, [r3]
 8023de6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023df2:	d50d      	bpl.n	8023e10 <ams_main_precharge_charge_close_air_plus_function+0x34>
 8023df4:	4b19      	ldr	r3, [pc, #100]	; (8023e5c <ams_main_precharge_charge_close_air_plus_function+0x80>)
 8023df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	d008      	beq.n	8023e10 <ams_main_precharge_charge_close_air_plus_function+0x34>
       ams_outputs.close_precharge=0;
 8023dfe:	4b18      	ldr	r3, [pc, #96]	; (8023e60 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 8023e00:	2200      	movs	r2, #0
 8023e02:	71da      	strb	r2, [r3, #7]
       timer_r3 = 0;
 8023e04:	4b14      	ldr	r3, [pc, #80]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023e06:	f04f 0200 	mov.w	r2, #0
 8023e0a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023e0c:	231e      	movs	r3, #30
 8023e0e:	e01e      	b.n	8023e4e <ams_main_precharge_charge_close_air_plus_function+0x72>
   }

   if((timer_r3 > 2)) {
 8023e10:	4b11      	ldr	r3, [pc, #68]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023e12:	edd3 7a00 	vldr	s15, [r3]
 8023e16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e22:	dd08      	ble.n	8023e36 <ams_main_precharge_charge_close_air_plus_function+0x5a>
       ams_outputs.error=125;
 8023e24:	4b0e      	ldr	r3, [pc, #56]	; (8023e60 <ams_main_precharge_charge_close_air_plus_function+0x84>)
 8023e26:	227d      	movs	r2, #125	; 0x7d
 8023e28:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023e2a:	4b0b      	ldr	r3, [pc, #44]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023e2c:	f04f 0200 	mov.w	r2, #0
 8023e30:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023e32:	231b      	movs	r3, #27
 8023e34:	e00b      	b.n	8023e4e <ams_main_precharge_charge_close_air_plus_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023e36:	4b09      	ldr	r3, [pc, #36]	; (8023e5c <ams_main_precharge_charge_close_air_plus_function+0x80>)
 8023e38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023e3c:	4b06      	ldr	r3, [pc, #24]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023e3e:	edd3 7a00 	vldr	s15, [r3]
 8023e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e46:	4b04      	ldr	r3, [pc, #16]	; (8023e58 <ams_main_precharge_charge_close_air_plus_function+0x7c>)
 8023e48:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8023e4c:	231d      	movs	r3, #29
}
 8023e4e:	4618      	mov	r0, r3
 8023e50:	46bd      	mov	sp, r7
 8023e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e56:	4770      	bx	lr
 8023e58:	20001930 	.word	0x20001930
 8023e5c:	2001bfe0 	.word	0x2001bfe0
 8023e60:	2001c040 	.word	0x2001c040

08023e64 <ams_main_precharge_charge_open_precharge_function>:

ams_state_t ams_main_precharge_charge_open_precharge_function() {
 8023e64:	b480      	push	{r7}
 8023e66:	af00      	add	r7, sp, #0
   if((timer_r3 > 2)) {
 8023e68:	4b1d      	ldr	r3, [pc, #116]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023e6a:	edd3 7a00 	vldr	s15, [r3]
 8023e6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e7a:	dd08      	ble.n	8023e8e <ams_main_precharge_charge_open_precharge_function+0x2a>
       ams_outputs.error=126;
 8023e7c:	4b19      	ldr	r3, [pc, #100]	; (8023ee4 <ams_main_precharge_charge_open_precharge_function+0x80>)
 8023e7e:	227e      	movs	r2, #126	; 0x7e
 8023e80:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023e82:	4b17      	ldr	r3, [pc, #92]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023e84:	f04f 0200 	mov.w	r2, #0
 8023e88:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023e8a:	231b      	movs	r3, #27
 8023e8c:	e023      	b.n	8023ed6 <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   if((timer_r3 < 2)&&!ams_inputs.precharge_closed) {
 8023e8e:	4b14      	ldr	r3, [pc, #80]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023e90:	edd3 7a00 	vldr	s15, [r3]
 8023e94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ea0:	d50d      	bpl.n	8023ebe <ams_main_precharge_charge_open_precharge_function+0x5a>
 8023ea2:	4b11      	ldr	r3, [pc, #68]	; (8023ee8 <ams_main_precharge_charge_open_precharge_function+0x84>)
 8023ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	d108      	bne.n	8023ebe <ams_main_precharge_charge_open_precharge_function+0x5a>
       ams_outputs.precharge_charge_complete=1;
 8023eac:	4b0d      	ldr	r3, [pc, #52]	; (8023ee4 <ams_main_precharge_charge_open_precharge_function+0x80>)
 8023eae:	2201      	movs	r2, #1
 8023eb0:	715a      	strb	r2, [r3, #5]
       timer_r3 = 0;
 8023eb2:	4b0b      	ldr	r3, [pc, #44]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023eb4:	f04f 0200 	mov.w	r2, #0
 8023eb8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 8023eba:	231f      	movs	r3, #31
 8023ebc:	e00b      	b.n	8023ed6 <ams_main_precharge_charge_open_precharge_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023ebe:	4b0a      	ldr	r3, [pc, #40]	; (8023ee8 <ams_main_precharge_charge_open_precharge_function+0x84>)
 8023ec0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023ec4:	4b06      	ldr	r3, [pc, #24]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023ec6:	edd3 7a00 	vldr	s15, [r3]
 8023eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ece:	4b04      	ldr	r3, [pc, #16]	; (8023ee0 <ams_main_precharge_charge_open_precharge_function+0x7c>)
 8023ed0:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8023ed4:	231e      	movs	r3, #30
}
 8023ed6:	4618      	mov	r0, r3
 8023ed8:	46bd      	mov	sp, r7
 8023eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ede:	4770      	bx	lr
 8023ee0:	20001930 	.word	0x20001930
 8023ee4:	2001c040 	.word	0x2001c040
 8023ee8:	2001bfe0 	.word	0x2001bfe0

08023eec <ams_main_precharge_charge_exit_function>:

ams_state_t ams_main_precharge_charge_exit_function() {
 8023eec:	b480      	push	{r7}
 8023eee:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8023ef0:	4b08      	ldr	r3, [pc, #32]	; (8023f14 <ams_main_precharge_charge_exit_function+0x28>)
 8023ef2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023ef6:	4b08      	ldr	r3, [pc, #32]	; (8023f18 <ams_main_precharge_charge_exit_function+0x2c>)
 8023ef8:	edd3 7a00 	vldr	s15, [r3]
 8023efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f00:	4b05      	ldr	r3, [pc, #20]	; (8023f18 <ams_main_precharge_charge_exit_function+0x2c>)
 8023f02:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT;
 8023f06:	231f      	movs	r3, #31
}
 8023f08:	4618      	mov	r0, r3
 8023f0a:	46bd      	mov	sp, r7
 8023f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f10:	4770      	bx	lr
 8023f12:	bf00      	nop
 8023f14:	2001bfe0 	.word	0x2001bfe0
 8023f18:	20001930 	.word	0x20001930

08023f1c <ams_main_precharge_charge_0_function>:

ams_state_t ams_main_precharge_charge_0_function() {
 8023f1c:	b480      	push	{r7}
 8023f1e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8023f20:	4b04      	ldr	r3, [pc, #16]	; (8023f34 <ams_main_precharge_charge_0_function+0x18>)
 8023f22:	f04f 0200 	mov.w	r2, #0
 8023f26:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023f28:	2321      	movs	r3, #33	; 0x21
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
}
 8023f2a:	4618      	mov	r0, r3
 8023f2c:	46bd      	mov	sp, r7
 8023f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f32:	4770      	bx	lr
 8023f34:	20001930 	.word	0x20001930

08023f38 <ams_main_precharge_charge_wake_charger_function>:

ams_state_t ams_main_precharge_charge_wake_charger_function() {
 8023f38:	b480      	push	{r7}
 8023f3a:	af00      	add	r7, sp, #0
   if((timer_r3 < 10)&&ams_inputs.charger_is_awake) {
 8023f3c:	4b1d      	ldr	r3, [pc, #116]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023f3e:	edd3 7a00 	vldr	s15, [r3]
 8023f42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f4e:	d50d      	bpl.n	8023f6c <ams_main_precharge_charge_wake_charger_function+0x34>
 8023f50:	4b19      	ldr	r3, [pc, #100]	; (8023fb8 <ams_main_precharge_charge_wake_charger_function+0x80>)
 8023f52:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d008      	beq.n	8023f6c <ams_main_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 8023f5a:	4b18      	ldr	r3, [pc, #96]	; (8023fbc <ams_main_precharge_charge_wake_charger_function+0x84>)
 8023f5c:	2201      	movs	r2, #1
 8023f5e:	719a      	strb	r2, [r3, #6]
       timer_r3 = 0;
 8023f60:	4b14      	ldr	r3, [pc, #80]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023f62:	f04f 0200 	mov.w	r2, #0
 8023f66:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8023f68:	2319      	movs	r3, #25
 8023f6a:	e01e      	b.n	8023faa <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r3 > 10)) {
 8023f6c:	4b11      	ldr	r3, [pc, #68]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023f6e:	edd3 7a00 	vldr	s15, [r3]
 8023f72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8023f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f7e:	dd08      	ble.n	8023f92 <ams_main_precharge_charge_wake_charger_function+0x5a>
       ams_outputs.error=121;
 8023f80:	4b0e      	ldr	r3, [pc, #56]	; (8023fbc <ams_main_precharge_charge_wake_charger_function+0x84>)
 8023f82:	2279      	movs	r2, #121	; 0x79
 8023f84:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 8023f86:	4b0b      	ldr	r3, [pc, #44]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023f88:	f04f 0200 	mov.w	r2, #0
 8023f8c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR;
 8023f8e:	231b      	movs	r3, #27
 8023f90:	e00b      	b.n	8023faa <ams_main_precharge_charge_wake_charger_function+0x72>
   }

   timer_r3 += ams_inputs.Ts;
 8023f92:	4b09      	ldr	r3, [pc, #36]	; (8023fb8 <ams_main_precharge_charge_wake_charger_function+0x80>)
 8023f94:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8023f98:	4b06      	ldr	r3, [pc, #24]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023f9a:	edd3 7a00 	vldr	s15, [r3]
 8023f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023fa2:	4b04      	ldr	r3, [pc, #16]	; (8023fb4 <ams_main_precharge_charge_wake_charger_function+0x7c>)
 8023fa4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER;
 8023fa8:	2321      	movs	r3, #33	; 0x21
}
 8023faa:	4618      	mov	r0, r3
 8023fac:	46bd      	mov	sp, r7
 8023fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb2:	4770      	bx	lr
 8023fb4:	20001930 	.word	0x20001930
 8023fb8:	2001bfe0 	.word	0x2001bfe0
 8023fbc:	2001c040 	.word	0x2001c040

08023fc0 <ams_main_precharge_charge_function>:

ams_state_t ams_main_precharge_charge_function() {
 8023fc0:	b5b0      	push	{r4, r5, r7, lr}
 8023fc2:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 8023fc4:	4b4c      	ldr	r3, [pc, #304]	; (80240f8 <ams_main_precharge_charge_function+0x138>)
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	4618      	mov	r0, r3
 8023fca:	f7dc faaf 	bl	800052c <__aeabi_f2d>
 8023fce:	4604      	mov	r4, r0
 8023fd0:	460d      	mov	r5, r1
 8023fd2:	4b4a      	ldr	r3, [pc, #296]	; (80240fc <ams_main_precharge_charge_function+0x13c>)
 8023fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fd6:	4618      	mov	r0, r3
 8023fd8:	f7dc faa8 	bl	800052c <__aeabi_f2d>
 8023fdc:	a344      	add	r3, pc, #272	; (adr r3, 80240f0 <ams_main_precharge_charge_function+0x130>)
 8023fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe2:	f7dc fafb 	bl	80005dc <__aeabi_dmul>
 8023fe6:	4602      	mov	r2, r0
 8023fe8:	460b      	mov	r3, r1
 8023fea:	4620      	mov	r0, r4
 8023fec:	4629      	mov	r1, r5
 8023fee:	f7dc fd67 	bl	8000ac0 <__aeabi_dcmplt>
 8023ff2:	4603      	mov	r3, r0
 8023ff4:	2b00      	cmp	r3, #0
 8023ff6:	d002      	beq.n	8023ffe <ams_main_precharge_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_PRECHARGE_CHARGE_0;
 8023ff8:	4b41      	ldr	r3, [pc, #260]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8023ffa:	2220      	movs	r2, #32
 8023ffc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8023ffe:	4b40      	ldr	r3, [pc, #256]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8024000:	781b      	ldrb	r3, [r3, #0]
 8024002:	3b19      	subs	r3, #25
 8024004:	2b08      	cmp	r3, #8
 8024006:	d854      	bhi.n	80240b2 <ams_main_precharge_charge_function+0xf2>
 8024008:	a201      	add	r2, pc, #4	; (adr r2, 8024010 <ams_main_precharge_charge_function+0x50>)
 802400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802400e:	bf00      	nop
 8024010:	08024035 	.word	0x08024035
 8024014:	08024043 	.word	0x08024043
 8024018:	08024051 	.word	0x08024051
 802401c:	0802405f 	.word	0x0802405f
 8024020:	0802406d 	.word	0x0802406d
 8024024:	0802407b 	.word	0x0802407b
 8024028:	08024089 	.word	0x08024089
 802402c:	08024097 	.word	0x08024097
 8024030:	080240a5 	.word	0x080240a5
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r3 = ams_main_precharge_charge_close_air_minus_function();
 8024034:	f7ff fdd4 	bl	8023be0 <ams_main_precharge_charge_close_air_minus_function>
 8024038:	4603      	mov	r3, r0
 802403a:	461a      	mov	r2, r3
 802403c:	4b30      	ldr	r3, [pc, #192]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 802403e:	701a      	strb	r2, [r3, #0]
           break;
 8024040:	e03a      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r3 = ams_main_precharge_charge_close_precharge_function();
 8024042:	f7ff fe11 	bl	8023c68 <ams_main_precharge_charge_close_precharge_function>
 8024046:	4603      	mov	r3, r0
 8024048:	461a      	mov	r2, r3
 802404a:	4b2d      	ldr	r3, [pc, #180]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 802404c:	701a      	strb	r2, [r3, #0]
           break;
 802404e:	e033      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_ERROR:
           state_r3 = ams_main_precharge_charge_error_function();
 8024050:	f7ff fe4c 	bl	8023cec <ams_main_precharge_charge_error_function>
 8024054:	4603      	mov	r3, r0
 8024056:	461a      	mov	r2, r3
 8024058:	4b29      	ldr	r3, [pc, #164]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 802405a:	701a      	strb	r2, [r3, #0]
           break;
 802405c:	e02c      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAIT:
           state_r3 = ams_main_precharge_charge_wait_function();
 802405e:	f7ff fe5f 	bl	8023d20 <ams_main_precharge_charge_wait_function>
 8024062:	4603      	mov	r3, r0
 8024064:	461a      	mov	r2, r3
 8024066:	4b26      	ldr	r3, [pc, #152]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8024068:	701a      	strb	r2, [r3, #0]
           break;
 802406a:	e025      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r3 = ams_main_precharge_charge_close_air_plus_function();
 802406c:	f7ff feb6 	bl	8023ddc <ams_main_precharge_charge_close_air_plus_function>
 8024070:	4603      	mov	r3, r0
 8024072:	461a      	mov	r2, r3
 8024074:	4b22      	ldr	r3, [pc, #136]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8024076:	701a      	strb	r2, [r3, #0]
           break;
 8024078:	e01e      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r3 = ams_main_precharge_charge_open_precharge_function();
 802407a:	f7ff fef3 	bl	8023e64 <ams_main_precharge_charge_open_precharge_function>
 802407e:	4603      	mov	r3, r0
 8024080:	461a      	mov	r2, r3
 8024082:	4b1f      	ldr	r3, [pc, #124]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8024084:	701a      	strb	r2, [r3, #0]
           break;
 8024086:	e017      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_EXIT:
           state_r3 = ams_main_precharge_charge_exit_function();
 8024088:	f7ff ff30 	bl	8023eec <ams_main_precharge_charge_exit_function>
 802408c:	4603      	mov	r3, r0
 802408e:	461a      	mov	r2, r3
 8024090:	4b1b      	ldr	r3, [pc, #108]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 8024092:	701a      	strb	r2, [r3, #0]
           break;
 8024094:	e010      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_0:
           state_r3 = ams_main_precharge_charge_0_function();
 8024096:	f7ff ff41 	bl	8023f1c <ams_main_precharge_charge_0_function>
 802409a:	4603      	mov	r3, r0
 802409c:	461a      	mov	r2, r3
 802409e:	4b18      	ldr	r3, [pc, #96]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 80240a0:	701a      	strb	r2, [r3, #0]
           break;
 80240a2:	e009      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r3 = ams_main_precharge_charge_wake_charger_function();
 80240a4:	f7ff ff48 	bl	8023f38 <ams_main_precharge_charge_wake_charger_function>
 80240a8:	4603      	mov	r3, r0
 80240aa:	461a      	mov	r2, r3
 80240ac:	4b14      	ldr	r3, [pc, #80]	; (8024100 <ams_main_precharge_charge_function+0x140>)
 80240ae:	701a      	strb	r2, [r3, #0]
           break;
 80240b0:	e002      	b.n	80240b8 <ams_main_precharge_charge_function+0xf8>
       default:
           ams_error();
 80240b2:	f7ff f8e0 	bl	8023276 <ams_error>
           break;
 80240b6:	bf00      	nop
   }

   if(ams_outputs.precharge_charge_complete) {
 80240b8:	4b12      	ldr	r3, [pc, #72]	; (8024104 <ams_main_precharge_charge_function+0x144>)
 80240ba:	795b      	ldrb	r3, [r3, #5]
 80240bc:	2b00      	cmp	r3, #0
 80240be:	d008      	beq.n	80240d2 <ams_main_precharge_charge_function+0x112>
       ams_outputs.precharge_charge_complete=0;
 80240c0:	4b10      	ldr	r3, [pc, #64]	; (8024104 <ams_main_precharge_charge_function+0x144>)
 80240c2:	2200      	movs	r2, #0
 80240c4:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 80240c6:	4b0c      	ldr	r3, [pc, #48]	; (80240f8 <ams_main_precharge_charge_function+0x138>)
 80240c8:	f04f 0200 	mov.w	r2, #0
 80240cc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE;
 80240ce:	2322      	movs	r3, #34	; 0x22
 80240d0:	e00b      	b.n	80240ea <ams_main_precharge_charge_function+0x12a>
   }


   timer_r2 += ams_inputs.Ts;
 80240d2:	4b0a      	ldr	r3, [pc, #40]	; (80240fc <ams_main_precharge_charge_function+0x13c>)
 80240d4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80240d8:	4b07      	ldr	r3, [pc, #28]	; (80240f8 <ams_main_precharge_charge_function+0x138>)
 80240da:	edd3 7a00 	vldr	s15, [r3]
 80240de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80240e2:	4b05      	ldr	r3, [pc, #20]	; (80240f8 <ams_main_precharge_charge_function+0x138>)
 80240e4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 80240e8:	2318      	movs	r3, #24
}
 80240ea:	4618      	mov	r0, r3
 80240ec:	bdb0      	pop	{r4, r5, r7, pc}
 80240ee:	bf00      	nop
 80240f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80240f4:	3f50624d 	.word	0x3f50624d
 80240f8:	2000192c 	.word	0x2000192c
 80240fc:	2001bfe0 	.word	0x2001bfe0
 8024100:	20001922 	.word	0x20001922
 8024104:	2001c040 	.word	0x2001c040

08024108 <ams_main_charge_0_function>:

ams_state_t ams_main_charge_0_function() {
 8024108:	b480      	push	{r7}
 802410a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 802410c:	4b04      	ldr	r3, [pc, #16]	; (8024120 <ams_main_charge_0_function+0x18>)
 802410e:	f04f 0200 	mov.w	r2, #0
 8024112:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_CHARGE;
 8024114:	2324      	movs	r3, #36	; 0x24
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_CHARGE_0;
}
 8024116:	4618      	mov	r0, r3
 8024118:	46bd      	mov	sp, r7
 802411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802411e:	4770      	bx	lr
 8024120:	20001930 	.word	0x20001930
 8024124:	00000000 	.word	0x00000000

08024128 <ams_main_charge_charge_function>:

ams_state_t ams_main_charge_charge_function() {
 8024128:	b580      	push	{r7, lr}
 802412a:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 802412c:	4b16      	ldr	r3, [pc, #88]	; (8024188 <ams_main_charge_charge_function+0x60>)
 802412e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8024132:	a313      	add	r3, pc, #76	; (adr r3, 8024180 <ams_main_charge_charge_function+0x58>)
 8024134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024138:	f7dc fce0 	bl	8000afc <__aeabi_dcmpgt>
 802413c:	4603      	mov	r3, r0
 802413e:	2b00      	cmp	r3, #0
 8024140:	d104      	bne.n	802414c <ams_main_charge_charge_function+0x24>
 8024142:	4b11      	ldr	r3, [pc, #68]	; (8024188 <ams_main_charge_charge_function+0x60>)
 8024144:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8024148:	2b00      	cmp	r3, #0
 802414a:	d108      	bne.n	802415e <ams_main_charge_charge_function+0x36>
       ams_outputs.enable_charger=0;
 802414c:	4b0f      	ldr	r3, [pc, #60]	; (802418c <ams_main_charge_charge_function+0x64>)
 802414e:	2200      	movs	r2, #0
 8024150:	711a      	strb	r2, [r3, #4]
       timer_r3 = 0;
 8024152:	4b0f      	ldr	r3, [pc, #60]	; (8024190 <ams_main_charge_charge_function+0x68>)
 8024154:	f04f 0200 	mov.w	r2, #0
 8024158:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 802415a:	2325      	movs	r3, #37	; 0x25
 802415c:	e00b      	b.n	8024176 <ams_main_charge_charge_function+0x4e>
   }

   timer_r3 += ams_inputs.Ts;
 802415e:	4b0a      	ldr	r3, [pc, #40]	; (8024188 <ams_main_charge_charge_function+0x60>)
 8024160:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024164:	4b0a      	ldr	r3, [pc, #40]	; (8024190 <ams_main_charge_charge_function+0x68>)
 8024166:	edd3 7a00 	vldr	s15, [r3]
 802416a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802416e:	4b08      	ldr	r3, [pc, #32]	; (8024190 <ams_main_charge_charge_function+0x68>)
 8024170:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_CHARGE;
 8024174:	2324      	movs	r3, #36	; 0x24
}
 8024176:	4618      	mov	r0, r3
 8024178:	bd80      	pop	{r7, pc}
 802417a:	bf00      	nop
 802417c:	f3af 8000 	nop.w
 8024180:	9999999a 	.word	0x9999999a
 8024184:	40109999 	.word	0x40109999
 8024188:	2001bfe0 	.word	0x2001bfe0
 802418c:	2001c040 	.word	0x2001c040
 8024190:	20001930 	.word	0x20001930
 8024194:	00000000 	.word	0x00000000

08024198 <ams_main_charge_end_charge_function>:

ams_state_t ams_main_charge_end_charge_function() {
 8024198:	b580      	push	{r7, lr}
 802419a:	af00      	add	r7, sp, #0
   if((timer_r3 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 802419c:	4b30      	ldr	r3, [pc, #192]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 802419e:	edd3 7a00 	vldr	s15, [r3]
 80241a2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80241a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80241aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241ae:	d528      	bpl.n	8024202 <ams_main_charge_end_charge_function+0x6a>
 80241b0:	4b2c      	ldr	r3, [pc, #176]	; (8024264 <ams_main_charge_end_charge_function+0xcc>)
 80241b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80241b6:	4610      	mov	r0, r2
 80241b8:	4619      	mov	r1, r3
 80241ba:	f7dc fd07 	bl	8000bcc <__aeabi_d2f>
 80241be:	ee07 0a90 	vmov	s15, r0
 80241c2:	eef0 7ae7 	vabs.f32	s15, s15
 80241c6:	ee17 0a90 	vmov	r0, s15
 80241ca:	f7dc f9af 	bl	800052c <__aeabi_f2d>
 80241ce:	a322      	add	r3, pc, #136	; (adr r3, 8024258 <ams_main_charge_end_charge_function+0xc0>)
 80241d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241d4:	f7dc fc74 	bl	8000ac0 <__aeabi_dcmplt>
 80241d8:	4603      	mov	r3, r0
 80241da:	2b00      	cmp	r3, #0
 80241dc:	d011      	beq.n	8024202 <ams_main_charge_end_charge_function+0x6a>
       ams_outputs.close_air_plus=0;
 80241de:	4b22      	ldr	r3, [pc, #136]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 80241e0:	2200      	movs	r2, #0
 80241e2:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 80241e4:	4b20      	ldr	r3, [pc, #128]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 80241e6:	2200      	movs	r2, #0
 80241e8:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 80241ea:	4b1f      	ldr	r3, [pc, #124]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 80241ec:	2200      	movs	r2, #0
 80241ee:	71da      	strb	r2, [r3, #7]
       ams_outputs.charge_complete=1;
 80241f0:	4b1d      	ldr	r3, [pc, #116]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 80241f2:	2201      	movs	r2, #1
 80241f4:	705a      	strb	r2, [r3, #1]
       timer_r3 = 0;
 80241f6:	4b1a      	ldr	r3, [pc, #104]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 80241f8:	f04f 0200 	mov.w	r2, #0
 80241fc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_EXIT;
 80241fe:	2326      	movs	r3, #38	; 0x26
 8024200:	e027      	b.n	8024252 <ams_main_charge_end_charge_function+0xba>
   }

   if((timer_r3 > 7)) {
 8024202:	4b17      	ldr	r3, [pc, #92]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 8024204:	edd3 7a00 	vldr	s15, [r3]
 8024208:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 802420c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024214:	dd11      	ble.n	802423a <ams_main_charge_end_charge_function+0xa2>
       ams_outputs.close_air_plus=0;
 8024216:	4b14      	ldr	r3, [pc, #80]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 8024218:	2200      	movs	r2, #0
 802421a:	70da      	strb	r2, [r3, #3]
       ams_outputs.close_air_minus=0;
 802421c:	4b12      	ldr	r3, [pc, #72]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 802421e:	2200      	movs	r2, #0
 8024220:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_precharge=0;
 8024222:	4b11      	ldr	r3, [pc, #68]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 8024224:	2200      	movs	r2, #0
 8024226:	71da      	strb	r2, [r3, #7]
       ams_outputs.error=141;
 8024228:	4b0f      	ldr	r3, [pc, #60]	; (8024268 <ams_main_charge_end_charge_function+0xd0>)
 802422a:	228d      	movs	r2, #141	; 0x8d
 802422c:	721a      	strb	r2, [r3, #8]
       timer_r3 = 0;
 802422e:	4b0c      	ldr	r3, [pc, #48]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 8024230:	f04f 0200 	mov.w	r2, #0
 8024234:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 8024236:	2327      	movs	r3, #39	; 0x27
 8024238:	e00b      	b.n	8024252 <ams_main_charge_end_charge_function+0xba>
   }

   timer_r3 += ams_inputs.Ts;
 802423a:	4b0a      	ldr	r3, [pc, #40]	; (8024264 <ams_main_charge_end_charge_function+0xcc>)
 802423c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024240:	4b07      	ldr	r3, [pc, #28]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 8024242:	edd3 7a00 	vldr	s15, [r3]
 8024246:	ee77 7a27 	vadd.f32	s15, s14, s15
 802424a:	4b05      	ldr	r3, [pc, #20]	; (8024260 <ams_main_charge_end_charge_function+0xc8>)
 802424c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_END_CHARGE;
 8024250:	2325      	movs	r3, #37	; 0x25
}
 8024252:	4618      	mov	r0, r3
 8024254:	bd80      	pop	{r7, pc}
 8024256:	bf00      	nop
 8024258:	d2f1a9fc 	.word	0xd2f1a9fc
 802425c:	3f50624d 	.word	0x3f50624d
 8024260:	20001930 	.word	0x20001930
 8024264:	2001bfe0 	.word	0x2001bfe0
 8024268:	2001c040 	.word	0x2001c040

0802426c <ams_main_charge_exit_function>:

ams_state_t ams_main_charge_exit_function() {
 802426c:	b480      	push	{r7}
 802426e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 8024270:	4b08      	ldr	r3, [pc, #32]	; (8024294 <ams_main_charge_exit_function+0x28>)
 8024272:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024276:	4b08      	ldr	r3, [pc, #32]	; (8024298 <ams_main_charge_exit_function+0x2c>)
 8024278:	edd3 7a00 	vldr	s15, [r3]
 802427c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024280:	4b05      	ldr	r3, [pc, #20]	; (8024298 <ams_main_charge_exit_function+0x2c>)
 8024282:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_EXIT;
 8024286:	2326      	movs	r3, #38	; 0x26
}
 8024288:	4618      	mov	r0, r3
 802428a:	46bd      	mov	sp, r7
 802428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024290:	4770      	bx	lr
 8024292:	bf00      	nop
 8024294:	2001bfe0 	.word	0x2001bfe0
 8024298:	20001930 	.word	0x20001930

0802429c <ams_main_charge_force_quit_function>:

ams_state_t ams_main_charge_force_quit_function() {
 802429c:	b480      	push	{r7}
 802429e:	af00      	add	r7, sp, #0
   timer_r3 += ams_inputs.Ts;
 80242a0:	4b08      	ldr	r3, [pc, #32]	; (80242c4 <ams_main_charge_force_quit_function+0x28>)
 80242a2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80242a6:	4b08      	ldr	r3, [pc, #32]	; (80242c8 <ams_main_charge_force_quit_function+0x2c>)
 80242a8:	edd3 7a00 	vldr	s15, [r3]
 80242ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80242b0:	4b05      	ldr	r3, [pc, #20]	; (80242c8 <ams_main_charge_force_quit_function+0x2c>)
 80242b2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE_FORCE_QUIT;
 80242b6:	2327      	movs	r3, #39	; 0x27
}
 80242b8:	4618      	mov	r0, r3
 80242ba:	46bd      	mov	sp, r7
 80242bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242c0:	4770      	bx	lr
 80242c2:	bf00      	nop
 80242c4:	2001bfe0 	.word	0x2001bfe0
 80242c8:	20001930 	.word	0x20001930
 80242cc:	00000000 	.word	0x00000000

080242d0 <ams_main_charge_function>:

ams_state_t ams_main_charge_function() {
 80242d0:	b5b0      	push	{r4, r5, r7, lr}
 80242d2:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 80242d4:	4b3a      	ldr	r3, [pc, #232]	; (80243c0 <ams_main_charge_function+0xf0>)
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	4618      	mov	r0, r3
 80242da:	f7dc f927 	bl	800052c <__aeabi_f2d>
 80242de:	4604      	mov	r4, r0
 80242e0:	460d      	mov	r5, r1
 80242e2:	4b38      	ldr	r3, [pc, #224]	; (80243c4 <ams_main_charge_function+0xf4>)
 80242e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80242e6:	4618      	mov	r0, r3
 80242e8:	f7dc f920 	bl	800052c <__aeabi_f2d>
 80242ec:	a332      	add	r3, pc, #200	; (adr r3, 80243b8 <ams_main_charge_function+0xe8>)
 80242ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242f2:	f7dc f973 	bl	80005dc <__aeabi_dmul>
 80242f6:	4602      	mov	r2, r0
 80242f8:	460b      	mov	r3, r1
 80242fa:	4620      	mov	r0, r4
 80242fc:	4629      	mov	r1, r5
 80242fe:	f7dc fbdf 	bl	8000ac0 <__aeabi_dcmplt>
 8024302:	4603      	mov	r3, r0
 8024304:	2b00      	cmp	r3, #0
 8024306:	d002      	beq.n	802430e <ams_main_charge_function+0x3e>
       state_r3 = STATE_AMS_MAIN_CHARGE_0;
 8024308:	4b2f      	ldr	r3, [pc, #188]	; (80243c8 <ams_main_charge_function+0xf8>)
 802430a:	2223      	movs	r2, #35	; 0x23
 802430c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 802430e:	4b2e      	ldr	r3, [pc, #184]	; (80243c8 <ams_main_charge_function+0xf8>)
 8024310:	781b      	ldrb	r3, [r3, #0]
 8024312:	3b23      	subs	r3, #35	; 0x23
 8024314:	2b04      	cmp	r3, #4
 8024316:	d830      	bhi.n	802437a <ams_main_charge_function+0xaa>
 8024318:	a201      	add	r2, pc, #4	; (adr r2, 8024320 <ams_main_charge_function+0x50>)
 802431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802431e:	bf00      	nop
 8024320:	08024335 	.word	0x08024335
 8024324:	08024343 	.word	0x08024343
 8024328:	08024351 	.word	0x08024351
 802432c:	0802435f 	.word	0x0802435f
 8024330:	0802436d 	.word	0x0802436d
       case STATE_AMS_MAIN_CHARGE_0:
           state_r3 = ams_main_charge_0_function();
 8024334:	f7ff fee8 	bl	8024108 <ams_main_charge_0_function>
 8024338:	4603      	mov	r3, r0
 802433a:	461a      	mov	r2, r3
 802433c:	4b22      	ldr	r3, [pc, #136]	; (80243c8 <ams_main_charge_function+0xf8>)
 802433e:	701a      	strb	r2, [r3, #0]
           break;
 8024340:	e01e      	b.n	8024380 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_CHARGE:
           state_r3 = ams_main_charge_charge_function();
 8024342:	f7ff fef1 	bl	8024128 <ams_main_charge_charge_function>
 8024346:	4603      	mov	r3, r0
 8024348:	461a      	mov	r2, r3
 802434a:	4b1f      	ldr	r3, [pc, #124]	; (80243c8 <ams_main_charge_function+0xf8>)
 802434c:	701a      	strb	r2, [r3, #0]
           break;
 802434e:	e017      	b.n	8024380 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_END_CHARGE:
           state_r3 = ams_main_charge_end_charge_function();
 8024350:	f7ff ff22 	bl	8024198 <ams_main_charge_end_charge_function>
 8024354:	4603      	mov	r3, r0
 8024356:	461a      	mov	r2, r3
 8024358:	4b1b      	ldr	r3, [pc, #108]	; (80243c8 <ams_main_charge_function+0xf8>)
 802435a:	701a      	strb	r2, [r3, #0]
           break;
 802435c:	e010      	b.n	8024380 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_EXIT:
           state_r3 = ams_main_charge_exit_function();
 802435e:	f7ff ff85 	bl	802426c <ams_main_charge_exit_function>
 8024362:	4603      	mov	r3, r0
 8024364:	461a      	mov	r2, r3
 8024366:	4b18      	ldr	r3, [pc, #96]	; (80243c8 <ams_main_charge_function+0xf8>)
 8024368:	701a      	strb	r2, [r3, #0]
           break;
 802436a:	e009      	b.n	8024380 <ams_main_charge_function+0xb0>
       case STATE_AMS_MAIN_CHARGE_FORCE_QUIT:
           state_r3 = ams_main_charge_force_quit_function();
 802436c:	f7ff ff96 	bl	802429c <ams_main_charge_force_quit_function>
 8024370:	4603      	mov	r3, r0
 8024372:	461a      	mov	r2, r3
 8024374:	4b14      	ldr	r3, [pc, #80]	; (80243c8 <ams_main_charge_function+0xf8>)
 8024376:	701a      	strb	r2, [r3, #0]
           break;
 8024378:	e002      	b.n	8024380 <ams_main_charge_function+0xb0>
       default:
           ams_error();
 802437a:	f7fe ff7c 	bl	8023276 <ams_error>
           break;
 802437e:	bf00      	nop
   }

   if(ams_outputs.charge_complete) {
 8024380:	4b12      	ldr	r3, [pc, #72]	; (80243cc <ams_main_charge_function+0xfc>)
 8024382:	785b      	ldrb	r3, [r3, #1]
 8024384:	2b00      	cmp	r3, #0
 8024386:	d008      	beq.n	802439a <ams_main_charge_function+0xca>
       ams_outputs.charge_complete=0;
 8024388:	4b10      	ldr	r3, [pc, #64]	; (80243cc <ams_main_charge_function+0xfc>)
 802438a:	2200      	movs	r2, #0
 802438c:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 802438e:	4b0c      	ldr	r3, [pc, #48]	; (80243c0 <ams_main_charge_function+0xf0>)
 8024390:	f04f 0200 	mov.w	r2, #0
 8024394:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8024396:	2328      	movs	r3, #40	; 0x28
 8024398:	e00b      	b.n	80243b2 <ams_main_charge_function+0xe2>
   }


   timer_r2 += ams_inputs.Ts;
 802439a:	4b0a      	ldr	r3, [pc, #40]	; (80243c4 <ams_main_charge_function+0xf4>)
 802439c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80243a0:	4b07      	ldr	r3, [pc, #28]	; (80243c0 <ams_main_charge_function+0xf0>)
 80243a2:	edd3 7a00 	vldr	s15, [r3]
 80243a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80243aa:	4b05      	ldr	r3, [pc, #20]	; (80243c0 <ams_main_charge_function+0xf0>)
 80243ac:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_CHARGE;
 80243b0:	2322      	movs	r3, #34	; 0x22
}
 80243b2:	4618      	mov	r0, r3
 80243b4:	bdb0      	pop	{r4, r5, r7, pc}
 80243b6:	bf00      	nop
 80243b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80243bc:	3f50624d 	.word	0x3f50624d
 80243c0:	2000192c 	.word	0x2000192c
 80243c4:	2001bfe0 	.word	0x2001bfe0
 80243c8:	20001922 	.word	0x20001922
 80243cc:	2001c040 	.word	0x2001c040

080243d0 <ams_main_idle_function>:

ams_state_t ams_main_idle_function() {
 80243d0:	b580      	push	{r7, lr}
 80243d2:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive) {
 80243d4:	4b26      	ldr	r3, [pc, #152]	; (8024470 <ams_main_idle_function+0xa0>)
 80243d6:	7e1b      	ldrb	r3, [r3, #24]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d00a      	beq.n	80243f2 <ams_main_idle_function+0x22>
 80243dc:	4b24      	ldr	r3, [pc, #144]	; (8024470 <ams_main_idle_function+0xa0>)
 80243de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d005      	beq.n	80243f2 <ams_main_idle_function+0x22>
       timer_r2 = 0;
 80243e6:	4b23      	ldr	r3, [pc, #140]	; (8024474 <ams_main_idle_function+0xa4>)
 80243e8:	f04f 0200 	mov.w	r2, #0
 80243ec:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_DRIVE;
 80243ee:	2308      	movs	r3, #8
 80243f0:	e037      	b.n	8024462 <ams_main_idle_function+0x92>
   }

   if(ams_inputs.SC&&ams_inputs.charge) {
 80243f2:	4b1f      	ldr	r3, [pc, #124]	; (8024470 <ams_main_idle_function+0xa0>)
 80243f4:	7e1b      	ldrb	r3, [r3, #24]
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	d00d      	beq.n	8024416 <ams_main_idle_function+0x46>
 80243fa:	4b1d      	ldr	r3, [pc, #116]	; (8024470 <ams_main_idle_function+0xa0>)
 80243fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8024400:	2b00      	cmp	r3, #0
 8024402:	d008      	beq.n	8024416 <ams_main_idle_function+0x46>
       ams_outputs.enable_charger=1;
 8024404:	4b1c      	ldr	r3, [pc, #112]	; (8024478 <ams_main_idle_function+0xa8>)
 8024406:	2201      	movs	r2, #1
 8024408:	711a      	strb	r2, [r3, #4]
       timer_r2 = 0;
 802440a:	4b1a      	ldr	r3, [pc, #104]	; (8024474 <ams_main_idle_function+0xa4>)
 802440c:	f04f 0200 	mov.w	r2, #0
 8024410:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_PRECHARGE_CHARGE;
 8024412:	2318      	movs	r3, #24
 8024414:	e025      	b.n	8024462 <ams_main_idle_function+0x92>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)) {
 8024416:	4b16      	ldr	r3, [pc, #88]	; (8024470 <ams_main_idle_function+0xa0>)
 8024418:	7e1b      	ldrb	r3, [r3, #24]
 802441a:	2b00      	cmp	r3, #0
 802441c:	d115      	bne.n	802444a <ams_main_idle_function+0x7a>
 802441e:	4b14      	ldr	r3, [pc, #80]	; (8024470 <ams_main_idle_function+0xa0>)
 8024420:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8024424:	2b00      	cmp	r3, #0
 8024426:	d010      	beq.n	802444a <ams_main_idle_function+0x7a>
 8024428:	4b11      	ldr	r3, [pc, #68]	; (8024470 <ams_main_idle_function+0xa0>)
 802442a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802442e:	a30e      	add	r3, pc, #56	; (adr r3, 8024468 <ams_main_idle_function+0x98>)
 8024430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024434:	f7dc fb62 	bl	8000afc <__aeabi_dcmpgt>
 8024438:	4603      	mov	r3, r0
 802443a:	2b00      	cmp	r3, #0
 802443c:	d005      	beq.n	802444a <ams_main_idle_function+0x7a>
       timer_r2 = 0;
 802443e:	4b0d      	ldr	r3, [pc, #52]	; (8024474 <ams_main_idle_function+0xa4>)
 8024440:	f04f 0200 	mov.w	r2, #0
 8024444:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE;
 8024446:	2329      	movs	r3, #41	; 0x29
 8024448:	e00b      	b.n	8024462 <ams_main_idle_function+0x92>
   }

   timer_r2 += ams_inputs.Ts;
 802444a:	4b09      	ldr	r3, [pc, #36]	; (8024470 <ams_main_idle_function+0xa0>)
 802444c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024450:	4b08      	ldr	r3, [pc, #32]	; (8024474 <ams_main_idle_function+0xa4>)
 8024452:	edd3 7a00 	vldr	s15, [r3]
 8024456:	ee77 7a27 	vadd.f32	s15, s14, s15
 802445a:	4b06      	ldr	r3, [pc, #24]	; (8024474 <ams_main_idle_function+0xa4>)
 802445c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_IDLE;
 8024460:	2328      	movs	r3, #40	; 0x28
}
 8024462:	4618      	mov	r0, r3
 8024464:	bd80      	pop	{r7, pc}
 8024466:	bf00      	nop
 8024468:	47ae147b 	.word	0x47ae147b
 802446c:	3f847ae1 	.word	0x3f847ae1
 8024470:	2001bfe0 	.word	0x2001bfe0
 8024474:	2000192c 	.word	0x2000192c
 8024478:	2001c040 	.word	0x2001c040

0802447c <ams_main_balance_0_function>:

ams_state_t ams_main_balance_0_function() {
 802447c:	b480      	push	{r7}
 802447e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r3 = 0;
 8024480:	4b04      	ldr	r3, [pc, #16]	; (8024494 <ams_main_balance_0_function+0x18>)
 8024482:	f04f 0200 	mov.w	r2, #0
 8024486:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 8024488:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_0;
}
 802448a:	4618      	mov	r0, r3
 802448c:	46bd      	mov	sp, r7
 802448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024492:	4770      	bx	lr
 8024494:	20001930 	.word	0x20001930

08024498 <ams_main_balance_balance_function>:

ams_state_t ams_main_balance_balance_function() {
 8024498:	b580      	push	{r7, lr}
 802449a:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 802449c:	f7f1 fcbe 	bl	8015e1c <do_cell_balancing>
       timer_r3 = 0;
 80244a0:	4b03      	ldr	r3, [pc, #12]	; (80244b0 <ams_main_balance_balance_function+0x18>)
 80244a2:	f04f 0200 	mov.w	r2, #0
 80244a6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_WAIT;
 80244a8:	232c      	movs	r3, #44	; 0x2c
   }

   timer_r3 += ams_inputs.Ts;
   return STATE_AMS_MAIN_BALANCE_BALANCE;
}
 80244aa:	4618      	mov	r0, r3
 80244ac:	bd80      	pop	{r7, pc}
 80244ae:	bf00      	nop
 80244b0:	20001930 	.word	0x20001930

080244b4 <ams_main_balance_wait_function>:

ams_state_t ams_main_balance_wait_function() {
 80244b4:	b480      	push	{r7}
 80244b6:	af00      	add	r7, sp, #0
   if((timer_r3 > 60)) {
 80244b8:	4b10      	ldr	r3, [pc, #64]	; (80244fc <ams_main_balance_wait_function+0x48>)
 80244ba:	edd3 7a00 	vldr	s15, [r3]
 80244be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8024500 <ams_main_balance_wait_function+0x4c>
 80244c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80244c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244ca:	dd05      	ble.n	80244d8 <ams_main_balance_wait_function+0x24>
       timer_r3 = 0;
 80244cc:	4b0b      	ldr	r3, [pc, #44]	; (80244fc <ams_main_balance_wait_function+0x48>)
 80244ce:	f04f 0200 	mov.w	r2, #0
 80244d2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_BALANCE_BALANCE;
 80244d4:	232b      	movs	r3, #43	; 0x2b
 80244d6:	e00b      	b.n	80244f0 <ams_main_balance_wait_function+0x3c>
   }

   timer_r3 += ams_inputs.Ts;
 80244d8:	4b0a      	ldr	r3, [pc, #40]	; (8024504 <ams_main_balance_wait_function+0x50>)
 80244da:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80244de:	4b07      	ldr	r3, [pc, #28]	; (80244fc <ams_main_balance_wait_function+0x48>)
 80244e0:	edd3 7a00 	vldr	s15, [r3]
 80244e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80244e8:	4b04      	ldr	r3, [pc, #16]	; (80244fc <ams_main_balance_wait_function+0x48>)
 80244ea:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE_WAIT;
 80244ee:	232c      	movs	r3, #44	; 0x2c
}
 80244f0:	4618      	mov	r0, r3
 80244f2:	46bd      	mov	sp, r7
 80244f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244f8:	4770      	bx	lr
 80244fa:	bf00      	nop
 80244fc:	20001930 	.word	0x20001930
 8024500:	42700000 	.word	0x42700000
 8024504:	2001bfe0 	.word	0x2001bfe0

08024508 <ams_main_balance_function>:

ams_state_t ams_main_balance_function() {
 8024508:	b5b0      	push	{r4, r5, r7, lr}
 802450a:	af00      	add	r7, sp, #0
   if(timer_r2 < 0.001*ams_inputs.Ts) {
 802450c:	4b38      	ldr	r3, [pc, #224]	; (80245f0 <ams_main_balance_function+0xe8>)
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	4618      	mov	r0, r3
 8024512:	f7dc f80b 	bl	800052c <__aeabi_f2d>
 8024516:	4604      	mov	r4, r0
 8024518:	460d      	mov	r5, r1
 802451a:	4b36      	ldr	r3, [pc, #216]	; (80245f4 <ams_main_balance_function+0xec>)
 802451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802451e:	4618      	mov	r0, r3
 8024520:	f7dc f804 	bl	800052c <__aeabi_f2d>
 8024524:	a32e      	add	r3, pc, #184	; (adr r3, 80245e0 <ams_main_balance_function+0xd8>)
 8024526:	e9d3 2300 	ldrd	r2, r3, [r3]
 802452a:	f7dc f857 	bl	80005dc <__aeabi_dmul>
 802452e:	4602      	mov	r2, r0
 8024530:	460b      	mov	r3, r1
 8024532:	4620      	mov	r0, r4
 8024534:	4629      	mov	r1, r5
 8024536:	f7dc fac3 	bl	8000ac0 <__aeabi_dcmplt>
 802453a:	4603      	mov	r3, r0
 802453c:	2b00      	cmp	r3, #0
 802453e:	d002      	beq.n	8024546 <ams_main_balance_function+0x3e>
       state_r3 = STATE_AMS_MAIN_BALANCE_0;
 8024540:	4b2d      	ldr	r3, [pc, #180]	; (80245f8 <ams_main_balance_function+0xf0>)
 8024542:	222a      	movs	r2, #42	; 0x2a
 8024544:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r3) {
 8024546:	4b2c      	ldr	r3, [pc, #176]	; (80245f8 <ams_main_balance_function+0xf0>)
 8024548:	781b      	ldrb	r3, [r3, #0]
 802454a:	2b2c      	cmp	r3, #44	; 0x2c
 802454c:	d014      	beq.n	8024578 <ams_main_balance_function+0x70>
 802454e:	2b2c      	cmp	r3, #44	; 0x2c
 8024550:	dc19      	bgt.n	8024586 <ams_main_balance_function+0x7e>
 8024552:	2b2a      	cmp	r3, #42	; 0x2a
 8024554:	d002      	beq.n	802455c <ams_main_balance_function+0x54>
 8024556:	2b2b      	cmp	r3, #43	; 0x2b
 8024558:	d007      	beq.n	802456a <ams_main_balance_function+0x62>
 802455a:	e014      	b.n	8024586 <ams_main_balance_function+0x7e>
       case STATE_AMS_MAIN_BALANCE_0:
           state_r3 = ams_main_balance_0_function();
 802455c:	f7ff ff8e 	bl	802447c <ams_main_balance_0_function>
 8024560:	4603      	mov	r3, r0
 8024562:	461a      	mov	r2, r3
 8024564:	4b24      	ldr	r3, [pc, #144]	; (80245f8 <ams_main_balance_function+0xf0>)
 8024566:	701a      	strb	r2, [r3, #0]
           break;
 8024568:	e010      	b.n	802458c <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_BALANCE:
           state_r3 = ams_main_balance_balance_function();
 802456a:	f7ff ff95 	bl	8024498 <ams_main_balance_balance_function>
 802456e:	4603      	mov	r3, r0
 8024570:	461a      	mov	r2, r3
 8024572:	4b21      	ldr	r3, [pc, #132]	; (80245f8 <ams_main_balance_function+0xf0>)
 8024574:	701a      	strb	r2, [r3, #0]
           break;
 8024576:	e009      	b.n	802458c <ams_main_balance_function+0x84>
       case STATE_AMS_MAIN_BALANCE_WAIT:
           state_r3 = ams_main_balance_wait_function();
 8024578:	f7ff ff9c 	bl	80244b4 <ams_main_balance_wait_function>
 802457c:	4603      	mov	r3, r0
 802457e:	461a      	mov	r2, r3
 8024580:	4b1d      	ldr	r3, [pc, #116]	; (80245f8 <ams_main_balance_function+0xf0>)
 8024582:	701a      	strb	r2, [r3, #0]
           break;
 8024584:	e002      	b.n	802458c <ams_main_balance_function+0x84>
       default:
           ams_error();
 8024586:	f7fe fe76 	bl	8023276 <ams_error>
           break;
 802458a:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 802458c:	4b19      	ldr	r3, [pc, #100]	; (80245f4 <ams_main_balance_function+0xec>)
 802458e:	7e1b      	ldrb	r3, [r3, #24]
 8024590:	2b00      	cmp	r3, #0
 8024592:	d10f      	bne.n	80245b4 <ams_main_balance_function+0xac>
 8024594:	4b17      	ldr	r3, [pc, #92]	; (80245f4 <ams_main_balance_function+0xec>)
 8024596:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 802459a:	2b00      	cmp	r3, #0
 802459c:	d00a      	beq.n	80245b4 <ams_main_balance_function+0xac>
 802459e:	4b15      	ldr	r3, [pc, #84]	; (80245f4 <ams_main_balance_function+0xec>)
 80245a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80245a4:	a310      	add	r3, pc, #64	; (adr r3, 80245e8 <ams_main_balance_function+0xe0>)
 80245a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245aa:	f7dc fa89 	bl	8000ac0 <__aeabi_dcmplt>
 80245ae:	4603      	mov	r3, r0
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	d007      	beq.n	80245c4 <ams_main_balance_function+0xbc>
       end_cell_balancing();
 80245b4:	f7f1 fc6e 	bl	8015e94 <end_cell_balancing>
       timer_r2 = 0;
 80245b8:	4b0d      	ldr	r3, [pc, #52]	; (80245f0 <ams_main_balance_function+0xe8>)
 80245ba:	f04f 0200 	mov.w	r2, #0
 80245be:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 80245c0:	2328      	movs	r3, #40	; 0x28
 80245c2:	e00b      	b.n	80245dc <ams_main_balance_function+0xd4>
   }


   timer_r2 += ams_inputs.Ts;
 80245c4:	4b0b      	ldr	r3, [pc, #44]	; (80245f4 <ams_main_balance_function+0xec>)
 80245c6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80245ca:	4b09      	ldr	r3, [pc, #36]	; (80245f0 <ams_main_balance_function+0xe8>)
 80245cc:	edd3 7a00 	vldr	s15, [r3]
 80245d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80245d4:	4b06      	ldr	r3, [pc, #24]	; (80245f0 <ams_main_balance_function+0xe8>)
 80245d6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN_BALANCE;
 80245da:	2329      	movs	r3, #41	; 0x29
}
 80245dc:	4618      	mov	r0, r3
 80245de:	bdb0      	pop	{r4, r5, r7, pc}
 80245e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80245e4:	3f50624d 	.word	0x3f50624d
 80245e8:	47ae147b 	.word	0x47ae147b
 80245ec:	3f747ae1 	.word	0x3f747ae1
 80245f0:	2000192c 	.word	0x2000192c
 80245f4:	2001bfe0 	.word	0x2001bfe0
 80245f8:	20001922 	.word	0x20001922

080245fc <ams_main_0_function>:

ams_state_t ams_main_0_function() {
 80245fc:	b480      	push	{r7}
 80245fe:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8024600:	4b04      	ldr	r3, [pc, #16]	; (8024614 <ams_main_0_function+0x18>)
 8024602:	f04f 0200 	mov.w	r2, #0
 8024606:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN_IDLE;
 8024608:	2328      	movs	r3, #40	; 0x28
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_MAIN_0;
}
 802460a:	4618      	mov	r0, r3
 802460c:	46bd      	mov	sp, r7
 802460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024612:	4770      	bx	lr
 8024614:	2000192c 	.word	0x2000192c

08024618 <ams_main_function>:

ams_state_t ams_main_function() {
 8024618:	b5b0      	push	{r4, r5, r7, lr}
 802461a:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 802461c:	4b66      	ldr	r3, [pc, #408]	; (80247b8 <ams_main_function+0x1a0>)
 802461e:	681b      	ldr	r3, [r3, #0]
 8024620:	4618      	mov	r0, r3
 8024622:	f7db ff83 	bl	800052c <__aeabi_f2d>
 8024626:	4604      	mov	r4, r0
 8024628:	460d      	mov	r5, r1
 802462a:	4b64      	ldr	r3, [pc, #400]	; (80247bc <ams_main_function+0x1a4>)
 802462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802462e:	4618      	mov	r0, r3
 8024630:	f7db ff7c 	bl	800052c <__aeabi_f2d>
 8024634:	a35e      	add	r3, pc, #376	; (adr r3, 80247b0 <ams_main_function+0x198>)
 8024636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802463a:	f7db ffcf 	bl	80005dc <__aeabi_dmul>
 802463e:	4602      	mov	r2, r0
 8024640:	460b      	mov	r3, r1
 8024642:	4620      	mov	r0, r4
 8024644:	4629      	mov	r1, r5
 8024646:	f7dc fa3b 	bl	8000ac0 <__aeabi_dcmplt>
 802464a:	4603      	mov	r3, r0
 802464c:	2b00      	cmp	r3, #0
 802464e:	d002      	beq.n	8024656 <ams_main_function+0x3e>
       state_r2 = STATE_AMS_MAIN_0;
 8024650:	4b5b      	ldr	r3, [pc, #364]	; (80247c0 <ams_main_function+0x1a8>)
 8024652:	222d      	movs	r2, #45	; 0x2d
 8024654:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8024656:	4b5a      	ldr	r3, [pc, #360]	; (80247c0 <ams_main_function+0x1a8>)
 8024658:	781b      	ldrb	r3, [r3, #0]
 802465a:	3b08      	subs	r3, #8
 802465c:	2b25      	cmp	r3, #37	; 0x25
 802465e:	f200 8080 	bhi.w	8024762 <ams_main_function+0x14a>
 8024662:	a201      	add	r2, pc, #4	; (adr r2, 8024668 <ams_main_function+0x50>)
 8024664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024668:	08024701 	.word	0x08024701
 802466c:	08024763 	.word	0x08024763
 8024670:	08024763 	.word	0x08024763
 8024674:	08024763 	.word	0x08024763
 8024678:	08024763 	.word	0x08024763
 802467c:	08024763 	.word	0x08024763
 8024680:	08024763 	.word	0x08024763
 8024684:	08024763 	.word	0x08024763
 8024688:	08024763 	.word	0x08024763
 802468c:	08024763 	.word	0x08024763
 8024690:	0802470f 	.word	0x0802470f
 8024694:	08024763 	.word	0x08024763
 8024698:	08024763 	.word	0x08024763
 802469c:	08024763 	.word	0x08024763
 80246a0:	08024763 	.word	0x08024763
 80246a4:	08024763 	.word	0x08024763
 80246a8:	0802471d 	.word	0x0802471d
 80246ac:	08024763 	.word	0x08024763
 80246b0:	08024763 	.word	0x08024763
 80246b4:	08024763 	.word	0x08024763
 80246b8:	08024763 	.word	0x08024763
 80246bc:	08024763 	.word	0x08024763
 80246c0:	08024763 	.word	0x08024763
 80246c4:	08024763 	.word	0x08024763
 80246c8:	08024763 	.word	0x08024763
 80246cc:	08024763 	.word	0x08024763
 80246d0:	0802472b 	.word	0x0802472b
 80246d4:	08024763 	.word	0x08024763
 80246d8:	08024763 	.word	0x08024763
 80246dc:	08024763 	.word	0x08024763
 80246e0:	08024763 	.word	0x08024763
 80246e4:	08024763 	.word	0x08024763
 80246e8:	08024739 	.word	0x08024739
 80246ec:	08024747 	.word	0x08024747
 80246f0:	08024763 	.word	0x08024763
 80246f4:	08024763 	.word	0x08024763
 80246f8:	08024763 	.word	0x08024763
 80246fc:	08024755 	.word	0x08024755
       case STATE_AMS_MAIN_PRECHARGE_DRIVE:
           state_r2 = ams_main_precharge_drive_function();
 8024700:	f7ff f86e 	bl	80237e0 <ams_main_precharge_drive_function>
 8024704:	4603      	mov	r3, r0
 8024706:	461a      	mov	r2, r3
 8024708:	4b2d      	ldr	r3, [pc, #180]	; (80247c0 <ams_main_function+0x1a8>)
 802470a:	701a      	strb	r2, [r3, #0]
           break;
 802470c:	e02c      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_DRIVE:
           state_r2 = ams_main_drive_function();
 802470e:	f7ff f9e7 	bl	8023ae0 <ams_main_drive_function>
 8024712:	4603      	mov	r3, r0
 8024714:	461a      	mov	r2, r3
 8024716:	4b2a      	ldr	r3, [pc, #168]	; (80247c0 <ams_main_function+0x1a8>)
 8024718:	701a      	strb	r2, [r3, #0]
           break;
 802471a:	e025      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_PRECHARGE_CHARGE:
           state_r2 = ams_main_precharge_charge_function();
 802471c:	f7ff fc50 	bl	8023fc0 <ams_main_precharge_charge_function>
 8024720:	4603      	mov	r3, r0
 8024722:	461a      	mov	r2, r3
 8024724:	4b26      	ldr	r3, [pc, #152]	; (80247c0 <ams_main_function+0x1a8>)
 8024726:	701a      	strb	r2, [r3, #0]
           break;
 8024728:	e01e      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_CHARGE:
           state_r2 = ams_main_charge_function();
 802472a:	f7ff fdd1 	bl	80242d0 <ams_main_charge_function>
 802472e:	4603      	mov	r3, r0
 8024730:	461a      	mov	r2, r3
 8024732:	4b23      	ldr	r3, [pc, #140]	; (80247c0 <ams_main_function+0x1a8>)
 8024734:	701a      	strb	r2, [r3, #0]
           break;
 8024736:	e017      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_IDLE:
           state_r2 = ams_main_idle_function();
 8024738:	f7ff fe4a 	bl	80243d0 <ams_main_idle_function>
 802473c:	4603      	mov	r3, r0
 802473e:	461a      	mov	r2, r3
 8024740:	4b1f      	ldr	r3, [pc, #124]	; (80247c0 <ams_main_function+0x1a8>)
 8024742:	701a      	strb	r2, [r3, #0]
           break;
 8024744:	e010      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_BALANCE:
           state_r2 = ams_main_balance_function();
 8024746:	f7ff fedf 	bl	8024508 <ams_main_balance_function>
 802474a:	4603      	mov	r3, r0
 802474c:	461a      	mov	r2, r3
 802474e:	4b1c      	ldr	r3, [pc, #112]	; (80247c0 <ams_main_function+0x1a8>)
 8024750:	701a      	strb	r2, [r3, #0]
           break;
 8024752:	e009      	b.n	8024768 <ams_main_function+0x150>
       case STATE_AMS_MAIN_0:
           state_r2 = ams_main_0_function();
 8024754:	f7ff ff52 	bl	80245fc <ams_main_0_function>
 8024758:	4603      	mov	r3, r0
 802475a:	461a      	mov	r2, r3
 802475c:	4b18      	ldr	r3, [pc, #96]	; (80247c0 <ams_main_function+0x1a8>)
 802475e:	701a      	strb	r2, [r3, #0]
           break;
 8024760:	e002      	b.n	8024768 <ams_main_function+0x150>
       default:
           ams_error();
 8024762:	f7fe fd88 	bl	8023276 <ams_error>
           break;
 8024766:	bf00      	nop
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 8024768:	4b16      	ldr	r3, [pc, #88]	; (80247c4 <ams_main_function+0x1ac>)
 802476a:	7a1b      	ldrb	r3, [r3, #8]
 802476c:	2b00      	cmp	r3, #0
 802476e:	d109      	bne.n	8024784 <ams_main_function+0x16c>
 8024770:	4b12      	ldr	r3, [pc, #72]	; (80247bc <ams_main_function+0x1a4>)
 8024772:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8024776:	2b00      	cmp	r3, #0
 8024778:	d104      	bne.n	8024784 <ams_main_function+0x16c>
 802477a:	4b10      	ldr	r3, [pc, #64]	; (80247bc <ams_main_function+0x1a4>)
 802477c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8024780:	2b00      	cmp	r3, #0
 8024782:	d005      	beq.n	8024790 <ams_main_function+0x178>
       timer_r1 = 0;
 8024784:	4b0c      	ldr	r3, [pc, #48]	; (80247b8 <ams_main_function+0x1a0>)
 8024786:	f04f 0200 	mov.w	r2, #0
 802478a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 802478c:	2302      	movs	r3, #2
 802478e:	e00b      	b.n	80247a8 <ams_main_function+0x190>
   }


   timer_r1 += ams_inputs.Ts;
 8024790:	4b0a      	ldr	r3, [pc, #40]	; (80247bc <ams_main_function+0x1a4>)
 8024792:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024796:	4b08      	ldr	r3, [pc, #32]	; (80247b8 <ams_main_function+0x1a0>)
 8024798:	edd3 7a00 	vldr	s15, [r3]
 802479c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80247a0:	4b05      	ldr	r3, [pc, #20]	; (80247b8 <ams_main_function+0x1a0>)
 80247a2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_MAIN;
 80247a6:	2307      	movs	r3, #7
}
 80247a8:	4618      	mov	r0, r3
 80247aa:	bdb0      	pop	{r4, r5, r7, pc}
 80247ac:	f3af 8000 	nop.w
 80247b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80247b4:	3f50624d 	.word	0x3f50624d
 80247b8:	20001928 	.word	0x20001928
 80247bc:	2001bfe0 	.word	0x2001bfe0
 80247c0:	20001921 	.word	0x20001921
 80247c4:	2001c040 	.word	0x2001c040

080247c8 <ams_0_function>:

ams_state_t ams_0_function() {
 80247c8:	b480      	push	{r7}
 80247ca:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 80247cc:	4b04      	ldr	r3, [pc, #16]	; (80247e0 <ams_0_function+0x18>)
 80247ce:	f04f 0200 	mov.w	r2, #0
 80247d2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_MAIN;
 80247d4:	2307      	movs	r3, #7
   }

   timer_r1 += ams_inputs.Ts;
   return STATE_AMS_0;
}
 80247d6:	4618      	mov	r0, r3
 80247d8:	46bd      	mov	sp, r7
 80247da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247de:	4770      	bx	lr
 80247e0:	20001928 	.word	0x20001928
 80247e4:	00000000 	.word	0x00000000

080247e8 <ams_function>:

ams_state_t ams_function() {
 80247e8:	b5b0      	push	{r4, r5, r7, lr}
 80247ea:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_inputs.Ts) {
 80247ec:	4b28      	ldr	r3, [pc, #160]	; (8024890 <ams_function+0xa8>)
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	4618      	mov	r0, r3
 80247f2:	f7db fe9b 	bl	800052c <__aeabi_f2d>
 80247f6:	4604      	mov	r4, r0
 80247f8:	460d      	mov	r5, r1
 80247fa:	4b26      	ldr	r3, [pc, #152]	; (8024894 <ams_function+0xac>)
 80247fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80247fe:	4618      	mov	r0, r3
 8024800:	f7db fe94 	bl	800052c <__aeabi_f2d>
 8024804:	a320      	add	r3, pc, #128	; (adr r3, 8024888 <ams_function+0xa0>)
 8024806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802480a:	f7db fee7 	bl	80005dc <__aeabi_dmul>
 802480e:	4602      	mov	r2, r0
 8024810:	460b      	mov	r3, r1
 8024812:	4620      	mov	r0, r4
 8024814:	4629      	mov	r1, r5
 8024816:	f7dc f953 	bl	8000ac0 <__aeabi_dcmplt>
 802481a:	4603      	mov	r3, r0
 802481c:	2b00      	cmp	r3, #0
 802481e:	d002      	beq.n	8024826 <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 8024820:	4b1d      	ldr	r3, [pc, #116]	; (8024898 <ams_function+0xb0>)
 8024822:	222e      	movs	r2, #46	; 0x2e
 8024824:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 8024826:	4b1c      	ldr	r3, [pc, #112]	; (8024898 <ams_function+0xb0>)
 8024828:	781b      	ldrb	r3, [r3, #0]
 802482a:	2b2e      	cmp	r3, #46	; 0x2e
 802482c:	d014      	beq.n	8024858 <ams_function+0x70>
 802482e:	2b2e      	cmp	r3, #46	; 0x2e
 8024830:	dc19      	bgt.n	8024866 <ams_function+0x7e>
 8024832:	2b02      	cmp	r3, #2
 8024834:	d002      	beq.n	802483c <ams_function+0x54>
 8024836:	2b07      	cmp	r3, #7
 8024838:	d007      	beq.n	802484a <ams_function+0x62>
 802483a:	e014      	b.n	8024866 <ams_function+0x7e>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 802483c:	f7fe fd90 	bl	8023360 <ams_error_function>
 8024840:	4603      	mov	r3, r0
 8024842:	461a      	mov	r2, r3
 8024844:	4b14      	ldr	r3, [pc, #80]	; (8024898 <ams_function+0xb0>)
 8024846:	701a      	strb	r2, [r3, #0]
           break;
 8024848:	e010      	b.n	802486c <ams_function+0x84>
       case STATE_AMS_MAIN:
           state_r1 = ams_main_function();
 802484a:	f7ff fee5 	bl	8024618 <ams_main_function>
 802484e:	4603      	mov	r3, r0
 8024850:	461a      	mov	r2, r3
 8024852:	4b11      	ldr	r3, [pc, #68]	; (8024898 <ams_function+0xb0>)
 8024854:	701a      	strb	r2, [r3, #0]
           break;
 8024856:	e009      	b.n	802486c <ams_function+0x84>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 8024858:	f7ff ffb6 	bl	80247c8 <ams_0_function>
 802485c:	4603      	mov	r3, r0
 802485e:	461a      	mov	r2, r3
 8024860:	4b0d      	ldr	r3, [pc, #52]	; (8024898 <ams_function+0xb0>)
 8024862:	701a      	strb	r2, [r3, #0]
           break;
 8024864:	e002      	b.n	802486c <ams_function+0x84>
       default:
           ams_error();
 8024866:	f7fe fd06 	bl	8023276 <ams_error>
           break;
 802486a:	bf00      	nop
   }

   timer_r0 += ams_inputs.Ts;
 802486c:	4b09      	ldr	r3, [pc, #36]	; (8024894 <ams_function+0xac>)
 802486e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8024872:	4b07      	ldr	r3, [pc, #28]	; (8024890 <ams_function+0xa8>)
 8024874:	edd3 7a00 	vldr	s15, [r3]
 8024878:	ee77 7a27 	vadd.f32	s15, s14, s15
 802487c:	4b04      	ldr	r3, [pc, #16]	; (8024890 <ams_function+0xa8>)
 802487e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 8024882:	2301      	movs	r3, #1
}
 8024884:	4618      	mov	r0, r3
 8024886:	bdb0      	pop	{r4, r5, r7, pc}
 8024888:	d2f1a9fc 	.word	0xd2f1a9fc
 802488c:	3f50624d 	.word	0x3f50624d
 8024890:	20001924 	.word	0x20001924
 8024894:	2001bfe0 	.word	0x2001bfe0
 8024898:	20001920 	.word	0x20001920

0802489c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802489c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80248d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80248a0:	480d      	ldr	r0, [pc, #52]	; (80248d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80248a2:	490e      	ldr	r1, [pc, #56]	; (80248dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80248a4:	4a0e      	ldr	r2, [pc, #56]	; (80248e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80248a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80248a8:	e002      	b.n	80248b0 <LoopCopyDataInit>

080248aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80248aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80248ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80248ae:	3304      	adds	r3, #4

080248b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80248b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80248b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80248b4:	d3f9      	bcc.n	80248aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80248b6:	4a0b      	ldr	r2, [pc, #44]	; (80248e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80248b8:	4c0b      	ldr	r4, [pc, #44]	; (80248e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80248ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80248bc:	e001      	b.n	80248c2 <LoopFillZerobss>

080248be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80248be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80248c0:	3204      	adds	r2, #4

080248c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80248c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80248c4:	d3fb      	bcc.n	80248be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80248c6:	f7f3 fa5f 	bl	8017d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80248ca:	f009 ffef 	bl	802e8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80248ce:	f7f1 fc8b 	bl	80161e8 <main>
  bx  lr    
 80248d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80248d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80248d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80248dc:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 80248e0:	0802fd98 	.word	0x0802fd98
  ldr r2, =_sbss
 80248e4:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 80248e8:	2001ee5c 	.word	0x2001ee5c

080248ec <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80248ec:	e7fe      	b.n	80248ec <CAN1_SCE_IRQHandler>
	...

080248f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80248f0:	b580      	push	{r7, lr}
 80248f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80248f4:	4b0e      	ldr	r3, [pc, #56]	; (8024930 <HAL_Init+0x40>)
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	4a0d      	ldr	r2, [pc, #52]	; (8024930 <HAL_Init+0x40>)
 80248fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80248fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8024900:	4b0b      	ldr	r3, [pc, #44]	; (8024930 <HAL_Init+0x40>)
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	4a0a      	ldr	r2, [pc, #40]	; (8024930 <HAL_Init+0x40>)
 8024906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802490a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802490c:	4b08      	ldr	r3, [pc, #32]	; (8024930 <HAL_Init+0x40>)
 802490e:	681b      	ldr	r3, [r3, #0]
 8024910:	4a07      	ldr	r2, [pc, #28]	; (8024930 <HAL_Init+0x40>)
 8024912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024918:	2003      	movs	r0, #3
 802491a:	f001 fd28 	bl	802636e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802491e:	200f      	movs	r0, #15
 8024920:	f7f3 f942 	bl	8017ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8024924:	f7f3 f914 	bl	8017b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8024928:	2300      	movs	r3, #0
}
 802492a:	4618      	mov	r0, r3
 802492c:	bd80      	pop	{r7, pc}
 802492e:	bf00      	nop
 8024930:	40023c00 	.word	0x40023c00

08024934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024934:	b480      	push	{r7}
 8024936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8024938:	4b06      	ldr	r3, [pc, #24]	; (8024954 <HAL_IncTick+0x20>)
 802493a:	781b      	ldrb	r3, [r3, #0]
 802493c:	461a      	mov	r2, r3
 802493e:	4b06      	ldr	r3, [pc, #24]	; (8024958 <HAL_IncTick+0x24>)
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	4413      	add	r3, r2
 8024944:	4a04      	ldr	r2, [pc, #16]	; (8024958 <HAL_IncTick+0x24>)
 8024946:	6013      	str	r3, [r2, #0]
}
 8024948:	bf00      	nop
 802494a:	46bd      	mov	sp, r7
 802494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024950:	4770      	bx	lr
 8024952:	bf00      	nop
 8024954:	2000143c 	.word	0x2000143c
 8024958:	2001ed64 	.word	0x2001ed64

0802495c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802495c:	b480      	push	{r7}
 802495e:	af00      	add	r7, sp, #0
  return uwTick;
 8024960:	4b03      	ldr	r3, [pc, #12]	; (8024970 <HAL_GetTick+0x14>)
 8024962:	681b      	ldr	r3, [r3, #0]
}
 8024964:	4618      	mov	r0, r3
 8024966:	46bd      	mov	sp, r7
 8024968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802496c:	4770      	bx	lr
 802496e:	bf00      	nop
 8024970:	2001ed64 	.word	0x2001ed64

08024974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8024974:	b580      	push	{r7, lr}
 8024976:	b084      	sub	sp, #16
 8024978:	af00      	add	r7, sp, #0
 802497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802497c:	f7ff ffee 	bl	802495c <HAL_GetTick>
 8024980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8024986:	68fb      	ldr	r3, [r7, #12]
 8024988:	f1b3 3fff 	cmp.w	r3, #4294967295
 802498c:	d005      	beq.n	802499a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802498e:	4b0a      	ldr	r3, [pc, #40]	; (80249b8 <HAL_Delay+0x44>)
 8024990:	781b      	ldrb	r3, [r3, #0]
 8024992:	461a      	mov	r2, r3
 8024994:	68fb      	ldr	r3, [r7, #12]
 8024996:	4413      	add	r3, r2
 8024998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802499a:	bf00      	nop
 802499c:	f7ff ffde 	bl	802495c <HAL_GetTick>
 80249a0:	4602      	mov	r2, r0
 80249a2:	68bb      	ldr	r3, [r7, #8]
 80249a4:	1ad3      	subs	r3, r2, r3
 80249a6:	68fa      	ldr	r2, [r7, #12]
 80249a8:	429a      	cmp	r2, r3
 80249aa:	d8f7      	bhi.n	802499c <HAL_Delay+0x28>
  {
  }
}
 80249ac:	bf00      	nop
 80249ae:	bf00      	nop
 80249b0:	3710      	adds	r7, #16
 80249b2:	46bd      	mov	sp, r7
 80249b4:	bd80      	pop	{r7, pc}
 80249b6:	bf00      	nop
 80249b8:	2000143c 	.word	0x2000143c

080249bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80249bc:	b580      	push	{r7, lr}
 80249be:	b084      	sub	sp, #16
 80249c0:	af00      	add	r7, sp, #0
 80249c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80249c4:	2300      	movs	r3, #0
 80249c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d101      	bne.n	80249d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80249ce:	2301      	movs	r3, #1
 80249d0:	e033      	b.n	8024a3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80249d2:	687b      	ldr	r3, [r7, #4]
 80249d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d109      	bne.n	80249ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80249da:	6878      	ldr	r0, [r7, #4]
 80249dc:	f7f0 fb00 	bl	8014fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80249e0:	687b      	ldr	r3, [r7, #4]
 80249e2:	2200      	movs	r2, #0
 80249e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	2200      	movs	r2, #0
 80249ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249f2:	f003 0310 	and.w	r3, r3, #16
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	d118      	bne.n	8024a2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8024a02:	f023 0302 	bic.w	r3, r3, #2
 8024a06:	f043 0202 	orr.w	r2, r3, #2
 8024a0a:	687b      	ldr	r3, [r7, #4]
 8024a0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8024a0e:	6878      	ldr	r0, [r7, #4]
 8024a10:	f000 fba8 	bl	8025164 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	2200      	movs	r2, #0
 8024a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a1e:	f023 0303 	bic.w	r3, r3, #3
 8024a22:	f043 0201 	orr.w	r2, r3, #1
 8024a26:	687b      	ldr	r3, [r7, #4]
 8024a28:	641a      	str	r2, [r3, #64]	; 0x40
 8024a2a:	e001      	b.n	8024a30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8024a2c:	2301      	movs	r3, #1
 8024a2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	2200      	movs	r2, #0
 8024a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8024a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8024a3a:	4618      	mov	r0, r3
 8024a3c:	3710      	adds	r7, #16
 8024a3e:	46bd      	mov	sp, r7
 8024a40:	bd80      	pop	{r7, pc}

08024a42 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8024a42:	b580      	push	{r7, lr}
 8024a44:	b084      	sub	sp, #16
 8024a46:	af00      	add	r7, sp, #0
 8024a48:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8024a4a:	2300      	movs	r3, #0
 8024a4c:	60fb      	str	r3, [r7, #12]
 8024a4e:	2300      	movs	r3, #0
 8024a50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	681b      	ldr	r3, [r3, #0]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	f003 0302 	and.w	r3, r3, #2
 8024a5c:	2b02      	cmp	r3, #2
 8024a5e:	bf0c      	ite	eq
 8024a60:	2301      	moveq	r3, #1
 8024a62:	2300      	movne	r3, #0
 8024a64:	b2db      	uxtb	r3, r3
 8024a66:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8024a68:	687b      	ldr	r3, [r7, #4]
 8024a6a:	681b      	ldr	r3, [r3, #0]
 8024a6c:	685b      	ldr	r3, [r3, #4]
 8024a6e:	f003 0320 	and.w	r3, r3, #32
 8024a72:	2b20      	cmp	r3, #32
 8024a74:	bf0c      	ite	eq
 8024a76:	2301      	moveq	r3, #1
 8024a78:	2300      	movne	r3, #0
 8024a7a:	b2db      	uxtb	r3, r3
 8024a7c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	d049      	beq.n	8024b18 <HAL_ADC_IRQHandler+0xd6>
 8024a84:	68bb      	ldr	r3, [r7, #8]
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	d046      	beq.n	8024b18 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a8e:	f003 0310 	and.w	r3, r3, #16
 8024a92:	2b00      	cmp	r3, #0
 8024a94:	d105      	bne.n	8024aa2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8024a96:	687b      	ldr	r3, [r7, #4]
 8024a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8024a9e:	687b      	ldr	r3, [r7, #4]
 8024aa0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	689b      	ldr	r3, [r3, #8]
 8024aa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	d12b      	bne.n	8024b08 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	d127      	bne.n	8024b08 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024ab8:	687b      	ldr	r3, [r7, #4]
 8024aba:	681b      	ldr	r3, [r3, #0]
 8024abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024abe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d006      	beq.n	8024ad4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	681b      	ldr	r3, [r3, #0]
 8024aca:	689b      	ldr	r3, [r3, #8]
 8024acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024ad0:	2b00      	cmp	r3, #0
 8024ad2:	d119      	bne.n	8024b08 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	681b      	ldr	r3, [r3, #0]
 8024ad8:	685a      	ldr	r2, [r3, #4]
 8024ada:	687b      	ldr	r3, [r7, #4]
 8024adc:	681b      	ldr	r3, [r3, #0]
 8024ade:	f022 0220 	bic.w	r2, r2, #32
 8024ae2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024af0:	687b      	ldr	r3, [r7, #4]
 8024af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	d105      	bne.n	8024b08 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b00:	f043 0201 	orr.w	r2, r3, #1
 8024b04:	687b      	ldr	r3, [r7, #4]
 8024b06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8024b08:	6878      	ldr	r0, [r7, #4]
 8024b0a:	f7f0 fcd1 	bl	80154b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8024b0e:	687b      	ldr	r3, [r7, #4]
 8024b10:	681b      	ldr	r3, [r3, #0]
 8024b12:	f06f 0212 	mvn.w	r2, #18
 8024b16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8024b18:	687b      	ldr	r3, [r7, #4]
 8024b1a:	681b      	ldr	r3, [r3, #0]
 8024b1c:	681b      	ldr	r3, [r3, #0]
 8024b1e:	f003 0304 	and.w	r3, r3, #4
 8024b22:	2b04      	cmp	r3, #4
 8024b24:	bf0c      	ite	eq
 8024b26:	2301      	moveq	r3, #1
 8024b28:	2300      	movne	r3, #0
 8024b2a:	b2db      	uxtb	r3, r3
 8024b2c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	685b      	ldr	r3, [r3, #4]
 8024b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024b38:	2b80      	cmp	r3, #128	; 0x80
 8024b3a:	bf0c      	ite	eq
 8024b3c:	2301      	moveq	r3, #1
 8024b3e:	2300      	movne	r3, #0
 8024b40:	b2db      	uxtb	r3, r3
 8024b42:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d057      	beq.n	8024bfa <HAL_ADC_IRQHandler+0x1b8>
 8024b4a:	68bb      	ldr	r3, [r7, #8]
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d054      	beq.n	8024bfa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b54:	f003 0310 	and.w	r3, r3, #16
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	d105      	bne.n	8024b68 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	681b      	ldr	r3, [r3, #0]
 8024b6c:	689b      	ldr	r3, [r3, #8]
 8024b6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8024b72:	2b00      	cmp	r3, #0
 8024b74:	d139      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	681b      	ldr	r3, [r3, #0]
 8024b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024b7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	d006      	beq.n	8024b92 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8024b84:	687b      	ldr	r3, [r7, #4]
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	689b      	ldr	r3, [r3, #8]
 8024b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8024b8e:	2b00      	cmp	r3, #0
 8024b90:	d12b      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	681b      	ldr	r3, [r3, #0]
 8024b96:	685b      	ldr	r3, [r3, #4]
 8024b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d124      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	689b      	ldr	r3, [r3, #8]
 8024ba6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8024baa:	2b00      	cmp	r3, #0
 8024bac:	d11d      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8024bae:	687b      	ldr	r3, [r7, #4]
 8024bb0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8024bb2:	2b00      	cmp	r3, #0
 8024bb4:	d119      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8024bb6:	687b      	ldr	r3, [r7, #4]
 8024bb8:	681b      	ldr	r3, [r3, #0]
 8024bba:	685a      	ldr	r2, [r3, #4]
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	681b      	ldr	r3, [r3, #0]
 8024bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024bc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024bce:	687b      	ldr	r3, [r7, #4]
 8024bd0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	d105      	bne.n	8024bea <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024be2:	f043 0201 	orr.w	r2, r3, #1
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8024bea:	6878      	ldr	r0, [r7, #4]
 8024bec:	f000 fc38 	bl	8025460 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	681b      	ldr	r3, [r3, #0]
 8024bf4:	f06f 020c 	mvn.w	r2, #12
 8024bf8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	681b      	ldr	r3, [r3, #0]
 8024bfe:	681b      	ldr	r3, [r3, #0]
 8024c00:	f003 0301 	and.w	r3, r3, #1
 8024c04:	2b01      	cmp	r3, #1
 8024c06:	bf0c      	ite	eq
 8024c08:	2301      	moveq	r3, #1
 8024c0a:	2300      	movne	r3, #0
 8024c0c:	b2db      	uxtb	r3, r3
 8024c0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	685b      	ldr	r3, [r3, #4]
 8024c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024c1a:	2b40      	cmp	r3, #64	; 0x40
 8024c1c:	bf0c      	ite	eq
 8024c1e:	2301      	moveq	r3, #1
 8024c20:	2300      	movne	r3, #0
 8024c22:	b2db      	uxtb	r3, r3
 8024c24:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8024c26:	68fb      	ldr	r3, [r7, #12]
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d017      	beq.n	8024c5c <HAL_ADC_IRQHandler+0x21a>
 8024c2c:	68bb      	ldr	r3, [r7, #8]
 8024c2e:	2b00      	cmp	r3, #0
 8024c30:	d014      	beq.n	8024c5c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8024c32:	687b      	ldr	r3, [r7, #4]
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	681b      	ldr	r3, [r3, #0]
 8024c38:	f003 0301 	and.w	r3, r3, #1
 8024c3c:	2b01      	cmp	r3, #1
 8024c3e:	d10d      	bne.n	8024c5c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024c44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8024c4c:	6878      	ldr	r0, [r7, #4]
 8024c4e:	f000 f953 	bl	8024ef8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8024c52:	687b      	ldr	r3, [r7, #4]
 8024c54:	681b      	ldr	r3, [r3, #0]
 8024c56:	f06f 0201 	mvn.w	r2, #1
 8024c5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	f003 0320 	and.w	r3, r3, #32
 8024c66:	2b20      	cmp	r3, #32
 8024c68:	bf0c      	ite	eq
 8024c6a:	2301      	moveq	r3, #1
 8024c6c:	2300      	movne	r3, #0
 8024c6e:	b2db      	uxtb	r3, r3
 8024c70:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8024c72:	687b      	ldr	r3, [r7, #4]
 8024c74:	681b      	ldr	r3, [r3, #0]
 8024c76:	685b      	ldr	r3, [r3, #4]
 8024c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024c80:	bf0c      	ite	eq
 8024c82:	2301      	moveq	r3, #1
 8024c84:	2300      	movne	r3, #0
 8024c86:	b2db      	uxtb	r3, r3
 8024c88:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8024c8a:	68fb      	ldr	r3, [r7, #12]
 8024c8c:	2b00      	cmp	r3, #0
 8024c8e:	d015      	beq.n	8024cbc <HAL_ADC_IRQHandler+0x27a>
 8024c90:	68bb      	ldr	r3, [r7, #8]
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	d012      	beq.n	8024cbc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8024c96:	687b      	ldr	r3, [r7, #4]
 8024c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c9a:	f043 0202 	orr.w	r2, r3, #2
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	f06f 0220 	mvn.w	r2, #32
 8024caa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8024cac:	6878      	ldr	r0, [r7, #4]
 8024cae:	f000 f92d 	bl	8024f0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	681b      	ldr	r3, [r3, #0]
 8024cb6:	f06f 0220 	mvn.w	r2, #32
 8024cba:	601a      	str	r2, [r3, #0]
  }
}
 8024cbc:	bf00      	nop
 8024cbe:	3710      	adds	r7, #16
 8024cc0:	46bd      	mov	sp, r7
 8024cc2:	bd80      	pop	{r7, pc}

08024cc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8024cc4:	b580      	push	{r7, lr}
 8024cc6:	b086      	sub	sp, #24
 8024cc8:	af00      	add	r7, sp, #0
 8024cca:	60f8      	str	r0, [r7, #12]
 8024ccc:	60b9      	str	r1, [r7, #8]
 8024cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8024cd0:	2300      	movs	r3, #0
 8024cd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024cd4:	68fb      	ldr	r3, [r7, #12]
 8024cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024cda:	2b01      	cmp	r3, #1
 8024cdc:	d101      	bne.n	8024ce2 <HAL_ADC_Start_DMA+0x1e>
 8024cde:	2302      	movs	r3, #2
 8024ce0:	e0e9      	b.n	8024eb6 <HAL_ADC_Start_DMA+0x1f2>
 8024ce2:	68fb      	ldr	r3, [r7, #12]
 8024ce4:	2201      	movs	r2, #1
 8024ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8024cea:	68fb      	ldr	r3, [r7, #12]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	689b      	ldr	r3, [r3, #8]
 8024cf0:	f003 0301 	and.w	r3, r3, #1
 8024cf4:	2b01      	cmp	r3, #1
 8024cf6:	d018      	beq.n	8024d2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8024cf8:	68fb      	ldr	r3, [r7, #12]
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	689a      	ldr	r2, [r3, #8]
 8024cfe:	68fb      	ldr	r3, [r7, #12]
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	f042 0201 	orr.w	r2, r2, #1
 8024d06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8024d08:	4b6d      	ldr	r3, [pc, #436]	; (8024ec0 <HAL_ADC_Start_DMA+0x1fc>)
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	4a6d      	ldr	r2, [pc, #436]	; (8024ec4 <HAL_ADC_Start_DMA+0x200>)
 8024d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8024d12:	0c9a      	lsrs	r2, r3, #18
 8024d14:	4613      	mov	r3, r2
 8024d16:	005b      	lsls	r3, r3, #1
 8024d18:	4413      	add	r3, r2
 8024d1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024d1c:	e002      	b.n	8024d24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8024d1e:	693b      	ldr	r3, [r7, #16]
 8024d20:	3b01      	subs	r3, #1
 8024d22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024d24:	693b      	ldr	r3, [r7, #16]
 8024d26:	2b00      	cmp	r3, #0
 8024d28:	d1f9      	bne.n	8024d1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8024d2a:	68fb      	ldr	r3, [r7, #12]
 8024d2c:	681b      	ldr	r3, [r3, #0]
 8024d2e:	689b      	ldr	r3, [r3, #8]
 8024d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024d38:	d107      	bne.n	8024d4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8024d3a:	68fb      	ldr	r3, [r7, #12]
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	689a      	ldr	r2, [r3, #8]
 8024d40:	68fb      	ldr	r3, [r7, #12]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024d48:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8024d4a:	68fb      	ldr	r3, [r7, #12]
 8024d4c:	681b      	ldr	r3, [r3, #0]
 8024d4e:	689b      	ldr	r3, [r3, #8]
 8024d50:	f003 0301 	and.w	r3, r3, #1
 8024d54:	2b01      	cmp	r3, #1
 8024d56:	f040 80a1 	bne.w	8024e9c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8024d5a:	68fb      	ldr	r3, [r7, #12]
 8024d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024d5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8024d62:	f023 0301 	bic.w	r3, r3, #1
 8024d66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024d6a:	68fb      	ldr	r3, [r7, #12]
 8024d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8024d6e:	68fb      	ldr	r3, [r7, #12]
 8024d70:	681b      	ldr	r3, [r3, #0]
 8024d72:	685b      	ldr	r3, [r3, #4]
 8024d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	d007      	beq.n	8024d8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8024d7c:	68fb      	ldr	r3, [r7, #12]
 8024d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8024d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024d88:	68fb      	ldr	r3, [r7, #12]
 8024d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024d8c:	68fb      	ldr	r3, [r7, #12]
 8024d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024d98:	d106      	bne.n	8024da8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8024d9a:	68fb      	ldr	r3, [r7, #12]
 8024d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024d9e:	f023 0206 	bic.w	r2, r3, #6
 8024da2:	68fb      	ldr	r3, [r7, #12]
 8024da4:	645a      	str	r2, [r3, #68]	; 0x44
 8024da6:	e002      	b.n	8024dae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8024da8:	68fb      	ldr	r3, [r7, #12]
 8024daa:	2200      	movs	r2, #0
 8024dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8024dae:	68fb      	ldr	r3, [r7, #12]
 8024db0:	2200      	movs	r2, #0
 8024db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024db6:	4b44      	ldr	r3, [pc, #272]	; (8024ec8 <HAL_ADC_Start_DMA+0x204>)
 8024db8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8024dba:	68fb      	ldr	r3, [r7, #12]
 8024dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024dbe:	4a43      	ldr	r2, [pc, #268]	; (8024ecc <HAL_ADC_Start_DMA+0x208>)
 8024dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024dc6:	4a42      	ldr	r2, [pc, #264]	; (8024ed0 <HAL_ADC_Start_DMA+0x20c>)
 8024dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024dce:	4a41      	ldr	r2, [pc, #260]	; (8024ed4 <HAL_ADC_Start_DMA+0x210>)
 8024dd0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8024dd2:	68fb      	ldr	r3, [r7, #12]
 8024dd4:	681b      	ldr	r3, [r3, #0]
 8024dd6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8024dda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8024ddc:	68fb      	ldr	r3, [r7, #12]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	685a      	ldr	r2, [r3, #4]
 8024de2:	68fb      	ldr	r3, [r7, #12]
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8024dea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8024dec:	68fb      	ldr	r3, [r7, #12]
 8024dee:	681b      	ldr	r3, [r3, #0]
 8024df0:	689a      	ldr	r2, [r3, #8]
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	681b      	ldr	r3, [r3, #0]
 8024df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024dfa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8024dfc:	68fb      	ldr	r3, [r7, #12]
 8024dfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	681b      	ldr	r3, [r3, #0]
 8024e04:	334c      	adds	r3, #76	; 0x4c
 8024e06:	4619      	mov	r1, r3
 8024e08:	68ba      	ldr	r2, [r7, #8]
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	f001 fb92 	bl	8026534 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8024e10:	697b      	ldr	r3, [r7, #20]
 8024e12:	685b      	ldr	r3, [r3, #4]
 8024e14:	f003 031f 	and.w	r3, r3, #31
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	d12a      	bne.n	8024e72 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	681b      	ldr	r3, [r3, #0]
 8024e20:	4a2d      	ldr	r2, [pc, #180]	; (8024ed8 <HAL_ADC_Start_DMA+0x214>)
 8024e22:	4293      	cmp	r3, r2
 8024e24:	d015      	beq.n	8024e52 <HAL_ADC_Start_DMA+0x18e>
 8024e26:	68fb      	ldr	r3, [r7, #12]
 8024e28:	681b      	ldr	r3, [r3, #0]
 8024e2a:	4a2c      	ldr	r2, [pc, #176]	; (8024edc <HAL_ADC_Start_DMA+0x218>)
 8024e2c:	4293      	cmp	r3, r2
 8024e2e:	d105      	bne.n	8024e3c <HAL_ADC_Start_DMA+0x178>
 8024e30:	4b25      	ldr	r3, [pc, #148]	; (8024ec8 <HAL_ADC_Start_DMA+0x204>)
 8024e32:	685b      	ldr	r3, [r3, #4]
 8024e34:	f003 031f 	and.w	r3, r3, #31
 8024e38:	2b00      	cmp	r3, #0
 8024e3a:	d00a      	beq.n	8024e52 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8024e3c:	68fb      	ldr	r3, [r7, #12]
 8024e3e:	681b      	ldr	r3, [r3, #0]
 8024e40:	4a27      	ldr	r2, [pc, #156]	; (8024ee0 <HAL_ADC_Start_DMA+0x21c>)
 8024e42:	4293      	cmp	r3, r2
 8024e44:	d136      	bne.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
 8024e46:	4b20      	ldr	r3, [pc, #128]	; (8024ec8 <HAL_ADC_Start_DMA+0x204>)
 8024e48:	685b      	ldr	r3, [r3, #4]
 8024e4a:	f003 0310 	and.w	r3, r3, #16
 8024e4e:	2b00      	cmp	r3, #0
 8024e50:	d130      	bne.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8024e52:	68fb      	ldr	r3, [r7, #12]
 8024e54:	681b      	ldr	r3, [r3, #0]
 8024e56:	689b      	ldr	r3, [r3, #8]
 8024e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	d129      	bne.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024e60:	68fb      	ldr	r3, [r7, #12]
 8024e62:	681b      	ldr	r3, [r3, #0]
 8024e64:	689a      	ldr	r2, [r3, #8]
 8024e66:	68fb      	ldr	r3, [r7, #12]
 8024e68:	681b      	ldr	r3, [r3, #0]
 8024e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024e6e:	609a      	str	r2, [r3, #8]
 8024e70:	e020      	b.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8024e72:	68fb      	ldr	r3, [r7, #12]
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	4a18      	ldr	r2, [pc, #96]	; (8024ed8 <HAL_ADC_Start_DMA+0x214>)
 8024e78:	4293      	cmp	r3, r2
 8024e7a:	d11b      	bne.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
 8024e7c:	68fb      	ldr	r3, [r7, #12]
 8024e7e:	681b      	ldr	r3, [r3, #0]
 8024e80:	689b      	ldr	r3, [r3, #8]
 8024e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	d114      	bne.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024e8a:	68fb      	ldr	r3, [r7, #12]
 8024e8c:	681b      	ldr	r3, [r3, #0]
 8024e8e:	689a      	ldr	r2, [r3, #8]
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	681b      	ldr	r3, [r3, #0]
 8024e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024e98:	609a      	str	r2, [r3, #8]
 8024e9a:	e00b      	b.n	8024eb4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8024e9c:	68fb      	ldr	r3, [r7, #12]
 8024e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ea0:	f043 0210 	orr.w	r2, r3, #16
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8024ea8:	68fb      	ldr	r3, [r7, #12]
 8024eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024eac:	f043 0201 	orr.w	r2, r3, #1
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8024eb4:	2300      	movs	r3, #0
}
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	3718      	adds	r7, #24
 8024eba:	46bd      	mov	sp, r7
 8024ebc:	bd80      	pop	{r7, pc}
 8024ebe:	bf00      	nop
 8024ec0:	20000084 	.word	0x20000084
 8024ec4:	431bde83 	.word	0x431bde83
 8024ec8:	40012300 	.word	0x40012300
 8024ecc:	0802535d 	.word	0x0802535d
 8024ed0:	08025417 	.word	0x08025417
 8024ed4:	08025433 	.word	0x08025433
 8024ed8:	40012000 	.word	0x40012000
 8024edc:	40012100 	.word	0x40012100
 8024ee0:	40012200 	.word	0x40012200

08024ee4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024ee4:	b480      	push	{r7}
 8024ee6:	b083      	sub	sp, #12
 8024ee8:	af00      	add	r7, sp, #0
 8024eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8024eec:	bf00      	nop
 8024eee:	370c      	adds	r7, #12
 8024ef0:	46bd      	mov	sp, r7
 8024ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ef6:	4770      	bx	lr

08024ef8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8024ef8:	b480      	push	{r7}
 8024efa:	b083      	sub	sp, #12
 8024efc:	af00      	add	r7, sp, #0
 8024efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8024f00:	bf00      	nop
 8024f02:	370c      	adds	r7, #12
 8024f04:	46bd      	mov	sp, r7
 8024f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f0a:	4770      	bx	lr

08024f0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8024f0c:	b480      	push	{r7}
 8024f0e:	b083      	sub	sp, #12
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8024f14:	bf00      	nop
 8024f16:	370c      	adds	r7, #12
 8024f18:	46bd      	mov	sp, r7
 8024f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f1e:	4770      	bx	lr

08024f20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8024f20:	b480      	push	{r7}
 8024f22:	b085      	sub	sp, #20
 8024f24:	af00      	add	r7, sp, #0
 8024f26:	6078      	str	r0, [r7, #4]
 8024f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024f2e:	687b      	ldr	r3, [r7, #4]
 8024f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024f34:	2b01      	cmp	r3, #1
 8024f36:	d101      	bne.n	8024f3c <HAL_ADC_ConfigChannel+0x1c>
 8024f38:	2302      	movs	r3, #2
 8024f3a:	e105      	b.n	8025148 <HAL_ADC_ConfigChannel+0x228>
 8024f3c:	687b      	ldr	r3, [r7, #4]
 8024f3e:	2201      	movs	r2, #1
 8024f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8024f44:	683b      	ldr	r3, [r7, #0]
 8024f46:	681b      	ldr	r3, [r3, #0]
 8024f48:	2b09      	cmp	r3, #9
 8024f4a:	d925      	bls.n	8024f98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	68d9      	ldr	r1, [r3, #12]
 8024f52:	683b      	ldr	r3, [r7, #0]
 8024f54:	681b      	ldr	r3, [r3, #0]
 8024f56:	b29b      	uxth	r3, r3
 8024f58:	461a      	mov	r2, r3
 8024f5a:	4613      	mov	r3, r2
 8024f5c:	005b      	lsls	r3, r3, #1
 8024f5e:	4413      	add	r3, r2
 8024f60:	3b1e      	subs	r3, #30
 8024f62:	2207      	movs	r2, #7
 8024f64:	fa02 f303 	lsl.w	r3, r2, r3
 8024f68:	43da      	mvns	r2, r3
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	400a      	ands	r2, r1
 8024f70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8024f72:	687b      	ldr	r3, [r7, #4]
 8024f74:	681b      	ldr	r3, [r3, #0]
 8024f76:	68d9      	ldr	r1, [r3, #12]
 8024f78:	683b      	ldr	r3, [r7, #0]
 8024f7a:	689a      	ldr	r2, [r3, #8]
 8024f7c:	683b      	ldr	r3, [r7, #0]
 8024f7e:	681b      	ldr	r3, [r3, #0]
 8024f80:	b29b      	uxth	r3, r3
 8024f82:	4618      	mov	r0, r3
 8024f84:	4603      	mov	r3, r0
 8024f86:	005b      	lsls	r3, r3, #1
 8024f88:	4403      	add	r3, r0
 8024f8a:	3b1e      	subs	r3, #30
 8024f8c:	409a      	lsls	r2, r3
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	681b      	ldr	r3, [r3, #0]
 8024f92:	430a      	orrs	r2, r1
 8024f94:	60da      	str	r2, [r3, #12]
 8024f96:	e022      	b.n	8024fde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024f98:	687b      	ldr	r3, [r7, #4]
 8024f9a:	681b      	ldr	r3, [r3, #0]
 8024f9c:	6919      	ldr	r1, [r3, #16]
 8024f9e:	683b      	ldr	r3, [r7, #0]
 8024fa0:	681b      	ldr	r3, [r3, #0]
 8024fa2:	b29b      	uxth	r3, r3
 8024fa4:	461a      	mov	r2, r3
 8024fa6:	4613      	mov	r3, r2
 8024fa8:	005b      	lsls	r3, r3, #1
 8024faa:	4413      	add	r3, r2
 8024fac:	2207      	movs	r2, #7
 8024fae:	fa02 f303 	lsl.w	r3, r2, r3
 8024fb2:	43da      	mvns	r2, r3
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	681b      	ldr	r3, [r3, #0]
 8024fb8:	400a      	ands	r2, r1
 8024fba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8024fbc:	687b      	ldr	r3, [r7, #4]
 8024fbe:	681b      	ldr	r3, [r3, #0]
 8024fc0:	6919      	ldr	r1, [r3, #16]
 8024fc2:	683b      	ldr	r3, [r7, #0]
 8024fc4:	689a      	ldr	r2, [r3, #8]
 8024fc6:	683b      	ldr	r3, [r7, #0]
 8024fc8:	681b      	ldr	r3, [r3, #0]
 8024fca:	b29b      	uxth	r3, r3
 8024fcc:	4618      	mov	r0, r3
 8024fce:	4603      	mov	r3, r0
 8024fd0:	005b      	lsls	r3, r3, #1
 8024fd2:	4403      	add	r3, r0
 8024fd4:	409a      	lsls	r2, r3
 8024fd6:	687b      	ldr	r3, [r7, #4]
 8024fd8:	681b      	ldr	r3, [r3, #0]
 8024fda:	430a      	orrs	r2, r1
 8024fdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8024fde:	683b      	ldr	r3, [r7, #0]
 8024fe0:	685b      	ldr	r3, [r3, #4]
 8024fe2:	2b06      	cmp	r3, #6
 8024fe4:	d824      	bhi.n	8025030 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024fec:	683b      	ldr	r3, [r7, #0]
 8024fee:	685a      	ldr	r2, [r3, #4]
 8024ff0:	4613      	mov	r3, r2
 8024ff2:	009b      	lsls	r3, r3, #2
 8024ff4:	4413      	add	r3, r2
 8024ff6:	3b05      	subs	r3, #5
 8024ff8:	221f      	movs	r2, #31
 8024ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8024ffe:	43da      	mvns	r2, r3
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	400a      	ands	r2, r1
 8025006:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802500e:	683b      	ldr	r3, [r7, #0]
 8025010:	681b      	ldr	r3, [r3, #0]
 8025012:	b29b      	uxth	r3, r3
 8025014:	4618      	mov	r0, r3
 8025016:	683b      	ldr	r3, [r7, #0]
 8025018:	685a      	ldr	r2, [r3, #4]
 802501a:	4613      	mov	r3, r2
 802501c:	009b      	lsls	r3, r3, #2
 802501e:	4413      	add	r3, r2
 8025020:	3b05      	subs	r3, #5
 8025022:	fa00 f203 	lsl.w	r2, r0, r3
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	681b      	ldr	r3, [r3, #0]
 802502a:	430a      	orrs	r2, r1
 802502c:	635a      	str	r2, [r3, #52]	; 0x34
 802502e:	e04c      	b.n	80250ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8025030:	683b      	ldr	r3, [r7, #0]
 8025032:	685b      	ldr	r3, [r3, #4]
 8025034:	2b0c      	cmp	r3, #12
 8025036:	d824      	bhi.n	8025082 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802503e:	683b      	ldr	r3, [r7, #0]
 8025040:	685a      	ldr	r2, [r3, #4]
 8025042:	4613      	mov	r3, r2
 8025044:	009b      	lsls	r3, r3, #2
 8025046:	4413      	add	r3, r2
 8025048:	3b23      	subs	r3, #35	; 0x23
 802504a:	221f      	movs	r2, #31
 802504c:	fa02 f303 	lsl.w	r3, r2, r3
 8025050:	43da      	mvns	r2, r3
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	400a      	ands	r2, r1
 8025058:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8025060:	683b      	ldr	r3, [r7, #0]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	b29b      	uxth	r3, r3
 8025066:	4618      	mov	r0, r3
 8025068:	683b      	ldr	r3, [r7, #0]
 802506a:	685a      	ldr	r2, [r3, #4]
 802506c:	4613      	mov	r3, r2
 802506e:	009b      	lsls	r3, r3, #2
 8025070:	4413      	add	r3, r2
 8025072:	3b23      	subs	r3, #35	; 0x23
 8025074:	fa00 f203 	lsl.w	r2, r0, r3
 8025078:	687b      	ldr	r3, [r7, #4]
 802507a:	681b      	ldr	r3, [r3, #0]
 802507c:	430a      	orrs	r2, r1
 802507e:	631a      	str	r2, [r3, #48]	; 0x30
 8025080:	e023      	b.n	80250ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8025088:	683b      	ldr	r3, [r7, #0]
 802508a:	685a      	ldr	r2, [r3, #4]
 802508c:	4613      	mov	r3, r2
 802508e:	009b      	lsls	r3, r3, #2
 8025090:	4413      	add	r3, r2
 8025092:	3b41      	subs	r3, #65	; 0x41
 8025094:	221f      	movs	r2, #31
 8025096:	fa02 f303 	lsl.w	r3, r2, r3
 802509a:	43da      	mvns	r2, r3
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	681b      	ldr	r3, [r3, #0]
 80250a0:	400a      	ands	r2, r1
 80250a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80250aa:	683b      	ldr	r3, [r7, #0]
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	b29b      	uxth	r3, r3
 80250b0:	4618      	mov	r0, r3
 80250b2:	683b      	ldr	r3, [r7, #0]
 80250b4:	685a      	ldr	r2, [r3, #4]
 80250b6:	4613      	mov	r3, r2
 80250b8:	009b      	lsls	r3, r3, #2
 80250ba:	4413      	add	r3, r2
 80250bc:	3b41      	subs	r3, #65	; 0x41
 80250be:	fa00 f203 	lsl.w	r2, r0, r3
 80250c2:	687b      	ldr	r3, [r7, #4]
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	430a      	orrs	r2, r1
 80250c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80250ca:	4b22      	ldr	r3, [pc, #136]	; (8025154 <HAL_ADC_ConfigChannel+0x234>)
 80250cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	4a21      	ldr	r2, [pc, #132]	; (8025158 <HAL_ADC_ConfigChannel+0x238>)
 80250d4:	4293      	cmp	r3, r2
 80250d6:	d109      	bne.n	80250ec <HAL_ADC_ConfigChannel+0x1cc>
 80250d8:	683b      	ldr	r3, [r7, #0]
 80250da:	681b      	ldr	r3, [r3, #0]
 80250dc:	2b12      	cmp	r3, #18
 80250de:	d105      	bne.n	80250ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80250e0:	68fb      	ldr	r3, [r7, #12]
 80250e2:	685b      	ldr	r3, [r3, #4]
 80250e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80250e8:	68fb      	ldr	r3, [r7, #12]
 80250ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	681b      	ldr	r3, [r3, #0]
 80250f0:	4a19      	ldr	r2, [pc, #100]	; (8025158 <HAL_ADC_ConfigChannel+0x238>)
 80250f2:	4293      	cmp	r3, r2
 80250f4:	d123      	bne.n	802513e <HAL_ADC_ConfigChannel+0x21e>
 80250f6:	683b      	ldr	r3, [r7, #0]
 80250f8:	681b      	ldr	r3, [r3, #0]
 80250fa:	2b10      	cmp	r3, #16
 80250fc:	d003      	beq.n	8025106 <HAL_ADC_ConfigChannel+0x1e6>
 80250fe:	683b      	ldr	r3, [r7, #0]
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	2b11      	cmp	r3, #17
 8025104:	d11b      	bne.n	802513e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8025106:	68fb      	ldr	r3, [r7, #12]
 8025108:	685b      	ldr	r3, [r3, #4]
 802510a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8025112:	683b      	ldr	r3, [r7, #0]
 8025114:	681b      	ldr	r3, [r3, #0]
 8025116:	2b10      	cmp	r3, #16
 8025118:	d111      	bne.n	802513e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802511a:	4b10      	ldr	r3, [pc, #64]	; (802515c <HAL_ADC_ConfigChannel+0x23c>)
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	4a10      	ldr	r2, [pc, #64]	; (8025160 <HAL_ADC_ConfigChannel+0x240>)
 8025120:	fba2 2303 	umull	r2, r3, r2, r3
 8025124:	0c9a      	lsrs	r2, r3, #18
 8025126:	4613      	mov	r3, r2
 8025128:	009b      	lsls	r3, r3, #2
 802512a:	4413      	add	r3, r2
 802512c:	005b      	lsls	r3, r3, #1
 802512e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8025130:	e002      	b.n	8025138 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8025132:	68bb      	ldr	r3, [r7, #8]
 8025134:	3b01      	subs	r3, #1
 8025136:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8025138:	68bb      	ldr	r3, [r7, #8]
 802513a:	2b00      	cmp	r3, #0
 802513c:	d1f9      	bne.n	8025132 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	2200      	movs	r2, #0
 8025142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8025146:	2300      	movs	r3, #0
}
 8025148:	4618      	mov	r0, r3
 802514a:	3714      	adds	r7, #20
 802514c:	46bd      	mov	sp, r7
 802514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025152:	4770      	bx	lr
 8025154:	40012300 	.word	0x40012300
 8025158:	40012000 	.word	0x40012000
 802515c:	20000084 	.word	0x20000084
 8025160:	431bde83 	.word	0x431bde83

08025164 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8025164:	b480      	push	{r7}
 8025166:	b085      	sub	sp, #20
 8025168:	af00      	add	r7, sp, #0
 802516a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802516c:	4b79      	ldr	r3, [pc, #484]	; (8025354 <ADC_Init+0x1f0>)
 802516e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8025170:	68fb      	ldr	r3, [r7, #12]
 8025172:	685b      	ldr	r3, [r3, #4]
 8025174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8025178:	68fb      	ldr	r3, [r7, #12]
 802517a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	685a      	ldr	r2, [r3, #4]
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	685b      	ldr	r3, [r3, #4]
 8025184:	431a      	orrs	r2, r3
 8025186:	68fb      	ldr	r3, [r7, #12]
 8025188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802518a:	687b      	ldr	r3, [r7, #4]
 802518c:	681b      	ldr	r3, [r3, #0]
 802518e:	685a      	ldr	r2, [r3, #4]
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8025198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802519a:	687b      	ldr	r3, [r7, #4]
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	6859      	ldr	r1, [r3, #4]
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	691b      	ldr	r3, [r3, #16]
 80251a4:	021a      	lsls	r2, r3, #8
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	430a      	orrs	r2, r1
 80251ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	681b      	ldr	r3, [r3, #0]
 80251b2:	685a      	ldr	r2, [r3, #4]
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	681b      	ldr	r3, [r3, #0]
 80251b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80251bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80251be:	687b      	ldr	r3, [r7, #4]
 80251c0:	681b      	ldr	r3, [r3, #0]
 80251c2:	6859      	ldr	r1, [r3, #4]
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	689a      	ldr	r2, [r3, #8]
 80251c8:	687b      	ldr	r3, [r7, #4]
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	430a      	orrs	r2, r1
 80251ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	681b      	ldr	r3, [r3, #0]
 80251d4:	689a      	ldr	r2, [r3, #8]
 80251d6:	687b      	ldr	r3, [r7, #4]
 80251d8:	681b      	ldr	r3, [r3, #0]
 80251da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80251de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	681b      	ldr	r3, [r3, #0]
 80251e4:	6899      	ldr	r1, [r3, #8]
 80251e6:	687b      	ldr	r3, [r7, #4]
 80251e8:	68da      	ldr	r2, [r3, #12]
 80251ea:	687b      	ldr	r3, [r7, #4]
 80251ec:	681b      	ldr	r3, [r3, #0]
 80251ee:	430a      	orrs	r2, r1
 80251f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80251f2:	687b      	ldr	r3, [r7, #4]
 80251f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251f6:	4a58      	ldr	r2, [pc, #352]	; (8025358 <ADC_Init+0x1f4>)
 80251f8:	4293      	cmp	r3, r2
 80251fa:	d022      	beq.n	8025242 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	681b      	ldr	r3, [r3, #0]
 8025200:	689a      	ldr	r2, [r3, #8]
 8025202:	687b      	ldr	r3, [r7, #4]
 8025204:	681b      	ldr	r3, [r3, #0]
 8025206:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802520a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	681b      	ldr	r3, [r3, #0]
 8025210:	6899      	ldr	r1, [r3, #8]
 8025212:	687b      	ldr	r3, [r7, #4]
 8025214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	430a      	orrs	r2, r1
 802521c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	689a      	ldr	r2, [r3, #8]
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802522c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	6899      	ldr	r1, [r3, #8]
 8025234:	687b      	ldr	r3, [r7, #4]
 8025236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	430a      	orrs	r2, r1
 802523e:	609a      	str	r2, [r3, #8]
 8025240:	e00f      	b.n	8025262 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	681b      	ldr	r3, [r3, #0]
 8025246:	689a      	ldr	r2, [r3, #8]
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8025250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8025252:	687b      	ldr	r3, [r7, #4]
 8025254:	681b      	ldr	r3, [r3, #0]
 8025256:	689a      	ldr	r2, [r3, #8]
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	681b      	ldr	r3, [r3, #0]
 802525c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8025260:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8025262:	687b      	ldr	r3, [r7, #4]
 8025264:	681b      	ldr	r3, [r3, #0]
 8025266:	689a      	ldr	r2, [r3, #8]
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	f022 0202 	bic.w	r2, r2, #2
 8025270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8025272:	687b      	ldr	r3, [r7, #4]
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	6899      	ldr	r1, [r3, #8]
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	7e1b      	ldrb	r3, [r3, #24]
 802527c:	005a      	lsls	r2, r3, #1
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	430a      	orrs	r2, r1
 8025284:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	f893 3020 	ldrb.w	r3, [r3, #32]
 802528c:	2b00      	cmp	r3, #0
 802528e:	d01b      	beq.n	80252c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	681b      	ldr	r3, [r3, #0]
 8025294:	685a      	ldr	r2, [r3, #4]
 8025296:	687b      	ldr	r3, [r7, #4]
 8025298:	681b      	ldr	r3, [r3, #0]
 802529a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802529e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	685a      	ldr	r2, [r3, #4]
 80252a6:	687b      	ldr	r3, [r7, #4]
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80252ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80252b0:	687b      	ldr	r3, [r7, #4]
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	6859      	ldr	r1, [r3, #4]
 80252b6:	687b      	ldr	r3, [r7, #4]
 80252b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252ba:	3b01      	subs	r3, #1
 80252bc:	035a      	lsls	r2, r3, #13
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	430a      	orrs	r2, r1
 80252c4:	605a      	str	r2, [r3, #4]
 80252c6:	e007      	b.n	80252d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80252c8:	687b      	ldr	r3, [r7, #4]
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	685a      	ldr	r2, [r3, #4]
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	681b      	ldr	r3, [r3, #0]
 80252d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80252d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80252de:	687b      	ldr	r3, [r7, #4]
 80252e0:	681b      	ldr	r3, [r3, #0]
 80252e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80252e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80252e8:	687b      	ldr	r3, [r7, #4]
 80252ea:	681b      	ldr	r3, [r3, #0]
 80252ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	69db      	ldr	r3, [r3, #28]
 80252f2:	3b01      	subs	r3, #1
 80252f4:	051a      	lsls	r2, r3, #20
 80252f6:	687b      	ldr	r3, [r7, #4]
 80252f8:	681b      	ldr	r3, [r3, #0]
 80252fa:	430a      	orrs	r2, r1
 80252fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80252fe:	687b      	ldr	r3, [r7, #4]
 8025300:	681b      	ldr	r3, [r3, #0]
 8025302:	689a      	ldr	r2, [r3, #8]
 8025304:	687b      	ldr	r3, [r7, #4]
 8025306:	681b      	ldr	r3, [r3, #0]
 8025308:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802530c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802530e:	687b      	ldr	r3, [r7, #4]
 8025310:	681b      	ldr	r3, [r3, #0]
 8025312:	6899      	ldr	r1, [r3, #8]
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802531a:	025a      	lsls	r2, r3, #9
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	430a      	orrs	r2, r1
 8025322:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8025324:	687b      	ldr	r3, [r7, #4]
 8025326:	681b      	ldr	r3, [r3, #0]
 8025328:	689a      	ldr	r2, [r3, #8]
 802532a:	687b      	ldr	r3, [r7, #4]
 802532c:	681b      	ldr	r3, [r3, #0]
 802532e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8025332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	681b      	ldr	r3, [r3, #0]
 8025338:	6899      	ldr	r1, [r3, #8]
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	695b      	ldr	r3, [r3, #20]
 802533e:	029a      	lsls	r2, r3, #10
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	430a      	orrs	r2, r1
 8025346:	609a      	str	r2, [r3, #8]
}
 8025348:	bf00      	nop
 802534a:	3714      	adds	r7, #20
 802534c:	46bd      	mov	sp, r7
 802534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025352:	4770      	bx	lr
 8025354:	40012300 	.word	0x40012300
 8025358:	0f000001 	.word	0x0f000001

0802535c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 802535c:	b580      	push	{r7, lr}
 802535e:	b084      	sub	sp, #16
 8025360:	af00      	add	r7, sp, #0
 8025362:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025368:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802536e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8025372:	2b00      	cmp	r3, #0
 8025374:	d13c      	bne.n	80253f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8025376:	68fb      	ldr	r3, [r7, #12]
 8025378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802537a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 802537e:	68fb      	ldr	r3, [r7, #12]
 8025380:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8025382:	68fb      	ldr	r3, [r7, #12]
 8025384:	681b      	ldr	r3, [r3, #0]
 8025386:	689b      	ldr	r3, [r3, #8]
 8025388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802538c:	2b00      	cmp	r3, #0
 802538e:	d12b      	bne.n	80253e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8025394:	2b00      	cmp	r3, #0
 8025396:	d127      	bne.n	80253e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8025398:	68fb      	ldr	r3, [r7, #12]
 802539a:	681b      	ldr	r3, [r3, #0]
 802539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802539e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d006      	beq.n	80253b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80253a6:	68fb      	ldr	r3, [r7, #12]
 80253a8:	681b      	ldr	r3, [r3, #0]
 80253aa:	689b      	ldr	r3, [r3, #8]
 80253ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d119      	bne.n	80253e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80253b4:	68fb      	ldr	r3, [r7, #12]
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	685a      	ldr	r2, [r3, #4]
 80253ba:	68fb      	ldr	r3, [r7, #12]
 80253bc:	681b      	ldr	r3, [r3, #0]
 80253be:	f022 0220 	bic.w	r2, r2, #32
 80253c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80253cc:	68fb      	ldr	r3, [r7, #12]
 80253ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80253d0:	68fb      	ldr	r3, [r7, #12]
 80253d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80253d8:	2b00      	cmp	r3, #0
 80253da:	d105      	bne.n	80253e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80253dc:	68fb      	ldr	r3, [r7, #12]
 80253de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253e0:	f043 0201 	orr.w	r2, r3, #1
 80253e4:	68fb      	ldr	r3, [r7, #12]
 80253e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80253e8:	68f8      	ldr	r0, [r7, #12]
 80253ea:	f7f0 f861 	bl	80154b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80253ee:	e00e      	b.n	802540e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80253f0:	68fb      	ldr	r3, [r7, #12]
 80253f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253f4:	f003 0310 	and.w	r3, r3, #16
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d003      	beq.n	8025404 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80253fc:	68f8      	ldr	r0, [r7, #12]
 80253fe:	f7ff fd85 	bl	8024f0c <HAL_ADC_ErrorCallback>
}
 8025402:	e004      	b.n	802540e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8025404:	68fb      	ldr	r3, [r7, #12]
 8025406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802540a:	6878      	ldr	r0, [r7, #4]
 802540c:	4798      	blx	r3
}
 802540e:	bf00      	nop
 8025410:	3710      	adds	r7, #16
 8025412:	46bd      	mov	sp, r7
 8025414:	bd80      	pop	{r7, pc}

08025416 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8025416:	b580      	push	{r7, lr}
 8025418:	b084      	sub	sp, #16
 802541a:	af00      	add	r7, sp, #0
 802541c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025422:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8025424:	68f8      	ldr	r0, [r7, #12]
 8025426:	f7ff fd5d 	bl	8024ee4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802542a:	bf00      	nop
 802542c:	3710      	adds	r7, #16
 802542e:	46bd      	mov	sp, r7
 8025430:	bd80      	pop	{r7, pc}

08025432 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8025432:	b580      	push	{r7, lr}
 8025434:	b084      	sub	sp, #16
 8025436:	af00      	add	r7, sp, #0
 8025438:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802543a:	687b      	ldr	r3, [r7, #4]
 802543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802543e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8025440:	68fb      	ldr	r3, [r7, #12]
 8025442:	2240      	movs	r2, #64	; 0x40
 8025444:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8025446:	68fb      	ldr	r3, [r7, #12]
 8025448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802544a:	f043 0204 	orr.w	r2, r3, #4
 802544e:	68fb      	ldr	r3, [r7, #12]
 8025450:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8025452:	68f8      	ldr	r0, [r7, #12]
 8025454:	f7ff fd5a 	bl	8024f0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8025458:	bf00      	nop
 802545a:	3710      	adds	r7, #16
 802545c:	46bd      	mov	sp, r7
 802545e:	bd80      	pop	{r7, pc}

08025460 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8025460:	b480      	push	{r7}
 8025462:	b083      	sub	sp, #12
 8025464:	af00      	add	r7, sp, #0
 8025466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8025468:	bf00      	nop
 802546a:	370c      	adds	r7, #12
 802546c:	46bd      	mov	sp, r7
 802546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025472:	4770      	bx	lr

08025474 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8025474:	b580      	push	{r7, lr}
 8025476:	b084      	sub	sp, #16
 8025478:	af00      	add	r7, sp, #0
 802547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	2b00      	cmp	r3, #0
 8025480:	d101      	bne.n	8025486 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8025482:	2301      	movs	r3, #1
 8025484:	e0ed      	b.n	8025662 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	f893 3020 	ldrb.w	r3, [r3, #32]
 802548c:	b2db      	uxtb	r3, r3
 802548e:	2b00      	cmp	r3, #0
 8025490:	d102      	bne.n	8025498 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8025492:	6878      	ldr	r0, [r7, #4]
 8025494:	f7f0 f888 	bl	80155a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	681b      	ldr	r3, [r3, #0]
 802549c:	681a      	ldr	r2, [r3, #0]
 802549e:	687b      	ldr	r3, [r7, #4]
 80254a0:	681b      	ldr	r3, [r3, #0]
 80254a2:	f042 0201 	orr.w	r2, r2, #1
 80254a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80254a8:	f7ff fa58 	bl	802495c <HAL_GetTick>
 80254ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80254ae:	e012      	b.n	80254d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80254b0:	f7ff fa54 	bl	802495c <HAL_GetTick>
 80254b4:	4602      	mov	r2, r0
 80254b6:	68fb      	ldr	r3, [r7, #12]
 80254b8:	1ad3      	subs	r3, r2, r3
 80254ba:	2b0a      	cmp	r3, #10
 80254bc:	d90b      	bls.n	80254d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80254be:	687b      	ldr	r3, [r7, #4]
 80254c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80254c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80254ca:	687b      	ldr	r3, [r7, #4]
 80254cc:	2205      	movs	r2, #5
 80254ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80254d2:	2301      	movs	r3, #1
 80254d4:	e0c5      	b.n	8025662 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80254d6:	687b      	ldr	r3, [r7, #4]
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	685b      	ldr	r3, [r3, #4]
 80254dc:	f003 0301 	and.w	r3, r3, #1
 80254e0:	2b00      	cmp	r3, #0
 80254e2:	d0e5      	beq.n	80254b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	681a      	ldr	r2, [r3, #0]
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	f022 0202 	bic.w	r2, r2, #2
 80254f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80254f4:	f7ff fa32 	bl	802495c <HAL_GetTick>
 80254f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80254fa:	e012      	b.n	8025522 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80254fc:	f7ff fa2e 	bl	802495c <HAL_GetTick>
 8025500:	4602      	mov	r2, r0
 8025502:	68fb      	ldr	r3, [r7, #12]
 8025504:	1ad3      	subs	r3, r2, r3
 8025506:	2b0a      	cmp	r3, #10
 8025508:	d90b      	bls.n	8025522 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802550e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	2205      	movs	r2, #5
 802551a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 802551e:	2301      	movs	r3, #1
 8025520:	e09f      	b.n	8025662 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8025522:	687b      	ldr	r3, [r7, #4]
 8025524:	681b      	ldr	r3, [r3, #0]
 8025526:	685b      	ldr	r3, [r3, #4]
 8025528:	f003 0302 	and.w	r3, r3, #2
 802552c:	2b00      	cmp	r3, #0
 802552e:	d1e5      	bne.n	80254fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8025530:	687b      	ldr	r3, [r7, #4]
 8025532:	7e1b      	ldrb	r3, [r3, #24]
 8025534:	2b01      	cmp	r3, #1
 8025536:	d108      	bne.n	802554a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8025538:	687b      	ldr	r3, [r7, #4]
 802553a:	681b      	ldr	r3, [r3, #0]
 802553c:	681a      	ldr	r2, [r3, #0]
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8025546:	601a      	str	r2, [r3, #0]
 8025548:	e007      	b.n	802555a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	681b      	ldr	r3, [r3, #0]
 802554e:	681a      	ldr	r2, [r3, #0]
 8025550:	687b      	ldr	r3, [r7, #4]
 8025552:	681b      	ldr	r3, [r3, #0]
 8025554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8025558:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	7e5b      	ldrb	r3, [r3, #25]
 802555e:	2b01      	cmp	r3, #1
 8025560:	d108      	bne.n	8025574 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	681b      	ldr	r3, [r3, #0]
 8025566:	681a      	ldr	r2, [r3, #0]
 8025568:	687b      	ldr	r3, [r7, #4]
 802556a:	681b      	ldr	r3, [r3, #0]
 802556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025570:	601a      	str	r2, [r3, #0]
 8025572:	e007      	b.n	8025584 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8025574:	687b      	ldr	r3, [r7, #4]
 8025576:	681b      	ldr	r3, [r3, #0]
 8025578:	681a      	ldr	r2, [r3, #0]
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	681b      	ldr	r3, [r3, #0]
 802557e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025582:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	7e9b      	ldrb	r3, [r3, #26]
 8025588:	2b01      	cmp	r3, #1
 802558a:	d108      	bne.n	802559e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802558c:	687b      	ldr	r3, [r7, #4]
 802558e:	681b      	ldr	r3, [r3, #0]
 8025590:	681a      	ldr	r2, [r3, #0]
 8025592:	687b      	ldr	r3, [r7, #4]
 8025594:	681b      	ldr	r3, [r3, #0]
 8025596:	f042 0220 	orr.w	r2, r2, #32
 802559a:	601a      	str	r2, [r3, #0]
 802559c:	e007      	b.n	80255ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	681b      	ldr	r3, [r3, #0]
 80255a2:	681a      	ldr	r2, [r3, #0]
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	f022 0220 	bic.w	r2, r2, #32
 80255ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80255ae:	687b      	ldr	r3, [r7, #4]
 80255b0:	7edb      	ldrb	r3, [r3, #27]
 80255b2:	2b01      	cmp	r3, #1
 80255b4:	d108      	bne.n	80255c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80255b6:	687b      	ldr	r3, [r7, #4]
 80255b8:	681b      	ldr	r3, [r3, #0]
 80255ba:	681a      	ldr	r2, [r3, #0]
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	681b      	ldr	r3, [r3, #0]
 80255c0:	f022 0210 	bic.w	r2, r2, #16
 80255c4:	601a      	str	r2, [r3, #0]
 80255c6:	e007      	b.n	80255d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80255c8:	687b      	ldr	r3, [r7, #4]
 80255ca:	681b      	ldr	r3, [r3, #0]
 80255cc:	681a      	ldr	r2, [r3, #0]
 80255ce:	687b      	ldr	r3, [r7, #4]
 80255d0:	681b      	ldr	r3, [r3, #0]
 80255d2:	f042 0210 	orr.w	r2, r2, #16
 80255d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80255d8:	687b      	ldr	r3, [r7, #4]
 80255da:	7f1b      	ldrb	r3, [r3, #28]
 80255dc:	2b01      	cmp	r3, #1
 80255de:	d108      	bne.n	80255f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	681b      	ldr	r3, [r3, #0]
 80255e4:	681a      	ldr	r2, [r3, #0]
 80255e6:	687b      	ldr	r3, [r7, #4]
 80255e8:	681b      	ldr	r3, [r3, #0]
 80255ea:	f042 0208 	orr.w	r2, r2, #8
 80255ee:	601a      	str	r2, [r3, #0]
 80255f0:	e007      	b.n	8025602 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80255f2:	687b      	ldr	r3, [r7, #4]
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	681a      	ldr	r2, [r3, #0]
 80255f8:	687b      	ldr	r3, [r7, #4]
 80255fa:	681b      	ldr	r3, [r3, #0]
 80255fc:	f022 0208 	bic.w	r2, r2, #8
 8025600:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	7f5b      	ldrb	r3, [r3, #29]
 8025606:	2b01      	cmp	r3, #1
 8025608:	d108      	bne.n	802561c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	681b      	ldr	r3, [r3, #0]
 802560e:	681a      	ldr	r2, [r3, #0]
 8025610:	687b      	ldr	r3, [r7, #4]
 8025612:	681b      	ldr	r3, [r3, #0]
 8025614:	f042 0204 	orr.w	r2, r2, #4
 8025618:	601a      	str	r2, [r3, #0]
 802561a:	e007      	b.n	802562c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	681b      	ldr	r3, [r3, #0]
 8025620:	681a      	ldr	r2, [r3, #0]
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	f022 0204 	bic.w	r2, r2, #4
 802562a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	689a      	ldr	r2, [r3, #8]
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	68db      	ldr	r3, [r3, #12]
 8025634:	431a      	orrs	r2, r3
 8025636:	687b      	ldr	r3, [r7, #4]
 8025638:	691b      	ldr	r3, [r3, #16]
 802563a:	431a      	orrs	r2, r3
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	695b      	ldr	r3, [r3, #20]
 8025640:	ea42 0103 	orr.w	r1, r2, r3
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	685b      	ldr	r3, [r3, #4]
 8025648:	1e5a      	subs	r2, r3, #1
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	430a      	orrs	r2, r1
 8025650:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8025652:	687b      	ldr	r3, [r7, #4]
 8025654:	2200      	movs	r2, #0
 8025656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	2201      	movs	r2, #1
 802565c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8025660:	2300      	movs	r3, #0
}
 8025662:	4618      	mov	r0, r3
 8025664:	3710      	adds	r7, #16
 8025666:	46bd      	mov	sp, r7
 8025668:	bd80      	pop	{r7, pc}
	...

0802566c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 802566c:	b480      	push	{r7}
 802566e:	b087      	sub	sp, #28
 8025670:	af00      	add	r7, sp, #0
 8025672:	6078      	str	r0, [r7, #4]
 8025674:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	681b      	ldr	r3, [r3, #0]
 802567a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025682:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8025684:	7cfb      	ldrb	r3, [r7, #19]
 8025686:	2b01      	cmp	r3, #1
 8025688:	d003      	beq.n	8025692 <HAL_CAN_ConfigFilter+0x26>
 802568a:	7cfb      	ldrb	r3, [r7, #19]
 802568c:	2b02      	cmp	r3, #2
 802568e:	f040 80be 	bne.w	802580e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8025692:	4b65      	ldr	r3, [pc, #404]	; (8025828 <HAL_CAN_ConfigFilter+0x1bc>)
 8025694:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8025696:	697b      	ldr	r3, [r7, #20]
 8025698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802569c:	f043 0201 	orr.w	r2, r3, #1
 80256a0:	697b      	ldr	r3, [r7, #20]
 80256a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80256a6:	697b      	ldr	r3, [r7, #20]
 80256a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80256ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80256b0:	697b      	ldr	r3, [r7, #20]
 80256b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80256b6:	697b      	ldr	r3, [r7, #20]
 80256b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80256bc:	683b      	ldr	r3, [r7, #0]
 80256be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256c0:	021b      	lsls	r3, r3, #8
 80256c2:	431a      	orrs	r2, r3
 80256c4:	697b      	ldr	r3, [r7, #20]
 80256c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80256ca:	683b      	ldr	r3, [r7, #0]
 80256cc:	695b      	ldr	r3, [r3, #20]
 80256ce:	f003 031f 	and.w	r3, r3, #31
 80256d2:	2201      	movs	r2, #1
 80256d4:	fa02 f303 	lsl.w	r3, r2, r3
 80256d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80256da:	697b      	ldr	r3, [r7, #20]
 80256dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80256e0:	68fb      	ldr	r3, [r7, #12]
 80256e2:	43db      	mvns	r3, r3
 80256e4:	401a      	ands	r2, r3
 80256e6:	697b      	ldr	r3, [r7, #20]
 80256e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80256ec:	683b      	ldr	r3, [r7, #0]
 80256ee:	69db      	ldr	r3, [r3, #28]
 80256f0:	2b00      	cmp	r3, #0
 80256f2:	d123      	bne.n	802573c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80256f4:	697b      	ldr	r3, [r7, #20]
 80256f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80256fa:	68fb      	ldr	r3, [r7, #12]
 80256fc:	43db      	mvns	r3, r3
 80256fe:	401a      	ands	r2, r3
 8025700:	697b      	ldr	r3, [r7, #20]
 8025702:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8025706:	683b      	ldr	r3, [r7, #0]
 8025708:	68db      	ldr	r3, [r3, #12]
 802570a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802570c:	683b      	ldr	r3, [r7, #0]
 802570e:	685b      	ldr	r3, [r3, #4]
 8025710:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025712:	683a      	ldr	r2, [r7, #0]
 8025714:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8025716:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025718:	697b      	ldr	r3, [r7, #20]
 802571a:	3248      	adds	r2, #72	; 0x48
 802571c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8025720:	683b      	ldr	r3, [r7, #0]
 8025722:	689b      	ldr	r3, [r3, #8]
 8025724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8025726:	683b      	ldr	r3, [r7, #0]
 8025728:	681b      	ldr	r3, [r3, #0]
 802572a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802572c:	683b      	ldr	r3, [r7, #0]
 802572e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8025730:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8025732:	6979      	ldr	r1, [r7, #20]
 8025734:	3348      	adds	r3, #72	; 0x48
 8025736:	00db      	lsls	r3, r3, #3
 8025738:	440b      	add	r3, r1
 802573a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 802573c:	683b      	ldr	r3, [r7, #0]
 802573e:	69db      	ldr	r3, [r3, #28]
 8025740:	2b01      	cmp	r3, #1
 8025742:	d122      	bne.n	802578a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8025744:	697b      	ldr	r3, [r7, #20]
 8025746:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 802574a:	68fb      	ldr	r3, [r7, #12]
 802574c:	431a      	orrs	r2, r3
 802574e:	697b      	ldr	r3, [r7, #20]
 8025750:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8025754:	683b      	ldr	r3, [r7, #0]
 8025756:	681b      	ldr	r3, [r3, #0]
 8025758:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 802575a:	683b      	ldr	r3, [r7, #0]
 802575c:	685b      	ldr	r3, [r3, #4]
 802575e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025760:	683a      	ldr	r2, [r7, #0]
 8025762:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8025764:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8025766:	697b      	ldr	r3, [r7, #20]
 8025768:	3248      	adds	r2, #72	; 0x48
 802576a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802576e:	683b      	ldr	r3, [r7, #0]
 8025770:	689b      	ldr	r3, [r3, #8]
 8025772:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8025774:	683b      	ldr	r3, [r7, #0]
 8025776:	68db      	ldr	r3, [r3, #12]
 8025778:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 802577a:	683b      	ldr	r3, [r7, #0]
 802577c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 802577e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8025780:	6979      	ldr	r1, [r7, #20]
 8025782:	3348      	adds	r3, #72	; 0x48
 8025784:	00db      	lsls	r3, r3, #3
 8025786:	440b      	add	r3, r1
 8025788:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 802578a:	683b      	ldr	r3, [r7, #0]
 802578c:	699b      	ldr	r3, [r3, #24]
 802578e:	2b00      	cmp	r3, #0
 8025790:	d109      	bne.n	80257a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8025792:	697b      	ldr	r3, [r7, #20]
 8025794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8025798:	68fb      	ldr	r3, [r7, #12]
 802579a:	43db      	mvns	r3, r3
 802579c:	401a      	ands	r2, r3
 802579e:	697b      	ldr	r3, [r7, #20]
 80257a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80257a4:	e007      	b.n	80257b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80257a6:	697b      	ldr	r3, [r7, #20]
 80257a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80257ac:	68fb      	ldr	r3, [r7, #12]
 80257ae:	431a      	orrs	r2, r3
 80257b0:	697b      	ldr	r3, [r7, #20]
 80257b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80257b6:	683b      	ldr	r3, [r7, #0]
 80257b8:	691b      	ldr	r3, [r3, #16]
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	d109      	bne.n	80257d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80257be:	697b      	ldr	r3, [r7, #20]
 80257c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80257c4:	68fb      	ldr	r3, [r7, #12]
 80257c6:	43db      	mvns	r3, r3
 80257c8:	401a      	ands	r2, r3
 80257ca:	697b      	ldr	r3, [r7, #20]
 80257cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80257d0:	e007      	b.n	80257e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80257d2:	697b      	ldr	r3, [r7, #20]
 80257d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	431a      	orrs	r2, r3
 80257dc:	697b      	ldr	r3, [r7, #20]
 80257de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80257e2:	683b      	ldr	r3, [r7, #0]
 80257e4:	6a1b      	ldr	r3, [r3, #32]
 80257e6:	2b01      	cmp	r3, #1
 80257e8:	d107      	bne.n	80257fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80257ea:	697b      	ldr	r3, [r7, #20]
 80257ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80257f0:	68fb      	ldr	r3, [r7, #12]
 80257f2:	431a      	orrs	r2, r3
 80257f4:	697b      	ldr	r3, [r7, #20]
 80257f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80257fa:	697b      	ldr	r3, [r7, #20]
 80257fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025800:	f023 0201 	bic.w	r2, r3, #1
 8025804:	697b      	ldr	r3, [r7, #20]
 8025806:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 802580a:	2300      	movs	r3, #0
 802580c:	e006      	b.n	802581c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025812:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 802581a:	2301      	movs	r3, #1
  }
}
 802581c:	4618      	mov	r0, r3
 802581e:	371c      	adds	r7, #28
 8025820:	46bd      	mov	sp, r7
 8025822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025826:	4770      	bx	lr
 8025828:	40006400 	.word	0x40006400

0802582c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 802582c:	b580      	push	{r7, lr}
 802582e:	b084      	sub	sp, #16
 8025830:	af00      	add	r7, sp, #0
 8025832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	f893 3020 	ldrb.w	r3, [r3, #32]
 802583a:	b2db      	uxtb	r3, r3
 802583c:	2b01      	cmp	r3, #1
 802583e:	d12e      	bne.n	802589e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8025840:	687b      	ldr	r3, [r7, #4]
 8025842:	2202      	movs	r2, #2
 8025844:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	681a      	ldr	r2, [r3, #0]
 802584e:	687b      	ldr	r3, [r7, #4]
 8025850:	681b      	ldr	r3, [r3, #0]
 8025852:	f022 0201 	bic.w	r2, r2, #1
 8025856:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8025858:	f7ff f880 	bl	802495c <HAL_GetTick>
 802585c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 802585e:	e012      	b.n	8025886 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8025860:	f7ff f87c 	bl	802495c <HAL_GetTick>
 8025864:	4602      	mov	r2, r0
 8025866:	68fb      	ldr	r3, [r7, #12]
 8025868:	1ad3      	subs	r3, r2, r3
 802586a:	2b0a      	cmp	r3, #10
 802586c:	d90b      	bls.n	8025886 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 802587a:	687b      	ldr	r3, [r7, #4]
 802587c:	2205      	movs	r2, #5
 802587e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8025882:	2301      	movs	r3, #1
 8025884:	e012      	b.n	80258ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	681b      	ldr	r3, [r3, #0]
 802588a:	685b      	ldr	r3, [r3, #4]
 802588c:	f003 0301 	and.w	r3, r3, #1
 8025890:	2b00      	cmp	r3, #0
 8025892:	d1e5      	bne.n	8025860 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8025894:	687b      	ldr	r3, [r7, #4]
 8025896:	2200      	movs	r2, #0
 8025898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 802589a:	2300      	movs	r3, #0
 802589c:	e006      	b.n	80258ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80258a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80258aa:	2301      	movs	r3, #1
  }
}
 80258ac:	4618      	mov	r0, r3
 80258ae:	3710      	adds	r7, #16
 80258b0:	46bd      	mov	sp, r7
 80258b2:	bd80      	pop	{r7, pc}

080258b4 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 80258b4:	b480      	push	{r7}
 80258b6:	b087      	sub	sp, #28
 80258b8:	af00      	add	r7, sp, #0
 80258ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80258bc:	2300      	movs	r3, #0
 80258be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 80258c0:	4b1c      	ldr	r3, [pc, #112]	; (8025934 <HAL_CAN_WakeUp+0x80>)
 80258c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80258ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80258cc:	7cfb      	ldrb	r3, [r7, #19]
 80258ce:	2b01      	cmp	r3, #1
 80258d0:	d002      	beq.n	80258d8 <HAL_CAN_WakeUp+0x24>
 80258d2:	7cfb      	ldrb	r3, [r7, #19]
 80258d4:	2b02      	cmp	r3, #2
 80258d6:	d11f      	bne.n	8025918 <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80258d8:	687b      	ldr	r3, [r7, #4]
 80258da:	681b      	ldr	r3, [r3, #0]
 80258dc:	681a      	ldr	r2, [r3, #0]
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	681b      	ldr	r3, [r3, #0]
 80258e2:	f022 0202 	bic.w	r2, r2, #2
 80258e6:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 80258e8:	68fb      	ldr	r3, [r7, #12]
 80258ea:	3301      	adds	r3, #1
 80258ec:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 80258ee:	68fb      	ldr	r3, [r7, #12]
 80258f0:	697a      	ldr	r2, [r7, #20]
 80258f2:	429a      	cmp	r2, r3
 80258f4:	d207      	bcs.n	8025906 <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80258f6:	687b      	ldr	r3, [r7, #4]
 80258f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80258fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025902:	2301      	movs	r3, #1
 8025904:	e00f      	b.n	8025926 <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	685b      	ldr	r3, [r3, #4]
 802590c:	f003 0302 	and.w	r3, r3, #2
 8025910:	2b00      	cmp	r3, #0
 8025912:	d1e9      	bne.n	80258e8 <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 8025914:	2300      	movs	r3, #0
 8025916:	e006      	b.n	8025926 <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025918:	687b      	ldr	r3, [r7, #4]
 802591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802591c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025924:	2301      	movs	r3, #1
  }
}
 8025926:	4618      	mov	r0, r3
 8025928:	371c      	adds	r7, #28
 802592a:	46bd      	mov	sp, r7
 802592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025930:	4770      	bx	lr
 8025932:	bf00      	nop
 8025934:	000f4240 	.word	0x000f4240

08025938 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8025938:	b480      	push	{r7}
 802593a:	b089      	sub	sp, #36	; 0x24
 802593c:	af00      	add	r7, sp, #0
 802593e:	60f8      	str	r0, [r7, #12]
 8025940:	60b9      	str	r1, [r7, #8]
 8025942:	607a      	str	r2, [r7, #4]
 8025944:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8025946:	68fb      	ldr	r3, [r7, #12]
 8025948:	f893 3020 	ldrb.w	r3, [r3, #32]
 802594c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 802594e:	68fb      	ldr	r3, [r7, #12]
 8025950:	681b      	ldr	r3, [r3, #0]
 8025952:	689b      	ldr	r3, [r3, #8]
 8025954:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8025956:	7ffb      	ldrb	r3, [r7, #31]
 8025958:	2b01      	cmp	r3, #1
 802595a:	d003      	beq.n	8025964 <HAL_CAN_AddTxMessage+0x2c>
 802595c:	7ffb      	ldrb	r3, [r7, #31]
 802595e:	2b02      	cmp	r3, #2
 8025960:	f040 80b8 	bne.w	8025ad4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8025964:	69bb      	ldr	r3, [r7, #24]
 8025966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802596a:	2b00      	cmp	r3, #0
 802596c:	d10a      	bne.n	8025984 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802596e:	69bb      	ldr	r3, [r7, #24]
 8025970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8025974:	2b00      	cmp	r3, #0
 8025976:	d105      	bne.n	8025984 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8025978:	69bb      	ldr	r3, [r7, #24]
 802597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 802597e:	2b00      	cmp	r3, #0
 8025980:	f000 80a0 	beq.w	8025ac4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8025984:	69bb      	ldr	r3, [r7, #24]
 8025986:	0e1b      	lsrs	r3, r3, #24
 8025988:	f003 0303 	and.w	r3, r3, #3
 802598c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 802598e:	697b      	ldr	r3, [r7, #20]
 8025990:	2b02      	cmp	r3, #2
 8025992:	d907      	bls.n	80259a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8025994:	68fb      	ldr	r3, [r7, #12]
 8025996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025998:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802599c:	68fb      	ldr	r3, [r7, #12]
 802599e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80259a0:	2301      	movs	r3, #1
 80259a2:	e09e      	b.n	8025ae2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80259a4:	2201      	movs	r2, #1
 80259a6:	697b      	ldr	r3, [r7, #20]
 80259a8:	409a      	lsls	r2, r3
 80259aa:	683b      	ldr	r3, [r7, #0]
 80259ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80259ae:	68bb      	ldr	r3, [r7, #8]
 80259b0:	689b      	ldr	r3, [r3, #8]
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	d10d      	bne.n	80259d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80259b6:	68bb      	ldr	r3, [r7, #8]
 80259b8:	681b      	ldr	r3, [r3, #0]
 80259ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80259bc:	68bb      	ldr	r3, [r7, #8]
 80259be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80259c0:	68f9      	ldr	r1, [r7, #12]
 80259c2:	6809      	ldr	r1, [r1, #0]
 80259c4:	431a      	orrs	r2, r3
 80259c6:	697b      	ldr	r3, [r7, #20]
 80259c8:	3318      	adds	r3, #24
 80259ca:	011b      	lsls	r3, r3, #4
 80259cc:	440b      	add	r3, r1
 80259ce:	601a      	str	r2, [r3, #0]
 80259d0:	e00f      	b.n	80259f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80259d2:	68bb      	ldr	r3, [r7, #8]
 80259d4:	685b      	ldr	r3, [r3, #4]
 80259d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80259d8:	68bb      	ldr	r3, [r7, #8]
 80259da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80259dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80259de:	68bb      	ldr	r3, [r7, #8]
 80259e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80259e2:	68f9      	ldr	r1, [r7, #12]
 80259e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80259e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80259e8:	697b      	ldr	r3, [r7, #20]
 80259ea:	3318      	adds	r3, #24
 80259ec:	011b      	lsls	r3, r3, #4
 80259ee:	440b      	add	r3, r1
 80259f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80259f2:	68fb      	ldr	r3, [r7, #12]
 80259f4:	6819      	ldr	r1, [r3, #0]
 80259f6:	68bb      	ldr	r3, [r7, #8]
 80259f8:	691a      	ldr	r2, [r3, #16]
 80259fa:	697b      	ldr	r3, [r7, #20]
 80259fc:	3318      	adds	r3, #24
 80259fe:	011b      	lsls	r3, r3, #4
 8025a00:	440b      	add	r3, r1
 8025a02:	3304      	adds	r3, #4
 8025a04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8025a06:	68bb      	ldr	r3, [r7, #8]
 8025a08:	7d1b      	ldrb	r3, [r3, #20]
 8025a0a:	2b01      	cmp	r3, #1
 8025a0c:	d111      	bne.n	8025a32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8025a0e:	68fb      	ldr	r3, [r7, #12]
 8025a10:	681a      	ldr	r2, [r3, #0]
 8025a12:	697b      	ldr	r3, [r7, #20]
 8025a14:	3318      	adds	r3, #24
 8025a16:	011b      	lsls	r3, r3, #4
 8025a18:	4413      	add	r3, r2
 8025a1a:	3304      	adds	r3, #4
 8025a1c:	681b      	ldr	r3, [r3, #0]
 8025a1e:	68fa      	ldr	r2, [r7, #12]
 8025a20:	6811      	ldr	r1, [r2, #0]
 8025a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8025a26:	697b      	ldr	r3, [r7, #20]
 8025a28:	3318      	adds	r3, #24
 8025a2a:	011b      	lsls	r3, r3, #4
 8025a2c:	440b      	add	r3, r1
 8025a2e:	3304      	adds	r3, #4
 8025a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	3307      	adds	r3, #7
 8025a36:	781b      	ldrb	r3, [r3, #0]
 8025a38:	061a      	lsls	r2, r3, #24
 8025a3a:	687b      	ldr	r3, [r7, #4]
 8025a3c:	3306      	adds	r3, #6
 8025a3e:	781b      	ldrb	r3, [r3, #0]
 8025a40:	041b      	lsls	r3, r3, #16
 8025a42:	431a      	orrs	r2, r3
 8025a44:	687b      	ldr	r3, [r7, #4]
 8025a46:	3305      	adds	r3, #5
 8025a48:	781b      	ldrb	r3, [r3, #0]
 8025a4a:	021b      	lsls	r3, r3, #8
 8025a4c:	4313      	orrs	r3, r2
 8025a4e:	687a      	ldr	r2, [r7, #4]
 8025a50:	3204      	adds	r2, #4
 8025a52:	7812      	ldrb	r2, [r2, #0]
 8025a54:	4610      	mov	r0, r2
 8025a56:	68fa      	ldr	r2, [r7, #12]
 8025a58:	6811      	ldr	r1, [r2, #0]
 8025a5a:	ea43 0200 	orr.w	r2, r3, r0
 8025a5e:	697b      	ldr	r3, [r7, #20]
 8025a60:	011b      	lsls	r3, r3, #4
 8025a62:	440b      	add	r3, r1
 8025a64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8025a68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8025a6a:	687b      	ldr	r3, [r7, #4]
 8025a6c:	3303      	adds	r3, #3
 8025a6e:	781b      	ldrb	r3, [r3, #0]
 8025a70:	061a      	lsls	r2, r3, #24
 8025a72:	687b      	ldr	r3, [r7, #4]
 8025a74:	3302      	adds	r3, #2
 8025a76:	781b      	ldrb	r3, [r3, #0]
 8025a78:	041b      	lsls	r3, r3, #16
 8025a7a:	431a      	orrs	r2, r3
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	3301      	adds	r3, #1
 8025a80:	781b      	ldrb	r3, [r3, #0]
 8025a82:	021b      	lsls	r3, r3, #8
 8025a84:	4313      	orrs	r3, r2
 8025a86:	687a      	ldr	r2, [r7, #4]
 8025a88:	7812      	ldrb	r2, [r2, #0]
 8025a8a:	4610      	mov	r0, r2
 8025a8c:	68fa      	ldr	r2, [r7, #12]
 8025a8e:	6811      	ldr	r1, [r2, #0]
 8025a90:	ea43 0200 	orr.w	r2, r3, r0
 8025a94:	697b      	ldr	r3, [r7, #20]
 8025a96:	011b      	lsls	r3, r3, #4
 8025a98:	440b      	add	r3, r1
 8025a9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8025a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8025aa0:	68fb      	ldr	r3, [r7, #12]
 8025aa2:	681a      	ldr	r2, [r3, #0]
 8025aa4:	697b      	ldr	r3, [r7, #20]
 8025aa6:	3318      	adds	r3, #24
 8025aa8:	011b      	lsls	r3, r3, #4
 8025aaa:	4413      	add	r3, r2
 8025aac:	681b      	ldr	r3, [r3, #0]
 8025aae:	68fa      	ldr	r2, [r7, #12]
 8025ab0:	6811      	ldr	r1, [r2, #0]
 8025ab2:	f043 0201 	orr.w	r2, r3, #1
 8025ab6:	697b      	ldr	r3, [r7, #20]
 8025ab8:	3318      	adds	r3, #24
 8025aba:	011b      	lsls	r3, r3, #4
 8025abc:	440b      	add	r3, r1
 8025abe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8025ac0:	2300      	movs	r3, #0
 8025ac2:	e00e      	b.n	8025ae2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025ac4:	68fb      	ldr	r3, [r7, #12]
 8025ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025acc:	68fb      	ldr	r3, [r7, #12]
 8025ace:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8025ad0:	2301      	movs	r3, #1
 8025ad2:	e006      	b.n	8025ae2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025ad4:	68fb      	ldr	r3, [r7, #12]
 8025ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ad8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025adc:	68fb      	ldr	r3, [r7, #12]
 8025ade:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025ae0:	2301      	movs	r3, #1
  }
}
 8025ae2:	4618      	mov	r0, r3
 8025ae4:	3724      	adds	r7, #36	; 0x24
 8025ae6:	46bd      	mov	sp, r7
 8025ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aec:	4770      	bx	lr

08025aee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8025aee:	b480      	push	{r7}
 8025af0:	b085      	sub	sp, #20
 8025af2:	af00      	add	r7, sp, #0
 8025af4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8025af6:	2300      	movs	r3, #0
 8025af8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025afa:	687b      	ldr	r3, [r7, #4]
 8025afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025b00:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8025b02:	7afb      	ldrb	r3, [r7, #11]
 8025b04:	2b01      	cmp	r3, #1
 8025b06:	d002      	beq.n	8025b0e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8025b08:	7afb      	ldrb	r3, [r7, #11]
 8025b0a:	2b02      	cmp	r3, #2
 8025b0c:	d11d      	bne.n	8025b4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	681b      	ldr	r3, [r3, #0]
 8025b12:	689b      	ldr	r3, [r3, #8]
 8025b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	d002      	beq.n	8025b22 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8025b1c:	68fb      	ldr	r3, [r7, #12]
 8025b1e:	3301      	adds	r3, #1
 8025b20:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	681b      	ldr	r3, [r3, #0]
 8025b26:	689b      	ldr	r3, [r3, #8]
 8025b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	d002      	beq.n	8025b36 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8025b30:	68fb      	ldr	r3, [r7, #12]
 8025b32:	3301      	adds	r3, #1
 8025b34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	681b      	ldr	r3, [r3, #0]
 8025b3a:	689b      	ldr	r3, [r3, #8]
 8025b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	d002      	beq.n	8025b4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	3301      	adds	r3, #1
 8025b48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8025b4a:	68fb      	ldr	r3, [r7, #12]
}
 8025b4c:	4618      	mov	r0, r3
 8025b4e:	3714      	adds	r7, #20
 8025b50:	46bd      	mov	sp, r7
 8025b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b56:	4770      	bx	lr

08025b58 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8025b58:	b480      	push	{r7}
 8025b5a:	b087      	sub	sp, #28
 8025b5c:	af00      	add	r7, sp, #0
 8025b5e:	60f8      	str	r0, [r7, #12]
 8025b60:	60b9      	str	r1, [r7, #8]
 8025b62:	607a      	str	r2, [r7, #4]
 8025b64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025b66:	68fb      	ldr	r3, [r7, #12]
 8025b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025b6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8025b6e:	7dfb      	ldrb	r3, [r7, #23]
 8025b70:	2b01      	cmp	r3, #1
 8025b72:	d003      	beq.n	8025b7c <HAL_CAN_GetRxMessage+0x24>
 8025b74:	7dfb      	ldrb	r3, [r7, #23]
 8025b76:	2b02      	cmp	r3, #2
 8025b78:	f040 80f3 	bne.w	8025d62 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8025b7c:	68bb      	ldr	r3, [r7, #8]
 8025b7e:	2b00      	cmp	r3, #0
 8025b80:	d10e      	bne.n	8025ba0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8025b82:	68fb      	ldr	r3, [r7, #12]
 8025b84:	681b      	ldr	r3, [r3, #0]
 8025b86:	68db      	ldr	r3, [r3, #12]
 8025b88:	f003 0303 	and.w	r3, r3, #3
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	d116      	bne.n	8025bbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025b94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025b98:	68fb      	ldr	r3, [r7, #12]
 8025b9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025b9c:	2301      	movs	r3, #1
 8025b9e:	e0e7      	b.n	8025d70 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8025ba0:	68fb      	ldr	r3, [r7, #12]
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	691b      	ldr	r3, [r3, #16]
 8025ba6:	f003 0303 	and.w	r3, r3, #3
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d107      	bne.n	8025bbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8025bae:	68fb      	ldr	r3, [r7, #12]
 8025bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025bb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8025bb6:	68fb      	ldr	r3, [r7, #12]
 8025bb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8025bba:	2301      	movs	r3, #1
 8025bbc:	e0d8      	b.n	8025d70 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8025bbe:	68fb      	ldr	r3, [r7, #12]
 8025bc0:	681a      	ldr	r2, [r3, #0]
 8025bc2:	68bb      	ldr	r3, [r7, #8]
 8025bc4:	331b      	adds	r3, #27
 8025bc6:	011b      	lsls	r3, r3, #4
 8025bc8:	4413      	add	r3, r2
 8025bca:	681b      	ldr	r3, [r3, #0]
 8025bcc:	f003 0204 	and.w	r2, r3, #4
 8025bd0:	687b      	ldr	r3, [r7, #4]
 8025bd2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	689b      	ldr	r3, [r3, #8]
 8025bd8:	2b00      	cmp	r3, #0
 8025bda:	d10c      	bne.n	8025bf6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8025bdc:	68fb      	ldr	r3, [r7, #12]
 8025bde:	681a      	ldr	r2, [r3, #0]
 8025be0:	68bb      	ldr	r3, [r7, #8]
 8025be2:	331b      	adds	r3, #27
 8025be4:	011b      	lsls	r3, r3, #4
 8025be6:	4413      	add	r3, r2
 8025be8:	681b      	ldr	r3, [r3, #0]
 8025bea:	0d5b      	lsrs	r3, r3, #21
 8025bec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8025bf0:	687b      	ldr	r3, [r7, #4]
 8025bf2:	601a      	str	r2, [r3, #0]
 8025bf4:	e00b      	b.n	8025c0e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8025bf6:	68fb      	ldr	r3, [r7, #12]
 8025bf8:	681a      	ldr	r2, [r3, #0]
 8025bfa:	68bb      	ldr	r3, [r7, #8]
 8025bfc:	331b      	adds	r3, #27
 8025bfe:	011b      	lsls	r3, r3, #4
 8025c00:	4413      	add	r3, r2
 8025c02:	681b      	ldr	r3, [r3, #0]
 8025c04:	08db      	lsrs	r3, r3, #3
 8025c06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8025c0e:	68fb      	ldr	r3, [r7, #12]
 8025c10:	681a      	ldr	r2, [r3, #0]
 8025c12:	68bb      	ldr	r3, [r7, #8]
 8025c14:	331b      	adds	r3, #27
 8025c16:	011b      	lsls	r3, r3, #4
 8025c18:	4413      	add	r3, r2
 8025c1a:	681b      	ldr	r3, [r3, #0]
 8025c1c:	f003 0202 	and.w	r2, r3, #2
 8025c20:	687b      	ldr	r3, [r7, #4]
 8025c22:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8025c24:	68fb      	ldr	r3, [r7, #12]
 8025c26:	681a      	ldr	r2, [r3, #0]
 8025c28:	68bb      	ldr	r3, [r7, #8]
 8025c2a:	331b      	adds	r3, #27
 8025c2c:	011b      	lsls	r3, r3, #4
 8025c2e:	4413      	add	r3, r2
 8025c30:	3304      	adds	r3, #4
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	f003 020f 	and.w	r2, r3, #15
 8025c38:	687b      	ldr	r3, [r7, #4]
 8025c3a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8025c3c:	68fb      	ldr	r3, [r7, #12]
 8025c3e:	681a      	ldr	r2, [r3, #0]
 8025c40:	68bb      	ldr	r3, [r7, #8]
 8025c42:	331b      	adds	r3, #27
 8025c44:	011b      	lsls	r3, r3, #4
 8025c46:	4413      	add	r3, r2
 8025c48:	3304      	adds	r3, #4
 8025c4a:	681b      	ldr	r3, [r3, #0]
 8025c4c:	0a1b      	lsrs	r3, r3, #8
 8025c4e:	b2da      	uxtb	r2, r3
 8025c50:	687b      	ldr	r3, [r7, #4]
 8025c52:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8025c54:	68fb      	ldr	r3, [r7, #12]
 8025c56:	681a      	ldr	r2, [r3, #0]
 8025c58:	68bb      	ldr	r3, [r7, #8]
 8025c5a:	331b      	adds	r3, #27
 8025c5c:	011b      	lsls	r3, r3, #4
 8025c5e:	4413      	add	r3, r2
 8025c60:	3304      	adds	r3, #4
 8025c62:	681b      	ldr	r3, [r3, #0]
 8025c64:	0c1b      	lsrs	r3, r3, #16
 8025c66:	b29a      	uxth	r2, r3
 8025c68:	687b      	ldr	r3, [r7, #4]
 8025c6a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8025c6c:	68fb      	ldr	r3, [r7, #12]
 8025c6e:	681a      	ldr	r2, [r3, #0]
 8025c70:	68bb      	ldr	r3, [r7, #8]
 8025c72:	011b      	lsls	r3, r3, #4
 8025c74:	4413      	add	r3, r2
 8025c76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025c7a:	681b      	ldr	r3, [r3, #0]
 8025c7c:	b2da      	uxtb	r2, r3
 8025c7e:	683b      	ldr	r3, [r7, #0]
 8025c80:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8025c82:	68fb      	ldr	r3, [r7, #12]
 8025c84:	681a      	ldr	r2, [r3, #0]
 8025c86:	68bb      	ldr	r3, [r7, #8]
 8025c88:	011b      	lsls	r3, r3, #4
 8025c8a:	4413      	add	r3, r2
 8025c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025c90:	681b      	ldr	r3, [r3, #0]
 8025c92:	0a1a      	lsrs	r2, r3, #8
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	3301      	adds	r3, #1
 8025c98:	b2d2      	uxtb	r2, r2
 8025c9a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	681a      	ldr	r2, [r3, #0]
 8025ca0:	68bb      	ldr	r3, [r7, #8]
 8025ca2:	011b      	lsls	r3, r3, #4
 8025ca4:	4413      	add	r3, r2
 8025ca6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025caa:	681b      	ldr	r3, [r3, #0]
 8025cac:	0c1a      	lsrs	r2, r3, #16
 8025cae:	683b      	ldr	r3, [r7, #0]
 8025cb0:	3302      	adds	r3, #2
 8025cb2:	b2d2      	uxtb	r2, r2
 8025cb4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8025cb6:	68fb      	ldr	r3, [r7, #12]
 8025cb8:	681a      	ldr	r2, [r3, #0]
 8025cba:	68bb      	ldr	r3, [r7, #8]
 8025cbc:	011b      	lsls	r3, r3, #4
 8025cbe:	4413      	add	r3, r2
 8025cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8025cc4:	681b      	ldr	r3, [r3, #0]
 8025cc6:	0e1a      	lsrs	r2, r3, #24
 8025cc8:	683b      	ldr	r3, [r7, #0]
 8025cca:	3303      	adds	r3, #3
 8025ccc:	b2d2      	uxtb	r2, r2
 8025cce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8025cd0:	68fb      	ldr	r3, [r7, #12]
 8025cd2:	681a      	ldr	r2, [r3, #0]
 8025cd4:	68bb      	ldr	r3, [r7, #8]
 8025cd6:	011b      	lsls	r3, r3, #4
 8025cd8:	4413      	add	r3, r2
 8025cda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025cde:	681a      	ldr	r2, [r3, #0]
 8025ce0:	683b      	ldr	r3, [r7, #0]
 8025ce2:	3304      	adds	r3, #4
 8025ce4:	b2d2      	uxtb	r2, r2
 8025ce6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8025ce8:	68fb      	ldr	r3, [r7, #12]
 8025cea:	681a      	ldr	r2, [r3, #0]
 8025cec:	68bb      	ldr	r3, [r7, #8]
 8025cee:	011b      	lsls	r3, r3, #4
 8025cf0:	4413      	add	r3, r2
 8025cf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	0a1a      	lsrs	r2, r3, #8
 8025cfa:	683b      	ldr	r3, [r7, #0]
 8025cfc:	3305      	adds	r3, #5
 8025cfe:	b2d2      	uxtb	r2, r2
 8025d00:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8025d02:	68fb      	ldr	r3, [r7, #12]
 8025d04:	681a      	ldr	r2, [r3, #0]
 8025d06:	68bb      	ldr	r3, [r7, #8]
 8025d08:	011b      	lsls	r3, r3, #4
 8025d0a:	4413      	add	r3, r2
 8025d0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	0c1a      	lsrs	r2, r3, #16
 8025d14:	683b      	ldr	r3, [r7, #0]
 8025d16:	3306      	adds	r3, #6
 8025d18:	b2d2      	uxtb	r2, r2
 8025d1a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8025d1c:	68fb      	ldr	r3, [r7, #12]
 8025d1e:	681a      	ldr	r2, [r3, #0]
 8025d20:	68bb      	ldr	r3, [r7, #8]
 8025d22:	011b      	lsls	r3, r3, #4
 8025d24:	4413      	add	r3, r2
 8025d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8025d2a:	681b      	ldr	r3, [r3, #0]
 8025d2c:	0e1a      	lsrs	r2, r3, #24
 8025d2e:	683b      	ldr	r3, [r7, #0]
 8025d30:	3307      	adds	r3, #7
 8025d32:	b2d2      	uxtb	r2, r2
 8025d34:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8025d36:	68bb      	ldr	r3, [r7, #8]
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	d108      	bne.n	8025d4e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8025d3c:	68fb      	ldr	r3, [r7, #12]
 8025d3e:	681b      	ldr	r3, [r3, #0]
 8025d40:	68da      	ldr	r2, [r3, #12]
 8025d42:	68fb      	ldr	r3, [r7, #12]
 8025d44:	681b      	ldr	r3, [r3, #0]
 8025d46:	f042 0220 	orr.w	r2, r2, #32
 8025d4a:	60da      	str	r2, [r3, #12]
 8025d4c:	e007      	b.n	8025d5e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8025d4e:	68fb      	ldr	r3, [r7, #12]
 8025d50:	681b      	ldr	r3, [r3, #0]
 8025d52:	691a      	ldr	r2, [r3, #16]
 8025d54:	68fb      	ldr	r3, [r7, #12]
 8025d56:	681b      	ldr	r3, [r3, #0]
 8025d58:	f042 0220 	orr.w	r2, r2, #32
 8025d5c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8025d5e:	2300      	movs	r3, #0
 8025d60:	e006      	b.n	8025d70 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025d62:	68fb      	ldr	r3, [r7, #12]
 8025d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025d66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025d6a:	68fb      	ldr	r3, [r7, #12]
 8025d6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025d6e:	2301      	movs	r3, #1
  }
}
 8025d70:	4618      	mov	r0, r3
 8025d72:	371c      	adds	r7, #28
 8025d74:	46bd      	mov	sp, r7
 8025d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d7a:	4770      	bx	lr

08025d7c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8025d7c:	b480      	push	{r7}
 8025d7e:	b085      	sub	sp, #20
 8025d80:	af00      	add	r7, sp, #0
 8025d82:	6078      	str	r0, [r7, #4]
 8025d84:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8025d86:	687b      	ldr	r3, [r7, #4]
 8025d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8025d8c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8025d8e:	7bfb      	ldrb	r3, [r7, #15]
 8025d90:	2b01      	cmp	r3, #1
 8025d92:	d002      	beq.n	8025d9a <HAL_CAN_ActivateNotification+0x1e>
 8025d94:	7bfb      	ldrb	r3, [r7, #15]
 8025d96:	2b02      	cmp	r3, #2
 8025d98:	d109      	bne.n	8025dae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8025d9a:	687b      	ldr	r3, [r7, #4]
 8025d9c:	681b      	ldr	r3, [r3, #0]
 8025d9e:	6959      	ldr	r1, [r3, #20]
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	681b      	ldr	r3, [r3, #0]
 8025da4:	683a      	ldr	r2, [r7, #0]
 8025da6:	430a      	orrs	r2, r1
 8025da8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8025daa:	2300      	movs	r3, #0
 8025dac:	e006      	b.n	8025dbc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8025dae:	687b      	ldr	r3, [r7, #4]
 8025db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025db2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8025db6:	687b      	ldr	r3, [r7, #4]
 8025db8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8025dba:	2301      	movs	r3, #1
  }
}
 8025dbc:	4618      	mov	r0, r3
 8025dbe:	3714      	adds	r7, #20
 8025dc0:	46bd      	mov	sp, r7
 8025dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dc6:	4770      	bx	lr

08025dc8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8025dc8:	b580      	push	{r7, lr}
 8025dca:	b08a      	sub	sp, #40	; 0x28
 8025dcc:	af00      	add	r7, sp, #0
 8025dce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8025dd0:	2300      	movs	r3, #0
 8025dd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8025dd4:	687b      	ldr	r3, [r7, #4]
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	695b      	ldr	r3, [r3, #20]
 8025dda:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8025ddc:	687b      	ldr	r3, [r7, #4]
 8025dde:	681b      	ldr	r3, [r3, #0]
 8025de0:	685b      	ldr	r3, [r3, #4]
 8025de2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8025de4:	687b      	ldr	r3, [r7, #4]
 8025de6:	681b      	ldr	r3, [r3, #0]
 8025de8:	689b      	ldr	r3, [r3, #8]
 8025dea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8025dec:	687b      	ldr	r3, [r7, #4]
 8025dee:	681b      	ldr	r3, [r3, #0]
 8025df0:	68db      	ldr	r3, [r3, #12]
 8025df2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8025df4:	687b      	ldr	r3, [r7, #4]
 8025df6:	681b      	ldr	r3, [r3, #0]
 8025df8:	691b      	ldr	r3, [r3, #16]
 8025dfa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8025dfc:	687b      	ldr	r3, [r7, #4]
 8025dfe:	681b      	ldr	r3, [r3, #0]
 8025e00:	699b      	ldr	r3, [r3, #24]
 8025e02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8025e04:	6a3b      	ldr	r3, [r7, #32]
 8025e06:	f003 0301 	and.w	r3, r3, #1
 8025e0a:	2b00      	cmp	r3, #0
 8025e0c:	d07c      	beq.n	8025f08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8025e0e:	69bb      	ldr	r3, [r7, #24]
 8025e10:	f003 0301 	and.w	r3, r3, #1
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	d023      	beq.n	8025e60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	681b      	ldr	r3, [r3, #0]
 8025e1c:	2201      	movs	r2, #1
 8025e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8025e20:	69bb      	ldr	r3, [r7, #24]
 8025e22:	f003 0302 	and.w	r3, r3, #2
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	d003      	beq.n	8025e32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8025e2a:	6878      	ldr	r0, [r7, #4]
 8025e2c:	f000 f983 	bl	8026136 <HAL_CAN_TxMailbox0CompleteCallback>
 8025e30:	e016      	b.n	8025e60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8025e32:	69bb      	ldr	r3, [r7, #24]
 8025e34:	f003 0304 	and.w	r3, r3, #4
 8025e38:	2b00      	cmp	r3, #0
 8025e3a:	d004      	beq.n	8025e46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8025e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8025e42:	627b      	str	r3, [r7, #36]	; 0x24
 8025e44:	e00c      	b.n	8025e60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8025e46:	69bb      	ldr	r3, [r7, #24]
 8025e48:	f003 0308 	and.w	r3, r3, #8
 8025e4c:	2b00      	cmp	r3, #0
 8025e4e:	d004      	beq.n	8025e5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8025e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8025e56:	627b      	str	r3, [r7, #36]	; 0x24
 8025e58:	e002      	b.n	8025e60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8025e5a:	6878      	ldr	r0, [r7, #4]
 8025e5c:	f000 f989 	bl	8026172 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8025e60:	69bb      	ldr	r3, [r7, #24]
 8025e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025e66:	2b00      	cmp	r3, #0
 8025e68:	d024      	beq.n	8025eb4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8025e6a:	687b      	ldr	r3, [r7, #4]
 8025e6c:	681b      	ldr	r3, [r3, #0]
 8025e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8025e74:	69bb      	ldr	r3, [r7, #24]
 8025e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025e7a:	2b00      	cmp	r3, #0
 8025e7c:	d003      	beq.n	8025e86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8025e7e:	6878      	ldr	r0, [r7, #4]
 8025e80:	f000 f963 	bl	802614a <HAL_CAN_TxMailbox1CompleteCallback>
 8025e84:	e016      	b.n	8025eb4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8025e86:	69bb      	ldr	r3, [r7, #24]
 8025e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	d004      	beq.n	8025e9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8025e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025e96:	627b      	str	r3, [r7, #36]	; 0x24
 8025e98:	e00c      	b.n	8025eb4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8025e9a:	69bb      	ldr	r3, [r7, #24]
 8025e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025ea0:	2b00      	cmp	r3, #0
 8025ea2:	d004      	beq.n	8025eae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8025ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8025eac:	e002      	b.n	8025eb4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8025eae:	6878      	ldr	r0, [r7, #4]
 8025eb0:	f000 f969 	bl	8026186 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8025eb4:	69bb      	ldr	r3, [r7, #24]
 8025eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025eba:	2b00      	cmp	r3, #0
 8025ebc:	d024      	beq.n	8025f08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	681b      	ldr	r3, [r3, #0]
 8025ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8025ec8:	69bb      	ldr	r3, [r7, #24]
 8025eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025ece:	2b00      	cmp	r3, #0
 8025ed0:	d003      	beq.n	8025eda <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8025ed2:	6878      	ldr	r0, [r7, #4]
 8025ed4:	f000 f943 	bl	802615e <HAL_CAN_TxMailbox2CompleteCallback>
 8025ed8:	e016      	b.n	8025f08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8025eda:	69bb      	ldr	r3, [r7, #24]
 8025edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	d004      	beq.n	8025eee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8025ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025eea:	627b      	str	r3, [r7, #36]	; 0x24
 8025eec:	e00c      	b.n	8025f08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8025eee:	69bb      	ldr	r3, [r7, #24]
 8025ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	d004      	beq.n	8025f02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8025ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025efe:	627b      	str	r3, [r7, #36]	; 0x24
 8025f00:	e002      	b.n	8025f08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8025f02:	6878      	ldr	r0, [r7, #4]
 8025f04:	f000 f949 	bl	802619a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8025f08:	6a3b      	ldr	r3, [r7, #32]
 8025f0a:	f003 0308 	and.w	r3, r3, #8
 8025f0e:	2b00      	cmp	r3, #0
 8025f10:	d00c      	beq.n	8025f2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8025f12:	697b      	ldr	r3, [r7, #20]
 8025f14:	f003 0310 	and.w	r3, r3, #16
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	d007      	beq.n	8025f2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8025f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8025f22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	681b      	ldr	r3, [r3, #0]
 8025f28:	2210      	movs	r2, #16
 8025f2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8025f2c:	6a3b      	ldr	r3, [r7, #32]
 8025f2e:	f003 0304 	and.w	r3, r3, #4
 8025f32:	2b00      	cmp	r3, #0
 8025f34:	d00b      	beq.n	8025f4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8025f36:	697b      	ldr	r3, [r7, #20]
 8025f38:	f003 0308 	and.w	r3, r3, #8
 8025f3c:	2b00      	cmp	r3, #0
 8025f3e:	d006      	beq.n	8025f4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	2208      	movs	r2, #8
 8025f46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8025f48:	6878      	ldr	r0, [r7, #4]
 8025f4a:	f000 f930 	bl	80261ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8025f4e:	6a3b      	ldr	r3, [r7, #32]
 8025f50:	f003 0302 	and.w	r3, r3, #2
 8025f54:	2b00      	cmp	r3, #0
 8025f56:	d009      	beq.n	8025f6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8025f58:	687b      	ldr	r3, [r7, #4]
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	68db      	ldr	r3, [r3, #12]
 8025f5e:	f003 0303 	and.w	r3, r3, #3
 8025f62:	2b00      	cmp	r3, #0
 8025f64:	d002      	beq.n	8025f6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8025f66:	6878      	ldr	r0, [r7, #4]
 8025f68:	f7ed fe6a 	bl	8013c40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8025f6c:	6a3b      	ldr	r3, [r7, #32]
 8025f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	d00c      	beq.n	8025f90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8025f76:	693b      	ldr	r3, [r7, #16]
 8025f78:	f003 0310 	and.w	r3, r3, #16
 8025f7c:	2b00      	cmp	r3, #0
 8025f7e:	d007      	beq.n	8025f90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8025f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8025f86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	681b      	ldr	r3, [r3, #0]
 8025f8c:	2210      	movs	r2, #16
 8025f8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8025f90:	6a3b      	ldr	r3, [r7, #32]
 8025f92:	f003 0320 	and.w	r3, r3, #32
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d00b      	beq.n	8025fb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8025f9a:	693b      	ldr	r3, [r7, #16]
 8025f9c:	f003 0308 	and.w	r3, r3, #8
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d006      	beq.n	8025fb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8025fa4:	687b      	ldr	r3, [r7, #4]
 8025fa6:	681b      	ldr	r3, [r3, #0]
 8025fa8:	2208      	movs	r2, #8
 8025faa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8025fac:	6878      	ldr	r0, [r7, #4]
 8025fae:	f000 f908 	bl	80261c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8025fb2:	6a3b      	ldr	r3, [r7, #32]
 8025fb4:	f003 0310 	and.w	r3, r3, #16
 8025fb8:	2b00      	cmp	r3, #0
 8025fba:	d009      	beq.n	8025fd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8025fbc:	687b      	ldr	r3, [r7, #4]
 8025fbe:	681b      	ldr	r3, [r3, #0]
 8025fc0:	691b      	ldr	r3, [r3, #16]
 8025fc2:	f003 0303 	and.w	r3, r3, #3
 8025fc6:	2b00      	cmp	r3, #0
 8025fc8:	d002      	beq.n	8025fd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8025fca:	6878      	ldr	r0, [r7, #4]
 8025fcc:	f7ed fee8 	bl	8013da0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8025fd0:	6a3b      	ldr	r3, [r7, #32]
 8025fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025fd6:	2b00      	cmp	r3, #0
 8025fd8:	d00b      	beq.n	8025ff2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8025fda:	69fb      	ldr	r3, [r7, #28]
 8025fdc:	f003 0310 	and.w	r3, r3, #16
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	d006      	beq.n	8025ff2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	681b      	ldr	r3, [r3, #0]
 8025fe8:	2210      	movs	r2, #16
 8025fea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8025fec:	6878      	ldr	r0, [r7, #4]
 8025fee:	f000 f8f2 	bl	80261d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8025ff2:	6a3b      	ldr	r3, [r7, #32]
 8025ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025ff8:	2b00      	cmp	r3, #0
 8025ffa:	d00b      	beq.n	8026014 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8025ffc:	69fb      	ldr	r3, [r7, #28]
 8025ffe:	f003 0308 	and.w	r3, r3, #8
 8026002:	2b00      	cmp	r3, #0
 8026004:	d006      	beq.n	8026014 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8026006:	687b      	ldr	r3, [r7, #4]
 8026008:	681b      	ldr	r3, [r3, #0]
 802600a:	2208      	movs	r2, #8
 802600c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 802600e:	6878      	ldr	r0, [r7, #4]
 8026010:	f000 f8eb 	bl	80261ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8026014:	6a3b      	ldr	r3, [r7, #32]
 8026016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802601a:	2b00      	cmp	r3, #0
 802601c:	d07b      	beq.n	8026116 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 802601e:	69fb      	ldr	r3, [r7, #28]
 8026020:	f003 0304 	and.w	r3, r3, #4
 8026024:	2b00      	cmp	r3, #0
 8026026:	d072      	beq.n	802610e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8026028:	6a3b      	ldr	r3, [r7, #32]
 802602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802602e:	2b00      	cmp	r3, #0
 8026030:	d008      	beq.n	8026044 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8026032:	68fb      	ldr	r3, [r7, #12]
 8026034:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8026038:	2b00      	cmp	r3, #0
 802603a:	d003      	beq.n	8026044 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 802603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802603e:	f043 0301 	orr.w	r3, r3, #1
 8026042:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8026044:	6a3b      	ldr	r3, [r7, #32]
 8026046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802604a:	2b00      	cmp	r3, #0
 802604c:	d008      	beq.n	8026060 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 802604e:	68fb      	ldr	r3, [r7, #12]
 8026050:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8026054:	2b00      	cmp	r3, #0
 8026056:	d003      	beq.n	8026060 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8026058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802605a:	f043 0302 	orr.w	r3, r3, #2
 802605e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8026060:	6a3b      	ldr	r3, [r7, #32]
 8026062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026066:	2b00      	cmp	r3, #0
 8026068:	d008      	beq.n	802607c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 802606a:	68fb      	ldr	r3, [r7, #12]
 802606c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8026070:	2b00      	cmp	r3, #0
 8026072:	d003      	beq.n	802607c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8026074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026076:	f043 0304 	orr.w	r3, r3, #4
 802607a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802607c:	6a3b      	ldr	r3, [r7, #32]
 802607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8026082:	2b00      	cmp	r3, #0
 8026084:	d043      	beq.n	802610e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8026086:	68fb      	ldr	r3, [r7, #12]
 8026088:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802608c:	2b00      	cmp	r3, #0
 802608e:	d03e      	beq.n	802610e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8026090:	68fb      	ldr	r3, [r7, #12]
 8026092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8026096:	2b60      	cmp	r3, #96	; 0x60
 8026098:	d02b      	beq.n	80260f2 <HAL_CAN_IRQHandler+0x32a>
 802609a:	2b60      	cmp	r3, #96	; 0x60
 802609c:	d82e      	bhi.n	80260fc <HAL_CAN_IRQHandler+0x334>
 802609e:	2b50      	cmp	r3, #80	; 0x50
 80260a0:	d022      	beq.n	80260e8 <HAL_CAN_IRQHandler+0x320>
 80260a2:	2b50      	cmp	r3, #80	; 0x50
 80260a4:	d82a      	bhi.n	80260fc <HAL_CAN_IRQHandler+0x334>
 80260a6:	2b40      	cmp	r3, #64	; 0x40
 80260a8:	d019      	beq.n	80260de <HAL_CAN_IRQHandler+0x316>
 80260aa:	2b40      	cmp	r3, #64	; 0x40
 80260ac:	d826      	bhi.n	80260fc <HAL_CAN_IRQHandler+0x334>
 80260ae:	2b30      	cmp	r3, #48	; 0x30
 80260b0:	d010      	beq.n	80260d4 <HAL_CAN_IRQHandler+0x30c>
 80260b2:	2b30      	cmp	r3, #48	; 0x30
 80260b4:	d822      	bhi.n	80260fc <HAL_CAN_IRQHandler+0x334>
 80260b6:	2b10      	cmp	r3, #16
 80260b8:	d002      	beq.n	80260c0 <HAL_CAN_IRQHandler+0x2f8>
 80260ba:	2b20      	cmp	r3, #32
 80260bc:	d005      	beq.n	80260ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80260be:	e01d      	b.n	80260fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80260c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260c2:	f043 0308 	orr.w	r3, r3, #8
 80260c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260c8:	e019      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80260ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260cc:	f043 0310 	orr.w	r3, r3, #16
 80260d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260d2:	e014      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80260d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260d6:	f043 0320 	orr.w	r3, r3, #32
 80260da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260dc:	e00f      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80260de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260e6:	e00a      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80260e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80260ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260f0:	e005      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80260f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80260f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80260fa:	e000      	b.n	80260fe <HAL_CAN_IRQHandler+0x336>
            break;
 80260fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80260fe:	687b      	ldr	r3, [r7, #4]
 8026100:	681b      	ldr	r3, [r3, #0]
 8026102:	699a      	ldr	r2, [r3, #24]
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	681b      	ldr	r3, [r3, #0]
 8026108:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 802610c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	681b      	ldr	r3, [r3, #0]
 8026112:	2204      	movs	r2, #4
 8026114:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8026116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026118:	2b00      	cmp	r3, #0
 802611a:	d008      	beq.n	802612e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 802611c:	687b      	ldr	r3, [r7, #4]
 802611e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026122:	431a      	orrs	r2, r3
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8026128:	6878      	ldr	r0, [r7, #4]
 802612a:	f000 f868 	bl	80261fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 802612e:	bf00      	nop
 8026130:	3728      	adds	r7, #40	; 0x28
 8026132:	46bd      	mov	sp, r7
 8026134:	bd80      	pop	{r7, pc}

08026136 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8026136:	b480      	push	{r7}
 8026138:	b083      	sub	sp, #12
 802613a:	af00      	add	r7, sp, #0
 802613c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 802613e:	bf00      	nop
 8026140:	370c      	adds	r7, #12
 8026142:	46bd      	mov	sp, r7
 8026144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026148:	4770      	bx	lr

0802614a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802614a:	b480      	push	{r7}
 802614c:	b083      	sub	sp, #12
 802614e:	af00      	add	r7, sp, #0
 8026150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8026152:	bf00      	nop
 8026154:	370c      	adds	r7, #12
 8026156:	46bd      	mov	sp, r7
 8026158:	f85d 7b04 	ldr.w	r7, [sp], #4
 802615c:	4770      	bx	lr

0802615e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802615e:	b480      	push	{r7}
 8026160:	b083      	sub	sp, #12
 8026162:	af00      	add	r7, sp, #0
 8026164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8026166:	bf00      	nop
 8026168:	370c      	adds	r7, #12
 802616a:	46bd      	mov	sp, r7
 802616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026170:	4770      	bx	lr

08026172 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8026172:	b480      	push	{r7}
 8026174:	b083      	sub	sp, #12
 8026176:	af00      	add	r7, sp, #0
 8026178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 802617a:	bf00      	nop
 802617c:	370c      	adds	r7, #12
 802617e:	46bd      	mov	sp, r7
 8026180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026184:	4770      	bx	lr

08026186 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8026186:	b480      	push	{r7}
 8026188:	b083      	sub	sp, #12
 802618a:	af00      	add	r7, sp, #0
 802618c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 802618e:	bf00      	nop
 8026190:	370c      	adds	r7, #12
 8026192:	46bd      	mov	sp, r7
 8026194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026198:	4770      	bx	lr

0802619a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 802619a:	b480      	push	{r7}
 802619c:	b083      	sub	sp, #12
 802619e:	af00      	add	r7, sp, #0
 80261a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80261a2:	bf00      	nop
 80261a4:	370c      	adds	r7, #12
 80261a6:	46bd      	mov	sp, r7
 80261a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261ac:	4770      	bx	lr

080261ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80261ae:	b480      	push	{r7}
 80261b0:	b083      	sub	sp, #12
 80261b2:	af00      	add	r7, sp, #0
 80261b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80261b6:	bf00      	nop
 80261b8:	370c      	adds	r7, #12
 80261ba:	46bd      	mov	sp, r7
 80261bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261c0:	4770      	bx	lr

080261c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80261c2:	b480      	push	{r7}
 80261c4:	b083      	sub	sp, #12
 80261c6:	af00      	add	r7, sp, #0
 80261c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80261ca:	bf00      	nop
 80261cc:	370c      	adds	r7, #12
 80261ce:	46bd      	mov	sp, r7
 80261d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261d4:	4770      	bx	lr

080261d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80261d6:	b480      	push	{r7}
 80261d8:	b083      	sub	sp, #12
 80261da:	af00      	add	r7, sp, #0
 80261dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80261de:	bf00      	nop
 80261e0:	370c      	adds	r7, #12
 80261e2:	46bd      	mov	sp, r7
 80261e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261e8:	4770      	bx	lr

080261ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80261ea:	b480      	push	{r7}
 80261ec:	b083      	sub	sp, #12
 80261ee:	af00      	add	r7, sp, #0
 80261f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80261f2:	bf00      	nop
 80261f4:	370c      	adds	r7, #12
 80261f6:	46bd      	mov	sp, r7
 80261f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261fc:	4770      	bx	lr

080261fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80261fe:	b480      	push	{r7}
 8026200:	b083      	sub	sp, #12
 8026202:	af00      	add	r7, sp, #0
 8026204:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8026206:	bf00      	nop
 8026208:	370c      	adds	r7, #12
 802620a:	46bd      	mov	sp, r7
 802620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026210:	4770      	bx	lr
	...

08026214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026214:	b480      	push	{r7}
 8026216:	b085      	sub	sp, #20
 8026218:	af00      	add	r7, sp, #0
 802621a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802621c:	687b      	ldr	r3, [r7, #4]
 802621e:	f003 0307 	and.w	r3, r3, #7
 8026222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026224:	4b0c      	ldr	r3, [pc, #48]	; (8026258 <__NVIC_SetPriorityGrouping+0x44>)
 8026226:	68db      	ldr	r3, [r3, #12]
 8026228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802622a:	68ba      	ldr	r2, [r7, #8]
 802622c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026230:	4013      	ands	r3, r2
 8026232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026234:	68fb      	ldr	r3, [r7, #12]
 8026236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026238:	68bb      	ldr	r3, [r7, #8]
 802623a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802623c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026246:	4a04      	ldr	r2, [pc, #16]	; (8026258 <__NVIC_SetPriorityGrouping+0x44>)
 8026248:	68bb      	ldr	r3, [r7, #8]
 802624a:	60d3      	str	r3, [r2, #12]
}
 802624c:	bf00      	nop
 802624e:	3714      	adds	r7, #20
 8026250:	46bd      	mov	sp, r7
 8026252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026256:	4770      	bx	lr
 8026258:	e000ed00 	.word	0xe000ed00

0802625c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802625c:	b480      	push	{r7}
 802625e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026260:	4b04      	ldr	r3, [pc, #16]	; (8026274 <__NVIC_GetPriorityGrouping+0x18>)
 8026262:	68db      	ldr	r3, [r3, #12]
 8026264:	0a1b      	lsrs	r3, r3, #8
 8026266:	f003 0307 	and.w	r3, r3, #7
}
 802626a:	4618      	mov	r0, r3
 802626c:	46bd      	mov	sp, r7
 802626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026272:	4770      	bx	lr
 8026274:	e000ed00 	.word	0xe000ed00

08026278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026278:	b480      	push	{r7}
 802627a:	b083      	sub	sp, #12
 802627c:	af00      	add	r7, sp, #0
 802627e:	4603      	mov	r3, r0
 8026280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026286:	2b00      	cmp	r3, #0
 8026288:	db0b      	blt.n	80262a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802628a:	79fb      	ldrb	r3, [r7, #7]
 802628c:	f003 021f 	and.w	r2, r3, #31
 8026290:	4907      	ldr	r1, [pc, #28]	; (80262b0 <__NVIC_EnableIRQ+0x38>)
 8026292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026296:	095b      	lsrs	r3, r3, #5
 8026298:	2001      	movs	r0, #1
 802629a:	fa00 f202 	lsl.w	r2, r0, r2
 802629e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80262a2:	bf00      	nop
 80262a4:	370c      	adds	r7, #12
 80262a6:	46bd      	mov	sp, r7
 80262a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262ac:	4770      	bx	lr
 80262ae:	bf00      	nop
 80262b0:	e000e100 	.word	0xe000e100

080262b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80262b4:	b480      	push	{r7}
 80262b6:	b083      	sub	sp, #12
 80262b8:	af00      	add	r7, sp, #0
 80262ba:	4603      	mov	r3, r0
 80262bc:	6039      	str	r1, [r7, #0]
 80262be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80262c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	db0a      	blt.n	80262de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80262c8:	683b      	ldr	r3, [r7, #0]
 80262ca:	b2da      	uxtb	r2, r3
 80262cc:	490c      	ldr	r1, [pc, #48]	; (8026300 <__NVIC_SetPriority+0x4c>)
 80262ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80262d2:	0112      	lsls	r2, r2, #4
 80262d4:	b2d2      	uxtb	r2, r2
 80262d6:	440b      	add	r3, r1
 80262d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80262dc:	e00a      	b.n	80262f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80262de:	683b      	ldr	r3, [r7, #0]
 80262e0:	b2da      	uxtb	r2, r3
 80262e2:	4908      	ldr	r1, [pc, #32]	; (8026304 <__NVIC_SetPriority+0x50>)
 80262e4:	79fb      	ldrb	r3, [r7, #7]
 80262e6:	f003 030f 	and.w	r3, r3, #15
 80262ea:	3b04      	subs	r3, #4
 80262ec:	0112      	lsls	r2, r2, #4
 80262ee:	b2d2      	uxtb	r2, r2
 80262f0:	440b      	add	r3, r1
 80262f2:	761a      	strb	r2, [r3, #24]
}
 80262f4:	bf00      	nop
 80262f6:	370c      	adds	r7, #12
 80262f8:	46bd      	mov	sp, r7
 80262fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262fe:	4770      	bx	lr
 8026300:	e000e100 	.word	0xe000e100
 8026304:	e000ed00 	.word	0xe000ed00

08026308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026308:	b480      	push	{r7}
 802630a:	b089      	sub	sp, #36	; 0x24
 802630c:	af00      	add	r7, sp, #0
 802630e:	60f8      	str	r0, [r7, #12]
 8026310:	60b9      	str	r1, [r7, #8]
 8026312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026314:	68fb      	ldr	r3, [r7, #12]
 8026316:	f003 0307 	and.w	r3, r3, #7
 802631a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802631c:	69fb      	ldr	r3, [r7, #28]
 802631e:	f1c3 0307 	rsb	r3, r3, #7
 8026322:	2b04      	cmp	r3, #4
 8026324:	bf28      	it	cs
 8026326:	2304      	movcs	r3, #4
 8026328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802632a:	69fb      	ldr	r3, [r7, #28]
 802632c:	3304      	adds	r3, #4
 802632e:	2b06      	cmp	r3, #6
 8026330:	d902      	bls.n	8026338 <NVIC_EncodePriority+0x30>
 8026332:	69fb      	ldr	r3, [r7, #28]
 8026334:	3b03      	subs	r3, #3
 8026336:	e000      	b.n	802633a <NVIC_EncodePriority+0x32>
 8026338:	2300      	movs	r3, #0
 802633a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802633c:	f04f 32ff 	mov.w	r2, #4294967295
 8026340:	69bb      	ldr	r3, [r7, #24]
 8026342:	fa02 f303 	lsl.w	r3, r2, r3
 8026346:	43da      	mvns	r2, r3
 8026348:	68bb      	ldr	r3, [r7, #8]
 802634a:	401a      	ands	r2, r3
 802634c:	697b      	ldr	r3, [r7, #20]
 802634e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026350:	f04f 31ff 	mov.w	r1, #4294967295
 8026354:	697b      	ldr	r3, [r7, #20]
 8026356:	fa01 f303 	lsl.w	r3, r1, r3
 802635a:	43d9      	mvns	r1, r3
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026360:	4313      	orrs	r3, r2
         );
}
 8026362:	4618      	mov	r0, r3
 8026364:	3724      	adds	r7, #36	; 0x24
 8026366:	46bd      	mov	sp, r7
 8026368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802636c:	4770      	bx	lr

0802636e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802636e:	b580      	push	{r7, lr}
 8026370:	b082      	sub	sp, #8
 8026372:	af00      	add	r7, sp, #0
 8026374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026376:	6878      	ldr	r0, [r7, #4]
 8026378:	f7ff ff4c 	bl	8026214 <__NVIC_SetPriorityGrouping>
}
 802637c:	bf00      	nop
 802637e:	3708      	adds	r7, #8
 8026380:	46bd      	mov	sp, r7
 8026382:	bd80      	pop	{r7, pc}

08026384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026384:	b580      	push	{r7, lr}
 8026386:	b086      	sub	sp, #24
 8026388:	af00      	add	r7, sp, #0
 802638a:	4603      	mov	r3, r0
 802638c:	60b9      	str	r1, [r7, #8]
 802638e:	607a      	str	r2, [r7, #4]
 8026390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026392:	2300      	movs	r3, #0
 8026394:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026396:	f7ff ff61 	bl	802625c <__NVIC_GetPriorityGrouping>
 802639a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802639c:	687a      	ldr	r2, [r7, #4]
 802639e:	68b9      	ldr	r1, [r7, #8]
 80263a0:	6978      	ldr	r0, [r7, #20]
 80263a2:	f7ff ffb1 	bl	8026308 <NVIC_EncodePriority>
 80263a6:	4602      	mov	r2, r0
 80263a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80263ac:	4611      	mov	r1, r2
 80263ae:	4618      	mov	r0, r3
 80263b0:	f7ff ff80 	bl	80262b4 <__NVIC_SetPriority>
}
 80263b4:	bf00      	nop
 80263b6:	3718      	adds	r7, #24
 80263b8:	46bd      	mov	sp, r7
 80263ba:	bd80      	pop	{r7, pc}

080263bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80263bc:	b580      	push	{r7, lr}
 80263be:	b082      	sub	sp, #8
 80263c0:	af00      	add	r7, sp, #0
 80263c2:	4603      	mov	r3, r0
 80263c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80263c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80263ca:	4618      	mov	r0, r3
 80263cc:	f7ff ff54 	bl	8026278 <__NVIC_EnableIRQ>
}
 80263d0:	bf00      	nop
 80263d2:	3708      	adds	r7, #8
 80263d4:	46bd      	mov	sp, r7
 80263d6:	bd80      	pop	{r7, pc}

080263d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80263d8:	b580      	push	{r7, lr}
 80263da:	b086      	sub	sp, #24
 80263dc:	af00      	add	r7, sp, #0
 80263de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80263e0:	2300      	movs	r3, #0
 80263e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80263e4:	f7fe faba 	bl	802495c <HAL_GetTick>
 80263e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	2b00      	cmp	r3, #0
 80263ee:	d101      	bne.n	80263f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80263f0:	2301      	movs	r3, #1
 80263f2:	e099      	b.n	8026528 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	2202      	movs	r2, #2
 80263f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	2200      	movs	r2, #0
 8026400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026404:	687b      	ldr	r3, [r7, #4]
 8026406:	681b      	ldr	r3, [r3, #0]
 8026408:	681a      	ldr	r2, [r3, #0]
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	681b      	ldr	r3, [r3, #0]
 802640e:	f022 0201 	bic.w	r2, r2, #1
 8026412:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026414:	e00f      	b.n	8026436 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026416:	f7fe faa1 	bl	802495c <HAL_GetTick>
 802641a:	4602      	mov	r2, r0
 802641c:	693b      	ldr	r3, [r7, #16]
 802641e:	1ad3      	subs	r3, r2, r3
 8026420:	2b05      	cmp	r3, #5
 8026422:	d908      	bls.n	8026436 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026424:	687b      	ldr	r3, [r7, #4]
 8026426:	2220      	movs	r2, #32
 8026428:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	2203      	movs	r2, #3
 802642e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026432:	2303      	movs	r3, #3
 8026434:	e078      	b.n	8026528 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026436:	687b      	ldr	r3, [r7, #4]
 8026438:	681b      	ldr	r3, [r3, #0]
 802643a:	681b      	ldr	r3, [r3, #0]
 802643c:	f003 0301 	and.w	r3, r3, #1
 8026440:	2b00      	cmp	r3, #0
 8026442:	d1e8      	bne.n	8026416 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	681b      	ldr	r3, [r3, #0]
 8026448:	681b      	ldr	r3, [r3, #0]
 802644a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802644c:	697a      	ldr	r2, [r7, #20]
 802644e:	4b38      	ldr	r3, [pc, #224]	; (8026530 <HAL_DMA_Init+0x158>)
 8026450:	4013      	ands	r3, r2
 8026452:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026454:	687b      	ldr	r3, [r7, #4]
 8026456:	685a      	ldr	r2, [r3, #4]
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	689b      	ldr	r3, [r3, #8]
 802645c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	691b      	ldr	r3, [r3, #16]
 8026468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802646e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026470:	687b      	ldr	r3, [r7, #4]
 8026472:	699b      	ldr	r3, [r3, #24]
 8026474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026476:	687b      	ldr	r3, [r7, #4]
 8026478:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802647a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	6a1b      	ldr	r3, [r3, #32]
 8026480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026482:	697a      	ldr	r2, [r7, #20]
 8026484:	4313      	orrs	r3, r2
 8026486:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802648c:	2b04      	cmp	r3, #4
 802648e:	d107      	bne.n	80264a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026494:	687b      	ldr	r3, [r7, #4]
 8026496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026498:	4313      	orrs	r3, r2
 802649a:	697a      	ldr	r2, [r7, #20]
 802649c:	4313      	orrs	r3, r2
 802649e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	681b      	ldr	r3, [r3, #0]
 80264a4:	697a      	ldr	r2, [r7, #20]
 80264a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	681b      	ldr	r3, [r3, #0]
 80264ac:	695b      	ldr	r3, [r3, #20]
 80264ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80264b0:	697b      	ldr	r3, [r7, #20]
 80264b2:	f023 0307 	bic.w	r3, r3, #7
 80264b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80264b8:	687b      	ldr	r3, [r7, #4]
 80264ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264bc:	697a      	ldr	r2, [r7, #20]
 80264be:	4313      	orrs	r3, r2
 80264c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264c6:	2b04      	cmp	r3, #4
 80264c8:	d117      	bne.n	80264fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80264ce:	697a      	ldr	r2, [r7, #20]
 80264d0:	4313      	orrs	r3, r2
 80264d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80264d8:	2b00      	cmp	r3, #0
 80264da:	d00e      	beq.n	80264fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80264dc:	6878      	ldr	r0, [r7, #4]
 80264de:	f000 fa6f 	bl	80269c0 <DMA_CheckFifoParam>
 80264e2:	4603      	mov	r3, r0
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	d008      	beq.n	80264fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	2240      	movs	r2, #64	; 0x40
 80264ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	2201      	movs	r2, #1
 80264f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80264f6:	2301      	movs	r3, #1
 80264f8:	e016      	b.n	8026528 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80264fa:	687b      	ldr	r3, [r7, #4]
 80264fc:	681b      	ldr	r3, [r3, #0]
 80264fe:	697a      	ldr	r2, [r7, #20]
 8026500:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026502:	6878      	ldr	r0, [r7, #4]
 8026504:	f000 fa26 	bl	8026954 <DMA_CalcBaseAndBitshift>
 8026508:	4603      	mov	r3, r0
 802650a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802650c:	687b      	ldr	r3, [r7, #4]
 802650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026510:	223f      	movs	r2, #63	; 0x3f
 8026512:	409a      	lsls	r2, r3
 8026514:	68fb      	ldr	r3, [r7, #12]
 8026516:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026518:	687b      	ldr	r3, [r7, #4]
 802651a:	2200      	movs	r2, #0
 802651c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	2201      	movs	r2, #1
 8026522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026526:	2300      	movs	r3, #0
}
 8026528:	4618      	mov	r0, r3
 802652a:	3718      	adds	r7, #24
 802652c:	46bd      	mov	sp, r7
 802652e:	bd80      	pop	{r7, pc}
 8026530:	f010803f 	.word	0xf010803f

08026534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026534:	b580      	push	{r7, lr}
 8026536:	b086      	sub	sp, #24
 8026538:	af00      	add	r7, sp, #0
 802653a:	60f8      	str	r0, [r7, #12]
 802653c:	60b9      	str	r1, [r7, #8]
 802653e:	607a      	str	r2, [r7, #4]
 8026540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026542:	2300      	movs	r3, #0
 8026544:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026546:	68fb      	ldr	r3, [r7, #12]
 8026548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802654a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802654c:	68fb      	ldr	r3, [r7, #12]
 802654e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026552:	2b01      	cmp	r3, #1
 8026554:	d101      	bne.n	802655a <HAL_DMA_Start_IT+0x26>
 8026556:	2302      	movs	r3, #2
 8026558:	e040      	b.n	80265dc <HAL_DMA_Start_IT+0xa8>
 802655a:	68fb      	ldr	r3, [r7, #12]
 802655c:	2201      	movs	r2, #1
 802655e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026562:	68fb      	ldr	r3, [r7, #12]
 8026564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026568:	b2db      	uxtb	r3, r3
 802656a:	2b01      	cmp	r3, #1
 802656c:	d12f      	bne.n	80265ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802656e:	68fb      	ldr	r3, [r7, #12]
 8026570:	2202      	movs	r2, #2
 8026572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026576:	68fb      	ldr	r3, [r7, #12]
 8026578:	2200      	movs	r2, #0
 802657a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802657c:	683b      	ldr	r3, [r7, #0]
 802657e:	687a      	ldr	r2, [r7, #4]
 8026580:	68b9      	ldr	r1, [r7, #8]
 8026582:	68f8      	ldr	r0, [r7, #12]
 8026584:	f000 f9b8 	bl	80268f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026588:	68fb      	ldr	r3, [r7, #12]
 802658a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802658c:	223f      	movs	r2, #63	; 0x3f
 802658e:	409a      	lsls	r2, r3
 8026590:	693b      	ldr	r3, [r7, #16]
 8026592:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026594:	68fb      	ldr	r3, [r7, #12]
 8026596:	681b      	ldr	r3, [r3, #0]
 8026598:	681a      	ldr	r2, [r3, #0]
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	f042 0216 	orr.w	r2, r2, #22
 80265a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80265a4:	68fb      	ldr	r3, [r7, #12]
 80265a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	d007      	beq.n	80265bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80265ac:	68fb      	ldr	r3, [r7, #12]
 80265ae:	681b      	ldr	r3, [r3, #0]
 80265b0:	681a      	ldr	r2, [r3, #0]
 80265b2:	68fb      	ldr	r3, [r7, #12]
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	f042 0208 	orr.w	r2, r2, #8
 80265ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80265bc:	68fb      	ldr	r3, [r7, #12]
 80265be:	681b      	ldr	r3, [r3, #0]
 80265c0:	681a      	ldr	r2, [r3, #0]
 80265c2:	68fb      	ldr	r3, [r7, #12]
 80265c4:	681b      	ldr	r3, [r3, #0]
 80265c6:	f042 0201 	orr.w	r2, r2, #1
 80265ca:	601a      	str	r2, [r3, #0]
 80265cc:	e005      	b.n	80265da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	2200      	movs	r2, #0
 80265d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80265d6:	2302      	movs	r3, #2
 80265d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80265da:	7dfb      	ldrb	r3, [r7, #23]
}
 80265dc:	4618      	mov	r0, r3
 80265de:	3718      	adds	r7, #24
 80265e0:	46bd      	mov	sp, r7
 80265e2:	bd80      	pop	{r7, pc}

080265e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80265e4:	b580      	push	{r7, lr}
 80265e6:	b086      	sub	sp, #24
 80265e8:	af00      	add	r7, sp, #0
 80265ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80265ec:	2300      	movs	r3, #0
 80265ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80265f0:	4b92      	ldr	r3, [pc, #584]	; (802683c <HAL_DMA_IRQHandler+0x258>)
 80265f2:	681b      	ldr	r3, [r3, #0]
 80265f4:	4a92      	ldr	r2, [pc, #584]	; (8026840 <HAL_DMA_IRQHandler+0x25c>)
 80265f6:	fba2 2303 	umull	r2, r3, r2, r3
 80265fa:	0a9b      	lsrs	r3, r3, #10
 80265fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026604:	693b      	ldr	r3, [r7, #16]
 8026606:	681b      	ldr	r3, [r3, #0]
 8026608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802660e:	2208      	movs	r2, #8
 8026610:	409a      	lsls	r2, r3
 8026612:	68fb      	ldr	r3, [r7, #12]
 8026614:	4013      	ands	r3, r2
 8026616:	2b00      	cmp	r3, #0
 8026618:	d01a      	beq.n	8026650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	681b      	ldr	r3, [r3, #0]
 8026620:	f003 0304 	and.w	r3, r3, #4
 8026624:	2b00      	cmp	r3, #0
 8026626:	d013      	beq.n	8026650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026628:	687b      	ldr	r3, [r7, #4]
 802662a:	681b      	ldr	r3, [r3, #0]
 802662c:	681a      	ldr	r2, [r3, #0]
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	681b      	ldr	r3, [r3, #0]
 8026632:	f022 0204 	bic.w	r2, r2, #4
 8026636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8026638:	687b      	ldr	r3, [r7, #4]
 802663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802663c:	2208      	movs	r2, #8
 802663e:	409a      	lsls	r2, r3
 8026640:	693b      	ldr	r3, [r7, #16]
 8026642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8026644:	687b      	ldr	r3, [r7, #4]
 8026646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026648:	f043 0201 	orr.w	r2, r3, #1
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8026650:	687b      	ldr	r3, [r7, #4]
 8026652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026654:	2201      	movs	r2, #1
 8026656:	409a      	lsls	r2, r3
 8026658:	68fb      	ldr	r3, [r7, #12]
 802665a:	4013      	ands	r3, r2
 802665c:	2b00      	cmp	r3, #0
 802665e:	d012      	beq.n	8026686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8026660:	687b      	ldr	r3, [r7, #4]
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	695b      	ldr	r3, [r3, #20]
 8026666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802666a:	2b00      	cmp	r3, #0
 802666c:	d00b      	beq.n	8026686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026672:	2201      	movs	r2, #1
 8026674:	409a      	lsls	r2, r3
 8026676:	693b      	ldr	r3, [r7, #16]
 8026678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802667e:	f043 0202 	orr.w	r2, r3, #2
 8026682:	687b      	ldr	r3, [r7, #4]
 8026684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802668a:	2204      	movs	r2, #4
 802668c:	409a      	lsls	r2, r3
 802668e:	68fb      	ldr	r3, [r7, #12]
 8026690:	4013      	ands	r3, r2
 8026692:	2b00      	cmp	r3, #0
 8026694:	d012      	beq.n	80266bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8026696:	687b      	ldr	r3, [r7, #4]
 8026698:	681b      	ldr	r3, [r3, #0]
 802669a:	681b      	ldr	r3, [r3, #0]
 802669c:	f003 0302 	and.w	r3, r3, #2
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	d00b      	beq.n	80266bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80266a4:	687b      	ldr	r3, [r7, #4]
 80266a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80266a8:	2204      	movs	r2, #4
 80266aa:	409a      	lsls	r2, r3
 80266ac:	693b      	ldr	r3, [r7, #16]
 80266ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80266b4:	f043 0204 	orr.w	r2, r3, #4
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80266bc:	687b      	ldr	r3, [r7, #4]
 80266be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80266c0:	2210      	movs	r2, #16
 80266c2:	409a      	lsls	r2, r3
 80266c4:	68fb      	ldr	r3, [r7, #12]
 80266c6:	4013      	ands	r3, r2
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	d043      	beq.n	8026754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80266cc:	687b      	ldr	r3, [r7, #4]
 80266ce:	681b      	ldr	r3, [r3, #0]
 80266d0:	681b      	ldr	r3, [r3, #0]
 80266d2:	f003 0308 	and.w	r3, r3, #8
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	d03c      	beq.n	8026754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80266de:	2210      	movs	r2, #16
 80266e0:	409a      	lsls	r2, r3
 80266e2:	693b      	ldr	r3, [r7, #16]
 80266e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80266e6:	687b      	ldr	r3, [r7, #4]
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	d018      	beq.n	8026726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80266f4:	687b      	ldr	r3, [r7, #4]
 80266f6:	681b      	ldr	r3, [r3, #0]
 80266f8:	681b      	ldr	r3, [r3, #0]
 80266fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80266fe:	2b00      	cmp	r3, #0
 8026700:	d108      	bne.n	8026714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8026702:	687b      	ldr	r3, [r7, #4]
 8026704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026706:	2b00      	cmp	r3, #0
 8026708:	d024      	beq.n	8026754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802670e:	6878      	ldr	r0, [r7, #4]
 8026710:	4798      	blx	r3
 8026712:	e01f      	b.n	8026754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8026714:	687b      	ldr	r3, [r7, #4]
 8026716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026718:	2b00      	cmp	r3, #0
 802671a:	d01b      	beq.n	8026754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026720:	6878      	ldr	r0, [r7, #4]
 8026722:	4798      	blx	r3
 8026724:	e016      	b.n	8026754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	681b      	ldr	r3, [r3, #0]
 802672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026730:	2b00      	cmp	r3, #0
 8026732:	d107      	bne.n	8026744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026734:	687b      	ldr	r3, [r7, #4]
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	681a      	ldr	r2, [r3, #0]
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	f022 0208 	bic.w	r2, r2, #8
 8026742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8026744:	687b      	ldr	r3, [r7, #4]
 8026746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026748:	2b00      	cmp	r3, #0
 802674a:	d003      	beq.n	8026754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026750:	6878      	ldr	r0, [r7, #4]
 8026752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8026754:	687b      	ldr	r3, [r7, #4]
 8026756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026758:	2220      	movs	r2, #32
 802675a:	409a      	lsls	r2, r3
 802675c:	68fb      	ldr	r3, [r7, #12]
 802675e:	4013      	ands	r3, r2
 8026760:	2b00      	cmp	r3, #0
 8026762:	f000 808e 	beq.w	8026882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8026766:	687b      	ldr	r3, [r7, #4]
 8026768:	681b      	ldr	r3, [r3, #0]
 802676a:	681b      	ldr	r3, [r3, #0]
 802676c:	f003 0310 	and.w	r3, r3, #16
 8026770:	2b00      	cmp	r3, #0
 8026772:	f000 8086 	beq.w	8026882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802677a:	2220      	movs	r2, #32
 802677c:	409a      	lsls	r2, r3
 802677e:	693b      	ldr	r3, [r7, #16]
 8026780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026788:	b2db      	uxtb	r3, r3
 802678a:	2b05      	cmp	r3, #5
 802678c:	d136      	bne.n	80267fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	681b      	ldr	r3, [r3, #0]
 8026792:	681a      	ldr	r2, [r3, #0]
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	f022 0216 	bic.w	r2, r2, #22
 802679c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	681b      	ldr	r3, [r3, #0]
 80267a2:	695a      	ldr	r2, [r3, #20]
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80267ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d103      	bne.n	80267be <HAL_DMA_IRQHandler+0x1da>
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	d007      	beq.n	80267ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	681b      	ldr	r3, [r3, #0]
 80267c2:	681a      	ldr	r2, [r3, #0]
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	681b      	ldr	r3, [r3, #0]
 80267c8:	f022 0208 	bic.w	r2, r2, #8
 80267cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80267ce:	687b      	ldr	r3, [r7, #4]
 80267d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80267d2:	223f      	movs	r2, #63	; 0x3f
 80267d4:	409a      	lsls	r2, r3
 80267d6:	693b      	ldr	r3, [r7, #16]
 80267d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	2201      	movs	r2, #1
 80267de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	2200      	movs	r2, #0
 80267e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d07d      	beq.n	80268ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80267f6:	6878      	ldr	r0, [r7, #4]
 80267f8:	4798      	blx	r3
        }
        return;
 80267fa:	e078      	b.n	80268ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	681b      	ldr	r3, [r3, #0]
 8026800:	681b      	ldr	r3, [r3, #0]
 8026802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026806:	2b00      	cmp	r3, #0
 8026808:	d01c      	beq.n	8026844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	681b      	ldr	r3, [r3, #0]
 8026810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026814:	2b00      	cmp	r3, #0
 8026816:	d108      	bne.n	802682a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8026818:	687b      	ldr	r3, [r7, #4]
 802681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802681c:	2b00      	cmp	r3, #0
 802681e:	d030      	beq.n	8026882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026824:	6878      	ldr	r0, [r7, #4]
 8026826:	4798      	blx	r3
 8026828:	e02b      	b.n	8026882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802682e:	2b00      	cmp	r3, #0
 8026830:	d027      	beq.n	8026882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8026832:	687b      	ldr	r3, [r7, #4]
 8026834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026836:	6878      	ldr	r0, [r7, #4]
 8026838:	4798      	blx	r3
 802683a:	e022      	b.n	8026882 <HAL_DMA_IRQHandler+0x29e>
 802683c:	20000084 	.word	0x20000084
 8026840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	681b      	ldr	r3, [r3, #0]
 802684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802684e:	2b00      	cmp	r3, #0
 8026850:	d10f      	bne.n	8026872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	681b      	ldr	r3, [r3, #0]
 8026856:	681a      	ldr	r2, [r3, #0]
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	f022 0210 	bic.w	r2, r2, #16
 8026860:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	2201      	movs	r2, #1
 8026866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802686a:	687b      	ldr	r3, [r7, #4]
 802686c:	2200      	movs	r2, #0
 802686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026876:	2b00      	cmp	r3, #0
 8026878:	d003      	beq.n	8026882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802687e:	6878      	ldr	r0, [r7, #4]
 8026880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026886:	2b00      	cmp	r3, #0
 8026888:	d032      	beq.n	80268f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802688a:	687b      	ldr	r3, [r7, #4]
 802688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802688e:	f003 0301 	and.w	r3, r3, #1
 8026892:	2b00      	cmp	r3, #0
 8026894:	d022      	beq.n	80268dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	2205      	movs	r2, #5
 802689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	681a      	ldr	r2, [r3, #0]
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	681b      	ldr	r3, [r3, #0]
 80268a8:	f022 0201 	bic.w	r2, r2, #1
 80268ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80268ae:	68bb      	ldr	r3, [r7, #8]
 80268b0:	3301      	adds	r3, #1
 80268b2:	60bb      	str	r3, [r7, #8]
 80268b4:	697a      	ldr	r2, [r7, #20]
 80268b6:	429a      	cmp	r2, r3
 80268b8:	d307      	bcc.n	80268ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	681b      	ldr	r3, [r3, #0]
 80268be:	681b      	ldr	r3, [r3, #0]
 80268c0:	f003 0301 	and.w	r3, r3, #1
 80268c4:	2b00      	cmp	r3, #0
 80268c6:	d1f2      	bne.n	80268ae <HAL_DMA_IRQHandler+0x2ca>
 80268c8:	e000      	b.n	80268cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80268ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	2201      	movs	r2, #1
 80268d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	2200      	movs	r2, #0
 80268d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80268e0:	2b00      	cmp	r3, #0
 80268e2:	d005      	beq.n	80268f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80268e8:	6878      	ldr	r0, [r7, #4]
 80268ea:	4798      	blx	r3
 80268ec:	e000      	b.n	80268f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80268ee:	bf00      	nop
    }
  }
}
 80268f0:	3718      	adds	r7, #24
 80268f2:	46bd      	mov	sp, r7
 80268f4:	bd80      	pop	{r7, pc}
 80268f6:	bf00      	nop

080268f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80268f8:	b480      	push	{r7}
 80268fa:	b085      	sub	sp, #20
 80268fc:	af00      	add	r7, sp, #0
 80268fe:	60f8      	str	r0, [r7, #12]
 8026900:	60b9      	str	r1, [r7, #8]
 8026902:	607a      	str	r2, [r7, #4]
 8026904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8026906:	68fb      	ldr	r3, [r7, #12]
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	681a      	ldr	r2, [r3, #0]
 802690c:	68fb      	ldr	r3, [r7, #12]
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8026914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8026916:	68fb      	ldr	r3, [r7, #12]
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	683a      	ldr	r2, [r7, #0]
 802691c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802691e:	68fb      	ldr	r3, [r7, #12]
 8026920:	689b      	ldr	r3, [r3, #8]
 8026922:	2b40      	cmp	r3, #64	; 0x40
 8026924:	d108      	bne.n	8026938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8026926:	68fb      	ldr	r3, [r7, #12]
 8026928:	681b      	ldr	r3, [r3, #0]
 802692a:	687a      	ldr	r2, [r7, #4]
 802692c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802692e:	68fb      	ldr	r3, [r7, #12]
 8026930:	681b      	ldr	r3, [r3, #0]
 8026932:	68ba      	ldr	r2, [r7, #8]
 8026934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8026936:	e007      	b.n	8026948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8026938:	68fb      	ldr	r3, [r7, #12]
 802693a:	681b      	ldr	r3, [r3, #0]
 802693c:	68ba      	ldr	r2, [r7, #8]
 802693e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	687a      	ldr	r2, [r7, #4]
 8026946:	60da      	str	r2, [r3, #12]
}
 8026948:	bf00      	nop
 802694a:	3714      	adds	r7, #20
 802694c:	46bd      	mov	sp, r7
 802694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026952:	4770      	bx	lr

08026954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8026954:	b480      	push	{r7}
 8026956:	b085      	sub	sp, #20
 8026958:	af00      	add	r7, sp, #0
 802695a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	681b      	ldr	r3, [r3, #0]
 8026960:	b2db      	uxtb	r3, r3
 8026962:	3b10      	subs	r3, #16
 8026964:	4a14      	ldr	r2, [pc, #80]	; (80269b8 <DMA_CalcBaseAndBitshift+0x64>)
 8026966:	fba2 2303 	umull	r2, r3, r2, r3
 802696a:	091b      	lsrs	r3, r3, #4
 802696c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802696e:	4a13      	ldr	r2, [pc, #76]	; (80269bc <DMA_CalcBaseAndBitshift+0x68>)
 8026970:	68fb      	ldr	r3, [r7, #12]
 8026972:	4413      	add	r3, r2
 8026974:	781b      	ldrb	r3, [r3, #0]
 8026976:	461a      	mov	r2, r3
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 802697c:	68fb      	ldr	r3, [r7, #12]
 802697e:	2b03      	cmp	r3, #3
 8026980:	d909      	bls.n	8026996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	681b      	ldr	r3, [r3, #0]
 8026986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802698a:	f023 0303 	bic.w	r3, r3, #3
 802698e:	1d1a      	adds	r2, r3, #4
 8026990:	687b      	ldr	r3, [r7, #4]
 8026992:	659a      	str	r2, [r3, #88]	; 0x58
 8026994:	e007      	b.n	80269a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	681b      	ldr	r3, [r3, #0]
 802699a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802699e:	f023 0303 	bic.w	r3, r3, #3
 80269a2:	687a      	ldr	r2, [r7, #4]
 80269a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80269aa:	4618      	mov	r0, r3
 80269ac:	3714      	adds	r7, #20
 80269ae:	46bd      	mov	sp, r7
 80269b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269b4:	4770      	bx	lr
 80269b6:	bf00      	nop
 80269b8:	aaaaaaab 	.word	0xaaaaaaab
 80269bc:	0802fce0 	.word	0x0802fce0

080269c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80269c0:	b480      	push	{r7}
 80269c2:	b085      	sub	sp, #20
 80269c4:	af00      	add	r7, sp, #0
 80269c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80269c8:	2300      	movs	r3, #0
 80269ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80269cc:	687b      	ldr	r3, [r7, #4]
 80269ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80269d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	699b      	ldr	r3, [r3, #24]
 80269d6:	2b00      	cmp	r3, #0
 80269d8:	d11f      	bne.n	8026a1a <DMA_CheckFifoParam+0x5a>
 80269da:	68bb      	ldr	r3, [r7, #8]
 80269dc:	2b03      	cmp	r3, #3
 80269de:	d856      	bhi.n	8026a8e <DMA_CheckFifoParam+0xce>
 80269e0:	a201      	add	r2, pc, #4	; (adr r2, 80269e8 <DMA_CheckFifoParam+0x28>)
 80269e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80269e6:	bf00      	nop
 80269e8:	080269f9 	.word	0x080269f9
 80269ec:	08026a0b 	.word	0x08026a0b
 80269f0:	080269f9 	.word	0x080269f9
 80269f4:	08026a8f 	.word	0x08026a8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80269fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	d046      	beq.n	8026a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8026a04:	2301      	movs	r3, #1
 8026a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026a08:	e043      	b.n	8026a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8026a12:	d140      	bne.n	8026a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8026a14:	2301      	movs	r3, #1
 8026a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026a18:	e03d      	b.n	8026a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8026a1a:	687b      	ldr	r3, [r7, #4]
 8026a1c:	699b      	ldr	r3, [r3, #24]
 8026a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026a22:	d121      	bne.n	8026a68 <DMA_CheckFifoParam+0xa8>
 8026a24:	68bb      	ldr	r3, [r7, #8]
 8026a26:	2b03      	cmp	r3, #3
 8026a28:	d837      	bhi.n	8026a9a <DMA_CheckFifoParam+0xda>
 8026a2a:	a201      	add	r2, pc, #4	; (adr r2, 8026a30 <DMA_CheckFifoParam+0x70>)
 8026a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026a30:	08026a41 	.word	0x08026a41
 8026a34:	08026a47 	.word	0x08026a47
 8026a38:	08026a41 	.word	0x08026a41
 8026a3c:	08026a59 	.word	0x08026a59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8026a40:	2301      	movs	r3, #1
 8026a42:	73fb      	strb	r3, [r7, #15]
      break;
 8026a44:	e030      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	d025      	beq.n	8026a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8026a52:	2301      	movs	r3, #1
 8026a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8026a56:	e022      	b.n	8026a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8026a58:	687b      	ldr	r3, [r7, #4]
 8026a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8026a60:	d11f      	bne.n	8026aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8026a62:	2301      	movs	r3, #1
 8026a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8026a66:	e01c      	b.n	8026aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8026a68:	68bb      	ldr	r3, [r7, #8]
 8026a6a:	2b02      	cmp	r3, #2
 8026a6c:	d903      	bls.n	8026a76 <DMA_CheckFifoParam+0xb6>
 8026a6e:	68bb      	ldr	r3, [r7, #8]
 8026a70:	2b03      	cmp	r3, #3
 8026a72:	d003      	beq.n	8026a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8026a74:	e018      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8026a76:	2301      	movs	r3, #1
 8026a78:	73fb      	strb	r3, [r7, #15]
      break;
 8026a7a:	e015      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8026a84:	2b00      	cmp	r3, #0
 8026a86:	d00e      	beq.n	8026aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8026a88:	2301      	movs	r3, #1
 8026a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8026a8c:	e00b      	b.n	8026aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8026a8e:	bf00      	nop
 8026a90:	e00a      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8026a92:	bf00      	nop
 8026a94:	e008      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8026a96:	bf00      	nop
 8026a98:	e006      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8026a9a:	bf00      	nop
 8026a9c:	e004      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8026a9e:	bf00      	nop
 8026aa0:	e002      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8026aa2:	bf00      	nop
 8026aa4:	e000      	b.n	8026aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8026aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8026aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8026aaa:	4618      	mov	r0, r3
 8026aac:	3714      	adds	r7, #20
 8026aae:	46bd      	mov	sp, r7
 8026ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ab4:	4770      	bx	lr
 8026ab6:	bf00      	nop

08026ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8026ab8:	b480      	push	{r7}
 8026aba:	b089      	sub	sp, #36	; 0x24
 8026abc:	af00      	add	r7, sp, #0
 8026abe:	6078      	str	r0, [r7, #4]
 8026ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8026ac2:	2300      	movs	r3, #0
 8026ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8026ac6:	2300      	movs	r3, #0
 8026ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8026aca:	2300      	movs	r3, #0
 8026acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026ace:	2300      	movs	r3, #0
 8026ad0:	61fb      	str	r3, [r7, #28]
 8026ad2:	e16b      	b.n	8026dac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8026ad4:	2201      	movs	r2, #1
 8026ad6:	69fb      	ldr	r3, [r7, #28]
 8026ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8026adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8026ade:	683b      	ldr	r3, [r7, #0]
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	697a      	ldr	r2, [r7, #20]
 8026ae4:	4013      	ands	r3, r2
 8026ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8026ae8:	693a      	ldr	r2, [r7, #16]
 8026aea:	697b      	ldr	r3, [r7, #20]
 8026aec:	429a      	cmp	r2, r3
 8026aee:	f040 815a 	bne.w	8026da6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8026af2:	683b      	ldr	r3, [r7, #0]
 8026af4:	685b      	ldr	r3, [r3, #4]
 8026af6:	f003 0303 	and.w	r3, r3, #3
 8026afa:	2b01      	cmp	r3, #1
 8026afc:	d005      	beq.n	8026b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8026afe:	683b      	ldr	r3, [r7, #0]
 8026b00:	685b      	ldr	r3, [r3, #4]
 8026b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8026b06:	2b02      	cmp	r3, #2
 8026b08:	d130      	bne.n	8026b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8026b0a:	687b      	ldr	r3, [r7, #4]
 8026b0c:	689b      	ldr	r3, [r3, #8]
 8026b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8026b10:	69fb      	ldr	r3, [r7, #28]
 8026b12:	005b      	lsls	r3, r3, #1
 8026b14:	2203      	movs	r2, #3
 8026b16:	fa02 f303 	lsl.w	r3, r2, r3
 8026b1a:	43db      	mvns	r3, r3
 8026b1c:	69ba      	ldr	r2, [r7, #24]
 8026b1e:	4013      	ands	r3, r2
 8026b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8026b22:	683b      	ldr	r3, [r7, #0]
 8026b24:	68da      	ldr	r2, [r3, #12]
 8026b26:	69fb      	ldr	r3, [r7, #28]
 8026b28:	005b      	lsls	r3, r3, #1
 8026b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8026b2e:	69ba      	ldr	r2, [r7, #24]
 8026b30:	4313      	orrs	r3, r2
 8026b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	69ba      	ldr	r2, [r7, #24]
 8026b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	685b      	ldr	r3, [r3, #4]
 8026b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8026b40:	2201      	movs	r2, #1
 8026b42:	69fb      	ldr	r3, [r7, #28]
 8026b44:	fa02 f303 	lsl.w	r3, r2, r3
 8026b48:	43db      	mvns	r3, r3
 8026b4a:	69ba      	ldr	r2, [r7, #24]
 8026b4c:	4013      	ands	r3, r2
 8026b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8026b50:	683b      	ldr	r3, [r7, #0]
 8026b52:	685b      	ldr	r3, [r3, #4]
 8026b54:	091b      	lsrs	r3, r3, #4
 8026b56:	f003 0201 	and.w	r2, r3, #1
 8026b5a:	69fb      	ldr	r3, [r7, #28]
 8026b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8026b60:	69ba      	ldr	r2, [r7, #24]
 8026b62:	4313      	orrs	r3, r2
 8026b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	69ba      	ldr	r2, [r7, #24]
 8026b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8026b6c:	683b      	ldr	r3, [r7, #0]
 8026b6e:	685b      	ldr	r3, [r3, #4]
 8026b70:	f003 0303 	and.w	r3, r3, #3
 8026b74:	2b03      	cmp	r3, #3
 8026b76:	d017      	beq.n	8026ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	68db      	ldr	r3, [r3, #12]
 8026b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8026b7e:	69fb      	ldr	r3, [r7, #28]
 8026b80:	005b      	lsls	r3, r3, #1
 8026b82:	2203      	movs	r2, #3
 8026b84:	fa02 f303 	lsl.w	r3, r2, r3
 8026b88:	43db      	mvns	r3, r3
 8026b8a:	69ba      	ldr	r2, [r7, #24]
 8026b8c:	4013      	ands	r3, r2
 8026b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8026b90:	683b      	ldr	r3, [r7, #0]
 8026b92:	689a      	ldr	r2, [r3, #8]
 8026b94:	69fb      	ldr	r3, [r7, #28]
 8026b96:	005b      	lsls	r3, r3, #1
 8026b98:	fa02 f303 	lsl.w	r3, r2, r3
 8026b9c:	69ba      	ldr	r2, [r7, #24]
 8026b9e:	4313      	orrs	r3, r2
 8026ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	69ba      	ldr	r2, [r7, #24]
 8026ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8026ba8:	683b      	ldr	r3, [r7, #0]
 8026baa:	685b      	ldr	r3, [r3, #4]
 8026bac:	f003 0303 	and.w	r3, r3, #3
 8026bb0:	2b02      	cmp	r3, #2
 8026bb2:	d123      	bne.n	8026bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8026bb4:	69fb      	ldr	r3, [r7, #28]
 8026bb6:	08da      	lsrs	r2, r3, #3
 8026bb8:	687b      	ldr	r3, [r7, #4]
 8026bba:	3208      	adds	r2, #8
 8026bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8026bc2:	69fb      	ldr	r3, [r7, #28]
 8026bc4:	f003 0307 	and.w	r3, r3, #7
 8026bc8:	009b      	lsls	r3, r3, #2
 8026bca:	220f      	movs	r2, #15
 8026bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8026bd0:	43db      	mvns	r3, r3
 8026bd2:	69ba      	ldr	r2, [r7, #24]
 8026bd4:	4013      	ands	r3, r2
 8026bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8026bd8:	683b      	ldr	r3, [r7, #0]
 8026bda:	691a      	ldr	r2, [r3, #16]
 8026bdc:	69fb      	ldr	r3, [r7, #28]
 8026bde:	f003 0307 	and.w	r3, r3, #7
 8026be2:	009b      	lsls	r3, r3, #2
 8026be4:	fa02 f303 	lsl.w	r3, r2, r3
 8026be8:	69ba      	ldr	r2, [r7, #24]
 8026bea:	4313      	orrs	r3, r2
 8026bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8026bee:	69fb      	ldr	r3, [r7, #28]
 8026bf0:	08da      	lsrs	r2, r3, #3
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	3208      	adds	r2, #8
 8026bf6:	69b9      	ldr	r1, [r7, #24]
 8026bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8026bfc:	687b      	ldr	r3, [r7, #4]
 8026bfe:	681b      	ldr	r3, [r3, #0]
 8026c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8026c02:	69fb      	ldr	r3, [r7, #28]
 8026c04:	005b      	lsls	r3, r3, #1
 8026c06:	2203      	movs	r2, #3
 8026c08:	fa02 f303 	lsl.w	r3, r2, r3
 8026c0c:	43db      	mvns	r3, r3
 8026c0e:	69ba      	ldr	r2, [r7, #24]
 8026c10:	4013      	ands	r3, r2
 8026c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8026c14:	683b      	ldr	r3, [r7, #0]
 8026c16:	685b      	ldr	r3, [r3, #4]
 8026c18:	f003 0203 	and.w	r2, r3, #3
 8026c1c:	69fb      	ldr	r3, [r7, #28]
 8026c1e:	005b      	lsls	r3, r3, #1
 8026c20:	fa02 f303 	lsl.w	r3, r2, r3
 8026c24:	69ba      	ldr	r2, [r7, #24]
 8026c26:	4313      	orrs	r3, r2
 8026c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	69ba      	ldr	r2, [r7, #24]
 8026c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8026c30:	683b      	ldr	r3, [r7, #0]
 8026c32:	685b      	ldr	r3, [r3, #4]
 8026c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8026c38:	2b00      	cmp	r3, #0
 8026c3a:	f000 80b4 	beq.w	8026da6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8026c3e:	2300      	movs	r3, #0
 8026c40:	60fb      	str	r3, [r7, #12]
 8026c42:	4b60      	ldr	r3, [pc, #384]	; (8026dc4 <HAL_GPIO_Init+0x30c>)
 8026c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c46:	4a5f      	ldr	r2, [pc, #380]	; (8026dc4 <HAL_GPIO_Init+0x30c>)
 8026c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8026c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8026c4e:	4b5d      	ldr	r3, [pc, #372]	; (8026dc4 <HAL_GPIO_Init+0x30c>)
 8026c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8026c56:	60fb      	str	r3, [r7, #12]
 8026c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8026c5a:	4a5b      	ldr	r2, [pc, #364]	; (8026dc8 <HAL_GPIO_Init+0x310>)
 8026c5c:	69fb      	ldr	r3, [r7, #28]
 8026c5e:	089b      	lsrs	r3, r3, #2
 8026c60:	3302      	adds	r3, #2
 8026c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8026c68:	69fb      	ldr	r3, [r7, #28]
 8026c6a:	f003 0303 	and.w	r3, r3, #3
 8026c6e:	009b      	lsls	r3, r3, #2
 8026c70:	220f      	movs	r2, #15
 8026c72:	fa02 f303 	lsl.w	r3, r2, r3
 8026c76:	43db      	mvns	r3, r3
 8026c78:	69ba      	ldr	r2, [r7, #24]
 8026c7a:	4013      	ands	r3, r2
 8026c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	4a52      	ldr	r2, [pc, #328]	; (8026dcc <HAL_GPIO_Init+0x314>)
 8026c82:	4293      	cmp	r3, r2
 8026c84:	d02b      	beq.n	8026cde <HAL_GPIO_Init+0x226>
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	4a51      	ldr	r2, [pc, #324]	; (8026dd0 <HAL_GPIO_Init+0x318>)
 8026c8a:	4293      	cmp	r3, r2
 8026c8c:	d025      	beq.n	8026cda <HAL_GPIO_Init+0x222>
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	4a50      	ldr	r2, [pc, #320]	; (8026dd4 <HAL_GPIO_Init+0x31c>)
 8026c92:	4293      	cmp	r3, r2
 8026c94:	d01f      	beq.n	8026cd6 <HAL_GPIO_Init+0x21e>
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	4a4f      	ldr	r2, [pc, #316]	; (8026dd8 <HAL_GPIO_Init+0x320>)
 8026c9a:	4293      	cmp	r3, r2
 8026c9c:	d019      	beq.n	8026cd2 <HAL_GPIO_Init+0x21a>
 8026c9e:	687b      	ldr	r3, [r7, #4]
 8026ca0:	4a4e      	ldr	r2, [pc, #312]	; (8026ddc <HAL_GPIO_Init+0x324>)
 8026ca2:	4293      	cmp	r3, r2
 8026ca4:	d013      	beq.n	8026cce <HAL_GPIO_Init+0x216>
 8026ca6:	687b      	ldr	r3, [r7, #4]
 8026ca8:	4a4d      	ldr	r2, [pc, #308]	; (8026de0 <HAL_GPIO_Init+0x328>)
 8026caa:	4293      	cmp	r3, r2
 8026cac:	d00d      	beq.n	8026cca <HAL_GPIO_Init+0x212>
 8026cae:	687b      	ldr	r3, [r7, #4]
 8026cb0:	4a4c      	ldr	r2, [pc, #304]	; (8026de4 <HAL_GPIO_Init+0x32c>)
 8026cb2:	4293      	cmp	r3, r2
 8026cb4:	d007      	beq.n	8026cc6 <HAL_GPIO_Init+0x20e>
 8026cb6:	687b      	ldr	r3, [r7, #4]
 8026cb8:	4a4b      	ldr	r2, [pc, #300]	; (8026de8 <HAL_GPIO_Init+0x330>)
 8026cba:	4293      	cmp	r3, r2
 8026cbc:	d101      	bne.n	8026cc2 <HAL_GPIO_Init+0x20a>
 8026cbe:	2307      	movs	r3, #7
 8026cc0:	e00e      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cc2:	2308      	movs	r3, #8
 8026cc4:	e00c      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cc6:	2306      	movs	r3, #6
 8026cc8:	e00a      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cca:	2305      	movs	r3, #5
 8026ccc:	e008      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cce:	2304      	movs	r3, #4
 8026cd0:	e006      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cd2:	2303      	movs	r3, #3
 8026cd4:	e004      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cd6:	2302      	movs	r3, #2
 8026cd8:	e002      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cda:	2301      	movs	r3, #1
 8026cdc:	e000      	b.n	8026ce0 <HAL_GPIO_Init+0x228>
 8026cde:	2300      	movs	r3, #0
 8026ce0:	69fa      	ldr	r2, [r7, #28]
 8026ce2:	f002 0203 	and.w	r2, r2, #3
 8026ce6:	0092      	lsls	r2, r2, #2
 8026ce8:	4093      	lsls	r3, r2
 8026cea:	69ba      	ldr	r2, [r7, #24]
 8026cec:	4313      	orrs	r3, r2
 8026cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8026cf0:	4935      	ldr	r1, [pc, #212]	; (8026dc8 <HAL_GPIO_Init+0x310>)
 8026cf2:	69fb      	ldr	r3, [r7, #28]
 8026cf4:	089b      	lsrs	r3, r3, #2
 8026cf6:	3302      	adds	r3, #2
 8026cf8:	69ba      	ldr	r2, [r7, #24]
 8026cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8026cfe:	4b3b      	ldr	r3, [pc, #236]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d00:	681b      	ldr	r3, [r3, #0]
 8026d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026d04:	693b      	ldr	r3, [r7, #16]
 8026d06:	43db      	mvns	r3, r3
 8026d08:	69ba      	ldr	r2, [r7, #24]
 8026d0a:	4013      	ands	r3, r2
 8026d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8026d0e:	683b      	ldr	r3, [r7, #0]
 8026d10:	685b      	ldr	r3, [r3, #4]
 8026d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026d16:	2b00      	cmp	r3, #0
 8026d18:	d003      	beq.n	8026d22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8026d1a:	69ba      	ldr	r2, [r7, #24]
 8026d1c:	693b      	ldr	r3, [r7, #16]
 8026d1e:	4313      	orrs	r3, r2
 8026d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8026d22:	4a32      	ldr	r2, [pc, #200]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d24:	69bb      	ldr	r3, [r7, #24]
 8026d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8026d28:	4b30      	ldr	r3, [pc, #192]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d2a:	685b      	ldr	r3, [r3, #4]
 8026d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026d2e:	693b      	ldr	r3, [r7, #16]
 8026d30:	43db      	mvns	r3, r3
 8026d32:	69ba      	ldr	r2, [r7, #24]
 8026d34:	4013      	ands	r3, r2
 8026d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8026d38:	683b      	ldr	r3, [r7, #0]
 8026d3a:	685b      	ldr	r3, [r3, #4]
 8026d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d003      	beq.n	8026d4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8026d44:	69ba      	ldr	r2, [r7, #24]
 8026d46:	693b      	ldr	r3, [r7, #16]
 8026d48:	4313      	orrs	r3, r2
 8026d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8026d4c:	4a27      	ldr	r2, [pc, #156]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d4e:	69bb      	ldr	r3, [r7, #24]
 8026d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8026d52:	4b26      	ldr	r3, [pc, #152]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d54:	689b      	ldr	r3, [r3, #8]
 8026d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026d58:	693b      	ldr	r3, [r7, #16]
 8026d5a:	43db      	mvns	r3, r3
 8026d5c:	69ba      	ldr	r2, [r7, #24]
 8026d5e:	4013      	ands	r3, r2
 8026d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8026d62:	683b      	ldr	r3, [r7, #0]
 8026d64:	685b      	ldr	r3, [r3, #4]
 8026d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	d003      	beq.n	8026d76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8026d6e:	69ba      	ldr	r2, [r7, #24]
 8026d70:	693b      	ldr	r3, [r7, #16]
 8026d72:	4313      	orrs	r3, r2
 8026d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8026d76:	4a1d      	ldr	r2, [pc, #116]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d78:	69bb      	ldr	r3, [r7, #24]
 8026d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8026d7c:	4b1b      	ldr	r3, [pc, #108]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026d7e:	68db      	ldr	r3, [r3, #12]
 8026d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8026d82:	693b      	ldr	r3, [r7, #16]
 8026d84:	43db      	mvns	r3, r3
 8026d86:	69ba      	ldr	r2, [r7, #24]
 8026d88:	4013      	ands	r3, r2
 8026d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8026d8c:	683b      	ldr	r3, [r7, #0]
 8026d8e:	685b      	ldr	r3, [r3, #4]
 8026d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d003      	beq.n	8026da0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8026d98:	69ba      	ldr	r2, [r7, #24]
 8026d9a:	693b      	ldr	r3, [r7, #16]
 8026d9c:	4313      	orrs	r3, r2
 8026d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8026da0:	4a12      	ldr	r2, [pc, #72]	; (8026dec <HAL_GPIO_Init+0x334>)
 8026da2:	69bb      	ldr	r3, [r7, #24]
 8026da4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8026da6:	69fb      	ldr	r3, [r7, #28]
 8026da8:	3301      	adds	r3, #1
 8026daa:	61fb      	str	r3, [r7, #28]
 8026dac:	69fb      	ldr	r3, [r7, #28]
 8026dae:	2b0f      	cmp	r3, #15
 8026db0:	f67f ae90 	bls.w	8026ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8026db4:	bf00      	nop
 8026db6:	bf00      	nop
 8026db8:	3724      	adds	r7, #36	; 0x24
 8026dba:	46bd      	mov	sp, r7
 8026dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc0:	4770      	bx	lr
 8026dc2:	bf00      	nop
 8026dc4:	40023800 	.word	0x40023800
 8026dc8:	40013800 	.word	0x40013800
 8026dcc:	40020000 	.word	0x40020000
 8026dd0:	40020400 	.word	0x40020400
 8026dd4:	40020800 	.word	0x40020800
 8026dd8:	40020c00 	.word	0x40020c00
 8026ddc:	40021000 	.word	0x40021000
 8026de0:	40021400 	.word	0x40021400
 8026de4:	40021800 	.word	0x40021800
 8026de8:	40021c00 	.word	0x40021c00
 8026dec:	40013c00 	.word	0x40013c00

08026df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8026df0:	b480      	push	{r7}
 8026df2:	b083      	sub	sp, #12
 8026df4:	af00      	add	r7, sp, #0
 8026df6:	6078      	str	r0, [r7, #4]
 8026df8:	460b      	mov	r3, r1
 8026dfa:	807b      	strh	r3, [r7, #2]
 8026dfc:	4613      	mov	r3, r2
 8026dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8026e00:	787b      	ldrb	r3, [r7, #1]
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d003      	beq.n	8026e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026e06:	887a      	ldrh	r2, [r7, #2]
 8026e08:	687b      	ldr	r3, [r7, #4]
 8026e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8026e0c:	e003      	b.n	8026e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8026e0e:	887b      	ldrh	r3, [r7, #2]
 8026e10:	041a      	lsls	r2, r3, #16
 8026e12:	687b      	ldr	r3, [r7, #4]
 8026e14:	619a      	str	r2, [r3, #24]
}
 8026e16:	bf00      	nop
 8026e18:	370c      	adds	r7, #12
 8026e1a:	46bd      	mov	sp, r7
 8026e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e20:	4770      	bx	lr
	...

08026e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8026e24:	b580      	push	{r7, lr}
 8026e26:	b082      	sub	sp, #8
 8026e28:	af00      	add	r7, sp, #0
 8026e2a:	4603      	mov	r3, r0
 8026e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8026e2e:	4b08      	ldr	r3, [pc, #32]	; (8026e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026e30:	695a      	ldr	r2, [r3, #20]
 8026e32:	88fb      	ldrh	r3, [r7, #6]
 8026e34:	4013      	ands	r3, r2
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d006      	beq.n	8026e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8026e3a:	4a05      	ldr	r2, [pc, #20]	; (8026e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8026e3c:	88fb      	ldrh	r3, [r7, #6]
 8026e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8026e40:	88fb      	ldrh	r3, [r7, #6]
 8026e42:	4618      	mov	r0, r3
 8026e44:	f7ef f92e 	bl	80160a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8026e48:	bf00      	nop
 8026e4a:	3708      	adds	r7, #8
 8026e4c:	46bd      	mov	sp, r7
 8026e4e:	bd80      	pop	{r7, pc}
 8026e50:	40013c00 	.word	0x40013c00

08026e54 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8026e54:	b580      	push	{r7, lr}
 8026e56:	b084      	sub	sp, #16
 8026e58:	af00      	add	r7, sp, #0
 8026e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8026e5c:	687b      	ldr	r3, [r7, #4]
 8026e5e:	2b00      	cmp	r3, #0
 8026e60:	d101      	bne.n	8026e66 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8026e62:	2301      	movs	r3, #1
 8026e64:	e034      	b.n	8026ed0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8026e66:	687b      	ldr	r3, [r7, #4]
 8026e68:	681b      	ldr	r3, [r3, #0]
 8026e6a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8026e6e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	681b      	ldr	r3, [r3, #0]
 8026e74:	f245 5255 	movw	r2, #21845	; 0x5555
 8026e78:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8026e7a:	687b      	ldr	r3, [r7, #4]
 8026e7c:	681b      	ldr	r3, [r3, #0]
 8026e7e:	687a      	ldr	r2, [r7, #4]
 8026e80:	6852      	ldr	r2, [r2, #4]
 8026e82:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	681b      	ldr	r3, [r3, #0]
 8026e88:	687a      	ldr	r2, [r7, #4]
 8026e8a:	6892      	ldr	r2, [r2, #8]
 8026e8c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8026e8e:	f7fd fd65 	bl	802495c <HAL_GetTick>
 8026e92:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8026e94:	e00f      	b.n	8026eb6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8026e96:	f7fd fd61 	bl	802495c <HAL_GetTick>
 8026e9a:	4602      	mov	r2, r0
 8026e9c:	68fb      	ldr	r3, [r7, #12]
 8026e9e:	1ad3      	subs	r3, r2, r3
 8026ea0:	2b31      	cmp	r3, #49	; 0x31
 8026ea2:	d908      	bls.n	8026eb6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	681b      	ldr	r3, [r3, #0]
 8026ea8:	68db      	ldr	r3, [r3, #12]
 8026eaa:	f003 0303 	and.w	r3, r3, #3
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d001      	beq.n	8026eb6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8026eb2:	2303      	movs	r3, #3
 8026eb4:	e00c      	b.n	8026ed0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8026eb6:	687b      	ldr	r3, [r7, #4]
 8026eb8:	681b      	ldr	r3, [r3, #0]
 8026eba:	68db      	ldr	r3, [r3, #12]
 8026ebc:	f003 0303 	and.w	r3, r3, #3
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	d1e8      	bne.n	8026e96 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8026ecc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026ece:	2300      	movs	r3, #0
}
 8026ed0:	4618      	mov	r0, r3
 8026ed2:	3710      	adds	r7, #16
 8026ed4:	46bd      	mov	sp, r7
 8026ed6:	bd80      	pop	{r7, pc}

08026ed8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8026ed8:	b480      	push	{r7}
 8026eda:	b083      	sub	sp, #12
 8026edc:	af00      	add	r7, sp, #0
 8026ede:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	681b      	ldr	r3, [r3, #0]
 8026ee4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8026ee8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026eea:	2300      	movs	r3, #0
}
 8026eec:	4618      	mov	r0, r3
 8026eee:	370c      	adds	r7, #12
 8026ef0:	46bd      	mov	sp, r7
 8026ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ef6:	4770      	bx	lr

08026ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026ef8:	b580      	push	{r7, lr}
 8026efa:	b086      	sub	sp, #24
 8026efc:	af00      	add	r7, sp, #0
 8026efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026f00:	687b      	ldr	r3, [r7, #4]
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d101      	bne.n	8026f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026f06:	2301      	movs	r3, #1
 8026f08:	e264      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026f0a:	687b      	ldr	r3, [r7, #4]
 8026f0c:	681b      	ldr	r3, [r3, #0]
 8026f0e:	f003 0301 	and.w	r3, r3, #1
 8026f12:	2b00      	cmp	r3, #0
 8026f14:	d075      	beq.n	8027002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026f16:	4ba3      	ldr	r3, [pc, #652]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f18:	689b      	ldr	r3, [r3, #8]
 8026f1a:	f003 030c 	and.w	r3, r3, #12
 8026f1e:	2b04      	cmp	r3, #4
 8026f20:	d00c      	beq.n	8026f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026f22:	4ba0      	ldr	r3, [pc, #640]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f24:	689b      	ldr	r3, [r3, #8]
 8026f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026f2a:	2b08      	cmp	r3, #8
 8026f2c:	d112      	bne.n	8026f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026f2e:	4b9d      	ldr	r3, [pc, #628]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f30:	685b      	ldr	r3, [r3, #4]
 8026f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026f3a:	d10b      	bne.n	8026f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026f3c:	4b99      	ldr	r3, [pc, #612]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f3e:	681b      	ldr	r3, [r3, #0]
 8026f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	d05b      	beq.n	8027000 <HAL_RCC_OscConfig+0x108>
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	685b      	ldr	r3, [r3, #4]
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d157      	bne.n	8027000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026f50:	2301      	movs	r3, #1
 8026f52:	e23f      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026f54:	687b      	ldr	r3, [r7, #4]
 8026f56:	685b      	ldr	r3, [r3, #4]
 8026f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026f5c:	d106      	bne.n	8026f6c <HAL_RCC_OscConfig+0x74>
 8026f5e:	4b91      	ldr	r3, [pc, #580]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f60:	681b      	ldr	r3, [r3, #0]
 8026f62:	4a90      	ldr	r2, [pc, #576]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026f68:	6013      	str	r3, [r2, #0]
 8026f6a:	e01d      	b.n	8026fa8 <HAL_RCC_OscConfig+0xb0>
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	685b      	ldr	r3, [r3, #4]
 8026f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026f74:	d10c      	bne.n	8026f90 <HAL_RCC_OscConfig+0x98>
 8026f76:	4b8b      	ldr	r3, [pc, #556]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f78:	681b      	ldr	r3, [r3, #0]
 8026f7a:	4a8a      	ldr	r2, [pc, #552]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026f80:	6013      	str	r3, [r2, #0]
 8026f82:	4b88      	ldr	r3, [pc, #544]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f84:	681b      	ldr	r3, [r3, #0]
 8026f86:	4a87      	ldr	r2, [pc, #540]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026f8c:	6013      	str	r3, [r2, #0]
 8026f8e:	e00b      	b.n	8026fa8 <HAL_RCC_OscConfig+0xb0>
 8026f90:	4b84      	ldr	r3, [pc, #528]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f92:	681b      	ldr	r3, [r3, #0]
 8026f94:	4a83      	ldr	r2, [pc, #524]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026f9a:	6013      	str	r3, [r2, #0]
 8026f9c:	4b81      	ldr	r3, [pc, #516]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026f9e:	681b      	ldr	r3, [r3, #0]
 8026fa0:	4a80      	ldr	r2, [pc, #512]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	685b      	ldr	r3, [r3, #4]
 8026fac:	2b00      	cmp	r3, #0
 8026fae:	d013      	beq.n	8026fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fb0:	f7fd fcd4 	bl	802495c <HAL_GetTick>
 8026fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026fb6:	e008      	b.n	8026fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026fb8:	f7fd fcd0 	bl	802495c <HAL_GetTick>
 8026fbc:	4602      	mov	r2, r0
 8026fbe:	693b      	ldr	r3, [r7, #16]
 8026fc0:	1ad3      	subs	r3, r2, r3
 8026fc2:	2b64      	cmp	r3, #100	; 0x64
 8026fc4:	d901      	bls.n	8026fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026fc6:	2303      	movs	r3, #3
 8026fc8:	e204      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026fca:	4b76      	ldr	r3, [pc, #472]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026fcc:	681b      	ldr	r3, [r3, #0]
 8026fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	d0f0      	beq.n	8026fb8 <HAL_RCC_OscConfig+0xc0>
 8026fd6:	e014      	b.n	8027002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fd8:	f7fd fcc0 	bl	802495c <HAL_GetTick>
 8026fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026fde:	e008      	b.n	8026ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026fe0:	f7fd fcbc 	bl	802495c <HAL_GetTick>
 8026fe4:	4602      	mov	r2, r0
 8026fe6:	693b      	ldr	r3, [r7, #16]
 8026fe8:	1ad3      	subs	r3, r2, r3
 8026fea:	2b64      	cmp	r3, #100	; 0x64
 8026fec:	d901      	bls.n	8026ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026fee:	2303      	movs	r3, #3
 8026ff0:	e1f0      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026ff2:	4b6c      	ldr	r3, [pc, #432]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026ffa:	2b00      	cmp	r3, #0
 8026ffc:	d1f0      	bne.n	8026fe0 <HAL_RCC_OscConfig+0xe8>
 8026ffe:	e000      	b.n	8027002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	681b      	ldr	r3, [r3, #0]
 8027006:	f003 0302 	and.w	r3, r3, #2
 802700a:	2b00      	cmp	r3, #0
 802700c:	d063      	beq.n	80270d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802700e:	4b65      	ldr	r3, [pc, #404]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027010:	689b      	ldr	r3, [r3, #8]
 8027012:	f003 030c 	and.w	r3, r3, #12
 8027016:	2b00      	cmp	r3, #0
 8027018:	d00b      	beq.n	8027032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802701a:	4b62      	ldr	r3, [pc, #392]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802701c:	689b      	ldr	r3, [r3, #8]
 802701e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027022:	2b08      	cmp	r3, #8
 8027024:	d11c      	bne.n	8027060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027026:	4b5f      	ldr	r3, [pc, #380]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027028:	685b      	ldr	r3, [r3, #4]
 802702a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802702e:	2b00      	cmp	r3, #0
 8027030:	d116      	bne.n	8027060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027032:	4b5c      	ldr	r3, [pc, #368]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027034:	681b      	ldr	r3, [r3, #0]
 8027036:	f003 0302 	and.w	r3, r3, #2
 802703a:	2b00      	cmp	r3, #0
 802703c:	d005      	beq.n	802704a <HAL_RCC_OscConfig+0x152>
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	68db      	ldr	r3, [r3, #12]
 8027042:	2b01      	cmp	r3, #1
 8027044:	d001      	beq.n	802704a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8027046:	2301      	movs	r3, #1
 8027048:	e1c4      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802704a:	4b56      	ldr	r3, [pc, #344]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802704c:	681b      	ldr	r3, [r3, #0]
 802704e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	691b      	ldr	r3, [r3, #16]
 8027056:	00db      	lsls	r3, r3, #3
 8027058:	4952      	ldr	r1, [pc, #328]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802705a:	4313      	orrs	r3, r2
 802705c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802705e:	e03a      	b.n	80270d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8027060:	687b      	ldr	r3, [r7, #4]
 8027062:	68db      	ldr	r3, [r3, #12]
 8027064:	2b00      	cmp	r3, #0
 8027066:	d020      	beq.n	80270aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027068:	4b4f      	ldr	r3, [pc, #316]	; (80271a8 <HAL_RCC_OscConfig+0x2b0>)
 802706a:	2201      	movs	r2, #1
 802706c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802706e:	f7fd fc75 	bl	802495c <HAL_GetTick>
 8027072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027074:	e008      	b.n	8027088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027076:	f7fd fc71 	bl	802495c <HAL_GetTick>
 802707a:	4602      	mov	r2, r0
 802707c:	693b      	ldr	r3, [r7, #16]
 802707e:	1ad3      	subs	r3, r2, r3
 8027080:	2b02      	cmp	r3, #2
 8027082:	d901      	bls.n	8027088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027084:	2303      	movs	r3, #3
 8027086:	e1a5      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027088:	4b46      	ldr	r3, [pc, #280]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	f003 0302 	and.w	r3, r3, #2
 8027090:	2b00      	cmp	r3, #0
 8027092:	d0f0      	beq.n	8027076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027094:	4b43      	ldr	r3, [pc, #268]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027096:	681b      	ldr	r3, [r3, #0]
 8027098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	691b      	ldr	r3, [r3, #16]
 80270a0:	00db      	lsls	r3, r3, #3
 80270a2:	4940      	ldr	r1, [pc, #256]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 80270a4:	4313      	orrs	r3, r2
 80270a6:	600b      	str	r3, [r1, #0]
 80270a8:	e015      	b.n	80270d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80270aa:	4b3f      	ldr	r3, [pc, #252]	; (80271a8 <HAL_RCC_OscConfig+0x2b0>)
 80270ac:	2200      	movs	r2, #0
 80270ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80270b0:	f7fd fc54 	bl	802495c <HAL_GetTick>
 80270b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80270b6:	e008      	b.n	80270ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80270b8:	f7fd fc50 	bl	802495c <HAL_GetTick>
 80270bc:	4602      	mov	r2, r0
 80270be:	693b      	ldr	r3, [r7, #16]
 80270c0:	1ad3      	subs	r3, r2, r3
 80270c2:	2b02      	cmp	r3, #2
 80270c4:	d901      	bls.n	80270ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80270c6:	2303      	movs	r3, #3
 80270c8:	e184      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80270ca:	4b36      	ldr	r3, [pc, #216]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 80270cc:	681b      	ldr	r3, [r3, #0]
 80270ce:	f003 0302 	and.w	r3, r3, #2
 80270d2:	2b00      	cmp	r3, #0
 80270d4:	d1f0      	bne.n	80270b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	681b      	ldr	r3, [r3, #0]
 80270da:	f003 0308 	and.w	r3, r3, #8
 80270de:	2b00      	cmp	r3, #0
 80270e0:	d030      	beq.n	8027144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80270e2:	687b      	ldr	r3, [r7, #4]
 80270e4:	695b      	ldr	r3, [r3, #20]
 80270e6:	2b00      	cmp	r3, #0
 80270e8:	d016      	beq.n	8027118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80270ea:	4b30      	ldr	r3, [pc, #192]	; (80271ac <HAL_RCC_OscConfig+0x2b4>)
 80270ec:	2201      	movs	r2, #1
 80270ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80270f0:	f7fd fc34 	bl	802495c <HAL_GetTick>
 80270f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80270f6:	e008      	b.n	802710a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80270f8:	f7fd fc30 	bl	802495c <HAL_GetTick>
 80270fc:	4602      	mov	r2, r0
 80270fe:	693b      	ldr	r3, [r7, #16]
 8027100:	1ad3      	subs	r3, r2, r3
 8027102:	2b02      	cmp	r3, #2
 8027104:	d901      	bls.n	802710a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8027106:	2303      	movs	r3, #3
 8027108:	e164      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802710a:	4b26      	ldr	r3, [pc, #152]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802710c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802710e:	f003 0302 	and.w	r3, r3, #2
 8027112:	2b00      	cmp	r3, #0
 8027114:	d0f0      	beq.n	80270f8 <HAL_RCC_OscConfig+0x200>
 8027116:	e015      	b.n	8027144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027118:	4b24      	ldr	r3, [pc, #144]	; (80271ac <HAL_RCC_OscConfig+0x2b4>)
 802711a:	2200      	movs	r2, #0
 802711c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802711e:	f7fd fc1d 	bl	802495c <HAL_GetTick>
 8027122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027124:	e008      	b.n	8027138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027126:	f7fd fc19 	bl	802495c <HAL_GetTick>
 802712a:	4602      	mov	r2, r0
 802712c:	693b      	ldr	r3, [r7, #16]
 802712e:	1ad3      	subs	r3, r2, r3
 8027130:	2b02      	cmp	r3, #2
 8027132:	d901      	bls.n	8027138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8027134:	2303      	movs	r3, #3
 8027136:	e14d      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027138:	4b1a      	ldr	r3, [pc, #104]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802713a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802713c:	f003 0302 	and.w	r3, r3, #2
 8027140:	2b00      	cmp	r3, #0
 8027142:	d1f0      	bne.n	8027126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	f003 0304 	and.w	r3, r3, #4
 802714c:	2b00      	cmp	r3, #0
 802714e:	f000 80a0 	beq.w	8027292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027152:	2300      	movs	r3, #0
 8027154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8027156:	4b13      	ldr	r3, [pc, #76]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802715a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802715e:	2b00      	cmp	r3, #0
 8027160:	d10f      	bne.n	8027182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027162:	2300      	movs	r3, #0
 8027164:	60bb      	str	r3, [r7, #8]
 8027166:	4b0f      	ldr	r3, [pc, #60]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802716a:	4a0e      	ldr	r2, [pc, #56]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 802716c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027170:	6413      	str	r3, [r2, #64]	; 0x40
 8027172:	4b0c      	ldr	r3, [pc, #48]	; (80271a4 <HAL_RCC_OscConfig+0x2ac>)
 8027174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802717a:	60bb      	str	r3, [r7, #8]
 802717c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802717e:	2301      	movs	r3, #1
 8027180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027182:	4b0b      	ldr	r3, [pc, #44]	; (80271b0 <HAL_RCC_OscConfig+0x2b8>)
 8027184:	681b      	ldr	r3, [r3, #0]
 8027186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802718a:	2b00      	cmp	r3, #0
 802718c:	d121      	bne.n	80271d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802718e:	4b08      	ldr	r3, [pc, #32]	; (80271b0 <HAL_RCC_OscConfig+0x2b8>)
 8027190:	681b      	ldr	r3, [r3, #0]
 8027192:	4a07      	ldr	r2, [pc, #28]	; (80271b0 <HAL_RCC_OscConfig+0x2b8>)
 8027194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802719a:	f7fd fbdf 	bl	802495c <HAL_GetTick>
 802719e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80271a0:	e011      	b.n	80271c6 <HAL_RCC_OscConfig+0x2ce>
 80271a2:	bf00      	nop
 80271a4:	40023800 	.word	0x40023800
 80271a8:	42470000 	.word	0x42470000
 80271ac:	42470e80 	.word	0x42470e80
 80271b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80271b4:	f7fd fbd2 	bl	802495c <HAL_GetTick>
 80271b8:	4602      	mov	r2, r0
 80271ba:	693b      	ldr	r3, [r7, #16]
 80271bc:	1ad3      	subs	r3, r2, r3
 80271be:	2b02      	cmp	r3, #2
 80271c0:	d901      	bls.n	80271c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80271c2:	2303      	movs	r3, #3
 80271c4:	e106      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80271c6:	4b85      	ldr	r3, [pc, #532]	; (80273dc <HAL_RCC_OscConfig+0x4e4>)
 80271c8:	681b      	ldr	r3, [r3, #0]
 80271ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	d0f0      	beq.n	80271b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80271d2:	687b      	ldr	r3, [r7, #4]
 80271d4:	689b      	ldr	r3, [r3, #8]
 80271d6:	2b01      	cmp	r3, #1
 80271d8:	d106      	bne.n	80271e8 <HAL_RCC_OscConfig+0x2f0>
 80271da:	4b81      	ldr	r3, [pc, #516]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80271dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80271de:	4a80      	ldr	r2, [pc, #512]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80271e0:	f043 0301 	orr.w	r3, r3, #1
 80271e4:	6713      	str	r3, [r2, #112]	; 0x70
 80271e6:	e01c      	b.n	8027222 <HAL_RCC_OscConfig+0x32a>
 80271e8:	687b      	ldr	r3, [r7, #4]
 80271ea:	689b      	ldr	r3, [r3, #8]
 80271ec:	2b05      	cmp	r3, #5
 80271ee:	d10c      	bne.n	802720a <HAL_RCC_OscConfig+0x312>
 80271f0:	4b7b      	ldr	r3, [pc, #492]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80271f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80271f4:	4a7a      	ldr	r2, [pc, #488]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80271f6:	f043 0304 	orr.w	r3, r3, #4
 80271fa:	6713      	str	r3, [r2, #112]	; 0x70
 80271fc:	4b78      	ldr	r3, [pc, #480]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80271fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027200:	4a77      	ldr	r2, [pc, #476]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027202:	f043 0301 	orr.w	r3, r3, #1
 8027206:	6713      	str	r3, [r2, #112]	; 0x70
 8027208:	e00b      	b.n	8027222 <HAL_RCC_OscConfig+0x32a>
 802720a:	4b75      	ldr	r3, [pc, #468]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 802720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802720e:	4a74      	ldr	r2, [pc, #464]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027210:	f023 0301 	bic.w	r3, r3, #1
 8027214:	6713      	str	r3, [r2, #112]	; 0x70
 8027216:	4b72      	ldr	r3, [pc, #456]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802721a:	4a71      	ldr	r2, [pc, #452]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 802721c:	f023 0304 	bic.w	r3, r3, #4
 8027220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027222:	687b      	ldr	r3, [r7, #4]
 8027224:	689b      	ldr	r3, [r3, #8]
 8027226:	2b00      	cmp	r3, #0
 8027228:	d015      	beq.n	8027256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802722a:	f7fd fb97 	bl	802495c <HAL_GetTick>
 802722e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027230:	e00a      	b.n	8027248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027232:	f7fd fb93 	bl	802495c <HAL_GetTick>
 8027236:	4602      	mov	r2, r0
 8027238:	693b      	ldr	r3, [r7, #16]
 802723a:	1ad3      	subs	r3, r2, r3
 802723c:	f241 3288 	movw	r2, #5000	; 0x1388
 8027240:	4293      	cmp	r3, r2
 8027242:	d901      	bls.n	8027248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8027244:	2303      	movs	r3, #3
 8027246:	e0c5      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027248:	4b65      	ldr	r3, [pc, #404]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 802724a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802724c:	f003 0302 	and.w	r3, r3, #2
 8027250:	2b00      	cmp	r3, #0
 8027252:	d0ee      	beq.n	8027232 <HAL_RCC_OscConfig+0x33a>
 8027254:	e014      	b.n	8027280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027256:	f7fd fb81 	bl	802495c <HAL_GetTick>
 802725a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802725c:	e00a      	b.n	8027274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802725e:	f7fd fb7d 	bl	802495c <HAL_GetTick>
 8027262:	4602      	mov	r2, r0
 8027264:	693b      	ldr	r3, [r7, #16]
 8027266:	1ad3      	subs	r3, r2, r3
 8027268:	f241 3288 	movw	r2, #5000	; 0x1388
 802726c:	4293      	cmp	r3, r2
 802726e:	d901      	bls.n	8027274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8027270:	2303      	movs	r3, #3
 8027272:	e0af      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027274:	4b5a      	ldr	r3, [pc, #360]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027278:	f003 0302 	and.w	r3, r3, #2
 802727c:	2b00      	cmp	r3, #0
 802727e:	d1ee      	bne.n	802725e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027280:	7dfb      	ldrb	r3, [r7, #23]
 8027282:	2b01      	cmp	r3, #1
 8027284:	d105      	bne.n	8027292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027286:	4b56      	ldr	r3, [pc, #344]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802728a:	4a55      	ldr	r2, [pc, #340]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 802728c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027292:	687b      	ldr	r3, [r7, #4]
 8027294:	699b      	ldr	r3, [r3, #24]
 8027296:	2b00      	cmp	r3, #0
 8027298:	f000 809b 	beq.w	80273d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802729c:	4b50      	ldr	r3, [pc, #320]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 802729e:	689b      	ldr	r3, [r3, #8]
 80272a0:	f003 030c 	and.w	r3, r3, #12
 80272a4:	2b08      	cmp	r3, #8
 80272a6:	d05c      	beq.n	8027362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80272a8:	687b      	ldr	r3, [r7, #4]
 80272aa:	699b      	ldr	r3, [r3, #24]
 80272ac:	2b02      	cmp	r3, #2
 80272ae:	d141      	bne.n	8027334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80272b0:	4b4c      	ldr	r3, [pc, #304]	; (80273e4 <HAL_RCC_OscConfig+0x4ec>)
 80272b2:	2200      	movs	r2, #0
 80272b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80272b6:	f7fd fb51 	bl	802495c <HAL_GetTick>
 80272ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80272bc:	e008      	b.n	80272d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80272be:	f7fd fb4d 	bl	802495c <HAL_GetTick>
 80272c2:	4602      	mov	r2, r0
 80272c4:	693b      	ldr	r3, [r7, #16]
 80272c6:	1ad3      	subs	r3, r2, r3
 80272c8:	2b02      	cmp	r3, #2
 80272ca:	d901      	bls.n	80272d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80272cc:	2303      	movs	r3, #3
 80272ce:	e081      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80272d0:	4b43      	ldr	r3, [pc, #268]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 80272d2:	681b      	ldr	r3, [r3, #0]
 80272d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80272d8:	2b00      	cmp	r3, #0
 80272da:	d1f0      	bne.n	80272be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80272dc:	687b      	ldr	r3, [r7, #4]
 80272de:	69da      	ldr	r2, [r3, #28]
 80272e0:	687b      	ldr	r3, [r7, #4]
 80272e2:	6a1b      	ldr	r3, [r3, #32]
 80272e4:	431a      	orrs	r2, r3
 80272e6:	687b      	ldr	r3, [r7, #4]
 80272e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272ea:	019b      	lsls	r3, r3, #6
 80272ec:	431a      	orrs	r2, r3
 80272ee:	687b      	ldr	r3, [r7, #4]
 80272f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272f2:	085b      	lsrs	r3, r3, #1
 80272f4:	3b01      	subs	r3, #1
 80272f6:	041b      	lsls	r3, r3, #16
 80272f8:	431a      	orrs	r2, r3
 80272fa:	687b      	ldr	r3, [r7, #4]
 80272fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272fe:	061b      	lsls	r3, r3, #24
 8027300:	4937      	ldr	r1, [pc, #220]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027302:	4313      	orrs	r3, r2
 8027304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027306:	4b37      	ldr	r3, [pc, #220]	; (80273e4 <HAL_RCC_OscConfig+0x4ec>)
 8027308:	2201      	movs	r2, #1
 802730a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802730c:	f7fd fb26 	bl	802495c <HAL_GetTick>
 8027310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027312:	e008      	b.n	8027326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027314:	f7fd fb22 	bl	802495c <HAL_GetTick>
 8027318:	4602      	mov	r2, r0
 802731a:	693b      	ldr	r3, [r7, #16]
 802731c:	1ad3      	subs	r3, r2, r3
 802731e:	2b02      	cmp	r3, #2
 8027320:	d901      	bls.n	8027326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8027322:	2303      	movs	r3, #3
 8027324:	e056      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027326:	4b2e      	ldr	r3, [pc, #184]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027328:	681b      	ldr	r3, [r3, #0]
 802732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802732e:	2b00      	cmp	r3, #0
 8027330:	d0f0      	beq.n	8027314 <HAL_RCC_OscConfig+0x41c>
 8027332:	e04e      	b.n	80273d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027334:	4b2b      	ldr	r3, [pc, #172]	; (80273e4 <HAL_RCC_OscConfig+0x4ec>)
 8027336:	2200      	movs	r2, #0
 8027338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802733a:	f7fd fb0f 	bl	802495c <HAL_GetTick>
 802733e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027340:	e008      	b.n	8027354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027342:	f7fd fb0b 	bl	802495c <HAL_GetTick>
 8027346:	4602      	mov	r2, r0
 8027348:	693b      	ldr	r3, [r7, #16]
 802734a:	1ad3      	subs	r3, r2, r3
 802734c:	2b02      	cmp	r3, #2
 802734e:	d901      	bls.n	8027354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8027350:	2303      	movs	r3, #3
 8027352:	e03f      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027354:	4b22      	ldr	r3, [pc, #136]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027356:	681b      	ldr	r3, [r3, #0]
 8027358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802735c:	2b00      	cmp	r3, #0
 802735e:	d1f0      	bne.n	8027342 <HAL_RCC_OscConfig+0x44a>
 8027360:	e037      	b.n	80273d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	699b      	ldr	r3, [r3, #24]
 8027366:	2b01      	cmp	r3, #1
 8027368:	d101      	bne.n	802736e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802736a:	2301      	movs	r3, #1
 802736c:	e032      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802736e:	4b1c      	ldr	r3, [pc, #112]	; (80273e0 <HAL_RCC_OscConfig+0x4e8>)
 8027370:	685b      	ldr	r3, [r3, #4]
 8027372:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027374:	687b      	ldr	r3, [r7, #4]
 8027376:	699b      	ldr	r3, [r3, #24]
 8027378:	2b01      	cmp	r3, #1
 802737a:	d028      	beq.n	80273ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802737c:	68fb      	ldr	r3, [r7, #12]
 802737e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027382:	687b      	ldr	r3, [r7, #4]
 8027384:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027386:	429a      	cmp	r2, r3
 8027388:	d121      	bne.n	80273ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802738a:	68fb      	ldr	r3, [r7, #12]
 802738c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027394:	429a      	cmp	r2, r3
 8027396:	d11a      	bne.n	80273ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027398:	68fa      	ldr	r2, [r7, #12]
 802739a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802739e:	4013      	ands	r3, r2
 80273a0:	687a      	ldr	r2, [r7, #4]
 80273a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80273a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80273a6:	4293      	cmp	r3, r2
 80273a8:	d111      	bne.n	80273ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80273aa:	68fb      	ldr	r3, [r7, #12]
 80273ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80273b4:	085b      	lsrs	r3, r3, #1
 80273b6:	3b01      	subs	r3, #1
 80273b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80273ba:	429a      	cmp	r2, r3
 80273bc:	d107      	bne.n	80273ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80273be:	68fb      	ldr	r3, [r7, #12]
 80273c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80273c4:	687b      	ldr	r3, [r7, #4]
 80273c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80273ca:	429a      	cmp	r2, r3
 80273cc:	d001      	beq.n	80273d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80273ce:	2301      	movs	r3, #1
 80273d0:	e000      	b.n	80273d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80273d2:	2300      	movs	r3, #0
}
 80273d4:	4618      	mov	r0, r3
 80273d6:	3718      	adds	r7, #24
 80273d8:	46bd      	mov	sp, r7
 80273da:	bd80      	pop	{r7, pc}
 80273dc:	40007000 	.word	0x40007000
 80273e0:	40023800 	.word	0x40023800
 80273e4:	42470060 	.word	0x42470060

080273e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80273e8:	b580      	push	{r7, lr}
 80273ea:	b084      	sub	sp, #16
 80273ec:	af00      	add	r7, sp, #0
 80273ee:	6078      	str	r0, [r7, #4]
 80273f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80273f2:	687b      	ldr	r3, [r7, #4]
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	d101      	bne.n	80273fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80273f8:	2301      	movs	r3, #1
 80273fa:	e0cc      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80273fc:	4b68      	ldr	r3, [pc, #416]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	f003 0307 	and.w	r3, r3, #7
 8027404:	683a      	ldr	r2, [r7, #0]
 8027406:	429a      	cmp	r2, r3
 8027408:	d90c      	bls.n	8027424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802740a:	4b65      	ldr	r3, [pc, #404]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 802740c:	683a      	ldr	r2, [r7, #0]
 802740e:	b2d2      	uxtb	r2, r2
 8027410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027412:	4b63      	ldr	r3, [pc, #396]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 8027414:	681b      	ldr	r3, [r3, #0]
 8027416:	f003 0307 	and.w	r3, r3, #7
 802741a:	683a      	ldr	r2, [r7, #0]
 802741c:	429a      	cmp	r2, r3
 802741e:	d001      	beq.n	8027424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8027420:	2301      	movs	r3, #1
 8027422:	e0b8      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027424:	687b      	ldr	r3, [r7, #4]
 8027426:	681b      	ldr	r3, [r3, #0]
 8027428:	f003 0302 	and.w	r3, r3, #2
 802742c:	2b00      	cmp	r3, #0
 802742e:	d020      	beq.n	8027472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027430:	687b      	ldr	r3, [r7, #4]
 8027432:	681b      	ldr	r3, [r3, #0]
 8027434:	f003 0304 	and.w	r3, r3, #4
 8027438:	2b00      	cmp	r3, #0
 802743a:	d005      	beq.n	8027448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802743c:	4b59      	ldr	r3, [pc, #356]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802743e:	689b      	ldr	r3, [r3, #8]
 8027440:	4a58      	ldr	r2, [pc, #352]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 8027442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	681b      	ldr	r3, [r3, #0]
 802744c:	f003 0308 	and.w	r3, r3, #8
 8027450:	2b00      	cmp	r3, #0
 8027452:	d005      	beq.n	8027460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027454:	4b53      	ldr	r3, [pc, #332]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 8027456:	689b      	ldr	r3, [r3, #8]
 8027458:	4a52      	ldr	r2, [pc, #328]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802745a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802745e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027460:	4b50      	ldr	r3, [pc, #320]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 8027462:	689b      	ldr	r3, [r3, #8]
 8027464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027468:	687b      	ldr	r3, [r7, #4]
 802746a:	689b      	ldr	r3, [r3, #8]
 802746c:	494d      	ldr	r1, [pc, #308]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802746e:	4313      	orrs	r3, r2
 8027470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027472:	687b      	ldr	r3, [r7, #4]
 8027474:	681b      	ldr	r3, [r3, #0]
 8027476:	f003 0301 	and.w	r3, r3, #1
 802747a:	2b00      	cmp	r3, #0
 802747c:	d044      	beq.n	8027508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802747e:	687b      	ldr	r3, [r7, #4]
 8027480:	685b      	ldr	r3, [r3, #4]
 8027482:	2b01      	cmp	r3, #1
 8027484:	d107      	bne.n	8027496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027486:	4b47      	ldr	r3, [pc, #284]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 8027488:	681b      	ldr	r3, [r3, #0]
 802748a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802748e:	2b00      	cmp	r3, #0
 8027490:	d119      	bne.n	80274c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027492:	2301      	movs	r3, #1
 8027494:	e07f      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	685b      	ldr	r3, [r3, #4]
 802749a:	2b02      	cmp	r3, #2
 802749c:	d003      	beq.n	80274a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802749e:	687b      	ldr	r3, [r7, #4]
 80274a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80274a2:	2b03      	cmp	r3, #3
 80274a4:	d107      	bne.n	80274b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80274a6:	4b3f      	ldr	r3, [pc, #252]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 80274a8:	681b      	ldr	r3, [r3, #0]
 80274aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	d109      	bne.n	80274c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80274b2:	2301      	movs	r3, #1
 80274b4:	e06f      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80274b6:	4b3b      	ldr	r3, [pc, #236]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 80274b8:	681b      	ldr	r3, [r3, #0]
 80274ba:	f003 0302 	and.w	r3, r3, #2
 80274be:	2b00      	cmp	r3, #0
 80274c0:	d101      	bne.n	80274c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80274c2:	2301      	movs	r3, #1
 80274c4:	e067      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80274c6:	4b37      	ldr	r3, [pc, #220]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 80274c8:	689b      	ldr	r3, [r3, #8]
 80274ca:	f023 0203 	bic.w	r2, r3, #3
 80274ce:	687b      	ldr	r3, [r7, #4]
 80274d0:	685b      	ldr	r3, [r3, #4]
 80274d2:	4934      	ldr	r1, [pc, #208]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 80274d4:	4313      	orrs	r3, r2
 80274d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80274d8:	f7fd fa40 	bl	802495c <HAL_GetTick>
 80274dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274de:	e00a      	b.n	80274f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80274e0:	f7fd fa3c 	bl	802495c <HAL_GetTick>
 80274e4:	4602      	mov	r2, r0
 80274e6:	68fb      	ldr	r3, [r7, #12]
 80274e8:	1ad3      	subs	r3, r2, r3
 80274ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80274ee:	4293      	cmp	r3, r2
 80274f0:	d901      	bls.n	80274f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80274f2:	2303      	movs	r3, #3
 80274f4:	e04f      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80274f6:	4b2b      	ldr	r3, [pc, #172]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 80274f8:	689b      	ldr	r3, [r3, #8]
 80274fa:	f003 020c 	and.w	r2, r3, #12
 80274fe:	687b      	ldr	r3, [r7, #4]
 8027500:	685b      	ldr	r3, [r3, #4]
 8027502:	009b      	lsls	r3, r3, #2
 8027504:	429a      	cmp	r2, r3
 8027506:	d1eb      	bne.n	80274e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027508:	4b25      	ldr	r3, [pc, #148]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 802750a:	681b      	ldr	r3, [r3, #0]
 802750c:	f003 0307 	and.w	r3, r3, #7
 8027510:	683a      	ldr	r2, [r7, #0]
 8027512:	429a      	cmp	r2, r3
 8027514:	d20c      	bcs.n	8027530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027516:	4b22      	ldr	r3, [pc, #136]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 8027518:	683a      	ldr	r2, [r7, #0]
 802751a:	b2d2      	uxtb	r2, r2
 802751c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802751e:	4b20      	ldr	r3, [pc, #128]	; (80275a0 <HAL_RCC_ClockConfig+0x1b8>)
 8027520:	681b      	ldr	r3, [r3, #0]
 8027522:	f003 0307 	and.w	r3, r3, #7
 8027526:	683a      	ldr	r2, [r7, #0]
 8027528:	429a      	cmp	r2, r3
 802752a:	d001      	beq.n	8027530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802752c:	2301      	movs	r3, #1
 802752e:	e032      	b.n	8027596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027530:	687b      	ldr	r3, [r7, #4]
 8027532:	681b      	ldr	r3, [r3, #0]
 8027534:	f003 0304 	and.w	r3, r3, #4
 8027538:	2b00      	cmp	r3, #0
 802753a:	d008      	beq.n	802754e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802753c:	4b19      	ldr	r3, [pc, #100]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802753e:	689b      	ldr	r3, [r3, #8]
 8027540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027544:	687b      	ldr	r3, [r7, #4]
 8027546:	68db      	ldr	r3, [r3, #12]
 8027548:	4916      	ldr	r1, [pc, #88]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802754a:	4313      	orrs	r3, r2
 802754c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802754e:	687b      	ldr	r3, [r7, #4]
 8027550:	681b      	ldr	r3, [r3, #0]
 8027552:	f003 0308 	and.w	r3, r3, #8
 8027556:	2b00      	cmp	r3, #0
 8027558:	d009      	beq.n	802756e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802755a:	4b12      	ldr	r3, [pc, #72]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802755c:	689b      	ldr	r3, [r3, #8]
 802755e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027562:	687b      	ldr	r3, [r7, #4]
 8027564:	691b      	ldr	r3, [r3, #16]
 8027566:	00db      	lsls	r3, r3, #3
 8027568:	490e      	ldr	r1, [pc, #56]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 802756a:	4313      	orrs	r3, r2
 802756c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802756e:	f000 f821 	bl	80275b4 <HAL_RCC_GetSysClockFreq>
 8027572:	4602      	mov	r2, r0
 8027574:	4b0b      	ldr	r3, [pc, #44]	; (80275a4 <HAL_RCC_ClockConfig+0x1bc>)
 8027576:	689b      	ldr	r3, [r3, #8]
 8027578:	091b      	lsrs	r3, r3, #4
 802757a:	f003 030f 	and.w	r3, r3, #15
 802757e:	490a      	ldr	r1, [pc, #40]	; (80275a8 <HAL_RCC_ClockConfig+0x1c0>)
 8027580:	5ccb      	ldrb	r3, [r1, r3]
 8027582:	fa22 f303 	lsr.w	r3, r2, r3
 8027586:	4a09      	ldr	r2, [pc, #36]	; (80275ac <HAL_RCC_ClockConfig+0x1c4>)
 8027588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802758a:	4b09      	ldr	r3, [pc, #36]	; (80275b0 <HAL_RCC_ClockConfig+0x1c8>)
 802758c:	681b      	ldr	r3, [r3, #0]
 802758e:	4618      	mov	r0, r3
 8027590:	f7f0 fb0a 	bl	8017ba8 <HAL_InitTick>

  return HAL_OK;
 8027594:	2300      	movs	r3, #0
}
 8027596:	4618      	mov	r0, r3
 8027598:	3710      	adds	r7, #16
 802759a:	46bd      	mov	sp, r7
 802759c:	bd80      	pop	{r7, pc}
 802759e:	bf00      	nop
 80275a0:	40023c00 	.word	0x40023c00
 80275a4:	40023800 	.word	0x40023800
 80275a8:	0802fca4 	.word	0x0802fca4
 80275ac:	20000084 	.word	0x20000084
 80275b0:	20001438 	.word	0x20001438

080275b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80275b4:	b5b0      	push	{r4, r5, r7, lr}
 80275b6:	b084      	sub	sp, #16
 80275b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80275ba:	2100      	movs	r1, #0
 80275bc:	6079      	str	r1, [r7, #4]
 80275be:	2100      	movs	r1, #0
 80275c0:	60f9      	str	r1, [r7, #12]
 80275c2:	2100      	movs	r1, #0
 80275c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80275c6:	2100      	movs	r1, #0
 80275c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80275ca:	4952      	ldr	r1, [pc, #328]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 80275cc:	6889      	ldr	r1, [r1, #8]
 80275ce:	f001 010c 	and.w	r1, r1, #12
 80275d2:	2908      	cmp	r1, #8
 80275d4:	d00d      	beq.n	80275f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80275d6:	2908      	cmp	r1, #8
 80275d8:	f200 8094 	bhi.w	8027704 <HAL_RCC_GetSysClockFreq+0x150>
 80275dc:	2900      	cmp	r1, #0
 80275de:	d002      	beq.n	80275e6 <HAL_RCC_GetSysClockFreq+0x32>
 80275e0:	2904      	cmp	r1, #4
 80275e2:	d003      	beq.n	80275ec <HAL_RCC_GetSysClockFreq+0x38>
 80275e4:	e08e      	b.n	8027704 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80275e6:	4b4c      	ldr	r3, [pc, #304]	; (8027718 <HAL_RCC_GetSysClockFreq+0x164>)
 80275e8:	60bb      	str	r3, [r7, #8]
       break;
 80275ea:	e08e      	b.n	802770a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80275ec:	4b4b      	ldr	r3, [pc, #300]	; (802771c <HAL_RCC_GetSysClockFreq+0x168>)
 80275ee:	60bb      	str	r3, [r7, #8]
      break;
 80275f0:	e08b      	b.n	802770a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80275f2:	4948      	ldr	r1, [pc, #288]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 80275f4:	6849      	ldr	r1, [r1, #4]
 80275f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80275fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80275fc:	4945      	ldr	r1, [pc, #276]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 80275fe:	6849      	ldr	r1, [r1, #4]
 8027600:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8027604:	2900      	cmp	r1, #0
 8027606:	d024      	beq.n	8027652 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027608:	4942      	ldr	r1, [pc, #264]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 802760a:	6849      	ldr	r1, [r1, #4]
 802760c:	0989      	lsrs	r1, r1, #6
 802760e:	4608      	mov	r0, r1
 8027610:	f04f 0100 	mov.w	r1, #0
 8027614:	f240 14ff 	movw	r4, #511	; 0x1ff
 8027618:	f04f 0500 	mov.w	r5, #0
 802761c:	ea00 0204 	and.w	r2, r0, r4
 8027620:	ea01 0305 	and.w	r3, r1, r5
 8027624:	493d      	ldr	r1, [pc, #244]	; (802771c <HAL_RCC_GetSysClockFreq+0x168>)
 8027626:	fb01 f003 	mul.w	r0, r1, r3
 802762a:	2100      	movs	r1, #0
 802762c:	fb01 f102 	mul.w	r1, r1, r2
 8027630:	1844      	adds	r4, r0, r1
 8027632:	493a      	ldr	r1, [pc, #232]	; (802771c <HAL_RCC_GetSysClockFreq+0x168>)
 8027634:	fba2 0101 	umull	r0, r1, r2, r1
 8027638:	1863      	adds	r3, r4, r1
 802763a:	4619      	mov	r1, r3
 802763c:	687b      	ldr	r3, [r7, #4]
 802763e:	461a      	mov	r2, r3
 8027640:	f04f 0300 	mov.w	r3, #0
 8027644:	f7d9 fb12 	bl	8000c6c <__aeabi_uldivmod>
 8027648:	4602      	mov	r2, r0
 802764a:	460b      	mov	r3, r1
 802764c:	4613      	mov	r3, r2
 802764e:	60fb      	str	r3, [r7, #12]
 8027650:	e04a      	b.n	80276e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027652:	4b30      	ldr	r3, [pc, #192]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 8027654:	685b      	ldr	r3, [r3, #4]
 8027656:	099b      	lsrs	r3, r3, #6
 8027658:	461a      	mov	r2, r3
 802765a:	f04f 0300 	mov.w	r3, #0
 802765e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8027662:	f04f 0100 	mov.w	r1, #0
 8027666:	ea02 0400 	and.w	r4, r2, r0
 802766a:	ea03 0501 	and.w	r5, r3, r1
 802766e:	4620      	mov	r0, r4
 8027670:	4629      	mov	r1, r5
 8027672:	f04f 0200 	mov.w	r2, #0
 8027676:	f04f 0300 	mov.w	r3, #0
 802767a:	014b      	lsls	r3, r1, #5
 802767c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8027680:	0142      	lsls	r2, r0, #5
 8027682:	4610      	mov	r0, r2
 8027684:	4619      	mov	r1, r3
 8027686:	1b00      	subs	r0, r0, r4
 8027688:	eb61 0105 	sbc.w	r1, r1, r5
 802768c:	f04f 0200 	mov.w	r2, #0
 8027690:	f04f 0300 	mov.w	r3, #0
 8027694:	018b      	lsls	r3, r1, #6
 8027696:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802769a:	0182      	lsls	r2, r0, #6
 802769c:	1a12      	subs	r2, r2, r0
 802769e:	eb63 0301 	sbc.w	r3, r3, r1
 80276a2:	f04f 0000 	mov.w	r0, #0
 80276a6:	f04f 0100 	mov.w	r1, #0
 80276aa:	00d9      	lsls	r1, r3, #3
 80276ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80276b0:	00d0      	lsls	r0, r2, #3
 80276b2:	4602      	mov	r2, r0
 80276b4:	460b      	mov	r3, r1
 80276b6:	1912      	adds	r2, r2, r4
 80276b8:	eb45 0303 	adc.w	r3, r5, r3
 80276bc:	f04f 0000 	mov.w	r0, #0
 80276c0:	f04f 0100 	mov.w	r1, #0
 80276c4:	0299      	lsls	r1, r3, #10
 80276c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80276ca:	0290      	lsls	r0, r2, #10
 80276cc:	4602      	mov	r2, r0
 80276ce:	460b      	mov	r3, r1
 80276d0:	4610      	mov	r0, r2
 80276d2:	4619      	mov	r1, r3
 80276d4:	687b      	ldr	r3, [r7, #4]
 80276d6:	461a      	mov	r2, r3
 80276d8:	f04f 0300 	mov.w	r3, #0
 80276dc:	f7d9 fac6 	bl	8000c6c <__aeabi_uldivmod>
 80276e0:	4602      	mov	r2, r0
 80276e2:	460b      	mov	r3, r1
 80276e4:	4613      	mov	r3, r2
 80276e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80276e8:	4b0a      	ldr	r3, [pc, #40]	; (8027714 <HAL_RCC_GetSysClockFreq+0x160>)
 80276ea:	685b      	ldr	r3, [r3, #4]
 80276ec:	0c1b      	lsrs	r3, r3, #16
 80276ee:	f003 0303 	and.w	r3, r3, #3
 80276f2:	3301      	adds	r3, #1
 80276f4:	005b      	lsls	r3, r3, #1
 80276f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80276f8:	68fa      	ldr	r2, [r7, #12]
 80276fa:	683b      	ldr	r3, [r7, #0]
 80276fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8027700:	60bb      	str	r3, [r7, #8]
      break;
 8027702:	e002      	b.n	802770a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027704:	4b04      	ldr	r3, [pc, #16]	; (8027718 <HAL_RCC_GetSysClockFreq+0x164>)
 8027706:	60bb      	str	r3, [r7, #8]
      break;
 8027708:	bf00      	nop
    }
  }
  return sysclockfreq;
 802770a:	68bb      	ldr	r3, [r7, #8]
}
 802770c:	4618      	mov	r0, r3
 802770e:	3710      	adds	r7, #16
 8027710:	46bd      	mov	sp, r7
 8027712:	bdb0      	pop	{r4, r5, r7, pc}
 8027714:	40023800 	.word	0x40023800
 8027718:	00f42400 	.word	0x00f42400
 802771c:	017d7840 	.word	0x017d7840

08027720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027720:	b480      	push	{r7}
 8027722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027724:	4b03      	ldr	r3, [pc, #12]	; (8027734 <HAL_RCC_GetHCLKFreq+0x14>)
 8027726:	681b      	ldr	r3, [r3, #0]
}
 8027728:	4618      	mov	r0, r3
 802772a:	46bd      	mov	sp, r7
 802772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027730:	4770      	bx	lr
 8027732:	bf00      	nop
 8027734:	20000084 	.word	0x20000084

08027738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027738:	b580      	push	{r7, lr}
 802773a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802773c:	f7ff fff0 	bl	8027720 <HAL_RCC_GetHCLKFreq>
 8027740:	4602      	mov	r2, r0
 8027742:	4b05      	ldr	r3, [pc, #20]	; (8027758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027744:	689b      	ldr	r3, [r3, #8]
 8027746:	0a9b      	lsrs	r3, r3, #10
 8027748:	f003 0307 	and.w	r3, r3, #7
 802774c:	4903      	ldr	r1, [pc, #12]	; (802775c <HAL_RCC_GetPCLK1Freq+0x24>)
 802774e:	5ccb      	ldrb	r3, [r1, r3]
 8027750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027754:	4618      	mov	r0, r3
 8027756:	bd80      	pop	{r7, pc}
 8027758:	40023800 	.word	0x40023800
 802775c:	0802fcb4 	.word	0x0802fcb4

08027760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027760:	b480      	push	{r7}
 8027762:	b083      	sub	sp, #12
 8027764:	af00      	add	r7, sp, #0
 8027766:	6078      	str	r0, [r7, #4]
 8027768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802776a:	687b      	ldr	r3, [r7, #4]
 802776c:	220f      	movs	r2, #15
 802776e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027770:	4b12      	ldr	r3, [pc, #72]	; (80277bc <HAL_RCC_GetClockConfig+0x5c>)
 8027772:	689b      	ldr	r3, [r3, #8]
 8027774:	f003 0203 	and.w	r2, r3, #3
 8027778:	687b      	ldr	r3, [r7, #4]
 802777a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 802777c:	4b0f      	ldr	r3, [pc, #60]	; (80277bc <HAL_RCC_GetClockConfig+0x5c>)
 802777e:	689b      	ldr	r3, [r3, #8]
 8027780:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027784:	687b      	ldr	r3, [r7, #4]
 8027786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027788:	4b0c      	ldr	r3, [pc, #48]	; (80277bc <HAL_RCC_GetClockConfig+0x5c>)
 802778a:	689b      	ldr	r3, [r3, #8]
 802778c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027794:	4b09      	ldr	r3, [pc, #36]	; (80277bc <HAL_RCC_GetClockConfig+0x5c>)
 8027796:	689b      	ldr	r3, [r3, #8]
 8027798:	08db      	lsrs	r3, r3, #3
 802779a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 802779e:	687b      	ldr	r3, [r7, #4]
 80277a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80277a2:	4b07      	ldr	r3, [pc, #28]	; (80277c0 <HAL_RCC_GetClockConfig+0x60>)
 80277a4:	681b      	ldr	r3, [r3, #0]
 80277a6:	f003 0207 	and.w	r2, r3, #7
 80277aa:	683b      	ldr	r3, [r7, #0]
 80277ac:	601a      	str	r2, [r3, #0]
}
 80277ae:	bf00      	nop
 80277b0:	370c      	adds	r7, #12
 80277b2:	46bd      	mov	sp, r7
 80277b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b8:	4770      	bx	lr
 80277ba:	bf00      	nop
 80277bc:	40023800 	.word	0x40023800
 80277c0:	40023c00 	.word	0x40023c00

080277c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80277c4:	b580      	push	{r7, lr}
 80277c6:	b082      	sub	sp, #8
 80277c8:	af00      	add	r7, sp, #0
 80277ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80277cc:	687b      	ldr	r3, [r7, #4]
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	d101      	bne.n	80277d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80277d2:	2301      	movs	r3, #1
 80277d4:	e07b      	b.n	80278ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80277d6:	687b      	ldr	r3, [r7, #4]
 80277d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80277da:	2b00      	cmp	r3, #0
 80277dc:	d108      	bne.n	80277f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80277de:	687b      	ldr	r3, [r7, #4]
 80277e0:	685b      	ldr	r3, [r3, #4]
 80277e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80277e6:	d009      	beq.n	80277fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80277e8:	687b      	ldr	r3, [r7, #4]
 80277ea:	2200      	movs	r2, #0
 80277ec:	61da      	str	r2, [r3, #28]
 80277ee:	e005      	b.n	80277fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80277f0:	687b      	ldr	r3, [r7, #4]
 80277f2:	2200      	movs	r2, #0
 80277f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	2200      	movs	r2, #0
 80277fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80277fc:	687b      	ldr	r3, [r7, #4]
 80277fe:	2200      	movs	r2, #0
 8027800:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8027802:	687b      	ldr	r3, [r7, #4]
 8027804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027808:	b2db      	uxtb	r3, r3
 802780a:	2b00      	cmp	r3, #0
 802780c:	d106      	bne.n	802781c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802780e:	687b      	ldr	r3, [r7, #4]
 8027810:	2200      	movs	r2, #0
 8027812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027816:	6878      	ldr	r0, [r7, #4]
 8027818:	f7f0 f932 	bl	8017a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802781c:	687b      	ldr	r3, [r7, #4]
 802781e:	2202      	movs	r2, #2
 8027820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8027824:	687b      	ldr	r3, [r7, #4]
 8027826:	681b      	ldr	r3, [r3, #0]
 8027828:	681a      	ldr	r2, [r3, #0]
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	681b      	ldr	r3, [r3, #0]
 802782e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8027834:	687b      	ldr	r3, [r7, #4]
 8027836:	685b      	ldr	r3, [r3, #4]
 8027838:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802783c:	687b      	ldr	r3, [r7, #4]
 802783e:	689b      	ldr	r3, [r3, #8]
 8027840:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8027844:	431a      	orrs	r2, r3
 8027846:	687b      	ldr	r3, [r7, #4]
 8027848:	68db      	ldr	r3, [r3, #12]
 802784a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802784e:	431a      	orrs	r2, r3
 8027850:	687b      	ldr	r3, [r7, #4]
 8027852:	691b      	ldr	r3, [r3, #16]
 8027854:	f003 0302 	and.w	r3, r3, #2
 8027858:	431a      	orrs	r2, r3
 802785a:	687b      	ldr	r3, [r7, #4]
 802785c:	695b      	ldr	r3, [r3, #20]
 802785e:	f003 0301 	and.w	r3, r3, #1
 8027862:	431a      	orrs	r2, r3
 8027864:	687b      	ldr	r3, [r7, #4]
 8027866:	699b      	ldr	r3, [r3, #24]
 8027868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802786c:	431a      	orrs	r2, r3
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	69db      	ldr	r3, [r3, #28]
 8027872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027876:	431a      	orrs	r2, r3
 8027878:	687b      	ldr	r3, [r7, #4]
 802787a:	6a1b      	ldr	r3, [r3, #32]
 802787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027880:	ea42 0103 	orr.w	r1, r2, r3
 8027884:	687b      	ldr	r3, [r7, #4]
 8027886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027888:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802788c:	687b      	ldr	r3, [r7, #4]
 802788e:	681b      	ldr	r3, [r3, #0]
 8027890:	430a      	orrs	r2, r1
 8027892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8027894:	687b      	ldr	r3, [r7, #4]
 8027896:	699b      	ldr	r3, [r3, #24]
 8027898:	0c1b      	lsrs	r3, r3, #16
 802789a:	f003 0104 	and.w	r1, r3, #4
 802789e:	687b      	ldr	r3, [r7, #4]
 80278a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80278a2:	f003 0210 	and.w	r2, r3, #16
 80278a6:	687b      	ldr	r3, [r7, #4]
 80278a8:	681b      	ldr	r3, [r3, #0]
 80278aa:	430a      	orrs	r2, r1
 80278ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80278ae:	687b      	ldr	r3, [r7, #4]
 80278b0:	681b      	ldr	r3, [r3, #0]
 80278b2:	69da      	ldr	r2, [r3, #28]
 80278b4:	687b      	ldr	r3, [r7, #4]
 80278b6:	681b      	ldr	r3, [r3, #0]
 80278b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80278bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80278be:	687b      	ldr	r3, [r7, #4]
 80278c0:	2200      	movs	r2, #0
 80278c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80278c4:	687b      	ldr	r3, [r7, #4]
 80278c6:	2201      	movs	r2, #1
 80278c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80278cc:	2300      	movs	r3, #0
}
 80278ce:	4618      	mov	r0, r3
 80278d0:	3708      	adds	r7, #8
 80278d2:	46bd      	mov	sp, r7
 80278d4:	bd80      	pop	{r7, pc}

080278d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80278d6:	b580      	push	{r7, lr}
 80278d8:	b088      	sub	sp, #32
 80278da:	af00      	add	r7, sp, #0
 80278dc:	60f8      	str	r0, [r7, #12]
 80278de:	60b9      	str	r1, [r7, #8]
 80278e0:	603b      	str	r3, [r7, #0]
 80278e2:	4613      	mov	r3, r2
 80278e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80278e6:	2300      	movs	r3, #0
 80278e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80278ea:	68fb      	ldr	r3, [r7, #12]
 80278ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80278f0:	2b01      	cmp	r3, #1
 80278f2:	d101      	bne.n	80278f8 <HAL_SPI_Transmit+0x22>
 80278f4:	2302      	movs	r3, #2
 80278f6:	e126      	b.n	8027b46 <HAL_SPI_Transmit+0x270>
 80278f8:	68fb      	ldr	r3, [r7, #12]
 80278fa:	2201      	movs	r2, #1
 80278fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027900:	f7fd f82c 	bl	802495c <HAL_GetTick>
 8027904:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8027906:	88fb      	ldrh	r3, [r7, #6]
 8027908:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802790a:	68fb      	ldr	r3, [r7, #12]
 802790c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027910:	b2db      	uxtb	r3, r3
 8027912:	2b01      	cmp	r3, #1
 8027914:	d002      	beq.n	802791c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8027916:	2302      	movs	r3, #2
 8027918:	77fb      	strb	r3, [r7, #31]
    goto error;
 802791a:	e10b      	b.n	8027b34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802791c:	68bb      	ldr	r3, [r7, #8]
 802791e:	2b00      	cmp	r3, #0
 8027920:	d002      	beq.n	8027928 <HAL_SPI_Transmit+0x52>
 8027922:	88fb      	ldrh	r3, [r7, #6]
 8027924:	2b00      	cmp	r3, #0
 8027926:	d102      	bne.n	802792e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8027928:	2301      	movs	r3, #1
 802792a:	77fb      	strb	r3, [r7, #31]
    goto error;
 802792c:	e102      	b.n	8027b34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802792e:	68fb      	ldr	r3, [r7, #12]
 8027930:	2203      	movs	r2, #3
 8027932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027936:	68fb      	ldr	r3, [r7, #12]
 8027938:	2200      	movs	r2, #0
 802793a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802793c:	68fb      	ldr	r3, [r7, #12]
 802793e:	68ba      	ldr	r2, [r7, #8]
 8027940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027942:	68fb      	ldr	r3, [r7, #12]
 8027944:	88fa      	ldrh	r2, [r7, #6]
 8027946:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8027948:	68fb      	ldr	r3, [r7, #12]
 802794a:	88fa      	ldrh	r2, [r7, #6]
 802794c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802794e:	68fb      	ldr	r3, [r7, #12]
 8027950:	2200      	movs	r2, #0
 8027952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8027954:	68fb      	ldr	r3, [r7, #12]
 8027956:	2200      	movs	r2, #0
 8027958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802795a:	68fb      	ldr	r3, [r7, #12]
 802795c:	2200      	movs	r2, #0
 802795e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8027960:	68fb      	ldr	r3, [r7, #12]
 8027962:	2200      	movs	r2, #0
 8027964:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	2200      	movs	r2, #0
 802796a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802796c:	68fb      	ldr	r3, [r7, #12]
 802796e:	689b      	ldr	r3, [r3, #8]
 8027970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027974:	d10f      	bne.n	8027996 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027976:	68fb      	ldr	r3, [r7, #12]
 8027978:	681b      	ldr	r3, [r3, #0]
 802797a:	681a      	ldr	r2, [r3, #0]
 802797c:	68fb      	ldr	r3, [r7, #12]
 802797e:	681b      	ldr	r3, [r3, #0]
 8027980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8027986:	68fb      	ldr	r3, [r7, #12]
 8027988:	681b      	ldr	r3, [r3, #0]
 802798a:	681a      	ldr	r2, [r3, #0]
 802798c:	68fb      	ldr	r3, [r7, #12]
 802798e:	681b      	ldr	r3, [r3, #0]
 8027990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8027994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027996:	68fb      	ldr	r3, [r7, #12]
 8027998:	681b      	ldr	r3, [r3, #0]
 802799a:	681b      	ldr	r3, [r3, #0]
 802799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80279a0:	2b40      	cmp	r3, #64	; 0x40
 80279a2:	d007      	beq.n	80279b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80279a4:	68fb      	ldr	r3, [r7, #12]
 80279a6:	681b      	ldr	r3, [r3, #0]
 80279a8:	681a      	ldr	r2, [r3, #0]
 80279aa:	68fb      	ldr	r3, [r7, #12]
 80279ac:	681b      	ldr	r3, [r3, #0]
 80279ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80279b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80279b4:	68fb      	ldr	r3, [r7, #12]
 80279b6:	68db      	ldr	r3, [r3, #12]
 80279b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80279bc:	d14b      	bne.n	8027a56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80279be:	68fb      	ldr	r3, [r7, #12]
 80279c0:	685b      	ldr	r3, [r3, #4]
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d002      	beq.n	80279cc <HAL_SPI_Transmit+0xf6>
 80279c6:	8afb      	ldrh	r3, [r7, #22]
 80279c8:	2b01      	cmp	r3, #1
 80279ca:	d13e      	bne.n	8027a4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80279cc:	68fb      	ldr	r3, [r7, #12]
 80279ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279d0:	881a      	ldrh	r2, [r3, #0]
 80279d2:	68fb      	ldr	r3, [r7, #12]
 80279d4:	681b      	ldr	r3, [r3, #0]
 80279d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80279d8:	68fb      	ldr	r3, [r7, #12]
 80279da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279dc:	1c9a      	adds	r2, r3, #2
 80279de:	68fb      	ldr	r3, [r7, #12]
 80279e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80279e2:	68fb      	ldr	r3, [r7, #12]
 80279e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80279e6:	b29b      	uxth	r3, r3
 80279e8:	3b01      	subs	r3, #1
 80279ea:	b29a      	uxth	r2, r3
 80279ec:	68fb      	ldr	r3, [r7, #12]
 80279ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80279f0:	e02b      	b.n	8027a4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80279f2:	68fb      	ldr	r3, [r7, #12]
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	689b      	ldr	r3, [r3, #8]
 80279f8:	f003 0302 	and.w	r3, r3, #2
 80279fc:	2b02      	cmp	r3, #2
 80279fe:	d112      	bne.n	8027a26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a04:	881a      	ldrh	r2, [r3, #0]
 8027a06:	68fb      	ldr	r3, [r7, #12]
 8027a08:	681b      	ldr	r3, [r3, #0]
 8027a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027a0c:	68fb      	ldr	r3, [r7, #12]
 8027a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a10:	1c9a      	adds	r2, r3, #2
 8027a12:	68fb      	ldr	r3, [r7, #12]
 8027a14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027a16:	68fb      	ldr	r3, [r7, #12]
 8027a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a1a:	b29b      	uxth	r3, r3
 8027a1c:	3b01      	subs	r3, #1
 8027a1e:	b29a      	uxth	r2, r3
 8027a20:	68fb      	ldr	r3, [r7, #12]
 8027a22:	86da      	strh	r2, [r3, #54]	; 0x36
 8027a24:	e011      	b.n	8027a4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a26:	f7fc ff99 	bl	802495c <HAL_GetTick>
 8027a2a:	4602      	mov	r2, r0
 8027a2c:	69bb      	ldr	r3, [r7, #24]
 8027a2e:	1ad3      	subs	r3, r2, r3
 8027a30:	683a      	ldr	r2, [r7, #0]
 8027a32:	429a      	cmp	r2, r3
 8027a34:	d803      	bhi.n	8027a3e <HAL_SPI_Transmit+0x168>
 8027a36:	683b      	ldr	r3, [r7, #0]
 8027a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a3c:	d102      	bne.n	8027a44 <HAL_SPI_Transmit+0x16e>
 8027a3e:	683b      	ldr	r3, [r7, #0]
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d102      	bne.n	8027a4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027a44:	2303      	movs	r3, #3
 8027a46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027a48:	e074      	b.n	8027b34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027a4a:	68fb      	ldr	r3, [r7, #12]
 8027a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a4e:	b29b      	uxth	r3, r3
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d1ce      	bne.n	80279f2 <HAL_SPI_Transmit+0x11c>
 8027a54:	e04c      	b.n	8027af0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027a56:	68fb      	ldr	r3, [r7, #12]
 8027a58:	685b      	ldr	r3, [r3, #4]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d002      	beq.n	8027a64 <HAL_SPI_Transmit+0x18e>
 8027a5e:	8afb      	ldrh	r3, [r7, #22]
 8027a60:	2b01      	cmp	r3, #1
 8027a62:	d140      	bne.n	8027ae6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	681b      	ldr	r3, [r3, #0]
 8027a6c:	330c      	adds	r3, #12
 8027a6e:	7812      	ldrb	r2, [r2, #0]
 8027a70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027a72:	68fb      	ldr	r3, [r7, #12]
 8027a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a76:	1c5a      	adds	r2, r3, #1
 8027a78:	68fb      	ldr	r3, [r7, #12]
 8027a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027a7c:	68fb      	ldr	r3, [r7, #12]
 8027a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a80:	b29b      	uxth	r3, r3
 8027a82:	3b01      	subs	r3, #1
 8027a84:	b29a      	uxth	r2, r3
 8027a86:	68fb      	ldr	r3, [r7, #12]
 8027a88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8027a8a:	e02c      	b.n	8027ae6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027a8c:	68fb      	ldr	r3, [r7, #12]
 8027a8e:	681b      	ldr	r3, [r3, #0]
 8027a90:	689b      	ldr	r3, [r3, #8]
 8027a92:	f003 0302 	and.w	r3, r3, #2
 8027a96:	2b02      	cmp	r3, #2
 8027a98:	d113      	bne.n	8027ac2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027a9a:	68fb      	ldr	r3, [r7, #12]
 8027a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027a9e:	68fb      	ldr	r3, [r7, #12]
 8027aa0:	681b      	ldr	r3, [r3, #0]
 8027aa2:	330c      	adds	r3, #12
 8027aa4:	7812      	ldrb	r2, [r2, #0]
 8027aa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8027aa8:	68fb      	ldr	r3, [r7, #12]
 8027aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027aac:	1c5a      	adds	r2, r3, #1
 8027aae:	68fb      	ldr	r3, [r7, #12]
 8027ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027ab2:	68fb      	ldr	r3, [r7, #12]
 8027ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ab6:	b29b      	uxth	r3, r3
 8027ab8:	3b01      	subs	r3, #1
 8027aba:	b29a      	uxth	r2, r3
 8027abc:	68fb      	ldr	r3, [r7, #12]
 8027abe:	86da      	strh	r2, [r3, #54]	; 0x36
 8027ac0:	e011      	b.n	8027ae6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027ac2:	f7fc ff4b 	bl	802495c <HAL_GetTick>
 8027ac6:	4602      	mov	r2, r0
 8027ac8:	69bb      	ldr	r3, [r7, #24]
 8027aca:	1ad3      	subs	r3, r2, r3
 8027acc:	683a      	ldr	r2, [r7, #0]
 8027ace:	429a      	cmp	r2, r3
 8027ad0:	d803      	bhi.n	8027ada <HAL_SPI_Transmit+0x204>
 8027ad2:	683b      	ldr	r3, [r7, #0]
 8027ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ad8:	d102      	bne.n	8027ae0 <HAL_SPI_Transmit+0x20a>
 8027ada:	683b      	ldr	r3, [r7, #0]
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	d102      	bne.n	8027ae6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027ae0:	2303      	movs	r3, #3
 8027ae2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027ae4:	e026      	b.n	8027b34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027ae6:	68fb      	ldr	r3, [r7, #12]
 8027ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027aea:	b29b      	uxth	r3, r3
 8027aec:	2b00      	cmp	r3, #0
 8027aee:	d1cd      	bne.n	8027a8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027af0:	69ba      	ldr	r2, [r7, #24]
 8027af2:	6839      	ldr	r1, [r7, #0]
 8027af4:	68f8      	ldr	r0, [r7, #12]
 8027af6:	f000 fbcb 	bl	8028290 <SPI_EndRxTxTransaction>
 8027afa:	4603      	mov	r3, r0
 8027afc:	2b00      	cmp	r3, #0
 8027afe:	d002      	beq.n	8027b06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027b00:	68fb      	ldr	r3, [r7, #12]
 8027b02:	2220      	movs	r2, #32
 8027b04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027b06:	68fb      	ldr	r3, [r7, #12]
 8027b08:	689b      	ldr	r3, [r3, #8]
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	d10a      	bne.n	8027b24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027b0e:	2300      	movs	r3, #0
 8027b10:	613b      	str	r3, [r7, #16]
 8027b12:	68fb      	ldr	r3, [r7, #12]
 8027b14:	681b      	ldr	r3, [r3, #0]
 8027b16:	68db      	ldr	r3, [r3, #12]
 8027b18:	613b      	str	r3, [r7, #16]
 8027b1a:	68fb      	ldr	r3, [r7, #12]
 8027b1c:	681b      	ldr	r3, [r3, #0]
 8027b1e:	689b      	ldr	r3, [r3, #8]
 8027b20:	613b      	str	r3, [r7, #16]
 8027b22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027b24:	68fb      	ldr	r3, [r7, #12]
 8027b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	d002      	beq.n	8027b32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8027b2c:	2301      	movs	r3, #1
 8027b2e:	77fb      	strb	r3, [r7, #31]
 8027b30:	e000      	b.n	8027b34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8027b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027b34:	68fb      	ldr	r3, [r7, #12]
 8027b36:	2201      	movs	r2, #1
 8027b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8027b3c:	68fb      	ldr	r3, [r7, #12]
 8027b3e:	2200      	movs	r2, #0
 8027b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8027b46:	4618      	mov	r0, r3
 8027b48:	3720      	adds	r7, #32
 8027b4a:	46bd      	mov	sp, r7
 8027b4c:	bd80      	pop	{r7, pc}

08027b4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027b4e:	b580      	push	{r7, lr}
 8027b50:	b088      	sub	sp, #32
 8027b52:	af02      	add	r7, sp, #8
 8027b54:	60f8      	str	r0, [r7, #12]
 8027b56:	60b9      	str	r1, [r7, #8]
 8027b58:	603b      	str	r3, [r7, #0]
 8027b5a:	4613      	mov	r3, r2
 8027b5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027b5e:	2300      	movs	r3, #0
 8027b60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8027b62:	68fb      	ldr	r3, [r7, #12]
 8027b64:	685b      	ldr	r3, [r3, #4]
 8027b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027b6a:	d112      	bne.n	8027b92 <HAL_SPI_Receive+0x44>
 8027b6c:	68fb      	ldr	r3, [r7, #12]
 8027b6e:	689b      	ldr	r3, [r3, #8]
 8027b70:	2b00      	cmp	r3, #0
 8027b72:	d10e      	bne.n	8027b92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8027b74:	68fb      	ldr	r3, [r7, #12]
 8027b76:	2204      	movs	r2, #4
 8027b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8027b7c:	88fa      	ldrh	r2, [r7, #6]
 8027b7e:	683b      	ldr	r3, [r7, #0]
 8027b80:	9300      	str	r3, [sp, #0]
 8027b82:	4613      	mov	r3, r2
 8027b84:	68ba      	ldr	r2, [r7, #8]
 8027b86:	68b9      	ldr	r1, [r7, #8]
 8027b88:	68f8      	ldr	r0, [r7, #12]
 8027b8a:	f000 f8f1 	bl	8027d70 <HAL_SPI_TransmitReceive>
 8027b8e:	4603      	mov	r3, r0
 8027b90:	e0ea      	b.n	8027d68 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027b92:	68fb      	ldr	r3, [r7, #12]
 8027b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027b98:	2b01      	cmp	r3, #1
 8027b9a:	d101      	bne.n	8027ba0 <HAL_SPI_Receive+0x52>
 8027b9c:	2302      	movs	r3, #2
 8027b9e:	e0e3      	b.n	8027d68 <HAL_SPI_Receive+0x21a>
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	2201      	movs	r2, #1
 8027ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027ba8:	f7fc fed8 	bl	802495c <HAL_GetTick>
 8027bac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027bae:	68fb      	ldr	r3, [r7, #12]
 8027bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027bb4:	b2db      	uxtb	r3, r3
 8027bb6:	2b01      	cmp	r3, #1
 8027bb8:	d002      	beq.n	8027bc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8027bba:	2302      	movs	r3, #2
 8027bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027bbe:	e0ca      	b.n	8027d56 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027bc0:	68bb      	ldr	r3, [r7, #8]
 8027bc2:	2b00      	cmp	r3, #0
 8027bc4:	d002      	beq.n	8027bcc <HAL_SPI_Receive+0x7e>
 8027bc6:	88fb      	ldrh	r3, [r7, #6]
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	d102      	bne.n	8027bd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8027bcc:	2301      	movs	r3, #1
 8027bce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027bd0:	e0c1      	b.n	8027d56 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027bd2:	68fb      	ldr	r3, [r7, #12]
 8027bd4:	2204      	movs	r2, #4
 8027bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027bda:	68fb      	ldr	r3, [r7, #12]
 8027bdc:	2200      	movs	r2, #0
 8027bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027be0:	68fb      	ldr	r3, [r7, #12]
 8027be2:	68ba      	ldr	r2, [r7, #8]
 8027be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027be6:	68fb      	ldr	r3, [r7, #12]
 8027be8:	88fa      	ldrh	r2, [r7, #6]
 8027bea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8027bec:	68fb      	ldr	r3, [r7, #12]
 8027bee:	88fa      	ldrh	r2, [r7, #6]
 8027bf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027bf2:	68fb      	ldr	r3, [r7, #12]
 8027bf4:	2200      	movs	r2, #0
 8027bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8027bf8:	68fb      	ldr	r3, [r7, #12]
 8027bfa:	2200      	movs	r2, #0
 8027bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027bfe:	68fb      	ldr	r3, [r7, #12]
 8027c00:	2200      	movs	r2, #0
 8027c02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027c04:	68fb      	ldr	r3, [r7, #12]
 8027c06:	2200      	movs	r2, #0
 8027c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027c0a:	68fb      	ldr	r3, [r7, #12]
 8027c0c:	2200      	movs	r2, #0
 8027c0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027c10:	68fb      	ldr	r3, [r7, #12]
 8027c12:	689b      	ldr	r3, [r3, #8]
 8027c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027c18:	d10f      	bne.n	8027c3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027c1a:	68fb      	ldr	r3, [r7, #12]
 8027c1c:	681b      	ldr	r3, [r3, #0]
 8027c1e:	681a      	ldr	r2, [r3, #0]
 8027c20:	68fb      	ldr	r3, [r7, #12]
 8027c22:	681b      	ldr	r3, [r3, #0]
 8027c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027c28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8027c2a:	68fb      	ldr	r3, [r7, #12]
 8027c2c:	681b      	ldr	r3, [r3, #0]
 8027c2e:	681a      	ldr	r2, [r3, #0]
 8027c30:	68fb      	ldr	r3, [r7, #12]
 8027c32:	681b      	ldr	r3, [r3, #0]
 8027c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027c38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027c3a:	68fb      	ldr	r3, [r7, #12]
 8027c3c:	681b      	ldr	r3, [r3, #0]
 8027c3e:	681b      	ldr	r3, [r3, #0]
 8027c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027c44:	2b40      	cmp	r3, #64	; 0x40
 8027c46:	d007      	beq.n	8027c58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027c48:	68fb      	ldr	r3, [r7, #12]
 8027c4a:	681b      	ldr	r3, [r3, #0]
 8027c4c:	681a      	ldr	r2, [r3, #0]
 8027c4e:	68fb      	ldr	r3, [r7, #12]
 8027c50:	681b      	ldr	r3, [r3, #0]
 8027c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027c56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027c58:	68fb      	ldr	r3, [r7, #12]
 8027c5a:	68db      	ldr	r3, [r3, #12]
 8027c5c:	2b00      	cmp	r3, #0
 8027c5e:	d162      	bne.n	8027d26 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027c60:	e02e      	b.n	8027cc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	681b      	ldr	r3, [r3, #0]
 8027c66:	689b      	ldr	r3, [r3, #8]
 8027c68:	f003 0301 	and.w	r3, r3, #1
 8027c6c:	2b01      	cmp	r3, #1
 8027c6e:	d115      	bne.n	8027c9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027c70:	68fb      	ldr	r3, [r7, #12]
 8027c72:	681b      	ldr	r3, [r3, #0]
 8027c74:	f103 020c 	add.w	r2, r3, #12
 8027c78:	68fb      	ldr	r3, [r7, #12]
 8027c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c7c:	7812      	ldrb	r2, [r2, #0]
 8027c7e:	b2d2      	uxtb	r2, r2
 8027c80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8027c82:	68fb      	ldr	r3, [r7, #12]
 8027c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c86:	1c5a      	adds	r2, r3, #1
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027c8c:	68fb      	ldr	r3, [r7, #12]
 8027c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c90:	b29b      	uxth	r3, r3
 8027c92:	3b01      	subs	r3, #1
 8027c94:	b29a      	uxth	r2, r3
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027c9a:	e011      	b.n	8027cc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027c9c:	f7fc fe5e 	bl	802495c <HAL_GetTick>
 8027ca0:	4602      	mov	r2, r0
 8027ca2:	693b      	ldr	r3, [r7, #16]
 8027ca4:	1ad3      	subs	r3, r2, r3
 8027ca6:	683a      	ldr	r2, [r7, #0]
 8027ca8:	429a      	cmp	r2, r3
 8027caa:	d803      	bhi.n	8027cb4 <HAL_SPI_Receive+0x166>
 8027cac:	683b      	ldr	r3, [r7, #0]
 8027cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cb2:	d102      	bne.n	8027cba <HAL_SPI_Receive+0x16c>
 8027cb4:	683b      	ldr	r3, [r7, #0]
 8027cb6:	2b00      	cmp	r3, #0
 8027cb8:	d102      	bne.n	8027cc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8027cba:	2303      	movs	r3, #3
 8027cbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027cbe:	e04a      	b.n	8027d56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027cc0:	68fb      	ldr	r3, [r7, #12]
 8027cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cc4:	b29b      	uxth	r3, r3
 8027cc6:	2b00      	cmp	r3, #0
 8027cc8:	d1cb      	bne.n	8027c62 <HAL_SPI_Receive+0x114>
 8027cca:	e031      	b.n	8027d30 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027ccc:	68fb      	ldr	r3, [r7, #12]
 8027cce:	681b      	ldr	r3, [r3, #0]
 8027cd0:	689b      	ldr	r3, [r3, #8]
 8027cd2:	f003 0301 	and.w	r3, r3, #1
 8027cd6:	2b01      	cmp	r3, #1
 8027cd8:	d113      	bne.n	8027d02 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027cda:	68fb      	ldr	r3, [r7, #12]
 8027cdc:	681b      	ldr	r3, [r3, #0]
 8027cde:	68da      	ldr	r2, [r3, #12]
 8027ce0:	68fb      	ldr	r3, [r7, #12]
 8027ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ce4:	b292      	uxth	r2, r2
 8027ce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027ce8:	68fb      	ldr	r3, [r7, #12]
 8027cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027cec:	1c9a      	adds	r2, r3, #2
 8027cee:	68fb      	ldr	r3, [r7, #12]
 8027cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027cf2:	68fb      	ldr	r3, [r7, #12]
 8027cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cf6:	b29b      	uxth	r3, r3
 8027cf8:	3b01      	subs	r3, #1
 8027cfa:	b29a      	uxth	r2, r3
 8027cfc:	68fb      	ldr	r3, [r7, #12]
 8027cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027d00:	e011      	b.n	8027d26 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027d02:	f7fc fe2b 	bl	802495c <HAL_GetTick>
 8027d06:	4602      	mov	r2, r0
 8027d08:	693b      	ldr	r3, [r7, #16]
 8027d0a:	1ad3      	subs	r3, r2, r3
 8027d0c:	683a      	ldr	r2, [r7, #0]
 8027d0e:	429a      	cmp	r2, r3
 8027d10:	d803      	bhi.n	8027d1a <HAL_SPI_Receive+0x1cc>
 8027d12:	683b      	ldr	r3, [r7, #0]
 8027d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d18:	d102      	bne.n	8027d20 <HAL_SPI_Receive+0x1d2>
 8027d1a:	683b      	ldr	r3, [r7, #0]
 8027d1c:	2b00      	cmp	r3, #0
 8027d1e:	d102      	bne.n	8027d26 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027d20:	2303      	movs	r3, #3
 8027d22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027d24:	e017      	b.n	8027d56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d2a:	b29b      	uxth	r3, r3
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	d1cd      	bne.n	8027ccc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027d30:	693a      	ldr	r2, [r7, #16]
 8027d32:	6839      	ldr	r1, [r7, #0]
 8027d34:	68f8      	ldr	r0, [r7, #12]
 8027d36:	f000 fa45 	bl	80281c4 <SPI_EndRxTransaction>
 8027d3a:	4603      	mov	r3, r0
 8027d3c:	2b00      	cmp	r3, #0
 8027d3e:	d002      	beq.n	8027d46 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d40:	68fb      	ldr	r3, [r7, #12]
 8027d42:	2220      	movs	r2, #32
 8027d44:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027d46:	68fb      	ldr	r3, [r7, #12]
 8027d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027d4a:	2b00      	cmp	r3, #0
 8027d4c:	d002      	beq.n	8027d54 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027d4e:	2301      	movs	r3, #1
 8027d50:	75fb      	strb	r3, [r7, #23]
 8027d52:	e000      	b.n	8027d56 <HAL_SPI_Receive+0x208>
  }

error :
 8027d54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027d56:	68fb      	ldr	r3, [r7, #12]
 8027d58:	2201      	movs	r2, #1
 8027d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027d5e:	68fb      	ldr	r3, [r7, #12]
 8027d60:	2200      	movs	r2, #0
 8027d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8027d68:	4618      	mov	r0, r3
 8027d6a:	3718      	adds	r7, #24
 8027d6c:	46bd      	mov	sp, r7
 8027d6e:	bd80      	pop	{r7, pc}

08027d70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027d70:	b580      	push	{r7, lr}
 8027d72:	b08c      	sub	sp, #48	; 0x30
 8027d74:	af00      	add	r7, sp, #0
 8027d76:	60f8      	str	r0, [r7, #12]
 8027d78:	60b9      	str	r1, [r7, #8]
 8027d7a:	607a      	str	r2, [r7, #4]
 8027d7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027d7e:	2301      	movs	r3, #1
 8027d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027d82:	2300      	movs	r3, #0
 8027d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027d88:	68fb      	ldr	r3, [r7, #12]
 8027d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027d8e:	2b01      	cmp	r3, #1
 8027d90:	d101      	bne.n	8027d96 <HAL_SPI_TransmitReceive+0x26>
 8027d92:	2302      	movs	r3, #2
 8027d94:	e18a      	b.n	80280ac <HAL_SPI_TransmitReceive+0x33c>
 8027d96:	68fb      	ldr	r3, [r7, #12]
 8027d98:	2201      	movs	r2, #1
 8027d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027d9e:	f7fc fddd 	bl	802495c <HAL_GetTick>
 8027da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027da4:	68fb      	ldr	r3, [r7, #12]
 8027da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027dae:	68fb      	ldr	r3, [r7, #12]
 8027db0:	685b      	ldr	r3, [r3, #4]
 8027db2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027db4:	887b      	ldrh	r3, [r7, #2]
 8027db6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027dbc:	2b01      	cmp	r3, #1
 8027dbe:	d00f      	beq.n	8027de0 <HAL_SPI_TransmitReceive+0x70>
 8027dc0:	69fb      	ldr	r3, [r7, #28]
 8027dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027dc6:	d107      	bne.n	8027dd8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027dc8:	68fb      	ldr	r3, [r7, #12]
 8027dca:	689b      	ldr	r3, [r3, #8]
 8027dcc:	2b00      	cmp	r3, #0
 8027dce:	d103      	bne.n	8027dd8 <HAL_SPI_TransmitReceive+0x68>
 8027dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027dd4:	2b04      	cmp	r3, #4
 8027dd6:	d003      	beq.n	8027de0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027dd8:	2302      	movs	r3, #2
 8027dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027dde:	e15b      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027de0:	68bb      	ldr	r3, [r7, #8]
 8027de2:	2b00      	cmp	r3, #0
 8027de4:	d005      	beq.n	8027df2 <HAL_SPI_TransmitReceive+0x82>
 8027de6:	687b      	ldr	r3, [r7, #4]
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	d002      	beq.n	8027df2 <HAL_SPI_TransmitReceive+0x82>
 8027dec:	887b      	ldrh	r3, [r7, #2]
 8027dee:	2b00      	cmp	r3, #0
 8027df0:	d103      	bne.n	8027dfa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027df2:	2301      	movs	r3, #1
 8027df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027df8:	e14e      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027dfa:	68fb      	ldr	r3, [r7, #12]
 8027dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027e00:	b2db      	uxtb	r3, r3
 8027e02:	2b04      	cmp	r3, #4
 8027e04:	d003      	beq.n	8027e0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027e06:	68fb      	ldr	r3, [r7, #12]
 8027e08:	2205      	movs	r2, #5
 8027e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027e0e:	68fb      	ldr	r3, [r7, #12]
 8027e10:	2200      	movs	r2, #0
 8027e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027e14:	68fb      	ldr	r3, [r7, #12]
 8027e16:	687a      	ldr	r2, [r7, #4]
 8027e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027e1a:	68fb      	ldr	r3, [r7, #12]
 8027e1c:	887a      	ldrh	r2, [r7, #2]
 8027e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027e20:	68fb      	ldr	r3, [r7, #12]
 8027e22:	887a      	ldrh	r2, [r7, #2]
 8027e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027e26:	68fb      	ldr	r3, [r7, #12]
 8027e28:	68ba      	ldr	r2, [r7, #8]
 8027e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027e2c:	68fb      	ldr	r3, [r7, #12]
 8027e2e:	887a      	ldrh	r2, [r7, #2]
 8027e30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027e32:	68fb      	ldr	r3, [r7, #12]
 8027e34:	887a      	ldrh	r2, [r7, #2]
 8027e36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027e38:	68fb      	ldr	r3, [r7, #12]
 8027e3a:	2200      	movs	r2, #0
 8027e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027e3e:	68fb      	ldr	r3, [r7, #12]
 8027e40:	2200      	movs	r2, #0
 8027e42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027e44:	68fb      	ldr	r3, [r7, #12]
 8027e46:	681b      	ldr	r3, [r3, #0]
 8027e48:	681b      	ldr	r3, [r3, #0]
 8027e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027e4e:	2b40      	cmp	r3, #64	; 0x40
 8027e50:	d007      	beq.n	8027e62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027e52:	68fb      	ldr	r3, [r7, #12]
 8027e54:	681b      	ldr	r3, [r3, #0]
 8027e56:	681a      	ldr	r2, [r3, #0]
 8027e58:	68fb      	ldr	r3, [r7, #12]
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027e62:	68fb      	ldr	r3, [r7, #12]
 8027e64:	68db      	ldr	r3, [r3, #12]
 8027e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027e6a:	d178      	bne.n	8027f5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027e6c:	68fb      	ldr	r3, [r7, #12]
 8027e6e:	685b      	ldr	r3, [r3, #4]
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d002      	beq.n	8027e7a <HAL_SPI_TransmitReceive+0x10a>
 8027e74:	8b7b      	ldrh	r3, [r7, #26]
 8027e76:	2b01      	cmp	r3, #1
 8027e78:	d166      	bne.n	8027f48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027e7a:	68fb      	ldr	r3, [r7, #12]
 8027e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e7e:	881a      	ldrh	r2, [r3, #0]
 8027e80:	68fb      	ldr	r3, [r7, #12]
 8027e82:	681b      	ldr	r3, [r3, #0]
 8027e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027e86:	68fb      	ldr	r3, [r7, #12]
 8027e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e8a:	1c9a      	adds	r2, r3, #2
 8027e8c:	68fb      	ldr	r3, [r7, #12]
 8027e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027e90:	68fb      	ldr	r3, [r7, #12]
 8027e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027e94:	b29b      	uxth	r3, r3
 8027e96:	3b01      	subs	r3, #1
 8027e98:	b29a      	uxth	r2, r3
 8027e9a:	68fb      	ldr	r3, [r7, #12]
 8027e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027e9e:	e053      	b.n	8027f48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027ea0:	68fb      	ldr	r3, [r7, #12]
 8027ea2:	681b      	ldr	r3, [r3, #0]
 8027ea4:	689b      	ldr	r3, [r3, #8]
 8027ea6:	f003 0302 	and.w	r3, r3, #2
 8027eaa:	2b02      	cmp	r3, #2
 8027eac:	d11b      	bne.n	8027ee6 <HAL_SPI_TransmitReceive+0x176>
 8027eae:	68fb      	ldr	r3, [r7, #12]
 8027eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027eb2:	b29b      	uxth	r3, r3
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d016      	beq.n	8027ee6 <HAL_SPI_TransmitReceive+0x176>
 8027eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027eba:	2b01      	cmp	r3, #1
 8027ebc:	d113      	bne.n	8027ee6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027ebe:	68fb      	ldr	r3, [r7, #12]
 8027ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ec2:	881a      	ldrh	r2, [r3, #0]
 8027ec4:	68fb      	ldr	r3, [r7, #12]
 8027ec6:	681b      	ldr	r3, [r3, #0]
 8027ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027eca:	68fb      	ldr	r3, [r7, #12]
 8027ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ece:	1c9a      	adds	r2, r3, #2
 8027ed0:	68fb      	ldr	r3, [r7, #12]
 8027ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027ed4:	68fb      	ldr	r3, [r7, #12]
 8027ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ed8:	b29b      	uxth	r3, r3
 8027eda:	3b01      	subs	r3, #1
 8027edc:	b29a      	uxth	r2, r3
 8027ede:	68fb      	ldr	r3, [r7, #12]
 8027ee0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027ee2:	2300      	movs	r3, #0
 8027ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027ee6:	68fb      	ldr	r3, [r7, #12]
 8027ee8:	681b      	ldr	r3, [r3, #0]
 8027eea:	689b      	ldr	r3, [r3, #8]
 8027eec:	f003 0301 	and.w	r3, r3, #1
 8027ef0:	2b01      	cmp	r3, #1
 8027ef2:	d119      	bne.n	8027f28 <HAL_SPI_TransmitReceive+0x1b8>
 8027ef4:	68fb      	ldr	r3, [r7, #12]
 8027ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027ef8:	b29b      	uxth	r3, r3
 8027efa:	2b00      	cmp	r3, #0
 8027efc:	d014      	beq.n	8027f28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027efe:	68fb      	ldr	r3, [r7, #12]
 8027f00:	681b      	ldr	r3, [r3, #0]
 8027f02:	68da      	ldr	r2, [r3, #12]
 8027f04:	68fb      	ldr	r3, [r7, #12]
 8027f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f08:	b292      	uxth	r2, r2
 8027f0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027f0c:	68fb      	ldr	r3, [r7, #12]
 8027f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f10:	1c9a      	adds	r2, r3, #2
 8027f12:	68fb      	ldr	r3, [r7, #12]
 8027f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027f16:	68fb      	ldr	r3, [r7, #12]
 8027f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f1a:	b29b      	uxth	r3, r3
 8027f1c:	3b01      	subs	r3, #1
 8027f1e:	b29a      	uxth	r2, r3
 8027f20:	68fb      	ldr	r3, [r7, #12]
 8027f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027f24:	2301      	movs	r3, #1
 8027f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027f28:	f7fc fd18 	bl	802495c <HAL_GetTick>
 8027f2c:	4602      	mov	r2, r0
 8027f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f30:	1ad3      	subs	r3, r2, r3
 8027f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027f34:	429a      	cmp	r2, r3
 8027f36:	d807      	bhi.n	8027f48 <HAL_SPI_TransmitReceive+0x1d8>
 8027f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f3e:	d003      	beq.n	8027f48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027f40:	2303      	movs	r3, #3
 8027f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027f46:	e0a7      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027f48:	68fb      	ldr	r3, [r7, #12]
 8027f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f4c:	b29b      	uxth	r3, r3
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	d1a6      	bne.n	8027ea0 <HAL_SPI_TransmitReceive+0x130>
 8027f52:	68fb      	ldr	r3, [r7, #12]
 8027f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f56:	b29b      	uxth	r3, r3
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	d1a1      	bne.n	8027ea0 <HAL_SPI_TransmitReceive+0x130>
 8027f5c:	e07c      	b.n	8028058 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027f5e:	68fb      	ldr	r3, [r7, #12]
 8027f60:	685b      	ldr	r3, [r3, #4]
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d002      	beq.n	8027f6c <HAL_SPI_TransmitReceive+0x1fc>
 8027f66:	8b7b      	ldrh	r3, [r7, #26]
 8027f68:	2b01      	cmp	r3, #1
 8027f6a:	d16b      	bne.n	8028044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027f6c:	68fb      	ldr	r3, [r7, #12]
 8027f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027f70:	68fb      	ldr	r3, [r7, #12]
 8027f72:	681b      	ldr	r3, [r3, #0]
 8027f74:	330c      	adds	r3, #12
 8027f76:	7812      	ldrb	r2, [r2, #0]
 8027f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027f7a:	68fb      	ldr	r3, [r7, #12]
 8027f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f7e:	1c5a      	adds	r2, r3, #1
 8027f80:	68fb      	ldr	r3, [r7, #12]
 8027f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f88:	b29b      	uxth	r3, r3
 8027f8a:	3b01      	subs	r3, #1
 8027f8c:	b29a      	uxth	r2, r3
 8027f8e:	68fb      	ldr	r3, [r7, #12]
 8027f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027f92:	e057      	b.n	8028044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027f94:	68fb      	ldr	r3, [r7, #12]
 8027f96:	681b      	ldr	r3, [r3, #0]
 8027f98:	689b      	ldr	r3, [r3, #8]
 8027f9a:	f003 0302 	and.w	r3, r3, #2
 8027f9e:	2b02      	cmp	r3, #2
 8027fa0:	d11c      	bne.n	8027fdc <HAL_SPI_TransmitReceive+0x26c>
 8027fa2:	68fb      	ldr	r3, [r7, #12]
 8027fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027fa6:	b29b      	uxth	r3, r3
 8027fa8:	2b00      	cmp	r3, #0
 8027faa:	d017      	beq.n	8027fdc <HAL_SPI_TransmitReceive+0x26c>
 8027fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fae:	2b01      	cmp	r3, #1
 8027fb0:	d114      	bne.n	8027fdc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027fb2:	68fb      	ldr	r3, [r7, #12]
 8027fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027fb6:	68fb      	ldr	r3, [r7, #12]
 8027fb8:	681b      	ldr	r3, [r3, #0]
 8027fba:	330c      	adds	r3, #12
 8027fbc:	7812      	ldrb	r2, [r2, #0]
 8027fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027fc0:	68fb      	ldr	r3, [r7, #12]
 8027fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fc4:	1c5a      	adds	r2, r3, #1
 8027fc6:	68fb      	ldr	r3, [r7, #12]
 8027fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027fca:	68fb      	ldr	r3, [r7, #12]
 8027fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027fce:	b29b      	uxth	r3, r3
 8027fd0:	3b01      	subs	r3, #1
 8027fd2:	b29a      	uxth	r2, r3
 8027fd4:	68fb      	ldr	r3, [r7, #12]
 8027fd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027fd8:	2300      	movs	r3, #0
 8027fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027fdc:	68fb      	ldr	r3, [r7, #12]
 8027fde:	681b      	ldr	r3, [r3, #0]
 8027fe0:	689b      	ldr	r3, [r3, #8]
 8027fe2:	f003 0301 	and.w	r3, r3, #1
 8027fe6:	2b01      	cmp	r3, #1
 8027fe8:	d119      	bne.n	802801e <HAL_SPI_TransmitReceive+0x2ae>
 8027fea:	68fb      	ldr	r3, [r7, #12]
 8027fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027fee:	b29b      	uxth	r3, r3
 8027ff0:	2b00      	cmp	r3, #0
 8027ff2:	d014      	beq.n	802801e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027ff4:	68fb      	ldr	r3, [r7, #12]
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	68da      	ldr	r2, [r3, #12]
 8027ffa:	68fb      	ldr	r3, [r7, #12]
 8027ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ffe:	b2d2      	uxtb	r2, r2
 8028000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028002:	68fb      	ldr	r3, [r7, #12]
 8028004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028006:	1c5a      	adds	r2, r3, #1
 8028008:	68fb      	ldr	r3, [r7, #12]
 802800a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802800c:	68fb      	ldr	r3, [r7, #12]
 802800e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028010:	b29b      	uxth	r3, r3
 8028012:	3b01      	subs	r3, #1
 8028014:	b29a      	uxth	r2, r3
 8028016:	68fb      	ldr	r3, [r7, #12]
 8028018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802801a:	2301      	movs	r3, #1
 802801c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802801e:	f7fc fc9d 	bl	802495c <HAL_GetTick>
 8028022:	4602      	mov	r2, r0
 8028024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028026:	1ad3      	subs	r3, r2, r3
 8028028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802802a:	429a      	cmp	r2, r3
 802802c:	d803      	bhi.n	8028036 <HAL_SPI_TransmitReceive+0x2c6>
 802802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028034:	d102      	bne.n	802803c <HAL_SPI_TransmitReceive+0x2cc>
 8028036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028038:	2b00      	cmp	r3, #0
 802803a:	d103      	bne.n	8028044 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802803c:	2303      	movs	r3, #3
 802803e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028042:	e029      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028044:	68fb      	ldr	r3, [r7, #12]
 8028046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028048:	b29b      	uxth	r3, r3
 802804a:	2b00      	cmp	r3, #0
 802804c:	d1a2      	bne.n	8027f94 <HAL_SPI_TransmitReceive+0x224>
 802804e:	68fb      	ldr	r3, [r7, #12]
 8028050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028052:	b29b      	uxth	r3, r3
 8028054:	2b00      	cmp	r3, #0
 8028056:	d19d      	bne.n	8027f94 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802805a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802805c:	68f8      	ldr	r0, [r7, #12]
 802805e:	f000 f917 	bl	8028290 <SPI_EndRxTxTransaction>
 8028062:	4603      	mov	r3, r0
 8028064:	2b00      	cmp	r3, #0
 8028066:	d006      	beq.n	8028076 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028068:	2301      	movs	r3, #1
 802806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802806e:	68fb      	ldr	r3, [r7, #12]
 8028070:	2220      	movs	r2, #32
 8028072:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028074:	e010      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028076:	68fb      	ldr	r3, [r7, #12]
 8028078:	689b      	ldr	r3, [r3, #8]
 802807a:	2b00      	cmp	r3, #0
 802807c:	d10b      	bne.n	8028096 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802807e:	2300      	movs	r3, #0
 8028080:	617b      	str	r3, [r7, #20]
 8028082:	68fb      	ldr	r3, [r7, #12]
 8028084:	681b      	ldr	r3, [r3, #0]
 8028086:	68db      	ldr	r3, [r3, #12]
 8028088:	617b      	str	r3, [r7, #20]
 802808a:	68fb      	ldr	r3, [r7, #12]
 802808c:	681b      	ldr	r3, [r3, #0]
 802808e:	689b      	ldr	r3, [r3, #8]
 8028090:	617b      	str	r3, [r7, #20]
 8028092:	697b      	ldr	r3, [r7, #20]
 8028094:	e000      	b.n	8028098 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028098:	68fb      	ldr	r3, [r7, #12]
 802809a:	2201      	movs	r2, #1
 802809c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80280a0:	68fb      	ldr	r3, [r7, #12]
 80280a2:	2200      	movs	r2, #0
 80280a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80280a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80280ac:	4618      	mov	r0, r3
 80280ae:	3730      	adds	r7, #48	; 0x30
 80280b0:	46bd      	mov	sp, r7
 80280b2:	bd80      	pop	{r7, pc}

080280b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80280b4:	b580      	push	{r7, lr}
 80280b6:	b088      	sub	sp, #32
 80280b8:	af00      	add	r7, sp, #0
 80280ba:	60f8      	str	r0, [r7, #12]
 80280bc:	60b9      	str	r1, [r7, #8]
 80280be:	603b      	str	r3, [r7, #0]
 80280c0:	4613      	mov	r3, r2
 80280c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80280c4:	f7fc fc4a 	bl	802495c <HAL_GetTick>
 80280c8:	4602      	mov	r2, r0
 80280ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280cc:	1a9b      	subs	r3, r3, r2
 80280ce:	683a      	ldr	r2, [r7, #0]
 80280d0:	4413      	add	r3, r2
 80280d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80280d4:	f7fc fc42 	bl	802495c <HAL_GetTick>
 80280d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80280da:	4b39      	ldr	r3, [pc, #228]	; (80281c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	015b      	lsls	r3, r3, #5
 80280e0:	0d1b      	lsrs	r3, r3, #20
 80280e2:	69fa      	ldr	r2, [r7, #28]
 80280e4:	fb02 f303 	mul.w	r3, r2, r3
 80280e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80280ea:	e054      	b.n	8028196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80280ec:	683b      	ldr	r3, [r7, #0]
 80280ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80280f2:	d050      	beq.n	8028196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80280f4:	f7fc fc32 	bl	802495c <HAL_GetTick>
 80280f8:	4602      	mov	r2, r0
 80280fa:	69bb      	ldr	r3, [r7, #24]
 80280fc:	1ad3      	subs	r3, r2, r3
 80280fe:	69fa      	ldr	r2, [r7, #28]
 8028100:	429a      	cmp	r2, r3
 8028102:	d902      	bls.n	802810a <SPI_WaitFlagStateUntilTimeout+0x56>
 8028104:	69fb      	ldr	r3, [r7, #28]
 8028106:	2b00      	cmp	r3, #0
 8028108:	d13d      	bne.n	8028186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802810a:	68fb      	ldr	r3, [r7, #12]
 802810c:	681b      	ldr	r3, [r3, #0]
 802810e:	685a      	ldr	r2, [r3, #4]
 8028110:	68fb      	ldr	r3, [r7, #12]
 8028112:	681b      	ldr	r3, [r3, #0]
 8028114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	685b      	ldr	r3, [r3, #4]
 802811e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028122:	d111      	bne.n	8028148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8028124:	68fb      	ldr	r3, [r7, #12]
 8028126:	689b      	ldr	r3, [r3, #8]
 8028128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802812c:	d004      	beq.n	8028138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802812e:	68fb      	ldr	r3, [r7, #12]
 8028130:	689b      	ldr	r3, [r3, #8]
 8028132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028136:	d107      	bne.n	8028148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028138:	68fb      	ldr	r3, [r7, #12]
 802813a:	681b      	ldr	r3, [r3, #0]
 802813c:	681a      	ldr	r2, [r3, #0]
 802813e:	68fb      	ldr	r3, [r7, #12]
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028148:	68fb      	ldr	r3, [r7, #12]
 802814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802814c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028150:	d10f      	bne.n	8028172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028152:	68fb      	ldr	r3, [r7, #12]
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	681a      	ldr	r2, [r3, #0]
 8028158:	68fb      	ldr	r3, [r7, #12]
 802815a:	681b      	ldr	r3, [r3, #0]
 802815c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028160:	601a      	str	r2, [r3, #0]
 8028162:	68fb      	ldr	r3, [r7, #12]
 8028164:	681b      	ldr	r3, [r3, #0]
 8028166:	681a      	ldr	r2, [r3, #0]
 8028168:	68fb      	ldr	r3, [r7, #12]
 802816a:	681b      	ldr	r3, [r3, #0]
 802816c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028172:	68fb      	ldr	r3, [r7, #12]
 8028174:	2201      	movs	r2, #1
 8028176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802817a:	68fb      	ldr	r3, [r7, #12]
 802817c:	2200      	movs	r2, #0
 802817e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028182:	2303      	movs	r3, #3
 8028184:	e017      	b.n	80281b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8028186:	697b      	ldr	r3, [r7, #20]
 8028188:	2b00      	cmp	r3, #0
 802818a:	d101      	bne.n	8028190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802818c:	2300      	movs	r3, #0
 802818e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028190:	697b      	ldr	r3, [r7, #20]
 8028192:	3b01      	subs	r3, #1
 8028194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028196:	68fb      	ldr	r3, [r7, #12]
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	689a      	ldr	r2, [r3, #8]
 802819c:	68bb      	ldr	r3, [r7, #8]
 802819e:	4013      	ands	r3, r2
 80281a0:	68ba      	ldr	r2, [r7, #8]
 80281a2:	429a      	cmp	r2, r3
 80281a4:	bf0c      	ite	eq
 80281a6:	2301      	moveq	r3, #1
 80281a8:	2300      	movne	r3, #0
 80281aa:	b2db      	uxtb	r3, r3
 80281ac:	461a      	mov	r2, r3
 80281ae:	79fb      	ldrb	r3, [r7, #7]
 80281b0:	429a      	cmp	r2, r3
 80281b2:	d19b      	bne.n	80280ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80281b4:	2300      	movs	r3, #0
}
 80281b6:	4618      	mov	r0, r3
 80281b8:	3720      	adds	r7, #32
 80281ba:	46bd      	mov	sp, r7
 80281bc:	bd80      	pop	{r7, pc}
 80281be:	bf00      	nop
 80281c0:	20000084 	.word	0x20000084

080281c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80281c4:	b580      	push	{r7, lr}
 80281c6:	b086      	sub	sp, #24
 80281c8:	af02      	add	r7, sp, #8
 80281ca:	60f8      	str	r0, [r7, #12]
 80281cc:	60b9      	str	r1, [r7, #8]
 80281ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80281d0:	68fb      	ldr	r3, [r7, #12]
 80281d2:	685b      	ldr	r3, [r3, #4]
 80281d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80281d8:	d111      	bne.n	80281fe <SPI_EndRxTransaction+0x3a>
 80281da:	68fb      	ldr	r3, [r7, #12]
 80281dc:	689b      	ldr	r3, [r3, #8]
 80281de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80281e2:	d004      	beq.n	80281ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80281e4:	68fb      	ldr	r3, [r7, #12]
 80281e6:	689b      	ldr	r3, [r3, #8]
 80281e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80281ec:	d107      	bne.n	80281fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80281ee:	68fb      	ldr	r3, [r7, #12]
 80281f0:	681b      	ldr	r3, [r3, #0]
 80281f2:	681a      	ldr	r2, [r3, #0]
 80281f4:	68fb      	ldr	r3, [r7, #12]
 80281f6:	681b      	ldr	r3, [r3, #0]
 80281f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80281fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80281fe:	68fb      	ldr	r3, [r7, #12]
 8028200:	685b      	ldr	r3, [r3, #4]
 8028202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028206:	d12a      	bne.n	802825e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028208:	68fb      	ldr	r3, [r7, #12]
 802820a:	689b      	ldr	r3, [r3, #8]
 802820c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028210:	d012      	beq.n	8028238 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028212:	687b      	ldr	r3, [r7, #4]
 8028214:	9300      	str	r3, [sp, #0]
 8028216:	68bb      	ldr	r3, [r7, #8]
 8028218:	2200      	movs	r2, #0
 802821a:	2180      	movs	r1, #128	; 0x80
 802821c:	68f8      	ldr	r0, [r7, #12]
 802821e:	f7ff ff49 	bl	80280b4 <SPI_WaitFlagStateUntilTimeout>
 8028222:	4603      	mov	r3, r0
 8028224:	2b00      	cmp	r3, #0
 8028226:	d02d      	beq.n	8028284 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028228:	68fb      	ldr	r3, [r7, #12]
 802822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802822c:	f043 0220 	orr.w	r2, r3, #32
 8028230:	68fb      	ldr	r3, [r7, #12]
 8028232:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028234:	2303      	movs	r3, #3
 8028236:	e026      	b.n	8028286 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028238:	687b      	ldr	r3, [r7, #4]
 802823a:	9300      	str	r3, [sp, #0]
 802823c:	68bb      	ldr	r3, [r7, #8]
 802823e:	2200      	movs	r2, #0
 8028240:	2101      	movs	r1, #1
 8028242:	68f8      	ldr	r0, [r7, #12]
 8028244:	f7ff ff36 	bl	80280b4 <SPI_WaitFlagStateUntilTimeout>
 8028248:	4603      	mov	r3, r0
 802824a:	2b00      	cmp	r3, #0
 802824c:	d01a      	beq.n	8028284 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802824e:	68fb      	ldr	r3, [r7, #12]
 8028250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028252:	f043 0220 	orr.w	r2, r3, #32
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802825a:	2303      	movs	r3, #3
 802825c:	e013      	b.n	8028286 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802825e:	687b      	ldr	r3, [r7, #4]
 8028260:	9300      	str	r3, [sp, #0]
 8028262:	68bb      	ldr	r3, [r7, #8]
 8028264:	2200      	movs	r2, #0
 8028266:	2101      	movs	r1, #1
 8028268:	68f8      	ldr	r0, [r7, #12]
 802826a:	f7ff ff23 	bl	80280b4 <SPI_WaitFlagStateUntilTimeout>
 802826e:	4603      	mov	r3, r0
 8028270:	2b00      	cmp	r3, #0
 8028272:	d007      	beq.n	8028284 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028274:	68fb      	ldr	r3, [r7, #12]
 8028276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028278:	f043 0220 	orr.w	r2, r3, #32
 802827c:	68fb      	ldr	r3, [r7, #12]
 802827e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028280:	2303      	movs	r3, #3
 8028282:	e000      	b.n	8028286 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028284:	2300      	movs	r3, #0
}
 8028286:	4618      	mov	r0, r3
 8028288:	3710      	adds	r7, #16
 802828a:	46bd      	mov	sp, r7
 802828c:	bd80      	pop	{r7, pc}
	...

08028290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028290:	b580      	push	{r7, lr}
 8028292:	b088      	sub	sp, #32
 8028294:	af02      	add	r7, sp, #8
 8028296:	60f8      	str	r0, [r7, #12]
 8028298:	60b9      	str	r1, [r7, #8]
 802829a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802829c:	4b1b      	ldr	r3, [pc, #108]	; (802830c <SPI_EndRxTxTransaction+0x7c>)
 802829e:	681b      	ldr	r3, [r3, #0]
 80282a0:	4a1b      	ldr	r2, [pc, #108]	; (8028310 <SPI_EndRxTxTransaction+0x80>)
 80282a2:	fba2 2303 	umull	r2, r3, r2, r3
 80282a6:	0d5b      	lsrs	r3, r3, #21
 80282a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80282ac:	fb02 f303 	mul.w	r3, r2, r3
 80282b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80282b2:	68fb      	ldr	r3, [r7, #12]
 80282b4:	685b      	ldr	r3, [r3, #4]
 80282b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80282ba:	d112      	bne.n	80282e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	9300      	str	r3, [sp, #0]
 80282c0:	68bb      	ldr	r3, [r7, #8]
 80282c2:	2200      	movs	r2, #0
 80282c4:	2180      	movs	r1, #128	; 0x80
 80282c6:	68f8      	ldr	r0, [r7, #12]
 80282c8:	f7ff fef4 	bl	80280b4 <SPI_WaitFlagStateUntilTimeout>
 80282cc:	4603      	mov	r3, r0
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	d016      	beq.n	8028300 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80282d2:	68fb      	ldr	r3, [r7, #12]
 80282d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80282d6:	f043 0220 	orr.w	r2, r3, #32
 80282da:	68fb      	ldr	r3, [r7, #12]
 80282dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80282de:	2303      	movs	r3, #3
 80282e0:	e00f      	b.n	8028302 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80282e2:	697b      	ldr	r3, [r7, #20]
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	d00a      	beq.n	80282fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80282e8:	697b      	ldr	r3, [r7, #20]
 80282ea:	3b01      	subs	r3, #1
 80282ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80282ee:	68fb      	ldr	r3, [r7, #12]
 80282f0:	681b      	ldr	r3, [r3, #0]
 80282f2:	689b      	ldr	r3, [r3, #8]
 80282f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80282f8:	2b80      	cmp	r3, #128	; 0x80
 80282fa:	d0f2      	beq.n	80282e2 <SPI_EndRxTxTransaction+0x52>
 80282fc:	e000      	b.n	8028300 <SPI_EndRxTxTransaction+0x70>
        break;
 80282fe:	bf00      	nop
  }

  return HAL_OK;
 8028300:	2300      	movs	r3, #0
}
 8028302:	4618      	mov	r0, r3
 8028304:	3718      	adds	r7, #24
 8028306:	46bd      	mov	sp, r7
 8028308:	bd80      	pop	{r7, pc}
 802830a:	bf00      	nop
 802830c:	20000084 	.word	0x20000084
 8028310:	165e9f81 	.word	0x165e9f81

08028314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028314:	b580      	push	{r7, lr}
 8028316:	b082      	sub	sp, #8
 8028318:	af00      	add	r7, sp, #0
 802831a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802831c:	687b      	ldr	r3, [r7, #4]
 802831e:	2b00      	cmp	r3, #0
 8028320:	d101      	bne.n	8028326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028322:	2301      	movs	r3, #1
 8028324:	e041      	b.n	80283aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028326:	687b      	ldr	r3, [r7, #4]
 8028328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802832c:	b2db      	uxtb	r3, r3
 802832e:	2b00      	cmp	r3, #0
 8028330:	d106      	bne.n	8028340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	2200      	movs	r2, #0
 8028336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802833a:	6878      	ldr	r0, [r7, #4]
 802833c:	f7ef fec0 	bl	80180c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	2202      	movs	r2, #2
 8028344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028348:	687b      	ldr	r3, [r7, #4]
 802834a:	681a      	ldr	r2, [r3, #0]
 802834c:	687b      	ldr	r3, [r7, #4]
 802834e:	3304      	adds	r3, #4
 8028350:	4619      	mov	r1, r3
 8028352:	4610      	mov	r0, r2
 8028354:	f001 f858 	bl	8029408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028358:	687b      	ldr	r3, [r7, #4]
 802835a:	2201      	movs	r2, #1
 802835c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028360:	687b      	ldr	r3, [r7, #4]
 8028362:	2201      	movs	r2, #1
 8028364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	2201      	movs	r2, #1
 802836c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028370:	687b      	ldr	r3, [r7, #4]
 8028372:	2201      	movs	r2, #1
 8028374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	2201      	movs	r2, #1
 802837c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028380:	687b      	ldr	r3, [r7, #4]
 8028382:	2201      	movs	r2, #1
 8028384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028388:	687b      	ldr	r3, [r7, #4]
 802838a:	2201      	movs	r2, #1
 802838c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	2201      	movs	r2, #1
 8028394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028398:	687b      	ldr	r3, [r7, #4]
 802839a:	2201      	movs	r2, #1
 802839c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	2201      	movs	r2, #1
 80283a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80283a8:	2300      	movs	r3, #0
}
 80283aa:	4618      	mov	r0, r3
 80283ac:	3708      	adds	r7, #8
 80283ae:	46bd      	mov	sp, r7
 80283b0:	bd80      	pop	{r7, pc}
	...

080283b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80283b4:	b480      	push	{r7}
 80283b6:	b085      	sub	sp, #20
 80283b8:	af00      	add	r7, sp, #0
 80283ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80283c2:	b2db      	uxtb	r3, r3
 80283c4:	2b01      	cmp	r3, #1
 80283c6:	d001      	beq.n	80283cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80283c8:	2301      	movs	r3, #1
 80283ca:	e046      	b.n	802845a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80283cc:	687b      	ldr	r3, [r7, #4]
 80283ce:	2202      	movs	r2, #2
 80283d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80283d4:	687b      	ldr	r3, [r7, #4]
 80283d6:	681b      	ldr	r3, [r3, #0]
 80283d8:	4a23      	ldr	r2, [pc, #140]	; (8028468 <HAL_TIM_Base_Start+0xb4>)
 80283da:	4293      	cmp	r3, r2
 80283dc:	d022      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 80283de:	687b      	ldr	r3, [r7, #4]
 80283e0:	681b      	ldr	r3, [r3, #0]
 80283e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80283e6:	d01d      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	681b      	ldr	r3, [r3, #0]
 80283ec:	4a1f      	ldr	r2, [pc, #124]	; (802846c <HAL_TIM_Base_Start+0xb8>)
 80283ee:	4293      	cmp	r3, r2
 80283f0:	d018      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	681b      	ldr	r3, [r3, #0]
 80283f6:	4a1e      	ldr	r2, [pc, #120]	; (8028470 <HAL_TIM_Base_Start+0xbc>)
 80283f8:	4293      	cmp	r3, r2
 80283fa:	d013      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 80283fc:	687b      	ldr	r3, [r7, #4]
 80283fe:	681b      	ldr	r3, [r3, #0]
 8028400:	4a1c      	ldr	r2, [pc, #112]	; (8028474 <HAL_TIM_Base_Start+0xc0>)
 8028402:	4293      	cmp	r3, r2
 8028404:	d00e      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 8028406:	687b      	ldr	r3, [r7, #4]
 8028408:	681b      	ldr	r3, [r3, #0]
 802840a:	4a1b      	ldr	r2, [pc, #108]	; (8028478 <HAL_TIM_Base_Start+0xc4>)
 802840c:	4293      	cmp	r3, r2
 802840e:	d009      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 8028410:	687b      	ldr	r3, [r7, #4]
 8028412:	681b      	ldr	r3, [r3, #0]
 8028414:	4a19      	ldr	r2, [pc, #100]	; (802847c <HAL_TIM_Base_Start+0xc8>)
 8028416:	4293      	cmp	r3, r2
 8028418:	d004      	beq.n	8028424 <HAL_TIM_Base_Start+0x70>
 802841a:	687b      	ldr	r3, [r7, #4]
 802841c:	681b      	ldr	r3, [r3, #0]
 802841e:	4a18      	ldr	r2, [pc, #96]	; (8028480 <HAL_TIM_Base_Start+0xcc>)
 8028420:	4293      	cmp	r3, r2
 8028422:	d111      	bne.n	8028448 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028424:	687b      	ldr	r3, [r7, #4]
 8028426:	681b      	ldr	r3, [r3, #0]
 8028428:	689b      	ldr	r3, [r3, #8]
 802842a:	f003 0307 	and.w	r3, r3, #7
 802842e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028430:	68fb      	ldr	r3, [r7, #12]
 8028432:	2b06      	cmp	r3, #6
 8028434:	d010      	beq.n	8028458 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8028436:	687b      	ldr	r3, [r7, #4]
 8028438:	681b      	ldr	r3, [r3, #0]
 802843a:	681a      	ldr	r2, [r3, #0]
 802843c:	687b      	ldr	r3, [r7, #4]
 802843e:	681b      	ldr	r3, [r3, #0]
 8028440:	f042 0201 	orr.w	r2, r2, #1
 8028444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028446:	e007      	b.n	8028458 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	681b      	ldr	r3, [r3, #0]
 802844c:	681a      	ldr	r2, [r3, #0]
 802844e:	687b      	ldr	r3, [r7, #4]
 8028450:	681b      	ldr	r3, [r3, #0]
 8028452:	f042 0201 	orr.w	r2, r2, #1
 8028456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028458:	2300      	movs	r3, #0
}
 802845a:	4618      	mov	r0, r3
 802845c:	3714      	adds	r7, #20
 802845e:	46bd      	mov	sp, r7
 8028460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028464:	4770      	bx	lr
 8028466:	bf00      	nop
 8028468:	40010000 	.word	0x40010000
 802846c:	40000400 	.word	0x40000400
 8028470:	40000800 	.word	0x40000800
 8028474:	40000c00 	.word	0x40000c00
 8028478:	40010400 	.word	0x40010400
 802847c:	40014000 	.word	0x40014000
 8028480:	40001800 	.word	0x40001800

08028484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028484:	b480      	push	{r7}
 8028486:	b085      	sub	sp, #20
 8028488:	af00      	add	r7, sp, #0
 802848a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 802848c:	687b      	ldr	r3, [r7, #4]
 802848e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028492:	b2db      	uxtb	r3, r3
 8028494:	2b01      	cmp	r3, #1
 8028496:	d001      	beq.n	802849c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028498:	2301      	movs	r3, #1
 802849a:	e04e      	b.n	802853a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802849c:	687b      	ldr	r3, [r7, #4]
 802849e:	2202      	movs	r2, #2
 80284a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	681b      	ldr	r3, [r3, #0]
 80284a8:	68da      	ldr	r2, [r3, #12]
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	681b      	ldr	r3, [r3, #0]
 80284ae:	f042 0201 	orr.w	r2, r2, #1
 80284b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	681b      	ldr	r3, [r3, #0]
 80284b8:	4a23      	ldr	r2, [pc, #140]	; (8028548 <HAL_TIM_Base_Start_IT+0xc4>)
 80284ba:	4293      	cmp	r3, r2
 80284bc:	d022      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284be:	687b      	ldr	r3, [r7, #4]
 80284c0:	681b      	ldr	r3, [r3, #0]
 80284c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80284c6:	d01d      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284c8:	687b      	ldr	r3, [r7, #4]
 80284ca:	681b      	ldr	r3, [r3, #0]
 80284cc:	4a1f      	ldr	r2, [pc, #124]	; (802854c <HAL_TIM_Base_Start_IT+0xc8>)
 80284ce:	4293      	cmp	r3, r2
 80284d0:	d018      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284d2:	687b      	ldr	r3, [r7, #4]
 80284d4:	681b      	ldr	r3, [r3, #0]
 80284d6:	4a1e      	ldr	r2, [pc, #120]	; (8028550 <HAL_TIM_Base_Start_IT+0xcc>)
 80284d8:	4293      	cmp	r3, r2
 80284da:	d013      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	4a1c      	ldr	r2, [pc, #112]	; (8028554 <HAL_TIM_Base_Start_IT+0xd0>)
 80284e2:	4293      	cmp	r3, r2
 80284e4:	d00e      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284e6:	687b      	ldr	r3, [r7, #4]
 80284e8:	681b      	ldr	r3, [r3, #0]
 80284ea:	4a1b      	ldr	r2, [pc, #108]	; (8028558 <HAL_TIM_Base_Start_IT+0xd4>)
 80284ec:	4293      	cmp	r3, r2
 80284ee:	d009      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284f0:	687b      	ldr	r3, [r7, #4]
 80284f2:	681b      	ldr	r3, [r3, #0]
 80284f4:	4a19      	ldr	r2, [pc, #100]	; (802855c <HAL_TIM_Base_Start_IT+0xd8>)
 80284f6:	4293      	cmp	r3, r2
 80284f8:	d004      	beq.n	8028504 <HAL_TIM_Base_Start_IT+0x80>
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	681b      	ldr	r3, [r3, #0]
 80284fe:	4a18      	ldr	r2, [pc, #96]	; (8028560 <HAL_TIM_Base_Start_IT+0xdc>)
 8028500:	4293      	cmp	r3, r2
 8028502:	d111      	bne.n	8028528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	689b      	ldr	r3, [r3, #8]
 802850a:	f003 0307 	and.w	r3, r3, #7
 802850e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028510:	68fb      	ldr	r3, [r7, #12]
 8028512:	2b06      	cmp	r3, #6
 8028514:	d010      	beq.n	8028538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028516:	687b      	ldr	r3, [r7, #4]
 8028518:	681b      	ldr	r3, [r3, #0]
 802851a:	681a      	ldr	r2, [r3, #0]
 802851c:	687b      	ldr	r3, [r7, #4]
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	f042 0201 	orr.w	r2, r2, #1
 8028524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028526:	e007      	b.n	8028538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028528:	687b      	ldr	r3, [r7, #4]
 802852a:	681b      	ldr	r3, [r3, #0]
 802852c:	681a      	ldr	r2, [r3, #0]
 802852e:	687b      	ldr	r3, [r7, #4]
 8028530:	681b      	ldr	r3, [r3, #0]
 8028532:	f042 0201 	orr.w	r2, r2, #1
 8028536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028538:	2300      	movs	r3, #0
}
 802853a:	4618      	mov	r0, r3
 802853c:	3714      	adds	r7, #20
 802853e:	46bd      	mov	sp, r7
 8028540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028544:	4770      	bx	lr
 8028546:	bf00      	nop
 8028548:	40010000 	.word	0x40010000
 802854c:	40000400 	.word	0x40000400
 8028550:	40000800 	.word	0x40000800
 8028554:	40000c00 	.word	0x40000c00
 8028558:	40010400 	.word	0x40010400
 802855c:	40014000 	.word	0x40014000
 8028560:	40001800 	.word	0x40001800

08028564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8028564:	b580      	push	{r7, lr}
 8028566:	b082      	sub	sp, #8
 8028568:	af00      	add	r7, sp, #0
 802856a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802856c:	687b      	ldr	r3, [r7, #4]
 802856e:	2b00      	cmp	r3, #0
 8028570:	d101      	bne.n	8028576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8028572:	2301      	movs	r3, #1
 8028574:	e041      	b.n	80285fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028576:	687b      	ldr	r3, [r7, #4]
 8028578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802857c:	b2db      	uxtb	r3, r3
 802857e:	2b00      	cmp	r3, #0
 8028580:	d106      	bne.n	8028590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	2200      	movs	r2, #0
 8028586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802858a:	6878      	ldr	r0, [r7, #4]
 802858c:	f000 f839 	bl	8028602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028590:	687b      	ldr	r3, [r7, #4]
 8028592:	2202      	movs	r2, #2
 8028594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028598:	687b      	ldr	r3, [r7, #4]
 802859a:	681a      	ldr	r2, [r3, #0]
 802859c:	687b      	ldr	r3, [r7, #4]
 802859e:	3304      	adds	r3, #4
 80285a0:	4619      	mov	r1, r3
 80285a2:	4610      	mov	r0, r2
 80285a4:	f000 ff30 	bl	8029408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80285a8:	687b      	ldr	r3, [r7, #4]
 80285aa:	2201      	movs	r2, #1
 80285ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80285b0:	687b      	ldr	r3, [r7, #4]
 80285b2:	2201      	movs	r2, #1
 80285b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80285b8:	687b      	ldr	r3, [r7, #4]
 80285ba:	2201      	movs	r2, #1
 80285bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80285c0:	687b      	ldr	r3, [r7, #4]
 80285c2:	2201      	movs	r2, #1
 80285c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	2201      	movs	r2, #1
 80285cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80285d0:	687b      	ldr	r3, [r7, #4]
 80285d2:	2201      	movs	r2, #1
 80285d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80285d8:	687b      	ldr	r3, [r7, #4]
 80285da:	2201      	movs	r2, #1
 80285dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80285e0:	687b      	ldr	r3, [r7, #4]
 80285e2:	2201      	movs	r2, #1
 80285e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	2201      	movs	r2, #1
 80285ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80285f0:	687b      	ldr	r3, [r7, #4]
 80285f2:	2201      	movs	r2, #1
 80285f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80285f8:	2300      	movs	r3, #0
}
 80285fa:	4618      	mov	r0, r3
 80285fc:	3708      	adds	r7, #8
 80285fe:	46bd      	mov	sp, r7
 8028600:	bd80      	pop	{r7, pc}

08028602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8028602:	b480      	push	{r7}
 8028604:	b083      	sub	sp, #12
 8028606:	af00      	add	r7, sp, #0
 8028608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802860a:	bf00      	nop
 802860c:	370c      	adds	r7, #12
 802860e:	46bd      	mov	sp, r7
 8028610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028614:	4770      	bx	lr
	...

08028618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028618:	b580      	push	{r7, lr}
 802861a:	b084      	sub	sp, #16
 802861c:	af00      	add	r7, sp, #0
 802861e:	6078      	str	r0, [r7, #4]
 8028620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8028622:	683b      	ldr	r3, [r7, #0]
 8028624:	2b00      	cmp	r3, #0
 8028626:	d109      	bne.n	802863c <HAL_TIM_PWM_Start+0x24>
 8028628:	687b      	ldr	r3, [r7, #4]
 802862a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802862e:	b2db      	uxtb	r3, r3
 8028630:	2b01      	cmp	r3, #1
 8028632:	bf14      	ite	ne
 8028634:	2301      	movne	r3, #1
 8028636:	2300      	moveq	r3, #0
 8028638:	b2db      	uxtb	r3, r3
 802863a:	e022      	b.n	8028682 <HAL_TIM_PWM_Start+0x6a>
 802863c:	683b      	ldr	r3, [r7, #0]
 802863e:	2b04      	cmp	r3, #4
 8028640:	d109      	bne.n	8028656 <HAL_TIM_PWM_Start+0x3e>
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8028648:	b2db      	uxtb	r3, r3
 802864a:	2b01      	cmp	r3, #1
 802864c:	bf14      	ite	ne
 802864e:	2301      	movne	r3, #1
 8028650:	2300      	moveq	r3, #0
 8028652:	b2db      	uxtb	r3, r3
 8028654:	e015      	b.n	8028682 <HAL_TIM_PWM_Start+0x6a>
 8028656:	683b      	ldr	r3, [r7, #0]
 8028658:	2b08      	cmp	r3, #8
 802865a:	d109      	bne.n	8028670 <HAL_TIM_PWM_Start+0x58>
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028662:	b2db      	uxtb	r3, r3
 8028664:	2b01      	cmp	r3, #1
 8028666:	bf14      	ite	ne
 8028668:	2301      	movne	r3, #1
 802866a:	2300      	moveq	r3, #0
 802866c:	b2db      	uxtb	r3, r3
 802866e:	e008      	b.n	8028682 <HAL_TIM_PWM_Start+0x6a>
 8028670:	687b      	ldr	r3, [r7, #4]
 8028672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8028676:	b2db      	uxtb	r3, r3
 8028678:	2b01      	cmp	r3, #1
 802867a:	bf14      	ite	ne
 802867c:	2301      	movne	r3, #1
 802867e:	2300      	moveq	r3, #0
 8028680:	b2db      	uxtb	r3, r3
 8028682:	2b00      	cmp	r3, #0
 8028684:	d001      	beq.n	802868a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8028686:	2301      	movs	r3, #1
 8028688:	e07c      	b.n	8028784 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 802868a:	683b      	ldr	r3, [r7, #0]
 802868c:	2b00      	cmp	r3, #0
 802868e:	d104      	bne.n	802869a <HAL_TIM_PWM_Start+0x82>
 8028690:	687b      	ldr	r3, [r7, #4]
 8028692:	2202      	movs	r2, #2
 8028694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028698:	e013      	b.n	80286c2 <HAL_TIM_PWM_Start+0xaa>
 802869a:	683b      	ldr	r3, [r7, #0]
 802869c:	2b04      	cmp	r3, #4
 802869e:	d104      	bne.n	80286aa <HAL_TIM_PWM_Start+0x92>
 80286a0:	687b      	ldr	r3, [r7, #4]
 80286a2:	2202      	movs	r2, #2
 80286a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80286a8:	e00b      	b.n	80286c2 <HAL_TIM_PWM_Start+0xaa>
 80286aa:	683b      	ldr	r3, [r7, #0]
 80286ac:	2b08      	cmp	r3, #8
 80286ae:	d104      	bne.n	80286ba <HAL_TIM_PWM_Start+0xa2>
 80286b0:	687b      	ldr	r3, [r7, #4]
 80286b2:	2202      	movs	r2, #2
 80286b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80286b8:	e003      	b.n	80286c2 <HAL_TIM_PWM_Start+0xaa>
 80286ba:	687b      	ldr	r3, [r7, #4]
 80286bc:	2202      	movs	r2, #2
 80286be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80286c2:	687b      	ldr	r3, [r7, #4]
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	2201      	movs	r2, #1
 80286c8:	6839      	ldr	r1, [r7, #0]
 80286ca:	4618      	mov	r0, r3
 80286cc:	f001 fb42 	bl	8029d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	4a2d      	ldr	r2, [pc, #180]	; (802878c <HAL_TIM_PWM_Start+0x174>)
 80286d6:	4293      	cmp	r3, r2
 80286d8:	d004      	beq.n	80286e4 <HAL_TIM_PWM_Start+0xcc>
 80286da:	687b      	ldr	r3, [r7, #4]
 80286dc:	681b      	ldr	r3, [r3, #0]
 80286de:	4a2c      	ldr	r2, [pc, #176]	; (8028790 <HAL_TIM_PWM_Start+0x178>)
 80286e0:	4293      	cmp	r3, r2
 80286e2:	d101      	bne.n	80286e8 <HAL_TIM_PWM_Start+0xd0>
 80286e4:	2301      	movs	r3, #1
 80286e6:	e000      	b.n	80286ea <HAL_TIM_PWM_Start+0xd2>
 80286e8:	2300      	movs	r3, #0
 80286ea:	2b00      	cmp	r3, #0
 80286ec:	d007      	beq.n	80286fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	681b      	ldr	r3, [r3, #0]
 80286f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80286fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80286fe:	687b      	ldr	r3, [r7, #4]
 8028700:	681b      	ldr	r3, [r3, #0]
 8028702:	4a22      	ldr	r2, [pc, #136]	; (802878c <HAL_TIM_PWM_Start+0x174>)
 8028704:	4293      	cmp	r3, r2
 8028706:	d022      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	681b      	ldr	r3, [r3, #0]
 802870c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028710:	d01d      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	681b      	ldr	r3, [r3, #0]
 8028716:	4a1f      	ldr	r2, [pc, #124]	; (8028794 <HAL_TIM_PWM_Start+0x17c>)
 8028718:	4293      	cmp	r3, r2
 802871a:	d018      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 802871c:	687b      	ldr	r3, [r7, #4]
 802871e:	681b      	ldr	r3, [r3, #0]
 8028720:	4a1d      	ldr	r2, [pc, #116]	; (8028798 <HAL_TIM_PWM_Start+0x180>)
 8028722:	4293      	cmp	r3, r2
 8028724:	d013      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 8028726:	687b      	ldr	r3, [r7, #4]
 8028728:	681b      	ldr	r3, [r3, #0]
 802872a:	4a1c      	ldr	r2, [pc, #112]	; (802879c <HAL_TIM_PWM_Start+0x184>)
 802872c:	4293      	cmp	r3, r2
 802872e:	d00e      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 8028730:	687b      	ldr	r3, [r7, #4]
 8028732:	681b      	ldr	r3, [r3, #0]
 8028734:	4a16      	ldr	r2, [pc, #88]	; (8028790 <HAL_TIM_PWM_Start+0x178>)
 8028736:	4293      	cmp	r3, r2
 8028738:	d009      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 802873a:	687b      	ldr	r3, [r7, #4]
 802873c:	681b      	ldr	r3, [r3, #0]
 802873e:	4a18      	ldr	r2, [pc, #96]	; (80287a0 <HAL_TIM_PWM_Start+0x188>)
 8028740:	4293      	cmp	r3, r2
 8028742:	d004      	beq.n	802874e <HAL_TIM_PWM_Start+0x136>
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	681b      	ldr	r3, [r3, #0]
 8028748:	4a16      	ldr	r2, [pc, #88]	; (80287a4 <HAL_TIM_PWM_Start+0x18c>)
 802874a:	4293      	cmp	r3, r2
 802874c:	d111      	bne.n	8028772 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802874e:	687b      	ldr	r3, [r7, #4]
 8028750:	681b      	ldr	r3, [r3, #0]
 8028752:	689b      	ldr	r3, [r3, #8]
 8028754:	f003 0307 	and.w	r3, r3, #7
 8028758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802875a:	68fb      	ldr	r3, [r7, #12]
 802875c:	2b06      	cmp	r3, #6
 802875e:	d010      	beq.n	8028782 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8028760:	687b      	ldr	r3, [r7, #4]
 8028762:	681b      	ldr	r3, [r3, #0]
 8028764:	681a      	ldr	r2, [r3, #0]
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	f042 0201 	orr.w	r2, r2, #1
 802876e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028770:	e007      	b.n	8028782 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	681b      	ldr	r3, [r3, #0]
 8028776:	681a      	ldr	r2, [r3, #0]
 8028778:	687b      	ldr	r3, [r7, #4]
 802877a:	681b      	ldr	r3, [r3, #0]
 802877c:	f042 0201 	orr.w	r2, r2, #1
 8028780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028782:	2300      	movs	r3, #0
}
 8028784:	4618      	mov	r0, r3
 8028786:	3710      	adds	r7, #16
 8028788:	46bd      	mov	sp, r7
 802878a:	bd80      	pop	{r7, pc}
 802878c:	40010000 	.word	0x40010000
 8028790:	40010400 	.word	0x40010400
 8028794:	40000400 	.word	0x40000400
 8028798:	40000800 	.word	0x40000800
 802879c:	40000c00 	.word	0x40000c00
 80287a0:	40014000 	.word	0x40014000
 80287a4:	40001800 	.word	0x40001800

080287a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80287a8:	b580      	push	{r7, lr}
 80287aa:	b082      	sub	sp, #8
 80287ac:	af00      	add	r7, sp, #0
 80287ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80287b0:	687b      	ldr	r3, [r7, #4]
 80287b2:	2b00      	cmp	r3, #0
 80287b4:	d101      	bne.n	80287ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80287b6:	2301      	movs	r3, #1
 80287b8:	e041      	b.n	802883e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80287ba:	687b      	ldr	r3, [r7, #4]
 80287bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80287c0:	b2db      	uxtb	r3, r3
 80287c2:	2b00      	cmp	r3, #0
 80287c4:	d106      	bne.n	80287d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80287c6:	687b      	ldr	r3, [r7, #4]
 80287c8:	2200      	movs	r2, #0
 80287ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80287ce:	6878      	ldr	r0, [r7, #4]
 80287d0:	f000 f839 	bl	8028846 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80287d4:	687b      	ldr	r3, [r7, #4]
 80287d6:	2202      	movs	r2, #2
 80287d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	681a      	ldr	r2, [r3, #0]
 80287e0:	687b      	ldr	r3, [r7, #4]
 80287e2:	3304      	adds	r3, #4
 80287e4:	4619      	mov	r1, r3
 80287e6:	4610      	mov	r0, r2
 80287e8:	f000 fe0e 	bl	8029408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80287ec:	687b      	ldr	r3, [r7, #4]
 80287ee:	2201      	movs	r2, #1
 80287f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	2201      	movs	r2, #1
 80287f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	2201      	movs	r2, #1
 8028800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028804:	687b      	ldr	r3, [r7, #4]
 8028806:	2201      	movs	r2, #1
 8028808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	2201      	movs	r2, #1
 8028810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028814:	687b      	ldr	r3, [r7, #4]
 8028816:	2201      	movs	r2, #1
 8028818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802881c:	687b      	ldr	r3, [r7, #4]
 802881e:	2201      	movs	r2, #1
 8028820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	2201      	movs	r2, #1
 8028828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	2201      	movs	r2, #1
 8028830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	2201      	movs	r2, #1
 8028838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802883c:	2300      	movs	r3, #0
}
 802883e:	4618      	mov	r0, r3
 8028840:	3708      	adds	r7, #8
 8028842:	46bd      	mov	sp, r7
 8028844:	bd80      	pop	{r7, pc}

08028846 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8028846:	b480      	push	{r7}
 8028848:	b083      	sub	sp, #12
 802884a:	af00      	add	r7, sp, #0
 802884c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 802884e:	bf00      	nop
 8028850:	370c      	adds	r7, #12
 8028852:	46bd      	mov	sp, r7
 8028854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028858:	4770      	bx	lr
	...

0802885c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802885c:	b580      	push	{r7, lr}
 802885e:	b084      	sub	sp, #16
 8028860:	af00      	add	r7, sp, #0
 8028862:	6078      	str	r0, [r7, #4]
 8028864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8028866:	683b      	ldr	r3, [r7, #0]
 8028868:	2b00      	cmp	r3, #0
 802886a:	d104      	bne.n	8028876 <HAL_TIM_IC_Start+0x1a>
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028872:	b2db      	uxtb	r3, r3
 8028874:	e013      	b.n	802889e <HAL_TIM_IC_Start+0x42>
 8028876:	683b      	ldr	r3, [r7, #0]
 8028878:	2b04      	cmp	r3, #4
 802887a:	d104      	bne.n	8028886 <HAL_TIM_IC_Start+0x2a>
 802887c:	687b      	ldr	r3, [r7, #4]
 802887e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8028882:	b2db      	uxtb	r3, r3
 8028884:	e00b      	b.n	802889e <HAL_TIM_IC_Start+0x42>
 8028886:	683b      	ldr	r3, [r7, #0]
 8028888:	2b08      	cmp	r3, #8
 802888a:	d104      	bne.n	8028896 <HAL_TIM_IC_Start+0x3a>
 802888c:	687b      	ldr	r3, [r7, #4]
 802888e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028892:	b2db      	uxtb	r3, r3
 8028894:	e003      	b.n	802889e <HAL_TIM_IC_Start+0x42>
 8028896:	687b      	ldr	r3, [r7, #4]
 8028898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802889c:	b2db      	uxtb	r3, r3
 802889e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80288a0:	683b      	ldr	r3, [r7, #0]
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	d104      	bne.n	80288b0 <HAL_TIM_IC_Start+0x54>
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80288ac:	b2db      	uxtb	r3, r3
 80288ae:	e013      	b.n	80288d8 <HAL_TIM_IC_Start+0x7c>
 80288b0:	683b      	ldr	r3, [r7, #0]
 80288b2:	2b04      	cmp	r3, #4
 80288b4:	d104      	bne.n	80288c0 <HAL_TIM_IC_Start+0x64>
 80288b6:	687b      	ldr	r3, [r7, #4]
 80288b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80288bc:	b2db      	uxtb	r3, r3
 80288be:	e00b      	b.n	80288d8 <HAL_TIM_IC_Start+0x7c>
 80288c0:	683b      	ldr	r3, [r7, #0]
 80288c2:	2b08      	cmp	r3, #8
 80288c4:	d104      	bne.n	80288d0 <HAL_TIM_IC_Start+0x74>
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80288cc:	b2db      	uxtb	r3, r3
 80288ce:	e003      	b.n	80288d8 <HAL_TIM_IC_Start+0x7c>
 80288d0:	687b      	ldr	r3, [r7, #4]
 80288d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80288d6:	b2db      	uxtb	r3, r3
 80288d8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80288da:	7bfb      	ldrb	r3, [r7, #15]
 80288dc:	2b01      	cmp	r3, #1
 80288de:	d102      	bne.n	80288e6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80288e0:	7bbb      	ldrb	r3, [r7, #14]
 80288e2:	2b01      	cmp	r3, #1
 80288e4:	d001      	beq.n	80288ea <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80288e6:	2301      	movs	r3, #1
 80288e8:	e081      	b.n	80289ee <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80288ea:	683b      	ldr	r3, [r7, #0]
 80288ec:	2b00      	cmp	r3, #0
 80288ee:	d104      	bne.n	80288fa <HAL_TIM_IC_Start+0x9e>
 80288f0:	687b      	ldr	r3, [r7, #4]
 80288f2:	2202      	movs	r2, #2
 80288f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80288f8:	e013      	b.n	8028922 <HAL_TIM_IC_Start+0xc6>
 80288fa:	683b      	ldr	r3, [r7, #0]
 80288fc:	2b04      	cmp	r3, #4
 80288fe:	d104      	bne.n	802890a <HAL_TIM_IC_Start+0xae>
 8028900:	687b      	ldr	r3, [r7, #4]
 8028902:	2202      	movs	r2, #2
 8028904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028908:	e00b      	b.n	8028922 <HAL_TIM_IC_Start+0xc6>
 802890a:	683b      	ldr	r3, [r7, #0]
 802890c:	2b08      	cmp	r3, #8
 802890e:	d104      	bne.n	802891a <HAL_TIM_IC_Start+0xbe>
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	2202      	movs	r2, #2
 8028914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028918:	e003      	b.n	8028922 <HAL_TIM_IC_Start+0xc6>
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	2202      	movs	r2, #2
 802891e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028922:	683b      	ldr	r3, [r7, #0]
 8028924:	2b00      	cmp	r3, #0
 8028926:	d104      	bne.n	8028932 <HAL_TIM_IC_Start+0xd6>
 8028928:	687b      	ldr	r3, [r7, #4]
 802892a:	2202      	movs	r2, #2
 802892c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028930:	e013      	b.n	802895a <HAL_TIM_IC_Start+0xfe>
 8028932:	683b      	ldr	r3, [r7, #0]
 8028934:	2b04      	cmp	r3, #4
 8028936:	d104      	bne.n	8028942 <HAL_TIM_IC_Start+0xe6>
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	2202      	movs	r2, #2
 802893c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028940:	e00b      	b.n	802895a <HAL_TIM_IC_Start+0xfe>
 8028942:	683b      	ldr	r3, [r7, #0]
 8028944:	2b08      	cmp	r3, #8
 8028946:	d104      	bne.n	8028952 <HAL_TIM_IC_Start+0xf6>
 8028948:	687b      	ldr	r3, [r7, #4]
 802894a:	2202      	movs	r2, #2
 802894c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028950:	e003      	b.n	802895a <HAL_TIM_IC_Start+0xfe>
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	2202      	movs	r2, #2
 8028956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802895a:	687b      	ldr	r3, [r7, #4]
 802895c:	681b      	ldr	r3, [r3, #0]
 802895e:	2201      	movs	r2, #1
 8028960:	6839      	ldr	r1, [r7, #0]
 8028962:	4618      	mov	r0, r3
 8028964:	f001 f9f6 	bl	8029d54 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028968:	687b      	ldr	r3, [r7, #4]
 802896a:	681b      	ldr	r3, [r3, #0]
 802896c:	4a22      	ldr	r2, [pc, #136]	; (80289f8 <HAL_TIM_IC_Start+0x19c>)
 802896e:	4293      	cmp	r3, r2
 8028970:	d022      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	681b      	ldr	r3, [r3, #0]
 8028976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802897a:	d01d      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	681b      	ldr	r3, [r3, #0]
 8028980:	4a1e      	ldr	r2, [pc, #120]	; (80289fc <HAL_TIM_IC_Start+0x1a0>)
 8028982:	4293      	cmp	r3, r2
 8028984:	d018      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 8028986:	687b      	ldr	r3, [r7, #4]
 8028988:	681b      	ldr	r3, [r3, #0]
 802898a:	4a1d      	ldr	r2, [pc, #116]	; (8028a00 <HAL_TIM_IC_Start+0x1a4>)
 802898c:	4293      	cmp	r3, r2
 802898e:	d013      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	681b      	ldr	r3, [r3, #0]
 8028994:	4a1b      	ldr	r2, [pc, #108]	; (8028a04 <HAL_TIM_IC_Start+0x1a8>)
 8028996:	4293      	cmp	r3, r2
 8028998:	d00e      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 802899a:	687b      	ldr	r3, [r7, #4]
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	4a1a      	ldr	r2, [pc, #104]	; (8028a08 <HAL_TIM_IC_Start+0x1ac>)
 80289a0:	4293      	cmp	r3, r2
 80289a2:	d009      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 80289a4:	687b      	ldr	r3, [r7, #4]
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	4a18      	ldr	r2, [pc, #96]	; (8028a0c <HAL_TIM_IC_Start+0x1b0>)
 80289aa:	4293      	cmp	r3, r2
 80289ac:	d004      	beq.n	80289b8 <HAL_TIM_IC_Start+0x15c>
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	4a17      	ldr	r2, [pc, #92]	; (8028a10 <HAL_TIM_IC_Start+0x1b4>)
 80289b4:	4293      	cmp	r3, r2
 80289b6:	d111      	bne.n	80289dc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80289b8:	687b      	ldr	r3, [r7, #4]
 80289ba:	681b      	ldr	r3, [r3, #0]
 80289bc:	689b      	ldr	r3, [r3, #8]
 80289be:	f003 0307 	and.w	r3, r3, #7
 80289c2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80289c4:	68bb      	ldr	r3, [r7, #8]
 80289c6:	2b06      	cmp	r3, #6
 80289c8:	d010      	beq.n	80289ec <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80289ca:	687b      	ldr	r3, [r7, #4]
 80289cc:	681b      	ldr	r3, [r3, #0]
 80289ce:	681a      	ldr	r2, [r3, #0]
 80289d0:	687b      	ldr	r3, [r7, #4]
 80289d2:	681b      	ldr	r3, [r3, #0]
 80289d4:	f042 0201 	orr.w	r2, r2, #1
 80289d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80289da:	e007      	b.n	80289ec <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80289dc:	687b      	ldr	r3, [r7, #4]
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	681a      	ldr	r2, [r3, #0]
 80289e2:	687b      	ldr	r3, [r7, #4]
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	f042 0201 	orr.w	r2, r2, #1
 80289ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80289ec:	2300      	movs	r3, #0
}
 80289ee:	4618      	mov	r0, r3
 80289f0:	3710      	adds	r7, #16
 80289f2:	46bd      	mov	sp, r7
 80289f4:	bd80      	pop	{r7, pc}
 80289f6:	bf00      	nop
 80289f8:	40010000 	.word	0x40010000
 80289fc:	40000400 	.word	0x40000400
 8028a00:	40000800 	.word	0x40000800
 8028a04:	40000c00 	.word	0x40000c00
 8028a08:	40010400 	.word	0x40010400
 8028a0c:	40014000 	.word	0x40014000
 8028a10:	40001800 	.word	0x40001800

08028a14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028a14:	b580      	push	{r7, lr}
 8028a16:	b084      	sub	sp, #16
 8028a18:	af00      	add	r7, sp, #0
 8028a1a:	6078      	str	r0, [r7, #4]
 8028a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028a1e:	2300      	movs	r3, #0
 8028a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8028a22:	683b      	ldr	r3, [r7, #0]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d104      	bne.n	8028a32 <HAL_TIM_IC_Start_IT+0x1e>
 8028a28:	687b      	ldr	r3, [r7, #4]
 8028a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028a2e:	b2db      	uxtb	r3, r3
 8028a30:	e013      	b.n	8028a5a <HAL_TIM_IC_Start_IT+0x46>
 8028a32:	683b      	ldr	r3, [r7, #0]
 8028a34:	2b04      	cmp	r3, #4
 8028a36:	d104      	bne.n	8028a42 <HAL_TIM_IC_Start_IT+0x2e>
 8028a38:	687b      	ldr	r3, [r7, #4]
 8028a3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8028a3e:	b2db      	uxtb	r3, r3
 8028a40:	e00b      	b.n	8028a5a <HAL_TIM_IC_Start_IT+0x46>
 8028a42:	683b      	ldr	r3, [r7, #0]
 8028a44:	2b08      	cmp	r3, #8
 8028a46:	d104      	bne.n	8028a52 <HAL_TIM_IC_Start_IT+0x3e>
 8028a48:	687b      	ldr	r3, [r7, #4]
 8028a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8028a4e:	b2db      	uxtb	r3, r3
 8028a50:	e003      	b.n	8028a5a <HAL_TIM_IC_Start_IT+0x46>
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8028a58:	b2db      	uxtb	r3, r3
 8028a5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8028a5c:	683b      	ldr	r3, [r7, #0]
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	d104      	bne.n	8028a6c <HAL_TIM_IC_Start_IT+0x58>
 8028a62:	687b      	ldr	r3, [r7, #4]
 8028a64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8028a68:	b2db      	uxtb	r3, r3
 8028a6a:	e013      	b.n	8028a94 <HAL_TIM_IC_Start_IT+0x80>
 8028a6c:	683b      	ldr	r3, [r7, #0]
 8028a6e:	2b04      	cmp	r3, #4
 8028a70:	d104      	bne.n	8028a7c <HAL_TIM_IC_Start_IT+0x68>
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8028a78:	b2db      	uxtb	r3, r3
 8028a7a:	e00b      	b.n	8028a94 <HAL_TIM_IC_Start_IT+0x80>
 8028a7c:	683b      	ldr	r3, [r7, #0]
 8028a7e:	2b08      	cmp	r3, #8
 8028a80:	d104      	bne.n	8028a8c <HAL_TIM_IC_Start_IT+0x78>
 8028a82:	687b      	ldr	r3, [r7, #4]
 8028a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028a88:	b2db      	uxtb	r3, r3
 8028a8a:	e003      	b.n	8028a94 <HAL_TIM_IC_Start_IT+0x80>
 8028a8c:	687b      	ldr	r3, [r7, #4]
 8028a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028a92:	b2db      	uxtb	r3, r3
 8028a94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8028a96:	7bbb      	ldrb	r3, [r7, #14]
 8028a98:	2b01      	cmp	r3, #1
 8028a9a:	d102      	bne.n	8028aa2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8028a9c:	7b7b      	ldrb	r3, [r7, #13]
 8028a9e:	2b01      	cmp	r3, #1
 8028aa0:	d001      	beq.n	8028aa6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8028aa2:	2301      	movs	r3, #1
 8028aa4:	e0cc      	b.n	8028c40 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028aa6:	683b      	ldr	r3, [r7, #0]
 8028aa8:	2b00      	cmp	r3, #0
 8028aaa:	d104      	bne.n	8028ab6 <HAL_TIM_IC_Start_IT+0xa2>
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	2202      	movs	r2, #2
 8028ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028ab4:	e013      	b.n	8028ade <HAL_TIM_IC_Start_IT+0xca>
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	2b04      	cmp	r3, #4
 8028aba:	d104      	bne.n	8028ac6 <HAL_TIM_IC_Start_IT+0xb2>
 8028abc:	687b      	ldr	r3, [r7, #4]
 8028abe:	2202      	movs	r2, #2
 8028ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028ac4:	e00b      	b.n	8028ade <HAL_TIM_IC_Start_IT+0xca>
 8028ac6:	683b      	ldr	r3, [r7, #0]
 8028ac8:	2b08      	cmp	r3, #8
 8028aca:	d104      	bne.n	8028ad6 <HAL_TIM_IC_Start_IT+0xc2>
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	2202      	movs	r2, #2
 8028ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028ad4:	e003      	b.n	8028ade <HAL_TIM_IC_Start_IT+0xca>
 8028ad6:	687b      	ldr	r3, [r7, #4]
 8028ad8:	2202      	movs	r2, #2
 8028ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8028ade:	683b      	ldr	r3, [r7, #0]
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	d104      	bne.n	8028aee <HAL_TIM_IC_Start_IT+0xda>
 8028ae4:	687b      	ldr	r3, [r7, #4]
 8028ae6:	2202      	movs	r2, #2
 8028ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028aec:	e013      	b.n	8028b16 <HAL_TIM_IC_Start_IT+0x102>
 8028aee:	683b      	ldr	r3, [r7, #0]
 8028af0:	2b04      	cmp	r3, #4
 8028af2:	d104      	bne.n	8028afe <HAL_TIM_IC_Start_IT+0xea>
 8028af4:	687b      	ldr	r3, [r7, #4]
 8028af6:	2202      	movs	r2, #2
 8028af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028afc:	e00b      	b.n	8028b16 <HAL_TIM_IC_Start_IT+0x102>
 8028afe:	683b      	ldr	r3, [r7, #0]
 8028b00:	2b08      	cmp	r3, #8
 8028b02:	d104      	bne.n	8028b0e <HAL_TIM_IC_Start_IT+0xfa>
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	2202      	movs	r2, #2
 8028b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028b0c:	e003      	b.n	8028b16 <HAL_TIM_IC_Start_IT+0x102>
 8028b0e:	687b      	ldr	r3, [r7, #4]
 8028b10:	2202      	movs	r2, #2
 8028b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8028b16:	683b      	ldr	r3, [r7, #0]
 8028b18:	2b0c      	cmp	r3, #12
 8028b1a:	d841      	bhi.n	8028ba0 <HAL_TIM_IC_Start_IT+0x18c>
 8028b1c:	a201      	add	r2, pc, #4	; (adr r2, 8028b24 <HAL_TIM_IC_Start_IT+0x110>)
 8028b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028b22:	bf00      	nop
 8028b24:	08028b59 	.word	0x08028b59
 8028b28:	08028ba1 	.word	0x08028ba1
 8028b2c:	08028ba1 	.word	0x08028ba1
 8028b30:	08028ba1 	.word	0x08028ba1
 8028b34:	08028b6b 	.word	0x08028b6b
 8028b38:	08028ba1 	.word	0x08028ba1
 8028b3c:	08028ba1 	.word	0x08028ba1
 8028b40:	08028ba1 	.word	0x08028ba1
 8028b44:	08028b7d 	.word	0x08028b7d
 8028b48:	08028ba1 	.word	0x08028ba1
 8028b4c:	08028ba1 	.word	0x08028ba1
 8028b50:	08028ba1 	.word	0x08028ba1
 8028b54:	08028b8f 	.word	0x08028b8f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	681b      	ldr	r3, [r3, #0]
 8028b5c:	68da      	ldr	r2, [r3, #12]
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	f042 0202 	orr.w	r2, r2, #2
 8028b66:	60da      	str	r2, [r3, #12]
      break;
 8028b68:	e01d      	b.n	8028ba6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8028b6a:	687b      	ldr	r3, [r7, #4]
 8028b6c:	681b      	ldr	r3, [r3, #0]
 8028b6e:	68da      	ldr	r2, [r3, #12]
 8028b70:	687b      	ldr	r3, [r7, #4]
 8028b72:	681b      	ldr	r3, [r3, #0]
 8028b74:	f042 0204 	orr.w	r2, r2, #4
 8028b78:	60da      	str	r2, [r3, #12]
      break;
 8028b7a:	e014      	b.n	8028ba6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8028b7c:	687b      	ldr	r3, [r7, #4]
 8028b7e:	681b      	ldr	r3, [r3, #0]
 8028b80:	68da      	ldr	r2, [r3, #12]
 8028b82:	687b      	ldr	r3, [r7, #4]
 8028b84:	681b      	ldr	r3, [r3, #0]
 8028b86:	f042 0208 	orr.w	r2, r2, #8
 8028b8a:	60da      	str	r2, [r3, #12]
      break;
 8028b8c:	e00b      	b.n	8028ba6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8028b8e:	687b      	ldr	r3, [r7, #4]
 8028b90:	681b      	ldr	r3, [r3, #0]
 8028b92:	68da      	ldr	r2, [r3, #12]
 8028b94:	687b      	ldr	r3, [r7, #4]
 8028b96:	681b      	ldr	r3, [r3, #0]
 8028b98:	f042 0210 	orr.w	r2, r2, #16
 8028b9c:	60da      	str	r2, [r3, #12]
      break;
 8028b9e:	e002      	b.n	8028ba6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8028ba0:	2301      	movs	r3, #1
 8028ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8028ba4:	bf00      	nop
  }

  if (status == HAL_OK)
 8028ba6:	7bfb      	ldrb	r3, [r7, #15]
 8028ba8:	2b00      	cmp	r3, #0
 8028baa:	d148      	bne.n	8028c3e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8028bac:	687b      	ldr	r3, [r7, #4]
 8028bae:	681b      	ldr	r3, [r3, #0]
 8028bb0:	2201      	movs	r2, #1
 8028bb2:	6839      	ldr	r1, [r7, #0]
 8028bb4:	4618      	mov	r0, r3
 8028bb6:	f001 f8cd 	bl	8029d54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028bba:	687b      	ldr	r3, [r7, #4]
 8028bbc:	681b      	ldr	r3, [r3, #0]
 8028bbe:	4a22      	ldr	r2, [pc, #136]	; (8028c48 <HAL_TIM_IC_Start_IT+0x234>)
 8028bc0:	4293      	cmp	r3, r2
 8028bc2:	d022      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028bc4:	687b      	ldr	r3, [r7, #4]
 8028bc6:	681b      	ldr	r3, [r3, #0]
 8028bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028bcc:	d01d      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028bce:	687b      	ldr	r3, [r7, #4]
 8028bd0:	681b      	ldr	r3, [r3, #0]
 8028bd2:	4a1e      	ldr	r2, [pc, #120]	; (8028c4c <HAL_TIM_IC_Start_IT+0x238>)
 8028bd4:	4293      	cmp	r3, r2
 8028bd6:	d018      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028bd8:	687b      	ldr	r3, [r7, #4]
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	4a1c      	ldr	r2, [pc, #112]	; (8028c50 <HAL_TIM_IC_Start_IT+0x23c>)
 8028bde:	4293      	cmp	r3, r2
 8028be0:	d013      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028be2:	687b      	ldr	r3, [r7, #4]
 8028be4:	681b      	ldr	r3, [r3, #0]
 8028be6:	4a1b      	ldr	r2, [pc, #108]	; (8028c54 <HAL_TIM_IC_Start_IT+0x240>)
 8028be8:	4293      	cmp	r3, r2
 8028bea:	d00e      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028bec:	687b      	ldr	r3, [r7, #4]
 8028bee:	681b      	ldr	r3, [r3, #0]
 8028bf0:	4a19      	ldr	r2, [pc, #100]	; (8028c58 <HAL_TIM_IC_Start_IT+0x244>)
 8028bf2:	4293      	cmp	r3, r2
 8028bf4:	d009      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	681b      	ldr	r3, [r3, #0]
 8028bfa:	4a18      	ldr	r2, [pc, #96]	; (8028c5c <HAL_TIM_IC_Start_IT+0x248>)
 8028bfc:	4293      	cmp	r3, r2
 8028bfe:	d004      	beq.n	8028c0a <HAL_TIM_IC_Start_IT+0x1f6>
 8028c00:	687b      	ldr	r3, [r7, #4]
 8028c02:	681b      	ldr	r3, [r3, #0]
 8028c04:	4a16      	ldr	r2, [pc, #88]	; (8028c60 <HAL_TIM_IC_Start_IT+0x24c>)
 8028c06:	4293      	cmp	r3, r2
 8028c08:	d111      	bne.n	8028c2e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	689b      	ldr	r3, [r3, #8]
 8028c10:	f003 0307 	and.w	r3, r3, #7
 8028c14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028c16:	68bb      	ldr	r3, [r7, #8]
 8028c18:	2b06      	cmp	r3, #6
 8028c1a:	d010      	beq.n	8028c3e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	681a      	ldr	r2, [r3, #0]
 8028c22:	687b      	ldr	r3, [r7, #4]
 8028c24:	681b      	ldr	r3, [r3, #0]
 8028c26:	f042 0201 	orr.w	r2, r2, #1
 8028c2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028c2c:	e007      	b.n	8028c3e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8028c2e:	687b      	ldr	r3, [r7, #4]
 8028c30:	681b      	ldr	r3, [r3, #0]
 8028c32:	681a      	ldr	r2, [r3, #0]
 8028c34:	687b      	ldr	r3, [r7, #4]
 8028c36:	681b      	ldr	r3, [r3, #0]
 8028c38:	f042 0201 	orr.w	r2, r2, #1
 8028c3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8028c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8028c40:	4618      	mov	r0, r3
 8028c42:	3710      	adds	r7, #16
 8028c44:	46bd      	mov	sp, r7
 8028c46:	bd80      	pop	{r7, pc}
 8028c48:	40010000 	.word	0x40010000
 8028c4c:	40000400 	.word	0x40000400
 8028c50:	40000800 	.word	0x40000800
 8028c54:	40000c00 	.word	0x40000c00
 8028c58:	40010400 	.word	0x40010400
 8028c5c:	40014000 	.word	0x40014000
 8028c60:	40001800 	.word	0x40001800

08028c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028c64:	b580      	push	{r7, lr}
 8028c66:	b082      	sub	sp, #8
 8028c68:	af00      	add	r7, sp, #0
 8028c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028c6c:	687b      	ldr	r3, [r7, #4]
 8028c6e:	681b      	ldr	r3, [r3, #0]
 8028c70:	691b      	ldr	r3, [r3, #16]
 8028c72:	f003 0302 	and.w	r3, r3, #2
 8028c76:	2b02      	cmp	r3, #2
 8028c78:	d122      	bne.n	8028cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028c7a:	687b      	ldr	r3, [r7, #4]
 8028c7c:	681b      	ldr	r3, [r3, #0]
 8028c7e:	68db      	ldr	r3, [r3, #12]
 8028c80:	f003 0302 	and.w	r3, r3, #2
 8028c84:	2b02      	cmp	r3, #2
 8028c86:	d11b      	bne.n	8028cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028c88:	687b      	ldr	r3, [r7, #4]
 8028c8a:	681b      	ldr	r3, [r3, #0]
 8028c8c:	f06f 0202 	mvn.w	r2, #2
 8028c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028c92:	687b      	ldr	r3, [r7, #4]
 8028c94:	2201      	movs	r2, #1
 8028c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028c98:	687b      	ldr	r3, [r7, #4]
 8028c9a:	681b      	ldr	r3, [r3, #0]
 8028c9c:	699b      	ldr	r3, [r3, #24]
 8028c9e:	f003 0303 	and.w	r3, r3, #3
 8028ca2:	2b00      	cmp	r3, #0
 8028ca4:	d003      	beq.n	8028cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028ca6:	6878      	ldr	r0, [r7, #4]
 8028ca8:	f7eb fbb2 	bl	8014410 <HAL_TIM_IC_CaptureCallback>
 8028cac:	e005      	b.n	8028cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028cae:	6878      	ldr	r0, [r7, #4]
 8028cb0:	f000 fb8c 	bl	80293cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028cb4:	6878      	ldr	r0, [r7, #4]
 8028cb6:	f000 fb93 	bl	80293e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028cba:	687b      	ldr	r3, [r7, #4]
 8028cbc:	2200      	movs	r2, #0
 8028cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028cc0:	687b      	ldr	r3, [r7, #4]
 8028cc2:	681b      	ldr	r3, [r3, #0]
 8028cc4:	691b      	ldr	r3, [r3, #16]
 8028cc6:	f003 0304 	and.w	r3, r3, #4
 8028cca:	2b04      	cmp	r3, #4
 8028ccc:	d122      	bne.n	8028d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028cce:	687b      	ldr	r3, [r7, #4]
 8028cd0:	681b      	ldr	r3, [r3, #0]
 8028cd2:	68db      	ldr	r3, [r3, #12]
 8028cd4:	f003 0304 	and.w	r3, r3, #4
 8028cd8:	2b04      	cmp	r3, #4
 8028cda:	d11b      	bne.n	8028d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028cdc:	687b      	ldr	r3, [r7, #4]
 8028cde:	681b      	ldr	r3, [r3, #0]
 8028ce0:	f06f 0204 	mvn.w	r2, #4
 8028ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	2202      	movs	r2, #2
 8028cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028cec:	687b      	ldr	r3, [r7, #4]
 8028cee:	681b      	ldr	r3, [r3, #0]
 8028cf0:	699b      	ldr	r3, [r3, #24]
 8028cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028cf6:	2b00      	cmp	r3, #0
 8028cf8:	d003      	beq.n	8028d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028cfa:	6878      	ldr	r0, [r7, #4]
 8028cfc:	f7eb fb88 	bl	8014410 <HAL_TIM_IC_CaptureCallback>
 8028d00:	e005      	b.n	8028d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028d02:	6878      	ldr	r0, [r7, #4]
 8028d04:	f000 fb62 	bl	80293cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028d08:	6878      	ldr	r0, [r7, #4]
 8028d0a:	f000 fb69 	bl	80293e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028d0e:	687b      	ldr	r3, [r7, #4]
 8028d10:	2200      	movs	r2, #0
 8028d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028d14:	687b      	ldr	r3, [r7, #4]
 8028d16:	681b      	ldr	r3, [r3, #0]
 8028d18:	691b      	ldr	r3, [r3, #16]
 8028d1a:	f003 0308 	and.w	r3, r3, #8
 8028d1e:	2b08      	cmp	r3, #8
 8028d20:	d122      	bne.n	8028d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028d22:	687b      	ldr	r3, [r7, #4]
 8028d24:	681b      	ldr	r3, [r3, #0]
 8028d26:	68db      	ldr	r3, [r3, #12]
 8028d28:	f003 0308 	and.w	r3, r3, #8
 8028d2c:	2b08      	cmp	r3, #8
 8028d2e:	d11b      	bne.n	8028d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028d30:	687b      	ldr	r3, [r7, #4]
 8028d32:	681b      	ldr	r3, [r3, #0]
 8028d34:	f06f 0208 	mvn.w	r2, #8
 8028d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028d3a:	687b      	ldr	r3, [r7, #4]
 8028d3c:	2204      	movs	r2, #4
 8028d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	681b      	ldr	r3, [r3, #0]
 8028d44:	69db      	ldr	r3, [r3, #28]
 8028d46:	f003 0303 	and.w	r3, r3, #3
 8028d4a:	2b00      	cmp	r3, #0
 8028d4c:	d003      	beq.n	8028d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028d4e:	6878      	ldr	r0, [r7, #4]
 8028d50:	f7eb fb5e 	bl	8014410 <HAL_TIM_IC_CaptureCallback>
 8028d54:	e005      	b.n	8028d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028d56:	6878      	ldr	r0, [r7, #4]
 8028d58:	f000 fb38 	bl	80293cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028d5c:	6878      	ldr	r0, [r7, #4]
 8028d5e:	f000 fb3f 	bl	80293e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	2200      	movs	r2, #0
 8028d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028d68:	687b      	ldr	r3, [r7, #4]
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	691b      	ldr	r3, [r3, #16]
 8028d6e:	f003 0310 	and.w	r3, r3, #16
 8028d72:	2b10      	cmp	r3, #16
 8028d74:	d122      	bne.n	8028dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028d76:	687b      	ldr	r3, [r7, #4]
 8028d78:	681b      	ldr	r3, [r3, #0]
 8028d7a:	68db      	ldr	r3, [r3, #12]
 8028d7c:	f003 0310 	and.w	r3, r3, #16
 8028d80:	2b10      	cmp	r3, #16
 8028d82:	d11b      	bne.n	8028dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028d84:	687b      	ldr	r3, [r7, #4]
 8028d86:	681b      	ldr	r3, [r3, #0]
 8028d88:	f06f 0210 	mvn.w	r2, #16
 8028d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028d8e:	687b      	ldr	r3, [r7, #4]
 8028d90:	2208      	movs	r2, #8
 8028d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028d94:	687b      	ldr	r3, [r7, #4]
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	69db      	ldr	r3, [r3, #28]
 8028d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d003      	beq.n	8028daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028da2:	6878      	ldr	r0, [r7, #4]
 8028da4:	f7eb fb34 	bl	8014410 <HAL_TIM_IC_CaptureCallback>
 8028da8:	e005      	b.n	8028db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028daa:	6878      	ldr	r0, [r7, #4]
 8028dac:	f000 fb0e 	bl	80293cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028db0:	6878      	ldr	r0, [r7, #4]
 8028db2:	f000 fb15 	bl	80293e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2200      	movs	r2, #0
 8028dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028dbc:	687b      	ldr	r3, [r7, #4]
 8028dbe:	681b      	ldr	r3, [r3, #0]
 8028dc0:	691b      	ldr	r3, [r3, #16]
 8028dc2:	f003 0301 	and.w	r3, r3, #1
 8028dc6:	2b01      	cmp	r3, #1
 8028dc8:	d10e      	bne.n	8028de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028dca:	687b      	ldr	r3, [r7, #4]
 8028dcc:	681b      	ldr	r3, [r3, #0]
 8028dce:	68db      	ldr	r3, [r3, #12]
 8028dd0:	f003 0301 	and.w	r3, r3, #1
 8028dd4:	2b01      	cmp	r3, #1
 8028dd6:	d107      	bne.n	8028de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028dd8:	687b      	ldr	r3, [r7, #4]
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	f06f 0201 	mvn.w	r2, #1
 8028de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028de2:	6878      	ldr	r0, [r7, #4]
 8028de4:	f7ee fcee 	bl	80177c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8028de8:	687b      	ldr	r3, [r7, #4]
 8028dea:	681b      	ldr	r3, [r3, #0]
 8028dec:	691b      	ldr	r3, [r3, #16]
 8028dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028df2:	2b80      	cmp	r3, #128	; 0x80
 8028df4:	d10e      	bne.n	8028e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8028df6:	687b      	ldr	r3, [r7, #4]
 8028df8:	681b      	ldr	r3, [r3, #0]
 8028dfa:	68db      	ldr	r3, [r3, #12]
 8028dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028e00:	2b80      	cmp	r3, #128	; 0x80
 8028e02:	d107      	bne.n	8028e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	681b      	ldr	r3, [r3, #0]
 8028e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8028e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8028e0e:	6878      	ldr	r0, [r7, #4]
 8028e10:	f001 f89e 	bl	8029f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8028e14:	687b      	ldr	r3, [r7, #4]
 8028e16:	681b      	ldr	r3, [r3, #0]
 8028e18:	691b      	ldr	r3, [r3, #16]
 8028e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e1e:	2b40      	cmp	r3, #64	; 0x40
 8028e20:	d10e      	bne.n	8028e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8028e22:	687b      	ldr	r3, [r7, #4]
 8028e24:	681b      	ldr	r3, [r3, #0]
 8028e26:	68db      	ldr	r3, [r3, #12]
 8028e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e2c:	2b40      	cmp	r3, #64	; 0x40
 8028e2e:	d107      	bne.n	8028e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8028e30:	687b      	ldr	r3, [r7, #4]
 8028e32:	681b      	ldr	r3, [r3, #0]
 8028e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8028e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8028e3a:	6878      	ldr	r0, [r7, #4]
 8028e3c:	f000 fada 	bl	80293f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	681b      	ldr	r3, [r3, #0]
 8028e44:	691b      	ldr	r3, [r3, #16]
 8028e46:	f003 0320 	and.w	r3, r3, #32
 8028e4a:	2b20      	cmp	r3, #32
 8028e4c:	d10e      	bne.n	8028e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	681b      	ldr	r3, [r3, #0]
 8028e52:	68db      	ldr	r3, [r3, #12]
 8028e54:	f003 0320 	and.w	r3, r3, #32
 8028e58:	2b20      	cmp	r3, #32
 8028e5a:	d107      	bne.n	8028e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	681b      	ldr	r3, [r3, #0]
 8028e60:	f06f 0220 	mvn.w	r2, #32
 8028e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8028e66:	6878      	ldr	r0, [r7, #4]
 8028e68:	f001 f868 	bl	8029f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028e6c:	bf00      	nop
 8028e6e:	3708      	adds	r7, #8
 8028e70:	46bd      	mov	sp, r7
 8028e72:	bd80      	pop	{r7, pc}

08028e74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8028e74:	b580      	push	{r7, lr}
 8028e76:	b086      	sub	sp, #24
 8028e78:	af00      	add	r7, sp, #0
 8028e7a:	60f8      	str	r0, [r7, #12]
 8028e7c:	60b9      	str	r1, [r7, #8]
 8028e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028e80:	2300      	movs	r3, #0
 8028e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028e84:	68fb      	ldr	r3, [r7, #12]
 8028e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028e8a:	2b01      	cmp	r3, #1
 8028e8c:	d101      	bne.n	8028e92 <HAL_TIM_IC_ConfigChannel+0x1e>
 8028e8e:	2302      	movs	r3, #2
 8028e90:	e088      	b.n	8028fa4 <HAL_TIM_IC_ConfigChannel+0x130>
 8028e92:	68fb      	ldr	r3, [r7, #12]
 8028e94:	2201      	movs	r2, #1
 8028e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	2b00      	cmp	r3, #0
 8028e9e:	d11b      	bne.n	8028ed8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	6818      	ldr	r0, [r3, #0]
 8028ea4:	68bb      	ldr	r3, [r7, #8]
 8028ea6:	6819      	ldr	r1, [r3, #0]
 8028ea8:	68bb      	ldr	r3, [r7, #8]
 8028eaa:	685a      	ldr	r2, [r3, #4]
 8028eac:	68bb      	ldr	r3, [r7, #8]
 8028eae:	68db      	ldr	r3, [r3, #12]
 8028eb0:	f000 fd8c 	bl	80299cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8028eb4:	68fb      	ldr	r3, [r7, #12]
 8028eb6:	681b      	ldr	r3, [r3, #0]
 8028eb8:	699a      	ldr	r2, [r3, #24]
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	681b      	ldr	r3, [r3, #0]
 8028ebe:	f022 020c 	bic.w	r2, r2, #12
 8028ec2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8028ec4:	68fb      	ldr	r3, [r7, #12]
 8028ec6:	681b      	ldr	r3, [r3, #0]
 8028ec8:	6999      	ldr	r1, [r3, #24]
 8028eca:	68bb      	ldr	r3, [r7, #8]
 8028ecc:	689a      	ldr	r2, [r3, #8]
 8028ece:	68fb      	ldr	r3, [r7, #12]
 8028ed0:	681b      	ldr	r3, [r3, #0]
 8028ed2:	430a      	orrs	r2, r1
 8028ed4:	619a      	str	r2, [r3, #24]
 8028ed6:	e060      	b.n	8028f9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8028ed8:	687b      	ldr	r3, [r7, #4]
 8028eda:	2b04      	cmp	r3, #4
 8028edc:	d11c      	bne.n	8028f18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8028ede:	68fb      	ldr	r3, [r7, #12]
 8028ee0:	6818      	ldr	r0, [r3, #0]
 8028ee2:	68bb      	ldr	r3, [r7, #8]
 8028ee4:	6819      	ldr	r1, [r3, #0]
 8028ee6:	68bb      	ldr	r3, [r7, #8]
 8028ee8:	685a      	ldr	r2, [r3, #4]
 8028eea:	68bb      	ldr	r3, [r7, #8]
 8028eec:	68db      	ldr	r3, [r3, #12]
 8028eee:	f000 fe10 	bl	8029b12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8028ef2:	68fb      	ldr	r3, [r7, #12]
 8028ef4:	681b      	ldr	r3, [r3, #0]
 8028ef6:	699a      	ldr	r2, [r3, #24]
 8028ef8:	68fb      	ldr	r3, [r7, #12]
 8028efa:	681b      	ldr	r3, [r3, #0]
 8028efc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028f00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8028f02:	68fb      	ldr	r3, [r7, #12]
 8028f04:	681b      	ldr	r3, [r3, #0]
 8028f06:	6999      	ldr	r1, [r3, #24]
 8028f08:	68bb      	ldr	r3, [r7, #8]
 8028f0a:	689b      	ldr	r3, [r3, #8]
 8028f0c:	021a      	lsls	r2, r3, #8
 8028f0e:	68fb      	ldr	r3, [r7, #12]
 8028f10:	681b      	ldr	r3, [r3, #0]
 8028f12:	430a      	orrs	r2, r1
 8028f14:	619a      	str	r2, [r3, #24]
 8028f16:	e040      	b.n	8028f9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8028f18:	687b      	ldr	r3, [r7, #4]
 8028f1a:	2b08      	cmp	r3, #8
 8028f1c:	d11b      	bne.n	8028f56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8028f1e:	68fb      	ldr	r3, [r7, #12]
 8028f20:	6818      	ldr	r0, [r3, #0]
 8028f22:	68bb      	ldr	r3, [r7, #8]
 8028f24:	6819      	ldr	r1, [r3, #0]
 8028f26:	68bb      	ldr	r3, [r7, #8]
 8028f28:	685a      	ldr	r2, [r3, #4]
 8028f2a:	68bb      	ldr	r3, [r7, #8]
 8028f2c:	68db      	ldr	r3, [r3, #12]
 8028f2e:	f000 fe5d 	bl	8029bec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8028f32:	68fb      	ldr	r3, [r7, #12]
 8028f34:	681b      	ldr	r3, [r3, #0]
 8028f36:	69da      	ldr	r2, [r3, #28]
 8028f38:	68fb      	ldr	r3, [r7, #12]
 8028f3a:	681b      	ldr	r3, [r3, #0]
 8028f3c:	f022 020c 	bic.w	r2, r2, #12
 8028f40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8028f42:	68fb      	ldr	r3, [r7, #12]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	69d9      	ldr	r1, [r3, #28]
 8028f48:	68bb      	ldr	r3, [r7, #8]
 8028f4a:	689a      	ldr	r2, [r3, #8]
 8028f4c:	68fb      	ldr	r3, [r7, #12]
 8028f4e:	681b      	ldr	r3, [r3, #0]
 8028f50:	430a      	orrs	r2, r1
 8028f52:	61da      	str	r2, [r3, #28]
 8028f54:	e021      	b.n	8028f9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8028f56:	687b      	ldr	r3, [r7, #4]
 8028f58:	2b0c      	cmp	r3, #12
 8028f5a:	d11c      	bne.n	8028f96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	6818      	ldr	r0, [r3, #0]
 8028f60:	68bb      	ldr	r3, [r7, #8]
 8028f62:	6819      	ldr	r1, [r3, #0]
 8028f64:	68bb      	ldr	r3, [r7, #8]
 8028f66:	685a      	ldr	r2, [r3, #4]
 8028f68:	68bb      	ldr	r3, [r7, #8]
 8028f6a:	68db      	ldr	r3, [r3, #12]
 8028f6c:	f000 fe7a 	bl	8029c64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	681b      	ldr	r3, [r3, #0]
 8028f74:	69da      	ldr	r2, [r3, #28]
 8028f76:	68fb      	ldr	r3, [r7, #12]
 8028f78:	681b      	ldr	r3, [r3, #0]
 8028f7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8028f7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8028f80:	68fb      	ldr	r3, [r7, #12]
 8028f82:	681b      	ldr	r3, [r3, #0]
 8028f84:	69d9      	ldr	r1, [r3, #28]
 8028f86:	68bb      	ldr	r3, [r7, #8]
 8028f88:	689b      	ldr	r3, [r3, #8]
 8028f8a:	021a      	lsls	r2, r3, #8
 8028f8c:	68fb      	ldr	r3, [r7, #12]
 8028f8e:	681b      	ldr	r3, [r3, #0]
 8028f90:	430a      	orrs	r2, r1
 8028f92:	61da      	str	r2, [r3, #28]
 8028f94:	e001      	b.n	8028f9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8028f96:	2301      	movs	r3, #1
 8028f98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8028f9a:	68fb      	ldr	r3, [r7, #12]
 8028f9c:	2200      	movs	r2, #0
 8028f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8028fa4:	4618      	mov	r0, r3
 8028fa6:	3718      	adds	r7, #24
 8028fa8:	46bd      	mov	sp, r7
 8028faa:	bd80      	pop	{r7, pc}

08028fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8028fac:	b580      	push	{r7, lr}
 8028fae:	b086      	sub	sp, #24
 8028fb0:	af00      	add	r7, sp, #0
 8028fb2:	60f8      	str	r0, [r7, #12]
 8028fb4:	60b9      	str	r1, [r7, #8]
 8028fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8028fb8:	2300      	movs	r3, #0
 8028fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028fbc:	68fb      	ldr	r3, [r7, #12]
 8028fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028fc2:	2b01      	cmp	r3, #1
 8028fc4:	d101      	bne.n	8028fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8028fc6:	2302      	movs	r3, #2
 8028fc8:	e0ae      	b.n	8029128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8028fca:	68fb      	ldr	r3, [r7, #12]
 8028fcc:	2201      	movs	r2, #1
 8028fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8028fd2:	687b      	ldr	r3, [r7, #4]
 8028fd4:	2b0c      	cmp	r3, #12
 8028fd6:	f200 809f 	bhi.w	8029118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8028fda:	a201      	add	r2, pc, #4	; (adr r2, 8028fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8028fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028fe0:	08029015 	.word	0x08029015
 8028fe4:	08029119 	.word	0x08029119
 8028fe8:	08029119 	.word	0x08029119
 8028fec:	08029119 	.word	0x08029119
 8028ff0:	08029055 	.word	0x08029055
 8028ff4:	08029119 	.word	0x08029119
 8028ff8:	08029119 	.word	0x08029119
 8028ffc:	08029119 	.word	0x08029119
 8029000:	08029097 	.word	0x08029097
 8029004:	08029119 	.word	0x08029119
 8029008:	08029119 	.word	0x08029119
 802900c:	08029119 	.word	0x08029119
 8029010:	080290d7 	.word	0x080290d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029014:	68fb      	ldr	r3, [r7, #12]
 8029016:	681b      	ldr	r3, [r3, #0]
 8029018:	68b9      	ldr	r1, [r7, #8]
 802901a:	4618      	mov	r0, r3
 802901c:	f000 fa94 	bl	8029548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8029020:	68fb      	ldr	r3, [r7, #12]
 8029022:	681b      	ldr	r3, [r3, #0]
 8029024:	699a      	ldr	r2, [r3, #24]
 8029026:	68fb      	ldr	r3, [r7, #12]
 8029028:	681b      	ldr	r3, [r3, #0]
 802902a:	f042 0208 	orr.w	r2, r2, #8
 802902e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029030:	68fb      	ldr	r3, [r7, #12]
 8029032:	681b      	ldr	r3, [r3, #0]
 8029034:	699a      	ldr	r2, [r3, #24]
 8029036:	68fb      	ldr	r3, [r7, #12]
 8029038:	681b      	ldr	r3, [r3, #0]
 802903a:	f022 0204 	bic.w	r2, r2, #4
 802903e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029040:	68fb      	ldr	r3, [r7, #12]
 8029042:	681b      	ldr	r3, [r3, #0]
 8029044:	6999      	ldr	r1, [r3, #24]
 8029046:	68bb      	ldr	r3, [r7, #8]
 8029048:	691a      	ldr	r2, [r3, #16]
 802904a:	68fb      	ldr	r3, [r7, #12]
 802904c:	681b      	ldr	r3, [r3, #0]
 802904e:	430a      	orrs	r2, r1
 8029050:	619a      	str	r2, [r3, #24]
      break;
 8029052:	e064      	b.n	802911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029054:	68fb      	ldr	r3, [r7, #12]
 8029056:	681b      	ldr	r3, [r3, #0]
 8029058:	68b9      	ldr	r1, [r7, #8]
 802905a:	4618      	mov	r0, r3
 802905c:	f000 fae4 	bl	8029628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029060:	68fb      	ldr	r3, [r7, #12]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	699a      	ldr	r2, [r3, #24]
 8029066:	68fb      	ldr	r3, [r7, #12]
 8029068:	681b      	ldr	r3, [r3, #0]
 802906a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802906e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029070:	68fb      	ldr	r3, [r7, #12]
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	699a      	ldr	r2, [r3, #24]
 8029076:	68fb      	ldr	r3, [r7, #12]
 8029078:	681b      	ldr	r3, [r3, #0]
 802907a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802907e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029080:	68fb      	ldr	r3, [r7, #12]
 8029082:	681b      	ldr	r3, [r3, #0]
 8029084:	6999      	ldr	r1, [r3, #24]
 8029086:	68bb      	ldr	r3, [r7, #8]
 8029088:	691b      	ldr	r3, [r3, #16]
 802908a:	021a      	lsls	r2, r3, #8
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	430a      	orrs	r2, r1
 8029092:	619a      	str	r2, [r3, #24]
      break;
 8029094:	e043      	b.n	802911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8029096:	68fb      	ldr	r3, [r7, #12]
 8029098:	681b      	ldr	r3, [r3, #0]
 802909a:	68b9      	ldr	r1, [r7, #8]
 802909c:	4618      	mov	r0, r3
 802909e:	f000 fb39 	bl	8029714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80290a2:	68fb      	ldr	r3, [r7, #12]
 80290a4:	681b      	ldr	r3, [r3, #0]
 80290a6:	69da      	ldr	r2, [r3, #28]
 80290a8:	68fb      	ldr	r3, [r7, #12]
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	f042 0208 	orr.w	r2, r2, #8
 80290b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80290b2:	68fb      	ldr	r3, [r7, #12]
 80290b4:	681b      	ldr	r3, [r3, #0]
 80290b6:	69da      	ldr	r2, [r3, #28]
 80290b8:	68fb      	ldr	r3, [r7, #12]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	f022 0204 	bic.w	r2, r2, #4
 80290c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80290c2:	68fb      	ldr	r3, [r7, #12]
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	69d9      	ldr	r1, [r3, #28]
 80290c8:	68bb      	ldr	r3, [r7, #8]
 80290ca:	691a      	ldr	r2, [r3, #16]
 80290cc:	68fb      	ldr	r3, [r7, #12]
 80290ce:	681b      	ldr	r3, [r3, #0]
 80290d0:	430a      	orrs	r2, r1
 80290d2:	61da      	str	r2, [r3, #28]
      break;
 80290d4:	e023      	b.n	802911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80290d6:	68fb      	ldr	r3, [r7, #12]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	68b9      	ldr	r1, [r7, #8]
 80290dc:	4618      	mov	r0, r3
 80290de:	f000 fb8d 	bl	80297fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80290e2:	68fb      	ldr	r3, [r7, #12]
 80290e4:	681b      	ldr	r3, [r3, #0]
 80290e6:	69da      	ldr	r2, [r3, #28]
 80290e8:	68fb      	ldr	r3, [r7, #12]
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80290f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80290f2:	68fb      	ldr	r3, [r7, #12]
 80290f4:	681b      	ldr	r3, [r3, #0]
 80290f6:	69da      	ldr	r2, [r3, #28]
 80290f8:	68fb      	ldr	r3, [r7, #12]
 80290fa:	681b      	ldr	r3, [r3, #0]
 80290fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029102:	68fb      	ldr	r3, [r7, #12]
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	69d9      	ldr	r1, [r3, #28]
 8029108:	68bb      	ldr	r3, [r7, #8]
 802910a:	691b      	ldr	r3, [r3, #16]
 802910c:	021a      	lsls	r2, r3, #8
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	430a      	orrs	r2, r1
 8029114:	61da      	str	r2, [r3, #28]
      break;
 8029116:	e002      	b.n	802911e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8029118:	2301      	movs	r3, #1
 802911a:	75fb      	strb	r3, [r7, #23]
      break;
 802911c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 802911e:	68fb      	ldr	r3, [r7, #12]
 8029120:	2200      	movs	r2, #0
 8029122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8029126:	7dfb      	ldrb	r3, [r7, #23]
}
 8029128:	4618      	mov	r0, r3
 802912a:	3718      	adds	r7, #24
 802912c:	46bd      	mov	sp, r7
 802912e:	bd80      	pop	{r7, pc}

08029130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029130:	b580      	push	{r7, lr}
 8029132:	b084      	sub	sp, #16
 8029134:	af00      	add	r7, sp, #0
 8029136:	6078      	str	r0, [r7, #4]
 8029138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802913a:	2300      	movs	r3, #0
 802913c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802913e:	687b      	ldr	r3, [r7, #4]
 8029140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029144:	2b01      	cmp	r3, #1
 8029146:	d101      	bne.n	802914c <HAL_TIM_ConfigClockSource+0x1c>
 8029148:	2302      	movs	r3, #2
 802914a:	e0b4      	b.n	80292b6 <HAL_TIM_ConfigClockSource+0x186>
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	2201      	movs	r2, #1
 8029150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	2202      	movs	r2, #2
 8029158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802915c:	687b      	ldr	r3, [r7, #4]
 802915e:	681b      	ldr	r3, [r3, #0]
 8029160:	689b      	ldr	r3, [r3, #8]
 8029162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029164:	68bb      	ldr	r3, [r7, #8]
 8029166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802916a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802916c:	68bb      	ldr	r3, [r7, #8]
 802916e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	68ba      	ldr	r2, [r7, #8]
 802917a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802917c:	683b      	ldr	r3, [r7, #0]
 802917e:	681b      	ldr	r3, [r3, #0]
 8029180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029184:	d03e      	beq.n	8029204 <HAL_TIM_ConfigClockSource+0xd4>
 8029186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802918a:	f200 8087 	bhi.w	802929c <HAL_TIM_ConfigClockSource+0x16c>
 802918e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029192:	f000 8086 	beq.w	80292a2 <HAL_TIM_ConfigClockSource+0x172>
 8029196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802919a:	d87f      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 802919c:	2b70      	cmp	r3, #112	; 0x70
 802919e:	d01a      	beq.n	80291d6 <HAL_TIM_ConfigClockSource+0xa6>
 80291a0:	2b70      	cmp	r3, #112	; 0x70
 80291a2:	d87b      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291a4:	2b60      	cmp	r3, #96	; 0x60
 80291a6:	d050      	beq.n	802924a <HAL_TIM_ConfigClockSource+0x11a>
 80291a8:	2b60      	cmp	r3, #96	; 0x60
 80291aa:	d877      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291ac:	2b50      	cmp	r3, #80	; 0x50
 80291ae:	d03c      	beq.n	802922a <HAL_TIM_ConfigClockSource+0xfa>
 80291b0:	2b50      	cmp	r3, #80	; 0x50
 80291b2:	d873      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291b4:	2b40      	cmp	r3, #64	; 0x40
 80291b6:	d058      	beq.n	802926a <HAL_TIM_ConfigClockSource+0x13a>
 80291b8:	2b40      	cmp	r3, #64	; 0x40
 80291ba:	d86f      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291bc:	2b30      	cmp	r3, #48	; 0x30
 80291be:	d064      	beq.n	802928a <HAL_TIM_ConfigClockSource+0x15a>
 80291c0:	2b30      	cmp	r3, #48	; 0x30
 80291c2:	d86b      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291c4:	2b20      	cmp	r3, #32
 80291c6:	d060      	beq.n	802928a <HAL_TIM_ConfigClockSource+0x15a>
 80291c8:	2b20      	cmp	r3, #32
 80291ca:	d867      	bhi.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
 80291cc:	2b00      	cmp	r3, #0
 80291ce:	d05c      	beq.n	802928a <HAL_TIM_ConfigClockSource+0x15a>
 80291d0:	2b10      	cmp	r3, #16
 80291d2:	d05a      	beq.n	802928a <HAL_TIM_ConfigClockSource+0x15a>
 80291d4:	e062      	b.n	802929c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80291d6:	687b      	ldr	r3, [r7, #4]
 80291d8:	6818      	ldr	r0, [r3, #0]
 80291da:	683b      	ldr	r3, [r7, #0]
 80291dc:	6899      	ldr	r1, [r3, #8]
 80291de:	683b      	ldr	r3, [r7, #0]
 80291e0:	685a      	ldr	r2, [r3, #4]
 80291e2:	683b      	ldr	r3, [r7, #0]
 80291e4:	68db      	ldr	r3, [r3, #12]
 80291e6:	f000 fd95 	bl	8029d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	689b      	ldr	r3, [r3, #8]
 80291f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80291f2:	68bb      	ldr	r3, [r7, #8]
 80291f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80291f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80291fa:	687b      	ldr	r3, [r7, #4]
 80291fc:	681b      	ldr	r3, [r3, #0]
 80291fe:	68ba      	ldr	r2, [r7, #8]
 8029200:	609a      	str	r2, [r3, #8]
      break;
 8029202:	e04f      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8029204:	687b      	ldr	r3, [r7, #4]
 8029206:	6818      	ldr	r0, [r3, #0]
 8029208:	683b      	ldr	r3, [r7, #0]
 802920a:	6899      	ldr	r1, [r3, #8]
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	685a      	ldr	r2, [r3, #4]
 8029210:	683b      	ldr	r3, [r7, #0]
 8029212:	68db      	ldr	r3, [r3, #12]
 8029214:	f000 fd7e 	bl	8029d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029218:	687b      	ldr	r3, [r7, #4]
 802921a:	681b      	ldr	r3, [r3, #0]
 802921c:	689a      	ldr	r2, [r3, #8]
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029226:	609a      	str	r2, [r3, #8]
      break;
 8029228:	e03c      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	6818      	ldr	r0, [r3, #0]
 802922e:	683b      	ldr	r3, [r7, #0]
 8029230:	6859      	ldr	r1, [r3, #4]
 8029232:	683b      	ldr	r3, [r7, #0]
 8029234:	68db      	ldr	r3, [r3, #12]
 8029236:	461a      	mov	r2, r3
 8029238:	f000 fc3c 	bl	8029ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	681b      	ldr	r3, [r3, #0]
 8029240:	2150      	movs	r1, #80	; 0x50
 8029242:	4618      	mov	r0, r3
 8029244:	f000 fd4b 	bl	8029cde <TIM_ITRx_SetConfig>
      break;
 8029248:	e02c      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802924a:	687b      	ldr	r3, [r7, #4]
 802924c:	6818      	ldr	r0, [r3, #0]
 802924e:	683b      	ldr	r3, [r7, #0]
 8029250:	6859      	ldr	r1, [r3, #4]
 8029252:	683b      	ldr	r3, [r7, #0]
 8029254:	68db      	ldr	r3, [r3, #12]
 8029256:	461a      	mov	r2, r3
 8029258:	f000 fc98 	bl	8029b8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802925c:	687b      	ldr	r3, [r7, #4]
 802925e:	681b      	ldr	r3, [r3, #0]
 8029260:	2160      	movs	r1, #96	; 0x60
 8029262:	4618      	mov	r0, r3
 8029264:	f000 fd3b 	bl	8029cde <TIM_ITRx_SetConfig>
      break;
 8029268:	e01c      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802926a:	687b      	ldr	r3, [r7, #4]
 802926c:	6818      	ldr	r0, [r3, #0]
 802926e:	683b      	ldr	r3, [r7, #0]
 8029270:	6859      	ldr	r1, [r3, #4]
 8029272:	683b      	ldr	r3, [r7, #0]
 8029274:	68db      	ldr	r3, [r3, #12]
 8029276:	461a      	mov	r2, r3
 8029278:	f000 fc1c 	bl	8029ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802927c:	687b      	ldr	r3, [r7, #4]
 802927e:	681b      	ldr	r3, [r3, #0]
 8029280:	2140      	movs	r1, #64	; 0x40
 8029282:	4618      	mov	r0, r3
 8029284:	f000 fd2b 	bl	8029cde <TIM_ITRx_SetConfig>
      break;
 8029288:	e00c      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	681a      	ldr	r2, [r3, #0]
 802928e:	683b      	ldr	r3, [r7, #0]
 8029290:	681b      	ldr	r3, [r3, #0]
 8029292:	4619      	mov	r1, r3
 8029294:	4610      	mov	r0, r2
 8029296:	f000 fd22 	bl	8029cde <TIM_ITRx_SetConfig>
      break;
 802929a:	e003      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802929c:	2301      	movs	r3, #1
 802929e:	73fb      	strb	r3, [r7, #15]
      break;
 80292a0:	e000      	b.n	80292a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80292a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	2201      	movs	r2, #1
 80292a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	2200      	movs	r2, #0
 80292b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80292b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80292b6:	4618      	mov	r0, r3
 80292b8:	3710      	adds	r7, #16
 80292ba:	46bd      	mov	sp, r7
 80292bc:	bd80      	pop	{r7, pc}

080292be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80292be:	b580      	push	{r7, lr}
 80292c0:	b082      	sub	sp, #8
 80292c2:	af00      	add	r7, sp, #0
 80292c4:	6078      	str	r0, [r7, #4]
 80292c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80292ce:	2b01      	cmp	r3, #1
 80292d0:	d101      	bne.n	80292d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80292d2:	2302      	movs	r3, #2
 80292d4:	e031      	b.n	802933a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	2201      	movs	r2, #1
 80292da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80292de:	687b      	ldr	r3, [r7, #4]
 80292e0:	2202      	movs	r2, #2
 80292e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80292e6:	6839      	ldr	r1, [r7, #0]
 80292e8:	6878      	ldr	r0, [r7, #4]
 80292ea:	f000 fadd 	bl	80298a8 <TIM_SlaveTimer_SetConfig>
 80292ee:	4603      	mov	r3, r0
 80292f0:	2b00      	cmp	r3, #0
 80292f2:	d009      	beq.n	8029308 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	2201      	movs	r2, #1
 80292f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	2200      	movs	r2, #0
 8029300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8029304:	2301      	movs	r3, #1
 8029306:	e018      	b.n	802933a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8029308:	687b      	ldr	r3, [r7, #4]
 802930a:	681b      	ldr	r3, [r3, #0]
 802930c:	68da      	ldr	r2, [r3, #12]
 802930e:	687b      	ldr	r3, [r7, #4]
 8029310:	681b      	ldr	r3, [r3, #0]
 8029312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029316:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8029318:	687b      	ldr	r3, [r7, #4]
 802931a:	681b      	ldr	r3, [r3, #0]
 802931c:	68da      	ldr	r2, [r3, #12]
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	681b      	ldr	r3, [r3, #0]
 8029322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8029326:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8029328:	687b      	ldr	r3, [r7, #4]
 802932a:	2201      	movs	r2, #1
 802932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029330:	687b      	ldr	r3, [r7, #4]
 8029332:	2200      	movs	r2, #0
 8029334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029338:	2300      	movs	r3, #0
}
 802933a:	4618      	mov	r0, r3
 802933c:	3708      	adds	r7, #8
 802933e:	46bd      	mov	sp, r7
 8029340:	bd80      	pop	{r7, pc}
	...

08029344 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029344:	b480      	push	{r7}
 8029346:	b085      	sub	sp, #20
 8029348:	af00      	add	r7, sp, #0
 802934a:	6078      	str	r0, [r7, #4]
 802934c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 802934e:	2300      	movs	r3, #0
 8029350:	60fb      	str	r3, [r7, #12]
 8029352:	683b      	ldr	r3, [r7, #0]
 8029354:	2b0c      	cmp	r3, #12
 8029356:	d831      	bhi.n	80293bc <HAL_TIM_ReadCapturedValue+0x78>
 8029358:	a201      	add	r2, pc, #4	; (adr r2, 8029360 <HAL_TIM_ReadCapturedValue+0x1c>)
 802935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802935e:	bf00      	nop
 8029360:	08029395 	.word	0x08029395
 8029364:	080293bd 	.word	0x080293bd
 8029368:	080293bd 	.word	0x080293bd
 802936c:	080293bd 	.word	0x080293bd
 8029370:	0802939f 	.word	0x0802939f
 8029374:	080293bd 	.word	0x080293bd
 8029378:	080293bd 	.word	0x080293bd
 802937c:	080293bd 	.word	0x080293bd
 8029380:	080293a9 	.word	0x080293a9
 8029384:	080293bd 	.word	0x080293bd
 8029388:	080293bd 	.word	0x080293bd
 802938c:	080293bd 	.word	0x080293bd
 8029390:	080293b3 	.word	0x080293b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	681b      	ldr	r3, [r3, #0]
 8029398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802939a:	60fb      	str	r3, [r7, #12]

      break;
 802939c:	e00f      	b.n	80293be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	681b      	ldr	r3, [r3, #0]
 80293a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80293a4:	60fb      	str	r3, [r7, #12]

      break;
 80293a6:	e00a      	b.n	80293be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80293a8:	687b      	ldr	r3, [r7, #4]
 80293aa:	681b      	ldr	r3, [r3, #0]
 80293ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80293ae:	60fb      	str	r3, [r7, #12]

      break;
 80293b0:	e005      	b.n	80293be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	681b      	ldr	r3, [r3, #0]
 80293b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80293b8:	60fb      	str	r3, [r7, #12]

      break;
 80293ba:	e000      	b.n	80293be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80293bc:	bf00      	nop
  }

  return tmpreg;
 80293be:	68fb      	ldr	r3, [r7, #12]
}
 80293c0:	4618      	mov	r0, r3
 80293c2:	3714      	adds	r7, #20
 80293c4:	46bd      	mov	sp, r7
 80293c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293ca:	4770      	bx	lr

080293cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80293cc:	b480      	push	{r7}
 80293ce:	b083      	sub	sp, #12
 80293d0:	af00      	add	r7, sp, #0
 80293d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80293d4:	bf00      	nop
 80293d6:	370c      	adds	r7, #12
 80293d8:	46bd      	mov	sp, r7
 80293da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293de:	4770      	bx	lr

080293e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80293e0:	b480      	push	{r7}
 80293e2:	b083      	sub	sp, #12
 80293e4:	af00      	add	r7, sp, #0
 80293e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80293e8:	bf00      	nop
 80293ea:	370c      	adds	r7, #12
 80293ec:	46bd      	mov	sp, r7
 80293ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293f2:	4770      	bx	lr

080293f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80293f4:	b480      	push	{r7}
 80293f6:	b083      	sub	sp, #12
 80293f8:	af00      	add	r7, sp, #0
 80293fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80293fc:	bf00      	nop
 80293fe:	370c      	adds	r7, #12
 8029400:	46bd      	mov	sp, r7
 8029402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029406:	4770      	bx	lr

08029408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029408:	b480      	push	{r7}
 802940a:	b085      	sub	sp, #20
 802940c:	af00      	add	r7, sp, #0
 802940e:	6078      	str	r0, [r7, #4]
 8029410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029412:	687b      	ldr	r3, [r7, #4]
 8029414:	681b      	ldr	r3, [r3, #0]
 8029416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	4a40      	ldr	r2, [pc, #256]	; (802951c <TIM_Base_SetConfig+0x114>)
 802941c:	4293      	cmp	r3, r2
 802941e:	d013      	beq.n	8029448 <TIM_Base_SetConfig+0x40>
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029426:	d00f      	beq.n	8029448 <TIM_Base_SetConfig+0x40>
 8029428:	687b      	ldr	r3, [r7, #4]
 802942a:	4a3d      	ldr	r2, [pc, #244]	; (8029520 <TIM_Base_SetConfig+0x118>)
 802942c:	4293      	cmp	r3, r2
 802942e:	d00b      	beq.n	8029448 <TIM_Base_SetConfig+0x40>
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	4a3c      	ldr	r2, [pc, #240]	; (8029524 <TIM_Base_SetConfig+0x11c>)
 8029434:	4293      	cmp	r3, r2
 8029436:	d007      	beq.n	8029448 <TIM_Base_SetConfig+0x40>
 8029438:	687b      	ldr	r3, [r7, #4]
 802943a:	4a3b      	ldr	r2, [pc, #236]	; (8029528 <TIM_Base_SetConfig+0x120>)
 802943c:	4293      	cmp	r3, r2
 802943e:	d003      	beq.n	8029448 <TIM_Base_SetConfig+0x40>
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	4a3a      	ldr	r2, [pc, #232]	; (802952c <TIM_Base_SetConfig+0x124>)
 8029444:	4293      	cmp	r3, r2
 8029446:	d108      	bne.n	802945a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029448:	68fb      	ldr	r3, [r7, #12]
 802944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802944e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029450:	683b      	ldr	r3, [r7, #0]
 8029452:	685b      	ldr	r3, [r3, #4]
 8029454:	68fa      	ldr	r2, [r7, #12]
 8029456:	4313      	orrs	r3, r2
 8029458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	4a2f      	ldr	r2, [pc, #188]	; (802951c <TIM_Base_SetConfig+0x114>)
 802945e:	4293      	cmp	r3, r2
 8029460:	d02b      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029468:	d027      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	4a2c      	ldr	r2, [pc, #176]	; (8029520 <TIM_Base_SetConfig+0x118>)
 802946e:	4293      	cmp	r3, r2
 8029470:	d023      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	4a2b      	ldr	r2, [pc, #172]	; (8029524 <TIM_Base_SetConfig+0x11c>)
 8029476:	4293      	cmp	r3, r2
 8029478:	d01f      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	4a2a      	ldr	r2, [pc, #168]	; (8029528 <TIM_Base_SetConfig+0x120>)
 802947e:	4293      	cmp	r3, r2
 8029480:	d01b      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	4a29      	ldr	r2, [pc, #164]	; (802952c <TIM_Base_SetConfig+0x124>)
 8029486:	4293      	cmp	r3, r2
 8029488:	d017      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	4a28      	ldr	r2, [pc, #160]	; (8029530 <TIM_Base_SetConfig+0x128>)
 802948e:	4293      	cmp	r3, r2
 8029490:	d013      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	4a27      	ldr	r2, [pc, #156]	; (8029534 <TIM_Base_SetConfig+0x12c>)
 8029496:	4293      	cmp	r3, r2
 8029498:	d00f      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	4a26      	ldr	r2, [pc, #152]	; (8029538 <TIM_Base_SetConfig+0x130>)
 802949e:	4293      	cmp	r3, r2
 80294a0:	d00b      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	4a25      	ldr	r2, [pc, #148]	; (802953c <TIM_Base_SetConfig+0x134>)
 80294a6:	4293      	cmp	r3, r2
 80294a8:	d007      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	4a24      	ldr	r2, [pc, #144]	; (8029540 <TIM_Base_SetConfig+0x138>)
 80294ae:	4293      	cmp	r3, r2
 80294b0:	d003      	beq.n	80294ba <TIM_Base_SetConfig+0xb2>
 80294b2:	687b      	ldr	r3, [r7, #4]
 80294b4:	4a23      	ldr	r2, [pc, #140]	; (8029544 <TIM_Base_SetConfig+0x13c>)
 80294b6:	4293      	cmp	r3, r2
 80294b8:	d108      	bne.n	80294cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80294ba:	68fb      	ldr	r3, [r7, #12]
 80294bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80294c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80294c2:	683b      	ldr	r3, [r7, #0]
 80294c4:	68db      	ldr	r3, [r3, #12]
 80294c6:	68fa      	ldr	r2, [r7, #12]
 80294c8:	4313      	orrs	r3, r2
 80294ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80294cc:	68fb      	ldr	r3, [r7, #12]
 80294ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80294d2:	683b      	ldr	r3, [r7, #0]
 80294d4:	695b      	ldr	r3, [r3, #20]
 80294d6:	4313      	orrs	r3, r2
 80294d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	68fa      	ldr	r2, [r7, #12]
 80294de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80294e0:	683b      	ldr	r3, [r7, #0]
 80294e2:	689a      	ldr	r2, [r3, #8]
 80294e4:	687b      	ldr	r3, [r7, #4]
 80294e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80294e8:	683b      	ldr	r3, [r7, #0]
 80294ea:	681a      	ldr	r2, [r3, #0]
 80294ec:	687b      	ldr	r3, [r7, #4]
 80294ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	4a0a      	ldr	r2, [pc, #40]	; (802951c <TIM_Base_SetConfig+0x114>)
 80294f4:	4293      	cmp	r3, r2
 80294f6:	d003      	beq.n	8029500 <TIM_Base_SetConfig+0xf8>
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	4a0c      	ldr	r2, [pc, #48]	; (802952c <TIM_Base_SetConfig+0x124>)
 80294fc:	4293      	cmp	r3, r2
 80294fe:	d103      	bne.n	8029508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029500:	683b      	ldr	r3, [r7, #0]
 8029502:	691a      	ldr	r2, [r3, #16]
 8029504:	687b      	ldr	r3, [r7, #4]
 8029506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	2201      	movs	r2, #1
 802950c:	615a      	str	r2, [r3, #20]
}
 802950e:	bf00      	nop
 8029510:	3714      	adds	r7, #20
 8029512:	46bd      	mov	sp, r7
 8029514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029518:	4770      	bx	lr
 802951a:	bf00      	nop
 802951c:	40010000 	.word	0x40010000
 8029520:	40000400 	.word	0x40000400
 8029524:	40000800 	.word	0x40000800
 8029528:	40000c00 	.word	0x40000c00
 802952c:	40010400 	.word	0x40010400
 8029530:	40014000 	.word	0x40014000
 8029534:	40014400 	.word	0x40014400
 8029538:	40014800 	.word	0x40014800
 802953c:	40001800 	.word	0x40001800
 8029540:	40001c00 	.word	0x40001c00
 8029544:	40002000 	.word	0x40002000

08029548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029548:	b480      	push	{r7}
 802954a:	b087      	sub	sp, #28
 802954c:	af00      	add	r7, sp, #0
 802954e:	6078      	str	r0, [r7, #4]
 8029550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029552:	687b      	ldr	r3, [r7, #4]
 8029554:	6a1b      	ldr	r3, [r3, #32]
 8029556:	f023 0201 	bic.w	r2, r3, #1
 802955a:	687b      	ldr	r3, [r7, #4]
 802955c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802955e:	687b      	ldr	r3, [r7, #4]
 8029560:	6a1b      	ldr	r3, [r3, #32]
 8029562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029564:	687b      	ldr	r3, [r7, #4]
 8029566:	685b      	ldr	r3, [r3, #4]
 8029568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	699b      	ldr	r3, [r3, #24]
 802956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029570:	68fb      	ldr	r3, [r7, #12]
 8029572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029578:	68fb      	ldr	r3, [r7, #12]
 802957a:	f023 0303 	bic.w	r3, r3, #3
 802957e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029580:	683b      	ldr	r3, [r7, #0]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	68fa      	ldr	r2, [r7, #12]
 8029586:	4313      	orrs	r3, r2
 8029588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802958a:	697b      	ldr	r3, [r7, #20]
 802958c:	f023 0302 	bic.w	r3, r3, #2
 8029590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029592:	683b      	ldr	r3, [r7, #0]
 8029594:	689b      	ldr	r3, [r3, #8]
 8029596:	697a      	ldr	r2, [r7, #20]
 8029598:	4313      	orrs	r3, r2
 802959a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	4a20      	ldr	r2, [pc, #128]	; (8029620 <TIM_OC1_SetConfig+0xd8>)
 80295a0:	4293      	cmp	r3, r2
 80295a2:	d003      	beq.n	80295ac <TIM_OC1_SetConfig+0x64>
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	4a1f      	ldr	r2, [pc, #124]	; (8029624 <TIM_OC1_SetConfig+0xdc>)
 80295a8:	4293      	cmp	r3, r2
 80295aa:	d10c      	bne.n	80295c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80295ac:	697b      	ldr	r3, [r7, #20]
 80295ae:	f023 0308 	bic.w	r3, r3, #8
 80295b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80295b4:	683b      	ldr	r3, [r7, #0]
 80295b6:	68db      	ldr	r3, [r3, #12]
 80295b8:	697a      	ldr	r2, [r7, #20]
 80295ba:	4313      	orrs	r3, r2
 80295bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80295be:	697b      	ldr	r3, [r7, #20]
 80295c0:	f023 0304 	bic.w	r3, r3, #4
 80295c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	4a15      	ldr	r2, [pc, #84]	; (8029620 <TIM_OC1_SetConfig+0xd8>)
 80295ca:	4293      	cmp	r3, r2
 80295cc:	d003      	beq.n	80295d6 <TIM_OC1_SetConfig+0x8e>
 80295ce:	687b      	ldr	r3, [r7, #4]
 80295d0:	4a14      	ldr	r2, [pc, #80]	; (8029624 <TIM_OC1_SetConfig+0xdc>)
 80295d2:	4293      	cmp	r3, r2
 80295d4:	d111      	bne.n	80295fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80295d6:	693b      	ldr	r3, [r7, #16]
 80295d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80295dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80295de:	693b      	ldr	r3, [r7, #16]
 80295e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80295e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80295e6:	683b      	ldr	r3, [r7, #0]
 80295e8:	695b      	ldr	r3, [r3, #20]
 80295ea:	693a      	ldr	r2, [r7, #16]
 80295ec:	4313      	orrs	r3, r2
 80295ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80295f0:	683b      	ldr	r3, [r7, #0]
 80295f2:	699b      	ldr	r3, [r3, #24]
 80295f4:	693a      	ldr	r2, [r7, #16]
 80295f6:	4313      	orrs	r3, r2
 80295f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	693a      	ldr	r2, [r7, #16]
 80295fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	68fa      	ldr	r2, [r7, #12]
 8029604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029606:	683b      	ldr	r3, [r7, #0]
 8029608:	685a      	ldr	r2, [r3, #4]
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802960e:	687b      	ldr	r3, [r7, #4]
 8029610:	697a      	ldr	r2, [r7, #20]
 8029612:	621a      	str	r2, [r3, #32]
}
 8029614:	bf00      	nop
 8029616:	371c      	adds	r7, #28
 8029618:	46bd      	mov	sp, r7
 802961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802961e:	4770      	bx	lr
 8029620:	40010000 	.word	0x40010000
 8029624:	40010400 	.word	0x40010400

08029628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029628:	b480      	push	{r7}
 802962a:	b087      	sub	sp, #28
 802962c:	af00      	add	r7, sp, #0
 802962e:	6078      	str	r0, [r7, #4]
 8029630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	6a1b      	ldr	r3, [r3, #32]
 8029636:	f023 0210 	bic.w	r2, r3, #16
 802963a:	687b      	ldr	r3, [r7, #4]
 802963c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	6a1b      	ldr	r3, [r3, #32]
 8029642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	685b      	ldr	r3, [r3, #4]
 8029648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802964a:	687b      	ldr	r3, [r7, #4]
 802964c:	699b      	ldr	r3, [r3, #24]
 802964e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029650:	68fb      	ldr	r3, [r7, #12]
 8029652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029658:	68fb      	ldr	r3, [r7, #12]
 802965a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802965e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029660:	683b      	ldr	r3, [r7, #0]
 8029662:	681b      	ldr	r3, [r3, #0]
 8029664:	021b      	lsls	r3, r3, #8
 8029666:	68fa      	ldr	r2, [r7, #12]
 8029668:	4313      	orrs	r3, r2
 802966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802966c:	697b      	ldr	r3, [r7, #20]
 802966e:	f023 0320 	bic.w	r3, r3, #32
 8029672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029674:	683b      	ldr	r3, [r7, #0]
 8029676:	689b      	ldr	r3, [r3, #8]
 8029678:	011b      	lsls	r3, r3, #4
 802967a:	697a      	ldr	r2, [r7, #20]
 802967c:	4313      	orrs	r3, r2
 802967e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029680:	687b      	ldr	r3, [r7, #4]
 8029682:	4a22      	ldr	r2, [pc, #136]	; (802970c <TIM_OC2_SetConfig+0xe4>)
 8029684:	4293      	cmp	r3, r2
 8029686:	d003      	beq.n	8029690 <TIM_OC2_SetConfig+0x68>
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	4a21      	ldr	r2, [pc, #132]	; (8029710 <TIM_OC2_SetConfig+0xe8>)
 802968c:	4293      	cmp	r3, r2
 802968e:	d10d      	bne.n	80296ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029690:	697b      	ldr	r3, [r7, #20]
 8029692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029698:	683b      	ldr	r3, [r7, #0]
 802969a:	68db      	ldr	r3, [r3, #12]
 802969c:	011b      	lsls	r3, r3, #4
 802969e:	697a      	ldr	r2, [r7, #20]
 80296a0:	4313      	orrs	r3, r2
 80296a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80296a4:	697b      	ldr	r3, [r7, #20]
 80296a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80296aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80296ac:	687b      	ldr	r3, [r7, #4]
 80296ae:	4a17      	ldr	r2, [pc, #92]	; (802970c <TIM_OC2_SetConfig+0xe4>)
 80296b0:	4293      	cmp	r3, r2
 80296b2:	d003      	beq.n	80296bc <TIM_OC2_SetConfig+0x94>
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	4a16      	ldr	r2, [pc, #88]	; (8029710 <TIM_OC2_SetConfig+0xe8>)
 80296b8:	4293      	cmp	r3, r2
 80296ba:	d113      	bne.n	80296e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80296bc:	693b      	ldr	r3, [r7, #16]
 80296be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80296c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80296c4:	693b      	ldr	r3, [r7, #16]
 80296c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80296ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80296cc:	683b      	ldr	r3, [r7, #0]
 80296ce:	695b      	ldr	r3, [r3, #20]
 80296d0:	009b      	lsls	r3, r3, #2
 80296d2:	693a      	ldr	r2, [r7, #16]
 80296d4:	4313      	orrs	r3, r2
 80296d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80296d8:	683b      	ldr	r3, [r7, #0]
 80296da:	699b      	ldr	r3, [r3, #24]
 80296dc:	009b      	lsls	r3, r3, #2
 80296de:	693a      	ldr	r2, [r7, #16]
 80296e0:	4313      	orrs	r3, r2
 80296e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	693a      	ldr	r2, [r7, #16]
 80296e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	68fa      	ldr	r2, [r7, #12]
 80296ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80296f0:	683b      	ldr	r3, [r7, #0]
 80296f2:	685a      	ldr	r2, [r3, #4]
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80296f8:	687b      	ldr	r3, [r7, #4]
 80296fa:	697a      	ldr	r2, [r7, #20]
 80296fc:	621a      	str	r2, [r3, #32]
}
 80296fe:	bf00      	nop
 8029700:	371c      	adds	r7, #28
 8029702:	46bd      	mov	sp, r7
 8029704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029708:	4770      	bx	lr
 802970a:	bf00      	nop
 802970c:	40010000 	.word	0x40010000
 8029710:	40010400 	.word	0x40010400

08029714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029714:	b480      	push	{r7}
 8029716:	b087      	sub	sp, #28
 8029718:	af00      	add	r7, sp, #0
 802971a:	6078      	str	r0, [r7, #4]
 802971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	6a1b      	ldr	r3, [r3, #32]
 8029722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029726:	687b      	ldr	r3, [r7, #4]
 8029728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802972a:	687b      	ldr	r3, [r7, #4]
 802972c:	6a1b      	ldr	r3, [r3, #32]
 802972e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029730:	687b      	ldr	r3, [r7, #4]
 8029732:	685b      	ldr	r3, [r3, #4]
 8029734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	69db      	ldr	r3, [r3, #28]
 802973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802973c:	68fb      	ldr	r3, [r7, #12]
 802973e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029744:	68fb      	ldr	r3, [r7, #12]
 8029746:	f023 0303 	bic.w	r3, r3, #3
 802974a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802974c:	683b      	ldr	r3, [r7, #0]
 802974e:	681b      	ldr	r3, [r3, #0]
 8029750:	68fa      	ldr	r2, [r7, #12]
 8029752:	4313      	orrs	r3, r2
 8029754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029756:	697b      	ldr	r3, [r7, #20]
 8029758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802975c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802975e:	683b      	ldr	r3, [r7, #0]
 8029760:	689b      	ldr	r3, [r3, #8]
 8029762:	021b      	lsls	r3, r3, #8
 8029764:	697a      	ldr	r2, [r7, #20]
 8029766:	4313      	orrs	r3, r2
 8029768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	4a21      	ldr	r2, [pc, #132]	; (80297f4 <TIM_OC3_SetConfig+0xe0>)
 802976e:	4293      	cmp	r3, r2
 8029770:	d003      	beq.n	802977a <TIM_OC3_SetConfig+0x66>
 8029772:	687b      	ldr	r3, [r7, #4]
 8029774:	4a20      	ldr	r2, [pc, #128]	; (80297f8 <TIM_OC3_SetConfig+0xe4>)
 8029776:	4293      	cmp	r3, r2
 8029778:	d10d      	bne.n	8029796 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802977a:	697b      	ldr	r3, [r7, #20]
 802977c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029782:	683b      	ldr	r3, [r7, #0]
 8029784:	68db      	ldr	r3, [r3, #12]
 8029786:	021b      	lsls	r3, r3, #8
 8029788:	697a      	ldr	r2, [r7, #20]
 802978a:	4313      	orrs	r3, r2
 802978c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802978e:	697b      	ldr	r3, [r7, #20]
 8029790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	4a16      	ldr	r2, [pc, #88]	; (80297f4 <TIM_OC3_SetConfig+0xe0>)
 802979a:	4293      	cmp	r3, r2
 802979c:	d003      	beq.n	80297a6 <TIM_OC3_SetConfig+0x92>
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	4a15      	ldr	r2, [pc, #84]	; (80297f8 <TIM_OC3_SetConfig+0xe4>)
 80297a2:	4293      	cmp	r3, r2
 80297a4:	d113      	bne.n	80297ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80297a6:	693b      	ldr	r3, [r7, #16]
 80297a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80297ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80297ae:	693b      	ldr	r3, [r7, #16]
 80297b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80297b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80297b6:	683b      	ldr	r3, [r7, #0]
 80297b8:	695b      	ldr	r3, [r3, #20]
 80297ba:	011b      	lsls	r3, r3, #4
 80297bc:	693a      	ldr	r2, [r7, #16]
 80297be:	4313      	orrs	r3, r2
 80297c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80297c2:	683b      	ldr	r3, [r7, #0]
 80297c4:	699b      	ldr	r3, [r3, #24]
 80297c6:	011b      	lsls	r3, r3, #4
 80297c8:	693a      	ldr	r2, [r7, #16]
 80297ca:	4313      	orrs	r3, r2
 80297cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	693a      	ldr	r2, [r7, #16]
 80297d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	68fa      	ldr	r2, [r7, #12]
 80297d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80297da:	683b      	ldr	r3, [r7, #0]
 80297dc:	685a      	ldr	r2, [r3, #4]
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	697a      	ldr	r2, [r7, #20]
 80297e6:	621a      	str	r2, [r3, #32]
}
 80297e8:	bf00      	nop
 80297ea:	371c      	adds	r7, #28
 80297ec:	46bd      	mov	sp, r7
 80297ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297f2:	4770      	bx	lr
 80297f4:	40010000 	.word	0x40010000
 80297f8:	40010400 	.word	0x40010400

080297fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80297fc:	b480      	push	{r7}
 80297fe:	b087      	sub	sp, #28
 8029800:	af00      	add	r7, sp, #0
 8029802:	6078      	str	r0, [r7, #4]
 8029804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029806:	687b      	ldr	r3, [r7, #4]
 8029808:	6a1b      	ldr	r3, [r3, #32]
 802980a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029812:	687b      	ldr	r3, [r7, #4]
 8029814:	6a1b      	ldr	r3, [r3, #32]
 8029816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029818:	687b      	ldr	r3, [r7, #4]
 802981a:	685b      	ldr	r3, [r3, #4]
 802981c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	69db      	ldr	r3, [r3, #28]
 8029822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029824:	68fb      	ldr	r3, [r7, #12]
 8029826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802982c:	68fb      	ldr	r3, [r7, #12]
 802982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029834:	683b      	ldr	r3, [r7, #0]
 8029836:	681b      	ldr	r3, [r3, #0]
 8029838:	021b      	lsls	r3, r3, #8
 802983a:	68fa      	ldr	r2, [r7, #12]
 802983c:	4313      	orrs	r3, r2
 802983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029840:	693b      	ldr	r3, [r7, #16]
 8029842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029848:	683b      	ldr	r3, [r7, #0]
 802984a:	689b      	ldr	r3, [r3, #8]
 802984c:	031b      	lsls	r3, r3, #12
 802984e:	693a      	ldr	r2, [r7, #16]
 8029850:	4313      	orrs	r3, r2
 8029852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029854:	687b      	ldr	r3, [r7, #4]
 8029856:	4a12      	ldr	r2, [pc, #72]	; (80298a0 <TIM_OC4_SetConfig+0xa4>)
 8029858:	4293      	cmp	r3, r2
 802985a:	d003      	beq.n	8029864 <TIM_OC4_SetConfig+0x68>
 802985c:	687b      	ldr	r3, [r7, #4]
 802985e:	4a11      	ldr	r2, [pc, #68]	; (80298a4 <TIM_OC4_SetConfig+0xa8>)
 8029860:	4293      	cmp	r3, r2
 8029862:	d109      	bne.n	8029878 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029864:	697b      	ldr	r3, [r7, #20]
 8029866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802986a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802986c:	683b      	ldr	r3, [r7, #0]
 802986e:	695b      	ldr	r3, [r3, #20]
 8029870:	019b      	lsls	r3, r3, #6
 8029872:	697a      	ldr	r2, [r7, #20]
 8029874:	4313      	orrs	r3, r2
 8029876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029878:	687b      	ldr	r3, [r7, #4]
 802987a:	697a      	ldr	r2, [r7, #20]
 802987c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802987e:	687b      	ldr	r3, [r7, #4]
 8029880:	68fa      	ldr	r2, [r7, #12]
 8029882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8029884:	683b      	ldr	r3, [r7, #0]
 8029886:	685a      	ldr	r2, [r3, #4]
 8029888:	687b      	ldr	r3, [r7, #4]
 802988a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802988c:	687b      	ldr	r3, [r7, #4]
 802988e:	693a      	ldr	r2, [r7, #16]
 8029890:	621a      	str	r2, [r3, #32]
}
 8029892:	bf00      	nop
 8029894:	371c      	adds	r7, #28
 8029896:	46bd      	mov	sp, r7
 8029898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802989c:	4770      	bx	lr
 802989e:	bf00      	nop
 80298a0:	40010000 	.word	0x40010000
 80298a4:	40010400 	.word	0x40010400

080298a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80298a8:	b580      	push	{r7, lr}
 80298aa:	b086      	sub	sp, #24
 80298ac:	af00      	add	r7, sp, #0
 80298ae:	6078      	str	r0, [r7, #4]
 80298b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80298b2:	2300      	movs	r3, #0
 80298b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80298b6:	687b      	ldr	r3, [r7, #4]
 80298b8:	681b      	ldr	r3, [r3, #0]
 80298ba:	689b      	ldr	r3, [r3, #8]
 80298bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80298be:	693b      	ldr	r3, [r7, #16]
 80298c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80298c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80298c6:	683b      	ldr	r3, [r7, #0]
 80298c8:	685b      	ldr	r3, [r3, #4]
 80298ca:	693a      	ldr	r2, [r7, #16]
 80298cc:	4313      	orrs	r3, r2
 80298ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80298d0:	693b      	ldr	r3, [r7, #16]
 80298d2:	f023 0307 	bic.w	r3, r3, #7
 80298d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80298d8:	683b      	ldr	r3, [r7, #0]
 80298da:	681b      	ldr	r3, [r3, #0]
 80298dc:	693a      	ldr	r2, [r7, #16]
 80298de:	4313      	orrs	r3, r2
 80298e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	681b      	ldr	r3, [r3, #0]
 80298e6:	693a      	ldr	r2, [r7, #16]
 80298e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80298ea:	683b      	ldr	r3, [r7, #0]
 80298ec:	685b      	ldr	r3, [r3, #4]
 80298ee:	2b70      	cmp	r3, #112	; 0x70
 80298f0:	d01a      	beq.n	8029928 <TIM_SlaveTimer_SetConfig+0x80>
 80298f2:	2b70      	cmp	r3, #112	; 0x70
 80298f4:	d860      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 80298f6:	2b60      	cmp	r3, #96	; 0x60
 80298f8:	d054      	beq.n	80299a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80298fa:	2b60      	cmp	r3, #96	; 0x60
 80298fc:	d85c      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 80298fe:	2b50      	cmp	r3, #80	; 0x50
 8029900:	d046      	beq.n	8029990 <TIM_SlaveTimer_SetConfig+0xe8>
 8029902:	2b50      	cmp	r3, #80	; 0x50
 8029904:	d858      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 8029906:	2b40      	cmp	r3, #64	; 0x40
 8029908:	d019      	beq.n	802993e <TIM_SlaveTimer_SetConfig+0x96>
 802990a:	2b40      	cmp	r3, #64	; 0x40
 802990c:	d854      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 802990e:	2b30      	cmp	r3, #48	; 0x30
 8029910:	d055      	beq.n	80299be <TIM_SlaveTimer_SetConfig+0x116>
 8029912:	2b30      	cmp	r3, #48	; 0x30
 8029914:	d850      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 8029916:	2b20      	cmp	r3, #32
 8029918:	d051      	beq.n	80299be <TIM_SlaveTimer_SetConfig+0x116>
 802991a:	2b20      	cmp	r3, #32
 802991c:	d84c      	bhi.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
 802991e:	2b00      	cmp	r3, #0
 8029920:	d04d      	beq.n	80299be <TIM_SlaveTimer_SetConfig+0x116>
 8029922:	2b10      	cmp	r3, #16
 8029924:	d04b      	beq.n	80299be <TIM_SlaveTimer_SetConfig+0x116>
 8029926:	e047      	b.n	80299b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8029928:	687b      	ldr	r3, [r7, #4]
 802992a:	6818      	ldr	r0, [r3, #0]
 802992c:	683b      	ldr	r3, [r7, #0]
 802992e:	68d9      	ldr	r1, [r3, #12]
 8029930:	683b      	ldr	r3, [r7, #0]
 8029932:	689a      	ldr	r2, [r3, #8]
 8029934:	683b      	ldr	r3, [r7, #0]
 8029936:	691b      	ldr	r3, [r3, #16]
 8029938:	f000 f9ec 	bl	8029d14 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 802993c:	e040      	b.n	80299c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 802993e:	683b      	ldr	r3, [r7, #0]
 8029940:	681b      	ldr	r3, [r3, #0]
 8029942:	2b05      	cmp	r3, #5
 8029944:	d101      	bne.n	802994a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8029946:	2301      	movs	r3, #1
 8029948:	e03b      	b.n	80299c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	6a1b      	ldr	r3, [r3, #32]
 8029950:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8029952:	687b      	ldr	r3, [r7, #4]
 8029954:	681b      	ldr	r3, [r3, #0]
 8029956:	6a1a      	ldr	r2, [r3, #32]
 8029958:	687b      	ldr	r3, [r7, #4]
 802995a:	681b      	ldr	r3, [r3, #0]
 802995c:	f022 0201 	bic.w	r2, r2, #1
 8029960:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8029962:	687b      	ldr	r3, [r7, #4]
 8029964:	681b      	ldr	r3, [r3, #0]
 8029966:	699b      	ldr	r3, [r3, #24]
 8029968:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802996a:	68bb      	ldr	r3, [r7, #8]
 802996c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029970:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8029972:	683b      	ldr	r3, [r7, #0]
 8029974:	691b      	ldr	r3, [r3, #16]
 8029976:	011b      	lsls	r3, r3, #4
 8029978:	68ba      	ldr	r2, [r7, #8]
 802997a:	4313      	orrs	r3, r2
 802997c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	681b      	ldr	r3, [r3, #0]
 8029982:	68ba      	ldr	r2, [r7, #8]
 8029984:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	681b      	ldr	r3, [r3, #0]
 802998a:	68fa      	ldr	r2, [r7, #12]
 802998c:	621a      	str	r2, [r3, #32]
      break;
 802998e:	e017      	b.n	80299c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029990:	687b      	ldr	r3, [r7, #4]
 8029992:	6818      	ldr	r0, [r3, #0]
 8029994:	683b      	ldr	r3, [r7, #0]
 8029996:	6899      	ldr	r1, [r3, #8]
 8029998:	683b      	ldr	r3, [r7, #0]
 802999a:	691b      	ldr	r3, [r3, #16]
 802999c:	461a      	mov	r2, r3
 802999e:	f000 f889 	bl	8029ab4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80299a2:	e00d      	b.n	80299c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80299a4:	687b      	ldr	r3, [r7, #4]
 80299a6:	6818      	ldr	r0, [r3, #0]
 80299a8:	683b      	ldr	r3, [r7, #0]
 80299aa:	6899      	ldr	r1, [r3, #8]
 80299ac:	683b      	ldr	r3, [r7, #0]
 80299ae:	691b      	ldr	r3, [r3, #16]
 80299b0:	461a      	mov	r2, r3
 80299b2:	f000 f8eb 	bl	8029b8c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80299b6:	e003      	b.n	80299c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80299b8:	2301      	movs	r3, #1
 80299ba:	75fb      	strb	r3, [r7, #23]
      break;
 80299bc:	e000      	b.n	80299c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80299be:	bf00      	nop
  }

  return status;
 80299c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80299c2:	4618      	mov	r0, r3
 80299c4:	3718      	adds	r7, #24
 80299c6:	46bd      	mov	sp, r7
 80299c8:	bd80      	pop	{r7, pc}
	...

080299cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80299cc:	b480      	push	{r7}
 80299ce:	b087      	sub	sp, #28
 80299d0:	af00      	add	r7, sp, #0
 80299d2:	60f8      	str	r0, [r7, #12]
 80299d4:	60b9      	str	r1, [r7, #8]
 80299d6:	607a      	str	r2, [r7, #4]
 80299d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80299da:	68fb      	ldr	r3, [r7, #12]
 80299dc:	6a1b      	ldr	r3, [r3, #32]
 80299de:	f023 0201 	bic.w	r2, r3, #1
 80299e2:	68fb      	ldr	r3, [r7, #12]
 80299e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80299e6:	68fb      	ldr	r3, [r7, #12]
 80299e8:	699b      	ldr	r3, [r3, #24]
 80299ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80299ec:	68fb      	ldr	r3, [r7, #12]
 80299ee:	6a1b      	ldr	r3, [r3, #32]
 80299f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80299f2:	68fb      	ldr	r3, [r7, #12]
 80299f4:	4a28      	ldr	r2, [pc, #160]	; (8029a98 <TIM_TI1_SetConfig+0xcc>)
 80299f6:	4293      	cmp	r3, r2
 80299f8:	d01b      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 80299fa:	68fb      	ldr	r3, [r7, #12]
 80299fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029a00:	d017      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a02:	68fb      	ldr	r3, [r7, #12]
 8029a04:	4a25      	ldr	r2, [pc, #148]	; (8029a9c <TIM_TI1_SetConfig+0xd0>)
 8029a06:	4293      	cmp	r3, r2
 8029a08:	d013      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a0a:	68fb      	ldr	r3, [r7, #12]
 8029a0c:	4a24      	ldr	r2, [pc, #144]	; (8029aa0 <TIM_TI1_SetConfig+0xd4>)
 8029a0e:	4293      	cmp	r3, r2
 8029a10:	d00f      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a12:	68fb      	ldr	r3, [r7, #12]
 8029a14:	4a23      	ldr	r2, [pc, #140]	; (8029aa4 <TIM_TI1_SetConfig+0xd8>)
 8029a16:	4293      	cmp	r3, r2
 8029a18:	d00b      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a1a:	68fb      	ldr	r3, [r7, #12]
 8029a1c:	4a22      	ldr	r2, [pc, #136]	; (8029aa8 <TIM_TI1_SetConfig+0xdc>)
 8029a1e:	4293      	cmp	r3, r2
 8029a20:	d007      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a22:	68fb      	ldr	r3, [r7, #12]
 8029a24:	4a21      	ldr	r2, [pc, #132]	; (8029aac <TIM_TI1_SetConfig+0xe0>)
 8029a26:	4293      	cmp	r3, r2
 8029a28:	d003      	beq.n	8029a32 <TIM_TI1_SetConfig+0x66>
 8029a2a:	68fb      	ldr	r3, [r7, #12]
 8029a2c:	4a20      	ldr	r2, [pc, #128]	; (8029ab0 <TIM_TI1_SetConfig+0xe4>)
 8029a2e:	4293      	cmp	r3, r2
 8029a30:	d101      	bne.n	8029a36 <TIM_TI1_SetConfig+0x6a>
 8029a32:	2301      	movs	r3, #1
 8029a34:	e000      	b.n	8029a38 <TIM_TI1_SetConfig+0x6c>
 8029a36:	2300      	movs	r3, #0
 8029a38:	2b00      	cmp	r3, #0
 8029a3a:	d008      	beq.n	8029a4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8029a3c:	697b      	ldr	r3, [r7, #20]
 8029a3e:	f023 0303 	bic.w	r3, r3, #3
 8029a42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8029a44:	697a      	ldr	r2, [r7, #20]
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	4313      	orrs	r3, r2
 8029a4a:	617b      	str	r3, [r7, #20]
 8029a4c:	e003      	b.n	8029a56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8029a4e:	697b      	ldr	r3, [r7, #20]
 8029a50:	f043 0301 	orr.w	r3, r3, #1
 8029a54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029a56:	697b      	ldr	r3, [r7, #20]
 8029a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8029a5e:	683b      	ldr	r3, [r7, #0]
 8029a60:	011b      	lsls	r3, r3, #4
 8029a62:	b2db      	uxtb	r3, r3
 8029a64:	697a      	ldr	r2, [r7, #20]
 8029a66:	4313      	orrs	r3, r2
 8029a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029a6a:	693b      	ldr	r3, [r7, #16]
 8029a6c:	f023 030a 	bic.w	r3, r3, #10
 8029a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8029a72:	68bb      	ldr	r3, [r7, #8]
 8029a74:	f003 030a 	and.w	r3, r3, #10
 8029a78:	693a      	ldr	r2, [r7, #16]
 8029a7a:	4313      	orrs	r3, r2
 8029a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	697a      	ldr	r2, [r7, #20]
 8029a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029a84:	68fb      	ldr	r3, [r7, #12]
 8029a86:	693a      	ldr	r2, [r7, #16]
 8029a88:	621a      	str	r2, [r3, #32]
}
 8029a8a:	bf00      	nop
 8029a8c:	371c      	adds	r7, #28
 8029a8e:	46bd      	mov	sp, r7
 8029a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a94:	4770      	bx	lr
 8029a96:	bf00      	nop
 8029a98:	40010000 	.word	0x40010000
 8029a9c:	40000400 	.word	0x40000400
 8029aa0:	40000800 	.word	0x40000800
 8029aa4:	40000c00 	.word	0x40000c00
 8029aa8:	40010400 	.word	0x40010400
 8029aac:	40014000 	.word	0x40014000
 8029ab0:	40001800 	.word	0x40001800

08029ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029ab4:	b480      	push	{r7}
 8029ab6:	b087      	sub	sp, #28
 8029ab8:	af00      	add	r7, sp, #0
 8029aba:	60f8      	str	r0, [r7, #12]
 8029abc:	60b9      	str	r1, [r7, #8]
 8029abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029ac0:	68fb      	ldr	r3, [r7, #12]
 8029ac2:	6a1b      	ldr	r3, [r3, #32]
 8029ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029ac6:	68fb      	ldr	r3, [r7, #12]
 8029ac8:	6a1b      	ldr	r3, [r3, #32]
 8029aca:	f023 0201 	bic.w	r2, r3, #1
 8029ace:	68fb      	ldr	r3, [r7, #12]
 8029ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029ad2:	68fb      	ldr	r3, [r7, #12]
 8029ad4:	699b      	ldr	r3, [r3, #24]
 8029ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029ad8:	693b      	ldr	r3, [r7, #16]
 8029ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029ae0:	687b      	ldr	r3, [r7, #4]
 8029ae2:	011b      	lsls	r3, r3, #4
 8029ae4:	693a      	ldr	r2, [r7, #16]
 8029ae6:	4313      	orrs	r3, r2
 8029ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029aea:	697b      	ldr	r3, [r7, #20]
 8029aec:	f023 030a 	bic.w	r3, r3, #10
 8029af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029af2:	697a      	ldr	r2, [r7, #20]
 8029af4:	68bb      	ldr	r3, [r7, #8]
 8029af6:	4313      	orrs	r3, r2
 8029af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029afa:	68fb      	ldr	r3, [r7, #12]
 8029afc:	693a      	ldr	r2, [r7, #16]
 8029afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029b00:	68fb      	ldr	r3, [r7, #12]
 8029b02:	697a      	ldr	r2, [r7, #20]
 8029b04:	621a      	str	r2, [r3, #32]
}
 8029b06:	bf00      	nop
 8029b08:	371c      	adds	r7, #28
 8029b0a:	46bd      	mov	sp, r7
 8029b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b10:	4770      	bx	lr

08029b12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029b12:	b480      	push	{r7}
 8029b14:	b087      	sub	sp, #28
 8029b16:	af00      	add	r7, sp, #0
 8029b18:	60f8      	str	r0, [r7, #12]
 8029b1a:	60b9      	str	r1, [r7, #8]
 8029b1c:	607a      	str	r2, [r7, #4]
 8029b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029b20:	68fb      	ldr	r3, [r7, #12]
 8029b22:	6a1b      	ldr	r3, [r3, #32]
 8029b24:	f023 0210 	bic.w	r2, r3, #16
 8029b28:	68fb      	ldr	r3, [r7, #12]
 8029b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029b2c:	68fb      	ldr	r3, [r7, #12]
 8029b2e:	699b      	ldr	r3, [r3, #24]
 8029b30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	6a1b      	ldr	r3, [r3, #32]
 8029b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8029b38:	697b      	ldr	r3, [r7, #20]
 8029b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029b3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8029b40:	687b      	ldr	r3, [r7, #4]
 8029b42:	021b      	lsls	r3, r3, #8
 8029b44:	697a      	ldr	r2, [r7, #20]
 8029b46:	4313      	orrs	r3, r2
 8029b48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029b4a:	697b      	ldr	r3, [r7, #20]
 8029b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8029b52:	683b      	ldr	r3, [r7, #0]
 8029b54:	031b      	lsls	r3, r3, #12
 8029b56:	b29b      	uxth	r3, r3
 8029b58:	697a      	ldr	r2, [r7, #20]
 8029b5a:	4313      	orrs	r3, r2
 8029b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029b5e:	693b      	ldr	r3, [r7, #16]
 8029b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029b64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8029b66:	68bb      	ldr	r3, [r7, #8]
 8029b68:	011b      	lsls	r3, r3, #4
 8029b6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8029b6e:	693a      	ldr	r2, [r7, #16]
 8029b70:	4313      	orrs	r3, r2
 8029b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029b74:	68fb      	ldr	r3, [r7, #12]
 8029b76:	697a      	ldr	r2, [r7, #20]
 8029b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029b7a:	68fb      	ldr	r3, [r7, #12]
 8029b7c:	693a      	ldr	r2, [r7, #16]
 8029b7e:	621a      	str	r2, [r3, #32]
}
 8029b80:	bf00      	nop
 8029b82:	371c      	adds	r7, #28
 8029b84:	46bd      	mov	sp, r7
 8029b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b8a:	4770      	bx	lr

08029b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029b8c:	b480      	push	{r7}
 8029b8e:	b087      	sub	sp, #28
 8029b90:	af00      	add	r7, sp, #0
 8029b92:	60f8      	str	r0, [r7, #12]
 8029b94:	60b9      	str	r1, [r7, #8]
 8029b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029b98:	68fb      	ldr	r3, [r7, #12]
 8029b9a:	6a1b      	ldr	r3, [r3, #32]
 8029b9c:	f023 0210 	bic.w	r2, r3, #16
 8029ba0:	68fb      	ldr	r3, [r7, #12]
 8029ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029ba4:	68fb      	ldr	r3, [r7, #12]
 8029ba6:	699b      	ldr	r3, [r3, #24]
 8029ba8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029baa:	68fb      	ldr	r3, [r7, #12]
 8029bac:	6a1b      	ldr	r3, [r3, #32]
 8029bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029bb0:	697b      	ldr	r3, [r7, #20]
 8029bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029bb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029bb8:	687b      	ldr	r3, [r7, #4]
 8029bba:	031b      	lsls	r3, r3, #12
 8029bbc:	697a      	ldr	r2, [r7, #20]
 8029bbe:	4313      	orrs	r3, r2
 8029bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029bc2:	693b      	ldr	r3, [r7, #16]
 8029bc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029bca:	68bb      	ldr	r3, [r7, #8]
 8029bcc:	011b      	lsls	r3, r3, #4
 8029bce:	693a      	ldr	r2, [r7, #16]
 8029bd0:	4313      	orrs	r3, r2
 8029bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029bd4:	68fb      	ldr	r3, [r7, #12]
 8029bd6:	697a      	ldr	r2, [r7, #20]
 8029bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029bda:	68fb      	ldr	r3, [r7, #12]
 8029bdc:	693a      	ldr	r2, [r7, #16]
 8029bde:	621a      	str	r2, [r3, #32]
}
 8029be0:	bf00      	nop
 8029be2:	371c      	adds	r7, #28
 8029be4:	46bd      	mov	sp, r7
 8029be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bea:	4770      	bx	lr

08029bec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029bec:	b480      	push	{r7}
 8029bee:	b087      	sub	sp, #28
 8029bf0:	af00      	add	r7, sp, #0
 8029bf2:	60f8      	str	r0, [r7, #12]
 8029bf4:	60b9      	str	r1, [r7, #8]
 8029bf6:	607a      	str	r2, [r7, #4]
 8029bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029bfa:	68fb      	ldr	r3, [r7, #12]
 8029bfc:	6a1b      	ldr	r3, [r3, #32]
 8029bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029c02:	68fb      	ldr	r3, [r7, #12]
 8029c04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8029c06:	68fb      	ldr	r3, [r7, #12]
 8029c08:	69db      	ldr	r3, [r3, #28]
 8029c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029c0c:	68fb      	ldr	r3, [r7, #12]
 8029c0e:	6a1b      	ldr	r3, [r3, #32]
 8029c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8029c12:	697b      	ldr	r3, [r7, #20]
 8029c14:	f023 0303 	bic.w	r3, r3, #3
 8029c18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8029c1a:	697a      	ldr	r2, [r7, #20]
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	4313      	orrs	r3, r2
 8029c20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8029c22:	697b      	ldr	r3, [r7, #20]
 8029c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029c28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8029c2a:	683b      	ldr	r3, [r7, #0]
 8029c2c:	011b      	lsls	r3, r3, #4
 8029c2e:	b2db      	uxtb	r3, r3
 8029c30:	697a      	ldr	r2, [r7, #20]
 8029c32:	4313      	orrs	r3, r2
 8029c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8029c36:	693b      	ldr	r3, [r7, #16]
 8029c38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8029c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8029c3e:	68bb      	ldr	r3, [r7, #8]
 8029c40:	021b      	lsls	r3, r3, #8
 8029c42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8029c46:	693a      	ldr	r2, [r7, #16]
 8029c48:	4313      	orrs	r3, r2
 8029c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8029c4c:	68fb      	ldr	r3, [r7, #12]
 8029c4e:	697a      	ldr	r2, [r7, #20]
 8029c50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8029c52:	68fb      	ldr	r3, [r7, #12]
 8029c54:	693a      	ldr	r2, [r7, #16]
 8029c56:	621a      	str	r2, [r3, #32]
}
 8029c58:	bf00      	nop
 8029c5a:	371c      	adds	r7, #28
 8029c5c:	46bd      	mov	sp, r7
 8029c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c62:	4770      	bx	lr

08029c64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8029c64:	b480      	push	{r7}
 8029c66:	b087      	sub	sp, #28
 8029c68:	af00      	add	r7, sp, #0
 8029c6a:	60f8      	str	r0, [r7, #12]
 8029c6c:	60b9      	str	r1, [r7, #8]
 8029c6e:	607a      	str	r2, [r7, #4]
 8029c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029c72:	68fb      	ldr	r3, [r7, #12]
 8029c74:	6a1b      	ldr	r3, [r3, #32]
 8029c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029c7a:	68fb      	ldr	r3, [r7, #12]
 8029c7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8029c7e:	68fb      	ldr	r3, [r7, #12]
 8029c80:	69db      	ldr	r3, [r3, #28]
 8029c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029c84:	68fb      	ldr	r3, [r7, #12]
 8029c86:	6a1b      	ldr	r3, [r3, #32]
 8029c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8029c8a:	697b      	ldr	r3, [r7, #20]
 8029c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029c90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	021b      	lsls	r3, r3, #8
 8029c96:	697a      	ldr	r2, [r7, #20]
 8029c98:	4313      	orrs	r3, r2
 8029c9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8029c9c:	697b      	ldr	r3, [r7, #20]
 8029c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029ca2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8029ca4:	683b      	ldr	r3, [r7, #0]
 8029ca6:	031b      	lsls	r3, r3, #12
 8029ca8:	b29b      	uxth	r3, r3
 8029caa:	697a      	ldr	r2, [r7, #20]
 8029cac:	4313      	orrs	r3, r2
 8029cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8029cb0:	693b      	ldr	r3, [r7, #16]
 8029cb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8029cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8029cb8:	68bb      	ldr	r3, [r7, #8]
 8029cba:	031b      	lsls	r3, r3, #12
 8029cbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8029cc0:	693a      	ldr	r2, [r7, #16]
 8029cc2:	4313      	orrs	r3, r2
 8029cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8029cc6:	68fb      	ldr	r3, [r7, #12]
 8029cc8:	697a      	ldr	r2, [r7, #20]
 8029cca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8029ccc:	68fb      	ldr	r3, [r7, #12]
 8029cce:	693a      	ldr	r2, [r7, #16]
 8029cd0:	621a      	str	r2, [r3, #32]
}
 8029cd2:	bf00      	nop
 8029cd4:	371c      	adds	r7, #28
 8029cd6:	46bd      	mov	sp, r7
 8029cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cdc:	4770      	bx	lr

08029cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029cde:	b480      	push	{r7}
 8029ce0:	b085      	sub	sp, #20
 8029ce2:	af00      	add	r7, sp, #0
 8029ce4:	6078      	str	r0, [r7, #4]
 8029ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029ce8:	687b      	ldr	r3, [r7, #4]
 8029cea:	689b      	ldr	r3, [r3, #8]
 8029cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029cee:	68fb      	ldr	r3, [r7, #12]
 8029cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029cf6:	683a      	ldr	r2, [r7, #0]
 8029cf8:	68fb      	ldr	r3, [r7, #12]
 8029cfa:	4313      	orrs	r3, r2
 8029cfc:	f043 0307 	orr.w	r3, r3, #7
 8029d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	68fa      	ldr	r2, [r7, #12]
 8029d06:	609a      	str	r2, [r3, #8]
}
 8029d08:	bf00      	nop
 8029d0a:	3714      	adds	r7, #20
 8029d0c:	46bd      	mov	sp, r7
 8029d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d12:	4770      	bx	lr

08029d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029d14:	b480      	push	{r7}
 8029d16:	b087      	sub	sp, #28
 8029d18:	af00      	add	r7, sp, #0
 8029d1a:	60f8      	str	r0, [r7, #12]
 8029d1c:	60b9      	str	r1, [r7, #8]
 8029d1e:	607a      	str	r2, [r7, #4]
 8029d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029d22:	68fb      	ldr	r3, [r7, #12]
 8029d24:	689b      	ldr	r3, [r3, #8]
 8029d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029d28:	697b      	ldr	r3, [r7, #20]
 8029d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029d30:	683b      	ldr	r3, [r7, #0]
 8029d32:	021a      	lsls	r2, r3, #8
 8029d34:	687b      	ldr	r3, [r7, #4]
 8029d36:	431a      	orrs	r2, r3
 8029d38:	68bb      	ldr	r3, [r7, #8]
 8029d3a:	4313      	orrs	r3, r2
 8029d3c:	697a      	ldr	r2, [r7, #20]
 8029d3e:	4313      	orrs	r3, r2
 8029d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029d42:	68fb      	ldr	r3, [r7, #12]
 8029d44:	697a      	ldr	r2, [r7, #20]
 8029d46:	609a      	str	r2, [r3, #8]
}
 8029d48:	bf00      	nop
 8029d4a:	371c      	adds	r7, #28
 8029d4c:	46bd      	mov	sp, r7
 8029d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d52:	4770      	bx	lr

08029d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8029d54:	b480      	push	{r7}
 8029d56:	b087      	sub	sp, #28
 8029d58:	af00      	add	r7, sp, #0
 8029d5a:	60f8      	str	r0, [r7, #12]
 8029d5c:	60b9      	str	r1, [r7, #8]
 8029d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8029d60:	68bb      	ldr	r3, [r7, #8]
 8029d62:	f003 031f 	and.w	r3, r3, #31
 8029d66:	2201      	movs	r2, #1
 8029d68:	fa02 f303 	lsl.w	r3, r2, r3
 8029d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8029d6e:	68fb      	ldr	r3, [r7, #12]
 8029d70:	6a1a      	ldr	r2, [r3, #32]
 8029d72:	697b      	ldr	r3, [r7, #20]
 8029d74:	43db      	mvns	r3, r3
 8029d76:	401a      	ands	r2, r3
 8029d78:	68fb      	ldr	r3, [r7, #12]
 8029d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8029d7c:	68fb      	ldr	r3, [r7, #12]
 8029d7e:	6a1a      	ldr	r2, [r3, #32]
 8029d80:	68bb      	ldr	r3, [r7, #8]
 8029d82:	f003 031f 	and.w	r3, r3, #31
 8029d86:	6879      	ldr	r1, [r7, #4]
 8029d88:	fa01 f303 	lsl.w	r3, r1, r3
 8029d8c:	431a      	orrs	r2, r3
 8029d8e:	68fb      	ldr	r3, [r7, #12]
 8029d90:	621a      	str	r2, [r3, #32]
}
 8029d92:	bf00      	nop
 8029d94:	371c      	adds	r7, #28
 8029d96:	46bd      	mov	sp, r7
 8029d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d9c:	4770      	bx	lr
	...

08029da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029da0:	b480      	push	{r7}
 8029da2:	b085      	sub	sp, #20
 8029da4:	af00      	add	r7, sp, #0
 8029da6:	6078      	str	r0, [r7, #4]
 8029da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029daa:	687b      	ldr	r3, [r7, #4]
 8029dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029db0:	2b01      	cmp	r3, #1
 8029db2:	d101      	bne.n	8029db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029db4:	2302      	movs	r3, #2
 8029db6:	e05a      	b.n	8029e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029db8:	687b      	ldr	r3, [r7, #4]
 8029dba:	2201      	movs	r2, #1
 8029dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029dc0:	687b      	ldr	r3, [r7, #4]
 8029dc2:	2202      	movs	r2, #2
 8029dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	681b      	ldr	r3, [r3, #0]
 8029dcc:	685b      	ldr	r3, [r3, #4]
 8029dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029dd0:	687b      	ldr	r3, [r7, #4]
 8029dd2:	681b      	ldr	r3, [r3, #0]
 8029dd4:	689b      	ldr	r3, [r3, #8]
 8029dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029dd8:	68fb      	ldr	r3, [r7, #12]
 8029dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029de0:	683b      	ldr	r3, [r7, #0]
 8029de2:	681b      	ldr	r3, [r3, #0]
 8029de4:	68fa      	ldr	r2, [r7, #12]
 8029de6:	4313      	orrs	r3, r2
 8029de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029dea:	687b      	ldr	r3, [r7, #4]
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	68fa      	ldr	r2, [r7, #12]
 8029df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	681b      	ldr	r3, [r3, #0]
 8029df6:	4a21      	ldr	r2, [pc, #132]	; (8029e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8029df8:	4293      	cmp	r3, r2
 8029dfa:	d022      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	681b      	ldr	r3, [r3, #0]
 8029e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029e04:	d01d      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	681b      	ldr	r3, [r3, #0]
 8029e0a:	4a1d      	ldr	r2, [pc, #116]	; (8029e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8029e0c:	4293      	cmp	r3, r2
 8029e0e:	d018      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e10:	687b      	ldr	r3, [r7, #4]
 8029e12:	681b      	ldr	r3, [r3, #0]
 8029e14:	4a1b      	ldr	r2, [pc, #108]	; (8029e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8029e16:	4293      	cmp	r3, r2
 8029e18:	d013      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e1a:	687b      	ldr	r3, [r7, #4]
 8029e1c:	681b      	ldr	r3, [r3, #0]
 8029e1e:	4a1a      	ldr	r2, [pc, #104]	; (8029e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8029e20:	4293      	cmp	r3, r2
 8029e22:	d00e      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e24:	687b      	ldr	r3, [r7, #4]
 8029e26:	681b      	ldr	r3, [r3, #0]
 8029e28:	4a18      	ldr	r2, [pc, #96]	; (8029e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029e2a:	4293      	cmp	r3, r2
 8029e2c:	d009      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	681b      	ldr	r3, [r3, #0]
 8029e32:	4a17      	ldr	r2, [pc, #92]	; (8029e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8029e34:	4293      	cmp	r3, r2
 8029e36:	d004      	beq.n	8029e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029e38:	687b      	ldr	r3, [r7, #4]
 8029e3a:	681b      	ldr	r3, [r3, #0]
 8029e3c:	4a15      	ldr	r2, [pc, #84]	; (8029e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029e3e:	4293      	cmp	r3, r2
 8029e40:	d10c      	bne.n	8029e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8029e42:	68bb      	ldr	r3, [r7, #8]
 8029e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029e4a:	683b      	ldr	r3, [r7, #0]
 8029e4c:	685b      	ldr	r3, [r3, #4]
 8029e4e:	68ba      	ldr	r2, [r7, #8]
 8029e50:	4313      	orrs	r3, r2
 8029e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029e54:	687b      	ldr	r3, [r7, #4]
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	68ba      	ldr	r2, [r7, #8]
 8029e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029e5c:	687b      	ldr	r3, [r7, #4]
 8029e5e:	2201      	movs	r2, #1
 8029e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	2200      	movs	r2, #0
 8029e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029e6c:	2300      	movs	r3, #0
}
 8029e6e:	4618      	mov	r0, r3
 8029e70:	3714      	adds	r7, #20
 8029e72:	46bd      	mov	sp, r7
 8029e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e78:	4770      	bx	lr
 8029e7a:	bf00      	nop
 8029e7c:	40010000 	.word	0x40010000
 8029e80:	40000400 	.word	0x40000400
 8029e84:	40000800 	.word	0x40000800
 8029e88:	40000c00 	.word	0x40000c00
 8029e8c:	40010400 	.word	0x40010400
 8029e90:	40014000 	.word	0x40014000
 8029e94:	40001800 	.word	0x40001800

08029e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8029e98:	b480      	push	{r7}
 8029e9a:	b085      	sub	sp, #20
 8029e9c:	af00      	add	r7, sp, #0
 8029e9e:	6078      	str	r0, [r7, #4]
 8029ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8029ea2:	2300      	movs	r3, #0
 8029ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8029ea6:	687b      	ldr	r3, [r7, #4]
 8029ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029eac:	2b01      	cmp	r3, #1
 8029eae:	d101      	bne.n	8029eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8029eb0:	2302      	movs	r3, #2
 8029eb2:	e03d      	b.n	8029f30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8029eb4:	687b      	ldr	r3, [r7, #4]
 8029eb6:	2201      	movs	r2, #1
 8029eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8029ebc:	68fb      	ldr	r3, [r7, #12]
 8029ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8029ec2:	683b      	ldr	r3, [r7, #0]
 8029ec4:	68db      	ldr	r3, [r3, #12]
 8029ec6:	4313      	orrs	r3, r2
 8029ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8029eca:	68fb      	ldr	r3, [r7, #12]
 8029ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8029ed0:	683b      	ldr	r3, [r7, #0]
 8029ed2:	689b      	ldr	r3, [r3, #8]
 8029ed4:	4313      	orrs	r3, r2
 8029ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8029ed8:	68fb      	ldr	r3, [r7, #12]
 8029eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8029ede:	683b      	ldr	r3, [r7, #0]
 8029ee0:	685b      	ldr	r3, [r3, #4]
 8029ee2:	4313      	orrs	r3, r2
 8029ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8029ee6:	68fb      	ldr	r3, [r7, #12]
 8029ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8029eec:	683b      	ldr	r3, [r7, #0]
 8029eee:	681b      	ldr	r3, [r3, #0]
 8029ef0:	4313      	orrs	r3, r2
 8029ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8029ef4:	68fb      	ldr	r3, [r7, #12]
 8029ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029efa:	683b      	ldr	r3, [r7, #0]
 8029efc:	691b      	ldr	r3, [r3, #16]
 8029efe:	4313      	orrs	r3, r2
 8029f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8029f02:	68fb      	ldr	r3, [r7, #12]
 8029f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8029f08:	683b      	ldr	r3, [r7, #0]
 8029f0a:	695b      	ldr	r3, [r3, #20]
 8029f0c:	4313      	orrs	r3, r2
 8029f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8029f10:	68fb      	ldr	r3, [r7, #12]
 8029f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8029f16:	683b      	ldr	r3, [r7, #0]
 8029f18:	69db      	ldr	r3, [r3, #28]
 8029f1a:	4313      	orrs	r3, r2
 8029f1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	681b      	ldr	r3, [r3, #0]
 8029f22:	68fa      	ldr	r2, [r7, #12]
 8029f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	2200      	movs	r2, #0
 8029f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029f2e:	2300      	movs	r3, #0
}
 8029f30:	4618      	mov	r0, r3
 8029f32:	3714      	adds	r7, #20
 8029f34:	46bd      	mov	sp, r7
 8029f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f3a:	4770      	bx	lr

08029f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029f3c:	b480      	push	{r7}
 8029f3e:	b083      	sub	sp, #12
 8029f40:	af00      	add	r7, sp, #0
 8029f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029f44:	bf00      	nop
 8029f46:	370c      	adds	r7, #12
 8029f48:	46bd      	mov	sp, r7
 8029f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f4e:	4770      	bx	lr

08029f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029f50:	b480      	push	{r7}
 8029f52:	b083      	sub	sp, #12
 8029f54:	af00      	add	r7, sp, #0
 8029f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029f58:	bf00      	nop
 8029f5a:	370c      	adds	r7, #12
 8029f5c:	46bd      	mov	sp, r7
 8029f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f62:	4770      	bx	lr

08029f64 <__NVIC_SetPriority>:
{
 8029f64:	b480      	push	{r7}
 8029f66:	b083      	sub	sp, #12
 8029f68:	af00      	add	r7, sp, #0
 8029f6a:	4603      	mov	r3, r0
 8029f6c:	6039      	str	r1, [r7, #0]
 8029f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029f74:	2b00      	cmp	r3, #0
 8029f76:	db0a      	blt.n	8029f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029f78:	683b      	ldr	r3, [r7, #0]
 8029f7a:	b2da      	uxtb	r2, r3
 8029f7c:	490c      	ldr	r1, [pc, #48]	; (8029fb0 <__NVIC_SetPriority+0x4c>)
 8029f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029f82:	0112      	lsls	r2, r2, #4
 8029f84:	b2d2      	uxtb	r2, r2
 8029f86:	440b      	add	r3, r1
 8029f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8029f8c:	e00a      	b.n	8029fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8029f8e:	683b      	ldr	r3, [r7, #0]
 8029f90:	b2da      	uxtb	r2, r3
 8029f92:	4908      	ldr	r1, [pc, #32]	; (8029fb4 <__NVIC_SetPriority+0x50>)
 8029f94:	79fb      	ldrb	r3, [r7, #7]
 8029f96:	f003 030f 	and.w	r3, r3, #15
 8029f9a:	3b04      	subs	r3, #4
 8029f9c:	0112      	lsls	r2, r2, #4
 8029f9e:	b2d2      	uxtb	r2, r2
 8029fa0:	440b      	add	r3, r1
 8029fa2:	761a      	strb	r2, [r3, #24]
}
 8029fa4:	bf00      	nop
 8029fa6:	370c      	adds	r7, #12
 8029fa8:	46bd      	mov	sp, r7
 8029faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fae:	4770      	bx	lr
 8029fb0:	e000e100 	.word	0xe000e100
 8029fb4:	e000ed00 	.word	0xe000ed00

08029fb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8029fb8:	b580      	push	{r7, lr}
 8029fba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8029fbc:	4b05      	ldr	r3, [pc, #20]	; (8029fd4 <SysTick_Handler+0x1c>)
 8029fbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8029fc0:	f002 f832 	bl	802c028 <xTaskGetSchedulerState>
 8029fc4:	4603      	mov	r3, r0
 8029fc6:	2b01      	cmp	r3, #1
 8029fc8:	d001      	beq.n	8029fce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8029fca:	f002 fe25 	bl	802cc18 <xPortSysTickHandler>
  }
}
 8029fce:	bf00      	nop
 8029fd0:	bd80      	pop	{r7, pc}
 8029fd2:	bf00      	nop
 8029fd4:	e000e010 	.word	0xe000e010

08029fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8029fd8:	b580      	push	{r7, lr}
 8029fda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8029fdc:	2100      	movs	r1, #0
 8029fde:	f06f 0004 	mvn.w	r0, #4
 8029fe2:	f7ff ffbf 	bl	8029f64 <__NVIC_SetPriority>
#endif
}
 8029fe6:	bf00      	nop
 8029fe8:	bd80      	pop	{r7, pc}
	...

08029fec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8029fec:	b480      	push	{r7}
 8029fee:	b083      	sub	sp, #12
 8029ff0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8029ff2:	f3ef 8305 	mrs	r3, IPSR
 8029ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8029ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8029ffa:	2b00      	cmp	r3, #0
 8029ffc:	d003      	beq.n	802a006 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8029ffe:	f06f 0305 	mvn.w	r3, #5
 802a002:	607b      	str	r3, [r7, #4]
 802a004:	e00c      	b.n	802a020 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 802a006:	4b0a      	ldr	r3, [pc, #40]	; (802a030 <osKernelInitialize+0x44>)
 802a008:	681b      	ldr	r3, [r3, #0]
 802a00a:	2b00      	cmp	r3, #0
 802a00c:	d105      	bne.n	802a01a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802a00e:	4b08      	ldr	r3, [pc, #32]	; (802a030 <osKernelInitialize+0x44>)
 802a010:	2201      	movs	r2, #1
 802a012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 802a014:	2300      	movs	r3, #0
 802a016:	607b      	str	r3, [r7, #4]
 802a018:	e002      	b.n	802a020 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 802a01a:	f04f 33ff 	mov.w	r3, #4294967295
 802a01e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 802a020:	687b      	ldr	r3, [r7, #4]
}
 802a022:	4618      	mov	r0, r3
 802a024:	370c      	adds	r7, #12
 802a026:	46bd      	mov	sp, r7
 802a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a02c:	4770      	bx	lr
 802a02e:	bf00      	nop
 802a030:	20001934 	.word	0x20001934

0802a034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 802a034:	b580      	push	{r7, lr}
 802a036:	b082      	sub	sp, #8
 802a038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802a03a:	f3ef 8305 	mrs	r3, IPSR
 802a03e:	603b      	str	r3, [r7, #0]
  return(result);
 802a040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802a042:	2b00      	cmp	r3, #0
 802a044:	d003      	beq.n	802a04e <osKernelStart+0x1a>
    stat = osErrorISR;
 802a046:	f06f 0305 	mvn.w	r3, #5
 802a04a:	607b      	str	r3, [r7, #4]
 802a04c:	e010      	b.n	802a070 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 802a04e:	4b0b      	ldr	r3, [pc, #44]	; (802a07c <osKernelStart+0x48>)
 802a050:	681b      	ldr	r3, [r3, #0]
 802a052:	2b01      	cmp	r3, #1
 802a054:	d109      	bne.n	802a06a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802a056:	f7ff ffbf 	bl	8029fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 802a05a:	4b08      	ldr	r3, [pc, #32]	; (802a07c <osKernelStart+0x48>)
 802a05c:	2202      	movs	r2, #2
 802a05e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 802a060:	f001 fb08 	bl	802b674 <vTaskStartScheduler>
      stat = osOK;
 802a064:	2300      	movs	r3, #0
 802a066:	607b      	str	r3, [r7, #4]
 802a068:	e002      	b.n	802a070 <osKernelStart+0x3c>
    } else {
      stat = osError;
 802a06a:	f04f 33ff 	mov.w	r3, #4294967295
 802a06e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 802a070:	687b      	ldr	r3, [r7, #4]
}
 802a072:	4618      	mov	r0, r3
 802a074:	3708      	adds	r7, #8
 802a076:	46bd      	mov	sp, r7
 802a078:	bd80      	pop	{r7, pc}
 802a07a:	bf00      	nop
 802a07c:	20001934 	.word	0x20001934

0802a080 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 802a080:	b580      	push	{r7, lr}
 802a082:	b082      	sub	sp, #8
 802a084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802a086:	f3ef 8305 	mrs	r3, IPSR
 802a08a:	603b      	str	r3, [r7, #0]
  return(result);
 802a08c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 802a08e:	2b00      	cmp	r3, #0
 802a090:	d003      	beq.n	802a09a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 802a092:	f001 fc31 	bl	802b8f8 <xTaskGetTickCountFromISR>
 802a096:	6078      	str	r0, [r7, #4]
 802a098:	e002      	b.n	802a0a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 802a09a:	f001 fc1d 	bl	802b8d8 <xTaskGetTickCount>
 802a09e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 802a0a0:	687b      	ldr	r3, [r7, #4]
}
 802a0a2:	4618      	mov	r0, r3
 802a0a4:	3708      	adds	r7, #8
 802a0a6:	46bd      	mov	sp, r7
 802a0a8:	bd80      	pop	{r7, pc}

0802a0aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 802a0aa:	b580      	push	{r7, lr}
 802a0ac:	b08e      	sub	sp, #56	; 0x38
 802a0ae:	af04      	add	r7, sp, #16
 802a0b0:	60f8      	str	r0, [r7, #12]
 802a0b2:	60b9      	str	r1, [r7, #8]
 802a0b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 802a0b6:	2300      	movs	r3, #0
 802a0b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802a0ba:	f3ef 8305 	mrs	r3, IPSR
 802a0be:	617b      	str	r3, [r7, #20]
  return(result);
 802a0c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 802a0c2:	2b00      	cmp	r3, #0
 802a0c4:	d17e      	bne.n	802a1c4 <osThreadNew+0x11a>
 802a0c6:	68fb      	ldr	r3, [r7, #12]
 802a0c8:	2b00      	cmp	r3, #0
 802a0ca:	d07b      	beq.n	802a1c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 802a0cc:	2380      	movs	r3, #128	; 0x80
 802a0ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 802a0d0:	2318      	movs	r3, #24
 802a0d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 802a0d4:	2300      	movs	r3, #0
 802a0d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 802a0d8:	f04f 33ff 	mov.w	r3, #4294967295
 802a0dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 802a0de:	687b      	ldr	r3, [r7, #4]
 802a0e0:	2b00      	cmp	r3, #0
 802a0e2:	d045      	beq.n	802a170 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 802a0e4:	687b      	ldr	r3, [r7, #4]
 802a0e6:	681b      	ldr	r3, [r3, #0]
 802a0e8:	2b00      	cmp	r3, #0
 802a0ea:	d002      	beq.n	802a0f2 <osThreadNew+0x48>
        name = attr->name;
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	681b      	ldr	r3, [r3, #0]
 802a0f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	699b      	ldr	r3, [r3, #24]
 802a0f6:	2b00      	cmp	r3, #0
 802a0f8:	d002      	beq.n	802a100 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 802a0fa:	687b      	ldr	r3, [r7, #4]
 802a0fc:	699b      	ldr	r3, [r3, #24]
 802a0fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 802a100:	69fb      	ldr	r3, [r7, #28]
 802a102:	2b00      	cmp	r3, #0
 802a104:	d008      	beq.n	802a118 <osThreadNew+0x6e>
 802a106:	69fb      	ldr	r3, [r7, #28]
 802a108:	2b38      	cmp	r3, #56	; 0x38
 802a10a:	d805      	bhi.n	802a118 <osThreadNew+0x6e>
 802a10c:	687b      	ldr	r3, [r7, #4]
 802a10e:	685b      	ldr	r3, [r3, #4]
 802a110:	f003 0301 	and.w	r3, r3, #1
 802a114:	2b00      	cmp	r3, #0
 802a116:	d001      	beq.n	802a11c <osThreadNew+0x72>
        return (NULL);
 802a118:	2300      	movs	r3, #0
 802a11a:	e054      	b.n	802a1c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	695b      	ldr	r3, [r3, #20]
 802a120:	2b00      	cmp	r3, #0
 802a122:	d003      	beq.n	802a12c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	695b      	ldr	r3, [r3, #20]
 802a128:	089b      	lsrs	r3, r3, #2
 802a12a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802a12c:	687b      	ldr	r3, [r7, #4]
 802a12e:	689b      	ldr	r3, [r3, #8]
 802a130:	2b00      	cmp	r3, #0
 802a132:	d00e      	beq.n	802a152 <osThreadNew+0xa8>
 802a134:	687b      	ldr	r3, [r7, #4]
 802a136:	68db      	ldr	r3, [r3, #12]
 802a138:	2bcb      	cmp	r3, #203	; 0xcb
 802a13a:	d90a      	bls.n	802a152 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802a13c:	687b      	ldr	r3, [r7, #4]
 802a13e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802a140:	2b00      	cmp	r3, #0
 802a142:	d006      	beq.n	802a152 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802a144:	687b      	ldr	r3, [r7, #4]
 802a146:	695b      	ldr	r3, [r3, #20]
 802a148:	2b00      	cmp	r3, #0
 802a14a:	d002      	beq.n	802a152 <osThreadNew+0xa8>
        mem = 1;
 802a14c:	2301      	movs	r3, #1
 802a14e:	61bb      	str	r3, [r7, #24]
 802a150:	e010      	b.n	802a174 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 802a152:	687b      	ldr	r3, [r7, #4]
 802a154:	689b      	ldr	r3, [r3, #8]
 802a156:	2b00      	cmp	r3, #0
 802a158:	d10c      	bne.n	802a174 <osThreadNew+0xca>
 802a15a:	687b      	ldr	r3, [r7, #4]
 802a15c:	68db      	ldr	r3, [r3, #12]
 802a15e:	2b00      	cmp	r3, #0
 802a160:	d108      	bne.n	802a174 <osThreadNew+0xca>
 802a162:	687b      	ldr	r3, [r7, #4]
 802a164:	691b      	ldr	r3, [r3, #16]
 802a166:	2b00      	cmp	r3, #0
 802a168:	d104      	bne.n	802a174 <osThreadNew+0xca>
          mem = 0;
 802a16a:	2300      	movs	r3, #0
 802a16c:	61bb      	str	r3, [r7, #24]
 802a16e:	e001      	b.n	802a174 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 802a170:	2300      	movs	r3, #0
 802a172:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802a174:	69bb      	ldr	r3, [r7, #24]
 802a176:	2b01      	cmp	r3, #1
 802a178:	d110      	bne.n	802a19c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802a17a:	687b      	ldr	r3, [r7, #4]
 802a17c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 802a17e:	687a      	ldr	r2, [r7, #4]
 802a180:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802a182:	9202      	str	r2, [sp, #8]
 802a184:	9301      	str	r3, [sp, #4]
 802a186:	69fb      	ldr	r3, [r7, #28]
 802a188:	9300      	str	r3, [sp, #0]
 802a18a:	68bb      	ldr	r3, [r7, #8]
 802a18c:	6a3a      	ldr	r2, [r7, #32]
 802a18e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802a190:	68f8      	ldr	r0, [r7, #12]
 802a192:	f000 ffe1 	bl	802b158 <xTaskCreateStatic>
 802a196:	4603      	mov	r3, r0
 802a198:	613b      	str	r3, [r7, #16]
 802a19a:	e013      	b.n	802a1c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 802a19c:	69bb      	ldr	r3, [r7, #24]
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d110      	bne.n	802a1c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 802a1a2:	6a3b      	ldr	r3, [r7, #32]
 802a1a4:	b29a      	uxth	r2, r3
 802a1a6:	f107 0310 	add.w	r3, r7, #16
 802a1aa:	9301      	str	r3, [sp, #4]
 802a1ac:	69fb      	ldr	r3, [r7, #28]
 802a1ae:	9300      	str	r3, [sp, #0]
 802a1b0:	68bb      	ldr	r3, [r7, #8]
 802a1b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802a1b4:	68f8      	ldr	r0, [r7, #12]
 802a1b6:	f001 f82c 	bl	802b212 <xTaskCreate>
 802a1ba:	4603      	mov	r3, r0
 802a1bc:	2b01      	cmp	r3, #1
 802a1be:	d001      	beq.n	802a1c4 <osThreadNew+0x11a>
            hTask = NULL;
 802a1c0:	2300      	movs	r3, #0
 802a1c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 802a1c4:	693b      	ldr	r3, [r7, #16]
}
 802a1c6:	4618      	mov	r0, r3
 802a1c8:	3728      	adds	r7, #40	; 0x28
 802a1ca:	46bd      	mov	sp, r7
 802a1cc:	bd80      	pop	{r7, pc}

0802a1ce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 802a1ce:	b580      	push	{r7, lr}
 802a1d0:	b084      	sub	sp, #16
 802a1d2:	af00      	add	r7, sp, #0
 802a1d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802a1d6:	f3ef 8305 	mrs	r3, IPSR
 802a1da:	60bb      	str	r3, [r7, #8]
  return(result);
 802a1dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802a1de:	2b00      	cmp	r3, #0
 802a1e0:	d003      	beq.n	802a1ea <osDelay+0x1c>
    stat = osErrorISR;
 802a1e2:	f06f 0305 	mvn.w	r3, #5
 802a1e6:	60fb      	str	r3, [r7, #12]
 802a1e8:	e007      	b.n	802a1fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 802a1ea:	2300      	movs	r3, #0
 802a1ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	2b00      	cmp	r3, #0
 802a1f2:	d002      	beq.n	802a1fa <osDelay+0x2c>
      vTaskDelay(ticks);
 802a1f4:	6878      	ldr	r0, [r7, #4]
 802a1f6:	f001 fa05 	bl	802b604 <vTaskDelay>
    }
  }

  return (stat);
 802a1fa:	68fb      	ldr	r3, [r7, #12]
}
 802a1fc:	4618      	mov	r0, r3
 802a1fe:	3710      	adds	r7, #16
 802a200:	46bd      	mov	sp, r7
 802a202:	bd80      	pop	{r7, pc}

0802a204 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 802a204:	b580      	push	{r7, lr}
 802a206:	b086      	sub	sp, #24
 802a208:	af00      	add	r7, sp, #0
 802a20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802a20c:	f3ef 8305 	mrs	r3, IPSR
 802a210:	60fb      	str	r3, [r7, #12]
  return(result);
 802a212:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 802a214:	2b00      	cmp	r3, #0
 802a216:	d003      	beq.n	802a220 <osDelayUntil+0x1c>
    stat = osErrorISR;
 802a218:	f06f 0305 	mvn.w	r3, #5
 802a21c:	617b      	str	r3, [r7, #20]
 802a21e:	e019      	b.n	802a254 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 802a220:	2300      	movs	r3, #0
 802a222:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 802a224:	f001 fb58 	bl	802b8d8 <xTaskGetTickCount>
 802a228:	4603      	mov	r3, r0
 802a22a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 802a22c:	68bb      	ldr	r3, [r7, #8]
 802a22e:	687a      	ldr	r2, [r7, #4]
 802a230:	1ad3      	subs	r3, r2, r3
 802a232:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 802a234:	693b      	ldr	r3, [r7, #16]
 802a236:	2b00      	cmp	r3, #0
 802a238:	d009      	beq.n	802a24e <osDelayUntil+0x4a>
 802a23a:	693b      	ldr	r3, [r7, #16]
 802a23c:	2b00      	cmp	r3, #0
 802a23e:	db06      	blt.n	802a24e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 802a240:	f107 0308 	add.w	r3, r7, #8
 802a244:	6939      	ldr	r1, [r7, #16]
 802a246:	4618      	mov	r0, r3
 802a248:	f001 f95c 	bl	802b504 <vTaskDelayUntil>
 802a24c:	e002      	b.n	802a254 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 802a24e:	f06f 0303 	mvn.w	r3, #3
 802a252:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 802a254:	697b      	ldr	r3, [r7, #20]
}
 802a256:	4618      	mov	r0, r3
 802a258:	3718      	adds	r7, #24
 802a25a:	46bd      	mov	sp, r7
 802a25c:	bd80      	pop	{r7, pc}
	...

0802a260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 802a260:	b480      	push	{r7}
 802a262:	b085      	sub	sp, #20
 802a264:	af00      	add	r7, sp, #0
 802a266:	60f8      	str	r0, [r7, #12]
 802a268:	60b9      	str	r1, [r7, #8]
 802a26a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802a26c:	68fb      	ldr	r3, [r7, #12]
 802a26e:	4a07      	ldr	r2, [pc, #28]	; (802a28c <vApplicationGetIdleTaskMemory+0x2c>)
 802a270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 802a272:	68bb      	ldr	r3, [r7, #8]
 802a274:	4a06      	ldr	r2, [pc, #24]	; (802a290 <vApplicationGetIdleTaskMemory+0x30>)
 802a276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 802a278:	687b      	ldr	r3, [r7, #4]
 802a27a:	2280      	movs	r2, #128	; 0x80
 802a27c:	601a      	str	r2, [r3, #0]
}
 802a27e:	bf00      	nop
 802a280:	3714      	adds	r7, #20
 802a282:	46bd      	mov	sp, r7
 802a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a288:	4770      	bx	lr
 802a28a:	bf00      	nop
 802a28c:	20001938 	.word	0x20001938
 802a290:	20001a04 	.word	0x20001a04

0802a294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 802a294:	b480      	push	{r7}
 802a296:	b085      	sub	sp, #20
 802a298:	af00      	add	r7, sp, #0
 802a29a:	60f8      	str	r0, [r7, #12]
 802a29c:	60b9      	str	r1, [r7, #8]
 802a29e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 802a2a0:	68fb      	ldr	r3, [r7, #12]
 802a2a2:	4a07      	ldr	r2, [pc, #28]	; (802a2c0 <vApplicationGetTimerTaskMemory+0x2c>)
 802a2a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802a2a6:	68bb      	ldr	r3, [r7, #8]
 802a2a8:	4a06      	ldr	r2, [pc, #24]	; (802a2c4 <vApplicationGetTimerTaskMemory+0x30>)
 802a2aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 802a2ac:	687b      	ldr	r3, [r7, #4]
 802a2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 802a2b2:	601a      	str	r2, [r3, #0]
}
 802a2b4:	bf00      	nop
 802a2b6:	3714      	adds	r7, #20
 802a2b8:	46bd      	mov	sp, r7
 802a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2be:	4770      	bx	lr
 802a2c0:	20001c04 	.word	0x20001c04
 802a2c4:	20001cd0 	.word	0x20001cd0

0802a2c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 802a2c8:	b480      	push	{r7}
 802a2ca:	b083      	sub	sp, #12
 802a2cc:	af00      	add	r7, sp, #0
 802a2ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a2d0:	687b      	ldr	r3, [r7, #4]
 802a2d2:	f103 0208 	add.w	r2, r3, #8
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802a2da:	687b      	ldr	r3, [r7, #4]
 802a2dc:	f04f 32ff 	mov.w	r2, #4294967295
 802a2e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a2e2:	687b      	ldr	r3, [r7, #4]
 802a2e4:	f103 0208 	add.w	r2, r3, #8
 802a2e8:	687b      	ldr	r3, [r7, #4]
 802a2ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802a2ec:	687b      	ldr	r3, [r7, #4]
 802a2ee:	f103 0208 	add.w	r2, r3, #8
 802a2f2:	687b      	ldr	r3, [r7, #4]
 802a2f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 802a2f6:	687b      	ldr	r3, [r7, #4]
 802a2f8:	2200      	movs	r2, #0
 802a2fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802a2fc:	bf00      	nop
 802a2fe:	370c      	adds	r7, #12
 802a300:	46bd      	mov	sp, r7
 802a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a306:	4770      	bx	lr

0802a308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 802a308:	b480      	push	{r7}
 802a30a:	b083      	sub	sp, #12
 802a30c:	af00      	add	r7, sp, #0
 802a30e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802a310:	687b      	ldr	r3, [r7, #4]
 802a312:	2200      	movs	r2, #0
 802a314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 802a316:	bf00      	nop
 802a318:	370c      	adds	r7, #12
 802a31a:	46bd      	mov	sp, r7
 802a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a320:	4770      	bx	lr

0802a322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a322:	b480      	push	{r7}
 802a324:	b085      	sub	sp, #20
 802a326:	af00      	add	r7, sp, #0
 802a328:	6078      	str	r0, [r7, #4]
 802a32a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802a32c:	687b      	ldr	r3, [r7, #4]
 802a32e:	685b      	ldr	r3, [r3, #4]
 802a330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802a332:	683b      	ldr	r3, [r7, #0]
 802a334:	68fa      	ldr	r2, [r7, #12]
 802a336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802a338:	68fb      	ldr	r3, [r7, #12]
 802a33a:	689a      	ldr	r2, [r3, #8]
 802a33c:	683b      	ldr	r3, [r7, #0]
 802a33e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802a340:	68fb      	ldr	r3, [r7, #12]
 802a342:	689b      	ldr	r3, [r3, #8]
 802a344:	683a      	ldr	r2, [r7, #0]
 802a346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802a348:	68fb      	ldr	r3, [r7, #12]
 802a34a:	683a      	ldr	r2, [r7, #0]
 802a34c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802a34e:	683b      	ldr	r3, [r7, #0]
 802a350:	687a      	ldr	r2, [r7, #4]
 802a352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	681b      	ldr	r3, [r3, #0]
 802a358:	1c5a      	adds	r2, r3, #1
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	601a      	str	r2, [r3, #0]
}
 802a35e:	bf00      	nop
 802a360:	3714      	adds	r7, #20
 802a362:	46bd      	mov	sp, r7
 802a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a368:	4770      	bx	lr

0802a36a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802a36a:	b480      	push	{r7}
 802a36c:	b085      	sub	sp, #20
 802a36e:	af00      	add	r7, sp, #0
 802a370:	6078      	str	r0, [r7, #4]
 802a372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 802a374:	683b      	ldr	r3, [r7, #0]
 802a376:	681b      	ldr	r3, [r3, #0]
 802a378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802a37a:	68bb      	ldr	r3, [r7, #8]
 802a37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a380:	d103      	bne.n	802a38a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 802a382:	687b      	ldr	r3, [r7, #4]
 802a384:	691b      	ldr	r3, [r3, #16]
 802a386:	60fb      	str	r3, [r7, #12]
 802a388:	e00c      	b.n	802a3a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802a38a:	687b      	ldr	r3, [r7, #4]
 802a38c:	3308      	adds	r3, #8
 802a38e:	60fb      	str	r3, [r7, #12]
 802a390:	e002      	b.n	802a398 <vListInsert+0x2e>
 802a392:	68fb      	ldr	r3, [r7, #12]
 802a394:	685b      	ldr	r3, [r3, #4]
 802a396:	60fb      	str	r3, [r7, #12]
 802a398:	68fb      	ldr	r3, [r7, #12]
 802a39a:	685b      	ldr	r3, [r3, #4]
 802a39c:	681b      	ldr	r3, [r3, #0]
 802a39e:	68ba      	ldr	r2, [r7, #8]
 802a3a0:	429a      	cmp	r2, r3
 802a3a2:	d2f6      	bcs.n	802a392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 802a3a4:	68fb      	ldr	r3, [r7, #12]
 802a3a6:	685a      	ldr	r2, [r3, #4]
 802a3a8:	683b      	ldr	r3, [r7, #0]
 802a3aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802a3ac:	683b      	ldr	r3, [r7, #0]
 802a3ae:	685b      	ldr	r3, [r3, #4]
 802a3b0:	683a      	ldr	r2, [r7, #0]
 802a3b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 802a3b4:	683b      	ldr	r3, [r7, #0]
 802a3b6:	68fa      	ldr	r2, [r7, #12]
 802a3b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802a3ba:	68fb      	ldr	r3, [r7, #12]
 802a3bc:	683a      	ldr	r2, [r7, #0]
 802a3be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 802a3c0:	683b      	ldr	r3, [r7, #0]
 802a3c2:	687a      	ldr	r2, [r7, #4]
 802a3c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 802a3c6:	687b      	ldr	r3, [r7, #4]
 802a3c8:	681b      	ldr	r3, [r3, #0]
 802a3ca:	1c5a      	adds	r2, r3, #1
 802a3cc:	687b      	ldr	r3, [r7, #4]
 802a3ce:	601a      	str	r2, [r3, #0]
}
 802a3d0:	bf00      	nop
 802a3d2:	3714      	adds	r7, #20
 802a3d4:	46bd      	mov	sp, r7
 802a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3da:	4770      	bx	lr

0802a3dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802a3dc:	b480      	push	{r7}
 802a3de:	b085      	sub	sp, #20
 802a3e0:	af00      	add	r7, sp, #0
 802a3e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 802a3e4:	687b      	ldr	r3, [r7, #4]
 802a3e6:	691b      	ldr	r3, [r3, #16]
 802a3e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802a3ea:	687b      	ldr	r3, [r7, #4]
 802a3ec:	685b      	ldr	r3, [r3, #4]
 802a3ee:	687a      	ldr	r2, [r7, #4]
 802a3f0:	6892      	ldr	r2, [r2, #8]
 802a3f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 802a3f4:	687b      	ldr	r3, [r7, #4]
 802a3f6:	689b      	ldr	r3, [r3, #8]
 802a3f8:	687a      	ldr	r2, [r7, #4]
 802a3fa:	6852      	ldr	r2, [r2, #4]
 802a3fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802a3fe:	68fb      	ldr	r3, [r7, #12]
 802a400:	685b      	ldr	r3, [r3, #4]
 802a402:	687a      	ldr	r2, [r7, #4]
 802a404:	429a      	cmp	r2, r3
 802a406:	d103      	bne.n	802a410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	689a      	ldr	r2, [r3, #8]
 802a40c:	68fb      	ldr	r3, [r7, #12]
 802a40e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	2200      	movs	r2, #0
 802a414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 802a416:	68fb      	ldr	r3, [r7, #12]
 802a418:	681b      	ldr	r3, [r3, #0]
 802a41a:	1e5a      	subs	r2, r3, #1
 802a41c:	68fb      	ldr	r3, [r7, #12]
 802a41e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 802a420:	68fb      	ldr	r3, [r7, #12]
 802a422:	681b      	ldr	r3, [r3, #0]
}
 802a424:	4618      	mov	r0, r3
 802a426:	3714      	adds	r7, #20
 802a428:	46bd      	mov	sp, r7
 802a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a42e:	4770      	bx	lr

0802a430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 802a430:	b580      	push	{r7, lr}
 802a432:	b084      	sub	sp, #16
 802a434:	af00      	add	r7, sp, #0
 802a436:	6078      	str	r0, [r7, #4]
 802a438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802a43e:	68fb      	ldr	r3, [r7, #12]
 802a440:	2b00      	cmp	r3, #0
 802a442:	d10a      	bne.n	802a45a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 802a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a448:	f383 8811 	msr	BASEPRI, r3
 802a44c:	f3bf 8f6f 	isb	sy
 802a450:	f3bf 8f4f 	dsb	sy
 802a454:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802a456:	bf00      	nop
 802a458:	e7fe      	b.n	802a458 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802a45a:	f002 fb4b 	bl	802caf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a45e:	68fb      	ldr	r3, [r7, #12]
 802a460:	681a      	ldr	r2, [r3, #0]
 802a462:	68fb      	ldr	r3, [r7, #12]
 802a464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a466:	68f9      	ldr	r1, [r7, #12]
 802a468:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a46a:	fb01 f303 	mul.w	r3, r1, r3
 802a46e:	441a      	add	r2, r3
 802a470:	68fb      	ldr	r3, [r7, #12]
 802a472:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 802a474:	68fb      	ldr	r3, [r7, #12]
 802a476:	2200      	movs	r2, #0
 802a478:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802a47a:	68fb      	ldr	r3, [r7, #12]
 802a47c:	681a      	ldr	r2, [r3, #0]
 802a47e:	68fb      	ldr	r3, [r7, #12]
 802a480:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a482:	68fb      	ldr	r3, [r7, #12]
 802a484:	681a      	ldr	r2, [r3, #0]
 802a486:	68fb      	ldr	r3, [r7, #12]
 802a488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a48a:	3b01      	subs	r3, #1
 802a48c:	68f9      	ldr	r1, [r7, #12]
 802a48e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802a490:	fb01 f303 	mul.w	r3, r1, r3
 802a494:	441a      	add	r2, r3
 802a496:	68fb      	ldr	r3, [r7, #12]
 802a498:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802a49a:	68fb      	ldr	r3, [r7, #12]
 802a49c:	22ff      	movs	r2, #255	; 0xff
 802a49e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 802a4a2:	68fb      	ldr	r3, [r7, #12]
 802a4a4:	22ff      	movs	r2, #255	; 0xff
 802a4a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802a4aa:	683b      	ldr	r3, [r7, #0]
 802a4ac:	2b00      	cmp	r3, #0
 802a4ae:	d114      	bne.n	802a4da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802a4b0:	68fb      	ldr	r3, [r7, #12]
 802a4b2:	691b      	ldr	r3, [r3, #16]
 802a4b4:	2b00      	cmp	r3, #0
 802a4b6:	d01a      	beq.n	802a4ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802a4b8:	68fb      	ldr	r3, [r7, #12]
 802a4ba:	3310      	adds	r3, #16
 802a4bc:	4618      	mov	r0, r3
 802a4be:	f001 fbb5 	bl	802bc2c <xTaskRemoveFromEventList>
 802a4c2:	4603      	mov	r3, r0
 802a4c4:	2b00      	cmp	r3, #0
 802a4c6:	d012      	beq.n	802a4ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 802a4c8:	4b0c      	ldr	r3, [pc, #48]	; (802a4fc <xQueueGenericReset+0xcc>)
 802a4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a4ce:	601a      	str	r2, [r3, #0]
 802a4d0:	f3bf 8f4f 	dsb	sy
 802a4d4:	f3bf 8f6f 	isb	sy
 802a4d8:	e009      	b.n	802a4ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802a4da:	68fb      	ldr	r3, [r7, #12]
 802a4dc:	3310      	adds	r3, #16
 802a4de:	4618      	mov	r0, r3
 802a4e0:	f7ff fef2 	bl	802a2c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 802a4e4:	68fb      	ldr	r3, [r7, #12]
 802a4e6:	3324      	adds	r3, #36	; 0x24
 802a4e8:	4618      	mov	r0, r3
 802a4ea:	f7ff feed 	bl	802a2c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802a4ee:	f002 fb31 	bl	802cb54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 802a4f2:	2301      	movs	r3, #1
}
 802a4f4:	4618      	mov	r0, r3
 802a4f6:	3710      	adds	r7, #16
 802a4f8:	46bd      	mov	sp, r7
 802a4fa:	bd80      	pop	{r7, pc}
 802a4fc:	e000ed04 	.word	0xe000ed04

0802a500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 802a500:	b580      	push	{r7, lr}
 802a502:	b08e      	sub	sp, #56	; 0x38
 802a504:	af02      	add	r7, sp, #8
 802a506:	60f8      	str	r0, [r7, #12]
 802a508:	60b9      	str	r1, [r7, #8]
 802a50a:	607a      	str	r2, [r7, #4]
 802a50c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a50e:	68fb      	ldr	r3, [r7, #12]
 802a510:	2b00      	cmp	r3, #0
 802a512:	d10a      	bne.n	802a52a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 802a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a518:	f383 8811 	msr	BASEPRI, r3
 802a51c:	f3bf 8f6f 	isb	sy
 802a520:	f3bf 8f4f 	dsb	sy
 802a524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a526:	bf00      	nop
 802a528:	e7fe      	b.n	802a528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802a52a:	683b      	ldr	r3, [r7, #0]
 802a52c:	2b00      	cmp	r3, #0
 802a52e:	d10a      	bne.n	802a546 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 802a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a534:	f383 8811 	msr	BASEPRI, r3
 802a538:	f3bf 8f6f 	isb	sy
 802a53c:	f3bf 8f4f 	dsb	sy
 802a540:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a542:	bf00      	nop
 802a544:	e7fe      	b.n	802a544 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802a546:	687b      	ldr	r3, [r7, #4]
 802a548:	2b00      	cmp	r3, #0
 802a54a:	d002      	beq.n	802a552 <xQueueGenericCreateStatic+0x52>
 802a54c:	68bb      	ldr	r3, [r7, #8]
 802a54e:	2b00      	cmp	r3, #0
 802a550:	d001      	beq.n	802a556 <xQueueGenericCreateStatic+0x56>
 802a552:	2301      	movs	r3, #1
 802a554:	e000      	b.n	802a558 <xQueueGenericCreateStatic+0x58>
 802a556:	2300      	movs	r3, #0
 802a558:	2b00      	cmp	r3, #0
 802a55a:	d10a      	bne.n	802a572 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a560:	f383 8811 	msr	BASEPRI, r3
 802a564:	f3bf 8f6f 	isb	sy
 802a568:	f3bf 8f4f 	dsb	sy
 802a56c:	623b      	str	r3, [r7, #32]
}
 802a56e:	bf00      	nop
 802a570:	e7fe      	b.n	802a570 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802a572:	687b      	ldr	r3, [r7, #4]
 802a574:	2b00      	cmp	r3, #0
 802a576:	d102      	bne.n	802a57e <xQueueGenericCreateStatic+0x7e>
 802a578:	68bb      	ldr	r3, [r7, #8]
 802a57a:	2b00      	cmp	r3, #0
 802a57c:	d101      	bne.n	802a582 <xQueueGenericCreateStatic+0x82>
 802a57e:	2301      	movs	r3, #1
 802a580:	e000      	b.n	802a584 <xQueueGenericCreateStatic+0x84>
 802a582:	2300      	movs	r3, #0
 802a584:	2b00      	cmp	r3, #0
 802a586:	d10a      	bne.n	802a59e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 802a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a58c:	f383 8811 	msr	BASEPRI, r3
 802a590:	f3bf 8f6f 	isb	sy
 802a594:	f3bf 8f4f 	dsb	sy
 802a598:	61fb      	str	r3, [r7, #28]
}
 802a59a:	bf00      	nop
 802a59c:	e7fe      	b.n	802a59c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802a59e:	2350      	movs	r3, #80	; 0x50
 802a5a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802a5a2:	697b      	ldr	r3, [r7, #20]
 802a5a4:	2b50      	cmp	r3, #80	; 0x50
 802a5a6:	d00a      	beq.n	802a5be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 802a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a5ac:	f383 8811 	msr	BASEPRI, r3
 802a5b0:	f3bf 8f6f 	isb	sy
 802a5b4:	f3bf 8f4f 	dsb	sy
 802a5b8:	61bb      	str	r3, [r7, #24]
}
 802a5ba:	bf00      	nop
 802a5bc:	e7fe      	b.n	802a5bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802a5be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802a5c0:	683b      	ldr	r3, [r7, #0]
 802a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 802a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a5c6:	2b00      	cmp	r3, #0
 802a5c8:	d00d      	beq.n	802a5e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a5cc:	2201      	movs	r2, #1
 802a5ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a5d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 802a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a5d8:	9300      	str	r3, [sp, #0]
 802a5da:	4613      	mov	r3, r2
 802a5dc:	687a      	ldr	r2, [r7, #4]
 802a5de:	68b9      	ldr	r1, [r7, #8]
 802a5e0:	68f8      	ldr	r0, [r7, #12]
 802a5e2:	f000 f83f 	bl	802a664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 802a5e8:	4618      	mov	r0, r3
 802a5ea:	3730      	adds	r7, #48	; 0x30
 802a5ec:	46bd      	mov	sp, r7
 802a5ee:	bd80      	pop	{r7, pc}

0802a5f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 802a5f0:	b580      	push	{r7, lr}
 802a5f2:	b08a      	sub	sp, #40	; 0x28
 802a5f4:	af02      	add	r7, sp, #8
 802a5f6:	60f8      	str	r0, [r7, #12]
 802a5f8:	60b9      	str	r1, [r7, #8]
 802a5fa:	4613      	mov	r3, r2
 802a5fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802a5fe:	68fb      	ldr	r3, [r7, #12]
 802a600:	2b00      	cmp	r3, #0
 802a602:	d10a      	bne.n	802a61a <xQueueGenericCreate+0x2a>
	__asm volatile
 802a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a608:	f383 8811 	msr	BASEPRI, r3
 802a60c:	f3bf 8f6f 	isb	sy
 802a610:	f3bf 8f4f 	dsb	sy
 802a614:	613b      	str	r3, [r7, #16]
}
 802a616:	bf00      	nop
 802a618:	e7fe      	b.n	802a618 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a61a:	68fb      	ldr	r3, [r7, #12]
 802a61c:	68ba      	ldr	r2, [r7, #8]
 802a61e:	fb02 f303 	mul.w	r3, r2, r3
 802a622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 802a624:	69fb      	ldr	r3, [r7, #28]
 802a626:	3350      	adds	r3, #80	; 0x50
 802a628:	4618      	mov	r0, r3
 802a62a:	f002 fb85 	bl	802cd38 <pvPortMalloc>
 802a62e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 802a630:	69bb      	ldr	r3, [r7, #24]
 802a632:	2b00      	cmp	r3, #0
 802a634:	d011      	beq.n	802a65a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 802a636:	69bb      	ldr	r3, [r7, #24]
 802a638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802a63a:	697b      	ldr	r3, [r7, #20]
 802a63c:	3350      	adds	r3, #80	; 0x50
 802a63e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 802a640:	69bb      	ldr	r3, [r7, #24]
 802a642:	2200      	movs	r2, #0
 802a644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802a648:	79fa      	ldrb	r2, [r7, #7]
 802a64a:	69bb      	ldr	r3, [r7, #24]
 802a64c:	9300      	str	r3, [sp, #0]
 802a64e:	4613      	mov	r3, r2
 802a650:	697a      	ldr	r2, [r7, #20]
 802a652:	68b9      	ldr	r1, [r7, #8]
 802a654:	68f8      	ldr	r0, [r7, #12]
 802a656:	f000 f805 	bl	802a664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802a65a:	69bb      	ldr	r3, [r7, #24]
	}
 802a65c:	4618      	mov	r0, r3
 802a65e:	3720      	adds	r7, #32
 802a660:	46bd      	mov	sp, r7
 802a662:	bd80      	pop	{r7, pc}

0802a664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802a664:	b580      	push	{r7, lr}
 802a666:	b084      	sub	sp, #16
 802a668:	af00      	add	r7, sp, #0
 802a66a:	60f8      	str	r0, [r7, #12]
 802a66c:	60b9      	str	r1, [r7, #8]
 802a66e:	607a      	str	r2, [r7, #4]
 802a670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 802a672:	68bb      	ldr	r3, [r7, #8]
 802a674:	2b00      	cmp	r3, #0
 802a676:	d103      	bne.n	802a680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 802a678:	69bb      	ldr	r3, [r7, #24]
 802a67a:	69ba      	ldr	r2, [r7, #24]
 802a67c:	601a      	str	r2, [r3, #0]
 802a67e:	e002      	b.n	802a686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 802a680:	69bb      	ldr	r3, [r7, #24]
 802a682:	687a      	ldr	r2, [r7, #4]
 802a684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 802a686:	69bb      	ldr	r3, [r7, #24]
 802a688:	68fa      	ldr	r2, [r7, #12]
 802a68a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802a68c:	69bb      	ldr	r3, [r7, #24]
 802a68e:	68ba      	ldr	r2, [r7, #8]
 802a690:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 802a692:	2101      	movs	r1, #1
 802a694:	69b8      	ldr	r0, [r7, #24]
 802a696:	f7ff fecb 	bl	802a430 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802a69a:	69bb      	ldr	r3, [r7, #24]
 802a69c:	78fa      	ldrb	r2, [r7, #3]
 802a69e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 802a6a2:	78fb      	ldrb	r3, [r7, #3]
 802a6a4:	68ba      	ldr	r2, [r7, #8]
 802a6a6:	68f9      	ldr	r1, [r7, #12]
 802a6a8:	2073      	movs	r0, #115	; 0x73
 802a6aa:	f003 facd 	bl	802dc48 <SEGGER_SYSVIEW_RecordU32x3>
}
 802a6ae:	bf00      	nop
 802a6b0:	3710      	adds	r7, #16
 802a6b2:	46bd      	mov	sp, r7
 802a6b4:	bd80      	pop	{r7, pc}
	...

0802a6b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 802a6b8:	b580      	push	{r7, lr}
 802a6ba:	b090      	sub	sp, #64	; 0x40
 802a6bc:	af02      	add	r7, sp, #8
 802a6be:	60f8      	str	r0, [r7, #12]
 802a6c0:	60b9      	str	r1, [r7, #8]
 802a6c2:	607a      	str	r2, [r7, #4]
 802a6c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802a6c6:	2300      	movs	r3, #0
 802a6c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a6d0:	2b00      	cmp	r3, #0
 802a6d2:	d10a      	bne.n	802a6ea <xQueueGenericSend+0x32>
	__asm volatile
 802a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a6d8:	f383 8811 	msr	BASEPRI, r3
 802a6dc:	f3bf 8f6f 	isb	sy
 802a6e0:	f3bf 8f4f 	dsb	sy
 802a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a6e6:	bf00      	nop
 802a6e8:	e7fe      	b.n	802a6e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a6ea:	68bb      	ldr	r3, [r7, #8]
 802a6ec:	2b00      	cmp	r3, #0
 802a6ee:	d103      	bne.n	802a6f8 <xQueueGenericSend+0x40>
 802a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	d101      	bne.n	802a6fc <xQueueGenericSend+0x44>
 802a6f8:	2301      	movs	r3, #1
 802a6fa:	e000      	b.n	802a6fe <xQueueGenericSend+0x46>
 802a6fc:	2300      	movs	r3, #0
 802a6fe:	2b00      	cmp	r3, #0
 802a700:	d10a      	bne.n	802a718 <xQueueGenericSend+0x60>
	__asm volatile
 802a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a706:	f383 8811 	msr	BASEPRI, r3
 802a70a:	f3bf 8f6f 	isb	sy
 802a70e:	f3bf 8f4f 	dsb	sy
 802a712:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a714:	bf00      	nop
 802a716:	e7fe      	b.n	802a716 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a718:	683b      	ldr	r3, [r7, #0]
 802a71a:	2b02      	cmp	r3, #2
 802a71c:	d103      	bne.n	802a726 <xQueueGenericSend+0x6e>
 802a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a722:	2b01      	cmp	r3, #1
 802a724:	d101      	bne.n	802a72a <xQueueGenericSend+0x72>
 802a726:	2301      	movs	r3, #1
 802a728:	e000      	b.n	802a72c <xQueueGenericSend+0x74>
 802a72a:	2300      	movs	r3, #0
 802a72c:	2b00      	cmp	r3, #0
 802a72e:	d10a      	bne.n	802a746 <xQueueGenericSend+0x8e>
	__asm volatile
 802a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a734:	f383 8811 	msr	BASEPRI, r3
 802a738:	f3bf 8f6f 	isb	sy
 802a73c:	f3bf 8f4f 	dsb	sy
 802a740:	623b      	str	r3, [r7, #32]
}
 802a742:	bf00      	nop
 802a744:	e7fe      	b.n	802a744 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802a746:	f001 fc6f 	bl	802c028 <xTaskGetSchedulerState>
 802a74a:	4603      	mov	r3, r0
 802a74c:	2b00      	cmp	r3, #0
 802a74e:	d102      	bne.n	802a756 <xQueueGenericSend+0x9e>
 802a750:	687b      	ldr	r3, [r7, #4]
 802a752:	2b00      	cmp	r3, #0
 802a754:	d101      	bne.n	802a75a <xQueueGenericSend+0xa2>
 802a756:	2301      	movs	r3, #1
 802a758:	e000      	b.n	802a75c <xQueueGenericSend+0xa4>
 802a75a:	2300      	movs	r3, #0
 802a75c:	2b00      	cmp	r3, #0
 802a75e:	d10a      	bne.n	802a776 <xQueueGenericSend+0xbe>
	__asm volatile
 802a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a764:	f383 8811 	msr	BASEPRI, r3
 802a768:	f3bf 8f6f 	isb	sy
 802a76c:	f3bf 8f4f 	dsb	sy
 802a770:	61fb      	str	r3, [r7, #28]
}
 802a772:	bf00      	nop
 802a774:	e7fe      	b.n	802a774 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802a776:	f002 f9bd 	bl	802caf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a782:	429a      	cmp	r2, r3
 802a784:	d302      	bcc.n	802a78c <xQueueGenericSend+0xd4>
 802a786:	683b      	ldr	r3, [r7, #0]
 802a788:	2b02      	cmp	r3, #2
 802a78a:	d136      	bne.n	802a7fa <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 802a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a78e:	4618      	mov	r0, r3
 802a790:	f003 ff0c 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802a794:	68ba      	ldr	r2, [r7, #8]
 802a796:	6879      	ldr	r1, [r7, #4]
 802a798:	683b      	ldr	r3, [r7, #0]
 802a79a:	9300      	str	r3, [sp, #0]
 802a79c:	460b      	mov	r3, r1
 802a79e:	4601      	mov	r1, r0
 802a7a0:	205a      	movs	r0, #90	; 0x5a
 802a7a2:	f003 fac7 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a7a6:	683a      	ldr	r2, [r7, #0]
 802a7a8:	68b9      	ldr	r1, [r7, #8]
 802a7aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a7ac:	f000 fb5e 	bl	802ae6c <prvCopyDataToQueue>
 802a7b0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a7b6:	2b00      	cmp	r3, #0
 802a7b8:	d010      	beq.n	802a7dc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a7bc:	3324      	adds	r3, #36	; 0x24
 802a7be:	4618      	mov	r0, r3
 802a7c0:	f001 fa34 	bl	802bc2c <xTaskRemoveFromEventList>
 802a7c4:	4603      	mov	r3, r0
 802a7c6:	2b00      	cmp	r3, #0
 802a7c8:	d013      	beq.n	802a7f2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 802a7ca:	4b4d      	ldr	r3, [pc, #308]	; (802a900 <xQueueGenericSend+0x248>)
 802a7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a7d0:	601a      	str	r2, [r3, #0]
 802a7d2:	f3bf 8f4f 	dsb	sy
 802a7d6:	f3bf 8f6f 	isb	sy
 802a7da:	e00a      	b.n	802a7f2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 802a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a7de:	2b00      	cmp	r3, #0
 802a7e0:	d007      	beq.n	802a7f2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802a7e2:	4b47      	ldr	r3, [pc, #284]	; (802a900 <xQueueGenericSend+0x248>)
 802a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a7e8:	601a      	str	r2, [r3, #0]
 802a7ea:	f3bf 8f4f 	dsb	sy
 802a7ee:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802a7f2:	f002 f9af 	bl	802cb54 <vPortExitCritical>
				return pdPASS;
 802a7f6:	2301      	movs	r3, #1
 802a7f8:	e07d      	b.n	802a8f6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802a7fa:	687b      	ldr	r3, [r7, #4]
 802a7fc:	2b00      	cmp	r3, #0
 802a7fe:	d110      	bne.n	802a822 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802a800:	f002 f9a8 	bl	802cb54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 802a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a806:	4618      	mov	r0, r3
 802a808:	f003 fed0 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802a80c:	68ba      	ldr	r2, [r7, #8]
 802a80e:	6879      	ldr	r1, [r7, #4]
 802a810:	683b      	ldr	r3, [r7, #0]
 802a812:	9300      	str	r3, [sp, #0]
 802a814:	460b      	mov	r3, r1
 802a816:	4601      	mov	r1, r0
 802a818:	205a      	movs	r0, #90	; 0x5a
 802a81a:	f003 fa8b 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 802a81e:	2300      	movs	r3, #0
 802a820:	e069      	b.n	802a8f6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 802a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a824:	2b00      	cmp	r3, #0
 802a826:	d106      	bne.n	802a836 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802a828:	f107 0314 	add.w	r3, r7, #20
 802a82c:	4618      	mov	r0, r3
 802a82e:	f001 fa65 	bl	802bcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802a832:	2301      	movs	r3, #1
 802a834:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802a836:	f002 f98d 	bl	802cb54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802a83a:	f000 ff9d 	bl	802b778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802a83e:	f002 f959 	bl	802caf4 <vPortEnterCritical>
 802a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802a848:	b25b      	sxtb	r3, r3
 802a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a84e:	d103      	bne.n	802a858 <xQueueGenericSend+0x1a0>
 802a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a852:	2200      	movs	r2, #0
 802a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a85e:	b25b      	sxtb	r3, r3
 802a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a864:	d103      	bne.n	802a86e <xQueueGenericSend+0x1b6>
 802a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a868:	2200      	movs	r2, #0
 802a86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802a86e:	f002 f971 	bl	802cb54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802a872:	1d3a      	adds	r2, r7, #4
 802a874:	f107 0314 	add.w	r3, r7, #20
 802a878:	4611      	mov	r1, r2
 802a87a:	4618      	mov	r0, r3
 802a87c:	f001 fa54 	bl	802bd28 <xTaskCheckForTimeOut>
 802a880:	4603      	mov	r3, r0
 802a882:	2b00      	cmp	r3, #0
 802a884:	d124      	bne.n	802a8d0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802a886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a888:	f000 fbe8 	bl	802b05c <prvIsQueueFull>
 802a88c:	4603      	mov	r3, r0
 802a88e:	2b00      	cmp	r3, #0
 802a890:	d018      	beq.n	802a8c4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a894:	3310      	adds	r3, #16
 802a896:	687a      	ldr	r2, [r7, #4]
 802a898:	4611      	mov	r1, r2
 802a89a:	4618      	mov	r0, r3
 802a89c:	f001 f974 	bl	802bb88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802a8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a8a2:	f000 fb73 	bl	802af8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 802a8a6:	f000 ff75 	bl	802b794 <xTaskResumeAll>
 802a8aa:	4603      	mov	r3, r0
 802a8ac:	2b00      	cmp	r3, #0
 802a8ae:	f47f af62 	bne.w	802a776 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 802a8b2:	4b13      	ldr	r3, [pc, #76]	; (802a900 <xQueueGenericSend+0x248>)
 802a8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a8b8:	601a      	str	r2, [r3, #0]
 802a8ba:	f3bf 8f4f 	dsb	sy
 802a8be:	f3bf 8f6f 	isb	sy
 802a8c2:	e758      	b.n	802a776 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 802a8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a8c6:	f000 fb61 	bl	802af8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802a8ca:	f000 ff63 	bl	802b794 <xTaskResumeAll>
 802a8ce:	e752      	b.n	802a776 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802a8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802a8d2:	f000 fb5b 	bl	802af8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802a8d6:	f000 ff5d 	bl	802b794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 802a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a8dc:	4618      	mov	r0, r3
 802a8de:	f003 fe65 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802a8e2:	68ba      	ldr	r2, [r7, #8]
 802a8e4:	6879      	ldr	r1, [r7, #4]
 802a8e6:	683b      	ldr	r3, [r7, #0]
 802a8e8:	9300      	str	r3, [sp, #0]
 802a8ea:	460b      	mov	r3, r1
 802a8ec:	4601      	mov	r1, r0
 802a8ee:	205a      	movs	r0, #90	; 0x5a
 802a8f0:	f003 fa20 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 802a8f4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 802a8f6:	4618      	mov	r0, r3
 802a8f8:	3738      	adds	r7, #56	; 0x38
 802a8fa:	46bd      	mov	sp, r7
 802a8fc:	bd80      	pop	{r7, pc}
 802a8fe:	bf00      	nop
 802a900:	e000ed04 	.word	0xe000ed04

0802a904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 802a904:	b580      	push	{r7, lr}
 802a906:	b090      	sub	sp, #64	; 0x40
 802a908:	af00      	add	r7, sp, #0
 802a90a:	60f8      	str	r0, [r7, #12]
 802a90c:	60b9      	str	r1, [r7, #8]
 802a90e:	607a      	str	r2, [r7, #4]
 802a910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802a912:	68fb      	ldr	r3, [r7, #12]
 802a914:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 802a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a918:	2b00      	cmp	r3, #0
 802a91a:	d10a      	bne.n	802a932 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 802a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a920:	f383 8811 	msr	BASEPRI, r3
 802a924:	f3bf 8f6f 	isb	sy
 802a928:	f3bf 8f4f 	dsb	sy
 802a92c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802a92e:	bf00      	nop
 802a930:	e7fe      	b.n	802a930 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802a932:	68bb      	ldr	r3, [r7, #8]
 802a934:	2b00      	cmp	r3, #0
 802a936:	d103      	bne.n	802a940 <xQueueGenericSendFromISR+0x3c>
 802a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a93c:	2b00      	cmp	r3, #0
 802a93e:	d101      	bne.n	802a944 <xQueueGenericSendFromISR+0x40>
 802a940:	2301      	movs	r3, #1
 802a942:	e000      	b.n	802a946 <xQueueGenericSendFromISR+0x42>
 802a944:	2300      	movs	r3, #0
 802a946:	2b00      	cmp	r3, #0
 802a948:	d10a      	bne.n	802a960 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a94e:	f383 8811 	msr	BASEPRI, r3
 802a952:	f3bf 8f6f 	isb	sy
 802a956:	f3bf 8f4f 	dsb	sy
 802a95a:	627b      	str	r3, [r7, #36]	; 0x24
}
 802a95c:	bf00      	nop
 802a95e:	e7fe      	b.n	802a95e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802a960:	683b      	ldr	r3, [r7, #0]
 802a962:	2b02      	cmp	r3, #2
 802a964:	d103      	bne.n	802a96e <xQueueGenericSendFromISR+0x6a>
 802a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a96a:	2b01      	cmp	r3, #1
 802a96c:	d101      	bne.n	802a972 <xQueueGenericSendFromISR+0x6e>
 802a96e:	2301      	movs	r3, #1
 802a970:	e000      	b.n	802a974 <xQueueGenericSendFromISR+0x70>
 802a972:	2300      	movs	r3, #0
 802a974:	2b00      	cmp	r3, #0
 802a976:	d10a      	bne.n	802a98e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 802a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a97c:	f383 8811 	msr	BASEPRI, r3
 802a980:	f3bf 8f6f 	isb	sy
 802a984:	f3bf 8f4f 	dsb	sy
 802a988:	623b      	str	r3, [r7, #32]
}
 802a98a:	bf00      	nop
 802a98c:	e7fe      	b.n	802a98c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802a98e:	f002 f993 	bl	802ccb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802a992:	f3ef 8211 	mrs	r2, BASEPRI
 802a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a99a:	f383 8811 	msr	BASEPRI, r3
 802a99e:	f3bf 8f6f 	isb	sy
 802a9a2:	f3bf 8f4f 	dsb	sy
 802a9a6:	61fa      	str	r2, [r7, #28]
 802a9a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802a9aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802a9ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a9b6:	429a      	cmp	r2, r3
 802a9b8:	d302      	bcc.n	802a9c0 <xQueueGenericSendFromISR+0xbc>
 802a9ba:	683b      	ldr	r3, [r7, #0]
 802a9bc:	2b02      	cmp	r3, #2
 802a9be:	d139      	bne.n	802aa34 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802a9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 802a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 802a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9d2:	4618      	mov	r0, r3
 802a9d4:	f003 fdea 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802a9d8:	4601      	mov	r1, r0
 802a9da:	687b      	ldr	r3, [r7, #4]
 802a9dc:	461a      	mov	r2, r3
 802a9de:	2060      	movs	r0, #96	; 0x60
 802a9e0:	f003 f8d8 	bl	802db94 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802a9e4:	683a      	ldr	r2, [r7, #0]
 802a9e6:	68b9      	ldr	r1, [r7, #8]
 802a9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802a9ea:	f000 fa3f 	bl	802ae6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 802a9ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 802a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a9f6:	d112      	bne.n	802aa1e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a9fc:	2b00      	cmp	r3, #0
 802a9fe:	d016      	beq.n	802aa2e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aa02:	3324      	adds	r3, #36	; 0x24
 802aa04:	4618      	mov	r0, r3
 802aa06:	f001 f911 	bl	802bc2c <xTaskRemoveFromEventList>
 802aa0a:	4603      	mov	r3, r0
 802aa0c:	2b00      	cmp	r3, #0
 802aa0e:	d00e      	beq.n	802aa2e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802aa10:	687b      	ldr	r3, [r7, #4]
 802aa12:	2b00      	cmp	r3, #0
 802aa14:	d00b      	beq.n	802aa2e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 802aa16:	687b      	ldr	r3, [r7, #4]
 802aa18:	2201      	movs	r2, #1
 802aa1a:	601a      	str	r2, [r3, #0]
 802aa1c:	e007      	b.n	802aa2e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802aa1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802aa22:	3301      	adds	r3, #1
 802aa24:	b2db      	uxtb	r3, r3
 802aa26:	b25a      	sxtb	r2, r3
 802aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aa2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802aa2e:	2301      	movs	r3, #1
 802aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 802aa32:	e00b      	b.n	802aa4c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 802aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aa36:	4618      	mov	r0, r3
 802aa38:	f003 fdb8 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802aa3c:	4601      	mov	r1, r0
 802aa3e:	687b      	ldr	r3, [r7, #4]
 802aa40:	461a      	mov	r2, r3
 802aa42:	2060      	movs	r0, #96	; 0x60
 802aa44:	f003 f8a6 	bl	802db94 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 802aa48:	2300      	movs	r3, #0
 802aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802aa4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802aa4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802aa50:	697b      	ldr	r3, [r7, #20]
 802aa52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802aa56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802aa5a:	4618      	mov	r0, r3
 802aa5c:	3740      	adds	r7, #64	; 0x40
 802aa5e:	46bd      	mov	sp, r7
 802aa60:	bd80      	pop	{r7, pc}
	...

0802aa64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802aa64:	b590      	push	{r4, r7, lr}
 802aa66:	b08f      	sub	sp, #60	; 0x3c
 802aa68:	af02      	add	r7, sp, #8
 802aa6a:	60f8      	str	r0, [r7, #12]
 802aa6c:	60b9      	str	r1, [r7, #8]
 802aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802aa70:	2300      	movs	r3, #0
 802aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802aa74:	68fb      	ldr	r3, [r7, #12]
 802aa76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa7a:	2b00      	cmp	r3, #0
 802aa7c:	d10a      	bne.n	802aa94 <xQueueReceive+0x30>
	__asm volatile
 802aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa82:	f383 8811 	msr	BASEPRI, r3
 802aa86:	f3bf 8f6f 	isb	sy
 802aa8a:	f3bf 8f4f 	dsb	sy
 802aa8e:	623b      	str	r3, [r7, #32]
}
 802aa90:	bf00      	nop
 802aa92:	e7fe      	b.n	802aa92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802aa94:	68bb      	ldr	r3, [r7, #8]
 802aa96:	2b00      	cmp	r3, #0
 802aa98:	d103      	bne.n	802aaa2 <xQueueReceive+0x3e>
 802aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aa9e:	2b00      	cmp	r3, #0
 802aaa0:	d101      	bne.n	802aaa6 <xQueueReceive+0x42>
 802aaa2:	2301      	movs	r3, #1
 802aaa4:	e000      	b.n	802aaa8 <xQueueReceive+0x44>
 802aaa6:	2300      	movs	r3, #0
 802aaa8:	2b00      	cmp	r3, #0
 802aaaa:	d10a      	bne.n	802aac2 <xQueueReceive+0x5e>
	__asm volatile
 802aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aab0:	f383 8811 	msr	BASEPRI, r3
 802aab4:	f3bf 8f6f 	isb	sy
 802aab8:	f3bf 8f4f 	dsb	sy
 802aabc:	61fb      	str	r3, [r7, #28]
}
 802aabe:	bf00      	nop
 802aac0:	e7fe      	b.n	802aac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802aac2:	f001 fab1 	bl	802c028 <xTaskGetSchedulerState>
 802aac6:	4603      	mov	r3, r0
 802aac8:	2b00      	cmp	r3, #0
 802aaca:	d102      	bne.n	802aad2 <xQueueReceive+0x6e>
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	2b00      	cmp	r3, #0
 802aad0:	d101      	bne.n	802aad6 <xQueueReceive+0x72>
 802aad2:	2301      	movs	r3, #1
 802aad4:	e000      	b.n	802aad8 <xQueueReceive+0x74>
 802aad6:	2300      	movs	r3, #0
 802aad8:	2b00      	cmp	r3, #0
 802aada:	d10a      	bne.n	802aaf2 <xQueueReceive+0x8e>
	__asm volatile
 802aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aae0:	f383 8811 	msr	BASEPRI, r3
 802aae4:	f3bf 8f6f 	isb	sy
 802aae8:	f3bf 8f4f 	dsb	sy
 802aaec:	61bb      	str	r3, [r7, #24]
}
 802aaee:	bf00      	nop
 802aaf0:	e7fe      	b.n	802aaf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802aaf2:	f001 ffff 	bl	802caf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aafa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aafe:	2b00      	cmp	r3, #0
 802ab00:	d02f      	beq.n	802ab62 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802ab02:	68b9      	ldr	r1, [r7, #8]
 802ab04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ab06:	f000 fa1b 	bl	802af40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 802ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab0c:	4618      	mov	r0, r3
 802ab0e:	f003 fd4d 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ab12:	4604      	mov	r4, r0
 802ab14:	2000      	movs	r0, #0
 802ab16:	f003 fd49 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ab1a:	4602      	mov	r2, r0
 802ab1c:	687b      	ldr	r3, [r7, #4]
 802ab1e:	2101      	movs	r1, #1
 802ab20:	9100      	str	r1, [sp, #0]
 802ab22:	4621      	mov	r1, r4
 802ab24:	205c      	movs	r0, #92	; 0x5c
 802ab26:	f003 f905 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ab2c:	1e5a      	subs	r2, r3, #1
 802ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab34:	691b      	ldr	r3, [r3, #16]
 802ab36:	2b00      	cmp	r3, #0
 802ab38:	d00f      	beq.n	802ab5a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab3c:	3310      	adds	r3, #16
 802ab3e:	4618      	mov	r0, r3
 802ab40:	f001 f874 	bl	802bc2c <xTaskRemoveFromEventList>
 802ab44:	4603      	mov	r3, r0
 802ab46:	2b00      	cmp	r3, #0
 802ab48:	d007      	beq.n	802ab5a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802ab4a:	4b4d      	ldr	r3, [pc, #308]	; (802ac80 <xQueueReceive+0x21c>)
 802ab4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ab50:	601a      	str	r2, [r3, #0]
 802ab52:	f3bf 8f4f 	dsb	sy
 802ab56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802ab5a:	f001 fffb 	bl	802cb54 <vPortExitCritical>
				return pdPASS;
 802ab5e:	2301      	movs	r3, #1
 802ab60:	e08a      	b.n	802ac78 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	2b00      	cmp	r3, #0
 802ab66:	d113      	bne.n	802ab90 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802ab68:	f001 fff4 	bl	802cb54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 802ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab6e:	4618      	mov	r0, r3
 802ab70:	f003 fd1c 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ab74:	4604      	mov	r4, r0
 802ab76:	2000      	movs	r0, #0
 802ab78:	f003 fd18 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ab7c:	4602      	mov	r2, r0
 802ab7e:	687b      	ldr	r3, [r7, #4]
 802ab80:	2101      	movs	r1, #1
 802ab82:	9100      	str	r1, [sp, #0]
 802ab84:	4621      	mov	r1, r4
 802ab86:	205c      	movs	r0, #92	; 0x5c
 802ab88:	f003 f8d4 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 802ab8c:	2300      	movs	r3, #0
 802ab8e:	e073      	b.n	802ac78 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 802ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ab92:	2b00      	cmp	r3, #0
 802ab94:	d106      	bne.n	802aba4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802ab96:	f107 0310 	add.w	r3, r7, #16
 802ab9a:	4618      	mov	r0, r3
 802ab9c:	f001 f8ae 	bl	802bcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802aba0:	2301      	movs	r3, #1
 802aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802aba4:	f001 ffd6 	bl	802cb54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802aba8:	f000 fde6 	bl	802b778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802abac:	f001 ffa2 	bl	802caf4 <vPortEnterCritical>
 802abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802abb6:	b25b      	sxtb	r3, r3
 802abb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802abbc:	d103      	bne.n	802abc6 <xQueueReceive+0x162>
 802abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abc0:	2200      	movs	r2, #0
 802abc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802abcc:	b25b      	sxtb	r3, r3
 802abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 802abd2:	d103      	bne.n	802abdc <xQueueReceive+0x178>
 802abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802abd6:	2200      	movs	r2, #0
 802abd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802abdc:	f001 ffba 	bl	802cb54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802abe0:	1d3a      	adds	r2, r7, #4
 802abe2:	f107 0310 	add.w	r3, r7, #16
 802abe6:	4611      	mov	r1, r2
 802abe8:	4618      	mov	r0, r3
 802abea:	f001 f89d 	bl	802bd28 <xTaskCheckForTimeOut>
 802abee:	4603      	mov	r3, r0
 802abf0:	2b00      	cmp	r3, #0
 802abf2:	d124      	bne.n	802ac3e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802abf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802abf6:	f000 fa1b 	bl	802b030 <prvIsQueueEmpty>
 802abfa:	4603      	mov	r3, r0
 802abfc:	2b00      	cmp	r3, #0
 802abfe:	d018      	beq.n	802ac32 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac02:	3324      	adds	r3, #36	; 0x24
 802ac04:	687a      	ldr	r2, [r7, #4]
 802ac06:	4611      	mov	r1, r2
 802ac08:	4618      	mov	r0, r3
 802ac0a:	f000 ffbd 	bl	802bb88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802ac0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ac10:	f000 f9bc 	bl	802af8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802ac14:	f000 fdbe 	bl	802b794 <xTaskResumeAll>
 802ac18:	4603      	mov	r3, r0
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	f47f af69 	bne.w	802aaf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 802ac20:	4b17      	ldr	r3, [pc, #92]	; (802ac80 <xQueueReceive+0x21c>)
 802ac22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ac26:	601a      	str	r2, [r3, #0]
 802ac28:	f3bf 8f4f 	dsb	sy
 802ac2c:	f3bf 8f6f 	isb	sy
 802ac30:	e75f      	b.n	802aaf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802ac32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ac34:	f000 f9aa 	bl	802af8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802ac38:	f000 fdac 	bl	802b794 <xTaskResumeAll>
 802ac3c:	e759      	b.n	802aaf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802ac3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ac40:	f000 f9a4 	bl	802af8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802ac44:	f000 fda6 	bl	802b794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802ac48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ac4a:	f000 f9f1 	bl	802b030 <prvIsQueueEmpty>
 802ac4e:	4603      	mov	r3, r0
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	f43f af4e 	beq.w	802aaf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 802ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac58:	4618      	mov	r0, r3
 802ac5a:	f003 fca7 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ac5e:	4604      	mov	r4, r0
 802ac60:	2000      	movs	r0, #0
 802ac62:	f003 fca3 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ac66:	4602      	mov	r2, r0
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	2101      	movs	r1, #1
 802ac6c:	9100      	str	r1, [sp, #0]
 802ac6e:	4621      	mov	r1, r4
 802ac70:	205c      	movs	r0, #92	; 0x5c
 802ac72:	f003 f85f 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 802ac76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802ac78:	4618      	mov	r0, r3
 802ac7a:	3734      	adds	r7, #52	; 0x34
 802ac7c:	46bd      	mov	sp, r7
 802ac7e:	bd90      	pop	{r4, r7, pc}
 802ac80:	e000ed04 	.word	0xe000ed04

0802ac84 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802ac84:	b590      	push	{r4, r7, lr}
 802ac86:	b091      	sub	sp, #68	; 0x44
 802ac88:	af02      	add	r7, sp, #8
 802ac8a:	60f8      	str	r0, [r7, #12]
 802ac8c:	60b9      	str	r1, [r7, #8]
 802ac8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802ac90:	2300      	movs	r3, #0
 802ac92:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 802ac94:	68fb      	ldr	r3, [r7, #12]
 802ac96:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ac9a:	2b00      	cmp	r3, #0
 802ac9c:	d10a      	bne.n	802acb4 <xQueuePeek+0x30>
	__asm volatile
 802ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aca2:	f383 8811 	msr	BASEPRI, r3
 802aca6:	f3bf 8f6f 	isb	sy
 802acaa:	f3bf 8f4f 	dsb	sy
 802acae:	627b      	str	r3, [r7, #36]	; 0x24
}
 802acb0:	bf00      	nop
 802acb2:	e7fe      	b.n	802acb2 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802acb4:	68bb      	ldr	r3, [r7, #8]
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	d103      	bne.n	802acc2 <xQueuePeek+0x3e>
 802acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802acbe:	2b00      	cmp	r3, #0
 802acc0:	d101      	bne.n	802acc6 <xQueuePeek+0x42>
 802acc2:	2301      	movs	r3, #1
 802acc4:	e000      	b.n	802acc8 <xQueuePeek+0x44>
 802acc6:	2300      	movs	r3, #0
 802acc8:	2b00      	cmp	r3, #0
 802acca:	d10a      	bne.n	802ace2 <xQueuePeek+0x5e>
	__asm volatile
 802accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802acd0:	f383 8811 	msr	BASEPRI, r3
 802acd4:	f3bf 8f6f 	isb	sy
 802acd8:	f3bf 8f4f 	dsb	sy
 802acdc:	623b      	str	r3, [r7, #32]
}
 802acde:	bf00      	nop
 802ace0:	e7fe      	b.n	802ace0 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802ace2:	f001 f9a1 	bl	802c028 <xTaskGetSchedulerState>
 802ace6:	4603      	mov	r3, r0
 802ace8:	2b00      	cmp	r3, #0
 802acea:	d102      	bne.n	802acf2 <xQueuePeek+0x6e>
 802acec:	687b      	ldr	r3, [r7, #4]
 802acee:	2b00      	cmp	r3, #0
 802acf0:	d101      	bne.n	802acf6 <xQueuePeek+0x72>
 802acf2:	2301      	movs	r3, #1
 802acf4:	e000      	b.n	802acf8 <xQueuePeek+0x74>
 802acf6:	2300      	movs	r3, #0
 802acf8:	2b00      	cmp	r3, #0
 802acfa:	d10a      	bne.n	802ad12 <xQueuePeek+0x8e>
	__asm volatile
 802acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ad00:	f383 8811 	msr	BASEPRI, r3
 802ad04:	f3bf 8f6f 	isb	sy
 802ad08:	f3bf 8f4f 	dsb	sy
 802ad0c:	61fb      	str	r3, [r7, #28]
}
 802ad0e:	bf00      	nop
 802ad10:	e7fe      	b.n	802ad10 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802ad12:	f001 feef 	bl	802caf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ad1a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ad1e:	2b00      	cmp	r3, #0
 802ad20:	d032      	beq.n	802ad88 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 802ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad24:	68db      	ldr	r3, [r3, #12]
 802ad26:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802ad28:	68b9      	ldr	r1, [r7, #8]
 802ad2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ad2c:	f000 f908 	bl	802af40 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 802ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad32:	4618      	mov	r0, r3
 802ad34:	f003 fc3a 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ad38:	4604      	mov	r4, r0
 802ad3a:	68bb      	ldr	r3, [r7, #8]
 802ad3c:	4618      	mov	r0, r3
 802ad3e:	f003 fc35 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802ad42:	4602      	mov	r2, r0
 802ad44:	687b      	ldr	r3, [r7, #4]
 802ad46:	2101      	movs	r1, #1
 802ad48:	9100      	str	r1, [sp, #0]
 802ad4a:	4621      	mov	r1, r4
 802ad4c:	205c      	movs	r0, #92	; 0x5c
 802ad4e:	f002 fff1 	bl	802dd34 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 802ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ad56:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ad5c:	2b00      	cmp	r3, #0
 802ad5e:	d00f      	beq.n	802ad80 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ad62:	3324      	adds	r3, #36	; 0x24
 802ad64:	4618      	mov	r0, r3
 802ad66:	f000 ff61 	bl	802bc2c <xTaskRemoveFromEventList>
 802ad6a:	4603      	mov	r3, r0
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	d007      	beq.n	802ad80 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 802ad70:	4b3d      	ldr	r3, [pc, #244]	; (802ae68 <xQueuePeek+0x1e4>)
 802ad72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ad76:	601a      	str	r2, [r3, #0]
 802ad78:	f3bf 8f4f 	dsb	sy
 802ad7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802ad80:	f001 fee8 	bl	802cb54 <vPortExitCritical>
				return pdPASS;
 802ad84:	2301      	movs	r3, #1
 802ad86:	e06a      	b.n	802ae5e <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802ad88:	687b      	ldr	r3, [r7, #4]
 802ad8a:	2b00      	cmp	r3, #0
 802ad8c:	d103      	bne.n	802ad96 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802ad8e:	f001 fee1 	bl	802cb54 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802ad92:	2300      	movs	r3, #0
 802ad94:	e063      	b.n	802ae5e <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 802ad96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ad98:	2b00      	cmp	r3, #0
 802ad9a:	d106      	bne.n	802adaa <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802ad9c:	f107 0314 	add.w	r3, r7, #20
 802ada0:	4618      	mov	r0, r3
 802ada2:	f000 ffab 	bl	802bcfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802ada6:	2301      	movs	r3, #1
 802ada8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802adaa:	f001 fed3 	bl	802cb54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802adae:	f000 fce3 	bl	802b778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802adb2:	f001 fe9f 	bl	802caf4 <vPortEnterCritical>
 802adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802adb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802adbc:	b25b      	sxtb	r3, r3
 802adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 802adc2:	d103      	bne.n	802adcc <xQueuePeek+0x148>
 802adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802adc6:	2200      	movs	r2, #0
 802adc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802adce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802add2:	b25b      	sxtb	r3, r3
 802add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 802add8:	d103      	bne.n	802ade2 <xQueuePeek+0x15e>
 802adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802addc:	2200      	movs	r2, #0
 802adde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802ade2:	f001 feb7 	bl	802cb54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802ade6:	1d3a      	adds	r2, r7, #4
 802ade8:	f107 0314 	add.w	r3, r7, #20
 802adec:	4611      	mov	r1, r2
 802adee:	4618      	mov	r0, r3
 802adf0:	f000 ff9a 	bl	802bd28 <xTaskCheckForTimeOut>
 802adf4:	4603      	mov	r3, r0
 802adf6:	2b00      	cmp	r3, #0
 802adf8:	d124      	bne.n	802ae44 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802adfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802adfc:	f000 f918 	bl	802b030 <prvIsQueueEmpty>
 802ae00:	4603      	mov	r3, r0
 802ae02:	2b00      	cmp	r3, #0
 802ae04:	d018      	beq.n	802ae38 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ae08:	3324      	adds	r3, #36	; 0x24
 802ae0a:	687a      	ldr	r2, [r7, #4]
 802ae0c:	4611      	mov	r1, r2
 802ae0e:	4618      	mov	r0, r3
 802ae10:	f000 feba 	bl	802bb88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802ae14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ae16:	f000 f8b9 	bl	802af8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802ae1a:	f000 fcbb 	bl	802b794 <xTaskResumeAll>
 802ae1e:	4603      	mov	r3, r0
 802ae20:	2b00      	cmp	r3, #0
 802ae22:	f47f af76 	bne.w	802ad12 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 802ae26:	4b10      	ldr	r3, [pc, #64]	; (802ae68 <xQueuePeek+0x1e4>)
 802ae28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802ae2c:	601a      	str	r2, [r3, #0]
 802ae2e:	f3bf 8f4f 	dsb	sy
 802ae32:	f3bf 8f6f 	isb	sy
 802ae36:	e76c      	b.n	802ad12 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 802ae38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ae3a:	f000 f8a7 	bl	802af8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802ae3e:	f000 fca9 	bl	802b794 <xTaskResumeAll>
 802ae42:	e766      	b.n	802ad12 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 802ae44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ae46:	f000 f8a1 	bl	802af8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802ae4a:	f000 fca3 	bl	802b794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802ae4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802ae50:	f000 f8ee 	bl	802b030 <prvIsQueueEmpty>
 802ae54:	4603      	mov	r3, r0
 802ae56:	2b00      	cmp	r3, #0
 802ae58:	f43f af5b 	beq.w	802ad12 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802ae5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802ae5e:	4618      	mov	r0, r3
 802ae60:	373c      	adds	r7, #60	; 0x3c
 802ae62:	46bd      	mov	sp, r7
 802ae64:	bd90      	pop	{r4, r7, pc}
 802ae66:	bf00      	nop
 802ae68:	e000ed04 	.word	0xe000ed04

0802ae6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 802ae6c:	b580      	push	{r7, lr}
 802ae6e:	b086      	sub	sp, #24
 802ae70:	af00      	add	r7, sp, #0
 802ae72:	60f8      	str	r0, [r7, #12]
 802ae74:	60b9      	str	r1, [r7, #8]
 802ae76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802ae78:	2300      	movs	r3, #0
 802ae7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 802ae7c:	68fb      	ldr	r3, [r7, #12]
 802ae7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802ae82:	68fb      	ldr	r3, [r7, #12]
 802ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ae86:	2b00      	cmp	r3, #0
 802ae88:	d10d      	bne.n	802aea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802ae8a:	68fb      	ldr	r3, [r7, #12]
 802ae8c:	681b      	ldr	r3, [r3, #0]
 802ae8e:	2b00      	cmp	r3, #0
 802ae90:	d14d      	bne.n	802af2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802ae92:	68fb      	ldr	r3, [r7, #12]
 802ae94:	689b      	ldr	r3, [r3, #8]
 802ae96:	4618      	mov	r0, r3
 802ae98:	f001 f8e4 	bl	802c064 <xTaskPriorityDisinherit>
 802ae9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802ae9e:	68fb      	ldr	r3, [r7, #12]
 802aea0:	2200      	movs	r2, #0
 802aea2:	609a      	str	r2, [r3, #8]
 802aea4:	e043      	b.n	802af2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802aea6:	687b      	ldr	r3, [r7, #4]
 802aea8:	2b00      	cmp	r3, #0
 802aeaa:	d119      	bne.n	802aee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802aeac:	68fb      	ldr	r3, [r7, #12]
 802aeae:	6858      	ldr	r0, [r3, #4]
 802aeb0:	68fb      	ldr	r3, [r7, #12]
 802aeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aeb4:	461a      	mov	r2, r3
 802aeb6:	68b9      	ldr	r1, [r7, #8]
 802aeb8:	f003 fd2c 	bl	802e914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802aebc:	68fb      	ldr	r3, [r7, #12]
 802aebe:	685a      	ldr	r2, [r3, #4]
 802aec0:	68fb      	ldr	r3, [r7, #12]
 802aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aec4:	441a      	add	r2, r3
 802aec6:	68fb      	ldr	r3, [r7, #12]
 802aec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802aeca:	68fb      	ldr	r3, [r7, #12]
 802aecc:	685a      	ldr	r2, [r3, #4]
 802aece:	68fb      	ldr	r3, [r7, #12]
 802aed0:	689b      	ldr	r3, [r3, #8]
 802aed2:	429a      	cmp	r2, r3
 802aed4:	d32b      	bcc.n	802af2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802aed6:	68fb      	ldr	r3, [r7, #12]
 802aed8:	681a      	ldr	r2, [r3, #0]
 802aeda:	68fb      	ldr	r3, [r7, #12]
 802aedc:	605a      	str	r2, [r3, #4]
 802aede:	e026      	b.n	802af2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802aee0:	68fb      	ldr	r3, [r7, #12]
 802aee2:	68d8      	ldr	r0, [r3, #12]
 802aee4:	68fb      	ldr	r3, [r7, #12]
 802aee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aee8:	461a      	mov	r2, r3
 802aeea:	68b9      	ldr	r1, [r7, #8]
 802aeec:	f003 fd12 	bl	802e914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802aef0:	68fb      	ldr	r3, [r7, #12]
 802aef2:	68da      	ldr	r2, [r3, #12]
 802aef4:	68fb      	ldr	r3, [r7, #12]
 802aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aef8:	425b      	negs	r3, r3
 802aefa:	441a      	add	r2, r3
 802aefc:	68fb      	ldr	r3, [r7, #12]
 802aefe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802af00:	68fb      	ldr	r3, [r7, #12]
 802af02:	68da      	ldr	r2, [r3, #12]
 802af04:	68fb      	ldr	r3, [r7, #12]
 802af06:	681b      	ldr	r3, [r3, #0]
 802af08:	429a      	cmp	r2, r3
 802af0a:	d207      	bcs.n	802af1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 802af0c:	68fb      	ldr	r3, [r7, #12]
 802af0e:	689a      	ldr	r2, [r3, #8]
 802af10:	68fb      	ldr	r3, [r7, #12]
 802af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802af14:	425b      	negs	r3, r3
 802af16:	441a      	add	r2, r3
 802af18:	68fb      	ldr	r3, [r7, #12]
 802af1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 802af1c:	687b      	ldr	r3, [r7, #4]
 802af1e:	2b02      	cmp	r3, #2
 802af20:	d105      	bne.n	802af2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802af22:	693b      	ldr	r3, [r7, #16]
 802af24:	2b00      	cmp	r3, #0
 802af26:	d002      	beq.n	802af2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802af28:	693b      	ldr	r3, [r7, #16]
 802af2a:	3b01      	subs	r3, #1
 802af2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802af2e:	693b      	ldr	r3, [r7, #16]
 802af30:	1c5a      	adds	r2, r3, #1
 802af32:	68fb      	ldr	r3, [r7, #12]
 802af34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802af36:	697b      	ldr	r3, [r7, #20]
}
 802af38:	4618      	mov	r0, r3
 802af3a:	3718      	adds	r7, #24
 802af3c:	46bd      	mov	sp, r7
 802af3e:	bd80      	pop	{r7, pc}

0802af40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 802af40:	b580      	push	{r7, lr}
 802af42:	b082      	sub	sp, #8
 802af44:	af00      	add	r7, sp, #0
 802af46:	6078      	str	r0, [r7, #4]
 802af48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802af4a:	687b      	ldr	r3, [r7, #4]
 802af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802af4e:	2b00      	cmp	r3, #0
 802af50:	d018      	beq.n	802af84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 802af52:	687b      	ldr	r3, [r7, #4]
 802af54:	68da      	ldr	r2, [r3, #12]
 802af56:	687b      	ldr	r3, [r7, #4]
 802af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802af5a:	441a      	add	r2, r3
 802af5c:	687b      	ldr	r3, [r7, #4]
 802af5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 802af60:	687b      	ldr	r3, [r7, #4]
 802af62:	68da      	ldr	r2, [r3, #12]
 802af64:	687b      	ldr	r3, [r7, #4]
 802af66:	689b      	ldr	r3, [r3, #8]
 802af68:	429a      	cmp	r2, r3
 802af6a:	d303      	bcc.n	802af74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 802af6c:	687b      	ldr	r3, [r7, #4]
 802af6e:	681a      	ldr	r2, [r3, #0]
 802af70:	687b      	ldr	r3, [r7, #4]
 802af72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802af74:	687b      	ldr	r3, [r7, #4]
 802af76:	68d9      	ldr	r1, [r3, #12]
 802af78:	687b      	ldr	r3, [r7, #4]
 802af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802af7c:	461a      	mov	r2, r3
 802af7e:	6838      	ldr	r0, [r7, #0]
 802af80:	f003 fcc8 	bl	802e914 <memcpy>
	}
}
 802af84:	bf00      	nop
 802af86:	3708      	adds	r7, #8
 802af88:	46bd      	mov	sp, r7
 802af8a:	bd80      	pop	{r7, pc}

0802af8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 802af8c:	b580      	push	{r7, lr}
 802af8e:	b084      	sub	sp, #16
 802af90:	af00      	add	r7, sp, #0
 802af92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802af94:	f001 fdae 	bl	802caf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802af98:	687b      	ldr	r3, [r7, #4]
 802af9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802af9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802afa0:	e011      	b.n	802afc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802afa2:	687b      	ldr	r3, [r7, #4]
 802afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802afa6:	2b00      	cmp	r3, #0
 802afa8:	d012      	beq.n	802afd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802afaa:	687b      	ldr	r3, [r7, #4]
 802afac:	3324      	adds	r3, #36	; 0x24
 802afae:	4618      	mov	r0, r3
 802afb0:	f000 fe3c 	bl	802bc2c <xTaskRemoveFromEventList>
 802afb4:	4603      	mov	r3, r0
 802afb6:	2b00      	cmp	r3, #0
 802afb8:	d001      	beq.n	802afbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 802afba:	f000 ff17 	bl	802bdec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 802afbe:	7bfb      	ldrb	r3, [r7, #15]
 802afc0:	3b01      	subs	r3, #1
 802afc2:	b2db      	uxtb	r3, r3
 802afc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802afc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802afca:	2b00      	cmp	r3, #0
 802afcc:	dce9      	bgt.n	802afa2 <prvUnlockQueue+0x16>
 802afce:	e000      	b.n	802afd2 <prvUnlockQueue+0x46>
					break;
 802afd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802afd2:	687b      	ldr	r3, [r7, #4]
 802afd4:	22ff      	movs	r2, #255	; 0xff
 802afd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802afda:	f001 fdbb 	bl	802cb54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 802afde:	f001 fd89 	bl	802caf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802afe2:	687b      	ldr	r3, [r7, #4]
 802afe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802afe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802afea:	e011      	b.n	802b010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802afec:	687b      	ldr	r3, [r7, #4]
 802afee:	691b      	ldr	r3, [r3, #16]
 802aff0:	2b00      	cmp	r3, #0
 802aff2:	d012      	beq.n	802b01a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802aff4:	687b      	ldr	r3, [r7, #4]
 802aff6:	3310      	adds	r3, #16
 802aff8:	4618      	mov	r0, r3
 802affa:	f000 fe17 	bl	802bc2c <xTaskRemoveFromEventList>
 802affe:	4603      	mov	r3, r0
 802b000:	2b00      	cmp	r3, #0
 802b002:	d001      	beq.n	802b008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802b004:	f000 fef2 	bl	802bdec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802b008:	7bbb      	ldrb	r3, [r7, #14]
 802b00a:	3b01      	subs	r3, #1
 802b00c:	b2db      	uxtb	r3, r3
 802b00e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 802b010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802b014:	2b00      	cmp	r3, #0
 802b016:	dce9      	bgt.n	802afec <prvUnlockQueue+0x60>
 802b018:	e000      	b.n	802b01c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802b01a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 802b01c:	687b      	ldr	r3, [r7, #4]
 802b01e:	22ff      	movs	r2, #255	; 0xff
 802b020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 802b024:	f001 fd96 	bl	802cb54 <vPortExitCritical>
}
 802b028:	bf00      	nop
 802b02a:	3710      	adds	r7, #16
 802b02c:	46bd      	mov	sp, r7
 802b02e:	bd80      	pop	{r7, pc}

0802b030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 802b030:	b580      	push	{r7, lr}
 802b032:	b084      	sub	sp, #16
 802b034:	af00      	add	r7, sp, #0
 802b036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802b038:	f001 fd5c 	bl	802caf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 802b03c:	687b      	ldr	r3, [r7, #4]
 802b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b040:	2b00      	cmp	r3, #0
 802b042:	d102      	bne.n	802b04a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802b044:	2301      	movs	r3, #1
 802b046:	60fb      	str	r3, [r7, #12]
 802b048:	e001      	b.n	802b04e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802b04a:	2300      	movs	r3, #0
 802b04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802b04e:	f001 fd81 	bl	802cb54 <vPortExitCritical>

	return xReturn;
 802b052:	68fb      	ldr	r3, [r7, #12]
}
 802b054:	4618      	mov	r0, r3
 802b056:	3710      	adds	r7, #16
 802b058:	46bd      	mov	sp, r7
 802b05a:	bd80      	pop	{r7, pc}

0802b05c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 802b05c:	b580      	push	{r7, lr}
 802b05e:	b084      	sub	sp, #16
 802b060:	af00      	add	r7, sp, #0
 802b062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802b064:	f001 fd46 	bl	802caf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802b068:	687b      	ldr	r3, [r7, #4]
 802b06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b06c:	687b      	ldr	r3, [r7, #4]
 802b06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b070:	429a      	cmp	r2, r3
 802b072:	d102      	bne.n	802b07a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 802b074:	2301      	movs	r3, #1
 802b076:	60fb      	str	r3, [r7, #12]
 802b078:	e001      	b.n	802b07e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 802b07a:	2300      	movs	r3, #0
 802b07c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 802b07e:	f001 fd69 	bl	802cb54 <vPortExitCritical>

	return xReturn;
 802b082:	68fb      	ldr	r3, [r7, #12]
}
 802b084:	4618      	mov	r0, r3
 802b086:	3710      	adds	r7, #16
 802b088:	46bd      	mov	sp, r7
 802b08a:	bd80      	pop	{r7, pc}

0802b08c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 802b08c:	b580      	push	{r7, lr}
 802b08e:	b084      	sub	sp, #16
 802b090:	af00      	add	r7, sp, #0
 802b092:	6078      	str	r0, [r7, #4]
 802b094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802b096:	2300      	movs	r3, #0
 802b098:	60fb      	str	r3, [r7, #12]
 802b09a:	e01e      	b.n	802b0da <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 802b09c:	4a13      	ldr	r2, [pc, #76]	; (802b0ec <vQueueAddToRegistry+0x60>)
 802b09e:	68fb      	ldr	r3, [r7, #12]
 802b0a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802b0a4:	2b00      	cmp	r3, #0
 802b0a6:	d115      	bne.n	802b0d4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 802b0a8:	4910      	ldr	r1, [pc, #64]	; (802b0ec <vQueueAddToRegistry+0x60>)
 802b0aa:	68fb      	ldr	r3, [r7, #12]
 802b0ac:	683a      	ldr	r2, [r7, #0]
 802b0ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802b0b2:	4a0e      	ldr	r2, [pc, #56]	; (802b0ec <vQueueAddToRegistry+0x60>)
 802b0b4:	68fb      	ldr	r3, [r7, #12]
 802b0b6:	00db      	lsls	r3, r3, #3
 802b0b8:	4413      	add	r3, r2
 802b0ba:	687a      	ldr	r2, [r7, #4]
 802b0bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 802b0be:	687b      	ldr	r3, [r7, #4]
 802b0c0:	4618      	mov	r0, r3
 802b0c2:	f003 fa73 	bl	802e5ac <SEGGER_SYSVIEW_ShrinkId>
 802b0c6:	4601      	mov	r1, r0
 802b0c8:	683b      	ldr	r3, [r7, #0]
 802b0ca:	461a      	mov	r2, r3
 802b0cc:	2071      	movs	r0, #113	; 0x71
 802b0ce:	f002 fd61 	bl	802db94 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 802b0d2:	e006      	b.n	802b0e2 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802b0d4:	68fb      	ldr	r3, [r7, #12]
 802b0d6:	3301      	adds	r3, #1
 802b0d8:	60fb      	str	r3, [r7, #12]
 802b0da:	68fb      	ldr	r3, [r7, #12]
 802b0dc:	2b07      	cmp	r3, #7
 802b0de:	d9dd      	bls.n	802b09c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 802b0e0:	bf00      	nop
 802b0e2:	bf00      	nop
 802b0e4:	3710      	adds	r7, #16
 802b0e6:	46bd      	mov	sp, r7
 802b0e8:	bd80      	pop	{r7, pc}
 802b0ea:	bf00      	nop
 802b0ec:	2001ed68 	.word	0x2001ed68

0802b0f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802b0f0:	b580      	push	{r7, lr}
 802b0f2:	b086      	sub	sp, #24
 802b0f4:	af00      	add	r7, sp, #0
 802b0f6:	60f8      	str	r0, [r7, #12]
 802b0f8:	60b9      	str	r1, [r7, #8]
 802b0fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 802b0fc:	68fb      	ldr	r3, [r7, #12]
 802b0fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 802b100:	f001 fcf8 	bl	802caf4 <vPortEnterCritical>
 802b104:	697b      	ldr	r3, [r7, #20]
 802b106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802b10a:	b25b      	sxtb	r3, r3
 802b10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b110:	d103      	bne.n	802b11a <vQueueWaitForMessageRestricted+0x2a>
 802b112:	697b      	ldr	r3, [r7, #20]
 802b114:	2200      	movs	r2, #0
 802b116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802b11a:	697b      	ldr	r3, [r7, #20]
 802b11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802b120:	b25b      	sxtb	r3, r3
 802b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b126:	d103      	bne.n	802b130 <vQueueWaitForMessageRestricted+0x40>
 802b128:	697b      	ldr	r3, [r7, #20]
 802b12a:	2200      	movs	r2, #0
 802b12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802b130:	f001 fd10 	bl	802cb54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802b134:	697b      	ldr	r3, [r7, #20]
 802b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b138:	2b00      	cmp	r3, #0
 802b13a:	d106      	bne.n	802b14a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802b13c:	697b      	ldr	r3, [r7, #20]
 802b13e:	3324      	adds	r3, #36	; 0x24
 802b140:	687a      	ldr	r2, [r7, #4]
 802b142:	68b9      	ldr	r1, [r7, #8]
 802b144:	4618      	mov	r0, r3
 802b146:	f000 fd43 	bl	802bbd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802b14a:	6978      	ldr	r0, [r7, #20]
 802b14c:	f7ff ff1e 	bl	802af8c <prvUnlockQueue>
	}
 802b150:	bf00      	nop
 802b152:	3718      	adds	r7, #24
 802b154:	46bd      	mov	sp, r7
 802b156:	bd80      	pop	{r7, pc}

0802b158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802b158:	b580      	push	{r7, lr}
 802b15a:	b08e      	sub	sp, #56	; 0x38
 802b15c:	af04      	add	r7, sp, #16
 802b15e:	60f8      	str	r0, [r7, #12]
 802b160:	60b9      	str	r1, [r7, #8]
 802b162:	607a      	str	r2, [r7, #4]
 802b164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802b166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b168:	2b00      	cmp	r3, #0
 802b16a:	d10a      	bne.n	802b182 <xTaskCreateStatic+0x2a>
	__asm volatile
 802b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b170:	f383 8811 	msr	BASEPRI, r3
 802b174:	f3bf 8f6f 	isb	sy
 802b178:	f3bf 8f4f 	dsb	sy
 802b17c:	623b      	str	r3, [r7, #32]
}
 802b17e:	bf00      	nop
 802b180:	e7fe      	b.n	802b180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 802b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b184:	2b00      	cmp	r3, #0
 802b186:	d10a      	bne.n	802b19e <xTaskCreateStatic+0x46>
	__asm volatile
 802b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b18c:	f383 8811 	msr	BASEPRI, r3
 802b190:	f3bf 8f6f 	isb	sy
 802b194:	f3bf 8f4f 	dsb	sy
 802b198:	61fb      	str	r3, [r7, #28]
}
 802b19a:	bf00      	nop
 802b19c:	e7fe      	b.n	802b19c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802b19e:	23cc      	movs	r3, #204	; 0xcc
 802b1a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 802b1a2:	693b      	ldr	r3, [r7, #16]
 802b1a4:	2bcc      	cmp	r3, #204	; 0xcc
 802b1a6:	d00a      	beq.n	802b1be <xTaskCreateStatic+0x66>
	__asm volatile
 802b1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b1ac:	f383 8811 	msr	BASEPRI, r3
 802b1b0:	f3bf 8f6f 	isb	sy
 802b1b4:	f3bf 8f4f 	dsb	sy
 802b1b8:	61bb      	str	r3, [r7, #24]
}
 802b1ba:	bf00      	nop
 802b1bc:	e7fe      	b.n	802b1bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 802b1be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 802b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b1c2:	2b00      	cmp	r3, #0
 802b1c4:	d01e      	beq.n	802b204 <xTaskCreateStatic+0xac>
 802b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b1c8:	2b00      	cmp	r3, #0
 802b1ca:	d01b      	beq.n	802b204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b1ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 802b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802b1d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 802b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1d8:	2202      	movs	r2, #2
 802b1da:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 802b1de:	2300      	movs	r3, #0
 802b1e0:	9303      	str	r3, [sp, #12]
 802b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1e4:	9302      	str	r3, [sp, #8]
 802b1e6:	f107 0314 	add.w	r3, r7, #20
 802b1ea:	9301      	str	r3, [sp, #4]
 802b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b1ee:	9300      	str	r3, [sp, #0]
 802b1f0:	683b      	ldr	r3, [r7, #0]
 802b1f2:	687a      	ldr	r2, [r7, #4]
 802b1f4:	68b9      	ldr	r1, [r7, #8]
 802b1f6:	68f8      	ldr	r0, [r7, #12]
 802b1f8:	f000 f850 	bl	802b29c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802b1fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b1fe:	f000 f8f3 	bl	802b3e8 <prvAddNewTaskToReadyList>
 802b202:	e001      	b.n	802b208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 802b204:	2300      	movs	r3, #0
 802b206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802b208:	697b      	ldr	r3, [r7, #20]
	}
 802b20a:	4618      	mov	r0, r3
 802b20c:	3728      	adds	r7, #40	; 0x28
 802b20e:	46bd      	mov	sp, r7
 802b210:	bd80      	pop	{r7, pc}

0802b212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 802b212:	b580      	push	{r7, lr}
 802b214:	b08c      	sub	sp, #48	; 0x30
 802b216:	af04      	add	r7, sp, #16
 802b218:	60f8      	str	r0, [r7, #12]
 802b21a:	60b9      	str	r1, [r7, #8]
 802b21c:	603b      	str	r3, [r7, #0]
 802b21e:	4613      	mov	r3, r2
 802b220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 802b222:	88fb      	ldrh	r3, [r7, #6]
 802b224:	009b      	lsls	r3, r3, #2
 802b226:	4618      	mov	r0, r3
 802b228:	f001 fd86 	bl	802cd38 <pvPortMalloc>
 802b22c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 802b22e:	697b      	ldr	r3, [r7, #20]
 802b230:	2b00      	cmp	r3, #0
 802b232:	d00e      	beq.n	802b252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 802b234:	20cc      	movs	r0, #204	; 0xcc
 802b236:	f001 fd7f 	bl	802cd38 <pvPortMalloc>
 802b23a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802b23c:	69fb      	ldr	r3, [r7, #28]
 802b23e:	2b00      	cmp	r3, #0
 802b240:	d003      	beq.n	802b24a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 802b242:	69fb      	ldr	r3, [r7, #28]
 802b244:	697a      	ldr	r2, [r7, #20]
 802b246:	631a      	str	r2, [r3, #48]	; 0x30
 802b248:	e005      	b.n	802b256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802b24a:	6978      	ldr	r0, [r7, #20]
 802b24c:	f001 fe40 	bl	802ced0 <vPortFree>
 802b250:	e001      	b.n	802b256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 802b252:	2300      	movs	r3, #0
 802b254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802b256:	69fb      	ldr	r3, [r7, #28]
 802b258:	2b00      	cmp	r3, #0
 802b25a:	d017      	beq.n	802b28c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802b25c:	69fb      	ldr	r3, [r7, #28]
 802b25e:	2200      	movs	r2, #0
 802b260:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 802b264:	88fa      	ldrh	r2, [r7, #6]
 802b266:	2300      	movs	r3, #0
 802b268:	9303      	str	r3, [sp, #12]
 802b26a:	69fb      	ldr	r3, [r7, #28]
 802b26c:	9302      	str	r3, [sp, #8]
 802b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b270:	9301      	str	r3, [sp, #4]
 802b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b274:	9300      	str	r3, [sp, #0]
 802b276:	683b      	ldr	r3, [r7, #0]
 802b278:	68b9      	ldr	r1, [r7, #8]
 802b27a:	68f8      	ldr	r0, [r7, #12]
 802b27c:	f000 f80e 	bl	802b29c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802b280:	69f8      	ldr	r0, [r7, #28]
 802b282:	f000 f8b1 	bl	802b3e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802b286:	2301      	movs	r3, #1
 802b288:	61bb      	str	r3, [r7, #24]
 802b28a:	e002      	b.n	802b292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802b28c:	f04f 33ff 	mov.w	r3, #4294967295
 802b290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 802b292:	69bb      	ldr	r3, [r7, #24]
	}
 802b294:	4618      	mov	r0, r3
 802b296:	3720      	adds	r7, #32
 802b298:	46bd      	mov	sp, r7
 802b29a:	bd80      	pop	{r7, pc}

0802b29c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 802b29c:	b580      	push	{r7, lr}
 802b29e:	b088      	sub	sp, #32
 802b2a0:	af00      	add	r7, sp, #0
 802b2a2:	60f8      	str	r0, [r7, #12]
 802b2a4:	60b9      	str	r1, [r7, #8]
 802b2a6:	607a      	str	r2, [r7, #4]
 802b2a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b2ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802b2ae:	687b      	ldr	r3, [r7, #4]
 802b2b0:	009b      	lsls	r3, r3, #2
 802b2b2:	461a      	mov	r2, r3
 802b2b4:	21a5      	movs	r1, #165	; 0xa5
 802b2b6:	f003 fb3b 	bl	802e930 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b2bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b2be:	687b      	ldr	r3, [r7, #4]
 802b2c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802b2c4:	3b01      	subs	r3, #1
 802b2c6:	009b      	lsls	r3, r3, #2
 802b2c8:	4413      	add	r3, r2
 802b2ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802b2cc:	69bb      	ldr	r3, [r7, #24]
 802b2ce:	f023 0307 	bic.w	r3, r3, #7
 802b2d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 802b2d4:	69bb      	ldr	r3, [r7, #24]
 802b2d6:	f003 0307 	and.w	r3, r3, #7
 802b2da:	2b00      	cmp	r3, #0
 802b2dc:	d00a      	beq.n	802b2f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 802b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b2e2:	f383 8811 	msr	BASEPRI, r3
 802b2e6:	f3bf 8f6f 	isb	sy
 802b2ea:	f3bf 8f4f 	dsb	sy
 802b2ee:	617b      	str	r3, [r7, #20]
}
 802b2f0:	bf00      	nop
 802b2f2:	e7fe      	b.n	802b2f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 802b2f4:	68bb      	ldr	r3, [r7, #8]
 802b2f6:	2b00      	cmp	r3, #0
 802b2f8:	d01f      	beq.n	802b33a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b2fa:	2300      	movs	r3, #0
 802b2fc:	61fb      	str	r3, [r7, #28]
 802b2fe:	e012      	b.n	802b326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802b300:	68ba      	ldr	r2, [r7, #8]
 802b302:	69fb      	ldr	r3, [r7, #28]
 802b304:	4413      	add	r3, r2
 802b306:	7819      	ldrb	r1, [r3, #0]
 802b308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b30a:	69fb      	ldr	r3, [r7, #28]
 802b30c:	4413      	add	r3, r2
 802b30e:	3334      	adds	r3, #52	; 0x34
 802b310:	460a      	mov	r2, r1
 802b312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 802b314:	68ba      	ldr	r2, [r7, #8]
 802b316:	69fb      	ldr	r3, [r7, #28]
 802b318:	4413      	add	r3, r2
 802b31a:	781b      	ldrb	r3, [r3, #0]
 802b31c:	2b00      	cmp	r3, #0
 802b31e:	d006      	beq.n	802b32e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802b320:	69fb      	ldr	r3, [r7, #28]
 802b322:	3301      	adds	r3, #1
 802b324:	61fb      	str	r3, [r7, #28]
 802b326:	69fb      	ldr	r3, [r7, #28]
 802b328:	2b1f      	cmp	r3, #31
 802b32a:	d9e9      	bls.n	802b300 <prvInitialiseNewTask+0x64>
 802b32c:	e000      	b.n	802b330 <prvInitialiseNewTask+0x94>
			{
				break;
 802b32e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b332:	2200      	movs	r2, #0
 802b334:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 802b338:	e003      	b.n	802b342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b33c:	2200      	movs	r2, #0
 802b33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b344:	2b37      	cmp	r3, #55	; 0x37
 802b346:	d901      	bls.n	802b34c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802b348:	2337      	movs	r3, #55	; 0x37
 802b34a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b356:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 802b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b35a:	2200      	movs	r2, #0
 802b35c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b360:	3304      	adds	r3, #4
 802b362:	4618      	mov	r0, r3
 802b364:	f7fe ffd0 	bl	802a308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b36a:	3318      	adds	r3, #24
 802b36c:	4618      	mov	r0, r3
 802b36e:	f7fe ffcb 	bl	802a308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 802b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b37a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 802b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 802b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b38a:	2200      	movs	r2, #0
 802b38c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b392:	2200      	movs	r2, #0
 802b394:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 802b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b39a:	3364      	adds	r3, #100	; 0x64
 802b39c:	2260      	movs	r2, #96	; 0x60
 802b39e:	2100      	movs	r1, #0
 802b3a0:	4618      	mov	r0, r3
 802b3a2:	f003 fac5 	bl	802e930 <memset>
 802b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b3a8:	4a0c      	ldr	r2, [pc, #48]	; (802b3dc <prvInitialiseNewTask+0x140>)
 802b3aa:	669a      	str	r2, [r3, #104]	; 0x68
 802b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b3ae:	4a0c      	ldr	r2, [pc, #48]	; (802b3e0 <prvInitialiseNewTask+0x144>)
 802b3b0:	66da      	str	r2, [r3, #108]	; 0x6c
 802b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b3b4:	4a0b      	ldr	r2, [pc, #44]	; (802b3e4 <prvInitialiseNewTask+0x148>)
 802b3b6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 802b3b8:	683a      	ldr	r2, [r7, #0]
 802b3ba:	68f9      	ldr	r1, [r7, #12]
 802b3bc:	69b8      	ldr	r0, [r7, #24]
 802b3be:	f001 fa69 	bl	802c894 <pxPortInitialiseStack>
 802b3c2:	4602      	mov	r2, r0
 802b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b3c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 802b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b3ca:	2b00      	cmp	r3, #0
 802b3cc:	d002      	beq.n	802b3d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b3d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b3d4:	bf00      	nop
 802b3d6:	3720      	adds	r7, #32
 802b3d8:	46bd      	mov	sp, r7
 802b3da:	bd80      	pop	{r7, pc}
 802b3dc:	0802fd14 	.word	0x0802fd14
 802b3e0:	0802fd34 	.word	0x0802fd34
 802b3e4:	0802fcf4 	.word	0x0802fcf4

0802b3e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802b3e8:	b5b0      	push	{r4, r5, r7, lr}
 802b3ea:	b084      	sub	sp, #16
 802b3ec:	af02      	add	r7, sp, #8
 802b3ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 802b3f0:	f001 fb80 	bl	802caf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 802b3f4:	4b3c      	ldr	r3, [pc, #240]	; (802b4e8 <prvAddNewTaskToReadyList+0x100>)
 802b3f6:	681b      	ldr	r3, [r3, #0]
 802b3f8:	3301      	adds	r3, #1
 802b3fa:	4a3b      	ldr	r2, [pc, #236]	; (802b4e8 <prvAddNewTaskToReadyList+0x100>)
 802b3fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802b3fe:	4b3b      	ldr	r3, [pc, #236]	; (802b4ec <prvAddNewTaskToReadyList+0x104>)
 802b400:	681b      	ldr	r3, [r3, #0]
 802b402:	2b00      	cmp	r3, #0
 802b404:	d109      	bne.n	802b41a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802b406:	4a39      	ldr	r2, [pc, #228]	; (802b4ec <prvAddNewTaskToReadyList+0x104>)
 802b408:	687b      	ldr	r3, [r7, #4]
 802b40a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802b40c:	4b36      	ldr	r3, [pc, #216]	; (802b4e8 <prvAddNewTaskToReadyList+0x100>)
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	2b01      	cmp	r3, #1
 802b412:	d110      	bne.n	802b436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 802b414:	f000 fd0e 	bl	802be34 <prvInitialiseTaskLists>
 802b418:	e00d      	b.n	802b436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802b41a:	4b35      	ldr	r3, [pc, #212]	; (802b4f0 <prvAddNewTaskToReadyList+0x108>)
 802b41c:	681b      	ldr	r3, [r3, #0]
 802b41e:	2b00      	cmp	r3, #0
 802b420:	d109      	bne.n	802b436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 802b422:	4b32      	ldr	r3, [pc, #200]	; (802b4ec <prvAddNewTaskToReadyList+0x104>)
 802b424:	681b      	ldr	r3, [r3, #0]
 802b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b428:	687b      	ldr	r3, [r7, #4]
 802b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b42c:	429a      	cmp	r2, r3
 802b42e:	d802      	bhi.n	802b436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 802b430:	4a2e      	ldr	r2, [pc, #184]	; (802b4ec <prvAddNewTaskToReadyList+0x104>)
 802b432:	687b      	ldr	r3, [r7, #4]
 802b434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802b436:	4b2f      	ldr	r3, [pc, #188]	; (802b4f4 <prvAddNewTaskToReadyList+0x10c>)
 802b438:	681b      	ldr	r3, [r3, #0]
 802b43a:	3301      	adds	r3, #1
 802b43c:	4a2d      	ldr	r2, [pc, #180]	; (802b4f4 <prvAddNewTaskToReadyList+0x10c>)
 802b43e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 802b440:	4b2c      	ldr	r3, [pc, #176]	; (802b4f4 <prvAddNewTaskToReadyList+0x10c>)
 802b442:	681a      	ldr	r2, [r3, #0]
 802b444:	687b      	ldr	r3, [r7, #4]
 802b446:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 802b448:	687b      	ldr	r3, [r7, #4]
 802b44a:	2b00      	cmp	r3, #0
 802b44c:	d016      	beq.n	802b47c <prvAddNewTaskToReadyList+0x94>
 802b44e:	687b      	ldr	r3, [r7, #4]
 802b450:	4618      	mov	r0, r3
 802b452:	f002 ffe5 	bl	802e420 <SEGGER_SYSVIEW_OnTaskCreate>
 802b456:	6878      	ldr	r0, [r7, #4]
 802b458:	687b      	ldr	r3, [r7, #4]
 802b45a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802b45e:	687b      	ldr	r3, [r7, #4]
 802b460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b462:	687b      	ldr	r3, [r7, #4]
 802b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b466:	461d      	mov	r5, r3
 802b468:	687b      	ldr	r3, [r7, #4]
 802b46a:	681b      	ldr	r3, [r3, #0]
 802b46c:	461c      	mov	r4, r3
 802b46e:	687b      	ldr	r3, [r7, #4]
 802b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b472:	1ae3      	subs	r3, r4, r3
 802b474:	9300      	str	r3, [sp, #0]
 802b476:	462b      	mov	r3, r5
 802b478:	f7e9 fcac 	bl	8014dd4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 802b47c:	687b      	ldr	r3, [r7, #4]
 802b47e:	4618      	mov	r0, r3
 802b480:	f003 f852 	bl	802e528 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b484:	687b      	ldr	r3, [r7, #4]
 802b486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b488:	4b1b      	ldr	r3, [pc, #108]	; (802b4f8 <prvAddNewTaskToReadyList+0x110>)
 802b48a:	681b      	ldr	r3, [r3, #0]
 802b48c:	429a      	cmp	r2, r3
 802b48e:	d903      	bls.n	802b498 <prvAddNewTaskToReadyList+0xb0>
 802b490:	687b      	ldr	r3, [r7, #4]
 802b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b494:	4a18      	ldr	r2, [pc, #96]	; (802b4f8 <prvAddNewTaskToReadyList+0x110>)
 802b496:	6013      	str	r3, [r2, #0]
 802b498:	687b      	ldr	r3, [r7, #4]
 802b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b49c:	4613      	mov	r3, r2
 802b49e:	009b      	lsls	r3, r3, #2
 802b4a0:	4413      	add	r3, r2
 802b4a2:	009b      	lsls	r3, r3, #2
 802b4a4:	4a15      	ldr	r2, [pc, #84]	; (802b4fc <prvAddNewTaskToReadyList+0x114>)
 802b4a6:	441a      	add	r2, r3
 802b4a8:	687b      	ldr	r3, [r7, #4]
 802b4aa:	3304      	adds	r3, #4
 802b4ac:	4619      	mov	r1, r3
 802b4ae:	4610      	mov	r0, r2
 802b4b0:	f7fe ff37 	bl	802a322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802b4b4:	f001 fb4e 	bl	802cb54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 802b4b8:	4b0d      	ldr	r3, [pc, #52]	; (802b4f0 <prvAddNewTaskToReadyList+0x108>)
 802b4ba:	681b      	ldr	r3, [r3, #0]
 802b4bc:	2b00      	cmp	r3, #0
 802b4be:	d00e      	beq.n	802b4de <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 802b4c0:	4b0a      	ldr	r3, [pc, #40]	; (802b4ec <prvAddNewTaskToReadyList+0x104>)
 802b4c2:	681b      	ldr	r3, [r3, #0]
 802b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b4c6:	687b      	ldr	r3, [r7, #4]
 802b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b4ca:	429a      	cmp	r2, r3
 802b4cc:	d207      	bcs.n	802b4de <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 802b4ce:	4b0c      	ldr	r3, [pc, #48]	; (802b500 <prvAddNewTaskToReadyList+0x118>)
 802b4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b4d4:	601a      	str	r2, [r3, #0]
 802b4d6:	f3bf 8f4f 	dsb	sy
 802b4da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b4de:	bf00      	nop
 802b4e0:	3708      	adds	r7, #8
 802b4e2:	46bd      	mov	sp, r7
 802b4e4:	bdb0      	pop	{r4, r5, r7, pc}
 802b4e6:	bf00      	nop
 802b4e8:	200025a4 	.word	0x200025a4
 802b4ec:	200020d0 	.word	0x200020d0
 802b4f0:	200025b0 	.word	0x200025b0
 802b4f4:	200025c0 	.word	0x200025c0
 802b4f8:	200025ac 	.word	0x200025ac
 802b4fc:	200020d4 	.word	0x200020d4
 802b500:	e000ed04 	.word	0xe000ed04

0802b504 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 802b504:	b580      	push	{r7, lr}
 802b506:	b08a      	sub	sp, #40	; 0x28
 802b508:	af00      	add	r7, sp, #0
 802b50a:	6078      	str	r0, [r7, #4]
 802b50c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 802b50e:	2300      	movs	r3, #0
 802b510:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 802b512:	687b      	ldr	r3, [r7, #4]
 802b514:	2b00      	cmp	r3, #0
 802b516:	d10a      	bne.n	802b52e <vTaskDelayUntil+0x2a>
	__asm volatile
 802b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b51c:	f383 8811 	msr	BASEPRI, r3
 802b520:	f3bf 8f6f 	isb	sy
 802b524:	f3bf 8f4f 	dsb	sy
 802b528:	617b      	str	r3, [r7, #20]
}
 802b52a:	bf00      	nop
 802b52c:	e7fe      	b.n	802b52c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 802b52e:	683b      	ldr	r3, [r7, #0]
 802b530:	2b00      	cmp	r3, #0
 802b532:	d10a      	bne.n	802b54a <vTaskDelayUntil+0x46>
	__asm volatile
 802b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b538:	f383 8811 	msr	BASEPRI, r3
 802b53c:	f3bf 8f6f 	isb	sy
 802b540:	f3bf 8f4f 	dsb	sy
 802b544:	613b      	str	r3, [r7, #16]
}
 802b546:	bf00      	nop
 802b548:	e7fe      	b.n	802b548 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 802b54a:	4b2b      	ldr	r3, [pc, #172]	; (802b5f8 <vTaskDelayUntil+0xf4>)
 802b54c:	681b      	ldr	r3, [r3, #0]
 802b54e:	2b00      	cmp	r3, #0
 802b550:	d00a      	beq.n	802b568 <vTaskDelayUntil+0x64>
	__asm volatile
 802b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b556:	f383 8811 	msr	BASEPRI, r3
 802b55a:	f3bf 8f6f 	isb	sy
 802b55e:	f3bf 8f4f 	dsb	sy
 802b562:	60fb      	str	r3, [r7, #12]
}
 802b564:	bf00      	nop
 802b566:	e7fe      	b.n	802b566 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 802b568:	f000 f906 	bl	802b778 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 802b56c:	4b23      	ldr	r3, [pc, #140]	; (802b5fc <vTaskDelayUntil+0xf8>)
 802b56e:	681b      	ldr	r3, [r3, #0]
 802b570:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 802b572:	687b      	ldr	r3, [r7, #4]
 802b574:	681b      	ldr	r3, [r3, #0]
 802b576:	683a      	ldr	r2, [r7, #0]
 802b578:	4413      	add	r3, r2
 802b57a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 802b57c:	687b      	ldr	r3, [r7, #4]
 802b57e:	681b      	ldr	r3, [r3, #0]
 802b580:	6a3a      	ldr	r2, [r7, #32]
 802b582:	429a      	cmp	r2, r3
 802b584:	d20b      	bcs.n	802b59e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 802b586:	687b      	ldr	r3, [r7, #4]
 802b588:	681b      	ldr	r3, [r3, #0]
 802b58a:	69fa      	ldr	r2, [r7, #28]
 802b58c:	429a      	cmp	r2, r3
 802b58e:	d211      	bcs.n	802b5b4 <vTaskDelayUntil+0xb0>
 802b590:	69fa      	ldr	r2, [r7, #28]
 802b592:	6a3b      	ldr	r3, [r7, #32]
 802b594:	429a      	cmp	r2, r3
 802b596:	d90d      	bls.n	802b5b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b598:	2301      	movs	r3, #1
 802b59a:	627b      	str	r3, [r7, #36]	; 0x24
 802b59c:	e00a      	b.n	802b5b4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 802b59e:	687b      	ldr	r3, [r7, #4]
 802b5a0:	681b      	ldr	r3, [r3, #0]
 802b5a2:	69fa      	ldr	r2, [r7, #28]
 802b5a4:	429a      	cmp	r2, r3
 802b5a6:	d303      	bcc.n	802b5b0 <vTaskDelayUntil+0xac>
 802b5a8:	69fa      	ldr	r2, [r7, #28]
 802b5aa:	6a3b      	ldr	r3, [r7, #32]
 802b5ac:	429a      	cmp	r2, r3
 802b5ae:	d901      	bls.n	802b5b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 802b5b0:	2301      	movs	r3, #1
 802b5b2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802b5b4:	687b      	ldr	r3, [r7, #4]
 802b5b6:	69fa      	ldr	r2, [r7, #28]
 802b5b8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 802b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b5bc:	2b00      	cmp	r3, #0
 802b5be:	d009      	beq.n	802b5d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 802b5c0:	2024      	movs	r0, #36	; 0x24
 802b5c2:	f002 fa8d 	bl	802dae0 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 802b5c6:	69fa      	ldr	r2, [r7, #28]
 802b5c8:	6a3b      	ldr	r3, [r7, #32]
 802b5ca:	1ad3      	subs	r3, r2, r3
 802b5cc:	2100      	movs	r1, #0
 802b5ce:	4618      	mov	r0, r3
 802b5d0:	f000 fdbe 	bl	802c150 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 802b5d4:	f000 f8de 	bl	802b794 <xTaskResumeAll>
 802b5d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b5da:	69bb      	ldr	r3, [r7, #24]
 802b5dc:	2b00      	cmp	r3, #0
 802b5de:	d107      	bne.n	802b5f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 802b5e0:	4b07      	ldr	r3, [pc, #28]	; (802b600 <vTaskDelayUntil+0xfc>)
 802b5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b5e6:	601a      	str	r2, [r3, #0]
 802b5e8:	f3bf 8f4f 	dsb	sy
 802b5ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b5f0:	bf00      	nop
 802b5f2:	3728      	adds	r7, #40	; 0x28
 802b5f4:	46bd      	mov	sp, r7
 802b5f6:	bd80      	pop	{r7, pc}
 802b5f8:	200025cc 	.word	0x200025cc
 802b5fc:	200025a8 	.word	0x200025a8
 802b600:	e000ed04 	.word	0xe000ed04

0802b604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 802b604:	b580      	push	{r7, lr}
 802b606:	b084      	sub	sp, #16
 802b608:	af00      	add	r7, sp, #0
 802b60a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 802b60c:	2300      	movs	r3, #0
 802b60e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 802b610:	687b      	ldr	r3, [r7, #4]
 802b612:	2b00      	cmp	r3, #0
 802b614:	d01b      	beq.n	802b64e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802b616:	4b15      	ldr	r3, [pc, #84]	; (802b66c <vTaskDelay+0x68>)
 802b618:	681b      	ldr	r3, [r3, #0]
 802b61a:	2b00      	cmp	r3, #0
 802b61c:	d00a      	beq.n	802b634 <vTaskDelay+0x30>
	__asm volatile
 802b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b622:	f383 8811 	msr	BASEPRI, r3
 802b626:	f3bf 8f6f 	isb	sy
 802b62a:	f3bf 8f4f 	dsb	sy
 802b62e:	60bb      	str	r3, [r7, #8]
}
 802b630:	bf00      	nop
 802b632:	e7fe      	b.n	802b632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 802b634:	f000 f8a0 	bl	802b778 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 802b638:	6879      	ldr	r1, [r7, #4]
 802b63a:	2023      	movs	r0, #35	; 0x23
 802b63c:	f002 fa6e 	bl	802db1c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802b640:	2100      	movs	r1, #0
 802b642:	6878      	ldr	r0, [r7, #4]
 802b644:	f000 fd84 	bl	802c150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 802b648:	f000 f8a4 	bl	802b794 <xTaskResumeAll>
 802b64c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802b64e:	68fb      	ldr	r3, [r7, #12]
 802b650:	2b00      	cmp	r3, #0
 802b652:	d107      	bne.n	802b664 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 802b654:	4b06      	ldr	r3, [pc, #24]	; (802b670 <vTaskDelay+0x6c>)
 802b656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b65a:	601a      	str	r2, [r3, #0]
 802b65c:	f3bf 8f4f 	dsb	sy
 802b660:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 802b664:	bf00      	nop
 802b666:	3710      	adds	r7, #16
 802b668:	46bd      	mov	sp, r7
 802b66a:	bd80      	pop	{r7, pc}
 802b66c:	200025cc 	.word	0x200025cc
 802b670:	e000ed04 	.word	0xe000ed04

0802b674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 802b674:	b580      	push	{r7, lr}
 802b676:	b08a      	sub	sp, #40	; 0x28
 802b678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802b67a:	2300      	movs	r3, #0
 802b67c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802b67e:	2300      	movs	r3, #0
 802b680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802b682:	463a      	mov	r2, r7
 802b684:	1d39      	adds	r1, r7, #4
 802b686:	f107 0308 	add.w	r3, r7, #8
 802b68a:	4618      	mov	r0, r3
 802b68c:	f7fe fde8 	bl	802a260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 802b690:	6839      	ldr	r1, [r7, #0]
 802b692:	687b      	ldr	r3, [r7, #4]
 802b694:	68ba      	ldr	r2, [r7, #8]
 802b696:	9202      	str	r2, [sp, #8]
 802b698:	9301      	str	r3, [sp, #4]
 802b69a:	2300      	movs	r3, #0
 802b69c:	9300      	str	r3, [sp, #0]
 802b69e:	2300      	movs	r3, #0
 802b6a0:	460a      	mov	r2, r1
 802b6a2:	492d      	ldr	r1, [pc, #180]	; (802b758 <vTaskStartScheduler+0xe4>)
 802b6a4:	482d      	ldr	r0, [pc, #180]	; (802b75c <vTaskStartScheduler+0xe8>)
 802b6a6:	f7ff fd57 	bl	802b158 <xTaskCreateStatic>
 802b6aa:	4603      	mov	r3, r0
 802b6ac:	4a2c      	ldr	r2, [pc, #176]	; (802b760 <vTaskStartScheduler+0xec>)
 802b6ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 802b6b0:	4b2b      	ldr	r3, [pc, #172]	; (802b760 <vTaskStartScheduler+0xec>)
 802b6b2:	681b      	ldr	r3, [r3, #0]
 802b6b4:	2b00      	cmp	r3, #0
 802b6b6:	d002      	beq.n	802b6be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 802b6b8:	2301      	movs	r3, #1
 802b6ba:	617b      	str	r3, [r7, #20]
 802b6bc:	e001      	b.n	802b6c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802b6be:	2300      	movs	r3, #0
 802b6c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802b6c2:	697b      	ldr	r3, [r7, #20]
 802b6c4:	2b01      	cmp	r3, #1
 802b6c6:	d102      	bne.n	802b6ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 802b6c8:	f000 fd96 	bl	802c1f8 <xTimerCreateTimerTask>
 802b6cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802b6ce:	697b      	ldr	r3, [r7, #20]
 802b6d0:	2b01      	cmp	r3, #1
 802b6d2:	d12e      	bne.n	802b732 <vTaskStartScheduler+0xbe>
	__asm volatile
 802b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b6d8:	f383 8811 	msr	BASEPRI, r3
 802b6dc:	f3bf 8f6f 	isb	sy
 802b6e0:	f3bf 8f4f 	dsb	sy
 802b6e4:	613b      	str	r3, [r7, #16]
}
 802b6e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802b6e8:	4b1e      	ldr	r3, [pc, #120]	; (802b764 <vTaskStartScheduler+0xf0>)
 802b6ea:	681b      	ldr	r3, [r3, #0]
 802b6ec:	3364      	adds	r3, #100	; 0x64
 802b6ee:	4a1e      	ldr	r2, [pc, #120]	; (802b768 <vTaskStartScheduler+0xf4>)
 802b6f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802b6f2:	4b1e      	ldr	r3, [pc, #120]	; (802b76c <vTaskStartScheduler+0xf8>)
 802b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 802b6f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802b6fa:	4b1d      	ldr	r3, [pc, #116]	; (802b770 <vTaskStartScheduler+0xfc>)
 802b6fc:	2201      	movs	r2, #1
 802b6fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802b700:	4b1c      	ldr	r3, [pc, #112]	; (802b774 <vTaskStartScheduler+0x100>)
 802b702:	2200      	movs	r2, #0
 802b704:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 802b706:	4b17      	ldr	r3, [pc, #92]	; (802b764 <vTaskStartScheduler+0xf0>)
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	3334      	adds	r3, #52	; 0x34
 802b70c:	2205      	movs	r2, #5
 802b70e:	4912      	ldr	r1, [pc, #72]	; (802b758 <vTaskStartScheduler+0xe4>)
 802b710:	4618      	mov	r0, r3
 802b712:	f003 f8f1 	bl	802e8f8 <memcmp>
 802b716:	4603      	mov	r3, r0
 802b718:	2b00      	cmp	r3, #0
 802b71a:	d005      	beq.n	802b728 <vTaskStartScheduler+0xb4>
 802b71c:	4b11      	ldr	r3, [pc, #68]	; (802b764 <vTaskStartScheduler+0xf0>)
 802b71e:	681b      	ldr	r3, [r3, #0]
 802b720:	4618      	mov	r0, r3
 802b722:	f002 febf 	bl	802e4a4 <SEGGER_SYSVIEW_OnTaskStartExec>
 802b726:	e001      	b.n	802b72c <vTaskStartScheduler+0xb8>
 802b728:	f002 fe5e 	bl	802e3e8 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802b72c:	f001 f940 	bl	802c9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802b730:	e00e      	b.n	802b750 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802b732:	697b      	ldr	r3, [r7, #20]
 802b734:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b738:	d10a      	bne.n	802b750 <vTaskStartScheduler+0xdc>
	__asm volatile
 802b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b73e:	f383 8811 	msr	BASEPRI, r3
 802b742:	f3bf 8f6f 	isb	sy
 802b746:	f3bf 8f4f 	dsb	sy
 802b74a:	60fb      	str	r3, [r7, #12]
}
 802b74c:	bf00      	nop
 802b74e:	e7fe      	b.n	802b74e <vTaskStartScheduler+0xda>
}
 802b750:	bf00      	nop
 802b752:	3718      	adds	r7, #24
 802b754:	46bd      	mov	sp, r7
 802b756:	bd80      	pop	{r7, pc}
 802b758:	0802f654 	.word	0x0802f654
 802b75c:	0802be05 	.word	0x0802be05
 802b760:	200025c8 	.word	0x200025c8
 802b764:	200020d0 	.word	0x200020d0
 802b768:	20001444 	.word	0x20001444
 802b76c:	200025c4 	.word	0x200025c4
 802b770:	200025b0 	.word	0x200025b0
 802b774:	200025a8 	.word	0x200025a8

0802b778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 802b778:	b480      	push	{r7}
 802b77a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802b77c:	4b04      	ldr	r3, [pc, #16]	; (802b790 <vTaskSuspendAll+0x18>)
 802b77e:	681b      	ldr	r3, [r3, #0]
 802b780:	3301      	adds	r3, #1
 802b782:	4a03      	ldr	r2, [pc, #12]	; (802b790 <vTaskSuspendAll+0x18>)
 802b784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802b786:	bf00      	nop
 802b788:	46bd      	mov	sp, r7
 802b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b78e:	4770      	bx	lr
 802b790:	200025cc 	.word	0x200025cc

0802b794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802b794:	b580      	push	{r7, lr}
 802b796:	b084      	sub	sp, #16
 802b798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802b79a:	2300      	movs	r3, #0
 802b79c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802b79e:	2300      	movs	r3, #0
 802b7a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802b7a2:	4b44      	ldr	r3, [pc, #272]	; (802b8b4 <xTaskResumeAll+0x120>)
 802b7a4:	681b      	ldr	r3, [r3, #0]
 802b7a6:	2b00      	cmp	r3, #0
 802b7a8:	d10a      	bne.n	802b7c0 <xTaskResumeAll+0x2c>
	__asm volatile
 802b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b7ae:	f383 8811 	msr	BASEPRI, r3
 802b7b2:	f3bf 8f6f 	isb	sy
 802b7b6:	f3bf 8f4f 	dsb	sy
 802b7ba:	603b      	str	r3, [r7, #0]
}
 802b7bc:	bf00      	nop
 802b7be:	e7fe      	b.n	802b7be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 802b7c0:	f001 f998 	bl	802caf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802b7c4:	4b3b      	ldr	r3, [pc, #236]	; (802b8b4 <xTaskResumeAll+0x120>)
 802b7c6:	681b      	ldr	r3, [r3, #0]
 802b7c8:	3b01      	subs	r3, #1
 802b7ca:	4a3a      	ldr	r2, [pc, #232]	; (802b8b4 <xTaskResumeAll+0x120>)
 802b7cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b7ce:	4b39      	ldr	r3, [pc, #228]	; (802b8b4 <xTaskResumeAll+0x120>)
 802b7d0:	681b      	ldr	r3, [r3, #0]
 802b7d2:	2b00      	cmp	r3, #0
 802b7d4:	d166      	bne.n	802b8a4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802b7d6:	4b38      	ldr	r3, [pc, #224]	; (802b8b8 <xTaskResumeAll+0x124>)
 802b7d8:	681b      	ldr	r3, [r3, #0]
 802b7da:	2b00      	cmp	r3, #0
 802b7dc:	d062      	beq.n	802b8a4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b7de:	e033      	b.n	802b848 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b7e0:	4b36      	ldr	r3, [pc, #216]	; (802b8bc <xTaskResumeAll+0x128>)
 802b7e2:	68db      	ldr	r3, [r3, #12]
 802b7e4:	68db      	ldr	r3, [r3, #12]
 802b7e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b7e8:	68fb      	ldr	r3, [r7, #12]
 802b7ea:	3318      	adds	r3, #24
 802b7ec:	4618      	mov	r0, r3
 802b7ee:	f7fe fdf5 	bl	802a3dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b7f2:	68fb      	ldr	r3, [r7, #12]
 802b7f4:	3304      	adds	r3, #4
 802b7f6:	4618      	mov	r0, r3
 802b7f8:	f7fe fdf0 	bl	802a3dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802b7fc:	68fb      	ldr	r3, [r7, #12]
 802b7fe:	4618      	mov	r0, r3
 802b800:	f002 fe92 	bl	802e528 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b804:	68fb      	ldr	r3, [r7, #12]
 802b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b808:	4b2d      	ldr	r3, [pc, #180]	; (802b8c0 <xTaskResumeAll+0x12c>)
 802b80a:	681b      	ldr	r3, [r3, #0]
 802b80c:	429a      	cmp	r2, r3
 802b80e:	d903      	bls.n	802b818 <xTaskResumeAll+0x84>
 802b810:	68fb      	ldr	r3, [r7, #12]
 802b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b814:	4a2a      	ldr	r2, [pc, #168]	; (802b8c0 <xTaskResumeAll+0x12c>)
 802b816:	6013      	str	r3, [r2, #0]
 802b818:	68fb      	ldr	r3, [r7, #12]
 802b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b81c:	4613      	mov	r3, r2
 802b81e:	009b      	lsls	r3, r3, #2
 802b820:	4413      	add	r3, r2
 802b822:	009b      	lsls	r3, r3, #2
 802b824:	4a27      	ldr	r2, [pc, #156]	; (802b8c4 <xTaskResumeAll+0x130>)
 802b826:	441a      	add	r2, r3
 802b828:	68fb      	ldr	r3, [r7, #12]
 802b82a:	3304      	adds	r3, #4
 802b82c:	4619      	mov	r1, r3
 802b82e:	4610      	mov	r0, r2
 802b830:	f7fe fd77 	bl	802a322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802b834:	68fb      	ldr	r3, [r7, #12]
 802b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b838:	4b23      	ldr	r3, [pc, #140]	; (802b8c8 <xTaskResumeAll+0x134>)
 802b83a:	681b      	ldr	r3, [r3, #0]
 802b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b83e:	429a      	cmp	r2, r3
 802b840:	d302      	bcc.n	802b848 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 802b842:	4b22      	ldr	r3, [pc, #136]	; (802b8cc <xTaskResumeAll+0x138>)
 802b844:	2201      	movs	r2, #1
 802b846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802b848:	4b1c      	ldr	r3, [pc, #112]	; (802b8bc <xTaskResumeAll+0x128>)
 802b84a:	681b      	ldr	r3, [r3, #0]
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	d1c7      	bne.n	802b7e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802b850:	68fb      	ldr	r3, [r7, #12]
 802b852:	2b00      	cmp	r3, #0
 802b854:	d001      	beq.n	802b85a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802b856:	f000 fbc7 	bl	802bfe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 802b85a:	4b1d      	ldr	r3, [pc, #116]	; (802b8d0 <xTaskResumeAll+0x13c>)
 802b85c:	681b      	ldr	r3, [r3, #0]
 802b85e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 802b860:	687b      	ldr	r3, [r7, #4]
 802b862:	2b00      	cmp	r3, #0
 802b864:	d010      	beq.n	802b888 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802b866:	f000 f859 	bl	802b91c <xTaskIncrementTick>
 802b86a:	4603      	mov	r3, r0
 802b86c:	2b00      	cmp	r3, #0
 802b86e:	d002      	beq.n	802b876 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 802b870:	4b16      	ldr	r3, [pc, #88]	; (802b8cc <xTaskResumeAll+0x138>)
 802b872:	2201      	movs	r2, #1
 802b874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802b876:	687b      	ldr	r3, [r7, #4]
 802b878:	3b01      	subs	r3, #1
 802b87a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 802b87c:	687b      	ldr	r3, [r7, #4]
 802b87e:	2b00      	cmp	r3, #0
 802b880:	d1f1      	bne.n	802b866 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 802b882:	4b13      	ldr	r3, [pc, #76]	; (802b8d0 <xTaskResumeAll+0x13c>)
 802b884:	2200      	movs	r2, #0
 802b886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802b888:	4b10      	ldr	r3, [pc, #64]	; (802b8cc <xTaskResumeAll+0x138>)
 802b88a:	681b      	ldr	r3, [r3, #0]
 802b88c:	2b00      	cmp	r3, #0
 802b88e:	d009      	beq.n	802b8a4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802b890:	2301      	movs	r3, #1
 802b892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802b894:	4b0f      	ldr	r3, [pc, #60]	; (802b8d4 <xTaskResumeAll+0x140>)
 802b896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b89a:	601a      	str	r2, [r3, #0]
 802b89c:	f3bf 8f4f 	dsb	sy
 802b8a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802b8a4:	f001 f956 	bl	802cb54 <vPortExitCritical>

	return xAlreadyYielded;
 802b8a8:	68bb      	ldr	r3, [r7, #8]
}
 802b8aa:	4618      	mov	r0, r3
 802b8ac:	3710      	adds	r7, #16
 802b8ae:	46bd      	mov	sp, r7
 802b8b0:	bd80      	pop	{r7, pc}
 802b8b2:	bf00      	nop
 802b8b4:	200025cc 	.word	0x200025cc
 802b8b8:	200025a4 	.word	0x200025a4
 802b8bc:	20002564 	.word	0x20002564
 802b8c0:	200025ac 	.word	0x200025ac
 802b8c4:	200020d4 	.word	0x200020d4
 802b8c8:	200020d0 	.word	0x200020d0
 802b8cc:	200025b8 	.word	0x200025b8
 802b8d0:	200025b4 	.word	0x200025b4
 802b8d4:	e000ed04 	.word	0xe000ed04

0802b8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802b8d8:	b480      	push	{r7}
 802b8da:	b083      	sub	sp, #12
 802b8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802b8de:	4b05      	ldr	r3, [pc, #20]	; (802b8f4 <xTaskGetTickCount+0x1c>)
 802b8e0:	681b      	ldr	r3, [r3, #0]
 802b8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802b8e4:	687b      	ldr	r3, [r7, #4]
}
 802b8e6:	4618      	mov	r0, r3
 802b8e8:	370c      	adds	r7, #12
 802b8ea:	46bd      	mov	sp, r7
 802b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8f0:	4770      	bx	lr
 802b8f2:	bf00      	nop
 802b8f4:	200025a8 	.word	0x200025a8

0802b8f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802b8f8:	b580      	push	{r7, lr}
 802b8fa:	b082      	sub	sp, #8
 802b8fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802b8fe:	f001 f9db 	bl	802ccb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802b902:	2300      	movs	r3, #0
 802b904:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802b906:	4b04      	ldr	r3, [pc, #16]	; (802b918 <xTaskGetTickCountFromISR+0x20>)
 802b908:	681b      	ldr	r3, [r3, #0]
 802b90a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802b90c:	683b      	ldr	r3, [r7, #0]
}
 802b90e:	4618      	mov	r0, r3
 802b910:	3708      	adds	r7, #8
 802b912:	46bd      	mov	sp, r7
 802b914:	bd80      	pop	{r7, pc}
 802b916:	bf00      	nop
 802b918:	200025a8 	.word	0x200025a8

0802b91c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 802b91c:	b580      	push	{r7, lr}
 802b91e:	b086      	sub	sp, #24
 802b920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802b922:	2300      	movs	r3, #0
 802b924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802b926:	4b51      	ldr	r3, [pc, #324]	; (802ba6c <xTaskIncrementTick+0x150>)
 802b928:	681b      	ldr	r3, [r3, #0]
 802b92a:	2b00      	cmp	r3, #0
 802b92c:	f040 8093 	bne.w	802ba56 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802b930:	4b4f      	ldr	r3, [pc, #316]	; (802ba70 <xTaskIncrementTick+0x154>)
 802b932:	681b      	ldr	r3, [r3, #0]
 802b934:	3301      	adds	r3, #1
 802b936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802b938:	4a4d      	ldr	r2, [pc, #308]	; (802ba70 <xTaskIncrementTick+0x154>)
 802b93a:	693b      	ldr	r3, [r7, #16]
 802b93c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802b93e:	693b      	ldr	r3, [r7, #16]
 802b940:	2b00      	cmp	r3, #0
 802b942:	d120      	bne.n	802b986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 802b944:	4b4b      	ldr	r3, [pc, #300]	; (802ba74 <xTaskIncrementTick+0x158>)
 802b946:	681b      	ldr	r3, [r3, #0]
 802b948:	681b      	ldr	r3, [r3, #0]
 802b94a:	2b00      	cmp	r3, #0
 802b94c:	d00a      	beq.n	802b964 <xTaskIncrementTick+0x48>
	__asm volatile
 802b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b952:	f383 8811 	msr	BASEPRI, r3
 802b956:	f3bf 8f6f 	isb	sy
 802b95a:	f3bf 8f4f 	dsb	sy
 802b95e:	603b      	str	r3, [r7, #0]
}
 802b960:	bf00      	nop
 802b962:	e7fe      	b.n	802b962 <xTaskIncrementTick+0x46>
 802b964:	4b43      	ldr	r3, [pc, #268]	; (802ba74 <xTaskIncrementTick+0x158>)
 802b966:	681b      	ldr	r3, [r3, #0]
 802b968:	60fb      	str	r3, [r7, #12]
 802b96a:	4b43      	ldr	r3, [pc, #268]	; (802ba78 <xTaskIncrementTick+0x15c>)
 802b96c:	681b      	ldr	r3, [r3, #0]
 802b96e:	4a41      	ldr	r2, [pc, #260]	; (802ba74 <xTaskIncrementTick+0x158>)
 802b970:	6013      	str	r3, [r2, #0]
 802b972:	4a41      	ldr	r2, [pc, #260]	; (802ba78 <xTaskIncrementTick+0x15c>)
 802b974:	68fb      	ldr	r3, [r7, #12]
 802b976:	6013      	str	r3, [r2, #0]
 802b978:	4b40      	ldr	r3, [pc, #256]	; (802ba7c <xTaskIncrementTick+0x160>)
 802b97a:	681b      	ldr	r3, [r3, #0]
 802b97c:	3301      	adds	r3, #1
 802b97e:	4a3f      	ldr	r2, [pc, #252]	; (802ba7c <xTaskIncrementTick+0x160>)
 802b980:	6013      	str	r3, [r2, #0]
 802b982:	f000 fb31 	bl	802bfe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802b986:	4b3e      	ldr	r3, [pc, #248]	; (802ba80 <xTaskIncrementTick+0x164>)
 802b988:	681b      	ldr	r3, [r3, #0]
 802b98a:	693a      	ldr	r2, [r7, #16]
 802b98c:	429a      	cmp	r2, r3
 802b98e:	d34d      	bcc.n	802ba2c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802b990:	4b38      	ldr	r3, [pc, #224]	; (802ba74 <xTaskIncrementTick+0x158>)
 802b992:	681b      	ldr	r3, [r3, #0]
 802b994:	681b      	ldr	r3, [r3, #0]
 802b996:	2b00      	cmp	r3, #0
 802b998:	d104      	bne.n	802b9a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802b99a:	4b39      	ldr	r3, [pc, #228]	; (802ba80 <xTaskIncrementTick+0x164>)
 802b99c:	f04f 32ff 	mov.w	r2, #4294967295
 802b9a0:	601a      	str	r2, [r3, #0]
					break;
 802b9a2:	e043      	b.n	802ba2c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802b9a4:	4b33      	ldr	r3, [pc, #204]	; (802ba74 <xTaskIncrementTick+0x158>)
 802b9a6:	681b      	ldr	r3, [r3, #0]
 802b9a8:	68db      	ldr	r3, [r3, #12]
 802b9aa:	68db      	ldr	r3, [r3, #12]
 802b9ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802b9ae:	68bb      	ldr	r3, [r7, #8]
 802b9b0:	685b      	ldr	r3, [r3, #4]
 802b9b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802b9b4:	693a      	ldr	r2, [r7, #16]
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	429a      	cmp	r2, r3
 802b9ba:	d203      	bcs.n	802b9c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802b9bc:	4a30      	ldr	r2, [pc, #192]	; (802ba80 <xTaskIncrementTick+0x164>)
 802b9be:	687b      	ldr	r3, [r7, #4]
 802b9c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802b9c2:	e033      	b.n	802ba2c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802b9c4:	68bb      	ldr	r3, [r7, #8]
 802b9c6:	3304      	adds	r3, #4
 802b9c8:	4618      	mov	r0, r3
 802b9ca:	f7fe fd07 	bl	802a3dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802b9ce:	68bb      	ldr	r3, [r7, #8]
 802b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b9d2:	2b00      	cmp	r3, #0
 802b9d4:	d004      	beq.n	802b9e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802b9d6:	68bb      	ldr	r3, [r7, #8]
 802b9d8:	3318      	adds	r3, #24
 802b9da:	4618      	mov	r0, r3
 802b9dc:	f7fe fcfe 	bl	802a3dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802b9e0:	68bb      	ldr	r3, [r7, #8]
 802b9e2:	4618      	mov	r0, r3
 802b9e4:	f002 fda0 	bl	802e528 <SEGGER_SYSVIEW_OnTaskStartReady>
 802b9e8:	68bb      	ldr	r3, [r7, #8]
 802b9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b9ec:	4b25      	ldr	r3, [pc, #148]	; (802ba84 <xTaskIncrementTick+0x168>)
 802b9ee:	681b      	ldr	r3, [r3, #0]
 802b9f0:	429a      	cmp	r2, r3
 802b9f2:	d903      	bls.n	802b9fc <xTaskIncrementTick+0xe0>
 802b9f4:	68bb      	ldr	r3, [r7, #8]
 802b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b9f8:	4a22      	ldr	r2, [pc, #136]	; (802ba84 <xTaskIncrementTick+0x168>)
 802b9fa:	6013      	str	r3, [r2, #0]
 802b9fc:	68bb      	ldr	r3, [r7, #8]
 802b9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba00:	4613      	mov	r3, r2
 802ba02:	009b      	lsls	r3, r3, #2
 802ba04:	4413      	add	r3, r2
 802ba06:	009b      	lsls	r3, r3, #2
 802ba08:	4a1f      	ldr	r2, [pc, #124]	; (802ba88 <xTaskIncrementTick+0x16c>)
 802ba0a:	441a      	add	r2, r3
 802ba0c:	68bb      	ldr	r3, [r7, #8]
 802ba0e:	3304      	adds	r3, #4
 802ba10:	4619      	mov	r1, r3
 802ba12:	4610      	mov	r0, r2
 802ba14:	f7fe fc85 	bl	802a322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802ba18:	68bb      	ldr	r3, [r7, #8]
 802ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba1c:	4b1b      	ldr	r3, [pc, #108]	; (802ba8c <xTaskIncrementTick+0x170>)
 802ba1e:	681b      	ldr	r3, [r3, #0]
 802ba20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ba22:	429a      	cmp	r2, r3
 802ba24:	d3b4      	bcc.n	802b990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 802ba26:	2301      	movs	r3, #1
 802ba28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802ba2a:	e7b1      	b.n	802b990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802ba2c:	4b17      	ldr	r3, [pc, #92]	; (802ba8c <xTaskIncrementTick+0x170>)
 802ba2e:	681b      	ldr	r3, [r3, #0]
 802ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ba32:	4915      	ldr	r1, [pc, #84]	; (802ba88 <xTaskIncrementTick+0x16c>)
 802ba34:	4613      	mov	r3, r2
 802ba36:	009b      	lsls	r3, r3, #2
 802ba38:	4413      	add	r3, r2
 802ba3a:	009b      	lsls	r3, r3, #2
 802ba3c:	440b      	add	r3, r1
 802ba3e:	681b      	ldr	r3, [r3, #0]
 802ba40:	2b01      	cmp	r3, #1
 802ba42:	d901      	bls.n	802ba48 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 802ba44:	2301      	movs	r3, #1
 802ba46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 802ba48:	4b11      	ldr	r3, [pc, #68]	; (802ba90 <xTaskIncrementTick+0x174>)
 802ba4a:	681b      	ldr	r3, [r3, #0]
 802ba4c:	2b00      	cmp	r3, #0
 802ba4e:	d007      	beq.n	802ba60 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 802ba50:	2301      	movs	r3, #1
 802ba52:	617b      	str	r3, [r7, #20]
 802ba54:	e004      	b.n	802ba60 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 802ba56:	4b0f      	ldr	r3, [pc, #60]	; (802ba94 <xTaskIncrementTick+0x178>)
 802ba58:	681b      	ldr	r3, [r3, #0]
 802ba5a:	3301      	adds	r3, #1
 802ba5c:	4a0d      	ldr	r2, [pc, #52]	; (802ba94 <xTaskIncrementTick+0x178>)
 802ba5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 802ba60:	697b      	ldr	r3, [r7, #20]
}
 802ba62:	4618      	mov	r0, r3
 802ba64:	3718      	adds	r7, #24
 802ba66:	46bd      	mov	sp, r7
 802ba68:	bd80      	pop	{r7, pc}
 802ba6a:	bf00      	nop
 802ba6c:	200025cc 	.word	0x200025cc
 802ba70:	200025a8 	.word	0x200025a8
 802ba74:	2000255c 	.word	0x2000255c
 802ba78:	20002560 	.word	0x20002560
 802ba7c:	200025bc 	.word	0x200025bc
 802ba80:	200025c4 	.word	0x200025c4
 802ba84:	200025ac 	.word	0x200025ac
 802ba88:	200020d4 	.word	0x200020d4
 802ba8c:	200020d0 	.word	0x200020d0
 802ba90:	200025b8 	.word	0x200025b8
 802ba94:	200025b4 	.word	0x200025b4

0802ba98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802ba98:	b580      	push	{r7, lr}
 802ba9a:	b084      	sub	sp, #16
 802ba9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802ba9e:	4b33      	ldr	r3, [pc, #204]	; (802bb6c <vTaskSwitchContext+0xd4>)
 802baa0:	681b      	ldr	r3, [r3, #0]
 802baa2:	2b00      	cmp	r3, #0
 802baa4:	d003      	beq.n	802baae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802baa6:	4b32      	ldr	r3, [pc, #200]	; (802bb70 <vTaskSwitchContext+0xd8>)
 802baa8:	2201      	movs	r2, #1
 802baaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802baac:	e059      	b.n	802bb62 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 802baae:	4b30      	ldr	r3, [pc, #192]	; (802bb70 <vTaskSwitchContext+0xd8>)
 802bab0:	2200      	movs	r2, #0
 802bab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bab4:	4b2f      	ldr	r3, [pc, #188]	; (802bb74 <vTaskSwitchContext+0xdc>)
 802bab6:	681b      	ldr	r3, [r3, #0]
 802bab8:	60fb      	str	r3, [r7, #12]
 802baba:	e010      	b.n	802bade <vTaskSwitchContext+0x46>
 802babc:	68fb      	ldr	r3, [r7, #12]
 802babe:	2b00      	cmp	r3, #0
 802bac0:	d10a      	bne.n	802bad8 <vTaskSwitchContext+0x40>
	__asm volatile
 802bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bac6:	f383 8811 	msr	BASEPRI, r3
 802baca:	f3bf 8f6f 	isb	sy
 802bace:	f3bf 8f4f 	dsb	sy
 802bad2:	607b      	str	r3, [r7, #4]
}
 802bad4:	bf00      	nop
 802bad6:	e7fe      	b.n	802bad6 <vTaskSwitchContext+0x3e>
 802bad8:	68fb      	ldr	r3, [r7, #12]
 802bada:	3b01      	subs	r3, #1
 802badc:	60fb      	str	r3, [r7, #12]
 802bade:	4926      	ldr	r1, [pc, #152]	; (802bb78 <vTaskSwitchContext+0xe0>)
 802bae0:	68fa      	ldr	r2, [r7, #12]
 802bae2:	4613      	mov	r3, r2
 802bae4:	009b      	lsls	r3, r3, #2
 802bae6:	4413      	add	r3, r2
 802bae8:	009b      	lsls	r3, r3, #2
 802baea:	440b      	add	r3, r1
 802baec:	681b      	ldr	r3, [r3, #0]
 802baee:	2b00      	cmp	r3, #0
 802baf0:	d0e4      	beq.n	802babc <vTaskSwitchContext+0x24>
 802baf2:	68fa      	ldr	r2, [r7, #12]
 802baf4:	4613      	mov	r3, r2
 802baf6:	009b      	lsls	r3, r3, #2
 802baf8:	4413      	add	r3, r2
 802bafa:	009b      	lsls	r3, r3, #2
 802bafc:	4a1e      	ldr	r2, [pc, #120]	; (802bb78 <vTaskSwitchContext+0xe0>)
 802bafe:	4413      	add	r3, r2
 802bb00:	60bb      	str	r3, [r7, #8]
 802bb02:	68bb      	ldr	r3, [r7, #8]
 802bb04:	685b      	ldr	r3, [r3, #4]
 802bb06:	685a      	ldr	r2, [r3, #4]
 802bb08:	68bb      	ldr	r3, [r7, #8]
 802bb0a:	605a      	str	r2, [r3, #4]
 802bb0c:	68bb      	ldr	r3, [r7, #8]
 802bb0e:	685a      	ldr	r2, [r3, #4]
 802bb10:	68bb      	ldr	r3, [r7, #8]
 802bb12:	3308      	adds	r3, #8
 802bb14:	429a      	cmp	r2, r3
 802bb16:	d104      	bne.n	802bb22 <vTaskSwitchContext+0x8a>
 802bb18:	68bb      	ldr	r3, [r7, #8]
 802bb1a:	685b      	ldr	r3, [r3, #4]
 802bb1c:	685a      	ldr	r2, [r3, #4]
 802bb1e:	68bb      	ldr	r3, [r7, #8]
 802bb20:	605a      	str	r2, [r3, #4]
 802bb22:	68bb      	ldr	r3, [r7, #8]
 802bb24:	685b      	ldr	r3, [r3, #4]
 802bb26:	68db      	ldr	r3, [r3, #12]
 802bb28:	4a14      	ldr	r2, [pc, #80]	; (802bb7c <vTaskSwitchContext+0xe4>)
 802bb2a:	6013      	str	r3, [r2, #0]
 802bb2c:	4a11      	ldr	r2, [pc, #68]	; (802bb74 <vTaskSwitchContext+0xdc>)
 802bb2e:	68fb      	ldr	r3, [r7, #12]
 802bb30:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 802bb32:	4b12      	ldr	r3, [pc, #72]	; (802bb7c <vTaskSwitchContext+0xe4>)
 802bb34:	681b      	ldr	r3, [r3, #0]
 802bb36:	3334      	adds	r3, #52	; 0x34
 802bb38:	2205      	movs	r2, #5
 802bb3a:	4911      	ldr	r1, [pc, #68]	; (802bb80 <vTaskSwitchContext+0xe8>)
 802bb3c:	4618      	mov	r0, r3
 802bb3e:	f002 fedb 	bl	802e8f8 <memcmp>
 802bb42:	4603      	mov	r3, r0
 802bb44:	2b00      	cmp	r3, #0
 802bb46:	d005      	beq.n	802bb54 <vTaskSwitchContext+0xbc>
 802bb48:	4b0c      	ldr	r3, [pc, #48]	; (802bb7c <vTaskSwitchContext+0xe4>)
 802bb4a:	681b      	ldr	r3, [r3, #0]
 802bb4c:	4618      	mov	r0, r3
 802bb4e:	f002 fca9 	bl	802e4a4 <SEGGER_SYSVIEW_OnTaskStartExec>
 802bb52:	e001      	b.n	802bb58 <vTaskSwitchContext+0xc0>
 802bb54:	f002 fc48 	bl	802e3e8 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 802bb58:	4b08      	ldr	r3, [pc, #32]	; (802bb7c <vTaskSwitchContext+0xe4>)
 802bb5a:	681b      	ldr	r3, [r3, #0]
 802bb5c:	3364      	adds	r3, #100	; 0x64
 802bb5e:	4a09      	ldr	r2, [pc, #36]	; (802bb84 <vTaskSwitchContext+0xec>)
 802bb60:	6013      	str	r3, [r2, #0]
}
 802bb62:	bf00      	nop
 802bb64:	3710      	adds	r7, #16
 802bb66:	46bd      	mov	sp, r7
 802bb68:	bd80      	pop	{r7, pc}
 802bb6a:	bf00      	nop
 802bb6c:	200025cc 	.word	0x200025cc
 802bb70:	200025b8 	.word	0x200025b8
 802bb74:	200025ac 	.word	0x200025ac
 802bb78:	200020d4 	.word	0x200020d4
 802bb7c:	200020d0 	.word	0x200020d0
 802bb80:	0802f654 	.word	0x0802f654
 802bb84:	20001444 	.word	0x20001444

0802bb88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802bb88:	b580      	push	{r7, lr}
 802bb8a:	b084      	sub	sp, #16
 802bb8c:	af00      	add	r7, sp, #0
 802bb8e:	6078      	str	r0, [r7, #4]
 802bb90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802bb92:	687b      	ldr	r3, [r7, #4]
 802bb94:	2b00      	cmp	r3, #0
 802bb96:	d10a      	bne.n	802bbae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bb9c:	f383 8811 	msr	BASEPRI, r3
 802bba0:	f3bf 8f6f 	isb	sy
 802bba4:	f3bf 8f4f 	dsb	sy
 802bba8:	60fb      	str	r3, [r7, #12]
}
 802bbaa:	bf00      	nop
 802bbac:	e7fe      	b.n	802bbac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802bbae:	4b07      	ldr	r3, [pc, #28]	; (802bbcc <vTaskPlaceOnEventList+0x44>)
 802bbb0:	681b      	ldr	r3, [r3, #0]
 802bbb2:	3318      	adds	r3, #24
 802bbb4:	4619      	mov	r1, r3
 802bbb6:	6878      	ldr	r0, [r7, #4]
 802bbb8:	f7fe fbd7 	bl	802a36a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802bbbc:	2101      	movs	r1, #1
 802bbbe:	6838      	ldr	r0, [r7, #0]
 802bbc0:	f000 fac6 	bl	802c150 <prvAddCurrentTaskToDelayedList>
}
 802bbc4:	bf00      	nop
 802bbc6:	3710      	adds	r7, #16
 802bbc8:	46bd      	mov	sp, r7
 802bbca:	bd80      	pop	{r7, pc}
 802bbcc:	200020d0 	.word	0x200020d0

0802bbd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802bbd0:	b580      	push	{r7, lr}
 802bbd2:	b086      	sub	sp, #24
 802bbd4:	af00      	add	r7, sp, #0
 802bbd6:	60f8      	str	r0, [r7, #12]
 802bbd8:	60b9      	str	r1, [r7, #8]
 802bbda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802bbdc:	68fb      	ldr	r3, [r7, #12]
 802bbde:	2b00      	cmp	r3, #0
 802bbe0:	d10a      	bne.n	802bbf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bbe6:	f383 8811 	msr	BASEPRI, r3
 802bbea:	f3bf 8f6f 	isb	sy
 802bbee:	f3bf 8f4f 	dsb	sy
 802bbf2:	617b      	str	r3, [r7, #20]
}
 802bbf4:	bf00      	nop
 802bbf6:	e7fe      	b.n	802bbf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802bbf8:	4b0b      	ldr	r3, [pc, #44]	; (802bc28 <vTaskPlaceOnEventListRestricted+0x58>)
 802bbfa:	681b      	ldr	r3, [r3, #0]
 802bbfc:	3318      	adds	r3, #24
 802bbfe:	4619      	mov	r1, r3
 802bc00:	68f8      	ldr	r0, [r7, #12]
 802bc02:	f7fe fb8e 	bl	802a322 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802bc06:	687b      	ldr	r3, [r7, #4]
 802bc08:	2b00      	cmp	r3, #0
 802bc0a:	d002      	beq.n	802bc12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 802bc0c:	f04f 33ff 	mov.w	r3, #4294967295
 802bc10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 802bc12:	2024      	movs	r0, #36	; 0x24
 802bc14:	f001 ff64 	bl	802dae0 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802bc18:	6879      	ldr	r1, [r7, #4]
 802bc1a:	68b8      	ldr	r0, [r7, #8]
 802bc1c:	f000 fa98 	bl	802c150 <prvAddCurrentTaskToDelayedList>
	}
 802bc20:	bf00      	nop
 802bc22:	3718      	adds	r7, #24
 802bc24:	46bd      	mov	sp, r7
 802bc26:	bd80      	pop	{r7, pc}
 802bc28:	200020d0 	.word	0x200020d0

0802bc2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802bc2c:	b580      	push	{r7, lr}
 802bc2e:	b086      	sub	sp, #24
 802bc30:	af00      	add	r7, sp, #0
 802bc32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bc34:	687b      	ldr	r3, [r7, #4]
 802bc36:	68db      	ldr	r3, [r3, #12]
 802bc38:	68db      	ldr	r3, [r3, #12]
 802bc3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802bc3c:	693b      	ldr	r3, [r7, #16]
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	d10a      	bne.n	802bc58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bc46:	f383 8811 	msr	BASEPRI, r3
 802bc4a:	f3bf 8f6f 	isb	sy
 802bc4e:	f3bf 8f4f 	dsb	sy
 802bc52:	60fb      	str	r3, [r7, #12]
}
 802bc54:	bf00      	nop
 802bc56:	e7fe      	b.n	802bc56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802bc58:	693b      	ldr	r3, [r7, #16]
 802bc5a:	3318      	adds	r3, #24
 802bc5c:	4618      	mov	r0, r3
 802bc5e:	f7fe fbbd 	bl	802a3dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802bc62:	4b20      	ldr	r3, [pc, #128]	; (802bce4 <xTaskRemoveFromEventList+0xb8>)
 802bc64:	681b      	ldr	r3, [r3, #0]
 802bc66:	2b00      	cmp	r3, #0
 802bc68:	d121      	bne.n	802bcae <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802bc6a:	693b      	ldr	r3, [r7, #16]
 802bc6c:	3304      	adds	r3, #4
 802bc6e:	4618      	mov	r0, r3
 802bc70:	f7fe fbb4 	bl	802a3dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802bc74:	693b      	ldr	r3, [r7, #16]
 802bc76:	4618      	mov	r0, r3
 802bc78:	f002 fc56 	bl	802e528 <SEGGER_SYSVIEW_OnTaskStartReady>
 802bc7c:	693b      	ldr	r3, [r7, #16]
 802bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bc80:	4b19      	ldr	r3, [pc, #100]	; (802bce8 <xTaskRemoveFromEventList+0xbc>)
 802bc82:	681b      	ldr	r3, [r3, #0]
 802bc84:	429a      	cmp	r2, r3
 802bc86:	d903      	bls.n	802bc90 <xTaskRemoveFromEventList+0x64>
 802bc88:	693b      	ldr	r3, [r7, #16]
 802bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc8c:	4a16      	ldr	r2, [pc, #88]	; (802bce8 <xTaskRemoveFromEventList+0xbc>)
 802bc8e:	6013      	str	r3, [r2, #0]
 802bc90:	693b      	ldr	r3, [r7, #16]
 802bc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bc94:	4613      	mov	r3, r2
 802bc96:	009b      	lsls	r3, r3, #2
 802bc98:	4413      	add	r3, r2
 802bc9a:	009b      	lsls	r3, r3, #2
 802bc9c:	4a13      	ldr	r2, [pc, #76]	; (802bcec <xTaskRemoveFromEventList+0xc0>)
 802bc9e:	441a      	add	r2, r3
 802bca0:	693b      	ldr	r3, [r7, #16]
 802bca2:	3304      	adds	r3, #4
 802bca4:	4619      	mov	r1, r3
 802bca6:	4610      	mov	r0, r2
 802bca8:	f7fe fb3b 	bl	802a322 <vListInsertEnd>
 802bcac:	e005      	b.n	802bcba <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802bcae:	693b      	ldr	r3, [r7, #16]
 802bcb0:	3318      	adds	r3, #24
 802bcb2:	4619      	mov	r1, r3
 802bcb4:	480e      	ldr	r0, [pc, #56]	; (802bcf0 <xTaskRemoveFromEventList+0xc4>)
 802bcb6:	f7fe fb34 	bl	802a322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802bcba:	693b      	ldr	r3, [r7, #16]
 802bcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802bcbe:	4b0d      	ldr	r3, [pc, #52]	; (802bcf4 <xTaskRemoveFromEventList+0xc8>)
 802bcc0:	681b      	ldr	r3, [r3, #0]
 802bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bcc4:	429a      	cmp	r2, r3
 802bcc6:	d905      	bls.n	802bcd4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802bcc8:	2301      	movs	r3, #1
 802bcca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802bccc:	4b0a      	ldr	r3, [pc, #40]	; (802bcf8 <xTaskRemoveFromEventList+0xcc>)
 802bcce:	2201      	movs	r2, #1
 802bcd0:	601a      	str	r2, [r3, #0]
 802bcd2:	e001      	b.n	802bcd8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 802bcd4:	2300      	movs	r3, #0
 802bcd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802bcd8:	697b      	ldr	r3, [r7, #20]
}
 802bcda:	4618      	mov	r0, r3
 802bcdc:	3718      	adds	r7, #24
 802bcde:	46bd      	mov	sp, r7
 802bce0:	bd80      	pop	{r7, pc}
 802bce2:	bf00      	nop
 802bce4:	200025cc 	.word	0x200025cc
 802bce8:	200025ac 	.word	0x200025ac
 802bcec:	200020d4 	.word	0x200020d4
 802bcf0:	20002564 	.word	0x20002564
 802bcf4:	200020d0 	.word	0x200020d0
 802bcf8:	200025b8 	.word	0x200025b8

0802bcfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802bcfc:	b480      	push	{r7}
 802bcfe:	b083      	sub	sp, #12
 802bd00:	af00      	add	r7, sp, #0
 802bd02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802bd04:	4b06      	ldr	r3, [pc, #24]	; (802bd20 <vTaskInternalSetTimeOutState+0x24>)
 802bd06:	681a      	ldr	r2, [r3, #0]
 802bd08:	687b      	ldr	r3, [r7, #4]
 802bd0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802bd0c:	4b05      	ldr	r3, [pc, #20]	; (802bd24 <vTaskInternalSetTimeOutState+0x28>)
 802bd0e:	681a      	ldr	r2, [r3, #0]
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	605a      	str	r2, [r3, #4]
}
 802bd14:	bf00      	nop
 802bd16:	370c      	adds	r7, #12
 802bd18:	46bd      	mov	sp, r7
 802bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd1e:	4770      	bx	lr
 802bd20:	200025bc 	.word	0x200025bc
 802bd24:	200025a8 	.word	0x200025a8

0802bd28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802bd28:	b580      	push	{r7, lr}
 802bd2a:	b088      	sub	sp, #32
 802bd2c:	af00      	add	r7, sp, #0
 802bd2e:	6078      	str	r0, [r7, #4]
 802bd30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802bd32:	687b      	ldr	r3, [r7, #4]
 802bd34:	2b00      	cmp	r3, #0
 802bd36:	d10a      	bne.n	802bd4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bd3c:	f383 8811 	msr	BASEPRI, r3
 802bd40:	f3bf 8f6f 	isb	sy
 802bd44:	f3bf 8f4f 	dsb	sy
 802bd48:	613b      	str	r3, [r7, #16]
}
 802bd4a:	bf00      	nop
 802bd4c:	e7fe      	b.n	802bd4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802bd4e:	683b      	ldr	r3, [r7, #0]
 802bd50:	2b00      	cmp	r3, #0
 802bd52:	d10a      	bne.n	802bd6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bd58:	f383 8811 	msr	BASEPRI, r3
 802bd5c:	f3bf 8f6f 	isb	sy
 802bd60:	f3bf 8f4f 	dsb	sy
 802bd64:	60fb      	str	r3, [r7, #12]
}
 802bd66:	bf00      	nop
 802bd68:	e7fe      	b.n	802bd68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802bd6a:	f000 fec3 	bl	802caf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802bd6e:	4b1d      	ldr	r3, [pc, #116]	; (802bde4 <xTaskCheckForTimeOut+0xbc>)
 802bd70:	681b      	ldr	r3, [r3, #0]
 802bd72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802bd74:	687b      	ldr	r3, [r7, #4]
 802bd76:	685b      	ldr	r3, [r3, #4]
 802bd78:	69ba      	ldr	r2, [r7, #24]
 802bd7a:	1ad3      	subs	r3, r2, r3
 802bd7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802bd7e:	683b      	ldr	r3, [r7, #0]
 802bd80:	681b      	ldr	r3, [r3, #0]
 802bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bd86:	d102      	bne.n	802bd8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802bd88:	2300      	movs	r3, #0
 802bd8a:	61fb      	str	r3, [r7, #28]
 802bd8c:	e023      	b.n	802bdd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802bd8e:	687b      	ldr	r3, [r7, #4]
 802bd90:	681a      	ldr	r2, [r3, #0]
 802bd92:	4b15      	ldr	r3, [pc, #84]	; (802bde8 <xTaskCheckForTimeOut+0xc0>)
 802bd94:	681b      	ldr	r3, [r3, #0]
 802bd96:	429a      	cmp	r2, r3
 802bd98:	d007      	beq.n	802bdaa <xTaskCheckForTimeOut+0x82>
 802bd9a:	687b      	ldr	r3, [r7, #4]
 802bd9c:	685b      	ldr	r3, [r3, #4]
 802bd9e:	69ba      	ldr	r2, [r7, #24]
 802bda0:	429a      	cmp	r2, r3
 802bda2:	d302      	bcc.n	802bdaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802bda4:	2301      	movs	r3, #1
 802bda6:	61fb      	str	r3, [r7, #28]
 802bda8:	e015      	b.n	802bdd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802bdaa:	683b      	ldr	r3, [r7, #0]
 802bdac:	681b      	ldr	r3, [r3, #0]
 802bdae:	697a      	ldr	r2, [r7, #20]
 802bdb0:	429a      	cmp	r2, r3
 802bdb2:	d20b      	bcs.n	802bdcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802bdb4:	683b      	ldr	r3, [r7, #0]
 802bdb6:	681a      	ldr	r2, [r3, #0]
 802bdb8:	697b      	ldr	r3, [r7, #20]
 802bdba:	1ad2      	subs	r2, r2, r3
 802bdbc:	683b      	ldr	r3, [r7, #0]
 802bdbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802bdc0:	6878      	ldr	r0, [r7, #4]
 802bdc2:	f7ff ff9b 	bl	802bcfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802bdc6:	2300      	movs	r3, #0
 802bdc8:	61fb      	str	r3, [r7, #28]
 802bdca:	e004      	b.n	802bdd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802bdcc:	683b      	ldr	r3, [r7, #0]
 802bdce:	2200      	movs	r2, #0
 802bdd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802bdd2:	2301      	movs	r3, #1
 802bdd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802bdd6:	f000 febd 	bl	802cb54 <vPortExitCritical>

	return xReturn;
 802bdda:	69fb      	ldr	r3, [r7, #28]
}
 802bddc:	4618      	mov	r0, r3
 802bdde:	3720      	adds	r7, #32
 802bde0:	46bd      	mov	sp, r7
 802bde2:	bd80      	pop	{r7, pc}
 802bde4:	200025a8 	.word	0x200025a8
 802bde8:	200025bc 	.word	0x200025bc

0802bdec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802bdec:	b480      	push	{r7}
 802bdee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802bdf0:	4b03      	ldr	r3, [pc, #12]	; (802be00 <vTaskMissedYield+0x14>)
 802bdf2:	2201      	movs	r2, #1
 802bdf4:	601a      	str	r2, [r3, #0]
}
 802bdf6:	bf00      	nop
 802bdf8:	46bd      	mov	sp, r7
 802bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bdfe:	4770      	bx	lr
 802be00:	200025b8 	.word	0x200025b8

0802be04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802be04:	b580      	push	{r7, lr}
 802be06:	b082      	sub	sp, #8
 802be08:	af00      	add	r7, sp, #0
 802be0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802be0c:	f000 f852 	bl	802beb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802be10:	4b06      	ldr	r3, [pc, #24]	; (802be2c <prvIdleTask+0x28>)
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	2b01      	cmp	r3, #1
 802be16:	d9f9      	bls.n	802be0c <prvIdleTask+0x8>
			{
				taskYIELD();
 802be18:	4b05      	ldr	r3, [pc, #20]	; (802be30 <prvIdleTask+0x2c>)
 802be1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802be1e:	601a      	str	r2, [r3, #0]
 802be20:	f3bf 8f4f 	dsb	sy
 802be24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 802be28:	e7f0      	b.n	802be0c <prvIdleTask+0x8>
 802be2a:	bf00      	nop
 802be2c:	200020d4 	.word	0x200020d4
 802be30:	e000ed04 	.word	0xe000ed04

0802be34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802be34:	b580      	push	{r7, lr}
 802be36:	b082      	sub	sp, #8
 802be38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802be3a:	2300      	movs	r3, #0
 802be3c:	607b      	str	r3, [r7, #4]
 802be3e:	e00c      	b.n	802be5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802be40:	687a      	ldr	r2, [r7, #4]
 802be42:	4613      	mov	r3, r2
 802be44:	009b      	lsls	r3, r3, #2
 802be46:	4413      	add	r3, r2
 802be48:	009b      	lsls	r3, r3, #2
 802be4a:	4a12      	ldr	r2, [pc, #72]	; (802be94 <prvInitialiseTaskLists+0x60>)
 802be4c:	4413      	add	r3, r2
 802be4e:	4618      	mov	r0, r3
 802be50:	f7fe fa3a 	bl	802a2c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802be54:	687b      	ldr	r3, [r7, #4]
 802be56:	3301      	adds	r3, #1
 802be58:	607b      	str	r3, [r7, #4]
 802be5a:	687b      	ldr	r3, [r7, #4]
 802be5c:	2b37      	cmp	r3, #55	; 0x37
 802be5e:	d9ef      	bls.n	802be40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802be60:	480d      	ldr	r0, [pc, #52]	; (802be98 <prvInitialiseTaskLists+0x64>)
 802be62:	f7fe fa31 	bl	802a2c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802be66:	480d      	ldr	r0, [pc, #52]	; (802be9c <prvInitialiseTaskLists+0x68>)
 802be68:	f7fe fa2e 	bl	802a2c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802be6c:	480c      	ldr	r0, [pc, #48]	; (802bea0 <prvInitialiseTaskLists+0x6c>)
 802be6e:	f7fe fa2b 	bl	802a2c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802be72:	480c      	ldr	r0, [pc, #48]	; (802bea4 <prvInitialiseTaskLists+0x70>)
 802be74:	f7fe fa28 	bl	802a2c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802be78:	480b      	ldr	r0, [pc, #44]	; (802bea8 <prvInitialiseTaskLists+0x74>)
 802be7a:	f7fe fa25 	bl	802a2c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802be7e:	4b0b      	ldr	r3, [pc, #44]	; (802beac <prvInitialiseTaskLists+0x78>)
 802be80:	4a05      	ldr	r2, [pc, #20]	; (802be98 <prvInitialiseTaskLists+0x64>)
 802be82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802be84:	4b0a      	ldr	r3, [pc, #40]	; (802beb0 <prvInitialiseTaskLists+0x7c>)
 802be86:	4a05      	ldr	r2, [pc, #20]	; (802be9c <prvInitialiseTaskLists+0x68>)
 802be88:	601a      	str	r2, [r3, #0]
}
 802be8a:	bf00      	nop
 802be8c:	3708      	adds	r7, #8
 802be8e:	46bd      	mov	sp, r7
 802be90:	bd80      	pop	{r7, pc}
 802be92:	bf00      	nop
 802be94:	200020d4 	.word	0x200020d4
 802be98:	20002534 	.word	0x20002534
 802be9c:	20002548 	.word	0x20002548
 802bea0:	20002564 	.word	0x20002564
 802bea4:	20002578 	.word	0x20002578
 802bea8:	20002590 	.word	0x20002590
 802beac:	2000255c 	.word	0x2000255c
 802beb0:	20002560 	.word	0x20002560

0802beb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802beb4:	b580      	push	{r7, lr}
 802beb6:	b082      	sub	sp, #8
 802beb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802beba:	e019      	b.n	802bef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802bebc:	f000 fe1a 	bl	802caf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802bec0:	4b10      	ldr	r3, [pc, #64]	; (802bf04 <prvCheckTasksWaitingTermination+0x50>)
 802bec2:	68db      	ldr	r3, [r3, #12]
 802bec4:	68db      	ldr	r3, [r3, #12]
 802bec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	3304      	adds	r3, #4
 802becc:	4618      	mov	r0, r3
 802bece:	f7fe fa85 	bl	802a3dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 802bed2:	4b0d      	ldr	r3, [pc, #52]	; (802bf08 <prvCheckTasksWaitingTermination+0x54>)
 802bed4:	681b      	ldr	r3, [r3, #0]
 802bed6:	3b01      	subs	r3, #1
 802bed8:	4a0b      	ldr	r2, [pc, #44]	; (802bf08 <prvCheckTasksWaitingTermination+0x54>)
 802beda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802bedc:	4b0b      	ldr	r3, [pc, #44]	; (802bf0c <prvCheckTasksWaitingTermination+0x58>)
 802bede:	681b      	ldr	r3, [r3, #0]
 802bee0:	3b01      	subs	r3, #1
 802bee2:	4a0a      	ldr	r2, [pc, #40]	; (802bf0c <prvCheckTasksWaitingTermination+0x58>)
 802bee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802bee6:	f000 fe35 	bl	802cb54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802beea:	6878      	ldr	r0, [r7, #4]
 802beec:	f000 f848 	bl	802bf80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802bef0:	4b06      	ldr	r3, [pc, #24]	; (802bf0c <prvCheckTasksWaitingTermination+0x58>)
 802bef2:	681b      	ldr	r3, [r3, #0]
 802bef4:	2b00      	cmp	r3, #0
 802bef6:	d1e1      	bne.n	802bebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802bef8:	bf00      	nop
 802befa:	bf00      	nop
 802befc:	3708      	adds	r7, #8
 802befe:	46bd      	mov	sp, r7
 802bf00:	bd80      	pop	{r7, pc}
 802bf02:	bf00      	nop
 802bf04:	20002578 	.word	0x20002578
 802bf08:	200025a4 	.word	0x200025a4
 802bf0c:	2000258c 	.word	0x2000258c

0802bf10 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802bf10:	b480      	push	{r7}
 802bf12:	b085      	sub	sp, #20
 802bf14:	af00      	add	r7, sp, #0
 802bf16:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 802bf18:	2300      	movs	r3, #0
 802bf1a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bf1c:	e005      	b.n	802bf2a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802bf1e:	687b      	ldr	r3, [r7, #4]
 802bf20:	3301      	adds	r3, #1
 802bf22:	607b      	str	r3, [r7, #4]
			ulCount++;
 802bf24:	68fb      	ldr	r3, [r7, #12]
 802bf26:	3301      	adds	r3, #1
 802bf28:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802bf2a:	687b      	ldr	r3, [r7, #4]
 802bf2c:	781b      	ldrb	r3, [r3, #0]
 802bf2e:	2ba5      	cmp	r3, #165	; 0xa5
 802bf30:	d0f5      	beq.n	802bf1e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802bf32:	68fb      	ldr	r3, [r7, #12]
 802bf34:	089b      	lsrs	r3, r3, #2
 802bf36:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 802bf38:	68fb      	ldr	r3, [r7, #12]
 802bf3a:	b29b      	uxth	r3, r3
	}
 802bf3c:	4618      	mov	r0, r3
 802bf3e:	3714      	adds	r7, #20
 802bf40:	46bd      	mov	sp, r7
 802bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf46:	4770      	bx	lr

0802bf48 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 802bf48:	b580      	push	{r7, lr}
 802bf4a:	b086      	sub	sp, #24
 802bf4c:	af00      	add	r7, sp, #0
 802bf4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 802bf50:	687b      	ldr	r3, [r7, #4]
 802bf52:	2b00      	cmp	r3, #0
 802bf54:	d102      	bne.n	802bf5c <uxTaskGetStackHighWaterMark+0x14>
 802bf56:	4b09      	ldr	r3, [pc, #36]	; (802bf7c <uxTaskGetStackHighWaterMark+0x34>)
 802bf58:	681b      	ldr	r3, [r3, #0]
 802bf5a:	e000      	b.n	802bf5e <uxTaskGetStackHighWaterMark+0x16>
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 802bf60:	697b      	ldr	r3, [r7, #20]
 802bf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bf64:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802bf66:	6938      	ldr	r0, [r7, #16]
 802bf68:	f7ff ffd2 	bl	802bf10 <prvTaskCheckFreeStackSpace>
 802bf6c:	4603      	mov	r3, r0
 802bf6e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 802bf70:	68fb      	ldr	r3, [r7, #12]
	}
 802bf72:	4618      	mov	r0, r3
 802bf74:	3718      	adds	r7, #24
 802bf76:	46bd      	mov	sp, r7
 802bf78:	bd80      	pop	{r7, pc}
 802bf7a:	bf00      	nop
 802bf7c:	200020d0 	.word	0x200020d0

0802bf80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802bf80:	b580      	push	{r7, lr}
 802bf82:	b084      	sub	sp, #16
 802bf84:	af00      	add	r7, sp, #0
 802bf86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 802bf88:	687b      	ldr	r3, [r7, #4]
 802bf8a:	3364      	adds	r3, #100	; 0x64
 802bf8c:	4618      	mov	r0, r3
 802bf8e:	f002 fce5 	bl	802e95c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802bf92:	687b      	ldr	r3, [r7, #4]
 802bf94:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bf98:	2b00      	cmp	r3, #0
 802bf9a:	d108      	bne.n	802bfae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802bf9c:	687b      	ldr	r3, [r7, #4]
 802bf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bfa0:	4618      	mov	r0, r3
 802bfa2:	f000 ff95 	bl	802ced0 <vPortFree>
				vPortFree( pxTCB );
 802bfa6:	6878      	ldr	r0, [r7, #4]
 802bfa8:	f000 ff92 	bl	802ced0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802bfac:	e018      	b.n	802bfe0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802bfae:	687b      	ldr	r3, [r7, #4]
 802bfb0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bfb4:	2b01      	cmp	r3, #1
 802bfb6:	d103      	bne.n	802bfc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 802bfb8:	6878      	ldr	r0, [r7, #4]
 802bfba:	f000 ff89 	bl	802ced0 <vPortFree>
	}
 802bfbe:	e00f      	b.n	802bfe0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802bfc0:	687b      	ldr	r3, [r7, #4]
 802bfc2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 802bfc6:	2b02      	cmp	r3, #2
 802bfc8:	d00a      	beq.n	802bfe0 <prvDeleteTCB+0x60>
	__asm volatile
 802bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 802bfce:	f383 8811 	msr	BASEPRI, r3
 802bfd2:	f3bf 8f6f 	isb	sy
 802bfd6:	f3bf 8f4f 	dsb	sy
 802bfda:	60fb      	str	r3, [r7, #12]
}
 802bfdc:	bf00      	nop
 802bfde:	e7fe      	b.n	802bfde <prvDeleteTCB+0x5e>
	}
 802bfe0:	bf00      	nop
 802bfe2:	3710      	adds	r7, #16
 802bfe4:	46bd      	mov	sp, r7
 802bfe6:	bd80      	pop	{r7, pc}

0802bfe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802bfe8:	b480      	push	{r7}
 802bfea:	b083      	sub	sp, #12
 802bfec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802bfee:	4b0c      	ldr	r3, [pc, #48]	; (802c020 <prvResetNextTaskUnblockTime+0x38>)
 802bff0:	681b      	ldr	r3, [r3, #0]
 802bff2:	681b      	ldr	r3, [r3, #0]
 802bff4:	2b00      	cmp	r3, #0
 802bff6:	d104      	bne.n	802c002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802bff8:	4b0a      	ldr	r3, [pc, #40]	; (802c024 <prvResetNextTaskUnblockTime+0x3c>)
 802bffa:	f04f 32ff 	mov.w	r2, #4294967295
 802bffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 802c000:	e008      	b.n	802c014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c002:	4b07      	ldr	r3, [pc, #28]	; (802c020 <prvResetNextTaskUnblockTime+0x38>)
 802c004:	681b      	ldr	r3, [r3, #0]
 802c006:	68db      	ldr	r3, [r3, #12]
 802c008:	68db      	ldr	r3, [r3, #12]
 802c00a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802c00c:	687b      	ldr	r3, [r7, #4]
 802c00e:	685b      	ldr	r3, [r3, #4]
 802c010:	4a04      	ldr	r2, [pc, #16]	; (802c024 <prvResetNextTaskUnblockTime+0x3c>)
 802c012:	6013      	str	r3, [r2, #0]
}
 802c014:	bf00      	nop
 802c016:	370c      	adds	r7, #12
 802c018:	46bd      	mov	sp, r7
 802c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c01e:	4770      	bx	lr
 802c020:	2000255c 	.word	0x2000255c
 802c024:	200025c4 	.word	0x200025c4

0802c028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802c028:	b480      	push	{r7}
 802c02a:	b083      	sub	sp, #12
 802c02c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802c02e:	4b0b      	ldr	r3, [pc, #44]	; (802c05c <xTaskGetSchedulerState+0x34>)
 802c030:	681b      	ldr	r3, [r3, #0]
 802c032:	2b00      	cmp	r3, #0
 802c034:	d102      	bne.n	802c03c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802c036:	2301      	movs	r3, #1
 802c038:	607b      	str	r3, [r7, #4]
 802c03a:	e008      	b.n	802c04e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802c03c:	4b08      	ldr	r3, [pc, #32]	; (802c060 <xTaskGetSchedulerState+0x38>)
 802c03e:	681b      	ldr	r3, [r3, #0]
 802c040:	2b00      	cmp	r3, #0
 802c042:	d102      	bne.n	802c04a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802c044:	2302      	movs	r3, #2
 802c046:	607b      	str	r3, [r7, #4]
 802c048:	e001      	b.n	802c04e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802c04a:	2300      	movs	r3, #0
 802c04c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802c04e:	687b      	ldr	r3, [r7, #4]
	}
 802c050:	4618      	mov	r0, r3
 802c052:	370c      	adds	r7, #12
 802c054:	46bd      	mov	sp, r7
 802c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c05a:	4770      	bx	lr
 802c05c:	200025b0 	.word	0x200025b0
 802c060:	200025cc 	.word	0x200025cc

0802c064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802c064:	b580      	push	{r7, lr}
 802c066:	b086      	sub	sp, #24
 802c068:	af00      	add	r7, sp, #0
 802c06a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802c06c:	687b      	ldr	r3, [r7, #4]
 802c06e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802c070:	2300      	movs	r3, #0
 802c072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802c074:	687b      	ldr	r3, [r7, #4]
 802c076:	2b00      	cmp	r3, #0
 802c078:	d05f      	beq.n	802c13a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802c07a:	4b32      	ldr	r3, [pc, #200]	; (802c144 <xTaskPriorityDisinherit+0xe0>)
 802c07c:	681b      	ldr	r3, [r3, #0]
 802c07e:	693a      	ldr	r2, [r7, #16]
 802c080:	429a      	cmp	r2, r3
 802c082:	d00a      	beq.n	802c09a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c088:	f383 8811 	msr	BASEPRI, r3
 802c08c:	f3bf 8f6f 	isb	sy
 802c090:	f3bf 8f4f 	dsb	sy
 802c094:	60fb      	str	r3, [r7, #12]
}
 802c096:	bf00      	nop
 802c098:	e7fe      	b.n	802c098 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802c09a:	693b      	ldr	r3, [r7, #16]
 802c09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c09e:	2b00      	cmp	r3, #0
 802c0a0:	d10a      	bne.n	802c0b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c0a6:	f383 8811 	msr	BASEPRI, r3
 802c0aa:	f3bf 8f6f 	isb	sy
 802c0ae:	f3bf 8f4f 	dsb	sy
 802c0b2:	60bb      	str	r3, [r7, #8]
}
 802c0b4:	bf00      	nop
 802c0b6:	e7fe      	b.n	802c0b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 802c0b8:	693b      	ldr	r3, [r7, #16]
 802c0ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0bc:	1e5a      	subs	r2, r3, #1
 802c0be:	693b      	ldr	r3, [r7, #16]
 802c0c0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802c0c2:	693b      	ldr	r3, [r7, #16]
 802c0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c0c6:	693b      	ldr	r3, [r7, #16]
 802c0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c0ca:	429a      	cmp	r2, r3
 802c0cc:	d035      	beq.n	802c13a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802c0ce:	693b      	ldr	r3, [r7, #16]
 802c0d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0d2:	2b00      	cmp	r3, #0
 802c0d4:	d131      	bne.n	802c13a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802c0d6:	693b      	ldr	r3, [r7, #16]
 802c0d8:	3304      	adds	r3, #4
 802c0da:	4618      	mov	r0, r3
 802c0dc:	f7fe f97e 	bl	802a3dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 802c0e0:	687b      	ldr	r3, [r7, #4]
 802c0e2:	4619      	mov	r1, r3
 802c0e4:	204a      	movs	r0, #74	; 0x4a
 802c0e6:	f001 fd19 	bl	802db1c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802c0ea:	693b      	ldr	r3, [r7, #16]
 802c0ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802c0ee:	693b      	ldr	r3, [r7, #16]
 802c0f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802c0f2:	693b      	ldr	r3, [r7, #16]
 802c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c0f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802c0fa:	693b      	ldr	r3, [r7, #16]
 802c0fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802c0fe:	693b      	ldr	r3, [r7, #16]
 802c100:	4618      	mov	r0, r3
 802c102:	f002 fa11 	bl	802e528 <SEGGER_SYSVIEW_OnTaskStartReady>
 802c106:	693b      	ldr	r3, [r7, #16]
 802c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c10a:	4b0f      	ldr	r3, [pc, #60]	; (802c148 <xTaskPriorityDisinherit+0xe4>)
 802c10c:	681b      	ldr	r3, [r3, #0]
 802c10e:	429a      	cmp	r2, r3
 802c110:	d903      	bls.n	802c11a <xTaskPriorityDisinherit+0xb6>
 802c112:	693b      	ldr	r3, [r7, #16]
 802c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c116:	4a0c      	ldr	r2, [pc, #48]	; (802c148 <xTaskPriorityDisinherit+0xe4>)
 802c118:	6013      	str	r3, [r2, #0]
 802c11a:	693b      	ldr	r3, [r7, #16]
 802c11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c11e:	4613      	mov	r3, r2
 802c120:	009b      	lsls	r3, r3, #2
 802c122:	4413      	add	r3, r2
 802c124:	009b      	lsls	r3, r3, #2
 802c126:	4a09      	ldr	r2, [pc, #36]	; (802c14c <xTaskPriorityDisinherit+0xe8>)
 802c128:	441a      	add	r2, r3
 802c12a:	693b      	ldr	r3, [r7, #16]
 802c12c:	3304      	adds	r3, #4
 802c12e:	4619      	mov	r1, r3
 802c130:	4610      	mov	r0, r2
 802c132:	f7fe f8f6 	bl	802a322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802c136:	2301      	movs	r3, #1
 802c138:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802c13a:	697b      	ldr	r3, [r7, #20]
	}
 802c13c:	4618      	mov	r0, r3
 802c13e:	3718      	adds	r7, #24
 802c140:	46bd      	mov	sp, r7
 802c142:	bd80      	pop	{r7, pc}
 802c144:	200020d0 	.word	0x200020d0
 802c148:	200025ac 	.word	0x200025ac
 802c14c:	200020d4 	.word	0x200020d4

0802c150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802c150:	b580      	push	{r7, lr}
 802c152:	b084      	sub	sp, #16
 802c154:	af00      	add	r7, sp, #0
 802c156:	6078      	str	r0, [r7, #4]
 802c158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802c15a:	4b21      	ldr	r3, [pc, #132]	; (802c1e0 <prvAddCurrentTaskToDelayedList+0x90>)
 802c15c:	681b      	ldr	r3, [r3, #0]
 802c15e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802c160:	4b20      	ldr	r3, [pc, #128]	; (802c1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 802c162:	681b      	ldr	r3, [r3, #0]
 802c164:	3304      	adds	r3, #4
 802c166:	4618      	mov	r0, r3
 802c168:	f7fe f938 	bl	802a3dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802c16c:	687b      	ldr	r3, [r7, #4]
 802c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c172:	d10a      	bne.n	802c18a <prvAddCurrentTaskToDelayedList+0x3a>
 802c174:	683b      	ldr	r3, [r7, #0]
 802c176:	2b00      	cmp	r3, #0
 802c178:	d007      	beq.n	802c18a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802c17a:	4b1a      	ldr	r3, [pc, #104]	; (802c1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 802c17c:	681b      	ldr	r3, [r3, #0]
 802c17e:	3304      	adds	r3, #4
 802c180:	4619      	mov	r1, r3
 802c182:	4819      	ldr	r0, [pc, #100]	; (802c1e8 <prvAddCurrentTaskToDelayedList+0x98>)
 802c184:	f7fe f8cd 	bl	802a322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802c188:	e026      	b.n	802c1d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802c18a:	68fa      	ldr	r2, [r7, #12]
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	4413      	add	r3, r2
 802c190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802c192:	4b14      	ldr	r3, [pc, #80]	; (802c1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	68ba      	ldr	r2, [r7, #8]
 802c198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802c19a:	68ba      	ldr	r2, [r7, #8]
 802c19c:	68fb      	ldr	r3, [r7, #12]
 802c19e:	429a      	cmp	r2, r3
 802c1a0:	d209      	bcs.n	802c1b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802c1a2:	4b12      	ldr	r3, [pc, #72]	; (802c1ec <prvAddCurrentTaskToDelayedList+0x9c>)
 802c1a4:	681a      	ldr	r2, [r3, #0]
 802c1a6:	4b0f      	ldr	r3, [pc, #60]	; (802c1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 802c1a8:	681b      	ldr	r3, [r3, #0]
 802c1aa:	3304      	adds	r3, #4
 802c1ac:	4619      	mov	r1, r3
 802c1ae:	4610      	mov	r0, r2
 802c1b0:	f7fe f8db 	bl	802a36a <vListInsert>
}
 802c1b4:	e010      	b.n	802c1d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802c1b6:	4b0e      	ldr	r3, [pc, #56]	; (802c1f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 802c1b8:	681a      	ldr	r2, [r3, #0]
 802c1ba:	4b0a      	ldr	r3, [pc, #40]	; (802c1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 802c1bc:	681b      	ldr	r3, [r3, #0]
 802c1be:	3304      	adds	r3, #4
 802c1c0:	4619      	mov	r1, r3
 802c1c2:	4610      	mov	r0, r2
 802c1c4:	f7fe f8d1 	bl	802a36a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802c1c8:	4b0a      	ldr	r3, [pc, #40]	; (802c1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 802c1ca:	681b      	ldr	r3, [r3, #0]
 802c1cc:	68ba      	ldr	r2, [r7, #8]
 802c1ce:	429a      	cmp	r2, r3
 802c1d0:	d202      	bcs.n	802c1d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802c1d2:	4a08      	ldr	r2, [pc, #32]	; (802c1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 802c1d4:	68bb      	ldr	r3, [r7, #8]
 802c1d6:	6013      	str	r3, [r2, #0]
}
 802c1d8:	bf00      	nop
 802c1da:	3710      	adds	r7, #16
 802c1dc:	46bd      	mov	sp, r7
 802c1de:	bd80      	pop	{r7, pc}
 802c1e0:	200025a8 	.word	0x200025a8
 802c1e4:	200020d0 	.word	0x200020d0
 802c1e8:	20002590 	.word	0x20002590
 802c1ec:	20002560 	.word	0x20002560
 802c1f0:	2000255c 	.word	0x2000255c
 802c1f4:	200025c4 	.word	0x200025c4

0802c1f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802c1f8:	b580      	push	{r7, lr}
 802c1fa:	b08a      	sub	sp, #40	; 0x28
 802c1fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802c1fe:	2300      	movs	r3, #0
 802c200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802c202:	f000 fb07 	bl	802c814 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802c206:	4b1c      	ldr	r3, [pc, #112]	; (802c278 <xTimerCreateTimerTask+0x80>)
 802c208:	681b      	ldr	r3, [r3, #0]
 802c20a:	2b00      	cmp	r3, #0
 802c20c:	d021      	beq.n	802c252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802c20e:	2300      	movs	r3, #0
 802c210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802c212:	2300      	movs	r3, #0
 802c214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802c216:	1d3a      	adds	r2, r7, #4
 802c218:	f107 0108 	add.w	r1, r7, #8
 802c21c:	f107 030c 	add.w	r3, r7, #12
 802c220:	4618      	mov	r0, r3
 802c222:	f7fe f837 	bl	802a294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802c226:	6879      	ldr	r1, [r7, #4]
 802c228:	68bb      	ldr	r3, [r7, #8]
 802c22a:	68fa      	ldr	r2, [r7, #12]
 802c22c:	9202      	str	r2, [sp, #8]
 802c22e:	9301      	str	r3, [sp, #4]
 802c230:	2302      	movs	r3, #2
 802c232:	9300      	str	r3, [sp, #0]
 802c234:	2300      	movs	r3, #0
 802c236:	460a      	mov	r2, r1
 802c238:	4910      	ldr	r1, [pc, #64]	; (802c27c <xTimerCreateTimerTask+0x84>)
 802c23a:	4811      	ldr	r0, [pc, #68]	; (802c280 <xTimerCreateTimerTask+0x88>)
 802c23c:	f7fe ff8c 	bl	802b158 <xTaskCreateStatic>
 802c240:	4603      	mov	r3, r0
 802c242:	4a10      	ldr	r2, [pc, #64]	; (802c284 <xTimerCreateTimerTask+0x8c>)
 802c244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802c246:	4b0f      	ldr	r3, [pc, #60]	; (802c284 <xTimerCreateTimerTask+0x8c>)
 802c248:	681b      	ldr	r3, [r3, #0]
 802c24a:	2b00      	cmp	r3, #0
 802c24c:	d001      	beq.n	802c252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802c24e:	2301      	movs	r3, #1
 802c250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802c252:	697b      	ldr	r3, [r7, #20]
 802c254:	2b00      	cmp	r3, #0
 802c256:	d10a      	bne.n	802c26e <xTimerCreateTimerTask+0x76>
	__asm volatile
 802c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c25c:	f383 8811 	msr	BASEPRI, r3
 802c260:	f3bf 8f6f 	isb	sy
 802c264:	f3bf 8f4f 	dsb	sy
 802c268:	613b      	str	r3, [r7, #16]
}
 802c26a:	bf00      	nop
 802c26c:	e7fe      	b.n	802c26c <xTimerCreateTimerTask+0x74>
	return xReturn;
 802c26e:	697b      	ldr	r3, [r7, #20]
}
 802c270:	4618      	mov	r0, r3
 802c272:	3718      	adds	r7, #24
 802c274:	46bd      	mov	sp, r7
 802c276:	bd80      	pop	{r7, pc}
 802c278:	20002600 	.word	0x20002600
 802c27c:	0802f65c 	.word	0x0802f65c
 802c280:	0802c3bd 	.word	0x0802c3bd
 802c284:	20002604 	.word	0x20002604

0802c288 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802c288:	b580      	push	{r7, lr}
 802c28a:	b08a      	sub	sp, #40	; 0x28
 802c28c:	af00      	add	r7, sp, #0
 802c28e:	60f8      	str	r0, [r7, #12]
 802c290:	60b9      	str	r1, [r7, #8]
 802c292:	607a      	str	r2, [r7, #4]
 802c294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802c296:	2300      	movs	r3, #0
 802c298:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802c29a:	68fb      	ldr	r3, [r7, #12]
 802c29c:	2b00      	cmp	r3, #0
 802c29e:	d10a      	bne.n	802c2b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 802c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c2a4:	f383 8811 	msr	BASEPRI, r3
 802c2a8:	f3bf 8f6f 	isb	sy
 802c2ac:	f3bf 8f4f 	dsb	sy
 802c2b0:	623b      	str	r3, [r7, #32]
}
 802c2b2:	bf00      	nop
 802c2b4:	e7fe      	b.n	802c2b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802c2b6:	4b1a      	ldr	r3, [pc, #104]	; (802c320 <xTimerGenericCommand+0x98>)
 802c2b8:	681b      	ldr	r3, [r3, #0]
 802c2ba:	2b00      	cmp	r3, #0
 802c2bc:	d02a      	beq.n	802c314 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802c2be:	68bb      	ldr	r3, [r7, #8]
 802c2c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802c2c2:	687b      	ldr	r3, [r7, #4]
 802c2c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802c2c6:	68fb      	ldr	r3, [r7, #12]
 802c2c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802c2ca:	68bb      	ldr	r3, [r7, #8]
 802c2cc:	2b05      	cmp	r3, #5
 802c2ce:	dc18      	bgt.n	802c302 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802c2d0:	f7ff feaa 	bl	802c028 <xTaskGetSchedulerState>
 802c2d4:	4603      	mov	r3, r0
 802c2d6:	2b02      	cmp	r3, #2
 802c2d8:	d109      	bne.n	802c2ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802c2da:	4b11      	ldr	r3, [pc, #68]	; (802c320 <xTimerGenericCommand+0x98>)
 802c2dc:	6818      	ldr	r0, [r3, #0]
 802c2de:	f107 0110 	add.w	r1, r7, #16
 802c2e2:	2300      	movs	r3, #0
 802c2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c2e6:	f7fe f9e7 	bl	802a6b8 <xQueueGenericSend>
 802c2ea:	6278      	str	r0, [r7, #36]	; 0x24
 802c2ec:	e012      	b.n	802c314 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802c2ee:	4b0c      	ldr	r3, [pc, #48]	; (802c320 <xTimerGenericCommand+0x98>)
 802c2f0:	6818      	ldr	r0, [r3, #0]
 802c2f2:	f107 0110 	add.w	r1, r7, #16
 802c2f6:	2300      	movs	r3, #0
 802c2f8:	2200      	movs	r2, #0
 802c2fa:	f7fe f9dd 	bl	802a6b8 <xQueueGenericSend>
 802c2fe:	6278      	str	r0, [r7, #36]	; 0x24
 802c300:	e008      	b.n	802c314 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802c302:	4b07      	ldr	r3, [pc, #28]	; (802c320 <xTimerGenericCommand+0x98>)
 802c304:	6818      	ldr	r0, [r3, #0]
 802c306:	f107 0110 	add.w	r1, r7, #16
 802c30a:	2300      	movs	r3, #0
 802c30c:	683a      	ldr	r2, [r7, #0]
 802c30e:	f7fe faf9 	bl	802a904 <xQueueGenericSendFromISR>
 802c312:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802c316:	4618      	mov	r0, r3
 802c318:	3728      	adds	r7, #40	; 0x28
 802c31a:	46bd      	mov	sp, r7
 802c31c:	bd80      	pop	{r7, pc}
 802c31e:	bf00      	nop
 802c320:	20002600 	.word	0x20002600

0802c324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802c324:	b580      	push	{r7, lr}
 802c326:	b088      	sub	sp, #32
 802c328:	af02      	add	r7, sp, #8
 802c32a:	6078      	str	r0, [r7, #4]
 802c32c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c32e:	4b22      	ldr	r3, [pc, #136]	; (802c3b8 <prvProcessExpiredTimer+0x94>)
 802c330:	681b      	ldr	r3, [r3, #0]
 802c332:	68db      	ldr	r3, [r3, #12]
 802c334:	68db      	ldr	r3, [r3, #12]
 802c336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c338:	697b      	ldr	r3, [r7, #20]
 802c33a:	3304      	adds	r3, #4
 802c33c:	4618      	mov	r0, r3
 802c33e:	f7fe f84d 	bl	802a3dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c342:	697b      	ldr	r3, [r7, #20]
 802c344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c348:	f003 0304 	and.w	r3, r3, #4
 802c34c:	2b00      	cmp	r3, #0
 802c34e:	d022      	beq.n	802c396 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802c350:	697b      	ldr	r3, [r7, #20]
 802c352:	699a      	ldr	r2, [r3, #24]
 802c354:	687b      	ldr	r3, [r7, #4]
 802c356:	18d1      	adds	r1, r2, r3
 802c358:	687b      	ldr	r3, [r7, #4]
 802c35a:	683a      	ldr	r2, [r7, #0]
 802c35c:	6978      	ldr	r0, [r7, #20]
 802c35e:	f000 f8d1 	bl	802c504 <prvInsertTimerInActiveList>
 802c362:	4603      	mov	r3, r0
 802c364:	2b00      	cmp	r3, #0
 802c366:	d01f      	beq.n	802c3a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c368:	2300      	movs	r3, #0
 802c36a:	9300      	str	r3, [sp, #0]
 802c36c:	2300      	movs	r3, #0
 802c36e:	687a      	ldr	r2, [r7, #4]
 802c370:	2100      	movs	r1, #0
 802c372:	6978      	ldr	r0, [r7, #20]
 802c374:	f7ff ff88 	bl	802c288 <xTimerGenericCommand>
 802c378:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802c37a:	693b      	ldr	r3, [r7, #16]
 802c37c:	2b00      	cmp	r3, #0
 802c37e:	d113      	bne.n	802c3a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 802c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c384:	f383 8811 	msr	BASEPRI, r3
 802c388:	f3bf 8f6f 	isb	sy
 802c38c:	f3bf 8f4f 	dsb	sy
 802c390:	60fb      	str	r3, [r7, #12]
}
 802c392:	bf00      	nop
 802c394:	e7fe      	b.n	802c394 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c396:	697b      	ldr	r3, [r7, #20]
 802c398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c39c:	f023 0301 	bic.w	r3, r3, #1
 802c3a0:	b2da      	uxtb	r2, r3
 802c3a2:	697b      	ldr	r3, [r7, #20]
 802c3a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c3a8:	697b      	ldr	r3, [r7, #20]
 802c3aa:	6a1b      	ldr	r3, [r3, #32]
 802c3ac:	6978      	ldr	r0, [r7, #20]
 802c3ae:	4798      	blx	r3
}
 802c3b0:	bf00      	nop
 802c3b2:	3718      	adds	r7, #24
 802c3b4:	46bd      	mov	sp, r7
 802c3b6:	bd80      	pop	{r7, pc}
 802c3b8:	200025f8 	.word	0x200025f8

0802c3bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 802c3bc:	b580      	push	{r7, lr}
 802c3be:	b084      	sub	sp, #16
 802c3c0:	af00      	add	r7, sp, #0
 802c3c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c3c4:	f107 0308 	add.w	r3, r7, #8
 802c3c8:	4618      	mov	r0, r3
 802c3ca:	f000 f857 	bl	802c47c <prvGetNextExpireTime>
 802c3ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802c3d0:	68bb      	ldr	r3, [r7, #8]
 802c3d2:	4619      	mov	r1, r3
 802c3d4:	68f8      	ldr	r0, [r7, #12]
 802c3d6:	f000 f803 	bl	802c3e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802c3da:	f000 f8d5 	bl	802c588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802c3de:	e7f1      	b.n	802c3c4 <prvTimerTask+0x8>

0802c3e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802c3e0:	b580      	push	{r7, lr}
 802c3e2:	b084      	sub	sp, #16
 802c3e4:	af00      	add	r7, sp, #0
 802c3e6:	6078      	str	r0, [r7, #4]
 802c3e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802c3ea:	f7ff f9c5 	bl	802b778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c3ee:	f107 0308 	add.w	r3, r7, #8
 802c3f2:	4618      	mov	r0, r3
 802c3f4:	f000 f866 	bl	802c4c4 <prvSampleTimeNow>
 802c3f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802c3fa:	68bb      	ldr	r3, [r7, #8]
 802c3fc:	2b00      	cmp	r3, #0
 802c3fe:	d130      	bne.n	802c462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802c400:	683b      	ldr	r3, [r7, #0]
 802c402:	2b00      	cmp	r3, #0
 802c404:	d10a      	bne.n	802c41c <prvProcessTimerOrBlockTask+0x3c>
 802c406:	687a      	ldr	r2, [r7, #4]
 802c408:	68fb      	ldr	r3, [r7, #12]
 802c40a:	429a      	cmp	r2, r3
 802c40c:	d806      	bhi.n	802c41c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802c40e:	f7ff f9c1 	bl	802b794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802c412:	68f9      	ldr	r1, [r7, #12]
 802c414:	6878      	ldr	r0, [r7, #4]
 802c416:	f7ff ff85 	bl	802c324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802c41a:	e024      	b.n	802c466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 802c41c:	683b      	ldr	r3, [r7, #0]
 802c41e:	2b00      	cmp	r3, #0
 802c420:	d008      	beq.n	802c434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802c422:	4b13      	ldr	r3, [pc, #76]	; (802c470 <prvProcessTimerOrBlockTask+0x90>)
 802c424:	681b      	ldr	r3, [r3, #0]
 802c426:	681b      	ldr	r3, [r3, #0]
 802c428:	2b00      	cmp	r3, #0
 802c42a:	d101      	bne.n	802c430 <prvProcessTimerOrBlockTask+0x50>
 802c42c:	2301      	movs	r3, #1
 802c42e:	e000      	b.n	802c432 <prvProcessTimerOrBlockTask+0x52>
 802c430:	2300      	movs	r3, #0
 802c432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802c434:	4b0f      	ldr	r3, [pc, #60]	; (802c474 <prvProcessTimerOrBlockTask+0x94>)
 802c436:	6818      	ldr	r0, [r3, #0]
 802c438:	687a      	ldr	r2, [r7, #4]
 802c43a:	68fb      	ldr	r3, [r7, #12]
 802c43c:	1ad3      	subs	r3, r2, r3
 802c43e:	683a      	ldr	r2, [r7, #0]
 802c440:	4619      	mov	r1, r3
 802c442:	f7fe fe55 	bl	802b0f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802c446:	f7ff f9a5 	bl	802b794 <xTaskResumeAll>
 802c44a:	4603      	mov	r3, r0
 802c44c:	2b00      	cmp	r3, #0
 802c44e:	d10a      	bne.n	802c466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802c450:	4b09      	ldr	r3, [pc, #36]	; (802c478 <prvProcessTimerOrBlockTask+0x98>)
 802c452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802c456:	601a      	str	r2, [r3, #0]
 802c458:	f3bf 8f4f 	dsb	sy
 802c45c:	f3bf 8f6f 	isb	sy
}
 802c460:	e001      	b.n	802c466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802c462:	f7ff f997 	bl	802b794 <xTaskResumeAll>
}
 802c466:	bf00      	nop
 802c468:	3710      	adds	r7, #16
 802c46a:	46bd      	mov	sp, r7
 802c46c:	bd80      	pop	{r7, pc}
 802c46e:	bf00      	nop
 802c470:	200025fc 	.word	0x200025fc
 802c474:	20002600 	.word	0x20002600
 802c478:	e000ed04 	.word	0xe000ed04

0802c47c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802c47c:	b480      	push	{r7}
 802c47e:	b085      	sub	sp, #20
 802c480:	af00      	add	r7, sp, #0
 802c482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802c484:	4b0e      	ldr	r3, [pc, #56]	; (802c4c0 <prvGetNextExpireTime+0x44>)
 802c486:	681b      	ldr	r3, [r3, #0]
 802c488:	681b      	ldr	r3, [r3, #0]
 802c48a:	2b00      	cmp	r3, #0
 802c48c:	d101      	bne.n	802c492 <prvGetNextExpireTime+0x16>
 802c48e:	2201      	movs	r2, #1
 802c490:	e000      	b.n	802c494 <prvGetNextExpireTime+0x18>
 802c492:	2200      	movs	r2, #0
 802c494:	687b      	ldr	r3, [r7, #4]
 802c496:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	681b      	ldr	r3, [r3, #0]
 802c49c:	2b00      	cmp	r3, #0
 802c49e:	d105      	bne.n	802c4ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c4a0:	4b07      	ldr	r3, [pc, #28]	; (802c4c0 <prvGetNextExpireTime+0x44>)
 802c4a2:	681b      	ldr	r3, [r3, #0]
 802c4a4:	68db      	ldr	r3, [r3, #12]
 802c4a6:	681b      	ldr	r3, [r3, #0]
 802c4a8:	60fb      	str	r3, [r7, #12]
 802c4aa:	e001      	b.n	802c4b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802c4ac:	2300      	movs	r3, #0
 802c4ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802c4b0:	68fb      	ldr	r3, [r7, #12]
}
 802c4b2:	4618      	mov	r0, r3
 802c4b4:	3714      	adds	r7, #20
 802c4b6:	46bd      	mov	sp, r7
 802c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4bc:	4770      	bx	lr
 802c4be:	bf00      	nop
 802c4c0:	200025f8 	.word	0x200025f8

0802c4c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802c4c4:	b580      	push	{r7, lr}
 802c4c6:	b084      	sub	sp, #16
 802c4c8:	af00      	add	r7, sp, #0
 802c4ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802c4cc:	f7ff fa04 	bl	802b8d8 <xTaskGetTickCount>
 802c4d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802c4d2:	4b0b      	ldr	r3, [pc, #44]	; (802c500 <prvSampleTimeNow+0x3c>)
 802c4d4:	681b      	ldr	r3, [r3, #0]
 802c4d6:	68fa      	ldr	r2, [r7, #12]
 802c4d8:	429a      	cmp	r2, r3
 802c4da:	d205      	bcs.n	802c4e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802c4dc:	f000 f936 	bl	802c74c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802c4e0:	687b      	ldr	r3, [r7, #4]
 802c4e2:	2201      	movs	r2, #1
 802c4e4:	601a      	str	r2, [r3, #0]
 802c4e6:	e002      	b.n	802c4ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	2200      	movs	r2, #0
 802c4ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802c4ee:	4a04      	ldr	r2, [pc, #16]	; (802c500 <prvSampleTimeNow+0x3c>)
 802c4f0:	68fb      	ldr	r3, [r7, #12]
 802c4f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802c4f4:	68fb      	ldr	r3, [r7, #12]
}
 802c4f6:	4618      	mov	r0, r3
 802c4f8:	3710      	adds	r7, #16
 802c4fa:	46bd      	mov	sp, r7
 802c4fc:	bd80      	pop	{r7, pc}
 802c4fe:	bf00      	nop
 802c500:	20002608 	.word	0x20002608

0802c504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802c504:	b580      	push	{r7, lr}
 802c506:	b086      	sub	sp, #24
 802c508:	af00      	add	r7, sp, #0
 802c50a:	60f8      	str	r0, [r7, #12]
 802c50c:	60b9      	str	r1, [r7, #8]
 802c50e:	607a      	str	r2, [r7, #4]
 802c510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802c512:	2300      	movs	r3, #0
 802c514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802c516:	68fb      	ldr	r3, [r7, #12]
 802c518:	68ba      	ldr	r2, [r7, #8]
 802c51a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c51c:	68fb      	ldr	r3, [r7, #12]
 802c51e:	68fa      	ldr	r2, [r7, #12]
 802c520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802c522:	68ba      	ldr	r2, [r7, #8]
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	429a      	cmp	r2, r3
 802c528:	d812      	bhi.n	802c550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802c52a:	687a      	ldr	r2, [r7, #4]
 802c52c:	683b      	ldr	r3, [r7, #0]
 802c52e:	1ad2      	subs	r2, r2, r3
 802c530:	68fb      	ldr	r3, [r7, #12]
 802c532:	699b      	ldr	r3, [r3, #24]
 802c534:	429a      	cmp	r2, r3
 802c536:	d302      	bcc.n	802c53e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802c538:	2301      	movs	r3, #1
 802c53a:	617b      	str	r3, [r7, #20]
 802c53c:	e01b      	b.n	802c576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802c53e:	4b10      	ldr	r3, [pc, #64]	; (802c580 <prvInsertTimerInActiveList+0x7c>)
 802c540:	681a      	ldr	r2, [r3, #0]
 802c542:	68fb      	ldr	r3, [r7, #12]
 802c544:	3304      	adds	r3, #4
 802c546:	4619      	mov	r1, r3
 802c548:	4610      	mov	r0, r2
 802c54a:	f7fd ff0e 	bl	802a36a <vListInsert>
 802c54e:	e012      	b.n	802c576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802c550:	687a      	ldr	r2, [r7, #4]
 802c552:	683b      	ldr	r3, [r7, #0]
 802c554:	429a      	cmp	r2, r3
 802c556:	d206      	bcs.n	802c566 <prvInsertTimerInActiveList+0x62>
 802c558:	68ba      	ldr	r2, [r7, #8]
 802c55a:	683b      	ldr	r3, [r7, #0]
 802c55c:	429a      	cmp	r2, r3
 802c55e:	d302      	bcc.n	802c566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802c560:	2301      	movs	r3, #1
 802c562:	617b      	str	r3, [r7, #20]
 802c564:	e007      	b.n	802c576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c566:	4b07      	ldr	r3, [pc, #28]	; (802c584 <prvInsertTimerInActiveList+0x80>)
 802c568:	681a      	ldr	r2, [r3, #0]
 802c56a:	68fb      	ldr	r3, [r7, #12]
 802c56c:	3304      	adds	r3, #4
 802c56e:	4619      	mov	r1, r3
 802c570:	4610      	mov	r0, r2
 802c572:	f7fd fefa 	bl	802a36a <vListInsert>
		}
	}

	return xProcessTimerNow;
 802c576:	697b      	ldr	r3, [r7, #20]
}
 802c578:	4618      	mov	r0, r3
 802c57a:	3718      	adds	r7, #24
 802c57c:	46bd      	mov	sp, r7
 802c57e:	bd80      	pop	{r7, pc}
 802c580:	200025fc 	.word	0x200025fc
 802c584:	200025f8 	.word	0x200025f8

0802c588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802c588:	b580      	push	{r7, lr}
 802c58a:	b08e      	sub	sp, #56	; 0x38
 802c58c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c58e:	e0ca      	b.n	802c726 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802c590:	687b      	ldr	r3, [r7, #4]
 802c592:	2b00      	cmp	r3, #0
 802c594:	da18      	bge.n	802c5c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802c596:	1d3b      	adds	r3, r7, #4
 802c598:	3304      	adds	r3, #4
 802c59a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c59e:	2b00      	cmp	r3, #0
 802c5a0:	d10a      	bne.n	802c5b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 802c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c5a6:	f383 8811 	msr	BASEPRI, r3
 802c5aa:	f3bf 8f6f 	isb	sy
 802c5ae:	f3bf 8f4f 	dsb	sy
 802c5b2:	61fb      	str	r3, [r7, #28]
}
 802c5b4:	bf00      	nop
 802c5b6:	e7fe      	b.n	802c5b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c5ba:	681b      	ldr	r3, [r3, #0]
 802c5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c5be:	6850      	ldr	r0, [r2, #4]
 802c5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c5c2:	6892      	ldr	r2, [r2, #8]
 802c5c4:	4611      	mov	r1, r2
 802c5c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	2b00      	cmp	r3, #0
 802c5cc:	f2c0 80aa 	blt.w	802c724 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802c5d0:	68fb      	ldr	r3, [r7, #12]
 802c5d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5d6:	695b      	ldr	r3, [r3, #20]
 802c5d8:	2b00      	cmp	r3, #0
 802c5da:	d004      	beq.n	802c5e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5de:	3304      	adds	r3, #4
 802c5e0:	4618      	mov	r0, r3
 802c5e2:	f7fd fefb 	bl	802a3dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802c5e6:	463b      	mov	r3, r7
 802c5e8:	4618      	mov	r0, r3
 802c5ea:	f7ff ff6b 	bl	802c4c4 <prvSampleTimeNow>
 802c5ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802c5f0:	687b      	ldr	r3, [r7, #4]
 802c5f2:	2b09      	cmp	r3, #9
 802c5f4:	f200 8097 	bhi.w	802c726 <prvProcessReceivedCommands+0x19e>
 802c5f8:	a201      	add	r2, pc, #4	; (adr r2, 802c600 <prvProcessReceivedCommands+0x78>)
 802c5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c5fe:	bf00      	nop
 802c600:	0802c629 	.word	0x0802c629
 802c604:	0802c629 	.word	0x0802c629
 802c608:	0802c629 	.word	0x0802c629
 802c60c:	0802c69d 	.word	0x0802c69d
 802c610:	0802c6b1 	.word	0x0802c6b1
 802c614:	0802c6fb 	.word	0x0802c6fb
 802c618:	0802c629 	.word	0x0802c629
 802c61c:	0802c629 	.word	0x0802c629
 802c620:	0802c69d 	.word	0x0802c69d
 802c624:	0802c6b1 	.word	0x0802c6b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c62a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c62e:	f043 0301 	orr.w	r3, r3, #1
 802c632:	b2da      	uxtb	r2, r3
 802c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802c63a:	68ba      	ldr	r2, [r7, #8]
 802c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c63e:	699b      	ldr	r3, [r3, #24]
 802c640:	18d1      	adds	r1, r2, r3
 802c642:	68bb      	ldr	r3, [r7, #8]
 802c644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c648:	f7ff ff5c 	bl	802c504 <prvInsertTimerInActiveList>
 802c64c:	4603      	mov	r3, r0
 802c64e:	2b00      	cmp	r3, #0
 802c650:	d069      	beq.n	802c726 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c654:	6a1b      	ldr	r3, [r3, #32]
 802c656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c660:	f003 0304 	and.w	r3, r3, #4
 802c664:	2b00      	cmp	r3, #0
 802c666:	d05e      	beq.n	802c726 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802c668:	68ba      	ldr	r2, [r7, #8]
 802c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c66c:	699b      	ldr	r3, [r3, #24]
 802c66e:	441a      	add	r2, r3
 802c670:	2300      	movs	r3, #0
 802c672:	9300      	str	r3, [sp, #0]
 802c674:	2300      	movs	r3, #0
 802c676:	2100      	movs	r1, #0
 802c678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c67a:	f7ff fe05 	bl	802c288 <xTimerGenericCommand>
 802c67e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802c680:	6a3b      	ldr	r3, [r7, #32]
 802c682:	2b00      	cmp	r3, #0
 802c684:	d14f      	bne.n	802c726 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802c686:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c68a:	f383 8811 	msr	BASEPRI, r3
 802c68e:	f3bf 8f6f 	isb	sy
 802c692:	f3bf 8f4f 	dsb	sy
 802c696:	61bb      	str	r3, [r7, #24]
}
 802c698:	bf00      	nop
 802c69a:	e7fe      	b.n	802c69a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c6a2:	f023 0301 	bic.w	r3, r3, #1
 802c6a6:	b2da      	uxtb	r2, r3
 802c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802c6ae:	e03a      	b.n	802c726 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c6b6:	f043 0301 	orr.w	r3, r3, #1
 802c6ba:	b2da      	uxtb	r2, r3
 802c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802c6c2:	68ba      	ldr	r2, [r7, #8]
 802c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6ca:	699b      	ldr	r3, [r3, #24]
 802c6cc:	2b00      	cmp	r3, #0
 802c6ce:	d10a      	bne.n	802c6e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 802c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c6d4:	f383 8811 	msr	BASEPRI, r3
 802c6d8:	f3bf 8f6f 	isb	sy
 802c6dc:	f3bf 8f4f 	dsb	sy
 802c6e0:	617b      	str	r3, [r7, #20]
}
 802c6e2:	bf00      	nop
 802c6e4:	e7fe      	b.n	802c6e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6e8:	699a      	ldr	r2, [r3, #24]
 802c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6ec:	18d1      	adds	r1, r2, r3
 802c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c6f4:	f7ff ff06 	bl	802c504 <prvInsertTimerInActiveList>
					break;
 802c6f8:	e015      	b.n	802c726 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c700:	f003 0302 	and.w	r3, r3, #2
 802c704:	2b00      	cmp	r3, #0
 802c706:	d103      	bne.n	802c710 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802c708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c70a:	f000 fbe1 	bl	802ced0 <vPortFree>
 802c70e:	e00a      	b.n	802c726 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c716:	f023 0301 	bic.w	r3, r3, #1
 802c71a:	b2da      	uxtb	r2, r3
 802c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c71e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802c722:	e000      	b.n	802c726 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802c724:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802c726:	4b08      	ldr	r3, [pc, #32]	; (802c748 <prvProcessReceivedCommands+0x1c0>)
 802c728:	681b      	ldr	r3, [r3, #0]
 802c72a:	1d39      	adds	r1, r7, #4
 802c72c:	2200      	movs	r2, #0
 802c72e:	4618      	mov	r0, r3
 802c730:	f7fe f998 	bl	802aa64 <xQueueReceive>
 802c734:	4603      	mov	r3, r0
 802c736:	2b00      	cmp	r3, #0
 802c738:	f47f af2a 	bne.w	802c590 <prvProcessReceivedCommands+0x8>
	}
}
 802c73c:	bf00      	nop
 802c73e:	bf00      	nop
 802c740:	3730      	adds	r7, #48	; 0x30
 802c742:	46bd      	mov	sp, r7
 802c744:	bd80      	pop	{r7, pc}
 802c746:	bf00      	nop
 802c748:	20002600 	.word	0x20002600

0802c74c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802c74c:	b580      	push	{r7, lr}
 802c74e:	b088      	sub	sp, #32
 802c750:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c752:	e048      	b.n	802c7e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802c754:	4b2d      	ldr	r3, [pc, #180]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c756:	681b      	ldr	r3, [r3, #0]
 802c758:	68db      	ldr	r3, [r3, #12]
 802c75a:	681b      	ldr	r3, [r3, #0]
 802c75c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802c75e:	4b2b      	ldr	r3, [pc, #172]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c760:	681b      	ldr	r3, [r3, #0]
 802c762:	68db      	ldr	r3, [r3, #12]
 802c764:	68db      	ldr	r3, [r3, #12]
 802c766:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802c768:	68fb      	ldr	r3, [r7, #12]
 802c76a:	3304      	adds	r3, #4
 802c76c:	4618      	mov	r0, r3
 802c76e:	f7fd fe35 	bl	802a3dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802c772:	68fb      	ldr	r3, [r7, #12]
 802c774:	6a1b      	ldr	r3, [r3, #32]
 802c776:	68f8      	ldr	r0, [r7, #12]
 802c778:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802c77a:	68fb      	ldr	r3, [r7, #12]
 802c77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802c780:	f003 0304 	and.w	r3, r3, #4
 802c784:	2b00      	cmp	r3, #0
 802c786:	d02e      	beq.n	802c7e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802c788:	68fb      	ldr	r3, [r7, #12]
 802c78a:	699b      	ldr	r3, [r3, #24]
 802c78c:	693a      	ldr	r2, [r7, #16]
 802c78e:	4413      	add	r3, r2
 802c790:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802c792:	68ba      	ldr	r2, [r7, #8]
 802c794:	693b      	ldr	r3, [r7, #16]
 802c796:	429a      	cmp	r2, r3
 802c798:	d90e      	bls.n	802c7b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802c79a:	68fb      	ldr	r3, [r7, #12]
 802c79c:	68ba      	ldr	r2, [r7, #8]
 802c79e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802c7a0:	68fb      	ldr	r3, [r7, #12]
 802c7a2:	68fa      	ldr	r2, [r7, #12]
 802c7a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802c7a6:	4b19      	ldr	r3, [pc, #100]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c7a8:	681a      	ldr	r2, [r3, #0]
 802c7aa:	68fb      	ldr	r3, [r7, #12]
 802c7ac:	3304      	adds	r3, #4
 802c7ae:	4619      	mov	r1, r3
 802c7b0:	4610      	mov	r0, r2
 802c7b2:	f7fd fdda 	bl	802a36a <vListInsert>
 802c7b6:	e016      	b.n	802c7e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802c7b8:	2300      	movs	r3, #0
 802c7ba:	9300      	str	r3, [sp, #0]
 802c7bc:	2300      	movs	r3, #0
 802c7be:	693a      	ldr	r2, [r7, #16]
 802c7c0:	2100      	movs	r1, #0
 802c7c2:	68f8      	ldr	r0, [r7, #12]
 802c7c4:	f7ff fd60 	bl	802c288 <xTimerGenericCommand>
 802c7c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802c7ca:	687b      	ldr	r3, [r7, #4]
 802c7cc:	2b00      	cmp	r3, #0
 802c7ce:	d10a      	bne.n	802c7e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 802c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c7d4:	f383 8811 	msr	BASEPRI, r3
 802c7d8:	f3bf 8f6f 	isb	sy
 802c7dc:	f3bf 8f4f 	dsb	sy
 802c7e0:	603b      	str	r3, [r7, #0]
}
 802c7e2:	bf00      	nop
 802c7e4:	e7fe      	b.n	802c7e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802c7e6:	4b09      	ldr	r3, [pc, #36]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c7e8:	681b      	ldr	r3, [r3, #0]
 802c7ea:	681b      	ldr	r3, [r3, #0]
 802c7ec:	2b00      	cmp	r3, #0
 802c7ee:	d1b1      	bne.n	802c754 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802c7f0:	4b06      	ldr	r3, [pc, #24]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c7f2:	681b      	ldr	r3, [r3, #0]
 802c7f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802c7f6:	4b06      	ldr	r3, [pc, #24]	; (802c810 <prvSwitchTimerLists+0xc4>)
 802c7f8:	681b      	ldr	r3, [r3, #0]
 802c7fa:	4a04      	ldr	r2, [pc, #16]	; (802c80c <prvSwitchTimerLists+0xc0>)
 802c7fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802c7fe:	4a04      	ldr	r2, [pc, #16]	; (802c810 <prvSwitchTimerLists+0xc4>)
 802c800:	697b      	ldr	r3, [r7, #20]
 802c802:	6013      	str	r3, [r2, #0]
}
 802c804:	bf00      	nop
 802c806:	3718      	adds	r7, #24
 802c808:	46bd      	mov	sp, r7
 802c80a:	bd80      	pop	{r7, pc}
 802c80c:	200025f8 	.word	0x200025f8
 802c810:	200025fc 	.word	0x200025fc

0802c814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802c814:	b580      	push	{r7, lr}
 802c816:	b082      	sub	sp, #8
 802c818:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802c81a:	f000 f96b 	bl	802caf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802c81e:	4b15      	ldr	r3, [pc, #84]	; (802c874 <prvCheckForValidListAndQueue+0x60>)
 802c820:	681b      	ldr	r3, [r3, #0]
 802c822:	2b00      	cmp	r3, #0
 802c824:	d120      	bne.n	802c868 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802c826:	4814      	ldr	r0, [pc, #80]	; (802c878 <prvCheckForValidListAndQueue+0x64>)
 802c828:	f7fd fd4e 	bl	802a2c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802c82c:	4813      	ldr	r0, [pc, #76]	; (802c87c <prvCheckForValidListAndQueue+0x68>)
 802c82e:	f7fd fd4b 	bl	802a2c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802c832:	4b13      	ldr	r3, [pc, #76]	; (802c880 <prvCheckForValidListAndQueue+0x6c>)
 802c834:	4a10      	ldr	r2, [pc, #64]	; (802c878 <prvCheckForValidListAndQueue+0x64>)
 802c836:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802c838:	4b12      	ldr	r3, [pc, #72]	; (802c884 <prvCheckForValidListAndQueue+0x70>)
 802c83a:	4a10      	ldr	r2, [pc, #64]	; (802c87c <prvCheckForValidListAndQueue+0x68>)
 802c83c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802c83e:	2300      	movs	r3, #0
 802c840:	9300      	str	r3, [sp, #0]
 802c842:	4b11      	ldr	r3, [pc, #68]	; (802c888 <prvCheckForValidListAndQueue+0x74>)
 802c844:	4a11      	ldr	r2, [pc, #68]	; (802c88c <prvCheckForValidListAndQueue+0x78>)
 802c846:	2110      	movs	r1, #16
 802c848:	200a      	movs	r0, #10
 802c84a:	f7fd fe59 	bl	802a500 <xQueueGenericCreateStatic>
 802c84e:	4603      	mov	r3, r0
 802c850:	4a08      	ldr	r2, [pc, #32]	; (802c874 <prvCheckForValidListAndQueue+0x60>)
 802c852:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802c854:	4b07      	ldr	r3, [pc, #28]	; (802c874 <prvCheckForValidListAndQueue+0x60>)
 802c856:	681b      	ldr	r3, [r3, #0]
 802c858:	2b00      	cmp	r3, #0
 802c85a:	d005      	beq.n	802c868 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802c85c:	4b05      	ldr	r3, [pc, #20]	; (802c874 <prvCheckForValidListAndQueue+0x60>)
 802c85e:	681b      	ldr	r3, [r3, #0]
 802c860:	490b      	ldr	r1, [pc, #44]	; (802c890 <prvCheckForValidListAndQueue+0x7c>)
 802c862:	4618      	mov	r0, r3
 802c864:	f7fe fc12 	bl	802b08c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802c868:	f000 f974 	bl	802cb54 <vPortExitCritical>
}
 802c86c:	bf00      	nop
 802c86e:	46bd      	mov	sp, r7
 802c870:	bd80      	pop	{r7, pc}
 802c872:	bf00      	nop
 802c874:	20002600 	.word	0x20002600
 802c878:	200025d0 	.word	0x200025d0
 802c87c:	200025e4 	.word	0x200025e4
 802c880:	200025f8 	.word	0x200025f8
 802c884:	200025fc 	.word	0x200025fc
 802c888:	200026ac 	.word	0x200026ac
 802c88c:	2000260c 	.word	0x2000260c
 802c890:	0802f664 	.word	0x0802f664

0802c894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802c894:	b480      	push	{r7}
 802c896:	b085      	sub	sp, #20
 802c898:	af00      	add	r7, sp, #0
 802c89a:	60f8      	str	r0, [r7, #12]
 802c89c:	60b9      	str	r1, [r7, #8]
 802c89e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802c8a0:	68fb      	ldr	r3, [r7, #12]
 802c8a2:	3b04      	subs	r3, #4
 802c8a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802c8a6:	68fb      	ldr	r3, [r7, #12]
 802c8a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802c8ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c8ae:	68fb      	ldr	r3, [r7, #12]
 802c8b0:	3b04      	subs	r3, #4
 802c8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802c8b4:	68bb      	ldr	r3, [r7, #8]
 802c8b6:	f023 0201 	bic.w	r2, r3, #1
 802c8ba:	68fb      	ldr	r3, [r7, #12]
 802c8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802c8be:	68fb      	ldr	r3, [r7, #12]
 802c8c0:	3b04      	subs	r3, #4
 802c8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802c8c4:	4a0c      	ldr	r2, [pc, #48]	; (802c8f8 <pxPortInitialiseStack+0x64>)
 802c8c6:	68fb      	ldr	r3, [r7, #12]
 802c8c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802c8ca:	68fb      	ldr	r3, [r7, #12]
 802c8cc:	3b14      	subs	r3, #20
 802c8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802c8d0:	687a      	ldr	r2, [r7, #4]
 802c8d2:	68fb      	ldr	r3, [r7, #12]
 802c8d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802c8d6:	68fb      	ldr	r3, [r7, #12]
 802c8d8:	3b04      	subs	r3, #4
 802c8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802c8dc:	68fb      	ldr	r3, [r7, #12]
 802c8de:	f06f 0202 	mvn.w	r2, #2
 802c8e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802c8e4:	68fb      	ldr	r3, [r7, #12]
 802c8e6:	3b20      	subs	r3, #32
 802c8e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802c8ea:	68fb      	ldr	r3, [r7, #12]
}
 802c8ec:	4618      	mov	r0, r3
 802c8ee:	3714      	adds	r7, #20
 802c8f0:	46bd      	mov	sp, r7
 802c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8f6:	4770      	bx	lr
 802c8f8:	0802c8fd 	.word	0x0802c8fd

0802c8fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802c8fc:	b480      	push	{r7}
 802c8fe:	b085      	sub	sp, #20
 802c900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802c902:	2300      	movs	r3, #0
 802c904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802c906:	4b12      	ldr	r3, [pc, #72]	; (802c950 <prvTaskExitError+0x54>)
 802c908:	681b      	ldr	r3, [r3, #0]
 802c90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c90e:	d00a      	beq.n	802c926 <prvTaskExitError+0x2a>
	__asm volatile
 802c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c914:	f383 8811 	msr	BASEPRI, r3
 802c918:	f3bf 8f6f 	isb	sy
 802c91c:	f3bf 8f4f 	dsb	sy
 802c920:	60fb      	str	r3, [r7, #12]
}
 802c922:	bf00      	nop
 802c924:	e7fe      	b.n	802c924 <prvTaskExitError+0x28>
	__asm volatile
 802c926:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c92a:	f383 8811 	msr	BASEPRI, r3
 802c92e:	f3bf 8f6f 	isb	sy
 802c932:	f3bf 8f4f 	dsb	sy
 802c936:	60bb      	str	r3, [r7, #8]
}
 802c938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802c93a:	bf00      	nop
 802c93c:	687b      	ldr	r3, [r7, #4]
 802c93e:	2b00      	cmp	r3, #0
 802c940:	d0fc      	beq.n	802c93c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802c942:	bf00      	nop
 802c944:	bf00      	nop
 802c946:	3714      	adds	r7, #20
 802c948:	46bd      	mov	sp, r7
 802c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c94e:	4770      	bx	lr
 802c950:	20001440 	.word	0x20001440
	...

0802c960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802c960:	4b07      	ldr	r3, [pc, #28]	; (802c980 <pxCurrentTCBConst2>)
 802c962:	6819      	ldr	r1, [r3, #0]
 802c964:	6808      	ldr	r0, [r1, #0]
 802c966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c96a:	f380 8809 	msr	PSP, r0
 802c96e:	f3bf 8f6f 	isb	sy
 802c972:	f04f 0000 	mov.w	r0, #0
 802c976:	f380 8811 	msr	BASEPRI, r0
 802c97a:	4770      	bx	lr
 802c97c:	f3af 8000 	nop.w

0802c980 <pxCurrentTCBConst2>:
 802c980:	200020d0 	.word	0x200020d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802c984:	bf00      	nop
 802c986:	bf00      	nop

0802c988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802c988:	4808      	ldr	r0, [pc, #32]	; (802c9ac <prvPortStartFirstTask+0x24>)
 802c98a:	6800      	ldr	r0, [r0, #0]
 802c98c:	6800      	ldr	r0, [r0, #0]
 802c98e:	f380 8808 	msr	MSP, r0
 802c992:	f04f 0000 	mov.w	r0, #0
 802c996:	f380 8814 	msr	CONTROL, r0
 802c99a:	b662      	cpsie	i
 802c99c:	b661      	cpsie	f
 802c99e:	f3bf 8f4f 	dsb	sy
 802c9a2:	f3bf 8f6f 	isb	sy
 802c9a6:	df00      	svc	0
 802c9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802c9aa:	bf00      	nop
 802c9ac:	e000ed08 	.word	0xe000ed08

0802c9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802c9b0:	b580      	push	{r7, lr}
 802c9b2:	b086      	sub	sp, #24
 802c9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802c9b6:	4b46      	ldr	r3, [pc, #280]	; (802cad0 <xPortStartScheduler+0x120>)
 802c9b8:	681b      	ldr	r3, [r3, #0]
 802c9ba:	4a46      	ldr	r2, [pc, #280]	; (802cad4 <xPortStartScheduler+0x124>)
 802c9bc:	4293      	cmp	r3, r2
 802c9be:	d10a      	bne.n	802c9d6 <xPortStartScheduler+0x26>
	__asm volatile
 802c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c9c4:	f383 8811 	msr	BASEPRI, r3
 802c9c8:	f3bf 8f6f 	isb	sy
 802c9cc:	f3bf 8f4f 	dsb	sy
 802c9d0:	613b      	str	r3, [r7, #16]
}
 802c9d2:	bf00      	nop
 802c9d4:	e7fe      	b.n	802c9d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802c9d6:	4b3e      	ldr	r3, [pc, #248]	; (802cad0 <xPortStartScheduler+0x120>)
 802c9d8:	681b      	ldr	r3, [r3, #0]
 802c9da:	4a3f      	ldr	r2, [pc, #252]	; (802cad8 <xPortStartScheduler+0x128>)
 802c9dc:	4293      	cmp	r3, r2
 802c9de:	d10a      	bne.n	802c9f6 <xPortStartScheduler+0x46>
	__asm volatile
 802c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802c9e4:	f383 8811 	msr	BASEPRI, r3
 802c9e8:	f3bf 8f6f 	isb	sy
 802c9ec:	f3bf 8f4f 	dsb	sy
 802c9f0:	60fb      	str	r3, [r7, #12]
}
 802c9f2:	bf00      	nop
 802c9f4:	e7fe      	b.n	802c9f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802c9f6:	4b39      	ldr	r3, [pc, #228]	; (802cadc <xPortStartScheduler+0x12c>)
 802c9f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802c9fa:	697b      	ldr	r3, [r7, #20]
 802c9fc:	781b      	ldrb	r3, [r3, #0]
 802c9fe:	b2db      	uxtb	r3, r3
 802ca00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802ca02:	697b      	ldr	r3, [r7, #20]
 802ca04:	22ff      	movs	r2, #255	; 0xff
 802ca06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802ca08:	697b      	ldr	r3, [r7, #20]
 802ca0a:	781b      	ldrb	r3, [r3, #0]
 802ca0c:	b2db      	uxtb	r3, r3
 802ca0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802ca10:	78fb      	ldrb	r3, [r7, #3]
 802ca12:	b2db      	uxtb	r3, r3
 802ca14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802ca18:	b2da      	uxtb	r2, r3
 802ca1a:	4b31      	ldr	r3, [pc, #196]	; (802cae0 <xPortStartScheduler+0x130>)
 802ca1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802ca1e:	4b31      	ldr	r3, [pc, #196]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca20:	2207      	movs	r2, #7
 802ca22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802ca24:	e009      	b.n	802ca3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 802ca26:	4b2f      	ldr	r3, [pc, #188]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca28:	681b      	ldr	r3, [r3, #0]
 802ca2a:	3b01      	subs	r3, #1
 802ca2c:	4a2d      	ldr	r2, [pc, #180]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802ca30:	78fb      	ldrb	r3, [r7, #3]
 802ca32:	b2db      	uxtb	r3, r3
 802ca34:	005b      	lsls	r3, r3, #1
 802ca36:	b2db      	uxtb	r3, r3
 802ca38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802ca3a:	78fb      	ldrb	r3, [r7, #3]
 802ca3c:	b2db      	uxtb	r3, r3
 802ca3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ca42:	2b80      	cmp	r3, #128	; 0x80
 802ca44:	d0ef      	beq.n	802ca26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802ca46:	4b27      	ldr	r3, [pc, #156]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca48:	681b      	ldr	r3, [r3, #0]
 802ca4a:	f1c3 0307 	rsb	r3, r3, #7
 802ca4e:	2b04      	cmp	r3, #4
 802ca50:	d00a      	beq.n	802ca68 <xPortStartScheduler+0xb8>
	__asm volatile
 802ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ca56:	f383 8811 	msr	BASEPRI, r3
 802ca5a:	f3bf 8f6f 	isb	sy
 802ca5e:	f3bf 8f4f 	dsb	sy
 802ca62:	60bb      	str	r3, [r7, #8]
}
 802ca64:	bf00      	nop
 802ca66:	e7fe      	b.n	802ca66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802ca68:	4b1e      	ldr	r3, [pc, #120]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca6a:	681b      	ldr	r3, [r3, #0]
 802ca6c:	021b      	lsls	r3, r3, #8
 802ca6e:	4a1d      	ldr	r2, [pc, #116]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802ca72:	4b1c      	ldr	r3, [pc, #112]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca74:	681b      	ldr	r3, [r3, #0]
 802ca76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802ca7a:	4a1a      	ldr	r2, [pc, #104]	; (802cae4 <xPortStartScheduler+0x134>)
 802ca7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	b2da      	uxtb	r2, r3
 802ca82:	697b      	ldr	r3, [r7, #20]
 802ca84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802ca86:	4b18      	ldr	r3, [pc, #96]	; (802cae8 <xPortStartScheduler+0x138>)
 802ca88:	681b      	ldr	r3, [r3, #0]
 802ca8a:	4a17      	ldr	r2, [pc, #92]	; (802cae8 <xPortStartScheduler+0x138>)
 802ca8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802ca90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802ca92:	4b15      	ldr	r3, [pc, #84]	; (802cae8 <xPortStartScheduler+0x138>)
 802ca94:	681b      	ldr	r3, [r3, #0]
 802ca96:	4a14      	ldr	r2, [pc, #80]	; (802cae8 <xPortStartScheduler+0x138>)
 802ca98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802ca9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802ca9e:	f000 f8dd 	bl	802cc5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802caa2:	4b12      	ldr	r3, [pc, #72]	; (802caec <xPortStartScheduler+0x13c>)
 802caa4:	2200      	movs	r2, #0
 802caa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802caa8:	f000 f8fc 	bl	802cca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802caac:	4b10      	ldr	r3, [pc, #64]	; (802caf0 <xPortStartScheduler+0x140>)
 802caae:	681b      	ldr	r3, [r3, #0]
 802cab0:	4a0f      	ldr	r2, [pc, #60]	; (802caf0 <xPortStartScheduler+0x140>)
 802cab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802cab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802cab8:	f7ff ff66 	bl	802c988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802cabc:	f7fe ffec 	bl	802ba98 <vTaskSwitchContext>
	prvTaskExitError();
 802cac0:	f7ff ff1c 	bl	802c8fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802cac4:	2300      	movs	r3, #0
}
 802cac6:	4618      	mov	r0, r3
 802cac8:	3718      	adds	r7, #24
 802caca:	46bd      	mov	sp, r7
 802cacc:	bd80      	pop	{r7, pc}
 802cace:	bf00      	nop
 802cad0:	e000ed00 	.word	0xe000ed00
 802cad4:	410fc271 	.word	0x410fc271
 802cad8:	410fc270 	.word	0x410fc270
 802cadc:	e000e400 	.word	0xe000e400
 802cae0:	200026fc 	.word	0x200026fc
 802cae4:	20002700 	.word	0x20002700
 802cae8:	e000ed20 	.word	0xe000ed20
 802caec:	20001440 	.word	0x20001440
 802caf0:	e000ef34 	.word	0xe000ef34

0802caf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802caf4:	b480      	push	{r7}
 802caf6:	b083      	sub	sp, #12
 802caf8:	af00      	add	r7, sp, #0
	__asm volatile
 802cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cafe:	f383 8811 	msr	BASEPRI, r3
 802cb02:	f3bf 8f6f 	isb	sy
 802cb06:	f3bf 8f4f 	dsb	sy
 802cb0a:	607b      	str	r3, [r7, #4]
}
 802cb0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802cb0e:	4b0f      	ldr	r3, [pc, #60]	; (802cb4c <vPortEnterCritical+0x58>)
 802cb10:	681b      	ldr	r3, [r3, #0]
 802cb12:	3301      	adds	r3, #1
 802cb14:	4a0d      	ldr	r2, [pc, #52]	; (802cb4c <vPortEnterCritical+0x58>)
 802cb16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802cb18:	4b0c      	ldr	r3, [pc, #48]	; (802cb4c <vPortEnterCritical+0x58>)
 802cb1a:	681b      	ldr	r3, [r3, #0]
 802cb1c:	2b01      	cmp	r3, #1
 802cb1e:	d10f      	bne.n	802cb40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802cb20:	4b0b      	ldr	r3, [pc, #44]	; (802cb50 <vPortEnterCritical+0x5c>)
 802cb22:	681b      	ldr	r3, [r3, #0]
 802cb24:	b2db      	uxtb	r3, r3
 802cb26:	2b00      	cmp	r3, #0
 802cb28:	d00a      	beq.n	802cb40 <vPortEnterCritical+0x4c>
	__asm volatile
 802cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cb2e:	f383 8811 	msr	BASEPRI, r3
 802cb32:	f3bf 8f6f 	isb	sy
 802cb36:	f3bf 8f4f 	dsb	sy
 802cb3a:	603b      	str	r3, [r7, #0]
}
 802cb3c:	bf00      	nop
 802cb3e:	e7fe      	b.n	802cb3e <vPortEnterCritical+0x4a>
	}
}
 802cb40:	bf00      	nop
 802cb42:	370c      	adds	r7, #12
 802cb44:	46bd      	mov	sp, r7
 802cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb4a:	4770      	bx	lr
 802cb4c:	20001440 	.word	0x20001440
 802cb50:	e000ed04 	.word	0xe000ed04

0802cb54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802cb54:	b480      	push	{r7}
 802cb56:	b083      	sub	sp, #12
 802cb58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802cb5a:	4b12      	ldr	r3, [pc, #72]	; (802cba4 <vPortExitCritical+0x50>)
 802cb5c:	681b      	ldr	r3, [r3, #0]
 802cb5e:	2b00      	cmp	r3, #0
 802cb60:	d10a      	bne.n	802cb78 <vPortExitCritical+0x24>
	__asm volatile
 802cb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cb66:	f383 8811 	msr	BASEPRI, r3
 802cb6a:	f3bf 8f6f 	isb	sy
 802cb6e:	f3bf 8f4f 	dsb	sy
 802cb72:	607b      	str	r3, [r7, #4]
}
 802cb74:	bf00      	nop
 802cb76:	e7fe      	b.n	802cb76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 802cb78:	4b0a      	ldr	r3, [pc, #40]	; (802cba4 <vPortExitCritical+0x50>)
 802cb7a:	681b      	ldr	r3, [r3, #0]
 802cb7c:	3b01      	subs	r3, #1
 802cb7e:	4a09      	ldr	r2, [pc, #36]	; (802cba4 <vPortExitCritical+0x50>)
 802cb80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802cb82:	4b08      	ldr	r3, [pc, #32]	; (802cba4 <vPortExitCritical+0x50>)
 802cb84:	681b      	ldr	r3, [r3, #0]
 802cb86:	2b00      	cmp	r3, #0
 802cb88:	d105      	bne.n	802cb96 <vPortExitCritical+0x42>
 802cb8a:	2300      	movs	r3, #0
 802cb8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802cb8e:	683b      	ldr	r3, [r7, #0]
 802cb90:	f383 8811 	msr	BASEPRI, r3
}
 802cb94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802cb96:	bf00      	nop
 802cb98:	370c      	adds	r7, #12
 802cb9a:	46bd      	mov	sp, r7
 802cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cba0:	4770      	bx	lr
 802cba2:	bf00      	nop
 802cba4:	20001440 	.word	0x20001440
	...

0802cbb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802cbb0:	f3ef 8009 	mrs	r0, PSP
 802cbb4:	f3bf 8f6f 	isb	sy
 802cbb8:	4b15      	ldr	r3, [pc, #84]	; (802cc10 <pxCurrentTCBConst>)
 802cbba:	681a      	ldr	r2, [r3, #0]
 802cbbc:	f01e 0f10 	tst.w	lr, #16
 802cbc0:	bf08      	it	eq
 802cbc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802cbc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cbca:	6010      	str	r0, [r2, #0]
 802cbcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 802cbd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 802cbd4:	f380 8811 	msr	BASEPRI, r0
 802cbd8:	f3bf 8f4f 	dsb	sy
 802cbdc:	f3bf 8f6f 	isb	sy
 802cbe0:	f7fe ff5a 	bl	802ba98 <vTaskSwitchContext>
 802cbe4:	f04f 0000 	mov.w	r0, #0
 802cbe8:	f380 8811 	msr	BASEPRI, r0
 802cbec:	bc09      	pop	{r0, r3}
 802cbee:	6819      	ldr	r1, [r3, #0]
 802cbf0:	6808      	ldr	r0, [r1, #0]
 802cbf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cbf6:	f01e 0f10 	tst.w	lr, #16
 802cbfa:	bf08      	it	eq
 802cbfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802cc00:	f380 8809 	msr	PSP, r0
 802cc04:	f3bf 8f6f 	isb	sy
 802cc08:	4770      	bx	lr
 802cc0a:	bf00      	nop
 802cc0c:	f3af 8000 	nop.w

0802cc10 <pxCurrentTCBConst>:
 802cc10:	200020d0 	.word	0x200020d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802cc14:	bf00      	nop
 802cc16:	bf00      	nop

0802cc18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802cc18:	b580      	push	{r7, lr}
 802cc1a:	b082      	sub	sp, #8
 802cc1c:	af00      	add	r7, sp, #0
	__asm volatile
 802cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cc22:	f383 8811 	msr	BASEPRI, r3
 802cc26:	f3bf 8f6f 	isb	sy
 802cc2a:	f3bf 8f4f 	dsb	sy
 802cc2e:	607b      	str	r3, [r7, #4]
}
 802cc30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802cc32:	f7fe fe73 	bl	802b91c <xTaskIncrementTick>
 802cc36:	4603      	mov	r3, r0
 802cc38:	2b00      	cmp	r3, #0
 802cc3a:	d003      	beq.n	802cc44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802cc3c:	4b06      	ldr	r3, [pc, #24]	; (802cc58 <xPortSysTickHandler+0x40>)
 802cc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802cc42:	601a      	str	r2, [r3, #0]
 802cc44:	2300      	movs	r3, #0
 802cc46:	603b      	str	r3, [r7, #0]
	__asm volatile
 802cc48:	683b      	ldr	r3, [r7, #0]
 802cc4a:	f383 8811 	msr	BASEPRI, r3
}
 802cc4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 802cc50:	bf00      	nop
 802cc52:	3708      	adds	r7, #8
 802cc54:	46bd      	mov	sp, r7
 802cc56:	bd80      	pop	{r7, pc}
 802cc58:	e000ed04 	.word	0xe000ed04

0802cc5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802cc5c:	b480      	push	{r7}
 802cc5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802cc60:	4b0b      	ldr	r3, [pc, #44]	; (802cc90 <vPortSetupTimerInterrupt+0x34>)
 802cc62:	2200      	movs	r2, #0
 802cc64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802cc66:	4b0b      	ldr	r3, [pc, #44]	; (802cc94 <vPortSetupTimerInterrupt+0x38>)
 802cc68:	2200      	movs	r2, #0
 802cc6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802cc6c:	4b0a      	ldr	r3, [pc, #40]	; (802cc98 <vPortSetupTimerInterrupt+0x3c>)
 802cc6e:	681b      	ldr	r3, [r3, #0]
 802cc70:	4a0a      	ldr	r2, [pc, #40]	; (802cc9c <vPortSetupTimerInterrupt+0x40>)
 802cc72:	fba2 2303 	umull	r2, r3, r2, r3
 802cc76:	099b      	lsrs	r3, r3, #6
 802cc78:	4a09      	ldr	r2, [pc, #36]	; (802cca0 <vPortSetupTimerInterrupt+0x44>)
 802cc7a:	3b01      	subs	r3, #1
 802cc7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802cc7e:	4b04      	ldr	r3, [pc, #16]	; (802cc90 <vPortSetupTimerInterrupt+0x34>)
 802cc80:	2207      	movs	r2, #7
 802cc82:	601a      	str	r2, [r3, #0]
}
 802cc84:	bf00      	nop
 802cc86:	46bd      	mov	sp, r7
 802cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc8c:	4770      	bx	lr
 802cc8e:	bf00      	nop
 802cc90:	e000e010 	.word	0xe000e010
 802cc94:	e000e018 	.word	0xe000e018
 802cc98:	20000084 	.word	0x20000084
 802cc9c:	10624dd3 	.word	0x10624dd3
 802cca0:	e000e014 	.word	0xe000e014

0802cca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802cca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802ccb4 <vPortEnableVFP+0x10>
 802cca8:	6801      	ldr	r1, [r0, #0]
 802ccaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802ccae:	6001      	str	r1, [r0, #0]
 802ccb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802ccb2:	bf00      	nop
 802ccb4:	e000ed88 	.word	0xe000ed88

0802ccb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802ccb8:	b480      	push	{r7}
 802ccba:	b085      	sub	sp, #20
 802ccbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802ccbe:	f3ef 8305 	mrs	r3, IPSR
 802ccc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802ccc4:	68fb      	ldr	r3, [r7, #12]
 802ccc6:	2b0f      	cmp	r3, #15
 802ccc8:	d914      	bls.n	802ccf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802ccca:	4a17      	ldr	r2, [pc, #92]	; (802cd28 <vPortValidateInterruptPriority+0x70>)
 802cccc:	68fb      	ldr	r3, [r7, #12]
 802ccce:	4413      	add	r3, r2
 802ccd0:	781b      	ldrb	r3, [r3, #0]
 802ccd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802ccd4:	4b15      	ldr	r3, [pc, #84]	; (802cd2c <vPortValidateInterruptPriority+0x74>)
 802ccd6:	781b      	ldrb	r3, [r3, #0]
 802ccd8:	7afa      	ldrb	r2, [r7, #11]
 802ccda:	429a      	cmp	r2, r3
 802ccdc:	d20a      	bcs.n	802ccf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cce2:	f383 8811 	msr	BASEPRI, r3
 802cce6:	f3bf 8f6f 	isb	sy
 802ccea:	f3bf 8f4f 	dsb	sy
 802ccee:	607b      	str	r3, [r7, #4]
}
 802ccf0:	bf00      	nop
 802ccf2:	e7fe      	b.n	802ccf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802ccf4:	4b0e      	ldr	r3, [pc, #56]	; (802cd30 <vPortValidateInterruptPriority+0x78>)
 802ccf6:	681b      	ldr	r3, [r3, #0]
 802ccf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802ccfc:	4b0d      	ldr	r3, [pc, #52]	; (802cd34 <vPortValidateInterruptPriority+0x7c>)
 802ccfe:	681b      	ldr	r3, [r3, #0]
 802cd00:	429a      	cmp	r2, r3
 802cd02:	d90a      	bls.n	802cd1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 802cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cd08:	f383 8811 	msr	BASEPRI, r3
 802cd0c:	f3bf 8f6f 	isb	sy
 802cd10:	f3bf 8f4f 	dsb	sy
 802cd14:	603b      	str	r3, [r7, #0]
}
 802cd16:	bf00      	nop
 802cd18:	e7fe      	b.n	802cd18 <vPortValidateInterruptPriority+0x60>
	}
 802cd1a:	bf00      	nop
 802cd1c:	3714      	adds	r7, #20
 802cd1e:	46bd      	mov	sp, r7
 802cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd24:	4770      	bx	lr
 802cd26:	bf00      	nop
 802cd28:	e000e3f0 	.word	0xe000e3f0
 802cd2c:	200026fc 	.word	0x200026fc
 802cd30:	e000ed0c 	.word	0xe000ed0c
 802cd34:	20002700 	.word	0x20002700

0802cd38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802cd38:	b580      	push	{r7, lr}
 802cd3a:	b08a      	sub	sp, #40	; 0x28
 802cd3c:	af00      	add	r7, sp, #0
 802cd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802cd40:	2300      	movs	r3, #0
 802cd42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802cd44:	f7fe fd18 	bl	802b778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802cd48:	4b5b      	ldr	r3, [pc, #364]	; (802ceb8 <pvPortMalloc+0x180>)
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	2b00      	cmp	r3, #0
 802cd4e:	d101      	bne.n	802cd54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802cd50:	f000 f920 	bl	802cf94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802cd54:	4b59      	ldr	r3, [pc, #356]	; (802cebc <pvPortMalloc+0x184>)
 802cd56:	681a      	ldr	r2, [r3, #0]
 802cd58:	687b      	ldr	r3, [r7, #4]
 802cd5a:	4013      	ands	r3, r2
 802cd5c:	2b00      	cmp	r3, #0
 802cd5e:	f040 8093 	bne.w	802ce88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802cd62:	687b      	ldr	r3, [r7, #4]
 802cd64:	2b00      	cmp	r3, #0
 802cd66:	d01d      	beq.n	802cda4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 802cd68:	2208      	movs	r2, #8
 802cd6a:	687b      	ldr	r3, [r7, #4]
 802cd6c:	4413      	add	r3, r2
 802cd6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802cd70:	687b      	ldr	r3, [r7, #4]
 802cd72:	f003 0307 	and.w	r3, r3, #7
 802cd76:	2b00      	cmp	r3, #0
 802cd78:	d014      	beq.n	802cda4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802cd7a:	687b      	ldr	r3, [r7, #4]
 802cd7c:	f023 0307 	bic.w	r3, r3, #7
 802cd80:	3308      	adds	r3, #8
 802cd82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	f003 0307 	and.w	r3, r3, #7
 802cd8a:	2b00      	cmp	r3, #0
 802cd8c:	d00a      	beq.n	802cda4 <pvPortMalloc+0x6c>
	__asm volatile
 802cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cd92:	f383 8811 	msr	BASEPRI, r3
 802cd96:	f3bf 8f6f 	isb	sy
 802cd9a:	f3bf 8f4f 	dsb	sy
 802cd9e:	617b      	str	r3, [r7, #20]
}
 802cda0:	bf00      	nop
 802cda2:	e7fe      	b.n	802cda2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802cda4:	687b      	ldr	r3, [r7, #4]
 802cda6:	2b00      	cmp	r3, #0
 802cda8:	d06e      	beq.n	802ce88 <pvPortMalloc+0x150>
 802cdaa:	4b45      	ldr	r3, [pc, #276]	; (802cec0 <pvPortMalloc+0x188>)
 802cdac:	681b      	ldr	r3, [r3, #0]
 802cdae:	687a      	ldr	r2, [r7, #4]
 802cdb0:	429a      	cmp	r2, r3
 802cdb2:	d869      	bhi.n	802ce88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802cdb4:	4b43      	ldr	r3, [pc, #268]	; (802cec4 <pvPortMalloc+0x18c>)
 802cdb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802cdb8:	4b42      	ldr	r3, [pc, #264]	; (802cec4 <pvPortMalloc+0x18c>)
 802cdba:	681b      	ldr	r3, [r3, #0]
 802cdbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802cdbe:	e004      	b.n	802cdca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 802cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdc6:	681b      	ldr	r3, [r3, #0]
 802cdc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdcc:	685b      	ldr	r3, [r3, #4]
 802cdce:	687a      	ldr	r2, [r7, #4]
 802cdd0:	429a      	cmp	r2, r3
 802cdd2:	d903      	bls.n	802cddc <pvPortMalloc+0xa4>
 802cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdd6:	681b      	ldr	r3, [r3, #0]
 802cdd8:	2b00      	cmp	r3, #0
 802cdda:	d1f1      	bne.n	802cdc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802cddc:	4b36      	ldr	r3, [pc, #216]	; (802ceb8 <pvPortMalloc+0x180>)
 802cdde:	681b      	ldr	r3, [r3, #0]
 802cde0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cde2:	429a      	cmp	r2, r3
 802cde4:	d050      	beq.n	802ce88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802cde6:	6a3b      	ldr	r3, [r7, #32]
 802cde8:	681b      	ldr	r3, [r3, #0]
 802cdea:	2208      	movs	r2, #8
 802cdec:	4413      	add	r3, r2
 802cdee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdf2:	681a      	ldr	r2, [r3, #0]
 802cdf4:	6a3b      	ldr	r3, [r7, #32]
 802cdf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cdfa:	685a      	ldr	r2, [r3, #4]
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	1ad2      	subs	r2, r2, r3
 802ce00:	2308      	movs	r3, #8
 802ce02:	005b      	lsls	r3, r3, #1
 802ce04:	429a      	cmp	r2, r3
 802ce06:	d91f      	bls.n	802ce48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802ce08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ce0a:	687b      	ldr	r3, [r7, #4]
 802ce0c:	4413      	add	r3, r2
 802ce0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802ce10:	69bb      	ldr	r3, [r7, #24]
 802ce12:	f003 0307 	and.w	r3, r3, #7
 802ce16:	2b00      	cmp	r3, #0
 802ce18:	d00a      	beq.n	802ce30 <pvPortMalloc+0xf8>
	__asm volatile
 802ce1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ce1e:	f383 8811 	msr	BASEPRI, r3
 802ce22:	f3bf 8f6f 	isb	sy
 802ce26:	f3bf 8f4f 	dsb	sy
 802ce2a:	613b      	str	r3, [r7, #16]
}
 802ce2c:	bf00      	nop
 802ce2e:	e7fe      	b.n	802ce2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce32:	685a      	ldr	r2, [r3, #4]
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	1ad2      	subs	r2, r2, r3
 802ce38:	69bb      	ldr	r3, [r7, #24]
 802ce3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce3e:	687a      	ldr	r2, [r7, #4]
 802ce40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802ce42:	69b8      	ldr	r0, [r7, #24]
 802ce44:	f000 f90a 	bl	802d05c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802ce48:	4b1d      	ldr	r3, [pc, #116]	; (802cec0 <pvPortMalloc+0x188>)
 802ce4a:	681a      	ldr	r2, [r3, #0]
 802ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce4e:	685b      	ldr	r3, [r3, #4]
 802ce50:	1ad3      	subs	r3, r2, r3
 802ce52:	4a1b      	ldr	r2, [pc, #108]	; (802cec0 <pvPortMalloc+0x188>)
 802ce54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802ce56:	4b1a      	ldr	r3, [pc, #104]	; (802cec0 <pvPortMalloc+0x188>)
 802ce58:	681a      	ldr	r2, [r3, #0]
 802ce5a:	4b1b      	ldr	r3, [pc, #108]	; (802cec8 <pvPortMalloc+0x190>)
 802ce5c:	681b      	ldr	r3, [r3, #0]
 802ce5e:	429a      	cmp	r2, r3
 802ce60:	d203      	bcs.n	802ce6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802ce62:	4b17      	ldr	r3, [pc, #92]	; (802cec0 <pvPortMalloc+0x188>)
 802ce64:	681b      	ldr	r3, [r3, #0]
 802ce66:	4a18      	ldr	r2, [pc, #96]	; (802cec8 <pvPortMalloc+0x190>)
 802ce68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce6c:	685a      	ldr	r2, [r3, #4]
 802ce6e:	4b13      	ldr	r3, [pc, #76]	; (802cebc <pvPortMalloc+0x184>)
 802ce70:	681b      	ldr	r3, [r3, #0]
 802ce72:	431a      	orrs	r2, r3
 802ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ce7a:	2200      	movs	r2, #0
 802ce7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802ce7e:	4b13      	ldr	r3, [pc, #76]	; (802cecc <pvPortMalloc+0x194>)
 802ce80:	681b      	ldr	r3, [r3, #0]
 802ce82:	3301      	adds	r3, #1
 802ce84:	4a11      	ldr	r2, [pc, #68]	; (802cecc <pvPortMalloc+0x194>)
 802ce86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802ce88:	f7fe fc84 	bl	802b794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802ce8c:	69fb      	ldr	r3, [r7, #28]
 802ce8e:	f003 0307 	and.w	r3, r3, #7
 802ce92:	2b00      	cmp	r3, #0
 802ce94:	d00a      	beq.n	802ceac <pvPortMalloc+0x174>
	__asm volatile
 802ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ce9a:	f383 8811 	msr	BASEPRI, r3
 802ce9e:	f3bf 8f6f 	isb	sy
 802cea2:	f3bf 8f4f 	dsb	sy
 802cea6:	60fb      	str	r3, [r7, #12]
}
 802cea8:	bf00      	nop
 802ceaa:	e7fe      	b.n	802ceaa <pvPortMalloc+0x172>
	return pvReturn;
 802ceac:	69fb      	ldr	r3, [r7, #28]
}
 802ceae:	4618      	mov	r0, r3
 802ceb0:	3728      	adds	r7, #40	; 0x28
 802ceb2:	46bd      	mov	sp, r7
 802ceb4:	bd80      	pop	{r7, pc}
 802ceb6:	bf00      	nop
 802ceb8:	2001adac 	.word	0x2001adac
 802cebc:	2001adc0 	.word	0x2001adc0
 802cec0:	2001adb0 	.word	0x2001adb0
 802cec4:	2001ada4 	.word	0x2001ada4
 802cec8:	2001adb4 	.word	0x2001adb4
 802cecc:	2001adb8 	.word	0x2001adb8

0802ced0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802ced0:	b580      	push	{r7, lr}
 802ced2:	b086      	sub	sp, #24
 802ced4:	af00      	add	r7, sp, #0
 802ced6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802ced8:	687b      	ldr	r3, [r7, #4]
 802ceda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802cedc:	687b      	ldr	r3, [r7, #4]
 802cede:	2b00      	cmp	r3, #0
 802cee0:	d04d      	beq.n	802cf7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802cee2:	2308      	movs	r3, #8
 802cee4:	425b      	negs	r3, r3
 802cee6:	697a      	ldr	r2, [r7, #20]
 802cee8:	4413      	add	r3, r2
 802ceea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802ceec:	697b      	ldr	r3, [r7, #20]
 802ceee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802cef0:	693b      	ldr	r3, [r7, #16]
 802cef2:	685a      	ldr	r2, [r3, #4]
 802cef4:	4b24      	ldr	r3, [pc, #144]	; (802cf88 <vPortFree+0xb8>)
 802cef6:	681b      	ldr	r3, [r3, #0]
 802cef8:	4013      	ands	r3, r2
 802cefa:	2b00      	cmp	r3, #0
 802cefc:	d10a      	bne.n	802cf14 <vPortFree+0x44>
	__asm volatile
 802cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cf02:	f383 8811 	msr	BASEPRI, r3
 802cf06:	f3bf 8f6f 	isb	sy
 802cf0a:	f3bf 8f4f 	dsb	sy
 802cf0e:	60fb      	str	r3, [r7, #12]
}
 802cf10:	bf00      	nop
 802cf12:	e7fe      	b.n	802cf12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802cf14:	693b      	ldr	r3, [r7, #16]
 802cf16:	681b      	ldr	r3, [r3, #0]
 802cf18:	2b00      	cmp	r3, #0
 802cf1a:	d00a      	beq.n	802cf32 <vPortFree+0x62>
	__asm volatile
 802cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802cf20:	f383 8811 	msr	BASEPRI, r3
 802cf24:	f3bf 8f6f 	isb	sy
 802cf28:	f3bf 8f4f 	dsb	sy
 802cf2c:	60bb      	str	r3, [r7, #8]
}
 802cf2e:	bf00      	nop
 802cf30:	e7fe      	b.n	802cf30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802cf32:	693b      	ldr	r3, [r7, #16]
 802cf34:	685a      	ldr	r2, [r3, #4]
 802cf36:	4b14      	ldr	r3, [pc, #80]	; (802cf88 <vPortFree+0xb8>)
 802cf38:	681b      	ldr	r3, [r3, #0]
 802cf3a:	4013      	ands	r3, r2
 802cf3c:	2b00      	cmp	r3, #0
 802cf3e:	d01e      	beq.n	802cf7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802cf40:	693b      	ldr	r3, [r7, #16]
 802cf42:	681b      	ldr	r3, [r3, #0]
 802cf44:	2b00      	cmp	r3, #0
 802cf46:	d11a      	bne.n	802cf7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802cf48:	693b      	ldr	r3, [r7, #16]
 802cf4a:	685a      	ldr	r2, [r3, #4]
 802cf4c:	4b0e      	ldr	r3, [pc, #56]	; (802cf88 <vPortFree+0xb8>)
 802cf4e:	681b      	ldr	r3, [r3, #0]
 802cf50:	43db      	mvns	r3, r3
 802cf52:	401a      	ands	r2, r3
 802cf54:	693b      	ldr	r3, [r7, #16]
 802cf56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802cf58:	f7fe fc0e 	bl	802b778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802cf5c:	693b      	ldr	r3, [r7, #16]
 802cf5e:	685a      	ldr	r2, [r3, #4]
 802cf60:	4b0a      	ldr	r3, [pc, #40]	; (802cf8c <vPortFree+0xbc>)
 802cf62:	681b      	ldr	r3, [r3, #0]
 802cf64:	4413      	add	r3, r2
 802cf66:	4a09      	ldr	r2, [pc, #36]	; (802cf8c <vPortFree+0xbc>)
 802cf68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802cf6a:	6938      	ldr	r0, [r7, #16]
 802cf6c:	f000 f876 	bl	802d05c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802cf70:	4b07      	ldr	r3, [pc, #28]	; (802cf90 <vPortFree+0xc0>)
 802cf72:	681b      	ldr	r3, [r3, #0]
 802cf74:	3301      	adds	r3, #1
 802cf76:	4a06      	ldr	r2, [pc, #24]	; (802cf90 <vPortFree+0xc0>)
 802cf78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802cf7a:	f7fe fc0b 	bl	802b794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802cf7e:	bf00      	nop
 802cf80:	3718      	adds	r7, #24
 802cf82:	46bd      	mov	sp, r7
 802cf84:	bd80      	pop	{r7, pc}
 802cf86:	bf00      	nop
 802cf88:	2001adc0 	.word	0x2001adc0
 802cf8c:	2001adb0 	.word	0x2001adb0
 802cf90:	2001adbc 	.word	0x2001adbc

0802cf94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802cf94:	b480      	push	{r7}
 802cf96:	b085      	sub	sp, #20
 802cf98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802cf9a:	4b29      	ldr	r3, [pc, #164]	; (802d040 <prvHeapInit+0xac>)
 802cf9c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802cf9e:	4b29      	ldr	r3, [pc, #164]	; (802d044 <prvHeapInit+0xb0>)
 802cfa0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802cfa2:	68fb      	ldr	r3, [r7, #12]
 802cfa4:	f003 0307 	and.w	r3, r3, #7
 802cfa8:	2b00      	cmp	r3, #0
 802cfaa:	d00c      	beq.n	802cfc6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802cfac:	68fb      	ldr	r3, [r7, #12]
 802cfae:	3307      	adds	r3, #7
 802cfb0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802cfb2:	68fb      	ldr	r3, [r7, #12]
 802cfb4:	f023 0307 	bic.w	r3, r3, #7
 802cfb8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802cfba:	68ba      	ldr	r2, [r7, #8]
 802cfbc:	68fb      	ldr	r3, [r7, #12]
 802cfbe:	1ad3      	subs	r3, r2, r3
 802cfc0:	4a20      	ldr	r2, [pc, #128]	; (802d044 <prvHeapInit+0xb0>)
 802cfc2:	4413      	add	r3, r2
 802cfc4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802cfc6:	68fb      	ldr	r3, [r7, #12]
 802cfc8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802cfca:	4a1f      	ldr	r2, [pc, #124]	; (802d048 <prvHeapInit+0xb4>)
 802cfcc:	687b      	ldr	r3, [r7, #4]
 802cfce:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802cfd0:	4b1d      	ldr	r3, [pc, #116]	; (802d048 <prvHeapInit+0xb4>)
 802cfd2:	2200      	movs	r2, #0
 802cfd4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802cfd6:	687b      	ldr	r3, [r7, #4]
 802cfd8:	68ba      	ldr	r2, [r7, #8]
 802cfda:	4413      	add	r3, r2
 802cfdc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802cfde:	2208      	movs	r2, #8
 802cfe0:	68fb      	ldr	r3, [r7, #12]
 802cfe2:	1a9b      	subs	r3, r3, r2
 802cfe4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802cfe6:	68fb      	ldr	r3, [r7, #12]
 802cfe8:	f023 0307 	bic.w	r3, r3, #7
 802cfec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802cfee:	68fb      	ldr	r3, [r7, #12]
 802cff0:	4a16      	ldr	r2, [pc, #88]	; (802d04c <prvHeapInit+0xb8>)
 802cff2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802cff4:	4b15      	ldr	r3, [pc, #84]	; (802d04c <prvHeapInit+0xb8>)
 802cff6:	681b      	ldr	r3, [r3, #0]
 802cff8:	2200      	movs	r2, #0
 802cffa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802cffc:	4b13      	ldr	r3, [pc, #76]	; (802d04c <prvHeapInit+0xb8>)
 802cffe:	681b      	ldr	r3, [r3, #0]
 802d000:	2200      	movs	r2, #0
 802d002:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802d004:	687b      	ldr	r3, [r7, #4]
 802d006:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802d008:	683b      	ldr	r3, [r7, #0]
 802d00a:	68fa      	ldr	r2, [r7, #12]
 802d00c:	1ad2      	subs	r2, r2, r3
 802d00e:	683b      	ldr	r3, [r7, #0]
 802d010:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802d012:	4b0e      	ldr	r3, [pc, #56]	; (802d04c <prvHeapInit+0xb8>)
 802d014:	681a      	ldr	r2, [r3, #0]
 802d016:	683b      	ldr	r3, [r7, #0]
 802d018:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802d01a:	683b      	ldr	r3, [r7, #0]
 802d01c:	685b      	ldr	r3, [r3, #4]
 802d01e:	4a0c      	ldr	r2, [pc, #48]	; (802d050 <prvHeapInit+0xbc>)
 802d020:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802d022:	683b      	ldr	r3, [r7, #0]
 802d024:	685b      	ldr	r3, [r3, #4]
 802d026:	4a0b      	ldr	r2, [pc, #44]	; (802d054 <prvHeapInit+0xc0>)
 802d028:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802d02a:	4b0b      	ldr	r3, [pc, #44]	; (802d058 <prvHeapInit+0xc4>)
 802d02c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802d030:	601a      	str	r2, [r3, #0]
}
 802d032:	bf00      	nop
 802d034:	3714      	adds	r7, #20
 802d036:	46bd      	mov	sp, r7
 802d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d03c:	4770      	bx	lr
 802d03e:	bf00      	nop
 802d040:	000186a0 	.word	0x000186a0
 802d044:	20002704 	.word	0x20002704
 802d048:	2001ada4 	.word	0x2001ada4
 802d04c:	2001adac 	.word	0x2001adac
 802d050:	2001adb4 	.word	0x2001adb4
 802d054:	2001adb0 	.word	0x2001adb0
 802d058:	2001adc0 	.word	0x2001adc0

0802d05c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802d05c:	b480      	push	{r7}
 802d05e:	b085      	sub	sp, #20
 802d060:	af00      	add	r7, sp, #0
 802d062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802d064:	4b28      	ldr	r3, [pc, #160]	; (802d108 <prvInsertBlockIntoFreeList+0xac>)
 802d066:	60fb      	str	r3, [r7, #12]
 802d068:	e002      	b.n	802d070 <prvInsertBlockIntoFreeList+0x14>
 802d06a:	68fb      	ldr	r3, [r7, #12]
 802d06c:	681b      	ldr	r3, [r3, #0]
 802d06e:	60fb      	str	r3, [r7, #12]
 802d070:	68fb      	ldr	r3, [r7, #12]
 802d072:	681b      	ldr	r3, [r3, #0]
 802d074:	687a      	ldr	r2, [r7, #4]
 802d076:	429a      	cmp	r2, r3
 802d078:	d8f7      	bhi.n	802d06a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802d07a:	68fb      	ldr	r3, [r7, #12]
 802d07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802d07e:	68fb      	ldr	r3, [r7, #12]
 802d080:	685b      	ldr	r3, [r3, #4]
 802d082:	68ba      	ldr	r2, [r7, #8]
 802d084:	4413      	add	r3, r2
 802d086:	687a      	ldr	r2, [r7, #4]
 802d088:	429a      	cmp	r2, r3
 802d08a:	d108      	bne.n	802d09e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802d08c:	68fb      	ldr	r3, [r7, #12]
 802d08e:	685a      	ldr	r2, [r3, #4]
 802d090:	687b      	ldr	r3, [r7, #4]
 802d092:	685b      	ldr	r3, [r3, #4]
 802d094:	441a      	add	r2, r3
 802d096:	68fb      	ldr	r3, [r7, #12]
 802d098:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802d09a:	68fb      	ldr	r3, [r7, #12]
 802d09c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802d09e:	687b      	ldr	r3, [r7, #4]
 802d0a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	685b      	ldr	r3, [r3, #4]
 802d0a6:	68ba      	ldr	r2, [r7, #8]
 802d0a8:	441a      	add	r2, r3
 802d0aa:	68fb      	ldr	r3, [r7, #12]
 802d0ac:	681b      	ldr	r3, [r3, #0]
 802d0ae:	429a      	cmp	r2, r3
 802d0b0:	d118      	bne.n	802d0e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802d0b2:	68fb      	ldr	r3, [r7, #12]
 802d0b4:	681a      	ldr	r2, [r3, #0]
 802d0b6:	4b15      	ldr	r3, [pc, #84]	; (802d10c <prvInsertBlockIntoFreeList+0xb0>)
 802d0b8:	681b      	ldr	r3, [r3, #0]
 802d0ba:	429a      	cmp	r2, r3
 802d0bc:	d00d      	beq.n	802d0da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802d0be:	687b      	ldr	r3, [r7, #4]
 802d0c0:	685a      	ldr	r2, [r3, #4]
 802d0c2:	68fb      	ldr	r3, [r7, #12]
 802d0c4:	681b      	ldr	r3, [r3, #0]
 802d0c6:	685b      	ldr	r3, [r3, #4]
 802d0c8:	441a      	add	r2, r3
 802d0ca:	687b      	ldr	r3, [r7, #4]
 802d0cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802d0ce:	68fb      	ldr	r3, [r7, #12]
 802d0d0:	681b      	ldr	r3, [r3, #0]
 802d0d2:	681a      	ldr	r2, [r3, #0]
 802d0d4:	687b      	ldr	r3, [r7, #4]
 802d0d6:	601a      	str	r2, [r3, #0]
 802d0d8:	e008      	b.n	802d0ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802d0da:	4b0c      	ldr	r3, [pc, #48]	; (802d10c <prvInsertBlockIntoFreeList+0xb0>)
 802d0dc:	681a      	ldr	r2, [r3, #0]
 802d0de:	687b      	ldr	r3, [r7, #4]
 802d0e0:	601a      	str	r2, [r3, #0]
 802d0e2:	e003      	b.n	802d0ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802d0e4:	68fb      	ldr	r3, [r7, #12]
 802d0e6:	681a      	ldr	r2, [r3, #0]
 802d0e8:	687b      	ldr	r3, [r7, #4]
 802d0ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802d0ec:	68fa      	ldr	r2, [r7, #12]
 802d0ee:	687b      	ldr	r3, [r7, #4]
 802d0f0:	429a      	cmp	r2, r3
 802d0f2:	d002      	beq.n	802d0fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802d0f4:	68fb      	ldr	r3, [r7, #12]
 802d0f6:	687a      	ldr	r2, [r7, #4]
 802d0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802d0fa:	bf00      	nop
 802d0fc:	3714      	adds	r7, #20
 802d0fe:	46bd      	mov	sp, r7
 802d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d104:	4770      	bx	lr
 802d106:	bf00      	nop
 802d108:	2001ada4 	.word	0x2001ada4
 802d10c:	2001adac 	.word	0x2001adac

0802d110 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 802d110:	b480      	push	{r7}
 802d112:	b083      	sub	sp, #12
 802d114:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 802d116:	4b24      	ldr	r3, [pc, #144]	; (802d1a8 <_DoInit+0x98>)
 802d118:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 802d11a:	687b      	ldr	r3, [r7, #4]
 802d11c:	2203      	movs	r2, #3
 802d11e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 802d120:	687b      	ldr	r3, [r7, #4]
 802d122:	2203      	movs	r2, #3
 802d124:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 802d126:	687b      	ldr	r3, [r7, #4]
 802d128:	4a20      	ldr	r2, [pc, #128]	; (802d1ac <_DoInit+0x9c>)
 802d12a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 802d12c:	687b      	ldr	r3, [r7, #4]
 802d12e:	4a20      	ldr	r2, [pc, #128]	; (802d1b0 <_DoInit+0xa0>)
 802d130:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 802d132:	687b      	ldr	r3, [r7, #4]
 802d134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d138:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 802d13a:	687b      	ldr	r3, [r7, #4]
 802d13c:	2200      	movs	r2, #0
 802d13e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 802d140:	687b      	ldr	r3, [r7, #4]
 802d142:	2200      	movs	r2, #0
 802d144:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802d146:	687b      	ldr	r3, [r7, #4]
 802d148:	2200      	movs	r2, #0
 802d14a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	4a17      	ldr	r2, [pc, #92]	; (802d1ac <_DoInit+0x9c>)
 802d150:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 802d152:	687b      	ldr	r3, [r7, #4]
 802d154:	4a17      	ldr	r2, [pc, #92]	; (802d1b4 <_DoInit+0xa4>)
 802d156:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	2210      	movs	r2, #16
 802d15c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 802d15e:	687b      	ldr	r3, [r7, #4]
 802d160:	2200      	movs	r2, #0
 802d162:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 802d164:	687b      	ldr	r3, [r7, #4]
 802d166:	2200      	movs	r2, #0
 802d168:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 802d16a:	687b      	ldr	r3, [r7, #4]
 802d16c:	2200      	movs	r2, #0
 802d16e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 802d170:	687b      	ldr	r3, [r7, #4]
 802d172:	3307      	adds	r3, #7
 802d174:	4a10      	ldr	r2, [pc, #64]	; (802d1b8 <_DoInit+0xa8>)
 802d176:	6810      	ldr	r0, [r2, #0]
 802d178:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802d17a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 802d17e:	687b      	ldr	r3, [r7, #4]
 802d180:	4a0e      	ldr	r2, [pc, #56]	; (802d1bc <_DoInit+0xac>)
 802d182:	6810      	ldr	r0, [r2, #0]
 802d184:	6018      	str	r0, [r3, #0]
 802d186:	8891      	ldrh	r1, [r2, #4]
 802d188:	7992      	ldrb	r2, [r2, #6]
 802d18a:	8099      	strh	r1, [r3, #4]
 802d18c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802d18e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 802d192:	687b      	ldr	r3, [r7, #4]
 802d194:	2220      	movs	r2, #32
 802d196:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 802d198:	f3bf 8f5f 	dmb	sy
}
 802d19c:	bf00      	nop
 802d19e:	370c      	adds	r7, #12
 802d1a0:	46bd      	mov	sp, r7
 802d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1a6:	4770      	bx	lr
 802d1a8:	2001eda8 	.word	0x2001eda8
 802d1ac:	0802f66c 	.word	0x0802f66c
 802d1b0:	2001adc4 	.word	0x2001adc4
 802d1b4:	2001b1c4 	.word	0x2001b1c4
 802d1b8:	0802f678 	.word	0x0802f678
 802d1bc:	0802f67c 	.word	0x0802f67c

0802d1c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 802d1c0:	b580      	push	{r7, lr}
 802d1c2:	b08c      	sub	sp, #48	; 0x30
 802d1c4:	af00      	add	r7, sp, #0
 802d1c6:	60f8      	str	r0, [r7, #12]
 802d1c8:	60b9      	str	r1, [r7, #8]
 802d1ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 802d1cc:	4b3e      	ldr	r3, [pc, #248]	; (802d2c8 <SEGGER_RTT_ReadNoLock+0x108>)
 802d1ce:	623b      	str	r3, [r7, #32]
 802d1d0:	6a3b      	ldr	r3, [r7, #32]
 802d1d2:	781b      	ldrb	r3, [r3, #0]
 802d1d4:	b2db      	uxtb	r3, r3
 802d1d6:	2b00      	cmp	r3, #0
 802d1d8:	d101      	bne.n	802d1de <SEGGER_RTT_ReadNoLock+0x1e>
 802d1da:	f7ff ff99 	bl	802d110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d1de:	68fa      	ldr	r2, [r7, #12]
 802d1e0:	4613      	mov	r3, r2
 802d1e2:	005b      	lsls	r3, r3, #1
 802d1e4:	4413      	add	r3, r2
 802d1e6:	00db      	lsls	r3, r3, #3
 802d1e8:	3360      	adds	r3, #96	; 0x60
 802d1ea:	4a37      	ldr	r2, [pc, #220]	; (802d2c8 <SEGGER_RTT_ReadNoLock+0x108>)
 802d1ec:	4413      	add	r3, r2
 802d1ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 802d1f0:	68bb      	ldr	r3, [r7, #8]
 802d1f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 802d1f4:	69fb      	ldr	r3, [r7, #28]
 802d1f6:	691b      	ldr	r3, [r3, #16]
 802d1f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 802d1fa:	69fb      	ldr	r3, [r7, #28]
 802d1fc:	68db      	ldr	r3, [r3, #12]
 802d1fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 802d200:	2300      	movs	r3, #0
 802d202:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 802d204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d206:	69bb      	ldr	r3, [r7, #24]
 802d208:	429a      	cmp	r2, r3
 802d20a:	d92b      	bls.n	802d264 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 802d20c:	69fb      	ldr	r3, [r7, #28]
 802d20e:	689a      	ldr	r2, [r3, #8]
 802d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d212:	1ad3      	subs	r3, r2, r3
 802d214:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 802d216:	697a      	ldr	r2, [r7, #20]
 802d218:	687b      	ldr	r3, [r7, #4]
 802d21a:	4293      	cmp	r3, r2
 802d21c:	bf28      	it	cs
 802d21e:	4613      	movcs	r3, r2
 802d220:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802d222:	69fb      	ldr	r3, [r7, #28]
 802d224:	685a      	ldr	r2, [r3, #4]
 802d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d228:	4413      	add	r3, r2
 802d22a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802d22c:	697a      	ldr	r2, [r7, #20]
 802d22e:	6939      	ldr	r1, [r7, #16]
 802d230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802d232:	f001 fb6f 	bl	802e914 <memcpy>
    NumBytesRead += NumBytesRem;
 802d236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d238:	697b      	ldr	r3, [r7, #20]
 802d23a:	4413      	add	r3, r2
 802d23c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802d23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d240:	697b      	ldr	r3, [r7, #20]
 802d242:	4413      	add	r3, r2
 802d244:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802d246:	687a      	ldr	r2, [r7, #4]
 802d248:	697b      	ldr	r3, [r7, #20]
 802d24a:	1ad3      	subs	r3, r2, r3
 802d24c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802d24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d250:	697b      	ldr	r3, [r7, #20]
 802d252:	4413      	add	r3, r2
 802d254:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 802d256:	69fb      	ldr	r3, [r7, #28]
 802d258:	689b      	ldr	r3, [r3, #8]
 802d25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d25c:	429a      	cmp	r2, r3
 802d25e:	d101      	bne.n	802d264 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 802d260:	2300      	movs	r3, #0
 802d262:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 802d264:	69ba      	ldr	r2, [r7, #24]
 802d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d268:	1ad3      	subs	r3, r2, r3
 802d26a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 802d26c:	697a      	ldr	r2, [r7, #20]
 802d26e:	687b      	ldr	r3, [r7, #4]
 802d270:	4293      	cmp	r3, r2
 802d272:	bf28      	it	cs
 802d274:	4613      	movcs	r3, r2
 802d276:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 802d278:	697b      	ldr	r3, [r7, #20]
 802d27a:	2b00      	cmp	r3, #0
 802d27c:	d019      	beq.n	802d2b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 802d27e:	69fb      	ldr	r3, [r7, #28]
 802d280:	685a      	ldr	r2, [r3, #4]
 802d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d284:	4413      	add	r3, r2
 802d286:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 802d288:	697a      	ldr	r2, [r7, #20]
 802d28a:	6939      	ldr	r1, [r7, #16]
 802d28c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802d28e:	f001 fb41 	bl	802e914 <memcpy>
    NumBytesRead += NumBytesRem;
 802d292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802d294:	697b      	ldr	r3, [r7, #20]
 802d296:	4413      	add	r3, r2
 802d298:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 802d29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d29c:	697b      	ldr	r3, [r7, #20]
 802d29e:	4413      	add	r3, r2
 802d2a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 802d2a2:	687a      	ldr	r2, [r7, #4]
 802d2a4:	697b      	ldr	r3, [r7, #20]
 802d2a6:	1ad3      	subs	r3, r2, r3
 802d2a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 802d2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d2ac:	697b      	ldr	r3, [r7, #20]
 802d2ae:	4413      	add	r3, r2
 802d2b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 802d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d2b4:	2b00      	cmp	r3, #0
 802d2b6:	d002      	beq.n	802d2be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 802d2b8:	69fb      	ldr	r3, [r7, #28]
 802d2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d2bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 802d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802d2c0:	4618      	mov	r0, r3
 802d2c2:	3730      	adds	r7, #48	; 0x30
 802d2c4:	46bd      	mov	sp, r7
 802d2c6:	bd80      	pop	{r7, pc}
 802d2c8:	2001eda8 	.word	0x2001eda8

0802d2cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802d2cc:	b580      	push	{r7, lr}
 802d2ce:	b088      	sub	sp, #32
 802d2d0:	af00      	add	r7, sp, #0
 802d2d2:	60f8      	str	r0, [r7, #12]
 802d2d4:	60b9      	str	r1, [r7, #8]
 802d2d6:	607a      	str	r2, [r7, #4]
 802d2d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 802d2da:	4b3d      	ldr	r3, [pc, #244]	; (802d3d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802d2dc:	61bb      	str	r3, [r7, #24]
 802d2de:	69bb      	ldr	r3, [r7, #24]
 802d2e0:	781b      	ldrb	r3, [r3, #0]
 802d2e2:	b2db      	uxtb	r3, r3
 802d2e4:	2b00      	cmp	r3, #0
 802d2e6:	d101      	bne.n	802d2ec <SEGGER_RTT_AllocUpBuffer+0x20>
 802d2e8:	f7ff ff12 	bl	802d110 <_DoInit>
  SEGGER_RTT_LOCK();
 802d2ec:	f3ef 8311 	mrs	r3, BASEPRI
 802d2f0:	f04f 0120 	mov.w	r1, #32
 802d2f4:	f381 8811 	msr	BASEPRI, r1
 802d2f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d2fa:	4b35      	ldr	r3, [pc, #212]	; (802d3d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 802d2fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 802d2fe:	2300      	movs	r3, #0
 802d300:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 802d302:	6939      	ldr	r1, [r7, #16]
 802d304:	69fb      	ldr	r3, [r7, #28]
 802d306:	1c5a      	adds	r2, r3, #1
 802d308:	4613      	mov	r3, r2
 802d30a:	005b      	lsls	r3, r3, #1
 802d30c:	4413      	add	r3, r2
 802d30e:	00db      	lsls	r3, r3, #3
 802d310:	440b      	add	r3, r1
 802d312:	3304      	adds	r3, #4
 802d314:	681b      	ldr	r3, [r3, #0]
 802d316:	2b00      	cmp	r3, #0
 802d318:	d008      	beq.n	802d32c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 802d31a:	69fb      	ldr	r3, [r7, #28]
 802d31c:	3301      	adds	r3, #1
 802d31e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 802d320:	693b      	ldr	r3, [r7, #16]
 802d322:	691b      	ldr	r3, [r3, #16]
 802d324:	69fa      	ldr	r2, [r7, #28]
 802d326:	429a      	cmp	r2, r3
 802d328:	dbeb      	blt.n	802d302 <SEGGER_RTT_AllocUpBuffer+0x36>
 802d32a:	e000      	b.n	802d32e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 802d32c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 802d32e:	693b      	ldr	r3, [r7, #16]
 802d330:	691b      	ldr	r3, [r3, #16]
 802d332:	69fa      	ldr	r2, [r7, #28]
 802d334:	429a      	cmp	r2, r3
 802d336:	da3f      	bge.n	802d3b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 802d338:	6939      	ldr	r1, [r7, #16]
 802d33a:	69fb      	ldr	r3, [r7, #28]
 802d33c:	1c5a      	adds	r2, r3, #1
 802d33e:	4613      	mov	r3, r2
 802d340:	005b      	lsls	r3, r3, #1
 802d342:	4413      	add	r3, r2
 802d344:	00db      	lsls	r3, r3, #3
 802d346:	440b      	add	r3, r1
 802d348:	68fa      	ldr	r2, [r7, #12]
 802d34a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 802d34c:	6939      	ldr	r1, [r7, #16]
 802d34e:	69fb      	ldr	r3, [r7, #28]
 802d350:	1c5a      	adds	r2, r3, #1
 802d352:	4613      	mov	r3, r2
 802d354:	005b      	lsls	r3, r3, #1
 802d356:	4413      	add	r3, r2
 802d358:	00db      	lsls	r3, r3, #3
 802d35a:	440b      	add	r3, r1
 802d35c:	3304      	adds	r3, #4
 802d35e:	68ba      	ldr	r2, [r7, #8]
 802d360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 802d362:	6939      	ldr	r1, [r7, #16]
 802d364:	69fa      	ldr	r2, [r7, #28]
 802d366:	4613      	mov	r3, r2
 802d368:	005b      	lsls	r3, r3, #1
 802d36a:	4413      	add	r3, r2
 802d36c:	00db      	lsls	r3, r3, #3
 802d36e:	440b      	add	r3, r1
 802d370:	3320      	adds	r3, #32
 802d372:	687a      	ldr	r2, [r7, #4]
 802d374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 802d376:	6939      	ldr	r1, [r7, #16]
 802d378:	69fa      	ldr	r2, [r7, #28]
 802d37a:	4613      	mov	r3, r2
 802d37c:	005b      	lsls	r3, r3, #1
 802d37e:	4413      	add	r3, r2
 802d380:	00db      	lsls	r3, r3, #3
 802d382:	440b      	add	r3, r1
 802d384:	3328      	adds	r3, #40	; 0x28
 802d386:	2200      	movs	r2, #0
 802d388:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 802d38a:	6939      	ldr	r1, [r7, #16]
 802d38c:	69fa      	ldr	r2, [r7, #28]
 802d38e:	4613      	mov	r3, r2
 802d390:	005b      	lsls	r3, r3, #1
 802d392:	4413      	add	r3, r2
 802d394:	00db      	lsls	r3, r3, #3
 802d396:	440b      	add	r3, r1
 802d398:	3324      	adds	r3, #36	; 0x24
 802d39a:	2200      	movs	r2, #0
 802d39c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 802d39e:	6939      	ldr	r1, [r7, #16]
 802d3a0:	69fa      	ldr	r2, [r7, #28]
 802d3a2:	4613      	mov	r3, r2
 802d3a4:	005b      	lsls	r3, r3, #1
 802d3a6:	4413      	add	r3, r2
 802d3a8:	00db      	lsls	r3, r3, #3
 802d3aa:	440b      	add	r3, r1
 802d3ac:	332c      	adds	r3, #44	; 0x2c
 802d3ae:	683a      	ldr	r2, [r7, #0]
 802d3b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d3b2:	f3bf 8f5f 	dmb	sy
 802d3b6:	e002      	b.n	802d3be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 802d3b8:	f04f 33ff 	mov.w	r3, #4294967295
 802d3bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 802d3be:	697b      	ldr	r3, [r7, #20]
 802d3c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 802d3c4:	69fb      	ldr	r3, [r7, #28]
}
 802d3c6:	4618      	mov	r0, r3
 802d3c8:	3720      	adds	r7, #32
 802d3ca:	46bd      	mov	sp, r7
 802d3cc:	bd80      	pop	{r7, pc}
 802d3ce:	bf00      	nop
 802d3d0:	2001eda8 	.word	0x2001eda8

0802d3d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 802d3d4:	b580      	push	{r7, lr}
 802d3d6:	b08a      	sub	sp, #40	; 0x28
 802d3d8:	af00      	add	r7, sp, #0
 802d3da:	60f8      	str	r0, [r7, #12]
 802d3dc:	60b9      	str	r1, [r7, #8]
 802d3de:	607a      	str	r2, [r7, #4]
 802d3e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 802d3e2:	4b21      	ldr	r3, [pc, #132]	; (802d468 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d3e4:	623b      	str	r3, [r7, #32]
 802d3e6:	6a3b      	ldr	r3, [r7, #32]
 802d3e8:	781b      	ldrb	r3, [r3, #0]
 802d3ea:	b2db      	uxtb	r3, r3
 802d3ec:	2b00      	cmp	r3, #0
 802d3ee:	d101      	bne.n	802d3f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 802d3f0:	f7ff fe8e 	bl	802d110 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 802d3f4:	4b1c      	ldr	r3, [pc, #112]	; (802d468 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 802d3f6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 802d3f8:	68fb      	ldr	r3, [r7, #12]
 802d3fa:	2b02      	cmp	r3, #2
 802d3fc:	d82c      	bhi.n	802d458 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 802d3fe:	f3ef 8311 	mrs	r3, BASEPRI
 802d402:	f04f 0120 	mov.w	r1, #32
 802d406:	f381 8811 	msr	BASEPRI, r1
 802d40a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 802d40c:	68fa      	ldr	r2, [r7, #12]
 802d40e:	4613      	mov	r3, r2
 802d410:	005b      	lsls	r3, r3, #1
 802d412:	4413      	add	r3, r2
 802d414:	00db      	lsls	r3, r3, #3
 802d416:	3360      	adds	r3, #96	; 0x60
 802d418:	69fa      	ldr	r2, [r7, #28]
 802d41a:	4413      	add	r3, r2
 802d41c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 802d41e:	68fb      	ldr	r3, [r7, #12]
 802d420:	2b00      	cmp	r3, #0
 802d422:	d00e      	beq.n	802d442 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 802d424:	697b      	ldr	r3, [r7, #20]
 802d426:	68ba      	ldr	r2, [r7, #8]
 802d428:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 802d42a:	697b      	ldr	r3, [r7, #20]
 802d42c:	687a      	ldr	r2, [r7, #4]
 802d42e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 802d430:	697b      	ldr	r3, [r7, #20]
 802d432:	683a      	ldr	r2, [r7, #0]
 802d434:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 802d436:	697b      	ldr	r3, [r7, #20]
 802d438:	2200      	movs	r2, #0
 802d43a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 802d43c:	697b      	ldr	r3, [r7, #20]
 802d43e:	2200      	movs	r2, #0
 802d440:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 802d442:	697b      	ldr	r3, [r7, #20]
 802d444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802d446:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 802d448:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 802d44c:	69bb      	ldr	r3, [r7, #24]
 802d44e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 802d452:	2300      	movs	r3, #0
 802d454:	627b      	str	r3, [r7, #36]	; 0x24
 802d456:	e002      	b.n	802d45e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 802d458:	f04f 33ff 	mov.w	r3, #4294967295
 802d45c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 802d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802d460:	4618      	mov	r0, r3
 802d462:	3728      	adds	r7, #40	; 0x28
 802d464:	46bd      	mov	sp, r7
 802d466:	bd80      	pop	{r7, pc}
 802d468:	2001eda8 	.word	0x2001eda8

0802d46c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 802d46c:	b480      	push	{r7}
 802d46e:	b087      	sub	sp, #28
 802d470:	af00      	add	r7, sp, #0
 802d472:	60f8      	str	r0, [r7, #12]
 802d474:	60b9      	str	r1, [r7, #8]
 802d476:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 802d478:	2300      	movs	r3, #0
 802d47a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 802d47c:	68bb      	ldr	r3, [r7, #8]
 802d47e:	2b00      	cmp	r3, #0
 802d480:	d00f      	beq.n	802d4a2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 802d482:	e002      	b.n	802d48a <_EncodeStr+0x1e>
      Len++;
 802d484:	693b      	ldr	r3, [r7, #16]
 802d486:	3301      	adds	r3, #1
 802d488:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 802d48a:	68ba      	ldr	r2, [r7, #8]
 802d48c:	693b      	ldr	r3, [r7, #16]
 802d48e:	4413      	add	r3, r2
 802d490:	781b      	ldrb	r3, [r3, #0]
 802d492:	2b00      	cmp	r3, #0
 802d494:	d1f6      	bne.n	802d484 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 802d496:	693a      	ldr	r2, [r7, #16]
 802d498:	687b      	ldr	r3, [r7, #4]
 802d49a:	429a      	cmp	r2, r3
 802d49c:	d901      	bls.n	802d4a2 <_EncodeStr+0x36>
      Len = Limit;
 802d49e:	687b      	ldr	r3, [r7, #4]
 802d4a0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 802d4a2:	693b      	ldr	r3, [r7, #16]
 802d4a4:	2bfe      	cmp	r3, #254	; 0xfe
 802d4a6:	d806      	bhi.n	802d4b6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 802d4a8:	68fb      	ldr	r3, [r7, #12]
 802d4aa:	1c5a      	adds	r2, r3, #1
 802d4ac:	60fa      	str	r2, [r7, #12]
 802d4ae:	693a      	ldr	r2, [r7, #16]
 802d4b0:	b2d2      	uxtb	r2, r2
 802d4b2:	701a      	strb	r2, [r3, #0]
 802d4b4:	e011      	b.n	802d4da <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 802d4b6:	68fb      	ldr	r3, [r7, #12]
 802d4b8:	1c5a      	adds	r2, r3, #1
 802d4ba:	60fa      	str	r2, [r7, #12]
 802d4bc:	22ff      	movs	r2, #255	; 0xff
 802d4be:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 802d4c0:	68fb      	ldr	r3, [r7, #12]
 802d4c2:	1c5a      	adds	r2, r3, #1
 802d4c4:	60fa      	str	r2, [r7, #12]
 802d4c6:	693a      	ldr	r2, [r7, #16]
 802d4c8:	b2d2      	uxtb	r2, r2
 802d4ca:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 802d4cc:	693b      	ldr	r3, [r7, #16]
 802d4ce:	0a19      	lsrs	r1, r3, #8
 802d4d0:	68fb      	ldr	r3, [r7, #12]
 802d4d2:	1c5a      	adds	r2, r3, #1
 802d4d4:	60fa      	str	r2, [r7, #12]
 802d4d6:	b2ca      	uxtb	r2, r1
 802d4d8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 802d4da:	2300      	movs	r3, #0
 802d4dc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d4de:	e00a      	b.n	802d4f6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 802d4e0:	68ba      	ldr	r2, [r7, #8]
 802d4e2:	1c53      	adds	r3, r2, #1
 802d4e4:	60bb      	str	r3, [r7, #8]
 802d4e6:	68fb      	ldr	r3, [r7, #12]
 802d4e8:	1c59      	adds	r1, r3, #1
 802d4ea:	60f9      	str	r1, [r7, #12]
 802d4ec:	7812      	ldrb	r2, [r2, #0]
 802d4ee:	701a      	strb	r2, [r3, #0]
    n++;
 802d4f0:	697b      	ldr	r3, [r7, #20]
 802d4f2:	3301      	adds	r3, #1
 802d4f4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 802d4f6:	697a      	ldr	r2, [r7, #20]
 802d4f8:	693b      	ldr	r3, [r7, #16]
 802d4fa:	429a      	cmp	r2, r3
 802d4fc:	d3f0      	bcc.n	802d4e0 <_EncodeStr+0x74>
  }
  return pPayload;
 802d4fe:	68fb      	ldr	r3, [r7, #12]
}
 802d500:	4618      	mov	r0, r3
 802d502:	371c      	adds	r7, #28
 802d504:	46bd      	mov	sp, r7
 802d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d50a:	4770      	bx	lr

0802d50c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 802d50c:	b480      	push	{r7}
 802d50e:	b083      	sub	sp, #12
 802d510:	af00      	add	r7, sp, #0
 802d512:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 802d514:	687b      	ldr	r3, [r7, #4]
 802d516:	3304      	adds	r3, #4
}
 802d518:	4618      	mov	r0, r3
 802d51a:	370c      	adds	r7, #12
 802d51c:	46bd      	mov	sp, r7
 802d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d522:	4770      	bx	lr

0802d524 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 802d524:	b580      	push	{r7, lr}
 802d526:	b082      	sub	sp, #8
 802d528:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d52a:	4b36      	ldr	r3, [pc, #216]	; (802d604 <_HandleIncomingPacket+0xe0>)
 802d52c:	7e1b      	ldrb	r3, [r3, #24]
 802d52e:	4618      	mov	r0, r3
 802d530:	1cfb      	adds	r3, r7, #3
 802d532:	2201      	movs	r2, #1
 802d534:	4619      	mov	r1, r3
 802d536:	f7ff fe43 	bl	802d1c0 <SEGGER_RTT_ReadNoLock>
 802d53a:	4603      	mov	r3, r0
 802d53c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 802d53e:	687b      	ldr	r3, [r7, #4]
 802d540:	2b00      	cmp	r3, #0
 802d542:	dd54      	ble.n	802d5ee <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 802d544:	78fb      	ldrb	r3, [r7, #3]
 802d546:	2b80      	cmp	r3, #128	; 0x80
 802d548:	d032      	beq.n	802d5b0 <_HandleIncomingPacket+0x8c>
 802d54a:	2b80      	cmp	r3, #128	; 0x80
 802d54c:	dc42      	bgt.n	802d5d4 <_HandleIncomingPacket+0xb0>
 802d54e:	2b07      	cmp	r3, #7
 802d550:	dc16      	bgt.n	802d580 <_HandleIncomingPacket+0x5c>
 802d552:	2b00      	cmp	r3, #0
 802d554:	dd3e      	ble.n	802d5d4 <_HandleIncomingPacket+0xb0>
 802d556:	3b01      	subs	r3, #1
 802d558:	2b06      	cmp	r3, #6
 802d55a:	d83b      	bhi.n	802d5d4 <_HandleIncomingPacket+0xb0>
 802d55c:	a201      	add	r2, pc, #4	; (adr r2, 802d564 <_HandleIncomingPacket+0x40>)
 802d55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d562:	bf00      	nop
 802d564:	0802d587 	.word	0x0802d587
 802d568:	0802d58d 	.word	0x0802d58d
 802d56c:	0802d593 	.word	0x0802d593
 802d570:	0802d599 	.word	0x0802d599
 802d574:	0802d59f 	.word	0x0802d59f
 802d578:	0802d5a5 	.word	0x0802d5a5
 802d57c:	0802d5ab 	.word	0x0802d5ab
 802d580:	2b7f      	cmp	r3, #127	; 0x7f
 802d582:	d036      	beq.n	802d5f2 <_HandleIncomingPacket+0xce>
 802d584:	e026      	b.n	802d5d4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 802d586:	f000 fc67 	bl	802de58 <SEGGER_SYSVIEW_Start>
      break;
 802d58a:	e037      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 802d58c:	f000 fd1e 	bl	802dfcc <SEGGER_SYSVIEW_Stop>
      break;
 802d590:	e034      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 802d592:	f000 fef7 	bl	802e384 <SEGGER_SYSVIEW_RecordSystime>
      break;
 802d596:	e031      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 802d598:	f000 febc 	bl	802e314 <SEGGER_SYSVIEW_SendTaskList>
      break;
 802d59c:	e02e      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 802d59e:	f000 fd3b 	bl	802e018 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 802d5a2:	e02b      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 802d5a4:	f001 f8b0 	bl	802e708 <SEGGER_SYSVIEW_SendNumModules>
      break;
 802d5a8:	e028      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 802d5aa:	f001 f88f 	bl	802e6cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 802d5ae:	e025      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d5b0:	4b14      	ldr	r3, [pc, #80]	; (802d604 <_HandleIncomingPacket+0xe0>)
 802d5b2:	7e1b      	ldrb	r3, [r3, #24]
 802d5b4:	4618      	mov	r0, r3
 802d5b6:	1cfb      	adds	r3, r7, #3
 802d5b8:	2201      	movs	r2, #1
 802d5ba:	4619      	mov	r1, r3
 802d5bc:	f7ff fe00 	bl	802d1c0 <SEGGER_RTT_ReadNoLock>
 802d5c0:	4603      	mov	r3, r0
 802d5c2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 802d5c4:	687b      	ldr	r3, [r7, #4]
 802d5c6:	2b00      	cmp	r3, #0
 802d5c8:	dd15      	ble.n	802d5f6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 802d5ca:	78fb      	ldrb	r3, [r7, #3]
 802d5cc:	4618      	mov	r0, r3
 802d5ce:	f000 fffd 	bl	802e5cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 802d5d2:	e010      	b.n	802d5f6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 802d5d4:	78fb      	ldrb	r3, [r7, #3]
 802d5d6:	b25b      	sxtb	r3, r3
 802d5d8:	2b00      	cmp	r3, #0
 802d5da:	da0e      	bge.n	802d5fa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 802d5dc:	4b09      	ldr	r3, [pc, #36]	; (802d604 <_HandleIncomingPacket+0xe0>)
 802d5de:	7e1b      	ldrb	r3, [r3, #24]
 802d5e0:	4618      	mov	r0, r3
 802d5e2:	1cfb      	adds	r3, r7, #3
 802d5e4:	2201      	movs	r2, #1
 802d5e6:	4619      	mov	r1, r3
 802d5e8:	f7ff fdea 	bl	802d1c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 802d5ec:	e005      	b.n	802d5fa <_HandleIncomingPacket+0xd6>
    }
  }
 802d5ee:	bf00      	nop
 802d5f0:	e004      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
      break;
 802d5f2:	bf00      	nop
 802d5f4:	e002      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
      break;
 802d5f6:	bf00      	nop
 802d5f8:	e000      	b.n	802d5fc <_HandleIncomingPacket+0xd8>
      break;
 802d5fa:	bf00      	nop
}
 802d5fc:	bf00      	nop
 802d5fe:	3708      	adds	r7, #8
 802d600:	46bd      	mov	sp, r7
 802d602:	bd80      	pop	{r7, pc}
 802d604:	2001b5dc 	.word	0x2001b5dc

0802d608 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 802d608:	b580      	push	{r7, lr}
 802d60a:	b08c      	sub	sp, #48	; 0x30
 802d60c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 802d60e:	2301      	movs	r3, #1
 802d610:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 802d612:	1d3b      	adds	r3, r7, #4
 802d614:	3301      	adds	r3, #1
 802d616:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 802d618:	69fb      	ldr	r3, [r7, #28]
 802d61a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d61c:	4b31      	ldr	r3, [pc, #196]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d61e:	695b      	ldr	r3, [r3, #20]
 802d620:	62bb      	str	r3, [r7, #40]	; 0x28
 802d622:	e00b      	b.n	802d63c <_TrySendOverflowPacket+0x34>
 802d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d626:	b2da      	uxtb	r2, r3
 802d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d62a:	1c59      	adds	r1, r3, #1
 802d62c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802d62e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d632:	b2d2      	uxtb	r2, r2
 802d634:	701a      	strb	r2, [r3, #0]
 802d636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d638:	09db      	lsrs	r3, r3, #7
 802d63a:	62bb      	str	r3, [r7, #40]	; 0x28
 802d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d63e:	2b7f      	cmp	r3, #127	; 0x7f
 802d640:	d8f0      	bhi.n	802d624 <_TrySendOverflowPacket+0x1c>
 802d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d644:	1c5a      	adds	r2, r3, #1
 802d646:	62fa      	str	r2, [r7, #44]	; 0x2c
 802d648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d64a:	b2d2      	uxtb	r2, r2
 802d64c:	701a      	strb	r2, [r3, #0]
 802d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d650:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d652:	4b25      	ldr	r3, [pc, #148]	; (802d6e8 <_TrySendOverflowPacket+0xe0>)
 802d654:	681b      	ldr	r3, [r3, #0]
 802d656:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d658:	4b22      	ldr	r3, [pc, #136]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d65a:	68db      	ldr	r3, [r3, #12]
 802d65c:	69ba      	ldr	r2, [r7, #24]
 802d65e:	1ad3      	subs	r3, r2, r3
 802d660:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 802d662:	69fb      	ldr	r3, [r7, #28]
 802d664:	627b      	str	r3, [r7, #36]	; 0x24
 802d666:	697b      	ldr	r3, [r7, #20]
 802d668:	623b      	str	r3, [r7, #32]
 802d66a:	e00b      	b.n	802d684 <_TrySendOverflowPacket+0x7c>
 802d66c:	6a3b      	ldr	r3, [r7, #32]
 802d66e:	b2da      	uxtb	r2, r3
 802d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d672:	1c59      	adds	r1, r3, #1
 802d674:	6279      	str	r1, [r7, #36]	; 0x24
 802d676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d67a:	b2d2      	uxtb	r2, r2
 802d67c:	701a      	strb	r2, [r3, #0]
 802d67e:	6a3b      	ldr	r3, [r7, #32]
 802d680:	09db      	lsrs	r3, r3, #7
 802d682:	623b      	str	r3, [r7, #32]
 802d684:	6a3b      	ldr	r3, [r7, #32]
 802d686:	2b7f      	cmp	r3, #127	; 0x7f
 802d688:	d8f0      	bhi.n	802d66c <_TrySendOverflowPacket+0x64>
 802d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d68c:	1c5a      	adds	r2, r3, #1
 802d68e:	627a      	str	r2, [r7, #36]	; 0x24
 802d690:	6a3a      	ldr	r2, [r7, #32]
 802d692:	b2d2      	uxtb	r2, r2
 802d694:	701a      	strb	r2, [r3, #0]
 802d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d698:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 802d69a:	4b12      	ldr	r3, [pc, #72]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d69c:	785b      	ldrb	r3, [r3, #1]
 802d69e:	4618      	mov	r0, r3
 802d6a0:	1d3b      	adds	r3, r7, #4
 802d6a2:	69fa      	ldr	r2, [r7, #28]
 802d6a4:	1ad3      	subs	r3, r2, r3
 802d6a6:	461a      	mov	r2, r3
 802d6a8:	1d3b      	adds	r3, r7, #4
 802d6aa:	4619      	mov	r1, r3
 802d6ac:	f7d2 fd90 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d6b0:	4603      	mov	r3, r0
 802d6b2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 802d6b4:	693b      	ldr	r3, [r7, #16]
 802d6b6:	2b00      	cmp	r3, #0
 802d6b8:	d009      	beq.n	802d6ce <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d6ba:	4a0a      	ldr	r2, [pc, #40]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d6bc:	69bb      	ldr	r3, [r7, #24]
 802d6be:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 802d6c0:	4b08      	ldr	r3, [pc, #32]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d6c2:	781b      	ldrb	r3, [r3, #0]
 802d6c4:	3b01      	subs	r3, #1
 802d6c6:	b2da      	uxtb	r2, r3
 802d6c8:	4b06      	ldr	r3, [pc, #24]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d6ca:	701a      	strb	r2, [r3, #0]
 802d6cc:	e004      	b.n	802d6d8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 802d6ce:	4b05      	ldr	r3, [pc, #20]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d6d0:	695b      	ldr	r3, [r3, #20]
 802d6d2:	3301      	adds	r3, #1
 802d6d4:	4a03      	ldr	r2, [pc, #12]	; (802d6e4 <_TrySendOverflowPacket+0xdc>)
 802d6d6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 802d6d8:	693b      	ldr	r3, [r7, #16]
}
 802d6da:	4618      	mov	r0, r3
 802d6dc:	3730      	adds	r7, #48	; 0x30
 802d6de:	46bd      	mov	sp, r7
 802d6e0:	bd80      	pop	{r7, pc}
 802d6e2:	bf00      	nop
 802d6e4:	2001b5dc 	.word	0x2001b5dc
 802d6e8:	e0001004 	.word	0xe0001004

0802d6ec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 802d6ec:	b580      	push	{r7, lr}
 802d6ee:	b08a      	sub	sp, #40	; 0x28
 802d6f0:	af00      	add	r7, sp, #0
 802d6f2:	60f8      	str	r0, [r7, #12]
 802d6f4:	60b9      	str	r1, [r7, #8]
 802d6f6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 802d6f8:	4b6c      	ldr	r3, [pc, #432]	; (802d8ac <_SendPacket+0x1c0>)
 802d6fa:	781b      	ldrb	r3, [r3, #0]
 802d6fc:	2b01      	cmp	r3, #1
 802d6fe:	d010      	beq.n	802d722 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 802d700:	4b6a      	ldr	r3, [pc, #424]	; (802d8ac <_SendPacket+0x1c0>)
 802d702:	781b      	ldrb	r3, [r3, #0]
 802d704:	2b00      	cmp	r3, #0
 802d706:	f000 80a3 	beq.w	802d850 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 802d70a:	4b68      	ldr	r3, [pc, #416]	; (802d8ac <_SendPacket+0x1c0>)
 802d70c:	781b      	ldrb	r3, [r3, #0]
 802d70e:	2b02      	cmp	r3, #2
 802d710:	d109      	bne.n	802d726 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 802d712:	f7ff ff79 	bl	802d608 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 802d716:	4b65      	ldr	r3, [pc, #404]	; (802d8ac <_SendPacket+0x1c0>)
 802d718:	781b      	ldrb	r3, [r3, #0]
 802d71a:	2b01      	cmp	r3, #1
 802d71c:	f040 809a 	bne.w	802d854 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 802d720:	e001      	b.n	802d726 <_SendPacket+0x3a>
    goto Send;
 802d722:	bf00      	nop
 802d724:	e000      	b.n	802d728 <_SendPacket+0x3c>
Send:
 802d726:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 802d728:	687b      	ldr	r3, [r7, #4]
 802d72a:	2b1f      	cmp	r3, #31
 802d72c:	d809      	bhi.n	802d742 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 802d72e:	4b5f      	ldr	r3, [pc, #380]	; (802d8ac <_SendPacket+0x1c0>)
 802d730:	69da      	ldr	r2, [r3, #28]
 802d732:	687b      	ldr	r3, [r7, #4]
 802d734:	fa22 f303 	lsr.w	r3, r2, r3
 802d738:	f003 0301 	and.w	r3, r3, #1
 802d73c:	2b00      	cmp	r3, #0
 802d73e:	f040 808b 	bne.w	802d858 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 802d742:	687b      	ldr	r3, [r7, #4]
 802d744:	2b17      	cmp	r3, #23
 802d746:	d807      	bhi.n	802d758 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 802d748:	68fb      	ldr	r3, [r7, #12]
 802d74a:	3b01      	subs	r3, #1
 802d74c:	60fb      	str	r3, [r7, #12]
 802d74e:	687b      	ldr	r3, [r7, #4]
 802d750:	b2da      	uxtb	r2, r3
 802d752:	68fb      	ldr	r3, [r7, #12]
 802d754:	701a      	strb	r2, [r3, #0]
 802d756:	e03d      	b.n	802d7d4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 802d758:	68ba      	ldr	r2, [r7, #8]
 802d75a:	68fb      	ldr	r3, [r7, #12]
 802d75c:	1ad3      	subs	r3, r2, r3
 802d75e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 802d760:	69fb      	ldr	r3, [r7, #28]
 802d762:	2b7f      	cmp	r3, #127	; 0x7f
 802d764:	d912      	bls.n	802d78c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 802d766:	69fb      	ldr	r3, [r7, #28]
 802d768:	09da      	lsrs	r2, r3, #7
 802d76a:	68fb      	ldr	r3, [r7, #12]
 802d76c:	3b01      	subs	r3, #1
 802d76e:	60fb      	str	r3, [r7, #12]
 802d770:	b2d2      	uxtb	r2, r2
 802d772:	68fb      	ldr	r3, [r7, #12]
 802d774:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 802d776:	69fb      	ldr	r3, [r7, #28]
 802d778:	b2db      	uxtb	r3, r3
 802d77a:	68fa      	ldr	r2, [r7, #12]
 802d77c:	3a01      	subs	r2, #1
 802d77e:	60fa      	str	r2, [r7, #12]
 802d780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d784:	b2da      	uxtb	r2, r3
 802d786:	68fb      	ldr	r3, [r7, #12]
 802d788:	701a      	strb	r2, [r3, #0]
 802d78a:	e006      	b.n	802d79a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 802d78c:	68fb      	ldr	r3, [r7, #12]
 802d78e:	3b01      	subs	r3, #1
 802d790:	60fb      	str	r3, [r7, #12]
 802d792:	69fb      	ldr	r3, [r7, #28]
 802d794:	b2da      	uxtb	r2, r3
 802d796:	68fb      	ldr	r3, [r7, #12]
 802d798:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 802d79a:	687b      	ldr	r3, [r7, #4]
 802d79c:	2b7f      	cmp	r3, #127	; 0x7f
 802d79e:	d912      	bls.n	802d7c6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 802d7a0:	687b      	ldr	r3, [r7, #4]
 802d7a2:	09da      	lsrs	r2, r3, #7
 802d7a4:	68fb      	ldr	r3, [r7, #12]
 802d7a6:	3b01      	subs	r3, #1
 802d7a8:	60fb      	str	r3, [r7, #12]
 802d7aa:	b2d2      	uxtb	r2, r2
 802d7ac:	68fb      	ldr	r3, [r7, #12]
 802d7ae:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 802d7b0:	687b      	ldr	r3, [r7, #4]
 802d7b2:	b2db      	uxtb	r3, r3
 802d7b4:	68fa      	ldr	r2, [r7, #12]
 802d7b6:	3a01      	subs	r2, #1
 802d7b8:	60fa      	str	r2, [r7, #12]
 802d7ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802d7be:	b2da      	uxtb	r2, r3
 802d7c0:	68fb      	ldr	r3, [r7, #12]
 802d7c2:	701a      	strb	r2, [r3, #0]
 802d7c4:	e006      	b.n	802d7d4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 802d7c6:	68fb      	ldr	r3, [r7, #12]
 802d7c8:	3b01      	subs	r3, #1
 802d7ca:	60fb      	str	r3, [r7, #12]
 802d7cc:	687b      	ldr	r3, [r7, #4]
 802d7ce:	b2da      	uxtb	r2, r3
 802d7d0:	68fb      	ldr	r3, [r7, #12]
 802d7d2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802d7d4:	4b36      	ldr	r3, [pc, #216]	; (802d8b0 <_SendPacket+0x1c4>)
 802d7d6:	681b      	ldr	r3, [r3, #0]
 802d7d8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 802d7da:	4b34      	ldr	r3, [pc, #208]	; (802d8ac <_SendPacket+0x1c0>)
 802d7dc:	68db      	ldr	r3, [r3, #12]
 802d7de:	69ba      	ldr	r2, [r7, #24]
 802d7e0:	1ad3      	subs	r3, r2, r3
 802d7e2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 802d7e4:	68bb      	ldr	r3, [r7, #8]
 802d7e6:	627b      	str	r3, [r7, #36]	; 0x24
 802d7e8:	697b      	ldr	r3, [r7, #20]
 802d7ea:	623b      	str	r3, [r7, #32]
 802d7ec:	e00b      	b.n	802d806 <_SendPacket+0x11a>
 802d7ee:	6a3b      	ldr	r3, [r7, #32]
 802d7f0:	b2da      	uxtb	r2, r3
 802d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d7f4:	1c59      	adds	r1, r3, #1
 802d7f6:	6279      	str	r1, [r7, #36]	; 0x24
 802d7f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d7fc:	b2d2      	uxtb	r2, r2
 802d7fe:	701a      	strb	r2, [r3, #0]
 802d800:	6a3b      	ldr	r3, [r7, #32]
 802d802:	09db      	lsrs	r3, r3, #7
 802d804:	623b      	str	r3, [r7, #32]
 802d806:	6a3b      	ldr	r3, [r7, #32]
 802d808:	2b7f      	cmp	r3, #127	; 0x7f
 802d80a:	d8f0      	bhi.n	802d7ee <_SendPacket+0x102>
 802d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d80e:	1c5a      	adds	r2, r3, #1
 802d810:	627a      	str	r2, [r7, #36]	; 0x24
 802d812:	6a3a      	ldr	r2, [r7, #32]
 802d814:	b2d2      	uxtb	r2, r2
 802d816:	701a      	strb	r2, [r3, #0]
 802d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d81a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 802d81c:	4b23      	ldr	r3, [pc, #140]	; (802d8ac <_SendPacket+0x1c0>)
 802d81e:	785b      	ldrb	r3, [r3, #1]
 802d820:	4618      	mov	r0, r3
 802d822:	68ba      	ldr	r2, [r7, #8]
 802d824:	68fb      	ldr	r3, [r7, #12]
 802d826:	1ad3      	subs	r3, r2, r3
 802d828:	461a      	mov	r2, r3
 802d82a:	68f9      	ldr	r1, [r7, #12]
 802d82c:	f7d2 fcd0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 802d830:	4603      	mov	r3, r0
 802d832:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 802d834:	693b      	ldr	r3, [r7, #16]
 802d836:	2b00      	cmp	r3, #0
 802d838:	d003      	beq.n	802d842 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 802d83a:	4a1c      	ldr	r2, [pc, #112]	; (802d8ac <_SendPacket+0x1c0>)
 802d83c:	69bb      	ldr	r3, [r7, #24]
 802d83e:	60d3      	str	r3, [r2, #12]
 802d840:	e00b      	b.n	802d85a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 802d842:	4b1a      	ldr	r3, [pc, #104]	; (802d8ac <_SendPacket+0x1c0>)
 802d844:	781b      	ldrb	r3, [r3, #0]
 802d846:	3301      	adds	r3, #1
 802d848:	b2da      	uxtb	r2, r3
 802d84a:	4b18      	ldr	r3, [pc, #96]	; (802d8ac <_SendPacket+0x1c0>)
 802d84c:	701a      	strb	r2, [r3, #0]
 802d84e:	e004      	b.n	802d85a <_SendPacket+0x16e>
    goto SendDone;
 802d850:	bf00      	nop
 802d852:	e002      	b.n	802d85a <_SendPacket+0x16e>
      goto SendDone;
 802d854:	bf00      	nop
 802d856:	e000      	b.n	802d85a <_SendPacket+0x16e>
      goto SendDone;
 802d858:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 802d85a:	4b14      	ldr	r3, [pc, #80]	; (802d8ac <_SendPacket+0x1c0>)
 802d85c:	7e1b      	ldrb	r3, [r3, #24]
 802d85e:	4619      	mov	r1, r3
 802d860:	4a14      	ldr	r2, [pc, #80]	; (802d8b4 <_SendPacket+0x1c8>)
 802d862:	460b      	mov	r3, r1
 802d864:	005b      	lsls	r3, r3, #1
 802d866:	440b      	add	r3, r1
 802d868:	00db      	lsls	r3, r3, #3
 802d86a:	4413      	add	r3, r2
 802d86c:	336c      	adds	r3, #108	; 0x6c
 802d86e:	681a      	ldr	r2, [r3, #0]
 802d870:	4b0e      	ldr	r3, [pc, #56]	; (802d8ac <_SendPacket+0x1c0>)
 802d872:	7e1b      	ldrb	r3, [r3, #24]
 802d874:	4618      	mov	r0, r3
 802d876:	490f      	ldr	r1, [pc, #60]	; (802d8b4 <_SendPacket+0x1c8>)
 802d878:	4603      	mov	r3, r0
 802d87a:	005b      	lsls	r3, r3, #1
 802d87c:	4403      	add	r3, r0
 802d87e:	00db      	lsls	r3, r3, #3
 802d880:	440b      	add	r3, r1
 802d882:	3370      	adds	r3, #112	; 0x70
 802d884:	681b      	ldr	r3, [r3, #0]
 802d886:	429a      	cmp	r2, r3
 802d888:	d00b      	beq.n	802d8a2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 802d88a:	4b08      	ldr	r3, [pc, #32]	; (802d8ac <_SendPacket+0x1c0>)
 802d88c:	789b      	ldrb	r3, [r3, #2]
 802d88e:	2b00      	cmp	r3, #0
 802d890:	d107      	bne.n	802d8a2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 802d892:	4b06      	ldr	r3, [pc, #24]	; (802d8ac <_SendPacket+0x1c0>)
 802d894:	2201      	movs	r2, #1
 802d896:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 802d898:	f7ff fe44 	bl	802d524 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 802d89c:	4b03      	ldr	r3, [pc, #12]	; (802d8ac <_SendPacket+0x1c0>)
 802d89e:	2200      	movs	r2, #0
 802d8a0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 802d8a2:	bf00      	nop
 802d8a4:	3728      	adds	r7, #40	; 0x28
 802d8a6:	46bd      	mov	sp, r7
 802d8a8:	bd80      	pop	{r7, pc}
 802d8aa:	bf00      	nop
 802d8ac:	2001b5dc 	.word	0x2001b5dc
 802d8b0:	e0001004 	.word	0xe0001004
 802d8b4:	2001eda8 	.word	0x2001eda8

0802d8b8 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 802d8b8:	b580      	push	{r7, lr}
 802d8ba:	b0a2      	sub	sp, #136	; 0x88
 802d8bc:	af00      	add	r7, sp, #0
 802d8be:	60f8      	str	r0, [r7, #12]
 802d8c0:	60b9      	str	r1, [r7, #8]
 802d8c2:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 802d8c4:	68fb      	ldr	r3, [r7, #12]
 802d8c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 802d8c8:	2300      	movs	r3, #0
 802d8ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 802d8ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d8d0:	1c5a      	adds	r2, r3, #1
 802d8d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 802d8d4:	781b      	ldrb	r3, [r3, #0]
 802d8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 802d8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d8de:	2b00      	cmp	r3, #0
 802d8e0:	d01e      	beq.n	802d920 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 802d8e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802d8e6:	2b25      	cmp	r3, #37	; 0x25
 802d8e8:	d1f1      	bne.n	802d8ce <_VPrintHost+0x16>
      c = *p;
 802d8ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d8ec:	781b      	ldrb	r3, [r3, #0]
 802d8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 802d8f2:	687b      	ldr	r3, [r7, #4]
 802d8f4:	681b      	ldr	r3, [r3, #0]
 802d8f6:	1d19      	adds	r1, r3, #4
 802d8f8:	687a      	ldr	r2, [r7, #4]
 802d8fa:	6011      	str	r1, [r2, #0]
 802d8fc:	6819      	ldr	r1, [r3, #0]
 802d8fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d902:	1c5a      	adds	r2, r3, #1
 802d904:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802d908:	460a      	mov	r2, r1
 802d90a:	009b      	lsls	r3, r3, #2
 802d90c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 802d910:	440b      	add	r3, r1
 802d912:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 802d916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d91a:	2b10      	cmp	r3, #16
 802d91c:	d002      	beq.n	802d924 <_VPrintHost+0x6c>
    c = *p++;
 802d91e:	e7d6      	b.n	802d8ce <_VPrintHost+0x16>
      break;
 802d920:	bf00      	nop
 802d922:	e000      	b.n	802d926 <_VPrintHost+0x6e>
        break;
 802d924:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 802d926:	f3ef 8311 	mrs	r3, BASEPRI
 802d92a:	f04f 0120 	mov.w	r1, #32
 802d92e:	f381 8811 	msr	BASEPRI, r1
 802d932:	65bb      	str	r3, [r7, #88]	; 0x58
 802d934:	483f      	ldr	r0, [pc, #252]	; (802da34 <_VPrintHost+0x17c>)
 802d936:	f7ff fde9 	bl	802d50c <_PreparePacket>
 802d93a:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802d93c:	2280      	movs	r2, #128	; 0x80
 802d93e:	68f9      	ldr	r1, [r7, #12]
 802d940:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802d942:	f7ff fd93 	bl	802d46c <_EncodeStr>
 802d946:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 802d948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d94a:	677b      	str	r3, [r7, #116]	; 0x74
 802d94c:	68bb      	ldr	r3, [r7, #8]
 802d94e:	673b      	str	r3, [r7, #112]	; 0x70
 802d950:	e00b      	b.n	802d96a <_VPrintHost+0xb2>
 802d952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d954:	b2da      	uxtb	r2, r3
 802d956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d958:	1c59      	adds	r1, r3, #1
 802d95a:	6779      	str	r1, [r7, #116]	; 0x74
 802d95c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d960:	b2d2      	uxtb	r2, r2
 802d962:	701a      	strb	r2, [r3, #0]
 802d964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d966:	09db      	lsrs	r3, r3, #7
 802d968:	673b      	str	r3, [r7, #112]	; 0x70
 802d96a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d96c:	2b7f      	cmp	r3, #127	; 0x7f
 802d96e:	d8f0      	bhi.n	802d952 <_VPrintHost+0x9a>
 802d970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d972:	1c5a      	adds	r2, r3, #1
 802d974:	677a      	str	r2, [r7, #116]	; 0x74
 802d976:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802d978:	b2d2      	uxtb	r2, r2
 802d97a:	701a      	strb	r2, [r3, #0]
 802d97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d97e:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 802d980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d982:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d988:	66bb      	str	r3, [r7, #104]	; 0x68
 802d98a:	e00b      	b.n	802d9a4 <_VPrintHost+0xec>
 802d98c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d98e:	b2da      	uxtb	r2, r3
 802d990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d992:	1c59      	adds	r1, r3, #1
 802d994:	66f9      	str	r1, [r7, #108]	; 0x6c
 802d996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d99a:	b2d2      	uxtb	r2, r2
 802d99c:	701a      	strb	r2, [r3, #0]
 802d99e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d9a0:	09db      	lsrs	r3, r3, #7
 802d9a2:	66bb      	str	r3, [r7, #104]	; 0x68
 802d9a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d9a6:	2b7f      	cmp	r3, #127	; 0x7f
 802d9a8:	d8f0      	bhi.n	802d98c <_VPrintHost+0xd4>
 802d9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d9ac:	1c5a      	adds	r2, r3, #1
 802d9ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 802d9b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802d9b2:	b2d2      	uxtb	r2, r2
 802d9b4:	701a      	strb	r2, [r3, #0]
 802d9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d9b8:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 802d9ba:	f107 0314 	add.w	r3, r7, #20
 802d9be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802d9c2:	e022      	b.n	802da0a <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 802d9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802d9c6:	667b      	str	r3, [r7, #100]	; 0x64
 802d9c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802d9cc:	681b      	ldr	r3, [r3, #0]
 802d9ce:	663b      	str	r3, [r7, #96]	; 0x60
 802d9d0:	e00b      	b.n	802d9ea <_VPrintHost+0x132>
 802d9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d9d4:	b2da      	uxtb	r2, r3
 802d9d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d9d8:	1c59      	adds	r1, r3, #1
 802d9da:	6679      	str	r1, [r7, #100]	; 0x64
 802d9dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802d9e0:	b2d2      	uxtb	r2, r2
 802d9e2:	701a      	strb	r2, [r3, #0]
 802d9e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d9e6:	09db      	lsrs	r3, r3, #7
 802d9e8:	663b      	str	r3, [r7, #96]	; 0x60
 802d9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802d9ec:	2b7f      	cmp	r3, #127	; 0x7f
 802d9ee:	d8f0      	bhi.n	802d9d2 <_VPrintHost+0x11a>
 802d9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d9f2:	1c5a      	adds	r2, r3, #1
 802d9f4:	667a      	str	r2, [r7, #100]	; 0x64
 802d9f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802d9f8:	b2d2      	uxtb	r2, r2
 802d9fa:	701a      	strb	r2, [r3, #0]
 802d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802d9fe:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 802da00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802da04:	3304      	adds	r3, #4
 802da06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 802da0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802da0e:	1e5a      	subs	r2, r3, #1
 802da10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802da14:	2b00      	cmp	r3, #0
 802da16:	d1d5      	bne.n	802d9c4 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802da18:	221a      	movs	r2, #26
 802da1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802da1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802da1e:	f7ff fe65 	bl	802d6ec <_SendPacket>
    RECORD_END();
 802da22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802da24:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 802da28:	2300      	movs	r3, #0
}
 802da2a:	4618      	mov	r0, r3
 802da2c:	3788      	adds	r7, #136	; 0x88
 802da2e:	46bd      	mov	sp, r7
 802da30:	bd80      	pop	{r7, pc}
 802da32:	bf00      	nop
 802da34:	2001b60c 	.word	0x2001b60c

0802da38 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 802da38:	b580      	push	{r7, lr}
 802da3a:	b086      	sub	sp, #24
 802da3c:	af02      	add	r7, sp, #8
 802da3e:	60f8      	str	r0, [r7, #12]
 802da40:	60b9      	str	r1, [r7, #8]
 802da42:	607a      	str	r2, [r7, #4]
 802da44:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802da46:	2300      	movs	r3, #0
 802da48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802da4c:	4917      	ldr	r1, [pc, #92]	; (802daac <SEGGER_SYSVIEW_Init+0x74>)
 802da4e:	4818      	ldr	r0, [pc, #96]	; (802dab0 <SEGGER_SYSVIEW_Init+0x78>)
 802da50:	f7ff fc3c 	bl	802d2cc <SEGGER_RTT_AllocUpBuffer>
 802da54:	4603      	mov	r3, r0
 802da56:	b2da      	uxtb	r2, r3
 802da58:	4b16      	ldr	r3, [pc, #88]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da5a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 802da5c:	4b15      	ldr	r3, [pc, #84]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da5e:	785a      	ldrb	r2, [r3, #1]
 802da60:	4b14      	ldr	r3, [pc, #80]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da62:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 802da64:	4b13      	ldr	r3, [pc, #76]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da66:	7e1b      	ldrb	r3, [r3, #24]
 802da68:	4618      	mov	r0, r3
 802da6a:	2300      	movs	r3, #0
 802da6c:	9300      	str	r3, [sp, #0]
 802da6e:	2308      	movs	r3, #8
 802da70:	4a11      	ldr	r2, [pc, #68]	; (802dab8 <SEGGER_SYSVIEW_Init+0x80>)
 802da72:	490f      	ldr	r1, [pc, #60]	; (802dab0 <SEGGER_SYSVIEW_Init+0x78>)
 802da74:	f7ff fcae 	bl	802d3d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 802da78:	4b0e      	ldr	r3, [pc, #56]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da7a:	2200      	movs	r2, #0
 802da7c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 802da7e:	4b0f      	ldr	r3, [pc, #60]	; (802dabc <SEGGER_SYSVIEW_Init+0x84>)
 802da80:	681b      	ldr	r3, [r3, #0]
 802da82:	4a0c      	ldr	r2, [pc, #48]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da84:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 802da86:	4a0b      	ldr	r2, [pc, #44]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da88:	687b      	ldr	r3, [r7, #4]
 802da8a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 802da8c:	4a09      	ldr	r2, [pc, #36]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da8e:	68fb      	ldr	r3, [r7, #12]
 802da90:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 802da92:	4a08      	ldr	r2, [pc, #32]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da94:	68bb      	ldr	r3, [r7, #8]
 802da96:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 802da98:	4a06      	ldr	r2, [pc, #24]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802da9a:	683b      	ldr	r3, [r7, #0]
 802da9c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 802da9e:	4b05      	ldr	r3, [pc, #20]	; (802dab4 <SEGGER_SYSVIEW_Init+0x7c>)
 802daa0:	2200      	movs	r2, #0
 802daa2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 802daa4:	bf00      	nop
 802daa6:	3710      	adds	r7, #16
 802daa8:	46bd      	mov	sp, r7
 802daaa:	bd80      	pop	{r7, pc}
 802daac:	2001b1d4 	.word	0x2001b1d4
 802dab0:	0802f684 	.word	0x0802f684
 802dab4:	2001b5dc 	.word	0x2001b5dc
 802dab8:	2001b5d4 	.word	0x2001b5d4
 802dabc:	e0001004 	.word	0xe0001004

0802dac0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 802dac0:	b480      	push	{r7}
 802dac2:	b083      	sub	sp, #12
 802dac4:	af00      	add	r7, sp, #0
 802dac6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 802dac8:	4a04      	ldr	r2, [pc, #16]	; (802dadc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 802daca:	687b      	ldr	r3, [r7, #4]
 802dacc:	6113      	str	r3, [r2, #16]
}
 802dace:	bf00      	nop
 802dad0:	370c      	adds	r7, #12
 802dad2:	46bd      	mov	sp, r7
 802dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dad8:	4770      	bx	lr
 802dada:	bf00      	nop
 802dadc:	2001b5dc 	.word	0x2001b5dc

0802dae0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 802dae0:	b580      	push	{r7, lr}
 802dae2:	b084      	sub	sp, #16
 802dae4:	af00      	add	r7, sp, #0
 802dae6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802dae8:	f3ef 8311 	mrs	r3, BASEPRI
 802daec:	f04f 0120 	mov.w	r1, #32
 802daf0:	f381 8811 	msr	BASEPRI, r1
 802daf4:	60fb      	str	r3, [r7, #12]
 802daf6:	4808      	ldr	r0, [pc, #32]	; (802db18 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 802daf8:	f7ff fd08 	bl	802d50c <_PreparePacket>
 802dafc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 802dafe:	687a      	ldr	r2, [r7, #4]
 802db00:	68b9      	ldr	r1, [r7, #8]
 802db02:	68b8      	ldr	r0, [r7, #8]
 802db04:	f7ff fdf2 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802db08:	68fb      	ldr	r3, [r7, #12]
 802db0a:	f383 8811 	msr	BASEPRI, r3
}
 802db0e:	bf00      	nop
 802db10:	3710      	adds	r7, #16
 802db12:	46bd      	mov	sp, r7
 802db14:	bd80      	pop	{r7, pc}
 802db16:	bf00      	nop
 802db18:	2001b60c 	.word	0x2001b60c

0802db1c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 802db1c:	b580      	push	{r7, lr}
 802db1e:	b088      	sub	sp, #32
 802db20:	af00      	add	r7, sp, #0
 802db22:	6078      	str	r0, [r7, #4]
 802db24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802db26:	f3ef 8311 	mrs	r3, BASEPRI
 802db2a:	f04f 0120 	mov.w	r1, #32
 802db2e:	f381 8811 	msr	BASEPRI, r1
 802db32:	617b      	str	r3, [r7, #20]
 802db34:	4816      	ldr	r0, [pc, #88]	; (802db90 <SEGGER_SYSVIEW_RecordU32+0x74>)
 802db36:	f7ff fce9 	bl	802d50c <_PreparePacket>
 802db3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802db3c:	693b      	ldr	r3, [r7, #16]
 802db3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 802db40:	68fb      	ldr	r3, [r7, #12]
 802db42:	61fb      	str	r3, [r7, #28]
 802db44:	683b      	ldr	r3, [r7, #0]
 802db46:	61bb      	str	r3, [r7, #24]
 802db48:	e00b      	b.n	802db62 <SEGGER_SYSVIEW_RecordU32+0x46>
 802db4a:	69bb      	ldr	r3, [r7, #24]
 802db4c:	b2da      	uxtb	r2, r3
 802db4e:	69fb      	ldr	r3, [r7, #28]
 802db50:	1c59      	adds	r1, r3, #1
 802db52:	61f9      	str	r1, [r7, #28]
 802db54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802db58:	b2d2      	uxtb	r2, r2
 802db5a:	701a      	strb	r2, [r3, #0]
 802db5c:	69bb      	ldr	r3, [r7, #24]
 802db5e:	09db      	lsrs	r3, r3, #7
 802db60:	61bb      	str	r3, [r7, #24]
 802db62:	69bb      	ldr	r3, [r7, #24]
 802db64:	2b7f      	cmp	r3, #127	; 0x7f
 802db66:	d8f0      	bhi.n	802db4a <SEGGER_SYSVIEW_RecordU32+0x2e>
 802db68:	69fb      	ldr	r3, [r7, #28]
 802db6a:	1c5a      	adds	r2, r3, #1
 802db6c:	61fa      	str	r2, [r7, #28]
 802db6e:	69ba      	ldr	r2, [r7, #24]
 802db70:	b2d2      	uxtb	r2, r2
 802db72:	701a      	strb	r2, [r3, #0]
 802db74:	69fb      	ldr	r3, [r7, #28]
 802db76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802db78:	687a      	ldr	r2, [r7, #4]
 802db7a:	68f9      	ldr	r1, [r7, #12]
 802db7c:	6938      	ldr	r0, [r7, #16]
 802db7e:	f7ff fdb5 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802db82:	697b      	ldr	r3, [r7, #20]
 802db84:	f383 8811 	msr	BASEPRI, r3
}
 802db88:	bf00      	nop
 802db8a:	3720      	adds	r7, #32
 802db8c:	46bd      	mov	sp, r7
 802db8e:	bd80      	pop	{r7, pc}
 802db90:	2001b60c 	.word	0x2001b60c

0802db94 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 802db94:	b580      	push	{r7, lr}
 802db96:	b08c      	sub	sp, #48	; 0x30
 802db98:	af00      	add	r7, sp, #0
 802db9a:	60f8      	str	r0, [r7, #12]
 802db9c:	60b9      	str	r1, [r7, #8]
 802db9e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 802dba0:	f3ef 8311 	mrs	r3, BASEPRI
 802dba4:	f04f 0120 	mov.w	r1, #32
 802dba8:	f381 8811 	msr	BASEPRI, r1
 802dbac:	61fb      	str	r3, [r7, #28]
 802dbae:	4825      	ldr	r0, [pc, #148]	; (802dc44 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 802dbb0:	f7ff fcac 	bl	802d50c <_PreparePacket>
 802dbb4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802dbb6:	69bb      	ldr	r3, [r7, #24]
 802dbb8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802dbba:	697b      	ldr	r3, [r7, #20]
 802dbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dbbe:	68bb      	ldr	r3, [r7, #8]
 802dbc0:	62bb      	str	r3, [r7, #40]	; 0x28
 802dbc2:	e00b      	b.n	802dbdc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 802dbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbc6:	b2da      	uxtb	r2, r3
 802dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbca:	1c59      	adds	r1, r3, #1
 802dbcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dbce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dbd2:	b2d2      	uxtb	r2, r2
 802dbd4:	701a      	strb	r2, [r3, #0]
 802dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbd8:	09db      	lsrs	r3, r3, #7
 802dbda:	62bb      	str	r3, [r7, #40]	; 0x28
 802dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dbde:	2b7f      	cmp	r3, #127	; 0x7f
 802dbe0:	d8f0      	bhi.n	802dbc4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 802dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbe4:	1c5a      	adds	r2, r3, #1
 802dbe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dbe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dbea:	b2d2      	uxtb	r2, r2
 802dbec:	701a      	strb	r2, [r3, #0]
 802dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dbf0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802dbf2:	697b      	ldr	r3, [r7, #20]
 802dbf4:	627b      	str	r3, [r7, #36]	; 0x24
 802dbf6:	687b      	ldr	r3, [r7, #4]
 802dbf8:	623b      	str	r3, [r7, #32]
 802dbfa:	e00b      	b.n	802dc14 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 802dbfc:	6a3b      	ldr	r3, [r7, #32]
 802dbfe:	b2da      	uxtb	r2, r3
 802dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc02:	1c59      	adds	r1, r3, #1
 802dc04:	6279      	str	r1, [r7, #36]	; 0x24
 802dc06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc0a:	b2d2      	uxtb	r2, r2
 802dc0c:	701a      	strb	r2, [r3, #0]
 802dc0e:	6a3b      	ldr	r3, [r7, #32]
 802dc10:	09db      	lsrs	r3, r3, #7
 802dc12:	623b      	str	r3, [r7, #32]
 802dc14:	6a3b      	ldr	r3, [r7, #32]
 802dc16:	2b7f      	cmp	r3, #127	; 0x7f
 802dc18:	d8f0      	bhi.n	802dbfc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 802dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc1c:	1c5a      	adds	r2, r3, #1
 802dc1e:	627a      	str	r2, [r7, #36]	; 0x24
 802dc20:	6a3a      	ldr	r2, [r7, #32]
 802dc22:	b2d2      	uxtb	r2, r2
 802dc24:	701a      	strb	r2, [r3, #0]
 802dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dc28:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802dc2a:	68fa      	ldr	r2, [r7, #12]
 802dc2c:	6979      	ldr	r1, [r7, #20]
 802dc2e:	69b8      	ldr	r0, [r7, #24]
 802dc30:	f7ff fd5c 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802dc34:	69fb      	ldr	r3, [r7, #28]
 802dc36:	f383 8811 	msr	BASEPRI, r3
}
 802dc3a:	bf00      	nop
 802dc3c:	3730      	adds	r7, #48	; 0x30
 802dc3e:	46bd      	mov	sp, r7
 802dc40:	bd80      	pop	{r7, pc}
 802dc42:	bf00      	nop
 802dc44:	2001b60c 	.word	0x2001b60c

0802dc48 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 802dc48:	b580      	push	{r7, lr}
 802dc4a:	b08e      	sub	sp, #56	; 0x38
 802dc4c:	af00      	add	r7, sp, #0
 802dc4e:	60f8      	str	r0, [r7, #12]
 802dc50:	60b9      	str	r1, [r7, #8]
 802dc52:	607a      	str	r2, [r7, #4]
 802dc54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 802dc56:	f3ef 8311 	mrs	r3, BASEPRI
 802dc5a:	f04f 0120 	mov.w	r1, #32
 802dc5e:	f381 8811 	msr	BASEPRI, r1
 802dc62:	61fb      	str	r3, [r7, #28]
 802dc64:	4832      	ldr	r0, [pc, #200]	; (802dd30 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 802dc66:	f7ff fc51 	bl	802d50c <_PreparePacket>
 802dc6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802dc6c:	69bb      	ldr	r3, [r7, #24]
 802dc6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802dc70:	697b      	ldr	r3, [r7, #20]
 802dc72:	637b      	str	r3, [r7, #52]	; 0x34
 802dc74:	68bb      	ldr	r3, [r7, #8]
 802dc76:	633b      	str	r3, [r7, #48]	; 0x30
 802dc78:	e00b      	b.n	802dc92 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 802dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dc7c:	b2da      	uxtb	r2, r3
 802dc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dc80:	1c59      	adds	r1, r3, #1
 802dc82:	6379      	str	r1, [r7, #52]	; 0x34
 802dc84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dc88:	b2d2      	uxtb	r2, r2
 802dc8a:	701a      	strb	r2, [r3, #0]
 802dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dc8e:	09db      	lsrs	r3, r3, #7
 802dc90:	633b      	str	r3, [r7, #48]	; 0x30
 802dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dc94:	2b7f      	cmp	r3, #127	; 0x7f
 802dc96:	d8f0      	bhi.n	802dc7a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 802dc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dc9a:	1c5a      	adds	r2, r3, #1
 802dc9c:	637a      	str	r2, [r7, #52]	; 0x34
 802dc9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802dca0:	b2d2      	uxtb	r2, r2
 802dca2:	701a      	strb	r2, [r3, #0]
 802dca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dca6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802dca8:	697b      	ldr	r3, [r7, #20]
 802dcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 802dcac:	687b      	ldr	r3, [r7, #4]
 802dcae:	62bb      	str	r3, [r7, #40]	; 0x28
 802dcb0:	e00b      	b.n	802dcca <SEGGER_SYSVIEW_RecordU32x3+0x82>
 802dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dcb4:	b2da      	uxtb	r2, r3
 802dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dcb8:	1c59      	adds	r1, r3, #1
 802dcba:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dcbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dcc0:	b2d2      	uxtb	r2, r2
 802dcc2:	701a      	strb	r2, [r3, #0]
 802dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dcc6:	09db      	lsrs	r3, r3, #7
 802dcc8:	62bb      	str	r3, [r7, #40]	; 0x28
 802dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dccc:	2b7f      	cmp	r3, #127	; 0x7f
 802dcce:	d8f0      	bhi.n	802dcb2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 802dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dcd2:	1c5a      	adds	r2, r3, #1
 802dcd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802dcd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802dcd8:	b2d2      	uxtb	r2, r2
 802dcda:	701a      	strb	r2, [r3, #0]
 802dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dcde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802dce0:	697b      	ldr	r3, [r7, #20]
 802dce2:	627b      	str	r3, [r7, #36]	; 0x24
 802dce4:	683b      	ldr	r3, [r7, #0]
 802dce6:	623b      	str	r3, [r7, #32]
 802dce8:	e00b      	b.n	802dd02 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 802dcea:	6a3b      	ldr	r3, [r7, #32]
 802dcec:	b2da      	uxtb	r2, r3
 802dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dcf0:	1c59      	adds	r1, r3, #1
 802dcf2:	6279      	str	r1, [r7, #36]	; 0x24
 802dcf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dcf8:	b2d2      	uxtb	r2, r2
 802dcfa:	701a      	strb	r2, [r3, #0]
 802dcfc:	6a3b      	ldr	r3, [r7, #32]
 802dcfe:	09db      	lsrs	r3, r3, #7
 802dd00:	623b      	str	r3, [r7, #32]
 802dd02:	6a3b      	ldr	r3, [r7, #32]
 802dd04:	2b7f      	cmp	r3, #127	; 0x7f
 802dd06:	d8f0      	bhi.n	802dcea <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 802dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dd0a:	1c5a      	adds	r2, r3, #1
 802dd0c:	627a      	str	r2, [r7, #36]	; 0x24
 802dd0e:	6a3a      	ldr	r2, [r7, #32]
 802dd10:	b2d2      	uxtb	r2, r2
 802dd12:	701a      	strb	r2, [r3, #0]
 802dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dd16:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802dd18:	68fa      	ldr	r2, [r7, #12]
 802dd1a:	6979      	ldr	r1, [r7, #20]
 802dd1c:	69b8      	ldr	r0, [r7, #24]
 802dd1e:	f7ff fce5 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802dd22:	69fb      	ldr	r3, [r7, #28]
 802dd24:	f383 8811 	msr	BASEPRI, r3
}
 802dd28:	bf00      	nop
 802dd2a:	3738      	adds	r7, #56	; 0x38
 802dd2c:	46bd      	mov	sp, r7
 802dd2e:	bd80      	pop	{r7, pc}
 802dd30:	2001b60c 	.word	0x2001b60c

0802dd34 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 802dd34:	b580      	push	{r7, lr}
 802dd36:	b090      	sub	sp, #64	; 0x40
 802dd38:	af00      	add	r7, sp, #0
 802dd3a:	60f8      	str	r0, [r7, #12]
 802dd3c:	60b9      	str	r1, [r7, #8]
 802dd3e:	607a      	str	r2, [r7, #4]
 802dd40:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802dd42:	f3ef 8311 	mrs	r3, BASEPRI
 802dd46:	f04f 0120 	mov.w	r1, #32
 802dd4a:	f381 8811 	msr	BASEPRI, r1
 802dd4e:	61fb      	str	r3, [r7, #28]
 802dd50:	4840      	ldr	r0, [pc, #256]	; (802de54 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 802dd52:	f7ff fbdb 	bl	802d50c <_PreparePacket>
 802dd56:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 802dd58:	69bb      	ldr	r3, [r7, #24]
 802dd5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 802dd5c:	697b      	ldr	r3, [r7, #20]
 802dd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802dd60:	68bb      	ldr	r3, [r7, #8]
 802dd62:	63bb      	str	r3, [r7, #56]	; 0x38
 802dd64:	e00b      	b.n	802dd7e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 802dd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802dd68:	b2da      	uxtb	r2, r3
 802dd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dd6c:	1c59      	adds	r1, r3, #1
 802dd6e:	63f9      	str	r1, [r7, #60]	; 0x3c
 802dd70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dd74:	b2d2      	uxtb	r2, r2
 802dd76:	701a      	strb	r2, [r3, #0]
 802dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802dd7a:	09db      	lsrs	r3, r3, #7
 802dd7c:	63bb      	str	r3, [r7, #56]	; 0x38
 802dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802dd80:	2b7f      	cmp	r3, #127	; 0x7f
 802dd82:	d8f0      	bhi.n	802dd66 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 802dd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dd86:	1c5a      	adds	r2, r3, #1
 802dd88:	63fa      	str	r2, [r7, #60]	; 0x3c
 802dd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802dd8c:	b2d2      	uxtb	r2, r2
 802dd8e:	701a      	strb	r2, [r3, #0]
 802dd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dd92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 802dd94:	697b      	ldr	r3, [r7, #20]
 802dd96:	637b      	str	r3, [r7, #52]	; 0x34
 802dd98:	687b      	ldr	r3, [r7, #4]
 802dd9a:	633b      	str	r3, [r7, #48]	; 0x30
 802dd9c:	e00b      	b.n	802ddb6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 802dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dda0:	b2da      	uxtb	r2, r3
 802dda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dda4:	1c59      	adds	r1, r3, #1
 802dda6:	6379      	str	r1, [r7, #52]	; 0x34
 802dda8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802ddac:	b2d2      	uxtb	r2, r2
 802ddae:	701a      	strb	r2, [r3, #0]
 802ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ddb2:	09db      	lsrs	r3, r3, #7
 802ddb4:	633b      	str	r3, [r7, #48]	; 0x30
 802ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ddb8:	2b7f      	cmp	r3, #127	; 0x7f
 802ddba:	d8f0      	bhi.n	802dd9e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 802ddbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ddbe:	1c5a      	adds	r2, r3, #1
 802ddc0:	637a      	str	r2, [r7, #52]	; 0x34
 802ddc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ddc4:	b2d2      	uxtb	r2, r2
 802ddc6:	701a      	strb	r2, [r3, #0]
 802ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ddca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 802ddcc:	697b      	ldr	r3, [r7, #20]
 802ddce:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ddd0:	683b      	ldr	r3, [r7, #0]
 802ddd2:	62bb      	str	r3, [r7, #40]	; 0x28
 802ddd4:	e00b      	b.n	802ddee <SEGGER_SYSVIEW_RecordU32x4+0xba>
 802ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ddd8:	b2da      	uxtb	r2, r3
 802ddda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dddc:	1c59      	adds	r1, r3, #1
 802ddde:	62f9      	str	r1, [r7, #44]	; 0x2c
 802dde0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dde4:	b2d2      	uxtb	r2, r2
 802dde6:	701a      	strb	r2, [r3, #0]
 802dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ddea:	09db      	lsrs	r3, r3, #7
 802ddec:	62bb      	str	r3, [r7, #40]	; 0x28
 802ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ddf0:	2b7f      	cmp	r3, #127	; 0x7f
 802ddf2:	d8f0      	bhi.n	802ddd6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 802ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ddf6:	1c5a      	adds	r2, r3, #1
 802ddf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ddfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ddfc:	b2d2      	uxtb	r2, r2
 802ddfe:	701a      	strb	r2, [r3, #0]
 802de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802de02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 802de04:	697b      	ldr	r3, [r7, #20]
 802de06:	627b      	str	r3, [r7, #36]	; 0x24
 802de08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802de0a:	623b      	str	r3, [r7, #32]
 802de0c:	e00b      	b.n	802de26 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 802de0e:	6a3b      	ldr	r3, [r7, #32]
 802de10:	b2da      	uxtb	r2, r3
 802de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de14:	1c59      	adds	r1, r3, #1
 802de16:	6279      	str	r1, [r7, #36]	; 0x24
 802de18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802de1c:	b2d2      	uxtb	r2, r2
 802de1e:	701a      	strb	r2, [r3, #0]
 802de20:	6a3b      	ldr	r3, [r7, #32]
 802de22:	09db      	lsrs	r3, r3, #7
 802de24:	623b      	str	r3, [r7, #32]
 802de26:	6a3b      	ldr	r3, [r7, #32]
 802de28:	2b7f      	cmp	r3, #127	; 0x7f
 802de2a:	d8f0      	bhi.n	802de0e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 802de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de2e:	1c5a      	adds	r2, r3, #1
 802de30:	627a      	str	r2, [r7, #36]	; 0x24
 802de32:	6a3a      	ldr	r2, [r7, #32]
 802de34:	b2d2      	uxtb	r2, r2
 802de36:	701a      	strb	r2, [r3, #0]
 802de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de3a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 802de3c:	68fa      	ldr	r2, [r7, #12]
 802de3e:	6979      	ldr	r1, [r7, #20]
 802de40:	69b8      	ldr	r0, [r7, #24]
 802de42:	f7ff fc53 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802de46:	69fb      	ldr	r3, [r7, #28]
 802de48:	f383 8811 	msr	BASEPRI, r3
}
 802de4c:	bf00      	nop
 802de4e:	3740      	adds	r7, #64	; 0x40
 802de50:	46bd      	mov	sp, r7
 802de52:	bd80      	pop	{r7, pc}
 802de54:	2001b60c 	.word	0x2001b60c

0802de58 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 802de58:	b580      	push	{r7, lr}
 802de5a:	b08c      	sub	sp, #48	; 0x30
 802de5c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 802de5e:	4b58      	ldr	r3, [pc, #352]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802de60:	2201      	movs	r2, #1
 802de62:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 802de64:	f3ef 8311 	mrs	r3, BASEPRI
 802de68:	f04f 0120 	mov.w	r1, #32
 802de6c:	f381 8811 	msr	BASEPRI, r1
 802de70:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 802de72:	4b53      	ldr	r3, [pc, #332]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802de74:	785b      	ldrb	r3, [r3, #1]
 802de76:	220a      	movs	r2, #10
 802de78:	4952      	ldr	r1, [pc, #328]	; (802dfc4 <SEGGER_SYSVIEW_Start+0x16c>)
 802de7a:	4618      	mov	r0, r3
 802de7c:	f7d2 f9a8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 802de80:	68fb      	ldr	r3, [r7, #12]
 802de82:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 802de86:	200a      	movs	r0, #10
 802de88:	f7ff fe2a 	bl	802dae0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802de8c:	f3ef 8311 	mrs	r3, BASEPRI
 802de90:	f04f 0120 	mov.w	r1, #32
 802de94:	f381 8811 	msr	BASEPRI, r1
 802de98:	60bb      	str	r3, [r7, #8]
 802de9a:	484b      	ldr	r0, [pc, #300]	; (802dfc8 <SEGGER_SYSVIEW_Start+0x170>)
 802de9c:	f7ff fb36 	bl	802d50c <_PreparePacket>
 802dea0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 802dea2:	687b      	ldr	r3, [r7, #4]
 802dea4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802dea6:	683b      	ldr	r3, [r7, #0]
 802dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802deaa:	4b45      	ldr	r3, [pc, #276]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802deac:	685b      	ldr	r3, [r3, #4]
 802deae:	62bb      	str	r3, [r7, #40]	; 0x28
 802deb0:	e00b      	b.n	802deca <SEGGER_SYSVIEW_Start+0x72>
 802deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802deb4:	b2da      	uxtb	r2, r3
 802deb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802deb8:	1c59      	adds	r1, r3, #1
 802deba:	62f9      	str	r1, [r7, #44]	; 0x2c
 802debc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802dec0:	b2d2      	uxtb	r2, r2
 802dec2:	701a      	strb	r2, [r3, #0]
 802dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802dec6:	09db      	lsrs	r3, r3, #7
 802dec8:	62bb      	str	r3, [r7, #40]	; 0x28
 802deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802decc:	2b7f      	cmp	r3, #127	; 0x7f
 802dece:	d8f0      	bhi.n	802deb2 <SEGGER_SYSVIEW_Start+0x5a>
 802ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ded2:	1c5a      	adds	r2, r3, #1
 802ded4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ded6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ded8:	b2d2      	uxtb	r2, r2
 802deda:	701a      	strb	r2, [r3, #0]
 802dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802dede:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802dee0:	683b      	ldr	r3, [r7, #0]
 802dee2:	627b      	str	r3, [r7, #36]	; 0x24
 802dee4:	4b36      	ldr	r3, [pc, #216]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802dee6:	689b      	ldr	r3, [r3, #8]
 802dee8:	623b      	str	r3, [r7, #32]
 802deea:	e00b      	b.n	802df04 <SEGGER_SYSVIEW_Start+0xac>
 802deec:	6a3b      	ldr	r3, [r7, #32]
 802deee:	b2da      	uxtb	r2, r3
 802def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802def2:	1c59      	adds	r1, r3, #1
 802def4:	6279      	str	r1, [r7, #36]	; 0x24
 802def6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802defa:	b2d2      	uxtb	r2, r2
 802defc:	701a      	strb	r2, [r3, #0]
 802defe:	6a3b      	ldr	r3, [r7, #32]
 802df00:	09db      	lsrs	r3, r3, #7
 802df02:	623b      	str	r3, [r7, #32]
 802df04:	6a3b      	ldr	r3, [r7, #32]
 802df06:	2b7f      	cmp	r3, #127	; 0x7f
 802df08:	d8f0      	bhi.n	802deec <SEGGER_SYSVIEW_Start+0x94>
 802df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802df0c:	1c5a      	adds	r2, r3, #1
 802df0e:	627a      	str	r2, [r7, #36]	; 0x24
 802df10:	6a3a      	ldr	r2, [r7, #32]
 802df12:	b2d2      	uxtb	r2, r2
 802df14:	701a      	strb	r2, [r3, #0]
 802df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802df18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802df1a:	683b      	ldr	r3, [r7, #0]
 802df1c:	61fb      	str	r3, [r7, #28]
 802df1e:	4b28      	ldr	r3, [pc, #160]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802df20:	691b      	ldr	r3, [r3, #16]
 802df22:	61bb      	str	r3, [r7, #24]
 802df24:	e00b      	b.n	802df3e <SEGGER_SYSVIEW_Start+0xe6>
 802df26:	69bb      	ldr	r3, [r7, #24]
 802df28:	b2da      	uxtb	r2, r3
 802df2a:	69fb      	ldr	r3, [r7, #28]
 802df2c:	1c59      	adds	r1, r3, #1
 802df2e:	61f9      	str	r1, [r7, #28]
 802df30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df34:	b2d2      	uxtb	r2, r2
 802df36:	701a      	strb	r2, [r3, #0]
 802df38:	69bb      	ldr	r3, [r7, #24]
 802df3a:	09db      	lsrs	r3, r3, #7
 802df3c:	61bb      	str	r3, [r7, #24]
 802df3e:	69bb      	ldr	r3, [r7, #24]
 802df40:	2b7f      	cmp	r3, #127	; 0x7f
 802df42:	d8f0      	bhi.n	802df26 <SEGGER_SYSVIEW_Start+0xce>
 802df44:	69fb      	ldr	r3, [r7, #28]
 802df46:	1c5a      	adds	r2, r3, #1
 802df48:	61fa      	str	r2, [r7, #28]
 802df4a:	69ba      	ldr	r2, [r7, #24]
 802df4c:	b2d2      	uxtb	r2, r2
 802df4e:	701a      	strb	r2, [r3, #0]
 802df50:	69fb      	ldr	r3, [r7, #28]
 802df52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802df54:	683b      	ldr	r3, [r7, #0]
 802df56:	617b      	str	r3, [r7, #20]
 802df58:	2300      	movs	r3, #0
 802df5a:	613b      	str	r3, [r7, #16]
 802df5c:	e00b      	b.n	802df76 <SEGGER_SYSVIEW_Start+0x11e>
 802df5e:	693b      	ldr	r3, [r7, #16]
 802df60:	b2da      	uxtb	r2, r3
 802df62:	697b      	ldr	r3, [r7, #20]
 802df64:	1c59      	adds	r1, r3, #1
 802df66:	6179      	str	r1, [r7, #20]
 802df68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802df6c:	b2d2      	uxtb	r2, r2
 802df6e:	701a      	strb	r2, [r3, #0]
 802df70:	693b      	ldr	r3, [r7, #16]
 802df72:	09db      	lsrs	r3, r3, #7
 802df74:	613b      	str	r3, [r7, #16]
 802df76:	693b      	ldr	r3, [r7, #16]
 802df78:	2b7f      	cmp	r3, #127	; 0x7f
 802df7a:	d8f0      	bhi.n	802df5e <SEGGER_SYSVIEW_Start+0x106>
 802df7c:	697b      	ldr	r3, [r7, #20]
 802df7e:	1c5a      	adds	r2, r3, #1
 802df80:	617a      	str	r2, [r7, #20]
 802df82:	693a      	ldr	r2, [r7, #16]
 802df84:	b2d2      	uxtb	r2, r2
 802df86:	701a      	strb	r2, [r3, #0]
 802df88:	697b      	ldr	r3, [r7, #20]
 802df8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802df8c:	2218      	movs	r2, #24
 802df8e:	6839      	ldr	r1, [r7, #0]
 802df90:	6878      	ldr	r0, [r7, #4]
 802df92:	f7ff fbab 	bl	802d6ec <_SendPacket>
      RECORD_END();
 802df96:	68bb      	ldr	r3, [r7, #8]
 802df98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 802df9c:	4b08      	ldr	r3, [pc, #32]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dfa0:	2b00      	cmp	r3, #0
 802dfa2:	d002      	beq.n	802dfaa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 802dfa4:	4b06      	ldr	r3, [pc, #24]	; (802dfc0 <SEGGER_SYSVIEW_Start+0x168>)
 802dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dfa8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 802dfaa:	f000 f9eb 	bl	802e384 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 802dfae:	f000 f9b1 	bl	802e314 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 802dfb2:	f000 fba9 	bl	802e708 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 802dfb6:	bf00      	nop
 802dfb8:	3730      	adds	r7, #48	; 0x30
 802dfba:	46bd      	mov	sp, r7
 802dfbc:	bd80      	pop	{r7, pc}
 802dfbe:	bf00      	nop
 802dfc0:	2001b5dc 	.word	0x2001b5dc
 802dfc4:	0802fce8 	.word	0x0802fce8
 802dfc8:	2001b60c 	.word	0x2001b60c

0802dfcc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 802dfcc:	b580      	push	{r7, lr}
 802dfce:	b082      	sub	sp, #8
 802dfd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802dfd2:	f3ef 8311 	mrs	r3, BASEPRI
 802dfd6:	f04f 0120 	mov.w	r1, #32
 802dfda:	f381 8811 	msr	BASEPRI, r1
 802dfde:	607b      	str	r3, [r7, #4]
 802dfe0:	480b      	ldr	r0, [pc, #44]	; (802e010 <SEGGER_SYSVIEW_Stop+0x44>)
 802dfe2:	f7ff fa93 	bl	802d50c <_PreparePacket>
 802dfe6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 802dfe8:	4b0a      	ldr	r3, [pc, #40]	; (802e014 <SEGGER_SYSVIEW_Stop+0x48>)
 802dfea:	781b      	ldrb	r3, [r3, #0]
 802dfec:	2b00      	cmp	r3, #0
 802dfee:	d007      	beq.n	802e000 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 802dff0:	220b      	movs	r2, #11
 802dff2:	6839      	ldr	r1, [r7, #0]
 802dff4:	6838      	ldr	r0, [r7, #0]
 802dff6:	f7ff fb79 	bl	802d6ec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 802dffa:	4b06      	ldr	r3, [pc, #24]	; (802e014 <SEGGER_SYSVIEW_Stop+0x48>)
 802dffc:	2200      	movs	r2, #0
 802dffe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 802e000:	687b      	ldr	r3, [r7, #4]
 802e002:	f383 8811 	msr	BASEPRI, r3
}
 802e006:	bf00      	nop
 802e008:	3708      	adds	r7, #8
 802e00a:	46bd      	mov	sp, r7
 802e00c:	bd80      	pop	{r7, pc}
 802e00e:	bf00      	nop
 802e010:	2001b60c 	.word	0x2001b60c
 802e014:	2001b5dc 	.word	0x2001b5dc

0802e018 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 802e018:	b580      	push	{r7, lr}
 802e01a:	b08c      	sub	sp, #48	; 0x30
 802e01c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 802e01e:	f3ef 8311 	mrs	r3, BASEPRI
 802e022:	f04f 0120 	mov.w	r1, #32
 802e026:	f381 8811 	msr	BASEPRI, r1
 802e02a:	60fb      	str	r3, [r7, #12]
 802e02c:	4845      	ldr	r0, [pc, #276]	; (802e144 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 802e02e:	f7ff fa6d 	bl	802d50c <_PreparePacket>
 802e032:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 802e034:	68bb      	ldr	r3, [r7, #8]
 802e036:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 802e038:	687b      	ldr	r3, [r7, #4]
 802e03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802e03c:	4b42      	ldr	r3, [pc, #264]	; (802e148 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802e03e:	685b      	ldr	r3, [r3, #4]
 802e040:	62bb      	str	r3, [r7, #40]	; 0x28
 802e042:	e00b      	b.n	802e05c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 802e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e046:	b2da      	uxtb	r2, r3
 802e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e04a:	1c59      	adds	r1, r3, #1
 802e04c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802e04e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e052:	b2d2      	uxtb	r2, r2
 802e054:	701a      	strb	r2, [r3, #0]
 802e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e058:	09db      	lsrs	r3, r3, #7
 802e05a:	62bb      	str	r3, [r7, #40]	; 0x28
 802e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e05e:	2b7f      	cmp	r3, #127	; 0x7f
 802e060:	d8f0      	bhi.n	802e044 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 802e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e064:	1c5a      	adds	r2, r3, #1
 802e066:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e06a:	b2d2      	uxtb	r2, r2
 802e06c:	701a      	strb	r2, [r3, #0]
 802e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e070:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 802e072:	687b      	ldr	r3, [r7, #4]
 802e074:	627b      	str	r3, [r7, #36]	; 0x24
 802e076:	4b34      	ldr	r3, [pc, #208]	; (802e148 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802e078:	689b      	ldr	r3, [r3, #8]
 802e07a:	623b      	str	r3, [r7, #32]
 802e07c:	e00b      	b.n	802e096 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 802e07e:	6a3b      	ldr	r3, [r7, #32]
 802e080:	b2da      	uxtb	r2, r3
 802e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e084:	1c59      	adds	r1, r3, #1
 802e086:	6279      	str	r1, [r7, #36]	; 0x24
 802e088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e08c:	b2d2      	uxtb	r2, r2
 802e08e:	701a      	strb	r2, [r3, #0]
 802e090:	6a3b      	ldr	r3, [r7, #32]
 802e092:	09db      	lsrs	r3, r3, #7
 802e094:	623b      	str	r3, [r7, #32]
 802e096:	6a3b      	ldr	r3, [r7, #32]
 802e098:	2b7f      	cmp	r3, #127	; 0x7f
 802e09a:	d8f0      	bhi.n	802e07e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 802e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e09e:	1c5a      	adds	r2, r3, #1
 802e0a0:	627a      	str	r2, [r7, #36]	; 0x24
 802e0a2:	6a3a      	ldr	r2, [r7, #32]
 802e0a4:	b2d2      	uxtb	r2, r2
 802e0a6:	701a      	strb	r2, [r3, #0]
 802e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 802e0ac:	687b      	ldr	r3, [r7, #4]
 802e0ae:	61fb      	str	r3, [r7, #28]
 802e0b0:	4b25      	ldr	r3, [pc, #148]	; (802e148 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802e0b2:	691b      	ldr	r3, [r3, #16]
 802e0b4:	61bb      	str	r3, [r7, #24]
 802e0b6:	e00b      	b.n	802e0d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 802e0b8:	69bb      	ldr	r3, [r7, #24]
 802e0ba:	b2da      	uxtb	r2, r3
 802e0bc:	69fb      	ldr	r3, [r7, #28]
 802e0be:	1c59      	adds	r1, r3, #1
 802e0c0:	61f9      	str	r1, [r7, #28]
 802e0c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e0c6:	b2d2      	uxtb	r2, r2
 802e0c8:	701a      	strb	r2, [r3, #0]
 802e0ca:	69bb      	ldr	r3, [r7, #24]
 802e0cc:	09db      	lsrs	r3, r3, #7
 802e0ce:	61bb      	str	r3, [r7, #24]
 802e0d0:	69bb      	ldr	r3, [r7, #24]
 802e0d2:	2b7f      	cmp	r3, #127	; 0x7f
 802e0d4:	d8f0      	bhi.n	802e0b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 802e0d6:	69fb      	ldr	r3, [r7, #28]
 802e0d8:	1c5a      	adds	r2, r3, #1
 802e0da:	61fa      	str	r2, [r7, #28]
 802e0dc:	69ba      	ldr	r2, [r7, #24]
 802e0de:	b2d2      	uxtb	r2, r2
 802e0e0:	701a      	strb	r2, [r3, #0]
 802e0e2:	69fb      	ldr	r3, [r7, #28]
 802e0e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 802e0e6:	687b      	ldr	r3, [r7, #4]
 802e0e8:	617b      	str	r3, [r7, #20]
 802e0ea:	2300      	movs	r3, #0
 802e0ec:	613b      	str	r3, [r7, #16]
 802e0ee:	e00b      	b.n	802e108 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 802e0f0:	693b      	ldr	r3, [r7, #16]
 802e0f2:	b2da      	uxtb	r2, r3
 802e0f4:	697b      	ldr	r3, [r7, #20]
 802e0f6:	1c59      	adds	r1, r3, #1
 802e0f8:	6179      	str	r1, [r7, #20]
 802e0fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e0fe:	b2d2      	uxtb	r2, r2
 802e100:	701a      	strb	r2, [r3, #0]
 802e102:	693b      	ldr	r3, [r7, #16]
 802e104:	09db      	lsrs	r3, r3, #7
 802e106:	613b      	str	r3, [r7, #16]
 802e108:	693b      	ldr	r3, [r7, #16]
 802e10a:	2b7f      	cmp	r3, #127	; 0x7f
 802e10c:	d8f0      	bhi.n	802e0f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 802e10e:	697b      	ldr	r3, [r7, #20]
 802e110:	1c5a      	adds	r2, r3, #1
 802e112:	617a      	str	r2, [r7, #20]
 802e114:	693a      	ldr	r2, [r7, #16]
 802e116:	b2d2      	uxtb	r2, r2
 802e118:	701a      	strb	r2, [r3, #0]
 802e11a:	697b      	ldr	r3, [r7, #20]
 802e11c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 802e11e:	2218      	movs	r2, #24
 802e120:	6879      	ldr	r1, [r7, #4]
 802e122:	68b8      	ldr	r0, [r7, #8]
 802e124:	f7ff fae2 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e128:	68fb      	ldr	r3, [r7, #12]
 802e12a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 802e12e:	4b06      	ldr	r3, [pc, #24]	; (802e148 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802e130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e132:	2b00      	cmp	r3, #0
 802e134:	d002      	beq.n	802e13c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 802e136:	4b04      	ldr	r3, [pc, #16]	; (802e148 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 802e138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e13a:	4798      	blx	r3
  }
}
 802e13c:	bf00      	nop
 802e13e:	3730      	adds	r7, #48	; 0x30
 802e140:	46bd      	mov	sp, r7
 802e142:	bd80      	pop	{r7, pc}
 802e144:	2001b60c 	.word	0x2001b60c
 802e148:	2001b5dc 	.word	0x2001b5dc

0802e14c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 802e14c:	b580      	push	{r7, lr}
 802e14e:	b092      	sub	sp, #72	; 0x48
 802e150:	af00      	add	r7, sp, #0
 802e152:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 802e154:	f3ef 8311 	mrs	r3, BASEPRI
 802e158:	f04f 0120 	mov.w	r1, #32
 802e15c:	f381 8811 	msr	BASEPRI, r1
 802e160:	617b      	str	r3, [r7, #20]
 802e162:	486a      	ldr	r0, [pc, #424]	; (802e30c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 802e164:	f7ff f9d2 	bl	802d50c <_PreparePacket>
 802e168:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e16a:	693b      	ldr	r3, [r7, #16]
 802e16c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802e16e:	68fb      	ldr	r3, [r7, #12]
 802e170:	647b      	str	r3, [r7, #68]	; 0x44
 802e172:	687b      	ldr	r3, [r7, #4]
 802e174:	681a      	ldr	r2, [r3, #0]
 802e176:	4b66      	ldr	r3, [pc, #408]	; (802e310 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802e178:	691b      	ldr	r3, [r3, #16]
 802e17a:	1ad3      	subs	r3, r2, r3
 802e17c:	643b      	str	r3, [r7, #64]	; 0x40
 802e17e:	e00b      	b.n	802e198 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 802e180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802e182:	b2da      	uxtb	r2, r3
 802e184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e186:	1c59      	adds	r1, r3, #1
 802e188:	6479      	str	r1, [r7, #68]	; 0x44
 802e18a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e18e:	b2d2      	uxtb	r2, r2
 802e190:	701a      	strb	r2, [r3, #0]
 802e192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802e194:	09db      	lsrs	r3, r3, #7
 802e196:	643b      	str	r3, [r7, #64]	; 0x40
 802e198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802e19a:	2b7f      	cmp	r3, #127	; 0x7f
 802e19c:	d8f0      	bhi.n	802e180 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 802e19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e1a0:	1c5a      	adds	r2, r3, #1
 802e1a2:	647a      	str	r2, [r7, #68]	; 0x44
 802e1a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802e1a6:	b2d2      	uxtb	r2, r2
 802e1a8:	701a      	strb	r2, [r3, #0]
 802e1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e1ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 802e1ae:	68fb      	ldr	r3, [r7, #12]
 802e1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 802e1b2:	687b      	ldr	r3, [r7, #4]
 802e1b4:	689b      	ldr	r3, [r3, #8]
 802e1b6:	63bb      	str	r3, [r7, #56]	; 0x38
 802e1b8:	e00b      	b.n	802e1d2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 802e1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e1bc:	b2da      	uxtb	r2, r3
 802e1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e1c0:	1c59      	adds	r1, r3, #1
 802e1c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 802e1c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e1c8:	b2d2      	uxtb	r2, r2
 802e1ca:	701a      	strb	r2, [r3, #0]
 802e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e1ce:	09db      	lsrs	r3, r3, #7
 802e1d0:	63bb      	str	r3, [r7, #56]	; 0x38
 802e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e1d4:	2b7f      	cmp	r3, #127	; 0x7f
 802e1d6:	d8f0      	bhi.n	802e1ba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 802e1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e1da:	1c5a      	adds	r2, r3, #1
 802e1dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 802e1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802e1e0:	b2d2      	uxtb	r2, r2
 802e1e2:	701a      	strb	r2, [r3, #0]
 802e1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e1e6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 802e1e8:	687b      	ldr	r3, [r7, #4]
 802e1ea:	685b      	ldr	r3, [r3, #4]
 802e1ec:	2220      	movs	r2, #32
 802e1ee:	4619      	mov	r1, r3
 802e1f0:	68f8      	ldr	r0, [r7, #12]
 802e1f2:	f7ff f93b 	bl	802d46c <_EncodeStr>
 802e1f6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 802e1f8:	2209      	movs	r2, #9
 802e1fa:	68f9      	ldr	r1, [r7, #12]
 802e1fc:	6938      	ldr	r0, [r7, #16]
 802e1fe:	f7ff fa75 	bl	802d6ec <_SendPacket>
  //
  pPayload = pPayloadStart;
 802e202:	693b      	ldr	r3, [r7, #16]
 802e204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 802e206:	68fb      	ldr	r3, [r7, #12]
 802e208:	637b      	str	r3, [r7, #52]	; 0x34
 802e20a:	687b      	ldr	r3, [r7, #4]
 802e20c:	681a      	ldr	r2, [r3, #0]
 802e20e:	4b40      	ldr	r3, [pc, #256]	; (802e310 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 802e210:	691b      	ldr	r3, [r3, #16]
 802e212:	1ad3      	subs	r3, r2, r3
 802e214:	633b      	str	r3, [r7, #48]	; 0x30
 802e216:	e00b      	b.n	802e230 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 802e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e21a:	b2da      	uxtb	r2, r3
 802e21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e21e:	1c59      	adds	r1, r3, #1
 802e220:	6379      	str	r1, [r7, #52]	; 0x34
 802e222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e226:	b2d2      	uxtb	r2, r2
 802e228:	701a      	strb	r2, [r3, #0]
 802e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e22c:	09db      	lsrs	r3, r3, #7
 802e22e:	633b      	str	r3, [r7, #48]	; 0x30
 802e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e232:	2b7f      	cmp	r3, #127	; 0x7f
 802e234:	d8f0      	bhi.n	802e218 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 802e236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e238:	1c5a      	adds	r2, r3, #1
 802e23a:	637a      	str	r2, [r7, #52]	; 0x34
 802e23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e23e:	b2d2      	uxtb	r2, r2
 802e240:	701a      	strb	r2, [r3, #0]
 802e242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 802e246:	68fb      	ldr	r3, [r7, #12]
 802e248:	62fb      	str	r3, [r7, #44]	; 0x2c
 802e24a:	687b      	ldr	r3, [r7, #4]
 802e24c:	68db      	ldr	r3, [r3, #12]
 802e24e:	62bb      	str	r3, [r7, #40]	; 0x28
 802e250:	e00b      	b.n	802e26a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 802e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e254:	b2da      	uxtb	r2, r3
 802e256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e258:	1c59      	adds	r1, r3, #1
 802e25a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802e25c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e260:	b2d2      	uxtb	r2, r2
 802e262:	701a      	strb	r2, [r3, #0]
 802e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e266:	09db      	lsrs	r3, r3, #7
 802e268:	62bb      	str	r3, [r7, #40]	; 0x28
 802e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e26c:	2b7f      	cmp	r3, #127	; 0x7f
 802e26e:	d8f0      	bhi.n	802e252 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 802e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e272:	1c5a      	adds	r2, r3, #1
 802e274:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e278:	b2d2      	uxtb	r2, r2
 802e27a:	701a      	strb	r2, [r3, #0]
 802e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e27e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 802e280:	68fb      	ldr	r3, [r7, #12]
 802e282:	627b      	str	r3, [r7, #36]	; 0x24
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	691b      	ldr	r3, [r3, #16]
 802e288:	623b      	str	r3, [r7, #32]
 802e28a:	e00b      	b.n	802e2a4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 802e28c:	6a3b      	ldr	r3, [r7, #32]
 802e28e:	b2da      	uxtb	r2, r3
 802e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e292:	1c59      	adds	r1, r3, #1
 802e294:	6279      	str	r1, [r7, #36]	; 0x24
 802e296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e29a:	b2d2      	uxtb	r2, r2
 802e29c:	701a      	strb	r2, [r3, #0]
 802e29e:	6a3b      	ldr	r3, [r7, #32]
 802e2a0:	09db      	lsrs	r3, r3, #7
 802e2a2:	623b      	str	r3, [r7, #32]
 802e2a4:	6a3b      	ldr	r3, [r7, #32]
 802e2a6:	2b7f      	cmp	r3, #127	; 0x7f
 802e2a8:	d8f0      	bhi.n	802e28c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 802e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e2ac:	1c5a      	adds	r2, r3, #1
 802e2ae:	627a      	str	r2, [r7, #36]	; 0x24
 802e2b0:	6a3a      	ldr	r2, [r7, #32]
 802e2b2:	b2d2      	uxtb	r2, r2
 802e2b4:	701a      	strb	r2, [r3, #0]
 802e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e2b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 802e2ba:	68fb      	ldr	r3, [r7, #12]
 802e2bc:	61fb      	str	r3, [r7, #28]
 802e2be:	2300      	movs	r3, #0
 802e2c0:	61bb      	str	r3, [r7, #24]
 802e2c2:	e00b      	b.n	802e2dc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 802e2c4:	69bb      	ldr	r3, [r7, #24]
 802e2c6:	b2da      	uxtb	r2, r3
 802e2c8:	69fb      	ldr	r3, [r7, #28]
 802e2ca:	1c59      	adds	r1, r3, #1
 802e2cc:	61f9      	str	r1, [r7, #28]
 802e2ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e2d2:	b2d2      	uxtb	r2, r2
 802e2d4:	701a      	strb	r2, [r3, #0]
 802e2d6:	69bb      	ldr	r3, [r7, #24]
 802e2d8:	09db      	lsrs	r3, r3, #7
 802e2da:	61bb      	str	r3, [r7, #24]
 802e2dc:	69bb      	ldr	r3, [r7, #24]
 802e2de:	2b7f      	cmp	r3, #127	; 0x7f
 802e2e0:	d8f0      	bhi.n	802e2c4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 802e2e2:	69fb      	ldr	r3, [r7, #28]
 802e2e4:	1c5a      	adds	r2, r3, #1
 802e2e6:	61fa      	str	r2, [r7, #28]
 802e2e8:	69ba      	ldr	r2, [r7, #24]
 802e2ea:	b2d2      	uxtb	r2, r2
 802e2ec:	701a      	strb	r2, [r3, #0]
 802e2ee:	69fb      	ldr	r3, [r7, #28]
 802e2f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 802e2f2:	2215      	movs	r2, #21
 802e2f4:	68f9      	ldr	r1, [r7, #12]
 802e2f6:	6938      	ldr	r0, [r7, #16]
 802e2f8:	f7ff f9f8 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e2fc:	697b      	ldr	r3, [r7, #20]
 802e2fe:	f383 8811 	msr	BASEPRI, r3
}
 802e302:	bf00      	nop
 802e304:	3748      	adds	r7, #72	; 0x48
 802e306:	46bd      	mov	sp, r7
 802e308:	bd80      	pop	{r7, pc}
 802e30a:	bf00      	nop
 802e30c:	2001b60c 	.word	0x2001b60c
 802e310:	2001b5dc 	.word	0x2001b5dc

0802e314 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 802e314:	b580      	push	{r7, lr}
 802e316:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 802e318:	4b07      	ldr	r3, [pc, #28]	; (802e338 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e31a:	6a1b      	ldr	r3, [r3, #32]
 802e31c:	2b00      	cmp	r3, #0
 802e31e:	d008      	beq.n	802e332 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 802e320:	4b05      	ldr	r3, [pc, #20]	; (802e338 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e322:	6a1b      	ldr	r3, [r3, #32]
 802e324:	685b      	ldr	r3, [r3, #4]
 802e326:	2b00      	cmp	r3, #0
 802e328:	d003      	beq.n	802e332 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 802e32a:	4b03      	ldr	r3, [pc, #12]	; (802e338 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 802e32c:	6a1b      	ldr	r3, [r3, #32]
 802e32e:	685b      	ldr	r3, [r3, #4]
 802e330:	4798      	blx	r3
  }
}
 802e332:	bf00      	nop
 802e334:	bd80      	pop	{r7, pc}
 802e336:	bf00      	nop
 802e338:	2001b5dc 	.word	0x2001b5dc

0802e33c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 802e33c:	b580      	push	{r7, lr}
 802e33e:	b086      	sub	sp, #24
 802e340:	af00      	add	r7, sp, #0
 802e342:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e344:	f3ef 8311 	mrs	r3, BASEPRI
 802e348:	f04f 0120 	mov.w	r1, #32
 802e34c:	f381 8811 	msr	BASEPRI, r1
 802e350:	617b      	str	r3, [r7, #20]
 802e352:	480b      	ldr	r0, [pc, #44]	; (802e380 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 802e354:	f7ff f8da 	bl	802d50c <_PreparePacket>
 802e358:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e35a:	2280      	movs	r2, #128	; 0x80
 802e35c:	6879      	ldr	r1, [r7, #4]
 802e35e:	6938      	ldr	r0, [r7, #16]
 802e360:	f7ff f884 	bl	802d46c <_EncodeStr>
 802e364:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 802e366:	220e      	movs	r2, #14
 802e368:	68f9      	ldr	r1, [r7, #12]
 802e36a:	6938      	ldr	r0, [r7, #16]
 802e36c:	f7ff f9be 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e370:	697b      	ldr	r3, [r7, #20]
 802e372:	f383 8811 	msr	BASEPRI, r3
}
 802e376:	bf00      	nop
 802e378:	3718      	adds	r7, #24
 802e37a:	46bd      	mov	sp, r7
 802e37c:	bd80      	pop	{r7, pc}
 802e37e:	bf00      	nop
 802e380:	2001b60c 	.word	0x2001b60c

0802e384 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 802e384:	b590      	push	{r4, r7, lr}
 802e386:	b083      	sub	sp, #12
 802e388:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 802e38a:	4b15      	ldr	r3, [pc, #84]	; (802e3e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e38c:	6a1b      	ldr	r3, [r3, #32]
 802e38e:	2b00      	cmp	r3, #0
 802e390:	d01a      	beq.n	802e3c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 802e392:	4b13      	ldr	r3, [pc, #76]	; (802e3e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e394:	6a1b      	ldr	r3, [r3, #32]
 802e396:	681b      	ldr	r3, [r3, #0]
 802e398:	2b00      	cmp	r3, #0
 802e39a:	d015      	beq.n	802e3c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 802e39c:	4b10      	ldr	r3, [pc, #64]	; (802e3e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 802e39e:	6a1b      	ldr	r3, [r3, #32]
 802e3a0:	681b      	ldr	r3, [r3, #0]
 802e3a2:	4798      	blx	r3
 802e3a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e3a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 802e3aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 802e3ae:	f04f 0200 	mov.w	r2, #0
 802e3b2:	f04f 0300 	mov.w	r3, #0
 802e3b6:	000a      	movs	r2, r1
 802e3b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 802e3ba:	4613      	mov	r3, r2
 802e3bc:	461a      	mov	r2, r3
 802e3be:	4621      	mov	r1, r4
 802e3c0:	200d      	movs	r0, #13
 802e3c2:	f7ff fbe7 	bl	802db94 <SEGGER_SYSVIEW_RecordU32x2>
 802e3c6:	e006      	b.n	802e3d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 802e3c8:	4b06      	ldr	r3, [pc, #24]	; (802e3e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 802e3ca:	681b      	ldr	r3, [r3, #0]
 802e3cc:	4619      	mov	r1, r3
 802e3ce:	200c      	movs	r0, #12
 802e3d0:	f7ff fba4 	bl	802db1c <SEGGER_SYSVIEW_RecordU32>
  }
}
 802e3d4:	bf00      	nop
 802e3d6:	bf00      	nop
 802e3d8:	370c      	adds	r7, #12
 802e3da:	46bd      	mov	sp, r7
 802e3dc:	bd90      	pop	{r4, r7, pc}
 802e3de:	bf00      	nop
 802e3e0:	2001b5dc 	.word	0x2001b5dc
 802e3e4:	e0001004 	.word	0xe0001004

0802e3e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 802e3e8:	b580      	push	{r7, lr}
 802e3ea:	b082      	sub	sp, #8
 802e3ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 802e3ee:	f3ef 8311 	mrs	r3, BASEPRI
 802e3f2:	f04f 0120 	mov.w	r1, #32
 802e3f6:	f381 8811 	msr	BASEPRI, r1
 802e3fa:	607b      	str	r3, [r7, #4]
 802e3fc:	4807      	ldr	r0, [pc, #28]	; (802e41c <SEGGER_SYSVIEW_OnIdle+0x34>)
 802e3fe:	f7ff f885 	bl	802d50c <_PreparePacket>
 802e402:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 802e404:	2211      	movs	r2, #17
 802e406:	6839      	ldr	r1, [r7, #0]
 802e408:	6838      	ldr	r0, [r7, #0]
 802e40a:	f7ff f96f 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e40e:	687b      	ldr	r3, [r7, #4]
 802e410:	f383 8811 	msr	BASEPRI, r3
}
 802e414:	bf00      	nop
 802e416:	3708      	adds	r7, #8
 802e418:	46bd      	mov	sp, r7
 802e41a:	bd80      	pop	{r7, pc}
 802e41c:	2001b60c 	.word	0x2001b60c

0802e420 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 802e420:	b580      	push	{r7, lr}
 802e422:	b088      	sub	sp, #32
 802e424:	af00      	add	r7, sp, #0
 802e426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e428:	f3ef 8311 	mrs	r3, BASEPRI
 802e42c:	f04f 0120 	mov.w	r1, #32
 802e430:	f381 8811 	msr	BASEPRI, r1
 802e434:	617b      	str	r3, [r7, #20]
 802e436:	4819      	ldr	r0, [pc, #100]	; (802e49c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 802e438:	f7ff f868 	bl	802d50c <_PreparePacket>
 802e43c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e43e:	693b      	ldr	r3, [r7, #16]
 802e440:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e442:	4b17      	ldr	r3, [pc, #92]	; (802e4a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 802e444:	691b      	ldr	r3, [r3, #16]
 802e446:	687a      	ldr	r2, [r7, #4]
 802e448:	1ad3      	subs	r3, r2, r3
 802e44a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e44c:	68fb      	ldr	r3, [r7, #12]
 802e44e:	61fb      	str	r3, [r7, #28]
 802e450:	687b      	ldr	r3, [r7, #4]
 802e452:	61bb      	str	r3, [r7, #24]
 802e454:	e00b      	b.n	802e46e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 802e456:	69bb      	ldr	r3, [r7, #24]
 802e458:	b2da      	uxtb	r2, r3
 802e45a:	69fb      	ldr	r3, [r7, #28]
 802e45c:	1c59      	adds	r1, r3, #1
 802e45e:	61f9      	str	r1, [r7, #28]
 802e460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e464:	b2d2      	uxtb	r2, r2
 802e466:	701a      	strb	r2, [r3, #0]
 802e468:	69bb      	ldr	r3, [r7, #24]
 802e46a:	09db      	lsrs	r3, r3, #7
 802e46c:	61bb      	str	r3, [r7, #24]
 802e46e:	69bb      	ldr	r3, [r7, #24]
 802e470:	2b7f      	cmp	r3, #127	; 0x7f
 802e472:	d8f0      	bhi.n	802e456 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 802e474:	69fb      	ldr	r3, [r7, #28]
 802e476:	1c5a      	adds	r2, r3, #1
 802e478:	61fa      	str	r2, [r7, #28]
 802e47a:	69ba      	ldr	r2, [r7, #24]
 802e47c:	b2d2      	uxtb	r2, r2
 802e47e:	701a      	strb	r2, [r3, #0]
 802e480:	69fb      	ldr	r3, [r7, #28]
 802e482:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 802e484:	2208      	movs	r2, #8
 802e486:	68f9      	ldr	r1, [r7, #12]
 802e488:	6938      	ldr	r0, [r7, #16]
 802e48a:	f7ff f92f 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e48e:	697b      	ldr	r3, [r7, #20]
 802e490:	f383 8811 	msr	BASEPRI, r3
}
 802e494:	bf00      	nop
 802e496:	3720      	adds	r7, #32
 802e498:	46bd      	mov	sp, r7
 802e49a:	bd80      	pop	{r7, pc}
 802e49c:	2001b60c 	.word	0x2001b60c
 802e4a0:	2001b5dc 	.word	0x2001b5dc

0802e4a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 802e4a4:	b580      	push	{r7, lr}
 802e4a6:	b088      	sub	sp, #32
 802e4a8:	af00      	add	r7, sp, #0
 802e4aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e4ac:	f3ef 8311 	mrs	r3, BASEPRI
 802e4b0:	f04f 0120 	mov.w	r1, #32
 802e4b4:	f381 8811 	msr	BASEPRI, r1
 802e4b8:	617b      	str	r3, [r7, #20]
 802e4ba:	4819      	ldr	r0, [pc, #100]	; (802e520 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 802e4bc:	f7ff f826 	bl	802d50c <_PreparePacket>
 802e4c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e4c2:	693b      	ldr	r3, [r7, #16]
 802e4c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e4c6:	4b17      	ldr	r3, [pc, #92]	; (802e524 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 802e4c8:	691b      	ldr	r3, [r3, #16]
 802e4ca:	687a      	ldr	r2, [r7, #4]
 802e4cc:	1ad3      	subs	r3, r2, r3
 802e4ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e4d0:	68fb      	ldr	r3, [r7, #12]
 802e4d2:	61fb      	str	r3, [r7, #28]
 802e4d4:	687b      	ldr	r3, [r7, #4]
 802e4d6:	61bb      	str	r3, [r7, #24]
 802e4d8:	e00b      	b.n	802e4f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 802e4da:	69bb      	ldr	r3, [r7, #24]
 802e4dc:	b2da      	uxtb	r2, r3
 802e4de:	69fb      	ldr	r3, [r7, #28]
 802e4e0:	1c59      	adds	r1, r3, #1
 802e4e2:	61f9      	str	r1, [r7, #28]
 802e4e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e4e8:	b2d2      	uxtb	r2, r2
 802e4ea:	701a      	strb	r2, [r3, #0]
 802e4ec:	69bb      	ldr	r3, [r7, #24]
 802e4ee:	09db      	lsrs	r3, r3, #7
 802e4f0:	61bb      	str	r3, [r7, #24]
 802e4f2:	69bb      	ldr	r3, [r7, #24]
 802e4f4:	2b7f      	cmp	r3, #127	; 0x7f
 802e4f6:	d8f0      	bhi.n	802e4da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 802e4f8:	69fb      	ldr	r3, [r7, #28]
 802e4fa:	1c5a      	adds	r2, r3, #1
 802e4fc:	61fa      	str	r2, [r7, #28]
 802e4fe:	69ba      	ldr	r2, [r7, #24]
 802e500:	b2d2      	uxtb	r2, r2
 802e502:	701a      	strb	r2, [r3, #0]
 802e504:	69fb      	ldr	r3, [r7, #28]
 802e506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 802e508:	2204      	movs	r2, #4
 802e50a:	68f9      	ldr	r1, [r7, #12]
 802e50c:	6938      	ldr	r0, [r7, #16]
 802e50e:	f7ff f8ed 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e512:	697b      	ldr	r3, [r7, #20]
 802e514:	f383 8811 	msr	BASEPRI, r3
}
 802e518:	bf00      	nop
 802e51a:	3720      	adds	r7, #32
 802e51c:	46bd      	mov	sp, r7
 802e51e:	bd80      	pop	{r7, pc}
 802e520:	2001b60c 	.word	0x2001b60c
 802e524:	2001b5dc 	.word	0x2001b5dc

0802e528 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 802e528:	b580      	push	{r7, lr}
 802e52a:	b088      	sub	sp, #32
 802e52c:	af00      	add	r7, sp, #0
 802e52e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 802e530:	f3ef 8311 	mrs	r3, BASEPRI
 802e534:	f04f 0120 	mov.w	r1, #32
 802e538:	f381 8811 	msr	BASEPRI, r1
 802e53c:	617b      	str	r3, [r7, #20]
 802e53e:	4819      	ldr	r0, [pc, #100]	; (802e5a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 802e540:	f7fe ffe4 	bl	802d50c <_PreparePacket>
 802e544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 802e546:	693b      	ldr	r3, [r7, #16]
 802e548:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 802e54a:	4b17      	ldr	r3, [pc, #92]	; (802e5a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 802e54c:	691b      	ldr	r3, [r3, #16]
 802e54e:	687a      	ldr	r2, [r7, #4]
 802e550:	1ad3      	subs	r3, r2, r3
 802e552:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 802e554:	68fb      	ldr	r3, [r7, #12]
 802e556:	61fb      	str	r3, [r7, #28]
 802e558:	687b      	ldr	r3, [r7, #4]
 802e55a:	61bb      	str	r3, [r7, #24]
 802e55c:	e00b      	b.n	802e576 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 802e55e:	69bb      	ldr	r3, [r7, #24]
 802e560:	b2da      	uxtb	r2, r3
 802e562:	69fb      	ldr	r3, [r7, #28]
 802e564:	1c59      	adds	r1, r3, #1
 802e566:	61f9      	str	r1, [r7, #28]
 802e568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e56c:	b2d2      	uxtb	r2, r2
 802e56e:	701a      	strb	r2, [r3, #0]
 802e570:	69bb      	ldr	r3, [r7, #24]
 802e572:	09db      	lsrs	r3, r3, #7
 802e574:	61bb      	str	r3, [r7, #24]
 802e576:	69bb      	ldr	r3, [r7, #24]
 802e578:	2b7f      	cmp	r3, #127	; 0x7f
 802e57a:	d8f0      	bhi.n	802e55e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 802e57c:	69fb      	ldr	r3, [r7, #28]
 802e57e:	1c5a      	adds	r2, r3, #1
 802e580:	61fa      	str	r2, [r7, #28]
 802e582:	69ba      	ldr	r2, [r7, #24]
 802e584:	b2d2      	uxtb	r2, r2
 802e586:	701a      	strb	r2, [r3, #0]
 802e588:	69fb      	ldr	r3, [r7, #28]
 802e58a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 802e58c:	2206      	movs	r2, #6
 802e58e:	68f9      	ldr	r1, [r7, #12]
 802e590:	6938      	ldr	r0, [r7, #16]
 802e592:	f7ff f8ab 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e596:	697b      	ldr	r3, [r7, #20]
 802e598:	f383 8811 	msr	BASEPRI, r3
}
 802e59c:	bf00      	nop
 802e59e:	3720      	adds	r7, #32
 802e5a0:	46bd      	mov	sp, r7
 802e5a2:	bd80      	pop	{r7, pc}
 802e5a4:	2001b60c 	.word	0x2001b60c
 802e5a8:	2001b5dc 	.word	0x2001b5dc

0802e5ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 802e5ac:	b480      	push	{r7}
 802e5ae:	b083      	sub	sp, #12
 802e5b0:	af00      	add	r7, sp, #0
 802e5b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 802e5b4:	4b04      	ldr	r3, [pc, #16]	; (802e5c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 802e5b6:	691b      	ldr	r3, [r3, #16]
 802e5b8:	687a      	ldr	r2, [r7, #4]
 802e5ba:	1ad3      	subs	r3, r2, r3
}
 802e5bc:	4618      	mov	r0, r3
 802e5be:	370c      	adds	r7, #12
 802e5c0:	46bd      	mov	sp, r7
 802e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e5c6:	4770      	bx	lr
 802e5c8:	2001b5dc 	.word	0x2001b5dc

0802e5cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 802e5cc:	b580      	push	{r7, lr}
 802e5ce:	b08c      	sub	sp, #48	; 0x30
 802e5d0:	af00      	add	r7, sp, #0
 802e5d2:	4603      	mov	r3, r0
 802e5d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 802e5d6:	4b3b      	ldr	r3, [pc, #236]	; (802e6c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e5d8:	681b      	ldr	r3, [r3, #0]
 802e5da:	2b00      	cmp	r3, #0
 802e5dc:	d06d      	beq.n	802e6ba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 802e5de:	4b39      	ldr	r3, [pc, #228]	; (802e6c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 802e5e0:	681b      	ldr	r3, [r3, #0]
 802e5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 802e5e4:	2300      	movs	r3, #0
 802e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
 802e5e8:	e008      	b.n	802e5fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 802e5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e5ec:	691b      	ldr	r3, [r3, #16]
 802e5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 802e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e5f2:	2b00      	cmp	r3, #0
 802e5f4:	d007      	beq.n	802e606 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 802e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e5f8:	3301      	adds	r3, #1
 802e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 802e5fc:	79fb      	ldrb	r3, [r7, #7]
 802e5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802e600:	429a      	cmp	r2, r3
 802e602:	d3f2      	bcc.n	802e5ea <SEGGER_SYSVIEW_SendModule+0x1e>
 802e604:	e000      	b.n	802e608 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 802e606:	bf00      	nop
      }
    }
    if (pModule != 0) {
 802e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e60a:	2b00      	cmp	r3, #0
 802e60c:	d055      	beq.n	802e6ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e60e:	f3ef 8311 	mrs	r3, BASEPRI
 802e612:	f04f 0120 	mov.w	r1, #32
 802e616:	f381 8811 	msr	BASEPRI, r1
 802e61a:	617b      	str	r3, [r7, #20]
 802e61c:	482a      	ldr	r0, [pc, #168]	; (802e6c8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 802e61e:	f7fe ff75 	bl	802d50c <_PreparePacket>
 802e622:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 802e624:	693b      	ldr	r3, [r7, #16]
 802e626:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 802e628:	68fb      	ldr	r3, [r7, #12]
 802e62a:	627b      	str	r3, [r7, #36]	; 0x24
 802e62c:	79fb      	ldrb	r3, [r7, #7]
 802e62e:	623b      	str	r3, [r7, #32]
 802e630:	e00b      	b.n	802e64a <SEGGER_SYSVIEW_SendModule+0x7e>
 802e632:	6a3b      	ldr	r3, [r7, #32]
 802e634:	b2da      	uxtb	r2, r3
 802e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e638:	1c59      	adds	r1, r3, #1
 802e63a:	6279      	str	r1, [r7, #36]	; 0x24
 802e63c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e640:	b2d2      	uxtb	r2, r2
 802e642:	701a      	strb	r2, [r3, #0]
 802e644:	6a3b      	ldr	r3, [r7, #32]
 802e646:	09db      	lsrs	r3, r3, #7
 802e648:	623b      	str	r3, [r7, #32]
 802e64a:	6a3b      	ldr	r3, [r7, #32]
 802e64c:	2b7f      	cmp	r3, #127	; 0x7f
 802e64e:	d8f0      	bhi.n	802e632 <SEGGER_SYSVIEW_SendModule+0x66>
 802e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e652:	1c5a      	adds	r2, r3, #1
 802e654:	627a      	str	r2, [r7, #36]	; 0x24
 802e656:	6a3a      	ldr	r2, [r7, #32]
 802e658:	b2d2      	uxtb	r2, r2
 802e65a:	701a      	strb	r2, [r3, #0]
 802e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e65e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 802e660:	68fb      	ldr	r3, [r7, #12]
 802e662:	61fb      	str	r3, [r7, #28]
 802e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e666:	689b      	ldr	r3, [r3, #8]
 802e668:	61bb      	str	r3, [r7, #24]
 802e66a:	e00b      	b.n	802e684 <SEGGER_SYSVIEW_SendModule+0xb8>
 802e66c:	69bb      	ldr	r3, [r7, #24]
 802e66e:	b2da      	uxtb	r2, r3
 802e670:	69fb      	ldr	r3, [r7, #28]
 802e672:	1c59      	adds	r1, r3, #1
 802e674:	61f9      	str	r1, [r7, #28]
 802e676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e67a:	b2d2      	uxtb	r2, r2
 802e67c:	701a      	strb	r2, [r3, #0]
 802e67e:	69bb      	ldr	r3, [r7, #24]
 802e680:	09db      	lsrs	r3, r3, #7
 802e682:	61bb      	str	r3, [r7, #24]
 802e684:	69bb      	ldr	r3, [r7, #24]
 802e686:	2b7f      	cmp	r3, #127	; 0x7f
 802e688:	d8f0      	bhi.n	802e66c <SEGGER_SYSVIEW_SendModule+0xa0>
 802e68a:	69fb      	ldr	r3, [r7, #28]
 802e68c:	1c5a      	adds	r2, r3, #1
 802e68e:	61fa      	str	r2, [r7, #28]
 802e690:	69ba      	ldr	r2, [r7, #24]
 802e692:	b2d2      	uxtb	r2, r2
 802e694:	701a      	strb	r2, [r3, #0]
 802e696:	69fb      	ldr	r3, [r7, #28]
 802e698:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	2280      	movs	r2, #128	; 0x80
 802e6a0:	4619      	mov	r1, r3
 802e6a2:	68f8      	ldr	r0, [r7, #12]
 802e6a4:	f7fe fee2 	bl	802d46c <_EncodeStr>
 802e6a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 802e6aa:	2216      	movs	r2, #22
 802e6ac:	68f9      	ldr	r1, [r7, #12]
 802e6ae:	6938      	ldr	r0, [r7, #16]
 802e6b0:	f7ff f81c 	bl	802d6ec <_SendPacket>
      RECORD_END();
 802e6b4:	697b      	ldr	r3, [r7, #20]
 802e6b6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 802e6ba:	bf00      	nop
 802e6bc:	3730      	adds	r7, #48	; 0x30
 802e6be:	46bd      	mov	sp, r7
 802e6c0:	bd80      	pop	{r7, pc}
 802e6c2:	bf00      	nop
 802e6c4:	2001b604 	.word	0x2001b604
 802e6c8:	2001b60c 	.word	0x2001b60c

0802e6cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 802e6cc:	b580      	push	{r7, lr}
 802e6ce:	b082      	sub	sp, #8
 802e6d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 802e6d2:	4b0c      	ldr	r3, [pc, #48]	; (802e704 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e6d4:	681b      	ldr	r3, [r3, #0]
 802e6d6:	2b00      	cmp	r3, #0
 802e6d8:	d00f      	beq.n	802e6fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 802e6da:	4b0a      	ldr	r3, [pc, #40]	; (802e704 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 802e6dc:	681b      	ldr	r3, [r3, #0]
 802e6de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 802e6e0:	687b      	ldr	r3, [r7, #4]
 802e6e2:	68db      	ldr	r3, [r3, #12]
 802e6e4:	2b00      	cmp	r3, #0
 802e6e6:	d002      	beq.n	802e6ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 802e6e8:	687b      	ldr	r3, [r7, #4]
 802e6ea:	68db      	ldr	r3, [r3, #12]
 802e6ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	691b      	ldr	r3, [r3, #16]
 802e6f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 802e6f4:	687b      	ldr	r3, [r7, #4]
 802e6f6:	2b00      	cmp	r3, #0
 802e6f8:	d1f2      	bne.n	802e6e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 802e6fa:	bf00      	nop
 802e6fc:	3708      	adds	r7, #8
 802e6fe:	46bd      	mov	sp, r7
 802e700:	bd80      	pop	{r7, pc}
 802e702:	bf00      	nop
 802e704:	2001b604 	.word	0x2001b604

0802e708 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 802e708:	b580      	push	{r7, lr}
 802e70a:	b086      	sub	sp, #24
 802e70c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 802e70e:	f3ef 8311 	mrs	r3, BASEPRI
 802e712:	f04f 0120 	mov.w	r1, #32
 802e716:	f381 8811 	msr	BASEPRI, r1
 802e71a:	60fb      	str	r3, [r7, #12]
 802e71c:	4817      	ldr	r0, [pc, #92]	; (802e77c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 802e71e:	f7fe fef5 	bl	802d50c <_PreparePacket>
 802e722:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 802e724:	68bb      	ldr	r3, [r7, #8]
 802e726:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 802e728:	687b      	ldr	r3, [r7, #4]
 802e72a:	617b      	str	r3, [r7, #20]
 802e72c:	4b14      	ldr	r3, [pc, #80]	; (802e780 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 802e72e:	781b      	ldrb	r3, [r3, #0]
 802e730:	613b      	str	r3, [r7, #16]
 802e732:	e00b      	b.n	802e74c <SEGGER_SYSVIEW_SendNumModules+0x44>
 802e734:	693b      	ldr	r3, [r7, #16]
 802e736:	b2da      	uxtb	r2, r3
 802e738:	697b      	ldr	r3, [r7, #20]
 802e73a:	1c59      	adds	r1, r3, #1
 802e73c:	6179      	str	r1, [r7, #20]
 802e73e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e742:	b2d2      	uxtb	r2, r2
 802e744:	701a      	strb	r2, [r3, #0]
 802e746:	693b      	ldr	r3, [r7, #16]
 802e748:	09db      	lsrs	r3, r3, #7
 802e74a:	613b      	str	r3, [r7, #16]
 802e74c:	693b      	ldr	r3, [r7, #16]
 802e74e:	2b7f      	cmp	r3, #127	; 0x7f
 802e750:	d8f0      	bhi.n	802e734 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 802e752:	697b      	ldr	r3, [r7, #20]
 802e754:	1c5a      	adds	r2, r3, #1
 802e756:	617a      	str	r2, [r7, #20]
 802e758:	693a      	ldr	r2, [r7, #16]
 802e75a:	b2d2      	uxtb	r2, r2
 802e75c:	701a      	strb	r2, [r3, #0]
 802e75e:	697b      	ldr	r3, [r7, #20]
 802e760:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 802e762:	221b      	movs	r2, #27
 802e764:	6879      	ldr	r1, [r7, #4]
 802e766:	68b8      	ldr	r0, [r7, #8]
 802e768:	f7fe ffc0 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e76c:	68fb      	ldr	r3, [r7, #12]
 802e76e:	f383 8811 	msr	BASEPRI, r3
}
 802e772:	bf00      	nop
 802e774:	3718      	adds	r7, #24
 802e776:	46bd      	mov	sp, r7
 802e778:	bd80      	pop	{r7, pc}
 802e77a:	bf00      	nop
 802e77c:	2001b60c 	.word	0x2001b60c
 802e780:	2001b608 	.word	0x2001b608

0802e784 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 802e784:	b40f      	push	{r0, r1, r2, r3}
 802e786:	b580      	push	{r7, lr}
 802e788:	b082      	sub	sp, #8
 802e78a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 802e78c:	f107 0314 	add.w	r3, r7, #20
 802e790:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 802e792:	1d3b      	adds	r3, r7, #4
 802e794:	461a      	mov	r2, r3
 802e796:	2100      	movs	r1, #0
 802e798:	6938      	ldr	r0, [r7, #16]
 802e79a:	f7ff f88d 	bl	802d8b8 <_VPrintHost>
  va_end(ParamList);
#endif
}
 802e79e:	bf00      	nop
 802e7a0:	3708      	adds	r7, #8
 802e7a2:	46bd      	mov	sp, r7
 802e7a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802e7a8:	b004      	add	sp, #16
 802e7aa:	4770      	bx	lr

0802e7ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 802e7ac:	b580      	push	{r7, lr}
 802e7ae:	b08a      	sub	sp, #40	; 0x28
 802e7b0:	af00      	add	r7, sp, #0
 802e7b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e7b4:	f3ef 8311 	mrs	r3, BASEPRI
 802e7b8:	f04f 0120 	mov.w	r1, #32
 802e7bc:	f381 8811 	msr	BASEPRI, r1
 802e7c0:	617b      	str	r3, [r7, #20]
 802e7c2:	4827      	ldr	r0, [pc, #156]	; (802e860 <SEGGER_SYSVIEW_Warn+0xb4>)
 802e7c4:	f7fe fea2 	bl	802d50c <_PreparePacket>
 802e7c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 802e7ca:	2280      	movs	r2, #128	; 0x80
 802e7cc:	6879      	ldr	r1, [r7, #4]
 802e7ce:	6938      	ldr	r0, [r7, #16]
 802e7d0:	f7fe fe4c 	bl	802d46c <_EncodeStr>
 802e7d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 802e7d6:	68fb      	ldr	r3, [r7, #12]
 802e7d8:	627b      	str	r3, [r7, #36]	; 0x24
 802e7da:	2301      	movs	r3, #1
 802e7dc:	623b      	str	r3, [r7, #32]
 802e7de:	e00b      	b.n	802e7f8 <SEGGER_SYSVIEW_Warn+0x4c>
 802e7e0:	6a3b      	ldr	r3, [r7, #32]
 802e7e2:	b2da      	uxtb	r2, r3
 802e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e7e6:	1c59      	adds	r1, r3, #1
 802e7e8:	6279      	str	r1, [r7, #36]	; 0x24
 802e7ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e7ee:	b2d2      	uxtb	r2, r2
 802e7f0:	701a      	strb	r2, [r3, #0]
 802e7f2:	6a3b      	ldr	r3, [r7, #32]
 802e7f4:	09db      	lsrs	r3, r3, #7
 802e7f6:	623b      	str	r3, [r7, #32]
 802e7f8:	6a3b      	ldr	r3, [r7, #32]
 802e7fa:	2b7f      	cmp	r3, #127	; 0x7f
 802e7fc:	d8f0      	bhi.n	802e7e0 <SEGGER_SYSVIEW_Warn+0x34>
 802e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e800:	1c5a      	adds	r2, r3, #1
 802e802:	627a      	str	r2, [r7, #36]	; 0x24
 802e804:	6a3a      	ldr	r2, [r7, #32]
 802e806:	b2d2      	uxtb	r2, r2
 802e808:	701a      	strb	r2, [r3, #0]
 802e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e80c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 802e80e:	68fb      	ldr	r3, [r7, #12]
 802e810:	61fb      	str	r3, [r7, #28]
 802e812:	2300      	movs	r3, #0
 802e814:	61bb      	str	r3, [r7, #24]
 802e816:	e00b      	b.n	802e830 <SEGGER_SYSVIEW_Warn+0x84>
 802e818:	69bb      	ldr	r3, [r7, #24]
 802e81a:	b2da      	uxtb	r2, r3
 802e81c:	69fb      	ldr	r3, [r7, #28]
 802e81e:	1c59      	adds	r1, r3, #1
 802e820:	61f9      	str	r1, [r7, #28]
 802e822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802e826:	b2d2      	uxtb	r2, r2
 802e828:	701a      	strb	r2, [r3, #0]
 802e82a:	69bb      	ldr	r3, [r7, #24]
 802e82c:	09db      	lsrs	r3, r3, #7
 802e82e:	61bb      	str	r3, [r7, #24]
 802e830:	69bb      	ldr	r3, [r7, #24]
 802e832:	2b7f      	cmp	r3, #127	; 0x7f
 802e834:	d8f0      	bhi.n	802e818 <SEGGER_SYSVIEW_Warn+0x6c>
 802e836:	69fb      	ldr	r3, [r7, #28]
 802e838:	1c5a      	adds	r2, r3, #1
 802e83a:	61fa      	str	r2, [r7, #28]
 802e83c:	69ba      	ldr	r2, [r7, #24]
 802e83e:	b2d2      	uxtb	r2, r2
 802e840:	701a      	strb	r2, [r3, #0]
 802e842:	69fb      	ldr	r3, [r7, #28]
 802e844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 802e846:	221a      	movs	r2, #26
 802e848:	68f9      	ldr	r1, [r7, #12]
 802e84a:	6938      	ldr	r0, [r7, #16]
 802e84c:	f7fe ff4e 	bl	802d6ec <_SendPacket>
  RECORD_END();
 802e850:	697b      	ldr	r3, [r7, #20]
 802e852:	f383 8811 	msr	BASEPRI, r3
}
 802e856:	bf00      	nop
 802e858:	3728      	adds	r7, #40	; 0x28
 802e85a:	46bd      	mov	sp, r7
 802e85c:	bd80      	pop	{r7, pc}
 802e85e:	bf00      	nop
 802e860:	2001b60c 	.word	0x2001b60c

0802e864 <arm_pid_init_f32>:
 802e864:	edd0 6a08 	vldr	s13, [r0, #32]
 802e868:	edd0 7a06 	vldr	s15, [r0, #24]
 802e86c:	ed90 7a07 	vldr	s14, [r0, #28]
 802e870:	edc0 6a02 	vstr	s13, [r0, #8]
 802e874:	ee37 7a87 	vadd.f32	s14, s15, s14
 802e878:	ee36 6aa6 	vadd.f32	s12, s13, s13
 802e87c:	eef1 7a67 	vneg.f32	s15, s15
 802e880:	ee37 7a26 	vadd.f32	s14, s14, s13
 802e884:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802e888:	ed80 7a00 	vstr	s14, [r0]
 802e88c:	edc0 7a01 	vstr	s15, [r0, #4]
 802e890:	b901      	cbnz	r1, 802e894 <arm_pid_init_f32+0x30>
 802e892:	4770      	bx	lr
 802e894:	2300      	movs	r3, #0
 802e896:	60c3      	str	r3, [r0, #12]
 802e898:	6103      	str	r3, [r0, #16]
 802e89a:	6143      	str	r3, [r0, #20]
 802e89c:	4770      	bx	lr
 802e89e:	bf00      	nop

0802e8a0 <__errno>:
 802e8a0:	4b01      	ldr	r3, [pc, #4]	; (802e8a8 <__errno+0x8>)
 802e8a2:	6818      	ldr	r0, [r3, #0]
 802e8a4:	4770      	bx	lr
 802e8a6:	bf00      	nop
 802e8a8:	20001444 	.word	0x20001444

0802e8ac <__libc_init_array>:
 802e8ac:	b570      	push	{r4, r5, r6, lr}
 802e8ae:	4d0d      	ldr	r5, [pc, #52]	; (802e8e4 <__libc_init_array+0x38>)
 802e8b0:	4c0d      	ldr	r4, [pc, #52]	; (802e8e8 <__libc_init_array+0x3c>)
 802e8b2:	1b64      	subs	r4, r4, r5
 802e8b4:	10a4      	asrs	r4, r4, #2
 802e8b6:	2600      	movs	r6, #0
 802e8b8:	42a6      	cmp	r6, r4
 802e8ba:	d109      	bne.n	802e8d0 <__libc_init_array+0x24>
 802e8bc:	4d0b      	ldr	r5, [pc, #44]	; (802e8ec <__libc_init_array+0x40>)
 802e8be:	4c0c      	ldr	r4, [pc, #48]	; (802e8f0 <__libc_init_array+0x44>)
 802e8c0:	f000 fe22 	bl	802f508 <_init>
 802e8c4:	1b64      	subs	r4, r4, r5
 802e8c6:	10a4      	asrs	r4, r4, #2
 802e8c8:	2600      	movs	r6, #0
 802e8ca:	42a6      	cmp	r6, r4
 802e8cc:	d105      	bne.n	802e8da <__libc_init_array+0x2e>
 802e8ce:	bd70      	pop	{r4, r5, r6, pc}
 802e8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 802e8d4:	4798      	blx	r3
 802e8d6:	3601      	adds	r6, #1
 802e8d8:	e7ee      	b.n	802e8b8 <__libc_init_array+0xc>
 802e8da:	f855 3b04 	ldr.w	r3, [r5], #4
 802e8de:	4798      	blx	r3
 802e8e0:	3601      	adds	r6, #1
 802e8e2:	e7f2      	b.n	802e8ca <__libc_init_array+0x1e>
 802e8e4:	0802fd90 	.word	0x0802fd90
 802e8e8:	0802fd90 	.word	0x0802fd90
 802e8ec:	0802fd90 	.word	0x0802fd90
 802e8f0:	0802fd94 	.word	0x0802fd94

0802e8f4 <__retarget_lock_acquire_recursive>:
 802e8f4:	4770      	bx	lr

0802e8f6 <__retarget_lock_release_recursive>:
 802e8f6:	4770      	bx	lr

0802e8f8 <memcmp>:
 802e8f8:	b530      	push	{r4, r5, lr}
 802e8fa:	3901      	subs	r1, #1
 802e8fc:	2400      	movs	r4, #0
 802e8fe:	42a2      	cmp	r2, r4
 802e900:	d101      	bne.n	802e906 <memcmp+0xe>
 802e902:	2000      	movs	r0, #0
 802e904:	e005      	b.n	802e912 <memcmp+0x1a>
 802e906:	5d03      	ldrb	r3, [r0, r4]
 802e908:	3401      	adds	r4, #1
 802e90a:	5d0d      	ldrb	r5, [r1, r4]
 802e90c:	42ab      	cmp	r3, r5
 802e90e:	d0f6      	beq.n	802e8fe <memcmp+0x6>
 802e910:	1b58      	subs	r0, r3, r5
 802e912:	bd30      	pop	{r4, r5, pc}

0802e914 <memcpy>:
 802e914:	440a      	add	r2, r1
 802e916:	4291      	cmp	r1, r2
 802e918:	f100 33ff 	add.w	r3, r0, #4294967295
 802e91c:	d100      	bne.n	802e920 <memcpy+0xc>
 802e91e:	4770      	bx	lr
 802e920:	b510      	push	{r4, lr}
 802e922:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e926:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e92a:	4291      	cmp	r1, r2
 802e92c:	d1f9      	bne.n	802e922 <memcpy+0xe>
 802e92e:	bd10      	pop	{r4, pc}

0802e930 <memset>:
 802e930:	4402      	add	r2, r0
 802e932:	4603      	mov	r3, r0
 802e934:	4293      	cmp	r3, r2
 802e936:	d100      	bne.n	802e93a <memset+0xa>
 802e938:	4770      	bx	lr
 802e93a:	f803 1b01 	strb.w	r1, [r3], #1
 802e93e:	e7f9      	b.n	802e934 <memset+0x4>

0802e940 <cleanup_glue>:
 802e940:	b538      	push	{r3, r4, r5, lr}
 802e942:	460c      	mov	r4, r1
 802e944:	6809      	ldr	r1, [r1, #0]
 802e946:	4605      	mov	r5, r0
 802e948:	b109      	cbz	r1, 802e94e <cleanup_glue+0xe>
 802e94a:	f7ff fff9 	bl	802e940 <cleanup_glue>
 802e94e:	4621      	mov	r1, r4
 802e950:	4628      	mov	r0, r5
 802e952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e956:	f000 b869 	b.w	802ea2c <_free_r>
	...

0802e95c <_reclaim_reent>:
 802e95c:	4b2c      	ldr	r3, [pc, #176]	; (802ea10 <_reclaim_reent+0xb4>)
 802e95e:	681b      	ldr	r3, [r3, #0]
 802e960:	4283      	cmp	r3, r0
 802e962:	b570      	push	{r4, r5, r6, lr}
 802e964:	4604      	mov	r4, r0
 802e966:	d051      	beq.n	802ea0c <_reclaim_reent+0xb0>
 802e968:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e96a:	b143      	cbz	r3, 802e97e <_reclaim_reent+0x22>
 802e96c:	68db      	ldr	r3, [r3, #12]
 802e96e:	2b00      	cmp	r3, #0
 802e970:	d14a      	bne.n	802ea08 <_reclaim_reent+0xac>
 802e972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e974:	6819      	ldr	r1, [r3, #0]
 802e976:	b111      	cbz	r1, 802e97e <_reclaim_reent+0x22>
 802e978:	4620      	mov	r0, r4
 802e97a:	f000 f857 	bl	802ea2c <_free_r>
 802e97e:	6961      	ldr	r1, [r4, #20]
 802e980:	b111      	cbz	r1, 802e988 <_reclaim_reent+0x2c>
 802e982:	4620      	mov	r0, r4
 802e984:	f000 f852 	bl	802ea2c <_free_r>
 802e988:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e98a:	b111      	cbz	r1, 802e992 <_reclaim_reent+0x36>
 802e98c:	4620      	mov	r0, r4
 802e98e:	f000 f84d 	bl	802ea2c <_free_r>
 802e992:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e994:	b111      	cbz	r1, 802e99c <_reclaim_reent+0x40>
 802e996:	4620      	mov	r0, r4
 802e998:	f000 f848 	bl	802ea2c <_free_r>
 802e99c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e99e:	b111      	cbz	r1, 802e9a6 <_reclaim_reent+0x4a>
 802e9a0:	4620      	mov	r0, r4
 802e9a2:	f000 f843 	bl	802ea2c <_free_r>
 802e9a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e9a8:	b111      	cbz	r1, 802e9b0 <_reclaim_reent+0x54>
 802e9aa:	4620      	mov	r0, r4
 802e9ac:	f000 f83e 	bl	802ea2c <_free_r>
 802e9b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e9b2:	b111      	cbz	r1, 802e9ba <_reclaim_reent+0x5e>
 802e9b4:	4620      	mov	r0, r4
 802e9b6:	f000 f839 	bl	802ea2c <_free_r>
 802e9ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e9bc:	b111      	cbz	r1, 802e9c4 <_reclaim_reent+0x68>
 802e9be:	4620      	mov	r0, r4
 802e9c0:	f000 f834 	bl	802ea2c <_free_r>
 802e9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e9c6:	b111      	cbz	r1, 802e9ce <_reclaim_reent+0x72>
 802e9c8:	4620      	mov	r0, r4
 802e9ca:	f000 f82f 	bl	802ea2c <_free_r>
 802e9ce:	69a3      	ldr	r3, [r4, #24]
 802e9d0:	b1e3      	cbz	r3, 802ea0c <_reclaim_reent+0xb0>
 802e9d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e9d4:	4620      	mov	r0, r4
 802e9d6:	4798      	blx	r3
 802e9d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e9da:	b1b9      	cbz	r1, 802ea0c <_reclaim_reent+0xb0>
 802e9dc:	4620      	mov	r0, r4
 802e9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e9e2:	f7ff bfad 	b.w	802e940 <cleanup_glue>
 802e9e6:	5949      	ldr	r1, [r1, r5]
 802e9e8:	b941      	cbnz	r1, 802e9fc <_reclaim_reent+0xa0>
 802e9ea:	3504      	adds	r5, #4
 802e9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e9ee:	2d80      	cmp	r5, #128	; 0x80
 802e9f0:	68d9      	ldr	r1, [r3, #12]
 802e9f2:	d1f8      	bne.n	802e9e6 <_reclaim_reent+0x8a>
 802e9f4:	4620      	mov	r0, r4
 802e9f6:	f000 f819 	bl	802ea2c <_free_r>
 802e9fa:	e7ba      	b.n	802e972 <_reclaim_reent+0x16>
 802e9fc:	680e      	ldr	r6, [r1, #0]
 802e9fe:	4620      	mov	r0, r4
 802ea00:	f000 f814 	bl	802ea2c <_free_r>
 802ea04:	4631      	mov	r1, r6
 802ea06:	e7ef      	b.n	802e9e8 <_reclaim_reent+0x8c>
 802ea08:	2500      	movs	r5, #0
 802ea0a:	e7ef      	b.n	802e9ec <_reclaim_reent+0x90>
 802ea0c:	bd70      	pop	{r4, r5, r6, pc}
 802ea0e:	bf00      	nop
 802ea10:	20001444 	.word	0x20001444

0802ea14 <__malloc_lock>:
 802ea14:	4801      	ldr	r0, [pc, #4]	; (802ea1c <__malloc_lock+0x8>)
 802ea16:	f7ff bf6d 	b.w	802e8f4 <__retarget_lock_acquire_recursive>
 802ea1a:	bf00      	nop
 802ea1c:	2001ee54 	.word	0x2001ee54

0802ea20 <__malloc_unlock>:
 802ea20:	4801      	ldr	r0, [pc, #4]	; (802ea28 <__malloc_unlock+0x8>)
 802ea22:	f7ff bf68 	b.w	802e8f6 <__retarget_lock_release_recursive>
 802ea26:	bf00      	nop
 802ea28:	2001ee54 	.word	0x2001ee54

0802ea2c <_free_r>:
 802ea2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ea2e:	2900      	cmp	r1, #0
 802ea30:	d048      	beq.n	802eac4 <_free_r+0x98>
 802ea32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ea36:	9001      	str	r0, [sp, #4]
 802ea38:	2b00      	cmp	r3, #0
 802ea3a:	f1a1 0404 	sub.w	r4, r1, #4
 802ea3e:	bfb8      	it	lt
 802ea40:	18e4      	addlt	r4, r4, r3
 802ea42:	f7ff ffe7 	bl	802ea14 <__malloc_lock>
 802ea46:	4a20      	ldr	r2, [pc, #128]	; (802eac8 <_free_r+0x9c>)
 802ea48:	9801      	ldr	r0, [sp, #4]
 802ea4a:	6813      	ldr	r3, [r2, #0]
 802ea4c:	4615      	mov	r5, r2
 802ea4e:	b933      	cbnz	r3, 802ea5e <_free_r+0x32>
 802ea50:	6063      	str	r3, [r4, #4]
 802ea52:	6014      	str	r4, [r2, #0]
 802ea54:	b003      	add	sp, #12
 802ea56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ea5a:	f7ff bfe1 	b.w	802ea20 <__malloc_unlock>
 802ea5e:	42a3      	cmp	r3, r4
 802ea60:	d90b      	bls.n	802ea7a <_free_r+0x4e>
 802ea62:	6821      	ldr	r1, [r4, #0]
 802ea64:	1862      	adds	r2, r4, r1
 802ea66:	4293      	cmp	r3, r2
 802ea68:	bf04      	itt	eq
 802ea6a:	681a      	ldreq	r2, [r3, #0]
 802ea6c:	685b      	ldreq	r3, [r3, #4]
 802ea6e:	6063      	str	r3, [r4, #4]
 802ea70:	bf04      	itt	eq
 802ea72:	1852      	addeq	r2, r2, r1
 802ea74:	6022      	streq	r2, [r4, #0]
 802ea76:	602c      	str	r4, [r5, #0]
 802ea78:	e7ec      	b.n	802ea54 <_free_r+0x28>
 802ea7a:	461a      	mov	r2, r3
 802ea7c:	685b      	ldr	r3, [r3, #4]
 802ea7e:	b10b      	cbz	r3, 802ea84 <_free_r+0x58>
 802ea80:	42a3      	cmp	r3, r4
 802ea82:	d9fa      	bls.n	802ea7a <_free_r+0x4e>
 802ea84:	6811      	ldr	r1, [r2, #0]
 802ea86:	1855      	adds	r5, r2, r1
 802ea88:	42a5      	cmp	r5, r4
 802ea8a:	d10b      	bne.n	802eaa4 <_free_r+0x78>
 802ea8c:	6824      	ldr	r4, [r4, #0]
 802ea8e:	4421      	add	r1, r4
 802ea90:	1854      	adds	r4, r2, r1
 802ea92:	42a3      	cmp	r3, r4
 802ea94:	6011      	str	r1, [r2, #0]
 802ea96:	d1dd      	bne.n	802ea54 <_free_r+0x28>
 802ea98:	681c      	ldr	r4, [r3, #0]
 802ea9a:	685b      	ldr	r3, [r3, #4]
 802ea9c:	6053      	str	r3, [r2, #4]
 802ea9e:	4421      	add	r1, r4
 802eaa0:	6011      	str	r1, [r2, #0]
 802eaa2:	e7d7      	b.n	802ea54 <_free_r+0x28>
 802eaa4:	d902      	bls.n	802eaac <_free_r+0x80>
 802eaa6:	230c      	movs	r3, #12
 802eaa8:	6003      	str	r3, [r0, #0]
 802eaaa:	e7d3      	b.n	802ea54 <_free_r+0x28>
 802eaac:	6825      	ldr	r5, [r4, #0]
 802eaae:	1961      	adds	r1, r4, r5
 802eab0:	428b      	cmp	r3, r1
 802eab2:	bf04      	itt	eq
 802eab4:	6819      	ldreq	r1, [r3, #0]
 802eab6:	685b      	ldreq	r3, [r3, #4]
 802eab8:	6063      	str	r3, [r4, #4]
 802eaba:	bf04      	itt	eq
 802eabc:	1949      	addeq	r1, r1, r5
 802eabe:	6021      	streq	r1, [r4, #0]
 802eac0:	6054      	str	r4, [r2, #4]
 802eac2:	e7c7      	b.n	802ea54 <_free_r+0x28>
 802eac4:	b003      	add	sp, #12
 802eac6:	bd30      	pop	{r4, r5, pc}
 802eac8:	2001b6f0 	.word	0x2001b6f0

0802eacc <fmax>:
 802eacc:	b508      	push	{r3, lr}
 802eace:	ed2d 8b04 	vpush	{d8-d9}
 802ead2:	eeb0 8a40 	vmov.f32	s16, s0
 802ead6:	eef0 8a60 	vmov.f32	s17, s1
 802eada:	eeb0 9a41 	vmov.f32	s18, s2
 802eade:	eef0 9a61 	vmov.f32	s19, s3
 802eae2:	f000 f81b 	bl	802eb1c <__fpclassifyd>
 802eae6:	b168      	cbz	r0, 802eb04 <fmax+0x38>
 802eae8:	eeb0 0a49 	vmov.f32	s0, s18
 802eaec:	eef0 0a69 	vmov.f32	s1, s19
 802eaf0:	f000 f814 	bl	802eb1c <__fpclassifyd>
 802eaf4:	b150      	cbz	r0, 802eb0c <fmax+0x40>
 802eaf6:	ec53 2b19 	vmov	r2, r3, d9
 802eafa:	ec51 0b18 	vmov	r0, r1, d8
 802eafe:	f7d1 fffd 	bl	8000afc <__aeabi_dcmpgt>
 802eb02:	b918      	cbnz	r0, 802eb0c <fmax+0x40>
 802eb04:	eeb0 8a49 	vmov.f32	s16, s18
 802eb08:	eef0 8a69 	vmov.f32	s17, s19
 802eb0c:	eeb0 0a48 	vmov.f32	s0, s16
 802eb10:	eef0 0a68 	vmov.f32	s1, s17
 802eb14:	ecbd 8b04 	vpop	{d8-d9}
 802eb18:	bd08      	pop	{r3, pc}
	...

0802eb1c <__fpclassifyd>:
 802eb1c:	ec51 0b10 	vmov	r0, r1, d0
 802eb20:	b510      	push	{r4, lr}
 802eb22:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802eb26:	460b      	mov	r3, r1
 802eb28:	d019      	beq.n	802eb5e <__fpclassifyd+0x42>
 802eb2a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802eb2e:	490e      	ldr	r1, [pc, #56]	; (802eb68 <__fpclassifyd+0x4c>)
 802eb30:	428a      	cmp	r2, r1
 802eb32:	d90e      	bls.n	802eb52 <__fpclassifyd+0x36>
 802eb34:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802eb38:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802eb3c:	428a      	cmp	r2, r1
 802eb3e:	d908      	bls.n	802eb52 <__fpclassifyd+0x36>
 802eb40:	4a0a      	ldr	r2, [pc, #40]	; (802eb6c <__fpclassifyd+0x50>)
 802eb42:	4213      	tst	r3, r2
 802eb44:	d007      	beq.n	802eb56 <__fpclassifyd+0x3a>
 802eb46:	4294      	cmp	r4, r2
 802eb48:	d107      	bne.n	802eb5a <__fpclassifyd+0x3e>
 802eb4a:	fab0 f080 	clz	r0, r0
 802eb4e:	0940      	lsrs	r0, r0, #5
 802eb50:	bd10      	pop	{r4, pc}
 802eb52:	2004      	movs	r0, #4
 802eb54:	e7fc      	b.n	802eb50 <__fpclassifyd+0x34>
 802eb56:	2003      	movs	r0, #3
 802eb58:	e7fa      	b.n	802eb50 <__fpclassifyd+0x34>
 802eb5a:	2000      	movs	r0, #0
 802eb5c:	e7f8      	b.n	802eb50 <__fpclassifyd+0x34>
 802eb5e:	2800      	cmp	r0, #0
 802eb60:	d1ee      	bne.n	802eb40 <__fpclassifyd+0x24>
 802eb62:	2002      	movs	r0, #2
 802eb64:	e7f4      	b.n	802eb50 <__fpclassifyd+0x34>
 802eb66:	bf00      	nop
 802eb68:	7fdfffff 	.word	0x7fdfffff
 802eb6c:	7ff00000 	.word	0x7ff00000

0802eb70 <exp>:
 802eb70:	b538      	push	{r3, r4, r5, lr}
 802eb72:	ed2d 8b02 	vpush	{d8}
 802eb76:	ec55 4b10 	vmov	r4, r5, d0
 802eb7a:	f000 f8c5 	bl	802ed08 <__ieee754_exp>
 802eb7e:	4b22      	ldr	r3, [pc, #136]	; (802ec08 <exp+0x98>)
 802eb80:	eeb0 8a40 	vmov.f32	s16, s0
 802eb84:	eef0 8a60 	vmov.f32	s17, s1
 802eb88:	f993 3000 	ldrsb.w	r3, [r3]
 802eb8c:	3301      	adds	r3, #1
 802eb8e:	d012      	beq.n	802ebb6 <exp+0x46>
 802eb90:	ec45 4b10 	vmov	d0, r4, r5
 802eb94:	f000 fca2 	bl	802f4dc <finite>
 802eb98:	b168      	cbz	r0, 802ebb6 <exp+0x46>
 802eb9a:	a313      	add	r3, pc, #76	; (adr r3, 802ebe8 <exp+0x78>)
 802eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eba0:	4620      	mov	r0, r4
 802eba2:	4629      	mov	r1, r5
 802eba4:	f7d1 ffaa 	bl	8000afc <__aeabi_dcmpgt>
 802eba8:	b160      	cbz	r0, 802ebc4 <exp+0x54>
 802ebaa:	f7ff fe79 	bl	802e8a0 <__errno>
 802ebae:	ed9f 8b10 	vldr	d8, [pc, #64]	; 802ebf0 <exp+0x80>
 802ebb2:	2322      	movs	r3, #34	; 0x22
 802ebb4:	6003      	str	r3, [r0, #0]
 802ebb6:	eeb0 0a48 	vmov.f32	s0, s16
 802ebba:	eef0 0a68 	vmov.f32	s1, s17
 802ebbe:	ecbd 8b02 	vpop	{d8}
 802ebc2:	bd38      	pop	{r3, r4, r5, pc}
 802ebc4:	a30c      	add	r3, pc, #48	; (adr r3, 802ebf8 <exp+0x88>)
 802ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebca:	4620      	mov	r0, r4
 802ebcc:	4629      	mov	r1, r5
 802ebce:	f7d1 ff77 	bl	8000ac0 <__aeabi_dcmplt>
 802ebd2:	2800      	cmp	r0, #0
 802ebd4:	d0ef      	beq.n	802ebb6 <exp+0x46>
 802ebd6:	f7ff fe63 	bl	802e8a0 <__errno>
 802ebda:	2322      	movs	r3, #34	; 0x22
 802ebdc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 802ec00 <exp+0x90>
 802ebe0:	6003      	str	r3, [r0, #0]
 802ebe2:	e7e8      	b.n	802ebb6 <exp+0x46>
 802ebe4:	f3af 8000 	nop.w
 802ebe8:	fefa39ef 	.word	0xfefa39ef
 802ebec:	40862e42 	.word	0x40862e42
 802ebf0:	00000000 	.word	0x00000000
 802ebf4:	7ff00000 	.word	0x7ff00000
 802ebf8:	d52d3051 	.word	0xd52d3051
 802ebfc:	c0874910 	.word	0xc0874910
	...
 802ec08:	200014a8 	.word	0x200014a8
 802ec0c:	00000000 	.word	0x00000000

0802ec10 <log>:
 802ec10:	b538      	push	{r3, r4, r5, lr}
 802ec12:	ed2d 8b02 	vpush	{d8}
 802ec16:	ec55 4b10 	vmov	r4, r5, d0
 802ec1a:	f000 f9f1 	bl	802f000 <__ieee754_log>
 802ec1e:	4b1e      	ldr	r3, [pc, #120]	; (802ec98 <log+0x88>)
 802ec20:	eeb0 8a40 	vmov.f32	s16, s0
 802ec24:	eef0 8a60 	vmov.f32	s17, s1
 802ec28:	f993 3000 	ldrsb.w	r3, [r3]
 802ec2c:	3301      	adds	r3, #1
 802ec2e:	d01a      	beq.n	802ec66 <log+0x56>
 802ec30:	4622      	mov	r2, r4
 802ec32:	462b      	mov	r3, r5
 802ec34:	4620      	mov	r0, r4
 802ec36:	4629      	mov	r1, r5
 802ec38:	f7d1 ff6a 	bl	8000b10 <__aeabi_dcmpun>
 802ec3c:	b998      	cbnz	r0, 802ec66 <log+0x56>
 802ec3e:	2200      	movs	r2, #0
 802ec40:	2300      	movs	r3, #0
 802ec42:	4620      	mov	r0, r4
 802ec44:	4629      	mov	r1, r5
 802ec46:	f7d1 ff59 	bl	8000afc <__aeabi_dcmpgt>
 802ec4a:	b960      	cbnz	r0, 802ec66 <log+0x56>
 802ec4c:	2200      	movs	r2, #0
 802ec4e:	2300      	movs	r3, #0
 802ec50:	4620      	mov	r0, r4
 802ec52:	4629      	mov	r1, r5
 802ec54:	f7d1 ff2a 	bl	8000aac <__aeabi_dcmpeq>
 802ec58:	b160      	cbz	r0, 802ec74 <log+0x64>
 802ec5a:	f7ff fe21 	bl	802e8a0 <__errno>
 802ec5e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 802ec90 <log+0x80>
 802ec62:	2322      	movs	r3, #34	; 0x22
 802ec64:	6003      	str	r3, [r0, #0]
 802ec66:	eeb0 0a48 	vmov.f32	s0, s16
 802ec6a:	eef0 0a68 	vmov.f32	s1, s17
 802ec6e:	ecbd 8b02 	vpop	{d8}
 802ec72:	bd38      	pop	{r3, r4, r5, pc}
 802ec74:	f7ff fe14 	bl	802e8a0 <__errno>
 802ec78:	ecbd 8b02 	vpop	{d8}
 802ec7c:	2321      	movs	r3, #33	; 0x21
 802ec7e:	6003      	str	r3, [r0, #0]
 802ec80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ec84:	4805      	ldr	r0, [pc, #20]	; (802ec9c <log+0x8c>)
 802ec86:	f000 bc37 	b.w	802f4f8 <nan>
 802ec8a:	bf00      	nop
 802ec8c:	f3af 8000 	nop.w
 802ec90:	00000000 	.word	0x00000000
 802ec94:	fff00000 	.word	0xfff00000
 802ec98:	200014a8 	.word	0x200014a8
 802ec9c:	0802fd54 	.word	0x0802fd54

0802eca0 <sqrt>:
 802eca0:	b538      	push	{r3, r4, r5, lr}
 802eca2:	ed2d 8b02 	vpush	{d8}
 802eca6:	ec55 4b10 	vmov	r4, r5, d0
 802ecaa:	f000 fb63 	bl	802f374 <__ieee754_sqrt>
 802ecae:	4b15      	ldr	r3, [pc, #84]	; (802ed04 <sqrt+0x64>)
 802ecb0:	eeb0 8a40 	vmov.f32	s16, s0
 802ecb4:	eef0 8a60 	vmov.f32	s17, s1
 802ecb8:	f993 3000 	ldrsb.w	r3, [r3]
 802ecbc:	3301      	adds	r3, #1
 802ecbe:	d019      	beq.n	802ecf4 <sqrt+0x54>
 802ecc0:	4622      	mov	r2, r4
 802ecc2:	462b      	mov	r3, r5
 802ecc4:	4620      	mov	r0, r4
 802ecc6:	4629      	mov	r1, r5
 802ecc8:	f7d1 ff22 	bl	8000b10 <__aeabi_dcmpun>
 802eccc:	b990      	cbnz	r0, 802ecf4 <sqrt+0x54>
 802ecce:	2200      	movs	r2, #0
 802ecd0:	2300      	movs	r3, #0
 802ecd2:	4620      	mov	r0, r4
 802ecd4:	4629      	mov	r1, r5
 802ecd6:	f7d1 fef3 	bl	8000ac0 <__aeabi_dcmplt>
 802ecda:	b158      	cbz	r0, 802ecf4 <sqrt+0x54>
 802ecdc:	f7ff fde0 	bl	802e8a0 <__errno>
 802ece0:	2321      	movs	r3, #33	; 0x21
 802ece2:	6003      	str	r3, [r0, #0]
 802ece4:	2200      	movs	r2, #0
 802ece6:	2300      	movs	r3, #0
 802ece8:	4610      	mov	r0, r2
 802ecea:	4619      	mov	r1, r3
 802ecec:	f7d1 fda0 	bl	8000830 <__aeabi_ddiv>
 802ecf0:	ec41 0b18 	vmov	d8, r0, r1
 802ecf4:	eeb0 0a48 	vmov.f32	s0, s16
 802ecf8:	eef0 0a68 	vmov.f32	s1, s17
 802ecfc:	ecbd 8b02 	vpop	{d8}
 802ed00:	bd38      	pop	{r3, r4, r5, pc}
 802ed02:	bf00      	nop
 802ed04:	200014a8 	.word	0x200014a8

0802ed08 <__ieee754_exp>:
 802ed08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ed0c:	ec55 4b10 	vmov	r4, r5, d0
 802ed10:	49b1      	ldr	r1, [pc, #708]	; (802efd8 <__ieee754_exp+0x2d0>)
 802ed12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802ed16:	428b      	cmp	r3, r1
 802ed18:	ed2d 8b04 	vpush	{d8-d9}
 802ed1c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 802ed20:	d937      	bls.n	802ed92 <__ieee754_exp+0x8a>
 802ed22:	49ae      	ldr	r1, [pc, #696]	; (802efdc <__ieee754_exp+0x2d4>)
 802ed24:	428b      	cmp	r3, r1
 802ed26:	d916      	bls.n	802ed56 <__ieee754_exp+0x4e>
 802ed28:	ee10 3a10 	vmov	r3, s0
 802ed2c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 802ed30:	4313      	orrs	r3, r2
 802ed32:	d009      	beq.n	802ed48 <__ieee754_exp+0x40>
 802ed34:	ee10 2a10 	vmov	r2, s0
 802ed38:	462b      	mov	r3, r5
 802ed3a:	4620      	mov	r0, r4
 802ed3c:	4629      	mov	r1, r5
 802ed3e:	f7d1 fa97 	bl	8000270 <__adddf3>
 802ed42:	4604      	mov	r4, r0
 802ed44:	460d      	mov	r5, r1
 802ed46:	e000      	b.n	802ed4a <__ieee754_exp+0x42>
 802ed48:	bb06      	cbnz	r6, 802ed8c <__ieee754_exp+0x84>
 802ed4a:	ecbd 8b04 	vpop	{d8-d9}
 802ed4e:	ec45 4b10 	vmov	d0, r4, r5
 802ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ed56:	a38a      	add	r3, pc, #552	; (adr r3, 802ef80 <__ieee754_exp+0x278>)
 802ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed5c:	ee10 0a10 	vmov	r0, s0
 802ed60:	4629      	mov	r1, r5
 802ed62:	f7d1 fecb 	bl	8000afc <__aeabi_dcmpgt>
 802ed66:	b138      	cbz	r0, 802ed78 <__ieee754_exp+0x70>
 802ed68:	a387      	add	r3, pc, #540	; (adr r3, 802ef88 <__ieee754_exp+0x280>)
 802ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed6e:	4610      	mov	r0, r2
 802ed70:	4619      	mov	r1, r3
 802ed72:	f7d1 fc33 	bl	80005dc <__aeabi_dmul>
 802ed76:	e7e4      	b.n	802ed42 <__ieee754_exp+0x3a>
 802ed78:	a385      	add	r3, pc, #532	; (adr r3, 802ef90 <__ieee754_exp+0x288>)
 802ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed7e:	4620      	mov	r0, r4
 802ed80:	4629      	mov	r1, r5
 802ed82:	f7d1 fe9d 	bl	8000ac0 <__aeabi_dcmplt>
 802ed86:	2800      	cmp	r0, #0
 802ed88:	f000 8087 	beq.w	802ee9a <__ieee754_exp+0x192>
 802ed8c:	2400      	movs	r4, #0
 802ed8e:	2500      	movs	r5, #0
 802ed90:	e7db      	b.n	802ed4a <__ieee754_exp+0x42>
 802ed92:	4a93      	ldr	r2, [pc, #588]	; (802efe0 <__ieee754_exp+0x2d8>)
 802ed94:	4293      	cmp	r3, r2
 802ed96:	f240 80ac 	bls.w	802eef2 <__ieee754_exp+0x1ea>
 802ed9a:	4a92      	ldr	r2, [pc, #584]	; (802efe4 <__ieee754_exp+0x2dc>)
 802ed9c:	4293      	cmp	r3, r2
 802ed9e:	d87c      	bhi.n	802ee9a <__ieee754_exp+0x192>
 802eda0:	4b91      	ldr	r3, [pc, #580]	; (802efe8 <__ieee754_exp+0x2e0>)
 802eda2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edaa:	ee10 0a10 	vmov	r0, s0
 802edae:	4629      	mov	r1, r5
 802edb0:	f7d1 fa5c 	bl	800026c <__aeabi_dsub>
 802edb4:	4b8d      	ldr	r3, [pc, #564]	; (802efec <__ieee754_exp+0x2e4>)
 802edb6:	00f7      	lsls	r7, r6, #3
 802edb8:	443b      	add	r3, r7
 802edba:	ed93 7b00 	vldr	d7, [r3]
 802edbe:	f1c6 0a01 	rsb	sl, r6, #1
 802edc2:	4680      	mov	r8, r0
 802edc4:	4689      	mov	r9, r1
 802edc6:	ebaa 0a06 	sub.w	sl, sl, r6
 802edca:	eeb0 8a47 	vmov.f32	s16, s14
 802edce:	eef0 8a67 	vmov.f32	s17, s15
 802edd2:	ec53 2b18 	vmov	r2, r3, d8
 802edd6:	4640      	mov	r0, r8
 802edd8:	4649      	mov	r1, r9
 802edda:	f7d1 fa47 	bl	800026c <__aeabi_dsub>
 802edde:	4604      	mov	r4, r0
 802ede0:	460d      	mov	r5, r1
 802ede2:	4622      	mov	r2, r4
 802ede4:	462b      	mov	r3, r5
 802ede6:	4620      	mov	r0, r4
 802ede8:	4629      	mov	r1, r5
 802edea:	f7d1 fbf7 	bl	80005dc <__aeabi_dmul>
 802edee:	a36a      	add	r3, pc, #424	; (adr r3, 802ef98 <__ieee754_exp+0x290>)
 802edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edf4:	4606      	mov	r6, r0
 802edf6:	460f      	mov	r7, r1
 802edf8:	f7d1 fbf0 	bl	80005dc <__aeabi_dmul>
 802edfc:	a368      	add	r3, pc, #416	; (adr r3, 802efa0 <__ieee754_exp+0x298>)
 802edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee02:	f7d1 fa33 	bl	800026c <__aeabi_dsub>
 802ee06:	4632      	mov	r2, r6
 802ee08:	463b      	mov	r3, r7
 802ee0a:	f7d1 fbe7 	bl	80005dc <__aeabi_dmul>
 802ee0e:	a366      	add	r3, pc, #408	; (adr r3, 802efa8 <__ieee754_exp+0x2a0>)
 802ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee14:	f7d1 fa2c 	bl	8000270 <__adddf3>
 802ee18:	4632      	mov	r2, r6
 802ee1a:	463b      	mov	r3, r7
 802ee1c:	f7d1 fbde 	bl	80005dc <__aeabi_dmul>
 802ee20:	a363      	add	r3, pc, #396	; (adr r3, 802efb0 <__ieee754_exp+0x2a8>)
 802ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee26:	f7d1 fa21 	bl	800026c <__aeabi_dsub>
 802ee2a:	4632      	mov	r2, r6
 802ee2c:	463b      	mov	r3, r7
 802ee2e:	f7d1 fbd5 	bl	80005dc <__aeabi_dmul>
 802ee32:	a361      	add	r3, pc, #388	; (adr r3, 802efb8 <__ieee754_exp+0x2b0>)
 802ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee38:	f7d1 fa1a 	bl	8000270 <__adddf3>
 802ee3c:	4632      	mov	r2, r6
 802ee3e:	463b      	mov	r3, r7
 802ee40:	f7d1 fbcc 	bl	80005dc <__aeabi_dmul>
 802ee44:	4602      	mov	r2, r0
 802ee46:	460b      	mov	r3, r1
 802ee48:	4620      	mov	r0, r4
 802ee4a:	4629      	mov	r1, r5
 802ee4c:	f7d1 fa0e 	bl	800026c <__aeabi_dsub>
 802ee50:	4602      	mov	r2, r0
 802ee52:	460b      	mov	r3, r1
 802ee54:	4606      	mov	r6, r0
 802ee56:	460f      	mov	r7, r1
 802ee58:	4620      	mov	r0, r4
 802ee5a:	4629      	mov	r1, r5
 802ee5c:	f7d1 fbbe 	bl	80005dc <__aeabi_dmul>
 802ee60:	ec41 0b19 	vmov	d9, r0, r1
 802ee64:	f1ba 0f00 	cmp.w	sl, #0
 802ee68:	d15d      	bne.n	802ef26 <__ieee754_exp+0x21e>
 802ee6a:	2200      	movs	r2, #0
 802ee6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ee70:	4630      	mov	r0, r6
 802ee72:	4639      	mov	r1, r7
 802ee74:	f7d1 f9fa 	bl	800026c <__aeabi_dsub>
 802ee78:	4602      	mov	r2, r0
 802ee7a:	460b      	mov	r3, r1
 802ee7c:	ec51 0b19 	vmov	r0, r1, d9
 802ee80:	f7d1 fcd6 	bl	8000830 <__aeabi_ddiv>
 802ee84:	4622      	mov	r2, r4
 802ee86:	462b      	mov	r3, r5
 802ee88:	f7d1 f9f0 	bl	800026c <__aeabi_dsub>
 802ee8c:	4602      	mov	r2, r0
 802ee8e:	460b      	mov	r3, r1
 802ee90:	2000      	movs	r0, #0
 802ee92:	4957      	ldr	r1, [pc, #348]	; (802eff0 <__ieee754_exp+0x2e8>)
 802ee94:	f7d1 f9ea 	bl	800026c <__aeabi_dsub>
 802ee98:	e753      	b.n	802ed42 <__ieee754_exp+0x3a>
 802ee9a:	4856      	ldr	r0, [pc, #344]	; (802eff4 <__ieee754_exp+0x2ec>)
 802ee9c:	a348      	add	r3, pc, #288	; (adr r3, 802efc0 <__ieee754_exp+0x2b8>)
 802ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eea2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 802eea6:	4629      	mov	r1, r5
 802eea8:	4620      	mov	r0, r4
 802eeaa:	f7d1 fb97 	bl	80005dc <__aeabi_dmul>
 802eeae:	e9d6 2300 	ldrd	r2, r3, [r6]
 802eeb2:	f7d1 f9dd 	bl	8000270 <__adddf3>
 802eeb6:	f7d1 fe41 	bl	8000b3c <__aeabi_d2iz>
 802eeba:	4682      	mov	sl, r0
 802eebc:	f7d1 fb24 	bl	8000508 <__aeabi_i2d>
 802eec0:	a341      	add	r3, pc, #260	; (adr r3, 802efc8 <__ieee754_exp+0x2c0>)
 802eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eec6:	4606      	mov	r6, r0
 802eec8:	460f      	mov	r7, r1
 802eeca:	f7d1 fb87 	bl	80005dc <__aeabi_dmul>
 802eece:	4602      	mov	r2, r0
 802eed0:	460b      	mov	r3, r1
 802eed2:	4620      	mov	r0, r4
 802eed4:	4629      	mov	r1, r5
 802eed6:	f7d1 f9c9 	bl	800026c <__aeabi_dsub>
 802eeda:	a33d      	add	r3, pc, #244	; (adr r3, 802efd0 <__ieee754_exp+0x2c8>)
 802eedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eee0:	4680      	mov	r8, r0
 802eee2:	4689      	mov	r9, r1
 802eee4:	4630      	mov	r0, r6
 802eee6:	4639      	mov	r1, r7
 802eee8:	f7d1 fb78 	bl	80005dc <__aeabi_dmul>
 802eeec:	ec41 0b18 	vmov	d8, r0, r1
 802eef0:	e76f      	b.n	802edd2 <__ieee754_exp+0xca>
 802eef2:	4a41      	ldr	r2, [pc, #260]	; (802eff8 <__ieee754_exp+0x2f0>)
 802eef4:	4293      	cmp	r3, r2
 802eef6:	d811      	bhi.n	802ef1c <__ieee754_exp+0x214>
 802eef8:	a323      	add	r3, pc, #140	; (adr r3, 802ef88 <__ieee754_exp+0x280>)
 802eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eefe:	ee10 0a10 	vmov	r0, s0
 802ef02:	4629      	mov	r1, r5
 802ef04:	f7d1 f9b4 	bl	8000270 <__adddf3>
 802ef08:	4b39      	ldr	r3, [pc, #228]	; (802eff0 <__ieee754_exp+0x2e8>)
 802ef0a:	2200      	movs	r2, #0
 802ef0c:	f7d1 fdf6 	bl	8000afc <__aeabi_dcmpgt>
 802ef10:	b138      	cbz	r0, 802ef22 <__ieee754_exp+0x21a>
 802ef12:	4b37      	ldr	r3, [pc, #220]	; (802eff0 <__ieee754_exp+0x2e8>)
 802ef14:	2200      	movs	r2, #0
 802ef16:	4620      	mov	r0, r4
 802ef18:	4629      	mov	r1, r5
 802ef1a:	e710      	b.n	802ed3e <__ieee754_exp+0x36>
 802ef1c:	f04f 0a00 	mov.w	sl, #0
 802ef20:	e75f      	b.n	802ede2 <__ieee754_exp+0xda>
 802ef22:	4682      	mov	sl, r0
 802ef24:	e75d      	b.n	802ede2 <__ieee754_exp+0xda>
 802ef26:	4632      	mov	r2, r6
 802ef28:	463b      	mov	r3, r7
 802ef2a:	2000      	movs	r0, #0
 802ef2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802ef30:	f7d1 f99c 	bl	800026c <__aeabi_dsub>
 802ef34:	4602      	mov	r2, r0
 802ef36:	460b      	mov	r3, r1
 802ef38:	ec51 0b19 	vmov	r0, r1, d9
 802ef3c:	f7d1 fc78 	bl	8000830 <__aeabi_ddiv>
 802ef40:	4602      	mov	r2, r0
 802ef42:	460b      	mov	r3, r1
 802ef44:	ec51 0b18 	vmov	r0, r1, d8
 802ef48:	f7d1 f990 	bl	800026c <__aeabi_dsub>
 802ef4c:	4642      	mov	r2, r8
 802ef4e:	464b      	mov	r3, r9
 802ef50:	f7d1 f98c 	bl	800026c <__aeabi_dsub>
 802ef54:	4602      	mov	r2, r0
 802ef56:	460b      	mov	r3, r1
 802ef58:	2000      	movs	r0, #0
 802ef5a:	4925      	ldr	r1, [pc, #148]	; (802eff0 <__ieee754_exp+0x2e8>)
 802ef5c:	f7d1 f986 	bl	800026c <__aeabi_dsub>
 802ef60:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 802ef64:	4592      	cmp	sl, r2
 802ef66:	db02      	blt.n	802ef6e <__ieee754_exp+0x266>
 802ef68:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802ef6c:	e6e9      	b.n	802ed42 <__ieee754_exp+0x3a>
 802ef6e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802ef72:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 802ef76:	2200      	movs	r2, #0
 802ef78:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 802ef7c:	e6f9      	b.n	802ed72 <__ieee754_exp+0x6a>
 802ef7e:	bf00      	nop
 802ef80:	fefa39ef 	.word	0xfefa39ef
 802ef84:	40862e42 	.word	0x40862e42
 802ef88:	8800759c 	.word	0x8800759c
 802ef8c:	7e37e43c 	.word	0x7e37e43c
 802ef90:	d52d3051 	.word	0xd52d3051
 802ef94:	c0874910 	.word	0xc0874910
 802ef98:	72bea4d0 	.word	0x72bea4d0
 802ef9c:	3e663769 	.word	0x3e663769
 802efa0:	c5d26bf1 	.word	0xc5d26bf1
 802efa4:	3ebbbd41 	.word	0x3ebbbd41
 802efa8:	af25de2c 	.word	0xaf25de2c
 802efac:	3f11566a 	.word	0x3f11566a
 802efb0:	16bebd93 	.word	0x16bebd93
 802efb4:	3f66c16c 	.word	0x3f66c16c
 802efb8:	5555553e 	.word	0x5555553e
 802efbc:	3fc55555 	.word	0x3fc55555
 802efc0:	652b82fe 	.word	0x652b82fe
 802efc4:	3ff71547 	.word	0x3ff71547
 802efc8:	fee00000 	.word	0xfee00000
 802efcc:	3fe62e42 	.word	0x3fe62e42
 802efd0:	35793c76 	.word	0x35793c76
 802efd4:	3dea39ef 	.word	0x3dea39ef
 802efd8:	40862e41 	.word	0x40862e41
 802efdc:	7fefffff 	.word	0x7fefffff
 802efe0:	3fd62e42 	.word	0x3fd62e42
 802efe4:	3ff0a2b1 	.word	0x3ff0a2b1
 802efe8:	0802fd68 	.word	0x0802fd68
 802efec:	0802fd78 	.word	0x0802fd78
 802eff0:	3ff00000 	.word	0x3ff00000
 802eff4:	0802fd58 	.word	0x0802fd58
 802eff8:	3e2fffff 	.word	0x3e2fffff
 802effc:	00000000 	.word	0x00000000

0802f000 <__ieee754_log>:
 802f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f004:	ec51 0b10 	vmov	r0, r1, d0
 802f008:	ed2d 8b04 	vpush	{d8-d9}
 802f00c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802f010:	b083      	sub	sp, #12
 802f012:	460d      	mov	r5, r1
 802f014:	da29      	bge.n	802f06a <__ieee754_log+0x6a>
 802f016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802f01a:	4303      	orrs	r3, r0
 802f01c:	ee10 2a10 	vmov	r2, s0
 802f020:	d10c      	bne.n	802f03c <__ieee754_log+0x3c>
 802f022:	49cf      	ldr	r1, [pc, #828]	; (802f360 <__ieee754_log+0x360>)
 802f024:	2200      	movs	r2, #0
 802f026:	2300      	movs	r3, #0
 802f028:	2000      	movs	r0, #0
 802f02a:	f7d1 fc01 	bl	8000830 <__aeabi_ddiv>
 802f02e:	ec41 0b10 	vmov	d0, r0, r1
 802f032:	b003      	add	sp, #12
 802f034:	ecbd 8b04 	vpop	{d8-d9}
 802f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f03c:	2900      	cmp	r1, #0
 802f03e:	da05      	bge.n	802f04c <__ieee754_log+0x4c>
 802f040:	460b      	mov	r3, r1
 802f042:	f7d1 f913 	bl	800026c <__aeabi_dsub>
 802f046:	2200      	movs	r2, #0
 802f048:	2300      	movs	r3, #0
 802f04a:	e7ee      	b.n	802f02a <__ieee754_log+0x2a>
 802f04c:	4bc5      	ldr	r3, [pc, #788]	; (802f364 <__ieee754_log+0x364>)
 802f04e:	2200      	movs	r2, #0
 802f050:	f7d1 fac4 	bl	80005dc <__aeabi_dmul>
 802f054:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802f058:	460d      	mov	r5, r1
 802f05a:	4ac3      	ldr	r2, [pc, #780]	; (802f368 <__ieee754_log+0x368>)
 802f05c:	4295      	cmp	r5, r2
 802f05e:	dd06      	ble.n	802f06e <__ieee754_log+0x6e>
 802f060:	4602      	mov	r2, r0
 802f062:	460b      	mov	r3, r1
 802f064:	f7d1 f904 	bl	8000270 <__adddf3>
 802f068:	e7e1      	b.n	802f02e <__ieee754_log+0x2e>
 802f06a:	2300      	movs	r3, #0
 802f06c:	e7f5      	b.n	802f05a <__ieee754_log+0x5a>
 802f06e:	152c      	asrs	r4, r5, #20
 802f070:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 802f074:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802f078:	441c      	add	r4, r3
 802f07a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 802f07e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 802f082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802f086:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802f08a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 802f08e:	ea42 0105 	orr.w	r1, r2, r5
 802f092:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802f096:	2200      	movs	r2, #0
 802f098:	4bb4      	ldr	r3, [pc, #720]	; (802f36c <__ieee754_log+0x36c>)
 802f09a:	f7d1 f8e7 	bl	800026c <__aeabi_dsub>
 802f09e:	1cab      	adds	r3, r5, #2
 802f0a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802f0a4:	2b02      	cmp	r3, #2
 802f0a6:	4682      	mov	sl, r0
 802f0a8:	468b      	mov	fp, r1
 802f0aa:	f04f 0200 	mov.w	r2, #0
 802f0ae:	dc53      	bgt.n	802f158 <__ieee754_log+0x158>
 802f0b0:	2300      	movs	r3, #0
 802f0b2:	f7d1 fcfb 	bl	8000aac <__aeabi_dcmpeq>
 802f0b6:	b1d0      	cbz	r0, 802f0ee <__ieee754_log+0xee>
 802f0b8:	2c00      	cmp	r4, #0
 802f0ba:	f000 8122 	beq.w	802f302 <__ieee754_log+0x302>
 802f0be:	4620      	mov	r0, r4
 802f0c0:	f7d1 fa22 	bl	8000508 <__aeabi_i2d>
 802f0c4:	a390      	add	r3, pc, #576	; (adr r3, 802f308 <__ieee754_log+0x308>)
 802f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0ca:	4606      	mov	r6, r0
 802f0cc:	460f      	mov	r7, r1
 802f0ce:	f7d1 fa85 	bl	80005dc <__aeabi_dmul>
 802f0d2:	a38f      	add	r3, pc, #572	; (adr r3, 802f310 <__ieee754_log+0x310>)
 802f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0d8:	4604      	mov	r4, r0
 802f0da:	460d      	mov	r5, r1
 802f0dc:	4630      	mov	r0, r6
 802f0de:	4639      	mov	r1, r7
 802f0e0:	f7d1 fa7c 	bl	80005dc <__aeabi_dmul>
 802f0e4:	4602      	mov	r2, r0
 802f0e6:	460b      	mov	r3, r1
 802f0e8:	4620      	mov	r0, r4
 802f0ea:	4629      	mov	r1, r5
 802f0ec:	e7ba      	b.n	802f064 <__ieee754_log+0x64>
 802f0ee:	a38a      	add	r3, pc, #552	; (adr r3, 802f318 <__ieee754_log+0x318>)
 802f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0f4:	4650      	mov	r0, sl
 802f0f6:	4659      	mov	r1, fp
 802f0f8:	f7d1 fa70 	bl	80005dc <__aeabi_dmul>
 802f0fc:	4602      	mov	r2, r0
 802f0fe:	460b      	mov	r3, r1
 802f100:	2000      	movs	r0, #0
 802f102:	499b      	ldr	r1, [pc, #620]	; (802f370 <__ieee754_log+0x370>)
 802f104:	f7d1 f8b2 	bl	800026c <__aeabi_dsub>
 802f108:	4652      	mov	r2, sl
 802f10a:	4606      	mov	r6, r0
 802f10c:	460f      	mov	r7, r1
 802f10e:	465b      	mov	r3, fp
 802f110:	4650      	mov	r0, sl
 802f112:	4659      	mov	r1, fp
 802f114:	f7d1 fa62 	bl	80005dc <__aeabi_dmul>
 802f118:	4602      	mov	r2, r0
 802f11a:	460b      	mov	r3, r1
 802f11c:	4630      	mov	r0, r6
 802f11e:	4639      	mov	r1, r7
 802f120:	f7d1 fa5c 	bl	80005dc <__aeabi_dmul>
 802f124:	4606      	mov	r6, r0
 802f126:	460f      	mov	r7, r1
 802f128:	b914      	cbnz	r4, 802f130 <__ieee754_log+0x130>
 802f12a:	4632      	mov	r2, r6
 802f12c:	463b      	mov	r3, r7
 802f12e:	e0a2      	b.n	802f276 <__ieee754_log+0x276>
 802f130:	4620      	mov	r0, r4
 802f132:	f7d1 f9e9 	bl	8000508 <__aeabi_i2d>
 802f136:	a374      	add	r3, pc, #464	; (adr r3, 802f308 <__ieee754_log+0x308>)
 802f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f13c:	4680      	mov	r8, r0
 802f13e:	4689      	mov	r9, r1
 802f140:	f7d1 fa4c 	bl	80005dc <__aeabi_dmul>
 802f144:	a372      	add	r3, pc, #456	; (adr r3, 802f310 <__ieee754_log+0x310>)
 802f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f14a:	4604      	mov	r4, r0
 802f14c:	460d      	mov	r5, r1
 802f14e:	4640      	mov	r0, r8
 802f150:	4649      	mov	r1, r9
 802f152:	f7d1 fa43 	bl	80005dc <__aeabi_dmul>
 802f156:	e0a7      	b.n	802f2a8 <__ieee754_log+0x2a8>
 802f158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802f15c:	f7d1 f888 	bl	8000270 <__adddf3>
 802f160:	4602      	mov	r2, r0
 802f162:	460b      	mov	r3, r1
 802f164:	4650      	mov	r0, sl
 802f166:	4659      	mov	r1, fp
 802f168:	f7d1 fb62 	bl	8000830 <__aeabi_ddiv>
 802f16c:	ec41 0b18 	vmov	d8, r0, r1
 802f170:	4620      	mov	r0, r4
 802f172:	f7d1 f9c9 	bl	8000508 <__aeabi_i2d>
 802f176:	ec53 2b18 	vmov	r2, r3, d8
 802f17a:	ec41 0b19 	vmov	d9, r0, r1
 802f17e:	ec51 0b18 	vmov	r0, r1, d8
 802f182:	f7d1 fa2b 	bl	80005dc <__aeabi_dmul>
 802f186:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 802f18a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 802f18e:	9301      	str	r3, [sp, #4]
 802f190:	4602      	mov	r2, r0
 802f192:	460b      	mov	r3, r1
 802f194:	4680      	mov	r8, r0
 802f196:	4689      	mov	r9, r1
 802f198:	f7d1 fa20 	bl	80005dc <__aeabi_dmul>
 802f19c:	a360      	add	r3, pc, #384	; (adr r3, 802f320 <__ieee754_log+0x320>)
 802f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1a2:	4606      	mov	r6, r0
 802f1a4:	460f      	mov	r7, r1
 802f1a6:	f7d1 fa19 	bl	80005dc <__aeabi_dmul>
 802f1aa:	a35f      	add	r3, pc, #380	; (adr r3, 802f328 <__ieee754_log+0x328>)
 802f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1b0:	f7d1 f85e 	bl	8000270 <__adddf3>
 802f1b4:	4632      	mov	r2, r6
 802f1b6:	463b      	mov	r3, r7
 802f1b8:	f7d1 fa10 	bl	80005dc <__aeabi_dmul>
 802f1bc:	a35c      	add	r3, pc, #368	; (adr r3, 802f330 <__ieee754_log+0x330>)
 802f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1c2:	f7d1 f855 	bl	8000270 <__adddf3>
 802f1c6:	4632      	mov	r2, r6
 802f1c8:	463b      	mov	r3, r7
 802f1ca:	f7d1 fa07 	bl	80005dc <__aeabi_dmul>
 802f1ce:	a35a      	add	r3, pc, #360	; (adr r3, 802f338 <__ieee754_log+0x338>)
 802f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1d4:	f7d1 f84c 	bl	8000270 <__adddf3>
 802f1d8:	4642      	mov	r2, r8
 802f1da:	464b      	mov	r3, r9
 802f1dc:	f7d1 f9fe 	bl	80005dc <__aeabi_dmul>
 802f1e0:	a357      	add	r3, pc, #348	; (adr r3, 802f340 <__ieee754_log+0x340>)
 802f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1e6:	4680      	mov	r8, r0
 802f1e8:	4689      	mov	r9, r1
 802f1ea:	4630      	mov	r0, r6
 802f1ec:	4639      	mov	r1, r7
 802f1ee:	f7d1 f9f5 	bl	80005dc <__aeabi_dmul>
 802f1f2:	a355      	add	r3, pc, #340	; (adr r3, 802f348 <__ieee754_log+0x348>)
 802f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1f8:	f7d1 f83a 	bl	8000270 <__adddf3>
 802f1fc:	4632      	mov	r2, r6
 802f1fe:	463b      	mov	r3, r7
 802f200:	f7d1 f9ec 	bl	80005dc <__aeabi_dmul>
 802f204:	a352      	add	r3, pc, #328	; (adr r3, 802f350 <__ieee754_log+0x350>)
 802f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f20a:	f7d1 f831 	bl	8000270 <__adddf3>
 802f20e:	4632      	mov	r2, r6
 802f210:	463b      	mov	r3, r7
 802f212:	f7d1 f9e3 	bl	80005dc <__aeabi_dmul>
 802f216:	460b      	mov	r3, r1
 802f218:	4602      	mov	r2, r0
 802f21a:	4649      	mov	r1, r9
 802f21c:	4640      	mov	r0, r8
 802f21e:	f7d1 f827 	bl	8000270 <__adddf3>
 802f222:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802f226:	9b01      	ldr	r3, [sp, #4]
 802f228:	3551      	adds	r5, #81	; 0x51
 802f22a:	431d      	orrs	r5, r3
 802f22c:	2d00      	cmp	r5, #0
 802f22e:	4680      	mov	r8, r0
 802f230:	4689      	mov	r9, r1
 802f232:	dd48      	ble.n	802f2c6 <__ieee754_log+0x2c6>
 802f234:	4b4e      	ldr	r3, [pc, #312]	; (802f370 <__ieee754_log+0x370>)
 802f236:	2200      	movs	r2, #0
 802f238:	4650      	mov	r0, sl
 802f23a:	4659      	mov	r1, fp
 802f23c:	f7d1 f9ce 	bl	80005dc <__aeabi_dmul>
 802f240:	4652      	mov	r2, sl
 802f242:	465b      	mov	r3, fp
 802f244:	f7d1 f9ca 	bl	80005dc <__aeabi_dmul>
 802f248:	4602      	mov	r2, r0
 802f24a:	460b      	mov	r3, r1
 802f24c:	4606      	mov	r6, r0
 802f24e:	460f      	mov	r7, r1
 802f250:	4640      	mov	r0, r8
 802f252:	4649      	mov	r1, r9
 802f254:	f7d1 f80c 	bl	8000270 <__adddf3>
 802f258:	ec53 2b18 	vmov	r2, r3, d8
 802f25c:	f7d1 f9be 	bl	80005dc <__aeabi_dmul>
 802f260:	4680      	mov	r8, r0
 802f262:	4689      	mov	r9, r1
 802f264:	b964      	cbnz	r4, 802f280 <__ieee754_log+0x280>
 802f266:	4602      	mov	r2, r0
 802f268:	460b      	mov	r3, r1
 802f26a:	4630      	mov	r0, r6
 802f26c:	4639      	mov	r1, r7
 802f26e:	f7d0 fffd 	bl	800026c <__aeabi_dsub>
 802f272:	4602      	mov	r2, r0
 802f274:	460b      	mov	r3, r1
 802f276:	4650      	mov	r0, sl
 802f278:	4659      	mov	r1, fp
 802f27a:	f7d0 fff7 	bl	800026c <__aeabi_dsub>
 802f27e:	e6d6      	b.n	802f02e <__ieee754_log+0x2e>
 802f280:	a321      	add	r3, pc, #132	; (adr r3, 802f308 <__ieee754_log+0x308>)
 802f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f286:	ec51 0b19 	vmov	r0, r1, d9
 802f28a:	f7d1 f9a7 	bl	80005dc <__aeabi_dmul>
 802f28e:	a320      	add	r3, pc, #128	; (adr r3, 802f310 <__ieee754_log+0x310>)
 802f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f294:	4604      	mov	r4, r0
 802f296:	460d      	mov	r5, r1
 802f298:	ec51 0b19 	vmov	r0, r1, d9
 802f29c:	f7d1 f99e 	bl	80005dc <__aeabi_dmul>
 802f2a0:	4642      	mov	r2, r8
 802f2a2:	464b      	mov	r3, r9
 802f2a4:	f7d0 ffe4 	bl	8000270 <__adddf3>
 802f2a8:	4602      	mov	r2, r0
 802f2aa:	460b      	mov	r3, r1
 802f2ac:	4630      	mov	r0, r6
 802f2ae:	4639      	mov	r1, r7
 802f2b0:	f7d0 ffdc 	bl	800026c <__aeabi_dsub>
 802f2b4:	4652      	mov	r2, sl
 802f2b6:	465b      	mov	r3, fp
 802f2b8:	f7d0 ffd8 	bl	800026c <__aeabi_dsub>
 802f2bc:	4602      	mov	r2, r0
 802f2be:	460b      	mov	r3, r1
 802f2c0:	4620      	mov	r0, r4
 802f2c2:	4629      	mov	r1, r5
 802f2c4:	e7d9      	b.n	802f27a <__ieee754_log+0x27a>
 802f2c6:	4602      	mov	r2, r0
 802f2c8:	460b      	mov	r3, r1
 802f2ca:	4650      	mov	r0, sl
 802f2cc:	4659      	mov	r1, fp
 802f2ce:	f7d0 ffcd 	bl	800026c <__aeabi_dsub>
 802f2d2:	ec53 2b18 	vmov	r2, r3, d8
 802f2d6:	f7d1 f981 	bl	80005dc <__aeabi_dmul>
 802f2da:	4606      	mov	r6, r0
 802f2dc:	460f      	mov	r7, r1
 802f2de:	2c00      	cmp	r4, #0
 802f2e0:	f43f af23 	beq.w	802f12a <__ieee754_log+0x12a>
 802f2e4:	a308      	add	r3, pc, #32	; (adr r3, 802f308 <__ieee754_log+0x308>)
 802f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2ea:	ec51 0b19 	vmov	r0, r1, d9
 802f2ee:	f7d1 f975 	bl	80005dc <__aeabi_dmul>
 802f2f2:	a307      	add	r3, pc, #28	; (adr r3, 802f310 <__ieee754_log+0x310>)
 802f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2f8:	4604      	mov	r4, r0
 802f2fa:	460d      	mov	r5, r1
 802f2fc:	ec51 0b19 	vmov	r0, r1, d9
 802f300:	e727      	b.n	802f152 <__ieee754_log+0x152>
 802f302:	ed9f 0b15 	vldr	d0, [pc, #84]	; 802f358 <__ieee754_log+0x358>
 802f306:	e694      	b.n	802f032 <__ieee754_log+0x32>
 802f308:	fee00000 	.word	0xfee00000
 802f30c:	3fe62e42 	.word	0x3fe62e42
 802f310:	35793c76 	.word	0x35793c76
 802f314:	3dea39ef 	.word	0x3dea39ef
 802f318:	55555555 	.word	0x55555555
 802f31c:	3fd55555 	.word	0x3fd55555
 802f320:	df3e5244 	.word	0xdf3e5244
 802f324:	3fc2f112 	.word	0x3fc2f112
 802f328:	96cb03de 	.word	0x96cb03de
 802f32c:	3fc74664 	.word	0x3fc74664
 802f330:	94229359 	.word	0x94229359
 802f334:	3fd24924 	.word	0x3fd24924
 802f338:	55555593 	.word	0x55555593
 802f33c:	3fe55555 	.word	0x3fe55555
 802f340:	d078c69f 	.word	0xd078c69f
 802f344:	3fc39a09 	.word	0x3fc39a09
 802f348:	1d8e78af 	.word	0x1d8e78af
 802f34c:	3fcc71c5 	.word	0x3fcc71c5
 802f350:	9997fa04 	.word	0x9997fa04
 802f354:	3fd99999 	.word	0x3fd99999
	...
 802f360:	c3500000 	.word	0xc3500000
 802f364:	43500000 	.word	0x43500000
 802f368:	7fefffff 	.word	0x7fefffff
 802f36c:	3ff00000 	.word	0x3ff00000
 802f370:	3fe00000 	.word	0x3fe00000

0802f374 <__ieee754_sqrt>:
 802f374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f378:	ec55 4b10 	vmov	r4, r5, d0
 802f37c:	4e56      	ldr	r6, [pc, #344]	; (802f4d8 <__ieee754_sqrt+0x164>)
 802f37e:	43ae      	bics	r6, r5
 802f380:	ee10 0a10 	vmov	r0, s0
 802f384:	ee10 3a10 	vmov	r3, s0
 802f388:	4629      	mov	r1, r5
 802f38a:	462a      	mov	r2, r5
 802f38c:	d110      	bne.n	802f3b0 <__ieee754_sqrt+0x3c>
 802f38e:	ee10 2a10 	vmov	r2, s0
 802f392:	462b      	mov	r3, r5
 802f394:	f7d1 f922 	bl	80005dc <__aeabi_dmul>
 802f398:	4602      	mov	r2, r0
 802f39a:	460b      	mov	r3, r1
 802f39c:	4620      	mov	r0, r4
 802f39e:	4629      	mov	r1, r5
 802f3a0:	f7d0 ff66 	bl	8000270 <__adddf3>
 802f3a4:	4604      	mov	r4, r0
 802f3a6:	460d      	mov	r5, r1
 802f3a8:	ec45 4b10 	vmov	d0, r4, r5
 802f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f3b0:	2d00      	cmp	r5, #0
 802f3b2:	dc10      	bgt.n	802f3d6 <__ieee754_sqrt+0x62>
 802f3b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802f3b8:	4330      	orrs	r0, r6
 802f3ba:	d0f5      	beq.n	802f3a8 <__ieee754_sqrt+0x34>
 802f3bc:	b15d      	cbz	r5, 802f3d6 <__ieee754_sqrt+0x62>
 802f3be:	ee10 2a10 	vmov	r2, s0
 802f3c2:	462b      	mov	r3, r5
 802f3c4:	ee10 0a10 	vmov	r0, s0
 802f3c8:	f7d0 ff50 	bl	800026c <__aeabi_dsub>
 802f3cc:	4602      	mov	r2, r0
 802f3ce:	460b      	mov	r3, r1
 802f3d0:	f7d1 fa2e 	bl	8000830 <__aeabi_ddiv>
 802f3d4:	e7e6      	b.n	802f3a4 <__ieee754_sqrt+0x30>
 802f3d6:	1509      	asrs	r1, r1, #20
 802f3d8:	d076      	beq.n	802f4c8 <__ieee754_sqrt+0x154>
 802f3da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802f3de:	07ce      	lsls	r6, r1, #31
 802f3e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802f3e4:	bf5e      	ittt	pl
 802f3e6:	0fda      	lsrpl	r2, r3, #31
 802f3e8:	005b      	lslpl	r3, r3, #1
 802f3ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802f3ee:	0fda      	lsrs	r2, r3, #31
 802f3f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802f3f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802f3f8:	2000      	movs	r0, #0
 802f3fa:	106d      	asrs	r5, r5, #1
 802f3fc:	005b      	lsls	r3, r3, #1
 802f3fe:	f04f 0e16 	mov.w	lr, #22
 802f402:	4684      	mov	ip, r0
 802f404:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802f408:	eb0c 0401 	add.w	r4, ip, r1
 802f40c:	4294      	cmp	r4, r2
 802f40e:	bfde      	ittt	le
 802f410:	1b12      	suble	r2, r2, r4
 802f412:	eb04 0c01 	addle.w	ip, r4, r1
 802f416:	1840      	addle	r0, r0, r1
 802f418:	0052      	lsls	r2, r2, #1
 802f41a:	f1be 0e01 	subs.w	lr, lr, #1
 802f41e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f422:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802f426:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f42a:	d1ed      	bne.n	802f408 <__ieee754_sqrt+0x94>
 802f42c:	4671      	mov	r1, lr
 802f42e:	2720      	movs	r7, #32
 802f430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802f434:	4562      	cmp	r2, ip
 802f436:	eb04 060e 	add.w	r6, r4, lr
 802f43a:	dc02      	bgt.n	802f442 <__ieee754_sqrt+0xce>
 802f43c:	d113      	bne.n	802f466 <__ieee754_sqrt+0xf2>
 802f43e:	429e      	cmp	r6, r3
 802f440:	d811      	bhi.n	802f466 <__ieee754_sqrt+0xf2>
 802f442:	2e00      	cmp	r6, #0
 802f444:	eb06 0e04 	add.w	lr, r6, r4
 802f448:	da43      	bge.n	802f4d2 <__ieee754_sqrt+0x15e>
 802f44a:	f1be 0f00 	cmp.w	lr, #0
 802f44e:	db40      	blt.n	802f4d2 <__ieee754_sqrt+0x15e>
 802f450:	f10c 0801 	add.w	r8, ip, #1
 802f454:	eba2 020c 	sub.w	r2, r2, ip
 802f458:	429e      	cmp	r6, r3
 802f45a:	bf88      	it	hi
 802f45c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802f460:	1b9b      	subs	r3, r3, r6
 802f462:	4421      	add	r1, r4
 802f464:	46c4      	mov	ip, r8
 802f466:	0052      	lsls	r2, r2, #1
 802f468:	3f01      	subs	r7, #1
 802f46a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f46e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802f472:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f476:	d1dd      	bne.n	802f434 <__ieee754_sqrt+0xc0>
 802f478:	4313      	orrs	r3, r2
 802f47a:	d006      	beq.n	802f48a <__ieee754_sqrt+0x116>
 802f47c:	1c4c      	adds	r4, r1, #1
 802f47e:	bf13      	iteet	ne
 802f480:	3101      	addne	r1, #1
 802f482:	3001      	addeq	r0, #1
 802f484:	4639      	moveq	r1, r7
 802f486:	f021 0101 	bicne.w	r1, r1, #1
 802f48a:	1043      	asrs	r3, r0, #1
 802f48c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802f490:	0849      	lsrs	r1, r1, #1
 802f492:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802f496:	07c2      	lsls	r2, r0, #31
 802f498:	bf48      	it	mi
 802f49a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802f49e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802f4a2:	460c      	mov	r4, r1
 802f4a4:	463d      	mov	r5, r7
 802f4a6:	e77f      	b.n	802f3a8 <__ieee754_sqrt+0x34>
 802f4a8:	0ada      	lsrs	r2, r3, #11
 802f4aa:	3815      	subs	r0, #21
 802f4ac:	055b      	lsls	r3, r3, #21
 802f4ae:	2a00      	cmp	r2, #0
 802f4b0:	d0fa      	beq.n	802f4a8 <__ieee754_sqrt+0x134>
 802f4b2:	02d7      	lsls	r7, r2, #11
 802f4b4:	d50a      	bpl.n	802f4cc <__ieee754_sqrt+0x158>
 802f4b6:	f1c1 0420 	rsb	r4, r1, #32
 802f4ba:	fa23 f404 	lsr.w	r4, r3, r4
 802f4be:	1e4d      	subs	r5, r1, #1
 802f4c0:	408b      	lsls	r3, r1
 802f4c2:	4322      	orrs	r2, r4
 802f4c4:	1b41      	subs	r1, r0, r5
 802f4c6:	e788      	b.n	802f3da <__ieee754_sqrt+0x66>
 802f4c8:	4608      	mov	r0, r1
 802f4ca:	e7f0      	b.n	802f4ae <__ieee754_sqrt+0x13a>
 802f4cc:	0052      	lsls	r2, r2, #1
 802f4ce:	3101      	adds	r1, #1
 802f4d0:	e7ef      	b.n	802f4b2 <__ieee754_sqrt+0x13e>
 802f4d2:	46e0      	mov	r8, ip
 802f4d4:	e7be      	b.n	802f454 <__ieee754_sqrt+0xe0>
 802f4d6:	bf00      	nop
 802f4d8:	7ff00000 	.word	0x7ff00000

0802f4dc <finite>:
 802f4dc:	b082      	sub	sp, #8
 802f4de:	ed8d 0b00 	vstr	d0, [sp]
 802f4e2:	9801      	ldr	r0, [sp, #4]
 802f4e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802f4e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802f4ec:	0fc0      	lsrs	r0, r0, #31
 802f4ee:	b002      	add	sp, #8
 802f4f0:	4770      	bx	lr
 802f4f2:	0000      	movs	r0, r0
 802f4f4:	0000      	movs	r0, r0
	...

0802f4f8 <nan>:
 802f4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802f500 <nan+0x8>
 802f4fc:	4770      	bx	lr
 802f4fe:	bf00      	nop
 802f500:	00000000 	.word	0x00000000
 802f504:	7ff80000 	.word	0x7ff80000

0802f508 <_init>:
 802f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f50a:	bf00      	nop
 802f50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f50e:	bc08      	pop	{r3}
 802f510:	469e      	mov	lr, r3
 802f512:	4770      	bx	lr

0802f514 <_fini>:
 802f514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f516:	bf00      	nop
 802f518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f51a:	bc08      	pop	{r3}
 802f51c:	469e      	mov	lr, r3
 802f51e:	4770      	bx	lr
