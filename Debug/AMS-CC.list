
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001860c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080187a0  080187a0  000287a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d70  08018d70  0003135c  2**0
                  CONTENTS
  4 .ARM          00000008  08018d70  08018d70  00028d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d78  08018d78  0003135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018d78  08018d78  00028d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d7c  08018d7c  00028d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000135c  20000000  08018d80  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003135c  2**0
                  CONTENTS
 10 .bss          0001a9bc  20001360  20001360  00031360  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001bd1c  2001bd1c  00031360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003135c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c8f7  00000000  00000000  0003138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008c85  00000000  00000000  0006dc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  00076908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e48  00000000  00000000  00078c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002911c  00000000  00000000  0007aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f93b  00000000  00000000  000a3bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed335  00000000  00000000  000d34f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  001c082c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090b8  00000000  00000000  001c08f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001360 	.word	0x20001360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018784 	.word	0x08018784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001364 	.word	0x20001364
 80001cc:	08018784 	.word	0x08018784

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001bc68 	.word	0x2001bc68

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <inc_res+0x20>
		ptr[0]++;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8000f82:	e002      	b.n	8000f8a <inc_res+0x26>
		ptr[0] = 0;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <COM_voltages_ok_d+0xd4>)
 8000faa:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <COM_voltages_ok_d+0xd8>)
 8000fae:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e052      	b.n	800105c <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fc8:	6938      	ldr	r0, [r7, #16]
 8000fca:	f7ff faaf 	bl	800052c <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fd91 	bl	8000afc <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <COM_voltages_ok_d+0x4e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4922      	ldr	r1, [pc, #136]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8000fec:	440b      	add	r3, r1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f7ff ffb7 	bl	8000f64 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fa95 	bl	800052c <__aeabi_f2d>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd75 	bl	8000afc <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <COM_voltages_ok_d+0x86>
 800101c:	2300      	movs	r3, #0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4915      	ldr	r1, [pc, #84]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001024:	440b      	add	r3, r1
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff ff9b 	bl	8000f64 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	883a      	ldrh	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d201      	bcs.n	8001042 <COM_voltages_ok_d+0xaa>
			return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e010      	b.n	8001064 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d201      	bcs.n	8001056 <COM_voltages_ok_d+0xbe>
			return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e006      	b.n	8001064 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b7d      	cmp	r3, #125	; 0x7d
 8001060:	dda9      	ble.n	8000fb6 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 8001062:	2301      	movs	r3, #1

}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	4086147b 	.word	0x4086147b
 8001070:	4033d70a 	.word	0x4033d70a
 8001074:	2000137c 	.word	0x2000137c
 8001078:	200013fc 	.word	0x200013fc

0800107c <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <COM_temperatures_ok_d+0xd4>)
 800108e:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <COM_temperatures_ok_d+0xd8>)
 8001092:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e052      	b.n	8001140 <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ac:	6938      	ldr	r0, [r7, #16]
 80010ae:	f7ff fa3d 	bl	800052c <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fd1f 	bl	8000afc <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <COM_temperatures_ok_d+0x4e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 80010d0:	440b      	add	r3, r1
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ff45 	bl	8000f64 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa23 	bl	800052c <__aeabi_f2d>
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fd03 	bl	8000afc <__aeabi_dcmpgt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <COM_temperatures_ok_d+0x86>
 8001100:	2300      	movs	r3, #0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001108:	440b      	add	r3, r1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff ff29 	bl	8000f64 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d201      	bcs.n	8001126 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e010      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	883a      	ldrh	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d201      	bcs.n	800113a <COM_temperatures_ok_d+0xbe>
			return 0;
 8001136:	2300      	movs	r3, #0
 8001138:	e006      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	dda9      	ble.n	800109a <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001146:	2301      	movs	r3, #1

}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	42700000 	.word	0x42700000
 8001154:	c1a00000 	.word	0xc1a00000
 8001158:	2000147c 	.word	0x2000147c
 800115c:	200014b8 	.word	0x200014b8

08001160 <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	4613      	mov	r3, r2
 800116e:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <COM_current_ok_d+0xa4>)
 8001172:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <COM_current_ok_d+0xa8>)
 8001176:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff f9d1 	bl	800052c <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <COM_current_ok_d+0x42>
 80011a0:	2300      	movs	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4919      	ldr	r1, [pc, #100]	; (800120c <COM_current_ok_d+0xac>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fedc 	bl	8000f64 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f7ff f9ba 	bl	800052c <__aeabi_f2d>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fc9d 	bl	8000afc <__aeabi_dcmpgt>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <COM_current_ok_d+0x6e>
 80011cc:	2300      	movs	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	490f      	ldr	r1, [pc, #60]	; (8001210 <COM_current_ok_d+0xb0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec6 	bl	8000f64 <inc_res>

	if (over_current > sample_constraint) {
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <COM_current_ok_d+0xac>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d201      	bcs.n	80011e8 <COM_current_ok_d+0x88>
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e008      	b.n	80011fa <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <COM_current_ok_d+0xb0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d201      	bcs.n	80011f8 <COM_current_ok_d+0x98>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <COM_current_ok_d+0x9a>
	}

	return 1;
 80011f8:	2301      	movs	r3, #1

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	42200000 	.word	0x42200000
 8001208:	c2c80000 	.word	0xc2c80000
 800120c:	200014f4 	.word	0x200014f4
 8001210:	200014f5 	.word	0x200014f5

08001214 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <FAN_initialize+0x4c>)
 800121e:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001220:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001264 <FAN_initialize+0x50>
 8001224:	ed97 7a03 	vldr	s14, [r7, #12]
 8001228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0852      	lsrs	r2, r2, #1
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001250:	2108      	movs	r1, #8
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00f fd02 	bl	8010c5c <HAL_TIM_PWM_Start>

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	447a0000 	.word	0x447a0000
 8001264:	477fff00 	.word	0x477fff00

08001268 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001274:	edd7 7a00 	vldr	s15, [r7]
 8001278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d502      	bpl.n	8001288 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001288:	edd7 7a00 	vldr	s15, [r7]
 800128c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012e0 <FAN_duty_cycle+0x78>
 8001290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	dd01      	ble.n	800129e <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <FAN_duty_cycle+0x7c>)
 800129c:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 800129e:	edd7 7a00 	vldr	s15, [r7]
 80012a2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80012e0 <FAN_duty_cycle+0x78>
 80012a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c4:	ee17 2a90 	vmov	r2, s15
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	42c80000 	.word	0x42c80000
 80012e4:	42c80000 	.word	0x42c80000

080012e8 <HAL_TIM_IC_CaptureCallback>:

#include "IMD.h"
#include "programme_data.h"
#include "programme_queues.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	IMD_t IMD;
	float ante = 0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
	float conq = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d13b      	bne.n	8001382 <HAL_TIM_IC_CaptureCallback+0x9a>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800130a:	2104      	movs	r1, #4
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f010 fb3b 	bl	8011988 <HAL_TIM_ReadCapturedValue>
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131a:	edc7 7a07 	vstr	s15, [r7, #28]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f010 fb31 	bl	8011988 <HAL_TIM_ReadCapturedValue>
 8001326:	ee07 0a90 	vmov	s15, r0
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	edc7 7a06 	vstr	s15, [r7, #24]

		IMD.duty_cycle = ante / conq;
 8001332:	edd7 6a07 	vldr	s13, [r7, #28]
 8001336:	ed97 7a06 	vldr	s14, [r7, #24]
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	edc7 7a04 	vstr	s15, [r7, #16]
		IMD.frequency = 100000000 / (conq + 1);
 8001342:	edd7 7a06 	vldr	s15, [r7, #24]
 8001346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800134a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800134e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800138c <HAL_TIM_IC_CaptureCallback+0xa4>
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	edc7 7a05 	vstr	s15, [r7, #20]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f107 020c 	add.w	r2, r7, #12
 8001362:	f107 0110 	add.w	r1, r7, #16
 8001366:	2302      	movs	r3, #2
 8001368:	f011 fdd2 	bl	8012f10 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_TIM_IC_CaptureCallback+0x9a>
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	f3bf 8f6f 	isb	sy
	}
}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	4cbebc20 	.word	0x4cbebc20
 8001390:	20018c40 	.word	0x20018c40
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <initialize_IMD+0x3c>)
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 80013a8:	2100      	movs	r1, #0
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f00f fe54 	bl	8011058 <HAL_TIM_IC_Start_IT>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <initialize_IMD+0x22>
		Error_Handler();
 80013b6:	f001 fdf9 	bl	8002fac <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 80013ba:	2104      	movs	r1, #4
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f00f fd6f 	bl	8010ea0 <HAL_TIM_IC_Start>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <initialize_IMD+0x34>
		Error_Handler();
 80013c8:	f001 fdf0 	bl	8002fac <Error_Handler>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	0280de80 	.word	0x0280de80

080013d8 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f103 0218 	add.w	r2, r3, #24
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	617a      	str	r2, [r7, #20]
 800140c:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	edd3 7a03 	vldr	s15, [r3, #12]
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800142c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	edd3 6a02 	vldr	s13, [r3, #8]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	edd3 7a04 	vldr	s15, [r3, #16]
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144e:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edd3 7a05 	vldr	s15, [r3, #20]
 8001478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d503      	bpl.n	800148a <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a02 	vldr	s15, [r3, #8]
 8001496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d503      	bpl.n	80014a8 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
	}

	return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b088      	sub	sp, #32
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	61f8      	str	r0, [r7, #28]
 80014be:	ed87 0a06 	vstr	s0, [r7, #24]
 80014c2:	edc7 0a05 	vstr	s1, [r7, #20]
 80014c6:	ed87 1a04 	vstr	s2, [r7, #16]
 80014ca:	edc7 1a03 	vstr	s3, [r7, #12]
 80014ce:	ed87 2a02 	vstr	s4, [r7, #8]
 80014d2:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 80014d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014da:	edd7 7a02 	vldr	s15, [r7, #8]
 80014de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d501      	bpl.n	80014ec <PID_initialize+0x36>
		return 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e024      	b.n	8001536 <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3318      	adds	r3, #24
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f015 fa9c 	bl	8016a6c <arm_pid_init_f32>

	return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <_cbSendSystemDesc+0x14>)
 8001546:	f015 f811 	bl	801656c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <_cbSendSystemDesc+0x18>)
 800154c:	f015 f80e 	bl	801656c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	080187a0 	.word	0x080187a0
 8001558:	080187cc 	.word	0x080187cc

0800155c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SEGGER_SYSVIEW_Conf+0x20>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SEGGER_SYSVIEW_Conf+0x20>)
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SEGGER_SYSVIEW_Conf+0x24>)
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <SEGGER_SYSVIEW_Conf+0x28>)
 800156c:	f014 fb7c 	bl	8015c68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001570:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001574:	f014 fbbc 	bl	8015cf0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000004 	.word	0x20000004
 8001580:	08001541 	.word	0x08001541
 8001584:	08018900 	.word	0x08018900

08001588 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b085      	sub	sp, #20
 800158c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	e048      	b.n	8001626 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001594:	4929      	ldr	r1, [pc, #164]	; (800163c <_cbSendTaskList+0xb4>)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f012 fea9 	bl	80142fc <uxTaskGetStackHighWaterMark>
 80015aa:	4601      	mov	r1, r0
 80015ac:	4823      	ldr	r0, [pc, #140]	; (800163c <_cbSendTaskList+0xb4>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4403      	add	r3, r0
 80015ba:	3310      	adds	r3, #16
 80015bc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80015be:	491f      	ldr	r1, [pc, #124]	; (800163c <_cbSendTaskList+0xb4>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	491b      	ldr	r1, [pc, #108]	; (800163c <_cbSendTaskList+0xb4>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3304      	adds	r3, #4
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	4c16      	ldr	r4, [pc, #88]	; (800163c <_cbSendTaskList+0xb4>)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4423      	add	r3, r4
 80015ee:	3308      	adds	r3, #8
 80015f0:	681c      	ldr	r4, [r3, #0]
 80015f2:	4d12      	ldr	r5, [pc, #72]	; (800163c <_cbSendTaskList+0xb4>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	442b      	add	r3, r5
 8001600:	330c      	adds	r3, #12
 8001602:	681d      	ldr	r5, [r3, #0]
 8001604:	4e0d      	ldr	r6, [pc, #52]	; (800163c <_cbSendTaskList+0xb4>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4433      	add	r3, r6
 8001612:	3310      	adds	r3, #16
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	462b      	mov	r3, r5
 800161a:	4622      	mov	r2, r4
 800161c:	f000 f8b6 	bl	800178c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <_cbSendTaskList+0xb8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3b1      	bcc.n	8001594 <_cbSendTaskList+0xc>
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163a:	bf00      	nop
 800163c:	200014f8 	.word	0x200014f8
 8001640:	20001598 	.word	0x20001598

08001644 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800164a:	f012 fb2f 	bl	8013cac <xTaskGetTickCountFromISR>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800165a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	f04f 0400 	mov.w	r4, #0
 8001666:	f04f 0500 	mov.w	r5, #0
 800166a:	015d      	lsls	r5, r3, #5
 800166c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001670:	0154      	lsls	r4, r2, #5
 8001672:	4622      	mov	r2, r4
 8001674:	462b      	mov	r3, r5
 8001676:	1a12      	subs	r2, r2, r0
 8001678:	eb63 0301 	sbc.w	r3, r3, r1
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	f04f 0500 	mov.w	r5, #0
 8001684:	009d      	lsls	r5, r3, #2
 8001686:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800168a:	0094      	lsls	r4, r2, #2
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	1812      	adds	r2, r2, r0
 8001692:	eb41 0303 	adc.w	r3, r1, r3
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	00d9      	lsls	r1, r3, #3
 80016a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016a4:	00d0      	lsls	r0, r2, #3
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80016ae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdb0      	pop	{r4, r5, r7, pc}

080016bc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80016ca:	2205      	movs	r2, #5
 80016cc:	492b      	ldr	r1, [pc, #172]	; (800177c <SYSVIEW_AddTask+0xc0>)
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f015 fa16 	bl	8016b00 <memcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04b      	beq.n	8001772 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b07      	cmp	r3, #7
 80016e0:	d903      	bls.n	80016ea <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80016e2:	4828      	ldr	r0, [pc, #160]	; (8001784 <SYSVIEW_AddTask+0xc8>)
 80016e4:	f015 f966 	bl	80169b4 <SEGGER_SYSVIEW_Warn>
    return;
 80016e8:	e044      	b.n	8001774 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4926      	ldr	r1, [pc, #152]	; (8001788 <SYSVIEW_AddTask+0xcc>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4921      	ldr	r1, [pc, #132]	; (8001788 <SYSVIEW_AddTask+0xcc>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3304      	adds	r3, #4
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	491b      	ldr	r1, [pc, #108]	; (8001788 <SYSVIEW_AddTask+0xcc>)
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3308      	adds	r3, #8
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4916      	ldr	r1, [pc, #88]	; (8001788 <SYSVIEW_AddTask+0xcc>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4910      	ldr	r1, [pc, #64]	; (8001788 <SYSVIEW_AddTask+0xcc>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3310      	adds	r3, #16
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <SYSVIEW_AddTask+0xc4>)
 800175e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f80e 	bl	800178c <SYSVIEW_SendTaskInfo>
 8001770:	e000      	b.n	8001774 <SYSVIEW_AddTask+0xb8>
    return;
 8001772:	bf00      	nop

}
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	080187dc 	.word	0x080187dc
 8001780:	20001598 	.word	0x20001598
 8001784:	080187e4 	.word	0x080187e4
 8001788:	200014f8 	.word	0x200014f8

0800178c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2214      	movs	r2, #20
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f015 f9c8 	bl	8016b38 <memset>
  TaskInfo.TaskID     = TaskID;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4618      	mov	r0, r3
 80017c2:	f014 fddb 	bl	801637c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80017e4:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <MX_ADC1_Init+0xf4>)
 80017e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80017ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_ADC1_Init+0xf0>)
 800180c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001814:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_ADC1_Init+0xf0>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001822:	2204      	movs	r2, #4
 8001824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001834:	4822      	ldr	r0, [pc, #136]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001836:	f00c fc9f 	bl	800e178 <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001840:	f001 fbb4 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001844:	2301      	movs	r3, #1
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800184c:	2302      	movs	r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001856:	f00c ff41 	bl	800e6dc <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001860:	f001 fba4 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001864:	2302      	movs	r3, #2
 8001866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001868:	2302      	movs	r3, #2
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_ADC1_Init+0xf0>)
 8001872:	f00c ff33 	bl	800e6dc <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800187c:	f001 fb96 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001880:	2303      	movs	r3, #3
 8001882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_ADC1_Init+0xf0>)
 800188e:	f00c ff25 	bl	800e6dc <HAL_ADC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001898:	f001 fb88 	bl	8002fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800189c:	2304      	movs	r3, #4
 800189e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_ADC1_Init+0xf0>)
 80018aa:	f00c ff17 	bl	800e6dc <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80018b4:	f001 fb7a 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20018c68 	.word	0x20018c68
 80018c4:	40012000 	.word	0x40012000

080018c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a33      	ldr	r2, [pc, #204]	; (80019b4 <HAL_ADC_MspInit+0xec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d15f      	bne.n	80019aa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_ADC_MspInit+0xf0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8001922:	231e      	movs	r3, #30
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4821      	ldr	r0, [pc, #132]	; (80019bc <HAL_ADC_MspInit+0xf4>)
 8001936:	f00e f901 	bl	800fb3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_ADC_MspInit+0xfc>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001958:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001976:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001980:	f00d fd6c 	bl	800f45c <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800198a:	f001 fb0f 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_ADC_MspInit+0xf8>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	2012      	movs	r0, #18
 80019a0:	f00d fd32 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019a4:	2012      	movs	r0, #18
 80019a6:	f00d fd4b 	bl	800f440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40012000 	.word	0x40012000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	20018cb0 	.word	0x20018cb0
 80019c4:	40026410 	.word	0x40026410

080019c8 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(ams_temperatures_t *ams_temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 80019c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019cc:	b08e      	sub	sp, #56	; 0x38
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 80019d8:	4bdb      	ldr	r3, [pc, #876]	; (8001d48 <interpret_ADC_buffer+0x380>)
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 80019dc:	4bdb      	ldr	r3, [pc, #876]	; (8001d4c <interpret_ADC_buffer+0x384>)
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 80019e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019e4:	eeb1 7a67 	vneg.f32	s14, s15
 80019e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019f0:	ee16 0a90 	vmov	r0, s13
 80019f4:	f7fe fd9a 	bl	800052c <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f015 fa92 	bl	8016f28 <exp>
 8001a04:	ec51 0b10 	vmov	r0, r1, d0
 8001a08:	a3cb      	add	r3, pc, #812	; (adr r3, 8001d38 <interpret_ADC_buffer+0x370>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fde5 	bl	80005dc <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f8d7 	bl	8000bcc <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8001a22:	4bcb      	ldr	r3, [pc, #812]	; (8001d50 <interpret_ADC_buffer+0x388>)
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8001a26:	4bcb      	ldr	r3, [pc, #812]	; (8001d54 <interpret_ADC_buffer+0x38c>)
 8001a28:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a2e:	e063      	b.n	8001af8 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8001a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b28      	subs	r3, #40	; 0x28
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001a46:	e020      	b.n	8001a8a <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8001a48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a50:	4413      	add	r3, r2
 8001a52:	3b28      	subs	r3, #40	; 0x28
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b28      	subs	r3, #40	; 0x28
 8001a80:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 8001a84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a86:	3301      	adds	r3, #1
 8001a88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3d9      	bcc.n	8001a48 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 8001a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b28      	subs	r3, #40	; 0x28
 8001aa0:	edd3 6a00 	vldr	s13, [r3]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aba:	4413      	add	r3, r2
 8001abc:	3b28      	subs	r3, #40	; 0x28
 8001abe:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8001ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aca:	4413      	add	r3, r2
 8001acc:	3b28      	subs	r3, #40	; 0x28
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d508      	bpl.n	8001af2 <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8001ae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b28      	subs	r3, #40	; 0x28
 8001aec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001af0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8001af2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001af4:	3301      	adds	r3, #1
 8001af6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d998      	bls.n	8001a30 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	ams_temperatures->pre_charge_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 8001afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b00:	f7fe fd14 	bl	800052c <__aeabi_f2d>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b0c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd00 	bl	800052c <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b10 	vmov	d0, r2, r3
 8001b34:	f015 fa48 	bl	8016fc8 <log>
 8001b38:	ec59 8b10 	vmov	r8, r9, d0
 8001b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b3e:	f7fe fcf5 	bl	800052c <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	ec43 2b10 	vmov	d0, r2, r3
 8001b4a:	f015 fa3d 	bl	8016fc8 <log>
 8001b4e:	ec53 2b10 	vmov	r2, r3, d0
 8001b52:	4640      	mov	r0, r8
 8001b54:	4649      	mov	r1, r9
 8001b56:	f7fe fb89 	bl	800026c <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fe65 	bl	8000830 <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
			- 273.15;
 8001b6e:	a374      	add	r3, pc, #464	; (adr r3, 8001d40 <interpret_ADC_buffer+0x378>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fb7a 	bl	800026c <__aeabi_dsub>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff f824 	bl	8000bcc <__aeabi_d2f>
 8001b84:	4602      	mov	r2, r0
	ams_temperatures->pre_charge_resistor_temperature = beta
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]
	ams_temperatures->fuse_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8001b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b8c:	f7fe fcce 	bl	800052c <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b98:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ba4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ba8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	ee17 0a90 	vmov	r0, s15
 8001bb4:	f7fe fcba 	bl	800052c <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	ec43 2b10 	vmov	d0, r2, r3
 8001bc0:	f015 fa02 	bl	8016fc8 <log>
 8001bc4:	ec59 8b10 	vmov	r8, r9, d0
 8001bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bca:	f7fe fcaf 	bl	800052c <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b10 	vmov	d0, r2, r3
 8001bd6:	f015 f9f7 	bl	8016fc8 <log>
 8001bda:	ec53 2b10 	vmov	r2, r3, d0
 8001bde:	4640      	mov	r0, r8
 8001be0:	4649      	mov	r1, r9
 8001be2:	f7fe fb43 	bl	800026c <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f7fe fe1f 	bl	8000830 <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
			- 273.15;
 8001bfa:	a351      	add	r3, pc, #324	; (adr r3, 8001d40 <interpret_ADC_buffer+0x378>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb34 	bl	800026c <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ffde 	bl	8000bcc <__aeabi_d2f>
 8001c10:	4602      	mov	r2, r0
	ams_temperatures->fuse_resistor_temperature = beta
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]
	ams_temperatures->aux_1_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8001c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c18:	f7fe fc88 	bl	800052c <__aeabi_f2d>
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c24:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	ee17 0a90 	vmov	r0, s15
 8001c40:	f7fe fc74 	bl	800052c <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b10 	vmov	d0, r2, r3
 8001c4c:	f015 f9bc 	bl	8016fc8 <log>
 8001c50:	ec59 8b10 	vmov	r8, r9, d0
 8001c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c56:	f7fe fc69 	bl	800052c <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ec43 2b10 	vmov	d0, r2, r3
 8001c62:	f015 f9b1 	bl	8016fc8 <log>
 8001c66:	ec53 2b10 	vmov	r2, r3, d0
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe fafd 	bl	800026c <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fdd9 	bl	8000830 <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
			- 273.15;
 8001c86:	a32e      	add	r3, pc, #184	; (adr r3, 8001d40 <interpret_ADC_buffer+0x378>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe faee 	bl	800026c <__aeabi_dsub>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff98 	bl	8000bcc <__aeabi_d2f>
 8001c9c:	4602      	mov	r2, r0
	ams_temperatures->aux_1_temperature = beta
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	609a      	str	r2, [r3, #8]
	ams_temperatures->aux_2_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8001ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ca4:	f7fe fc42 	bl	800052c <__aeabi_f2d>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cb0:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	ee17 0a90 	vmov	r0, s15
 8001ccc:	f7fe fc2e 	bl	800052c <__aeabi_f2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	ec43 2b10 	vmov	d0, r2, r3
 8001cd8:	f015 f976 	bl	8016fc8 <log>
 8001cdc:	ec59 8b10 	vmov	r8, r9, d0
 8001ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ce2:	f7fe fc23 	bl	800052c <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	ec43 2b10 	vmov	d0, r2, r3
 8001cee:	f015 f96b 	bl	8016fc8 <log>
 8001cf2:	ec53 2b10 	vmov	r2, r3, d0
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fab7 	bl	800026c <__aeabi_dsub>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fd93 	bl	8000830 <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
			- 273.15;
 8001d12:	a30b      	add	r3, pc, #44	; (adr r3, 8001d40 <interpret_ADC_buffer+0x378>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe faa8 	bl	800026c <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe ff52 	bl	8000bcc <__aeabi_d2f>
 8001d28:	4602      	mov	r2, r0
	ams_temperatures->aux_2_temperature = beta
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	60da      	str	r2, [r3, #12]

}
 8001d2e:	bf00      	nop
 8001d30:	3738      	adds	r7, #56	; 0x38
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	40c38800 	.word	0x40c38800
 8001d40:	66666666 	.word	0x66666666
 8001d44:	40711266 	.word	0x40711266
 8001d48:	455ac000 	.word	0x455ac000
 8001d4c:	43951333 	.word	0x43951333
 8001d50:	461c4000 	.word	0x461c4000
 8001d54:	457ff000 	.word	0x457ff000

08001d58 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2241      	movs	r2, #65	; 0x41
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f00e fe45 	bl	80109f8 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 8001d6e:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <ADC_initialize+0x24>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	801a      	strh	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000000 	.word	0x20000000

08001d80 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <ADC_step+0x30>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <ADC_step+0x26>
		ADC_FLAG = 0;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <ADC_step+0x30>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <ADC_step+0x34>)
 8001da2:	f00c fb6d 	bl	800e480 <HAL_ADC_Start_DMA>
	}
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20018c68 	.word	0x20018c68

08001db8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	801a      	strh	r2, [r3, #0]

}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MX_CAN1_Init+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001de4:	2203      	movs	r2, #3
 8001de6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001df6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001dfa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001dfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_CAN1_Init+0x64>)
 8001e2a:	f00c ff01 	bl	800ec30 <HAL_CAN_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e34:	f001 f8ba 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20018d38 	.word	0x20018d38
 8001e40:	40006400 	.word	0x40006400

08001e44 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <MX_CAN2_Init+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e50:	2206      	movs	r2, #6
 8001e52:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e62:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001e66:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e6e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_CAN2_Init+0x64>)
 8001e96:	f00c fecb 	bl	800ec30 <HAL_CAN_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001ea0:	f001 f884 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20018d10 	.word	0x20018d10
 8001eac:	40006800 	.word	0x40006800

08001eb0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_CAN_MspInit+0x15c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d14e      	bne.n	8001f70 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001eda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10d      	bne.n	8001f00 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f2e:	2309      	movs	r3, #9
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4837      	ldr	r0, [pc, #220]	; (8002018 <HAL_CAN_MspInit+0x168>)
 8001f3a:	f00d fdff 	bl	800fb3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2105      	movs	r1, #5
 8001f42:	2013      	movs	r0, #19
 8001f44:	f00d fa60 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001f48:	2013      	movs	r0, #19
 8001f4a:	f00d fa79 	bl	800f440 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2105      	movs	r1, #5
 8001f52:	2014      	movs	r0, #20
 8001f54:	f00d fa58 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f58:	2014      	movs	r0, #20
 8001f5a:	f00d fa71 	bl	800f440 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	2015      	movs	r0, #21
 8001f64:	f00d fa50 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f68:	2015      	movs	r0, #21
 8001f6a:	f00d fa69 	bl	800f440 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001f6e:	e048      	b.n	8002002 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_CAN_MspInit+0x16c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d143      	bne.n	8002002 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001f9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_CAN_MspInit+0x160>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_CAN_MspInit+0x164>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fe0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <HAL_CAN_MspInit+0x170>)
 8001ffe:	f00d fd9d 	bl	800fb3c <HAL_GPIO_Init>
}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	; 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40006400 	.word	0x40006400
 8002010:	2000159c 	.word	0x2000159c
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000
 800201c:	40006800 	.word	0x40006800
 8002020:	40020400 	.word	0x40020400

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <MX_DMA_Init+0x3c>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_DMA_Init+0x3c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	2038      	movs	r0, #56	; 0x38
 800204c:	f00d f9dc 	bl	800f408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002050:	2038      	movs	r0, #56	; 0x38
 8002052:	f00d f9f5 	bl	800f440 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <MX_GPIO_Init+0x150>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <MX_GPIO_Init+0x150>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <MX_GPIO_Init+0x150>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <MX_GPIO_Init+0x150>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a45      	ldr	r2, [pc, #276]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a3e      	ldr	r2, [pc, #248]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <MX_GPIO_Init+0x150>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	210e      	movs	r1, #14
 80020ee:	4832      	ldr	r0, [pc, #200]	; (80021b8 <MX_GPIO_Init+0x154>)
 80020f0:	f00d fed8 	bl	800fea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80020f4:	2200      	movs	r2, #0
 80020f6:	21e0      	movs	r1, #224	; 0xe0
 80020f8:	4830      	ldr	r0, [pc, #192]	; (80021bc <MX_GPIO_Init+0x158>)
 80020fa:	f00d fed3 	bl	800fea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002104:	482e      	ldr	r0, [pc, #184]	; (80021c0 <MX_GPIO_Init+0x15c>)
 8002106:	f00d fecd 	bl	800fea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 800210a:	230e      	movs	r3, #14
 800210c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4825      	ldr	r0, [pc, #148]	; (80021b8 <MX_GPIO_Init+0x154>)
 8002122:	f00d fd0b 	bl	800fb3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002126:	2370      	movs	r3, #112	; 0x70
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800212e:	2302      	movs	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	481f      	ldr	r0, [pc, #124]	; (80021b8 <MX_GPIO_Init+0x154>)
 800213a:	f00d fcff 	bl	800fb3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 800213e:	23e0      	movs	r3, #224	; 0xe0
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4819      	ldr	r0, [pc, #100]	; (80021bc <MX_GPIO_Init+0x158>)
 8002156:	f00d fcf1 	bl	800fb3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 800215a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <MX_GPIO_Init+0x15c>)
 8002174:	f00d fce2 	bl	800fb3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002178:	2306      	movs	r3, #6
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	480e      	ldr	r0, [pc, #56]	; (80021c4 <MX_GPIO_Init+0x160>)
 800218c:	f00d fcd6 	bl	800fb3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002190:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_GPIO_Init+0x15c>)
 80021a6:	f00d fcc9 	bl	800fb3c <HAL_GPIO_Init>

}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020400 	.word	0x40020400

080021c8 <initialize_IWDG>:

}

/* USER CODE BEGIN 1 */

void initialize_IWDG(IWDG_HandleTypeDef *hiwdg, float periodicity) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	ed87 0a00 	vstr	s0, [r7]
	const float clock_frequency = 32000;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <initialize_IWDG+0x68>)
 80021d6:	617b      	str	r3, [r7, #20]
	float prescaler = 8;
 80021d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80021dc:	613b      	str	r3, [r7, #16]
	float margin = 1.2;
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <initialize_IWDG+0x6c>)
 80021e0:	60fb      	str	r3, [r7, #12]


	hiwdg->Instance = IWDG;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <initialize_IWDG+0x70>)
 80021e6:	601a      	str	r2, [r3, #0]
	hiwdg->Init.Prescaler = IWDG_PRESCALER_8;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	605a      	str	r2, [r3, #4]
	hiwdg->Init.Reload = margin * clock_frequency * periodicity / prescaler;
 80021ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80021f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fa:	edd7 7a00 	vldr	s15, [r7]
 80021fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220e:	ee17 2a90 	vmov	r2, s15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(hiwdg) != HAL_OK) {
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f00d fe5d 	bl	800fed6 <HAL_IWDG_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <initialize_IWDG+0x5e>
		Error_Handler();
 8002222:	f000 fec3 	bl	8002fac <Error_Handler>
	}

}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	46fa0000 	.word	0x46fa0000
 8002234:	3f99999a 	.word	0x3f99999a
 8002238:	40003000 	.word	0x40003000
 800223c:	00000000 	.word	0x00000000

08002240 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main() {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002244:	f7ff f98a 	bl	800155c <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002248:	f00b ff54 	bl	800e0f4 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 800224c:	f000 f928 	bl	80024a0 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002250:	f7ff ff08 	bl	8002064 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002254:	f000 fec0 	bl	8002fd8 <MX_SPI2_Init>
	MX_CAN1_Init();
 8002258:	f7ff fdbe 	bl	8001dd8 <MX_CAN1_Init>
	MX_CAN2_Init();
 800225c:	f7ff fdf2 	bl	8001e44 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002260:	f001 f856 	bl	8003310 <MX_TIM1_Init>
	MX_DMA_Init();
 8002264:	f7ff fede 	bl	8002024 <MX_DMA_Init>
	MX_TIM3_Init();
 8002268:	f001 f98e 	bl	8003588 <MX_TIM3_Init>
	MX_TIM2_Init();
 800226c:	f001 f8f0 	bl	8003450 <MX_TIM2_Init>
	MX_ADC1_Init();
 8002270:	f7ff faae 	bl	80017d0 <MX_ADC1_Init>

	//initialize_can(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 8002274:	485e      	ldr	r0, [pc, #376]	; (80023f0 <main+0x1b0>)
 8002276:	f000 fe9f 	bl	8002fb8 <initialize_LTC>
	/* Initialize kernel */
	osKernelInitialize();
 800227a:	f010 f9d9 	bl	8012630 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 800227e:	2301      	movs	r3, #1
 8002280:	2207      	movs	r2, #7
 8002282:	4611      	mov	r1, r2
 8002284:	2200      	movs	r2, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f010 fcb8 	bl	8012bfc <xQueueGenericCreate>
 800228c:	4603      	mov	r3, r0
 800228e:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <main+0x1b4>)
 8002290:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002292:	2301      	movs	r3, #1
 8002294:	2208      	movs	r2, #8
 8002296:	4611      	mov	r1, r2
 8002298:	2200      	movs	r2, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f010 fcae 	bl	8012bfc <xQueueGenericCreate>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <main+0x1b8>)
 80022a4:	6013      	str	r3, [r2, #0]
				IMD_queue_info.element_size);

	ams_temperatures_queue = xQueueCreate(
 80022a6:	2301      	movs	r3, #1
 80022a8:	2210      	movs	r2, #16
 80022aa:	4611      	mov	r1, r2
 80022ac:	2200      	movs	r2, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f010 fca4 	bl	8012bfc <xQueueGenericCreate>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a51      	ldr	r2, [pc, #324]	; (80023fc <main+0x1bc>)
 80022b8:	6013      	str	r3, [r2, #0]
			ams_temperatures_queue_info.element_count,
			ams_temperatures_queue_info.element_size);

	can_rx_queue = xQueueCreate(can_rx_queue_info.element_count,
 80022ba:	2308      	movs	r3, #8
 80022bc:	223c      	movs	r2, #60	; 0x3c
 80022be:	4611      	mov	r1, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f010 fc9a 	bl	8012bfc <xQueueGenericCreate>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <main+0x1c0>)
 80022cc:	6013      	str	r3, [r2, #0]
			can_rx_queue_info.element_size);

	can1_tx_queue = xQueueCreate(can1_tx_queue_info.element_count,
 80022ce:	2348      	movs	r3, #72	; 0x48
 80022d0:	223c      	movs	r2, #60	; 0x3c
 80022d2:	4611      	mov	r1, r2
 80022d4:	2200      	movs	r2, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f010 fc90 	bl	8012bfc <xQueueGenericCreate>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a49      	ldr	r2, [pc, #292]	; (8002404 <main+0x1c4>)
 80022e0:	6013      	str	r3, [r2, #0]
			can1_tx_queue_info.element_size);

	can2_tx_queue = xQueueCreate(can2_tx_queue_info.element_count,
 80022e2:	2348      	movs	r3, #72	; 0x48
 80022e4:	223c      	movs	r2, #60	; 0x3c
 80022e6:	4611      	mov	r1, r2
 80022e8:	2200      	movs	r2, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f010 fc86 	bl	8012bfc <xQueueGenericCreate>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a45      	ldr	r2, [pc, #276]	; (8002408 <main+0x1c8>)
 80022f4:	6013      	str	r3, [r2, #0]
			can2_tx_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 80022f6:	f010 f9e5 	bl	80126c4 <osKernelGetTickCount>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8f3 	bl	80004e8 <__aeabi_ui2d>
 8002302:	a339      	add	r3, pc, #228	; (adr r3, 80023e8 <main+0x1a8>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fd ffb2 	bl	8000270 <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fc3a 	bl	8000b8c <__aeabi_d2uiz>
 8002318:	4603      	mov	r3, r0
 800231a:	4a3c      	ldr	r2, [pc, #240]	; (800240c <main+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_attributes);
 800231e:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <main+0x1d0>)
 8002320:	2100      	movs	r1, #0
 8002322:	483c      	ldr	r0, [pc, #240]	; (8002414 <main+0x1d4>)
 8002324:	f010 f9e3 	bl	80126ee <osThreadNew>
 8002328:	4603      	mov	r3, r0
 800232a:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <main+0x1d8>)
 800232c:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL, &SIM_task_attributes);
 800232e:	4a3b      	ldr	r2, [pc, #236]	; (800241c <main+0x1dc>)
 8002330:	2100      	movs	r1, #0
 8002332:	483b      	ldr	r0, [pc, #236]	; (8002420 <main+0x1e0>)
 8002334:	f010 f9db 	bl	80126ee <osThreadNew>
 8002338:	4603      	mov	r3, r0
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <main+0x1e4>)
 800233c:	6013      	str	r3, [r2, #0]

	CSE_task_handle = osThreadNew(start_CSE_task, NULL, &CSE_task_attributes);
 800233e:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <main+0x1e8>)
 8002340:	2100      	movs	r1, #0
 8002342:	483a      	ldr	r0, [pc, #232]	; (800242c <main+0x1ec>)
 8002344:	f010 f9d3 	bl	80126ee <osThreadNew>
 8002348:	4603      	mov	r3, r0
 800234a:	4a39      	ldr	r2, [pc, #228]	; (8002430 <main+0x1f0>)
 800234c:	6013      	str	r3, [r2, #0]

	CAN_rx_task_handle = osThreadNew(start_CAN_rx_task, NULL,
 800234e:	4a39      	ldr	r2, [pc, #228]	; (8002434 <main+0x1f4>)
 8002350:	2100      	movs	r1, #0
 8002352:	4839      	ldr	r0, [pc, #228]	; (8002438 <main+0x1f8>)
 8002354:	f010 f9cb 	bl	80126ee <osThreadNew>
 8002358:	4603      	mov	r3, r0
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <main+0x1fc>)
 800235c:	6013      	str	r3, [r2, #0]
			&CAN_rx_task_attributes);

	CAN_tx_task_handle = osThreadNew(start_CAN_tx_task, NULL,
 800235e:	4a38      	ldr	r2, [pc, #224]	; (8002440 <main+0x200>)
 8002360:	2100      	movs	r1, #0
 8002362:	4838      	ldr	r0, [pc, #224]	; (8002444 <main+0x204>)
 8002364:	f010 f9c3 	bl	80126ee <osThreadNew>
 8002368:	4603      	mov	r3, r0
 800236a:	4a37      	ldr	r2, [pc, #220]	; (8002448 <main+0x208>)
 800236c:	6013      	str	r3, [r2, #0]
			&CAN_tx_task_attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL, &COM_task_attributes);
 800236e:	4a37      	ldr	r2, [pc, #220]	; (800244c <main+0x20c>)
 8002370:	2100      	movs	r1, #0
 8002372:	4837      	ldr	r0, [pc, #220]	; (8002450 <main+0x210>)
 8002374:	f010 f9bb 	bl	80126ee <osThreadNew>
 8002378:	4603      	mov	r3, r0
 800237a:	4a36      	ldr	r2, [pc, #216]	; (8002454 <main+0x214>)
 800237c:	6013      	str	r3, [r2, #0]

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 800237e:	4a36      	ldr	r2, [pc, #216]	; (8002458 <main+0x218>)
 8002380:	2100      	movs	r1, #0
 8002382:	4836      	ldr	r0, [pc, #216]	; (800245c <main+0x21c>)
 8002384:	f010 f9b3 	bl	80126ee <osThreadNew>
 8002388:	4603      	mov	r3, r0
 800238a:	4a35      	ldr	r2, [pc, #212]	; (8002460 <main+0x220>)
 800238c:	6013      	str	r3, [r2, #0]
			&IWDG_task_attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 800238e:	4a35      	ldr	r2, [pc, #212]	; (8002464 <main+0x224>)
 8002390:	2100      	movs	r1, #0
 8002392:	4835      	ldr	r0, [pc, #212]	; (8002468 <main+0x228>)
 8002394:	f010 f9ab 	bl	80126ee <osThreadNew>
 8002398:	4603      	mov	r3, r0
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <main+0x22c>)
 800239c:	6013      	str	r3, [r2, #0]
			&event_handler_task_attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL, &IMD_task_attributes);
 800239e:	4a34      	ldr	r2, [pc, #208]	; (8002470 <main+0x230>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4834      	ldr	r0, [pc, #208]	; (8002474 <main+0x234>)
 80023a4:	f010 f9a3 	bl	80126ee <osThreadNew>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a33      	ldr	r2, [pc, #204]	; (8002478 <main+0x238>)
 80023ac:	6013      	str	r3, [r2, #0]

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 80023ae:	4a33      	ldr	r2, [pc, #204]	; (800247c <main+0x23c>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	4833      	ldr	r0, [pc, #204]	; (8002480 <main+0x240>)
 80023b4:	f010 f99b 	bl	80126ee <osThreadNew>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <main+0x244>)
 80023bc:	6013      	str	r3, [r2, #0]
			&GPIO_task_attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL, &ADC_task_attributes);
 80023be:	4a32      	ldr	r2, [pc, #200]	; (8002488 <main+0x248>)
 80023c0:	2100      	movs	r1, #0
 80023c2:	4832      	ldr	r0, [pc, #200]	; (800248c <main+0x24c>)
 80023c4:	f010 f993 	bl	80126ee <osThreadNew>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4a31      	ldr	r2, [pc, #196]	; (8002490 <main+0x250>)
 80023cc:	6013      	str	r3, [r2, #0]

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 80023ce:	4a31      	ldr	r2, [pc, #196]	; (8002494 <main+0x254>)
 80023d0:	2100      	movs	r1, #0
 80023d2:	4831      	ldr	r0, [pc, #196]	; (8002498 <main+0x258>)
 80023d4:	f010 f98b 	bl	80126ee <osThreadNew>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a30      	ldr	r2, [pc, #192]	; (800249c <main+0x25c>)
 80023dc:	6013      	str	r3, [r2, #0]
			&COOL_task_attributes);

	/* Launch RTOS ! */
	osKernelStart();
 80023de:	f010 f94b 	bl	8012678 <osKernelStart>

	for (;;)
 80023e2:	e7fe      	b.n	80023e2 <main+0x1a2>
 80023e4:	f3af 8000 	nop.w
 80023e8:	f3cf3cf4 	.word	0xf3cf3cf4
 80023ec:	4047cf3c 	.word	0x4047cf3c
 80023f0:	20019264 	.word	0x20019264
 80023f4:	20018c58 	.word	0x20018c58
 80023f8:	20018c40 	.word	0x20018c40
 80023fc:	20018c5c 	.word	0x20018c5c
 8002400:	20018c60 	.word	0x20018c60
 8002404:	20018c50 	.word	0x20018c50
 8002408:	20018c64 	.word	0x20018c64
 800240c:	20018d9c 	.word	0x20018d9c
 8002410:	08018908 	.word	0x08018908
 8002414:	08002579 	.word	0x08002579
 8002418:	20018d78 	.word	0x20018d78
 800241c:	0801892c 	.word	0x0801892c
 8002420:	08002e49 	.word	0x08002e49
 8002424:	20018d88 	.word	0x20018d88
 8002428:	08018974 	.word	0x08018974
 800242c:	08002ca9 	.word	0x08002ca9
 8002430:	20018d90 	.word	0x20018d90
 8002434:	080189bc 	.word	0x080189bc
 8002438:	08002b81 	.word	0x08002b81
 800243c:	20018d94 	.word	0x20018d94
 8002440:	08018998 	.word	0x08018998
 8002444:	08002c11 	.word	0x08002c11
 8002448:	20018d7c 	.word	0x20018d7c
 800244c:	080189e0 	.word	0x080189e0
 8002450:	08002a21 	.word	0x08002a21
 8002454:	20018d70 	.word	0x20018d70
 8002458:	08018a94 	.word	0x08018a94
 800245c:	08002611 	.word	0x08002611
 8002460:	20018da0 	.word	0x20018da0
 8002464:	08018a70 	.word	0x08018a70
 8002468:	080026c1 	.word	0x080026c1
 800246c:	20018d6c 	.word	0x20018d6c
 8002470:	08018a4c 	.word	0x08018a4c
 8002474:	08002751 	.word	0x08002751
 8002478:	20018da4 	.word	0x20018da4
 800247c:	08018a28 	.word	0x08018a28
 8002480:	08002829 	.word	0x08002829
 8002484:	20018d74 	.word	0x20018d74
 8002488:	08018a04 	.word	0x08018a04
 800248c:	08002931 	.word	0x08002931
 8002490:	20018d98 	.word	0x20018d98
 8002494:	08018950 	.word	0x08018950
 8002498:	08002d41 	.word	0x08002d41
 800249c:	20018d8c 	.word	0x20018d8c

080024a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b094      	sub	sp, #80	; 0x50
 80024a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a6:	f107 0320 	add.w	r3, r7, #32
 80024aa:	2230      	movs	r2, #48	; 0x30
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f014 fb42 	bl	8016b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <SystemClock_Config+0xcc>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	4a27      	ldr	r2, [pc, #156]	; (800256c <SystemClock_Config+0xcc>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6413      	str	r3, [r2, #64]	; 0x40
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <SystemClock_Config+0xcc>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <SystemClock_Config+0xd0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <SystemClock_Config+0xd0>)
 80024ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <SystemClock_Config+0xd0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024fc:	230a      	movs	r3, #10
 80024fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002504:	2310      	movs	r3, #16
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002508:	2301      	movs	r3, #1
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250c:	2302      	movs	r3, #2
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002510:	2300      	movs	r3, #0
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002514:	2308      	movs	r3, #8
 8002516:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002518:	2354      	movs	r3, #84	; 0x54
 800251a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800251c:	2302      	movs	r3, #2
 800251e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002520:	2304      	movs	r3, #4
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	4618      	mov	r0, r3
 800252a:	f00d fd27 	bl	800ff7c <HAL_RCC_OscConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002534:	f000 fd3a 	bl	8002fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002538:	230f      	movs	r3, #15
 800253a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253c:	2302      	movs	r3, #2
 800253e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	2102      	movs	r1, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f00d ff89 	bl	801046c <HAL_RCC_ClockConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002560:	f000 fd24 	bl	8002fac <Error_Handler>
  }
}
 8002564:	bf00      	nop
 8002566:	3750      	adds	r7, #80	; 0x50
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
 8002574:	00000000 	.word	0x00000000

08002578 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8002580:	f013 fd82 	bl	8016088 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <start_SM_task+0x90>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 800258a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffcc 	bl	800052c <__aeabi_f2d>
 8002594:	a31a      	add	r3, pc, #104	; (adr r3, 8002600 <start_SM_task+0x88>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe f81f 	bl	80005dc <__aeabi_dmul>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe faf1 	bl	8000b8c <__aeabi_d2uiz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7fd ff9a 	bl	80004e8 <__aeabi_ui2d>
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffb5 	bl	800052c <__aeabi_f2d>
 80025c2:	a30f      	add	r3, pc, #60	; (adr r3, 8002600 <start_SM_task+0x88>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f808 	bl	80005dc <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe4c 	bl	8000270 <__adddf3>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fad4 	bl	8000b8c <__aeabi_d2uiz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f010 f912 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f010 f90b 	bl	8012812 <osDelayUntil>
		next_tick += tick_increment;
 80025fc:	e7f7      	b.n	80025ee <start_SM_task+0x76>
 80025fe:	bf00      	nop
 8002600:	f3cf3cf4 	.word	0xf3cf3cf4
 8002604:	4067cf3c 	.word	0x4067cf3c
 8002608:	20018d9c 	.word	0x20018d9c
 800260c:	00000000 	.word	0x00000000

08002610 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <start_IWDG_task+0xa0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 800261e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff82 	bl	800052c <__aeabi_f2d>
 8002628:	a31f      	add	r3, pc, #124	; (adr r3, 80026a8 <start_IWDG_task+0x98>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd ffd5 	bl	80005dc <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe faa7 	bl	8000b8c <__aeabi_d2uiz>
 800263e:	4603      	mov	r3, r0
 8002640:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7fd ff50 	bl	80004e8 <__aeabi_ui2d>
 8002648:	4604      	mov	r4, r0
 800264a:	460d      	mov	r5, r1
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <start_IWDG_task+0xa4>)
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff6c 	bl	800052c <__aeabi_f2d>
 8002654:	a314      	add	r3, pc, #80	; (adr r3, 80026a8 <start_IWDG_task+0x98>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffbf 	bl	80005dc <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fd fe03 	bl	8000270 <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa8b 	bl	8000b8c <__aeabi_d2uiz>
 8002676:	4603      	mov	r3, r0
 8002678:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f010 f8c9 	bl	8012812 <osDelayUntil>

	initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);
 8002680:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	480b      	ldr	r0, [pc, #44]	; (80026b8 <start_IWDG_task+0xa8>)
 800268a:	f7ff fd9d 	bl	80021c8 <initialize_IWDG>

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 800268e:	480a      	ldr	r0, [pc, #40]	; (80026b8 <start_IWDG_task+0xa8>)
 8002690:	f00d fc63 	bl	800ff5a <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f010 f8b8 	bl	8012812 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 80026a2:	e7f4      	b.n	800268e <start_IWDG_task+0x7e>
 80026a4:	f3af 8000 	nop.w
 80026a8:	f3cf3cf4 	.word	0xf3cf3cf4
 80026ac:	4067cf3c 	.word	0x4067cf3c
 80026b0:	20018d9c 	.word	0x20018d9c
 80026b4:	3c23d70a 	.word	0x3c23d70a
 80026b8:	20018d60 	.word	0x20018d60
 80026bc:	00000000 	.word	0x00000000

080026c0 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <start_event_handler_task+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff2a 	bl	800052c <__aeabi_f2d>
 80026d8:	a319      	add	r3, pc, #100	; (adr r3, 8002740 <start_event_handler_task+0x80>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f7fd ff7d 	bl	80005dc <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe fa4f 	bl	8000b8c <__aeabi_d2uiz>
 80026ee:	4603      	mov	r3, r0
 80026f0:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd fef8 	bl	80004e8 <__aeabi_ui2d>
 80026f8:	4604      	mov	r4, r0
 80026fa:	460d      	mov	r5, r1
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <start_event_handler_task+0x8c>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff14 	bl	800052c <__aeabi_f2d>
 8002704:	a30e      	add	r3, pc, #56	; (adr r3, 8002740 <start_event_handler_task+0x80>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fd ff67 	bl	80005dc <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fdab 	bl	8000270 <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe fa33 	bl	8000b8c <__aeabi_d2uiz>
 8002726:	4603      	mov	r3, r0
 8002728:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f010 f871 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f010 f86a 	bl	8012812 <osDelayUntil>
		next_tick += tick_increment;
 800273e:	e7f7      	b.n	8002730 <start_event_handler_task+0x70>
 8002740:	f3cf3cf4 	.word	0xf3cf3cf4
 8002744:	4067cf3c 	.word	0x4067cf3c
 8002748:	20018d9c 	.word	0x20018d9c
 800274c:	3ca3d70a 	.word	0x3ca3d70a

08002750 <start_IMD_task>:
	}
}

IMD_t IMD;
void start_IMD_task(void *argument) {
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <start_IMD_task+0xc0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 800275e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fee2 	bl	800052c <__aeabi_f2d>
 8002768:	a327      	add	r3, pc, #156	; (adr r3, 8002808 <start_IMD_task+0xb8>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd ff35 	bl	80005dc <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa07 	bl	8000b8c <__aeabi_d2uiz>
 800277e:	4603      	mov	r3, r0
 8002780:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	initialize_IMD(&htim2);
 8002782:	4824      	ldr	r0, [pc, #144]	; (8002814 <start_IMD_task+0xc4>)
 8002784:	f7fe fe08 	bl	8001398 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7fd fead 	bl	80004e8 <__aeabi_ui2d>
 800278e:	4604      	mov	r4, r0
 8002790:	460d      	mov	r5, r1
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <start_IMD_task+0xc8>)
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fec9 	bl	800052c <__aeabi_f2d>
 800279a:	a31b      	add	r3, pc, #108	; (adr r3, 8002808 <start_IMD_task+0xb8>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd ff1c 	bl	80005dc <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4620      	mov	r0, r4
 80027aa:	4629      	mov	r1, r5
 80027ac:	f7fd fd60 	bl	8000270 <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f9e8 	bl	8000b8c <__aeabi_d2uiz>
 80027bc:	4603      	mov	r3, r0
 80027be:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f010 f826 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */


		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <start_IMD_task+0xcc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	4914      	ldr	r1, [pc, #80]	; (8002820 <start_IMD_task+0xd0>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	f010 fc4e 	bl	8013070 <xQueueReceive>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <start_IMD_task+0xa4>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <start_IMD_task+0xd0>)
 80027dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80027e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ec:	edc7 7a00 	vstr	s15, [r7]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	73fb      	strb	r3, [r7, #15]
		}


		/* Wait until next period */
		next_tick += tick_increment;
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80027fc:	6978      	ldr	r0, [r7, #20]
 80027fe:	f010 f808 	bl	8012812 <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 8002802:	e7e0      	b.n	80027c6 <start_IMD_task+0x76>
 8002804:	f3af 8000 	nop.w
 8002808:	f3cf3cf4 	.word	0xf3cf3cf4
 800280c:	4067cf3c 	.word	0x4067cf3c
 8002810:	20018d9c 	.word	0x20018d9c
 8002814:	20019394 	.word	0x20019394
 8002818:	3cf5c28f 	.word	0x3cf5c28f
 800281c:	20018c40 	.word	0x20018c40
 8002820:	20018d80 	.word	0x20018d80
 8002824:	00000000 	.word	0x00000000

08002828 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <start_GPIO_task+0xf0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8002836:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe76 	bl	800052c <__aeabi_f2d>
 8002840:	a333      	add	r3, pc, #204	; (adr r3, 8002910 <start_GPIO_task+0xe8>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fec9 	bl	80005dc <__aeabi_dmul>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f99b 	bl	8000b8c <__aeabi_d2uiz>
 8002856:	4603      	mov	r3, r0
 8002858:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7fd fe44 	bl	80004e8 <__aeabi_ui2d>
 8002860:	4604      	mov	r4, r0
 8002862:	460d      	mov	r5, r1
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <start_GPIO_task+0xf4>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe60 	bl	800052c <__aeabi_f2d>
 800286c:	a328      	add	r3, pc, #160	; (adr r3, 8002910 <start_GPIO_task+0xe8>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd feb3 	bl	80005dc <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd fcf7 	bl	8000270 <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f97f 	bl	8000b8c <__aeabi_d2uiz>
 800288e:	4603      	mov	r3, r0
 8002890:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f00f ffbd 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port,
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	4821      	ldr	r0, [pc, #132]	; (8002920 <start_GPIO_task+0xf8>)
 800289c:	f00d faea 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	723b      	strb	r3, [r7, #8]
		AMS_error_latched_Pin);
		GPIO.IMD_error_latched = HAL_GPIO_ReadPin(IMD_error_latched_GPIO_Port,
 80028a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a8:	481d      	ldr	r0, [pc, #116]	; (8002920 <start_GPIO_task+0xf8>)
 80028aa:	f00d fae3 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	727b      	strb	r3, [r7, #9]
		IMD_error_latched_Pin);
		GPIO.SC_probe = HAL_GPIO_ReadPin(SC_probe_GPIO_Port, SC_probe_Pin);
 80028b2:	2102      	movs	r1, #2
 80028b4:	481b      	ldr	r0, [pc, #108]	; (8002924 <start_GPIO_task+0xfc>)
 80028b6:	f00d fadd 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = HAL_GPIO_ReadPin(IMD_ok_GPIO_Port, IMD_ok_Pin);
 80028be:	2104      	movs	r1, #4
 80028c0:	4818      	ldr	r0, [pc, #96]	; (8002924 <start_GPIO_task+0xfc>)
 80028c2:	f00d fad7 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = HAL_GPIO_ReadPin(AIR_plus_closed_GPIO_Port,
 80028ca:	2110      	movs	r1, #16
 80028cc:	4816      	ldr	r0, [pc, #88]	; (8002928 <start_GPIO_task+0x100>)
 80028ce:	f00d fad1 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028d2:	4603      	mov	r3, r0
 80028d4:	733b      	strb	r3, [r7, #12]
		AIR_plus_closed_Pin);
		GPIO.AIR_minus_closed = HAL_GPIO_ReadPin(AIR_minus_closed_GPIO_Port,
 80028d6:	2120      	movs	r1, #32
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <start_GPIO_task+0x100>)
 80028da:	f00d facb 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028de:	4603      	mov	r3, r0
 80028e0:	737b      	strb	r3, [r7, #13]
		AIR_minus_closed_Pin);
		GPIO.precharge_closed = HAL_GPIO_ReadPin(precharge_closed_GPIO_Port,
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	4810      	ldr	r0, [pc, #64]	; (8002928 <start_GPIO_task+0x100>)
 80028e6:	f00d fac5 	bl	800fe74 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73bb      	strb	r3, [r7, #14]
		precharge_closed_Pin);

		xQueueOverwrite(GPIO_queue, &GPIO);
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <start_GPIO_task+0x104>)
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	f107 0108 	add.w	r1, r7, #8
 80028f6:	2302      	movs	r3, #2
 80028f8:	2200      	movs	r2, #0
 80028fa:	f010 f9e3 	bl	8012cc4 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f00f ff83 	bl	8012812 <osDelayUntil>
		GPIO.AMS_error_latched = HAL_GPIO_ReadPin(AMS_error_latched_GPIO_Port,
 800290c:	e7c4      	b.n	8002898 <start_GPIO_task+0x70>
 800290e:	bf00      	nop
 8002910:	f3cf3cf4 	.word	0xf3cf3cf4
 8002914:	4067cf3c 	.word	0x4067cf3c
 8002918:	20018d9c 	.word	0x20018d9c
 800291c:	3d23d70a 	.word	0x3d23d70a
 8002920:	40020800 	.word	0x40020800
 8002924:	40020400 	.word	0x40020400
 8002928:	40021000 	.word	0x40021000
 800292c:	20018c58 	.word	0x20018c58

08002930 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b0a8      	sub	sp, #160	; 0xa0
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002938:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <start_ADC_task+0xd0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8002940:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdf1 	bl	800052c <__aeabi_f2d>
 800294a:	a32b      	add	r3, pc, #172	; (adr r3, 80029f8 <start_ADC_task+0xc8>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fe44 	bl	80005dc <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	f7fe f916 	bl	8000b8c <__aeabi_d2uiz>
 8002960:	4603      	mov	r3, r0
 8002962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	ADC_initialize(&htim3);
 8002966:	4827      	ldr	r0, [pc, #156]	; (8002a04 <start_ADC_task+0xd4>)
 8002968:	f7ff f9f6 	bl	8001d58 <ADC_initialize>
	uint16_t adc_readings[4 * 16];
	ams_temperatures_t ams_temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 800296c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002970:	f7fd fdba 	bl	80004e8 <__aeabi_ui2d>
 8002974:	4604      	mov	r4, r0
 8002976:	460d      	mov	r5, r1
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <start_ADC_task+0xd8>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdd6 	bl	800052c <__aeabi_f2d>
 8002980:	a31d      	add	r3, pc, #116	; (adr r3, 80029f8 <start_ADC_task+0xc8>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fe29 	bl	80005dc <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4620      	mov	r0, r4
 8002990:	4629      	mov	r1, r5
 8002992:	f7fd fc6d 	bl	8000270 <__adddf3>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f8f5 	bl	8000b8c <__aeabi_d2uiz>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 80029a8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80029ac:	f00f ff31 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	2104      	movs	r1, #4
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f9e2 	bl	8001d80 <ADC_step>
		interpret_ADC_buffer(&ams_temperatures, adc_readings, 16);
 80029bc:	f107 0118 	add.w	r1, r7, #24
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	2210      	movs	r2, #16
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fffe 	bl	80019c8 <interpret_ADC_buffer>

		xQueueOverwrite(ams_temperatures_queue, &ams_temperatures);
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <start_ADC_task+0xdc>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	f107 0108 	add.w	r1, r7, #8
 80029d4:	2302      	movs	r3, #2
 80029d6:	2200      	movs	r2, #0
 80029d8:	f010 f974 	bl	8012cc4 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80029dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80029e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e4:	4413      	add	r3, r2
 80029e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 80029ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80029ee:	f00f ff10 	bl	8012812 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 80029f2:	e7dd      	b.n	80029b0 <start_ADC_task+0x80>
 80029f4:	f3af 8000 	nop.w
 80029f8:	f3cf3cf4 	.word	0xf3cf3cf4
 80029fc:	4067cf3c 	.word	0x4067cf3c
 8002a00:	20018d9c 	.word	0x20018d9c
 8002a04:	20019304 	.word	0x20019304
 8002a08:	3d4ccccd 	.word	0x3d4ccccd
 8002a0c:	20018c5c 	.word	0x20018c5c

08002a10 <error>:
	}
}

void error() {
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <start_COM_task>:

void start_COM_task(void *argument) {
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002a28:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <start_COM_task+0x148>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8002a2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd7a 	bl	800052c <__aeabi_f2d>
 8002a38:	a349      	add	r3, pc, #292	; (adr r3, 8002b60 <start_COM_task+0x140>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fdcd 	bl	80005dc <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f89f 	bl	8000b8c <__aeabi_d2uiz>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 8002a52:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a56:	61fb      	str	r3, [r7, #28]
	const float temperature_time_constraint = 1.0;
 8002a58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a5c:	61bb      	str	r3, [r7, #24]
	const float current_time_constraint = 0.5;
 8002a5e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a62:	617b      	str	r3, [r7, #20]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 8002a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a68:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 8002a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a74:	ee17 3a90 	vmov	r3, s15
 8002a78:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (voltage_sample_constraint < 1) {
 8002a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <start_COM_task+0x64>
		voltage_sample_constraint = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 8002a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a88:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 8002a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	853b      	strh	r3, [r7, #40]	; 0x28
	if (temperature_sample_constraint < 1) {
 8002a9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <start_COM_task+0x84>
		temperature_sample_constraint = 1;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8002aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002aa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 8002ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab4:	ee17 3a90 	vmov	r3, s15
 8002ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (current_sample_constraint < 1) {
 8002aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <start_COM_task+0xa4>
		current_sample_constraint = 1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	double *voltage = Accumulator_Y.Voltages;
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <start_COM_task+0x14c>)
 8002ac6:	613b      	str	r3, [r7, #16]
	double *temperature = Accumulator_Y.Temperature;
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <start_COM_task+0x150>)
 8002aca:	60fb      	str	r3, [r7, #12]
	double *current = &Accumulator_Y.Current;
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <start_COM_task+0x154>)
 8002ace:	60bb      	str	r3, [r7, #8]

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8002ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ad2:	f7fd fd09 	bl	80004e8 <__aeabi_ui2d>
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	460d      	mov	r5, r1
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <start_COM_task+0x158>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd25 	bl	800052c <__aeabi_f2d>
 8002ae2:	a31f      	add	r3, pc, #124	; (adr r3, 8002b60 <start_COM_task+0x140>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fd78 	bl	80005dc <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4620      	mov	r0, r4
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd fbbc 	bl	8000270 <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fe f844 	bl	8000b8c <__aeabi_d2uiz>
 8002b04:	4603      	mov	r3, r0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 8002b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b0a:	f00f fe82 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		//LTC_acquire_data(1);
		if (!COM_voltages_ok_d(voltage, 1, voltage_sample_constraint)) {
 8002b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b10:	461a      	mov	r2, r3
 8002b12:	2101      	movs	r1, #1
 8002b14:	6938      	ldr	r0, [r7, #16]
 8002b16:	f7fe fa3f 	bl	8000f98 <COM_voltages_ok_d>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <start_COM_task+0x104>
			error();
 8002b20:	f7ff ff76 	bl	8002a10 <error>
		}

		if (!COM_temperatures_ok_d(temperature, 1,
 8002b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b26:	461a      	mov	r2, r3
 8002b28:	2101      	movs	r1, #1
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7fe faa6 	bl	800107c <COM_temperatures_ok_d>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <start_COM_task+0x11a>
				temperature_sample_constraint)) {
			error();
 8002b36:	f7ff ff6b 	bl	8002a10 <error>
		}

		if (!COM_current_ok_d(current, 1, current_sample_constraint)) {
 8002b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2101      	movs	r1, #1
 8002b40:	68b8      	ldr	r0, [r7, #8]
 8002b42:	f7fe fb0d 	bl	8001160 <COM_current_ok_d>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <start_COM_task+0x130>
			error();
 8002b4c:	f7ff ff60 	bl	8002a10 <error>
		}

		/* Wait until next period */
		next_tick += tick_increment;
 8002b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	4413      	add	r3, r2
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
		osDelayUntil(next_tick);
 8002b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5a:	f00f fe5a 	bl	8012812 <osDelayUntil>
		if (!COM_voltages_ok_d(voltage, 1, voltage_sample_constraint)) {
 8002b5e:	e7d6      	b.n	8002b0e <start_COM_task+0xee>
 8002b60:	f3cf3cf4 	.word	0xf3cf3cf4
 8002b64:	4067cf3c 	.word	0x4067cf3c
 8002b68:	20018d9c 	.word	0x20018d9c
 8002b6c:	200193e0 	.word	0x200193e0
 8002b70:	20019fb8 	.word	0x20019fb8
 8002b74:	20019fb0 	.word	0x20019fb0
 8002b78:	3d75c28f 	.word	0x3d75c28f
 8002b7c:	00000000 	.word	0x00000000

08002b80 <start_CAN_rx_task>:
	}
}

void start_CAN_rx_task(void *argument) {
 8002b80:	b5b0      	push	{r4, r5, r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <start_CAN_rx_task+0x88>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_rx_task_info.periodicity;
 8002b8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fcca 	bl	800052c <__aeabi_f2d>
 8002b98:	a319      	add	r3, pc, #100	; (adr r3, 8002c00 <start_CAN_rx_task+0x80>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f7fd fd1d 	bl	80005dc <__aeabi_dmul>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ffef 	bl	8000b8c <__aeabi_d2uiz>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_rx_task_info.offset;
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7fd fc98 	bl	80004e8 <__aeabi_ui2d>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <start_CAN_rx_task+0x8c>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcb4 	bl	800052c <__aeabi_f2d>
 8002bc4:	a30e      	add	r3, pc, #56	; (adr r3, 8002c00 <start_CAN_rx_task+0x80>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fd07 	bl	80005dc <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	f7fd fb4b 	bl	8000270 <__adddf3>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffd3 	bl	8000b8c <__aeabi_d2uiz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f00f fe11 	bl	8012812 <osDelayUntil>
		 }
		 }
		 */

		/* Wait until next period */
		next_tick += tick_increment;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f00f fe0a 	bl	8012812 <osDelayUntil>
		next_tick += tick_increment;
 8002bfe:	e7f7      	b.n	8002bf0 <start_CAN_rx_task+0x70>
 8002c00:	f3cf3cf4 	.word	0xf3cf3cf4
 8002c04:	4067cf3c 	.word	0x4067cf3c
 8002c08:	20018d9c 	.word	0x20018d9c
 8002c0c:	3de147ae 	.word	0x3de147ae

08002c10 <start_CAN_tx_task>:
	}
}

void start_CAN_tx_task(void *argument) {
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <start_CAN_tx_task+0x90>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * CAN_tx_task_info.periodicity;
 8002c1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fc82 	bl	800052c <__aeabi_f2d>
 8002c28:	a31b      	add	r3, pc, #108	; (adr r3, 8002c98 <start_CAN_tx_task+0x88>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd fcd5 	bl	80005dc <__aeabi_dmul>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	uint8_t k = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_tx_task_info.offset;
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7fd fc4e 	bl	80004e8 <__aeabi_ui2d>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	460d      	mov	r5, r1
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <start_CAN_tx_task+0x94>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fc6a 	bl	800052c <__aeabi_f2d>
 8002c58:	a30f      	add	r3, pc, #60	; (adr r3, 8002c98 <start_CAN_tx_task+0x88>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fcbd 	bl	80005dc <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f7fd fb01 	bl	8000270 <__adddf3>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd ff89 	bl	8000b8c <__aeabi_d2uiz>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f00f fdc7 	bl	8012812 <osDelayUntil>

		 tx_send_can();
		 */

		/* Wait until next period */
		next_tick += tick_increment;
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f00f fdc0 	bl	8012812 <osDelayUntil>
		next_tick += tick_increment;
 8002c92:	e7f7      	b.n	8002c84 <start_CAN_tx_task+0x74>
 8002c94:	f3af 8000 	nop.w
 8002c98:	f3cf3cf4 	.word	0xf3cf3cf4
 8002c9c:	4067cf3c 	.word	0x4067cf3c
 8002ca0:	20018d9c 	.word	0x20018d9c
 8002ca4:	3e0f5c29 	.word	0x3e0f5c29

08002ca8 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <start_CSE_task+0x90>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8002cb6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc36 	bl	800052c <__aeabi_f2d>
 8002cc0:	a31b      	add	r3, pc, #108	; (adr r3, 8002d30 <start_CSE_task+0x88>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fc89 	bl	80005dc <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff5b 	bl	8000b8c <__aeabi_d2uiz>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8002cda:	f003 fbc5 	bl	8006468 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f7fd fc02 	bl	80004e8 <__aeabi_ui2d>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	460d      	mov	r5, r1
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <start_CSE_task+0x94>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fc1e 	bl	800052c <__aeabi_f2d>
 8002cf0:	a30f      	add	r3, pc, #60	; (adr r3, 8002d30 <start_CSE_task+0x88>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fc71 	bl	80005dc <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fab5 	bl	8000270 <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff3d 	bl	8000b8c <__aeabi_d2uiz>
 8002d12:	4603      	mov	r3, r0
 8002d14:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f00f fd7b 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_step();
 8002d1c:	f002 f8a0 	bl	8004e60 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f00f fd72 	bl	8012812 <osDelayUntil>
		CSE_step();
 8002d2e:	e7f5      	b.n	8002d1c <start_CSE_task+0x74>
 8002d30:	f3cf3cf4 	.word	0xf3cf3cf4
 8002d34:	4067cf3c 	.word	0x4067cf3c
 8002d38:	20018d9c 	.word	0x20018d9c
 8002d3c:	3e2e147b 	.word	0x3e2e147b

08002d40 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b094      	sub	sp, #80	; 0x50
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002d48:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <start_COOL_task+0xe8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8002d4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fbea 	bl	800052c <__aeabi_f2d>
 8002d58:	a331      	add	r3, pc, #196	; (adr r3, 8002e20 <start_COOL_task+0xe0>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc3d 	bl	80005dc <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7fd ff0f 	bl	8000b8c <__aeabi_d2uiz>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <start_COOL_task+0xec>)
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44

	PID_initialize(&PID, // *ptr
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	eddf 2a2d 	vldr	s5, [pc, #180]	; 8002e30 <start_COOL_task+0xf0>
 8002d7e:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8002d82:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8002e34 <start_COOL_task+0xf4>
 8002d86:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8002e34 <start_COOL_task+0xf4>
 8002d8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002d8e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fb8f 	bl	80014b6 <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8002d98:	4827      	ldr	r0, [pc, #156]	; (8002e38 <start_COOL_task+0xf8>)
 8002d9a:	f7fe fa3b 	bl	8001214 <FAN_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8002d9e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002da0:	f7fd fba2 	bl	80004e8 <__aeabi_ui2d>
 8002da4:	4604      	mov	r4, r0
 8002da6:	460d      	mov	r5, r1
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <start_COOL_task+0xfc>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbbe 	bl	800052c <__aeabi_f2d>
 8002db0:	a31b      	add	r3, pc, #108	; (adr r3, 8002e20 <start_COOL_task+0xe0>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fc11 	bl	80005dc <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fa55 	bl	8000270 <__adddf3>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fd fedd 	bl	8000b8c <__aeabi_d2uiz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	osDelayUntil(next_tick);
 8002dd6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002dd8:	f00f fd1b 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		temperature = Accumulator_Y.Temperature[0];
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <start_COOL_task+0x100>)
 8002dde:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd feef 	bl	8000bcc <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44

		PID_progress(&PID, temperature);
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe faec 	bl	80013d8 <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 8002e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	480b      	ldr	r0, [pc, #44]	; (8002e38 <start_COOL_task+0xf8>)
 8002e0a:	f7fe fa2d 	bl	8001268 <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 8002e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e12:	4413      	add	r3, r2
 8002e14:	64fb      	str	r3, [r7, #76]	; 0x4c
		osDelayUntil(next_tick);
 8002e16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e18:	f00f fcfb 	bl	8012812 <osDelayUntil>
		temperature = Accumulator_Y.Temperature[0];
 8002e1c:	e7de      	b.n	8002ddc <start_COOL_task+0x9c>
 8002e1e:	bf00      	nop
 8002e20:	f3cf3cf4 	.word	0xf3cf3cf4
 8002e24:	4067cf3c 	.word	0x4067cf3c
 8002e28:	20018d9c 	.word	0x20018d9c
 8002e2c:	41a00000 	.word	0x41a00000
 8002e30:	42c80000 	.word	0x42c80000
 8002e34:	00000000 	.word	0x00000000
 8002e38:	2001934c 	.word	0x2001934c
 8002e3c:	3e6147ae 	.word	0x3e6147ae
 8002e40:	200193e0 	.word	0x200193e0
 8002e44:	00000000 	.word	0x00000000

08002e48 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <start_SIM_task+0x120>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8002e56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb66 	bl	800052c <__aeabi_f2d>
 8002e60:	a33d      	add	r3, pc, #244	; (adr r3, 8002f58 <start_SIM_task+0x110>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbb9 	bl	80005dc <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fe8b 	bl	8000b8c <__aeabi_d2uiz>
 8002e76:	4603      	mov	r3, r0
 8002e78:	60fb      	str	r3, [r7, #12]

	/* Make task-specific structures */
	Accumulator_initialize();
 8002e7a:	f001 fb23 	bl	80044c4 <Accumulator_initialize>
	uint16_t K = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	827b      	strh	r3, [r7, #18]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7fd fb30 	bl	80004e8 <__aeabi_ui2d>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	460d      	mov	r5, r1
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <start_SIM_task+0x124>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb4c 	bl	800052c <__aeabi_f2d>
 8002e94:	a330      	add	r3, pc, #192	; (adr r3, 8002f58 <start_SIM_task+0x110>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fb9f 	bl	80005dc <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f7fd f9e3 	bl	8000270 <__adddf3>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fe6b 	bl	8000b8c <__aeabi_d2uiz>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f00f fca9 	bl	8012812 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		Accumulator_U.SimCurrent = 10;
 8002ec0:	492b      	ldr	r1, [pc, #172]	; (8002f70 <start_SIM_task+0x128>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <start_SIM_task+0x12c>)
 8002ec8:	e9c1 2300 	strd	r2, r3, [r1]
		Accumulator_step();
 8002ecc:	f000 fed8 	bl	8003c80 <Accumulator_step>

		K = (1 + K) % 999;
 8002ed0:	8a7b      	ldrh	r3, [r7, #18]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <start_SIM_task+0x130>)
 8002ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8002eda:	441a      	add	r2, r3
 8002edc:	1251      	asrs	r1, r2, #9
 8002ede:	17da      	asrs	r2, r3, #31
 8002ee0:	1a8a      	subs	r2, r1, r2
 8002ee2:	f240 31e7 	movw	r1, #999	; 0x3e7
 8002ee6:	fb01 f202 	mul.w	r2, r1, r2
 8002eea:	1a9a      	subs	r2, r3, r2
 8002eec:	4613      	mov	r3, r2
 8002eee:	827b      	strh	r3, [r7, #18]
		Accumulator_Y.Temperature[0] = 40 + 30 * sin(0.001 * K);
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fb08 	bl	8000508 <__aeabi_i2d>
 8002ef8:	a319      	add	r3, pc, #100	; (adr r3, 8002f60 <start_SIM_task+0x118>)
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f7fd fb6d 	bl	80005dc <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	ec43 2b17 	vmov	d7, r2, r3
 8002f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0e:	eef0 0a67 	vmov.f32	s1, s15
 8002f12:	f013 ffb5 	bl	8016e80 <sin>
 8002f16:	ec51 0b10 	vmov	r0, r1, d0
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <start_SIM_task+0x134>)
 8002f20:	f7fd fb5c 	bl	80005dc <__aeabi_dmul>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <start_SIM_task+0x138>)
 8002f32:	f7fd f99d 	bl	8000270 <__adddf3>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4912      	ldr	r1, [pc, #72]	; (8002f84 <start_SIM_task+0x13c>)
 8002f3c:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]

		/* Wait until next period */
		next_tick += tick_increment;
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f00f fc60 	bl	8012812 <osDelayUntil>
		Accumulator_U.SimCurrent = 10;
 8002f52:	e7b5      	b.n	8002ec0 <start_SIM_task+0x78>
 8002f54:	f3af 8000 	nop.w
 8002f58:	f3cf3cf4 	.word	0xf3cf3cf4
 8002f5c:	4067cf3c 	.word	0x4067cf3c
 8002f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f64:	3f50624d 	.word	0x3f50624d
 8002f68:	20018d9c 	.word	0x20018d9c
 8002f6c:	3e6b851f 	.word	0x3e6b851f
 8002f70:	2001a198 	.word	0x2001a198
 8002f74:	40240000 	.word	0x40240000
 8002f78:	83340521 	.word	0x83340521
 8002f7c:	403e0000 	.word	0x403e0000
 8002f80:	40440000 	.word	0x40440000
 8002f84:	200193e0 	.word	0x200193e0

08002f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f9a:	f00b f8cd 	bl	800e138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40000c00 	.word	0x40000c00

08002fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fb4:	e7fe      	b.n	8002fb4 <Error_Handler+0x8>
	...

08002fb8 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <initialize_LTC+0x1c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20018db8 	.word	0x20018db8

08002fd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <MX_SPI2_Init+0x64>)
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <MX_SPI2_Init+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_SPI2_Init+0x64>)
 8002fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_SPI2_Init+0x64>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <MX_SPI2_Init+0x64>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_SPI2_Init+0x64>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <MX_SPI2_Init+0x64>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_SPI2_Init+0x64>)
 8003004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003008:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_SPI2_Init+0x64>)
 800300c:	2220      	movs	r2, #32
 800300e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <MX_SPI2_Init+0x64>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_SPI2_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <MX_SPI2_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <MX_SPI2_Init+0x64>)
 8003024:	220a      	movs	r2, #10
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_SPI2_Init+0x64>)
 800302a:	f00d fc0d 	bl	8010848 <HAL_SPI_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003034:	f7ff ffba 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20019264 	.word	0x20019264
 8003040:	40003800 	.word	0x40003800

08003044 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_SPI_MspInit+0xc0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d14a      	bne.n	80030fc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_SPI_MspInit+0xc4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030ba:	230c      	movs	r3, #12
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ca:	2305      	movs	r3, #5
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	4619      	mov	r1, r3
 80030d4:	480d      	ldr	r0, [pc, #52]	; (800310c <HAL_SPI_MspInit+0xc8>)
 80030d6:	f00c fd31 	bl	800fb3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ec:	2305      	movs	r3, #5
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4619      	mov	r1, r3
 80030f6:	4806      	ldr	r0, [pc, #24]	; (8003110 <HAL_SPI_MspInit+0xcc>)
 80030f8:	f00c fd20 	bl	800fb3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40003800 	.word	0x40003800
 8003108:	40023800 	.word	0x40023800
 800310c:	40020800 	.word	0x40020800
 8003110:	40020400 	.word	0x40020400

08003114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_MspInit+0x54>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_MspInit+0x54>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_MspInit+0x54>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_MspInit+0x54>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_MspInit+0x54>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_MspInit+0x54>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	210f      	movs	r1, #15
 8003156:	f06f 0001 	mvn.w	r0, #1
 800315a:	f00c f955 	bl	800f408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	; 0x30
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	2032      	movs	r0, #50	; 0x32
 8003182:	f00c f941 	bl	800f408 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003186:	2032      	movs	r0, #50	; 0x32
 8003188:	f00c f95a 	bl	800f440 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_InitTick+0xa4>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_InitTick+0xa4>)
 8003196:	f043 0308 	orr.w	r3, r3, #8
 800319a:	6413      	str	r3, [r2, #64]	; 0x40
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_InitTick+0xa4>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031a8:	f107 0210 	add.w	r2, r7, #16
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00d fb16 	bl	80107e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80031b8:	f00d fb00 	bl	80107bc <HAL_RCC_GetPCLK1Freq>
 80031bc:	4603      	mov	r3, r0
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <HAL_InitTick+0xa8>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0c9b      	lsrs	r3, r3, #18
 80031cc:	3b01      	subs	r3, #1
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_InitTick+0xac>)
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_InitTick+0xb0>)
 80031d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_InitTick+0xac>)
 80031d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031dc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_InitTick+0xac>)
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_InitTick+0xac>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_InitTick+0xac>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80031f0:	4809      	ldr	r0, [pc, #36]	; (8003218 <HAL_InitTick+0xac>)
 80031f2:	f00d fbb2 	bl	801095a <HAL_TIM_Base_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80031fc:	4806      	ldr	r0, [pc, #24]	; (8003218 <HAL_InitTick+0xac>)
 80031fe:	f00d fc63 	bl	8010ac8 <HAL_TIM_Base_Start_IT>
 8003202:	4603      	mov	r3, r0
 8003204:	e000      	b.n	8003208 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	3730      	adds	r7, #48	; 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	431bde83 	.word	0x431bde83
 8003218:	200192bc 	.word	0x200192bc
 800321c:	40000c00 	.word	0x40000c00

08003220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003224:	e7fe      	b.n	8003224 <NMI_Handler+0x4>

08003226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322a:	e7fe      	b.n	800322a <HardFault_Handler+0x4>

0800322c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <MemManage_Handler+0x4>

08003232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <BusFault_Handler+0x4>

08003238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800323c:	e7fe      	b.n	800323c <UsageFault_Handler+0x4>

0800323e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003250:	4802      	ldr	r0, [pc, #8]	; (800325c <ADC_IRQHandler+0x10>)
 8003252:	f00a ffd4 	bl	800e1fe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20018c68 	.word	0x20018c68

08003260 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <CAN1_TX_IRQHandler+0x10>)
 8003266:	f00b fdde 	bl	800ee26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20018d38 	.word	0x20018d38

08003274 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <CAN1_RX0_IRQHandler+0x10>)
 800327a:	f00b fdd4 	bl	800ee26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20018d38 	.word	0x20018d38

08003288 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <CAN1_RX1_IRQHandler+0x10>)
 800328e:	f00b fdca 	bl	800ee26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20018d38 	.word	0x20018d38

0800329c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <TIM2_IRQHandler+0x10>)
 80032a2:	f00e f801 	bl	80112a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20019394 	.word	0x20019394

080032b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <TIM3_IRQHandler+0x10>)
 80032b6:	f00d fff7 	bl	80112a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20019304 	.word	0x20019304

080032c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <TIM5_IRQHandler+0x10>)
 80032ca:	f00d ffed 	bl	80112a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200192bc 	.word	0x200192bc

080032d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <DMA2_Stream0_IRQHandler+0x10>)
 80032de:	f00c f9c3 	bl	800f668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20018cb0 	.word	0x20018cb0

080032ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <SystemInit+0x20>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <SystemInit+0x20>)
 80032f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b096      	sub	sp, #88	; 0x58
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	615a      	str	r2, [r3, #20]
 8003340:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	2220      	movs	r2, #32
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f013 fbf5 	bl	8016b38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800334e:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <MX_TIM1_Init+0x138>)
 8003350:	4a3e      	ldr	r2, [pc, #248]	; (800344c <MX_TIM1_Init+0x13c>)
 8003352:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <MX_TIM1_Init+0x138>)
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <MX_TIM1_Init+0x138>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <MX_TIM1_Init+0x138>)
 8003362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003366:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <MX_TIM1_Init+0x138>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <MX_TIM1_Init+0x138>)
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <MX_TIM1_Init+0x138>)
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800337a:	4833      	ldr	r0, [pc, #204]	; (8003448 <MX_TIM1_Init+0x138>)
 800337c:	f00d faed 	bl	801095a <HAL_TIM_Base_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003386:	f7ff fe11 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003394:	4619      	mov	r1, r3
 8003396:	482c      	ldr	r0, [pc, #176]	; (8003448 <MX_TIM1_Init+0x138>)
 8003398:	f00e f9ec 	bl	8011774 <HAL_TIM_ConfigClockSource>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80033a2:	f7ff fe03 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033a6:	4828      	ldr	r0, [pc, #160]	; (8003448 <MX_TIM1_Init+0x138>)
 80033a8:	f00d fbfe 	bl	8010ba8 <HAL_TIM_PWM_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80033b2:	f7ff fdfb 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033c2:	4619      	mov	r1, r3
 80033c4:	4820      	ldr	r0, [pc, #128]	; (8003448 <MX_TIM1_Init+0x138>)
 80033c6:	f00f f80d 	bl	80123e4 <HAL_TIMEx_MasterConfigSynchronization>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80033d0:	f7ff fdec 	bl	8002fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033d4:	2360      	movs	r3, #96	; 0x60
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033e0:	2300      	movs	r3, #0
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f4:	2208      	movs	r2, #8
 80033f6:	4619      	mov	r1, r3
 80033f8:	4813      	ldr	r0, [pc, #76]	; (8003448 <MX_TIM1_Init+0x138>)
 80033fa:	f00e f8f9 	bl	80115f0 <HAL_TIM_PWM_ConfigChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003404:	f7ff fdd2 	bl	8002fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800341c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003420:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4807      	ldr	r0, [pc, #28]	; (8003448 <MX_TIM1_Init+0x138>)
 800342c:	f00f f856 	bl	80124dc <HAL_TIMEx_ConfigBreakDeadTime>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003436:	f7ff fdb9 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800343a:	4803      	ldr	r0, [pc, #12]	; (8003448 <MX_TIM1_Init+0x138>)
 800343c:	f000 f974 	bl	8003728 <HAL_TIM_MspPostInit>

}
 8003440:	bf00      	nop
 8003442:	3758      	adds	r7, #88	; 0x58
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	2001934c 	.word	0x2001934c
 800344c:	40010000 	.word	0x40010000

08003450 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b090      	sub	sp, #64	; 0x40
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <MX_TIM2_Init+0x134>)
 800348c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <MX_TIM2_Init+0x134>)
 8003494:	2200      	movs	r2, #0
 8003496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <MX_TIM2_Init+0x134>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <MX_TIM2_Init+0x134>)
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <MX_TIM2_Init+0x134>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <MX_TIM2_Init+0x134>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034b2:	4834      	ldr	r0, [pc, #208]	; (8003584 <MX_TIM2_Init+0x134>)
 80034b4:	f00d fa51 	bl	801095a <HAL_TIM_Base_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80034be:	f7ff fd75 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034cc:	4619      	mov	r1, r3
 80034ce:	482d      	ldr	r0, [pc, #180]	; (8003584 <MX_TIM2_Init+0x134>)
 80034d0:	f00e f950 	bl	8011774 <HAL_TIM_ConfigClockSource>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80034da:	f7ff fd67 	bl	8002fac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80034de:	4829      	ldr	r0, [pc, #164]	; (8003584 <MX_TIM2_Init+0x134>)
 80034e0:	f00d fc84 	bl	8010dec <HAL_TIM_IC_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80034ea:	f7ff fd5f 	bl	8002fac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80034ee:	2304      	movs	r3, #4
 80034f0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80034f2:	2350      	movs	r3, #80	; 0x50
 80034f4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	481e      	ldr	r0, [pc, #120]	; (8003584 <MX_TIM2_Init+0x134>)
 800350a:	f00e f9fa 	bl	8011902 <HAL_TIM_SlaveConfigSynchro>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8003514:	f7ff fd4a 	bl	8002fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800351c:	2301      	movs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	2200      	movs	r2, #0
 800352e:	4619      	mov	r1, r3
 8003530:	4814      	ldr	r0, [pc, #80]	; (8003584 <MX_TIM2_Init+0x134>)
 8003532:	f00d ffc1 	bl	80114b8 <HAL_TIM_IC_ConfigChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800353c:	f7ff fd36 	bl	8002fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003540:	2302      	movs	r3, #2
 8003542:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003544:	2302      	movs	r3, #2
 8003546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	2204      	movs	r2, #4
 800354e:	4619      	mov	r1, r3
 8003550:	480c      	ldr	r0, [pc, #48]	; (8003584 <MX_TIM2_Init+0x134>)
 8003552:	f00d ffb1 	bl	80114b8 <HAL_TIM_IC_ConfigChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800355c:	f7ff fd26 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_TIM2_Init+0x134>)
 800356e:	f00e ff39 	bl	80123e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8003578:	f7ff fd18 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800357c:	bf00      	nop
 800357e:	3740      	adds	r7, #64	; 0x40
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20019394 	.word	0x20019394

08003588 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359c:	463b      	mov	r3, r7
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <MX_TIM3_Init+0x94>)
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <MX_TIM3_Init+0x98>)
 80035a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <MX_TIM3_Init+0x94>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <MX_TIM3_Init+0x94>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <MX_TIM3_Init+0x94>)
 80035b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <MX_TIM3_Init+0x94>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <MX_TIM3_Init+0x94>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ca:	4814      	ldr	r0, [pc, #80]	; (800361c <MX_TIM3_Init+0x94>)
 80035cc:	f00d f9c5 	bl	801095a <HAL_TIM_Base_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80035d6:	f7ff fce9 	bl	8002fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035e0:	f107 0308 	add.w	r3, r7, #8
 80035e4:	4619      	mov	r1, r3
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <MX_TIM3_Init+0x94>)
 80035e8:	f00e f8c4 	bl	8011774 <HAL_TIM_ConfigClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80035f2:	f7ff fcdb 	bl	8002fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035f6:	2320      	movs	r3, #32
 80035f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035fe:	463b      	mov	r3, r7
 8003600:	4619      	mov	r1, r3
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM3_Init+0x94>)
 8003604:	f00e feee 	bl	80123e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800360e:	f7ff fccd 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20019304 	.word	0x20019304
 8003620:	40000400 	.word	0x40000400

08003624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a35      	ldr	r2, [pc, #212]	; (8003718 <HAL_TIM_Base_MspInit+0xf4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003662:	e055      	b.n	8003710 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d135      	bne.n	80036da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 80036a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b8:	2301      	movs	r3, #1
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4619      	mov	r1, r3
 80036c2:	4817      	ldr	r0, [pc, #92]	; (8003720 <HAL_TIM_Base_MspInit+0xfc>)
 80036c4:	f00c fa3a 	bl	800fb3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2105      	movs	r1, #5
 80036cc:	201c      	movs	r0, #28
 80036ce:	f00b fe9b 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d2:	201c      	movs	r0, #28
 80036d4:	f00b feb4 	bl	800f440 <HAL_NVIC_EnableIRQ>
}
 80036d8:	e01a      	b.n	8003710 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_TIM_Base_MspInit+0x100>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d115      	bne.n	8003710 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_TIM_Base_MspInit+0xf8>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2105      	movs	r1, #5
 8003704:	201d      	movs	r0, #29
 8003706:	f00b fe7f 	bl	800f408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800370a:	201d      	movs	r0, #29
 800370c:	f00b fe98 	bl	800f440 <HAL_NVIC_EnableIRQ>
}
 8003710:	bf00      	nop
 8003712:	3730      	adds	r7, #48	; 0x30
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40010000 	.word	0x40010000
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000
 8003724:	40000400 	.word	0x40000400

08003728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a12      	ldr	r2, [pc, #72]	; (8003790 <HAL_TIM_MspPostInit+0x68>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11e      	bne.n	8003788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 8003754:	f043 0310 	orr.w	r3, r3, #16
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_TIM_MspPostInit+0x6c>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8003766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800376a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4619      	mov	r1, r3
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <HAL_TIM_MspPostInit+0x70>)
 8003784:	f00c f9da 	bl	800fb3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40010000 	.word	0x40010000
 8003794:	40023800 	.word	0x40023800
 8003798:	40021000 	.word	0x40021000

0800379c <Accumulator_rand>:
ExtY_Accumulator_T Accumulator_Y;
static RT_MODEL_Accumulator_T Accumulator_M_;
RT_MODEL_Accumulator_T *const Accumulator_M = &Accumulator_M_;
static real_T Accumulator_rand(void);
static real_T Accumulator_rand(void)
{
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b08e      	sub	sp, #56	; 0x38
 80037a0:	af00      	add	r7, sp, #0
  real_T r;
  int32_T i;
  int32_T kk;
  uint32_T u[2];
  switch (Accumulator_DW.method) {
 80037a2:	4baf      	ldr	r3, [pc, #700]	; (8003a60 <Accumulator_rand+0x2c4>)
 80037a4:	f8d3 3be8 	ldr.w	r3, [r3, #3048]	; 0xbe8
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d002      	beq.n	80037b2 <Accumulator_rand+0x16>
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d040      	beq.n	8003832 <Accumulator_rand+0x96>
 80037b0:	e073      	b.n	800389a <Accumulator_rand+0xfe>
   case 4U:
    {
      uint32_T c_r;
      uint32_T y;
      i = (int32_T)(Accumulator_DW.state / 127773U);
 80037b2:	4bab      	ldr	r3, [pc, #684]	; (8003a60 <Accumulator_rand+0x2c4>)
 80037b4:	f8d3 2bec 	ldr.w	r2, [r3, #3052]	; 0xbec
 80037b8:	4baa      	ldr	r3, [pc, #680]	; (8003a64 <Accumulator_rand+0x2c8>)
 80037ba:	fba3 1302 	umull	r1, r3, r3, r2
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	0852      	lsrs	r2, r2, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      c_r = (Accumulator_DW.state - i * 127773U) * 16807U;
 80037c8:	4ba5      	ldr	r3, [pc, #660]	; (8003a60 <Accumulator_rand+0x2c4>)
 80037ca:	f8d3 2bec 	ldr.w	r2, [r3, #3052]	; 0xbec
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	49a5      	ldr	r1, [pc, #660]	; (8003a68 <Accumulator_rand+0x2cc>)
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f244 12a7 	movw	r2, #16807	; 0x41a7
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
      y = 2836U * i;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	f640 3214 	movw	r2, #2836	; 0xb14
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	60fb      	str	r3, [r7, #12]
      if (c_r < y) {
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d207      	bcs.n	8003806 <Accumulator_rand+0x6a>
        c_r = ~(y - c_r) & 2147483647U;
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e003      	b.n	800380e <Accumulator_rand+0x72>
      } else {
        c_r -= y;
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      r = (real_T)c_r * 4.6566128752457969E-10;
 800380e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003810:	f7fc fe6a 	bl	80004e8 <__aeabi_ui2d>
 8003814:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003818:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800381c:	f7fc fede 	bl	80005dc <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      Accumulator_DW.state = c_r;
 8003828:	4a8d      	ldr	r2, [pc, #564]	; (8003a60 <Accumulator_rand+0x2c4>)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f8c2 3bec 	str.w	r3, [r2, #3052]	; 0xbec
    }
    break;
 8003830:	e20c      	b.n	8003c4c <Accumulator_rand+0x4b0>

   case 5U:
    {
      uint32_T c_r;
      uint32_T y;
      c_r = 69069U * Accumulator_DW.state_c[0] + 1234567U;
 8003832:	4b8b      	ldr	r3, [pc, #556]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003834:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 8003838:	4a8c      	ldr	r2, [pc, #560]	; (8003a6c <Accumulator_rand+0x2d0>)
 800383a:	fb02 f203 	mul.w	r2, r2, r3
 800383e:	4b8c      	ldr	r3, [pc, #560]	; (8003a70 <Accumulator_rand+0x2d4>)
 8003840:	4413      	add	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
      y = Accumulator_DW.state_c[1] << 13 ^ Accumulator_DW.state_c[1];
 8003844:	4b86      	ldr	r3, [pc, #536]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003846:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800384a:	035a      	lsls	r2, r3, #13
 800384c:	4b84      	ldr	r3, [pc, #528]	; (8003a60 <Accumulator_rand+0x2c4>)
 800384e:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8003852:	4053      	eors	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      y ^= y >> 17;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	0c5b      	lsrs	r3, r3, #17
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4053      	eors	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
      y ^= y << 5;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4053      	eors	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
      Accumulator_DW.state_c[0] = c_r;
 800386a:	4a7d      	ldr	r2, [pc, #500]	; (8003a60 <Accumulator_rand+0x2c4>)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f8c2 3bf0 	str.w	r3, [r2, #3056]	; 0xbf0
      Accumulator_DW.state_c[1] = y;
 8003872:	4a7b      	ldr	r2, [pc, #492]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f8c2 3bf4 	str.w	r3, [r2, #3060]	; 0xbf4
      r = (real_T)(c_r + y) * 2.328306436538696E-10;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fe31 	bl	80004e8 <__aeabi_ui2d>
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <Accumulator_rand+0x2d8>)
 800388c:	f7fc fea6 	bl	80005dc <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }
    break;
 8003898:	e1d8      	b.n	8003c4c <Accumulator_rand+0x4b0>

   default:
    {
      uint32_T c_r;
      if (!Accumulator_DW.state_not_empty) {
 800389a:	4b71      	ldr	r3, [pc, #452]	; (8003a60 <Accumulator_rand+0x2c4>)
 800389c:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80038a0:	331c      	adds	r3, #28
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d138      	bne.n	800391a <Accumulator_rand+0x17e>
        memset(&Accumulator_DW.state_g[0], 0, 625U * sizeof(uint32_T));
 80038a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038ac:	2100      	movs	r1, #0
 80038ae:	4872      	ldr	r0, [pc, #456]	; (8003a78 <Accumulator_rand+0x2dc>)
 80038b0:	f013 f942 	bl	8016b38 <memset>
        c_r = 5489U;
 80038b4:	f241 5371 	movw	r3, #5489	; 0x1571
 80038b8:	623b      	str	r3, [r7, #32]
        Accumulator_DW.state_g[0] = 5489U;
 80038ba:	4b69      	ldr	r3, [pc, #420]	; (8003a60 <Accumulator_rand+0x2c4>)
 80038bc:	f241 5271 	movw	r2, #5489	; 0x1571
 80038c0:	f8c3 2bf8 	str.w	r2, [r3, #3064]	; 0xbf8
        for (i = 0; i < 623; i++) {
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c8:	e015      	b.n	80038f6 <Accumulator_rand+0x15a>
          c_r = ((c_r >> 30U ^ c_r) * 1812433253U + i) + 1U;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	0f9a      	lsrs	r2, r3, #30
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	4053      	eors	r3, r2
 80038d2:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <Accumulator_rand+0x2e0>)
 80038d4:	fb02 f203 	mul.w	r2, r2, r3
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	4413      	add	r3, r2
 80038dc:	3301      	adds	r3, #1
 80038de:	623b      	str	r3, [r7, #32]
          Accumulator_DW.state_g[i + 1] = c_r;
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	3301      	adds	r3, #1
 80038e4:	495e      	ldr	r1, [pc, #376]	; (8003a60 <Accumulator_rand+0x2c4>)
 80038e6:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < 623; i++) {
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	3301      	adds	r3, #1
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	f240 226e 	movw	r2, #622	; 0x26e
 80038fc:	4293      	cmp	r3, r2
 80038fe:	dde4      	ble.n	80038ca <Accumulator_rand+0x12e>
        }

        Accumulator_DW.state_g[624] = 624U;
 8003900:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003902:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003906:	3318      	adds	r3, #24
 8003908:	f44f 721c 	mov.w	r2, #624	; 0x270
 800390c:	601a      	str	r2, [r3, #0]
        Accumulator_DW.state_not_empty = true;
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003910:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003914:	331c      	adds	r3, #28
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
      /*  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
      /*                                                                         */
      /* =============================   END   ================================= */
      int32_T exitg1;
      do {
        exitg1 = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 2; i++) {
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003922:	e0f1      	b.n	8003b08 <Accumulator_rand+0x36c>
          uint32_T y;
          c_r = Accumulator_DW.state_g[624] + 1U;
 8003924:	4b4e      	ldr	r3, [pc, #312]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003926:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 800392a:	3318      	adds	r3, #24
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	623b      	str	r3, [r7, #32]
          if (Accumulator_DW.state_g[624] + 1U >= 625U) {
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003934:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003938:	3318      	adds	r3, #24
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003942:	f240 80b2 	bls.w	8003aaa <Accumulator_rand+0x30e>
            for (kk = 0; kk < 227; kk++) {
 8003946:	2300      	movs	r3, #0
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
 800394a:	e033      	b.n	80039b4 <Accumulator_rand+0x218>
              c_r = (Accumulator_DW.state_g[kk + 1] & 2147483647U) |
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	3301      	adds	r3, #1
 8003950:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003952:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
                (Accumulator_DW.state_g[kk] & 2147483648U);
 800395e:	4940      	ldr	r1, [pc, #256]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003966:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800396a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
              c_r = (Accumulator_DW.state_g[kk + 1] & 2147483647U) |
 800396e:	4313      	orrs	r3, r2
 8003970:	623b      	str	r3, [r7, #32]
              if ((c_r & 1U) == 0U) {
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <Accumulator_rand+0x1e8>
                c_r >>= 1U;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e004      	b.n	800398e <Accumulator_rand+0x1f2>
              } else {
                c_r = c_r >> 1U ^ 2567483615U;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	085a      	lsrs	r2, r3, #1
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <Accumulator_rand+0x2e4>)
 800398a:	4053      	eors	r3, r2
 800398c:	623b      	str	r3, [r7, #32]
              }

              Accumulator_DW.state_g[kk] = Accumulator_DW.state_g[kk + 397] ^
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	f203 138d 	addw	r3, r3, #397	; 0x18d
 8003994:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003996:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800399a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	405a      	eors	r2, r3
 80039a2:	492f      	ldr	r1, [pc, #188]	; (8003a60 <Accumulator_rand+0x2c4>)
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (kk = 0; kk < 227; kk++) {
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	3301      	adds	r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2be2      	cmp	r3, #226	; 0xe2
 80039b8:	ddc8      	ble.n	800394c <Accumulator_rand+0x1b0>
                c_r;
            }

            for (kk = 0; kk < 396; kk++) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	e033      	b.n	8003a28 <Accumulator_rand+0x28c>
              c_r = (Accumulator_DW.state_g[kk + 227] & 2147483648U) |
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	33e3      	adds	r3, #227	; 0xe3
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <Accumulator_rand+0x2c4>)
 80039c6:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
                (Accumulator_DW.state_g[kk + 228] & 2147483647U);
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	33e4      	adds	r3, #228	; 0xe4
 80039d6:	4922      	ldr	r1, [pc, #136]	; (8003a60 <Accumulator_rand+0x2c4>)
 80039d8:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80039dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
              c_r = (Accumulator_DW.state_g[kk + 227] & 2147483648U) |
 80039e4:	4313      	orrs	r3, r2
 80039e6:	623b      	str	r3, [r7, #32]
              if ((c_r & 1U) == 0U) {
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <Accumulator_rand+0x25e>
                c_r >>= 1U;
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	e004      	b.n	8003a04 <Accumulator_rand+0x268>
              } else {
                c_r = c_r >> 1U ^ 2567483615U;
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	085a      	lsrs	r2, r3, #1
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <Accumulator_rand+0x2e4>)
 8003a00:	4053      	eors	r3, r2
 8003a02:	623b      	str	r3, [r7, #32]
              }

              Accumulator_DW.state_g[kk + 227] = Accumulator_DW.state_g[kk] ^
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003a0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	33e3      	adds	r3, #227	; 0xe3
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	404a      	eors	r2, r1
 8003a18:	4911      	ldr	r1, [pc, #68]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003a1a:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (kk = 0; kk < 396; kk++) {
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	3301      	adds	r3, #1
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8003a2e:	dbc7      	blt.n	80039c0 <Accumulator_rand+0x224>
                c_r;
            }

            c_r = (Accumulator_DW.state_g[623] & 2147483648U) |
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003a32:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003a36:	3314      	adds	r3, #20
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
              (Accumulator_DW.state_g[0] & 2147483647U);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <Accumulator_rand+0x2c4>)
 8003a40:	f8d3 3bf8 	ldr.w	r3, [r3, #3064]	; 0xbf8
 8003a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
            c_r = (Accumulator_DW.state_g[623] & 2147483648U) |
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	623b      	str	r3, [r7, #32]
            if ((c_r & 1U) == 0U) {
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <Accumulator_rand+0x2e8>
              c_r >>= 1U;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	e017      	b.n	8003a8e <Accumulator_rand+0x2f2>
 8003a5e:	bf00      	nop
 8003a60:	2001a5c0 	.word	0x2001a5c0
 8003a64:	069c16bd 	.word	0x069c16bd
 8003a68:	0001f31d 	.word	0x0001f31d
 8003a6c:	00010dcd 	.word	0x00010dcd
 8003a70:	0012d687 	.word	0x0012d687
 8003a74:	3defffff 	.word	0x3defffff
 8003a78:	2001b1b8 	.word	0x2001b1b8
 8003a7c:	6c078965 	.word	0x6c078965
 8003a80:	9908b0df 	.word	0x9908b0df
            } else {
              c_r = c_r >> 1U ^ 2567483615U;
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	085a      	lsrs	r2, r3, #1
 8003a88:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <Accumulator_rand+0x4c8>)
 8003a8a:	4053      	eors	r3, r2
 8003a8c:	623b      	str	r3, [r7, #32]
            }

            Accumulator_DW.state_g[623] = Accumulator_DW.state_g[396] ^ c_r;
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003a90:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003a94:	3308      	adds	r3, #8
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	405a      	eors	r2, r3
 8003a9c:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003a9e:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	601a      	str	r2, [r3, #0]
            c_r = 1U;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
          }

          y = Accumulator_DW.state_g[(int32_T)c_r - 1];
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003ab0:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	60bb      	str	r3, [r7, #8]
          Accumulator_DW.state_g[624] = c_r;
 8003aba:	4b6b      	ldr	r3, [pc, #428]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003abc:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	601a      	str	r2, [r3, #0]
          y ^= y >> 11U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	0adb      	lsrs	r3, r3, #11
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4053      	eors	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
          y ^= y << 7U & 2636928640U;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	01da      	lsls	r2, r3, #7
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <Accumulator_rand+0x4d0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4053      	eors	r3, r2
 8003adc:	60bb      	str	r3, [r7, #8]
          y ^= y << 15U & 4022730752U;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	03da      	lsls	r2, r3, #15
 8003ae2:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <Accumulator_rand+0x4d4>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4053      	eors	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
          u[i] = y >> 18U ^ y;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0c9a      	lsrs	r2, r3, #18
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	405a      	eors	r2, r3
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003afc:	440b      	add	r3, r1
 8003afe:	f843 2c38 	str.w	r2, [r3, #-56]
        for (i = 0; i < 2; i++) {
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	3301      	adds	r3, #1
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	f77f af0a 	ble.w	8003924 <Accumulator_rand+0x188>
        }

        r = ((real_T)(u[0] >> 5U) * 6.7108864E+7 + (real_T)(u[1] >> 6U)) *
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fc fce7 	bl	80004e8 <__aeabi_ui2d>
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	4b55      	ldr	r3, [pc, #340]	; (8003c74 <Accumulator_rand+0x4d8>)
 8003b20:	f7fc fd5c 	bl	80005dc <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fcd9 	bl	80004e8 <__aeabi_ui2d>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	f7fc fb97 	bl	8000270 <__adddf3>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	; (8003c78 <Accumulator_rand+0x4dc>)
 8003b50:	f7fc fd44 	bl	80005dc <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
          1.1102230246251565E-16;
        if (r == 0.0) {
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b68:	f7fc ffa0 	bl	8000aac <__aeabi_dcmpeq>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d065      	beq.n	8003c3e <Accumulator_rand+0x4a2>
          boolean_T b_isvalid;
          b_isvalid = ((Accumulator_DW.state_g[624] >= 1U) &&
 8003b72:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003b74:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003b78:	3318      	adds	r3, #24
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <Accumulator_rand+0x3f8>
                       (Accumulator_DW.state_g[624] < 625U));
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003b82:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003b86:	3318      	adds	r3, #24
 8003b88:	681b      	ldr	r3, [r3, #0]
          b_isvalid = ((Accumulator_DW.state_g[624] >= 1U) &&
 8003b8a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003b8e:	d801      	bhi.n	8003b94 <Accumulator_rand+0x3f8>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <Accumulator_rand+0x3fa>
 8003b94:	2300      	movs	r3, #0
 8003b96:	76fb      	strb	r3, [r7, #27]
          if (b_isvalid) {
 8003b98:	7efb      	ldrb	r3, [r7, #27]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01e      	beq.n	8003bdc <Accumulator_rand+0x440>
            boolean_T exitg2;
            b_isvalid = false;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	76fb      	strb	r3, [r7, #27]
            i = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
            exitg2 = false;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	76bb      	strb	r3, [r7, #26]
            while ((!exitg2) && (i < 625)) {
 8003baa:	e010      	b.n	8003bce <Accumulator_rand+0x432>
              if (Accumulator_DW.state_g[i - 1] == 0U) {
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003bb2:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <Accumulator_rand+0x42a>
                i++;
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc4:	e003      	b.n	8003bce <Accumulator_rand+0x432>
              } else {
                b_isvalid = true;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	76fb      	strb	r3, [r7, #27]
                exitg2 = true;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	76bb      	strb	r3, [r7, #26]
            while ((!exitg2) && (i < 625)) {
 8003bce:	7ebb      	ldrb	r3, [r7, #26]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <Accumulator_rand+0x440>
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003bda:	dde7      	ble.n	8003bac <Accumulator_rand+0x410>
              }
            }
          }

          if (!b_isvalid) {
 8003bdc:	7efb      	ldrb	r3, [r7, #27]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d12f      	bne.n	8003c42 <Accumulator_rand+0x4a6>
            c_r = 5489U;
 8003be2:	f241 5371 	movw	r3, #5489	; 0x1571
 8003be6:	623b      	str	r3, [r7, #32]
            Accumulator_DW.state_g[0] = 5489U;
 8003be8:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003bea:	f241 5271 	movw	r2, #5489	; 0x1571
 8003bee:	f8c3 2bf8 	str.w	r2, [r3, #3064]	; 0xbf8
            for (i = 0; i < 623; i++) {
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf6:	e015      	b.n	8003c24 <Accumulator_rand+0x488>
              c_r = ((c_r >> 30U ^ c_r) * 1812433253U + i) + 1U;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	0f9a      	lsrs	r2, r3, #30
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	4053      	eors	r3, r2
 8003c00:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <Accumulator_rand+0x4e0>)
 8003c02:	fb02 f203 	mul.w	r2, r2, r3
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	4413      	add	r3, r2
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	623b      	str	r3, [r7, #32]
              Accumulator_DW.state_g[i + 1] = c_r;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	3301      	adds	r3, #1
 8003c12:	4915      	ldr	r1, [pc, #84]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003c14:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003c18:	6a3a      	ldr	r2, [r7, #32]
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (i = 0; i < 623; i++) {
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	3301      	adds	r3, #1
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	f240 226e 	movw	r2, #622	; 0x26e
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	dde4      	ble.n	8003bf8 <Accumulator_rand+0x45c>
            }

            Accumulator_DW.state_g[624] = 624U;
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <Accumulator_rand+0x4cc>)
 8003c30:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8003c34:	3318      	adds	r3, #24
 8003c36:	f44f 721c 	mov.w	r2, #624	; 0x270
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e001      	b.n	8003c42 <Accumulator_rand+0x4a6>
          }
        } else {
          exitg1 = 1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
        }
      } while (exitg1 == 0);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f43f ae68 	beq.w	800391a <Accumulator_rand+0x17e>
    }
    break;
 8003c4a:	bf00      	nop
  }

  return r;
 8003c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c50:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c54:	eeb0 0a47 	vmov.f32	s0, s14
 8003c58:	eef0 0a67 	vmov.f32	s1, s15
 8003c5c:	3738      	adds	r7, #56	; 0x38
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	9908b0df 	.word	0x9908b0df
 8003c68:	2001a5c0 	.word	0x2001a5c0
 8003c6c:	9d2c5680 	.word	0x9d2c5680
 8003c70:	efc60000 	.word	0xefc60000
 8003c74:	41900000 	.word	0x41900000
 8003c78:	3ca00000 	.word	0x3ca00000
 8003c7c:	6c078965 	.word	0x6c078965

08003c80 <Accumulator_step>:

void Accumulator_step(void)
{
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	f6ad 7df4 	subw	sp, sp, #4084	; 0xff4
 8003c88:	af00      	add	r7, sp, #0
  real_T rtb_Switch[126];
  real_T rtb_Divide_a;
  real_T rtb_Memory3;
  real_T rtb_tauz;
  int32_T i;
  rtb_Memory3 = Accumulator_DW.Memory3_PreviousInput;
 8003c8a:	4ba7      	ldr	r3, [pc, #668]	; (8003f28 <Accumulator_step+0x2a8>)
 8003c8c:	e9d3 23fc 	ldrd	r2, r3, [r3, #1008]	; 0x3f0
 8003c90:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003c94:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003c9e:	e133      	b.n	8003f08 <Accumulator_step+0x288>
    real_T a;
    real_T rtb_Rsz_m;
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003ca0:	4aa1      	ldr	r2, [pc, #644]	; (8003f28 <Accumulator_step+0x2a8>)
 8003ca2:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003ca6:	337f      	adds	r3, #127	; 0x7f
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	e9d3 0100 	ldrd	r0, r1, [r3]
      Accumulator_DW.Memory2_PreviousInput[i];
 8003cb0:	4a9d      	ldr	r2, [pc, #628]	; (8003f28 <Accumulator_step+0x2a8>)
 8003cb2:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003cb6:	33fd      	adds	r3, #253	; 0xfd
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Divide_a = Accumulator_DW.Memory_PreviousInput[i] /
 8003cc0:	f7fc fdb6 	bl	8000830 <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 8003ccc:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc, Accumulator_P.Rs,
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	4996      	ldr	r1, [pc, #600]	; (8003f2c <Accumulator_step+0x2ac>)
 8003cd4:	4896      	ldr	r0, [pc, #600]	; (8003f30 <Accumulator_step+0x2b0>)
 8003cd6:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003cda:	ed93 0b00 	vldr	d0, [r3]
 8003cde:	f004 fd2d 	bl	800873c <look1_binlxpw>
 8003ce2:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003ce6:	ed83 0b00 	vstr	d0, [r3]
      12U);
    rtb_tauz = look1_binlxpw(rtb_Divide_a, Accumulator_P.soc, Accumulator_P.tau,
 8003cea:	220c      	movs	r2, #12
 8003cec:	4991      	ldr	r1, [pc, #580]	; (8003f34 <Accumulator_step+0x2b4>)
 8003cee:	4890      	ldr	r0, [pc, #576]	; (8003f30 <Accumulator_step+0x2b0>)
 8003cf0:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003cf4:	ed93 0b00 	vldr	d0, [r3]
 8003cf8:	f004 fd20 	bl	800873c <look1_binlxpw>
 8003cfc:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d00:	ed83 0b00 	vstr	d0, [r3]
      12U);
    a = rtb_Rsz_m * rtb_tauz;
 8003d04:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d14:	f7fc fc62 	bl	80005dc <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	f507 617c 	add.w	r1, r7, #4032	; 0xfc0
 8003d20:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003d24:	220c      	movs	r2, #12
 8003d26:	4984      	ldr	r1, [pc, #528]	; (8003f38 <Accumulator_step+0x2b8>)
 8003d28:	4881      	ldr	r0, [pc, #516]	; (8003f30 <Accumulator_step+0x2b0>)
 8003d2a:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003d2e:	ed93 0b00 	vldr	d0, [r3]
 8003d32:	f004 fd03 	bl	800873c <look1_binlxpw>
 8003d36:	ec51 0b10 	vmov	r0, r1, d0
 8003d3a:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc fa95 	bl	8000270 <__adddf3>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
      Accumulator_P.Rp, 12U)) * Accumulator_P.Ts_sim;
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <Accumulator_step+0x2bc>)
 8003d50:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    rtb_Rsz_m = (rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003d54:	f7fc fc42 	bl	80005dc <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003d60:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 8003d64:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8003d68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	f7fc fa7e 	bl	8000270 <__adddf3>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fa74 	bl	8000270 <__adddf3>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <Accumulator_step+0x2c0>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc21 	bl	80005dc <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4690      	mov	r8, r2
 8003da0:	4699      	mov	r9, r3
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 8003da2:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8003da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	f7fc fa5f 	bl	8000270 <__adddf3>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dbe:	f7fc fa55 	bl	800026c <__aeabi_dsub>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fc03 	bl	80005dc <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	f7fc fa47 	bl	8000270 <__adddf3>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4692      	mov	sl, r2
 8003de8:	469b      	mov	fp, r3
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 8003dea:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <Accumulator_step+0x2bc>)
 8003dec:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8003df0:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	f7fc fa38 	bl	8000270 <__adddf3>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4640      	mov	r0, r8
 8003e06:	4649      	mov	r1, r9
 8003e08:	f7fc fa30 	bl	800026c <__aeabi_dsub>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 8003e14:	4a44      	ldr	r2, [pc, #272]	; (8003f28 <Accumulator_step+0x2a8>)
 8003e16:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
      - 2.0 * a) * rtb_Memory3) - (Accumulator_P.Ts_sim - 2.0 * rtb_tauz) *
 8003e22:	f7fc fbdb 	bl	80005dc <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	f7fc fa1d 	bl	800026c <__aeabi_dsub>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4690      	mov	r8, r2
 8003e38:	4699      	mov	r9, r3
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 8003e3a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	f7fc fa13 	bl	8000270 <__adddf3>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
      Accumulator_P.Ts_sim);
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <Accumulator_step+0x2bc>)
 8003e54:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
                 Accumulator_DW.Memory4_PreviousInput[i]) / (2.0 * rtb_tauz +
 8003e58:	f7fc fa0a 	bl	8000270 <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
    rtb_Rsz_m = (((2.0 * a + rtb_Rsz_m) * Accumulator_U.SimCurrent + (rtb_Rsz_m
 8003e60:	4640      	mov	r0, r8
 8003e62:	4649      	mov	r1, r9
 8003e64:	f7fc fce4 	bl	8000830 <__aeabi_ddiv>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_tauz = rtb_Rsz_m + look1_binlxpw(rtb_Divide_a, Accumulator_P.soc,
 8003e74:	220c      	movs	r2, #12
 8003e76:	4933      	ldr	r1, [pc, #204]	; (8003f44 <Accumulator_step+0x2c4>)
 8003e78:	482d      	ldr	r0, [pc, #180]	; (8003f30 <Accumulator_step+0x2b0>)
 8003e7a:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003e7e:	ed93 0b00 	vldr	d0, [r3]
 8003e82:	f004 fc5b 	bl	800873c <look1_binlxpw>
 8003e86:	ec53 2b10 	vmov	r2, r3, d0
 8003e8a:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8003e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e92:	f7fc f9ed 	bl	8000270 <__adddf3>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8003e9e:	e9c1 2300 	strd	r2, r3, [r1]
      Accumulator_P.ocv, 12U);
    Accumulator_Y.Voltages[i] = rtb_tauz;
 8003ea2:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <Accumulator_step+0x2c8>)
 8003ea4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	18d1      	adds	r1, r2, r3
 8003eac:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Divide[i] = rtb_Divide_a;
 8003eb8:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 8003ebc:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	18d1      	adds	r1, r2, r3
 8003ec4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Rsz_m;
 8003ed0:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003ed4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	18d1      	adds	r1, r2, r3
 8003edc:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Switch[i] = rtb_tauz;
 8003ee8:	463a      	mov	r2, r7
 8003eea:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	18d1      	adds	r1, r2, r3
 8003ef2:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8003efe:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003f02:	3301      	adds	r3, #1
 8003f04:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003f08:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003f0c:	2b7d      	cmp	r3, #125	; 0x7d
 8003f0e:	f77f aec7 	ble.w	8003ca0 <Accumulator_step+0x20>
  }

  rtb_Memory3 = rtb_Switch[0];
 8003f12:	463b      	mov	r3, r7
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003f1c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003f26:	e02a      	b.n	8003f7e <Accumulator_step+0x2fe>
 8003f28:	2001a5c0 	.word	0x2001a5c0
 8003f2c:	20000088 	.word	0x20000088
 8003f30:	20000b28 	.word	0x20000b28
 8003f34:	20000b90 	.word	0x20000b90
 8003f38:	20000020 	.word	0x20000020
 8003f3c:	20000008 	.word	0x20000008
 8003f40:	2001a198 	.word	0x2001a198
 8003f44:	20000ac0 	.word	0x20000ac0
 8003f48:	200193e0 	.word	0x200193e0
    rtb_Memory3 += rtb_Switch[i + 1];
 8003f4c:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003f50:	3301      	adds	r3, #1
 8003f52:	463a      	mov	r2, r7
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f64:	f7fc f984 	bl	8000270 <__adddf3>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8003f70:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 125; i++) {
 8003f74:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8003f7e:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8003f82:	2b7c      	cmp	r3, #124	; 0x7c
 8003f84:	dde2      	ble.n	8003f4c <Accumulator_step+0x2cc>
  }

  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8003f86:	4bb2      	ldr	r3, [pc, #712]	; (8004250 <Accumulator_step+0x5d0>)
 8003f88:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8003f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f90:	a3ab      	add	r3, pc, #684	; (adr r3, 8004240 <Accumulator_step+0x5c0>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fb21 	bl	80005dc <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
                  Accumulator_U.CV_true * (Accumulator_U.CV_level - rtb_Memory3)
 8003fa2:	4bac      	ldr	r3, [pc, #688]	; (8004254 <Accumulator_step+0x5d4>)
 8003fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8003fa8:	f7fc fb18 	bl	80005dc <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	4699      	mov	r9, r3
                  Accumulator_U.CV_true * (Accumulator_U.CV_level - rtb_Memory3)
 8003fb4:	4ba7      	ldr	r3, [pc, #668]	; (8004254 <Accumulator_step+0x5d4>)
 8003fb6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003fba:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f7fc f953 	bl	800026c <__aeabi_dsub>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f7fc fb05 	bl	80005dc <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
                  + Accumulator_U.CC_true * Accumulator_U.CC_level) +
 8003fda:	4b9e      	ldr	r3, [pc, #632]	; (8004254 <Accumulator_step+0x5d4>)
 8003fdc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003fe0:	4b9c      	ldr	r3, [pc, #624]	; (8004254 <Accumulator_step+0x5d4>)
 8003fe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fe6:	f7fc faf9 	bl	80005dc <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4640      	mov	r0, r8
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	f7fc f93d 	bl	8000270 <__adddf3>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
                 Accumulator_U.SimCurrent) * Accumulator_P.Ts_sim;
 8003ffe:	4b95      	ldr	r3, [pc, #596]	; (8004254 <Accumulator_step+0x5d4>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
                  + Accumulator_U.CC_true * Accumulator_U.CC_level) +
 8004004:	f7fc f934 	bl	8000270 <__adddf3>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
                 Accumulator_U.SimCurrent) * Accumulator_P.Ts_sim;
 8004010:	4b8f      	ldr	r3, [pc, #572]	; (8004250 <Accumulator_step+0x5d0>)
 8004012:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
  rtb_Memory3 = ((Accumulator_P.cell_count * 0.0034726631697176778 *
 8004016:	f7fc fae1 	bl	80005dc <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 8004022:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 800402c:	e04a      	b.n	80040c4 <Accumulator_step+0x444>
    rtb_Switch[i] = rtb_Switch[i] / Accumulator_P.R_short
 800402e:	463a      	mov	r2, r7
 8004030:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403c:	4b84      	ldr	r3, [pc, #528]	; (8004250 <Accumulator_step+0x5d0>)
 800403e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004042:	f7fc fbf5 	bl	8000830 <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 800404e:	4a81      	ldr	r2, [pc, #516]	; (8004254 <Accumulator_step+0x5d4>)
 8004050:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004054:	3305      	adds	r3, #5
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f7fc fabd 	bl	80005dc <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	4b79      	ldr	r3, [pc, #484]	; (8004250 <Accumulator_step+0x5d0>)
 800406c:	f603 73e8 	addw	r3, r3, #4072	; 0xfe8
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f7fc fab2 	bl	80005dc <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4690      	mov	r8, r2
 800407e:	4699      	mov	r9, r3
      Accumulator_DW.Memory_PreviousInput[i]);
 8004080:	4a75      	ldr	r2, [pc, #468]	; (8004258 <Accumulator_step+0x5d8>)
 8004082:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004086:	337f      	adds	r3, #127	; 0x7f
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	e9d3 0100 	ldrd	r0, r1, [r3]
      * Accumulator_U.Balances[i] * Accumulator_P.Gain_Gain + (rtb_Memory3 +
 8004090:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc f8ea 	bl	8000270 <__adddf3>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	f7fc f8e4 	bl	8000270 <__adddf3>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
    rtb_Switch[i] = rtb_Switch[i] / Accumulator_P.R_short
 80040ac:	4638      	mov	r0, r7
 80040ae:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 80040b2:	00c9      	lsls	r1, r1, #3
 80040b4:	4401      	add	r1, r0
 80040b6:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80040ba:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80040be:	3301      	adds	r3, #1
 80040c0:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80040c4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80040c8:	2b7d      	cmp	r3, #125	; 0x7d
 80040ca:	ddb0      	ble.n	800402e <Accumulator_step+0x3ae>
  }

  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 80040cc:	4b60      	ldr	r3, [pc, #384]	; (8004250 <Accumulator_step+0x5d0>)
 80040ce:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80040d2:	4b5f      	ldr	r3, [pc, #380]	; (8004250 <Accumulator_step+0x5d0>)
 80040d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d8:	a35b      	add	r3, pc, #364	; (adr r3, 8004248 <Accumulator_step+0x5c8>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc fa7d 	bl	80005dc <__aeabi_dmul>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4640      	mov	r0, r8
 80040e8:	4649      	mov	r1, r9
 80040ea:	f7fc fba1 	bl	8000830 <__aeabi_ddiv>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
                    Accumulator_DW.Memory1_PreviousInput);
 80040f6:	4b58      	ldr	r3, [pc, #352]	; (8004258 <Accumulator_step+0x5d8>)
 80040f8:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory3 = exp(Accumulator_P.Cap_det / (Accumulator_P.C_r * 3600.0) *
 8004100:	f7fc fa6c 	bl	80005dc <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	ec43 2b17 	vmov	d7, r2, r3
 800410c:	eeb0 0a47 	vmov.f32	s0, s14
 8004110:	eef0 0a67 	vmov.f32	s1, s15
 8004114:	f012 ff08 	bl	8016f28 <exp>
 8004118:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800411c:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8004126:	e03c      	b.n	80041a2 <Accumulator_step+0x522>
    rtb_Rpz[i] = Accumulator_DW.Memory2_PreviousInput[i] * rtb_Memory3;
 8004128:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <Accumulator_step+0x5d8>)
 800412a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800412e:	33fd      	adds	r3, #253	; 0xfd
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004138:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc fa4c 	bl	80005dc <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	f507 60fc 	add.w	r0, r7, #2016	; 0x7e0
 800414c:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 8004150:	00c9      	lsls	r1, r1, #3
 8004152:	4401      	add	r1, r0
 8004154:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.SOCs[i] = rtb_Divide[i];
 8004158:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 800415c:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	483c      	ldr	r0, [pc, #240]	; (800425c <Accumulator_step+0x5dc>)
 800416a:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 800416e:	317e      	adds	r1, #126	; 0x7e
 8004170:	00c9      	lsls	r1, r1, #3
 8004172:	4401      	add	r1, r0
 8004174:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_Y.Capacities[i] = Accumulator_DW.Memory2_PreviousInput[i];
 8004178:	4a37      	ldr	r2, [pc, #220]	; (8004258 <Accumulator_step+0x5d8>)
 800417a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800417e:	33fd      	adds	r3, #253	; 0xfd
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	4834      	ldr	r0, [pc, #208]	; (800425c <Accumulator_step+0x5dc>)
 800418a:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 800418e:	31fc      	adds	r1, #252	; 0xfc
 8004190:	00c9      	lsls	r1, r1, #3
 8004192:	4401      	add	r1, r0
 8004194:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8004198:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800419c:	3301      	adds	r3, #1
 800419e:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80041a2:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80041a6:	2b7d      	cmp	r3, #125	; 0x7d
 80041a8:	ddbe      	ble.n	8004128 <Accumulator_step+0x4a8>
  }

  memcpy(&Accumulator_Y.Temperature[0], &Accumulator_P.cTmp[0], 60U * sizeof
 80041aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041ae:	492c      	ldr	r1, [pc, #176]	; (8004260 <Accumulator_step+0x5e0>)
 80041b0:	482c      	ldr	r0, [pc, #176]	; (8004264 <Accumulator_step+0x5e4>)
 80041b2:	f012 fcb3 	bl	8016b1c <memcpy>
         (real_T));
  if (Accumulator_U.Overtemperature != 0.0) {
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <Accumulator_step+0x5d4>)
 80041b8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80041bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	f7fc fc70 	bl	8000aac <__aeabi_dcmpeq>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d14c      	bne.n	800426c <Accumulator_step+0x5ec>
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] +
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <Accumulator_step+0x5d8>)
 80041d4:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	f7fc fcac 	bl	8000b3c <__aeabi_d2iz>
 80041e4:	4603      	mov	r3, r0
 80041e6:	3b01      	subs	r3, #1
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <Accumulator_step+0x5d0>)
 80041ea:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	e9d3 8900 	ldrd	r8, r9, [r3]
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <Accumulator_step+0x5d8>)
 80041f8:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fc9a 	bl	8000b3c <__aeabi_d2iz>
 8004208:	4603      	mov	r3, r0
 800420a:	1e5e      	subs	r6, r3, #1
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] +
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	4b15      	ldr	r3, [pc, #84]	; (8004268 <Accumulator_step+0x5e8>)
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f82b 	bl	8000270 <__adddf3>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	480f      	ldr	r0, [pc, #60]	; (800425c <Accumulator_step+0x5dc>)
 8004220:	f206 117b 	addw	r1, r6, #379	; 0x17b
 8004224:	00c9      	lsls	r1, r1, #3
 8004226:	4401      	add	r1, r0
 8004228:	e9c1 2300 	strd	r2, r3, [r1]
      45.0;
    rtb_Memory3 = Accumulator_DW.Memory_PreviousInput_b;
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <Accumulator_step+0x5d8>)
 800422e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 800423a:	e9c1 2300 	strd	r2, r3, [r1]
 800423e:	e080      	b.n	8004342 <Accumulator_step+0x6c2>
 8004240:	d7ce878f 	.word	0xd7ce878f
 8004244:	3f6c72b3 	.word	0x3f6c72b3
 8004248:	00000000 	.word	0x00000000
 800424c:	40ac2000 	.word	0x40ac2000
 8004250:	20000008 	.word	0x20000008
 8004254:	2001a198 	.word	0x2001a198
 8004258:	2001a5c0 	.word	0x2001a5c0
 800425c:	200193e0 	.word	0x200193e0
 8004260:	200008d8 	.word	0x200008d8
 8004264:	20019fb8 	.word	0x20019fb8
 8004268:	40468000 	.word	0x40468000
  } else if (Accumulator_U.Undertemperature != 0.0) {
 800426c:	4b8e      	ldr	r3, [pc, #568]	; (80044a8 <Accumulator_step+0x828>)
 800426e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f7fc fc15 	bl	8000aac <__aeabi_dcmpeq>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d136      	bne.n	80042f6 <Accumulator_step+0x676>
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] -
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <Accumulator_step+0x82c>)
 800428a:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	f7fc fc51 	bl	8000b3c <__aeabi_d2iz>
 800429a:	4603      	mov	r3, r0
 800429c:	3b01      	subs	r3, #1
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <Accumulator_step+0x830>)
 80042a0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	e9d3 8900 	ldrd	r8, r9, [r3]
    Accumulator_Y.Temperature[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1]
 80042ac:	4b7f      	ldr	r3, [pc, #508]	; (80044ac <Accumulator_step+0x82c>)
 80042ae:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fc fc3f 	bl	8000b3c <__aeabi_d2iz>
 80042be:	4603      	mov	r3, r0
 80042c0:	1e5e      	subs	r6, r3, #1
      = Accumulator_P.cTmp[(int32_T)Accumulator_DW.Memory_PreviousInput_b - 1] -
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <Accumulator_step+0x834>)
 80042c8:	4640      	mov	r0, r8
 80042ca:	4649      	mov	r1, r9
 80042cc:	f7fb ffce 	bl	800026c <__aeabi_dsub>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4878      	ldr	r0, [pc, #480]	; (80044b8 <Accumulator_step+0x838>)
 80042d6:	f206 117b 	addw	r1, r6, #379	; 0x17b
 80042da:	00c9      	lsls	r1, r1, #3
 80042dc:	4401      	add	r1, r0
 80042de:	e9c1 2300 	strd	r2, r3, [r1]
      45.0;
    rtb_Memory3 = Accumulator_DW.Memory_PreviousInput_b;
 80042e2:	4b72      	ldr	r3, [pc, #456]	; (80044ac <Accumulator_step+0x82c>)
 80042e4:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 80042f0:	e9c1 2300 	strd	r2, r3, [r1]
 80042f4:	e025      	b.n	8004342 <Accumulator_step+0x6c2>
  } else {
    rtb_Memory3 = Accumulator_rand();
 80042f6:	f7ff fa51 	bl	800379c <Accumulator_rand>
 80042fa:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80042fe:	ed83 0b00 	vstr	d0, [r3]
    rtb_Memory3 = floor(rtb_Memory3 * 60.0) + 1.0;
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <Accumulator_step+0x83c>)
 8004308:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 800430c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004310:	f7fc f964 	bl	80005dc <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	ec43 2b17 	vmov	d7, r2, r3
 800431c:	eeb0 0a47 	vmov.f32	s0, s14
 8004320:	eef0 0a67 	vmov.f32	s1, s15
 8004324:	f012 fcd8 	bl	8016cd8 <floor>
 8004328:	ec51 0b10 	vmov	r0, r1, d0
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <Accumulator_step+0x840>)
 8004332:	f7fb ff9d 	bl	8000270 <__adddf3>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	f607 71e8 	addw	r1, r7, #4072	; 0xfe8
 800433e:	e9c1 2300 	strd	r2, r3, [r1]
  }

  Accumulator_Y.Current = Accumulator_U.SimCurrent;
 8004342:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <Accumulator_step+0x828>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	495b      	ldr	r1, [pc, #364]	; (80044b8 <Accumulator_step+0x838>)
 800434a:	f501 613d 	add.w	r1, r1, #3024	; 0xbd0
 800434e:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.Memory3_PreviousInput = Accumulator_U.SimCurrent;
 8004352:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <Accumulator_step+0x828>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	4954      	ldr	r1, [pc, #336]	; (80044ac <Accumulator_step+0x82c>)
 800435a:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  for (i = 0; i < 126; i++) {
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8004364:	e078      	b.n	8004458 <Accumulator_step+0x7d8>
    rtb_Divide_a = rtb_Rpz[i];
 8004366:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800436a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f607 71d8 	addw	r1, r7, #4056	; 0xfd8
 800437a:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_tauz = rtb_Switch[i];
 800437e:	463a      	mov	r2, r7
 8004380:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 8004390:	e9c1 2300 	strd	r2, r3, [r1]
    Accumulator_DW.Memory4_PreviousInput[i] = rtb_Rsz[i];
 8004394:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8004398:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	4841      	ldr	r0, [pc, #260]	; (80044ac <Accumulator_step+0x82c>)
 80043a6:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 80043aa:	00c9      	lsls	r1, r1, #3
 80043ac:	4401      	add	r1, r0
 80043ae:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_tauz > rtb_Divide_a) {
 80043b2:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 80043be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c2:	f7fc fb9b 	bl	8000afc <__aeabi_dcmpgt>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <Accumulator_step+0x766>
      Accumulator_DW.Memory_PreviousInput[i] = rtb_Divide_a;
 80043cc:	4a37      	ldr	r2, [pc, #220]	; (80044ac <Accumulator_step+0x82c>)
 80043ce:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80043d2:	337f      	adds	r3, #127	; 0x7f
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	18d1      	adds	r1, r2, r3
 80043d8:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	e9c1 2300 	strd	r2, r3, [r1]
 80043e4:	e027      	b.n	8004436 <Accumulator_step+0x7b6>
    } else if (rtb_tauz < Accumulator_P.Constant1_Value) {
 80043e6:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <Accumulator_step+0x830>)
 80043e8:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 80043f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043f8:	f7fc fb62 	bl	8000ac0 <__aeabi_dcmplt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <Accumulator_step+0x79e>
      Accumulator_DW.Memory_PreviousInput[i] = Accumulator_P.Constant1_Value;
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <Accumulator_step+0x830>)
 8004404:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	4827      	ldr	r0, [pc, #156]	; (80044ac <Accumulator_step+0x82c>)
 800440e:	f8d7 1fe4 	ldr.w	r1, [r7, #4068]	; 0xfe4
 8004412:	317f      	adds	r1, #127	; 0x7f
 8004414:	00c9      	lsls	r1, r1, #3
 8004416:	4401      	add	r1, r0
 8004418:	e9c1 2300 	strd	r2, r3, [r1]
 800441c:	e00b      	b.n	8004436 <Accumulator_step+0x7b6>
    } else {
      Accumulator_DW.Memory_PreviousInput[i] = rtb_tauz;
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <Accumulator_step+0x82c>)
 8004420:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004424:	337f      	adds	r3, #127	; 0x7f
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	18d1      	adds	r1, r2, r3
 800442a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	e9c1 2300 	strd	r2, r3, [r1]
    }

    Accumulator_DW.Memory2_PreviousInput[i] = rtb_Divide_a;
 8004436:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <Accumulator_step+0x82c>)
 8004438:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800443c:	33fd      	adds	r3, #253	; 0xfd
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	18d1      	adds	r1, r2, r3
 8004442:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800444e:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004452:	3301      	adds	r3, #1
 8004454:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8004458:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 800445c:	2b7d      	cmp	r3, #125	; 0x7d
 800445e:	dd82      	ble.n	8004366 <Accumulator_step+0x6e6>
  }

  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.SimCurrent +
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <Accumulator_step+0x828>)
 8004462:	e9d3 0100 	ldrd	r0, r1, [r3]
    Accumulator_DW.Memory1_PreviousInput);
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <Accumulator_step+0x82c>)
 8004468:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
  Accumulator_DW.Memory1_PreviousInput = fabs(Accumulator_U.SimCurrent +
 8004470:	f7fb fefe 	bl	8000270 <__adddf3>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4614      	mov	r4, r2
 800447a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <Accumulator_step+0x82c>)
 8004480:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8004484:	e9c3 4500 	strd	r4, r5, [r3]
  Accumulator_DW.Memory_PreviousInput_b = rtb_Memory3;
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <Accumulator_step+0x82c>)
 800448a:	f503 613e 	add.w	r1, r3, #3040	; 0xbe0
 800448e:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	e9c1 2300 	strd	r2, r3, [r1]
}
 800449a:	bf00      	nop
 800449c:	f607 77f4 	addw	r7, r7, #4084	; 0xff4
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a6:	bf00      	nop
 80044a8:	2001a198 	.word	0x2001a198
 80044ac:	2001a5c0 	.word	0x2001a5c0
 80044b0:	20000008 	.word	0x20000008
 80044b4:	40468000 	.word	0x40468000
 80044b8:	200193e0 	.word	0x200193e0
 80044bc:	404e0000 	.word	0x404e0000
 80044c0:	3ff00000 	.word	0x3ff00000

080044c4 <Accumulator_initialize>:

void Accumulator_initialize(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  Accumulator_DW.Memory3_PreviousInput = Accumulator_P.Memory3_InitialCondition;
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <Accumulator_initialize+0x84>)
 80044ca:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	491e      	ldr	r1, [pc, #120]	; (800454c <Accumulator_initialize+0x88>)
 80044d4:	e9c1 23fc 	strd	r2, r3, [r1, #1008]	; 0x3f0
  memcpy(&Accumulator_DW.Memory4_PreviousInput[0],
 80044d8:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80044dc:	491c      	ldr	r1, [pc, #112]	; (8004550 <Accumulator_initialize+0x8c>)
 80044de:	481b      	ldr	r0, [pc, #108]	; (800454c <Accumulator_initialize+0x88>)
 80044e0:	f012 fb1c 	bl	8016b1c <memcpy>
         &Accumulator_P.Memory4_InitialCondition[0], 126U * sizeof(real_T));
  memcpy(&Accumulator_DW.Memory_PreviousInput[0], &Accumulator_P.cQur[0], 126U *
 80044e4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80044e8:	491a      	ldr	r1, [pc, #104]	; (8004554 <Accumulator_initialize+0x90>)
 80044ea:	481b      	ldr	r0, [pc, #108]	; (8004558 <Accumulator_initialize+0x94>)
 80044ec:	f012 fb16 	bl	8016b1c <memcpy>
         sizeof(real_T));
  memcpy(&Accumulator_DW.Memory2_PreviousInput[0], &Accumulator_P.cCap[0], 126U *
 80044f0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80044f4:	4919      	ldr	r1, [pc, #100]	; (800455c <Accumulator_initialize+0x98>)
 80044f6:	481a      	ldr	r0, [pc, #104]	; (8004560 <Accumulator_initialize+0x9c>)
 80044f8:	f012 fb10 	bl	8016b1c <memcpy>
         sizeof(real_T));
  Accumulator_DW.Memory1_PreviousInput = Accumulator_P.Memory1_InitialCondition;
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <Accumulator_initialize+0x84>)
 80044fe:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	4911      	ldr	r1, [pc, #68]	; (800454c <Accumulator_initialize+0x88>)
 8004508:	f601 31d8 	addw	r1, r1, #3032	; 0xbd8
 800450c:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.Memory_PreviousInput_b = Accumulator_P.Memory_InitialCondition;
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <Accumulator_initialize+0x84>)
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	490c      	ldr	r1, [pc, #48]	; (800454c <Accumulator_initialize+0x88>)
 800451c:	f501 613e 	add.w	r1, r1, #3040	; 0xbe0
 8004520:	e9c1 2300 	strd	r2, r3, [r1]
  Accumulator_DW.method = 7U;
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <Accumulator_initialize+0x88>)
 8004526:	2207      	movs	r2, #7
 8004528:	f8c3 2be8 	str.w	r2, [r3, #3048]	; 0xbe8
  Accumulator_DW.state = 1144108930U;
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <Accumulator_initialize+0x88>)
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <Accumulator_initialize+0xa0>)
 8004530:	f8c3 2bec 	str.w	r2, [r3, #3052]	; 0xbec
  Accumulator_DW.state_c[0] = 362436069U;
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <Accumulator_initialize+0x88>)
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <Accumulator_initialize+0xa4>)
 8004538:	f8c3 2bf0 	str.w	r2, [r3, #3056]	; 0xbf0
  Accumulator_DW.state_c[1] = 521288629U;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <Accumulator_initialize+0x88>)
 800453e:	4a0b      	ldr	r2, [pc, #44]	; (800456c <Accumulator_initialize+0xa8>)
 8004540:	f8c3 2bf4 	str.w	r2, [r3, #3060]	; 0xbf4
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000008 	.word	0x20000008
 800454c:	2001a5c0 	.word	0x2001a5c0
 8004550:	20000bf8 	.word	0x20000bf8
 8004554:	200004e8 	.word	0x200004e8
 8004558:	2001a9b8 	.word	0x2001a9b8
 800455c:	200000f8 	.word	0x200000f8
 8004560:	2001ada8 	.word	0x2001ada8
 8004564:	4431b782 	.word	0x4431b782
 8004568:	159a55e5 	.word	0x159a55e5
 800456c:	1f123bb5 	.word	0x1f123bb5

08004570 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8004570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3308      	adds	r3, #8
 8004580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3310      	adds	r3, #16
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fc f950 	bl	8000830 <__aeabi_ddiv>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8004598:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <CSE_S_x+0x124>)
 800459a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800459e:	4614      	mov	r4, r2
 80045a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80045a4:	220c      	movs	r2, #12
 80045a6:	493c      	ldr	r1, [pc, #240]	; (8004698 <CSE_S_x+0x128>)
 80045a8:	483c      	ldr	r0, [pc, #240]	; (800469c <CSE_S_x+0x12c>)
 80045aa:	ed97 0b04 	vldr	d0, [r7, #16]
 80045ae:	f004 f8c5 	bl	800873c <look1_binlxpw>
 80045b2:	ec53 2b10 	vmov	r2, r3, d0
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fc f939 	bl	8000830 <__aeabi_ddiv>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	ec43 2b17 	vmov	d7, r2, r3
 80045c6:	eeb0 0a47 	vmov.f32	s0, s14
 80045ca:	eef0 0a67 	vmov.f32	s1, s15
 80045ce:	f012 fcab 	bl	8016f28 <exp>
 80045d2:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 80045d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045da:	f04f 0000 	mov.w	r0, #0
 80045de:	4930      	ldr	r1, [pc, #192]	; (80046a0 <CSE_S_x+0x130>)
 80045e0:	f7fb fe44 	bl	800026c <__aeabi_dsub>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <CSE_S_x+0x134>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f7fb fff3 	bl	80005dc <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4614      	mov	r4, r2
 80045fc:	461d      	mov	r5, r3
 80045fe:	220c      	movs	r2, #12
 8004600:	4924      	ldr	r1, [pc, #144]	; (8004694 <CSE_S_x+0x124>)
 8004602:	4826      	ldr	r0, [pc, #152]	; (800469c <CSE_S_x+0x12c>)
 8004604:	ed97 0b04 	vldr	d0, [r7, #16]
 8004608:	f004 f898 	bl	800873c <look1_binlxpw>
 800460c:	ec53 2b10 	vmov	r2, r3, d0
 8004610:	4620      	mov	r0, r4
 8004612:	4629      	mov	r1, r5
 8004614:	f7fb ffe2 	bl	80005dc <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4614      	mov	r4, r2
 800461e:	461d      	mov	r5, r3
    CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462a:	f7fb ffd7 	bl	80005dc <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fb fe1b 	bl	8000270 <__adddf3>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc,
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.u * CSE_P.Ts + rtu_x[1];
 8004644:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <CSE_S_x+0x134>)
 8004646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <CSE_S_x+0x124>)
 800464c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004650:	f7fb ffc4 	bl	80005dc <__aeabi_dmul>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4690      	mov	r8, r2
 800465a:	4699      	mov	r9, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3308      	adds	r3, #8
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	f101 0408 	add.w	r4, r1, #8
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fdff 	bl	8000270 <__adddf3>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f103 0110 	add.w	r1, r3, #16
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004686:	e9c1 2300 	strd	r2, r3, [r1]
}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004694:	20001010 	.word	0x20001010
 8004698:	200011b8 	.word	0x200011b8
 800469c:	20001150 	.word	0x20001150
 80046a0:	3ff00000 	.word	0x3ff00000
 80046a4:	2001bb90 	.word	0x2001bb90

080046a8 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3308      	adds	r3, #8
 80046b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3310      	adds	r3, #16
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f7fc f8b5 	bl	8000830 <__aeabi_ddiv>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <CSE_M_x+0x8c>)
 80046d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046d4:	220c      	movs	r2, #12
 80046d6:	4918      	ldr	r1, [pc, #96]	; (8004738 <CSE_M_x+0x90>)
 80046d8:	4818      	ldr	r0, [pc, #96]	; (800473c <CSE_M_x+0x94>)
 80046da:	ed97 0b02 	vldr	d0, [r7, #8]
 80046de:	f004 f82d 	bl	800873c <look1_binlxpw>
 80046e2:	ec53 2b10 	vmov	r2, r3, d0
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fb ff77 	bl	80005dc <__aeabi_dmul>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	461d      	mov	r5, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 80046f6:	220c      	movs	r2, #12
 80046f8:	4911      	ldr	r1, [pc, #68]	; (8004740 <CSE_M_x+0x98>)
 80046fa:	4810      	ldr	r0, [pc, #64]	; (800473c <CSE_M_x+0x94>)
 80046fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8004700:	f004 f81c 	bl	800873c <look1_binlxpw>
 8004704:	ec53 2b10 	vmov	r2, r3, d0
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f7fb fdb0 	bl	8000270 <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
            look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb fda7 	bl	8000270 <__adddf3>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
  *rty_y = (CSE_U.u * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U) +
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	e9c1 2300 	strd	r2, r3, [r1]
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bdb0      	pop	{r4, r5, r7, pc}
 8004734:	2001bb90 	.word	0x2001bb90
 8004738:	20001078 	.word	0x20001078
 800473c:	20001150 	.word	0x20001150
 8004740:	200010e8 	.word	0x200010e8

08004744 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	ed2d 8b02 	vpush	{d8}
 800474c:	b0e1      	sub	sp, #388	; 0x184
 800474e:	af04      	add	r7, sp, #16
 8004750:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004754:	ed84 0b00 	vstr	d0, [r4]
 8004758:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800475c:	6020      	str	r0, [r4, #0]
 800475e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004762:	6001      	str	r1, [r0, #0]
 8004764:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004768:	ed81 1b00 	vstr	d1, [r1]
 800476c:	f107 0120 	add.w	r1, r7, #32
 8004770:	ed81 2b00 	vstr	d2, [r1]
 8004774:	f107 0118 	add.w	r1, r7, #24
 8004778:	ed81 3b00 	vstr	d3, [r1]
 800477c:	f107 0114 	add.w	r1, r7, #20
 8004780:	600a      	str	r2, [r1, #0]
 8004782:	f107 0210 	add.w	r2, r7, #16
 8004786:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8004788:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800478c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004794:	f7fb ff22 	bl	80005dc <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80047a0:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 80047a4:	f107 0118 	add.w	r1, r7, #24
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	4b96      	ldr	r3, [pc, #600]	; (8004a08 <UKFCorrectorAdditive_getPredict+0x2c4>)
 80047ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047b2:	f7fb fd5d 	bl	8000270 <__adddf3>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb ff09 	bl	80005dc <__aeabi_dmul>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80047d2:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 80047d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	4989      	ldr	r1, [pc, #548]	; (8004a08 <UKFCorrectorAdditive_getPredict+0x2c4>)
 80047e4:	f7fc f824 	bl	8000830 <__aeabi_ddiv>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	f04f 0000 	mov.w	r0, #0
 80047f0:	4986      	ldr	r1, [pc, #536]	; (8004a0c <UKFCorrectorAdditive_getPredict+0x2c8>)
 80047f2:	f7fb fd3b 	bl	800026c <__aeabi_dsub>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80047fe:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 8004802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	f7fb fd2f 	bl	8000270 <__adddf3>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	f04f 0000 	mov.w	r0, #0
 800481a:	497c      	ldr	r1, [pc, #496]	; (8004a0c <UKFCorrectorAdditive_getPredict+0x2c8>)
 800481c:	f7fc f808 	bl	8000830 <__aeabi_ddiv>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004828:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 800482c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	4974      	ldr	r1, [pc, #464]	; (8004a0c <UKFCorrectorAdditive_getPredict+0x2c8>)
 800483a:	f7fb fd17 	bl	800026c <__aeabi_dsub>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f107 0320 	add.w	r3, r7, #32
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fb fd0f 	bl	8000270 <__adddf3>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f7fb fd05 	bl	8000270 <__adddf3>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800486e:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8004872:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004876:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800487a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800487e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8004882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	f7fc f90b 	bl	8000aac <__aeabi_dcmpeq>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d154      	bne.n	8004946 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 800489c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80048a8:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 80048ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048b8:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 80048bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb ffb0 	bl	8000830 <__aeabi_ddiv>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80048d8:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 80048dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f7fb ffa0 	bl	8000830 <__aeabi_ddiv>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048f8:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 80048fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004900:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004904:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8004908:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800490c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb ff8a 	bl	8000830 <__aeabi_ddiv>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004924:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 8004928:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004934:	f7fb ff7c 	bl	8000830 <__aeabi_ddiv>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004940:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004944:	e006      	b.n	8004954 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 8004946:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004950:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8004954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004958:	ed93 7b00 	vldr	d7, [r3]
 800495c:	eeb0 0a47 	vmov.f32	s0, s14
 8004960:	eef0 0a67 	vmov.f32	s1, s15
 8004964:	f012 fb78 	bl	8017058 <sqrt>
 8004968:	eeb0 7a40 	vmov.f32	s14, s0
 800496c:	eef0 7a60 	vmov.f32	s15, s1
 8004970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004974:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004978:	2300      	movs	r3, #0
 800497a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800497e:	e037      	b.n	80049f0 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8004980:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	4413      	add	r3, r2
 800498e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004992:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fe1f 	bl	80005dc <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80049a6:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 80049aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049b6:	00c9      	lsls	r1, r1, #3
 80049b8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80049bc:	4401      	add	r1, r0
 80049be:	39a0      	subs	r1, #160	; 0xa0
 80049c0:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 80049c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80049d0:	3109      	adds	r1, #9
 80049d2:	4690      	mov	r8, r2
 80049d4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80049d8:	00cb      	lsls	r3, r1, #3
 80049da:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80049de:	4413      	add	r3, r2
 80049e0:	3ba0      	subs	r3, #160	; 0xa0
 80049e2:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 80049e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80049ea:	3301      	adds	r3, #1
 80049ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80049f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	ddc3      	ble.n	8004980 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004a04:	e065      	b.n	8004ad2 <UKFCorrectorAdditive_getPredict+0x38e>
 8004a06:	bf00      	nop
 8004a08:	40080000 	.word	0x40080000
 8004a0c:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8004a10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3ba0      	subs	r3, #160	; 0xa0
 8004a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fc20 	bl	8000270 <__adddf3>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8004a38:	00c9      	lsls	r1, r1, #3
 8004a3a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004a3e:	4401      	add	r1, r0
 8004a40:	39a0      	subs	r1, #160	; 0xa0
 8004a42:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 8004a46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a52:	4413      	add	r3, r2
 8004a54:	3ba0      	subs	r3, #160	; 0xa0
 8004a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004a6a:	3401      	adds	r4, #1
 8004a6c:	f7fb fc00 	bl	8000270 <__adddf3>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	00e1      	lsls	r1, r4, #3
 8004a76:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004a7a:	4401      	add	r1, r0
 8004a7c:	39a0      	subs	r1, #160	; 0xa0
 8004a7e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004a82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a86:	3302      	adds	r3, #2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a8e:	4413      	add	r3, r2
 8004a90:	3ba0      	subs	r3, #160	; 0xa0
 8004a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3310      	adds	r3, #16
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004aa6:	3402      	adds	r4, #2
 8004aa8:	f7fb fbe2 	bl	8000270 <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	00e1      	lsls	r1, r4, #3
 8004ab2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004ab6:	4401      	add	r1, r0
 8004ab8:	39a0      	subs	r1, #160	; 0xa0
 8004aba:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8004abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ac2:	3303      	adds	r3, #3
 8004ac4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004ac8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004acc:	3301      	adds	r3, #1
 8004ace:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004ad2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	dd9a      	ble.n	8004a10 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004ae6:	e018      	b.n	8004b1a <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004ae8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004aec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	18d0      	adds	r0, r2, r3
 8004af4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004af8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	f7ff fdd1 	bl	80046a8 <CSE_M_x>
    knt_0 += 3;
 8004b06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004b10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b14:	3301      	adds	r3, #1
 8004b16:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	dde2      	ble.n	8004ae8 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 8004b22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	f7ff fdbb 	bl	80046a8 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b38:	e027      	b.n	8004b8a <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 8004b3a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004b44:	4413      	add	r3, r2
 8004b46:	3bd0      	subs	r3, #208	; 0xd0
 8004b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fb8a 	bl	800026c <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f7fb fb82 	bl	8000270 <__adddf3>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004b74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b78:	00c9      	lsls	r1, r1, #3
 8004b7a:	4401      	add	r1, r0
 8004b7c:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004b80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b84:	3301      	adds	r3, #1
 8004b86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b8a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	ddd3      	ble.n	8004b3a <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004b92:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b96:	ed93 7b00 	vldr	d7, [r3]
 8004b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b9e:	ed93 6b00 	vldr	d6, [r3]
 8004ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ba6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004baa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004bae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004bb2:	f107 0210 	add.w	r2, r7, #16
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	9203      	str	r2, [sp, #12]
 8004bba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004bbe:	9202      	str	r2, [sp, #8]
 8004bc0:	f107 0214 	add.w	r2, r7, #20
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	9201      	str	r2, [sp, #4]
 8004bc8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004bcc:	9200      	str	r2, [sp, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	eeb0 1a46 	vmov.f32	s2, s12
 8004bd6:	eef0 1a66 	vmov.f32	s3, s13
 8004bda:	eeb0 0a47 	vmov.f32	s0, s14
 8004bde:	eef0 0a67 	vmov.f32	s1, s15
 8004be2:	f003 f951 	bl	8007e88 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8004be6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004bf2:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 8004bf6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004bfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 8004c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004c12:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 8004c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f008 fc64 	bl	800d4ec <xnrm2_Mnmxg9YT>
 8004c24:	eeb0 7a40 	vmov.f32	s14, s0
 8004c28:	eef0 7a60 	vmov.f32	s15, s1
 8004c2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c30:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 8004c34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	f7fb ff32 	bl	8000aac <__aeabi_dcmpeq>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d000      	beq.n	8004c50 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 8004c4e:	e0fa      	b.n	8004e46 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8004c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c54:	ed93 7b00 	vldr	d7, [r3]
 8004c58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c5c:	ed93 6b00 	vldr	d6, [r3]
 8004c60:	eeb0 1a46 	vmov.f32	s2, s12
 8004c64:	eef0 1a66 	vmov.f32	s3, s13
 8004c68:	eeb0 0a47 	vmov.f32	s0, s14
 8004c6c:	eef0 0a67 	vmov.f32	s1, s15
 8004c70:	f006 f8b2 	bl	800add8 <rt_hypotd_snf>
 8004c74:	eeb0 7a40 	vmov.f32	s14, s0
 8004c78:	eef0 7a60 	vmov.f32	s15, s1
 8004c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c80:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8004c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	f7fb ff28 	bl	8000ae8 <__aeabi_dcmpge>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8004c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	4615      	mov	r5, r2
 8004ca8:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8004cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cb0:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8004cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	60ba      	str	r2, [r7, #8]
 8004cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cd0:	f7fb fef6 	bl	8000ac0 <__aeabi_dcmplt>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80ad 	beq.w	8004e36 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8004ce2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8004cec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004cf0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	4b57      	ldr	r3, [pc, #348]	; (8004e58 <UKFCorrectorAdditive_getPredict+0x714>)
 8004cfa:	f7fb fc6f 	bl	80005dc <__aeabi_dmul>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d06:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8004d0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <UKFCorrectorAdditive_getPredict+0x714>)
 8004d18:	f7fb fc60 	bl	80005dc <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004d24:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8004d28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	4b48      	ldr	r3, [pc, #288]	; (8004e58 <UKFCorrectorAdditive_getPredict+0x714>)
 8004d36:	f7fb fc51 	bl	80005dc <__aeabi_dmul>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004d42:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8004d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	603a      	str	r2, [r7, #0]
 8004d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d62:	f7fb fead 	bl	8000ac0 <__aeabi_dcmplt>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <UKFCorrectorAdditive_getPredict+0x630>
 8004d6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d70:	2b13      	cmp	r3, #19
 8004d72:	ddb6      	ble.n	8004ce2 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8004d74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d78:	ed93 8b00 	vldr	d8, [r3]
 8004d7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d80:	2202      	movs	r2, #2
 8004d82:	4619      	mov	r1, r3
 8004d84:	2001      	movs	r0, #1
 8004d86:	f008 fbb1 	bl	800d4ec <xnrm2_Mnmxg9YT>
 8004d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8004d8e:	eef0 7a60 	vmov.f32	s15, s1
 8004d92:	eeb0 1a47 	vmov.f32	s2, s14
 8004d96:	eef0 1a67 	vmov.f32	s3, s15
 8004d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d9e:	eef0 0a68 	vmov.f32	s1, s17
 8004da2:	f006 f819 	bl	800add8 <rt_hypotd_snf>
 8004da6:	eeb0 7a40 	vmov.f32	s14, s0
 8004daa:	eef0 7a60 	vmov.f32	s15, s1
 8004dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004db2:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8004db6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	f7fb fe8f 	bl	8000ae8 <__aeabi_dcmpge>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8004dd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	4692      	mov	sl, r2
 8004dda:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8004dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004de2:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004dec:	e014      	b.n	8004e18 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8004dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004dfe:	f7fb fbed 	bl	80005dc <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004e0a:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004e0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e12:	3301      	adds	r3, #1
 8004e14:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e18:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004e1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e20:	429a      	cmp	r2, r3
 8004e22:	dbe4      	blt.n	8004dee <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8004e24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004e30:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004e34:	e007      	b.n	8004e46 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8004e36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004e42:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004e46:	bf00      	nop
 8004e48:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	ecbd 8b02 	vpop	{d8}
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	bf00      	nop
 8004e58:	7c900000 	.word	0x7c900000
 8004e5c:	00000000 	.word	0x00000000

08004e60 <CSE_step>:

void CSE_step(void)
{
 8004e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e64:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8004e68:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1736111111111111 };

  static const real_T Wcov[2] = { 0.87666666666666659, -0.1736111111111111 };

  if (CSE_P.Enable1_Value) {
 8004e6a:	4bb3      	ldr	r3, [pc, #716]	; (8005138 <CSE_step+0x2d8>)
 8004e6c:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f001 803e 	beq.w	8005ef2 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	4619      	mov	r1, r3
 8004e82:	48ae      	ldr	r0, [pc, #696]	; (800513c <CSE_step+0x2dc>)
 8004e84:	f7ff fc10 	bl	80046a8 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.2, 2.0,
 8004e88:	4bab      	ldr	r3, [pc, #684]	; (8005138 <CSE_step+0x2d8>)
 8004e8a:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8004e8e:	f107 0110 	add.w	r1, r7, #16
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	463b      	mov	r3, r7
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005120 <CSE_step+0x2c0>
 8004ea0:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005128 <CSE_step+0x2c8>
 8004ea4:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005130 <CSE_step+0x2d0>
 8004ea8:	49a5      	ldr	r1, [pc, #660]	; (8005140 <CSE_step+0x2e0>)
 8004eaa:	48a4      	ldr	r0, [pc, #656]	; (800513c <CSE_step+0x2dc>)
 8004eac:	eeb0 0a47 	vmov.f32	s0, s14
 8004eb0:	eef0 0a67 	vmov.f32	s1, s15
 8004eb4:	f7ff fc46 	bl	8004744 <UKFCorrectorAdditive_getPredict>
      0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8004eb8:	4ba2      	ldr	r3, [pc, #648]	; (8005144 <CSE_step+0x2e4>)
 8004eba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f9d1 	bl	800026c <__aeabi_dsub>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	f107 0108 	add.w	r1, r7, #8
 8004ed2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004ee2:	e04a      	b.n	8004f7a <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8004ee4:	4a96      	ldr	r2, [pc, #600]	; (8005140 <CSE_step+0x2e0>)
 8004ee6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004ef6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8004efa:	00c9      	lsls	r1, r1, #3
 8004efc:	4401      	add	r1, r0
 8004efe:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8004f02:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f06:	3303      	adds	r3, #3
 8004f08:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004f0c:	1c51      	adds	r1, r2, #1
 8004f0e:	4a8c      	ldr	r2, [pc, #560]	; (8005140 <CSE_step+0x2e0>)
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f1c:	00c9      	lsls	r1, r1, #3
 8004f1e:	4401      	add	r1, r0
 8004f20:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8004f24:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f28:	3306      	adds	r3, #6
 8004f2a:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004f2e:	1c91      	adds	r1, r2, #2
 8004f30:	4a83      	ldr	r2, [pc, #524]	; (8005140 <CSE_step+0x2e0>)
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004f3e:	00c9      	lsls	r1, r1, #3
 8004f40:	4401      	add	r1, r0
 8004f42:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8004f46:	f107 0210 	add.w	r2, r7, #16
 8004f4a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004f5a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8004f5e:	00c9      	lsls	r1, r1, #3
 8004f60:	4401      	add	r1, r0
 8004f62:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8004f66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f6a:	3303      	adds	r3, #3
 8004f6c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004f70:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f74:	3301      	adds	r3, #1
 8004f76:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004f7a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	ddb0      	ble.n	8004ee4 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8004f82:	463b      	mov	r3, r7
 8004f84:	ed93 7b00 	vldr	d7, [r3]
 8004f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f92:	eef0 0a67 	vmov.f32	s1, s15
 8004f96:	f007 fe43 	bl	800cc20 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8004f9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fa6:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8004faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004fb2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8004fba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004fc2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8004fca:	463b      	mov	r3, r7
 8004fcc:	ed93 7b00 	vldr	d7, [r3]
 8004fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fda:	eef0 0a67 	vmov.f32	s1, s15
 8004fde:	f007 fe1f 	bl	800cc20 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8004fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fea:	463b      	mov	r3, r7
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb faf4 	bl	80005dc <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	f107 0110 	add.w	r1, r7, #16
 8004ffc:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005000:	2300      	movs	r3, #0
 8005002:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005006:	e011      	b.n	800502c <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005008:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800500c:	3301      	adds	r3, #1
 800500e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	18d1      	adds	r1, r2, r3
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005022:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005026:	3301      	adds	r3, #1
 8005028:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800502c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005030:	2b01      	cmp	r3, #1
 8005032:	dde9      	ble.n	8005008 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8005034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005038:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800503c:	463b      	mov	r3, r7
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb facb 	bl	80005dc <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	f107 0110 	add.w	r1, r7, #16
 800504e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8005052:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8005062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005066:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800506a:	463b      	mov	r3, r7
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fab4 	bl	80005dc <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	f107 0110 	add.w	r1, r7, #16
 800507c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8005080:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005088:	2301      	movs	r3, #1
 800508a:	461e      	mov	r6, r3
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	f7fb fd0a 	bl	8000aac <__aeabi_dcmpeq>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <CSE_step+0x242>
 800509e:	2300      	movs	r3, #0
 80050a0:	461e      	mov	r6, r3
 80050a2:	b2f3      	uxtb	r3, r6
 80050a4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 80050a8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d113      	bne.n	80050d8 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 80050b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80050b4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050b8:	2301      	movs	r3, #1
 80050ba:	461e      	mov	r6, r3
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	f7fb fcf2 	bl	8000aac <__aeabi_dcmpeq>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <CSE_step+0x272>
 80050ce:	2300      	movs	r3, #0
 80050d0:	461e      	mov	r6, r3
 80050d2:	b2f3      	uxtb	r3, r6
 80050d4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 80050d8:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d113      	bne.n	8005108 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 80050e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80050e4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80050e8:	2301      	movs	r3, #1
 80050ea:	461e      	mov	r6, r3
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	f7fb fcda 	bl	8000aac <__aeabi_dcmpeq>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <CSE_step+0x2a2>
 80050fe:	2300      	movs	r3, #0
 8005100:	461e      	mov	r6, r3
 8005102:	b2f3      	uxtb	r3, r6
 8005104:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 800510e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005112:	2b00      	cmp	r3, #0
 8005114:	d018      	beq.n	8005148 <CSE_step+0x2e8>
      guard1 = true;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 800511c:	e395      	b.n	800584a <CSE_step+0x9ea>
 800511e:	bf00      	nop
	...
 800512c:	40000000 	.word	0x40000000
 8005130:	9999999a 	.word	0x9999999a
 8005134:	3fc99999 	.word	0x3fc99999
 8005138:	20001010 	.word	0x20001010
 800513c:	2001bbe8 	.word	0x2001bbe8
 8005140:	2001bba0 	.word	0x2001bba0
 8005144:	2001bb90 	.word	0x2001bb90
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005150:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005154:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005160:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb fb62 	bl	8000830 <__aeabi_ddiv>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005174:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005178:	f107 0310 	add.w	r3, r7, #16
 800517c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005180:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005188:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800518c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005190:	f7fb fa24 	bl	80005dc <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb f866 	bl	800026c <__aeabi_dsub>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051b0:	f7fb fb3e 	bl	8000830 <__aeabi_ddiv>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80051bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80051c8:	4639      	mov	r1, r7
 80051ca:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80051d4:	e025      	b.n	8005222 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 80051d6:	463b      	mov	r3, r7
 80051d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051dc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80051e0:	3306      	adds	r3, #6
 80051e2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80051f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb f9ed 	bl	80005dc <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fb f82f 	bl	800026c <__aeabi_dsub>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4639      	mov	r1, r7
 8005214:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005218:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800521c:	3301      	adds	r3, #1
 800521e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005222:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005226:	2b01      	cmp	r3, #1
 8005228:	ddd5      	ble.n	80051d6 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 800522a:	463b      	mov	r3, r7
 800522c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005230:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005234:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005238:	f7fb fafa 	bl	8000830 <__aeabi_ddiv>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005244:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005250:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	4611      	mov	r1, r2
 800525e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005266:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005272:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005276:	f7fb fc41 	bl	8000afc <__aeabi_dcmpgt>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <CSE_step+0x436>
        temp = 1.0;
 8005280:	4639      	mov	r1, r7
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	4bbf      	ldr	r3, [pc, #764]	; (8005584 <CSE_step+0x724>)
 8005288:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800528c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005290:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005294:	e016      	b.n	80052c4 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800529e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80052a2:	f7fb fac5 	bl	8000830 <__aeabi_ddiv>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 80052ae:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80052b2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80052b6:	f7fb f991 	bl	80005dc <__aeabi_dmul>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4639      	mov	r1, r7
 80052c0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 80052c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052cc:	4611      	mov	r1, r2
 80052ce:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80052d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 80052da:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80052de:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80052e2:	f7fb fc0b 	bl	8000afc <__aeabi_dcmpgt>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d02b      	beq.n	8005344 <CSE_step+0x4e4>
        t = scale / absxk;
 80052ec:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80052f0:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80052f4:	f7fb fa9c 	bl	8000830 <__aeabi_ddiv>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005300:	463b      	mov	r3, r7
 8005302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005306:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800530a:	f7fb f967 	bl	80005dc <__aeabi_dmul>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800531a:	f7fb f95f 	bl	80005dc <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b96      	ldr	r3, [pc, #600]	; (8005584 <CSE_step+0x724>)
 800532c:	f7fa ffa0 	bl	8000270 <__adddf3>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4639      	mov	r1, r7
 8005336:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800533a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800533e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005342:	e01d      	b.n	8005380 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8005344:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005348:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800534c:	f7fb fa70 	bl	8000830 <__aeabi_ddiv>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005358:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800535c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005360:	f7fb f93c 	bl	80005dc <__aeabi_dmul>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	463b      	mov	r3, r7
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f7fa ff7d 	bl	8000270 <__adddf3>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4639      	mov	r1, r7
 800537c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8005380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005384:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005388:	4611      	mov	r1, r2
 800538a:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005392:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005396:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800539a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800539e:	f7fb fbad 	bl	8000afc <__aeabi_dcmpgt>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02b      	beq.n	8005400 <CSE_step+0x5a0>
        t = scale / absxk;
 80053a8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80053ac:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80053b0:	f7fb fa3e 	bl	8000830 <__aeabi_ddiv>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 80053bc:	463b      	mov	r3, r7
 80053be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053c2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80053c6:	f7fb f909 	bl	80005dc <__aeabi_dmul>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80053d6:	f7fb f901 	bl	80005dc <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	4b67      	ldr	r3, [pc, #412]	; (8005584 <CSE_step+0x724>)
 80053e8:	f7fa ff42 	bl	8000270 <__adddf3>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4639      	mov	r1, r7
 80053f2:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80053f6:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80053fa:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80053fe:	e01d      	b.n	800543c <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8005400:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005404:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005408:	f7fb fa12 	bl	8000830 <__aeabi_ddiv>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005414:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005418:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800541c:	f7fb f8de 	bl	80005dc <__aeabi_dmul>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4610      	mov	r0, r2
 8005426:	4619      	mov	r1, r3
 8005428:	463b      	mov	r3, r7
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fa ff1f 	bl	8000270 <__adddf3>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4639      	mov	r1, r7
 8005438:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800543c:	463b      	mov	r3, r7
 800543e:	ed93 7b00 	vldr	d7, [r3]
 8005442:	eeb0 0a47 	vmov.f32	s0, s14
 8005446:	eef0 0a67 	vmov.f32	s1, s15
 800544a:	f011 fe05 	bl	8017058 <sqrt>
 800544e:	ec51 0b10 	vmov	r0, r1, d0
 8005452:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005456:	f7fb f8c1 	bl	80005dc <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4639      	mov	r1, r7
 8005460:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8005464:	463b      	mov	r3, r7
 8005466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	4b45      	ldr	r3, [pc, #276]	; (8005584 <CSE_step+0x724>)
 8005470:	f7fb fb3a 	bl	8000ae8 <__aeabi_dcmpge>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <CSE_step+0x622>
        guard1 = true;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005480:	e1e3      	b.n	800584a <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8005482:	463b      	mov	r3, r7
 8005484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005488:	463b      	mov	r3, r7
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fb f8a5 	bl	80005dc <__aeabi_dmul>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	493a      	ldr	r1, [pc, #232]	; (8005584 <CSE_step+0x724>)
 800549c:	f7fa fee6 	bl	800026c <__aeabi_dsub>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	ec43 2b17 	vmov	d7, r2, r3
 80054a8:	eeb0 0a47 	vmov.f32	s0, s14
 80054ac:	eef0 0a67 	vmov.f32	s1, s15
 80054b0:	f011 fdd2 	bl	8017058 <sqrt>
 80054b4:	eeb0 6a40 	vmov.f32	s12, s0
 80054b8:	eef0 6a60 	vmov.f32	s13, s1
 80054bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054c0:	ed93 7b04 	vldr	d7, [r3, #16]
 80054c4:	463a      	mov	r2, r7
 80054c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ca:	f103 0110 	add.w	r1, r3, #16
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	3310      	adds	r3, #16
 80054d4:	4618      	mov	r0, r3
 80054d6:	eeb0 1a47 	vmov.f32	s2, s14
 80054da:	eef0 1a67 	vmov.f32	s3, s15
 80054de:	eeb0 0a46 	vmov.f32	s0, s12
 80054e2:	eef0 0a66 	vmov.f32	s1, s13
 80054e6:	f005 faeb 	bl	800aac0 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 80054ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 80054fa:	463b      	mov	r3, r7
 80054fc:	ed93 7b00 	vldr	d7, [r3]
 8005500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005504:	ed93 6b02 	vldr	d6, [r3, #8]
 8005508:	463a      	mov	r2, r7
 800550a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800550e:	f103 0108 	add.w	r1, r3, #8
 8005512:	f107 0310 	add.w	r3, r7, #16
 8005516:	3308      	adds	r3, #8
 8005518:	4618      	mov	r0, r3
 800551a:	eeb0 1a46 	vmov.f32	s2, s12
 800551e:	eef0 1a66 	vmov.f32	s3, s13
 8005522:	eeb0 0a47 	vmov.f32	s0, s14
 8005526:	eef0 0a67 	vmov.f32	s1, s15
 800552a:	f005 fac9 	bl	800aac0 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 800552e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 800553e:	463b      	mov	r3, r7
 8005540:	ed93 7b00 	vldr	d7, [r3]
 8005544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005548:	ed93 6b00 	vldr	d6, [r3]
 800554c:	463a      	mov	r2, r7
 800554e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005552:	f107 0310 	add.w	r3, r7, #16
 8005556:	4618      	mov	r0, r3
 8005558:	eeb0 1a46 	vmov.f32	s2, s12
 800555c:	eef0 1a66 	vmov.f32	s3, s13
 8005560:	eeb0 0a47 	vmov.f32	s0, s14
 8005564:	eef0 0a67 	vmov.f32	s1, s15
 8005568:	f005 faaa 	bl	800aac0 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 800556c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005582:	e06e      	b.n	8005662 <CSE_step+0x802>
 8005584:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8005588:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800558c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005598:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800559c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fb f818 	bl	80005dc <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4639      	mov	r1, r7
 80055b2:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 80055b6:	f107 0210 	add.w	r2, r7, #16
 80055ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055c6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80055ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f801 	bl	80005dc <__aeabi_dmul>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4690      	mov	r8, r2
 80055e0:	4699      	mov	r9, r3
 80055e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f7fa ffef 	bl	80005dc <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fa fe31 	bl	800026c <__aeabi_dsub>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005612:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005616:	00c9      	lsls	r1, r1, #3
 8005618:	4401      	add	r1, r0
 800561a:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 800561e:	f107 0210 	add.w	r2, r7, #16
 8005622:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4413      	add	r3, r2
 800562a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800562e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa ffd1 	bl	80005dc <__aeabi_dmul>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	463b      	mov	r3, r7
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fe12 	bl	8000270 <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005654:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8005658:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800565c:	3b01      	subs	r3, #1
 800565e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005662:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005666:	2b00      	cmp	r3, #0
 8005668:	da8e      	bge.n	8005588 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 800566a:	2301      	movs	r3, #1
 800566c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005670:	e06f      	b.n	8005752 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8005672:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005676:	3303      	adds	r3, #3
 8005678:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	4639      	mov	r1, r7
 8005686:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 800568a:	f107 0210 	add.w	r2, r7, #16
 800568e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800569a:	463b      	mov	r3, r7
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ff9c 	bl	80005dc <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4690      	mov	r8, r2
 80056aa:	4699      	mov	r9, r3
 80056ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056b0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056c4:	f7fa ff8a 	bl	80005dc <__aeabi_dmul>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4610      	mov	r0, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056d4:	1cde      	adds	r6, r3, #3
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa fdc5 	bl	800026c <__aeabi_dsub>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80056ea:	00f1      	lsls	r1, r6, #3
 80056ec:	4401      	add	r1, r0
 80056ee:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 80056f2:	f107 0210 	add.w	r2, r7, #16
 80056f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005706:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800570a:	f7fa ff67 	bl	80005dc <__aeabi_dmul>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4690      	mov	r8, r2
 8005714:	4699      	mov	r9, r3
 8005716:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800571a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005726:	463b      	mov	r3, r7
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f7fa ff56 	bl	80005dc <__aeabi_dmul>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fa fd9a 	bl	8000270 <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005744:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 8005748:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800574c:	3b01      	subs	r3, #1
 800574e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005752:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005756:	2b00      	cmp	r3, #0
 8005758:	da8b      	bge.n	8005672 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 800575a:	2302      	movs	r3, #2
 800575c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005760:	e06f      	b.n	8005842 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8005762:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005766:	3306      	adds	r3, #6
 8005768:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	4639      	mov	r1, r7
 8005776:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 800577a:	f107 0210 	add.w	r2, r7, #16
 800577e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800578a:	463b      	mov	r3, r7
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f7fa ff24 	bl	80005dc <__aeabi_dmul>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4690      	mov	r8, r2
 800579a:	4699      	mov	r9, r3
 800579c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057a0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057b4:	f7fa ff12 	bl	80005dc <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057c4:	1d9e      	adds	r6, r3, #6
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa fd4d 	bl	800026c <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80057da:	00f1      	lsls	r1, r6, #3
 80057dc:	4401      	add	r1, r0
 80057de:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 80057e2:	f107 0210 	add.w	r2, r7, #16
 80057e6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057fa:	f7fa feef 	bl	80005dc <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4690      	mov	r8, r2
 8005804:	4699      	mov	r9, r3
 8005806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800580a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005816:	463b      	mov	r3, r7
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa fede 	bl	80005dc <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	f7fa fd22 	bl	8000270 <__adddf3>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005834:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 8005838:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800583c:	3b01      	subs	r3, #1
 800583e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005842:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005846:	2b00      	cmp	r3, #0
 8005848:	da8b      	bge.n	8005762 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 800584a:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 82e1 	beq.w	8005e16 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800585a:	2300      	movs	r3, #0
 800585c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005860:	e0d6      	b.n	8005a10 <CSE_step+0xbb0>
        coffset = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800586e:	e0c0      	b.n	80059f2 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8005870:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005874:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005878:	4413      	add	r3, r2
 800587a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 800587e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005882:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8005896:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800589a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80058aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058b6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80058ba:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fe89 	bl	80005dc <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fa fccd 	bl	8000270 <__adddf3>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80058de:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80058e2:	00c9      	lsls	r1, r1, #3
 80058e4:	4401      	add	r1, r0
 80058e6:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 80058ea:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80058ee:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058fe:	3301      	adds	r3, #1
 8005900:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800590c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005910:	3301      	adds	r3, #1
 8005912:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fe5d 	bl	80005dc <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fa fca1 	bl	8000270 <__adddf3>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005936:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800593a:	00c9      	lsls	r1, r1, #3
 800593c:	4401      	add	r1, r0
 800593e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 8005942:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005946:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4413      	add	r3, r2
 800594e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005952:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005956:	3302      	adds	r3, #2
 8005958:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005964:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005968:	3302      	adds	r3, #2
 800596a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4413      	add	r3, r2
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fe31 	bl	80005dc <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4640      	mov	r0, r8
 8005980:	4649      	mov	r1, r9
 8005982:	f7fa fc75 	bl	8000270 <__adddf3>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800598e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005992:	00c9      	lsls	r1, r1, #3
 8005994:	4401      	add	r1, r0
 8005996:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 800599a:	f107 0210 	add.w	r2, r7, #16
 800599e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059aa:	f107 0210 	add.w	r2, r7, #16
 80059ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ba:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 80059be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059c2:	4433      	add	r3, r6
 80059c4:	461e      	mov	r6, r3
 80059c6:	4642      	mov	r2, r8
 80059c8:	464b      	mov	r3, r9
 80059ca:	f7fa fe07 	bl	80005dc <__aeabi_dmul>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80059d6:	00f1      	lsls	r1, r6, #3
 80059d8:	4401      	add	r1, r0
 80059da:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 80059de:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80059e2:	3303      	adds	r3, #3
 80059e4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80059e8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80059ec:	3301      	adds	r3, #1
 80059ee:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80059f2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	f77f af3a 	ble.w	8005870 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 80059fc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a00:	3303      	adds	r3, #3
 8005a02:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005a06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005a10:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	f77f af24 	ble.w	8005862 <CSE_step+0xa02>
      }

      errorCondition = true;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005a20:	2300      	movs	r3, #0
 8005a22:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005a26:	e045      	b.n	8005ab4 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 8005a28:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a2c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a38:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005a3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fc10 	bl	800026c <__aeabi_dsub>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4639      	mov	r1, r7
 8005a52:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8005a56:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01a      	beq.n	8005a94 <CSE_step+0xc34>
 8005a5e:	463b      	mov	r3, r7
 8005a60:	ed93 7b00 	vldr	d7, [r3]
 8005a64:	eeb0 0a47 	vmov.f32	s0, s14
 8005a68:	eef0 0a67 	vmov.f32	s1, s15
 8005a6c:	f005 fa9e 	bl	800afac <rtIsInf>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <CSE_step+0xc2e>
 8005a76:	463b      	mov	r3, r7
 8005a78:	ed93 7b00 	vldr	d7, [r3]
 8005a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8005a80:	eef0 0a67 	vmov.f32	s1, s15
 8005a84:	f005 fab6 	bl	800aff4 <rtIsNaN>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <CSE_step+0xc34>
          errorCondition = false;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005a94:	463b      	mov	r3, r7
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005a9e:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005aa2:	00c9      	lsls	r1, r1, #3
 8005aa4:	4401      	add	r1, r0
 8005aa6:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8005aaa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005ab4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	ddb5      	ble.n	8005a28 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8005abc:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005ac4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ac8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005acc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005ad0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005ad4:	f005 fae0 	bl	800b098 <svd_u3DvUgOe>
 8005ad8:	e02c      	b.n	8005b34 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8005ada:	4bd2      	ldr	r3, [pc, #840]	; (8005e24 <CSE_step+0xfc4>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005ae4:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005ae8:	4bce      	ldr	r3, [pc, #824]	; (8005e24 <CSE_step+0xfc4>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005af2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8005af6:	4bcb      	ldr	r3, [pc, #812]	; (8005e24 <CSE_step+0xfc4>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b00:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b0a:	e00f      	b.n	8005b2c <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8005b0c:	4bc5      	ldr	r3, [pc, #788]	; (8005e24 <CSE_step+0xfc4>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8005b16:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005b1a:	00c9      	lsls	r1, r1, #3
 8005b1c:	4401      	add	r1, r0
 8005b1e:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b22:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b26:	3301      	adds	r3, #1
 8005b28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b2c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	ddeb      	ble.n	8005b0c <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8005b34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b38:	2248      	movs	r2, #72	; 0x48
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f010 fffb 	bl	8016b38 <memset>
      Ss[0] = s[0];
 8005b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b4e:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8005b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b5a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b5e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8005b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b6a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8005b6e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b78:	e01e      	b.n	8005bb8 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8005b7a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005b7e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	ed93 7b00 	vldr	d7, [r3]
 8005b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b8e:	eef0 0a67 	vmov.f32	s1, s15
 8005b92:	f011 fa61 	bl	8017058 <sqrt>
 8005b96:	eeb0 7a40 	vmov.f32	s14, s0
 8005b9a:	eef0 7a60 	vmov.f32	s15, s1
 8005b9e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005ba2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4413      	add	r3, r2
 8005baa:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005bae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005bb8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	dddc      	ble.n	8005b7a <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bcc:	e0b4      	b.n	8005d38 <CSE_step+0xed8>
        coffset = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005bda:	e09e      	b.n	8005d1a <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8005bdc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005be0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005be4:	4413      	add	r3, r2
 8005be6:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8005bea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bee:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	18d1      	adds	r1, r2, r3
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 8005c02:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c06:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c12:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005c16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c22:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005c26:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fcd3 	bl	80005dc <__aeabi_dmul>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fb17 	bl	8000270 <__adddf3>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005c4a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005c4e:	00c9      	lsls	r1, r1, #3
 8005c50:	4401      	add	r1, r0
 8005c52:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 8005c56:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c5a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c78:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fca7 	bl	80005dc <__aeabi_dmul>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa faeb 	bl	8000270 <__adddf3>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005ca2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005ca6:	00c9      	lsls	r1, r1, #3
 8005ca8:	4401      	add	r1, r0
 8005caa:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8005cae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005cb2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cbe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cd0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005cd4:	3306      	adds	r3, #6
 8005cd6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4413      	add	r3, r2
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f7fa fc7b 	bl	80005dc <__aeabi_dmul>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4640      	mov	r0, r8
 8005cec:	4649      	mov	r1, r9
 8005cee:	f7fa fabf 	bl	8000270 <__adddf3>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005cfa:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005cfe:	00c9      	lsls	r1, r1, #3
 8005d00:	4401      	add	r1, r0
 8005d02:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005d06:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005d10:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005d14:	3301      	adds	r3, #1
 8005d16:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005d1a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	f77f af5c 	ble.w	8005bdc <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8005d24:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d28:	3303      	adds	r3, #3
 8005d2a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005d2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d32:	3301      	adds	r3, #1
 8005d34:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d38:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f77f af46 	ble.w	8005bce <CSE_step+0xd6e>
      }

      errorCondition = true;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005d54:	e042      	b.n	8005ddc <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8005d56:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8005d66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	dc23      	bgt.n	8005db6 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8005d6e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	441a      	add	r2, r3
 8005d78:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	f7fa fe8b 	bl	8000aac <__aeabi_dcmpeq>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <CSE_step+0xf4a>
              errorCondition = false;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8005da8:	e00d      	b.n	8005dc6 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8005daa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005db4:	e007      	b.n	8005dc6 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8005db6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005dba:	3301      	adds	r3, #1
 8005dbc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8005dc6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0c8      	beq.n	8005d60 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8005dce:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <CSE_step+0xf7c>
          exitg2 = true;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005ddc:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <CSE_step+0xf8c>
 8005de4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	ddb4      	ble.n	8005d56 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8005dec:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d110      	bne.n	8005e16 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8005df4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005df8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005dfc:	2248      	movs	r2, #72	; 0x48
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f010 fe8c 	bl	8016b1c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8005e04:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e08:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005e0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e10:	4618      	mov	r0, r3
 8005e12:	f002 fd7d 	bl	8008910 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e22:	e062      	b.n	8005eea <CSE_step+0x108a>
 8005e24:	2001bc10 	.word	0x2001bc10
      CSE_DW.P[iAcol_0] = R[iAcol];
 8005e28:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e2c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4413      	add	r3, r2
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	48a5      	ldr	r0, [pc, #660]	; (80060d0 <CSE_step+0x1270>)
 8005e3a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005e3e:	00c9      	lsls	r1, r1, #3
 8005e40:	4401      	add	r1, r0
 8005e42:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8005e46:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005e50:	1c51      	adds	r1, r2, #1
 8005e52:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	489c      	ldr	r0, [pc, #624]	; (80060d0 <CSE_step+0x1270>)
 8005e60:	00c9      	lsls	r1, r1, #3
 8005e62:	4401      	add	r1, r0
 8005e64:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8005e68:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e6c:	3306      	adds	r3, #6
 8005e6e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005e72:	1c91      	adds	r1, r2, #2
 8005e74:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	4893      	ldr	r0, [pc, #588]	; (80060d0 <CSE_step+0x1270>)
 8005e82:	00c9      	lsls	r1, r1, #3
 8005e84:	4401      	add	r1, r0
 8005e86:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8005e8a:	4a91      	ldr	r2, [pc, #580]	; (80060d0 <CSE_step+0x1270>)
 8005e8c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e90:	3309      	adds	r3, #9
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005e9e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fb93 	bl	80005dc <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f7fa f9d7 	bl	8000270 <__adddf3>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4882      	ldr	r0, [pc, #520]	; (80060d0 <CSE_step+0x1270>)
 8005ec8:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005ecc:	3109      	adds	r1, #9
 8005ece:	00c9      	lsls	r1, r1, #3
 8005ed0:	4401      	add	r1, r0
 8005ed2:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005ed6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eda:	3303      	adds	r3, #3
 8005edc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005ee0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005eea:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	dd9a      	ble.n	8005e28 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8005ef2:	4b77      	ldr	r3, [pc, #476]	; (80060d0 <CSE_step+0x1270>)
 8005ef4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005ef8:	4b75      	ldr	r3, [pc, #468]	; (80060d0 <CSE_step+0x1270>)
 8005efa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005efe:	f7fa fc97 	bl	8000830 <__aeabi_ddiv>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4973      	ldr	r1, [pc, #460]	; (80060d4 <CSE_step+0x1274>)
 8005f08:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.C = CSE_DW.x[2];
 8005f0c:	4b70      	ldr	r3, [pc, #448]	; (80060d0 <CSE_step+0x1270>)
 8005f0e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005f12:	4970      	ldr	r1, [pc, #448]	; (80060d4 <CSE_step+0x1274>)
 8005f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	486e      	ldr	r0, [pc, #440]	; (80060d8 <CSE_step+0x1278>)
 8005f20:	f7fe fb26 	bl	8004570 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f2a:	e034      	b.n	8005f96 <CSE_step+0x1136>
    s_0 = 0.34641016151377552 * CSE_DW.P[iAcol_0];
 8005f2c:	4a68      	ldr	r2, [pc, #416]	; (80060d0 <CSE_step+0x1270>)
 8005f2e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f3a:	a363      	add	r3, pc, #396	; (adr r3, 80060c8 <CSE_step+0x1268>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa fb4c 	bl	80005dc <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	f107 0108 	add.w	r1, r7, #8
 8005f4c:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8005f50:	f107 0308 	add.w	r3, r7, #8
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005f5c:	00c9      	lsls	r1, r1, #3
 8005f5e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005f62:	4401      	add	r1, r0
 8005f64:	39d0      	subs	r1, #208	; 0xd0
 8005f66:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005f76:	3109      	adds	r1, #9
 8005f78:	4614      	mov	r4, r2
 8005f7a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005f7e:	00cb      	lsls	r3, r1, #3
 8005f80:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005f84:	4413      	add	r3, r2
 8005f86:	3bd0      	subs	r3, #208	; 0xd0
 8005f88:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005f8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f90:	3301      	adds	r3, #1
 8005f92:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	ddc6      	ble.n	8005f2c <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005faa:	e058      	b.n	800605e <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8005fac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3bd0      	subs	r3, #208	; 0xd0
 8005fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fbe:	4b44      	ldr	r3, [pc, #272]	; (80060d0 <CSE_step+0x1270>)
 8005fc0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005fc4:	f7fa f954 	bl	8000270 <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005fd0:	00c9      	lsls	r1, r1, #3
 8005fd2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005fd6:	4401      	add	r1, r0
 8005fd8:	39d0      	subs	r1, #208	; 0xd0
 8005fda:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8005fde:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005fea:	4413      	add	r3, r2
 8005fec:	3bd0      	subs	r3, #208	; 0xd0
 8005fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ff2:	4b37      	ldr	r3, [pc, #220]	; (80060d0 <CSE_step+0x1270>)
 8005ff4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005ff8:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	f7fa f937 	bl	8000270 <__adddf3>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	00e1      	lsls	r1, r4, #3
 8006008:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800600c:	4401      	add	r1, r0
 800600e:	39d0      	subs	r1, #208	; 0xd0
 8006010:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8006014:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006018:	3302      	adds	r3, #2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006020:	4413      	add	r3, r2
 8006022:	3bd0      	subs	r3, #208	; 0xd0
 8006024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006028:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <CSE_step+0x1270>)
 800602a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800602e:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006032:	3402      	adds	r4, #2
 8006034:	f7fa f91c 	bl	8000270 <__adddf3>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	00e1      	lsls	r1, r4, #3
 800603e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006042:	4401      	add	r1, r0
 8006044:	39d0      	subs	r1, #208	; 0xd0
 8006046:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 800604a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800604e:	3303      	adds	r3, #3
 8006050:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006054:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006058:	3301      	adds	r3, #1
 800605a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800605e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006062:	2b05      	cmp	r3, #5
 8006064:	dda2      	ble.n	8005fac <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 800606c:	2300      	movs	r3, #0
 800606e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006072:	e018      	b.n	80060a6 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8006074:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006078:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	18d0      	adds	r0, r2, r3
 8006080:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006084:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	4413      	add	r3, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f7fe fa6f 	bl	8004570 <CSE_S_x>
    iAcol_0 += 3;
 8006092:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006096:	3303      	adds	r3, #3
 8006098:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 800609c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060a0:	3301      	adds	r3, #1
 80060a2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80060a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	dde2      	ble.n	8006074 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 80060ae:	f107 0310 	add.w	r3, r7, #16
 80060b2:	4619      	mov	r1, r3
 80060b4:	4808      	ldr	r0, [pc, #32]	; (80060d8 <CSE_step+0x1278>)
 80060b6:	f7fe fa5b 	bl	8004570 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80060c0:	e021      	b.n	8006106 <CSE_step+0x12a6>
 80060c2:	bf00      	nop
 80060c4:	f3af 8000 	nop.w
 80060c8:	86ad0a23 	.word	0x86ad0a23
 80060cc:	3fd62b95 	.word	0x3fd62b95
 80060d0:	2001bba0 	.word	0x2001bba0
 80060d4:	2001bb80 	.word	0x2001bb80
 80060d8:	2001bbe8 	.word	0x2001bbe8
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 80060dc:	4ab8      	ldr	r2, [pc, #736]	; (80063c0 <CSE_step+0x1560>)
 80060de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80060e2:	3309      	adds	r3, #9
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80060f0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80060f4:	00c9      	lsls	r1, r1, #3
 80060f6:	4401      	add	r1, r0
 80060f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 80060fc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006100:	3301      	adds	r3, #1
 8006102:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006106:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800610a:	2b02      	cmp	r3, #2
 800610c:	dde6      	ble.n	80060dc <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -23.999999999999996, tempY, Y2, C, X2state,
 800610e:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006112:	f107 0210 	add.w	r2, r7, #16
 8006116:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006120:	9303      	str	r3, [sp, #12]
 8006122:	4ba8      	ldr	r3, [pc, #672]	; (80063c4 <CSE_step+0x1564>)
 8006124:	9302      	str	r3, [sp, #8]
 8006126:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	460b      	mov	r3, r1
 8006134:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80063b8 <CSE_step+0x1558>
 8006138:	49a3      	ldr	r1, [pc, #652]	; (80063c8 <CSE_step+0x1568>)
 800613a:	48a4      	ldr	r0, [pc, #656]	; (80063cc <CSE_step+0x156c>)
 800613c:	f000 f9b8 	bl	80064b0 <UTMeanCovSqrt_C2vgLQ4W>
    CSE_DW.x, Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006140:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006144:	2248      	movs	r2, #72	; 0x48
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f010 fcf5 	bl	8016b38 <memset>
  R[0] = 1.0;
 800614e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	4b9e      	ldr	r3, [pc, #632]	; (80063d0 <CSE_step+0x1570>)
 8006158:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 800615c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	4b9a      	ldr	r3, [pc, #616]	; (80063d0 <CSE_step+0x1570>)
 8006166:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 800616a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	4b97      	ldr	r3, [pc, #604]	; (80063d0 <CSE_step+0x1570>)
 8006174:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800617e:	e07e      	b.n	800627e <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8006180:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006194:	e06a      	b.n	800626c <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8006196:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800619a:	4613      	mov	r3, r2
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80061a4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80061a8:	3301      	adds	r3, #1
 80061aa:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4413      	add	r3, r2
 80061b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061ba:	3303      	adds	r3, #3
 80061bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fa08 	bl	80005dc <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4614      	mov	r4, r2
 80061d2:	461d      	mov	r5, r3
 80061d4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80061d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4413      	add	r3, r2
 80061e0:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 80061e4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061e8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4413      	add	r3, r2
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 80061f4:	f7fa f9f2 	bl	80005dc <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa f836 	bl	8000270 <__adddf3>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4690      	mov	r8, r2
 800620a:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 800620c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006210:	3302      	adds	r3, #2
 8006212:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800621e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006222:	3306      	adds	r3, #6
 8006224:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7fa f9d4 	bl	80005dc <__aeabi_dmul>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 800623c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006240:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006244:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	f7fa f80f 	bl	8000270 <__adddf3>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006256:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800625a:	00e1      	lsls	r1, r4, #3
 800625c:	4401      	add	r1, r0
 800625e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006262:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006266:	3301      	adds	r3, #1
 8006268:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800626c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006270:	2b02      	cmp	r3, #2
 8006272:	dd90      	ble.n	8006196 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006274:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800627e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006282:	2b02      	cmp	r3, #2
 8006284:	f77f af7c 	ble.w	8006180 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800629a:	e077      	b.n	800638c <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 800629c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80062a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80062b0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80062b4:	00c9      	lsls	r1, r1, #3
 80062b6:	4401      	add	r1, r0
 80062b8:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 80062bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062c0:	1cd9      	adds	r1, r3, #3
 80062c2:	4a44      	ldr	r2, [pc, #272]	; (80063d4 <CSE_step+0x1574>)
 80062c4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80062c8:	3344      	adds	r3, #68	; 0x44
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4413      	add	r3, r2
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80062d6:	00c9      	lsls	r1, r1, #3
 80062d8:	4401      	add	r1, r0
 80062da:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 80062de:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80062e8:	1c51      	adds	r1, r2, #1
 80062ea:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80062fa:	00c9      	lsls	r1, r1, #3
 80062fc:	4401      	add	r1, r0
 80062fe:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8006302:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006306:	3303      	adds	r3, #3
 8006308:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800630c:	1d11      	adds	r1, r2, #4
 800630e:	4a31      	ldr	r2, [pc, #196]	; (80063d4 <CSE_step+0x1574>)
 8006310:	3344      	adds	r3, #68	; 0x44
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800631e:	00c9      	lsls	r1, r1, #3
 8006320:	4401      	add	r1, r0
 8006322:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8006326:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800632a:	3302      	adds	r3, #2
 800632c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006330:	1c91      	adds	r1, r2, #2
 8006332:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006342:	00c9      	lsls	r1, r1, #3
 8006344:	4401      	add	r1, r0
 8006346:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 800634a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800634e:	3306      	adds	r3, #6
 8006350:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006354:	1d51      	adds	r1, r2, #5
 8006356:	4a1f      	ldr	r2, [pc, #124]	; (80063d4 <CSE_step+0x1574>)
 8006358:	3344      	adds	r3, #68	; 0x44
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006366:	00c9      	lsls	r1, r1, #3
 8006368:	4401      	add	r1, r0
 800636a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 800636e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006372:	3306      	adds	r3, #6
 8006374:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006378:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800637c:	3303      	adds	r3, #3
 800637e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006382:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006386:	3301      	adds	r3, #1
 8006388:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800638c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006390:	2b02      	cmp	r3, #2
 8006392:	dd83      	ble.n	800629c <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8006394:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006398:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800639c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80063a0:	4618      	mov	r0, r3
 80063a2:	f003 fa3d 	bl	8009820 <qr_DvOBrgQi>
  iAcol_0 = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80063b2:	e04c      	b.n	800644e <CSE_step+0x15ee>
 80063b4:	f3af 8000 	nop.w
 80063b8:	ffffffff 	.word	0xffffffff
 80063bc:	c037ffff 	.word	0xc037ffff
 80063c0:	2001bba0 	.word	0x2001bba0
 80063c4:	2001bbe8 	.word	0x2001bbe8
 80063c8:	08018ae0 	.word	0x08018ae0
 80063cc:	08018ad0 	.word	0x08018ad0
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	20001010 	.word	0x20001010
    CSE_DW.P[iAcol_0] = R[iAcol];
 80063d8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80063dc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	481e      	ldr	r0, [pc, #120]	; (8006464 <CSE_step+0x1604>)
 80063ea:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80063ee:	00c9      	lsls	r1, r1, #3
 80063f0:	4401      	add	r1, r0
 80063f2:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80063f6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80063fa:	3303      	adds	r3, #3
 80063fc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006400:	1c51      	adds	r1, r2, #1
 8006402:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	4815      	ldr	r0, [pc, #84]	; (8006464 <CSE_step+0x1604>)
 8006410:	00c9      	lsls	r1, r1, #3
 8006412:	4401      	add	r1, r0
 8006414:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006418:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800641c:	3306      	adds	r3, #6
 800641e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006422:	1c91      	adds	r1, r2, #2
 8006424:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4413      	add	r3, r2
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	480c      	ldr	r0, [pc, #48]	; (8006464 <CSE_step+0x1604>)
 8006432:	00c9      	lsls	r1, r1, #3
 8006434:	4401      	add	r1, r0
 8006436:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 800643a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800643e:	3303      	adds	r3, #3
 8006440:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006444:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006448:	3301      	adds	r3, #1
 800644a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800644e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006452:	2b02      	cmp	r3, #2
 8006454:	ddc0      	ble.n	80063d8 <CSE_step+0x1578>
  }
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 800645e:	46bd      	mov	sp, r7
 8006460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006464:	2001bba0 	.word	0x2001bba0

08006468 <CSE_initialize>:

void CSE_initialize(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 800646c:	2008      	movs	r0, #8
 800646e:	f004 fd59 	bl	800af24 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8006472:	2248      	movs	r2, #72	; 0x48
 8006474:	490b      	ldr	r1, [pc, #44]	; (80064a4 <CSE_initialize+0x3c>)
 8006476:	480c      	ldr	r0, [pc, #48]	; (80064a8 <CSE_initialize+0x40>)
 8006478:	f010 fb50 	bl	8016b1c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <CSE_initialize+0x44>)
 800647e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8006482:	4909      	ldr	r1, [pc, #36]	; (80064a8 <CSE_initialize+0x40>)
 8006484:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8006488:	4b08      	ldr	r3, [pc, #32]	; (80064ac <CSE_initialize+0x44>)
 800648a:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 800648e:	4906      	ldr	r1, [pc, #24]	; (80064a8 <CSE_initialize+0x40>)
 8006490:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <CSE_initialize+0x44>)
 8006496:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 800649a:	4903      	ldr	r1, [pc, #12]	; (80064a8 <CSE_initialize+0x40>)
 800649c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 80064a0:	bf00      	nop
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20001280 	.word	0x20001280
 80064a8:	2001bba0 	.word	0x2001bba0
 80064ac:	20001010 	.word	0x20001010

080064b0 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 80064b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b4:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	f107 0414 	add.w	r4, r7, #20
 80064be:	6020      	str	r0, [r4, #0]
 80064c0:	f107 0010 	add.w	r0, r7, #16
 80064c4:	6001      	str	r1, [r0, #0]
 80064c6:	f107 0108 	add.w	r1, r7, #8
 80064ca:	ed81 0b00 	vstr	d0, [r1]
 80064ce:	1d39      	adds	r1, r7, #4
 80064d0:	600a      	str	r2, [r1, #0]
 80064d2:	463a      	mov	r2, r7
 80064d4:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064de:	f107 0314 	add.w	r3, r7, #20
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f878 	bl	80005dc <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80064f4:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006510:	3408      	adds	r4, #8
 8006512:	f7fa f863 	bl	80005dc <__aeabi_dmul>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3310      	adds	r3, #16
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006536:	3410      	adds	r4, #16
 8006538:	f7fa f850 	bl	80005dc <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800654a:	2300      	movs	r3, #0
 800654c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006550:	e079      	b.n	8006646 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8006552:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006556:	e9d3 4500 	ldrd	r4, r5, [r3]
 800655a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	463a      	mov	r2, r7
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	4413      	add	r3, r2
 8006566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800656a:	f107 0314 	add.w	r3, r7, #20
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7fa f831 	bl	80005dc <__aeabi_dmul>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7f9 fe75 	bl	8000270 <__adddf3>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800658e:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8006592:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006596:	3308      	adds	r3, #8
 8006598:	e9d3 4500 	ldrd	r4, r5, [r3]
 800659c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80065a0:	3301      	adds	r3, #1
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	463a      	mov	r2, r7
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7fa f80f 	bl	80005dc <__aeabi_dmul>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80065ca:	f103 0608 	add.w	r6, r3, #8
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7f9 fe4b 	bl	8000270 <__adddf3>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 80065e2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80065e6:	3310      	adds	r3, #16
 80065e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80065ec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80065f0:	3302      	adds	r3, #2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	463a      	mov	r2, r7
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4413      	add	r3, r2
 80065fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065fe:	f107 0314 	add.w	r3, r7, #20
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 ffe7 	bl	80005dc <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800661a:	f103 0610 	add.w	r6, r3, #16
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7f9 fe23 	bl	8000270 <__adddf3>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8006632:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006636:	3303      	adds	r3, #3
 8006638:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800663c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006640:	3301      	adds	r3, #1
 8006642:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006646:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800664a:	2b05      	cmp	r3, #5
 800664c:	dd81      	ble.n	8006552 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 800664e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f107 0108 	add.w	r1, r7, #8
 800665a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665e:	f7f9 ffbd 	bl	80005dc <__aeabi_dmul>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006672:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006676:	f7f9 fdf9 	bl	800026c <__aeabi_dsub>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8006682:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006686:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800668a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006696:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 800669a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800669e:	3308      	adds	r3, #8
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ac:	f7f9 ff96 	bl	80005dc <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066c2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80066c6:	f7f9 fdd1 	bl	800026c <__aeabi_dsub>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 80066d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066d6:	f103 0108 	add.w	r1, r3, #8
 80066da:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80066de:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f103 0108 	add.w	r1, r3, #8
 80066ea:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80066ee:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 80066f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066f6:	3310      	adds	r3, #16
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006704:	f7f9 ff6a 	bl	80005dc <__aeabi_dmul>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 8006710:	1d3b      	adds	r3, r7, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3310      	adds	r3, #16
 8006716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800671a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800671e:	f7f9 fda5 	bl	800026c <__aeabi_dsub>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 800672a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800672e:	f103 0110 	add.w	r1, r3, #16
 8006732:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006736:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f103 0110 	add.w	r1, r3, #16
 8006742:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006746:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006756:	e054      	b.n	8006802 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 8006758:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	463a      	mov	r2, r7
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	4413      	add	r3, r2
 8006764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006768:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8006774:	00e4      	lsls	r4, r4, #3
 8006776:	463d      	mov	r5, r7
 8006778:	682d      	ldr	r5, [r5, #0]
 800677a:	442c      	add	r4, r5
 800677c:	f7f9 fd76 	bl	800026c <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8006788:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800678c:	3301      	adds	r3, #1
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	463a      	mov	r2, r7
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	4413      	add	r3, r2
 8006796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800679a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800679e:	3308      	adds	r3, #8
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 80067a8:	3401      	adds	r4, #1
 80067aa:	00e4      	lsls	r4, r4, #3
 80067ac:	463d      	mov	r5, r7
 80067ae:	682d      	ldr	r5, [r5, #0]
 80067b0:	442c      	add	r4, r5
 80067b2:	f7f9 fd5b 	bl	800026c <__aeabi_dsub>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 80067be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80067c2:	3302      	adds	r3, #2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	463a      	mov	r2, r7
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	4413      	add	r3, r2
 80067cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80067d4:	3302      	adds	r3, #2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	463a      	mov	r2, r7
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	18d4      	adds	r4, r2, r3
 80067de:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80067e2:	f7f9 fd43 	bl	800026c <__aeabi_dsub>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80067ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80067f2:	3303      	adds	r3, #3
 80067f4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80067f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80067fc:	3301      	adds	r3, #1
 80067fe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006802:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006806:	2b05      	cmp	r3, #5
 8006808:	dda6      	ble.n	8006758 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	ed93 0b00 	vldr	d0, [r3]
 8006812:	f004 fbef 	bl	800aff4 <rtIsNaN>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 800681c:	f107 0308 	add.w	r3, r7, #8
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8006828:	e029      	b.n	800687e <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 800682a:	f107 0108 	add.w	r1, r7, #8
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683a:	f7fa f941 	bl	8000ac0 <__aeabi_dcmplt>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	4bce      	ldr	r3, [pc, #824]	; (8006b84 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 800684a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800684e:	e016      	b.n	800687e <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8006850:	f107 0108 	add.w	r1, r7, #8
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006860:	f7fa f94c 	bl	8000afc <__aeabi_dcmpgt>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	4bc6      	ldr	r3, [pc, #792]	; (8006b88 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8006870:	e003      	b.n	800687a <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 800688c:	f7f9 fea6 	bl	80005dc <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8006898:	f107 0310 	add.w	r3, r7, #16
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 80068a8:	f7f9 fe98 	bl	80005dc <__aeabi_dmul>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 80068b4:	f107 0408 	add.w	r4, r7, #8
 80068b8:	f107 0108 	add.w	r1, r7, #8
 80068bc:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80068c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c4:	f7f9 fe8a 	bl	80005dc <__aeabi_dmul>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	ed93 0b00 	vldr	d0, [r3]
 80068d8:	f010 fbbe 	bl	8017058 <sqrt>
 80068dc:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 80068e0:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 80068e4:	f010 fbb8 	bl	8017058 <sqrt>
 80068e8:	eeb0 7a40 	vmov.f32	s14, s0
 80068ec:	eef0 7a60 	vmov.f32	s15, s1
 80068f0:	f107 0318 	add.w	r3, r7, #24
 80068f4:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006904:	e03c      	b.n	8006980 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006912:	e027      	b.n	8006964 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8006914:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8006918:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800691c:	4413      	add	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	463a      	mov	r2, r7
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	4413      	add	r3, r2
 8006926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8006936:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 800693a:	442c      	add	r4, r5
 800693c:	f7f9 fe4e 	bl	80005dc <__aeabi_dmul>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8006948:	00e1      	lsls	r1, r4, #3
 800694a:	4401      	add	r1, r0
 800694c:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8006950:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8006954:	3303      	adds	r3, #3
 8006956:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 800695a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800695e:	3301      	adds	r3, #1
 8006960:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006964:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006968:	2b05      	cmp	r3, #5
 800696a:	ddd3      	ble.n	8006914 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 800696c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006970:	3306      	adds	r3, #6
 8006972:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8006976:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800697a:	3301      	adds	r3, #1
 800697c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006980:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006984:	2b02      	cmp	r3, #2
 8006986:	ddbe      	ble.n	8006906 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8006988:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800698c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006990:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006994:	4618      	mov	r0, r3
 8006996:	f002 ff43 	bl	8009820 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 800699a:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 800699e:	f004 fb29 	bl	800aff4 <rtIsNaN>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d125      	bne.n	80069f4 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80069b4:	f7fa f884 	bl	8000ac0 <__aeabi_dcmplt>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	4b70      	ldr	r3, [pc, #448]	; (8006b84 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 80069c4:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 80069c8:	e014      	b.n	80069f4 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80069d6:	f7fa f891 	bl	8000afc <__aeabi_dcmpgt>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	4b68      	ldr	r3, [pc, #416]	; (8006b88 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 80069e6:	e003      	b.n	80069f0 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	4b63      	ldr	r3, [pc, #396]	; (8006b88 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 80069fa:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80069fe:	f7fa f855 	bl	8000aac <__aeabi_dcmpeq>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 81bd 	beq.w	8006d84 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006a10:	e011      	b.n	8006a36 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8006a12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a16:	3301      	adds	r3, #1
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006a1e:	18d1      	adds	r1, r2, r3
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006a2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006a36:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	dde9      	ble.n	8006a12 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8006a3e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a42:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8006a52:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8006a62:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8006a72:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a76:	ed93 7b00 	vldr	d7, [r3]
 8006a7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006a7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a82:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006a86:	4618      	mov	r0, r3
 8006a88:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8006a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8006a90:	eef0 0a67 	vmov.f32	s1, s15
 8006a94:	f004 f814 	bl	800aac0 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8006a98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aa0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006aa4:	f7f9 fd9a 	bl	80005dc <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ab8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006abc:	3318      	adds	r3, #24
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fd8b 	bl	80005dc <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fbcd 	bl	800026c <__aeabi_dsub>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	f107 0118 	add.w	r1, r7, #24
 8006ada:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8006ade:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ae6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006aea:	3318      	adds	r3, #24
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fd74 	bl	80005dc <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4690      	mov	r8, r2
 8006afa:	4699      	mov	r9, r3
 8006afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b04:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006b08:	f7f9 fd68 	bl	80005dc <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b18:	f103 0418 	add.w	r4, r3, #24
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	f7f9 fba4 	bl	8000270 <__adddf3>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8006b30:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b34:	3320      	adds	r3, #32
 8006b36:	ed93 7b00 	vldr	d7, [r3]
 8006b3a:	f107 0318 	add.w	r3, r7, #24
 8006b3e:	ed93 6b00 	vldr	d6, [r3]
 8006b42:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b46:	f103 0220 	add.w	r2, r3, #32
 8006b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b4e:	f103 0108 	add.w	r1, r3, #8
 8006b52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b56:	3308      	adds	r3, #8
 8006b58:	4618      	mov	r0, r3
 8006b5a:	eeb0 1a46 	vmov.f32	s2, s12
 8006b5e:	eef0 1a66 	vmov.f32	s3, s13
 8006b62:	eeb0 0a47 	vmov.f32	s0, s14
 8006b66:	eef0 0a67 	vmov.f32	s1, s15
 8006b6a:	f003 ffa9 	bl	800aac0 <rotate_LZ7ctbe0>
    temp = b_t;
 8006b6e:	f107 0118 	add.w	r1, r7, #24
 8006b72:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006b76:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006b80:	e06f      	b.n	8006c62 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8006b82:	bf00      	nop
 8006b84:	bff00000 	.word	0xbff00000
 8006b88:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8006b8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b90:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b9c:	f107 0318 	add.w	r3, r7, #24
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f7f9 fd1a 	bl	80005dc <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8006bb0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bb4:	3306      	adds	r3, #6
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8006bc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bd6:	f107 0318 	add.w	r3, r7, #24
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fcfd 	bl	80005dc <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4614      	mov	r4, r2
 8006be8:	461d      	mov	r5, r3
 8006bea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006bee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bfa:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006bfe:	f7f9 fced 	bl	80005dc <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fb2f 	bl	800026c <__aeabi_dsub>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	f107 0118 	add.w	r1, r7, #24
 8006c16:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8006c1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4413      	add	r3, r2
 8006c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c2a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006c2e:	f7f9 fcd5 	bl	80005dc <__aeabi_dmul>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c3e:	3306      	adds	r3, #6
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006c46:	18d4      	adds	r4, r2, r3
 8006c48:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006c4c:	f7f9 fb10 	bl	8000270 <__adddf3>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006c58:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006c62:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	dd90      	ble.n	8006b8c <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8006c6a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c6e:	3340      	adds	r3, #64	; 0x40
 8006c70:	ed93 7b00 	vldr	d7, [r3]
 8006c74:	f107 0318 	add.w	r3, r7, #24
 8006c78:	ed93 6b00 	vldr	d6, [r3]
 8006c7c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c80:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c88:	f103 0110 	add.w	r1, r3, #16
 8006c8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c90:	3310      	adds	r3, #16
 8006c92:	4618      	mov	r0, r3
 8006c94:	eeb0 1a46 	vmov.f32	s2, s12
 8006c98:	eef0 1a66 	vmov.f32	s3, s13
 8006c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8006ca0:	eef0 0a67 	vmov.f32	s1, s15
 8006ca4:	f003 ff0c 	bl	800aac0 <rotate_LZ7ctbe0>
    kk = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006cb4:	e03d      	b.n	8006d32 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8006cb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006cca:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8006cce:	00c9      	lsls	r1, r1, #3
 8006cd0:	4401      	add	r1, r0
 8006cd2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8006cd6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006cda:	3303      	adds	r3, #3
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006ce8:	1c51      	adds	r1, r2, #1
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006cf2:	00c9      	lsls	r1, r1, #3
 8006cf4:	4401      	add	r1, r0
 8006cf6:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8006cfa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006cfe:	3306      	adds	r3, #6
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d06:	4413      	add	r3, r2
 8006d08:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006d0c:	1c91      	adds	r1, r2, #2
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006d16:	00c9      	lsls	r1, r1, #3
 8006d18:	4401      	add	r1, r0
 8006d1a:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8006d1e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d22:	3303      	adds	r3, #3
 8006d24:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006d28:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d32:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	ddbd      	ble.n	8006cb6 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006d40:	e01a      	b.n	8006d78 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8006d42:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006d46:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d52:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d5c:	18d4      	adds	r4, r2, r3
 8006d5e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006d62:	f7f9 fc3b 	bl	80005dc <__aeabi_dmul>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8006d6e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d72:	3301      	adds	r3, #1
 8006d74:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006d78:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	dde0      	ble.n	8006d42 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8006d80:	f000 bf6e 	b.w	8007c60 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006d90:	e011      	b.n	8006db6 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8006d92:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006d96:	3301      	adds	r3, #1
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006d9e:	18d1      	adds	r1, r2, r3
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8006dac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006db6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	dde9      	ble.n	8006d92 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 8006dbe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006dc2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8006dd2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dda:	2301      	movs	r3, #1
 8006ddc:	461c      	mov	r4, r3
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	f7f9 fe61 	bl	8000aac <__aeabi_dcmpeq>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 8006df0:	2300      	movs	r3, #0
 8006df2:	461c      	mov	r4, r3
 8006df4:	b2e3      	uxtb	r3, r4
 8006df6:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8006dfa:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d114      	bne.n	8006e2c <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 8006e02:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e06:	3320      	adds	r3, #32
 8006e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	461c      	mov	r4, r3
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	f7f9 fe48 	bl	8000aac <__aeabi_dcmpeq>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 8006e22:	2300      	movs	r3, #0
 8006e24:	461c      	mov	r4, r3
 8006e26:	b2e3      	uxtb	r3, r4
 8006e28:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8006e2c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d114      	bne.n	8006e5e <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8006e34:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e38:	3340      	adds	r3, #64	; 0x40
 8006e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e3e:	2301      	movs	r3, #1
 8006e40:	461c      	mov	r4, r3
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	f7f9 fe2f 	bl	8000aac <__aeabi_dcmpeq>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8006e54:	2300      	movs	r3, #0
 8006e56:	461c      	mov	r4, r3
 8006e58:	b2e3      	uxtb	r3, r4
 8006e5a:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8006e64:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8006e72:	e394      	b.n	800759e <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8006e74:	f107 0120 	add.w	r1, r7, #32
 8006e78:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006e7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8006e80:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8006e8c:	f7f9 fcd0 	bl	8000830 <__aeabi_ddiv>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	f107 0120 	add.w	r1, r7, #32
 8006e98:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8006e9c:	f107 0320 	add.w	r3, r7, #32
 8006ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ea4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ea8:	3318      	adds	r3, #24
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fb95 	bl	80005dc <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8006eba:	f7f9 f9d7 	bl	800026c <__aeabi_dsub>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006eca:	3320      	adds	r3, #32
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 fcae 	bl	8000830 <__aeabi_ddiv>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	f107 0120 	add.w	r1, r7, #32
 8006edc:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 8006ee0:	f107 0118 	add.w	r1, r7, #24
 8006ee4:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006ee8:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8006eec:	2300      	movs	r3, #0
 8006eee:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006ef2:	e027      	b.n	8006f44 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8006ef4:	f107 0318 	add.w	r3, r7, #24
 8006ef8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006efc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006f00:	3306      	adds	r3, #6
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006f08:	4413      	add	r3, r2
 8006f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f0e:	f107 0220 	add.w	r2, r7, #32
 8006f12:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4413      	add	r3, r2
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fb5d 	bl	80005dc <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 f99f 	bl	800026c <__aeabi_dsub>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	f107 0118 	add.w	r1, r7, #24
 8006f36:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8006f3a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006f44:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	ddd3      	ble.n	8006ef4 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8006f4c:	f107 0318 	add.w	r3, r7, #24
 8006f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f54:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f58:	3340      	adds	r3, #64	; 0x40
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fc67 	bl	8000830 <__aeabi_ddiv>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	f107 0120 	add.w	r1, r7, #32
 8006f6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006f76:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 8006f7a:	f107 0320 	add.w	r3, r7, #32
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	4611      	mov	r1, r2
 8006f84:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8006f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f8c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006f98:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8006f9c:	f7f9 fdae 	bl	8000afc <__aeabi_dcmpgt>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 8006fa6:	f107 0118 	add.w	r1, r7, #24
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	4b85      	ldr	r3, [pc, #532]	; (80071c4 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8006fb0:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8006fb4:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006fb8:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8006fbc:	e017      	b.n	8006fee <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006fc6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8006fca:	f7f9 fc31 	bl	8000830 <__aeabi_ddiv>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 8006fd6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006fda:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8006fde:	f7f9 fafd 	bl	80005dc <__aeabi_dmul>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	f107 0118 	add.w	r1, r7, #24
 8006fea:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 8006fee:	f107 0320 	add.w	r3, r7, #32
 8006ff2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8006ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007000:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8007004:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007008:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800700c:	f7f9 fd76 	bl	8000afc <__aeabi_dcmpgt>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d02d      	beq.n	8007072 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 8007016:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800701a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800701e:	f7f9 fc07 	bl	8000830 <__aeabi_ddiv>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 800702a:	f107 0318 	add.w	r3, r7, #24
 800702e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007032:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007036:	f7f9 fad1 	bl	80005dc <__aeabi_dmul>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007046:	f7f9 fac9 	bl	80005dc <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	4b5b      	ldr	r3, [pc, #364]	; (80071c4 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8007058:	f7f9 f90a 	bl	8000270 <__adddf3>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	f107 0118 	add.w	r1, r7, #24
 8007064:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8007068:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800706c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8007070:	e01f      	b.n	80070b2 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8007072:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007076:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800707a:	f7f9 fbd9 	bl	8000830 <__aeabi_ddiv>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8007086:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800708a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800708e:	f7f9 faa5 	bl	80005dc <__aeabi_dmul>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4610      	mov	r0, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f107 0318 	add.w	r3, r7, #24
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 f8e5 	bl	8000270 <__adddf3>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	f107 0118 	add.w	r1, r7, #24
 80070ae:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 80070b2:	f107 0320 	add.w	r3, r7, #32
 80070b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80070ba:	4611      	mov	r1, r2
 80070bc:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80070c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80070c8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80070cc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80070d0:	f7f9 fd14 	bl	8000afc <__aeabi_dcmpgt>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d02d      	beq.n	8007136 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 80070da:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80070de:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80070e2:	f7f9 fba5 	bl	8000830 <__aeabi_ddiv>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80070ee:	f107 0318 	add.w	r3, r7, #24
 80070f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80070fa:	f7f9 fa6f 	bl	80005dc <__aeabi_dmul>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800710a:	f7f9 fa67 	bl	80005dc <__aeabi_dmul>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	4b2a      	ldr	r3, [pc, #168]	; (80071c4 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800711c:	f7f9 f8a8 	bl	8000270 <__adddf3>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	f107 0118 	add.w	r1, r7, #24
 8007128:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800712c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007130:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8007134:	e01f      	b.n	8007176 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 8007136:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800713a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800713e:	f7f9 fb77 	bl	8000830 <__aeabi_ddiv>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800714a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800714e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8007152:	f7f9 fa43 	bl	80005dc <__aeabi_dmul>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	f107 0318 	add.w	r3, r7, #24
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 f883 	bl	8000270 <__adddf3>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	f107 0118 	add.w	r1, r7, #24
 8007172:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8007176:	f107 0318 	add.w	r3, r7, #24
 800717a:	ed93 7b00 	vldr	d7, [r3]
 800717e:	eeb0 0a47 	vmov.f32	s0, s14
 8007182:	eef0 0a67 	vmov.f32	s1, s15
 8007186:	f00f ff67 	bl	8017058 <sqrt>
 800718a:	ec51 0b10 	vmov	r0, r1, d0
 800718e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007192:	f7f9 fa23 	bl	80005dc <__aeabi_dmul>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	f107 0118 	add.w	r1, r7, #24
 800719e:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80071b0:	f7f9 fc9a 	bl	8000ae8 <__aeabi_dcmpge>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d006      	beq.n	80071c8 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 80071c0:	e1ed      	b.n	800759e <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 80071c2:	bf00      	nop
 80071c4:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 80071c8:	f107 0318 	add.w	r3, r7, #24
 80071cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071d0:	f107 0318 	add.w	r3, r7, #24
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 fa00 	bl	80005dc <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	f04f 0000 	mov.w	r0, #0
 80071e4:	49b4      	ldr	r1, [pc, #720]	; (80074b8 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 80071e6:	f7f9 f841 	bl	800026c <__aeabi_dsub>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	ec43 2b17 	vmov	d7, r2, r3
 80071f2:	eeb0 0a47 	vmov.f32	s0, s14
 80071f6:	eef0 0a67 	vmov.f32	s1, s15
 80071fa:	f00f ff2d 	bl	8017058 <sqrt>
 80071fe:	eeb0 6a40 	vmov.f32	s12, s0
 8007202:	eef0 6a60 	vmov.f32	s13, s1
 8007206:	f107 0320 	add.w	r3, r7, #32
 800720a:	ed93 7b04 	vldr	d7, [r3, #16]
 800720e:	f107 0218 	add.w	r2, r7, #24
 8007212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007216:	f103 0110 	add.w	r1, r3, #16
 800721a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800721e:	3310      	adds	r3, #16
 8007220:	4618      	mov	r0, r3
 8007222:	eeb0 1a47 	vmov.f32	s2, s14
 8007226:	eef0 1a67 	vmov.f32	s3, s15
 800722a:	eeb0 0a46 	vmov.f32	s0, s12
 800722e:	eef0 0a66 	vmov.f32	s1, s13
 8007232:	f003 fc45 	bl	800aac0 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 8007236:	f107 0120 	add.w	r1, r7, #32
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 8007246:	f107 0318 	add.w	r3, r7, #24
 800724a:	ed93 7b00 	vldr	d7, [r3]
 800724e:	f107 0320 	add.w	r3, r7, #32
 8007252:	ed93 6b02 	vldr	d6, [r3, #8]
 8007256:	f107 0218 	add.w	r2, r7, #24
 800725a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800725e:	f103 0108 	add.w	r1, r3, #8
 8007262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007266:	3308      	adds	r3, #8
 8007268:	4618      	mov	r0, r3
 800726a:	eeb0 1a46 	vmov.f32	s2, s12
 800726e:	eef0 1a66 	vmov.f32	s3, s13
 8007272:	eeb0 0a47 	vmov.f32	s0, s14
 8007276:	eef0 0a67 	vmov.f32	s1, s15
 800727a:	f003 fc21 	bl	800aac0 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 800727e:	f107 0120 	add.w	r1, r7, #32
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	ed93 7b00 	vldr	d7, [r3]
 8007296:	f107 0320 	add.w	r3, r7, #32
 800729a:	ed93 6b00 	vldr	d6, [r3]
 800729e:	f107 0218 	add.w	r2, r7, #24
 80072a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80072a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072aa:	4618      	mov	r0, r3
 80072ac:	eeb0 1a46 	vmov.f32	s2, s12
 80072b0:	eef0 1a66 	vmov.f32	s3, s13
 80072b4:	eeb0 0a47 	vmov.f32	s0, s14
 80072b8:	eef0 0a67 	vmov.f32	s1, s15
 80072bc:	f003 fc00 	bl	800aac0 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 80072c0:	f107 0120 	add.w	r1, r7, #32
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80072d6:	e072      	b.n	80073be <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 80072d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80072dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	4413      	add	r3, r2
 80072e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80072f2:	4413      	add	r3, r2
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f9 f970 	bl	80005dc <__aeabi_dmul>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	f107 0118 	add.w	r1, r7, #24
 8007304:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 8007308:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800730c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4413      	add	r3, r2
 8007314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007318:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007322:	4413      	add	r3, r2
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f958 	bl	80005dc <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4690      	mov	r8, r2
 8007332:	4699      	mov	r9, r3
 8007334:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007338:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4413      	add	r3, r2
 8007340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007344:	f107 0320 	add.w	r3, r7, #32
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f9 f946 	bl	80005dc <__aeabi_dmul>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4610      	mov	r0, r2
 8007356:	4619      	mov	r1, r3
 8007358:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007362:	18d4      	adds	r4, r2, r3
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4640      	mov	r0, r8
 800736a:	4649      	mov	r1, r9
 800736c:	f7f8 ff7e 	bl	800026c <__aeabi_dsub>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8007378:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800737c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	4413      	add	r3, r2
 8007384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007388:	f107 0320 	add.w	r3, r7, #32
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f9 f924 	bl	80005dc <__aeabi_dmul>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4610      	mov	r0, r2
 800739a:	4619      	mov	r1, r3
 800739c:	f107 0318 	add.w	r3, r7, #24
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff64 	bl	8000270 <__adddf3>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	f107 0120 	add.w	r1, r7, #32
 80073b0:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 80073b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80073be:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da88      	bge.n	80072d8 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 80073c6:	2301      	movs	r3, #1
 80073c8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80073cc:	e06c      	b.n	80074a8 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 80073ce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073d2:	3303      	adds	r3, #3
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80073da:	4413      	add	r3, r2
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 80073e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073f4:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80073f8:	f7f9 f8f0 	bl	80005dc <__aeabi_dmul>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4690      	mov	r8, r2
 8007402:	4699      	mov	r9, r3
 8007404:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007408:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007414:	f107 0320 	add.w	r3, r7, #32
 8007418:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800741c:	f7f9 f8de 	bl	80005dc <__aeabi_dmul>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4610      	mov	r0, r2
 8007426:	4619      	mov	r1, r3
 8007428:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800742c:	3303      	adds	r3, #3
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007434:	18d4      	adds	r4, r2, r3
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f8 ff15 	bl	800026c <__aeabi_dsub>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 800744a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800744e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800745a:	f107 0320 	add.w	r3, r7, #32
 800745e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007462:	f7f9 f8bb 	bl	80005dc <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4614      	mov	r4, r2
 800746c:	461d      	mov	r5, r3
 800746e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007472:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800747e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007482:	f7f9 f8ab 	bl	80005dc <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f8 feef 	bl	8000270 <__adddf3>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	f107 0120 	add.w	r1, r7, #32
 800749a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 800749e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074a2:	3b01      	subs	r3, #1
 80074a4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80074a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da8e      	bge.n	80073ce <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 80074b0:	2302      	movs	r3, #2
 80074b2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80074b6:	e06e      	b.n	8007596 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 80074b8:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 80074bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074c0:	3306      	adds	r3, #6
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80074c8:	4413      	add	r3, r2
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 80074d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074d6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074e2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80074e6:	f7f9 f879 	bl	80005dc <__aeabi_dmul>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4690      	mov	r8, r2
 80074f0:	4699      	mov	r9, r3
 80074f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80074f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4413      	add	r3, r2
 80074fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007502:	f107 0320 	add.w	r3, r7, #32
 8007506:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800750a:	f7f9 f867 	bl	80005dc <__aeabi_dmul>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800751a:	3306      	adds	r3, #6
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007522:	18d4      	adds	r4, r2, r3
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f8 fe9e 	bl	800026c <__aeabi_dsub>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 8007538:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800753c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007548:	f107 0320 	add.w	r3, r7, #32
 800754c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007550:	f7f9 f844 	bl	80005dc <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4614      	mov	r4, r2
 800755a:	461d      	mov	r5, r3
 800755c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007560:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4413      	add	r3, r2
 8007568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800756c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007570:	f7f9 f834 	bl	80005dc <__aeabi_dmul>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	f7f8 fe78 	bl	8000270 <__adddf3>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	f107 0120 	add.w	r1, r7, #32
 8007588:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 800758c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007590:	3b01      	subs	r3, #1
 8007592:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007596:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800759a:	2b00      	cmp	r3, #0
 800759c:	da8e      	bge.n	80074bc <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 800759e:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 82f0 	beq.w	8007b88 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80075ae:	2300      	movs	r3, #0
 80075b0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80075b4:	e0d3      	b.n	800775e <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80075c2:	e0bd      	b.n	8007740 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 80075c4:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80075c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80075cc:	4413      	add	r3, r2
 80075ce:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 80075d2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80075d6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	18d1      	adds	r1, r2, r3
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 80075ea:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80075ee:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	4413      	add	r3, r2
 80075f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80075fa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007604:	4413      	add	r3, r2
 8007606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800760a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007614:	4413      	add	r3, r2
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f8 ffdf 	bl	80005dc <__aeabi_dmul>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 fe23 	bl	8000270 <__adddf3>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007632:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8007636:	00c9      	lsls	r1, r1, #3
 8007638:	4401      	add	r1, r0
 800763a:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 800763e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007642:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4413      	add	r3, r2
 800764a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800764e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007652:	3301      	adds	r3, #1
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800765a:	4413      	add	r3, r2
 800765c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007660:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007664:	3301      	adds	r3, #1
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800766c:	4413      	add	r3, r2
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 ffb3 	bl	80005dc <__aeabi_dmul>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	f7f8 fdf7 	bl	8000270 <__adddf3>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800768a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800768e:	00c9      	lsls	r1, r1, #3
 8007690:	4401      	add	r1, r0
 8007692:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 8007696:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800769a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076a6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80076aa:	3302      	adds	r3, #2
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80076b2:	4413      	add	r3, r2
 80076b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80076bc:	3302      	adds	r3, #2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80076c4:	4413      	add	r3, r2
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f7f8 ff87 	bl	80005dc <__aeabi_dmul>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4620      	mov	r0, r4
 80076d4:	4629      	mov	r1, r5
 80076d6:	f7f8 fdcb 	bl	8000270 <__adddf3>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80076e2:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80076e6:	00c9      	lsls	r1, r1, #3
 80076e8:	4401      	add	r1, r0
 80076ea:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 80076ee:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	1d3a      	adds	r2, r7, #4
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	1d3a      	adds	r2, r7, #4
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	4413      	add	r3, r2
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8007712:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8007716:	442c      	add	r4, r5
 8007718:	f7f8 ff60 	bl	80005dc <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8007724:	00e1      	lsls	r1, r4, #3
 8007726:	4401      	add	r1, r0
 8007728:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 800772c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007730:	3303      	adds	r3, #3
 8007732:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8007736:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800773a:	3301      	adds	r3, #1
 800773c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007740:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007744:	2b02      	cmp	r3, #2
 8007746:	f77f af3d 	ble.w	80075c4 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 800774a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800774e:	3303      	adds	r3, #3
 8007750:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007754:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007758:	3301      	adds	r3, #1
 800775a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800775e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007762:	2b02      	cmp	r3, #2
 8007764:	f77f af27 	ble.w	80075b6 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007774:	e049      	b.n	800780a <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 8007776:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800777a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007786:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800778a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fd69 	bl	800026c <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	f107 0118 	add.w	r1, r7, #24
 80077a2:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80077a6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01c      	beq.n	80077e8 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 80077ae:	f107 0318 	add.w	r3, r7, #24
 80077b2:	ed93 7b00 	vldr	d7, [r3]
 80077b6:	eeb0 0a47 	vmov.f32	s0, s14
 80077ba:	eef0 0a67 	vmov.f32	s1, s15
 80077be:	f003 fbf5 	bl	800afac <rtIsInf>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10c      	bne.n	80077e2 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 80077c8:	f107 0318 	add.w	r3, r7, #24
 80077cc:	ed93 7b00 	vldr	d7, [r3]
 80077d0:	eeb0 0a47 	vmov.f32	s0, s14
 80077d4:	eef0 0a67 	vmov.f32	s1, s15
 80077d8:	f003 fc0c 	bl	800aff4 <rtIsNaN>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 80077e2:	2300      	movs	r3, #0
 80077e4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 80077e8:	f107 0318 	add.w	r3, r7, #24
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80077f4:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80077f8:	00c9      	lsls	r1, r1, #3
 80077fa:	4401      	add	r1, r0
 80077fc:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8007800:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007804:	3301      	adds	r3, #1
 8007806:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800780a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800780e:	2b08      	cmp	r3, #8
 8007810:	ddb1      	ble.n	8007776 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 8007812:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 800781a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800781e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007822:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007826:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800782a:	f003 fc35 	bl	800b098 <svd_u3DvUgOe>
 800782e:	e02c      	b.n	800788a <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8007830:	4bbc      	ldr	r3, [pc, #752]	; (8007b24 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800783a:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 800783e:	4bb9      	ldr	r3, [pc, #740]	; (8007b24 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007848:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 800784c:	4bb5      	ldr	r3, [pc, #724]	; (8007b24 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007856:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 800785a:	2300      	movs	r3, #0
 800785c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007860:	e00f      	b.n	8007882 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8007862:	4bb0      	ldr	r3, [pc, #704]	; (8007b24 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800786c:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8007870:	00c9      	lsls	r1, r1, #3
 8007872:	4401      	add	r1, r0
 8007874:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 8007878:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800787c:	3301      	adds	r3, #1
 800787e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007882:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007886:	2b08      	cmp	r3, #8
 8007888:	ddeb      	ble.n	8007862 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 800788a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800788e:	2248      	movs	r2, #72	; 0x48
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f00f f950 	bl	8016b38 <memset>
      Ss[0] = s[0];
 8007898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80078a4:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80078a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80078b0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80078b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80078b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078c0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80078c4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80078ce:	e01e      	b.n	800790e <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 80078d0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80078d4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4413      	add	r3, r2
 80078dc:	ed93 7b00 	vldr	d7, [r3]
 80078e0:	eeb0 0a47 	vmov.f32	s0, s14
 80078e4:	eef0 0a67 	vmov.f32	s1, s15
 80078e8:	f00f fbb6 	bl	8017058 <sqrt>
 80078ec:	eeb0 7a40 	vmov.f32	s14, s0
 80078f0:	eef0 7a60 	vmov.f32	s15, s1
 80078f4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80078f8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4413      	add	r3, r2
 8007900:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 8007904:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800790e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007912:	2b08      	cmp	r3, #8
 8007914:	dddc      	ble.n	80078d0 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007922:	e0c0      	b.n	8007aa6 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007930:	e0aa      	b.n	8007a88 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 8007932:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8007936:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800793a:	4413      	add	r3, r2
 800793c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8007940:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800794a:	18d1      	adds	r1, r2, r3
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 8007958:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007962:	4413      	add	r3, r2
 8007964:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007968:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800796c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007978:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800797c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe28 	bl	80005dc <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800799e:	18d6      	adds	r6, r2, r3
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f8 fc62 	bl	8000270 <__adddf3>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 80079b4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80079be:	4413      	add	r3, r2
 80079c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079c4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80079c8:	3301      	adds	r3, #1
 80079ca:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80079da:	3303      	adds	r3, #3
 80079dc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fdf8 	bl	80005dc <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4610      	mov	r0, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80079fe:	18d6      	adds	r6, r2, r3
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	f7f8 fc32 	bl	8000270 <__adddf3>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8007a14:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a1e:	4413      	add	r3, r2
 8007a20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a24:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007a28:	3302      	adds	r3, #2
 8007a2a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4413      	add	r3, r2
 8007a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a36:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007a3a:	3306      	adds	r3, #6
 8007a3c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	4413      	add	r3, r2
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fdc8 	bl	80005dc <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007a5e:	18d6      	adds	r6, r2, r3
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fc02 	bl	8000270 <__adddf3>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8007a74:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007a78:	3303      	adds	r3, #3
 8007a7a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8007a7e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007a82:	3301      	adds	r3, #1
 8007a84:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007a88:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	f77f af50 	ble.w	8007932 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8007a92:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007a96:	3303      	adds	r3, #3
 8007a98:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007a9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007aa6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	f77f af3a 	ble.w	8007924 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8007ac2:	e044      	b.n	8007b4e <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8007ac4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8007ad4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	dc25      	bgt.n	8007b28 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8007adc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007af2:	4413      	add	r3, r2
 8007af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	f7f8 ffd4 	bl	8000aac <__aeabi_dcmpeq>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8007b16:	e00f      	b.n	8007b38 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8007b18:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007b22:	e009      	b.n	8007b38 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8007b24:	2001bc10 	.word	0x2001bc10
            }
          } else {
            kk++;
 8007b28:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8007b32:	2302      	movs	r3, #2
 8007b34:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8007b38:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0c6      	beq.n	8007ace <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8007b40:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d102      	bne.n	8007b4e <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8007b4e:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8007b56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	ddb2      	ble.n	8007ac4 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8007b5e:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d110      	bne.n	8007b88 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8007b66:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007b6a:	2248      	movs	r2, #72	; 0x48
 8007b6c:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f00e ffd3 	bl	8016b1c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8007b76:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007b7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007b7e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fec4 	bl	8008910 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007b94:	e03d      	b.n	8007c12 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8007b96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007ba0:	4413      	add	r3, r2
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007baa:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8007bae:	00c9      	lsls	r1, r1, #3
 8007bb0:	4401      	add	r1, r0
 8007bb2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8007bb6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007bba:	3303      	adds	r3, #3
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007bc8:	1c51      	adds	r1, r2, #1
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007bd2:	00c9      	lsls	r1, r1, #3
 8007bd4:	4401      	add	r1, r0
 8007bd6:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8007bda:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007bde:	3306      	adds	r3, #6
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007be6:	4413      	add	r3, r2
 8007be8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007bec:	1c91      	adds	r1, r2, #2
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007bf6:	00c9      	lsls	r1, r1, #3
 8007bf8:	4401      	add	r1, r0
 8007bfa:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8007bfe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c02:	3303      	adds	r3, #3
 8007c04:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007c08:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007c12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	ddbd      	ble.n	8007b96 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007c20:	e01a      	b.n	8007c58 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8007c22:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007c26:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c32:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007c3c:	18d4      	adds	r4, r2, r3
 8007c3e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007c42:	f7f8 fccb 	bl	80005dc <__aeabi_dmul>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8007c4e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c52:	3301      	adds	r3, #1
 8007c54:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007c58:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	dde0      	ble.n	8007c22 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007c6c:	e057      	b.n	8007d1e <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8007c6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007c78:	4413      	add	r3, r2
 8007c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c7e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007c8a:	00e4      	lsls	r4, r4, #3
 8007c8c:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007c90:	442c      	add	r4, r5
 8007c92:	f7f8 faeb 	bl	800026c <__aeabi_dsub>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8007c9e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007caa:	4413      	add	r3, r2
 8007cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cb0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	00e4      	lsls	r4, r4, #3
 8007cc2:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007cc6:	442c      	add	r4, r5
 8007cc8:	f7f8 fad0 	bl	800026c <__aeabi_dsub>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8007cd4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007cd8:	3302      	adds	r3, #2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007ce0:	4413      	add	r3, r2
 8007ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce6:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8007cea:	3310      	adds	r3, #16
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007cf4:	3402      	adds	r4, #2
 8007cf6:	00e4      	lsls	r4, r4, #3
 8007cf8:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8007cfc:	442c      	add	r4, r5
 8007cfe:	f7f8 fab5 	bl	800026c <__aeabi_dsub>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8007d0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d0e:	3303      	adds	r3, #3
 8007d10:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007d14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007d18:	3301      	adds	r3, #1
 8007d1a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007d1e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	dda3      	ble.n	8007c6e <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8007d26:	f107 0308 	add.w	r3, r7, #8
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8007d32:	f7f8 fc53 	bl	80005dc <__aeabi_dmul>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007d44:	e071      	b.n	8007e2a <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007d52:	e061      	b.n	8007e18 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8007d54:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007d58:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8007d62:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007d66:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	18d1      	adds	r1, r2, r3
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007d80:	2300      	movs	r3, #0
 8007d82:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007d86:	e039      	b.n	8007dfc <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8007d88:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007d8c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4413      	add	r3, r2
 8007d94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d98:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007d9c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007da0:	4413      	add	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8007da8:	4413      	add	r3, r2
 8007daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dae:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007db2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007db6:	4413      	add	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	463a      	mov	r2, r7
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fc0a 	bl	80005dc <__aeabi_dmul>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 fa4e 	bl	8000270 <__adddf3>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8007ddc:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8007de0:	00c9      	lsls	r1, r1, #3
 8007de2:	4401      	add	r1, r0
 8007de4:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 8007de8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007dec:	3303      	adds	r3, #3
 8007dee:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8007df2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007df6:	3301      	adds	r3, #1
 8007df8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007dfc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007e00:	2b05      	cmp	r3, #5
 8007e02:	ddc1      	ble.n	8007d88 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8007e04:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007e08:	3303      	adds	r3, #3
 8007e0a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8007e0e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007e12:	3301      	adds	r3, #1
 8007e14:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007e18:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	dd99      	ble.n	8007d54 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 8007e20:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007e2a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dd89      	ble.n	8007d46 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 8007e32:	2300      	movs	r3, #0
 8007e34:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007e38:	e01a      	b.n	8007e70 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 8007e3a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007e3e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e4a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8007e54:	18d4      	adds	r4, r2, r3
 8007e56:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007e5a:	f7f8 fbbf 	bl	80005dc <__aeabi_dmul>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 8007e66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007e70:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	dde0      	ble.n	8007e3a <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8007e80:	46bd      	mov	sp, r7
 8007e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e86:	bf00      	nop

08007e88 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8007e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e8c:	ed2d 8b02 	vpush	{d8}
 8007e90:	b0ac      	sub	sp, #176	; 0xb0
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6378      	str	r0, [r7, #52]	; 0x34
 8007e96:	6339      	str	r1, [r7, #48]	; 0x30
 8007e98:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8007e9c:	ed87 1b08 	vstr	d1, [r7, #32]
 8007ea0:	61fa      	str	r2, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eae:	f7f8 fb95 	bl	80005dc <__aeabi_dmul>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007eba:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ec4:	e021      	b.n	8007f0a <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 8007ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	3308      	adds	r3, #8
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 fb7a 	bl	80005dc <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 f9be 	bl	8000270 <__adddf3>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007efc:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007f00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f04:	3301      	adds	r3, #1
 8007f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	ddd9      	ble.n	8007ec6 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 8007f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f1e:	f7f8 fb5d 	bl	80005dc <__aeabi_dmul>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007f2a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 8007f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f3a:	f7f8 f997 	bl	800026c <__aeabi_dsub>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f4c:	e01c      	b.n	8007f88 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 8007f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	18d4      	adds	r4, r2, r3
 8007f6e:	4642      	mov	r2, r8
 8007f70:	464b      	mov	r3, r9
 8007f72:	f7f8 f97b 	bl	800026c <__aeabi_dsub>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 8007f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f82:	3301      	adds	r3, #1
 8007f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f8c:	2b05      	cmp	r3, #5
 8007f8e:	ddde      	ble.n	8007f4e <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8007f90:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8007f94:	f003 f82e 	bl	800aff4 <rtIsNaN>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 8007f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fa2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8007fa6:	e025      	b.n	8007ff4 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007fb4:	f7f8 fd84 	bl	8000ac0 <__aeabi_dcmplt>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	4bc3      	ldr	r3, [pc, #780]	; (80082d0 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 8007fc4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8007fc8:	e014      	b.n	8007ff4 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007fd6:	f7f8 fd91 	bl	8000afc <__aeabi_dcmpgt>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <UTMeanCovSqrt_C6QfB9Td+0x160>
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	4bbb      	ldr	r3, [pc, #748]	; (80082d4 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 8007fe6:	e003      	b.n	8007ff0 <UTMeanCovSqrt_C6QfB9Td+0x168>
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ffe:	f7f8 faed 	bl	80005dc <__aeabi_dmul>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	3308      	adds	r3, #8
 800800e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008016:	f7f8 fae1 	bl	80005dc <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 8008022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008026:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800802a:	f7f8 fad7 	bl	80005dc <__aeabi_dmul>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 8008036:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800803a:	f00f f80d 	bl	8017058 <sqrt>
 800803e:	eeb0 7a40 	vmov.f32	s14, s0
 8008042:	eef0 7a60 	vmov.f32	s15, s1
 8008046:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800804a:	2300      	movs	r3, #0
 800804c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008050:	e01a      	b.n	8008088 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 8008052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008064:	f7f8 faba 	bl	80005dc <__aeabi_dmul>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008070:	00c9      	lsls	r1, r1, #3
 8008072:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008076:	4401      	add	r1, r0
 8008078:	3948      	subs	r1, #72	; 0x48
 800807a:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800807e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008082:	3301      	adds	r3, #1
 8008084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800808c:	2b05      	cmp	r3, #5
 800808e:	dde0      	ble.n	8008052 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 8008090:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008094:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 8008098:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800809c:	2202      	movs	r2, #2
 800809e:	4619      	mov	r1, r3
 80080a0:	2005      	movs	r0, #5
 80080a2:	f005 f975 	bl	800d390 <xnrm2_7bm34mDQ>
 80080a6:	eeb0 7a40 	vmov.f32	s14, s0
 80080aa:	eef0 7a60 	vmov.f32	s15, s1
 80080ae:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 80080b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	f7f8 fcf5 	bl	8000aac <__aeabi_dcmpeq>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 80e7 	bne.w	8008298 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 80080ca:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80080ce:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80080d2:	eeb0 1a46 	vmov.f32	s2, s12
 80080d6:	eef0 1a66 	vmov.f32	s3, s13
 80080da:	eeb0 0a47 	vmov.f32	s0, s14
 80080de:	eef0 0a67 	vmov.f32	s1, s15
 80080e2:	f002 fe79 	bl	800add8 <rt_hypotd_snf>
 80080e6:	eeb0 7a40 	vmov.f32	s14, s0
 80080ea:	eef0 7a60 	vmov.f32	s15, s1
 80080ee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 80080f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	f7f8 fcf3 	bl	8000ae8 <__aeabi_dcmpge>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 8008108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800810c:	613a      	str	r2, [r7, #16]
 800810e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	ed97 7b04 	vldr	d7, [r7, #16]
 8008118:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 800811c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008120:	60ba      	str	r2, [r7, #8]
 8008122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008134:	f7f8 fcc4 	bl	8000ac0 <__aeabi_dcmplt>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80a8 	beq.w	8008290 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 8008146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800814a:	3301      	adds	r3, #1
 800814c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 8008150:	2301      	movs	r3, #1
 8008152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008156:	e01d      	b.n	8008194 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 8008158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008162:	4413      	add	r3, r2
 8008164:	3b48      	subs	r3, #72	; 0x48
 8008166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	4b5a      	ldr	r3, [pc, #360]	; (80082d8 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 8008170:	f7f8 fa34 	bl	80005dc <__aeabi_dmul>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800817c:	00c9      	lsls	r1, r1, #3
 800817e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008182:	4401      	add	r1, r0
 8008184:	3948      	subs	r1, #72	; 0x48
 8008186:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800818a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800818e:	3301      	adds	r3, #1
 8008190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008198:	2b05      	cmp	r3, #5
 800819a:	dddd      	ble.n	8008158 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 800819c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	4b4c      	ldr	r3, [pc, #304]	; (80082d8 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80081a6:	f7f8 fa19 	bl	80005dc <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 80081b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	4b47      	ldr	r3, [pc, #284]	; (80082d8 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80081bc:	f7f8 fa0e 	bl	80005dc <__aeabi_dmul>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 80081c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081cc:	603a      	str	r2, [r7, #0]
 80081ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081d2:	607b      	str	r3, [r7, #4]
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80081dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e0:	f7f8 fc6e 	bl	8000ac0 <__aeabi_dcmplt>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 80081ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081ee:	2b13      	cmp	r3, #19
 80081f0:	dda9      	ble.n	8008146 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 80081f2:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 80081f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80081fa:	2202      	movs	r2, #2
 80081fc:	4619      	mov	r1, r3
 80081fe:	2005      	movs	r0, #5
 8008200:	f005 f8c6 	bl	800d390 <xnrm2_7bm34mDQ>
 8008204:	eeb0 7a40 	vmov.f32	s14, s0
 8008208:	eef0 7a60 	vmov.f32	s15, s1
 800820c:	eeb0 1a47 	vmov.f32	s2, s14
 8008210:	eef0 1a67 	vmov.f32	s3, s15
 8008214:	eeb0 0a48 	vmov.f32	s0, s16
 8008218:	eef0 0a68 	vmov.f32	s1, s17
 800821c:	f002 fddc 	bl	800add8 <rt_hypotd_snf>
 8008220:	eeb0 7a40 	vmov.f32	s14, s0
 8008224:	eef0 7a60 	vmov.f32	s15, s1
 8008228:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 800822c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	f7f8 fc56 	bl	8000ae8 <__aeabi_dcmpge>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 8008242:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008246:	4692      	mov	sl, r2
 8008248:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800824c:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 8008250:	2300      	movs	r3, #0
 8008252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008256:	e010      	b.n	800827a <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 8008258:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008264:	f7f8 f9ba 	bl	80005dc <__aeabi_dmul>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 8008270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800827a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800827e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008282:	429a      	cmp	r2, r3
 8008284:	dbe8      	blt.n	8008258 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 8008286:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800828a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800828e:	e003      	b.n	8008298 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 8008290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008294:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 8008298:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800829c:	eeb0 0a47 	vmov.f32	s0, s14
 80082a0:	eef0 0a67 	vmov.f32	s1, s15
 80082a4:	f002 fea6 	bl	800aff4 <rtIsNaN>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d12b      	bne.n	8008306 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 80082ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	f7f8 fc01 	bl	8000ac0 <__aeabi_dcmplt>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	4b01      	ldr	r3, [pc, #4]	; (80082d0 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 80082ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80082ce:	e01a      	b.n	8008306 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 80082d0:	bff00000 	.word	0xbff00000
 80082d4:	3ff00000 	.word	0x3ff00000
 80082d8:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 80082dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	f7f8 fc08 	bl	8000afc <__aeabi_dcmpgt>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <UTMeanCovSqrt_C6QfB9Td+0x472>
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	4b99      	ldr	r3, [pc, #612]	; (800855c <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 80082f8:	e003      	b.n	8008302 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 8008306:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	4b93      	ldr	r3, [pc, #588]	; (800855c <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8008310:	f7f8 fbcc 	bl	8000aac <__aeabi_dcmpeq>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d021      	beq.n	800835e <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 800831a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800831e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008322:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800832a:	4618      	mov	r0, r3
 800832c:	ed97 1b08 	vldr	d1, [r7, #32]
 8008330:	eeb0 0a47 	vmov.f32	s0, s14
 8008334:	eef0 0a67 	vmov.f32	s1, s15
 8008338:	f002 fbc2 	bl	800aac0 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 800833c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8008340:	f00e fe8a 	bl	8017058 <sqrt>
 8008344:	ec51 0b10 	vmov	r0, r1, d0
 8008348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800834c:	f7f8 f946 	bl	80005dc <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8008358:	e9c1 2300 	strd	r2, r3, [r1]
 800835c:	e016      	b.n	800838c <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 800835e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008362:	ed97 0b08 	vldr	d0, [r7, #32]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f8fa 	bl	8008560 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 800836c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8008370:	f00e fe72 	bl	8017058 <sqrt>
 8008374:	ec51 0b10 	vmov	r0, r1, d0
 8008378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800837c:	f7f8 f92e 	bl	80005dc <__aeabi_dmul>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8008388:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8008392:	2300      	movs	r3, #0
 8008394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008398:	e054      	b.n	8008444 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 800839a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80083a4:	4413      	add	r3, r2
 80083a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80083b4:	00e4      	lsls	r4, r4, #3
 80083b6:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80083ba:	442c      	add	r4, r5
 80083bc:	f7f7 ff56 	bl	800026c <__aeabi_dsub>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 80083c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083cc:	3301      	adds	r3, #1
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80083d4:	4413      	add	r3, r2
 80083d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	3308      	adds	r3, #8
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80083e6:	3401      	adds	r4, #1
 80083e8:	00e4      	lsls	r4, r4, #3
 80083ea:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80083ee:	442c      	add	r4, r5
 80083f0:	f7f7 ff3c 	bl	800026c <__aeabi_dsub>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 80083fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008400:	3302      	adds	r3, #2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008408:	4413      	add	r3, r2
 800840a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	3310      	adds	r3, #16
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800841a:	3402      	adds	r4, #2
 800841c:	00e4      	lsls	r4, r4, #3
 800841e:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8008422:	442c      	add	r4, r5
 8008424:	f7f7 ff22 	bl	800026c <__aeabi_dsub>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 8008430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008434:	3303      	adds	r3, #3
 8008436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800843a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800843e:	3301      	adds	r3, #1
 8008440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008448:	2b05      	cmp	r3, #5
 800844a:	dda6      	ble.n	800839a <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 800844c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008454:	f7f8 f8c2 	bl	80005dc <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 8008460:	2300      	movs	r3, #0
 8008462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008466:	e06c      	b.n	8008542 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 8008468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008472:	4413      	add	r3, r2
 8008474:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008490:	e037      	b.n	8008502 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 8008492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800849c:	4413      	add	r3, r2
 800849e:	3b60      	subs	r3, #96	; 0x60
 80084a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80084a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084ac:	4413      	add	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80084b4:	4413      	add	r3, r2
 80084b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f8 f888 	bl	80005dc <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4620      	mov	r0, r4
 80084d2:	4629      	mov	r1, r5
 80084d4:	f7f7 fecc 	bl	8000270 <__adddf3>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084e0:	00c9      	lsls	r1, r1, #3
 80084e2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80084e6:	4401      	add	r1, r0
 80084e8:	3960      	subs	r1, #96	; 0x60
 80084ea:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 80084ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f2:	3303      	adds	r3, #3
 80084f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 80084f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084fc:	3301      	adds	r3, #1
 80084fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008506:	2b05      	cmp	r3, #5
 8008508:	ddc3      	ble.n	8008492 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 800850a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008514:	4413      	add	r3, r2
 8008516:	3b60      	subs	r3, #96	; 0x60
 8008518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800851c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008520:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8008524:	00e4      	lsls	r4, r4, #3
 8008526:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800852a:	442c      	add	r4, r5
 800852c:	f7f8 f856 	bl	80005dc <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 8008538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800853c:	3301      	adds	r3, #1
 800853e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008546:	2b02      	cmp	r3, #2
 8008548:	dd8e      	ble.n	8008468 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	37b0      	adds	r7, #176	; 0xb0
 8008550:	46bd      	mov	sp, r7
 8008552:	ecbd 8b02 	vpop	{d8}
 8008556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800855a:	bf00      	nop
 800855c:	3ff00000 	.word	0x3ff00000

08008560 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 8008560:	b5b0      	push	{r4, r5, r7, lr}
 8008562:	b090      	sub	sp, #64	; 0x40
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	f7f8 fa8f 	bl	8000aac <__aeabi_dcmpeq>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 8008594:	2302      	movs	r3, #2
 8008596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800859a:	e065      	b.n	8008668 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085a6:	f7f8 f943 	bl	8000830 <__aeabi_ddiv>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	4b5c      	ldr	r3, [pc, #368]	; (8008734 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80085c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085c8:	f7f8 fa8e 	bl	8000ae8 <__aeabi_dcmpge>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085d8:	e046      	b.n	8008668 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 80085da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085e2:	f7f7 fffb 	bl	80005dc <__aeabi_dmul>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	f04f 0000 	mov.w	r0, #0
 80085ee:	4951      	ldr	r1, [pc, #324]	; (8008734 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80085f0:	f7f7 fe3c 	bl	800026c <__aeabi_dsub>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	ec43 2b17 	vmov	d7, r2, r3
 80085fc:	eeb0 0a47 	vmov.f32	s0, s14
 8008600:	eef0 0a67 	vmov.f32	s1, s15
 8008604:	f00e fd28 	bl	8017058 <sqrt>
 8008608:	eeb0 7a40 	vmov.f32	s14, s0
 800860c:	eef0 7a60 	vmov.f32	s15, s1
 8008610:	f107 0218 	add.w	r2, r7, #24
 8008614:	f107 0110 	add.w	r1, r7, #16
 8008618:	f107 0320 	add.w	r3, r7, #32
 800861c:	4618      	mov	r0, r3
 800861e:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8008622:	eeb0 0a47 	vmov.f32	s0, s14
 8008626:	eef0 0a67 	vmov.f32	s1, s15
 800862a:	f002 fa49 	bl	800aac0 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008638:	f7f7 ffd0 	bl	80005dc <__aeabi_dmul>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4614      	mov	r4, r2
 8008642:	461d      	mov	r5, r3
 8008644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	f7f7 ffc4 	bl	80005dc <__aeabi_dmul>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f7 fe06 	bl	800026c <__aeabi_dsub>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 8008668:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800866c:	68f9      	ldr	r1, [r7, #12]
 800866e:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 8008672:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008676:	2b00      	cmp	r3, #0
 8008678:	d057      	beq.n	800872a <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800867a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800867e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008682:	f7f7 ffab 	bl	80005dc <__aeabi_dmul>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4614      	mov	r4, r2
 800868c:	461d      	mov	r5, r3
 800868e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008696:	f7f7 ffa1 	bl	80005dc <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 fde3 	bl	800026c <__aeabi_dsub>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 80086ae:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80086b2:	f002 fc7b 	bl	800afac <rtIsInf>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11d      	bne.n	80086f8 <cholUpdateFactor_HBMX5a5h+0x198>
 80086bc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80086c0:	f002 fc98 	bl	800aff4 <rtIsNaN>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d116      	bne.n	80086f8 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	4b19      	ldr	r3, [pc, #100]	; (8008734 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80086d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80086e0:	f7f8 f9e4 	bl	8000aac <__aeabi_dcmpeq>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d110      	bne.n	800870c <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	633b      	str	r3, [r7, #48]	; 0x30
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 80086f6:	e009      	b.n	800870c <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 80086f8:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 800870c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008710:	f00e fca2 	bl	8017058 <sqrt>
 8008714:	ec51 0b10 	vmov	r0, r1, d0
 8008718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800871c:	f7f7 ff5e 	bl	80005dc <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	68f9      	ldr	r1, [r7, #12]
 8008726:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800872a:	bf00      	nop
 800872c:	3740      	adds	r7, #64	; 0x40
 800872e:	46bd      	mov	sp, r7
 8008730:	bdb0      	pop	{r4, r5, r7, pc}
 8008732:	bf00      	nop
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	2001bc10 	.word	0x2001bc10

0800873c <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800873c:	b5b0      	push	{r4, r5, r7, lr}
 800873e:	b08e      	sub	sp, #56	; 0x38
 8008740:	af00      	add	r7, sp, #0
 8008742:	ed87 0b04 	vstr	d0, [r7, #16]
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008756:	f7f8 f9bd 	bl	8000ad4 <__aeabi_dcmple>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d020      	beq.n	80087a2 <look1_binlxpw+0x66>
    iLeft = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800876e:	f7f7 fd7d 	bl	800026c <__aeabi_dsub>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4614      	mov	r4, r2
 8008778:	461d      	mov	r5, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3308      	adds	r3, #8
 800877e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fd70 	bl	800026c <__aeabi_dsub>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	f7f8 f84c 	bl	8000830 <__aeabi_ddiv>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80087a0:	e087      	b.n	80088b2 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087b2:	f7f8 f985 	bl	8000ac0 <__aeabi_dcmplt>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04b      	beq.n	8008854 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 80087ca:	e016      	b.n	80087fa <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087dc:	f7f8 f970 	bl	8000ac0 <__aeabi_dcmplt>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <look1_binlxpw+0xb0>
        iRght = bpIdx;
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	e001      	b.n	80087f0 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80087f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	4413      	add	r3, r2
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	d8e3      	bhi.n	80087cc <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008814:	f7f7 fd2a 	bl	800026c <__aeabi_dsub>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4614      	mov	r4, r2
 800881e:	461d      	mov	r5, r3
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	3301      	adds	r3, #1
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd17 	bl	800026c <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4620      	mov	r0, r4
 8008844:	4629      	mov	r1, r5
 8008846:	f7f7 fff3 	bl	8000830 <__aeabi_ddiv>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008852:	e02e      	b.n	80088b2 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3b01      	subs	r3, #1
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008860:	3b01      	subs	r3, #1
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008870:	f7f7 fcfc 	bl	800026c <__aeabi_dsub>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4614      	mov	r4, r2
 800887a:	461d      	mov	r5, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800888e:	3b01      	subs	r3, #1
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fce7 	bl	800026c <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4620      	mov	r0, r4
 80088a4:	4629      	mov	r1, r5
 80088a6:	f7f7 ffc3 	bl	8000830 <__aeabi_ddiv>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	4413      	add	r3, r2
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	3301      	adds	r3, #1
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	4413      	add	r3, r2
 80088cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088d4:	f7f7 fcca 	bl	800026c <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4610      	mov	r0, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088e4:	f7f7 fe7a 	bl	80005dc <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4610      	mov	r0, r2
 80088ee:	4619      	mov	r1, r3
 80088f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088f4:	f7f7 fcbc 	bl	8000270 <__adddf3>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8008900:	eeb0 0a47 	vmov.f32	s0, s14
 8008904:	eef0 0a67 	vmov.f32	s1, s15
 8008908:	3738      	adds	r7, #56	; 0x38
 800890a:	46bd      	mov	sp, r7
 800890c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008910 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 8008910:	b5b0      	push	{r4, r5, r7, lr}
 8008912:	b0c0      	sub	sp, #256	; 0x100
 8008914:	af04      	add	r7, sp, #16
 8008916:	6578      	str	r0, [r7, #84]	; 0x54
 8008918:	6539      	str	r1, [r7, #80]	; 0x50
 800891a:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800891c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008920:	2248      	movs	r2, #72	; 0x48
 8008922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008924:	4618      	mov	r0, r3
 8008926:	f00e f8f9 	bl	8016b1c <memcpy>
  tau_idx_0 = 0.0;
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	f04f 0300 	mov.w	r3, #0
 8008932:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	f04f 0300 	mov.w	r3, #0
 8008956:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 8008966:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800896a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800896e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008972:	2202      	movs	r2, #2
 8008974:	4619      	mov	r1, r3
 8008976:	2002      	movs	r0, #2
 8008978:	f004 ffc2 	bl	800d900 <xnrm2_xDOlDEtw>
 800897c:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800898c:	f7f8 f88e 	bl	8000aac <__aeabi_dcmpeq>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 8172 	bne.w	8008c7c <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 8008998:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800899c:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 80089a0:	eeb0 0a47 	vmov.f32	s0, s14
 80089a4:	eef0 0a67 	vmov.f32	s1, s15
 80089a8:	f002 fa16 	bl	800add8 <rt_hypotd_snf>
 80089ac:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 80089b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	f7f8 f894 	bl	8000ae8 <__aeabi_dcmpge>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 80089da:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f8 f865 	bl	8000ac0 <__aeabi_dcmplt>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80f1 	beq.w	8008be0 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a08:	3301      	adds	r3, #1
 8008a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a14:	e01f      	b.n	8008a56 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008a20:	4413      	add	r3, r2
 8008a22:	3b80      	subs	r3, #128	; 0x80
 8008a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	4bc9      	ldr	r3, [pc, #804]	; (8008d54 <qr_5a2P8Gh6+0x444>)
 8008a2e:	f7f7 fdd5 	bl	80005dc <__aeabi_dmul>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008a44:	4413      	add	r3, r2
 8008a46:	3b80      	subs	r3, #128	; 0x80
 8008a48:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a50:	3301      	adds	r3, #1
 8008a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	dddb      	ble.n	8008a16 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	4bbc      	ldr	r3, [pc, #752]	; (8008d54 <qr_5a2P8Gh6+0x444>)
 8008a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a68:	f7f7 fdb8 	bl	80005dc <__aeabi_dmul>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	4bb6      	ldr	r3, [pc, #728]	; (8008d54 <qr_5a2P8Gh6+0x444>)
 8008a7a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008a7e:	f7f7 fdad 	bl	80005dc <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8008a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008aa2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008aa6:	f7f8 f80b 	bl	8000ac0 <__aeabi_dcmplt>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <qr_5a2P8Gh6+0x1a8>
 8008ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ab4:	2b13      	cmp	r3, #19
 8008ab6:	dda5      	ble.n	8008a04 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 8008ab8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008abc:	2202      	movs	r2, #2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	2002      	movs	r0, #2
 8008ac2:	f004 ff1d 	bl	800d900 <xnrm2_xDOlDEtw>
 8008ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8008aca:	eef0 7a60 	vmov.f32	s15, s1
 8008ace:	eeb0 1a47 	vmov.f32	s2, s14
 8008ad2:	eef0 1a67 	vmov.f32	s3, s15
 8008ad6:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8008ada:	f002 f97d 	bl	800add8 <rt_hypotd_snf>
 8008ade:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008aee:	f7f7 fffb 	bl	8000ae8 <__aeabi_dcmpge>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 8008af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008b08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8008b0c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b14:	f7f7 fbaa 	bl	800026c <__aeabi_dsub>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008b24:	f7f7 fe84 	bl	8000830 <__aeabi_ddiv>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 8008b30:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008b34:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008b38:	f7f7 fb98 	bl	800026c <__aeabi_dsub>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	f04f 0000 	mov.w	r0, #0
 8008b44:	4984      	ldr	r1, [pc, #528]	; (8008d58 <qr_5a2P8Gh6+0x448>)
 8008b46:	f7f7 fe73 	bl	8000830 <__aeabi_ddiv>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008b52:	2301      	movs	r3, #1
 8008b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b58:	e01e      	b.n	8008b98 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 8008b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008b64:	4413      	add	r3, r2
 8008b66:	3b80      	subs	r3, #128	; 0x80
 8008b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b6c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008b70:	f7f7 fd34 	bl	80005dc <__aeabi_dmul>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008b86:	4413      	add	r3, r2
 8008b88:	3b80      	subs	r3, #128	; 0x80
 8008b8a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8008b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b92:	3301      	adds	r3, #1
 8008b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	dddc      	ble.n	8008b5a <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ba6:	e010      	b.n	8008bca <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008bb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bb4:	f7f7 fd12 	bl	80005dc <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8008bc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	dbe8      	blt.n	8008ba8 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 8008bd6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008bda:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8008bde:	e04d      	b.n	8008c7c <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8008be0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008be4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008be8:	f7f7 fb40 	bl	800026c <__aeabi_dsub>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008bf8:	f7f7 fe1a 	bl	8000830 <__aeabi_ddiv>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 8008c04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008c08:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008c0c:	f7f7 fb2e 	bl	800026c <__aeabi_dsub>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	f04f 0000 	mov.w	r0, #0
 8008c18:	494f      	ldr	r1, [pc, #316]	; (8008d58 <qr_5a2P8Gh6+0x448>)
 8008c1a:	f7f7 fe09 	bl	8000830 <__aeabi_ddiv>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8008c26:	2301      	movs	r3, #1
 8008c28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c2c:	e01e      	b.n	8008c6c <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 8008c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008c38:	4413      	add	r3, r2
 8008c3a:	3b80      	subs	r3, #128	; 0x80
 8008c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c40:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008c44:	f7f7 fcca 	bl	80005dc <__aeabi_dmul>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3b80      	subs	r3, #128	; 0x80
 8008c5e:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8008c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c66:	3301      	adds	r3, #1
 8008c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	dddc      	ble.n	8008c2e <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 8008c74:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008c78:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	4b35      	ldr	r3, [pc, #212]	; (8008d58 <qr_5a2P8Gh6+0x448>)
 8008c82:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	f04f 0300 	mov.w	r3, #0
 8008c8e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008c92:	f7f7 ff0b 	bl	8000aac <__aeabi_dcmpeq>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 8081 	bne.w	8008da0 <qr_5a2P8Gh6+0x490>
    knt = 3;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8008caa:	e009      	b.n	8008cc0 <qr_5a2P8Gh6+0x3b0>
      knt--;
 8008cac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 8008cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8008cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd11      	ble.n	8008cec <qr_5a2P8Gh6+0x3dc>
 8008cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3b80      	subs	r3, #128	; 0x80
 8008cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	f7f7 fee3 	bl	8000aac <__aeabi_dcmpeq>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1df      	bne.n	8008cac <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 8008cec:	2302      	movs	r3, #2
 8008cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 8008cf8:	e049      	b.n	8008d8e <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 8008cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 8008d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 8008d16:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d1e:	441a      	add	r2, r3
 8008d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d24:	4293      	cmp	r3, r2
 8008d26:	da1f      	bge.n	8008d68 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 8008d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008d32:	4413      	add	r3, r2
 8008d34:	3b80      	subs	r3, #128	; 0x80
 8008d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	f7f7 feb3 	bl	8000aac <__aeabi_dcmpeq>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d52:	e011      	b.n	8008d78 <qr_5a2P8Gh6+0x468>
 8008d54:	7c900000 	.word	0x7c900000
 8008d58:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 8008d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d60:	3301      	adds	r3, #1
 8008d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d66:	e007      	b.n	8008d78 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 8008d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 8008d72:	2302      	movs	r3, #2
 8008d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 8008d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0c7      	beq.n	8008d10 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 8008d80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d102      	bne.n	8008d8e <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 8008d8e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <qr_5a2P8Gh6+0x49c>
 8008d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dcad      	bgt.n	8008cfa <qr_5a2P8Gh6+0x3ea>
 8008d9e:	e005      	b.n	8008dac <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 8008dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dd29      	ble.n	8008e08 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 8008db4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008db8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dbc:	9302      	str	r3, [sp, #8]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008dce:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008dd2:	f004 f951 	bl	800d078 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 8008dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008dea:	2304      	movs	r3, #4
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	4613      	mov	r3, r2
 8008df6:	2201      	movs	r2, #1
 8008df8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8008dfc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008e00:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008e04:	f004 fa41 	bl	800d28a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 8008e08:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008e0c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 8008e10:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008e14:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 8008e18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e1c:	2206      	movs	r2, #6
 8008e1e:	4619      	mov	r1, r3
 8008e20:	2001      	movs	r0, #1
 8008e22:	f004 fd6d 	bl	800d900 <xnrm2_xDOlDEtw>
 8008e26:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e36:	f7f7 fe39 	bl	8000aac <__aeabi_dcmpeq>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 8170 	bne.w	8009122 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 8008e42:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8008e46:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8008e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8008e4e:	eef0 0a67 	vmov.f32	s1, s15
 8008e52:	f001 ffc1 	bl	800add8 <rt_hypotd_snf>
 8008e56:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 8008e5a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	f7f7 fe3f 	bl	8000ae8 <__aeabi_dcmpge>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 8008e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e88:	633b      	str	r3, [r7, #48]	; 0x30
 8008e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008e9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ea0:	f7f7 fe0e 	bl	8000ac0 <__aeabi_dcmplt>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80ef 	beq.w	800908a <qr_5a2P8Gh6+0x77a>
      knt = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8008eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008ebc:	2305      	movs	r3, #5
 8008ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ec2:	e01f      	b.n	8008f04 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8008ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008ece:	4413      	add	r3, r2
 8008ed0:	3b80      	subs	r3, #128	; 0x80
 8008ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	4bc9      	ldr	r3, [pc, #804]	; (8009200 <qr_5a2P8Gh6+0x8f0>)
 8008edc:	f7f7 fb7e 	bl	80005dc <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3b80      	subs	r3, #128	; 0x80
 8008ef6:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8008efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008efe:	3301      	adds	r3, #1
 8008f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	dddb      	ble.n	8008ec4 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	4bbb      	ldr	r3, [pc, #748]	; (8009200 <qr_5a2P8Gh6+0x8f0>)
 8008f12:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f16:	f7f7 fb61 	bl	80005dc <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	4bb6      	ldr	r3, [pc, #728]	; (8009200 <qr_5a2P8Gh6+0x8f0>)
 8008f28:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008f2c:	f7f7 fb56 	bl	80005dc <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8008f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8008f50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008f54:	f7f7 fdb4 	bl	8000ac0 <__aeabi_dcmplt>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <qr_5a2P8Gh6+0x656>
 8008f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f62:	2b13      	cmp	r3, #19
 8008f64:	dda5      	ble.n	8008eb2 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 8008f66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f6a:	2206      	movs	r2, #6
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	2001      	movs	r0, #1
 8008f70:	f004 fcc6 	bl	800d900 <xnrm2_xDOlDEtw>
 8008f74:	eeb0 7a40 	vmov.f32	s14, s0
 8008f78:	eef0 7a60 	vmov.f32	s15, s1
 8008f7c:	eeb0 1a47 	vmov.f32	s2, s14
 8008f80:	eef0 1a67 	vmov.f32	s3, s15
 8008f84:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8008f88:	f001 ff26 	bl	800add8 <rt_hypotd_snf>
 8008f8c:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008f9c:	f7f7 fda4 	bl	8000ae8 <__aeabi_dcmpge>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008faa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 8008fba:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8008fbe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fc2:	f7f7 f953 	bl	800026c <__aeabi_dsub>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008fd2:	f7f7 fc2d 	bl	8000830 <__aeabi_ddiv>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 8008fde:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8008fe2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008fe6:	f7f7 f941 	bl	800026c <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	f04f 0000 	mov.w	r0, #0
 8008ff2:	4984      	ldr	r1, [pc, #528]	; (8009204 <qr_5a2P8Gh6+0x8f4>)
 8008ff4:	f7f7 fc1c 	bl	8000830 <__aeabi_ddiv>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8009000:	2305      	movs	r3, #5
 8009002:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009006:	e01c      	b.n	8009042 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 8009008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009012:	4413      	add	r3, r2
 8009014:	3b80      	subs	r3, #128	; 0x80
 8009016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800901a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800901e:	f7f7 fadd 	bl	80005dc <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800902a:	00c9      	lsls	r1, r1, #3
 800902c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009030:	4401      	add	r1, r0
 8009032:	3980      	subs	r1, #128	; 0x80
 8009034:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8009038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800903c:	3301      	adds	r3, #1
 800903e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009046:	2b05      	cmp	r3, #5
 8009048:	ddde      	ble.n	8009008 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800904a:	2300      	movs	r3, #0
 800904c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009050:	e010      	b.n	8009074 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800905a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800905e:	f7f7 fabd 	bl	80005dc <__aeabi_dmul>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800906a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800906e:	3301      	adds	r3, #1
 8009070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009074:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800907c:	429a      	cmp	r2, r3
 800907e:	dbe8      	blt.n	8009052 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 8009080:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009084:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009088:	e04b      	b.n	8009122 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800908a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800908e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009092:	f7f7 f8eb 	bl	800026c <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80090a2:	f7f7 fbc5 	bl	8000830 <__aeabi_ddiv>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 80090ae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80090b2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80090b6:	f7f7 f8d9 	bl	800026c <__aeabi_dsub>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	f04f 0000 	mov.w	r0, #0
 80090c2:	4950      	ldr	r1, [pc, #320]	; (8009204 <qr_5a2P8Gh6+0x8f4>)
 80090c4:	f7f7 fbb4 	bl	8000830 <__aeabi_ddiv>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 80090d0:	2305      	movs	r3, #5
 80090d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090d6:	e01c      	b.n	8009112 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 80090d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80090e2:	4413      	add	r3, r2
 80090e4:	3b80      	subs	r3, #128	; 0x80
 80090e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ea:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80090ee:	f7f7 fa75 	bl	80005dc <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80090fa:	00c9      	lsls	r1, r1, #3
 80090fc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009100:	4401      	add	r1, r0
 8009102:	3980      	subs	r1, #128	; 0x80
 8009104:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 8009108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800910c:	3301      	adds	r3, #1
 800910e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009116:	2b05      	cmp	r3, #5
 8009118:	ddde      	ble.n	80090d8 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800911a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800911e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	4b37      	ldr	r3, [pc, #220]	; (8009204 <qr_5a2P8Gh6+0x8f4>)
 8009128:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009138:	f7f7 fcb8 	bl	8000aac <__aeabi_dcmpeq>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d162      	bne.n	8009208 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 8009142:	2302      	movs	r3, #2
 8009144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 8009148:	2305      	movs	r3, #5
 800914a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800914e:	e009      	b.n	8009164 <qr_5a2P8Gh6+0x854>
      knt--;
 8009150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009154:	3b01      	subs	r3, #1
 8009156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800915a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800915e:	3b01      	subs	r3, #1
 8009160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009168:	2b00      	cmp	r3, #0
 800916a:	dd11      	ble.n	8009190 <qr_5a2P8Gh6+0x880>
 800916c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009176:	4413      	add	r3, r2
 8009178:	3b80      	subs	r3, #128	; 0x80
 800917a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	f7f7 fc91 	bl	8000aac <__aeabi_dcmpeq>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1df      	bne.n	8009150 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 8009190:	2301      	movs	r3, #1
 8009192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 8009196:	2307      	movs	r3, #7
 8009198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 80091a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80091a6:	3306      	adds	r3, #6
 80091a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091ac:	429a      	cmp	r2, r3
 80091ae:	dc1b      	bgt.n	80091e8 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 80091b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80091ba:	4413      	add	r3, r2
 80091bc:	3b80      	subs	r3, #128	; 0x80
 80091be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	f7f7 fc6f 	bl	8000aac <__aeabi_dcmpeq>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091da:	e00b      	b.n	80091f4 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 80091dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091e0:	3301      	adds	r3, #1
 80091e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091e6:	e005      	b.n	80091f4 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 80091f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0cf      	beq.n	800919c <qr_5a2P8Gh6+0x88c>
 80091fc:	e00a      	b.n	8009214 <qr_5a2P8Gh6+0x904>
 80091fe:	bf00      	nop
 8009200:	7c900000 	.word	0x7c900000
 8009204:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 8009214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009218:	2b00      	cmp	r3, #0
 800921a:	dd29      	ble.n	8009270 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800921c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009224:	9302      	str	r3, [sp, #8]
 8009226:	2305      	movs	r3, #5
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2308      	movs	r3, #8
 8009232:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009236:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800923a:	f003 ff1d 	bl	800d078 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800923e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009242:	623b      	str	r3, [r7, #32]
 8009244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
 800924e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009252:	2308      	movs	r3, #8
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	2205      	movs	r2, #5
 8009260:	ed97 0b08 	vldr	d0, [r7, #32]
 8009264:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009268:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800926c:	f004 f80d 	bl	800d28a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 8009270:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009274:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 8009278:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800927c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800927e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 8009282:	2301      	movs	r3, #1
 8009284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009288:	e00f      	b.n	80092aa <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800928a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009292:	18d1      	adds	r1, r2, r3
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 80092a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092a4:	3301      	adds	r3, #1
 80092a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	ddeb      	ble.n	800928a <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 80092be:	2300      	movs	r3, #0
 80092c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092c4:	e016      	b.n	80092f4 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 80092c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092ca:	3303      	adds	r3, #3
 80092cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80092d0:	3203      	adds	r2, #3
 80092d2:	00d2      	lsls	r2, r2, #3
 80092d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80092d6:	4411      	add	r1, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80092de:	4413      	add	r3, r2
 80092e0:	3b80      	subs	r3, #128	; 0x80
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 80092ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092ee:	3301      	adds	r3, #1
 80092f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	dde4      	ble.n	80092c6 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 80092fc:	e010      	b.n	8009320 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 80092fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009302:	3303      	adds	r3, #3
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009308:	18d1      	adds	r1, r2, r3
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 8009316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800931a:	3301      	adds	r3, #1
 800931c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 8009320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009324:	2b02      	cmp	r3, #2
 8009326:	ddea      	ble.n	80092fe <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8009334:	2300      	movs	r3, #0
 8009336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800933a:	e016      	b.n	800936a <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800933c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009340:	3306      	adds	r3, #6
 8009342:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009346:	3206      	adds	r2, #6
 8009348:	00d2      	lsls	r2, r2, #3
 800934a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800934c:	4411      	add	r1, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009354:	4413      	add	r3, r2
 8009356:	3b80      	subs	r3, #128	; 0x80
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 8009360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009364:	3301      	adds	r3, #1
 8009366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800936a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800936e:	2b02      	cmp	r3, #2
 8009370:	dde4      	ble.n	800933c <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	4bc8      	ldr	r3, [pc, #800]	; (80096a4 <qr_5a2P8Gh6+0xd94>)
 8009384:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 8009388:	2300      	movs	r3, #0
 800938a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800938e:	e014      	b.n	80093ba <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 8009390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009394:	f1c3 0307 	rsb	r3, r3, #7
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800939e:	4413      	add	r3, r2
 80093a0:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 80093b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093b4:	3301      	adds	r3, #1
 80093b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093be:	2b01      	cmp	r3, #1
 80093c0:	dde6      	ble.n	8009390 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	4bb7      	ldr	r3, [pc, #732]	; (80096a4 <qr_5a2P8Gh6+0xd94>)
 80093c8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80093d8:	f7f7 fb68 	bl	8000aac <__aeabi_dcmpeq>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d15c      	bne.n	800949c <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 80093e2:	2307      	movs	r3, #7
 80093e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80093e8:	e009      	b.n	80093fe <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 80093ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093ee:	3b01      	subs	r3, #1
 80093f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 80093f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093f8:	3b01      	subs	r3, #1
 80093fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80093fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009402:	2b00      	cmp	r3, #0
 8009404:	dd12      	ble.n	800942c <qr_5a2P8Gh6+0xb1c>
 8009406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800940a:	3b02      	subs	r3, #2
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009412:	4413      	add	r3, r2
 8009414:	3b80      	subs	r3, #128	; 0x80
 8009416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	f7f7 fb43 	bl	8000aac <__aeabi_dcmpeq>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1de      	bne.n	80093ea <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800942c:	2301      	movs	r3, #1
 800942e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 8009432:	2308      	movs	r3, #8
 8009434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800943e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009442:	3307      	adds	r3, #7
 8009444:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009448:	429a      	cmp	r2, r3
 800944a:	dc1c      	bgt.n	8009486 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800944c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009450:	3b01      	subs	r3, #1
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009458:	4413      	add	r3, r2
 800945a:	3b80      	subs	r3, #128	; 0x80
 800945c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	f7f7 fb20 	bl	8000aac <__aeabi_dcmpeq>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 8009472:	2301      	movs	r3, #1
 8009474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009478:	e00b      	b.n	8009492 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800947a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800947e:	3301      	adds	r3, #1
 8009480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009484:	e005      	b.n	8009492 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800948c:	2301      	movs	r3, #1
 800948e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 8009492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0ce      	beq.n	8009438 <qr_5a2P8Gh6+0xb28>
 800949a:	e005      	b.n	80094a8 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 80094a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dd29      	ble.n	8009504 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 80094b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80094b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	2305      	movs	r3, #5
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2308      	movs	r3, #8
 80094c6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80094ca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80094ce:	f003 fdd3 	bl	800d078 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 80094d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80094e6:	2308      	movs	r3, #8
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	4613      	mov	r3, r2
 80094f2:	2205      	movs	r2, #5
 80094f4:	ed97 0b06 	vldr	d0, [r7, #24]
 80094f8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80094fc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009500:	f003 fec3 	bl	800d28a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 8009504:	2305      	movs	r3, #5
 8009506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800950a:	e024      	b.n	8009556 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800950c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009516:	4413      	add	r3, r2
 8009518:	3b80      	subs	r3, #128	; 0x80
 800951a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800951e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009532:	f7f7 f853 	bl	80005dc <__aeabi_dmul>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800953e:	00c9      	lsls	r1, r1, #3
 8009540:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009544:	4401      	add	r1, r0
 8009546:	3980      	subs	r1, #128	; 0x80
 8009548:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800954c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009550:	3301      	adds	r3, #1
 8009552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800955a:	2b05      	cmp	r3, #5
 800955c:	ddd6      	ble.n	800950c <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800955e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	494f      	ldr	r1, [pc, #316]	; (80096a4 <qr_5a2P8Gh6+0xd94>)
 8009568:	f7f6 fe80 	bl	800026c <__aeabi_dsub>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	f04f 0300 	mov.w	r3, #0
 800957c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <qr_5a2P8Gh6+0xd94>)
 8009586:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009596:	f7f7 fa89 	bl	8000aac <__aeabi_dcmpeq>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8083 	bne.w	80096a8 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 80095a2:	2303      	movs	r3, #3
 80095a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 80095a8:	2304      	movs	r3, #4
 80095aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80095ae:	e009      	b.n	80095c4 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 80095b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 80095ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095be:	3b01      	subs	r3, #1
 80095c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 80095c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dd12      	ble.n	80095f2 <qr_5a2P8Gh6+0xce2>
 80095cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095d0:	3b02      	subs	r3, #2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80095d8:	4413      	add	r3, r2
 80095da:	3b80      	subs	r3, #128	; 0x80
 80095dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	f7f7 fa60 	bl	8000aac <__aeabi_dcmpeq>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1de      	bne.n	80095b0 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 80095f2:	2302      	movs	r3, #2
 80095f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 80095fe:	e048      	b.n	8009692 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 8009600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009604:	1e5a      	subs	r2, r3, #1
 8009606:	4613      	mov	r3, r2
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	4413      	add	r3, r2
 800960c:	3304      	adds	r3, #4
 800960e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 8009612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 8009620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009628:	4413      	add	r3, r2
 800962a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800962e:	429a      	cmp	r2, r3
 8009630:	da1c      	bge.n	800966c <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 8009632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009636:	3b01      	subs	r3, #1
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800963e:	4413      	add	r3, r2
 8009640:	3b80      	subs	r3, #128	; 0x80
 8009642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	f7f7 fa2d 	bl	8000aac <__aeabi_dcmpeq>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 8009658:	2301      	movs	r3, #1
 800965a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800965e:	e00d      	b.n	800967c <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 8009660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009664:	3301      	adds	r3, #1
 8009666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800966a:	e007      	b.n	800967c <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800966c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009670:	3b01      	subs	r3, #1
 8009672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 8009676:	2302      	movs	r3, #2
 8009678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800967c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0ca      	beq.n	800961a <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 8009684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d102      	bne.n	8009692 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 8009692:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10c      	bne.n	80096b4 <qr_5a2P8Gh6+0xda4>
 800969a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dcae      	bgt.n	8009600 <qr_5a2P8Gh6+0xcf0>
 80096a2:	e007      	b.n	80096b4 <qr_5a2P8Gh6+0xda4>
 80096a4:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 80096b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dd29      	ble.n	8009710 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 80096bc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80096c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096c4:	9302      	str	r3, [sp, #8]
 80096c6:	2301      	movs	r3, #1
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2304      	movs	r3, #4
 80096d2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80096d6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80096da:	f003 fccd 	bl	800d078 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 80096de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096e2:	60bb      	str	r3, [r7, #8]
 80096e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80096f2:	2304      	movs	r3, #4
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	4613      	mov	r3, r2
 80096fe:	2201      	movs	r2, #1
 8009700:	ed97 0b02 	vldr	d0, [r7, #8]
 8009704:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009708:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800970c:	f003 fdbd 	bl	800d28a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009710:	2301      	movs	r3, #1
 8009712:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009716:	e024      	b.n	8009762 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 8009718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009722:	4413      	add	r3, r2
 8009724:	3b80      	subs	r3, #128	; 0x80
 8009726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800972a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009734:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800973e:	f7f6 ff4d 	bl	80005dc <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800974a:	00c9      	lsls	r1, r1, #3
 800974c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8009750:	4401      	add	r1, r0
 8009752:	3980      	subs	r1, #128	; 0x80
 8009754:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800975c:	3301      	adds	r3, #1
 800975e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009762:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009766:	2b02      	cmp	r3, #2
 8009768:	ddd6      	ble.n	8009718 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800976a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800976e:	f04f 0000 	mov.w	r0, #0
 8009772:	492a      	ldr	r1, [pc, #168]	; (800981c <qr_5a2P8Gh6+0xf0c>)
 8009774:	f7f6 fd7a 	bl	800026c <__aeabi_dsub>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800978c:	e03d      	b.n	800980a <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800978e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009796:	18d1      	adds	r1, r2, r3
 8009798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80097a2:	4413      	add	r3, r2
 80097a4:	3b80      	subs	r3, #128	; 0x80
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 80097ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097b2:	3301      	adds	r3, #1
 80097b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80097b8:	3201      	adds	r2, #1
 80097ba:	00d2      	lsls	r2, r2, #3
 80097bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097be:	4411      	add	r1, r2
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80097c6:	4413      	add	r3, r2
 80097c8:	3b80      	subs	r3, #128	; 0x80
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 80097d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097d6:	3302      	adds	r3, #2
 80097d8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80097dc:	3202      	adds	r2, #2
 80097de:	00d2      	lsls	r2, r2, #3
 80097e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097e2:	4411      	add	r1, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80097ea:	4413      	add	r3, r2
 80097ec:	3b80      	subs	r3, #128	; 0x80
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 80097f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097fa:	3303      	adds	r3, #3
 80097fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 8009800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009804:	3301      	adds	r3, #1
 8009806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800980a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800980e:	2b02      	cmp	r3, #2
 8009810:	ddbd      	ble.n	800978e <qr_5a2P8Gh6+0xe7e>
  }
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	37f0      	adds	r7, #240	; 0xf0
 8009818:	46bd      	mov	sp, r7
 800981a:	bdb0      	pop	{r4, r5, r7, pc}
 800981c:	3ff00000 	.word	0x3ff00000

08009820 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 8009820:	b5b0      	push	{r4, r5, r7, lr}
 8009822:	b0da      	sub	sp, #360	; 0x168
 8009824:	af04      	add	r7, sp, #16
 8009826:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009828:	66b9      	str	r1, [r7, #104]	; 0x68
 800982a:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800982c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009830:	2290      	movs	r2, #144	; 0x90
 8009832:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009834:	4618      	mov	r0, r3
 8009836:	f00d f971 	bl	8016b1c <memcpy>
  work[0] = 0.0;
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	f04f 0300 	mov.w	r3, #0
 8009842:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 8009852:	f04f 0200 	mov.w	r2, #0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800985e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009862:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 8009866:	f04f 0200 	mov.w	r2, #0
 800986a:	f04f 0300 	mov.w	r3, #0
 800986e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 8009872:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009876:	2202      	movs	r2, #2
 8009878:	4619      	mov	r1, r3
 800987a:	2005      	movs	r0, #5
 800987c:	f003 ff92 	bl	800d7a4 <xnrm2_nLdASVZH>
 8009880:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009890:	f7f7 f90c 	bl	8000aac <__aeabi_dcmpeq>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	f040 8172 	bne.w	8009b80 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800989c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80098a0:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 80098a4:	eeb0 0a47 	vmov.f32	s0, s14
 80098a8:	eef0 0a67 	vmov.f32	s1, s15
 80098ac:	f001 fa94 	bl	800add8 <rt_hypotd_snf>
 80098b0:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 80098b4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	f7f7 f912 	bl	8000ae8 <__aeabi_dcmpge>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d009      	beq.n	80098de <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 80098ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80098ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80098d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80098da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 80098de:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80098e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098e6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7f7 f8e3 	bl	8000ac0 <__aeabi_dcmplt>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 80f1 	beq.w	8009ae4 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 8009908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800990c:	3301      	adds	r3, #1
 800990e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009912:	2301      	movs	r3, #1
 8009914:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009918:	e01f      	b.n	800995a <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800991a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009924:	4413      	add	r3, r2
 8009926:	3bd0      	subs	r3, #208	; 0xd0
 8009928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	4bca      	ldr	r3, [pc, #808]	; (8009c5c <qr_DvOBrgQi+0x43c>)
 8009932:	f7f6 fe53 	bl	80005dc <__aeabi_dmul>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4610      	mov	r0, r2
 800993c:	4619      	mov	r1, r3
 800993e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009948:	4413      	add	r3, r2
 800994a:	3bd0      	subs	r3, #208	; 0xd0
 800994c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009954:	3301      	adds	r3, #1
 8009956:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800995a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995e:	2b05      	cmp	r3, #5
 8009960:	dddb      	ble.n	800991a <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	4bbd      	ldr	r3, [pc, #756]	; (8009c5c <qr_DvOBrgQi+0x43c>)
 8009968:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800996c:	f7f6 fe36 	bl	80005dc <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 8009978:	f04f 0200 	mov.w	r2, #0
 800997c:	4bb7      	ldr	r3, [pc, #732]	; (8009c5c <qr_DvOBrgQi+0x43c>)
 800997e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009982:	f7f6 fe2b 	bl	80005dc <__aeabi_dmul>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800998e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009992:	65bb      	str	r3, [r7, #88]	; 0x58
 8009994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800999c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80099a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099aa:	f7f7 f889 	bl	8000ac0 <__aeabi_dcmplt>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <qr_DvOBrgQi+0x19c>
 80099b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099b8:	2b13      	cmp	r3, #19
 80099ba:	dda5      	ble.n	8009908 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 80099bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80099c0:	2202      	movs	r2, #2
 80099c2:	4619      	mov	r1, r3
 80099c4:	2005      	movs	r0, #5
 80099c6:	f003 feed 	bl	800d7a4 <xnrm2_nLdASVZH>
 80099ca:	eeb0 7a40 	vmov.f32	s14, s0
 80099ce:	eef0 7a60 	vmov.f32	s15, s1
 80099d2:	eeb0 1a47 	vmov.f32	s2, s14
 80099d6:	eef0 1a67 	vmov.f32	s3, s15
 80099da:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80099de:	f001 f9fb 	bl	800add8 <rt_hypotd_snf>
 80099e2:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80099f2:	f7f7 f879 	bl	8000ae8 <__aeabi_dcmpge>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 80099fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009a00:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8009a10:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009a14:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009a18:	f7f6 fc28 	bl	800026c <__aeabi_dsub>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4610      	mov	r0, r2
 8009a22:	4619      	mov	r1, r3
 8009a24:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a28:	f7f6 ff02 	bl	8000830 <__aeabi_ddiv>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 8009a34:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009a38:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009a3c:	f7f6 fc16 	bl	800026c <__aeabi_dsub>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	f04f 0000 	mov.w	r0, #0
 8009a48:	4985      	ldr	r1, [pc, #532]	; (8009c60 <qr_DvOBrgQi+0x440>)
 8009a4a:	f7f6 fef1 	bl	8000830 <__aeabi_ddiv>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009a56:	2301      	movs	r3, #1
 8009a58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a5c:	e01e      	b.n	8009a9c <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 8009a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a68:	4413      	add	r3, r2
 8009a6a:	3bd0      	subs	r3, #208	; 0xd0
 8009a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a70:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009a74:	f7f6 fdb2 	bl	80005dc <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a8a:	4413      	add	r3, r2
 8009a8c:	3bd0      	subs	r3, #208	; 0xd0
 8009a8e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 8009a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a96:	3301      	adds	r3, #1
 8009a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa0:	2b05      	cmp	r3, #5
 8009aa2:	dddc      	ble.n	8009a5e <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009aaa:	e010      	b.n	8009ace <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009ab4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009ab8:	f7f6 fd90 	bl	80005dc <__aeabi_dmul>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009ace:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	dbe8      	blt.n	8009aac <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 8009ada:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ade:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009ae2:	e04d      	b.n	8009b80 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8009ae4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ae8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009aec:	f7f6 fbbe 	bl	800026c <__aeabi_dsub>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009afc:	f7f6 fe98 	bl	8000830 <__aeabi_ddiv>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 8009b08:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009b0c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009b10:	f7f6 fbac 	bl	800026c <__aeabi_dsub>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	4950      	ldr	r1, [pc, #320]	; (8009c60 <qr_DvOBrgQi+0x440>)
 8009b1e:	f7f6 fe87 	bl	8000830 <__aeabi_ddiv>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b30:	e01e      	b.n	8009b70 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 8009b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009b3c:	4413      	add	r3, r2
 8009b3e:	3bd0      	subs	r3, #208	; 0xd0
 8009b40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b44:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009b48:	f7f6 fd48 	bl	80005dc <__aeabi_dmul>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4610      	mov	r0, r2
 8009b52:	4619      	mov	r1, r3
 8009b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009b5e:	4413      	add	r3, r2
 8009b60:	3bd0      	subs	r3, #208	; 0xd0
 8009b62:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 8009b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	dddc      	ble.n	8009b32 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 8009b78:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009b7c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	4b36      	ldr	r3, [pc, #216]	; (8009c60 <qr_DvOBrgQi+0x440>)
 8009b86:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 8009b8a:	f04f 0200 	mov.w	r2, #0
 8009b8e:	f04f 0300 	mov.w	r3, #0
 8009b92:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009b96:	f7f6 ff89 	bl	8000aac <__aeabi_dcmpeq>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8083 	bne.w	8009ca8 <qr_DvOBrgQi+0x488>
    knt = 6;
 8009ba2:	2306      	movs	r3, #6
 8009ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 8009ba8:	2305      	movs	r3, #5
 8009baa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009bae:	e009      	b.n	8009bc4 <qr_DvOBrgQi+0x3a4>
      knt--;
 8009bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 8009bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dd11      	ble.n	8009bf0 <qr_DvOBrgQi+0x3d0>
 8009bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009bd6:	4413      	add	r3, r2
 8009bd8:	3bd0      	subs	r3, #208	; 0xd0
 8009bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	f7f6 ff61 	bl	8000aac <__aeabi_dcmpeq>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1df      	bne.n	8009bb0 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 8009bfc:	e04b      	b.n	8009c96 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 8009bfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 8009c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 8009c1c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009c24:	441a      	add	r2, r3
 8009c26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	da20      	bge.n	8009c70 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 8009c2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009c38:	4413      	add	r3, r2
 8009c3a:	3bd0      	subs	r3, #208	; 0xd0
 8009c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	f04f 0300 	mov.w	r3, #0
 8009c48:	f7f6 ff30 	bl	8000aac <__aeabi_dcmpeq>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d108      	bne.n	8009c64 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009c58:	e012      	b.n	8009c80 <qr_DvOBrgQi+0x460>
 8009c5a:	bf00      	nop
 8009c5c:	7c900000 	.word	0x7c900000
 8009c60:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 8009c64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009c68:	3301      	adds	r3, #1
 8009c6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009c6e:	e007      	b.n	8009c80 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 8009c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c74:	3b01      	subs	r3, #1
 8009c76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 8009c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c6      	beq.n	8009c16 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 8009c88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d102      	bne.n	8009c96 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 8009c96:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <qr_DvOBrgQi+0x494>
 8009c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dcab      	bgt.n	8009bfe <qr_DvOBrgQi+0x3de>
 8009ca6:	e005      	b.n	8009cb4 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 8009cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd29      	ble.n	8009d10 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 8009cbc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009cc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2307      	movs	r3, #7
 8009cd2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009cd6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009cda:	f003 f945 	bl	800cf68 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 8009cde:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ce4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	657b      	str	r3, [r7, #84]	; 0x54
 8009cee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009cf2:	2307      	movs	r3, #7
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	2201      	movs	r2, #1
 8009d00:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8009d04:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8009d08:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009d0c:	f003 fa3a 	bl	800d184 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 8009d10:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009d14:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 8009d18:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009d1c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 8009d2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009d30:	2209      	movs	r2, #9
 8009d32:	4619      	mov	r1, r3
 8009d34:	2004      	movs	r0, #4
 8009d36:	f003 fd35 	bl	800d7a4 <xnrm2_nLdASVZH>
 8009d3a:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 8009d3e:	f04f 0200 	mov.w	r2, #0
 8009d42:	f04f 0300 	mov.w	r3, #0
 8009d46:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009d4a:	f7f6 feaf 	bl	8000aac <__aeabi_dcmpeq>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f040 8174 	bne.w	800a03e <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 8009d56:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8009d5a:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 8009d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8009d62:	eef0 0a67 	vmov.f32	s1, s15
 8009d66:	f001 f837 	bl	800add8 <rt_hypotd_snf>
 8009d6a:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 8009d6e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	f7f6 feb5 	bl	8000ae8 <__aeabi_dcmpge>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 8009d84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d88:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009d94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8009d98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da8:	f04f 0200 	mov.w	r2, #0
 8009dac:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009db0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009db4:	f7f6 fe84 	bl	8000ac0 <__aeabi_dcmplt>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80f1 	beq.w	8009fa2 <qr_DvOBrgQi+0x782>
      knt = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 8009dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009dd6:	e01f      	b.n	8009e18 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8009dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009de2:	4413      	add	r3, r2
 8009de4:	3bd0      	subs	r3, #208	; 0xd0
 8009de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009dea:	f04f 0200 	mov.w	r2, #0
 8009dee:	4bc6      	ldr	r3, [pc, #792]	; (800a108 <qr_DvOBrgQi+0x8e8>)
 8009df0:	f7f6 fbf4 	bl	80005dc <__aeabi_dmul>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009e06:	4413      	add	r3, r2
 8009e08:	3bd0      	subs	r3, #208	; 0xd0
 8009e0a:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e12:	3301      	adds	r3, #1
 8009e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e1c:	2b0b      	cmp	r3, #11
 8009e1e:	dddb      	ble.n	8009dd8 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	4bb8      	ldr	r3, [pc, #736]	; (800a108 <qr_DvOBrgQi+0x8e8>)
 8009e26:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009e2a:	f7f6 fbd7 	bl	80005dc <__aeabi_dmul>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 8009e36:	f04f 0200 	mov.w	r2, #0
 8009e3a:	4bb3      	ldr	r3, [pc, #716]	; (800a108 <qr_DvOBrgQi+0x8e8>)
 8009e3c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009e40:	f7f6 fbcc 	bl	80005dc <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8009e4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009e50:	643b      	str	r3, [r7, #64]	; 0x40
 8009e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009e64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e68:	f7f6 fe2a 	bl	8000ac0 <__aeabi_dcmplt>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <qr_DvOBrgQi+0x65a>
 8009e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e76:	2b13      	cmp	r3, #19
 8009e78:	dda5      	ble.n	8009dc6 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 8009e7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009e7e:	2209      	movs	r2, #9
 8009e80:	4619      	mov	r1, r3
 8009e82:	2004      	movs	r0, #4
 8009e84:	f003 fc8e 	bl	800d7a4 <xnrm2_nLdASVZH>
 8009e88:	eeb0 7a40 	vmov.f32	s14, s0
 8009e8c:	eef0 7a60 	vmov.f32	s15, s1
 8009e90:	eeb0 1a47 	vmov.f32	s2, s14
 8009e94:	eef0 1a67 	vmov.f32	s3, s15
 8009e98:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8009e9c:	f000 ff9c 	bl	800add8 <rt_hypotd_snf>
 8009ea0:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009eb0:	f7f6 fe1a 	bl	8000ae8 <__aeabi_dcmpge>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 8009eba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009ebe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ec6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009eca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 8009ece:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009ed2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009ed6:	f7f6 f9c9 	bl	800026c <__aeabi_dsub>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ee6:	f7f6 fca3 	bl	8000830 <__aeabi_ddiv>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 8009ef2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009ef6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8009efa:	f7f6 f9b7 	bl	800026c <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	f04f 0000 	mov.w	r0, #0
 8009f06:	4981      	ldr	r1, [pc, #516]	; (800a10c <qr_DvOBrgQi+0x8ec>)
 8009f08:	f7f6 fc92 	bl	8000830 <__aeabi_ddiv>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009f14:	2308      	movs	r3, #8
 8009f16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f1a:	e01e      	b.n	8009f5a <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 8009f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009f26:	4413      	add	r3, r2
 8009f28:	3bd0      	subs	r3, #208	; 0xd0
 8009f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f2e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8009f32:	f7f6 fb53 	bl	80005dc <__aeabi_dmul>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009f48:	4413      	add	r3, r2
 8009f4a:	3bd0      	subs	r3, #208	; 0xd0
 8009f4c:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 8009f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f54:	3301      	adds	r3, #1
 8009f56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f5e:	2b0b      	cmp	r3, #11
 8009f60:	dddc      	ble.n	8009f1c <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009f62:	2300      	movs	r3, #0
 8009f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009f68:	e010      	b.n	8009f8c <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009f72:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009f76:	f7f6 fb31 	bl	80005dc <__aeabi_dmul>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f86:	3301      	adds	r3, #1
 8009f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009f8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f94:	429a      	cmp	r2, r3
 8009f96:	dbe8      	blt.n	8009f6a <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 8009f98:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009f9c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8009fa0:	e04d      	b.n	800a03e <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 8009fa2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009fa6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009faa:	f7f6 f95f 	bl	800026c <__aeabi_dsub>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009fba:	f7f6 fc39 	bl	8000830 <__aeabi_ddiv>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 8009fc6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009fca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8009fce:	f7f6 f94d 	bl	800026c <__aeabi_dsub>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	f04f 0000 	mov.w	r0, #0
 8009fda:	494c      	ldr	r1, [pc, #304]	; (800a10c <qr_DvOBrgQi+0x8ec>)
 8009fdc:	f7f6 fc28 	bl	8000830 <__aeabi_ddiv>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009fee:	e01e      	b.n	800a02e <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 8009ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3bd0      	subs	r3, #208	; 0xd0
 8009ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a002:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a006:	f7f6 fae9 	bl	80005dc <__aeabi_dmul>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4610      	mov	r0, r2
 800a010:	4619      	mov	r1, r3
 800a012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a01c:	4413      	add	r3, r2
 800a01e:	3bd0      	subs	r3, #208	; 0xd0
 800a020:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800a024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a028:	3301      	adds	r3, #1
 800a02a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a02e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a032:	2b0b      	cmp	r3, #11
 800a034:	dddc      	ble.n	8009ff0 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800a036:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a03a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	4b32      	ldr	r3, [pc, #200]	; (800a10c <qr_DvOBrgQi+0x8ec>)
 800a044:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a054:	f7f6 fd2a 	bl	8000aac <__aeabi_dcmpeq>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d163      	bne.n	800a126 <qr_DvOBrgQi+0x906>
    knt = 5;
 800a05e:	2305      	movs	r3, #5
 800a060:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800a064:	230b      	movs	r3, #11
 800a066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a06a:	e009      	b.n	800a080 <qr_DvOBrgQi+0x860>
      knt--;
 800a06c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a070:	3b01      	subs	r3, #1
 800a072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800a076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a07a:	3b01      	subs	r3, #1
 800a07c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd11      	ble.n	800a0ac <qr_DvOBrgQi+0x88c>
 800a088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a092:	4413      	add	r3, r2
 800a094:	3bd0      	subs	r3, #208	; 0xd0
 800a096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	f7f6 fd03 	bl	8000aac <__aeabi_dcmpeq>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1df      	bne.n	800a06c <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800a0b2:	230d      	movs	r3, #13
 800a0b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800a0be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0c2:	f103 020c 	add.w	r2, r3, #12
 800a0c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	dc20      	bgt.n	800a110 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800a0ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a0d8:	4413      	add	r3, r2
 800a0da:	3bd0      	subs	r3, #208	; 0xd0
 800a0dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	f7f6 fce0 	bl	8000aac <__aeabi_dcmpeq>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d103      	bne.n	800a0fa <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a0f8:	e010      	b.n	800a11c <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800a0fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a0fe:	3301      	adds	r3, #1
 800a100:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a104:	e00a      	b.n	800a11c <qr_DvOBrgQi+0x8fc>
 800a106:	bf00      	nop
 800a108:	7c900000 	.word	0x7c900000
 800a10c:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800a116:	2301      	movs	r3, #1
 800a118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800a11c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0c9      	beq.n	800a0b8 <qr_DvOBrgQi+0x898>
 800a124:	e005      	b.n	800a132 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800a132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a136:	2b00      	cmp	r3, #0
 800a138:	dd29      	ble.n	800a18e <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800a13a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a13e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a142:	9302      	str	r3, [sp, #8]
 800a144:	2308      	movs	r3, #8
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	230e      	movs	r3, #14
 800a150:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a154:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a158:	f002 ff06 	bl	800cf68 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800a15c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a160:	63bb      	str	r3, [r7, #56]	; 0x38
 800a162:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a166:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a16c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a170:	230e      	movs	r3, #14
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	2208      	movs	r2, #8
 800a17e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800a182:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a186:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a18a:	f002 fffb 	bl	800d184 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800a18e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a192:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800a196:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a19a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800a1aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a1ae:	2210      	movs	r2, #16
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	2003      	movs	r0, #3
 800a1b4:	f003 faf6 	bl	800d7a4 <xnrm2_nLdASVZH>
 800a1b8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	f04f 0300 	mov.w	r3, #0
 800a1c4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a1c8:	f7f6 fc70 	bl	8000aac <__aeabi_dcmpeq>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f040 8170 	bne.w	800a4b4 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800a1d4:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800a1d8:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800a1dc:	eeb0 0a47 	vmov.f32	s0, s14
 800a1e0:	eef0 0a67 	vmov.f32	s1, s15
 800a1e4:	f000 fdf8 	bl	800add8 <rt_hypotd_snf>
 800a1e8:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800a1ec:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	f04f 0300 	mov.w	r3, #0
 800a1f8:	f7f6 fc76 	bl	8000ae8 <__aeabi_dcmpge>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800a202:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a206:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a20e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a212:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a216:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a21a:	633b      	str	r3, [r7, #48]	; 0x30
 800a21c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a22e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a232:	f7f6 fc45 	bl	8000ac0 <__aeabi_dcmplt>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80ef 	beq.w	800a41c <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800a244:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a248:	3301      	adds	r3, #1
 800a24a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a24e:	230f      	movs	r3, #15
 800a250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a254:	e01f      	b.n	800a296 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a260:	4413      	add	r3, r2
 800a262:	3bd0      	subs	r3, #208	; 0xd0
 800a264:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a268:	f04f 0200 	mov.w	r2, #0
 800a26c:	4bb5      	ldr	r3, [pc, #724]	; (800a544 <qr_DvOBrgQi+0xd24>)
 800a26e:	f7f6 f9b5 	bl	80005dc <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4610      	mov	r0, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a284:	4413      	add	r3, r2
 800a286:	3bd0      	subs	r3, #208	; 0xd0
 800a288:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a290:	3301      	adds	r3, #1
 800a292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29a:	2b11      	cmp	r3, #17
 800a29c:	dddb      	ble.n	800a256 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800a29e:	f04f 0200 	mov.w	r2, #0
 800a2a2:	4ba8      	ldr	r3, [pc, #672]	; (800a544 <qr_DvOBrgQi+0xd24>)
 800a2a4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a2a8:	f7f6 f998 	bl	80005dc <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800a2b4:	f04f 0200 	mov.w	r2, #0
 800a2b8:	4ba2      	ldr	r3, [pc, #648]	; (800a544 <qr_DvOBrgQi+0xd24>)
 800a2ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a2be:	f7f6 f98d 	bl	80005dc <__aeabi_dmul>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a2ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a2e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a2e6:	f7f6 fbeb 	bl	8000ac0 <__aeabi_dcmplt>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <qr_DvOBrgQi+0xad8>
 800a2f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2f4:	2b13      	cmp	r3, #19
 800a2f6:	dda5      	ble.n	800a244 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800a2f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a2fc:	2210      	movs	r2, #16
 800a2fe:	4619      	mov	r1, r3
 800a300:	2003      	movs	r0, #3
 800a302:	f003 fa4f 	bl	800d7a4 <xnrm2_nLdASVZH>
 800a306:	eeb0 7a40 	vmov.f32	s14, s0
 800a30a:	eef0 7a60 	vmov.f32	s15, s1
 800a30e:	eeb0 1a47 	vmov.f32	s2, s14
 800a312:	eef0 1a67 	vmov.f32	s3, s15
 800a316:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800a31a:	f000 fd5d 	bl	800add8 <rt_hypotd_snf>
 800a31e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a32e:	f7f6 fbdb 	bl	8000ae8 <__aeabi_dcmpge>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800a338:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a33c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a344:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a348:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800a34c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a350:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a354:	f7f5 ff8a 	bl	800026c <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4610      	mov	r0, r2
 800a35e:	4619      	mov	r1, r3
 800a360:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a364:	f7f6 fa64 	bl	8000830 <__aeabi_ddiv>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800a370:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a374:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800a378:	f7f5 ff78 	bl	800026c <__aeabi_dsub>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	f04f 0000 	mov.w	r0, #0
 800a384:	4970      	ldr	r1, [pc, #448]	; (800a548 <qr_DvOBrgQi+0xd28>)
 800a386:	f7f6 fa53 	bl	8000830 <__aeabi_ddiv>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a392:	230f      	movs	r3, #15
 800a394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a398:	e01c      	b.n	800a3d4 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800a39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3bd0      	subs	r3, #208	; 0xd0
 800a3a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3ac:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a3b0:	f7f6 f914 	bl	80005dc <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a3bc:	00c9      	lsls	r1, r1, #3
 800a3be:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a3c2:	4401      	add	r1, r0
 800a3c4:	39d0      	subs	r1, #208	; 0xd0
 800a3c6:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d8:	2b11      	cmp	r3, #17
 800a3da:	ddde      	ble.n	800a39a <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a3e2:	e010      	b.n	800a406 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3ec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a3f0:	f7f6 f8f4 	bl	80005dc <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a3fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a400:	3301      	adds	r3, #1
 800a402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a406:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a40a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a40e:	429a      	cmp	r2, r3
 800a410:	dbe8      	blt.n	800a3e4 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800a412:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a416:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800a41a:	e04b      	b.n	800a4b4 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800a41c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800a420:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800a424:	f7f5 ff22 	bl	800026c <__aeabi_dsub>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4610      	mov	r0, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a434:	f7f6 f9fc 	bl	8000830 <__aeabi_ddiv>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800a440:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a444:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a448:	f7f5 ff10 	bl	800026c <__aeabi_dsub>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	f04f 0000 	mov.w	r0, #0
 800a454:	493c      	ldr	r1, [pc, #240]	; (800a548 <qr_DvOBrgQi+0xd28>)
 800a456:	f7f6 f9eb 	bl	8000830 <__aeabi_ddiv>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800a462:	230f      	movs	r3, #15
 800a464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a468:	e01c      	b.n	800a4a4 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800a46a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a474:	4413      	add	r3, r2
 800a476:	3bd0      	subs	r3, #208	; 0xd0
 800a478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a47c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a480:	f7f6 f8ac 	bl	80005dc <__aeabi_dmul>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a48c:	00c9      	lsls	r1, r1, #3
 800a48e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a492:	4401      	add	r1, r0
 800a494:	39d0      	subs	r1, #208	; 0xd0
 800a496:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800a49a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a49e:	3301      	adds	r3, #1
 800a4a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a4a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4a8:	2b11      	cmp	r3, #17
 800a4aa:	ddde      	ble.n	800a46a <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800a4ac:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800a4b0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800a4b4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800a4b8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800a4bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a4c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a4c2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a4cc:	e00f      	b.n	800a4ee <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800a4ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4d6:	18d1      	adds	r1, r2, r3
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	f04f 0300 	mov.w	r3, #0
 800a4e0:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a4e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a4ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	ddeb      	ble.n	800a4ce <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a502:	2300      	movs	r3, #0
 800a504:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a508:	e016      	b.n	800a538 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800a50a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a50e:	3306      	adds	r3, #6
 800a510:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a514:	3203      	adds	r2, #3
 800a516:	00d2      	lsls	r2, r2, #3
 800a518:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a51a:	4411      	add	r1, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a522:	4413      	add	r3, r2
 800a524:	3bd0      	subs	r3, #208	; 0xd0
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a52e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a532:	3301      	adds	r3, #1
 800a534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	dde4      	ble.n	800a50a <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800a540:	e015      	b.n	800a56e <qr_DvOBrgQi+0xd4e>
 800a542:	bf00      	nop
 800a544:	7c900000 	.word	0x7c900000
 800a548:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800a54c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a550:	3303      	adds	r3, #3
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a556:	18d1      	adds	r1, r2, r3
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800a564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a568:	3301      	adds	r3, #1
 800a56a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800a56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a572:	2b02      	cmp	r3, #2
 800a574:	ddea      	ble.n	800a54c <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a582:	2300      	movs	r3, #0
 800a584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a588:	e016      	b.n	800a5b8 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800a58a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a58e:	330c      	adds	r3, #12
 800a590:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a594:	3206      	adds	r2, #6
 800a596:	00d2      	lsls	r2, r2, #3
 800a598:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a59a:	4411      	add	r1, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3bd0      	subs	r3, #208	; 0xd0
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a5ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a5b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	dde4      	ble.n	800a58a <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800a5c0:	f04f 0200 	mov.w	r2, #0
 800a5c4:	f04f 0300 	mov.w	r3, #0
 800a5c8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a5cc:	230f      	movs	r3, #15
 800a5ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a5d2:	e024      	b.n	800a61e <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800a5d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5d8:	00db      	lsls	r3, r3, #3
 800a5da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a5de:	4413      	add	r3, r2
 800a5e0:	3bd0      	subs	r3, #208	; 0xd0
 800a5e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5ea:	623b      	str	r3, [r7, #32]
 800a5ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5fa:	f7f5 ffef 	bl	80005dc <__aeabi_dmul>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a606:	00c9      	lsls	r1, r1, #3
 800a608:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a60c:	4401      	add	r1, r0
 800a60e:	39d0      	subs	r1, #208	; 0xd0
 800a610:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800a614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a618:	3301      	adds	r3, #1
 800a61a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a61e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a622:	2b11      	cmp	r3, #17
 800a624:	ddd6      	ble.n	800a5d4 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800a626:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800a62a:	f04f 0000 	mov.w	r0, #0
 800a62e:	49cc      	ldr	r1, [pc, #816]	; (800a960 <qr_DvOBrgQi+0x1140>)
 800a630:	f7f5 fe1c 	bl	800026c <__aeabi_dsub>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a63c:	2300      	movs	r3, #0
 800a63e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a642:	e014      	b.n	800a66e <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800a644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a648:	f1c3 030d 	rsb	r3, r3, #13
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a652:	4413      	add	r3, r2
 800a654:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a668:	3301      	adds	r3, #1
 800a66a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a66e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a672:	2b01      	cmp	r3, #1
 800a674:	dde6      	ble.n	800a644 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	4bb9      	ldr	r3, [pc, #740]	; (800a960 <qr_DvOBrgQi+0x1140>)
 800a67c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a68c:	f7f6 fa0e 	bl	8000aac <__aeabi_dcmpeq>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d15f      	bne.n	800a756 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800a696:	2305      	movs	r3, #5
 800a698:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800a69c:	230d      	movs	r3, #13
 800a69e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a6a2:	e009      	b.n	800a6b8 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800a6a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800a6ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a6b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd12      	ble.n	800a6e6 <qr_DvOBrgQi+0xec6>
 800a6c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6c4:	3b02      	subs	r3, #2
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a6cc:	4413      	add	r3, r2
 800a6ce:	3bd0      	subs	r3, #208	; 0xd0
 800a6d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6d4:	f04f 0200 	mov.w	r2, #0
 800a6d8:	f04f 0300 	mov.w	r3, #0
 800a6dc:	f7f6 f9e6 	bl	8000aac <__aeabi_dcmpeq>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1de      	bne.n	800a6a4 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800a6ec:	230e      	movs	r3, #14
 800a6ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800a6f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6fc:	330d      	adds	r3, #13
 800a6fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a702:	429a      	cmp	r2, r3
 800a704:	dc1c      	bgt.n	800a740 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800a706:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a70a:	3b01      	subs	r3, #1
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a712:	4413      	add	r3, r2
 800a714:	3bd0      	subs	r3, #208	; 0xd0
 800a716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a71a:	f04f 0200 	mov.w	r2, #0
 800a71e:	f04f 0300 	mov.w	r3, #0
 800a722:	f7f6 f9c3 	bl	8000aac <__aeabi_dcmpeq>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d103      	bne.n	800a734 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a732:	e00b      	b.n	800a74c <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800a734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a738:	3301      	adds	r3, #1
 800a73a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a73e:	e005      	b.n	800a74c <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800a746:	2301      	movs	r3, #1
 800a748:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800a74c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0ce      	beq.n	800a6f2 <qr_DvOBrgQi+0xed2>
 800a754:	e005      	b.n	800a762 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800a762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd29      	ble.n	800a7be <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800a76a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a76e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	2308      	movs	r3, #8
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	230e      	movs	r3, #14
 800a780:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a784:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a788:	f002 fbee 	bl	800cf68 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800a78c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a796:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a7a0:	230e      	movs	r3, #14
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	ed97 0b06 	vldr	d0, [r7, #24]
 800a7b2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a7b6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a7ba:	f002 fce3 	bl	800d184 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800a7be:	2308      	movs	r3, #8
 800a7c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a7c4:	e024      	b.n	800a810 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800a7c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3bd0      	subs	r3, #208	; 0xd0
 800a7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a7e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7ec:	f7f5 fef6 	bl	80005dc <__aeabi_dmul>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a7f8:	00c9      	lsls	r1, r1, #3
 800a7fa:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a7fe:	4401      	add	r1, r0
 800a800:	39d0      	subs	r1, #208	; 0xd0
 800a802:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800a806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a80a:	3301      	adds	r3, #1
 800a80c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a814:	2b0b      	cmp	r3, #11
 800a816:	ddd6      	ble.n	800a7c6 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800a818:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800a81c:	f04f 0000 	mov.w	r0, #0
 800a820:	494f      	ldr	r1, [pc, #316]	; (800a960 <qr_DvOBrgQi+0x1140>)
 800a822:	f7f5 fd23 	bl	800026c <__aeabi_dsub>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	f04f 0300 	mov.w	r3, #0
 800a836:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	4b48      	ldr	r3, [pc, #288]	; (800a960 <qr_DvOBrgQi+0x1140>)
 800a840:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800a850:	f7f6 f92c 	bl	8000aac <__aeabi_dcmpeq>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	f040 8084 	bne.w	800a964 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800a85c:	2306      	movs	r3, #6
 800a85e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800a862:	2307      	movs	r3, #7
 800a864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a868:	e009      	b.n	800a87e <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800a86a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a86e:	3b01      	subs	r3, #1
 800a870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800a874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a878:	3b01      	subs	r3, #1
 800a87a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a87e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a882:	2b00      	cmp	r3, #0
 800a884:	dd12      	ble.n	800a8ac <qr_DvOBrgQi+0x108c>
 800a886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a88a:	3b02      	subs	r3, #2
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a892:	4413      	add	r3, r2
 800a894:	3bd0      	subs	r3, #208	; 0xd0
 800a896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	f04f 0300 	mov.w	r3, #0
 800a8a2:	f7f6 f903 	bl	8000aac <__aeabi_dcmpeq>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1de      	bne.n	800a86a <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800a8b8:	e049      	b.n	800a94e <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800a8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	4413      	add	r3, r2
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	3307      	adds	r3, #7
 800a8ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800a8ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a8d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800a8dc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a8e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	da1c      	bge.n	800a928 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800a8ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3bd0      	subs	r3, #208	; 0xd0
 800a8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	f7f6 f8cf 	bl	8000aac <__aeabi_dcmpeq>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d103      	bne.n	800a91c <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a91a:	e00d      	b.n	800a938 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800a91c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a920:	3301      	adds	r3, #1
 800a922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a926:	e007      	b.n	800a938 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800a928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a92c:	3b01      	subs	r3, #1
 800a92e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800a932:	2302      	movs	r3, #2
 800a934:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800a938:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0ca      	beq.n	800a8d6 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800a940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a944:	2b01      	cmp	r3, #1
 800a946:	d102      	bne.n	800a94e <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800a94e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10c      	bne.n	800a970 <qr_DvOBrgQi+0x1150>
 800a956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dcad      	bgt.n	800a8ba <qr_DvOBrgQi+0x109a>
 800a95e:	e007      	b.n	800a970 <qr_DvOBrgQi+0x1150>
 800a960:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800a970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a974:	2b00      	cmp	r3, #0
 800a976:	dd29      	ble.n	800a9cc <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800a978:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a97c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a980:	9302      	str	r3, [sp, #8]
 800a982:	2301      	movs	r3, #1
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	2307      	movs	r3, #7
 800a98e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a992:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a996:	f002 fae7 	bl	800cf68 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800a99a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a99e:	60bb      	str	r3, [r7, #8]
 800a9a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a9a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a9ae:	2307      	movs	r3, #7
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	ed97 0b02 	vldr	d0, [r7, #8]
 800a9c0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800a9c4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a9c8:	f002 fbdc 	bl	800d184 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a9d2:	e024      	b.n	800aa1e <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800a9d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800a9de:	4413      	add	r3, r2
 800a9e0:	3bd0      	subs	r3, #208	; 0xd0
 800a9e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a9f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fa:	f7f5 fdef 	bl	80005dc <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800aa06:	00c9      	lsls	r1, r1, #3
 800aa08:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800aa0c:	4401      	add	r1, r0
 800aa0e:	39d0      	subs	r1, #208	; 0xd0
 800aa10:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800aa14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa18:	3301      	adds	r3, #1
 800aa1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800aa1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa22:	2b05      	cmp	r3, #5
 800aa24:	ddd6      	ble.n	800a9d4 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800aa26:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800aa2a:	f04f 0000 	mov.w	r0, #0
 800aa2e:	4923      	ldr	r1, [pc, #140]	; (800aabc <qr_DvOBrgQi+0x129c>)
 800aa30:	f7f5 fc1c 	bl	800026c <__aeabi_dsub>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aa48:	e02d      	b.n	800aaa6 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa50:	e01b      	b.n	800aa8a <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800aa52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aa56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800aa60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa68:	18d1      	adds	r1, r2, r3
 800aa6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800aa74:	4413      	add	r3, r2
 800aa76:	3bd0      	subs	r3, #208	; 0xd0
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800aa80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa84:	3301      	adds	r3, #1
 800aa86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aa8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	dddf      	ble.n	800aa52 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800aa92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa96:	3306      	adds	r3, #6
 800aa98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800aa9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800aaa6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	ddcd      	ble.n	800aa4a <qr_DvOBrgQi+0x122a>
  }
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaba:	bf00      	nop
 800aabc:	3ff00000 	.word	0x3ff00000

0800aac0 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b092      	sub	sp, #72	; 0x48
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	ed87 0b06 	vstr	d0, [r7, #24]
 800aaca:	ed87 1b04 	vstr	d1, [r7, #16]
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	643b      	str	r3, [r7, #64]	; 0x40
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aade:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800aaf8:	f7f5 ffd8 	bl	8000aac <__aeabi_dcmpeq>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d012      	beq.n	800ab28 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	4b4e      	ldr	r3, [pc, #312]	; (800ac44 <rotate_LZ7ctbe0+0x184>)
 800ab0a:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab22:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800ab26:	e088      	b.n	800ac3a <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ab34:	f7f5 ffba 	bl	8000aac <__aeabi_dcmpeq>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d012      	beq.n	800ab64 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800ab3e:	68f9      	ldr	r1, [r7, #12]
 800ab40:	f04f 0200 	mov.w	r2, #0
 800ab44:	f04f 0300 	mov.w	r3, #0
 800ab48:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	f04f 0200 	mov.w	r2, #0
 800ab52:	4b3c      	ldr	r3, [pc, #240]	; (800ac44 <rotate_LZ7ctbe0+0x184>)
 800ab54:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab5e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ab62:	e06a      	b.n	800ac3a <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800ab64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ab6c:	f7f5 fb80 	bl	8000270 <__adddf3>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800ab78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ab80:	f7f5 fe56 	bl	8000830 <__aeabi_ddiv>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800ab8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab94:	f7f5 fe4c 	bl	8000830 <__aeabi_ddiv>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	643b      	str	r3, [r7, #64]	; 0x40
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abaa:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800abac:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800abb4:	ec45 4b11 	vmov	d1, r4, r5
 800abb8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800abbc:	f000 f90c 	bl	800add8 <rt_hypotd_snf>
 800abc0:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800abc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800abcc:	f7f5 fe30 	bl	8000830 <__aeabi_ddiv>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	68f9      	ldr	r1, [r7, #12]
 800abd6:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800abda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800abde:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800abe2:	f7f5 fe25 	bl	8000830 <__aeabi_ddiv>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800abee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800abf6:	f7f5 fcf1 	bl	80005dc <__aeabi_dmul>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4610      	mov	r0, r2
 800ac00:	4619      	mov	r1, r3
 800ac02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac06:	f7f5 fe13 	bl	8000830 <__aeabi_ddiv>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800ac14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ac1c:	f7f5 fcde 	bl	80005dc <__aeabi_dmul>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ac2c:	f7f5 fcd6 	bl	80005dc <__aeabi_dmul>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ac3a:	bf00      	nop
 800ac3c:	3748      	adds	r7, #72	; 0x48
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bdb0      	pop	{r4, r5, r7, pc}
 800ac42:	bf00      	nop
 800ac44:	3ff00000 	.word	0x3ff00000

0800ac48 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b20      	cmp	r3, #32
 800ac62:	d10b      	bne.n	800ac7c <rtGetInf+0x34>
    inf = rtGetInfF();
 800ac64:	f000 f820 	bl	800aca8 <rtGetInfF>
 800ac68:	ee10 3a10 	vmov	r3, s0
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f5 fc5d 	bl	800052c <__aeabi_f2d>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ac7a:	e007      	b.n	800ac8c <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800ac7c:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <rtGetInf+0x5c>)
 800ac7e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800ac84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac88:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800ac8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac90:	ec43 2b17 	vmov	d7, r2, r3
}
 800ac94:	eeb0 0a47 	vmov.f32	s0, s14
 800ac98:	eef0 0a67 	vmov.f32	s1, s15
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	7ff00000 	.word	0x7ff00000

0800aca8 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800acae:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800acb2:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	ee07 3a90 	vmov	s15, r3
}
 800acba:	eeb0 0a67 	vmov.f32	s0, s15
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800acce:	2340      	movs	r3, #64	; 0x40
 800acd0:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800acd2:	f04f 0200 	mov.w	r2, #0
 800acd6:	f04f 0300 	mov.w	r3, #0
 800acda:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d10b      	bne.n	800acfc <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800ace4:	f000 f820 	bl	800ad28 <rtGetMinusInfF>
 800ace8:	ee10 3a10 	vmov	r3, s0
 800acec:	4618      	mov	r0, r3
 800acee:	f7f5 fc1d 	bl	800052c <__aeabi_f2d>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800acfa:	e007      	b.n	800ad0c <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <rtGetMinusInf+0x5c>)
 800acfe:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800ad04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad08:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800ad0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad10:	ec43 2b17 	vmov	d7, r2, r3
}
 800ad14:	eeb0 0a47 	vmov.f32	s0, s14
 800ad18:	eef0 0a67 	vmov.f32	s1, s15
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	fff00000 	.word	0xfff00000

0800ad28 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800ad2e:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <rtGetMinusInfF+0x20>)
 800ad30:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	ee07 3a90 	vmov	s15, r3
}
 800ad38:	eeb0 0a67 	vmov.f32	s0, s15
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	ff800000 	.word	0xff800000

0800ad4c <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	d10b      	bne.n	800ad80 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800ad68:	f000 f820 	bl	800adac <rtGetNaNF>
 800ad6c:	ee10 3a10 	vmov	r3, s0
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7f5 fbdb 	bl	800052c <__aeabi_f2d>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ad7e:	e007      	b.n	800ad90 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800ad80:	4b09      	ldr	r3, [pc, #36]	; (800ada8 <rtGetNaN+0x5c>)
 800ad82:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ad84:	2300      	movs	r3, #0
 800ad86:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800ad88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800ad90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad94:	ec43 2b17 	vmov	d7, r2, r3
}
 800ad98:	eeb0 0a47 	vmov.f32	s0, s14
 800ad9c:	eef0 0a67 	vmov.f32	s1, s15
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	fff80000 	.word	0xfff80000

0800adac <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <rtGetNaNF+0x24>)
 800adba:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	ee07 3a90 	vmov	s15, r3
}
 800adc2:	eeb0 0a67 	vmov.f32	s0, s15
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	ffc00000 	.word	0xffc00000
 800add4:	00000000 	.word	0x00000000

0800add8 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	ed87 0b02 	vstr	d0, [r7, #8]
 800ade2:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adf0:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	61bb      	str	r3, [r7, #24]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adfc:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800adfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae06:	f7f5 fe5b 	bl	8000ac0 <__aeabi_dcmplt>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d02d      	beq.n	800ae6c <rt_hypotd_snf+0x94>
    a /= y;
 800ae10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae18:	f7f5 fd0a 	bl	8000830 <__aeabi_ddiv>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800ae24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae2c:	f7f5 fbd6 	bl	80005dc <__aeabi_dmul>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4610      	mov	r0, r2
 800ae36:	4619      	mov	r1, r3
 800ae38:	f04f 0200 	mov.w	r2, #0
 800ae3c:	4b38      	ldr	r3, [pc, #224]	; (800af20 <rt_hypotd_snf+0x148>)
 800ae3e:	f7f5 fa17 	bl	8000270 <__adddf3>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	ec43 2b17 	vmov	d7, r2, r3
 800ae4a:	eeb0 0a47 	vmov.f32	s0, s14
 800ae4e:	eef0 0a67 	vmov.f32	s1, s15
 800ae52:	f00c f901 	bl	8017058 <sqrt>
 800ae56:	ec53 2b10 	vmov	r2, r3, d0
 800ae5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae5e:	f7f5 fbbd 	bl	80005dc <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800ae6a:	e048      	b.n	800aefe <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800ae6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae74:	f7f5 fe42 	bl	8000afc <__aeabi_dcmpgt>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02d      	beq.n	800aeda <rt_hypotd_snf+0x102>
    y /= a;
 800ae7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae86:	f7f5 fcd3 	bl	8000830 <__aeabi_ddiv>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800ae92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae9a:	f7f5 fb9f 	bl	80005dc <__aeabi_dmul>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4610      	mov	r0, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	f04f 0200 	mov.w	r2, #0
 800aeaa:	4b1d      	ldr	r3, [pc, #116]	; (800af20 <rt_hypotd_snf+0x148>)
 800aeac:	f7f5 f9e0 	bl	8000270 <__adddf3>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	ec43 2b17 	vmov	d7, r2, r3
 800aeb8:	eeb0 0a47 	vmov.f32	s0, s14
 800aebc:	eef0 0a67 	vmov.f32	s1, s15
 800aec0:	f00c f8ca 	bl	8017058 <sqrt>
 800aec4:	ec53 2b10 	vmov	r2, r3, d0
 800aec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aecc:	f7f5 fb86 	bl	80005dc <__aeabi_dmul>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800aed8:	e011      	b.n	800aefe <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800aeda:	ed97 0b06 	vldr	d0, [r7, #24]
 800aede:	f000 f889 	bl	800aff4 <rtIsNaN>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800aee8:	a30b      	add	r3, pc, #44	; (adr r3, 800af18 <rt_hypotd_snf+0x140>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aef2:	f7f5 fb73 	bl	80005dc <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800aefe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af02:	ec43 2b17 	vmov	d7, r2, r3
}
 800af06:	eeb0 0a47 	vmov.f32	s0, s14
 800af0a:	eef0 0a67 	vmov.f32	s1, s15
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	f3af 8000 	nop.w
 800af18:	667f3bcd 	.word	0x667f3bcd
 800af1c:	3ff6a09e 	.word	0x3ff6a09e
 800af20:	3ff00000 	.word	0x3ff00000

0800af24 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800af2c:	f7ff ff0e 	bl	800ad4c <rtGetNaN>
 800af30:	eeb0 7a40 	vmov.f32	s14, s0
 800af34:	eef0 7a60 	vmov.f32	s15, s1
 800af38:	4b16      	ldr	r3, [pc, #88]	; (800af94 <rt_InitInfAndNaN+0x70>)
 800af3a:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800af3e:	f7ff ff35 	bl	800adac <rtGetNaNF>
 800af42:	eef0 7a40 	vmov.f32	s15, s0
 800af46:	4b14      	ldr	r3, [pc, #80]	; (800af98 <rt_InitInfAndNaN+0x74>)
 800af48:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800af4c:	f7ff fe7c 	bl	800ac48 <rtGetInf>
 800af50:	eeb0 7a40 	vmov.f32	s14, s0
 800af54:	eef0 7a60 	vmov.f32	s15, s1
 800af58:	4b10      	ldr	r3, [pc, #64]	; (800af9c <rt_InitInfAndNaN+0x78>)
 800af5a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800af5e:	f7ff fea3 	bl	800aca8 <rtGetInfF>
 800af62:	eef0 7a40 	vmov.f32	s15, s0
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <rt_InitInfAndNaN+0x7c>)
 800af68:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800af6c:	f7ff feac 	bl	800acc8 <rtGetMinusInf>
 800af70:	eeb0 7a40 	vmov.f32	s14, s0
 800af74:	eef0 7a60 	vmov.f32	s15, s1
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <rt_InitInfAndNaN+0x80>)
 800af7a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800af7e:	f7ff fed3 	bl	800ad28 <rtGetMinusInfF>
 800af82:	eef0 7a40 	vmov.f32	s15, s0
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <rt_InitInfAndNaN+0x84>)
 800af88:	edc3 7a00 	vstr	s15, [r3]
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	2001bc10 	.word	0x2001bc10
 800af98:	2001bc00 	.word	0x2001bc00
 800af9c:	2001bc08 	.word	0x2001bc08
 800afa0:	2001bc04 	.word	0x2001bc04
 800afa4:	2001bc18 	.word	0x2001bc18
 800afa8:	2001bc20 	.word	0x2001bc20

0800afac <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800afb6:	4b0d      	ldr	r3, [pc, #52]	; (800afec <rtIsInf+0x40>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afc0:	f7f5 fd74 	bl	8000aac <__aeabi_dcmpeq>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d109      	bne.n	800afde <rtIsInf+0x32>
 800afca:	4b09      	ldr	r3, [pc, #36]	; (800aff0 <rtIsInf+0x44>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd4:	f7f5 fd6a 	bl	8000aac <__aeabi_dcmpeq>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <rtIsInf+0x36>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <rtIsInf+0x38>
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	2001bc08 	.word	0x2001bc08
 800aff0:	2001bc18 	.word	0x2001bc18

0800aff4 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800b002:	2340      	movs	r3, #64	; 0x40
 800b004:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d10b      	bne.n	800b024 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800b00c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b010:	f7f5 fddc 	bl	8000bcc <__aeabi_d2f>
 800b014:	4603      	mov	r3, r0
 800b016:	ee00 3a10 	vmov	s0, r3
 800b01a:	f000 f821 	bl	800b060 <rtIsNaNF>
 800b01e:	4603      	mov	r3, r0
 800b020:	75fb      	strb	r3, [r7, #23]
 800b022:	e015      	b.n	800b050 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800b024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b028:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <rtIsNaN+0x68>)
 800b030:	4013      	ands	r3, r2
 800b032:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <rtIsNaN+0x68>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d109      	bne.n	800b04c <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800b042:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800b048:	2301      	movs	r3, #1
 800b04a:	e000      	b.n	800b04e <rtIsNaN+0x5a>
 800b04c:	2300      	movs	r3, #0
 800b04e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	7ff00000 	.word	0x7ff00000

0800b060 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800b074:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b078:	d106      	bne.n	800b088 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <rtIsNaNF+0x28>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <rtIsNaNF+0x2a>
 800b088:	2300      	movs	r3, #0
 800b08a:	b2db      	uxtb	r3, r3
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800b098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b09c:	ed2d 8b02 	vpush	{d8}
 800b0a0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800b0aa:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800b0ae:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800b0b2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b0b6:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800b0b8:	f04f 0200 	mov.w	r2, #0
 800b0bc:	f04f 0300 	mov.w	r3, #0
 800b0c0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800b0dc:	f04f 0200 	mov.w	r2, #0
 800b0e0:	f04f 0300 	mov.w	r3, #0
 800b0e4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800b0e8:	f04f 0200 	mov.w	r2, #0
 800b0ec:	f04f 0300 	mov.w	r3, #0
 800b0f0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800b0f4:	f04f 0200 	mov.w	r2, #0
 800b0f8:	f04f 0300 	mov.w	r3, #0
 800b0fc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800b100:	2300      	movs	r3, #0
 800b102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b106:	e02e      	b.n	800b166 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800b108:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b10c:	00da      	lsls	r2, r3, #3
 800b10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b112:	4413      	add	r3, r2
 800b114:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b118:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b122:	4413      	add	r3, r2
 800b124:	3b88      	subs	r3, #136	; 0x88
 800b126:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800b12a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b12e:	00da      	lsls	r2, r3, #3
 800b130:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b134:	1899      	adds	r1, r3, r2
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800b142:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b146:	00da      	lsls	r2, r3, #3
 800b148:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	1899      	adds	r1, r3, r2
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800b15c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b160:	3301      	adds	r3, #1
 800b162:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b166:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b16a:	2b08      	cmp	r3, #8
 800b16c:	ddcc      	ble.n	800b108 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800b174:	2300      	movs	r3, #0
 800b176:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800b17a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b17e:	2201      	movs	r2, #1
 800b180:	4619      	mov	r1, r3
 800b182:	2003      	movs	r0, #3
 800b184:	f002 fbbc 	bl	800d900 <xnrm2_xDOlDEtw>
 800b188:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b198:	f7f5 fcb0 	bl	8000afc <__aeabi_dcmpgt>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d07b      	beq.n	800b29a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800b1a8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	f7f5 fc84 	bl	8000ac0 <__aeabi_dcmplt>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800b1be:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800b1c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b1c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b1ca:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800b1ce:	e003      	b.n	800b1d8 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800b1d0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b1d4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800b1d8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b1dc:	4690      	mov	r8, r2
 800b1de:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 fc7b 	bl	8000ae8 <__aeabi_dcmpge>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d016      	beq.n	800b226 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800b1f8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b1fc:	f04f 0000 	mov.w	r0, #0
 800b200:	49c1      	ldr	r1, [pc, #772]	; (800b508 <svd_u3DvUgOe+0x470>)
 800b202:	f7f5 fb15 	bl	8000830 <__aeabi_ddiv>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	ec43 2b17 	vmov	d7, r2, r3
 800b20e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b212:	2201      	movs	r2, #1
 800b214:	4619      	mov	r1, r3
 800b216:	eeb0 0a47 	vmov.f32	s0, s14
 800b21a:	eef0 0a67 	vmov.f32	s1, s15
 800b21e:	2003      	movs	r0, #3
 800b220:	f002 fe36 	bl	800de90 <xscal_59GtRAwv>
 800b224:	e026      	b.n	800b274 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800b226:	2300      	movs	r3, #0
 800b228:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b22c:	e01e      	b.n	800b26c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800b22e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b238:	4413      	add	r3, r2
 800b23a:	3b88      	subs	r3, #136	; 0x88
 800b23c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b240:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b244:	f7f5 faf4 	bl	8000830 <__aeabi_ddiv>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4610      	mov	r0, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b25a:	4413      	add	r3, r2
 800b25c:	3b88      	subs	r3, #136	; 0x88
 800b25e:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800b262:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b266:	3301      	adds	r3, #1
 800b268:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b26c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b270:	2b02      	cmp	r3, #2
 800b272:	dddc      	ble.n	800b22e <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800b274:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	4ba2      	ldr	r3, [pc, #648]	; (800b508 <svd_u3DvUgOe+0x470>)
 800b27e:	f7f4 fff7 	bl	8000270 <__adddf3>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800b28a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800b28e:	4692      	mov	sl, r2
 800b290:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800b294:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800b298:	e005      	b.n	800b2a6 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b2ac:	e047      	b.n	800b33e <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800b2ae:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800b2bc:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d025      	beq.n	800b310 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800b2c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b2ce:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	2003      	movs	r0, #3
 800b2da:	f001 fdf8 	bl	800cece <xdotc_mznw4aLl>
 800b2de:	ec51 0b10 	vmov	r0, r1, d0
 800b2e2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800b2e6:	f7f5 faa3 	bl	8000830 <__aeabi_ddiv>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800b2f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b2f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b2fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b2fe:	3301      	adds	r3, #1
 800b300:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b304:	2101      	movs	r1, #1
 800b306:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800b30a:	2003      	movs	r0, #3
 800b30c:	f001 fd8b 	bl	800ce26 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800b310:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b31a:	4413      	add	r3, r2
 800b31c:	3b88      	subs	r3, #136	; 0x88
 800b31e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b322:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b32c:	4413      	add	r3, r2
 800b32e:	3bb8      	subs	r3, #184	; 0xb8
 800b330:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800b334:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b338:	3301      	adds	r3, #1
 800b33a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b33e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b342:	2b02      	cmp	r3, #2
 800b344:	ddb3      	ble.n	800b2ae <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800b346:	e015      	b.n	800b374 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800b348:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b34c:	00da      	lsls	r2, r3, #3
 800b34e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b352:	1899      	adds	r1, r3, r2
 800b354:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b35e:	4413      	add	r3, r2
 800b360:	3b88      	subs	r3, #136	; 0x88
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800b36a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b36e:	3301      	adds	r3, #1
 800b370:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800b374:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b378:	2b02      	cmp	r3, #2
 800b37a:	dde5      	ble.n	800b348 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800b37c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b380:	2202      	movs	r2, #2
 800b382:	4619      	mov	r1, r3
 800b384:	2002      	movs	r0, #2
 800b386:	f002 f95f 	bl	800d648 <xnrm2_Rlk0oxWw>
 800b38a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b39a:	f7f5 fb87 	bl	8000aac <__aeabi_dcmpeq>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d006      	beq.n	800b3b2 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800b3b0:	e10d      	b.n	800b5ce <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800b3b2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	f7f5 fb7f 	bl	8000ac0 <__aeabi_dcmplt>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00e      	beq.n	800b3e6 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800b3c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b3cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b3d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b3d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3dc:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800b3e0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800b3e4:	e003      	b.n	800b3ee <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800b3e6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b3ea:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800b3ee:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b3f2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800b3f6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b3fa:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b3fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b40e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b412:	f7f5 fb69 	bl	8000ae8 <__aeabi_dcmpge>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d016      	beq.n	800b44a <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800b41c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b420:	f04f 0000 	mov.w	r0, #0
 800b424:	4938      	ldr	r1, [pc, #224]	; (800b508 <svd_u3DvUgOe+0x470>)
 800b426:	f7f5 fa03 	bl	8000830 <__aeabi_ddiv>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	ec43 2b17 	vmov	d7, r2, r3
 800b432:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b436:	2202      	movs	r2, #2
 800b438:	4619      	mov	r1, r3
 800b43a:	eeb0 0a47 	vmov.f32	s0, s14
 800b43e:	eef0 0a67 	vmov.f32	s1, s15
 800b442:	2002      	movs	r0, #2
 800b444:	f002 fd58 	bl	800def8 <xscal_PLmmUlD2>
 800b448:	e026      	b.n	800b498 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800b44a:	2301      	movs	r3, #1
 800b44c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b450:	e01e      	b.n	800b490 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800b452:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b45c:	4413      	add	r3, r2
 800b45e:	3bb8      	subs	r3, #184	; 0xb8
 800b460:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b464:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b468:	f7f5 f9e2 	bl	8000830 <__aeabi_ddiv>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4610      	mov	r0, r2
 800b472:	4619      	mov	r1, r3
 800b474:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b478:	00db      	lsls	r3, r3, #3
 800b47a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b47e:	4413      	add	r3, r2
 800b480:	3bb8      	subs	r3, #184	; 0xb8
 800b482:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800b486:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b48a:	3301      	adds	r3, #1
 800b48c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b490:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b494:	2b02      	cmp	r3, #2
 800b496:	dddc      	ble.n	800b452 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800b498:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b49c:	f04f 0200 	mov.w	r2, #0
 800b4a0:	4b19      	ldr	r3, [pc, #100]	; (800b508 <svd_u3DvUgOe+0x470>)
 800b4a2:	f7f4 fee5 	bl	8000270 <__adddf3>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800b4ae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b4b2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800b4b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b4ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4be:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800b4c2:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b4cc:	e013      	b.n	800b4f6 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800b4ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b4da:	4413      	add	r3, r2
 800b4dc:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	f04f 0300 	mov.w	r3, #0
 800b4e8:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800b4ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b4f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	dde7      	ble.n	800b4ce <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800b4fe:	2301      	movs	r3, #1
 800b500:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b504:	e025      	b.n	800b552 <svd_u3DvUgOe+0x4ba>
 800b506:	bf00      	nop
 800b508:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800b50c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b516:	4413      	add	r3, r2
 800b518:	3bb8      	subs	r3, #184	; 0xb8
 800b51a:	ed93 7b00 	vldr	d7, [r3]
 800b51e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	1c98      	adds	r0, r3, #2
 800b52a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b52e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b532:	2302      	movs	r3, #2
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4613      	mov	r3, r2
 800b538:	4602      	mov	r2, r0
 800b53a:	eeb0 0a47 	vmov.f32	s0, s14
 800b53e:	eef0 0a67 	vmov.f32	s1, s15
 800b542:	2002      	movs	r0, #2
 800b544:	f001 fbc7 	bl	800ccd6 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800b548:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b54c:	3301      	adds	r3, #1
 800b54e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b552:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b556:	2b02      	cmp	r3, #2
 800b558:	ddd8      	ble.n	800b50c <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800b55a:	2301      	movs	r3, #1
 800b55c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b560:	e031      	b.n	800b5c6 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800b562:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b56c:	4413      	add	r3, r2
 800b56e:	3bb8      	subs	r3, #184	; 0xb8
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800b578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b57c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b580:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b584:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b588:	f7f5 f952 	bl	8000830 <__aeabi_ddiv>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	ec43 2b17 	vmov	d7, r2, r3
 800b594:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800b598:	4613      	mov	r3, r2
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	4413      	add	r3, r2
 800b59e:	3302      	adds	r3, #2
 800b5a0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b5a4:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	eeb0 0a47 	vmov.f32	s0, s14
 800b5b2:	eef0 0a67 	vmov.f32	s1, s15
 800b5b6:	2002      	movs	r0, #2
 800b5b8:	f001 fbe1 	bl	800cd7e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800b5bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b5c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	ddc9      	ble.n	800b562 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b5d4:	e016      	b.n	800b604 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800b5d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5da:	00da      	lsls	r2, r3, #3
 800b5dc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	1899      	adds	r1, r3, r2
 800b5e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3bb8      	subs	r3, #184	; 0xb8
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800b5fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5fe:	3301      	adds	r3, #1
 800b600:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b604:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b608:	2b02      	cmp	r3, #2
 800b60a:	dde4      	ble.n	800b5d6 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800b60c:	2300      	movs	r3, #0
 800b60e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800b612:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b616:	2205      	movs	r2, #5
 800b618:	4619      	mov	r1, r3
 800b61a:	2002      	movs	r0, #2
 800b61c:	f002 f970 	bl	800d900 <xnrm2_xDOlDEtw>
 800b620:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	f04f 0300 	mov.w	r3, #0
 800b62c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800b630:	f7f5 fa64 	bl	8000afc <__aeabi_dcmpgt>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 808a 	beq.w	800b750 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800b63c:	2301      	movs	r3, #1
 800b63e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800b642:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b646:	f04f 0200 	mov.w	r2, #0
 800b64a:	f04f 0300 	mov.w	r3, #0
 800b64e:	f7f5 fa37 	bl	8000ac0 <__aeabi_dcmplt>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00e      	beq.n	800b676 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800b658:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800b65c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b660:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b66c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800b670:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800b674:	e003      	b.n	800b67e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800b676:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800b67a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800b67e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b682:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800b686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b68a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b69a:	f7f5 fa25 	bl	8000ae8 <__aeabi_dcmpge>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d016      	beq.n	800b6d2 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800b6a4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b6a8:	f04f 0000 	mov.w	r0, #0
 800b6ac:	49d6      	ldr	r1, [pc, #856]	; (800ba08 <svd_u3DvUgOe+0x970>)
 800b6ae:	f7f5 f8bf 	bl	8000830 <__aeabi_ddiv>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	ec43 2b17 	vmov	d7, r2, r3
 800b6ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b6be:	2205      	movs	r2, #5
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	eeb0 0a47 	vmov.f32	s0, s14
 800b6c6:	eef0 0a67 	vmov.f32	s1, s15
 800b6ca:	2002      	movs	r0, #2
 800b6cc:	f002 fbe0 	bl	800de90 <xscal_59GtRAwv>
 800b6d0:	e026      	b.n	800b720 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800b6d2:	2304      	movs	r3, #4
 800b6d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b6d8:	e01e      	b.n	800b718 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800b6da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3b88      	subs	r3, #136	; 0x88
 800b6e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ec:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b6f0:	f7f5 f89e 	bl	8000830 <__aeabi_ddiv>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b706:	4413      	add	r3, r2
 800b708:	3b88      	subs	r3, #136	; 0x88
 800b70a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800b70e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b712:	3301      	adds	r3, #1
 800b714:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b718:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b71c:	2b05      	cmp	r3, #5
 800b71e:	dddc      	ble.n	800b6da <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800b720:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800b724:	f04f 0200 	mov.w	r2, #0
 800b728:	4bb7      	ldr	r3, [pc, #732]	; (800ba08 <svd_u3DvUgOe+0x970>)
 800b72a:	f7f4 fda1 	bl	8000270 <__adddf3>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800b736:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800b73a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800b73e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b746:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800b74a:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800b74e:	e005      	b.n	800b75c <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	f04f 0300 	mov.w	r3, #0
 800b758:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800b75c:	2302      	movs	r3, #2
 800b75e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b762:	e048      	b.n	800b7f6 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800b764:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b768:	4613      	mov	r3, r2
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	4413      	add	r3, r2
 800b76e:	3301      	adds	r3, #1
 800b770:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800b774:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d025      	beq.n	800b7c8 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800b77c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b780:	3301      	adds	r3, #1
 800b782:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b786:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4613      	mov	r3, r2
 800b78e:	2205      	movs	r2, #5
 800b790:	2002      	movs	r0, #2
 800b792:	f001 fb9c 	bl	800cece <xdotc_mznw4aLl>
 800b796:	ec51 0b10 	vmov	r0, r1, d0
 800b79a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800b79e:	f7f5 f847 	bl	8000830 <__aeabi_ddiv>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800b7aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b7ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b7b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800b7bc:	2105      	movs	r1, #5
 800b7be:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800b7c2:	2002      	movs	r0, #2
 800b7c4:	f001 fb2f 	bl	800ce26 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800b7c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b7d2:	4413      	add	r3, r2
 800b7d4:	3b88      	subs	r3, #136	; 0x88
 800b7d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3bb8      	subs	r3, #184	; 0xb8
 800b7e8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800b7ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b7f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	ddb2      	ble.n	800b764 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800b7fe:	2301      	movs	r3, #1
 800b800:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b804:	e017      	b.n	800b836 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800b806:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b80a:	1cd8      	adds	r0, r3, #3
 800b80c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b810:	3303      	adds	r3, #3
 800b812:	00da      	lsls	r2, r3, #3
 800b814:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b818:	1899      	adds	r1, r3, r2
 800b81a:	00c3      	lsls	r3, r0, #3
 800b81c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b820:	4413      	add	r3, r2
 800b822:	3b88      	subs	r3, #136	; 0x88
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800b82c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b830:	3301      	adds	r3, #1
 800b832:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800b836:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	dde3      	ble.n	800b806 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800b83e:	2301      	movs	r3, #1
 800b840:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800b844:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800b848:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800b84c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b850:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b854:	f04f 0200 	mov.w	r2, #0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800b860:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b864:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	f04f 0300 	mov.w	r3, #0
 800b870:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800b874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b878:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b87c:	f04f 0200 	mov.w	r2, #0
 800b880:	4b61      	ldr	r3, [pc, #388]	; (800ba08 <svd_u3DvUgOe+0x970>)
 800b882:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800b886:	2301      	movs	r3, #1
 800b888:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800b88c:	e100      	b.n	800ba90 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800b88e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800b898:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3ba0      	subs	r3, #160	; 0xa0
 800b8a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8aa:	f04f 0200 	mov.w	r2, #0
 800b8ae:	f04f 0300 	mov.w	r3, #0
 800b8b2:	f7f5 f8fb 	bl	8000aac <__aeabi_dcmpeq>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f040 80a7 	bne.w	800ba0c <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800b8be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b8c8:	e043      	b.n	800b952 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800b8ca:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	441a      	add	r2, r3
 800b8d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8d8:	4413      	add	r3, r2
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800b8e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8e4:	f1c3 0403 	rsb	r4, r3, #3
 800b8e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b8ec:	f1c3 0003 	rsb	r0, r3, #3
 800b8f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b900:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800b904:	f001 fae3 	bl	800cece <xdotc_mznw4aLl>
 800b908:	ec51 0b10 	vmov	r0, r1, d0
 800b90c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b910:	00da      	lsls	r2, r3, #3
 800b912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b916:	4413      	add	r3, r2
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f7f4 ff88 	bl	8000830 <__aeabi_ddiv>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800b928:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b930:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b934:	1c59      	adds	r1, r3, #1
 800b936:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b93a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b93e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800b942:	4620      	mov	r0, r4
 800b944:	f001 fa6f 	bl	800ce26 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800b948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b94c:	3301      	adds	r3, #1
 800b94e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800b952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b956:	2b02      	cmp	r3, #2
 800b958:	ddb7      	ble.n	800b8ca <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800b95a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b95e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b962:	e026      	b.n	800b9b2 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800b964:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	441a      	add	r2, r3
 800b96e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b972:	4413      	add	r3, r2
 800b974:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800b978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b97c:	00da      	lsls	r2, r3, #3
 800b97e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b982:	4413      	add	r3, r2
 800b984:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b992:	4413      	add	r3, r2
 800b994:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800b998:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800b99c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b9a0:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800b9a4:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800b9a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800b9b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	ddd4      	ble.n	800b964 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800b9ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b9be:	00da      	lsls	r2, r3, #3
 800b9c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9c4:	189c      	adds	r4, r3, r2
 800b9c6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <svd_u3DvUgOe+0x970>)
 800b9d0:	f7f4 fc4e 	bl	8000270 <__adddf3>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800b9dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dd50      	ble.n	800ba86 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800b9e4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9f6:	1899      	adds	r1, r3, r2
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	e9c1 2300 	strd	r2, r3, [r1]
 800ba04:	e03f      	b.n	800ba86 <svd_u3DvUgOe+0x9ee>
 800ba06:	bf00      	nop
 800ba08:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800ba0c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ba10:	4613      	mov	r3, r2
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4413      	add	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba1e:	1899      	adds	r1, r3, r2
 800ba20:	f04f 0200 	mov.w	r2, #0
 800ba24:	f04f 0300 	mov.w	r3, #0
 800ba28:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800ba2c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ba30:	4613      	mov	r3, r2
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	f103 0208 	add.w	r2, r3, #8
 800ba3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba40:	1899      	adds	r1, r3, r2
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800ba4e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	f103 0210 	add.w	r2, r3, #16
 800ba5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba62:	1899      	adds	r1, r3, r2
 800ba64:	f04f 0200 	mov.w	r2, #0
 800ba68:	f04f 0300 	mov.w	r3, #0
 800ba6c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800ba70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ba74:	00da      	lsls	r2, r3, #3
 800ba76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba7a:	1899      	adds	r1, r3, r2
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <svd_u3DvUgOe+0xa30>)
 800ba82:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800ba86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ba90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f6bf aefa 	bge.w	800b88e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800baa0:	e096      	b.n	800bbd0 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800baa2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dc4c      	bgt.n	800bb44 <svd_u3DvUgOe+0xaac>
 800baaa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800baae:	f04f 0200 	mov.w	r2, #0
 800bab2:	f04f 0300 	mov.w	r3, #0
 800bab6:	f7f4 fff9 	bl	8000aac <__aeabi_dcmpeq>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d141      	bne.n	800bb44 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800bac0:	2302      	movs	r3, #2
 800bac2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bac6:	e039      	b.n	800bb3c <svd_u3DvUgOe+0xaa4>
 800bac8:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800bacc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	4613      	mov	r3, r2
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	4413      	add	r3, r2
 800bad8:	3302      	adds	r3, #2
 800bada:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800bade:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800bae2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800bae6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	6813      	ldr	r3, [r2, #0]
 800baee:	2202      	movs	r2, #2
 800baf0:	6809      	ldr	r1, [r1, #0]
 800baf2:	2002      	movs	r0, #2
 800baf4:	f001 f9eb 	bl	800cece <xdotc_mznw4aLl>
 800baf8:	ec51 0b10 	vmov	r0, r1, d0
 800bafc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3308      	adds	r3, #8
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	f7f4 fe92 	bl	8000830 <__aeabi_ddiv>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800bb14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bb18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bb1c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800bb20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	2102      	movs	r1, #2
 800bb28:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800bb2c:	2002      	movs	r0, #2
 800bb2e:	f001 f97a 	bl	800ce26 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800bb32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb36:	3301      	adds	r3, #1
 800bb38:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bb3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	ddc3      	ble.n	800bacc <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800bb44:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bb48:	4613      	mov	r3, r2
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	461a      	mov	r2, r3
 800bb52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	1899      	adds	r1, r3, r2
 800bb5a:	f04f 0200 	mov.w	r2, #0
 800bb5e:	f04f 0300 	mov.w	r3, #0
 800bb62:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800bb66:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	f103 0208 	add.w	r2, r3, #8
 800bb76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	1899      	adds	r1, r3, r2
 800bb7e:	f04f 0200 	mov.w	r2, #0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800bb8a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800bb8e:	4613      	mov	r3, r2
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	4413      	add	r3, r2
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	f103 0210 	add.w	r2, r3, #16
 800bb9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	1899      	adds	r1, r3, r2
 800bba2:	f04f 0200 	mov.w	r2, #0
 800bba6:	f04f 0300 	mov.w	r3, #0
 800bbaa:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800bbae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1899      	adds	r1, r3, r2
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	4bbd      	ldr	r3, [pc, #756]	; (800beb8 <svd_u3DvUgOe+0xe20>)
 800bbc2:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800bbc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800bbd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f6bf af64 	bge.w	800baa2 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800bbda:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bbde:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800bbe2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800bbe6:	f04f 0200 	mov.w	r2, #0
 800bbea:	f04f 0300 	mov.w	r3, #0
 800bbee:	f7f4 ff5d 	bl	8000aac <__aeabi_dcmpeq>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d12a      	bne.n	800bc4e <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800bbf8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800bbfc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800bc00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc08:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800bc0c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800bc10:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800bc14:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bc18:	f7f4 fe0a 	bl	8000830 <__aeabi_ddiv>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800bc24:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bc28:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800bc2c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bc30:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bc34:	f7f4 fdfc 	bl	8000830 <__aeabi_ddiv>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800bc40:	2101      	movs	r1, #1
 800bc42:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bc46:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bc4a:	f002 f989 	bl	800df60 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800bc4e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	f7f4 ff27 	bl	8000aac <__aeabi_dcmpeq>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d12b      	bne.n	800bcbc <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800bc64:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bc68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800bc6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc74:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800bc78:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800bc7c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bc80:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bc84:	f7f4 fdd4 	bl	8000830 <__aeabi_ddiv>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800bc90:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bc94:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800bc98:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bc9c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bca0:	f7f4 fc9c 	bl	80005dc <__aeabi_dmul>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800bcac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bcb0:	2104      	movs	r1, #4
 800bcb2:	6818      	ldr	r0, [r3, #0]
 800bcb4:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bcb8:	f002 f952 	bl	800df60 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800bcbc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bcc0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800bcc4:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800bcc8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800bccc:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	f7f4 fee8 	bl	8000aac <__aeabi_dcmpeq>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d12a      	bne.n	800bd38 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800bce2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800bce6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bcea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcf2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800bcf6:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800bcfa:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800bcfe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd02:	f7f4 fd95 	bl	8000830 <__aeabi_ddiv>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800bd0e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd12:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800bd16:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800bd1a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bd1e:	f7f4 fd87 	bl	8000830 <__aeabi_ddiv>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800bd2a:	2104      	movs	r1, #4
 800bd2c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bd30:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bd34:	f002 f914 	bl	800df60 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800bd38:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800bd3c:	f04f 0200 	mov.w	r2, #0
 800bd40:	f04f 0300 	mov.w	r3, #0
 800bd44:	f7f4 feb2 	bl	8000aac <__aeabi_dcmpeq>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d12b      	bne.n	800bda6 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800bd4e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bd52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd5e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800bd62:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800bd66:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bd6a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bd6e:	f7f4 fd5f 	bl	8000830 <__aeabi_ddiv>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800bd7a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bd7e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800bd82:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800bd86:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bd8a:	f7f4 fc27 	bl	80005dc <__aeabi_dmul>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800bd96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bd9a:	2107      	movs	r1, #7
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bda2:	f002 f8dd 	bl	800df60 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800bda6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bdaa:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800bdae:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f7f4 fe77 	bl	8000aac <__aeabi_dcmpeq>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d11e      	bne.n	800be02 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800bdc4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800bdc8:	67ba      	str	r2, [r7, #120]	; 0x78
 800bdca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdd0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800bdd4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800bdd8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800bddc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bde0:	f7f4 fd26 	bl	8000830 <__aeabi_ddiv>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800bdec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bdf0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800bdf4:	2107      	movs	r1, #7
 800bdf6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bdfa:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800bdfe:	f002 f8af 	bl	800df60 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800be14:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800be18:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800be1c:	eeb0 1a46 	vmov.f32	s2, s12
 800be20:	eef0 1a66 	vmov.f32	s3, s13
 800be24:	eeb0 0a47 	vmov.f32	s0, s14
 800be28:	eef0 0a67 	vmov.f32	s1, s15
 800be2c:	f00a ffd4 	bl	8016dd8 <fmax>
 800be30:	eeb0 8a40 	vmov.f32	s16, s0
 800be34:	eef0 8a60 	vmov.f32	s17, s1
 800be38:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800be3c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800be40:	eeb0 1a46 	vmov.f32	s2, s12
 800be44:	eef0 1a66 	vmov.f32	s3, s13
 800be48:	eeb0 0a47 	vmov.f32	s0, s14
 800be4c:	eef0 0a67 	vmov.f32	s1, s15
 800be50:	f00a ffc2 	bl	8016dd8 <fmax>
 800be54:	eeb0 7a40 	vmov.f32	s14, s0
 800be58:	eef0 7a60 	vmov.f32	s15, s1
 800be5c:	eeb0 1a47 	vmov.f32	s2, s14
 800be60:	eef0 1a67 	vmov.f32	s3, s15
 800be64:	eeb0 0a48 	vmov.f32	s0, s16
 800be68:	eef0 0a68 	vmov.f32	s1, s17
 800be6c:	f00a ffb4 	bl	8016dd8 <fmax>
 800be70:	eeb0 8a40 	vmov.f32	s16, s0
 800be74:	eef0 8a60 	vmov.f32	s17, s1
 800be78:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800be7c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800beb0 <svd_u3DvUgOe+0xe18>
 800be80:	eeb0 0a47 	vmov.f32	s0, s14
 800be84:	eef0 0a67 	vmov.f32	s1, s15
 800be88:	f00a ffa6 	bl	8016dd8 <fmax>
 800be8c:	eeb0 7a40 	vmov.f32	s14, s0
 800be90:	eef0 7a60 	vmov.f32	s15, s1
 800be94:	eeb0 1a47 	vmov.f32	s2, s14
 800be98:	eef0 1a67 	vmov.f32	s3, s15
 800be9c:	eeb0 0a48 	vmov.f32	s0, s16
 800bea0:	eef0 0a68 	vmov.f32	s1, s17
 800bea4:	f00a ff98 	bl	8016dd8 <fmax>
 800bea8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800beac:	f000 be8a 	b.w	800cbc4 <svd_u3DvUgOe+0x1b2c>
	...
 800beb8:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800bebc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800bec0:	3301      	adds	r3, #1
 800bec2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800becc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bed0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800bed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800bedc:	2301      	movs	r3, #1
 800bede:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bee2:	e092      	b.n	800c00a <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800bee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bee8:	3b01      	subs	r3, #1
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bef0:	4413      	add	r3, r2
 800bef2:	3bb8      	subs	r3, #184	; 0xb8
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	673a      	str	r2, [r7, #112]	; 0x70
 800befa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800befe:	677b      	str	r3, [r7, #116]	; 0x74
 800bf00:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800bf04:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800bf08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf14:	4413      	add	r3, r2
 800bf16:	3ba0      	subs	r3, #160	; 0xa0
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf2e:	4413      	add	r3, r2
 800bf30:	3ba0      	subs	r3, #160	; 0xa0
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	663a      	str	r2, [r7, #96]	; 0x60
 800bf38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf3c:	667b      	str	r3, [r7, #100]	; 0x64
 800bf3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bf42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf46:	f7f4 f993 	bl	8000270 <__adddf3>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4610      	mov	r0, r2
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	4bb2      	ldr	r3, [pc, #712]	; (800c220 <svd_u3DvUgOe+0x1188>)
 800bf58:	f7f4 fb40 	bl	80005dc <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4610      	mov	r0, r2
 800bf62:	4619      	mov	r1, r3
 800bf64:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bf68:	f7f4 fdbe 	bl	8000ae8 <__aeabi_dcmpge>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d012      	beq.n	800bf98 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800bf72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bf76:	3b01      	subs	r3, #1
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bf7e:	4413      	add	r3, r2
 800bf80:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800bf84:	f04f 0200 	mov.w	r2, #0
 800bf88:	f04f 0300 	mov.w	r3, #0
 800bf8c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bf96:	e038      	b.n	800c00a <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800bf98:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bfa4:	f7f4 fd96 	bl	8000ad4 <__aeabi_dcmple>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d115      	bne.n	800bfda <svd_u3DvUgOe+0xf42>
 800bfae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800bfb2:	2b14      	cmp	r3, #20
 800bfb4:	dd24      	ble.n	800c000 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800bfb6:	f04f 0200 	mov.w	r2, #0
 800bfba:	4b99      	ldr	r3, [pc, #612]	; (800c220 <svd_u3DvUgOe+0x1188>)
 800bfbc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800bfc0:	f7f4 fb0c 	bl	80005dc <__aeabi_dmul>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800bfcc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bfd0:	f7f4 fd8a 	bl	8000ae8 <__aeabi_dcmpge>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d012      	beq.n	800c000 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800bfda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800bfec:	f04f 0200 	mov.w	r2, #0
 800bff0:	f04f 0300 	mov.w	r3, #0
 800bff4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800bff8:	2301      	movs	r3, #1
 800bffa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bffe:	e004      	b.n	800c00a <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800c000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c004:	3b01      	subs	r3, #1
 800c006:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800c00a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f43f af59 	beq.w	800bec6 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800c014:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c01e:	4293      	cmp	r3, r2
 800c020:	d103      	bne.n	800c02a <svd_u3DvUgOe+0xf92>
      kase = 4;
 800c022:	2304      	movs	r3, #4
 800c024:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c028:	e0c7      	b.n	800c1ba <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800c02a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c02e:	3302      	adds	r3, #2
 800c030:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800c034:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c038:	3302      	adds	r3, #2
 800c03a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800c03e:	2300      	movs	r3, #0
 800c040:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800c044:	e092      	b.n	800c16c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800c046:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c04a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800c04e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800c052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c056:	429a      	cmp	r2, r3
 800c058:	d103      	bne.n	800c062 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800c05a:	2301      	movs	r3, #1
 800c05c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800c060:	e084      	b.n	800c16c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800c06e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c078:	4293      	cmp	r3, r2
 800c07a:	dc11      	bgt.n	800c0a0 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800c07c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c080:	3b01      	subs	r3, #1
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c088:	4413      	add	r3, r2
 800c08a:	3bb8      	subs	r3, #184	; 0xb8
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	65ba      	str	r2, [r7, #88]	; 0x58
 800c092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c096:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c098:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800c09c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800c0a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	dd17      	ble.n	800c0de <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800c0ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c0b2:	3b02      	subs	r3, #2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3bb8      	subs	r3, #184	; 0xb8
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	653a      	str	r2, [r7, #80]	; 0x50
 800c0c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c0ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c0d2:	f7f4 f8cd 	bl	8000270 <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800c0de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c0ea:	4413      	add	r3, r2
 800c0ec:	3ba0      	subs	r3, #160	; 0xa0
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c0f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fa:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800c0fe:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800c102:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	4b45      	ldr	r3, [pc, #276]	; (800c220 <svd_u3DvUgOe+0x1188>)
 800c10c:	f7f4 fa66 	bl	80005dc <__aeabi_dmul>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4610      	mov	r0, r2
 800c116:	4619      	mov	r1, r3
 800c118:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c11c:	f7f4 fce4 	bl	8000ae8 <__aeabi_dcmpge>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <svd_u3DvUgOe+0x10a4>
 800c126:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c132:	f7f4 fccf 	bl	8000ad4 <__aeabi_dcmple>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d012      	beq.n	800c162 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800c13c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c140:	3b01      	subs	r3, #1
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c148:	4413      	add	r3, r2
 800c14a:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	f04f 0300 	mov.w	r3, #0
 800c156:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800c15a:	2301      	movs	r3, #1
 800c15c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800c160:	e004      	b.n	800c16c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800c162:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c166:	3b01      	subs	r3, #1
 800c168:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800c16c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800c170:	2b00      	cmp	r3, #0
 800c172:	d106      	bne.n	800c182 <svd_u3DvUgOe+0x10ea>
 800c174:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800c178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c17c:	429a      	cmp	r2, r3
 800c17e:	f6bf af62 	bge.w	800c046 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800c182:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d103      	bne.n	800c196 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800c18e:	2303      	movs	r3, #3
 800c190:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c194:	e011      	b.n	800c1ba <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800c196:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c19a:	1c9a      	adds	r2, r3, #2
 800c19c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d103      	bne.n	800c1ac <svd_u3DvUgOe+0x1114>
        kase = 1;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800c1aa:	e006      	b.n	800c1ba <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800c1b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c1b6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800c1ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	f000 8113 	beq.w	800c3ea <svd_u3DvUgOe+0x1352>
 800c1c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	f300 8443 	bgt.w	800ca54 <svd_u3DvUgOe+0x19bc>
 800c1ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d005      	beq.n	800c1e2 <svd_u3DvUgOe+0x114a>
 800c1d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d07b      	beq.n	800c2d6 <svd_u3DvUgOe+0x123e>
 800c1de:	f000 bc39 	b.w	800ca54 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800c1e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c1ec:	4413      	add	r3, r2
 800c1ee:	3bb8      	subs	r3, #184	; 0xb8
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800c1f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c202:	4413      	add	r3, r2
 800c204:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c208:	f04f 0200 	mov.w	r2, #0
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800c214:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c218:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c21c:	e053      	b.n	800c2c6 <svd_u3DvUgOe+0x122e>
 800c21e:	bf00      	nop
 800c220:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800c224:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c228:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	18d0      	adds	r0, r2, r3
 800c230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c234:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800c238:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800c23c:	f001 fd2a 	bl	800dc94 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800c240:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c244:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c248:	429a      	cmp	r2, r3
 800c24a:	dd19      	ble.n	800c280 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800c24c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c250:	643a      	str	r2, [r7, #64]	; 0x40
 800c252:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c256:	647b      	str	r3, [r7, #68]	; 0x44
 800c258:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c25c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c260:	f7f4 f9bc 	bl	80005dc <__aeabi_dmul>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800c26c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c270:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c274:	f7f4 f9b2 	bl	80005dc <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800c280:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c284:	4613      	mov	r3, r2
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	1c59      	adds	r1, r3, #1
 800c28c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	4613      	mov	r3, r2
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	4413      	add	r3, r2
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800c29e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800c2a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c2a6:	eeb0 1a46 	vmov.f32	s2, s12
 800c2aa:	eef0 1a66 	vmov.f32	s3, s13
 800c2ae:	eeb0 0a47 	vmov.f32	s0, s14
 800c2b2:	eef0 0a67 	vmov.f32	s1, s15
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	f001 fbd0 	bl	800da5c <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800c2bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c2c6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c2ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	daa8      	bge.n	800c224 <svd_u3DvUgOe+0x118c>
      }
      break;
 800c2d2:	f000 bc77 	b.w	800cbc4 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800c2d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3bb8      	subs	r3, #184	; 0xb8
 800c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800c2ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	f04f 0300 	mov.w	r3, #0
 800c308:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800c30c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c310:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c314:	e061      	b.n	800c3da <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800c316:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c31a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	18d0      	adds	r0, r2, r3
 800c322:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c326:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800c32a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800c32e:	f001 fcb1 	bl	800dc94 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800c332:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c336:	63ba      	str	r2, [r7, #56]	; 0x38
 800c338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c33e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c348:	4413      	add	r3, r2
 800c34a:	3bb8      	subs	r3, #184	; 0xb8
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c354:	f7f4 f942 	bl	80005dc <__aeabi_dmul>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800c360:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c36a:	4413      	add	r3, r2
 800c36c:	3bb8      	subs	r3, #184	; 0xb8
 800c36e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c372:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c376:	f7f4 f931 	bl	80005dc <__aeabi_dmul>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	4610      	mov	r0, r2
 800c380:	4619      	mov	r1, r3
 800c382:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c38c:	4413      	add	r3, r2
 800c38e:	3bb8      	subs	r3, #184	; 0xb8
 800c390:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800c394:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c398:	4613      	mov	r3, r2
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	4413      	add	r3, r2
 800c39e:	1c59      	adds	r1, r3, #1
 800c3a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c3a4:	1e5a      	subs	r2, r3, #1
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800c3b2:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800c3b6:	eeb0 1a46 	vmov.f32	s2, s12
 800c3ba:	eef0 1a66 	vmov.f32	s3, s13
 800c3be:	eeb0 0a47 	vmov.f32	s0, s14
 800c3c2:	eef0 0a67 	vmov.f32	s1, s15
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800c3cc:	f001 fb46 	bl	800da5c <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800c3d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c3da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	dd96      	ble.n	800c316 <svd_u3DvUgOe+0x127e>
      }
      break;
 800c3e8:	e3ec      	b.n	800cbc4 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800c3ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c3f6:	4413      	add	r3, r2
 800c3f8:	3ba0      	subs	r3, #160	; 0xa0
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c402:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c406:	633a      	str	r2, [r7, #48]	; 0x30
 800c408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c40c:	637b      	str	r3, [r7, #52]	; 0x34
 800c40e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c418:	4413      	add	r3, r2
 800c41a:	3ba0      	subs	r3, #160	; 0xa0
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	62ba      	str	r2, [r7, #40]	; 0x28
 800c422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c426:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c428:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800c42c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800c430:	f00a fcd2 	bl	8016dd8 <fmax>
 800c434:	eeb0 7a40 	vmov.f32	s14, s0
 800c438:	eef0 7a60 	vmov.f32	s15, s1
 800c43c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c446:	4413      	add	r3, r2
 800c448:	3bb8      	subs	r3, #184	; 0xb8
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	623a      	str	r2, [r7, #32]
 800c450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c454:	627b      	str	r3, [r7, #36]	; 0x24
 800c456:	ed97 1b08 	vldr	d1, [r7, #32]
 800c45a:	eeb0 0a47 	vmov.f32	s0, s14
 800c45e:	eef0 0a67 	vmov.f32	s1, s15
 800c462:	f00a fcb9 	bl	8016dd8 <fmax>
 800c466:	eeb0 7a40 	vmov.f32	s14, s0
 800c46a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800c46e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c478:	4413      	add	r3, r2
 800c47a:	3ba0      	subs	r3, #160	; 0xa0
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c480:	61ba      	str	r2, [r7, #24]
 800c482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	ed97 1b06 	vldr	d1, [r7, #24]
 800c48c:	eeb0 0a47 	vmov.f32	s0, s14
 800c490:	eef0 0a67 	vmov.f32	s1, s15
 800c494:	f00a fca0 	bl	8016dd8 <fmax>
 800c498:	eeb0 7a40 	vmov.f32	s14, s0
 800c49c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800c4a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c4aa:	4413      	add	r3, r2
 800c4ac:	3bb8      	subs	r3, #184	; 0xb8
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800c4b2:	613a      	str	r2, [r7, #16]
 800c4b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4b8:	617b      	str	r3, [r7, #20]
 800c4ba:	ed97 1b04 	vldr	d1, [r7, #16]
 800c4be:	eeb0 0a47 	vmov.f32	s0, s14
 800c4c2:	eef0 0a67 	vmov.f32	s1, s15
 800c4c6:	f00a fc87 	bl	8016dd8 <fmax>
 800c4ca:	eeb0 7a40 	vmov.f32	s14, s0
 800c4ce:	eef0 7a60 	vmov.f32	s15, s1
 800c4d2:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800c4d6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c4da:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c4de:	f7f4 f9a7 	bl	8000830 <__aeabi_ddiv>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800c4ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c4f4:	4413      	add	r3, r2
 800c4f6:	3ba0      	subs	r3, #160	; 0xa0
 800c4f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4fc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c500:	f7f4 f996 	bl	8000830 <__aeabi_ddiv>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800c50c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800c510:	00db      	lsls	r3, r3, #3
 800c512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c516:	4413      	add	r3, r2
 800c518:	3bb8      	subs	r3, #184	; 0xb8
 800c51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c51e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c522:	f7f4 f985 	bl	8000830 <__aeabi_ddiv>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800c52e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c538:	4413      	add	r3, r2
 800c53a:	3ba0      	subs	r3, #160	; 0xa0
 800c53c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c540:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c544:	f7f4 f974 	bl	8000830 <__aeabi_ddiv>
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800c550:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c554:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c558:	f7f3 fe8a 	bl	8000270 <__adddf3>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4614      	mov	r4, r2
 800c562:	461d      	mov	r5, r3
 800c564:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c568:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c56c:	f7f3 fe7e 	bl	800026c <__aeabi_dsub>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f4 f830 	bl	80005dc <__aeabi_dmul>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4614      	mov	r4, r2
 800c582:	461d      	mov	r5, r3
 800c584:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c588:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c58c:	f7f4 f826 	bl	80005dc <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f3 fe6a 	bl	8000270 <__adddf3>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	f04f 0200 	mov.w	r2, #0
 800c5a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5ac:	f7f4 f940 	bl	8000830 <__aeabi_ddiv>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800c5b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c5bc:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c5c0:	f7f4 f80c 	bl	80005dc <__aeabi_dmul>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800c5cc:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c5d0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c5d4:	f7f4 f802 	bl	80005dc <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800c5e0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c5e4:	f04f 0200 	mov.w	r2, #0
 800c5e8:	f04f 0300 	mov.w	r3, #0
 800c5ec:	f7f4 fa5e 	bl	8000aac <__aeabi_dcmpeq>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00a      	beq.n	800c60c <svd_u3DvUgOe+0x1574>
 800c5f6:	f04f 0200 	mov.w	r2, #0
 800c5fa:	f04f 0300 	mov.w	r3, #0
 800c5fe:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c602:	f7f4 fa53 	bl	8000aac <__aeabi_dcmpeq>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d13f      	bne.n	800c68c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800c60c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c610:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c614:	f7f3 ffe2 	bl	80005dc <__aeabi_dmul>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4610      	mov	r0, r2
 800c61e:	4619      	mov	r1, r3
 800c620:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c624:	f7f3 fe24 	bl	8000270 <__adddf3>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	ec43 2b17 	vmov	d7, r2, r3
 800c630:	eeb0 0a47 	vmov.f32	s0, s14
 800c634:	eef0 0a67 	vmov.f32	s1, s15
 800c638:	f00a fd0e 	bl	8017058 <sqrt>
 800c63c:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800c640:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	f04f 0300 	mov.w	r3, #0
 800c64c:	f7f4 fa38 	bl	8000ac0 <__aeabi_dcmplt>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d009      	beq.n	800c66a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800c656:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c65a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800c65e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800c662:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c666:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800c66a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c66e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800c672:	f7f3 fdfd 	bl	8000270 <__adddf3>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800c67e:	f7f4 f8d7 	bl	8000830 <__aeabi_ddiv>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800c68a:	e005      	b.n	800c698 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800c68c:	f04f 0200 	mov.w	r2, #0
 800c690:	f04f 0300 	mov.w	r3, #0
 800c694:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800c698:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c69c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c6a0:	f7f3 fde6 	bl	8000270 <__adddf3>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	461d      	mov	r5, r3
 800c6ac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c6b0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c6b4:	f7f3 fdda 	bl	800026c <__aeabi_dsub>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f7f3 ff8c 	bl	80005dc <__aeabi_dmul>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800c6d0:	f7f3 fdce 	bl	8000270 <__adddf3>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800c6dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c6e6:	4413      	add	r3, r2
 800c6e8:	3bb8      	subs	r3, #184	; 0xb8
 800c6ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6ee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c6f2:	f7f4 f89d 	bl	8000830 <__aeabi_ddiv>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c702:	f7f3 ff6b 	bl	80005dc <__aeabi_dmul>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800c70e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c712:	3301      	adds	r3, #1
 800c714:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c718:	e183      	b.n	800ca22 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800c71a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c71e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800c722:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800c726:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800c72a:	f001 fab3 	bl	800dc94 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800c72e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c738:	4293      	cmp	r3, r2
 800c73a:	dd03      	ble.n	800c744 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800c73c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c740:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800c744:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c748:	3b01      	subs	r3, #1
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c750:	4413      	add	r3, r2
 800c752:	3bb8      	subs	r3, #184	; 0xb8
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800c75c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c760:	3b01      	subs	r3, #1
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c768:	4413      	add	r3, r2
 800c76a:	3ba0      	subs	r3, #160	; 0xa0
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800c774:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c778:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c77c:	f7f3 ff2e 	bl	80005dc <__aeabi_dmul>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4690      	mov	r8, r2
 800c786:	4699      	mov	r9, r3
 800c788:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800c78c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c790:	f7f3 ff24 	bl	80005dc <__aeabi_dmul>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4610      	mov	r0, r2
 800c79a:	4619      	mov	r1, r3
 800c79c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c7a0:	1e5c      	subs	r4, r3, #1
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f3 fd5f 	bl	800026c <__aeabi_dsub>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	00e3      	lsls	r3, r4, #3
 800c7b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c7bc:	4413      	add	r3, r2
 800c7be:	3bb8      	subs	r3, #184	; 0xb8
 800c7c0:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800c7c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c7ce:	4413      	add	r3, r2
 800c7d0:	3ba0      	subs	r3, #160	; 0xa0
 800c7d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c7da:	f7f3 feff 	bl	80005dc <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800c7e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c7f0:	4413      	add	r3, r2
 800c7f2:	3ba0      	subs	r3, #160	; 0xa0
 800c7f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c7fc:	f7f3 feee 	bl	80005dc <__aeabi_dmul>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4610      	mov	r0, r2
 800c806:	4619      	mov	r1, r3
 800c808:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c812:	4413      	add	r3, r2
 800c814:	3ba0      	subs	r3, #160	; 0xa0
 800c816:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800c81a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c81e:	1e5a      	subs	r2, r3, #1
 800c820:	4613      	mov	r3, r2
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	4413      	add	r3, r2
 800c826:	1c59      	adds	r1, r3, #1
 800c828:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c82c:	4613      	mov	r3, r2
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	4413      	add	r3, r2
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800c838:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800c83c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c840:	eeb0 1a46 	vmov.f32	s2, s12
 800c844:	eef0 1a66 	vmov.f32	s3, s13
 800c848:	eeb0 0a47 	vmov.f32	s0, s14
 800c84c:	eef0 0a67 	vmov.f32	s1, s15
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	f001 f903 	bl	800da5c <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800c856:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800c85a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800c85e:	f7f3 febd 	bl	80005dc <__aeabi_dmul>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4690      	mov	r8, r2
 800c868:	4699      	mov	r9, r3
 800c86a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800c86e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c872:	f7f3 feb3 	bl	80005dc <__aeabi_dmul>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4610      	mov	r0, r2
 800c87c:	4619      	mov	r1, r3
 800c87e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c882:	1e5c      	subs	r4, r3, #1
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f3 fcf0 	bl	8000270 <__adddf3>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4610      	mov	r0, r2
 800c896:	4619      	mov	r1, r3
 800c898:	00e3      	lsls	r3, r4, #3
 800c89a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c89e:	4413      	add	r3, r2
 800c8a0:	3ba0      	subs	r3, #160	; 0xa0
 800c8a2:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800c8a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	18d0      	adds	r0, r2, r3
 800c8b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c8b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800c8bc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800c8c0:	f001 f9e8 	bl	800dc94 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800c8c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c8d0:	4413      	add	r3, r2
 800c8d2:	3bb8      	subs	r3, #184	; 0xb8
 800c8d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c8dc:	f7f3 fe7e 	bl	80005dc <__aeabi_dmul>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	461d      	mov	r5, r3
 800c8e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c8f2:	4413      	add	r3, r2
 800c8f4:	3ba0      	subs	r3, #160	; 0xa0
 800c8f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c8fe:	f7f3 fe6d 	bl	80005dc <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4620      	mov	r0, r4
 800c908:	4629      	mov	r1, r5
 800c90a:	f7f3 fcb1 	bl	8000270 <__adddf3>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800c916:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c91a:	3b01      	subs	r3, #1
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c922:	4413      	add	r3, r2
 800c924:	3bb8      	subs	r3, #184	; 0xb8
 800c926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c92a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c92e:	60ba      	str	r2, [r7, #8]
 800c930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c93a:	f7f3 fe4f 	bl	80005dc <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4614      	mov	r4, r2
 800c944:	461d      	mov	r5, r3
 800c946:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c950:	4413      	add	r3, r2
 800c952:	3ba0      	subs	r3, #160	; 0xa0
 800c954:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c958:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c95c:	f7f3 fe3e 	bl	80005dc <__aeabi_dmul>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4620      	mov	r0, r4
 800c966:	4629      	mov	r1, r5
 800c968:	f7f3 fc82 	bl	8000270 <__adddf3>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	4610      	mov	r0, r2
 800c972:	4619      	mov	r1, r3
 800c974:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c978:	00db      	lsls	r3, r3, #3
 800c97a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c97e:	4413      	add	r3, r2
 800c980:	3ba0      	subs	r3, #160	; 0xa0
 800c982:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800c986:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c990:	4413      	add	r3, r2
 800c992:	3bb8      	subs	r3, #184	; 0xb8
 800c994:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c998:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c99c:	f7f3 fe1e 	bl	80005dc <__aeabi_dmul>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800c9a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c9b2:	4413      	add	r3, r2
 800c9b4:	3bb8      	subs	r3, #184	; 0xb8
 800c9b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c9be:	f7f3 fe0d 	bl	80005dc <__aeabi_dmul>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c9d4:	4413      	add	r3, r2
 800c9d6:	3bb8      	subs	r3, #184	; 0xb8
 800c9d8:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800c9dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9e0:	1e5a      	subs	r2, r3, #1
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	4413      	add	r3, r2
 800c9e8:	1c59      	adds	r1, r3, #1
 800c9ea:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800c9fa:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800c9fe:	eeb0 1a46 	vmov.f32	s2, s12
 800ca02:	eef0 1a66 	vmov.f32	s3, s13
 800ca06:	eeb0 0a47 	vmov.f32	s0, s14
 800ca0a:	eef0 0a67 	vmov.f32	s1, s15
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ca14:	f001 f822 	bl	800da5c <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800ca18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ca22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	f77f ae74 	ble.w	800c71a <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800ca32:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ca36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca40:	4413      	add	r3, r2
 800ca42:	3bb8      	subs	r3, #184	; 0xb8
 800ca44:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800ca48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800ca52:	e0b7      	b.n	800cbc4 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800ca54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca5e:	4413      	add	r3, r2
 800ca60:	3ba0      	subs	r3, #160	; 0xa0
 800ca62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca66:	f04f 0200 	mov.w	r2, #0
 800ca6a:	f04f 0300 	mov.w	r3, #0
 800ca6e:	f7f4 f827 	bl	8000ac0 <__aeabi_dcmplt>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d025      	beq.n	800cac4 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800ca78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca82:	4413      	add	r3, r2
 800ca84:	3ba0      	subs	r3, #160	; 0xa0
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	603a      	str	r2, [r7, #0]
 800ca8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca90:	607b      	str	r3, [r7, #4]
 800ca92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca9c:	4413      	add	r3, r2
 800ca9e:	3ba0      	subs	r3, #160	; 0xa0
 800caa0:	ed97 7b00 	vldr	d7, [r7]
 800caa4:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800caa8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800caac:	4613      	mov	r3, r2
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	4413      	add	r3, r2
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cab8:	4611      	mov	r1, r2
 800caba:	6818      	ldr	r0, [r3, #0]
 800cabc:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800cc18 <svd_u3DvUgOe+0x1b80>
 800cac0:	f001 fa4e 	bl	800df60 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800cac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cac8:	3301      	adds	r3, #1
 800caca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800cace:	e055      	b.n	800cb7c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800cad0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cada:	4413      	add	r3, r2
 800cadc:	3ba0      	subs	r3, #160	; 0xa0
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800cae6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800caf0:	4413      	add	r3, r2
 800caf2:	3ba0      	subs	r3, #160	; 0xa0
 800caf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb02:	4413      	add	r3, r2
 800cb04:	3ba0      	subs	r3, #160	; 0xa0
 800cb06:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800cb0a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800cb0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb18:	4413      	add	r3, r2
 800cb1a:	3ba0      	subs	r3, #160	; 0xa0
 800cb1c:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800cb20:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cb24:	4613      	mov	r3, r2
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	4413      	add	r3, r2
 800cb2a:	1c59      	adds	r1, r3, #1
 800cb2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6800      	ldr	r0, [r0, #0]
 800cb42:	f001 fa3c 	bl	800dfbe <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800cb46:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	1c59      	adds	r1, r3, #1
 800cb52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	3301      	adds	r3, #1
 800cb60:	461a      	mov	r2, r3
 800cb62:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800cb66:	f001 fa2a 	bl	800dfbe <xswap_JoAqPjUv>
        d = qq;
 800cb6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb6e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800cb72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb76:	3301      	adds	r3, #1
 800cb78:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800cb7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	dc16      	bgt.n	800cbb2 <svd_u3DvUgOe+0x1b1a>
 800cb84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb8e:	4413      	add	r3, r2
 800cb90:	3ba0      	subs	r3, #160	; 0xa0
 800cb92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cba0:	4413      	add	r3, r2
 800cba2:	3ba0      	subs	r3, #160	; 0xa0
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 ff8a 	bl	8000ac0 <__aeabi_dcmplt>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d18e      	bne.n	800cad0 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800cbb8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800cbc2:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800cbc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbcc:	db04      	blt.n	800cbd8 <svd_u3DvUgOe+0x1b40>
 800cbce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cbd2:	2b4a      	cmp	r3, #74	; 0x4a
 800cbd4:	f77f a972 	ble.w	800bebc <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800cbd8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cbdc:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800cbe0:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe8:	f103 0108 	add.w	r1, r3, #8
 800cbec:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800cbf0:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800cbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbf8:	f103 0110 	add.w	r1, r3, #16
 800cbfc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cc00:	e9c1 2300 	strd	r2, r3, [r1]
}
 800cc04:	bf00      	nop
 800cc06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	ecbd 8b02 	vpop	{d8}
 800cc10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc14:	f3af 8000 	nop.w
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	bff00000 	.word	0xbff00000

0800cc20 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	ed87 0b02 	vstr	d0, [r7, #8]
 800cc2a:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	f04f 0300 	mov.w	r3, #0
 800cc3a:	f7f3 ff37 	bl	8000aac <__aeabi_dcmpeq>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc4e:	f7f3 fdef 	bl	8000830 <__aeabi_ddiv>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	f04f 0300 	mov.w	r3, #0
 800cc6c:	f7f3 ff1e 	bl	8000aac <__aeabi_dcmpeq>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10e      	bne.n	800cc94 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f103 0408 	add.w	r4, r3, #8
 800cc84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc88:	f7f3 fdd2 	bl	8000830 <__aeabi_ddiv>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3310      	adds	r3, #16
 800cc98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc9c:	f04f 0200 	mov.w	r2, #0
 800cca0:	f04f 0300 	mov.w	r3, #0
 800cca4:	f7f3 ff02 	bl	8000aac <__aeabi_dcmpeq>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d000      	beq.n	800ccb0 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800ccae:	e00e      	b.n	800ccce <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	3310      	adds	r3, #16
 800ccb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f103 0410 	add.w	r4, r3, #16
 800ccbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ccc2:	f7f3 fdb5 	bl	8000830 <__aeabi_ddiv>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ccce:	bf00      	nop
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd90      	pop	{r4, r7, pc}

0800ccd6 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800ccd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd8:	b08b      	sub	sp, #44	; 0x2c
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6178      	str	r0, [r7, #20]
 800ccde:	ed87 0b02 	vstr	d0, [r7, #8]
 800cce2:	6139      	str	r1, [r7, #16]
 800cce4:	607a      	str	r2, [r7, #4]
 800cce6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dd43      	ble.n	800cd76 <xaxpy_OQ28XA21+0xa0>
 800ccee:	f04f 0200 	mov.w	r2, #0
 800ccf2:	f04f 0300 	mov.w	r3, #0
 800ccf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ccfa:	f7f3 fed7 	bl	8000aac <__aeabi_dcmpeq>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d000      	beq.n	800cd06 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800cd04:	e037      	b.n	800cd76 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800cd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cd12:	2300      	movs	r3, #0
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24
 800cd16:	e02a      	b.n	800cd6e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	00db      	lsls	r3, r3, #3
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	4413      	add	r3, r2
 800cd20:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd34:	f7f3 fc52 	bl	80005dc <__aeabi_dmul>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	4619      	mov	r1, r3
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	18d6      	adds	r6, r2, r3
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f7f3 fa8e 	bl	8000270 <__adddf3>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	623b      	str	r3, [r7, #32]
      iy++;
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	3301      	adds	r3, #1
 800cd66:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	dbd0      	blt.n	800cd18 <xaxpy_OQ28XA21+0x42>
}
 800cd76:	bf00      	nop
 800cd78:	372c      	adds	r7, #44	; 0x2c
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd7e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800cd7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd80:	b08b      	sub	sp, #44	; 0x2c
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6178      	str	r0, [r7, #20]
 800cd86:	ed87 0b02 	vstr	d0, [r7, #8]
 800cd8a:	6139      	str	r1, [r7, #16]
 800cd8c:	607a      	str	r2, [r7, #4]
 800cd8e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	dd43      	ble.n	800ce1e <xaxpy_Wxch84Fl+0xa0>
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cda2:	f7f3 fe83 	bl	8000aac <__aeabi_dcmpeq>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d000      	beq.n	800cdae <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800cdac:	e037      	b.n	800ce1e <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800cdb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800cdba:	2300      	movs	r3, #0
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdbe:	e02a      	b.n	800ce16 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cddc:	f7f3 fbfe 	bl	80005dc <__aeabi_dmul>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4610      	mov	r0, r2
 800cde6:	4619      	mov	r1, r3
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	18d6      	adds	r6, r2, r3
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	f7f3 fa3a 	bl	8000270 <__adddf3>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	3301      	adds	r3, #1
 800ce08:	623b      	str	r3, [r7, #32]
      iy++;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	3301      	adds	r3, #1
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
 800ce16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	dbd0      	blt.n	800cdc0 <xaxpy_Wxch84Fl+0x42>
}
 800ce1e:	bf00      	nop
 800ce20:	372c      	adds	r7, #44	; 0x2c
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce26 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800ce26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce28:	b08b      	sub	sp, #44	; 0x2c
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6178      	str	r0, [r7, #20]
 800ce2e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ce32:	6139      	str	r1, [r7, #16]
 800ce34:	607a      	str	r2, [r7, #4]
 800ce36:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dd43      	ble.n	800cec6 <xaxpy_guu0hJif+0xa0>
 800ce3e:	f04f 0200 	mov.w	r2, #0
 800ce42:	f04f 0300 	mov.w	r3, #0
 800ce46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce4a:	f7f3 fe2f 	bl	8000aac <__aeabi_dcmpeq>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d000      	beq.n	800ce56 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800ce54:	e037      	b.n	800cec6 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ce62:	2300      	movs	r3, #0
 800ce64:	627b      	str	r3, [r7, #36]	; 0x24
 800ce66:	e02a      	b.n	800cebe <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	4413      	add	r3, r2
 800ce70:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce84:	f7f3 fbaa 	bl	80005dc <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4619      	mov	r1, r3
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	18d6      	adds	r6, r2, r3
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	4629      	mov	r1, r5
 800cea0:	f7f3 f9e6 	bl	8000270 <__adddf3>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	623b      	str	r3, [r7, #32]
      iy++;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	3301      	adds	r3, #1
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
 800cebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	dbd0      	blt.n	800ce68 <xaxpy_guu0hJif+0x42>
}
 800cec6:	bf00      	nop
 800cec8:	372c      	adds	r7, #44	; 0x2c
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cece <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b08a      	sub	sp, #40	; 0x28
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	60b9      	str	r1, [r7, #8]
 800ced8:	607a      	str	r2, [r7, #4]
 800ceda:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800cedc:	f04f 0200 	mov.w	r2, #0
 800cee0:	f04f 0300 	mov.w	r3, #0
 800cee4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	dd31      	ble.n	800cf52 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800cef6:	2300      	movs	r3, #0
 800cef8:	61fb      	str	r3, [r7, #28]
 800cefa:	e026      	b.n	800cf4a <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cf02:	3b01      	subs	r3, #1
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	4413      	add	r3, r2
 800cf0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cf14:	3b01      	subs	r3, #1
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf20:	f7f3 fb5c 	bl	80005dc <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cf2c:	f7f3 f9a0 	bl	8000270 <__adddf3>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	61bb      	str	r3, [r7, #24]
      iy++;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	3301      	adds	r3, #1
 800cf42:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	3301      	adds	r3, #1
 800cf48:	61fb      	str	r3, [r7, #28]
 800cf4a:	69fa      	ldr	r2, [r7, #28]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	dbd4      	blt.n	800cefc <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800cf52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf56:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf5a:	eeb0 0a47 	vmov.f32	s0, s14
 800cf5e:	eef0 0a67 	vmov.f32	s1, s15
 800cf62:	3728      	adds	r7, #40	; 0x28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800cf68:	b590      	push	{r4, r7, lr}
 800cf6a:	b08f      	sub	sp, #60	; 0x3c
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d079      	beq.n	800d070 <xgemv_NQlWbt2i+0x108>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d076      	beq.n	800d070 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800cf82:	2300      	movs	r3, #0
 800cf84:	637b      	str	r3, [r7, #52]	; 0x34
 800cf86:	e00c      	b.n	800cfa2 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf8e:	18d1      	adds	r1, r2, r3
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800cfa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	dbee      	blt.n	800cf88 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	1e5a      	subs	r2, r3, #1
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	4413      	add	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	461a      	mov	r2, r3
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfc6:	e04f      	b.n	800d068 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800cfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfca:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800cfcc:	f04f 0200 	mov.w	r2, #0
 800cfd0:	f04f 0300 	mov.w	r3, #0
 800cfd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800cfd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	4413      	add	r3, r2
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfe6:	e023      	b.n	800d030 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cfee:	3b01      	subs	r3, #1
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	4413      	add	r3, r2
 800cff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d000:	3b01      	subs	r3, #1
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d006:	4413      	add	r3, r2
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	f7f3 fae6 	bl	80005dc <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d018:	f7f3 f92a 	bl	8000270 <__adddf3>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	3301      	adds	r3, #1
 800d028:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800d02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02c:	3301      	adds	r3, #1
 800d02e:	633b      	str	r3, [r7, #48]	; 0x30
 800d030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	429a      	cmp	r2, r3
 800d036:	ddd7      	ble.n	800cfe8 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800d038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d03e:	4413      	add	r3, r2
 800d040:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d04a:	18d4      	adds	r4, r2, r3
 800d04c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d050:	f7f3 f90e 	bl	8000270 <__adddf3>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	3301      	adds	r3, #1
 800d060:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	3306      	adds	r3, #6
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	ddab      	ble.n	800cfc8 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800d070:	bf00      	nop
 800d072:	373c      	adds	r7, #60	; 0x3c
 800d074:	46bd      	mov	sp, r7
 800d076:	bd90      	pop	{r4, r7, pc}

0800d078 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800d078:	b590      	push	{r4, r7, lr}
 800d07a:	b08f      	sub	sp, #60	; 0x3c
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d077      	beq.n	800d17c <xgemv_fRiR1I1O+0x104>
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d074      	beq.n	800d17c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d092:	2300      	movs	r3, #0
 800d094:	637b      	str	r3, [r7, #52]	; 0x34
 800d096:	e00c      	b.n	800d0b2 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800d098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d09e:	18d1      	adds	r1, r2, r3
 800d0a0:	f04f 0200 	mov.w	r2, #0
 800d0a4:	f04f 0300 	mov.w	r3, #0
 800d0a8:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800d0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	dbee      	blt.n	800d098 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0d2:	e04f      	b.n	800d174 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800d0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d6:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800d0d8:	f04f 0200 	mov.w	r2, #0
 800d0dc:	f04f 0300 	mov.w	r3, #0
 800d0e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800d0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d0f2:	e023      	b.n	800d13c <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d10c:	3b01      	subs	r3, #1
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d112:	4413      	add	r3, r2
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	f7f3 fa60 	bl	80005dc <__aeabi_dmul>
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d124:	f7f3 f8a4 	bl	8000270 <__adddf3>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	3301      	adds	r3, #1
 800d134:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	3301      	adds	r3, #1
 800d13a:	633b      	str	r3, [r7, #48]	; 0x30
 800d13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	429a      	cmp	r2, r3
 800d142:	ddd7      	ble.n	800d0f4 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d14a:	4413      	add	r3, r2
 800d14c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d156:	18d4      	adds	r4, r2, r3
 800d158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d15c:	f7f3 f888 	bl	8000270 <__adddf3>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800d168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16a:	3301      	adds	r3, #1
 800d16c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	3303      	adds	r3, #3
 800d172:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	429a      	cmp	r2, r3
 800d17a:	ddab      	ble.n	800d0d4 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800d17c:	bf00      	nop
 800d17e:	373c      	adds	r7, #60	; 0x3c
 800d180:	46bd      	mov	sp, r7
 800d182:	bd90      	pop	{r4, r7, pc}

0800d184 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800d184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d186:	b091      	sub	sp, #68	; 0x44
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6178      	str	r0, [r7, #20]
 800d18c:	6139      	str	r1, [r7, #16]
 800d18e:	ed87 0b02 	vstr	d0, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800d196:	f04f 0200 	mov.w	r2, #0
 800d19a:	f04f 0300 	mov.w	r3, #0
 800d19e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1a2:	f7f3 fc83 	bl	8000aac <__aeabi_dcmpeq>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d000      	beq.n	800d1ae <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800d1ac:	e069      	b.n	800d282 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800d1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1bc:	e05d      	b.n	800d27a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1ca:	f04f 0200 	mov.w	r2, #0
 800d1ce:	f04f 0300 	mov.w	r3, #0
 800d1d2:	f7f3 fc6b 	bl	8000aac <__aeabi_dcmpeq>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d145      	bne.n	800d268 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1ec:	f7f3 f9f6 	bl	80005dc <__aeabi_dmul>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	4413      	add	r3, r2
 800d206:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800d208:	e02a      	b.n	800d260 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d210:	4413      	add	r3, r2
 800d212:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d21c:	3b01      	subs	r3, #1
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d222:	4413      	add	r3, r2
 800d224:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d228:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d22c:	f7f3 f9d6 	bl	80005dc <__aeabi_dmul>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4610      	mov	r0, r2
 800d236:	4619      	mov	r1, r3
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d23e:	18d6      	adds	r6, r2, r3
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f7f3 f812 	bl	8000270 <__adddf3>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	3301      	adds	r3, #1
 800d258:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	3301      	adds	r3, #1
 800d25e:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800d260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	429a      	cmp	r2, r3
 800d266:	dbd0      	blt.n	800d20a <xgerc_R09LiDgJ+0x86>
      jy++;
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	3301      	adds	r3, #1
 800d26c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	3306      	adds	r3, #6
 800d272:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	3301      	adds	r3, #1
 800d278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d27a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	429a      	cmp	r2, r3
 800d280:	db9d      	blt.n	800d1be <xgerc_R09LiDgJ+0x3a>
}
 800d282:	bf00      	nop
 800d284:	3744      	adds	r7, #68	; 0x44
 800d286:	46bd      	mov	sp, r7
 800d288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d28a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800d28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28c:	b091      	sub	sp, #68	; 0x44
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6178      	str	r0, [r7, #20]
 800d292:	6139      	str	r1, [r7, #16]
 800d294:	ed87 0b02 	vstr	d0, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
 800d29a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800d29c:	f04f 0200 	mov.w	r2, #0
 800d2a0:	f04f 0300 	mov.w	r3, #0
 800d2a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2a8:	f7f3 fc00 	bl	8000aac <__aeabi_dcmpeq>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d000      	beq.n	800d2b4 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800d2b2:	e069      	b.n	800d388 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800d2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800d2be:	2300      	movs	r3, #0
 800d2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2c2:	e05d      	b.n	800d380 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2d0:	f04f 0200 	mov.w	r2, #0
 800d2d4:	f04f 0300 	mov.w	r3, #0
 800d2d8:	f7f3 fbe8 	bl	8000aac <__aeabi_dcmpeq>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d145      	bne.n	800d36e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2f2:	f7f3 f973 	bl	80005dc <__aeabi_dmul>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	4413      	add	r3, r2
 800d30c:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800d30e:	e02a      	b.n	800d366 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d316:	4413      	add	r3, r2
 800d318:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d322:	3b01      	subs	r3, #1
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d328:	4413      	add	r3, r2
 800d32a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d32e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d332:	f7f3 f953 	bl	80005dc <__aeabi_dmul>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4610      	mov	r0, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d344:	18d6      	adds	r6, r2, r3
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4620      	mov	r0, r4
 800d34c:	4629      	mov	r1, r5
 800d34e:	f7f2 ff8f 	bl	8000270 <__adddf3>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	3301      	adds	r3, #1
 800d35e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	3301      	adds	r3, #1
 800d364:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800d366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	dbd0      	blt.n	800d310 <xgerc_tNNiazQU+0x86>
      jy++;
 800d36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d370:	3301      	adds	r3, #1
 800d372:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	3303      	adds	r3, #3
 800d378:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800d37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37c:	3301      	adds	r3, #1
 800d37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	429a      	cmp	r2, r3
 800d386:	db9d      	blt.n	800d2c4 <xgerc_tNNiazQU+0x3a>
}
 800d388:	bf00      	nop
 800d38a:	3744      	adds	r7, #68	; 0x44
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d390 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b092      	sub	sp, #72	; 0x48
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d39c:	f04f 0200 	mov.w	r2, #0
 800d3a0:	f04f 0300 	mov.w	r3, #0
 800d3a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f340 8090 	ble.w	800d4d0 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d10e      	bne.n	800d3d4 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	6439      	str	r1, [r7, #64]	; 0x40
 800d3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d0:	647b      	str	r3, [r7, #68]	; 0x44
 800d3d2:	e07d      	b.n	800d4d0 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d3d4:	f04f 0200 	mov.w	r2, #0
 800d3d8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d3dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3ee:	e05d      	b.n	800d4ac <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	4611      	mov	r1, r2
 800d404:	6239      	str	r1, [r7, #32]
 800d406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d40a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d40c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d410:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d414:	f7f3 fb72 	bl	8000afc <__aeabi_dcmpgt>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d029      	beq.n	800d472 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800d41e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d422:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d426:	f7f3 fa03 	bl	8000830 <__aeabi_ddiv>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d432:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d436:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d43a:	f7f3 f8cf 	bl	80005dc <__aeabi_dmul>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4610      	mov	r0, r2
 800d444:	4619      	mov	r1, r3
 800d446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d44a:	f7f3 f8c7 	bl	80005dc <__aeabi_dmul>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	4610      	mov	r0, r2
 800d454:	4619      	mov	r1, r3
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	4b23      	ldr	r3, [pc, #140]	; (800d4e8 <xnrm2_7bm34mDQ+0x158>)
 800d45c:	f7f2 ff08 	bl	8000270 <__adddf3>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d468:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d46c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d470:	e019      	b.n	800d4a6 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d472:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d476:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d47a:	f7f3 f9d9 	bl	8000830 <__aeabi_ddiv>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d48a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d48e:	f7f3 f8a5 	bl	80005dc <__aeabi_dmul>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d49a:	f7f2 fee9 	bl	8000270 <__adddf3>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	dd9d      	ble.n	800d3f0 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800d4b4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d4b8:	f009 fdce 	bl	8017058 <sqrt>
 800d4bc:	ec53 2b10 	vmov	r2, r3, d0
 800d4c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4c4:	f7f3 f88a 	bl	80005dc <__aeabi_dmul>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d4d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d4d4:	ec43 2b17 	vmov	d7, r2, r3
}
 800d4d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d4dc:	eef0 0a67 	vmov.f32	s1, s15
 800d4e0:	3748      	adds	r7, #72	; 0x48
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	3ff00000 	.word	0x3ff00000

0800d4ec <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b092      	sub	sp, #72	; 0x48
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d4f8:	f04f 0200 	mov.w	r2, #0
 800d4fc:	f04f 0300 	mov.w	r3, #0
 800d500:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f340 8090 	ble.w	800d62c <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d10e      	bne.n	800d530 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d518:	3b01      	subs	r3, #1
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	4413      	add	r3, r2
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	4611      	mov	r1, r2
 800d526:	6439      	str	r1, [r7, #64]	; 0x40
 800d528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d52c:	647b      	str	r3, [r7, #68]	; 0x44
 800d52e:	e07d      	b.n	800d62c <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d530:	f04f 0200 	mov.w	r2, #0
 800d534:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d538:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	4413      	add	r3, r2
 800d542:	3b01      	subs	r3, #1
 800d544:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d54a:	e05d      	b.n	800d608 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d552:	3b01      	subs	r3, #1
 800d554:	00db      	lsls	r3, r3, #3
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	4413      	add	r3, r2
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	4611      	mov	r1, r2
 800d560:	6239      	str	r1, [r7, #32]
 800d562:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d566:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d568:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d56c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d570:	f7f3 fac4 	bl	8000afc <__aeabi_dcmpgt>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d029      	beq.n	800d5ce <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800d57a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d57e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d582:	f7f3 f955 	bl	8000830 <__aeabi_ddiv>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d58e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d592:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d596:	f7f3 f821 	bl	80005dc <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4610      	mov	r0, r2
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5a6:	f7f3 f819 	bl	80005dc <__aeabi_dmul>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f04f 0200 	mov.w	r2, #0
 800d5b6:	4b23      	ldr	r3, [pc, #140]	; (800d644 <xnrm2_Mnmxg9YT+0x158>)
 800d5b8:	f7f2 fe5a 	bl	8000270 <__adddf3>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d5c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d5c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d5cc:	e019      	b.n	800d602 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d5ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d5d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d5d6:	f7f3 f92b 	bl	8000830 <__aeabi_ddiv>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d5e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d5ea:	f7f2 fff7 	bl	80005dc <__aeabi_dmul>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d5f6:	f7f2 fe3b 	bl	8000270 <__adddf3>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d604:	3301      	adds	r3, #1
 800d606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60c:	429a      	cmp	r2, r3
 800d60e:	dd9d      	ble.n	800d54c <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800d610:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d614:	f009 fd20 	bl	8017058 <sqrt>
 800d618:	ec53 2b10 	vmov	r2, r3, d0
 800d61c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d620:	f7f2 ffdc 	bl	80005dc <__aeabi_dmul>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d62c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d630:	ec43 2b17 	vmov	d7, r2, r3
}
 800d634:	eeb0 0a47 	vmov.f32	s0, s14
 800d638:	eef0 0a67 	vmov.f32	s1, s15
 800d63c:	3748      	adds	r7, #72	; 0x48
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	3ff00000 	.word	0x3ff00000

0800d648 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b092      	sub	sp, #72	; 0x48
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	f04f 0300 	mov.w	r3, #0
 800d65c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	f340 8090 	ble.w	800d788 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d10e      	bne.n	800d68c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d674:	3b01      	subs	r3, #1
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	4413      	add	r3, r2
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	4611      	mov	r1, r2
 800d682:	6439      	str	r1, [r7, #64]	; 0x40
 800d684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d688:	647b      	str	r3, [r7, #68]	; 0x44
 800d68a:	e07d      	b.n	800d788 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d68c:	f04f 0200 	mov.w	r2, #0
 800d690:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d694:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	4413      	add	r3, r2
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6a6:	e05d      	b.n	800d764 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	6239      	str	r1, [r7, #32]
 800d6be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d6c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d6c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d6cc:	f7f3 fa16 	bl	8000afc <__aeabi_dcmpgt>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d029      	beq.n	800d72a <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800d6d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d6de:	f7f3 f8a7 	bl	8000830 <__aeabi_ddiv>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d6ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d6ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d6f2:	f7f2 ff73 	bl	80005dc <__aeabi_dmul>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d702:	f7f2 ff6b 	bl	80005dc <__aeabi_dmul>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	4610      	mov	r0, r2
 800d70c:	4619      	mov	r1, r3
 800d70e:	f04f 0200 	mov.w	r2, #0
 800d712:	4b23      	ldr	r3, [pc, #140]	; (800d7a0 <xnrm2_Rlk0oxWw+0x158>)
 800d714:	f7f2 fdac 	bl	8000270 <__adddf3>
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d720:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d724:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d728:	e019      	b.n	800d75e <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d72a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d72e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d732:	f7f3 f87d 	bl	8000830 <__aeabi_ddiv>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d73e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d746:	f7f2 ff49 	bl	80005dc <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d752:	f7f2 fd8d 	bl	8000270 <__adddf3>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d760:	3301      	adds	r3, #1
 800d762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	429a      	cmp	r2, r3
 800d76a:	dd9d      	ble.n	800d6a8 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800d76c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d770:	f009 fc72 	bl	8017058 <sqrt>
 800d774:	ec53 2b10 	vmov	r2, r3, d0
 800d778:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d77c:	f7f2 ff2e 	bl	80005dc <__aeabi_dmul>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d78c:	ec43 2b17 	vmov	d7, r2, r3
}
 800d790:	eeb0 0a47 	vmov.f32	s0, s14
 800d794:	eef0 0a67 	vmov.f32	s1, s15
 800d798:	3748      	adds	r7, #72	; 0x48
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	3ff00000 	.word	0x3ff00000

0800d7a4 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b092      	sub	sp, #72	; 0x48
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d7b0:	f04f 0200 	mov.w	r2, #0
 800d7b4:	f04f 0300 	mov.w	r3, #0
 800d7b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f340 8090 	ble.w	800d8e4 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d10e      	bne.n	800d7e8 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	4611      	mov	r1, r2
 800d7de:	6439      	str	r1, [r7, #64]	; 0x40
 800d7e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e6:	e07d      	b.n	800d8e4 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d7e8:	f04f 0200 	mov.w	r2, #0
 800d7ec:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d7f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d802:	e05d      	b.n	800d8c0 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d806:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d80a:	3b01      	subs	r3, #1
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	4413      	add	r3, r2
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	4611      	mov	r1, r2
 800d818:	6239      	str	r1, [r7, #32]
 800d81a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d81e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d820:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d824:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d828:	f7f3 f968 	bl	8000afc <__aeabi_dcmpgt>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d029      	beq.n	800d886 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800d832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d836:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d83a:	f7f2 fff9 	bl	8000830 <__aeabi_ddiv>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d84a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d84e:	f7f2 fec5 	bl	80005dc <__aeabi_dmul>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4610      	mov	r0, r2
 800d858:	4619      	mov	r1, r3
 800d85a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d85e:	f7f2 febd 	bl	80005dc <__aeabi_dmul>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4610      	mov	r0, r2
 800d868:	4619      	mov	r1, r3
 800d86a:	f04f 0200 	mov.w	r2, #0
 800d86e:	4b23      	ldr	r3, [pc, #140]	; (800d8fc <xnrm2_nLdASVZH+0x158>)
 800d870:	f7f2 fcfe 	bl	8000270 <__adddf3>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d87c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d880:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d884:	e019      	b.n	800d8ba <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d886:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d88a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d88e:	f7f2 ffcf 	bl	8000830 <__aeabi_ddiv>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d89a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d89e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d8a2:	f7f2 fe9b 	bl	80005dc <__aeabi_dmul>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d8ae:	f7f2 fcdf 	bl	8000270 <__adddf3>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800d8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8bc:	3301      	adds	r3, #1
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	dd9d      	ble.n	800d804 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800d8c8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800d8cc:	f009 fbc4 	bl	8017058 <sqrt>
 800d8d0:	ec53 2b10 	vmov	r2, r3, d0
 800d8d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d8d8:	f7f2 fe80 	bl	80005dc <__aeabi_dmul>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800d8e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d8e8:	ec43 2b17 	vmov	d7, r2, r3
}
 800d8ec:	eeb0 0a47 	vmov.f32	s0, s14
 800d8f0:	eef0 0a67 	vmov.f32	s1, s15
 800d8f4:	3748      	adds	r7, #72	; 0x48
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	3ff00000 	.word	0x3ff00000

0800d900 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b092      	sub	sp, #72	; 0x48
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800d90c:	f04f 0200 	mov.w	r2, #0
 800d910:	f04f 0300 	mov.w	r3, #0
 800d914:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f340 8090 	ble.w	800da40 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d10e      	bne.n	800d944 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d92c:	3b01      	subs	r3, #1
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	4413      	add	r3, r2
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	4611      	mov	r1, r2
 800d93a:	6439      	str	r1, [r7, #64]	; 0x40
 800d93c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d940:	647b      	str	r3, [r7, #68]	; 0x44
 800d942:	e07d      	b.n	800da40 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800d944:	f04f 0200 	mov.w	r2, #0
 800d948:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800d94c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	4413      	add	r3, r2
 800d956:	3b01      	subs	r3, #1
 800d958:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d95e:	e05d      	b.n	800da1c <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800d960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d962:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d966:	3b01      	subs	r3, #1
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	4413      	add	r3, r2
 800d96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d972:	4611      	mov	r1, r2
 800d974:	6239      	str	r1, [r7, #32]
 800d976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d97a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800d97c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d980:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d984:	f7f3 f8ba 	bl	8000afc <__aeabi_dcmpgt>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d029      	beq.n	800d9e2 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800d98e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d992:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d996:	f7f2 ff4b 	bl	8000830 <__aeabi_ddiv>
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800d9a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d9aa:	f7f2 fe17 	bl	80005dc <__aeabi_dmul>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9ba:	f7f2 fe0f 	bl	80005dc <__aeabi_dmul>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	4b23      	ldr	r3, [pc, #140]	; (800da58 <xnrm2_xDOlDEtw+0x158>)
 800d9cc:	f7f2 fc50 	bl	8000270 <__adddf3>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800d9d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d9e0:	e019      	b.n	800da16 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800d9e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d9e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9ea:	f7f2 ff21 	bl	8000830 <__aeabi_ddiv>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800d9f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d9fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d9fe:	f7f2 fded 	bl	80005dc <__aeabi_dmul>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800da0a:	f7f2 fc31 	bl	8000270 <__adddf3>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800da16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da18:	3301      	adds	r3, #1
 800da1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	429a      	cmp	r2, r3
 800da22:	dd9d      	ble.n	800d960 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800da24:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800da28:	f009 fb16 	bl	8017058 <sqrt>
 800da2c:	ec53 2b10 	vmov	r2, r3, d0
 800da30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800da34:	f7f2 fdd2 	bl	80005dc <__aeabi_dmul>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800da40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da44:	ec43 2b17 	vmov	d7, r2, r3
}
 800da48:	eeb0 0a47 	vmov.f32	s0, s14
 800da4c:	eef0 0a67 	vmov.f32	s1, s15
 800da50:	3748      	adds	r7, #72	; 0x48
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	3ff00000 	.word	0x3ff00000

0800da5c <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800da5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800da60:	b08c      	sub	sp, #48	; 0x30
 800da62:	af00      	add	r7, sp, #0
 800da64:	61f8      	str	r0, [r7, #28]
 800da66:	61b9      	str	r1, [r7, #24]
 800da68:	617a      	str	r2, [r7, #20]
 800da6a:	ed87 0b02 	vstr	d0, [r7, #8]
 800da6e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800da78:	3b01      	subs	r3, #1
 800da7a:	00db      	lsls	r3, r3, #3
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	4413      	add	r3, r2
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800da8e:	3b01      	subs	r3, #1
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	69fa      	ldr	r2, [r7, #28]
 800da94:	4413      	add	r3, r2
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800da9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800daa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800daa6:	f7f2 fd99 	bl	80005dc <__aeabi_dmul>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4690      	mov	r8, r2
 800dab0:	4699      	mov	r9, r3
 800dab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dab6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800daba:	f7f2 fd8f 	bl	80005dc <__aeabi_dmul>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4610      	mov	r0, r2
 800dac4:	4619      	mov	r1, r3
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dacc:	3b01      	subs	r3, #1
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	69fa      	ldr	r2, [r7, #28]
 800dad2:	18d4      	adds	r4, r2, r3
 800dad4:	4602      	mov	r2, r0
 800dad6:	460b      	mov	r3, r1
 800dad8:	4640      	mov	r0, r8
 800dada:	4649      	mov	r1, r9
 800dadc:	f7f2 fbc6 	bl	800026c <__aeabi_dsub>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800dae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800daec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800daf0:	f7f2 fd74 	bl	80005dc <__aeabi_dmul>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4690      	mov	r8, r2
 800dafa:	4699      	mov	r9, r3
 800dafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800db04:	f7f2 fd6a 	bl	80005dc <__aeabi_dmul>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4610      	mov	r0, r2
 800db0e:	4619      	mov	r1, r3
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800db16:	3b01      	subs	r3, #1
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	18d4      	adds	r4, r2, r3
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	f7f2 fba3 	bl	8000270 <__adddf3>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	69fa      	ldr	r2, [r7, #28]
 800db38:	4413      	add	r3, r2
 800db3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db42:	f7f2 fd4b 	bl	80005dc <__aeabi_dmul>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4614      	mov	r4, r2
 800db4c:	461d      	mov	r5, r3
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	4413      	add	r3, r2
 800db56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db5e:	f7f2 fd3d 	bl	80005dc <__aeabi_dmul>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	4620      	mov	r0, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f7f2 fb81 	bl	8000270 <__adddf3>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	00db      	lsls	r3, r3, #3
 800db7a:	69fa      	ldr	r2, [r7, #28]
 800db7c:	4413      	add	r3, r2
 800db7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db86:	f7f2 fd29 	bl	80005dc <__aeabi_dmul>
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	4690      	mov	r8, r2
 800db90:	4699      	mov	r9, r3
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	69fa      	ldr	r2, [r7, #28]
 800db98:	4413      	add	r3, r2
 800db9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba2:	f7f2 fd1b 	bl	80005dc <__aeabi_dmul>
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4610      	mov	r0, r2
 800dbac:	4619      	mov	r1, r3
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	18d4      	adds	r4, r2, r3
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4640      	mov	r0, r8
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	f7f2 fb55 	bl	800026c <__aeabi_dsub>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	69fa      	ldr	r2, [r7, #28]
 800dbd0:	18d1      	adds	r1, r2, r3
 800dbd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dbd6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	69fa      	ldr	r2, [r7, #28]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800dbfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dc06:	f7f2 fce9 	bl	80005dc <__aeabi_dmul>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4690      	mov	r8, r2
 800dc10:	4699      	mov	r9, r3
 800dc12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc1a:	f7f2 fcdf 	bl	80005dc <__aeabi_dmul>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	460b      	mov	r3, r1
 800dc22:	4610      	mov	r0, r2
 800dc24:	4619      	mov	r1, r3
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	69fa      	ldr	r2, [r7, #28]
 800dc2e:	18d4      	adds	r4, r2, r3
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4640      	mov	r0, r8
 800dc36:	4649      	mov	r1, r9
 800dc38:	f7f2 fb18 	bl	800026c <__aeabi_dsub>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800dc44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc4c:	f7f2 fcc6 	bl	80005dc <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4690      	mov	r8, r2
 800dc56:	4699      	mov	r9, r3
 800dc58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dc60:	f7f2 fcbc 	bl	80005dc <__aeabi_dmul>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	4610      	mov	r0, r2
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	69fa      	ldr	r2, [r7, #28]
 800dc74:	18d4      	adds	r4, r2, r3
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	f7f2 faf7 	bl	8000270 <__adddf3>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	e9c4 2300 	strd	r2, r3, [r4]
}
 800dc8a:	bf00      	nop
 800dc8c:	3730      	adds	r7, #48	; 0x30
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dc94 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800dc94:	b5b0      	push	{r4, r5, r7, lr}
 800dc96:	b090      	sub	sp, #64	; 0x40
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	62b9      	str	r1, [r7, #40]	; 0x28
 800dcb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcba:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	6239      	str	r1, [r7, #32]
 800dcc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800dccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dcd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcd4:	f7f2 ff12 	bl	8000afc <__aeabi_dcmpgt>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d004      	beq.n	800dce8 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800dce8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dcec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dcf0:	f7f2 fabe 	bl	8000270 <__adddf3>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800dcfc:	f04f 0200 	mov.w	r2, #0
 800dd00:	f04f 0300 	mov.w	r3, #0
 800dd04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800dd08:	f7f2 fed0 	bl	8000aac <__aeabi_dcmpeq>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01b      	beq.n	800dd4a <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	f04f 0200 	mov.w	r2, #0
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800dd20:	6879      	ldr	r1, [r7, #4]
 800dd22:	f04f 0200 	mov.w	r2, #0
 800dd26:	4b59      	ldr	r3, [pc, #356]	; (800de8c <xrotg_XzIjz1eG+0x1f8>)
 800dd28:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	f04f 0200 	mov.w	r2, #0
 800dd32:	f04f 0300 	mov.w	r3, #0
 800dd36:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800dd3a:	68b9      	ldr	r1, [r7, #8]
 800dd3c:	f04f 0200 	mov.w	r2, #0
 800dd40:	f04f 0300 	mov.w	r3, #0
 800dd44:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800dd48:	e09b      	b.n	800de82 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800dd4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dd4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dd52:	f7f2 fd6d 	bl	8000830 <__aeabi_ddiv>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800dd5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dd62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dd66:	f7f2 fd63 	bl	8000830 <__aeabi_ddiv>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800dd72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dd76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800dd7a:	f7f2 fc2f 	bl	80005dc <__aeabi_dmul>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4614      	mov	r4, r2
 800dd84:	461d      	mov	r5, r3
 800dd86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dd8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dd8e:	f7f2 fc25 	bl	80005dc <__aeabi_dmul>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4620      	mov	r0, r4
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7f2 fa69 	bl	8000270 <__adddf3>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	ec43 2b17 	vmov	d7, r2, r3
 800dda6:	eeb0 0a47 	vmov.f32	s0, s14
 800ddaa:	eef0 0a67 	vmov.f32	s1, s15
 800ddae:	f009 f953 	bl	8017058 <sqrt>
 800ddb2:	ec53 2b10 	vmov	r2, r3, d0
 800ddb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ddba:	f7f2 fc0f 	bl	80005dc <__aeabi_dmul>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800ddc6:	f04f 0200 	mov.w	r2, #0
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ddd2:	f7f2 fe75 	bl	8000ac0 <__aeabi_dcmplt>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d005      	beq.n	800dde8 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	633b      	str	r3, [r7, #48]	; 0x30
 800dde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dde6:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ddf2:	f7f2 fd1d 	bl	8000830 <__aeabi_ddiv>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800de0a:	f7f2 fd11 	bl	8000830 <__aeabi_ddiv>
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800de18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800de1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de20:	f7f2 fe6c 	bl	8000afc <__aeabi_dcmpgt>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d006      	beq.n	800de38 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	68b9      	ldr	r1, [r7, #8]
 800de32:	e9c1 2300 	strd	r2, r3, [r1]
 800de36:	e01f      	b.n	800de78 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de3e:	f04f 0200 	mov.w	r2, #0
 800de42:	f04f 0300 	mov.w	r3, #0
 800de46:	f7f2 fe31 	bl	8000aac <__aeabi_dcmpeq>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10d      	bne.n	800de6c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	f04f 0000 	mov.w	r0, #0
 800de5a:	490c      	ldr	r1, [pc, #48]	; (800de8c <xrotg_XzIjz1eG+0x1f8>)
 800de5c:	f7f2 fce8 	bl	8000830 <__aeabi_ddiv>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	68b9      	ldr	r1, [r7, #8]
 800de66:	e9c1 2300 	strd	r2, r3, [r1]
 800de6a:	e005      	b.n	800de78 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800de6c:	68b9      	ldr	r1, [r7, #8]
 800de6e:	f04f 0200 	mov.w	r2, #0
 800de72:	4b06      	ldr	r3, [pc, #24]	; (800de8c <xrotg_XzIjz1eG+0x1f8>)
 800de74:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800de78:	68f9      	ldr	r1, [r7, #12]
 800de7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800de7e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800de82:	bf00      	nop
 800de84:	3740      	adds	r7, #64	; 0x40
 800de86:	46bd      	mov	sp, r7
 800de88:	bdb0      	pop	{r4, r5, r7, pc}
 800de8a:	bf00      	nop
 800de8c:	3ff00000 	.word	0x3ff00000

0800de90 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800de90:	b590      	push	{r4, r7, lr}
 800de92:	b089      	sub	sp, #36	; 0x24
 800de94:	af00      	add	r7, sp, #0
 800de96:	6178      	str	r0, [r7, #20]
 800de98:	ed87 0b02 	vstr	d0, [r7, #8]
 800de9c:	6139      	str	r1, [r7, #16]
 800de9e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	4413      	add	r3, r2
 800dea6:	3b01      	subs	r3, #1
 800dea8:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	e01a      	b.n	800dee6 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800deb6:	3b01      	subs	r3, #1
 800deb8:	00db      	lsls	r3, r3, #3
 800deba:	693a      	ldr	r2, [r7, #16]
 800debc:	4413      	add	r3, r2
 800debe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dec8:	3b01      	subs	r3, #1
 800deca:	00db      	lsls	r3, r3, #3
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	18d4      	adds	r4, r2, r3
 800ded0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ded4:	f7f2 fb82 	bl	80005dc <__aeabi_dmul>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	3301      	adds	r3, #1
 800dee4:	61fb      	str	r3, [r7, #28]
 800dee6:	69fa      	ldr	r2, [r7, #28]
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	429a      	cmp	r2, r3
 800deec:	dde0      	ble.n	800deb0 <xscal_59GtRAwv+0x20>
  }
}
 800deee:	bf00      	nop
 800def0:	bf00      	nop
 800def2:	3724      	adds	r7, #36	; 0x24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}

0800def8 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b089      	sub	sp, #36	; 0x24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6178      	str	r0, [r7, #20]
 800df00:	ed87 0b02 	vstr	d0, [r7, #8]
 800df04:	6139      	str	r1, [r7, #16]
 800df06:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	4413      	add	r3, r2
 800df0e:	3b01      	subs	r3, #1
 800df10:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e01a      	b.n	800df4e <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df1e:	3b01      	subs	r3, #1
 800df20:	00db      	lsls	r3, r3, #3
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	4413      	add	r3, r2
 800df26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df30:	3b01      	subs	r3, #1
 800df32:	00db      	lsls	r3, r3, #3
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	18d4      	adds	r4, r2, r3
 800df38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df3c:	f7f2 fb4e 	bl	80005dc <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	3301      	adds	r3, #1
 800df4c:	61fb      	str	r3, [r7, #28]
 800df4e:	69fa      	ldr	r2, [r7, #28]
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	429a      	cmp	r2, r3
 800df54:	dde0      	ble.n	800df18 <xscal_PLmmUlD2+0x20>
  }
}
 800df56:	bf00      	nop
 800df58:	bf00      	nop
 800df5a:	3724      	adds	r7, #36	; 0x24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd90      	pop	{r4, r7, pc}

0800df60 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800df60:	b590      	push	{r4, r7, lr}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	ed87 0b02 	vstr	d0, [r7, #8]
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	e01a      	b.n	800dfaa <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df7a:	3b01      	subs	r3, #1
 800df7c:	00db      	lsls	r3, r3, #3
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	4413      	add	r3, r2
 800df82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800df8c:	3b01      	subs	r3, #1
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	18d4      	adds	r4, r2, r3
 800df94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df98:	f7f2 fb20 	bl	80005dc <__aeabi_dmul>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	617b      	str	r3, [r7, #20]
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	3302      	adds	r3, #2
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	dddf      	ble.n	800df74 <xscal_eaAxXsvQ+0x14>
  }
}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop
 800dfb8:	371c      	adds	r7, #28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd90      	pop	{r4, r7, pc}

0800dfbe <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b087      	sub	sp, #28
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	441a      	add	r2, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800dff4:	3b01      	subs	r3, #1
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	68f9      	ldr	r1, [r7, #12]
 800dffa:	4419      	add	r1, r3
 800dffc:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e000:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e00a:	3b01      	subs	r3, #1
 800e00c:	00db      	lsls	r3, r3, #3
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	18d1      	adds	r1, r2, r3
 800e012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e016:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	00db      	lsls	r3, r3, #3
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	4413      	add	r3, r2
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	00db      	lsls	r3, r3, #3
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	4413      	add	r3, r2
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	00d2      	lsls	r2, r2, #3
 800e036:	68f9      	ldr	r1, [r7, #12]
 800e038:	4411      	add	r1, r2
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	00db      	lsls	r3, r3, #3
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	18d1      	adds	r1, r2, r3
 800e04a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e04e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3301      	adds	r3, #1
 800e056:	00db      	lsls	r3, r3, #3
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	4413      	add	r3, r2
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3301      	adds	r3, #1
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	4413      	add	r3, r2
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	3201      	adds	r2, #1
 800e072:	00d2      	lsls	r2, r2, #3
 800e074:	68f9      	ldr	r1, [r7, #12]
 800e076:	4411      	add	r1, r2
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3301      	adds	r3, #1
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	18d1      	adds	r1, r2, r3
 800e08a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e08e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e092:	bf00      	nop
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
	...

0800e0a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e0a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e0d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e0a4:	480d      	ldr	r0, [pc, #52]	; (800e0dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e0a6:	490e      	ldr	r1, [pc, #56]	; (800e0e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e0a8:	4a0e      	ldr	r2, [pc, #56]	; (800e0e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e0aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e0ac:	e002      	b.n	800e0b4 <LoopCopyDataInit>

0800e0ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e0ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e0b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e0b2:	3304      	adds	r3, #4

0800e0b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e0b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e0b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e0b8:	d3f9      	bcc.n	800e0ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e0ba:	4a0b      	ldr	r2, [pc, #44]	; (800e0e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e0bc:	4c0b      	ldr	r4, [pc, #44]	; (800e0ec <LoopFillZerobss+0x26>)
  movs r3, #0
 800e0be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e0c0:	e001      	b.n	800e0c6 <LoopFillZerobss>

0800e0c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e0c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e0c4:	3204      	adds	r2, #4

0800e0c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e0c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e0c8:	d3fb      	bcc.n	800e0c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e0ca:	f7f5 f90f 	bl	80032ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e0ce:	f008 fcf1 	bl	8016ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e0d2:	f7f4 f8b5 	bl	8002240 <main>
  bx  lr    
 800e0d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e0d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e0dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e0e0:	2000135c 	.word	0x2000135c
  ldr r2, =_sidata
 800e0e4:	08018d80 	.word	0x08018d80
  ldr r2, =_sbss
 800e0e8:	20001360 	.word	0x20001360
  ldr r4, =_ebss
 800e0ec:	2001bd1c 	.word	0x2001bd1c

0800e0f0 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e0f0:	e7fe      	b.n	800e0f0 <CAN1_SCE_IRQHandler>
	...

0800e0f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e0f8:	4b0e      	ldr	r3, [pc, #56]	; (800e134 <HAL_Init+0x40>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <HAL_Init+0x40>)
 800e0fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e104:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <HAL_Init+0x40>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a0a      	ldr	r2, [pc, #40]	; (800e134 <HAL_Init+0x40>)
 800e10a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e10e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e110:	4b08      	ldr	r3, [pc, #32]	; (800e134 <HAL_Init+0x40>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a07      	ldr	r2, [pc, #28]	; (800e134 <HAL_Init+0x40>)
 800e116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e11a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e11c:	2003      	movs	r0, #3
 800e11e:	f001 f968 	bl	800f3f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e122:	200f      	movs	r0, #15
 800e124:	f7f5 f822 	bl	800316c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e128:	f7f4 fff4 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	40023c00 	.word	0x40023c00

0800e138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e13c:	4b06      	ldr	r3, [pc, #24]	; (800e158 <HAL_IncTick+0x20>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	461a      	mov	r2, r3
 800e142:	4b06      	ldr	r3, [pc, #24]	; (800e15c <HAL_IncTick+0x24>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4413      	add	r3, r2
 800e148:	4a04      	ldr	r2, [pc, #16]	; (800e15c <HAL_IncTick+0x24>)
 800e14a:	6013      	str	r3, [r2, #0]
}
 800e14c:	bf00      	nop
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	200012ec 	.word	0x200012ec
 800e15c:	2001bc24 	.word	0x2001bc24

0800e160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e160:	b480      	push	{r7}
 800e162:	af00      	add	r7, sp, #0
  return uwTick;
 800e164:	4b03      	ldr	r3, [pc, #12]	; (800e174 <HAL_GetTick+0x14>)
 800e166:	681b      	ldr	r3, [r3, #0]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	2001bc24 	.word	0x2001bc24

0800e178 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d101      	bne.n	800e18e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e033      	b.n	800e1f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7f3 fb96 	bl	80018c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ae:	f003 0310 	and.w	r3, r3, #16
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d118      	bne.n	800e1e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e1be:	f023 0302 	bic.w	r3, r3, #2
 800e1c2:	f043 0202 	orr.w	r2, r3, #2
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fba8 	bl	800e920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1da:	f023 0303 	bic.w	r3, r3, #3
 800e1de:	f043 0201 	orr.w	r2, r3, #1
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	641a      	str	r2, [r3, #64]	; 0x40
 800e1e6:	e001      	b.n	800e1ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b084      	sub	sp, #16
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	60fb      	str	r3, [r7, #12]
 800e20a:	2300      	movs	r3, #0
 800e20c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b02      	cmp	r3, #2
 800e21a:	bf0c      	ite	eq
 800e21c:	2301      	moveq	r3, #1
 800e21e:	2300      	movne	r3, #0
 800e220:	b2db      	uxtb	r3, r3
 800e222:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f003 0320 	and.w	r3, r3, #32
 800e22e:	2b20      	cmp	r3, #32
 800e230:	bf0c      	ite	eq
 800e232:	2301      	moveq	r3, #1
 800e234:	2300      	movne	r3, #0
 800e236:	b2db      	uxtb	r3, r3
 800e238:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d049      	beq.n	800e2d4 <HAL_ADC_IRQHandler+0xd6>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d046      	beq.n	800e2d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24a:	f003 0310 	and.w	r3, r3, #16
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e256:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d12b      	bne.n	800e2c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e270:	2b00      	cmp	r3, #0
 800e272:	d127      	bne.n	800e2c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d006      	beq.n	800e290 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d119      	bne.n	800e2c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f022 0220 	bic.w	r2, r2, #32
 800e29e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d105      	bne.n	800e2c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2bc:	f043 0201 	orr.w	r2, r3, #1
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7f3 fd77 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f06f 0212 	mvn.w	r2, #18
 800e2d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f003 0304 	and.w	r3, r3, #4
 800e2de:	2b04      	cmp	r3, #4
 800e2e0:	bf0c      	ite	eq
 800e2e2:	2301      	moveq	r3, #1
 800e2e4:	2300      	movne	r3, #0
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f4:	2b80      	cmp	r3, #128	; 0x80
 800e2f6:	bf0c      	ite	eq
 800e2f8:	2301      	moveq	r3, #1
 800e2fa:	2300      	movne	r3, #0
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d057      	beq.n	800e3b6 <HAL_ADC_IRQHandler+0x1b8>
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d054      	beq.n	800e3b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e310:	f003 0310 	and.w	r3, r3, #16
 800e314:	2b00      	cmp	r3, #0
 800e316:	d105      	bne.n	800e324 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e31c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d139      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d006      	beq.n	800e34e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d12b      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d124      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800e366:	2b00      	cmp	r3, #0
 800e368:	d11d      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d119      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e380:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e39e:	f043 0201 	orr.w	r2, r3, #1
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fc38 	bl	800ec1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f06f 020c 	mvn.w	r2, #12
 800e3b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f003 0301 	and.w	r3, r3, #1
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	bf0c      	ite	eq
 800e3c4:	2301      	moveq	r3, #1
 800e3c6:	2300      	movne	r3, #0
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d6:	2b40      	cmp	r3, #64	; 0x40
 800e3d8:	bf0c      	ite	eq
 800e3da:	2301      	moveq	r3, #1
 800e3dc:	2300      	movne	r3, #0
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d017      	beq.n	800e418 <HAL_ADC_IRQHandler+0x21a>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d014      	beq.n	800e418 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d10d      	bne.n	800e418 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e400:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f953 	bl	800e6b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f06f 0201 	mvn.w	r2, #1
 800e416:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b20      	cmp	r3, #32
 800e424:	bf0c      	ite	eq
 800e426:	2301      	moveq	r3, #1
 800e428:	2300      	movne	r3, #0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e43c:	bf0c      	ite	eq
 800e43e:	2301      	moveq	r3, #1
 800e440:	2300      	movne	r3, #0
 800e442:	b2db      	uxtb	r3, r3
 800e444:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d015      	beq.n	800e478 <HAL_ADC_IRQHandler+0x27a>
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d012      	beq.n	800e478 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e456:	f043 0202 	orr.w	r2, r3, #2
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f06f 0220 	mvn.w	r2, #32
 800e466:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f92d 	bl	800e6c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f06f 0220 	mvn.w	r2, #32
 800e476:	601a      	str	r2, [r3, #0]
  }
}
 800e478:	bf00      	nop
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e48c:	2300      	movs	r3, #0
 800e48e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e496:	2b01      	cmp	r3, #1
 800e498:	d101      	bne.n	800e49e <HAL_ADC_Start_DMA+0x1e>
 800e49a:	2302      	movs	r3, #2
 800e49c:	e0e9      	b.n	800e672 <HAL_ADC_Start_DMA+0x1f2>
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d018      	beq.n	800e4e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f042 0201 	orr.w	r2, r2, #1
 800e4c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e4c4:	4b6d      	ldr	r3, [pc, #436]	; (800e67c <HAL_ADC_Start_DMA+0x1fc>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a6d      	ldr	r2, [pc, #436]	; (800e680 <HAL_ADC_Start_DMA+0x200>)
 800e4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ce:	0c9a      	lsrs	r2, r3, #18
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e4d8:	e002      	b.n	800e4e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1f9      	bne.n	800e4da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4f4:	d107      	bne.n	800e506 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e504:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b01      	cmp	r3, #1
 800e512:	f040 80a1 	bne.w	800e658 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e51e:	f023 0301 	bic.w	r3, r3, #1
 800e522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e534:	2b00      	cmp	r3, #0
 800e536:	d007      	beq.n	800e548 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e540:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e54c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e554:	d106      	bne.n	800e564 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	f023 0206 	bic.w	r2, r3, #6
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	645a      	str	r2, [r3, #68]	; 0x44
 800e562:	e002      	b.n	800e56a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e572:	4b44      	ldr	r3, [pc, #272]	; (800e684 <HAL_ADC_Start_DMA+0x204>)
 800e574:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57a:	4a43      	ldr	r2, [pc, #268]	; (800e688 <HAL_ADC_Start_DMA+0x208>)
 800e57c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e582:	4a42      	ldr	r2, [pc, #264]	; (800e68c <HAL_ADC_Start_DMA+0x20c>)
 800e584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	4a41      	ldr	r2, [pc, #260]	; (800e690 <HAL_ADC_Start_DMA+0x210>)
 800e58c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e596:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	685a      	ldr	r2, [r3, #4]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e5a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	689a      	ldr	r2, [r3, #8]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	334c      	adds	r3, #76	; 0x4c
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f000 fff6 	bl	800f5b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	f003 031f 	and.w	r3, r3, #31
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d12a      	bne.n	800e62e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a2d      	ldr	r2, [pc, #180]	; (800e694 <HAL_ADC_Start_DMA+0x214>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d015      	beq.n	800e60e <HAL_ADC_Start_DMA+0x18e>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a2c      	ldr	r2, [pc, #176]	; (800e698 <HAL_ADC_Start_DMA+0x218>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d105      	bne.n	800e5f8 <HAL_ADC_Start_DMA+0x178>
 800e5ec:	4b25      	ldr	r3, [pc, #148]	; (800e684 <HAL_ADC_Start_DMA+0x204>)
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	f003 031f 	and.w	r3, r3, #31
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00a      	beq.n	800e60e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a27      	ldr	r2, [pc, #156]	; (800e69c <HAL_ADC_Start_DMA+0x21c>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d136      	bne.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
 800e602:	4b20      	ldr	r3, [pc, #128]	; (800e684 <HAL_ADC_Start_DMA+0x204>)
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	f003 0310 	and.w	r3, r3, #16
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d130      	bne.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d129      	bne.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	689a      	ldr	r2, [r3, #8]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e62a:	609a      	str	r2, [r3, #8]
 800e62c:	e020      	b.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a18      	ldr	r2, [pc, #96]	; (800e694 <HAL_ADC_Start_DMA+0x214>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d11b      	bne.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d114      	bne.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	689a      	ldr	r2, [r3, #8]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e654:	609a      	str	r2, [r3, #8]
 800e656:	e00b      	b.n	800e670 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65c:	f043 0210 	orr.w	r2, r3, #16
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e668:	f043 0201 	orr.w	r2, r3, #1
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000004 	.word	0x20000004
 800e680:	431bde83 	.word	0x431bde83
 800e684:	40012300 	.word	0x40012300
 800e688:	0800eb19 	.word	0x0800eb19
 800e68c:	0800ebd3 	.word	0x0800ebd3
 800e690:	0800ebef 	.word	0x0800ebef
 800e694:	40012000 	.word	0x40012000
 800e698:	40012100 	.word	0x40012100
 800e69c:	40012200 	.word	0x40012200

0800e6a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800e6bc:	bf00      	nop
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d101      	bne.n	800e6f8 <HAL_ADC_ConfigChannel+0x1c>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e105      	b.n	800e904 <HAL_ADC_ConfigChannel+0x228>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b09      	cmp	r3, #9
 800e706:	d925      	bls.n	800e754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68d9      	ldr	r1, [r3, #12]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	b29b      	uxth	r3, r3
 800e714:	461a      	mov	r2, r3
 800e716:	4613      	mov	r3, r2
 800e718:	005b      	lsls	r3, r3, #1
 800e71a:	4413      	add	r3, r2
 800e71c:	3b1e      	subs	r3, #30
 800e71e:	2207      	movs	r2, #7
 800e720:	fa02 f303 	lsl.w	r3, r2, r3
 800e724:	43da      	mvns	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	400a      	ands	r2, r1
 800e72c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68d9      	ldr	r1, [r3, #12]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	689a      	ldr	r2, [r3, #8]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	4618      	mov	r0, r3
 800e740:	4603      	mov	r3, r0
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	4403      	add	r3, r0
 800e746:	3b1e      	subs	r3, #30
 800e748:	409a      	lsls	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	430a      	orrs	r2, r1
 800e750:	60da      	str	r2, [r3, #12]
 800e752:	e022      	b.n	800e79a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	6919      	ldr	r1, [r3, #16]
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	461a      	mov	r2, r3
 800e762:	4613      	mov	r3, r2
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	4413      	add	r3, r2
 800e768:	2207      	movs	r2, #7
 800e76a:	fa02 f303 	lsl.w	r3, r2, r3
 800e76e:	43da      	mvns	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	400a      	ands	r2, r1
 800e776:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6919      	ldr	r1, [r3, #16]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	689a      	ldr	r2, [r3, #8]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	b29b      	uxth	r3, r3
 800e788:	4618      	mov	r0, r3
 800e78a:	4603      	mov	r3, r0
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4403      	add	r3, r0
 800e790:	409a      	lsls	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	430a      	orrs	r2, r1
 800e798:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	2b06      	cmp	r3, #6
 800e7a0:	d824      	bhi.n	800e7ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	3b05      	subs	r3, #5
 800e7b4:	221f      	movs	r2, #31
 800e7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ba:	43da      	mvns	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	400a      	ands	r2, r1
 800e7c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	685a      	ldr	r2, [r3, #4]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	3b05      	subs	r3, #5
 800e7de:	fa00 f203 	lsl.w	r2, r0, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	635a      	str	r2, [r3, #52]	; 0x34
 800e7ea:	e04c      	b.n	800e886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	2b0c      	cmp	r3, #12
 800e7f2:	d824      	bhi.n	800e83e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	4613      	mov	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4413      	add	r3, r2
 800e804:	3b23      	subs	r3, #35	; 0x23
 800e806:	221f      	movs	r2, #31
 800e808:	fa02 f303 	lsl.w	r3, r2, r3
 800e80c:	43da      	mvns	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	400a      	ands	r2, r1
 800e814:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	b29b      	uxth	r3, r3
 800e822:	4618      	mov	r0, r3
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	3b23      	subs	r3, #35	; 0x23
 800e830:	fa00 f203 	lsl.w	r2, r0, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	430a      	orrs	r2, r1
 800e83a:	631a      	str	r2, [r3, #48]	; 0x30
 800e83c:	e023      	b.n	800e886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	4613      	mov	r3, r2
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4413      	add	r3, r2
 800e84e:	3b41      	subs	r3, #65	; 0x41
 800e850:	221f      	movs	r2, #31
 800e852:	fa02 f303 	lsl.w	r3, r2, r3
 800e856:	43da      	mvns	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	400a      	ands	r2, r1
 800e85e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4618      	mov	r0, r3
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	3b41      	subs	r3, #65	; 0x41
 800e87a:	fa00 f203 	lsl.w	r2, r0, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	430a      	orrs	r2, r1
 800e884:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e886:	4b22      	ldr	r3, [pc, #136]	; (800e910 <HAL_ADC_ConfigChannel+0x234>)
 800e888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a21      	ldr	r2, [pc, #132]	; (800e914 <HAL_ADC_ConfigChannel+0x238>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d109      	bne.n	800e8a8 <HAL_ADC_ConfigChannel+0x1cc>
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b12      	cmp	r3, #18
 800e89a:	d105      	bne.n	800e8a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a19      	ldr	r2, [pc, #100]	; (800e914 <HAL_ADC_ConfigChannel+0x238>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d123      	bne.n	800e8fa <HAL_ADC_ConfigChannel+0x21e>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b10      	cmp	r3, #16
 800e8b8:	d003      	beq.n	800e8c2 <HAL_ADC_ConfigChannel+0x1e6>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b11      	cmp	r3, #17
 800e8c0:	d11b      	bne.n	800e8fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b10      	cmp	r3, #16
 800e8d4:	d111      	bne.n	800e8fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e8d6:	4b10      	ldr	r3, [pc, #64]	; (800e918 <HAL_ADC_ConfigChannel+0x23c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a10      	ldr	r2, [pc, #64]	; (800e91c <HAL_ADC_ConfigChannel+0x240>)
 800e8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e0:	0c9a      	lsrs	r2, r3, #18
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4413      	add	r3, r2
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e8ec:	e002      	b.n	800e8f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1f9      	bne.n	800e8ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	40012300 	.word	0x40012300
 800e914:	40012000 	.word	0x40012000
 800e918:	20000004 	.word	0x20000004
 800e91c:	431bde83 	.word	0x431bde83

0800e920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e928:	4b79      	ldr	r3, [pc, #484]	; (800eb10 <ADC_Init+0x1f0>)
 800e92a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	431a      	orrs	r2, r3
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	685a      	ldr	r2, [r3, #4]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	6859      	ldr	r1, [r3, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	021a      	lsls	r2, r3, #8
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	430a      	orrs	r2, r1
 800e968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6859      	ldr	r1, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689a      	ldr	r2, [r3, #8]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	689a      	ldr	r2, [r3, #8]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e99a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6899      	ldr	r1, [r3, #8]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68da      	ldr	r2, [r3, #12]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b2:	4a58      	ldr	r2, [pc, #352]	; (800eb14 <ADC_Init+0x1f4>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d022      	beq.n	800e9fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	689a      	ldr	r2, [r3, #8]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e9c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6899      	ldr	r1, [r3, #8]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689a      	ldr	r2, [r3, #8]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e9e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6899      	ldr	r1, [r3, #8]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	430a      	orrs	r2, r1
 800e9fa:	609a      	str	r2, [r3, #8]
 800e9fc:	e00f      	b.n	800ea1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	689a      	ldr	r2, [r3, #8]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ea0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689a      	ldr	r2, [r3, #8]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ea1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	689a      	ldr	r2, [r3, #8]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f022 0202 	bic.w	r2, r2, #2
 800ea2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	6899      	ldr	r1, [r3, #8]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	7e1b      	ldrb	r3, [r3, #24]
 800ea38:	005a      	lsls	r2, r3, #1
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d01b      	beq.n	800ea84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	685a      	ldr	r2, [r3, #4]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ea6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6859      	ldr	r1, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea76:	3b01      	subs	r3, #1
 800ea78:	035a      	lsls	r2, r3, #13
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	605a      	str	r2, [r3, #4]
 800ea82:	e007      	b.n	800ea94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685a      	ldr	r2, [r3, #4]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800eaa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	3b01      	subs	r3, #1
 800eab0:	051a      	lsls	r2, r3, #20
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	430a      	orrs	r2, r1
 800eab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	689a      	ldr	r2, [r3, #8]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800eac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6899      	ldr	r1, [r3, #8]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ead6:	025a      	lsls	r2, r3, #9
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	430a      	orrs	r2, r1
 800eade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	689a      	ldr	r2, [r3, #8]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eaee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	6899      	ldr	r1, [r3, #8]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	029a      	lsls	r2, r3, #10
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	609a      	str	r2, [r3, #8]
}
 800eb04:	bf00      	nop
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	40012300 	.word	0x40012300
 800eb14:	0f000001 	.word	0x0f000001

0800eb18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d13c      	bne.n	800ebac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d12b      	bne.n	800eba4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d127      	bne.n	800eba4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d119      	bne.n	800eba4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	685a      	ldr	r2, [r3, #4]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f022 0220 	bic.w	r2, r2, #32
 800eb7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d105      	bne.n	800eba4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb9c:	f043 0201 	orr.w	r2, r3, #1
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f7f3 f907 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ebaa:	e00e      	b.n	800ebca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb0:	f003 0310 	and.w	r3, r3, #16
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f7ff fd85 	bl	800e6c8 <HAL_ADC_ErrorCallback>
}
 800ebbe:	e004      	b.n	800ebca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	4798      	blx	r3
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff fd5d 	bl	800e6a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2240      	movs	r2, #64	; 0x40
 800ec00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec06:	f043 0204 	orr.w	r2, r3, #4
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f7ff fd5a 	bl	800e6c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ec14:	bf00      	nop
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d101      	bne.n	800ec42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e0ed      	b.n	800ee1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d102      	bne.n	800ec54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7f3 f92e 	bl	8001eb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 0201 	orr.w	r2, r2, #1
 800ec62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ec64:	f7ff fa7c 	bl	800e160 <HAL_GetTick>
 800ec68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ec6a:	e012      	b.n	800ec92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ec6c:	f7ff fa78 	bl	800e160 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	2b0a      	cmp	r3, #10
 800ec78:	d90b      	bls.n	800ec92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2205      	movs	r2, #5
 800ec8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e0c5      	b.n	800ee1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0e5      	beq.n	800ec6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f022 0202 	bic.w	r2, r2, #2
 800ecae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ecb0:	f7ff fa56 	bl	800e160 <HAL_GetTick>
 800ecb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ecb6:	e012      	b.n	800ecde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ecb8:	f7ff fa52 	bl	800e160 <HAL_GetTick>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	2b0a      	cmp	r3, #10
 800ecc4:	d90b      	bls.n	800ecde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2205      	movs	r2, #5
 800ecd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e09f      	b.n	800ee1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	f003 0302 	and.w	r3, r3, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1e5      	bne.n	800ecb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	7e1b      	ldrb	r3, [r3, #24]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d108      	bne.n	800ed06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	e007      	b.n	800ed16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7e5b      	ldrb	r3, [r3, #25]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d108      	bne.n	800ed30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	e007      	b.n	800ed40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	7e9b      	ldrb	r3, [r3, #26]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d108      	bne.n	800ed5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f042 0220 	orr.w	r2, r2, #32
 800ed56:	601a      	str	r2, [r3, #0]
 800ed58:	e007      	b.n	800ed6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f022 0220 	bic.w	r2, r2, #32
 800ed68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	7edb      	ldrb	r3, [r3, #27]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d108      	bne.n	800ed84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f022 0210 	bic.w	r2, r2, #16
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	e007      	b.n	800ed94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f042 0210 	orr.w	r2, r2, #16
 800ed92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	7f1b      	ldrb	r3, [r3, #28]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d108      	bne.n	800edae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f042 0208 	orr.w	r2, r2, #8
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	e007      	b.n	800edbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f022 0208 	bic.w	r2, r2, #8
 800edbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	7f5b      	ldrb	r3, [r3, #29]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d108      	bne.n	800edd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f042 0204 	orr.w	r2, r2, #4
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	e007      	b.n	800ede8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f022 0204 	bic.w	r2, r2, #4
 800ede6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689a      	ldr	r2, [r3, #8]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	431a      	orrs	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	431a      	orrs	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	ea42 0103 	orr.w	r1, r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	1e5a      	subs	r2, r3, #1
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	430a      	orrs	r2, r1
 800ee0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b08a      	sub	sp, #40	; 0x28
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d07c      	beq.n	800ef66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d023      	beq.n	800eebe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	f003 0302 	and.w	r3, r3, #2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f983 	bl	800f194 <HAL_CAN_TxMailbox0CompleteCallback>
 800ee8e:	e016      	b.n	800eebe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	f003 0304 	and.w	r3, r3, #4
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d004      	beq.n	800eea4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eea0:	627b      	str	r3, [r7, #36]	; 0x24
 800eea2:	e00c      	b.n	800eebe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	f003 0308 	and.w	r3, r3, #8
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d004      	beq.n	800eeb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800eeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eeb4:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb6:	e002      	b.n	800eebe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f989 	bl	800f1d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d024      	beq.n	800ef12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d003      	beq.n	800eee4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f963 	bl	800f1a8 <HAL_CAN_TxMailbox1CompleteCallback>
 800eee2:	e016      	b.n	800ef12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d004      	beq.n	800eef8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
 800eef6:	e00c      	b.n	800ef12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d004      	beq.n	800ef0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef08:	627b      	str	r3, [r7, #36]	; 0x24
 800ef0a:	e002      	b.n	800ef12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f969 	bl	800f1e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d024      	beq.n	800ef66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ef24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d003      	beq.n	800ef38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f943 	bl	800f1bc <HAL_CAN_TxMailbox2CompleteCallback>
 800ef36:	e016      	b.n	800ef66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d004      	beq.n	800ef4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef48:	627b      	str	r3, [r7, #36]	; 0x24
 800ef4a:	e00c      	b.n	800ef66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d004      	beq.n	800ef60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5e:	e002      	b.n	800ef66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 f949 	bl	800f1f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	f003 0308 	and.w	r3, r3, #8
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00c      	beq.n	800ef8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f003 0310 	and.w	r3, r3, #16
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d007      	beq.n	800ef8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2210      	movs	r2, #16
 800ef88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	f003 0304 	and.w	r3, r3, #4
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00b      	beq.n	800efac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	f003 0308 	and.w	r3, r3, #8
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d006      	beq.n	800efac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2208      	movs	r2, #8
 800efa4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f93a 	bl	800f220 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	f003 0302 	and.w	r3, r3, #2
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d009      	beq.n	800efca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	f003 0303 	and.w	r3, r3, #3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 f921 	bl	800f20c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00c      	beq.n	800efee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f003 0310 	and.w	r3, r3, #16
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d007      	beq.n	800efee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800efe4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2210      	movs	r2, #16
 800efec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	f003 0320 	and.w	r3, r3, #32
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00b      	beq.n	800f010 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	f003 0308 	and.w	r3, r3, #8
 800effe:	2b00      	cmp	r3, #0
 800f000:	d006      	beq.n	800f010 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2208      	movs	r2, #8
 800f008:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f91c 	bl	800f248 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	f003 0310 	and.w	r3, r3, #16
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	f003 0303 	and.w	r3, r3, #3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d002      	beq.n	800f02e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f903 	bl	800f234 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00b      	beq.n	800f050 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	f003 0310 	and.w	r3, r3, #16
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d006      	beq.n	800f050 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2210      	movs	r2, #16
 800f048:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 f906 	bl	800f25c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00b      	beq.n	800f072 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	f003 0308 	and.w	r3, r3, #8
 800f060:	2b00      	cmp	r3, #0
 800f062:	d006      	beq.n	800f072 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2208      	movs	r2, #8
 800f06a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 f8ff 	bl	800f270 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f072:	6a3b      	ldr	r3, [r7, #32]
 800f074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d07b      	beq.n	800f174 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	f003 0304 	and.w	r3, r3, #4
 800f082:	2b00      	cmp	r3, #0
 800f084:	d072      	beq.n	800f16c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d008      	beq.n	800f0a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f096:	2b00      	cmp	r3, #0
 800f098:	d003      	beq.n	800f0a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	f043 0301 	orr.w	r3, r3, #1
 800f0a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d008      	beq.n	800f0be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	f043 0302 	orr.w	r3, r3, #2
 800f0bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f0be:	6a3b      	ldr	r3, [r7, #32]
 800f0c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d008      	beq.n	800f0da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	f043 0304 	orr.w	r3, r3, #4
 800f0d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f0da:	6a3b      	ldr	r3, [r7, #32]
 800f0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d043      	beq.n	800f16c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d03e      	beq.n	800f16c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f0f4:	2b60      	cmp	r3, #96	; 0x60
 800f0f6:	d02b      	beq.n	800f150 <HAL_CAN_IRQHandler+0x32a>
 800f0f8:	2b60      	cmp	r3, #96	; 0x60
 800f0fa:	d82e      	bhi.n	800f15a <HAL_CAN_IRQHandler+0x334>
 800f0fc:	2b50      	cmp	r3, #80	; 0x50
 800f0fe:	d022      	beq.n	800f146 <HAL_CAN_IRQHandler+0x320>
 800f100:	2b50      	cmp	r3, #80	; 0x50
 800f102:	d82a      	bhi.n	800f15a <HAL_CAN_IRQHandler+0x334>
 800f104:	2b40      	cmp	r3, #64	; 0x40
 800f106:	d019      	beq.n	800f13c <HAL_CAN_IRQHandler+0x316>
 800f108:	2b40      	cmp	r3, #64	; 0x40
 800f10a:	d826      	bhi.n	800f15a <HAL_CAN_IRQHandler+0x334>
 800f10c:	2b30      	cmp	r3, #48	; 0x30
 800f10e:	d010      	beq.n	800f132 <HAL_CAN_IRQHandler+0x30c>
 800f110:	2b30      	cmp	r3, #48	; 0x30
 800f112:	d822      	bhi.n	800f15a <HAL_CAN_IRQHandler+0x334>
 800f114:	2b10      	cmp	r3, #16
 800f116:	d002      	beq.n	800f11e <HAL_CAN_IRQHandler+0x2f8>
 800f118:	2b20      	cmp	r3, #32
 800f11a:	d005      	beq.n	800f128 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f11c:	e01d      	b.n	800f15a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	f043 0308 	orr.w	r3, r3, #8
 800f124:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f126:	e019      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	f043 0310 	orr.w	r3, r3, #16
 800f12e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f130:	e014      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	f043 0320 	orr.w	r3, r3, #32
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f13a:	e00f      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f144:	e00a      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f14e:	e005      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f158:	e000      	b.n	800f15c <HAL_CAN_IRQHandler+0x336>
            break;
 800f15a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	699a      	ldr	r2, [r3, #24]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f16a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2204      	movs	r2, #4
 800f172:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	2b00      	cmp	r3, #0
 800f178:	d008      	beq.n	800f18c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	431a      	orrs	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f87c 	bl	800f284 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f18c:	bf00      	nop
 800f18e:	3728      	adds	r7, #40	; 0x28
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f1ec:	bf00      	nop
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f200:	bf00      	nop
 800f202:	370c      	adds	r7, #12
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f228:	bf00      	nop
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800f23c:	bf00      	nop
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f250:	bf00      	nop
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f278:	bf00      	nop
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f003 0307 	and.w	r3, r3, #7
 800f2a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f2a8:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <__NVIC_SetPriorityGrouping+0x44>)
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f2c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f2ca:	4a04      	ldr	r2, [pc, #16]	; (800f2dc <__NVIC_SetPriorityGrouping+0x44>)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	60d3      	str	r3, [r2, #12]
}
 800f2d0:	bf00      	nop
 800f2d2:	3714      	adds	r7, #20
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	e000ed00 	.word	0xe000ed00

0800f2e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f2e4:	4b04      	ldr	r3, [pc, #16]	; (800f2f8 <__NVIC_GetPriorityGrouping+0x18>)
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	0a1b      	lsrs	r3, r3, #8
 800f2ea:	f003 0307 	and.w	r3, r3, #7
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	e000ed00 	.word	0xe000ed00

0800f2fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	4603      	mov	r3, r0
 800f304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	db0b      	blt.n	800f326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	f003 021f 	and.w	r2, r3, #31
 800f314:	4907      	ldr	r1, [pc, #28]	; (800f334 <__NVIC_EnableIRQ+0x38>)
 800f316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f31a:	095b      	lsrs	r3, r3, #5
 800f31c:	2001      	movs	r0, #1
 800f31e:	fa00 f202 	lsl.w	r2, r0, r2
 800f322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f326:	bf00      	nop
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	e000e100 	.word	0xe000e100

0800f338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	4603      	mov	r3, r0
 800f340:	6039      	str	r1, [r7, #0]
 800f342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	db0a      	blt.n	800f362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	b2da      	uxtb	r2, r3
 800f350:	490c      	ldr	r1, [pc, #48]	; (800f384 <__NVIC_SetPriority+0x4c>)
 800f352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f356:	0112      	lsls	r2, r2, #4
 800f358:	b2d2      	uxtb	r2, r2
 800f35a:	440b      	add	r3, r1
 800f35c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f360:	e00a      	b.n	800f378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	b2da      	uxtb	r2, r3
 800f366:	4908      	ldr	r1, [pc, #32]	; (800f388 <__NVIC_SetPriority+0x50>)
 800f368:	79fb      	ldrb	r3, [r7, #7]
 800f36a:	f003 030f 	and.w	r3, r3, #15
 800f36e:	3b04      	subs	r3, #4
 800f370:	0112      	lsls	r2, r2, #4
 800f372:	b2d2      	uxtb	r2, r2
 800f374:	440b      	add	r3, r1
 800f376:	761a      	strb	r2, [r3, #24]
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	e000e100 	.word	0xe000e100
 800f388:	e000ed00 	.word	0xe000ed00

0800f38c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b089      	sub	sp, #36	; 0x24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f003 0307 	and.w	r3, r3, #7
 800f39e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	f1c3 0307 	rsb	r3, r3, #7
 800f3a6:	2b04      	cmp	r3, #4
 800f3a8:	bf28      	it	cs
 800f3aa:	2304      	movcs	r3, #4
 800f3ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	2b06      	cmp	r3, #6
 800f3b4:	d902      	bls.n	800f3bc <NVIC_EncodePriority+0x30>
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	3b03      	subs	r3, #3
 800f3ba:	e000      	b.n	800f3be <NVIC_EncodePriority+0x32>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ca:	43da      	mvns	r2, r3
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	401a      	ands	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f3d4:	f04f 31ff 	mov.w	r1, #4294967295
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	fa01 f303 	lsl.w	r3, r1, r3
 800f3de:	43d9      	mvns	r1, r3
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3e4:	4313      	orrs	r3, r2
         );
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3724      	adds	r7, #36	; 0x24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7ff ff4c 	bl	800f298 <__NVIC_SetPriorityGrouping>
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	4603      	mov	r3, r0
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f416:	2300      	movs	r3, #0
 800f418:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f41a:	f7ff ff61 	bl	800f2e0 <__NVIC_GetPriorityGrouping>
 800f41e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	68b9      	ldr	r1, [r7, #8]
 800f424:	6978      	ldr	r0, [r7, #20]
 800f426:	f7ff ffb1 	bl	800f38c <NVIC_EncodePriority>
 800f42a:	4602      	mov	r2, r0
 800f42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff ff80 	bl	800f338 <__NVIC_SetPriority>
}
 800f438:	bf00      	nop
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	4603      	mov	r3, r0
 800f448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff ff54 	bl	800f2fc <__NVIC_EnableIRQ>
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f464:	2300      	movs	r3, #0
 800f466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f468:	f7fe fe7a 	bl	800e160 <HAL_GetTick>
 800f46c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d101      	bne.n	800f478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	e099      	b.n	800f5ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2202      	movs	r2, #2
 800f47c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f022 0201 	bic.w	r2, r2, #1
 800f496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f498:	e00f      	b.n	800f4ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f49a:	f7fe fe61 	bl	800e160 <HAL_GetTick>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	2b05      	cmp	r3, #5
 800f4a6:	d908      	bls.n	800f4ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2220      	movs	r2, #32
 800f4ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2203      	movs	r2, #3
 800f4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	e078      	b.n	800f5ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f003 0301 	and.w	r3, r3, #1
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1e8      	bne.n	800f49a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	4b38      	ldr	r3, [pc, #224]	; (800f5b4 <HAL_DMA_Init+0x158>)
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f4e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f4f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f4fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a1b      	ldr	r3, [r3, #32]
 800f504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f506:	697a      	ldr	r2, [r7, #20]
 800f508:	4313      	orrs	r3, r2
 800f50a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f510:	2b04      	cmp	r3, #4
 800f512:	d107      	bne.n	800f524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51c:	4313      	orrs	r3, r2
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	4313      	orrs	r3, r2
 800f522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	f023 0307 	bic.w	r3, r3, #7
 800f53a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f540:	697a      	ldr	r2, [r7, #20]
 800f542:	4313      	orrs	r3, r2
 800f544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54a:	2b04      	cmp	r3, #4
 800f54c:	d117      	bne.n	800f57e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	4313      	orrs	r3, r2
 800f556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00e      	beq.n	800f57e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fa6f 	bl	800fa44 <DMA_CheckFifoParam>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d008      	beq.n	800f57e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2240      	movs	r2, #64	; 0x40
 800f570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2201      	movs	r2, #1
 800f576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f57a:	2301      	movs	r3, #1
 800f57c:	e016      	b.n	800f5ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	697a      	ldr	r2, [r7, #20]
 800f584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fa26 	bl	800f9d8 <DMA_CalcBaseAndBitshift>
 800f58c:	4603      	mov	r3, r0
 800f58e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f594:	223f      	movs	r2, #63	; 0x3f
 800f596:	409a      	lsls	r2, r3
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	f010803f 	.word	0xf010803f

0800f5b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d101      	bne.n	800f5de <HAL_DMA_Start_IT+0x26>
 800f5da:	2302      	movs	r3, #2
 800f5dc:	e040      	b.n	800f660 <HAL_DMA_Start_IT+0xa8>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d12f      	bne.n	800f652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	68b9      	ldr	r1, [r7, #8]
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f000 f9b8 	bl	800f97c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f610:	223f      	movs	r2, #63	; 0x3f
 800f612:	409a      	lsls	r2, r3
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f042 0216 	orr.w	r2, r2, #22
 800f626:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d007      	beq.n	800f640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f042 0208 	orr.w	r2, r2, #8
 800f63e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f042 0201 	orr.w	r2, r2, #1
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	e005      	b.n	800f65e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f65a:	2302      	movs	r3, #2
 800f65c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f670:	2300      	movs	r3, #0
 800f672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f674:	4b92      	ldr	r3, [pc, #584]	; (800f8c0 <HAL_DMA_IRQHandler+0x258>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a92      	ldr	r2, [pc, #584]	; (800f8c4 <HAL_DMA_IRQHandler+0x25c>)
 800f67a:	fba2 2303 	umull	r2, r3, r2, r3
 800f67e:	0a9b      	lsrs	r3, r3, #10
 800f680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f692:	2208      	movs	r2, #8
 800f694:	409a      	lsls	r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	4013      	ands	r3, r2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d01a      	beq.n	800f6d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f003 0304 	and.w	r3, r3, #4
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d013      	beq.n	800f6d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f022 0204 	bic.w	r2, r2, #4
 800f6ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6c0:	2208      	movs	r2, #8
 800f6c2:	409a      	lsls	r2, r3
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6cc:	f043 0201 	orr.w	r2, r3, #1
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6d8:	2201      	movs	r2, #1
 800f6da:	409a      	lsls	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4013      	ands	r3, r2
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d012      	beq.n	800f70a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00b      	beq.n	800f70a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	409a      	lsls	r2, r3
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f702:	f043 0202 	orr.w	r2, r3, #2
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f70e:	2204      	movs	r2, #4
 800f710:	409a      	lsls	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4013      	ands	r3, r2
 800f716:	2b00      	cmp	r3, #0
 800f718:	d012      	beq.n	800f740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00b      	beq.n	800f740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f72c:	2204      	movs	r2, #4
 800f72e:	409a      	lsls	r2, r3
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f738:	f043 0204 	orr.w	r2, r3, #4
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f744:	2210      	movs	r2, #16
 800f746:	409a      	lsls	r2, r3
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	4013      	ands	r3, r2
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d043      	beq.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f003 0308 	and.w	r3, r3, #8
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d03c      	beq.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f762:	2210      	movs	r2, #16
 800f764:	409a      	lsls	r2, r3
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f774:	2b00      	cmp	r3, #0
 800f776:	d018      	beq.n	800f7aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f782:	2b00      	cmp	r3, #0
 800f784:	d108      	bne.n	800f798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d024      	beq.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	4798      	blx	r3
 800f796:	e01f      	b.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d01b      	beq.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	4798      	blx	r3
 800f7a8:	e016      	b.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d107      	bne.n	800f7c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f022 0208 	bic.w	r2, r2, #8
 800f7c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d003      	beq.n	800f7d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7dc:	2220      	movs	r2, #32
 800f7de:	409a      	lsls	r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 808e 	beq.w	800f906 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f003 0310 	and.w	r3, r3, #16
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 8086 	beq.w	800f906 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7fe:	2220      	movs	r2, #32
 800f800:	409a      	lsls	r2, r3
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b05      	cmp	r3, #5
 800f810:	d136      	bne.n	800f880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f022 0216 	bic.w	r2, r2, #22
 800f820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	695a      	ldr	r2, [r3, #20]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <HAL_DMA_IRQHandler+0x1da>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d007      	beq.n	800f852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f022 0208 	bic.w	r2, r2, #8
 800f850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f856:	223f      	movs	r2, #63	; 0x3f
 800f858:	409a      	lsls	r2, r3
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2201      	movs	r2, #1
 800f862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f872:	2b00      	cmp	r3, #0
 800f874:	d07d      	beq.n	800f972 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	4798      	blx	r3
        }
        return;
 800f87e:	e078      	b.n	800f972 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d01c      	beq.n	800f8c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d108      	bne.n	800f8ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d030      	beq.n	800f906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	4798      	blx	r3
 800f8ac:	e02b      	b.n	800f906 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d027      	beq.n	800f906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	4798      	blx	r3
 800f8be:	e022      	b.n	800f906 <HAL_DMA_IRQHandler+0x29e>
 800f8c0:	20000004 	.word	0x20000004
 800f8c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10f      	bne.n	800f8f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f022 0210 	bic.w	r2, r2, #16
 800f8e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d003      	beq.n	800f906 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d032      	beq.n	800f974 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d022      	beq.n	800f960 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2205      	movs	r2, #5
 800f91e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f022 0201 	bic.w	r2, r2, #1
 800f930:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	3301      	adds	r3, #1
 800f936:	60bb      	str	r3, [r7, #8]
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d307      	bcc.n	800f94e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f003 0301 	and.w	r3, r3, #1
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1f2      	bne.n	800f932 <HAL_DMA_IRQHandler+0x2ca>
 800f94c:	e000      	b.n	800f950 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800f94e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2201      	movs	r2, #1
 800f954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f964:	2b00      	cmp	r3, #0
 800f966:	d005      	beq.n	800f974 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	4798      	blx	r3
 800f970:	e000      	b.n	800f974 <HAL_DMA_IRQHandler+0x30c>
        return;
 800f972:	bf00      	nop
    }
  }
}
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop

0800f97c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	683a      	ldr	r2, [r7, #0]
 800f9a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	2b40      	cmp	r3, #64	; 0x40
 800f9a8:	d108      	bne.n	800f9bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f9ba:	e007      	b.n	800f9cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	60da      	str	r2, [r3, #12]
}
 800f9cc:	bf00      	nop
 800f9ce:	3714      	adds	r7, #20
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	3b10      	subs	r3, #16
 800f9e8:	4a14      	ldr	r2, [pc, #80]	; (800fa3c <DMA_CalcBaseAndBitshift+0x64>)
 800f9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ee:	091b      	lsrs	r3, r3, #4
 800f9f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f9f2:	4a13      	ldr	r2, [pc, #76]	; (800fa40 <DMA_CalcBaseAndBitshift+0x68>)
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d909      	bls.n	800fa1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fa0e:	f023 0303 	bic.w	r3, r3, #3
 800fa12:	1d1a      	adds	r2, r3, #4
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	659a      	str	r2, [r3, #88]	; 0x58
 800fa18:	e007      	b.n	800fa2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	aaaaaaab 	.word	0xaaaaaaab
 800fa40:	08018af0 	.word	0x08018af0

0800fa44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	699b      	ldr	r3, [r3, #24]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d11f      	bne.n	800fa9e <DMA_CheckFifoParam+0x5a>
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d856      	bhi.n	800fb12 <DMA_CheckFifoParam+0xce>
 800fa64:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <DMA_CheckFifoParam+0x28>)
 800fa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6a:	bf00      	nop
 800fa6c:	0800fa7d 	.word	0x0800fa7d
 800fa70:	0800fa8f 	.word	0x0800fa8f
 800fa74:	0800fa7d 	.word	0x0800fa7d
 800fa78:	0800fb13 	.word	0x0800fb13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d046      	beq.n	800fb16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa8c:	e043      	b.n	800fb16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa96:	d140      	bne.n	800fb1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa9c:	e03d      	b.n	800fb1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800faa6:	d121      	bne.n	800faec <DMA_CheckFifoParam+0xa8>
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d837      	bhi.n	800fb1e <DMA_CheckFifoParam+0xda>
 800faae:	a201      	add	r2, pc, #4	; (adr r2, 800fab4 <DMA_CheckFifoParam+0x70>)
 800fab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab4:	0800fac5 	.word	0x0800fac5
 800fab8:	0800facb 	.word	0x0800facb
 800fabc:	0800fac5 	.word	0x0800fac5
 800fac0:	0800fadd 	.word	0x0800fadd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	73fb      	strb	r3, [r7, #15]
      break;
 800fac8:	e030      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800face:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d025      	beq.n	800fb22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fad6:	2301      	movs	r3, #1
 800fad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fada:	e022      	b.n	800fb22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fae4:	d11f      	bne.n	800fb26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fae6:	2301      	movs	r3, #1
 800fae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800faea:	e01c      	b.n	800fb26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d903      	bls.n	800fafa <DMA_CheckFifoParam+0xb6>
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	d003      	beq.n	800fb00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800faf8:	e018      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fafa:	2301      	movs	r3, #1
 800fafc:	73fb      	strb	r3, [r7, #15]
      break;
 800fafe:	e015      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00e      	beq.n	800fb2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb10:	e00b      	b.n	800fb2a <DMA_CheckFifoParam+0xe6>
      break;
 800fb12:	bf00      	nop
 800fb14:	e00a      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;
 800fb16:	bf00      	nop
 800fb18:	e008      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;
 800fb1a:	bf00      	nop
 800fb1c:	e006      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;
 800fb1e:	bf00      	nop
 800fb20:	e004      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;
 800fb22:	bf00      	nop
 800fb24:	e002      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;   
 800fb26:	bf00      	nop
 800fb28:	e000      	b.n	800fb2c <DMA_CheckFifoParam+0xe8>
      break;
 800fb2a:	bf00      	nop
    }
  } 
  
  return status; 
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3714      	adds	r7, #20
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop

0800fb3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b089      	sub	sp, #36	; 0x24
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fb46:	2300      	movs	r3, #0
 800fb48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb52:	2300      	movs	r3, #0
 800fb54:	61fb      	str	r3, [r7, #28]
 800fb56:	e16b      	b.n	800fe30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fb58:	2201      	movs	r2, #1
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	697a      	ldr	r2, [r7, #20]
 800fb68:	4013      	ands	r3, r2
 800fb6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	f040 815a 	bne.w	800fe2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	f003 0303 	and.w	r3, r3, #3
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d005      	beq.n	800fb8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	d130      	bne.n	800fbf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	2203      	movs	r2, #3
 800fb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb9e:	43db      	mvns	r3, r3
 800fba0:	69ba      	ldr	r2, [r7, #24]
 800fba2:	4013      	ands	r3, r2
 800fba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	68da      	ldr	r2, [r3, #12]
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	fa02 f303 	lsl.w	r3, r2, r3
 800fbb2:	69ba      	ldr	r2, [r7, #24]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	69ba      	ldr	r2, [r7, #24]
 800fbbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbcc:	43db      	mvns	r3, r3
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	091b      	lsrs	r3, r3, #4
 800fbda:	f003 0201 	and.w	r2, r3, #1
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe4:	69ba      	ldr	r2, [r7, #24]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	f003 0303 	and.w	r3, r3, #3
 800fbf8:	2b03      	cmp	r3, #3
 800fbfa:	d017      	beq.n	800fc2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	005b      	lsls	r3, r3, #1
 800fc06:	2203      	movs	r2, #3
 800fc08:	fa02 f303 	lsl.w	r3, r2, r3
 800fc0c:	43db      	mvns	r3, r3
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	4013      	ands	r3, r2
 800fc12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc20:	69ba      	ldr	r2, [r7, #24]
 800fc22:	4313      	orrs	r3, r2
 800fc24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	f003 0303 	and.w	r3, r3, #3
 800fc34:	2b02      	cmp	r3, #2
 800fc36:	d123      	bne.n	800fc80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	08da      	lsrs	r2, r3, #3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	3208      	adds	r2, #8
 800fc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	f003 0307 	and.w	r3, r3, #7
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	220f      	movs	r2, #15
 800fc50:	fa02 f303 	lsl.w	r3, r2, r3
 800fc54:	43db      	mvns	r3, r3
 800fc56:	69ba      	ldr	r2, [r7, #24]
 800fc58:	4013      	ands	r3, r2
 800fc5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	691a      	ldr	r2, [r3, #16]
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	f003 0307 	and.w	r3, r3, #7
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	fa02 f303 	lsl.w	r3, r2, r3
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	08da      	lsrs	r2, r3, #3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	3208      	adds	r2, #8
 800fc7a:	69b9      	ldr	r1, [r7, #24]
 800fc7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	2203      	movs	r2, #3
 800fc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc90:	43db      	mvns	r3, r3
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	4013      	ands	r3, r2
 800fc96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	f003 0203 	and.w	r2, r3, #3
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	005b      	lsls	r3, r3, #1
 800fca4:	fa02 f303 	lsl.w	r3, r2, r3
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	69ba      	ldr	r2, [r7, #24]
 800fcb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 80b4 	beq.w	800fe2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	4b60      	ldr	r3, [pc, #384]	; (800fe48 <HAL_GPIO_Init+0x30c>)
 800fcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcca:	4a5f      	ldr	r2, [pc, #380]	; (800fe48 <HAL_GPIO_Init+0x30c>)
 800fccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fcd0:	6453      	str	r3, [r2, #68]	; 0x44
 800fcd2:	4b5d      	ldr	r3, [pc, #372]	; (800fe48 <HAL_GPIO_Init+0x30c>)
 800fcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fcde:	4a5b      	ldr	r2, [pc, #364]	; (800fe4c <HAL_GPIO_Init+0x310>)
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	089b      	lsrs	r3, r3, #2
 800fce4:	3302      	adds	r3, #2
 800fce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	f003 0303 	and.w	r3, r3, #3
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	220f      	movs	r2, #15
 800fcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800fcfa:	43db      	mvns	r3, r3
 800fcfc:	69ba      	ldr	r2, [r7, #24]
 800fcfe:	4013      	ands	r3, r2
 800fd00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4a52      	ldr	r2, [pc, #328]	; (800fe50 <HAL_GPIO_Init+0x314>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d02b      	beq.n	800fd62 <HAL_GPIO_Init+0x226>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4a51      	ldr	r2, [pc, #324]	; (800fe54 <HAL_GPIO_Init+0x318>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d025      	beq.n	800fd5e <HAL_GPIO_Init+0x222>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4a50      	ldr	r2, [pc, #320]	; (800fe58 <HAL_GPIO_Init+0x31c>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d01f      	beq.n	800fd5a <HAL_GPIO_Init+0x21e>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4a4f      	ldr	r2, [pc, #316]	; (800fe5c <HAL_GPIO_Init+0x320>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d019      	beq.n	800fd56 <HAL_GPIO_Init+0x21a>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4a4e      	ldr	r2, [pc, #312]	; (800fe60 <HAL_GPIO_Init+0x324>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d013      	beq.n	800fd52 <HAL_GPIO_Init+0x216>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4a4d      	ldr	r2, [pc, #308]	; (800fe64 <HAL_GPIO_Init+0x328>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d00d      	beq.n	800fd4e <HAL_GPIO_Init+0x212>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4a4c      	ldr	r2, [pc, #304]	; (800fe68 <HAL_GPIO_Init+0x32c>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d007      	beq.n	800fd4a <HAL_GPIO_Init+0x20e>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4a4b      	ldr	r2, [pc, #300]	; (800fe6c <HAL_GPIO_Init+0x330>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d101      	bne.n	800fd46 <HAL_GPIO_Init+0x20a>
 800fd42:	2307      	movs	r3, #7
 800fd44:	e00e      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd46:	2308      	movs	r3, #8
 800fd48:	e00c      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd4a:	2306      	movs	r3, #6
 800fd4c:	e00a      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd4e:	2305      	movs	r3, #5
 800fd50:	e008      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd52:	2304      	movs	r3, #4
 800fd54:	e006      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd56:	2303      	movs	r3, #3
 800fd58:	e004      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd5a:	2302      	movs	r3, #2
 800fd5c:	e002      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd5e:	2301      	movs	r3, #1
 800fd60:	e000      	b.n	800fd64 <HAL_GPIO_Init+0x228>
 800fd62:	2300      	movs	r3, #0
 800fd64:	69fa      	ldr	r2, [r7, #28]
 800fd66:	f002 0203 	and.w	r2, r2, #3
 800fd6a:	0092      	lsls	r2, r2, #2
 800fd6c:	4093      	lsls	r3, r2
 800fd6e:	69ba      	ldr	r2, [r7, #24]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fd74:	4935      	ldr	r1, [pc, #212]	; (800fe4c <HAL_GPIO_Init+0x310>)
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	089b      	lsrs	r3, r3, #2
 800fd7a:	3302      	adds	r3, #2
 800fd7c:	69ba      	ldr	r2, [r7, #24]
 800fd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fd82:	4b3b      	ldr	r3, [pc, #236]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	43db      	mvns	r3, r3
 800fd8c:	69ba      	ldr	r2, [r7, #24]
 800fd8e:	4013      	ands	r3, r2
 800fd90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800fd9e:	69ba      	ldr	r2, [r7, #24]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fda6:	4a32      	ldr	r2, [pc, #200]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fdac:	4b30      	ldr	r3, [pc, #192]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	43db      	mvns	r3, r3
 800fdb6:	69ba      	ldr	r2, [r7, #24]
 800fdb8:	4013      	ands	r3, r2
 800fdba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d003      	beq.n	800fdd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800fdc8:	69ba      	ldr	r2, [r7, #24]
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fdd0:	4a27      	ldr	r2, [pc, #156]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fdd6:	4b26      	ldr	r3, [pc, #152]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	43db      	mvns	r3, r3
 800fde0:	69ba      	ldr	r2, [r7, #24]
 800fde2:	4013      	ands	r3, r2
 800fde4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800fdf2:	69ba      	ldr	r2, [r7, #24]
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800fdfa:	4a1d      	ldr	r2, [pc, #116]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fe00:	4b1b      	ldr	r3, [pc, #108]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	43db      	mvns	r3, r3
 800fe0a:	69ba      	ldr	r2, [r7, #24]
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d003      	beq.n	800fe24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800fe1c:	69ba      	ldr	r2, [r7, #24]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fe24:	4a12      	ldr	r2, [pc, #72]	; (800fe70 <HAL_GPIO_Init+0x334>)
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	61fb      	str	r3, [r7, #28]
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	2b0f      	cmp	r3, #15
 800fe34:	f67f ae90 	bls.w	800fb58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fe38:	bf00      	nop
 800fe3a:	bf00      	nop
 800fe3c:	3724      	adds	r7, #36	; 0x24
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	40023800 	.word	0x40023800
 800fe4c:	40013800 	.word	0x40013800
 800fe50:	40020000 	.word	0x40020000
 800fe54:	40020400 	.word	0x40020400
 800fe58:	40020800 	.word	0x40020800
 800fe5c:	40020c00 	.word	0x40020c00
 800fe60:	40021000 	.word	0x40021000
 800fe64:	40021400 	.word	0x40021400
 800fe68:	40021800 	.word	0x40021800
 800fe6c:	40021c00 	.word	0x40021c00
 800fe70:	40013c00 	.word	0x40013c00

0800fe74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	691a      	ldr	r2, [r3, #16]
 800fe84:	887b      	ldrh	r3, [r7, #2]
 800fe86:	4013      	ands	r3, r2
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	73fb      	strb	r3, [r7, #15]
 800fe90:	e001      	b.n	800fe96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fe92:	2300      	movs	r3, #0
 800fe94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fe96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3714      	adds	r7, #20
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	807b      	strh	r3, [r7, #2]
 800feb0:	4613      	mov	r3, r2
 800feb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800feb4:	787b      	ldrb	r3, [r7, #1]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800feba:	887a      	ldrh	r2, [r7, #2]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800fec0:	e003      	b.n	800feca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fec2:	887b      	ldrh	r3, [r7, #2]
 800fec4:	041a      	lsls	r2, r3, #16
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	619a      	str	r2, [r3, #24]
}
 800feca:	bf00      	nop
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b084      	sub	sp, #16
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d101      	bne.n	800fee8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800fee4:	2301      	movs	r3, #1
 800fee6:	e034      	b.n	800ff52 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800fef0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f245 5255 	movw	r2, #21845	; 0x5555
 800fefa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	6852      	ldr	r2, [r2, #4]
 800ff04:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	6892      	ldr	r2, [r2, #8]
 800ff0e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ff10:	f7fe f926 	bl	800e160 <HAL_GetTick>
 800ff14:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ff16:	e00f      	b.n	800ff38 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ff18:	f7fe f922 	bl	800e160 <HAL_GetTick>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	2b31      	cmp	r3, #49	; 0x31
 800ff24:	d908      	bls.n	800ff38 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	f003 0303 	and.w	r3, r3, #3
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ff34:	2303      	movs	r3, #3
 800ff36:	e00c      	b.n	800ff52 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	f003 0303 	and.w	r3, r3, #3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1e8      	bne.n	800ff18 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ff4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b083      	sub	sp, #12
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ff6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
	...

0800ff7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d101      	bne.n	800ff8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e264      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 0301 	and.w	r3, r3, #1
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d075      	beq.n	8010086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ff9a:	4ba3      	ldr	r3, [pc, #652]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	f003 030c 	and.w	r3, r3, #12
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d00c      	beq.n	800ffc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ffa6:	4ba0      	ldr	r3, [pc, #640]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ffae:	2b08      	cmp	r3, #8
 800ffb0:	d112      	bne.n	800ffd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ffb2:	4b9d      	ldr	r3, [pc, #628]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ffbe:	d10b      	bne.n	800ffd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ffc0:	4b99      	ldr	r3, [pc, #612]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d05b      	beq.n	8010084 <HAL_RCC_OscConfig+0x108>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d157      	bne.n	8010084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e23f      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffe0:	d106      	bne.n	800fff0 <HAL_RCC_OscConfig+0x74>
 800ffe2:	4b91      	ldr	r3, [pc, #580]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a90      	ldr	r2, [pc, #576]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800ffe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffec:	6013      	str	r3, [r2, #0]
 800ffee:	e01d      	b.n	801002c <HAL_RCC_OscConfig+0xb0>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fff8:	d10c      	bne.n	8010014 <HAL_RCC_OscConfig+0x98>
 800fffa:	4b8b      	ldr	r3, [pc, #556]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4a8a      	ldr	r2, [pc, #552]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010004:	6013      	str	r3, [r2, #0]
 8010006:	4b88      	ldr	r3, [pc, #544]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a87      	ldr	r2, [pc, #540]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 801000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010010:	6013      	str	r3, [r2, #0]
 8010012:	e00b      	b.n	801002c <HAL_RCC_OscConfig+0xb0>
 8010014:	4b84      	ldr	r3, [pc, #528]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a83      	ldr	r2, [pc, #524]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 801001a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801001e:	6013      	str	r3, [r2, #0]
 8010020:	4b81      	ldr	r3, [pc, #516]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a80      	ldr	r2, [pc, #512]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801002a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d013      	beq.n	801005c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010034:	f7fe f894 	bl	800e160 <HAL_GetTick>
 8010038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801003a:	e008      	b.n	801004e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801003c:	f7fe f890 	bl	800e160 <HAL_GetTick>
 8010040:	4602      	mov	r2, r0
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	2b64      	cmp	r3, #100	; 0x64
 8010048:	d901      	bls.n	801004e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801004a:	2303      	movs	r3, #3
 801004c:	e204      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801004e:	4b76      	ldr	r3, [pc, #472]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0f0      	beq.n	801003c <HAL_RCC_OscConfig+0xc0>
 801005a:	e014      	b.n	8010086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801005c:	f7fe f880 	bl	800e160 <HAL_GetTick>
 8010060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010062:	e008      	b.n	8010076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010064:	f7fe f87c 	bl	800e160 <HAL_GetTick>
 8010068:	4602      	mov	r2, r0
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	2b64      	cmp	r3, #100	; 0x64
 8010070:	d901      	bls.n	8010076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010072:	2303      	movs	r3, #3
 8010074:	e1f0      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010076:	4b6c      	ldr	r3, [pc, #432]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1f0      	bne.n	8010064 <HAL_RCC_OscConfig+0xe8>
 8010082:	e000      	b.n	8010086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f003 0302 	and.w	r3, r3, #2
 801008e:	2b00      	cmp	r3, #0
 8010090:	d063      	beq.n	801015a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010092:	4b65      	ldr	r3, [pc, #404]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	f003 030c 	and.w	r3, r3, #12
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00b      	beq.n	80100b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801009e:	4b62      	ldr	r3, [pc, #392]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80100a6:	2b08      	cmp	r3, #8
 80100a8:	d11c      	bne.n	80100e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80100aa:	4b5f      	ldr	r3, [pc, #380]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d116      	bne.n	80100e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100b6:	4b5c      	ldr	r3, [pc, #368]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f003 0302 	and.w	r3, r3, #2
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d005      	beq.n	80100ce <HAL_RCC_OscConfig+0x152>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d001      	beq.n	80100ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e1c4      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80100ce:	4b56      	ldr	r3, [pc, #344]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	00db      	lsls	r3, r3, #3
 80100dc:	4952      	ldr	r1, [pc, #328]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80100de:	4313      	orrs	r3, r2
 80100e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100e2:	e03a      	b.n	801015a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d020      	beq.n	801012e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80100ec:	4b4f      	ldr	r3, [pc, #316]	; (801022c <HAL_RCC_OscConfig+0x2b0>)
 80100ee:	2201      	movs	r2, #1
 80100f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100f2:	f7fe f835 	bl	800e160 <HAL_GetTick>
 80100f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80100f8:	e008      	b.n	801010c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80100fa:	f7fe f831 	bl	800e160 <HAL_GetTick>
 80100fe:	4602      	mov	r2, r0
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	2b02      	cmp	r3, #2
 8010106:	d901      	bls.n	801010c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010108:	2303      	movs	r3, #3
 801010a:	e1a5      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801010c:	4b46      	ldr	r3, [pc, #280]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f003 0302 	and.w	r3, r3, #2
 8010114:	2b00      	cmp	r3, #0
 8010116:	d0f0      	beq.n	80100fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010118:	4b43      	ldr	r3, [pc, #268]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	4940      	ldr	r1, [pc, #256]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010128:	4313      	orrs	r3, r2
 801012a:	600b      	str	r3, [r1, #0]
 801012c:	e015      	b.n	801015a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801012e:	4b3f      	ldr	r3, [pc, #252]	; (801022c <HAL_RCC_OscConfig+0x2b0>)
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010134:	f7fe f814 	bl	800e160 <HAL_GetTick>
 8010138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801013a:	e008      	b.n	801014e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801013c:	f7fe f810 	bl	800e160 <HAL_GetTick>
 8010140:	4602      	mov	r2, r0
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	2b02      	cmp	r3, #2
 8010148:	d901      	bls.n	801014e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801014a:	2303      	movs	r3, #3
 801014c:	e184      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801014e:	4b36      	ldr	r3, [pc, #216]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1f0      	bne.n	801013c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f003 0308 	and.w	r3, r3, #8
 8010162:	2b00      	cmp	r3, #0
 8010164:	d030      	beq.n	80101c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d016      	beq.n	801019c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801016e:	4b30      	ldr	r3, [pc, #192]	; (8010230 <HAL_RCC_OscConfig+0x2b4>)
 8010170:	2201      	movs	r2, #1
 8010172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010174:	f7fd fff4 	bl	800e160 <HAL_GetTick>
 8010178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801017a:	e008      	b.n	801018e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801017c:	f7fd fff0 	bl	800e160 <HAL_GetTick>
 8010180:	4602      	mov	r2, r0
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	2b02      	cmp	r3, #2
 8010188:	d901      	bls.n	801018e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801018a:	2303      	movs	r3, #3
 801018c:	e164      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801018e:	4b26      	ldr	r3, [pc, #152]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 8010190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010192:	f003 0302 	and.w	r3, r3, #2
 8010196:	2b00      	cmp	r3, #0
 8010198:	d0f0      	beq.n	801017c <HAL_RCC_OscConfig+0x200>
 801019a:	e015      	b.n	80101c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801019c:	4b24      	ldr	r3, [pc, #144]	; (8010230 <HAL_RCC_OscConfig+0x2b4>)
 801019e:	2200      	movs	r2, #0
 80101a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80101a2:	f7fd ffdd 	bl	800e160 <HAL_GetTick>
 80101a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80101a8:	e008      	b.n	80101bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101aa:	f7fd ffd9 	bl	800e160 <HAL_GetTick>
 80101ae:	4602      	mov	r2, r0
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d901      	bls.n	80101bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80101b8:	2303      	movs	r3, #3
 80101ba:	e14d      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80101bc:	4b1a      	ldr	r3, [pc, #104]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80101be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101c0:	f003 0302 	and.w	r3, r3, #2
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1f0      	bne.n	80101aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 80a0 	beq.w	8010316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80101d6:	2300      	movs	r3, #0
 80101d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80101da:	4b13      	ldr	r3, [pc, #76]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80101dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10f      	bne.n	8010206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80101e6:	2300      	movs	r3, #0
 80101e8:	60bb      	str	r3, [r7, #8]
 80101ea:	4b0f      	ldr	r3, [pc, #60]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80101ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ee:	4a0e      	ldr	r2, [pc, #56]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80101f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101f4:	6413      	str	r3, [r2, #64]	; 0x40
 80101f6:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <HAL_RCC_OscConfig+0x2ac>)
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101fe:	60bb      	str	r3, [r7, #8]
 8010200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010202:	2301      	movs	r3, #1
 8010204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010206:	4b0b      	ldr	r3, [pc, #44]	; (8010234 <HAL_RCC_OscConfig+0x2b8>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020e:	2b00      	cmp	r3, #0
 8010210:	d121      	bne.n	8010256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010212:	4b08      	ldr	r3, [pc, #32]	; (8010234 <HAL_RCC_OscConfig+0x2b8>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a07      	ldr	r2, [pc, #28]	; (8010234 <HAL_RCC_OscConfig+0x2b8>)
 8010218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801021c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801021e:	f7fd ff9f 	bl	800e160 <HAL_GetTick>
 8010222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010224:	e011      	b.n	801024a <HAL_RCC_OscConfig+0x2ce>
 8010226:	bf00      	nop
 8010228:	40023800 	.word	0x40023800
 801022c:	42470000 	.word	0x42470000
 8010230:	42470e80 	.word	0x42470e80
 8010234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010238:	f7fd ff92 	bl	800e160 <HAL_GetTick>
 801023c:	4602      	mov	r2, r0
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	2b02      	cmp	r3, #2
 8010244:	d901      	bls.n	801024a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010246:	2303      	movs	r3, #3
 8010248:	e106      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801024a:	4b85      	ldr	r3, [pc, #532]	; (8010460 <HAL_RCC_OscConfig+0x4e4>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0f0      	beq.n	8010238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d106      	bne.n	801026c <HAL_RCC_OscConfig+0x2f0>
 801025e:	4b81      	ldr	r3, [pc, #516]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010262:	4a80      	ldr	r2, [pc, #512]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010264:	f043 0301 	orr.w	r3, r3, #1
 8010268:	6713      	str	r3, [r2, #112]	; 0x70
 801026a:	e01c      	b.n	80102a6 <HAL_RCC_OscConfig+0x32a>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	2b05      	cmp	r3, #5
 8010272:	d10c      	bne.n	801028e <HAL_RCC_OscConfig+0x312>
 8010274:	4b7b      	ldr	r3, [pc, #492]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010278:	4a7a      	ldr	r2, [pc, #488]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 801027a:	f043 0304 	orr.w	r3, r3, #4
 801027e:	6713      	str	r3, [r2, #112]	; 0x70
 8010280:	4b78      	ldr	r3, [pc, #480]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010284:	4a77      	ldr	r2, [pc, #476]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010286:	f043 0301 	orr.w	r3, r3, #1
 801028a:	6713      	str	r3, [r2, #112]	; 0x70
 801028c:	e00b      	b.n	80102a6 <HAL_RCC_OscConfig+0x32a>
 801028e:	4b75      	ldr	r3, [pc, #468]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010292:	4a74      	ldr	r2, [pc, #464]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010294:	f023 0301 	bic.w	r3, r3, #1
 8010298:	6713      	str	r3, [r2, #112]	; 0x70
 801029a:	4b72      	ldr	r3, [pc, #456]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 801029c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801029e:	4a71      	ldr	r2, [pc, #452]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80102a0:	f023 0304 	bic.w	r3, r3, #4
 80102a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d015      	beq.n	80102da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102ae:	f7fd ff57 	bl	800e160 <HAL_GetTick>
 80102b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102b4:	e00a      	b.n	80102cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102b6:	f7fd ff53 	bl	800e160 <HAL_GetTick>
 80102ba:	4602      	mov	r2, r0
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d901      	bls.n	80102cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80102c8:	2303      	movs	r3, #3
 80102ca:	e0c5      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102cc:	4b65      	ldr	r3, [pc, #404]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80102ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d0:	f003 0302 	and.w	r3, r3, #2
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d0ee      	beq.n	80102b6 <HAL_RCC_OscConfig+0x33a>
 80102d8:	e014      	b.n	8010304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102da:	f7fd ff41 	bl	800e160 <HAL_GetTick>
 80102de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102e0:	e00a      	b.n	80102f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102e2:	f7fd ff3d 	bl	800e160 <HAL_GetTick>
 80102e6:	4602      	mov	r2, r0
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d901      	bls.n	80102f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80102f4:	2303      	movs	r3, #3
 80102f6:	e0af      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102f8:	4b5a      	ldr	r3, [pc, #360]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80102fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102fc:	f003 0302 	and.w	r3, r3, #2
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1ee      	bne.n	80102e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d105      	bne.n	8010316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801030a:	4b56      	ldr	r3, [pc, #344]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 801030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801030e:	4a55      	ldr	r2, [pc, #340]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 809b 	beq.w	8010456 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010320:	4b50      	ldr	r3, [pc, #320]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	f003 030c 	and.w	r3, r3, #12
 8010328:	2b08      	cmp	r3, #8
 801032a:	d05c      	beq.n	80103e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d141      	bne.n	80103b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010334:	4b4c      	ldr	r3, [pc, #304]	; (8010468 <HAL_RCC_OscConfig+0x4ec>)
 8010336:	2200      	movs	r2, #0
 8010338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801033a:	f7fd ff11 	bl	800e160 <HAL_GetTick>
 801033e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010340:	e008      	b.n	8010354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010342:	f7fd ff0d 	bl	800e160 <HAL_GetTick>
 8010346:	4602      	mov	r2, r0
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	2b02      	cmp	r3, #2
 801034e:	d901      	bls.n	8010354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010350:	2303      	movs	r3, #3
 8010352:	e081      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010354:	4b43      	ldr	r3, [pc, #268]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1f0      	bne.n	8010342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	69da      	ldr	r2, [r3, #28]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a1b      	ldr	r3, [r3, #32]
 8010368:	431a      	orrs	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036e:	019b      	lsls	r3, r3, #6
 8010370:	431a      	orrs	r2, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010376:	085b      	lsrs	r3, r3, #1
 8010378:	3b01      	subs	r3, #1
 801037a:	041b      	lsls	r3, r3, #16
 801037c:	431a      	orrs	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010382:	061b      	lsls	r3, r3, #24
 8010384:	4937      	ldr	r1, [pc, #220]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 8010386:	4313      	orrs	r3, r2
 8010388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801038a:	4b37      	ldr	r3, [pc, #220]	; (8010468 <HAL_RCC_OscConfig+0x4ec>)
 801038c:	2201      	movs	r2, #1
 801038e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010390:	f7fd fee6 	bl	800e160 <HAL_GetTick>
 8010394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010396:	e008      	b.n	80103aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010398:	f7fd fee2 	bl	800e160 <HAL_GetTick>
 801039c:	4602      	mov	r2, r0
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d901      	bls.n	80103aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80103a6:	2303      	movs	r3, #3
 80103a8:	e056      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103aa:	4b2e      	ldr	r3, [pc, #184]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d0f0      	beq.n	8010398 <HAL_RCC_OscConfig+0x41c>
 80103b6:	e04e      	b.n	8010456 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103b8:	4b2b      	ldr	r3, [pc, #172]	; (8010468 <HAL_RCC_OscConfig+0x4ec>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103be:	f7fd fecf 	bl	800e160 <HAL_GetTick>
 80103c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80103c4:	e008      	b.n	80103d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80103c6:	f7fd fecb 	bl	800e160 <HAL_GetTick>
 80103ca:	4602      	mov	r2, r0
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d901      	bls.n	80103d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80103d4:	2303      	movs	r3, #3
 80103d6:	e03f      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80103d8:	4b22      	ldr	r3, [pc, #136]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1f0      	bne.n	80103c6 <HAL_RCC_OscConfig+0x44a>
 80103e4:	e037      	b.n	8010456 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	699b      	ldr	r3, [r3, #24]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d101      	bne.n	80103f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80103ee:	2301      	movs	r3, #1
 80103f0:	e032      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80103f2:	4b1c      	ldr	r3, [pc, #112]	; (8010464 <HAL_RCC_OscConfig+0x4e8>)
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	699b      	ldr	r3, [r3, #24]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d028      	beq.n	8010452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801040a:	429a      	cmp	r2, r3
 801040c:	d121      	bne.n	8010452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010418:	429a      	cmp	r2, r3
 801041a:	d11a      	bne.n	8010452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010422:	4013      	ands	r3, r2
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010428:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801042a:	4293      	cmp	r3, r2
 801042c:	d111      	bne.n	8010452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010438:	085b      	lsrs	r3, r3, #1
 801043a:	3b01      	subs	r3, #1
 801043c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801043e:	429a      	cmp	r2, r3
 8010440:	d107      	bne.n	8010452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801044e:	429a      	cmp	r2, r3
 8010450:	d001      	beq.n	8010456 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8010452:	2301      	movs	r3, #1
 8010454:	e000      	b.n	8010458 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8010456:	2300      	movs	r3, #0
}
 8010458:	4618      	mov	r0, r3
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	40007000 	.word	0x40007000
 8010464:	40023800 	.word	0x40023800
 8010468:	42470060 	.word	0x42470060

0801046c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d101      	bne.n	8010480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801047c:	2301      	movs	r3, #1
 801047e:	e0cc      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010480:	4b68      	ldr	r3, [pc, #416]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f003 0307 	and.w	r3, r3, #7
 8010488:	683a      	ldr	r2, [r7, #0]
 801048a:	429a      	cmp	r2, r3
 801048c:	d90c      	bls.n	80104a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801048e:	4b65      	ldr	r3, [pc, #404]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010496:	4b63      	ldr	r3, [pc, #396]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f003 0307 	and.w	r3, r3, #7
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d001      	beq.n	80104a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	e0b8      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f003 0302 	and.w	r3, r3, #2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d020      	beq.n	80104f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f003 0304 	and.w	r3, r3, #4
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d005      	beq.n	80104cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80104c0:	4b59      	ldr	r3, [pc, #356]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	4a58      	ldr	r2, [pc, #352]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80104ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 0308 	and.w	r3, r3, #8
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d005      	beq.n	80104e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80104d8:	4b53      	ldr	r3, [pc, #332]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104da:	689b      	ldr	r3, [r3, #8]
 80104dc:	4a52      	ldr	r2, [pc, #328]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80104e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80104e4:	4b50      	ldr	r3, [pc, #320]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	494d      	ldr	r1, [pc, #308]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80104f2:	4313      	orrs	r3, r2
 80104f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f003 0301 	and.w	r3, r3, #1
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d044      	beq.n	801058c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	2b01      	cmp	r3, #1
 8010508:	d107      	bne.n	801051a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801050a:	4b47      	ldr	r3, [pc, #284]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010512:	2b00      	cmp	r3, #0
 8010514:	d119      	bne.n	801054a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010516:	2301      	movs	r3, #1
 8010518:	e07f      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	2b02      	cmp	r3, #2
 8010520:	d003      	beq.n	801052a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010526:	2b03      	cmp	r3, #3
 8010528:	d107      	bne.n	801053a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801052a:	4b3f      	ldr	r3, [pc, #252]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d109      	bne.n	801054a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010536:	2301      	movs	r3, #1
 8010538:	e06f      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801053a:	4b3b      	ldr	r3, [pc, #236]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 0302 	and.w	r3, r3, #2
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010546:	2301      	movs	r3, #1
 8010548:	e067      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801054a:	4b37      	ldr	r3, [pc, #220]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	f023 0203 	bic.w	r2, r3, #3
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	4934      	ldr	r1, [pc, #208]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 8010558:	4313      	orrs	r3, r2
 801055a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801055c:	f7fd fe00 	bl	800e160 <HAL_GetTick>
 8010560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010562:	e00a      	b.n	801057a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010564:	f7fd fdfc 	bl	800e160 <HAL_GetTick>
 8010568:	4602      	mov	r2, r0
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010572:	4293      	cmp	r3, r2
 8010574:	d901      	bls.n	801057a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010576:	2303      	movs	r3, #3
 8010578:	e04f      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801057a:	4b2b      	ldr	r3, [pc, #172]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f003 020c 	and.w	r2, r3, #12
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	429a      	cmp	r2, r3
 801058a:	d1eb      	bne.n	8010564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801058c:	4b25      	ldr	r3, [pc, #148]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f003 0307 	and.w	r3, r3, #7
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d20c      	bcs.n	80105b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801059a:	4b22      	ldr	r3, [pc, #136]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	b2d2      	uxtb	r2, r2
 80105a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105a2:	4b20      	ldr	r3, [pc, #128]	; (8010624 <HAL_RCC_ClockConfig+0x1b8>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f003 0307 	and.w	r3, r3, #7
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d001      	beq.n	80105b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80105b0:	2301      	movs	r3, #1
 80105b2:	e032      	b.n	801061a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f003 0304 	and.w	r3, r3, #4
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d008      	beq.n	80105d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80105c0:	4b19      	ldr	r3, [pc, #100]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	4916      	ldr	r1, [pc, #88]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80105ce:	4313      	orrs	r3, r2
 80105d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 0308 	and.w	r3, r3, #8
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d009      	beq.n	80105f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80105de:	4b12      	ldr	r3, [pc, #72]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	490e      	ldr	r1, [pc, #56]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80105ee:	4313      	orrs	r3, r2
 80105f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80105f2:	f000 f821 	bl	8010638 <HAL_RCC_GetSysClockFreq>
 80105f6:	4602      	mov	r2, r0
 80105f8:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <HAL_RCC_ClockConfig+0x1bc>)
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	091b      	lsrs	r3, r3, #4
 80105fe:	f003 030f 	and.w	r3, r3, #15
 8010602:	490a      	ldr	r1, [pc, #40]	; (801062c <HAL_RCC_ClockConfig+0x1c0>)
 8010604:	5ccb      	ldrb	r3, [r1, r3]
 8010606:	fa22 f303 	lsr.w	r3, r2, r3
 801060a:	4a09      	ldr	r2, [pc, #36]	; (8010630 <HAL_RCC_ClockConfig+0x1c4>)
 801060c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801060e:	4b09      	ldr	r3, [pc, #36]	; (8010634 <HAL_RCC_ClockConfig+0x1c8>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4618      	mov	r0, r3
 8010614:	f7f2 fdaa 	bl	800316c <HAL_InitTick>

  return HAL_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	40023c00 	.word	0x40023c00
 8010628:	40023800 	.word	0x40023800
 801062c:	08018ab8 	.word	0x08018ab8
 8010630:	20000004 	.word	0x20000004
 8010634:	200012e8 	.word	0x200012e8

08010638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010638:	b5b0      	push	{r4, r5, r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801063e:	2100      	movs	r1, #0
 8010640:	6079      	str	r1, [r7, #4]
 8010642:	2100      	movs	r1, #0
 8010644:	60f9      	str	r1, [r7, #12]
 8010646:	2100      	movs	r1, #0
 8010648:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801064a:	2100      	movs	r1, #0
 801064c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801064e:	4952      	ldr	r1, [pc, #328]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 8010650:	6889      	ldr	r1, [r1, #8]
 8010652:	f001 010c 	and.w	r1, r1, #12
 8010656:	2908      	cmp	r1, #8
 8010658:	d00d      	beq.n	8010676 <HAL_RCC_GetSysClockFreq+0x3e>
 801065a:	2908      	cmp	r1, #8
 801065c:	f200 8094 	bhi.w	8010788 <HAL_RCC_GetSysClockFreq+0x150>
 8010660:	2900      	cmp	r1, #0
 8010662:	d002      	beq.n	801066a <HAL_RCC_GetSysClockFreq+0x32>
 8010664:	2904      	cmp	r1, #4
 8010666:	d003      	beq.n	8010670 <HAL_RCC_GetSysClockFreq+0x38>
 8010668:	e08e      	b.n	8010788 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801066a:	4b4c      	ldr	r3, [pc, #304]	; (801079c <HAL_RCC_GetSysClockFreq+0x164>)
 801066c:	60bb      	str	r3, [r7, #8]
       break;
 801066e:	e08e      	b.n	801078e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010670:	4b4b      	ldr	r3, [pc, #300]	; (80107a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8010672:	60bb      	str	r3, [r7, #8]
      break;
 8010674:	e08b      	b.n	801078e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010676:	4948      	ldr	r1, [pc, #288]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 8010678:	6849      	ldr	r1, [r1, #4]
 801067a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801067e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010680:	4945      	ldr	r1, [pc, #276]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 8010682:	6849      	ldr	r1, [r1, #4]
 8010684:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8010688:	2900      	cmp	r1, #0
 801068a:	d024      	beq.n	80106d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801068c:	4942      	ldr	r1, [pc, #264]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 801068e:	6849      	ldr	r1, [r1, #4]
 8010690:	0989      	lsrs	r1, r1, #6
 8010692:	4608      	mov	r0, r1
 8010694:	f04f 0100 	mov.w	r1, #0
 8010698:	f240 14ff 	movw	r4, #511	; 0x1ff
 801069c:	f04f 0500 	mov.w	r5, #0
 80106a0:	ea00 0204 	and.w	r2, r0, r4
 80106a4:	ea01 0305 	and.w	r3, r1, r5
 80106a8:	493d      	ldr	r1, [pc, #244]	; (80107a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80106aa:	fb01 f003 	mul.w	r0, r1, r3
 80106ae:	2100      	movs	r1, #0
 80106b0:	fb01 f102 	mul.w	r1, r1, r2
 80106b4:	1844      	adds	r4, r0, r1
 80106b6:	493a      	ldr	r1, [pc, #232]	; (80107a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80106b8:	fba2 0101 	umull	r0, r1, r2, r1
 80106bc:	1863      	adds	r3, r4, r1
 80106be:	4619      	mov	r1, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	461a      	mov	r2, r3
 80106c4:	f04f 0300 	mov.w	r3, #0
 80106c8:	f7f0 fad0 	bl	8000c6c <__aeabi_uldivmod>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4613      	mov	r3, r2
 80106d2:	60fb      	str	r3, [r7, #12]
 80106d4:	e04a      	b.n	801076c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80106d6:	4b30      	ldr	r3, [pc, #192]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	099b      	lsrs	r3, r3, #6
 80106dc:	461a      	mov	r2, r3
 80106de:	f04f 0300 	mov.w	r3, #0
 80106e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80106e6:	f04f 0100 	mov.w	r1, #0
 80106ea:	ea02 0400 	and.w	r4, r2, r0
 80106ee:	ea03 0501 	and.w	r5, r3, r1
 80106f2:	4620      	mov	r0, r4
 80106f4:	4629      	mov	r1, r5
 80106f6:	f04f 0200 	mov.w	r2, #0
 80106fa:	f04f 0300 	mov.w	r3, #0
 80106fe:	014b      	lsls	r3, r1, #5
 8010700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8010704:	0142      	lsls	r2, r0, #5
 8010706:	4610      	mov	r0, r2
 8010708:	4619      	mov	r1, r3
 801070a:	1b00      	subs	r0, r0, r4
 801070c:	eb61 0105 	sbc.w	r1, r1, r5
 8010710:	f04f 0200 	mov.w	r2, #0
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	018b      	lsls	r3, r1, #6
 801071a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801071e:	0182      	lsls	r2, r0, #6
 8010720:	1a12      	subs	r2, r2, r0
 8010722:	eb63 0301 	sbc.w	r3, r3, r1
 8010726:	f04f 0000 	mov.w	r0, #0
 801072a:	f04f 0100 	mov.w	r1, #0
 801072e:	00d9      	lsls	r1, r3, #3
 8010730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010734:	00d0      	lsls	r0, r2, #3
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	1912      	adds	r2, r2, r4
 801073c:	eb45 0303 	adc.w	r3, r5, r3
 8010740:	f04f 0000 	mov.w	r0, #0
 8010744:	f04f 0100 	mov.w	r1, #0
 8010748:	0299      	lsls	r1, r3, #10
 801074a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801074e:	0290      	lsls	r0, r2, #10
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	4610      	mov	r0, r2
 8010756:	4619      	mov	r1, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	461a      	mov	r2, r3
 801075c:	f04f 0300 	mov.w	r3, #0
 8010760:	f7f0 fa84 	bl	8000c6c <__aeabi_uldivmod>
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	4613      	mov	r3, r2
 801076a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <HAL_RCC_GetSysClockFreq+0x160>)
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	0c1b      	lsrs	r3, r3, #16
 8010772:	f003 0303 	and.w	r3, r3, #3
 8010776:	3301      	adds	r3, #1
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	fbb2 f3f3 	udiv	r3, r2, r3
 8010784:	60bb      	str	r3, [r7, #8]
      break;
 8010786:	e002      	b.n	801078e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010788:	4b04      	ldr	r3, [pc, #16]	; (801079c <HAL_RCC_GetSysClockFreq+0x164>)
 801078a:	60bb      	str	r3, [r7, #8]
      break;
 801078c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801078e:	68bb      	ldr	r3, [r7, #8]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bdb0      	pop	{r4, r5, r7, pc}
 8010798:	40023800 	.word	0x40023800
 801079c:	00f42400 	.word	0x00f42400
 80107a0:	017d7840 	.word	0x017d7840

080107a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80107a4:	b480      	push	{r7}
 80107a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80107a8:	4b03      	ldr	r3, [pc, #12]	; (80107b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80107aa:	681b      	ldr	r3, [r3, #0]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	20000004 	.word	0x20000004

080107bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80107c0:	f7ff fff0 	bl	80107a4 <HAL_RCC_GetHCLKFreq>
 80107c4:	4602      	mov	r2, r0
 80107c6:	4b05      	ldr	r3, [pc, #20]	; (80107dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	0a9b      	lsrs	r3, r3, #10
 80107cc:	f003 0307 	and.w	r3, r3, #7
 80107d0:	4903      	ldr	r1, [pc, #12]	; (80107e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80107d2:	5ccb      	ldrb	r3, [r1, r3]
 80107d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80107d8:	4618      	mov	r0, r3
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	40023800 	.word	0x40023800
 80107e0:	08018ac8 	.word	0x08018ac8

080107e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	220f      	movs	r2, #15
 80107f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80107f4:	4b12      	ldr	r3, [pc, #72]	; (8010840 <HAL_RCC_GetClockConfig+0x5c>)
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	f003 0203 	and.w	r2, r3, #3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010800:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <HAL_RCC_GetClockConfig+0x5c>)
 8010802:	689b      	ldr	r3, [r3, #8]
 8010804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801080c:	4b0c      	ldr	r3, [pc, #48]	; (8010840 <HAL_RCC_GetClockConfig+0x5c>)
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010818:	4b09      	ldr	r3, [pc, #36]	; (8010840 <HAL_RCC_GetClockConfig+0x5c>)
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	08db      	lsrs	r3, r3, #3
 801081e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010826:	4b07      	ldr	r3, [pc, #28]	; (8010844 <HAL_RCC_GetClockConfig+0x60>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f003 0207 	and.w	r2, r3, #7
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	601a      	str	r2, [r3, #0]
}
 8010832:	bf00      	nop
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	40023800 	.word	0x40023800
 8010844:	40023c00 	.word	0x40023c00

08010848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	e07b      	b.n	8010952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085e:	2b00      	cmp	r3, #0
 8010860:	d108      	bne.n	8010874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801086a:	d009      	beq.n	8010880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	61da      	str	r2, [r3, #28]
 8010872:	e005      	b.n	8010880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b00      	cmp	r3, #0
 8010890:	d106      	bne.n	80108a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f7f2 fbd2 	bl	8003044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2202      	movs	r2, #2
 80108a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80108c8:	431a      	orrs	r2, r3
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108d2:	431a      	orrs	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	f003 0302 	and.w	r3, r3, #2
 80108dc:	431a      	orrs	r2, r3
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	695b      	ldr	r3, [r3, #20]
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	431a      	orrs	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	699b      	ldr	r3, [r3, #24]
 80108ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108f0:	431a      	orrs	r2, r3
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	69db      	ldr	r3, [r3, #28]
 80108f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80108fa:	431a      	orrs	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010904:	ea42 0103 	orr.w	r1, r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801090c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	430a      	orrs	r2, r1
 8010916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	699b      	ldr	r3, [r3, #24]
 801091c:	0c1b      	lsrs	r3, r3, #16
 801091e:	f003 0104 	and.w	r1, r3, #4
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010926:	f003 0210 	and.w	r2, r3, #16
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	430a      	orrs	r2, r1
 8010930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	69da      	ldr	r2, [r3, #28]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b082      	sub	sp, #8
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d101      	bne.n	801096c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010968:	2301      	movs	r3, #1
 801096a:	e041      	b.n	80109f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2b00      	cmp	r3, #0
 8010976:	d106      	bne.n	8010986 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7f2 fe4f 	bl	8003624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2202      	movs	r2, #2
 801098a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3304      	adds	r3, #4
 8010996:	4619      	mov	r1, r3
 8010998:	4610      	mov	r0, r2
 801099a:	f001 f857 	bl	8011a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2201      	movs	r2, #1
 80109a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2201      	movs	r2, #1
 80109aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2201      	movs	r2, #1
 80109ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2201      	movs	r2, #1
 80109d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2201      	movs	r2, #1
 80109da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2201      	movs	r2, #1
 80109e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2201      	movs	r2, #1
 80109ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d001      	beq.n	8010a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e046      	b.n	8010a9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2202      	movs	r2, #2
 8010a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a23      	ldr	r2, [pc, #140]	; (8010aac <HAL_TIM_Base_Start+0xb4>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d022      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a2a:	d01d      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4a1f      	ldr	r2, [pc, #124]	; (8010ab0 <HAL_TIM_Base_Start+0xb8>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d018      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a1e      	ldr	r2, [pc, #120]	; (8010ab4 <HAL_TIM_Base_Start+0xbc>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d013      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a1c      	ldr	r2, [pc, #112]	; (8010ab8 <HAL_TIM_Base_Start+0xc0>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d00e      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a1b      	ldr	r2, [pc, #108]	; (8010abc <HAL_TIM_Base_Start+0xc4>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d009      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a19      	ldr	r2, [pc, #100]	; (8010ac0 <HAL_TIM_Base_Start+0xc8>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d004      	beq.n	8010a68 <HAL_TIM_Base_Start+0x70>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a18      	ldr	r2, [pc, #96]	; (8010ac4 <HAL_TIM_Base_Start+0xcc>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d111      	bne.n	8010a8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	689b      	ldr	r3, [r3, #8]
 8010a6e:	f003 0307 	and.w	r3, r3, #7
 8010a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b06      	cmp	r3, #6
 8010a78:	d010      	beq.n	8010a9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f042 0201 	orr.w	r2, r2, #1
 8010a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a8a:	e007      	b.n	8010a9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f042 0201 	orr.w	r2, r2, #1
 8010a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010a9c:	2300      	movs	r3, #0
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3714      	adds	r7, #20
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr
 8010aaa:	bf00      	nop
 8010aac:	40010000 	.word	0x40010000
 8010ab0:	40000400 	.word	0x40000400
 8010ab4:	40000800 	.word	0x40000800
 8010ab8:	40000c00 	.word	0x40000c00
 8010abc:	40010400 	.word	0x40010400
 8010ac0:	40014000 	.word	0x40014000
 8010ac4:	40001800 	.word	0x40001800

08010ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d001      	beq.n	8010ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e04e      	b.n	8010b7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2202      	movs	r2, #2
 8010ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68da      	ldr	r2, [r3, #12]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f042 0201 	orr.w	r2, r2, #1
 8010af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4a23      	ldr	r2, [pc, #140]	; (8010b8c <HAL_TIM_Base_Start_IT+0xc4>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d022      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b0a:	d01d      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a1f      	ldr	r2, [pc, #124]	; (8010b90 <HAL_TIM_Base_Start_IT+0xc8>)
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d018      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a1e      	ldr	r2, [pc, #120]	; (8010b94 <HAL_TIM_Base_Start_IT+0xcc>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d013      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a1c      	ldr	r2, [pc, #112]	; (8010b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d00e      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a1b      	ldr	r2, [pc, #108]	; (8010b9c <HAL_TIM_Base_Start_IT+0xd4>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d009      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a19      	ldr	r2, [pc, #100]	; (8010ba0 <HAL_TIM_Base_Start_IT+0xd8>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d004      	beq.n	8010b48 <HAL_TIM_Base_Start_IT+0x80>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4a18      	ldr	r2, [pc, #96]	; (8010ba4 <HAL_TIM_Base_Start_IT+0xdc>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d111      	bne.n	8010b6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2b06      	cmp	r3, #6
 8010b58:	d010      	beq.n	8010b7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f042 0201 	orr.w	r2, r2, #1
 8010b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b6a:	e007      	b.n	8010b7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f042 0201 	orr.w	r2, r2, #1
 8010b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	40010000 	.word	0x40010000
 8010b90:	40000400 	.word	0x40000400
 8010b94:	40000800 	.word	0x40000800
 8010b98:	40000c00 	.word	0x40000c00
 8010b9c:	40010400 	.word	0x40010400
 8010ba0:	40014000 	.word	0x40014000
 8010ba4:	40001800 	.word	0x40001800

08010ba8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e041      	b.n	8010c3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d106      	bne.n	8010bd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f839 	bl	8010c46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	3304      	adds	r3, #4
 8010be4:	4619      	mov	r1, r3
 8010be6:	4610      	mov	r0, r2
 8010be8:	f000 ff30 	bl	8011a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2201      	movs	r2, #1
 8010c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2201      	movs	r2, #1
 8010c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2201      	movs	r2, #1
 8010c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2201      	movs	r2, #1
 8010c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr
	...

08010c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d109      	bne.n	8010c80 <HAL_TIM_PWM_Start+0x24>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	bf14      	ite	ne
 8010c78:	2301      	movne	r3, #1
 8010c7a:	2300      	moveq	r3, #0
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	e022      	b.n	8010cc6 <HAL_TIM_PWM_Start+0x6a>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	2b04      	cmp	r3, #4
 8010c84:	d109      	bne.n	8010c9a <HAL_TIM_PWM_Start+0x3e>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	bf14      	ite	ne
 8010c92:	2301      	movne	r3, #1
 8010c94:	2300      	moveq	r3, #0
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	e015      	b.n	8010cc6 <HAL_TIM_PWM_Start+0x6a>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d109      	bne.n	8010cb4 <HAL_TIM_PWM_Start+0x58>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	bf14      	ite	ne
 8010cac:	2301      	movne	r3, #1
 8010cae:	2300      	moveq	r3, #0
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	e008      	b.n	8010cc6 <HAL_TIM_PWM_Start+0x6a>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	bf14      	ite	ne
 8010cc0:	2301      	movne	r3, #1
 8010cc2:	2300      	moveq	r3, #0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e07c      	b.n	8010dc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d104      	bne.n	8010cde <HAL_TIM_PWM_Start+0x82>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2202      	movs	r2, #2
 8010cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010cdc:	e013      	b.n	8010d06 <HAL_TIM_PWM_Start+0xaa>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b04      	cmp	r3, #4
 8010ce2:	d104      	bne.n	8010cee <HAL_TIM_PWM_Start+0x92>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2202      	movs	r2, #2
 8010ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010cec:	e00b      	b.n	8010d06 <HAL_TIM_PWM_Start+0xaa>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b08      	cmp	r3, #8
 8010cf2:	d104      	bne.n	8010cfe <HAL_TIM_PWM_Start+0xa2>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010cfc:	e003      	b.n	8010d06 <HAL_TIM_PWM_Start+0xaa>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2202      	movs	r2, #2
 8010d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	6839      	ldr	r1, [r7, #0]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f001 fb42 	bl	8012398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a2d      	ldr	r2, [pc, #180]	; (8010dd0 <HAL_TIM_PWM_Start+0x174>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d004      	beq.n	8010d28 <HAL_TIM_PWM_Start+0xcc>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a2c      	ldr	r2, [pc, #176]	; (8010dd4 <HAL_TIM_PWM_Start+0x178>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d101      	bne.n	8010d2c <HAL_TIM_PWM_Start+0xd0>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e000      	b.n	8010d2e <HAL_TIM_PWM_Start+0xd2>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d007      	beq.n	8010d42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4a22      	ldr	r2, [pc, #136]	; (8010dd0 <HAL_TIM_PWM_Start+0x174>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d022      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d54:	d01d      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a1f      	ldr	r2, [pc, #124]	; (8010dd8 <HAL_TIM_PWM_Start+0x17c>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d018      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a1d      	ldr	r2, [pc, #116]	; (8010ddc <HAL_TIM_PWM_Start+0x180>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d013      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a1c      	ldr	r2, [pc, #112]	; (8010de0 <HAL_TIM_PWM_Start+0x184>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d00e      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a16      	ldr	r2, [pc, #88]	; (8010dd4 <HAL_TIM_PWM_Start+0x178>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d009      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4a18      	ldr	r2, [pc, #96]	; (8010de4 <HAL_TIM_PWM_Start+0x188>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d004      	beq.n	8010d92 <HAL_TIM_PWM_Start+0x136>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a16      	ldr	r2, [pc, #88]	; (8010de8 <HAL_TIM_PWM_Start+0x18c>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d111      	bne.n	8010db6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	f003 0307 	and.w	r3, r3, #7
 8010d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b06      	cmp	r3, #6
 8010da2:	d010      	beq.n	8010dc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f042 0201 	orr.w	r2, r2, #1
 8010db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010db4:	e007      	b.n	8010dc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	681a      	ldr	r2, [r3, #0]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f042 0201 	orr.w	r2, r2, #1
 8010dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	40010000 	.word	0x40010000
 8010dd4:	40010400 	.word	0x40010400
 8010dd8:	40000400 	.word	0x40000400
 8010ddc:	40000800 	.word	0x40000800
 8010de0:	40000c00 	.word	0x40000c00
 8010de4:	40014000 	.word	0x40014000
 8010de8:	40001800 	.word	0x40001800

08010dec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d101      	bne.n	8010dfe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	e041      	b.n	8010e82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d106      	bne.n	8010e18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 f839 	bl	8010e8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	3304      	adds	r3, #4
 8010e28:	4619      	mov	r1, r3
 8010e2a:	4610      	mov	r0, r2
 8010e2c:	f000 fe0e 	bl	8011a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2201      	movs	r2, #1
 8010e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2201      	movs	r2, #1
 8010e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2201      	movs	r2, #1
 8010e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b083      	sub	sp, #12
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010e92:	bf00      	nop
 8010e94:	370c      	adds	r7, #12
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
	...

08010ea0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d104      	bne.n	8010eba <HAL_TIM_IC_Start+0x1a>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	e013      	b.n	8010ee2 <HAL_TIM_IC_Start+0x42>
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	2b04      	cmp	r3, #4
 8010ebe:	d104      	bne.n	8010eca <HAL_TIM_IC_Start+0x2a>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	e00b      	b.n	8010ee2 <HAL_TIM_IC_Start+0x42>
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	2b08      	cmp	r3, #8
 8010ece:	d104      	bne.n	8010eda <HAL_TIM_IC_Start+0x3a>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	e003      	b.n	8010ee2 <HAL_TIM_IC_Start+0x42>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d104      	bne.n	8010ef4 <HAL_TIM_IC_Start+0x54>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	e013      	b.n	8010f1c <HAL_TIM_IC_Start+0x7c>
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	d104      	bne.n	8010f04 <HAL_TIM_IC_Start+0x64>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	e00b      	b.n	8010f1c <HAL_TIM_IC_Start+0x7c>
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	2b08      	cmp	r3, #8
 8010f08:	d104      	bne.n	8010f14 <HAL_TIM_IC_Start+0x74>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	e003      	b.n	8010f1c <HAL_TIM_IC_Start+0x7c>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d102      	bne.n	8010f2a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010f24:	7bbb      	ldrb	r3, [r7, #14]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d001      	beq.n	8010f2e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e081      	b.n	8011032 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d104      	bne.n	8010f3e <HAL_TIM_IC_Start+0x9e>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2202      	movs	r2, #2
 8010f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f3c:	e013      	b.n	8010f66 <HAL_TIM_IC_Start+0xc6>
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	2b04      	cmp	r3, #4
 8010f42:	d104      	bne.n	8010f4e <HAL_TIM_IC_Start+0xae>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2202      	movs	r2, #2
 8010f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f4c:	e00b      	b.n	8010f66 <HAL_TIM_IC_Start+0xc6>
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	2b08      	cmp	r3, #8
 8010f52:	d104      	bne.n	8010f5e <HAL_TIM_IC_Start+0xbe>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2202      	movs	r2, #2
 8010f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f5c:	e003      	b.n	8010f66 <HAL_TIM_IC_Start+0xc6>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2202      	movs	r2, #2
 8010f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d104      	bne.n	8010f76 <HAL_TIM_IC_Start+0xd6>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2202      	movs	r2, #2
 8010f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f74:	e013      	b.n	8010f9e <HAL_TIM_IC_Start+0xfe>
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	2b04      	cmp	r3, #4
 8010f7a:	d104      	bne.n	8010f86 <HAL_TIM_IC_Start+0xe6>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2202      	movs	r2, #2
 8010f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f84:	e00b      	b.n	8010f9e <HAL_TIM_IC_Start+0xfe>
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	2b08      	cmp	r3, #8
 8010f8a:	d104      	bne.n	8010f96 <HAL_TIM_IC_Start+0xf6>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2202      	movs	r2, #2
 8010f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f94:	e003      	b.n	8010f9e <HAL_TIM_IC_Start+0xfe>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2202      	movs	r2, #2
 8010f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	6839      	ldr	r1, [r7, #0]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f001 f9f6 	bl	8012398 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a22      	ldr	r2, [pc, #136]	; (801103c <HAL_TIM_IC_Start+0x19c>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d022      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fbe:	d01d      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4a1e      	ldr	r2, [pc, #120]	; (8011040 <HAL_TIM_IC_Start+0x1a0>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d018      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4a1d      	ldr	r2, [pc, #116]	; (8011044 <HAL_TIM_IC_Start+0x1a4>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d013      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a1b      	ldr	r2, [pc, #108]	; (8011048 <HAL_TIM_IC_Start+0x1a8>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d00e      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4a1a      	ldr	r2, [pc, #104]	; (801104c <HAL_TIM_IC_Start+0x1ac>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d009      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a18      	ldr	r2, [pc, #96]	; (8011050 <HAL_TIM_IC_Start+0x1b0>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d004      	beq.n	8010ffc <HAL_TIM_IC_Start+0x15c>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4a17      	ldr	r2, [pc, #92]	; (8011054 <HAL_TIM_IC_Start+0x1b4>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d111      	bne.n	8011020 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	f003 0307 	and.w	r3, r3, #7
 8011006:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	2b06      	cmp	r3, #6
 801100c:	d010      	beq.n	8011030 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f042 0201 	orr.w	r2, r2, #1
 801101c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801101e:	e007      	b.n	8011030 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f042 0201 	orr.w	r2, r2, #1
 801102e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	40010000 	.word	0x40010000
 8011040:	40000400 	.word	0x40000400
 8011044:	40000800 	.word	0x40000800
 8011048:	40000c00 	.word	0x40000c00
 801104c:	40010400 	.word	0x40010400
 8011050:	40014000 	.word	0x40014000
 8011054:	40001800 	.word	0x40001800

08011058 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d104      	bne.n	8011076 <HAL_TIM_IC_Start_IT+0x1e>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011072:	b2db      	uxtb	r3, r3
 8011074:	e013      	b.n	801109e <HAL_TIM_IC_Start_IT+0x46>
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	2b04      	cmp	r3, #4
 801107a:	d104      	bne.n	8011086 <HAL_TIM_IC_Start_IT+0x2e>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011082:	b2db      	uxtb	r3, r3
 8011084:	e00b      	b.n	801109e <HAL_TIM_IC_Start_IT+0x46>
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	2b08      	cmp	r3, #8
 801108a:	d104      	bne.n	8011096 <HAL_TIM_IC_Start_IT+0x3e>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011092:	b2db      	uxtb	r3, r3
 8011094:	e003      	b.n	801109e <HAL_TIM_IC_Start_IT+0x46>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801109c:	b2db      	uxtb	r3, r3
 801109e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d104      	bne.n	80110b0 <HAL_TIM_IC_Start_IT+0x58>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	e013      	b.n	80110d8 <HAL_TIM_IC_Start_IT+0x80>
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	d104      	bne.n	80110c0 <HAL_TIM_IC_Start_IT+0x68>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	e00b      	b.n	80110d8 <HAL_TIM_IC_Start_IT+0x80>
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	2b08      	cmp	r3, #8
 80110c4:	d104      	bne.n	80110d0 <HAL_TIM_IC_Start_IT+0x78>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	e003      	b.n	80110d8 <HAL_TIM_IC_Start_IT+0x80>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80110da:	7bbb      	ldrb	r3, [r7, #14]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d102      	bne.n	80110e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80110e0:	7b7b      	ldrb	r3, [r7, #13]
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d001      	beq.n	80110ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80110e6:	2301      	movs	r3, #1
 80110e8:	e0cc      	b.n	8011284 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d104      	bne.n	80110fa <HAL_TIM_IC_Start_IT+0xa2>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2202      	movs	r2, #2
 80110f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80110f8:	e013      	b.n	8011122 <HAL_TIM_IC_Start_IT+0xca>
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2b04      	cmp	r3, #4
 80110fe:	d104      	bne.n	801110a <HAL_TIM_IC_Start_IT+0xb2>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2202      	movs	r2, #2
 8011104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011108:	e00b      	b.n	8011122 <HAL_TIM_IC_Start_IT+0xca>
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b08      	cmp	r3, #8
 801110e:	d104      	bne.n	801111a <HAL_TIM_IC_Start_IT+0xc2>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2202      	movs	r2, #2
 8011114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011118:	e003      	b.n	8011122 <HAL_TIM_IC_Start_IT+0xca>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2202      	movs	r2, #2
 801111e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d104      	bne.n	8011132 <HAL_TIM_IC_Start_IT+0xda>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2202      	movs	r2, #2
 801112c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011130:	e013      	b.n	801115a <HAL_TIM_IC_Start_IT+0x102>
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	2b04      	cmp	r3, #4
 8011136:	d104      	bne.n	8011142 <HAL_TIM_IC_Start_IT+0xea>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2202      	movs	r2, #2
 801113c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011140:	e00b      	b.n	801115a <HAL_TIM_IC_Start_IT+0x102>
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	2b08      	cmp	r3, #8
 8011146:	d104      	bne.n	8011152 <HAL_TIM_IC_Start_IT+0xfa>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2202      	movs	r2, #2
 801114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011150:	e003      	b.n	801115a <HAL_TIM_IC_Start_IT+0x102>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2202      	movs	r2, #2
 8011156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2b0c      	cmp	r3, #12
 801115e:	d841      	bhi.n	80111e4 <HAL_TIM_IC_Start_IT+0x18c>
 8011160:	a201      	add	r2, pc, #4	; (adr r2, 8011168 <HAL_TIM_IC_Start_IT+0x110>)
 8011162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011166:	bf00      	nop
 8011168:	0801119d 	.word	0x0801119d
 801116c:	080111e5 	.word	0x080111e5
 8011170:	080111e5 	.word	0x080111e5
 8011174:	080111e5 	.word	0x080111e5
 8011178:	080111af 	.word	0x080111af
 801117c:	080111e5 	.word	0x080111e5
 8011180:	080111e5 	.word	0x080111e5
 8011184:	080111e5 	.word	0x080111e5
 8011188:	080111c1 	.word	0x080111c1
 801118c:	080111e5 	.word	0x080111e5
 8011190:	080111e5 	.word	0x080111e5
 8011194:	080111e5 	.word	0x080111e5
 8011198:	080111d3 	.word	0x080111d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68da      	ldr	r2, [r3, #12]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f042 0202 	orr.w	r2, r2, #2
 80111aa:	60da      	str	r2, [r3, #12]
      break;
 80111ac:	e01d      	b.n	80111ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68da      	ldr	r2, [r3, #12]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f042 0204 	orr.w	r2, r2, #4
 80111bc:	60da      	str	r2, [r3, #12]
      break;
 80111be:	e014      	b.n	80111ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	68da      	ldr	r2, [r3, #12]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f042 0208 	orr.w	r2, r2, #8
 80111ce:	60da      	str	r2, [r3, #12]
      break;
 80111d0:	e00b      	b.n	80111ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68da      	ldr	r2, [r3, #12]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f042 0210 	orr.w	r2, r2, #16
 80111e0:	60da      	str	r2, [r3, #12]
      break;
 80111e2:	e002      	b.n	80111ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	73fb      	strb	r3, [r7, #15]
      break;
 80111e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d148      	bne.n	8011282 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2201      	movs	r2, #1
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f001 f8cd 	bl	8012398 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a22      	ldr	r2, [pc, #136]	; (801128c <HAL_TIM_IC_Start_IT+0x234>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d022      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011210:	d01d      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a1e      	ldr	r2, [pc, #120]	; (8011290 <HAL_TIM_IC_Start_IT+0x238>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d018      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a1c      	ldr	r2, [pc, #112]	; (8011294 <HAL_TIM_IC_Start_IT+0x23c>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d013      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	4a1b      	ldr	r2, [pc, #108]	; (8011298 <HAL_TIM_IC_Start_IT+0x240>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d00e      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	4a19      	ldr	r2, [pc, #100]	; (801129c <HAL_TIM_IC_Start_IT+0x244>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d009      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a18      	ldr	r2, [pc, #96]	; (80112a0 <HAL_TIM_IC_Start_IT+0x248>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d004      	beq.n	801124e <HAL_TIM_IC_Start_IT+0x1f6>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a16      	ldr	r2, [pc, #88]	; (80112a4 <HAL_TIM_IC_Start_IT+0x24c>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d111      	bne.n	8011272 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	f003 0307 	and.w	r3, r3, #7
 8011258:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	2b06      	cmp	r3, #6
 801125e:	d010      	beq.n	8011282 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f042 0201 	orr.w	r2, r2, #1
 801126e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011270:	e007      	b.n	8011282 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f042 0201 	orr.w	r2, r2, #1
 8011280:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8011282:	7bfb      	ldrb	r3, [r7, #15]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	40010000 	.word	0x40010000
 8011290:	40000400 	.word	0x40000400
 8011294:	40000800 	.word	0x40000800
 8011298:	40000c00 	.word	0x40000c00
 801129c:	40010400 	.word	0x40010400
 80112a0:	40014000 	.word	0x40014000
 80112a4:	40001800 	.word	0x40001800

080112a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	f003 0302 	and.w	r3, r3, #2
 80112ba:	2b02      	cmp	r3, #2
 80112bc:	d122      	bne.n	8011304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	f003 0302 	and.w	r3, r3, #2
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d11b      	bne.n	8011304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f06f 0202 	mvn.w	r2, #2
 80112d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2201      	movs	r2, #1
 80112da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	f003 0303 	and.w	r3, r3, #3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d003      	beq.n	80112f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7ef fffc 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 80112f0:	e005      	b.n	80112fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fb8c 	bl	8011a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fb93 	bl	8011a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	f003 0304 	and.w	r3, r3, #4
 801130e:	2b04      	cmp	r3, #4
 8011310:	d122      	bne.n	8011358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	f003 0304 	and.w	r3, r3, #4
 801131c:	2b04      	cmp	r3, #4
 801131e:	d11b      	bne.n	8011358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f06f 0204 	mvn.w	r2, #4
 8011328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2202      	movs	r2, #2
 801132e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ef ffd2 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8011344:	e005      	b.n	8011352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f000 fb62 	bl	8011a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 fb69 	bl	8011a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	f003 0308 	and.w	r3, r3, #8
 8011362:	2b08      	cmp	r3, #8
 8011364:	d122      	bne.n	80113ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	f003 0308 	and.w	r3, r3, #8
 8011370:	2b08      	cmp	r3, #8
 8011372:	d11b      	bne.n	80113ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f06f 0208 	mvn.w	r2, #8
 801137c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2204      	movs	r2, #4
 8011382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	69db      	ldr	r3, [r3, #28]
 801138a:	f003 0303 	and.w	r3, r3, #3
 801138e:	2b00      	cmp	r3, #0
 8011390:	d003      	beq.n	801139a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7ef ffa8 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8011398:	e005      	b.n	80113a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 fb38 	bl	8011a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 fb3f 	bl	8011a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	691b      	ldr	r3, [r3, #16]
 80113b2:	f003 0310 	and.w	r3, r3, #16
 80113b6:	2b10      	cmp	r3, #16
 80113b8:	d122      	bne.n	8011400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	f003 0310 	and.w	r3, r3, #16
 80113c4:	2b10      	cmp	r3, #16
 80113c6:	d11b      	bne.n	8011400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f06f 0210 	mvn.w	r2, #16
 80113d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2208      	movs	r2, #8
 80113d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	69db      	ldr	r3, [r3, #28]
 80113de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d003      	beq.n	80113ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7ef ff7e 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 80113ec:	e005      	b.n	80113fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 fb0e 	bl	8011a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fb15 	bl	8011a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	f003 0301 	and.w	r3, r3, #1
 801140a:	2b01      	cmp	r3, #1
 801140c:	d10e      	bne.n	801142c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	2b01      	cmp	r3, #1
 801141a:	d107      	bne.n	801142c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f06f 0201 	mvn.w	r2, #1
 8011424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7f1 fdae 	bl	8002f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011436:	2b80      	cmp	r3, #128	; 0x80
 8011438:	d10e      	bne.n	8011458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011444:	2b80      	cmp	r3, #128	; 0x80
 8011446:	d107      	bne.n	8011458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f001 f89e 	bl	8012594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011462:	2b40      	cmp	r3, #64	; 0x40
 8011464:	d10e      	bne.n	8011484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011470:	2b40      	cmp	r3, #64	; 0x40
 8011472:	d107      	bne.n	8011484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801147c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 fada 	bl	8011a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	f003 0320 	and.w	r3, r3, #32
 801148e:	2b20      	cmp	r3, #32
 8011490:	d10e      	bne.n	80114b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	f003 0320 	and.w	r3, r3, #32
 801149c:	2b20      	cmp	r3, #32
 801149e:	d107      	bne.n	80114b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f06f 0220 	mvn.w	r2, #32
 80114a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f001 f868 	bl	8012580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80114c4:	2300      	movs	r3, #0
 80114c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d101      	bne.n	80114d6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80114d2:	2302      	movs	r3, #2
 80114d4:	e088      	b.n	80115e8 <HAL_TIM_IC_ConfigChannel+0x130>
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2201      	movs	r2, #1
 80114da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d11b      	bne.n	801151c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6818      	ldr	r0, [r3, #0]
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	6819      	ldr	r1, [r3, #0]
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	685a      	ldr	r2, [r3, #4]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	f000 fd8c 	bl	8012010 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	699a      	ldr	r2, [r3, #24]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f022 020c 	bic.w	r2, r2, #12
 8011506:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	6999      	ldr	r1, [r3, #24]
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	689a      	ldr	r2, [r3, #8]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	430a      	orrs	r2, r1
 8011518:	619a      	str	r2, [r3, #24]
 801151a:	e060      	b.n	80115de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b04      	cmp	r3, #4
 8011520:	d11c      	bne.n	801155c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6818      	ldr	r0, [r3, #0]
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	6819      	ldr	r1, [r3, #0]
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	685a      	ldr	r2, [r3, #4]
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	f000 fe10 	bl	8012156 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	699a      	ldr	r2, [r3, #24]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011544:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	6999      	ldr	r1, [r3, #24]
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	021a      	lsls	r2, r3, #8
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	430a      	orrs	r2, r1
 8011558:	619a      	str	r2, [r3, #24]
 801155a:	e040      	b.n	80115de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b08      	cmp	r3, #8
 8011560:	d11b      	bne.n	801159a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	6819      	ldr	r1, [r3, #0]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	f000 fe5d 	bl	8012230 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	69da      	ldr	r2, [r3, #28]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f022 020c 	bic.w	r2, r2, #12
 8011584:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	69d9      	ldr	r1, [r3, #28]
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	689a      	ldr	r2, [r3, #8]
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	430a      	orrs	r2, r1
 8011596:	61da      	str	r2, [r3, #28]
 8011598:	e021      	b.n	80115de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2b0c      	cmp	r3, #12
 801159e:	d11c      	bne.n	80115da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6818      	ldr	r0, [r3, #0]
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	6819      	ldr	r1, [r3, #0]
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	f000 fe7a 	bl	80122a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	69da      	ldr	r2, [r3, #28]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80115c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	69d9      	ldr	r1, [r3, #28]
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	021a      	lsls	r2, r3, #8
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	430a      	orrs	r2, r1
 80115d6:	61da      	str	r2, [r3, #28]
 80115d8:	e001      	b.n	80115de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80115da:	2301      	movs	r3, #1
 80115dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80115fc:	2300      	movs	r3, #0
 80115fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011606:	2b01      	cmp	r3, #1
 8011608:	d101      	bne.n	801160e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801160a:	2302      	movs	r3, #2
 801160c:	e0ae      	b.n	801176c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b0c      	cmp	r3, #12
 801161a:	f200 809f 	bhi.w	801175c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801161e:	a201      	add	r2, pc, #4	; (adr r2, 8011624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011624:	08011659 	.word	0x08011659
 8011628:	0801175d 	.word	0x0801175d
 801162c:	0801175d 	.word	0x0801175d
 8011630:	0801175d 	.word	0x0801175d
 8011634:	08011699 	.word	0x08011699
 8011638:	0801175d 	.word	0x0801175d
 801163c:	0801175d 	.word	0x0801175d
 8011640:	0801175d 	.word	0x0801175d
 8011644:	080116db 	.word	0x080116db
 8011648:	0801175d 	.word	0x0801175d
 801164c:	0801175d 	.word	0x0801175d
 8011650:	0801175d 	.word	0x0801175d
 8011654:	0801171b 	.word	0x0801171b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	68b9      	ldr	r1, [r7, #8]
 801165e:	4618      	mov	r0, r3
 8011660:	f000 fa94 	bl	8011b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	699a      	ldr	r2, [r3, #24]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f042 0208 	orr.w	r2, r2, #8
 8011672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	699a      	ldr	r2, [r3, #24]
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f022 0204 	bic.w	r2, r2, #4
 8011682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6999      	ldr	r1, [r3, #24]
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	691a      	ldr	r2, [r3, #16]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	430a      	orrs	r2, r1
 8011694:	619a      	str	r2, [r3, #24]
      break;
 8011696:	e064      	b.n	8011762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	68b9      	ldr	r1, [r7, #8]
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 fae4 	bl	8011c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	699a      	ldr	r2, [r3, #24]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	699a      	ldr	r2, [r3, #24]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	6999      	ldr	r1, [r3, #24]
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	691b      	ldr	r3, [r3, #16]
 80116ce:	021a      	lsls	r2, r3, #8
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	430a      	orrs	r2, r1
 80116d6:	619a      	str	r2, [r3, #24]
      break;
 80116d8:	e043      	b.n	8011762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f000 fb39 	bl	8011d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	69da      	ldr	r2, [r3, #28]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f042 0208 	orr.w	r2, r2, #8
 80116f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	69da      	ldr	r2, [r3, #28]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f022 0204 	bic.w	r2, r2, #4
 8011704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	69d9      	ldr	r1, [r3, #28]
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	691a      	ldr	r2, [r3, #16]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	430a      	orrs	r2, r1
 8011716:	61da      	str	r2, [r3, #28]
      break;
 8011718:	e023      	b.n	8011762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68b9      	ldr	r1, [r7, #8]
 8011720:	4618      	mov	r0, r3
 8011722:	f000 fb8d 	bl	8011e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	69da      	ldr	r2, [r3, #28]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	69da      	ldr	r2, [r3, #28]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	69d9      	ldr	r1, [r3, #28]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	021a      	lsls	r2, r3, #8
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	430a      	orrs	r2, r1
 8011758:	61da      	str	r2, [r3, #28]
      break;
 801175a:	e002      	b.n	8011762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	75fb      	strb	r3, [r7, #23]
      break;
 8011760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801176a:	7dfb      	ldrb	r3, [r7, #23]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3718      	adds	r7, #24
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801177e:	2300      	movs	r3, #0
 8011780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011788:	2b01      	cmp	r3, #1
 801178a:	d101      	bne.n	8011790 <HAL_TIM_ConfigClockSource+0x1c>
 801178c:	2302      	movs	r3, #2
 801178e:	e0b4      	b.n	80118fa <HAL_TIM_ConfigClockSource+0x186>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2201      	movs	r2, #1
 8011794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2202      	movs	r2, #2
 801179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80117ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80117b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117c8:	d03e      	beq.n	8011848 <HAL_TIM_ConfigClockSource+0xd4>
 80117ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117ce:	f200 8087 	bhi.w	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 80117d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117d6:	f000 8086 	beq.w	80118e6 <HAL_TIM_ConfigClockSource+0x172>
 80117da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117de:	d87f      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 80117e0:	2b70      	cmp	r3, #112	; 0x70
 80117e2:	d01a      	beq.n	801181a <HAL_TIM_ConfigClockSource+0xa6>
 80117e4:	2b70      	cmp	r3, #112	; 0x70
 80117e6:	d87b      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 80117e8:	2b60      	cmp	r3, #96	; 0x60
 80117ea:	d050      	beq.n	801188e <HAL_TIM_ConfigClockSource+0x11a>
 80117ec:	2b60      	cmp	r3, #96	; 0x60
 80117ee:	d877      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 80117f0:	2b50      	cmp	r3, #80	; 0x50
 80117f2:	d03c      	beq.n	801186e <HAL_TIM_ConfigClockSource+0xfa>
 80117f4:	2b50      	cmp	r3, #80	; 0x50
 80117f6:	d873      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 80117f8:	2b40      	cmp	r3, #64	; 0x40
 80117fa:	d058      	beq.n	80118ae <HAL_TIM_ConfigClockSource+0x13a>
 80117fc:	2b40      	cmp	r3, #64	; 0x40
 80117fe:	d86f      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 8011800:	2b30      	cmp	r3, #48	; 0x30
 8011802:	d064      	beq.n	80118ce <HAL_TIM_ConfigClockSource+0x15a>
 8011804:	2b30      	cmp	r3, #48	; 0x30
 8011806:	d86b      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 8011808:	2b20      	cmp	r3, #32
 801180a:	d060      	beq.n	80118ce <HAL_TIM_ConfigClockSource+0x15a>
 801180c:	2b20      	cmp	r3, #32
 801180e:	d867      	bhi.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
 8011810:	2b00      	cmp	r3, #0
 8011812:	d05c      	beq.n	80118ce <HAL_TIM_ConfigClockSource+0x15a>
 8011814:	2b10      	cmp	r3, #16
 8011816:	d05a      	beq.n	80118ce <HAL_TIM_ConfigClockSource+0x15a>
 8011818:	e062      	b.n	80118e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6818      	ldr	r0, [r3, #0]
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	6899      	ldr	r1, [r3, #8]
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	685a      	ldr	r2, [r3, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	f000 fd95 	bl	8012358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801183c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	68ba      	ldr	r2, [r7, #8]
 8011844:	609a      	str	r2, [r3, #8]
      break;
 8011846:	e04f      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6818      	ldr	r0, [r3, #0]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	6899      	ldr	r1, [r3, #8]
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	f000 fd7e 	bl	8012358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	689a      	ldr	r2, [r3, #8]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801186a:	609a      	str	r2, [r3, #8]
      break;
 801186c:	e03c      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	6859      	ldr	r1, [r3, #4]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	461a      	mov	r2, r3
 801187c:	f000 fc3c 	bl	80120f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2150      	movs	r1, #80	; 0x50
 8011886:	4618      	mov	r0, r3
 8011888:	f000 fd4b 	bl	8012322 <TIM_ITRx_SetConfig>
      break;
 801188c:	e02c      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6818      	ldr	r0, [r3, #0]
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	6859      	ldr	r1, [r3, #4]
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	461a      	mov	r2, r3
 801189c:	f000 fc98 	bl	80121d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2160      	movs	r1, #96	; 0x60
 80118a6:	4618      	mov	r0, r3
 80118a8:	f000 fd3b 	bl	8012322 <TIM_ITRx_SetConfig>
      break;
 80118ac:	e01c      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6818      	ldr	r0, [r3, #0]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	6859      	ldr	r1, [r3, #4]
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	461a      	mov	r2, r3
 80118bc:	f000 fc1c 	bl	80120f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2140      	movs	r1, #64	; 0x40
 80118c6:	4618      	mov	r0, r3
 80118c8:	f000 fd2b 	bl	8012322 <TIM_ITRx_SetConfig>
      break;
 80118cc:	e00c      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4619      	mov	r1, r3
 80118d8:	4610      	mov	r0, r2
 80118da:	f000 fd22 	bl	8012322 <TIM_ITRx_SetConfig>
      break;
 80118de:	e003      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	73fb      	strb	r3, [r7, #15]
      break;
 80118e4:	e000      	b.n	80118e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80118e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2201      	movs	r2, #1
 80118ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b082      	sub	sp, #8
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011912:	2b01      	cmp	r3, #1
 8011914:	d101      	bne.n	801191a <HAL_TIM_SlaveConfigSynchro+0x18>
 8011916:	2302      	movs	r3, #2
 8011918:	e031      	b.n	801197e <HAL_TIM_SlaveConfigSynchro+0x7c>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2201      	movs	r2, #1
 801191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2202      	movs	r2, #2
 8011926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 fadd 	bl	8011eec <TIM_SlaveTimer_SetConfig>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d009      	beq.n	801194c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2201      	movs	r2, #1
 801193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8011948:	2301      	movs	r3, #1
 801194a:	e018      	b.n	801197e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	68da      	ldr	r2, [r3, #12]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801195a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	68da      	ldr	r2, [r3, #12]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801196a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2201      	movs	r2, #1
 8011970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801197c:	2300      	movs	r3, #0
}
 801197e:	4618      	mov	r0, r3
 8011980:	3708      	adds	r7, #8
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
	...

08011988 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011988:	b480      	push	{r7}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8011992:	2300      	movs	r3, #0
 8011994:	60fb      	str	r3, [r7, #12]
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	2b0c      	cmp	r3, #12
 801199a:	d831      	bhi.n	8011a00 <HAL_TIM_ReadCapturedValue+0x78>
 801199c:	a201      	add	r2, pc, #4	; (adr r2, 80119a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 801199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a2:	bf00      	nop
 80119a4:	080119d9 	.word	0x080119d9
 80119a8:	08011a01 	.word	0x08011a01
 80119ac:	08011a01 	.word	0x08011a01
 80119b0:	08011a01 	.word	0x08011a01
 80119b4:	080119e3 	.word	0x080119e3
 80119b8:	08011a01 	.word	0x08011a01
 80119bc:	08011a01 	.word	0x08011a01
 80119c0:	08011a01 	.word	0x08011a01
 80119c4:	080119ed 	.word	0x080119ed
 80119c8:	08011a01 	.word	0x08011a01
 80119cc:	08011a01 	.word	0x08011a01
 80119d0:	08011a01 	.word	0x08011a01
 80119d4:	080119f7 	.word	0x080119f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119de:	60fb      	str	r3, [r7, #12]

      break;
 80119e0:	e00f      	b.n	8011a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119e8:	60fb      	str	r3, [r7, #12]

      break;
 80119ea:	e00a      	b.n	8011a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119f2:	60fb      	str	r3, [r7, #12]

      break;
 80119f4:	e005      	b.n	8011a02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119fc:	60fb      	str	r3, [r7, #12]

      break;
 80119fe:	e000      	b.n	8011a02 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011a00:	bf00      	nop
  }

  return tmpreg;
 8011a02:	68fb      	ldr	r3, [r7, #12]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011a18:	bf00      	nop
 8011a1a:	370c      	adds	r7, #12
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr

08011a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011a2c:	bf00      	nop
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011a40:	bf00      	nop
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b085      	sub	sp, #20
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a40      	ldr	r2, [pc, #256]	; (8011b60 <TIM_Base_SetConfig+0x114>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d013      	beq.n	8011a8c <TIM_Base_SetConfig+0x40>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a6a:	d00f      	beq.n	8011a8c <TIM_Base_SetConfig+0x40>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a3d      	ldr	r2, [pc, #244]	; (8011b64 <TIM_Base_SetConfig+0x118>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d00b      	beq.n	8011a8c <TIM_Base_SetConfig+0x40>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	4a3c      	ldr	r2, [pc, #240]	; (8011b68 <TIM_Base_SetConfig+0x11c>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d007      	beq.n	8011a8c <TIM_Base_SetConfig+0x40>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4a3b      	ldr	r2, [pc, #236]	; (8011b6c <TIM_Base_SetConfig+0x120>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d003      	beq.n	8011a8c <TIM_Base_SetConfig+0x40>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4a3a      	ldr	r2, [pc, #232]	; (8011b70 <TIM_Base_SetConfig+0x124>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d108      	bne.n	8011a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	68fa      	ldr	r2, [r7, #12]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	4a2f      	ldr	r2, [pc, #188]	; (8011b60 <TIM_Base_SetConfig+0x114>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d02b      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aac:	d027      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	4a2c      	ldr	r2, [pc, #176]	; (8011b64 <TIM_Base_SetConfig+0x118>)
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d023      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	4a2b      	ldr	r2, [pc, #172]	; (8011b68 <TIM_Base_SetConfig+0x11c>)
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d01f      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	4a2a      	ldr	r2, [pc, #168]	; (8011b6c <TIM_Base_SetConfig+0x120>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d01b      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4a29      	ldr	r2, [pc, #164]	; (8011b70 <TIM_Base_SetConfig+0x124>)
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d017      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	4a28      	ldr	r2, [pc, #160]	; (8011b74 <TIM_Base_SetConfig+0x128>)
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d013      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	4a27      	ldr	r2, [pc, #156]	; (8011b78 <TIM_Base_SetConfig+0x12c>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d00f      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	4a26      	ldr	r2, [pc, #152]	; (8011b7c <TIM_Base_SetConfig+0x130>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d00b      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	4a25      	ldr	r2, [pc, #148]	; (8011b80 <TIM_Base_SetConfig+0x134>)
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d007      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	4a24      	ldr	r2, [pc, #144]	; (8011b84 <TIM_Base_SetConfig+0x138>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d003      	beq.n	8011afe <TIM_Base_SetConfig+0xb2>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4a23      	ldr	r2, [pc, #140]	; (8011b88 <TIM_Base_SetConfig+0x13c>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d108      	bne.n	8011b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	695b      	ldr	r3, [r3, #20]
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	4a0a      	ldr	r2, [pc, #40]	; (8011b60 <TIM_Base_SetConfig+0x114>)
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d003      	beq.n	8011b44 <TIM_Base_SetConfig+0xf8>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4a0c      	ldr	r2, [pc, #48]	; (8011b70 <TIM_Base_SetConfig+0x124>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d103      	bne.n	8011b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	691a      	ldr	r2, [r3, #16]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2201      	movs	r2, #1
 8011b50:	615a      	str	r2, [r3, #20]
}
 8011b52:	bf00      	nop
 8011b54:	3714      	adds	r7, #20
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop
 8011b60:	40010000 	.word	0x40010000
 8011b64:	40000400 	.word	0x40000400
 8011b68:	40000800 	.word	0x40000800
 8011b6c:	40000c00 	.word	0x40000c00
 8011b70:	40010400 	.word	0x40010400
 8011b74:	40014000 	.word	0x40014000
 8011b78:	40014400 	.word	0x40014400
 8011b7c:	40014800 	.word	0x40014800
 8011b80:	40001800 	.word	0x40001800
 8011b84:	40001c00 	.word	0x40001c00
 8011b88:	40002000 	.word	0x40002000

08011b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b087      	sub	sp, #28
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a1b      	ldr	r3, [r3, #32]
 8011b9a:	f023 0201 	bic.w	r2, r3, #1
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6a1b      	ldr	r3, [r3, #32]
 8011ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	699b      	ldr	r3, [r3, #24]
 8011bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f023 0303 	bic.w	r3, r3, #3
 8011bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	f023 0302 	bic.w	r3, r3, #2
 8011bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	697a      	ldr	r2, [r7, #20]
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	4a20      	ldr	r2, [pc, #128]	; (8011c64 <TIM_OC1_SetConfig+0xd8>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d003      	beq.n	8011bf0 <TIM_OC1_SetConfig+0x64>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	4a1f      	ldr	r2, [pc, #124]	; (8011c68 <TIM_OC1_SetConfig+0xdc>)
 8011bec:	4293      	cmp	r3, r2
 8011bee:	d10c      	bne.n	8011c0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f023 0308 	bic.w	r3, r3, #8
 8011bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f023 0304 	bic.w	r3, r3, #4
 8011c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	4a15      	ldr	r2, [pc, #84]	; (8011c64 <TIM_OC1_SetConfig+0xd8>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d003      	beq.n	8011c1a <TIM_OC1_SetConfig+0x8e>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4a14      	ldr	r2, [pc, #80]	; (8011c68 <TIM_OC1_SetConfig+0xdc>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d111      	bne.n	8011c3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	695b      	ldr	r3, [r3, #20]
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	4313      	orrs	r3, r2
 8011c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	699b      	ldr	r3, [r3, #24]
 8011c38:	693a      	ldr	r2, [r7, #16]
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	693a      	ldr	r2, [r7, #16]
 8011c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	685a      	ldr	r2, [r3, #4]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	621a      	str	r2, [r3, #32]
}
 8011c58:	bf00      	nop
 8011c5a:	371c      	adds	r7, #28
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr
 8011c64:	40010000 	.word	0x40010000
 8011c68:	40010400 	.word	0x40010400

08011c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a1b      	ldr	r3, [r3, #32]
 8011c7a:	f023 0210 	bic.w	r2, r3, #16
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6a1b      	ldr	r3, [r3, #32]
 8011c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	699b      	ldr	r3, [r3, #24]
 8011c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	021b      	lsls	r3, r3, #8
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	f023 0320 	bic.w	r3, r3, #32
 8011cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	689b      	ldr	r3, [r3, #8]
 8011cbc:	011b      	lsls	r3, r3, #4
 8011cbe:	697a      	ldr	r2, [r7, #20]
 8011cc0:	4313      	orrs	r3, r2
 8011cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a22      	ldr	r2, [pc, #136]	; (8011d50 <TIM_OC2_SetConfig+0xe4>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d003      	beq.n	8011cd4 <TIM_OC2_SetConfig+0x68>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4a21      	ldr	r2, [pc, #132]	; (8011d54 <TIM_OC2_SetConfig+0xe8>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d10d      	bne.n	8011cf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	011b      	lsls	r3, r3, #4
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4a17      	ldr	r2, [pc, #92]	; (8011d50 <TIM_OC2_SetConfig+0xe4>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d003      	beq.n	8011d00 <TIM_OC2_SetConfig+0x94>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4a16      	ldr	r2, [pc, #88]	; (8011d54 <TIM_OC2_SetConfig+0xe8>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d113      	bne.n	8011d28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	693a      	ldr	r2, [r7, #16]
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	699b      	ldr	r3, [r3, #24]
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	693a      	ldr	r2, [r7, #16]
 8011d24:	4313      	orrs	r3, r2
 8011d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	693a      	ldr	r2, [r7, #16]
 8011d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	685a      	ldr	r2, [r3, #4]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	697a      	ldr	r2, [r7, #20]
 8011d40:	621a      	str	r2, [r3, #32]
}
 8011d42:	bf00      	nop
 8011d44:	371c      	adds	r7, #28
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop
 8011d50:	40010000 	.word	0x40010000
 8011d54:	40010400 	.word	0x40010400

08011d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b087      	sub	sp, #28
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a1b      	ldr	r3, [r3, #32]
 8011d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a1b      	ldr	r3, [r3, #32]
 8011d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	69db      	ldr	r3, [r3, #28]
 8011d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f023 0303 	bic.w	r3, r3, #3
 8011d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	4313      	orrs	r3, r2
 8011d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	021b      	lsls	r3, r3, #8
 8011da8:	697a      	ldr	r2, [r7, #20]
 8011daa:	4313      	orrs	r3, r2
 8011dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4a21      	ldr	r2, [pc, #132]	; (8011e38 <TIM_OC3_SetConfig+0xe0>)
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d003      	beq.n	8011dbe <TIM_OC3_SetConfig+0x66>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	4a20      	ldr	r2, [pc, #128]	; (8011e3c <TIM_OC3_SetConfig+0xe4>)
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	d10d      	bne.n	8011dda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	021b      	lsls	r3, r3, #8
 8011dcc:	697a      	ldr	r2, [r7, #20]
 8011dce:	4313      	orrs	r3, r2
 8011dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4a16      	ldr	r2, [pc, #88]	; (8011e38 <TIM_OC3_SetConfig+0xe0>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d003      	beq.n	8011dea <TIM_OC3_SetConfig+0x92>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4a15      	ldr	r2, [pc, #84]	; (8011e3c <TIM_OC3_SetConfig+0xe4>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d113      	bne.n	8011e12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	695b      	ldr	r3, [r3, #20]
 8011dfe:	011b      	lsls	r3, r3, #4
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	4313      	orrs	r3, r2
 8011e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	011b      	lsls	r3, r3, #4
 8011e0c:	693a      	ldr	r2, [r7, #16]
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	693a      	ldr	r2, [r7, #16]
 8011e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	68fa      	ldr	r2, [r7, #12]
 8011e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	685a      	ldr	r2, [r3, #4]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	697a      	ldr	r2, [r7, #20]
 8011e2a:	621a      	str	r2, [r3, #32]
}
 8011e2c:	bf00      	nop
 8011e2e:	371c      	adds	r7, #28
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	40010000 	.word	0x40010000
 8011e3c:	40010400 	.word	0x40010400

08011e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b087      	sub	sp, #28
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a1b      	ldr	r3, [r3, #32]
 8011e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	69db      	ldr	r3, [r3, #28]
 8011e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	021b      	lsls	r3, r3, #8
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	4313      	orrs	r3, r2
 8011e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	031b      	lsls	r3, r3, #12
 8011e92:	693a      	ldr	r2, [r7, #16]
 8011e94:	4313      	orrs	r3, r2
 8011e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	4a12      	ldr	r2, [pc, #72]	; (8011ee4 <TIM_OC4_SetConfig+0xa4>)
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	d003      	beq.n	8011ea8 <TIM_OC4_SetConfig+0x68>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4a11      	ldr	r2, [pc, #68]	; (8011ee8 <TIM_OC4_SetConfig+0xa8>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d109      	bne.n	8011ebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	695b      	ldr	r3, [r3, #20]
 8011eb4:	019b      	lsls	r3, r3, #6
 8011eb6:	697a      	ldr	r2, [r7, #20]
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	693a      	ldr	r2, [r7, #16]
 8011ed4:	621a      	str	r2, [r3, #32]
}
 8011ed6:	bf00      	nop
 8011ed8:	371c      	adds	r7, #28
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	40010000 	.word	0x40010000
 8011ee8:	40010400 	.word	0x40010400

08011eec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	f023 0307 	bic.w	r3, r3, #7
 8011f1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	693a      	ldr	r2, [r7, #16]
 8011f22:	4313      	orrs	r3, r2
 8011f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	693a      	ldr	r2, [r7, #16]
 8011f2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	2b70      	cmp	r3, #112	; 0x70
 8011f34:	d01a      	beq.n	8011f6c <TIM_SlaveTimer_SetConfig+0x80>
 8011f36:	2b70      	cmp	r3, #112	; 0x70
 8011f38:	d860      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f3a:	2b60      	cmp	r3, #96	; 0x60
 8011f3c:	d054      	beq.n	8011fe8 <TIM_SlaveTimer_SetConfig+0xfc>
 8011f3e:	2b60      	cmp	r3, #96	; 0x60
 8011f40:	d85c      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f42:	2b50      	cmp	r3, #80	; 0x50
 8011f44:	d046      	beq.n	8011fd4 <TIM_SlaveTimer_SetConfig+0xe8>
 8011f46:	2b50      	cmp	r3, #80	; 0x50
 8011f48:	d858      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f4a:	2b40      	cmp	r3, #64	; 0x40
 8011f4c:	d019      	beq.n	8011f82 <TIM_SlaveTimer_SetConfig+0x96>
 8011f4e:	2b40      	cmp	r3, #64	; 0x40
 8011f50:	d854      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f52:	2b30      	cmp	r3, #48	; 0x30
 8011f54:	d055      	beq.n	8012002 <TIM_SlaveTimer_SetConfig+0x116>
 8011f56:	2b30      	cmp	r3, #48	; 0x30
 8011f58:	d850      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f5a:	2b20      	cmp	r3, #32
 8011f5c:	d051      	beq.n	8012002 <TIM_SlaveTimer_SetConfig+0x116>
 8011f5e:	2b20      	cmp	r3, #32
 8011f60:	d84c      	bhi.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d04d      	beq.n	8012002 <TIM_SlaveTimer_SetConfig+0x116>
 8011f66:	2b10      	cmp	r3, #16
 8011f68:	d04b      	beq.n	8012002 <TIM_SlaveTimer_SetConfig+0x116>
 8011f6a:	e047      	b.n	8011ffc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6818      	ldr	r0, [r3, #0]
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	68d9      	ldr	r1, [r3, #12]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	689a      	ldr	r2, [r3, #8]
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	691b      	ldr	r3, [r3, #16]
 8011f7c:	f000 f9ec 	bl	8012358 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8011f80:	e040      	b.n	8012004 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b05      	cmp	r3, #5
 8011f88:	d101      	bne.n	8011f8e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e03b      	b.n	8012006 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	6a1b      	ldr	r3, [r3, #32]
 8011f94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	6a1a      	ldr	r2, [r3, #32]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f022 0201 	bic.w	r2, r2, #1
 8011fa4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	699b      	ldr	r3, [r3, #24]
 8011fac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011fb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	691b      	ldr	r3, [r3, #16]
 8011fba:	011b      	lsls	r3, r3, #4
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	621a      	str	r2, [r3, #32]
      break;
 8011fd2:	e017      	b.n	8012004 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6818      	ldr	r0, [r3, #0]
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	6899      	ldr	r1, [r3, #8]
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	f000 f889 	bl	80120f8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8011fe6:	e00d      	b.n	8012004 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6818      	ldr	r0, [r3, #0]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	6899      	ldr	r1, [r3, #8]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	f000 f8eb 	bl	80121d0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8011ffa:	e003      	b.n	8012004 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8012000:	e000      	b.n	8012004 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8012002:	bf00      	nop
  }

  return status;
 8012004:	7dfb      	ldrb	r3, [r7, #23]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
	...

08012010 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012010:	b480      	push	{r7}
 8012012:	b087      	sub	sp, #28
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
 801201c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	6a1b      	ldr	r3, [r3, #32]
 8012022:	f023 0201 	bic.w	r2, r3, #1
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	6a1b      	ldr	r3, [r3, #32]
 8012034:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	4a28      	ldr	r2, [pc, #160]	; (80120dc <TIM_TI1_SetConfig+0xcc>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d01b      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012044:	d017      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	4a25      	ldr	r2, [pc, #148]	; (80120e0 <TIM_TI1_SetConfig+0xd0>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d013      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	4a24      	ldr	r2, [pc, #144]	; (80120e4 <TIM_TI1_SetConfig+0xd4>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d00f      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	4a23      	ldr	r2, [pc, #140]	; (80120e8 <TIM_TI1_SetConfig+0xd8>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d00b      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	4a22      	ldr	r2, [pc, #136]	; (80120ec <TIM_TI1_SetConfig+0xdc>)
 8012062:	4293      	cmp	r3, r2
 8012064:	d007      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	4a21      	ldr	r2, [pc, #132]	; (80120f0 <TIM_TI1_SetConfig+0xe0>)
 801206a:	4293      	cmp	r3, r2
 801206c:	d003      	beq.n	8012076 <TIM_TI1_SetConfig+0x66>
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	4a20      	ldr	r2, [pc, #128]	; (80120f4 <TIM_TI1_SetConfig+0xe4>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d101      	bne.n	801207a <TIM_TI1_SetConfig+0x6a>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <TIM_TI1_SetConfig+0x6c>
 801207a:	2300      	movs	r3, #0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d008      	beq.n	8012092 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	f023 0303 	bic.w	r3, r3, #3
 8012086:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4313      	orrs	r3, r2
 801208e:	617b      	str	r3, [r7, #20]
 8012090:	e003      	b.n	801209a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f043 0301 	orr.w	r3, r3, #1
 8012098:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80120a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	011b      	lsls	r3, r3, #4
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	697a      	ldr	r2, [r7, #20]
 80120aa:	4313      	orrs	r3, r2
 80120ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	f023 030a 	bic.w	r3, r3, #10
 80120b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	f003 030a 	and.w	r3, r3, #10
 80120bc:	693a      	ldr	r2, [r7, #16]
 80120be:	4313      	orrs	r3, r2
 80120c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	693a      	ldr	r2, [r7, #16]
 80120cc:	621a      	str	r2, [r3, #32]
}
 80120ce:	bf00      	nop
 80120d0:	371c      	adds	r7, #28
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	40010000 	.word	0x40010000
 80120e0:	40000400 	.word	0x40000400
 80120e4:	40000800 	.word	0x40000800
 80120e8:	40000c00 	.word	0x40000c00
 80120ec:	40010400 	.word	0x40010400
 80120f0:	40014000 	.word	0x40014000
 80120f4:	40001800 	.word	0x40001800

080120f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b087      	sub	sp, #28
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	60b9      	str	r1, [r7, #8]
 8012102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	6a1b      	ldr	r3, [r3, #32]
 8012108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6a1b      	ldr	r3, [r3, #32]
 801210e:	f023 0201 	bic.w	r2, r3, #1
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	699b      	ldr	r3, [r3, #24]
 801211a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	011b      	lsls	r3, r3, #4
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	4313      	orrs	r3, r2
 801212c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	f023 030a 	bic.w	r3, r3, #10
 8012134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012136:	697a      	ldr	r2, [r7, #20]
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	4313      	orrs	r3, r2
 801213c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	693a      	ldr	r2, [r7, #16]
 8012142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	697a      	ldr	r2, [r7, #20]
 8012148:	621a      	str	r2, [r3, #32]
}
 801214a:	bf00      	nop
 801214c:	371c      	adds	r7, #28
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012156:	b480      	push	{r7}
 8012158:	b087      	sub	sp, #28
 801215a:	af00      	add	r7, sp, #0
 801215c:	60f8      	str	r0, [r7, #12]
 801215e:	60b9      	str	r1, [r7, #8]
 8012160:	607a      	str	r2, [r7, #4]
 8012162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	f023 0210 	bic.w	r2, r3, #16
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	699b      	ldr	r3, [r3, #24]
 8012174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6a1b      	ldr	r3, [r3, #32]
 801217a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	021b      	lsls	r3, r3, #8
 8012188:	697a      	ldr	r2, [r7, #20]
 801218a:	4313      	orrs	r3, r2
 801218c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	031b      	lsls	r3, r3, #12
 801219a:	b29b      	uxth	r3, r3
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	4313      	orrs	r3, r2
 80121a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80121a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	011b      	lsls	r3, r3, #4
 80121ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80121b2:	693a      	ldr	r2, [r7, #16]
 80121b4:	4313      	orrs	r3, r2
 80121b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	697a      	ldr	r2, [r7, #20]
 80121bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	693a      	ldr	r2, [r7, #16]
 80121c2:	621a      	str	r2, [r3, #32]
}
 80121c4:	bf00      	nop
 80121c6:	371c      	adds	r7, #28
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b087      	sub	sp, #28
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6a1b      	ldr	r3, [r3, #32]
 80121e0:	f023 0210 	bic.w	r2, r3, #16
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	699b      	ldr	r3, [r3, #24]
 80121ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6a1b      	ldr	r3, [r3, #32]
 80121f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80121fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	031b      	lsls	r3, r3, #12
 8012200:	697a      	ldr	r2, [r7, #20]
 8012202:	4313      	orrs	r3, r2
 8012204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801220c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	011b      	lsls	r3, r3, #4
 8012212:	693a      	ldr	r2, [r7, #16]
 8012214:	4313      	orrs	r3, r2
 8012216:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	697a      	ldr	r2, [r7, #20]
 801221c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	693a      	ldr	r2, [r7, #16]
 8012222:	621a      	str	r2, [r3, #32]
}
 8012224:	bf00      	nop
 8012226:	371c      	adds	r7, #28
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012230:	b480      	push	{r7}
 8012232:	b087      	sub	sp, #28
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6a1b      	ldr	r3, [r3, #32]
 8012242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	69db      	ldr	r3, [r3, #28]
 801224e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6a1b      	ldr	r3, [r3, #32]
 8012254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	f023 0303 	bic.w	r3, r3, #3
 801225c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801225e:	697a      	ldr	r2, [r7, #20]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4313      	orrs	r3, r2
 8012264:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801226c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	011b      	lsls	r3, r3, #4
 8012272:	b2db      	uxtb	r3, r3
 8012274:	697a      	ldr	r2, [r7, #20]
 8012276:	4313      	orrs	r3, r2
 8012278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8012280:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	021b      	lsls	r3, r3, #8
 8012286:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801228a:	693a      	ldr	r2, [r7, #16]
 801228c:	4313      	orrs	r3, r2
 801228e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	693a      	ldr	r2, [r7, #16]
 801229a:	621a      	str	r2, [r3, #32]
}
 801229c:	bf00      	nop
 801229e:	371c      	adds	r7, #28
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b087      	sub	sp, #28
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	69db      	ldr	r3, [r3, #28]
 80122c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6a1b      	ldr	r3, [r3, #32]
 80122cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	021b      	lsls	r3, r3, #8
 80122da:	697a      	ldr	r2, [r7, #20]
 80122dc:	4313      	orrs	r3, r2
 80122de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80122e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	031b      	lsls	r3, r3, #12
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	4313      	orrs	r3, r2
 80122f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80122fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	031b      	lsls	r3, r3, #12
 8012300:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012304:	693a      	ldr	r2, [r7, #16]
 8012306:	4313      	orrs	r3, r2
 8012308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	697a      	ldr	r2, [r7, #20]
 801230e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	693a      	ldr	r2, [r7, #16]
 8012314:	621a      	str	r2, [r3, #32]
}
 8012316:	bf00      	nop
 8012318:	371c      	adds	r7, #28
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012322:	b480      	push	{r7}
 8012324:	b085      	sub	sp, #20
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689b      	ldr	r3, [r3, #8]
 8012330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801233a:	683a      	ldr	r2, [r7, #0]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4313      	orrs	r3, r2
 8012340:	f043 0307 	orr.w	r3, r3, #7
 8012344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	609a      	str	r2, [r3, #8]
}
 801234c:	bf00      	nop
 801234e:	3714      	adds	r7, #20
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr

08012358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012358:	b480      	push	{r7}
 801235a:	b087      	sub	sp, #28
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
 8012364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	021a      	lsls	r2, r3, #8
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	431a      	orrs	r2, r3
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	4313      	orrs	r3, r2
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	4313      	orrs	r3, r2
 8012384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	697a      	ldr	r2, [r7, #20]
 801238a:	609a      	str	r2, [r3, #8]
}
 801238c:	bf00      	nop
 801238e:	371c      	adds	r7, #28
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012398:	b480      	push	{r7}
 801239a:	b087      	sub	sp, #28
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	f003 031f 	and.w	r3, r3, #31
 80123aa:	2201      	movs	r2, #1
 80123ac:	fa02 f303 	lsl.w	r3, r2, r3
 80123b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	6a1a      	ldr	r2, [r3, #32]
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	43db      	mvns	r3, r3
 80123ba:	401a      	ands	r2, r3
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6a1a      	ldr	r2, [r3, #32]
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	f003 031f 	and.w	r3, r3, #31
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	fa01 f303 	lsl.w	r3, r1, r3
 80123d0:	431a      	orrs	r2, r3
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	621a      	str	r2, [r3, #32]
}
 80123d6:	bf00      	nop
 80123d8:	371c      	adds	r7, #28
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr
	...

080123e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b085      	sub	sp, #20
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d101      	bne.n	80123fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80123f8:	2302      	movs	r3, #2
 80123fa:	e05a      	b.n	80124b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2201      	movs	r2, #1
 8012400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2202      	movs	r2, #2
 8012408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	689b      	ldr	r3, [r3, #8]
 801241a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	68fa      	ldr	r2, [r7, #12]
 801242a:	4313      	orrs	r3, r2
 801242c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a21      	ldr	r2, [pc, #132]	; (80124c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801243c:	4293      	cmp	r3, r2
 801243e:	d022      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012448:	d01d      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4a1d      	ldr	r2, [pc, #116]	; (80124c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d018      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4a1b      	ldr	r2, [pc, #108]	; (80124c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801245a:	4293      	cmp	r3, r2
 801245c:	d013      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	4a1a      	ldr	r2, [pc, #104]	; (80124cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d00e      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4a18      	ldr	r2, [pc, #96]	; (80124d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801246e:	4293      	cmp	r3, r2
 8012470:	d009      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	4a17      	ldr	r2, [pc, #92]	; (80124d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012478:	4293      	cmp	r3, r2
 801247a:	d004      	beq.n	8012486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4a15      	ldr	r2, [pc, #84]	; (80124d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d10c      	bne.n	80124a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801248c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	4313      	orrs	r3, r2
 8012496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2201      	movs	r2, #1
 80124a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3714      	adds	r7, #20
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	40010000 	.word	0x40010000
 80124c4:	40000400 	.word	0x40000400
 80124c8:	40000800 	.word	0x40000800
 80124cc:	40000c00 	.word	0x40000c00
 80124d0:	40010400 	.word	0x40010400
 80124d4:	40014000 	.word	0x40014000
 80124d8:	40001800 	.word	0x40001800

080124dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80124e6:	2300      	movs	r3, #0
 80124e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d101      	bne.n	80124f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80124f4:	2302      	movs	r3, #2
 80124f6:	e03d      	b.n	8012574 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2201      	movs	r2, #1
 80124fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	68db      	ldr	r3, [r3, #12]
 801250a:	4313      	orrs	r3, r2
 801250c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	4313      	orrs	r3, r2
 801251a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	4313      	orrs	r3, r2
 8012528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4313      	orrs	r3, r2
 8012536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	4313      	orrs	r3, r2
 8012544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	695b      	ldr	r3, [r3, #20]
 8012550:	4313      	orrs	r3, r2
 8012552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	69db      	ldr	r3, [r3, #28]
 801255e:	4313      	orrs	r3, r2
 8012560:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2200      	movs	r2, #0
 801256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3714      	adds	r7, #20
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012588:	bf00      	nop
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801259c:	bf00      	nop
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <__NVIC_SetPriority>:
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	4603      	mov	r3, r0
 80125b0:	6039      	str	r1, [r7, #0]
 80125b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80125b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	db0a      	blt.n	80125d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	490c      	ldr	r1, [pc, #48]	; (80125f4 <__NVIC_SetPriority+0x4c>)
 80125c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125c6:	0112      	lsls	r2, r2, #4
 80125c8:	b2d2      	uxtb	r2, r2
 80125ca:	440b      	add	r3, r1
 80125cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80125d0:	e00a      	b.n	80125e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	b2da      	uxtb	r2, r3
 80125d6:	4908      	ldr	r1, [pc, #32]	; (80125f8 <__NVIC_SetPriority+0x50>)
 80125d8:	79fb      	ldrb	r3, [r7, #7]
 80125da:	f003 030f 	and.w	r3, r3, #15
 80125de:	3b04      	subs	r3, #4
 80125e0:	0112      	lsls	r2, r2, #4
 80125e2:	b2d2      	uxtb	r2, r2
 80125e4:	440b      	add	r3, r1
 80125e6:	761a      	strb	r2, [r3, #24]
}
 80125e8:	bf00      	nop
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr
 80125f4:	e000e100 	.word	0xe000e100
 80125f8:	e000ed00 	.word	0xe000ed00

080125fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80125fc:	b580      	push	{r7, lr}
 80125fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012600:	4b05      	ldr	r3, [pc, #20]	; (8012618 <SysTick_Handler+0x1c>)
 8012602:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012604:	f001 feea 	bl	80143dc <xTaskGetSchedulerState>
 8012608:	4603      	mov	r3, r0
 801260a:	2b01      	cmp	r3, #1
 801260c:	d001      	beq.n	8012612 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801260e:	f002 fcdb 	bl	8014fc8 <xPortSysTickHandler>
  }
}
 8012612:	bf00      	nop
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	e000e010 	.word	0xe000e010

0801261c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801261c:	b580      	push	{r7, lr}
 801261e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012620:	2100      	movs	r1, #0
 8012622:	f06f 0004 	mvn.w	r0, #4
 8012626:	f7ff ffbf 	bl	80125a8 <__NVIC_SetPriority>
#endif
}
 801262a:	bf00      	nop
 801262c:	bd80      	pop	{r7, pc}
	...

08012630 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012636:	f3ef 8305 	mrs	r3, IPSR
 801263a:	603b      	str	r3, [r7, #0]
  return(result);
 801263c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801263e:	2b00      	cmp	r3, #0
 8012640:	d003      	beq.n	801264a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012642:	f06f 0305 	mvn.w	r3, #5
 8012646:	607b      	str	r3, [r7, #4]
 8012648:	e00c      	b.n	8012664 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801264a:	4b0a      	ldr	r3, [pc, #40]	; (8012674 <osKernelInitialize+0x44>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d105      	bne.n	801265e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012652:	4b08      	ldr	r3, [pc, #32]	; (8012674 <osKernelInitialize+0x44>)
 8012654:	2201      	movs	r2, #1
 8012656:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012658:	2300      	movs	r3, #0
 801265a:	607b      	str	r3, [r7, #4]
 801265c:	e002      	b.n	8012664 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801265e:	f04f 33ff 	mov.w	r3, #4294967295
 8012662:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012664:	687b      	ldr	r3, [r7, #4]
}
 8012666:	4618      	mov	r0, r3
 8012668:	370c      	adds	r7, #12
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	200015a0 	.word	0x200015a0

08012678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801267e:	f3ef 8305 	mrs	r3, IPSR
 8012682:	603b      	str	r3, [r7, #0]
  return(result);
 8012684:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012686:	2b00      	cmp	r3, #0
 8012688:	d003      	beq.n	8012692 <osKernelStart+0x1a>
    stat = osErrorISR;
 801268a:	f06f 0305 	mvn.w	r3, #5
 801268e:	607b      	str	r3, [r7, #4]
 8012690:	e010      	b.n	80126b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012692:	4b0b      	ldr	r3, [pc, #44]	; (80126c0 <osKernelStart+0x48>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d109      	bne.n	80126ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801269a:	f7ff ffbf 	bl	801261c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <osKernelStart+0x48>)
 80126a0:	2202      	movs	r2, #2
 80126a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80126a4:	f001 f9c0 	bl	8013a28 <vTaskStartScheduler>
      stat = osOK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	607b      	str	r3, [r7, #4]
 80126ac:	e002      	b.n	80126b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80126ae:	f04f 33ff 	mov.w	r3, #4294967295
 80126b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80126b4:	687b      	ldr	r3, [r7, #4]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3708      	adds	r7, #8
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	200015a0 	.word	0x200015a0

080126c4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ca:	f3ef 8305 	mrs	r3, IPSR
 80126ce:	603b      	str	r3, [r7, #0]
  return(result);
 80126d0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d003      	beq.n	80126de <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80126d6:	f001 fae9 	bl	8013cac <xTaskGetTickCountFromISR>
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	e002      	b.n	80126e4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80126de:	f001 fad5 	bl	8013c8c <xTaskGetTickCount>
 80126e2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80126e4:	687b      	ldr	r3, [r7, #4]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3708      	adds	r7, #8
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b08e      	sub	sp, #56	; 0x38
 80126f2:	af04      	add	r7, sp, #16
 80126f4:	60f8      	str	r0, [r7, #12]
 80126f6:	60b9      	str	r1, [r7, #8]
 80126f8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80126fa:	2300      	movs	r3, #0
 80126fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126fe:	f3ef 8305 	mrs	r3, IPSR
 8012702:	617b      	str	r3, [r7, #20]
  return(result);
 8012704:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012706:	2b00      	cmp	r3, #0
 8012708:	d17e      	bne.n	8012808 <osThreadNew+0x11a>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d07b      	beq.n	8012808 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012710:	2380      	movs	r3, #128	; 0x80
 8012712:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012714:	2318      	movs	r3, #24
 8012716:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012718:	2300      	movs	r3, #0
 801271a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801271c:	f04f 33ff 	mov.w	r3, #4294967295
 8012720:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d045      	beq.n	80127b4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <osThreadNew+0x48>
        name = attr->name;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d002      	beq.n	8012744 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	699b      	ldr	r3, [r3, #24]
 8012742:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d008      	beq.n	801275c <osThreadNew+0x6e>
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	2b38      	cmp	r3, #56	; 0x38
 801274e:	d805      	bhi.n	801275c <osThreadNew+0x6e>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	f003 0301 	and.w	r3, r3, #1
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <osThreadNew+0x72>
        return (NULL);
 801275c:	2300      	movs	r3, #0
 801275e:	e054      	b.n	801280a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	695b      	ldr	r3, [r3, #20]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d003      	beq.n	8012770 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	695b      	ldr	r3, [r3, #20]
 801276c:	089b      	lsrs	r3, r3, #2
 801276e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00e      	beq.n	8012796 <osThreadNew+0xa8>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	2bbb      	cmp	r3, #187	; 0xbb
 801277e:	d90a      	bls.n	8012796 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012784:	2b00      	cmp	r3, #0
 8012786:	d006      	beq.n	8012796 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d002      	beq.n	8012796 <osThreadNew+0xa8>
        mem = 1;
 8012790:	2301      	movs	r3, #1
 8012792:	61bb      	str	r3, [r7, #24]
 8012794:	e010      	b.n	80127b8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d10c      	bne.n	80127b8 <osThreadNew+0xca>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d108      	bne.n	80127b8 <osThreadNew+0xca>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	691b      	ldr	r3, [r3, #16]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d104      	bne.n	80127b8 <osThreadNew+0xca>
          mem = 0;
 80127ae:	2300      	movs	r3, #0
 80127b0:	61bb      	str	r3, [r7, #24]
 80127b2:	e001      	b.n	80127b8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80127b4:	2300      	movs	r3, #0
 80127b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d110      	bne.n	80127e0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80127c6:	9202      	str	r2, [sp, #8]
 80127c8:	9301      	str	r3, [sp, #4]
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	6a3a      	ldr	r2, [r7, #32]
 80127d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	f000 fed1 	bl	801357c <xTaskCreateStatic>
 80127da:	4603      	mov	r3, r0
 80127dc:	613b      	str	r3, [r7, #16]
 80127de:	e013      	b.n	8012808 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d110      	bne.n	8012808 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80127e6:	6a3b      	ldr	r3, [r7, #32]
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	f107 0310 	add.w	r3, r7, #16
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f000 ff1c 	bl	8013636 <xTaskCreate>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b01      	cmp	r3, #1
 8012802:	d001      	beq.n	8012808 <osThreadNew+0x11a>
            hTask = NULL;
 8012804:	2300      	movs	r3, #0
 8012806:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012808:	693b      	ldr	r3, [r7, #16]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3728      	adds	r7, #40	; 0x28
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8012812:	b580      	push	{r7, lr}
 8012814:	b086      	sub	sp, #24
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801281a:	f3ef 8305 	mrs	r3, IPSR
 801281e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012820:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8012822:	2b00      	cmp	r3, #0
 8012824:	d003      	beq.n	801282e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8012826:	f06f 0305 	mvn.w	r3, #5
 801282a:	617b      	str	r3, [r7, #20]
 801282c:	e019      	b.n	8012862 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 801282e:	2300      	movs	r3, #0
 8012830:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8012832:	f001 fa2b 	bl	8013c8c <xTaskGetTickCount>
 8012836:	4603      	mov	r3, r0
 8012838:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d009      	beq.n	801285c <osDelayUntil+0x4a>
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	2b00      	cmp	r3, #0
 801284c:	db06      	blt.n	801285c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 801284e:	f107 0308 	add.w	r3, r7, #8
 8012852:	6939      	ldr	r1, [r7, #16]
 8012854:	4618      	mov	r0, r3
 8012856:	f001 f867 	bl	8013928 <vTaskDelayUntil>
 801285a:	e002      	b.n	8012862 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 801285c:	f06f 0303 	mvn.w	r3, #3
 8012860:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012862:	697b      	ldr	r3, [r7, #20]
}
 8012864:	4618      	mov	r0, r3
 8012866:	3718      	adds	r7, #24
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801286c:	b480      	push	{r7}
 801286e:	b085      	sub	sp, #20
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	4a07      	ldr	r2, [pc, #28]	; (8012898 <vApplicationGetIdleTaskMemory+0x2c>)
 801287c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	4a06      	ldr	r2, [pc, #24]	; (801289c <vApplicationGetIdleTaskMemory+0x30>)
 8012882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2280      	movs	r2, #128	; 0x80
 8012888:	601a      	str	r2, [r3, #0]
}
 801288a:	bf00      	nop
 801288c:	3714      	adds	r7, #20
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	200015a4 	.word	0x200015a4
 801289c:	20001660 	.word	0x20001660

080128a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	60f8      	str	r0, [r7, #12]
 80128a8:	60b9      	str	r1, [r7, #8]
 80128aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	4a07      	ldr	r2, [pc, #28]	; (80128cc <vApplicationGetTimerTaskMemory+0x2c>)
 80128b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	4a06      	ldr	r2, [pc, #24]	; (80128d0 <vApplicationGetTimerTaskMemory+0x30>)
 80128b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80128be:	601a      	str	r2, [r3, #0]
}
 80128c0:	bf00      	nop
 80128c2:	3714      	adds	r7, #20
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr
 80128cc:	20001860 	.word	0x20001860
 80128d0:	2000191c 	.word	0x2000191c

080128d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f103 0208 	add.w	r2, r3, #8
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f04f 32ff 	mov.w	r2, #4294967295
 80128ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f103 0208 	add.w	r2, r3, #8
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f103 0208 	add.w	r2, r3, #8
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012908:	bf00      	nop
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr

08012914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012922:	bf00      	nop
 8012924:	370c      	adds	r7, #12
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr

0801292e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801292e:	b480      	push	{r7}
 8012930:	b085      	sub	sp, #20
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
 8012936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	689a      	ldr	r2, [r3, #8]
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	683a      	ldr	r2, [r7, #0]
 8012952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	683a      	ldr	r2, [r7, #0]
 8012958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	601a      	str	r2, [r3, #0]
}
 801296a:	bf00      	nop
 801296c:	3714      	adds	r7, #20
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr

08012976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012976:	b480      	push	{r7}
 8012978:	b085      	sub	sp, #20
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
 801297e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298c:	d103      	bne.n	8012996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	691b      	ldr	r3, [r3, #16]
 8012992:	60fb      	str	r3, [r7, #12]
 8012994:	e00c      	b.n	80129b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3308      	adds	r3, #8
 801299a:	60fb      	str	r3, [r7, #12]
 801299c:	e002      	b.n	80129a4 <vListInsert+0x2e>
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d2f6      	bcs.n	801299e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	685a      	ldr	r2, [r3, #4]
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	683a      	ldr	r2, [r7, #0]
 80129be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	683a      	ldr	r2, [r7, #0]
 80129ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	601a      	str	r2, [r3, #0]
}
 80129dc:	bf00      	nop
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80129e8:	b480      	push	{r7}
 80129ea:	b085      	sub	sp, #20
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	691b      	ldr	r3, [r3, #16]
 80129f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	6892      	ldr	r2, [r2, #8]
 80129fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	6852      	ldr	r2, [r2, #4]
 8012a08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d103      	bne.n	8012a1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	689a      	ldr	r2, [r3, #8]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	1e5a      	subs	r2, r3, #1
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3714      	adds	r7, #20
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d10a      	bne.n	8012a66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a54:	f383 8811 	msr	BASEPRI, r3
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	f3bf 8f4f 	dsb	sy
 8012a60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012a62:	bf00      	nop
 8012a64:	e7fe      	b.n	8012a64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012a66:	f002 fa1d 	bl	8014ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a72:	68f9      	ldr	r1, [r7, #12]
 8012a74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012a76:	fb01 f303 	mul.w	r3, r1, r3
 8012a7a:	441a      	add	r2, r3
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2200      	movs	r2, #0
 8012a84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a96:	3b01      	subs	r3, #1
 8012a98:	68f9      	ldr	r1, [r7, #12]
 8012a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012a9c:	fb01 f303 	mul.w	r3, r1, r3
 8012aa0:	441a      	add	r2, r3
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	22ff      	movs	r2, #255	; 0xff
 8012aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	22ff      	movs	r2, #255	; 0xff
 8012ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d114      	bne.n	8012ae6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d01a      	beq.n	8012afa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	3310      	adds	r3, #16
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f001 fa89 	bl	8013fe0 <xTaskRemoveFromEventList>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d012      	beq.n	8012afa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012ad4:	4b0c      	ldr	r3, [pc, #48]	; (8012b08 <xQueueGenericReset+0xcc>)
 8012ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ada:	601a      	str	r2, [r3, #0]
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	f3bf 8f6f 	isb	sy
 8012ae4:	e009      	b.n	8012afa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	3310      	adds	r3, #16
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff fef2 	bl	80128d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	3324      	adds	r3, #36	; 0x24
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7ff feed 	bl	80128d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012afa:	f002 fa03 	bl	8014f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012afe:	2301      	movs	r3, #1
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3710      	adds	r7, #16
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	e000ed04 	.word	0xe000ed04

08012b0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b08e      	sub	sp, #56	; 0x38
 8012b10:	af02      	add	r7, sp, #8
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]
 8012b18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10a      	bne.n	8012b36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	f383 8811 	msr	BASEPRI, r3
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012b32:	bf00      	nop
 8012b34:	e7fe      	b.n	8012b34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10a      	bne.n	8012b52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b40:	f383 8811 	msr	BASEPRI, r3
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b4e:	bf00      	nop
 8012b50:	e7fe      	b.n	8012b50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d002      	beq.n	8012b5e <xQueueGenericCreateStatic+0x52>
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d001      	beq.n	8012b62 <xQueueGenericCreateStatic+0x56>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e000      	b.n	8012b64 <xQueueGenericCreateStatic+0x58>
 8012b62:	2300      	movs	r3, #0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10a      	bne.n	8012b7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6c:	f383 8811 	msr	BASEPRI, r3
 8012b70:	f3bf 8f6f 	isb	sy
 8012b74:	f3bf 8f4f 	dsb	sy
 8012b78:	623b      	str	r3, [r7, #32]
}
 8012b7a:	bf00      	nop
 8012b7c:	e7fe      	b.n	8012b7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d102      	bne.n	8012b8a <xQueueGenericCreateStatic+0x7e>
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <xQueueGenericCreateStatic+0x82>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <xQueueGenericCreateStatic+0x84>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	61fb      	str	r3, [r7, #28]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012baa:	2350      	movs	r3, #80	; 0x50
 8012bac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	2b50      	cmp	r3, #80	; 0x50
 8012bb2:	d00a      	beq.n	8012bca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	61bb      	str	r3, [r7, #24]
}
 8012bc6:	bf00      	nop
 8012bc8:	e7fe      	b.n	8012bc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012bca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d00d      	beq.n	8012bf2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012bde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	4613      	mov	r3, r2
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	68b9      	ldr	r1, [r7, #8]
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f000 f83f 	bl	8012c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3730      	adds	r7, #48	; 0x30
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b08a      	sub	sp, #40	; 0x28
 8012c00:	af02      	add	r7, sp, #8
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	4613      	mov	r3, r2
 8012c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d10a      	bne.n	8012c26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c14:	f383 8811 	msr	BASEPRI, r3
 8012c18:	f3bf 8f6f 	isb	sy
 8012c1c:	f3bf 8f4f 	dsb	sy
 8012c20:	613b      	str	r3, [r7, #16]
}
 8012c22:	bf00      	nop
 8012c24:	e7fe      	b.n	8012c24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	68ba      	ldr	r2, [r7, #8]
 8012c2a:	fb02 f303 	mul.w	r3, r2, r3
 8012c2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	3350      	adds	r3, #80	; 0x50
 8012c34:	4618      	mov	r0, r3
 8012c36:	f002 fa57 	bl	80150e8 <pvPortMalloc>
 8012c3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d011      	beq.n	8012c66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	3350      	adds	r3, #80	; 0x50
 8012c4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012c54:	79fa      	ldrb	r2, [r7, #7]
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	697a      	ldr	r2, [r7, #20]
 8012c5e:	68b9      	ldr	r1, [r7, #8]
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f000 f805 	bl	8012c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012c66:	69bb      	ldr	r3, [r7, #24]
	}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3720      	adds	r7, #32
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d103      	bne.n	8012c8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	69ba      	ldr	r2, [r7, #24]
 8012c88:	601a      	str	r2, [r3, #0]
 8012c8a:	e002      	b.n	8012c92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012c98:	69bb      	ldr	r3, [r7, #24]
 8012c9a:	68ba      	ldr	r2, [r7, #8]
 8012c9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012c9e:	2101      	movs	r1, #1
 8012ca0:	69b8      	ldr	r0, [r7, #24]
 8012ca2:	f7ff fecb 	bl	8012a3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	78fa      	ldrb	r2, [r7, #3]
 8012caa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8012cae:	78fb      	ldrb	r3, [r7, #3]
 8012cb0:	68ba      	ldr	r2, [r7, #8]
 8012cb2:	68f9      	ldr	r1, [r7, #12]
 8012cb4:	2073      	movs	r0, #115	; 0x73
 8012cb6:	f003 f8df 	bl	8015e78 <SEGGER_SYSVIEW_RecordU32x3>
}
 8012cba:	bf00      	nop
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
	...

08012cc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b090      	sub	sp, #64	; 0x40
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
 8012cd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10a      	bne.n	8012cf6 <xQueueGenericSend+0x32>
	__asm volatile
 8012ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	f3bf 8f6f 	isb	sy
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012cf2:	bf00      	nop
 8012cf4:	e7fe      	b.n	8012cf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d103      	bne.n	8012d04 <xQueueGenericSend+0x40>
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d101      	bne.n	8012d08 <xQueueGenericSend+0x44>
 8012d04:	2301      	movs	r3, #1
 8012d06:	e000      	b.n	8012d0a <xQueueGenericSend+0x46>
 8012d08:	2300      	movs	r3, #0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d10a      	bne.n	8012d24 <xQueueGenericSend+0x60>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d20:	bf00      	nop
 8012d22:	e7fe      	b.n	8012d22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d103      	bne.n	8012d32 <xQueueGenericSend+0x6e>
 8012d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d101      	bne.n	8012d36 <xQueueGenericSend+0x72>
 8012d32:	2301      	movs	r3, #1
 8012d34:	e000      	b.n	8012d38 <xQueueGenericSend+0x74>
 8012d36:	2300      	movs	r3, #0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10a      	bne.n	8012d52 <xQueueGenericSend+0x8e>
	__asm volatile
 8012d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	623b      	str	r3, [r7, #32]
}
 8012d4e:	bf00      	nop
 8012d50:	e7fe      	b.n	8012d50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d52:	f001 fb43 	bl	80143dc <xTaskGetSchedulerState>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d102      	bne.n	8012d62 <xQueueGenericSend+0x9e>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <xQueueGenericSend+0xa2>
 8012d62:	2301      	movs	r3, #1
 8012d64:	e000      	b.n	8012d68 <xQueueGenericSend+0xa4>
 8012d66:	2300      	movs	r3, #0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d10a      	bne.n	8012d82 <xQueueGenericSend+0xbe>
	__asm volatile
 8012d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d70:	f383 8811 	msr	BASEPRI, r3
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	f3bf 8f4f 	dsb	sy
 8012d7c:	61fb      	str	r3, [r7, #28]
}
 8012d7e:	bf00      	nop
 8012d80:	e7fe      	b.n	8012d80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d82:	f002 f88f 	bl	8014ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d302      	bcc.n	8012d98 <xQueueGenericSend+0xd4>
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	2b02      	cmp	r3, #2
 8012d96:	d136      	bne.n	8012e06 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8012d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f003 fd1e 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8012da0:	68ba      	ldr	r2, [r7, #8]
 8012da2:	6879      	ldr	r1, [r7, #4]
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	460b      	mov	r3, r1
 8012daa:	4601      	mov	r1, r0
 8012dac:	205a      	movs	r0, #90	; 0x5a
 8012dae:	f003 f8d9 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012db2:	683a      	ldr	r2, [r7, #0]
 8012db4:	68b9      	ldr	r1, [r7, #8]
 8012db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012db8:	f000 fa6a 	bl	8013290 <prvCopyDataToQueue>
 8012dbc:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d010      	beq.n	8012de8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	3324      	adds	r3, #36	; 0x24
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f001 f908 	bl	8013fe0 <xTaskRemoveFromEventList>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d013      	beq.n	8012dfe <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012dd6:	4b4d      	ldr	r3, [pc, #308]	; (8012f0c <xQueueGenericSend+0x248>)
 8012dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ddc:	601a      	str	r2, [r3, #0]
 8012dde:	f3bf 8f4f 	dsb	sy
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	e00a      	b.n	8012dfe <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d007      	beq.n	8012dfe <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012dee:	4b47      	ldr	r3, [pc, #284]	; (8012f0c <xQueueGenericSend+0x248>)
 8012df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012df4:	601a      	str	r2, [r3, #0]
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012dfe:	f002 f881 	bl	8014f04 <vPortExitCritical>
				return pdPASS;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e07d      	b.n	8012f02 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d110      	bne.n	8012e2e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e0c:	f002 f87a 	bl	8014f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8012e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e12:	4618      	mov	r0, r3
 8012e14:	f003 fce2 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	6879      	ldr	r1, [r7, #4]
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	460b      	mov	r3, r1
 8012e22:	4601      	mov	r1, r0
 8012e24:	205a      	movs	r0, #90	; 0x5a
 8012e26:	f003 f89d 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	e069      	b.n	8012f02 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d106      	bne.n	8012e42 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e34:	f107 0314 	add.w	r3, r7, #20
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f001 f939 	bl	80140b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e42:	f002 f85f 	bl	8014f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e46:	f000 fe71 	bl	8013b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e4a:	f002 f82b 	bl	8014ea4 <vPortEnterCritical>
 8012e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e54:	b25b      	sxtb	r3, r3
 8012e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e5a:	d103      	bne.n	8012e64 <xQueueGenericSend+0x1a0>
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e6a:	b25b      	sxtb	r3, r3
 8012e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e70:	d103      	bne.n	8012e7a <xQueueGenericSend+0x1b6>
 8012e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012e7a:	f002 f843 	bl	8014f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e7e:	1d3a      	adds	r2, r7, #4
 8012e80:	f107 0314 	add.w	r3, r7, #20
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f001 f928 	bl	80140dc <xTaskCheckForTimeOut>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d124      	bne.n	8012edc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e94:	f000 faf4 	bl	8013480 <prvIsQueueFull>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d018      	beq.n	8012ed0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea0:	3310      	adds	r3, #16
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f001 f848 	bl	8013f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eae:	f000 fa7f 	bl	80133b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012eb2:	f000 fe49 	bl	8013b48 <xTaskResumeAll>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f47f af62 	bne.w	8012d82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012ebe:	4b13      	ldr	r3, [pc, #76]	; (8012f0c <xQueueGenericSend+0x248>)
 8012ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ec4:	601a      	str	r2, [r3, #0]
 8012ec6:	f3bf 8f4f 	dsb	sy
 8012eca:	f3bf 8f6f 	isb	sy
 8012ece:	e758      	b.n	8012d82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ed2:	f000 fa6d 	bl	80133b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012ed6:	f000 fe37 	bl	8013b48 <xTaskResumeAll>
 8012eda:	e752      	b.n	8012d82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ede:	f000 fa67 	bl	80133b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ee2:	f000 fe31 	bl	8013b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f003 fc77 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	6879      	ldr	r1, [r7, #4]
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	4601      	mov	r1, r0
 8012efa:	205a      	movs	r0, #90	; 0x5a
 8012efc:	f003 f832 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8012f00:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3738      	adds	r7, #56	; 0x38
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	e000ed04 	.word	0xe000ed04

08012f10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b090      	sub	sp, #64	; 0x40
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
 8012f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10a      	bne.n	8012f3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2c:	f383 8811 	msr	BASEPRI, r3
 8012f30:	f3bf 8f6f 	isb	sy
 8012f34:	f3bf 8f4f 	dsb	sy
 8012f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f3a:	bf00      	nop
 8012f3c:	e7fe      	b.n	8012f3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d103      	bne.n	8012f4c <xQueueGenericSendFromISR+0x3c>
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d101      	bne.n	8012f50 <xQueueGenericSendFromISR+0x40>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e000      	b.n	8012f52 <xQueueGenericSendFromISR+0x42>
 8012f50:	2300      	movs	r3, #0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d10a      	bne.n	8012f6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5a:	f383 8811 	msr	BASEPRI, r3
 8012f5e:	f3bf 8f6f 	isb	sy
 8012f62:	f3bf 8f4f 	dsb	sy
 8012f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012f68:	bf00      	nop
 8012f6a:	e7fe      	b.n	8012f6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	2b02      	cmp	r3, #2
 8012f70:	d103      	bne.n	8012f7a <xQueueGenericSendFromISR+0x6a>
 8012f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d101      	bne.n	8012f7e <xQueueGenericSendFromISR+0x6e>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e000      	b.n	8012f80 <xQueueGenericSendFromISR+0x70>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10a      	bne.n	8012f9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	623b      	str	r3, [r7, #32]
}
 8012f96:	bf00      	nop
 8012f98:	e7fe      	b.n	8012f98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f9a:	f002 f865 	bl	8015068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8012fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa6:	f383 8811 	msr	BASEPRI, r3
 8012faa:	f3bf 8f6f 	isb	sy
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	61fa      	str	r2, [r7, #28]
 8012fb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012fb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012fb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d302      	bcc.n	8012fcc <xQueueGenericSendFromISR+0xbc>
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	2b02      	cmp	r3, #2
 8012fca:	d139      	bne.n	8013040 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fda:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f003 fbfc 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8012fe4:	4601      	mov	r1, r0
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	2060      	movs	r0, #96	; 0x60
 8012fec:	f002 feea 	bl	8015dc4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	68b9      	ldr	r1, [r7, #8]
 8012ff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ff6:	f000 f94b 	bl	8013290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012ffa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013002:	d112      	bne.n	801302a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013008:	2b00      	cmp	r3, #0
 801300a:	d016      	beq.n	801303a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	3324      	adds	r3, #36	; 0x24
 8013010:	4618      	mov	r0, r3
 8013012:	f000 ffe5 	bl	8013fe0 <xTaskRemoveFromEventList>
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00e      	beq.n	801303a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00b      	beq.n	801303a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2201      	movs	r2, #1
 8013026:	601a      	str	r2, [r3, #0]
 8013028:	e007      	b.n	801303a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801302a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801302e:	3301      	adds	r3, #1
 8013030:	b2db      	uxtb	r3, r3
 8013032:	b25a      	sxtb	r2, r3
 8013034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801303a:	2301      	movs	r3, #1
 801303c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801303e:	e00b      	b.n	8013058 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	4618      	mov	r0, r3
 8013044:	f003 fbca 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8013048:	4601      	mov	r1, r0
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	461a      	mov	r2, r3
 801304e:	2060      	movs	r0, #96	; 0x60
 8013050:	f002 feb8 	bl	8015dc4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8013054:	2300      	movs	r3, #0
 8013056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801305a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013062:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013066:	4618      	mov	r0, r3
 8013068:	3740      	adds	r7, #64	; 0x40
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
	...

08013070 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013070:	b590      	push	{r4, r7, lr}
 8013072:	b08f      	sub	sp, #60	; 0x3c
 8013074:	af02      	add	r7, sp, #8
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801307c:	2300      	movs	r3, #0
 801307e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10a      	bne.n	80130a0 <xQueueReceive+0x30>
	__asm volatile
 801308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308e:	f383 8811 	msr	BASEPRI, r3
 8013092:	f3bf 8f6f 	isb	sy
 8013096:	f3bf 8f4f 	dsb	sy
 801309a:	623b      	str	r3, [r7, #32]
}
 801309c:	bf00      	nop
 801309e:	e7fe      	b.n	801309e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d103      	bne.n	80130ae <xQueueReceive+0x3e>
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d101      	bne.n	80130b2 <xQueueReceive+0x42>
 80130ae:	2301      	movs	r3, #1
 80130b0:	e000      	b.n	80130b4 <xQueueReceive+0x44>
 80130b2:	2300      	movs	r3, #0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10a      	bne.n	80130ce <xQueueReceive+0x5e>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	61fb      	str	r3, [r7, #28]
}
 80130ca:	bf00      	nop
 80130cc:	e7fe      	b.n	80130cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130ce:	f001 f985 	bl	80143dc <xTaskGetSchedulerState>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d102      	bne.n	80130de <xQueueReceive+0x6e>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d101      	bne.n	80130e2 <xQueueReceive+0x72>
 80130de:	2301      	movs	r3, #1
 80130e0:	e000      	b.n	80130e4 <xQueueReceive+0x74>
 80130e2:	2300      	movs	r3, #0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10a      	bne.n	80130fe <xQueueReceive+0x8e>
	__asm volatile
 80130e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	61bb      	str	r3, [r7, #24]
}
 80130fa:	bf00      	nop
 80130fc:	e7fe      	b.n	80130fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130fe:	f001 fed1 	bl	8014ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	2b00      	cmp	r3, #0
 801310c:	d02f      	beq.n	801316e <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801310e:	68b9      	ldr	r1, [r7, #8]
 8013110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013112:	f000 f927 	bl	8013364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8013116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013118:	4618      	mov	r0, r3
 801311a:	f003 fb5f 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 801311e:	4604      	mov	r4, r0
 8013120:	2000      	movs	r0, #0
 8013122:	f003 fb5b 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8013126:	4602      	mov	r2, r0
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2101      	movs	r1, #1
 801312c:	9100      	str	r1, [sp, #0]
 801312e:	4621      	mov	r1, r4
 8013130:	205c      	movs	r0, #92	; 0x5c
 8013132:	f002 ff17 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	1e5a      	subs	r2, r3, #1
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	691b      	ldr	r3, [r3, #16]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d00f      	beq.n	8013166 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	3310      	adds	r3, #16
 801314a:	4618      	mov	r0, r3
 801314c:	f000 ff48 	bl	8013fe0 <xTaskRemoveFromEventList>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d007      	beq.n	8013166 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013156:	4b4d      	ldr	r3, [pc, #308]	; (801328c <xQueueReceive+0x21c>)
 8013158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801315c:	601a      	str	r2, [r3, #0]
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013166:	f001 fecd 	bl	8014f04 <vPortExitCritical>
				return pdPASS;
 801316a:	2301      	movs	r3, #1
 801316c:	e08a      	b.n	8013284 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d113      	bne.n	801319c <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013174:	f001 fec6 	bl	8014f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	4618      	mov	r0, r3
 801317c:	f003 fb2e 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8013180:	4604      	mov	r4, r0
 8013182:	2000      	movs	r0, #0
 8013184:	f003 fb2a 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8013188:	4602      	mov	r2, r0
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2101      	movs	r1, #1
 801318e:	9100      	str	r1, [sp, #0]
 8013190:	4621      	mov	r1, r4
 8013192:	205c      	movs	r0, #92	; 0x5c
 8013194:	f002 fee6 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8013198:	2300      	movs	r3, #0
 801319a:	e073      	b.n	8013284 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d106      	bne.n	80131b0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131a2:	f107 0310 	add.w	r3, r7, #16
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 ff82 	bl	80140b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80131ac:	2301      	movs	r3, #1
 80131ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80131b0:	f001 fea8 	bl	8014f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80131b4:	f000 fcba 	bl	8013b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80131b8:	f001 fe74 	bl	8014ea4 <vPortEnterCritical>
 80131bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131c2:	b25b      	sxtb	r3, r3
 80131c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c8:	d103      	bne.n	80131d2 <xQueueReceive+0x162>
 80131ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131cc:	2200      	movs	r2, #0
 80131ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80131d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131d8:	b25b      	sxtb	r3, r3
 80131da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131de:	d103      	bne.n	80131e8 <xQueueReceive+0x178>
 80131e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e2:	2200      	movs	r2, #0
 80131e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80131e8:	f001 fe8c 	bl	8014f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80131ec:	1d3a      	adds	r2, r7, #4
 80131ee:	f107 0310 	add.w	r3, r7, #16
 80131f2:	4611      	mov	r1, r2
 80131f4:	4618      	mov	r0, r3
 80131f6:	f000 ff71 	bl	80140dc <xTaskCheckForTimeOut>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d124      	bne.n	801324a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013202:	f000 f927 	bl	8013454 <prvIsQueueEmpty>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d018      	beq.n	801323e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320e:	3324      	adds	r3, #36	; 0x24
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	4611      	mov	r1, r2
 8013214:	4618      	mov	r0, r3
 8013216:	f000 fe91 	bl	8013f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801321a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801321c:	f000 f8c8 	bl	80133b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013220:	f000 fc92 	bl	8013b48 <xTaskResumeAll>
 8013224:	4603      	mov	r3, r0
 8013226:	2b00      	cmp	r3, #0
 8013228:	f47f af69 	bne.w	80130fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801322c:	4b17      	ldr	r3, [pc, #92]	; (801328c <xQueueReceive+0x21c>)
 801322e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	f3bf 8f6f 	isb	sy
 801323c:	e75f      	b.n	80130fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801323e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013240:	f000 f8b6 	bl	80133b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013244:	f000 fc80 	bl	8013b48 <xTaskResumeAll>
 8013248:	e759      	b.n	80130fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801324a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801324c:	f000 f8b0 	bl	80133b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013250:	f000 fc7a 	bl	8013b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013256:	f000 f8fd 	bl	8013454 <prvIsQueueEmpty>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	f43f af4e 	beq.w	80130fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8013262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013264:	4618      	mov	r0, r3
 8013266:	f003 fab9 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 801326a:	4604      	mov	r4, r0
 801326c:	2000      	movs	r0, #0
 801326e:	f003 fab5 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 8013272:	4602      	mov	r2, r0
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2101      	movs	r1, #1
 8013278:	9100      	str	r1, [sp, #0]
 801327a:	4621      	mov	r1, r4
 801327c:	205c      	movs	r0, #92	; 0x5c
 801327e:	f002 fe71 	bl	8015f64 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8013282:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013284:	4618      	mov	r0, r3
 8013286:	3734      	adds	r7, #52	; 0x34
 8013288:	46bd      	mov	sp, r7
 801328a:	bd90      	pop	{r4, r7, pc}
 801328c:	e000ed04 	.word	0xe000ed04

08013290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801329c:	2300      	movs	r3, #0
 801329e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d10d      	bne.n	80132ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d14d      	bne.n	8013352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f001 f8ac 	bl	8014418 <xTaskPriorityDisinherit>
 80132c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2200      	movs	r2, #0
 80132c6:	609a      	str	r2, [r3, #8]
 80132c8:	e043      	b.n	8013352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d119      	bne.n	8013304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6858      	ldr	r0, [r3, #4]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d8:	461a      	mov	r2, r3
 80132da:	68b9      	ldr	r1, [r7, #8]
 80132dc:	f003 fc1e 	bl	8016b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	685a      	ldr	r2, [r3, #4]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e8:	441a      	add	r2, r3
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	685a      	ldr	r2, [r3, #4]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d32b      	bcc.n	8013352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	605a      	str	r2, [r3, #4]
 8013302:	e026      	b.n	8013352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	68d8      	ldr	r0, [r3, #12]
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330c:	461a      	mov	r2, r3
 801330e:	68b9      	ldr	r1, [r7, #8]
 8013310:	f003 fc04 	bl	8016b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	68da      	ldr	r2, [r3, #12]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801331c:	425b      	negs	r3, r3
 801331e:	441a      	add	r2, r3
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	68da      	ldr	r2, [r3, #12]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	429a      	cmp	r2, r3
 801332e:	d207      	bcs.n	8013340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	689a      	ldr	r2, [r3, #8]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013338:	425b      	negs	r3, r3
 801333a:	441a      	add	r2, r3
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b02      	cmp	r3, #2
 8013344:	d105      	bne.n	8013352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d002      	beq.n	8013352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	3b01      	subs	r3, #1
 8013350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	1c5a      	adds	r2, r3, #1
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801335a:	697b      	ldr	r3, [r7, #20]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3718      	adds	r7, #24
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013372:	2b00      	cmp	r3, #0
 8013374:	d018      	beq.n	80133a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	68da      	ldr	r2, [r3, #12]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801337e:	441a      	add	r2, r3
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	68da      	ldr	r2, [r3, #12]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	689b      	ldr	r3, [r3, #8]
 801338c:	429a      	cmp	r2, r3
 801338e:	d303      	bcc.n	8013398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	68d9      	ldr	r1, [r3, #12]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133a0:	461a      	mov	r2, r3
 80133a2:	6838      	ldr	r0, [r7, #0]
 80133a4:	f003 fbba 	bl	8016b1c <memcpy>
	}
}
 80133a8:	bf00      	nop
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80133b8:	f001 fd74 	bl	8014ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80133c4:	e011      	b.n	80133ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d012      	beq.n	80133f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	3324      	adds	r3, #36	; 0x24
 80133d2:	4618      	mov	r0, r3
 80133d4:	f000 fe04 	bl	8013fe0 <xTaskRemoveFromEventList>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80133de:	f000 fedf 	bl	80141a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80133e2:	7bfb      	ldrb	r3, [r7, #15]
 80133e4:	3b01      	subs	r3, #1
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80133ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	dce9      	bgt.n	80133c6 <prvUnlockQueue+0x16>
 80133f2:	e000      	b.n	80133f6 <prvUnlockQueue+0x46>
					break;
 80133f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	22ff      	movs	r2, #255	; 0xff
 80133fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80133fe:	f001 fd81 	bl	8014f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013402:	f001 fd4f 	bl	8014ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801340c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801340e:	e011      	b.n	8013434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	691b      	ldr	r3, [r3, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d012      	beq.n	801343e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3310      	adds	r3, #16
 801341c:	4618      	mov	r0, r3
 801341e:	f000 fddf 	bl	8013fe0 <xTaskRemoveFromEventList>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d001      	beq.n	801342c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013428:	f000 feba 	bl	80141a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801342c:	7bbb      	ldrb	r3, [r7, #14]
 801342e:	3b01      	subs	r3, #1
 8013430:	b2db      	uxtb	r3, r3
 8013432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013438:	2b00      	cmp	r3, #0
 801343a:	dce9      	bgt.n	8013410 <prvUnlockQueue+0x60>
 801343c:	e000      	b.n	8013440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801343e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	22ff      	movs	r2, #255	; 0xff
 8013444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013448:	f001 fd5c 	bl	8014f04 <vPortExitCritical>
}
 801344c:	bf00      	nop
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801345c:	f001 fd22 	bl	8014ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013464:	2b00      	cmp	r3, #0
 8013466:	d102      	bne.n	801346e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013468:	2301      	movs	r3, #1
 801346a:	60fb      	str	r3, [r7, #12]
 801346c:	e001      	b.n	8013472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801346e:	2300      	movs	r3, #0
 8013470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013472:	f001 fd47 	bl	8014f04 <vPortExitCritical>

	return xReturn;
 8013476:	68fb      	ldr	r3, [r7, #12]
}
 8013478:	4618      	mov	r0, r3
 801347a:	3710      	adds	r7, #16
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013488:	f001 fd0c 	bl	8014ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013494:	429a      	cmp	r2, r3
 8013496:	d102      	bne.n	801349e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013498:	2301      	movs	r3, #1
 801349a:	60fb      	str	r3, [r7, #12]
 801349c:	e001      	b.n	80134a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801349e:	2300      	movs	r3, #0
 80134a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80134a2:	f001 fd2f 	bl	8014f04 <vPortExitCritical>

	return xReturn;
 80134a6:	68fb      	ldr	r3, [r7, #12]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80134ba:	2300      	movs	r3, #0
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	e01e      	b.n	80134fe <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80134c0:	4a13      	ldr	r2, [pc, #76]	; (8013510 <vQueueAddToRegistry+0x60>)
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d115      	bne.n	80134f8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80134cc:	4910      	ldr	r1, [pc, #64]	; (8013510 <vQueueAddToRegistry+0x60>)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	683a      	ldr	r2, [r7, #0]
 80134d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80134d6:	4a0e      	ldr	r2, [pc, #56]	; (8013510 <vQueueAddToRegistry+0x60>)
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	00db      	lsls	r3, r3, #3
 80134dc:	4413      	add	r3, r2
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f003 f979 	bl	80167dc <SEGGER_SYSVIEW_ShrinkId>
 80134ea:	4601      	mov	r1, r0
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	461a      	mov	r2, r3
 80134f0:	2071      	movs	r0, #113	; 0x71
 80134f2:	f002 fc67 	bl	8015dc4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80134f6:	e006      	b.n	8013506 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	3301      	adds	r3, #1
 80134fc:	60fb      	str	r3, [r7, #12]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2b07      	cmp	r3, #7
 8013502:	d9dd      	bls.n	80134c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013504:	bf00      	nop
 8013506:	bf00      	nop
 8013508:	3710      	adds	r7, #16
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	2001bc28 	.word	0x2001bc28

08013514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013514:	b580      	push	{r7, lr}
 8013516:	b086      	sub	sp, #24
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013524:	f001 fcbe 	bl	8014ea4 <vPortEnterCritical>
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801352e:	b25b      	sxtb	r3, r3
 8013530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013534:	d103      	bne.n	801353e <vQueueWaitForMessageRestricted+0x2a>
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	2200      	movs	r2, #0
 801353a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013544:	b25b      	sxtb	r3, r3
 8013546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354a:	d103      	bne.n	8013554 <vQueueWaitForMessageRestricted+0x40>
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	2200      	movs	r2, #0
 8013550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013554:	f001 fcd6 	bl	8014f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801355c:	2b00      	cmp	r3, #0
 801355e:	d106      	bne.n	801356e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	3324      	adds	r3, #36	; 0x24
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	68b9      	ldr	r1, [r7, #8]
 8013568:	4618      	mov	r0, r3
 801356a:	f000 fd0b 	bl	8013f84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801356e:	6978      	ldr	r0, [r7, #20]
 8013570:	f7ff ff1e 	bl	80133b0 <prvUnlockQueue>
	}
 8013574:	bf00      	nop
 8013576:	3718      	adds	r7, #24
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801357c:	b580      	push	{r7, lr}
 801357e:	b08e      	sub	sp, #56	; 0x38
 8013580:	af04      	add	r7, sp, #16
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358c:	2b00      	cmp	r3, #0
 801358e:	d10a      	bne.n	80135a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013594:	f383 8811 	msr	BASEPRI, r3
 8013598:	f3bf 8f6f 	isb	sy
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	623b      	str	r3, [r7, #32]
}
 80135a2:	bf00      	nop
 80135a4:	e7fe      	b.n	80135a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80135a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d10a      	bne.n	80135c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80135ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b0:	f383 8811 	msr	BASEPRI, r3
 80135b4:	f3bf 8f6f 	isb	sy
 80135b8:	f3bf 8f4f 	dsb	sy
 80135bc:	61fb      	str	r3, [r7, #28]
}
 80135be:	bf00      	nop
 80135c0:	e7fe      	b.n	80135c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80135c2:	23bc      	movs	r3, #188	; 0xbc
 80135c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2bbc      	cmp	r3, #188	; 0xbc
 80135ca:	d00a      	beq.n	80135e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	61bb      	str	r3, [r7, #24]
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80135e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80135e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d01e      	beq.n	8013628 <xTaskCreateStatic+0xac>
 80135ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d01b      	beq.n	8013628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80135f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80135f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80135fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fc:	2202      	movs	r2, #2
 80135fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013602:	2300      	movs	r3, #0
 8013604:	9303      	str	r3, [sp, #12]
 8013606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013608:	9302      	str	r3, [sp, #8]
 801360a:	f107 0314 	add.w	r3, r7, #20
 801360e:	9301      	str	r3, [sp, #4]
 8013610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	68b9      	ldr	r1, [r7, #8]
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 f850 	bl	80136c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013622:	f000 f8f3 	bl	801380c <prvAddNewTaskToReadyList>
 8013626:	e001      	b.n	801362c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013628:	2300      	movs	r3, #0
 801362a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801362c:	697b      	ldr	r3, [r7, #20]
	}
 801362e:	4618      	mov	r0, r3
 8013630:	3728      	adds	r7, #40	; 0x28
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013636:	b580      	push	{r7, lr}
 8013638:	b08c      	sub	sp, #48	; 0x30
 801363a:	af04      	add	r7, sp, #16
 801363c:	60f8      	str	r0, [r7, #12]
 801363e:	60b9      	str	r1, [r7, #8]
 8013640:	603b      	str	r3, [r7, #0]
 8013642:	4613      	mov	r3, r2
 8013644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013646:	88fb      	ldrh	r3, [r7, #6]
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4618      	mov	r0, r3
 801364c:	f001 fd4c 	bl	80150e8 <pvPortMalloc>
 8013650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00e      	beq.n	8013676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013658:	20bc      	movs	r0, #188	; 0xbc
 801365a:	f001 fd45 	bl	80150e8 <pvPortMalloc>
 801365e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d003      	beq.n	801366e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	697a      	ldr	r2, [r7, #20]
 801366a:	631a      	str	r2, [r3, #48]	; 0x30
 801366c:	e005      	b.n	801367a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801366e:	6978      	ldr	r0, [r7, #20]
 8013670:	f001 fe06 	bl	8015280 <vPortFree>
 8013674:	e001      	b.n	801367a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013676:	2300      	movs	r3, #0
 8013678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d017      	beq.n	80136b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	2200      	movs	r2, #0
 8013684:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013688:	88fa      	ldrh	r2, [r7, #6]
 801368a:	2300      	movs	r3, #0
 801368c:	9303      	str	r3, [sp, #12]
 801368e:	69fb      	ldr	r3, [r7, #28]
 8013690:	9302      	str	r3, [sp, #8]
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	68b9      	ldr	r1, [r7, #8]
 801369e:	68f8      	ldr	r0, [r7, #12]
 80136a0:	f000 f80e 	bl	80136c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136a4:	69f8      	ldr	r0, [r7, #28]
 80136a6:	f000 f8b1 	bl	801380c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80136aa:	2301      	movs	r3, #1
 80136ac:	61bb      	str	r3, [r7, #24]
 80136ae:	e002      	b.n	80136b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80136b0:	f04f 33ff 	mov.w	r3, #4294967295
 80136b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80136b6:	69bb      	ldr	r3, [r7, #24]
	}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3720      	adds	r7, #32
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b088      	sub	sp, #32
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
 80136cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	461a      	mov	r2, r3
 80136d8:	21a5      	movs	r1, #165	; 0xa5
 80136da:	f003 fa2d 	bl	8016b38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80136e8:	3b01      	subs	r3, #1
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	4413      	add	r3, r2
 80136ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	f023 0307 	bic.w	r3, r3, #7
 80136f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80136f8:	69bb      	ldr	r3, [r7, #24]
 80136fa:	f003 0307 	and.w	r3, r3, #7
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00a      	beq.n	8013718 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013706:	f383 8811 	msr	BASEPRI, r3
 801370a:	f3bf 8f6f 	isb	sy
 801370e:	f3bf 8f4f 	dsb	sy
 8013712:	617b      	str	r3, [r7, #20]
}
 8013714:	bf00      	nop
 8013716:	e7fe      	b.n	8013716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d01f      	beq.n	801375e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801371e:	2300      	movs	r3, #0
 8013720:	61fb      	str	r3, [r7, #28]
 8013722:	e012      	b.n	801374a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013724:	68ba      	ldr	r2, [r7, #8]
 8013726:	69fb      	ldr	r3, [r7, #28]
 8013728:	4413      	add	r3, r2
 801372a:	7819      	ldrb	r1, [r3, #0]
 801372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	4413      	add	r3, r2
 8013732:	3334      	adds	r3, #52	; 0x34
 8013734:	460a      	mov	r2, r1
 8013736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013738:	68ba      	ldr	r2, [r7, #8]
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	4413      	add	r3, r2
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d006      	beq.n	8013752 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	3301      	adds	r3, #1
 8013748:	61fb      	str	r3, [r7, #28]
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	2b0f      	cmp	r3, #15
 801374e:	d9e9      	bls.n	8013724 <prvInitialiseNewTask+0x64>
 8013750:	e000      	b.n	8013754 <prvInitialiseNewTask+0x94>
			{
				break;
 8013752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801375c:	e003      	b.n	8013766 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013760:	2200      	movs	r2, #0
 8013762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013768:	2b37      	cmp	r3, #55	; 0x37
 801376a:	d901      	bls.n	8013770 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801376c:	2337      	movs	r3, #55	; 0x37
 801376e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801377a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377e:	2200      	movs	r2, #0
 8013780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013784:	3304      	adds	r3, #4
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff f8c4 	bl	8012914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378e:	3318      	adds	r3, #24
 8013790:	4618      	mov	r0, r3
 8013792:	f7ff f8bf 	bl	8012914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801379a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	2200      	movs	r2, #0
 80137b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b6:	2200      	movs	r2, #0
 80137b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80137bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137be:	3354      	adds	r3, #84	; 0x54
 80137c0:	2260      	movs	r2, #96	; 0x60
 80137c2:	2100      	movs	r1, #0
 80137c4:	4618      	mov	r0, r3
 80137c6:	f003 f9b7 	bl	8016b38 <memset>
 80137ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137cc:	4a0c      	ldr	r2, [pc, #48]	; (8013800 <prvInitialiseNewTask+0x140>)
 80137ce:	659a      	str	r2, [r3, #88]	; 0x58
 80137d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d2:	4a0c      	ldr	r2, [pc, #48]	; (8013804 <prvInitialiseNewTask+0x144>)
 80137d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	4a0b      	ldr	r2, [pc, #44]	; (8013808 <prvInitialiseNewTask+0x148>)
 80137da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80137dc:	683a      	ldr	r2, [r7, #0]
 80137de:	68f9      	ldr	r1, [r7, #12]
 80137e0:	69b8      	ldr	r0, [r7, #24]
 80137e2:	f001 fa31 	bl	8014c48 <pxPortInitialiseStack>
 80137e6:	4602      	mov	r2, r0
 80137e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80137ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d002      	beq.n	80137f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80137f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137f8:	bf00      	nop
 80137fa:	3720      	adds	r7, #32
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	08018b24 	.word	0x08018b24
 8013804:	08018b44 	.word	0x08018b44
 8013808:	08018b04 	.word	0x08018b04

0801380c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801380c:	b5b0      	push	{r4, r5, r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af02      	add	r7, sp, #8
 8013812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013814:	f001 fb46 	bl	8014ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013818:	4b3c      	ldr	r3, [pc, #240]	; (801390c <prvAddNewTaskToReadyList+0x100>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	3301      	adds	r3, #1
 801381e:	4a3b      	ldr	r2, [pc, #236]	; (801390c <prvAddNewTaskToReadyList+0x100>)
 8013820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013822:	4b3b      	ldr	r3, [pc, #236]	; (8013910 <prvAddNewTaskToReadyList+0x104>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d109      	bne.n	801383e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801382a:	4a39      	ldr	r2, [pc, #228]	; (8013910 <prvAddNewTaskToReadyList+0x104>)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013830:	4b36      	ldr	r3, [pc, #216]	; (801390c <prvAddNewTaskToReadyList+0x100>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b01      	cmp	r3, #1
 8013836:	d110      	bne.n	801385a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013838:	f000 fcd6 	bl	80141e8 <prvInitialiseTaskLists>
 801383c:	e00d      	b.n	801385a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801383e:	4b35      	ldr	r3, [pc, #212]	; (8013914 <prvAddNewTaskToReadyList+0x108>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d109      	bne.n	801385a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013846:	4b32      	ldr	r3, [pc, #200]	; (8013910 <prvAddNewTaskToReadyList+0x104>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013850:	429a      	cmp	r2, r3
 8013852:	d802      	bhi.n	801385a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013854:	4a2e      	ldr	r2, [pc, #184]	; (8013910 <prvAddNewTaskToReadyList+0x104>)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801385a:	4b2f      	ldr	r3, [pc, #188]	; (8013918 <prvAddNewTaskToReadyList+0x10c>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	3301      	adds	r3, #1
 8013860:	4a2d      	ldr	r2, [pc, #180]	; (8013918 <prvAddNewTaskToReadyList+0x10c>)
 8013862:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013864:	4b2c      	ldr	r3, [pc, #176]	; (8013918 <prvAddNewTaskToReadyList+0x10c>)
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d016      	beq.n	80138a0 <prvAddNewTaskToReadyList+0x94>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	4618      	mov	r0, r3
 8013876:	f002 feeb 	bl	8016650 <SEGGER_SYSVIEW_OnTaskCreate>
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801388a:	461d      	mov	r5, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	461c      	mov	r4, r3
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013896:	1ae3      	subs	r3, r4, r3
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	462b      	mov	r3, r5
 801389c:	f7ed ff0e 	bl	80016bc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f002 ff58 	bl	8016758 <SEGGER_SYSVIEW_OnTaskStartReady>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ac:	4b1b      	ldr	r3, [pc, #108]	; (801391c <prvAddNewTaskToReadyList+0x110>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d903      	bls.n	80138bc <prvAddNewTaskToReadyList+0xb0>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b8:	4a18      	ldr	r2, [pc, #96]	; (801391c <prvAddNewTaskToReadyList+0x110>)
 80138ba:	6013      	str	r3, [r2, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c0:	4613      	mov	r3, r2
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	4413      	add	r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4a15      	ldr	r2, [pc, #84]	; (8013920 <prvAddNewTaskToReadyList+0x114>)
 80138ca:	441a      	add	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3304      	adds	r3, #4
 80138d0:	4619      	mov	r1, r3
 80138d2:	4610      	mov	r0, r2
 80138d4:	f7ff f82b 	bl	801292e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80138d8:	f001 fb14 	bl	8014f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80138dc:	4b0d      	ldr	r3, [pc, #52]	; (8013914 <prvAddNewTaskToReadyList+0x108>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00e      	beq.n	8013902 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80138e4:	4b0a      	ldr	r3, [pc, #40]	; (8013910 <prvAddNewTaskToReadyList+0x104>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d207      	bcs.n	8013902 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80138f2:	4b0c      	ldr	r3, [pc, #48]	; (8013924 <prvAddNewTaskToReadyList+0x118>)
 80138f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013902:	bf00      	nop
 8013904:	3708      	adds	r7, #8
 8013906:	46bd      	mov	sp, r7
 8013908:	bdb0      	pop	{r4, r5, r7, pc}
 801390a:	bf00      	nop
 801390c:	200021f0 	.word	0x200021f0
 8013910:	20001d1c 	.word	0x20001d1c
 8013914:	200021fc 	.word	0x200021fc
 8013918:	2000220c 	.word	0x2000220c
 801391c:	200021f8 	.word	0x200021f8
 8013920:	20001d20 	.word	0x20001d20
 8013924:	e000ed04 	.word	0xe000ed04

08013928 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08a      	sub	sp, #40	; 0x28
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013932:	2300      	movs	r3, #0
 8013934:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d10a      	bne.n	8013952 <vTaskDelayUntil+0x2a>
	__asm volatile
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	617b      	str	r3, [r7, #20]
}
 801394e:	bf00      	nop
 8013950:	e7fe      	b.n	8013950 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10a      	bne.n	801396e <vTaskDelayUntil+0x46>
	__asm volatile
 8013958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	f3bf 8f6f 	isb	sy
 8013964:	f3bf 8f4f 	dsb	sy
 8013968:	613b      	str	r3, [r7, #16]
}
 801396a:	bf00      	nop
 801396c:	e7fe      	b.n	801396c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801396e:	4b2b      	ldr	r3, [pc, #172]	; (8013a1c <vTaskDelayUntil+0xf4>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d00a      	beq.n	801398c <vTaskDelayUntil+0x64>
	__asm volatile
 8013976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	60fb      	str	r3, [r7, #12]
}
 8013988:	bf00      	nop
 801398a:	e7fe      	b.n	801398a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801398c:	f000 f8ce 	bl	8013b2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013990:	4b23      	ldr	r3, [pc, #140]	; (8013a20 <vTaskDelayUntil+0xf8>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	683a      	ldr	r2, [r7, #0]
 801399c:	4413      	add	r3, r2
 801399e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	6a3a      	ldr	r2, [r7, #32]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d20b      	bcs.n	80139c2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	69fa      	ldr	r2, [r7, #28]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d211      	bcs.n	80139d8 <vTaskDelayUntil+0xb0>
 80139b4:	69fa      	ldr	r2, [r7, #28]
 80139b6:	6a3b      	ldr	r3, [r7, #32]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d90d      	bls.n	80139d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80139bc:	2301      	movs	r3, #1
 80139be:	627b      	str	r3, [r7, #36]	; 0x24
 80139c0:	e00a      	b.n	80139d8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	69fa      	ldr	r2, [r7, #28]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d303      	bcc.n	80139d4 <vTaskDelayUntil+0xac>
 80139cc:	69fa      	ldr	r2, [r7, #28]
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d901      	bls.n	80139d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80139d4:	2301      	movs	r3, #1
 80139d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	69fa      	ldr	r2, [r7, #28]
 80139dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80139de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d009      	beq.n	80139f8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80139e4:	2024      	movs	r0, #36	; 0x24
 80139e6:	f002 f993 	bl	8015d10 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80139ea:	69fa      	ldr	r2, [r7, #28]
 80139ec:	6a3b      	ldr	r3, [r7, #32]
 80139ee:	1ad3      	subs	r3, r2, r3
 80139f0:	2100      	movs	r1, #0
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 fd86 	bl	8014504 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80139f8:	f000 f8a6 	bl	8013b48 <xTaskResumeAll>
 80139fc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d107      	bne.n	8013a14 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013a04:	4b07      	ldr	r3, [pc, #28]	; (8013a24 <vTaskDelayUntil+0xfc>)
 8013a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	f3bf 8f4f 	dsb	sy
 8013a10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a14:	bf00      	nop
 8013a16:	3728      	adds	r7, #40	; 0x28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	20002218 	.word	0x20002218
 8013a20:	200021f4 	.word	0x200021f4
 8013a24:	e000ed04 	.word	0xe000ed04

08013a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b08a      	sub	sp, #40	; 0x28
 8013a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a32:	2300      	movs	r3, #0
 8013a34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a36:	463a      	mov	r2, r7
 8013a38:	1d39      	adds	r1, r7, #4
 8013a3a:	f107 0308 	add.w	r3, r7, #8
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fe ff14 	bl	801286c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a44:	6839      	ldr	r1, [r7, #0]
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	68ba      	ldr	r2, [r7, #8]
 8013a4a:	9202      	str	r2, [sp, #8]
 8013a4c:	9301      	str	r3, [sp, #4]
 8013a4e:	2300      	movs	r3, #0
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	2300      	movs	r3, #0
 8013a54:	460a      	mov	r2, r1
 8013a56:	492d      	ldr	r1, [pc, #180]	; (8013b0c <vTaskStartScheduler+0xe4>)
 8013a58:	482d      	ldr	r0, [pc, #180]	; (8013b10 <vTaskStartScheduler+0xe8>)
 8013a5a:	f7ff fd8f 	bl	801357c <xTaskCreateStatic>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	4a2c      	ldr	r2, [pc, #176]	; (8013b14 <vTaskStartScheduler+0xec>)
 8013a62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013a64:	4b2b      	ldr	r3, [pc, #172]	; (8013b14 <vTaskStartScheduler+0xec>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d002      	beq.n	8013a72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	617b      	str	r3, [r7, #20]
 8013a70:	e001      	b.n	8013a76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d102      	bne.n	8013a82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013a7c:	f000 fd96 	bl	80145ac <xTimerCreateTimerTask>
 8013a80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d12e      	bne.n	8013ae6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8013a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a8c:	f383 8811 	msr	BASEPRI, r3
 8013a90:	f3bf 8f6f 	isb	sy
 8013a94:	f3bf 8f4f 	dsb	sy
 8013a98:	613b      	str	r3, [r7, #16]
}
 8013a9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013a9c:	4b1e      	ldr	r3, [pc, #120]	; (8013b18 <vTaskStartScheduler+0xf0>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	3354      	adds	r3, #84	; 0x54
 8013aa2:	4a1e      	ldr	r2, [pc, #120]	; (8013b1c <vTaskStartScheduler+0xf4>)
 8013aa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013aa6:	4b1e      	ldr	r3, [pc, #120]	; (8013b20 <vTaskStartScheduler+0xf8>)
 8013aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8013aac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013aae:	4b1d      	ldr	r3, [pc, #116]	; (8013b24 <vTaskStartScheduler+0xfc>)
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013ab4:	4b1c      	ldr	r3, [pc, #112]	; (8013b28 <vTaskStartScheduler+0x100>)
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8013aba:	4b17      	ldr	r3, [pc, #92]	; (8013b18 <vTaskStartScheduler+0xf0>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	3334      	adds	r3, #52	; 0x34
 8013ac0:	2205      	movs	r2, #5
 8013ac2:	4912      	ldr	r1, [pc, #72]	; (8013b0c <vTaskStartScheduler+0xe4>)
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f003 f81b 	bl	8016b00 <memcmp>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d005      	beq.n	8013adc <vTaskStartScheduler+0xb4>
 8013ad0:	4b11      	ldr	r3, [pc, #68]	; (8013b18 <vTaskStartScheduler+0xf0>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f002 fdfd 	bl	80166d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8013ada:	e001      	b.n	8013ae0 <vTaskStartScheduler+0xb8>
 8013adc:	f002 fd9c 	bl	8016618 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ae0:	f001 f93e 	bl	8014d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013ae4:	e00e      	b.n	8013b04 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aec:	d10a      	bne.n	8013b04 <vTaskStartScheduler+0xdc>
	__asm volatile
 8013aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af2:	f383 8811 	msr	BASEPRI, r3
 8013af6:	f3bf 8f6f 	isb	sy
 8013afa:	f3bf 8f4f 	dsb	sy
 8013afe:	60fb      	str	r3, [r7, #12]
}
 8013b00:	bf00      	nop
 8013b02:	e7fe      	b.n	8013b02 <vTaskStartScheduler+0xda>
}
 8013b04:	bf00      	nop
 8013b06:	3718      	adds	r7, #24
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	080188c8 	.word	0x080188c8
 8013b10:	080141b9 	.word	0x080141b9
 8013b14:	20002214 	.word	0x20002214
 8013b18:	20001d1c 	.word	0x20001d1c
 8013b1c:	200012f4 	.word	0x200012f4
 8013b20:	20002210 	.word	0x20002210
 8013b24:	200021fc 	.word	0x200021fc
 8013b28:	200021f4 	.word	0x200021f4

08013b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013b30:	4b04      	ldr	r3, [pc, #16]	; (8013b44 <vTaskSuspendAll+0x18>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	3301      	adds	r3, #1
 8013b36:	4a03      	ldr	r2, [pc, #12]	; (8013b44 <vTaskSuspendAll+0x18>)
 8013b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013b3a:	bf00      	nop
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr
 8013b44:	20002218 	.word	0x20002218

08013b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b52:	2300      	movs	r3, #0
 8013b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b56:	4b44      	ldr	r3, [pc, #272]	; (8013c68 <xTaskResumeAll+0x120>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d10a      	bne.n	8013b74 <xTaskResumeAll+0x2c>
	__asm volatile
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	603b      	str	r3, [r7, #0]
}
 8013b70:	bf00      	nop
 8013b72:	e7fe      	b.n	8013b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b74:	f001 f996 	bl	8014ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b78:	4b3b      	ldr	r3, [pc, #236]	; (8013c68 <xTaskResumeAll+0x120>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	4a3a      	ldr	r2, [pc, #232]	; (8013c68 <xTaskResumeAll+0x120>)
 8013b80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b82:	4b39      	ldr	r3, [pc, #228]	; (8013c68 <xTaskResumeAll+0x120>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d166      	bne.n	8013c58 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b8a:	4b38      	ldr	r3, [pc, #224]	; (8013c6c <xTaskResumeAll+0x124>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d062      	beq.n	8013c58 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b92:	e033      	b.n	8013bfc <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b94:	4b36      	ldr	r3, [pc, #216]	; (8013c70 <xTaskResumeAll+0x128>)
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	3318      	adds	r3, #24
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7fe ff21 	bl	80129e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3304      	adds	r3, #4
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fe ff1c 	bl	80129e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f002 fdd0 	bl	8016758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bbc:	4b2d      	ldr	r3, [pc, #180]	; (8013c74 <xTaskResumeAll+0x12c>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d903      	bls.n	8013bcc <xTaskResumeAll+0x84>
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc8:	4a2a      	ldr	r2, [pc, #168]	; (8013c74 <xTaskResumeAll+0x12c>)
 8013bca:	6013      	str	r3, [r2, #0]
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	4413      	add	r3, r2
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	4a27      	ldr	r2, [pc, #156]	; (8013c78 <xTaskResumeAll+0x130>)
 8013bda:	441a      	add	r2, r3
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	3304      	adds	r3, #4
 8013be0:	4619      	mov	r1, r3
 8013be2:	4610      	mov	r0, r2
 8013be4:	f7fe fea3 	bl	801292e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bec:	4b23      	ldr	r3, [pc, #140]	; (8013c7c <xTaskResumeAll+0x134>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d302      	bcc.n	8013bfc <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8013bf6:	4b22      	ldr	r3, [pc, #136]	; (8013c80 <xTaskResumeAll+0x138>)
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bfc:	4b1c      	ldr	r3, [pc, #112]	; (8013c70 <xTaskResumeAll+0x128>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d1c7      	bne.n	8013b94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d001      	beq.n	8013c0e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c0a:	f000 fbc7 	bl	801439c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013c0e:	4b1d      	ldr	r3, [pc, #116]	; (8013c84 <xTaskResumeAll+0x13c>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d010      	beq.n	8013c3c <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c1a:	f000 f859 	bl	8013cd0 <xTaskIncrementTick>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d002      	beq.n	8013c2a <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8013c24:	4b16      	ldr	r3, [pc, #88]	; (8013c80 <xTaskResumeAll+0x138>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d1f1      	bne.n	8013c1a <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8013c36:	4b13      	ldr	r3, [pc, #76]	; (8013c84 <xTaskResumeAll+0x13c>)
 8013c38:	2200      	movs	r2, #0
 8013c3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c3c:	4b10      	ldr	r3, [pc, #64]	; (8013c80 <xTaskResumeAll+0x138>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d009      	beq.n	8013c58 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c44:	2301      	movs	r3, #1
 8013c46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c48:	4b0f      	ldr	r3, [pc, #60]	; (8013c88 <xTaskResumeAll+0x140>)
 8013c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	f3bf 8f4f 	dsb	sy
 8013c54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c58:	f001 f954 	bl	8014f04 <vPortExitCritical>

	return xAlreadyYielded;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	20002218 	.word	0x20002218
 8013c6c:	200021f0 	.word	0x200021f0
 8013c70:	200021b0 	.word	0x200021b0
 8013c74:	200021f8 	.word	0x200021f8
 8013c78:	20001d20 	.word	0x20001d20
 8013c7c:	20001d1c 	.word	0x20001d1c
 8013c80:	20002204 	.word	0x20002204
 8013c84:	20002200 	.word	0x20002200
 8013c88:	e000ed04 	.word	0xe000ed04

08013c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c92:	4b05      	ldr	r3, [pc, #20]	; (8013ca8 <xTaskGetTickCount+0x1c>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013c98:	687b      	ldr	r3, [r7, #4]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	370c      	adds	r7, #12
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	200021f4 	.word	0x200021f4

08013cac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cb2:	f001 f9d9 	bl	8015068 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013cba:	4b04      	ldr	r3, [pc, #16]	; (8013ccc <xTaskGetTickCountFromISR+0x20>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cc0:	683b      	ldr	r3, [r7, #0]
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	200021f4 	.word	0x200021f4

08013cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b086      	sub	sp, #24
 8013cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cda:	4b51      	ldr	r3, [pc, #324]	; (8013e20 <xTaskIncrementTick+0x150>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f040 8093 	bne.w	8013e0a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ce4:	4b4f      	ldr	r3, [pc, #316]	; (8013e24 <xTaskIncrementTick+0x154>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013cec:	4a4d      	ldr	r2, [pc, #308]	; (8013e24 <xTaskIncrementTick+0x154>)
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d120      	bne.n	8013d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013cf8:	4b4b      	ldr	r3, [pc, #300]	; (8013e28 <xTaskIncrementTick+0x158>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d00a      	beq.n	8013d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8013d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d06:	f383 8811 	msr	BASEPRI, r3
 8013d0a:	f3bf 8f6f 	isb	sy
 8013d0e:	f3bf 8f4f 	dsb	sy
 8013d12:	603b      	str	r3, [r7, #0]
}
 8013d14:	bf00      	nop
 8013d16:	e7fe      	b.n	8013d16 <xTaskIncrementTick+0x46>
 8013d18:	4b43      	ldr	r3, [pc, #268]	; (8013e28 <xTaskIncrementTick+0x158>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	60fb      	str	r3, [r7, #12]
 8013d1e:	4b43      	ldr	r3, [pc, #268]	; (8013e2c <xTaskIncrementTick+0x15c>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4a41      	ldr	r2, [pc, #260]	; (8013e28 <xTaskIncrementTick+0x158>)
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	4a41      	ldr	r2, [pc, #260]	; (8013e2c <xTaskIncrementTick+0x15c>)
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	4b40      	ldr	r3, [pc, #256]	; (8013e30 <xTaskIncrementTick+0x160>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	3301      	adds	r3, #1
 8013d32:	4a3f      	ldr	r2, [pc, #252]	; (8013e30 <xTaskIncrementTick+0x160>)
 8013d34:	6013      	str	r3, [r2, #0]
 8013d36:	f000 fb31 	bl	801439c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d3a:	4b3e      	ldr	r3, [pc, #248]	; (8013e34 <xTaskIncrementTick+0x164>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	693a      	ldr	r2, [r7, #16]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d34d      	bcc.n	8013de0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d44:	4b38      	ldr	r3, [pc, #224]	; (8013e28 <xTaskIncrementTick+0x158>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d104      	bne.n	8013d58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d4e:	4b39      	ldr	r3, [pc, #228]	; (8013e34 <xTaskIncrementTick+0x164>)
 8013d50:	f04f 32ff 	mov.w	r2, #4294967295
 8013d54:	601a      	str	r2, [r3, #0]
					break;
 8013d56:	e043      	b.n	8013de0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d58:	4b33      	ldr	r3, [pc, #204]	; (8013e28 <xTaskIncrementTick+0x158>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d68:	693a      	ldr	r2, [r7, #16]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d203      	bcs.n	8013d78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d70:	4a30      	ldr	r2, [pc, #192]	; (8013e34 <xTaskIncrementTick+0x164>)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d76:	e033      	b.n	8013de0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	3304      	adds	r3, #4
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fe fe33 	bl	80129e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d004      	beq.n	8013d94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	3318      	adds	r3, #24
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fe2a 	bl	80129e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f002 fcde 	bl	8016758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013da0:	4b25      	ldr	r3, [pc, #148]	; (8013e38 <xTaskIncrementTick+0x168>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d903      	bls.n	8013db0 <xTaskIncrementTick+0xe0>
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dac:	4a22      	ldr	r2, [pc, #136]	; (8013e38 <xTaskIncrementTick+0x168>)
 8013dae:	6013      	str	r3, [r2, #0]
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013db4:	4613      	mov	r3, r2
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	4413      	add	r3, r2
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4a1f      	ldr	r2, [pc, #124]	; (8013e3c <xTaskIncrementTick+0x16c>)
 8013dbe:	441a      	add	r2, r3
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	3304      	adds	r3, #4
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	4610      	mov	r0, r2
 8013dc8:	f7fe fdb1 	bl	801292e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd0:	4b1b      	ldr	r3, [pc, #108]	; (8013e40 <xTaskIncrementTick+0x170>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d3b4      	bcc.n	8013d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dde:	e7b1      	b.n	8013d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013de0:	4b17      	ldr	r3, [pc, #92]	; (8013e40 <xTaskIncrementTick+0x170>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013de6:	4915      	ldr	r1, [pc, #84]	; (8013e3c <xTaskIncrementTick+0x16c>)
 8013de8:	4613      	mov	r3, r2
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	4413      	add	r3, r2
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	440b      	add	r3, r1
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d901      	bls.n	8013dfc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013dfc:	4b11      	ldr	r3, [pc, #68]	; (8013e44 <xTaskIncrementTick+0x174>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d007      	beq.n	8013e14 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8013e04:	2301      	movs	r3, #1
 8013e06:	617b      	str	r3, [r7, #20]
 8013e08:	e004      	b.n	8013e14 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013e0a:	4b0f      	ldr	r3, [pc, #60]	; (8013e48 <xTaskIncrementTick+0x178>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	4a0d      	ldr	r2, [pc, #52]	; (8013e48 <xTaskIncrementTick+0x178>)
 8013e12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013e14:	697b      	ldr	r3, [r7, #20]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3718      	adds	r7, #24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20002218 	.word	0x20002218
 8013e24:	200021f4 	.word	0x200021f4
 8013e28:	200021a8 	.word	0x200021a8
 8013e2c:	200021ac 	.word	0x200021ac
 8013e30:	20002208 	.word	0x20002208
 8013e34:	20002210 	.word	0x20002210
 8013e38:	200021f8 	.word	0x200021f8
 8013e3c:	20001d20 	.word	0x20001d20
 8013e40:	20001d1c 	.word	0x20001d1c
 8013e44:	20002204 	.word	0x20002204
 8013e48:	20002200 	.word	0x20002200

08013e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e52:	4b33      	ldr	r3, [pc, #204]	; (8013f20 <vTaskSwitchContext+0xd4>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d003      	beq.n	8013e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e5a:	4b32      	ldr	r3, [pc, #200]	; (8013f24 <vTaskSwitchContext+0xd8>)
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e60:	e059      	b.n	8013f16 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8013e62:	4b30      	ldr	r3, [pc, #192]	; (8013f24 <vTaskSwitchContext+0xd8>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e68:	4b2f      	ldr	r3, [pc, #188]	; (8013f28 <vTaskSwitchContext+0xdc>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	e010      	b.n	8013e92 <vTaskSwitchContext+0x46>
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10a      	bne.n	8013e8c <vTaskSwitchContext+0x40>
	__asm volatile
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	607b      	str	r3, [r7, #4]
}
 8013e88:	bf00      	nop
 8013e8a:	e7fe      	b.n	8013e8a <vTaskSwitchContext+0x3e>
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	60fb      	str	r3, [r7, #12]
 8013e92:	4926      	ldr	r1, [pc, #152]	; (8013f2c <vTaskSwitchContext+0xe0>)
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	4613      	mov	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4413      	add	r3, r2
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	440b      	add	r3, r1
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d0e4      	beq.n	8013e70 <vTaskSwitchContext+0x24>
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	4413      	add	r3, r2
 8013eae:	009b      	lsls	r3, r3, #2
 8013eb0:	4a1e      	ldr	r2, [pc, #120]	; (8013f2c <vTaskSwitchContext+0xe0>)
 8013eb2:	4413      	add	r3, r2
 8013eb4:	60bb      	str	r3, [r7, #8]
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	685a      	ldr	r2, [r3, #4]
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	605a      	str	r2, [r3, #4]
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	685a      	ldr	r2, [r3, #4]
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	3308      	adds	r3, #8
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d104      	bne.n	8013ed6 <vTaskSwitchContext+0x8a>
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	605a      	str	r2, [r3, #4]
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	4a14      	ldr	r2, [pc, #80]	; (8013f30 <vTaskSwitchContext+0xe4>)
 8013ede:	6013      	str	r3, [r2, #0]
 8013ee0:	4a11      	ldr	r2, [pc, #68]	; (8013f28 <vTaskSwitchContext+0xdc>)
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8013ee6:	4b12      	ldr	r3, [pc, #72]	; (8013f30 <vTaskSwitchContext+0xe4>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3334      	adds	r3, #52	; 0x34
 8013eec:	2205      	movs	r2, #5
 8013eee:	4911      	ldr	r1, [pc, #68]	; (8013f34 <vTaskSwitchContext+0xe8>)
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f002 fe05 	bl	8016b00 <memcmp>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d005      	beq.n	8013f08 <vTaskSwitchContext+0xbc>
 8013efc:	4b0c      	ldr	r3, [pc, #48]	; (8013f30 <vTaskSwitchContext+0xe4>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f002 fbe7 	bl	80166d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8013f06:	e001      	b.n	8013f0c <vTaskSwitchContext+0xc0>
 8013f08:	f002 fb86 	bl	8016618 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f0c:	4b08      	ldr	r3, [pc, #32]	; (8013f30 <vTaskSwitchContext+0xe4>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	3354      	adds	r3, #84	; 0x54
 8013f12:	4a09      	ldr	r2, [pc, #36]	; (8013f38 <vTaskSwitchContext+0xec>)
 8013f14:	6013      	str	r3, [r2, #0]
}
 8013f16:	bf00      	nop
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	20002218 	.word	0x20002218
 8013f24:	20002204 	.word	0x20002204
 8013f28:	200021f8 	.word	0x200021f8
 8013f2c:	20001d20 	.word	0x20001d20
 8013f30:	20001d1c 	.word	0x20001d1c
 8013f34:	080188c8 	.word	0x080188c8
 8013f38:	200012f4 	.word	0x200012f4

08013f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10a      	bne.n	8013f62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f50:	f383 8811 	msr	BASEPRI, r3
 8013f54:	f3bf 8f6f 	isb	sy
 8013f58:	f3bf 8f4f 	dsb	sy
 8013f5c:	60fb      	str	r3, [r7, #12]
}
 8013f5e:	bf00      	nop
 8013f60:	e7fe      	b.n	8013f60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f62:	4b07      	ldr	r3, [pc, #28]	; (8013f80 <vTaskPlaceOnEventList+0x44>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	3318      	adds	r3, #24
 8013f68:	4619      	mov	r1, r3
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f7fe fd03 	bl	8012976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f70:	2101      	movs	r1, #1
 8013f72:	6838      	ldr	r0, [r7, #0]
 8013f74:	f000 fac6 	bl	8014504 <prvAddCurrentTaskToDelayedList>
}
 8013f78:	bf00      	nop
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	20001d1c 	.word	0x20001d1c

08013f84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b086      	sub	sp, #24
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	60f8      	str	r0, [r7, #12]
 8013f8c:	60b9      	str	r1, [r7, #8]
 8013f8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10a      	bne.n	8013fac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	617b      	str	r3, [r7, #20]
}
 8013fa8:	bf00      	nop
 8013faa:	e7fe      	b.n	8013faa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fac:	4b0b      	ldr	r3, [pc, #44]	; (8013fdc <vTaskPlaceOnEventListRestricted+0x58>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	3318      	adds	r3, #24
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f7fe fcba 	bl	801292e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d002      	beq.n	8013fc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8013fc6:	2024      	movs	r0, #36	; 0x24
 8013fc8:	f001 fea2 	bl	8015d10 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013fcc:	6879      	ldr	r1, [r7, #4]
 8013fce:	68b8      	ldr	r0, [r7, #8]
 8013fd0:	f000 fa98 	bl	8014504 <prvAddCurrentTaskToDelayedList>
	}
 8013fd4:	bf00      	nop
 8013fd6:	3718      	adds	r7, #24
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	20001d1c 	.word	0x20001d1c

08013fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10a      	bne.n	801400c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffa:	f383 8811 	msr	BASEPRI, r3
 8013ffe:	f3bf 8f6f 	isb	sy
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	60fb      	str	r3, [r7, #12]
}
 8014008:	bf00      	nop
 801400a:	e7fe      	b.n	801400a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	3318      	adds	r3, #24
 8014010:	4618      	mov	r0, r3
 8014012:	f7fe fce9 	bl	80129e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014016:	4b20      	ldr	r3, [pc, #128]	; (8014098 <xTaskRemoveFromEventList+0xb8>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d121      	bne.n	8014062 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	3304      	adds	r3, #4
 8014022:	4618      	mov	r0, r3
 8014024:	f7fe fce0 	bl	80129e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	4618      	mov	r0, r3
 801402c:	f002 fb94 	bl	8016758 <SEGGER_SYSVIEW_OnTaskStartReady>
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014034:	4b19      	ldr	r3, [pc, #100]	; (801409c <xTaskRemoveFromEventList+0xbc>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	429a      	cmp	r2, r3
 801403a:	d903      	bls.n	8014044 <xTaskRemoveFromEventList+0x64>
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014040:	4a16      	ldr	r2, [pc, #88]	; (801409c <xTaskRemoveFromEventList+0xbc>)
 8014042:	6013      	str	r3, [r2, #0]
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014048:	4613      	mov	r3, r2
 801404a:	009b      	lsls	r3, r3, #2
 801404c:	4413      	add	r3, r2
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	4a13      	ldr	r2, [pc, #76]	; (80140a0 <xTaskRemoveFromEventList+0xc0>)
 8014052:	441a      	add	r2, r3
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	3304      	adds	r3, #4
 8014058:	4619      	mov	r1, r3
 801405a:	4610      	mov	r0, r2
 801405c:	f7fe fc67 	bl	801292e <vListInsertEnd>
 8014060:	e005      	b.n	801406e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	3318      	adds	r3, #24
 8014066:	4619      	mov	r1, r3
 8014068:	480e      	ldr	r0, [pc, #56]	; (80140a4 <xTaskRemoveFromEventList+0xc4>)
 801406a:	f7fe fc60 	bl	801292e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014072:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <xTaskRemoveFromEventList+0xc8>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014078:	429a      	cmp	r2, r3
 801407a:	d905      	bls.n	8014088 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801407c:	2301      	movs	r3, #1
 801407e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <xTaskRemoveFromEventList+0xcc>)
 8014082:	2201      	movs	r2, #1
 8014084:	601a      	str	r2, [r3, #0]
 8014086:	e001      	b.n	801408c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8014088:	2300      	movs	r3, #0
 801408a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801408c:	697b      	ldr	r3, [r7, #20]
}
 801408e:	4618      	mov	r0, r3
 8014090:	3718      	adds	r7, #24
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20002218 	.word	0x20002218
 801409c:	200021f8 	.word	0x200021f8
 80140a0:	20001d20 	.word	0x20001d20
 80140a4:	200021b0 	.word	0x200021b0
 80140a8:	20001d1c 	.word	0x20001d1c
 80140ac:	20002204 	.word	0x20002204

080140b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140b8:	4b06      	ldr	r3, [pc, #24]	; (80140d4 <vTaskInternalSetTimeOutState+0x24>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80140c0:	4b05      	ldr	r3, [pc, #20]	; (80140d8 <vTaskInternalSetTimeOutState+0x28>)
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	605a      	str	r2, [r3, #4]
}
 80140c8:	bf00      	nop
 80140ca:	370c      	adds	r7, #12
 80140cc:	46bd      	mov	sp, r7
 80140ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d2:	4770      	bx	lr
 80140d4:	20002208 	.word	0x20002208
 80140d8:	200021f4 	.word	0x200021f4

080140dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b088      	sub	sp, #32
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d10a      	bne.n	8014102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80140ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f0:	f383 8811 	msr	BASEPRI, r3
 80140f4:	f3bf 8f6f 	isb	sy
 80140f8:	f3bf 8f4f 	dsb	sy
 80140fc:	613b      	str	r3, [r7, #16]
}
 80140fe:	bf00      	nop
 8014100:	e7fe      	b.n	8014100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d10a      	bne.n	801411e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801410c:	f383 8811 	msr	BASEPRI, r3
 8014110:	f3bf 8f6f 	isb	sy
 8014114:	f3bf 8f4f 	dsb	sy
 8014118:	60fb      	str	r3, [r7, #12]
}
 801411a:	bf00      	nop
 801411c:	e7fe      	b.n	801411c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801411e:	f000 fec1 	bl	8014ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014122:	4b1d      	ldr	r3, [pc, #116]	; (8014198 <xTaskCheckForTimeOut+0xbc>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	69ba      	ldr	r2, [r7, #24]
 801412e:	1ad3      	subs	r3, r2, r3
 8014130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801413a:	d102      	bne.n	8014142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801413c:	2300      	movs	r3, #0
 801413e:	61fb      	str	r3, [r7, #28]
 8014140:	e023      	b.n	801418a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	4b15      	ldr	r3, [pc, #84]	; (801419c <xTaskCheckForTimeOut+0xc0>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	429a      	cmp	r2, r3
 801414c:	d007      	beq.n	801415e <xTaskCheckForTimeOut+0x82>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	69ba      	ldr	r2, [r7, #24]
 8014154:	429a      	cmp	r2, r3
 8014156:	d302      	bcc.n	801415e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014158:	2301      	movs	r3, #1
 801415a:	61fb      	str	r3, [r7, #28]
 801415c:	e015      	b.n	801418a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	697a      	ldr	r2, [r7, #20]
 8014164:	429a      	cmp	r2, r3
 8014166:	d20b      	bcs.n	8014180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	1ad2      	subs	r2, r2, r3
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff ff9b 	bl	80140b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801417a:	2300      	movs	r3, #0
 801417c:	61fb      	str	r3, [r7, #28]
 801417e:	e004      	b.n	801418a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	2200      	movs	r2, #0
 8014184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014186:	2301      	movs	r3, #1
 8014188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801418a:	f000 febb 	bl	8014f04 <vPortExitCritical>

	return xReturn;
 801418e:	69fb      	ldr	r3, [r7, #28]
}
 8014190:	4618      	mov	r0, r3
 8014192:	3720      	adds	r7, #32
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}
 8014198:	200021f4 	.word	0x200021f4
 801419c:	20002208 	.word	0x20002208

080141a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80141a0:	b480      	push	{r7}
 80141a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80141a4:	4b03      	ldr	r3, [pc, #12]	; (80141b4 <vTaskMissedYield+0x14>)
 80141a6:	2201      	movs	r2, #1
 80141a8:	601a      	str	r2, [r3, #0]
}
 80141aa:	bf00      	nop
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr
 80141b4:	20002204 	.word	0x20002204

080141b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80141c0:	f000 f852 	bl	8014268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80141c4:	4b06      	ldr	r3, [pc, #24]	; (80141e0 <prvIdleTask+0x28>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d9f9      	bls.n	80141c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80141cc:	4b05      	ldr	r3, [pc, #20]	; (80141e4 <prvIdleTask+0x2c>)
 80141ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141d2:	601a      	str	r2, [r3, #0]
 80141d4:	f3bf 8f4f 	dsb	sy
 80141d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80141dc:	e7f0      	b.n	80141c0 <prvIdleTask+0x8>
 80141de:	bf00      	nop
 80141e0:	20001d20 	.word	0x20001d20
 80141e4:	e000ed04 	.word	0xe000ed04

080141e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141ee:	2300      	movs	r3, #0
 80141f0:	607b      	str	r3, [r7, #4]
 80141f2:	e00c      	b.n	801420e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	4613      	mov	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	4a12      	ldr	r2, [pc, #72]	; (8014248 <prvInitialiseTaskLists+0x60>)
 8014200:	4413      	add	r3, r2
 8014202:	4618      	mov	r0, r3
 8014204:	f7fe fb66 	bl	80128d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3301      	adds	r3, #1
 801420c:	607b      	str	r3, [r7, #4]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b37      	cmp	r3, #55	; 0x37
 8014212:	d9ef      	bls.n	80141f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014214:	480d      	ldr	r0, [pc, #52]	; (801424c <prvInitialiseTaskLists+0x64>)
 8014216:	f7fe fb5d 	bl	80128d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801421a:	480d      	ldr	r0, [pc, #52]	; (8014250 <prvInitialiseTaskLists+0x68>)
 801421c:	f7fe fb5a 	bl	80128d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014220:	480c      	ldr	r0, [pc, #48]	; (8014254 <prvInitialiseTaskLists+0x6c>)
 8014222:	f7fe fb57 	bl	80128d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014226:	480c      	ldr	r0, [pc, #48]	; (8014258 <prvInitialiseTaskLists+0x70>)
 8014228:	f7fe fb54 	bl	80128d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801422c:	480b      	ldr	r0, [pc, #44]	; (801425c <prvInitialiseTaskLists+0x74>)
 801422e:	f7fe fb51 	bl	80128d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014232:	4b0b      	ldr	r3, [pc, #44]	; (8014260 <prvInitialiseTaskLists+0x78>)
 8014234:	4a05      	ldr	r2, [pc, #20]	; (801424c <prvInitialiseTaskLists+0x64>)
 8014236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <prvInitialiseTaskLists+0x7c>)
 801423a:	4a05      	ldr	r2, [pc, #20]	; (8014250 <prvInitialiseTaskLists+0x68>)
 801423c:	601a      	str	r2, [r3, #0]
}
 801423e:	bf00      	nop
 8014240:	3708      	adds	r7, #8
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	20001d20 	.word	0x20001d20
 801424c:	20002180 	.word	0x20002180
 8014250:	20002194 	.word	0x20002194
 8014254:	200021b0 	.word	0x200021b0
 8014258:	200021c4 	.word	0x200021c4
 801425c:	200021dc 	.word	0x200021dc
 8014260:	200021a8 	.word	0x200021a8
 8014264:	200021ac 	.word	0x200021ac

08014268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801426e:	e019      	b.n	80142a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014270:	f000 fe18 	bl	8014ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014274:	4b10      	ldr	r3, [pc, #64]	; (80142b8 <prvCheckTasksWaitingTermination+0x50>)
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	3304      	adds	r3, #4
 8014280:	4618      	mov	r0, r3
 8014282:	f7fe fbb1 	bl	80129e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014286:	4b0d      	ldr	r3, [pc, #52]	; (80142bc <prvCheckTasksWaitingTermination+0x54>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3b01      	subs	r3, #1
 801428c:	4a0b      	ldr	r2, [pc, #44]	; (80142bc <prvCheckTasksWaitingTermination+0x54>)
 801428e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014290:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <prvCheckTasksWaitingTermination+0x58>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3b01      	subs	r3, #1
 8014296:	4a0a      	ldr	r2, [pc, #40]	; (80142c0 <prvCheckTasksWaitingTermination+0x58>)
 8014298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801429a:	f000 fe33 	bl	8014f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 f848 	bl	8014334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142a4:	4b06      	ldr	r3, [pc, #24]	; (80142c0 <prvCheckTasksWaitingTermination+0x58>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d1e1      	bne.n	8014270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80142ac:	bf00      	nop
 80142ae:	bf00      	nop
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	200021c4 	.word	0x200021c4
 80142bc:	200021f0 	.word	0x200021f0
 80142c0:	200021d8 	.word	0x200021d8

080142c4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80142c4:	b480      	push	{r7}
 80142c6:	b085      	sub	sp, #20
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80142cc:	2300      	movs	r3, #0
 80142ce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80142d0:	e005      	b.n	80142de <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	3301      	adds	r3, #1
 80142d6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3301      	adds	r3, #1
 80142dc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2ba5      	cmp	r3, #165	; 0xa5
 80142e4:	d0f5      	beq.n	80142d2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	089b      	lsrs	r3, r3, #2
 80142ea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	b29b      	uxth	r3, r3
	}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3714      	adds	r7, #20
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr

080142fc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b086      	sub	sp, #24
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d102      	bne.n	8014310 <uxTaskGetStackHighWaterMark+0x14>
 801430a:	4b09      	ldr	r3, [pc, #36]	; (8014330 <uxTaskGetStackHighWaterMark+0x34>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	e000      	b.n	8014312 <uxTaskGetStackHighWaterMark+0x16>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014318:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801431a:	6938      	ldr	r0, [r7, #16]
 801431c:	f7ff ffd2 	bl	80142c4 <prvTaskCheckFreeStackSpace>
 8014320:	4603      	mov	r3, r0
 8014322:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8014324:	68fb      	ldr	r3, [r7, #12]
	}
 8014326:	4618      	mov	r0, r3
 8014328:	3718      	adds	r7, #24
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	20001d1c 	.word	0x20001d1c

08014334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3354      	adds	r3, #84	; 0x54
 8014340:	4618      	mov	r0, r3
 8014342:	f002 fc0f 	bl	8016b64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801434c:	2b00      	cmp	r3, #0
 801434e:	d108      	bne.n	8014362 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014354:	4618      	mov	r0, r3
 8014356:	f000 ff93 	bl	8015280 <vPortFree>
				vPortFree( pxTCB );
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f000 ff90 	bl	8015280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014360:	e018      	b.n	8014394 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8014368:	2b01      	cmp	r3, #1
 801436a:	d103      	bne.n	8014374 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 ff87 	bl	8015280 <vPortFree>
	}
 8014372:	e00f      	b.n	8014394 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801437a:	2b02      	cmp	r3, #2
 801437c:	d00a      	beq.n	8014394 <prvDeleteTCB+0x60>
	__asm volatile
 801437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014382:	f383 8811 	msr	BASEPRI, r3
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	60fb      	str	r3, [r7, #12]
}
 8014390:	bf00      	nop
 8014392:	e7fe      	b.n	8014392 <prvDeleteTCB+0x5e>
	}
 8014394:	bf00      	nop
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143a2:	4b0c      	ldr	r3, [pc, #48]	; (80143d4 <prvResetNextTaskUnblockTime+0x38>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d104      	bne.n	80143b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143ac:	4b0a      	ldr	r3, [pc, #40]	; (80143d8 <prvResetNextTaskUnblockTime+0x3c>)
 80143ae:	f04f 32ff 	mov.w	r2, #4294967295
 80143b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143b4:	e008      	b.n	80143c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143b6:	4b07      	ldr	r3, [pc, #28]	; (80143d4 <prvResetNextTaskUnblockTime+0x38>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	4a04      	ldr	r2, [pc, #16]	; (80143d8 <prvResetNextTaskUnblockTime+0x3c>)
 80143c6:	6013      	str	r3, [r2, #0]
}
 80143c8:	bf00      	nop
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr
 80143d4:	200021a8 	.word	0x200021a8
 80143d8:	20002210 	.word	0x20002210

080143dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143e2:	4b0b      	ldr	r3, [pc, #44]	; (8014410 <xTaskGetSchedulerState+0x34>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143ea:	2301      	movs	r3, #1
 80143ec:	607b      	str	r3, [r7, #4]
 80143ee:	e008      	b.n	8014402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143f0:	4b08      	ldr	r3, [pc, #32]	; (8014414 <xTaskGetSchedulerState+0x38>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d102      	bne.n	80143fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80143f8:	2302      	movs	r3, #2
 80143fa:	607b      	str	r3, [r7, #4]
 80143fc:	e001      	b.n	8014402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143fe:	2300      	movs	r3, #0
 8014400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014402:	687b      	ldr	r3, [r7, #4]
	}
 8014404:	4618      	mov	r0, r3
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr
 8014410:	200021fc 	.word	0x200021fc
 8014414:	20002218 	.word	0x20002218

08014418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014418:	b580      	push	{r7, lr}
 801441a:	b086      	sub	sp, #24
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014424:	2300      	movs	r3, #0
 8014426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d05f      	beq.n	80144ee <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801442e:	4b32      	ldr	r3, [pc, #200]	; (80144f8 <xTaskPriorityDisinherit+0xe0>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	693a      	ldr	r2, [r7, #16]
 8014434:	429a      	cmp	r2, r3
 8014436:	d00a      	beq.n	801444e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443c:	f383 8811 	msr	BASEPRI, r3
 8014440:	f3bf 8f6f 	isb	sy
 8014444:	f3bf 8f4f 	dsb	sy
 8014448:	60fb      	str	r3, [r7, #12]
}
 801444a:	bf00      	nop
 801444c:	e7fe      	b.n	801444c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014452:	2b00      	cmp	r3, #0
 8014454:	d10a      	bne.n	801446c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801445a:	f383 8811 	msr	BASEPRI, r3
 801445e:	f3bf 8f6f 	isb	sy
 8014462:	f3bf 8f4f 	dsb	sy
 8014466:	60bb      	str	r3, [r7, #8]
}
 8014468:	bf00      	nop
 801446a:	e7fe      	b.n	801446a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014470:	1e5a      	subs	r2, r3, #1
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801447e:	429a      	cmp	r2, r3
 8014480:	d035      	beq.n	80144ee <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014486:	2b00      	cmp	r3, #0
 8014488:	d131      	bne.n	80144ee <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	3304      	adds	r3, #4
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe faaa 	bl	80129e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	4619      	mov	r1, r3
 8014498:	204a      	movs	r0, #74	; 0x4a
 801449a:	f001 fc57 	bl	8015d4c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	4618      	mov	r0, r3
 80144b6:	f002 f94f 	bl	8016758 <SEGGER_SYSVIEW_OnTaskStartReady>
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144be:	4b0f      	ldr	r3, [pc, #60]	; (80144fc <xTaskPriorityDisinherit+0xe4>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d903      	bls.n	80144ce <xTaskPriorityDisinherit+0xb6>
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ca:	4a0c      	ldr	r2, [pc, #48]	; (80144fc <xTaskPriorityDisinherit+0xe4>)
 80144cc:	6013      	str	r3, [r2, #0]
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d2:	4613      	mov	r3, r2
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	4a09      	ldr	r2, [pc, #36]	; (8014500 <xTaskPriorityDisinherit+0xe8>)
 80144dc:	441a      	add	r2, r3
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	3304      	adds	r3, #4
 80144e2:	4619      	mov	r1, r3
 80144e4:	4610      	mov	r0, r2
 80144e6:	f7fe fa22 	bl	801292e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144ea:	2301      	movs	r3, #1
 80144ec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144ee:	697b      	ldr	r3, [r7, #20]
	}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3718      	adds	r7, #24
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	20001d1c 	.word	0x20001d1c
 80144fc:	200021f8 	.word	0x200021f8
 8014500:	20001d20 	.word	0x20001d20

08014504 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801450e:	4b21      	ldr	r3, [pc, #132]	; (8014594 <prvAddCurrentTaskToDelayedList+0x90>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014514:	4b20      	ldr	r3, [pc, #128]	; (8014598 <prvAddCurrentTaskToDelayedList+0x94>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	3304      	adds	r3, #4
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe fa64 	bl	80129e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014526:	d10a      	bne.n	801453e <prvAddCurrentTaskToDelayedList+0x3a>
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d007      	beq.n	801453e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801452e:	4b1a      	ldr	r3, [pc, #104]	; (8014598 <prvAddCurrentTaskToDelayedList+0x94>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	3304      	adds	r3, #4
 8014534:	4619      	mov	r1, r3
 8014536:	4819      	ldr	r0, [pc, #100]	; (801459c <prvAddCurrentTaskToDelayedList+0x98>)
 8014538:	f7fe f9f9 	bl	801292e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801453c:	e026      	b.n	801458c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801453e:	68fa      	ldr	r2, [r7, #12]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4413      	add	r3, r2
 8014544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014546:	4b14      	ldr	r3, [pc, #80]	; (8014598 <prvAddCurrentTaskToDelayedList+0x94>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	68ba      	ldr	r2, [r7, #8]
 801454c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801454e:	68ba      	ldr	r2, [r7, #8]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	429a      	cmp	r2, r3
 8014554:	d209      	bcs.n	801456a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014556:	4b12      	ldr	r3, [pc, #72]	; (80145a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	4b0f      	ldr	r3, [pc, #60]	; (8014598 <prvAddCurrentTaskToDelayedList+0x94>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3304      	adds	r3, #4
 8014560:	4619      	mov	r1, r3
 8014562:	4610      	mov	r0, r2
 8014564:	f7fe fa07 	bl	8012976 <vListInsert>
}
 8014568:	e010      	b.n	801458c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801456a:	4b0e      	ldr	r3, [pc, #56]	; (80145a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	4b0a      	ldr	r3, [pc, #40]	; (8014598 <prvAddCurrentTaskToDelayedList+0x94>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	3304      	adds	r3, #4
 8014574:	4619      	mov	r1, r3
 8014576:	4610      	mov	r0, r2
 8014578:	f7fe f9fd 	bl	8012976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801457c:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	68ba      	ldr	r2, [r7, #8]
 8014582:	429a      	cmp	r2, r3
 8014584:	d202      	bcs.n	801458c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014586:	4a08      	ldr	r2, [pc, #32]	; (80145a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	6013      	str	r3, [r2, #0]
}
 801458c:	bf00      	nop
 801458e:	3710      	adds	r7, #16
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}
 8014594:	200021f4 	.word	0x200021f4
 8014598:	20001d1c 	.word	0x20001d1c
 801459c:	200021dc 	.word	0x200021dc
 80145a0:	200021ac 	.word	0x200021ac
 80145a4:	200021a8 	.word	0x200021a8
 80145a8:	20002210 	.word	0x20002210

080145ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08a      	sub	sp, #40	; 0x28
 80145b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80145b2:	2300      	movs	r3, #0
 80145b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80145b6:	f000 fb07 	bl	8014bc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80145ba:	4b1c      	ldr	r3, [pc, #112]	; (801462c <xTimerCreateTimerTask+0x80>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d021      	beq.n	8014606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80145c2:	2300      	movs	r3, #0
 80145c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80145c6:	2300      	movs	r3, #0
 80145c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80145ca:	1d3a      	adds	r2, r7, #4
 80145cc:	f107 0108 	add.w	r1, r7, #8
 80145d0:	f107 030c 	add.w	r3, r7, #12
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fe f963 	bl	80128a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80145da:	6879      	ldr	r1, [r7, #4]
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	9202      	str	r2, [sp, #8]
 80145e2:	9301      	str	r3, [sp, #4]
 80145e4:	2302      	movs	r3, #2
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	2300      	movs	r3, #0
 80145ea:	460a      	mov	r2, r1
 80145ec:	4910      	ldr	r1, [pc, #64]	; (8014630 <xTimerCreateTimerTask+0x84>)
 80145ee:	4811      	ldr	r0, [pc, #68]	; (8014634 <xTimerCreateTimerTask+0x88>)
 80145f0:	f7fe ffc4 	bl	801357c <xTaskCreateStatic>
 80145f4:	4603      	mov	r3, r0
 80145f6:	4a10      	ldr	r2, [pc, #64]	; (8014638 <xTimerCreateTimerTask+0x8c>)
 80145f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80145fa:	4b0f      	ldr	r3, [pc, #60]	; (8014638 <xTimerCreateTimerTask+0x8c>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d001      	beq.n	8014606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014602:	2301      	movs	r3, #1
 8014604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d10a      	bne.n	8014622 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014610:	f383 8811 	msr	BASEPRI, r3
 8014614:	f3bf 8f6f 	isb	sy
 8014618:	f3bf 8f4f 	dsb	sy
 801461c:	613b      	str	r3, [r7, #16]
}
 801461e:	bf00      	nop
 8014620:	e7fe      	b.n	8014620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014622:	697b      	ldr	r3, [r7, #20]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3718      	adds	r7, #24
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	2000224c 	.word	0x2000224c
 8014630:	080188d0 	.word	0x080188d0
 8014634:	08014771 	.word	0x08014771
 8014638:	20002250 	.word	0x20002250

0801463c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b08a      	sub	sp, #40	; 0x28
 8014640:	af00      	add	r7, sp, #0
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	60b9      	str	r1, [r7, #8]
 8014646:	607a      	str	r2, [r7, #4]
 8014648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801464a:	2300      	movs	r3, #0
 801464c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d10a      	bne.n	801466a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014658:	f383 8811 	msr	BASEPRI, r3
 801465c:	f3bf 8f6f 	isb	sy
 8014660:	f3bf 8f4f 	dsb	sy
 8014664:	623b      	str	r3, [r7, #32]
}
 8014666:	bf00      	nop
 8014668:	e7fe      	b.n	8014668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801466a:	4b1a      	ldr	r3, [pc, #104]	; (80146d4 <xTimerGenericCommand+0x98>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d02a      	beq.n	80146c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	2b05      	cmp	r3, #5
 8014682:	dc18      	bgt.n	80146b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014684:	f7ff feaa 	bl	80143dc <xTaskGetSchedulerState>
 8014688:	4603      	mov	r3, r0
 801468a:	2b02      	cmp	r3, #2
 801468c:	d109      	bne.n	80146a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801468e:	4b11      	ldr	r3, [pc, #68]	; (80146d4 <xTimerGenericCommand+0x98>)
 8014690:	6818      	ldr	r0, [r3, #0]
 8014692:	f107 0110 	add.w	r1, r7, #16
 8014696:	2300      	movs	r3, #0
 8014698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801469a:	f7fe fb13 	bl	8012cc4 <xQueueGenericSend>
 801469e:	6278      	str	r0, [r7, #36]	; 0x24
 80146a0:	e012      	b.n	80146c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80146a2:	4b0c      	ldr	r3, [pc, #48]	; (80146d4 <xTimerGenericCommand+0x98>)
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	f107 0110 	add.w	r1, r7, #16
 80146aa:	2300      	movs	r3, #0
 80146ac:	2200      	movs	r2, #0
 80146ae:	f7fe fb09 	bl	8012cc4 <xQueueGenericSend>
 80146b2:	6278      	str	r0, [r7, #36]	; 0x24
 80146b4:	e008      	b.n	80146c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80146b6:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <xTimerGenericCommand+0x98>)
 80146b8:	6818      	ldr	r0, [r3, #0]
 80146ba:	f107 0110 	add.w	r1, r7, #16
 80146be:	2300      	movs	r3, #0
 80146c0:	683a      	ldr	r2, [r7, #0]
 80146c2:	f7fe fc25 	bl	8012f10 <xQueueGenericSendFromISR>
 80146c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80146c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3728      	adds	r7, #40	; 0x28
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	2000224c 	.word	0x2000224c

080146d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b088      	sub	sp, #32
 80146dc:	af02      	add	r7, sp, #8
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146e2:	4b22      	ldr	r3, [pc, #136]	; (801476c <prvProcessExpiredTimer+0x94>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	68db      	ldr	r3, [r3, #12]
 80146ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	3304      	adds	r3, #4
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7fe f979 	bl	80129e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146fc:	f003 0304 	and.w	r3, r3, #4
 8014700:	2b00      	cmp	r3, #0
 8014702:	d022      	beq.n	801474a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	699a      	ldr	r2, [r3, #24]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	18d1      	adds	r1, r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	6978      	ldr	r0, [r7, #20]
 8014712:	f000 f8d1 	bl	80148b8 <prvInsertTimerInActiveList>
 8014716:	4603      	mov	r3, r0
 8014718:	2b00      	cmp	r3, #0
 801471a:	d01f      	beq.n	801475c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801471c:	2300      	movs	r3, #0
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	2300      	movs	r3, #0
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	2100      	movs	r1, #0
 8014726:	6978      	ldr	r0, [r7, #20]
 8014728:	f7ff ff88 	bl	801463c <xTimerGenericCommand>
 801472c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d113      	bne.n	801475c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014738:	f383 8811 	msr	BASEPRI, r3
 801473c:	f3bf 8f6f 	isb	sy
 8014740:	f3bf 8f4f 	dsb	sy
 8014744:	60fb      	str	r3, [r7, #12]
}
 8014746:	bf00      	nop
 8014748:	e7fe      	b.n	8014748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014750:	f023 0301 	bic.w	r3, r3, #1
 8014754:	b2da      	uxtb	r2, r3
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	6a1b      	ldr	r3, [r3, #32]
 8014760:	6978      	ldr	r0, [r7, #20]
 8014762:	4798      	blx	r3
}
 8014764:	bf00      	nop
 8014766:	3718      	adds	r7, #24
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	20002244 	.word	0x20002244

08014770 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014778:	f107 0308 	add.w	r3, r7, #8
 801477c:	4618      	mov	r0, r3
 801477e:	f000 f857 	bl	8014830 <prvGetNextExpireTime>
 8014782:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	4619      	mov	r1, r3
 8014788:	68f8      	ldr	r0, [r7, #12]
 801478a:	f000 f803 	bl	8014794 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801478e:	f000 f8d5 	bl	801493c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014792:	e7f1      	b.n	8014778 <prvTimerTask+0x8>

08014794 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801479e:	f7ff f9c5 	bl	8013b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147a2:	f107 0308 	add.w	r3, r7, #8
 80147a6:	4618      	mov	r0, r3
 80147a8:	f000 f866 	bl	8014878 <prvSampleTimeNow>
 80147ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d130      	bne.n	8014816 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d10a      	bne.n	80147d0 <prvProcessTimerOrBlockTask+0x3c>
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d806      	bhi.n	80147d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80147c2:	f7ff f9c1 	bl	8013b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80147c6:	68f9      	ldr	r1, [r7, #12]
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff ff85 	bl	80146d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80147ce:	e024      	b.n	801481a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d008      	beq.n	80147e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80147d6:	4b13      	ldr	r3, [pc, #76]	; (8014824 <prvProcessTimerOrBlockTask+0x90>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d101      	bne.n	80147e4 <prvProcessTimerOrBlockTask+0x50>
 80147e0:	2301      	movs	r3, #1
 80147e2:	e000      	b.n	80147e6 <prvProcessTimerOrBlockTask+0x52>
 80147e4:	2300      	movs	r3, #0
 80147e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80147e8:	4b0f      	ldr	r3, [pc, #60]	; (8014828 <prvProcessTimerOrBlockTask+0x94>)
 80147ea:	6818      	ldr	r0, [r3, #0]
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	683a      	ldr	r2, [r7, #0]
 80147f4:	4619      	mov	r1, r3
 80147f6:	f7fe fe8d 	bl	8013514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80147fa:	f7ff f9a5 	bl	8013b48 <xTaskResumeAll>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d10a      	bne.n	801481a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014804:	4b09      	ldr	r3, [pc, #36]	; (801482c <prvProcessTimerOrBlockTask+0x98>)
 8014806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801480a:	601a      	str	r2, [r3, #0]
 801480c:	f3bf 8f4f 	dsb	sy
 8014810:	f3bf 8f6f 	isb	sy
}
 8014814:	e001      	b.n	801481a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014816:	f7ff f997 	bl	8013b48 <xTaskResumeAll>
}
 801481a:	bf00      	nop
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	20002248 	.word	0x20002248
 8014828:	2000224c 	.word	0x2000224c
 801482c:	e000ed04 	.word	0xe000ed04

08014830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014830:	b480      	push	{r7}
 8014832:	b085      	sub	sp, #20
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014838:	4b0e      	ldr	r3, [pc, #56]	; (8014874 <prvGetNextExpireTime+0x44>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <prvGetNextExpireTime+0x16>
 8014842:	2201      	movs	r2, #1
 8014844:	e000      	b.n	8014848 <prvGetNextExpireTime+0x18>
 8014846:	2200      	movs	r2, #0
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d105      	bne.n	8014860 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014854:	4b07      	ldr	r3, [pc, #28]	; (8014874 <prvGetNextExpireTime+0x44>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	60fb      	str	r3, [r7, #12]
 801485e:	e001      	b.n	8014864 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014860:	2300      	movs	r3, #0
 8014862:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014864:	68fb      	ldr	r3, [r7, #12]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3714      	adds	r7, #20
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop
 8014874:	20002244 	.word	0x20002244

08014878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014880:	f7ff fa04 	bl	8013c8c <xTaskGetTickCount>
 8014884:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014886:	4b0b      	ldr	r3, [pc, #44]	; (80148b4 <prvSampleTimeNow+0x3c>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	429a      	cmp	r2, r3
 801488e:	d205      	bcs.n	801489c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014890:	f000 f936 	bl	8014b00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2201      	movs	r2, #1
 8014898:	601a      	str	r2, [r3, #0]
 801489a:	e002      	b.n	80148a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2200      	movs	r2, #0
 80148a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80148a2:	4a04      	ldr	r2, [pc, #16]	; (80148b4 <prvSampleTimeNow+0x3c>)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80148a8:	68fb      	ldr	r3, [r7, #12]
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3710      	adds	r7, #16
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	20002254 	.word	0x20002254

080148b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
 80148c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80148c6:	2300      	movs	r3, #0
 80148c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	68ba      	ldr	r2, [r7, #8]
 80148ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d812      	bhi.n	8014904 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	1ad2      	subs	r2, r2, r3
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	699b      	ldr	r3, [r3, #24]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d302      	bcc.n	80148f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80148ec:	2301      	movs	r3, #1
 80148ee:	617b      	str	r3, [r7, #20]
 80148f0:	e01b      	b.n	801492a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80148f2:	4b10      	ldr	r3, [pc, #64]	; (8014934 <prvInsertTimerInActiveList+0x7c>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	3304      	adds	r3, #4
 80148fa:	4619      	mov	r1, r3
 80148fc:	4610      	mov	r0, r2
 80148fe:	f7fe f83a 	bl	8012976 <vListInsert>
 8014902:	e012      	b.n	801492a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	429a      	cmp	r2, r3
 801490a:	d206      	bcs.n	801491a <prvInsertTimerInActiveList+0x62>
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	429a      	cmp	r2, r3
 8014912:	d302      	bcc.n	801491a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014914:	2301      	movs	r3, #1
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	e007      	b.n	801492a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801491a:	4b07      	ldr	r3, [pc, #28]	; (8014938 <prvInsertTimerInActiveList+0x80>)
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	3304      	adds	r3, #4
 8014922:	4619      	mov	r1, r3
 8014924:	4610      	mov	r0, r2
 8014926:	f7fe f826 	bl	8012976 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801492a:	697b      	ldr	r3, [r7, #20]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3718      	adds	r7, #24
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	20002248 	.word	0x20002248
 8014938:	20002244 	.word	0x20002244

0801493c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08e      	sub	sp, #56	; 0x38
 8014940:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014942:	e0ca      	b.n	8014ada <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	da18      	bge.n	801497c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801494a:	1d3b      	adds	r3, r7, #4
 801494c:	3304      	adds	r3, #4
 801494e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10a      	bne.n	801496c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495a:	f383 8811 	msr	BASEPRI, r3
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	f3bf 8f4f 	dsb	sy
 8014966:	61fb      	str	r3, [r7, #28]
}
 8014968:	bf00      	nop
 801496a:	e7fe      	b.n	801496a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014972:	6850      	ldr	r0, [r2, #4]
 8014974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014976:	6892      	ldr	r2, [r2, #8]
 8014978:	4611      	mov	r1, r2
 801497a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	f2c0 80aa 	blt.w	8014ad8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498a:	695b      	ldr	r3, [r3, #20]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d004      	beq.n	801499a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014992:	3304      	adds	r3, #4
 8014994:	4618      	mov	r0, r3
 8014996:	f7fe f827 	bl	80129e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801499a:	463b      	mov	r3, r7
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff ff6b 	bl	8014878 <prvSampleTimeNow>
 80149a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2b09      	cmp	r3, #9
 80149a8:	f200 8097 	bhi.w	8014ada <prvProcessReceivedCommands+0x19e>
 80149ac:	a201      	add	r2, pc, #4	; (adr r2, 80149b4 <prvProcessReceivedCommands+0x78>)
 80149ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b2:	bf00      	nop
 80149b4:	080149dd 	.word	0x080149dd
 80149b8:	080149dd 	.word	0x080149dd
 80149bc:	080149dd 	.word	0x080149dd
 80149c0:	08014a51 	.word	0x08014a51
 80149c4:	08014a65 	.word	0x08014a65
 80149c8:	08014aaf 	.word	0x08014aaf
 80149cc:	080149dd 	.word	0x080149dd
 80149d0:	080149dd 	.word	0x080149dd
 80149d4:	08014a51 	.word	0x08014a51
 80149d8:	08014a65 	.word	0x08014a65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149e2:	f043 0301 	orr.w	r3, r3, #1
 80149e6:	b2da      	uxtb	r2, r3
 80149e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80149ee:	68ba      	ldr	r2, [r7, #8]
 80149f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f2:	699b      	ldr	r3, [r3, #24]
 80149f4:	18d1      	adds	r1, r2, r3
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149fc:	f7ff ff5c 	bl	80148b8 <prvInsertTimerInActiveList>
 8014a00:	4603      	mov	r3, r0
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d069      	beq.n	8014ada <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a08:	6a1b      	ldr	r3, [r3, #32]
 8014a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a14:	f003 0304 	and.w	r3, r3, #4
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d05e      	beq.n	8014ada <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014a1c:	68ba      	ldr	r2, [r7, #8]
 8014a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a20:	699b      	ldr	r3, [r3, #24]
 8014a22:	441a      	add	r2, r3
 8014a24:	2300      	movs	r3, #0
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a2e:	f7ff fe05 	bl	801463c <xTimerGenericCommand>
 8014a32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014a34:	6a3b      	ldr	r3, [r7, #32]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d14f      	bne.n	8014ada <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3e:	f383 8811 	msr	BASEPRI, r3
 8014a42:	f3bf 8f6f 	isb	sy
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	61bb      	str	r3, [r7, #24]
}
 8014a4c:	bf00      	nop
 8014a4e:	e7fe      	b.n	8014a4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a56:	f023 0301 	bic.w	r3, r3, #1
 8014a5a:	b2da      	uxtb	r2, r3
 8014a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014a62:	e03a      	b.n	8014ada <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a6a:	f043 0301 	orr.w	r3, r3, #1
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014a76:	68ba      	ldr	r2, [r7, #8]
 8014a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7e:	699b      	ldr	r3, [r3, #24]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d10a      	bne.n	8014a9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a88:	f383 8811 	msr	BASEPRI, r3
 8014a8c:	f3bf 8f6f 	isb	sy
 8014a90:	f3bf 8f4f 	dsb	sy
 8014a94:	617b      	str	r3, [r7, #20]
}
 8014a96:	bf00      	nop
 8014a98:	e7fe      	b.n	8014a98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9c:	699a      	ldr	r2, [r3, #24]
 8014a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa0:	18d1      	adds	r1, r2, r3
 8014aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aa8:	f7ff ff06 	bl	80148b8 <prvInsertTimerInActiveList>
					break;
 8014aac:	e015      	b.n	8014ada <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ab4:	f003 0302 	and.w	r3, r3, #2
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d103      	bne.n	8014ac4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014abe:	f000 fbdf 	bl	8015280 <vPortFree>
 8014ac2:	e00a      	b.n	8014ada <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014aca:	f023 0301 	bic.w	r3, r3, #1
 8014ace:	b2da      	uxtb	r2, r3
 8014ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014ad6:	e000      	b.n	8014ada <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014ad8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014ada:	4b08      	ldr	r3, [pc, #32]	; (8014afc <prvProcessReceivedCommands+0x1c0>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	1d39      	adds	r1, r7, #4
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe fac4 	bl	8013070 <xQueueReceive>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f47f af2a 	bne.w	8014944 <prvProcessReceivedCommands+0x8>
	}
}
 8014af0:	bf00      	nop
 8014af2:	bf00      	nop
 8014af4:	3730      	adds	r7, #48	; 0x30
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	2000224c 	.word	0x2000224c

08014b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b088      	sub	sp, #32
 8014b04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b06:	e048      	b.n	8014b9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b08:	4b2d      	ldr	r3, [pc, #180]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b12:	4b2b      	ldr	r3, [pc, #172]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	3304      	adds	r3, #4
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fd ff61 	bl	80129e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	6a1b      	ldr	r3, [r3, #32]
 8014b2a:	68f8      	ldr	r0, [r7, #12]
 8014b2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b34:	f003 0304 	and.w	r3, r3, #4
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d02e      	beq.n	8014b9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	699b      	ldr	r3, [r3, #24]
 8014b40:	693a      	ldr	r2, [r7, #16]
 8014b42:	4413      	add	r3, r2
 8014b44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b46:	68ba      	ldr	r2, [r7, #8]
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d90e      	bls.n	8014b6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	68fa      	ldr	r2, [r7, #12]
 8014b58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b5a:	4b19      	ldr	r3, [pc, #100]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	3304      	adds	r3, #4
 8014b62:	4619      	mov	r1, r3
 8014b64:	4610      	mov	r0, r2
 8014b66:	f7fd ff06 	bl	8012976 <vListInsert>
 8014b6a:	e016      	b.n	8014b9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	9300      	str	r3, [sp, #0]
 8014b70:	2300      	movs	r3, #0
 8014b72:	693a      	ldr	r2, [r7, #16]
 8014b74:	2100      	movs	r1, #0
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f7ff fd60 	bl	801463c <xTimerGenericCommand>
 8014b7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10a      	bne.n	8014b9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	603b      	str	r3, [r7, #0]
}
 8014b96:	bf00      	nop
 8014b98:	e7fe      	b.n	8014b98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d1b1      	bne.n	8014b08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014ba4:	4b06      	ldr	r3, [pc, #24]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014baa:	4b06      	ldr	r3, [pc, #24]	; (8014bc4 <prvSwitchTimerLists+0xc4>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	4a04      	ldr	r2, [pc, #16]	; (8014bc0 <prvSwitchTimerLists+0xc0>)
 8014bb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014bb2:	4a04      	ldr	r2, [pc, #16]	; (8014bc4 <prvSwitchTimerLists+0xc4>)
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	6013      	str	r3, [r2, #0]
}
 8014bb8:	bf00      	nop
 8014bba:	3718      	adds	r7, #24
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	20002244 	.word	0x20002244
 8014bc4:	20002248 	.word	0x20002248

08014bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014bce:	f000 f969 	bl	8014ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014bd2:	4b15      	ldr	r3, [pc, #84]	; (8014c28 <prvCheckForValidListAndQueue+0x60>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d120      	bne.n	8014c1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014bda:	4814      	ldr	r0, [pc, #80]	; (8014c2c <prvCheckForValidListAndQueue+0x64>)
 8014bdc:	f7fd fe7a 	bl	80128d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014be0:	4813      	ldr	r0, [pc, #76]	; (8014c30 <prvCheckForValidListAndQueue+0x68>)
 8014be2:	f7fd fe77 	bl	80128d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014be6:	4b13      	ldr	r3, [pc, #76]	; (8014c34 <prvCheckForValidListAndQueue+0x6c>)
 8014be8:	4a10      	ldr	r2, [pc, #64]	; (8014c2c <prvCheckForValidListAndQueue+0x64>)
 8014bea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014bec:	4b12      	ldr	r3, [pc, #72]	; (8014c38 <prvCheckForValidListAndQueue+0x70>)
 8014bee:	4a10      	ldr	r2, [pc, #64]	; (8014c30 <prvCheckForValidListAndQueue+0x68>)
 8014bf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	9300      	str	r3, [sp, #0]
 8014bf6:	4b11      	ldr	r3, [pc, #68]	; (8014c3c <prvCheckForValidListAndQueue+0x74>)
 8014bf8:	4a11      	ldr	r2, [pc, #68]	; (8014c40 <prvCheckForValidListAndQueue+0x78>)
 8014bfa:	2110      	movs	r1, #16
 8014bfc:	200a      	movs	r0, #10
 8014bfe:	f7fd ff85 	bl	8012b0c <xQueueGenericCreateStatic>
 8014c02:	4603      	mov	r3, r0
 8014c04:	4a08      	ldr	r2, [pc, #32]	; (8014c28 <prvCheckForValidListAndQueue+0x60>)
 8014c06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c08:	4b07      	ldr	r3, [pc, #28]	; (8014c28 <prvCheckForValidListAndQueue+0x60>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d005      	beq.n	8014c1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c10:	4b05      	ldr	r3, [pc, #20]	; (8014c28 <prvCheckForValidListAndQueue+0x60>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	490b      	ldr	r1, [pc, #44]	; (8014c44 <prvCheckForValidListAndQueue+0x7c>)
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fe fc4a 	bl	80134b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c1c:	f000 f972 	bl	8014f04 <vPortExitCritical>
}
 8014c20:	bf00      	nop
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	2000224c 	.word	0x2000224c
 8014c2c:	2000221c 	.word	0x2000221c
 8014c30:	20002230 	.word	0x20002230
 8014c34:	20002244 	.word	0x20002244
 8014c38:	20002248 	.word	0x20002248
 8014c3c:	200022f8 	.word	0x200022f8
 8014c40:	20002258 	.word	0x20002258
 8014c44:	080188d8 	.word	0x080188d8

08014c48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b085      	sub	sp, #20
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	3b04      	subs	r3, #4
 8014c58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3b04      	subs	r3, #4
 8014c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	f023 0201 	bic.w	r2, r3, #1
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3b04      	subs	r3, #4
 8014c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014c78:	4a0c      	ldr	r2, [pc, #48]	; (8014cac <pxPortInitialiseStack+0x64>)
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3b14      	subs	r3, #20
 8014c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	3b04      	subs	r3, #4
 8014c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f06f 0202 	mvn.w	r2, #2
 8014c96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	3b20      	subs	r3, #32
 8014c9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3714      	adds	r7, #20
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014caa:	4770      	bx	lr
 8014cac:	08014cb1 	.word	0x08014cb1

08014cb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014cb0:	b480      	push	{r7}
 8014cb2:	b085      	sub	sp, #20
 8014cb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014cba:	4b12      	ldr	r3, [pc, #72]	; (8014d04 <prvTaskExitError+0x54>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc2:	d00a      	beq.n	8014cda <prvTaskExitError+0x2a>
	__asm volatile
 8014cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc8:	f383 8811 	msr	BASEPRI, r3
 8014ccc:	f3bf 8f6f 	isb	sy
 8014cd0:	f3bf 8f4f 	dsb	sy
 8014cd4:	60fb      	str	r3, [r7, #12]
}
 8014cd6:	bf00      	nop
 8014cd8:	e7fe      	b.n	8014cd8 <prvTaskExitError+0x28>
	__asm volatile
 8014cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cde:	f383 8811 	msr	BASEPRI, r3
 8014ce2:	f3bf 8f6f 	isb	sy
 8014ce6:	f3bf 8f4f 	dsb	sy
 8014cea:	60bb      	str	r3, [r7, #8]
}
 8014cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014cee:	bf00      	nop
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d0fc      	beq.n	8014cf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014cf6:	bf00      	nop
 8014cf8:	bf00      	nop
 8014cfa:	3714      	adds	r7, #20
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr
 8014d04:	200012f0 	.word	0x200012f0
	...

08014d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d10:	4b07      	ldr	r3, [pc, #28]	; (8014d30 <pxCurrentTCBConst2>)
 8014d12:	6819      	ldr	r1, [r3, #0]
 8014d14:	6808      	ldr	r0, [r1, #0]
 8014d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1a:	f380 8809 	msr	PSP, r0
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	f04f 0000 	mov.w	r0, #0
 8014d26:	f380 8811 	msr	BASEPRI, r0
 8014d2a:	4770      	bx	lr
 8014d2c:	f3af 8000 	nop.w

08014d30 <pxCurrentTCBConst2>:
 8014d30:	20001d1c 	.word	0x20001d1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d34:	bf00      	nop
 8014d36:	bf00      	nop

08014d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d38:	4808      	ldr	r0, [pc, #32]	; (8014d5c <prvPortStartFirstTask+0x24>)
 8014d3a:	6800      	ldr	r0, [r0, #0]
 8014d3c:	6800      	ldr	r0, [r0, #0]
 8014d3e:	f380 8808 	msr	MSP, r0
 8014d42:	f04f 0000 	mov.w	r0, #0
 8014d46:	f380 8814 	msr	CONTROL, r0
 8014d4a:	b662      	cpsie	i
 8014d4c:	b661      	cpsie	f
 8014d4e:	f3bf 8f4f 	dsb	sy
 8014d52:	f3bf 8f6f 	isb	sy
 8014d56:	df00      	svc	0
 8014d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d5a:	bf00      	nop
 8014d5c:	e000ed08 	.word	0xe000ed08

08014d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b086      	sub	sp, #24
 8014d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014d66:	4b46      	ldr	r3, [pc, #280]	; (8014e80 <xPortStartScheduler+0x120>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	4a46      	ldr	r2, [pc, #280]	; (8014e84 <xPortStartScheduler+0x124>)
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d10a      	bne.n	8014d86 <xPortStartScheduler+0x26>
	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	613b      	str	r3, [r7, #16]
}
 8014d82:	bf00      	nop
 8014d84:	e7fe      	b.n	8014d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014d86:	4b3e      	ldr	r3, [pc, #248]	; (8014e80 <xPortStartScheduler+0x120>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	4a3f      	ldr	r2, [pc, #252]	; (8014e88 <xPortStartScheduler+0x128>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d10a      	bne.n	8014da6 <xPortStartScheduler+0x46>
	__asm volatile
 8014d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	60fb      	str	r3, [r7, #12]
}
 8014da2:	bf00      	nop
 8014da4:	e7fe      	b.n	8014da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014da6:	4b39      	ldr	r3, [pc, #228]	; (8014e8c <xPortStartScheduler+0x12c>)
 8014da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	22ff      	movs	r2, #255	; 0xff
 8014db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014dc0:	78fb      	ldrb	r3, [r7, #3]
 8014dc2:	b2db      	uxtb	r3, r3
 8014dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014dc8:	b2da      	uxtb	r2, r3
 8014dca:	4b31      	ldr	r3, [pc, #196]	; (8014e90 <xPortStartScheduler+0x130>)
 8014dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014dce:	4b31      	ldr	r3, [pc, #196]	; (8014e94 <xPortStartScheduler+0x134>)
 8014dd0:	2207      	movs	r2, #7
 8014dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dd4:	e009      	b.n	8014dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014dd6:	4b2f      	ldr	r3, [pc, #188]	; (8014e94 <xPortStartScheduler+0x134>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	3b01      	subs	r3, #1
 8014ddc:	4a2d      	ldr	r2, [pc, #180]	; (8014e94 <xPortStartScheduler+0x134>)
 8014dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014de0:	78fb      	ldrb	r3, [r7, #3]
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	005b      	lsls	r3, r3, #1
 8014de6:	b2db      	uxtb	r3, r3
 8014de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dea:	78fb      	ldrb	r3, [r7, #3]
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014df2:	2b80      	cmp	r3, #128	; 0x80
 8014df4:	d0ef      	beq.n	8014dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014df6:	4b27      	ldr	r3, [pc, #156]	; (8014e94 <xPortStartScheduler+0x134>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	f1c3 0307 	rsb	r3, r3, #7
 8014dfe:	2b04      	cmp	r3, #4
 8014e00:	d00a      	beq.n	8014e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8014e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e06:	f383 8811 	msr	BASEPRI, r3
 8014e0a:	f3bf 8f6f 	isb	sy
 8014e0e:	f3bf 8f4f 	dsb	sy
 8014e12:	60bb      	str	r3, [r7, #8]
}
 8014e14:	bf00      	nop
 8014e16:	e7fe      	b.n	8014e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e18:	4b1e      	ldr	r3, [pc, #120]	; (8014e94 <xPortStartScheduler+0x134>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	021b      	lsls	r3, r3, #8
 8014e1e:	4a1d      	ldr	r2, [pc, #116]	; (8014e94 <xPortStartScheduler+0x134>)
 8014e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e22:	4b1c      	ldr	r3, [pc, #112]	; (8014e94 <xPortStartScheduler+0x134>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e2a:	4a1a      	ldr	r2, [pc, #104]	; (8014e94 <xPortStartScheduler+0x134>)
 8014e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	b2da      	uxtb	r2, r3
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e36:	4b18      	ldr	r3, [pc, #96]	; (8014e98 <xPortStartScheduler+0x138>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4a17      	ldr	r2, [pc, #92]	; (8014e98 <xPortStartScheduler+0x138>)
 8014e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e42:	4b15      	ldr	r3, [pc, #84]	; (8014e98 <xPortStartScheduler+0x138>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4a14      	ldr	r2, [pc, #80]	; (8014e98 <xPortStartScheduler+0x138>)
 8014e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e4e:	f000 f8dd 	bl	801500c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e52:	4b12      	ldr	r3, [pc, #72]	; (8014e9c <xPortStartScheduler+0x13c>)
 8014e54:	2200      	movs	r2, #0
 8014e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e58:	f000 f8fc 	bl	8015054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e5c:	4b10      	ldr	r3, [pc, #64]	; (8014ea0 <xPortStartScheduler+0x140>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	4a0f      	ldr	r2, [pc, #60]	; (8014ea0 <xPortStartScheduler+0x140>)
 8014e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e68:	f7ff ff66 	bl	8014d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e6c:	f7fe ffee 	bl	8013e4c <vTaskSwitchContext>
	prvTaskExitError();
 8014e70:	f7ff ff1e 	bl	8014cb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3718      	adds	r7, #24
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	e000ed00 	.word	0xe000ed00
 8014e84:	410fc271 	.word	0x410fc271
 8014e88:	410fc270 	.word	0x410fc270
 8014e8c:	e000e400 	.word	0xe000e400
 8014e90:	20002348 	.word	0x20002348
 8014e94:	2000234c 	.word	0x2000234c
 8014e98:	e000ed20 	.word	0xe000ed20
 8014e9c:	200012f0 	.word	0x200012f0
 8014ea0:	e000ef34 	.word	0xe000ef34

08014ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8014eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	607b      	str	r3, [r7, #4]
}
 8014ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ebe:	4b0f      	ldr	r3, [pc, #60]	; (8014efc <vPortEnterCritical+0x58>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	4a0d      	ldr	r2, [pc, #52]	; (8014efc <vPortEnterCritical+0x58>)
 8014ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ec8:	4b0c      	ldr	r3, [pc, #48]	; (8014efc <vPortEnterCritical+0x58>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d10f      	bne.n	8014ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014ed0:	4b0b      	ldr	r3, [pc, #44]	; (8014f00 <vPortEnterCritical+0x5c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d00a      	beq.n	8014ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ede:	f383 8811 	msr	BASEPRI, r3
 8014ee2:	f3bf 8f6f 	isb	sy
 8014ee6:	f3bf 8f4f 	dsb	sy
 8014eea:	603b      	str	r3, [r7, #0]
}
 8014eec:	bf00      	nop
 8014eee:	e7fe      	b.n	8014eee <vPortEnterCritical+0x4a>
	}
}
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr
 8014efc:	200012f0 	.word	0x200012f0
 8014f00:	e000ed04 	.word	0xe000ed04

08014f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f04:	b480      	push	{r7}
 8014f06:	b083      	sub	sp, #12
 8014f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f0a:	4b12      	ldr	r3, [pc, #72]	; (8014f54 <vPortExitCritical+0x50>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10a      	bne.n	8014f28 <vPortExitCritical+0x24>
	__asm volatile
 8014f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f16:	f383 8811 	msr	BASEPRI, r3
 8014f1a:	f3bf 8f6f 	isb	sy
 8014f1e:	f3bf 8f4f 	dsb	sy
 8014f22:	607b      	str	r3, [r7, #4]
}
 8014f24:	bf00      	nop
 8014f26:	e7fe      	b.n	8014f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014f28:	4b0a      	ldr	r3, [pc, #40]	; (8014f54 <vPortExitCritical+0x50>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	4a09      	ldr	r2, [pc, #36]	; (8014f54 <vPortExitCritical+0x50>)
 8014f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f32:	4b08      	ldr	r3, [pc, #32]	; (8014f54 <vPortExitCritical+0x50>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d105      	bne.n	8014f46 <vPortExitCritical+0x42>
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	f383 8811 	msr	BASEPRI, r3
}
 8014f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f46:	bf00      	nop
 8014f48:	370c      	adds	r7, #12
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop
 8014f54:	200012f0 	.word	0x200012f0
	...

08014f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f60:	f3ef 8009 	mrs	r0, PSP
 8014f64:	f3bf 8f6f 	isb	sy
 8014f68:	4b15      	ldr	r3, [pc, #84]	; (8014fc0 <pxCurrentTCBConst>)
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	f01e 0f10 	tst.w	lr, #16
 8014f70:	bf08      	it	eq
 8014f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f7a:	6010      	str	r0, [r2, #0]
 8014f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014f84:	f380 8811 	msr	BASEPRI, r0
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	f3bf 8f6f 	isb	sy
 8014f90:	f7fe ff5c 	bl	8013e4c <vTaskSwitchContext>
 8014f94:	f04f 0000 	mov.w	r0, #0
 8014f98:	f380 8811 	msr	BASEPRI, r0
 8014f9c:	bc09      	pop	{r0, r3}
 8014f9e:	6819      	ldr	r1, [r3, #0]
 8014fa0:	6808      	ldr	r0, [r1, #0]
 8014fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa6:	f01e 0f10 	tst.w	lr, #16
 8014faa:	bf08      	it	eq
 8014fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014fb0:	f380 8809 	msr	PSP, r0
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	4770      	bx	lr
 8014fba:	bf00      	nop
 8014fbc:	f3af 8000 	nop.w

08014fc0 <pxCurrentTCBConst>:
 8014fc0:	20001d1c 	.word	0x20001d1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014fc4:	bf00      	nop
 8014fc6:	bf00      	nop

08014fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8014fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd2:	f383 8811 	msr	BASEPRI, r3
 8014fd6:	f3bf 8f6f 	isb	sy
 8014fda:	f3bf 8f4f 	dsb	sy
 8014fde:	607b      	str	r3, [r7, #4]
}
 8014fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014fe2:	f7fe fe75 	bl	8013cd0 <xTaskIncrementTick>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d003      	beq.n	8014ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014fec:	4b06      	ldr	r3, [pc, #24]	; (8015008 <xPortSysTickHandler+0x40>)
 8014fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ff2:	601a      	str	r2, [r3, #0]
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	f383 8811 	msr	BASEPRI, r3
}
 8014ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015000:	bf00      	nop
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	e000ed04 	.word	0xe000ed04

0801500c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801500c:	b480      	push	{r7}
 801500e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015010:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <vPortSetupTimerInterrupt+0x34>)
 8015012:	2200      	movs	r2, #0
 8015014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015016:	4b0b      	ldr	r3, [pc, #44]	; (8015044 <vPortSetupTimerInterrupt+0x38>)
 8015018:	2200      	movs	r2, #0
 801501a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801501c:	4b0a      	ldr	r3, [pc, #40]	; (8015048 <vPortSetupTimerInterrupt+0x3c>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4a0a      	ldr	r2, [pc, #40]	; (801504c <vPortSetupTimerInterrupt+0x40>)
 8015022:	fba2 2303 	umull	r2, r3, r2, r3
 8015026:	099b      	lsrs	r3, r3, #6
 8015028:	4a09      	ldr	r2, [pc, #36]	; (8015050 <vPortSetupTimerInterrupt+0x44>)
 801502a:	3b01      	subs	r3, #1
 801502c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801502e:	4b04      	ldr	r3, [pc, #16]	; (8015040 <vPortSetupTimerInterrupt+0x34>)
 8015030:	2207      	movs	r2, #7
 8015032:	601a      	str	r2, [r3, #0]
}
 8015034:	bf00      	nop
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop
 8015040:	e000e010 	.word	0xe000e010
 8015044:	e000e018 	.word	0xe000e018
 8015048:	20000004 	.word	0x20000004
 801504c:	10624dd3 	.word	0x10624dd3
 8015050:	e000e014 	.word	0xe000e014

08015054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015064 <vPortEnableVFP+0x10>
 8015058:	6801      	ldr	r1, [r0, #0]
 801505a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801505e:	6001      	str	r1, [r0, #0]
 8015060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015062:	bf00      	nop
 8015064:	e000ed88 	.word	0xe000ed88

08015068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015068:	b480      	push	{r7}
 801506a:	b085      	sub	sp, #20
 801506c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801506e:	f3ef 8305 	mrs	r3, IPSR
 8015072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b0f      	cmp	r3, #15
 8015078:	d914      	bls.n	80150a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801507a:	4a17      	ldr	r2, [pc, #92]	; (80150d8 <vPortValidateInterruptPriority+0x70>)
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	4413      	add	r3, r2
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015084:	4b15      	ldr	r3, [pc, #84]	; (80150dc <vPortValidateInterruptPriority+0x74>)
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	7afa      	ldrb	r2, [r7, #11]
 801508a:	429a      	cmp	r2, r3
 801508c:	d20a      	bcs.n	80150a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015092:	f383 8811 	msr	BASEPRI, r3
 8015096:	f3bf 8f6f 	isb	sy
 801509a:	f3bf 8f4f 	dsb	sy
 801509e:	607b      	str	r3, [r7, #4]
}
 80150a0:	bf00      	nop
 80150a2:	e7fe      	b.n	80150a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150a4:	4b0e      	ldr	r3, [pc, #56]	; (80150e0 <vPortValidateInterruptPriority+0x78>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80150ac:	4b0d      	ldr	r3, [pc, #52]	; (80150e4 <vPortValidateInterruptPriority+0x7c>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d90a      	bls.n	80150ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80150b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b8:	f383 8811 	msr	BASEPRI, r3
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f3bf 8f4f 	dsb	sy
 80150c4:	603b      	str	r3, [r7, #0]
}
 80150c6:	bf00      	nop
 80150c8:	e7fe      	b.n	80150c8 <vPortValidateInterruptPriority+0x60>
	}
 80150ca:	bf00      	nop
 80150cc:	3714      	adds	r7, #20
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	e000e3f0 	.word	0xe000e3f0
 80150dc:	20002348 	.word	0x20002348
 80150e0:	e000ed0c 	.word	0xe000ed0c
 80150e4:	2000234c 	.word	0x2000234c

080150e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b08a      	sub	sp, #40	; 0x28
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80150f0:	2300      	movs	r3, #0
 80150f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80150f4:	f7fe fd1a 	bl	8013b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80150f8:	4b5b      	ldr	r3, [pc, #364]	; (8015268 <pvPortMalloc+0x180>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d101      	bne.n	8015104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015100:	f000 f920 	bl	8015344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015104:	4b59      	ldr	r3, [pc, #356]	; (801526c <pvPortMalloc+0x184>)
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	4013      	ands	r3, r2
 801510c:	2b00      	cmp	r3, #0
 801510e:	f040 8093 	bne.w	8015238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d01d      	beq.n	8015154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015118:	2208      	movs	r2, #8
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	4413      	add	r3, r2
 801511e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f003 0307 	and.w	r3, r3, #7
 8015126:	2b00      	cmp	r3, #0
 8015128:	d014      	beq.n	8015154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f023 0307 	bic.w	r3, r3, #7
 8015130:	3308      	adds	r3, #8
 8015132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f003 0307 	and.w	r3, r3, #7
 801513a:	2b00      	cmp	r3, #0
 801513c:	d00a      	beq.n	8015154 <pvPortMalloc+0x6c>
	__asm volatile
 801513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015142:	f383 8811 	msr	BASEPRI, r3
 8015146:	f3bf 8f6f 	isb	sy
 801514a:	f3bf 8f4f 	dsb	sy
 801514e:	617b      	str	r3, [r7, #20]
}
 8015150:	bf00      	nop
 8015152:	e7fe      	b.n	8015152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d06e      	beq.n	8015238 <pvPortMalloc+0x150>
 801515a:	4b45      	ldr	r3, [pc, #276]	; (8015270 <pvPortMalloc+0x188>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	429a      	cmp	r2, r3
 8015162:	d869      	bhi.n	8015238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015164:	4b43      	ldr	r3, [pc, #268]	; (8015274 <pvPortMalloc+0x18c>)
 8015166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015168:	4b42      	ldr	r3, [pc, #264]	; (8015274 <pvPortMalloc+0x18c>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801516e:	e004      	b.n	801517a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	429a      	cmp	r2, r3
 8015182:	d903      	bls.n	801518c <pvPortMalloc+0xa4>
 8015184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1f1      	bne.n	8015170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801518c:	4b36      	ldr	r3, [pc, #216]	; (8015268 <pvPortMalloc+0x180>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015192:	429a      	cmp	r2, r3
 8015194:	d050      	beq.n	8015238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015196:	6a3b      	ldr	r3, [r7, #32]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2208      	movs	r2, #8
 801519c:	4413      	add	r3, r2
 801519e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	6a3b      	ldr	r3, [r7, #32]
 80151a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151aa:	685a      	ldr	r2, [r3, #4]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	1ad2      	subs	r2, r2, r3
 80151b0:	2308      	movs	r3, #8
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d91f      	bls.n	80151f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80151b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	4413      	add	r3, r2
 80151be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151c0:	69bb      	ldr	r3, [r7, #24]
 80151c2:	f003 0307 	and.w	r3, r3, #7
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d00a      	beq.n	80151e0 <pvPortMalloc+0xf8>
	__asm volatile
 80151ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ce:	f383 8811 	msr	BASEPRI, r3
 80151d2:	f3bf 8f6f 	isb	sy
 80151d6:	f3bf 8f4f 	dsb	sy
 80151da:	613b      	str	r3, [r7, #16]
}
 80151dc:	bf00      	nop
 80151de:	e7fe      	b.n	80151de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80151e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e2:	685a      	ldr	r2, [r3, #4]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	1ad2      	subs	r2, r2, r3
 80151e8:	69bb      	ldr	r3, [r7, #24]
 80151ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80151ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80151f2:	69b8      	ldr	r0, [r7, #24]
 80151f4:	f000 f90a 	bl	801540c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80151f8:	4b1d      	ldr	r3, [pc, #116]	; (8015270 <pvPortMalloc+0x188>)
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	4a1b      	ldr	r2, [pc, #108]	; (8015270 <pvPortMalloc+0x188>)
 8015204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015206:	4b1a      	ldr	r3, [pc, #104]	; (8015270 <pvPortMalloc+0x188>)
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	4b1b      	ldr	r3, [pc, #108]	; (8015278 <pvPortMalloc+0x190>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	429a      	cmp	r2, r3
 8015210:	d203      	bcs.n	801521a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015212:	4b17      	ldr	r3, [pc, #92]	; (8015270 <pvPortMalloc+0x188>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4a18      	ldr	r2, [pc, #96]	; (8015278 <pvPortMalloc+0x190>)
 8015218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521c:	685a      	ldr	r2, [r3, #4]
 801521e:	4b13      	ldr	r3, [pc, #76]	; (801526c <pvPortMalloc+0x184>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	431a      	orrs	r2, r3
 8015224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522a:	2200      	movs	r2, #0
 801522c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801522e:	4b13      	ldr	r3, [pc, #76]	; (801527c <pvPortMalloc+0x194>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	3301      	adds	r3, #1
 8015234:	4a11      	ldr	r2, [pc, #68]	; (801527c <pvPortMalloc+0x194>)
 8015236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015238:	f7fe fc86 	bl	8013b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	f003 0307 	and.w	r3, r3, #7
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00a      	beq.n	801525c <pvPortMalloc+0x174>
	__asm volatile
 8015246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801524a:	f383 8811 	msr	BASEPRI, r3
 801524e:	f3bf 8f6f 	isb	sy
 8015252:	f3bf 8f4f 	dsb	sy
 8015256:	60fb      	str	r3, [r7, #12]
}
 8015258:	bf00      	nop
 801525a:	e7fe      	b.n	801525a <pvPortMalloc+0x172>
	return pvReturn;
 801525c:	69fb      	ldr	r3, [r7, #28]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3728      	adds	r7, #40	; 0x28
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	200182e8 	.word	0x200182e8
 801526c:	200182fc 	.word	0x200182fc
 8015270:	200182ec 	.word	0x200182ec
 8015274:	200182e0 	.word	0x200182e0
 8015278:	200182f0 	.word	0x200182f0
 801527c:	200182f4 	.word	0x200182f4

08015280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d04d      	beq.n	801532e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015292:	2308      	movs	r3, #8
 8015294:	425b      	negs	r3, r3
 8015296:	697a      	ldr	r2, [r7, #20]
 8015298:	4413      	add	r3, r2
 801529a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	685a      	ldr	r2, [r3, #4]
 80152a4:	4b24      	ldr	r3, [pc, #144]	; (8015338 <vPortFree+0xb8>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	4013      	ands	r3, r2
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d10a      	bne.n	80152c4 <vPortFree+0x44>
	__asm volatile
 80152ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b2:	f383 8811 	msr	BASEPRI, r3
 80152b6:	f3bf 8f6f 	isb	sy
 80152ba:	f3bf 8f4f 	dsb	sy
 80152be:	60fb      	str	r3, [r7, #12]
}
 80152c0:	bf00      	nop
 80152c2:	e7fe      	b.n	80152c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d00a      	beq.n	80152e2 <vPortFree+0x62>
	__asm volatile
 80152cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d0:	f383 8811 	msr	BASEPRI, r3
 80152d4:	f3bf 8f6f 	isb	sy
 80152d8:	f3bf 8f4f 	dsb	sy
 80152dc:	60bb      	str	r3, [r7, #8]
}
 80152de:	bf00      	nop
 80152e0:	e7fe      	b.n	80152e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	685a      	ldr	r2, [r3, #4]
 80152e6:	4b14      	ldr	r3, [pc, #80]	; (8015338 <vPortFree+0xb8>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	4013      	ands	r3, r2
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d01e      	beq.n	801532e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d11a      	bne.n	801532e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	685a      	ldr	r2, [r3, #4]
 80152fc:	4b0e      	ldr	r3, [pc, #56]	; (8015338 <vPortFree+0xb8>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	43db      	mvns	r3, r3
 8015302:	401a      	ands	r2, r3
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015308:	f7fe fc10 	bl	8013b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	685a      	ldr	r2, [r3, #4]
 8015310:	4b0a      	ldr	r3, [pc, #40]	; (801533c <vPortFree+0xbc>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	4413      	add	r3, r2
 8015316:	4a09      	ldr	r2, [pc, #36]	; (801533c <vPortFree+0xbc>)
 8015318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801531a:	6938      	ldr	r0, [r7, #16]
 801531c:	f000 f876 	bl	801540c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015320:	4b07      	ldr	r3, [pc, #28]	; (8015340 <vPortFree+0xc0>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	3301      	adds	r3, #1
 8015326:	4a06      	ldr	r2, [pc, #24]	; (8015340 <vPortFree+0xc0>)
 8015328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801532a:	f7fe fc0d 	bl	8013b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801532e:	bf00      	nop
 8015330:	3718      	adds	r7, #24
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	200182fc 	.word	0x200182fc
 801533c:	200182ec 	.word	0x200182ec
 8015340:	200182f8 	.word	0x200182f8

08015344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015344:	b480      	push	{r7}
 8015346:	b085      	sub	sp, #20
 8015348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801534a:	4b29      	ldr	r3, [pc, #164]	; (80153f0 <prvHeapInit+0xac>)
 801534c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801534e:	4b29      	ldr	r3, [pc, #164]	; (80153f4 <prvHeapInit+0xb0>)
 8015350:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f003 0307 	and.w	r3, r3, #7
 8015358:	2b00      	cmp	r3, #0
 801535a:	d00c      	beq.n	8015376 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	3307      	adds	r3, #7
 8015360:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f023 0307 	bic.w	r3, r3, #7
 8015368:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801536a:	68ba      	ldr	r2, [r7, #8]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	1ad3      	subs	r3, r2, r3
 8015370:	4a20      	ldr	r2, [pc, #128]	; (80153f4 <prvHeapInit+0xb0>)
 8015372:	4413      	add	r3, r2
 8015374:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801537a:	4a1f      	ldr	r2, [pc, #124]	; (80153f8 <prvHeapInit+0xb4>)
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015380:	4b1d      	ldr	r3, [pc, #116]	; (80153f8 <prvHeapInit+0xb4>)
 8015382:	2200      	movs	r2, #0
 8015384:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	4413      	add	r3, r2
 801538c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801538e:	2208      	movs	r2, #8
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	1a9b      	subs	r3, r3, r2
 8015394:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f023 0307 	bic.w	r3, r3, #7
 801539c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	4a16      	ldr	r2, [pc, #88]	; (80153fc <prvHeapInit+0xb8>)
 80153a2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153a4:	4b15      	ldr	r3, [pc, #84]	; (80153fc <prvHeapInit+0xb8>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2200      	movs	r2, #0
 80153aa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153ac:	4b13      	ldr	r3, [pc, #76]	; (80153fc <prvHeapInit+0xb8>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2200      	movs	r2, #0
 80153b2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	68fa      	ldr	r2, [r7, #12]
 80153bc:	1ad2      	subs	r2, r2, r3
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153c2:	4b0e      	ldr	r3, [pc, #56]	; (80153fc <prvHeapInit+0xb8>)
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	4a0c      	ldr	r2, [pc, #48]	; (8015400 <prvHeapInit+0xbc>)
 80153d0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	4a0b      	ldr	r2, [pc, #44]	; (8015404 <prvHeapInit+0xc0>)
 80153d8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153da:	4b0b      	ldr	r3, [pc, #44]	; (8015408 <prvHeapInit+0xc4>)
 80153dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153e0:	601a      	str	r2, [r3, #0]
}
 80153e2:	bf00      	nop
 80153e4:	3714      	adds	r7, #20
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop
 80153f0:	00015f90 	.word	0x00015f90
 80153f4:	20002350 	.word	0x20002350
 80153f8:	200182e0 	.word	0x200182e0
 80153fc:	200182e8 	.word	0x200182e8
 8015400:	200182f0 	.word	0x200182f0
 8015404:	200182ec 	.word	0x200182ec
 8015408:	200182fc 	.word	0x200182fc

0801540c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801540c:	b480      	push	{r7}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015414:	4b28      	ldr	r3, [pc, #160]	; (80154b8 <prvInsertBlockIntoFreeList+0xac>)
 8015416:	60fb      	str	r3, [r7, #12]
 8015418:	e002      	b.n	8015420 <prvInsertBlockIntoFreeList+0x14>
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	60fb      	str	r3, [r7, #12]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	429a      	cmp	r2, r3
 8015428:	d8f7      	bhi.n	801541a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	68ba      	ldr	r2, [r7, #8]
 8015434:	4413      	add	r3, r2
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	429a      	cmp	r2, r3
 801543a:	d108      	bne.n	801544e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	685a      	ldr	r2, [r3, #4]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	441a      	add	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	68ba      	ldr	r2, [r7, #8]
 8015458:	441a      	add	r2, r3
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	429a      	cmp	r2, r3
 8015460:	d118      	bne.n	8015494 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	4b15      	ldr	r3, [pc, #84]	; (80154bc <prvInsertBlockIntoFreeList+0xb0>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	429a      	cmp	r2, r3
 801546c:	d00d      	beq.n	801548a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	685a      	ldr	r2, [r3, #4]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	441a      	add	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	601a      	str	r2, [r3, #0]
 8015488:	e008      	b.n	801549c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801548a:	4b0c      	ldr	r3, [pc, #48]	; (80154bc <prvInsertBlockIntoFreeList+0xb0>)
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e003      	b.n	801549c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801549c:	68fa      	ldr	r2, [r7, #12]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d002      	beq.n	80154aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154aa:	bf00      	nop
 80154ac:	3714      	adds	r7, #20
 80154ae:	46bd      	mov	sp, r7
 80154b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop
 80154b8:	200182e0 	.word	0x200182e0
 80154bc:	200182e8 	.word	0x200182e8

080154c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80154c0:	b480      	push	{r7}
 80154c2:	b083      	sub	sp, #12
 80154c4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80154c6:	4b24      	ldr	r3, [pc, #144]	; (8015558 <_DoInit+0x98>)
 80154c8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2203      	movs	r2, #3
 80154ce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2203      	movs	r2, #3
 80154d4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	4a20      	ldr	r2, [pc, #128]	; (801555c <_DoInit+0x9c>)
 80154da:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	4a20      	ldr	r2, [pc, #128]	; (8015560 <_DoInit+0xa0>)
 80154e0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154e8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2200      	movs	r2, #0
 80154ee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2200      	movs	r2, #0
 80154fa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	4a17      	ldr	r2, [pc, #92]	; (801555c <_DoInit+0x9c>)
 8015500:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	4a17      	ldr	r2, [pc, #92]	; (8015564 <_DoInit+0xa4>)
 8015506:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2210      	movs	r2, #16
 801550c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2200      	movs	r2, #0
 8015518:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2200      	movs	r2, #0
 801551e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3307      	adds	r3, #7
 8015524:	4a10      	ldr	r2, [pc, #64]	; (8015568 <_DoInit+0xa8>)
 8015526:	6810      	ldr	r0, [r2, #0]
 8015528:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801552a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	4a0e      	ldr	r2, [pc, #56]	; (801556c <_DoInit+0xac>)
 8015532:	6810      	ldr	r0, [r2, #0]
 8015534:	6018      	str	r0, [r3, #0]
 8015536:	8891      	ldrh	r1, [r2, #4]
 8015538:	7992      	ldrb	r2, [r2, #6]
 801553a:	8099      	strh	r1, [r3, #4]
 801553c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801553e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2220      	movs	r2, #32
 8015546:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8015548:	f3bf 8f5f 	dmb	sy
}
 801554c:	bf00      	nop
 801554e:	370c      	adds	r7, #12
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr
 8015558:	2001bc68 	.word	0x2001bc68
 801555c:	080188e0 	.word	0x080188e0
 8015560:	20018300 	.word	0x20018300
 8015564:	20018700 	.word	0x20018700
 8015568:	080188ec 	.word	0x080188ec
 801556c:	080188f0 	.word	0x080188f0

08015570 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8015570:	b580      	push	{r7, lr}
 8015572:	b08c      	sub	sp, #48	; 0x30
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 801557c:	4b3e      	ldr	r3, [pc, #248]	; (8015678 <SEGGER_RTT_ReadNoLock+0x108>)
 801557e:	623b      	str	r3, [r7, #32]
 8015580:	6a3b      	ldr	r3, [r7, #32]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	b2db      	uxtb	r3, r3
 8015586:	2b00      	cmp	r3, #0
 8015588:	d101      	bne.n	801558e <SEGGER_RTT_ReadNoLock+0x1e>
 801558a:	f7ff ff99 	bl	80154c0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	3360      	adds	r3, #96	; 0x60
 801559a:	4a37      	ldr	r2, [pc, #220]	; (8015678 <SEGGER_RTT_ReadNoLock+0x108>)
 801559c:	4413      	add	r3, r2
 801559e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	691b      	ldr	r3, [r3, #16]
 80155a8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80155b0:	2300      	movs	r3, #0
 80155b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80155b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d92b      	bls.n	8015614 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	689a      	ldr	r2, [r3, #8]
 80155c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80155c6:	697a      	ldr	r2, [r7, #20]
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4293      	cmp	r3, r2
 80155cc:	bf28      	it	cs
 80155ce:	4613      	movcs	r3, r2
 80155d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	685a      	ldr	r2, [r3, #4]
 80155d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d8:	4413      	add	r3, r2
 80155da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80155dc:	697a      	ldr	r2, [r7, #20]
 80155de:	6939      	ldr	r1, [r7, #16]
 80155e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155e2:	f001 fa9b 	bl	8016b1c <memcpy>
    NumBytesRead += NumBytesRem;
 80155e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	4413      	add	r3, r2
 80155ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80155ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	4413      	add	r3, r2
 80155f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80155f6:	687a      	ldr	r2, [r7, #4]
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	1ad3      	subs	r3, r2, r3
 80155fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80155fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	4413      	add	r3, r2
 8015604:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	689b      	ldr	r3, [r3, #8]
 801560a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801560c:	429a      	cmp	r2, r3
 801560e:	d101      	bne.n	8015614 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8015610:	2300      	movs	r3, #0
 8015612:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8015614:	69ba      	ldr	r2, [r7, #24]
 8015616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801561c:	697a      	ldr	r2, [r7, #20]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	4293      	cmp	r3, r2
 8015622:	bf28      	it	cs
 8015624:	4613      	movcs	r3, r2
 8015626:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d019      	beq.n	8015662 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	685a      	ldr	r2, [r3, #4]
 8015632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015634:	4413      	add	r3, r2
 8015636:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8015638:	697a      	ldr	r2, [r7, #20]
 801563a:	6939      	ldr	r1, [r7, #16]
 801563c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801563e:	f001 fa6d 	bl	8016b1c <memcpy>
    NumBytesRead += NumBytesRem;
 8015642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	4413      	add	r3, r2
 8015648:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	4413      	add	r3, r2
 8015650:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	1ad3      	subs	r3, r2, r3
 8015658:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801565a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	4413      	add	r3, r2
 8015660:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8015662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015664:	2b00      	cmp	r3, #0
 8015666:	d002      	beq.n	801566e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801566c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 801566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8015670:	4618      	mov	r0, r3
 8015672:	3730      	adds	r7, #48	; 0x30
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	2001bc68 	.word	0x2001bc68

0801567c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 801567c:	b580      	push	{r7, lr}
 801567e:	b088      	sub	sp, #32
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
 8015688:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 801568a:	4b3d      	ldr	r3, [pc, #244]	; (8015780 <SEGGER_RTT_AllocUpBuffer+0x104>)
 801568c:	61bb      	str	r3, [r7, #24]
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	b2db      	uxtb	r3, r3
 8015694:	2b00      	cmp	r3, #0
 8015696:	d101      	bne.n	801569c <SEGGER_RTT_AllocUpBuffer+0x20>
 8015698:	f7ff ff12 	bl	80154c0 <_DoInit>
  SEGGER_RTT_LOCK();
 801569c:	f3ef 8311 	mrs	r3, BASEPRI
 80156a0:	f04f 0120 	mov.w	r1, #32
 80156a4:	f381 8811 	msr	BASEPRI, r1
 80156a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80156aa:	4b35      	ldr	r3, [pc, #212]	; (8015780 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80156ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80156ae:	2300      	movs	r3, #0
 80156b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80156b2:	6939      	ldr	r1, [r7, #16]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	1c5a      	adds	r2, r3, #1
 80156b8:	4613      	mov	r3, r2
 80156ba:	005b      	lsls	r3, r3, #1
 80156bc:	4413      	add	r3, r2
 80156be:	00db      	lsls	r3, r3, #3
 80156c0:	440b      	add	r3, r1
 80156c2:	3304      	adds	r3, #4
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d008      	beq.n	80156dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	3301      	adds	r3, #1
 80156ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	691b      	ldr	r3, [r3, #16]
 80156d4:	69fa      	ldr	r2, [r7, #28]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	dbeb      	blt.n	80156b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80156da:	e000      	b.n	80156de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80156dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	691b      	ldr	r3, [r3, #16]
 80156e2:	69fa      	ldr	r2, [r7, #28]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	da3f      	bge.n	8015768 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80156e8:	6939      	ldr	r1, [r7, #16]
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	1c5a      	adds	r2, r3, #1
 80156ee:	4613      	mov	r3, r2
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	4413      	add	r3, r2
 80156f4:	00db      	lsls	r3, r3, #3
 80156f6:	440b      	add	r3, r1
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80156fc:	6939      	ldr	r1, [r7, #16]
 80156fe:	69fb      	ldr	r3, [r7, #28]
 8015700:	1c5a      	adds	r2, r3, #1
 8015702:	4613      	mov	r3, r2
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	4413      	add	r3, r2
 8015708:	00db      	lsls	r3, r3, #3
 801570a:	440b      	add	r3, r1
 801570c:	3304      	adds	r3, #4
 801570e:	68ba      	ldr	r2, [r7, #8]
 8015710:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8015712:	6939      	ldr	r1, [r7, #16]
 8015714:	69fa      	ldr	r2, [r7, #28]
 8015716:	4613      	mov	r3, r2
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	4413      	add	r3, r2
 801571c:	00db      	lsls	r3, r3, #3
 801571e:	440b      	add	r3, r1
 8015720:	3320      	adds	r3, #32
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8015726:	6939      	ldr	r1, [r7, #16]
 8015728:	69fa      	ldr	r2, [r7, #28]
 801572a:	4613      	mov	r3, r2
 801572c:	005b      	lsls	r3, r3, #1
 801572e:	4413      	add	r3, r2
 8015730:	00db      	lsls	r3, r3, #3
 8015732:	440b      	add	r3, r1
 8015734:	3328      	adds	r3, #40	; 0x28
 8015736:	2200      	movs	r2, #0
 8015738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 801573a:	6939      	ldr	r1, [r7, #16]
 801573c:	69fa      	ldr	r2, [r7, #28]
 801573e:	4613      	mov	r3, r2
 8015740:	005b      	lsls	r3, r3, #1
 8015742:	4413      	add	r3, r2
 8015744:	00db      	lsls	r3, r3, #3
 8015746:	440b      	add	r3, r1
 8015748:	3324      	adds	r3, #36	; 0x24
 801574a:	2200      	movs	r2, #0
 801574c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 801574e:	6939      	ldr	r1, [r7, #16]
 8015750:	69fa      	ldr	r2, [r7, #28]
 8015752:	4613      	mov	r3, r2
 8015754:	005b      	lsls	r3, r3, #1
 8015756:	4413      	add	r3, r2
 8015758:	00db      	lsls	r3, r3, #3
 801575a:	440b      	add	r3, r1
 801575c:	332c      	adds	r3, #44	; 0x2c
 801575e:	683a      	ldr	r2, [r7, #0]
 8015760:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8015762:	f3bf 8f5f 	dmb	sy
 8015766:	e002      	b.n	801576e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8015768:	f04f 33ff 	mov.w	r3, #4294967295
 801576c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8015774:	69fb      	ldr	r3, [r7, #28]
}
 8015776:	4618      	mov	r0, r3
 8015778:	3720      	adds	r7, #32
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	2001bc68 	.word	0x2001bc68

08015784 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8015784:	b580      	push	{r7, lr}
 8015786:	b08a      	sub	sp, #40	; 0x28
 8015788:	af00      	add	r7, sp, #0
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	607a      	str	r2, [r7, #4]
 8015790:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8015792:	4b21      	ldr	r3, [pc, #132]	; (8015818 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8015794:	623b      	str	r3, [r7, #32]
 8015796:	6a3b      	ldr	r3, [r7, #32]
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	b2db      	uxtb	r3, r3
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80157a0:	f7ff fe8e 	bl	80154c0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80157a4:	4b1c      	ldr	r3, [pc, #112]	; (8015818 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80157a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2b02      	cmp	r3, #2
 80157ac:	d82c      	bhi.n	8015808 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80157ae:	f3ef 8311 	mrs	r3, BASEPRI
 80157b2:	f04f 0120 	mov.w	r1, #32
 80157b6:	f381 8811 	msr	BASEPRI, r1
 80157ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80157bc:	68fa      	ldr	r2, [r7, #12]
 80157be:	4613      	mov	r3, r2
 80157c0:	005b      	lsls	r3, r3, #1
 80157c2:	4413      	add	r3, r2
 80157c4:	00db      	lsls	r3, r3, #3
 80157c6:	3360      	adds	r3, #96	; 0x60
 80157c8:	69fa      	ldr	r2, [r7, #28]
 80157ca:	4413      	add	r3, r2
 80157cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00e      	beq.n	80157f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	68ba      	ldr	r2, [r7, #8]
 80157d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	2200      	movs	r2, #0
 80157ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	2200      	movs	r2, #0
 80157f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80157f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80157fc:	69bb      	ldr	r3, [r7, #24]
 80157fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8015802:	2300      	movs	r3, #0
 8015804:	627b      	str	r3, [r7, #36]	; 0x24
 8015806:	e002      	b.n	801580e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8015808:	f04f 33ff 	mov.w	r3, #4294967295
 801580c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 801580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015810:	4618      	mov	r0, r3
 8015812:	3728      	adds	r7, #40	; 0x28
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	2001bc68 	.word	0x2001bc68

0801581c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 801581c:	b480      	push	{r7}
 801581e:	b087      	sub	sp, #28
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8015828:	2300      	movs	r3, #0
 801582a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00f      	beq.n	8015852 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8015832:	e002      	b.n	801583a <_EncodeStr+0x1e>
      Len++;
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	3301      	adds	r3, #1
 8015838:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 801583a:	68ba      	ldr	r2, [r7, #8]
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	4413      	add	r3, r2
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1f6      	bne.n	8015834 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8015846:	693a      	ldr	r2, [r7, #16]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	429a      	cmp	r2, r3
 801584c:	d901      	bls.n	8015852 <_EncodeStr+0x36>
      Len = Limit;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	2bfe      	cmp	r3, #254	; 0xfe
 8015856:	d806      	bhi.n	8015866 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	1c5a      	adds	r2, r3, #1
 801585c:	60fa      	str	r2, [r7, #12]
 801585e:	693a      	ldr	r2, [r7, #16]
 8015860:	b2d2      	uxtb	r2, r2
 8015862:	701a      	strb	r2, [r3, #0]
 8015864:	e011      	b.n	801588a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	1c5a      	adds	r2, r3, #1
 801586a:	60fa      	str	r2, [r7, #12]
 801586c:	22ff      	movs	r2, #255	; 0xff
 801586e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	60fa      	str	r2, [r7, #12]
 8015876:	693a      	ldr	r2, [r7, #16]
 8015878:	b2d2      	uxtb	r2, r2
 801587a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	0a19      	lsrs	r1, r3, #8
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	1c5a      	adds	r2, r3, #1
 8015884:	60fa      	str	r2, [r7, #12]
 8015886:	b2ca      	uxtb	r2, r1
 8015888:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 801588a:	2300      	movs	r3, #0
 801588c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 801588e:	e00a      	b.n	80158a6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8015890:	68ba      	ldr	r2, [r7, #8]
 8015892:	1c53      	adds	r3, r2, #1
 8015894:	60bb      	str	r3, [r7, #8]
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	1c59      	adds	r1, r3, #1
 801589a:	60f9      	str	r1, [r7, #12]
 801589c:	7812      	ldrb	r2, [r2, #0]
 801589e:	701a      	strb	r2, [r3, #0]
    n++;
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	3301      	adds	r3, #1
 80158a4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80158a6:	697a      	ldr	r2, [r7, #20]
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d3f0      	bcc.n	8015890 <_EncodeStr+0x74>
  }
  return pPayload;
 80158ae:	68fb      	ldr	r3, [r7, #12]
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	371c      	adds	r7, #28
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr

080158bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3304      	adds	r3, #4
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	370c      	adds	r7, #12
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr

080158d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80158da:	4b36      	ldr	r3, [pc, #216]	; (80159b4 <_HandleIncomingPacket+0xe0>)
 80158dc:	7e1b      	ldrb	r3, [r3, #24]
 80158de:	4618      	mov	r0, r3
 80158e0:	1cfb      	adds	r3, r7, #3
 80158e2:	2201      	movs	r2, #1
 80158e4:	4619      	mov	r1, r3
 80158e6:	f7ff fe43 	bl	8015570 <SEGGER_RTT_ReadNoLock>
 80158ea:	4603      	mov	r3, r0
 80158ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	dd54      	ble.n	801599e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80158f4:	78fb      	ldrb	r3, [r7, #3]
 80158f6:	2b80      	cmp	r3, #128	; 0x80
 80158f8:	d032      	beq.n	8015960 <_HandleIncomingPacket+0x8c>
 80158fa:	2b80      	cmp	r3, #128	; 0x80
 80158fc:	dc42      	bgt.n	8015984 <_HandleIncomingPacket+0xb0>
 80158fe:	2b07      	cmp	r3, #7
 8015900:	dc16      	bgt.n	8015930 <_HandleIncomingPacket+0x5c>
 8015902:	2b00      	cmp	r3, #0
 8015904:	dd3e      	ble.n	8015984 <_HandleIncomingPacket+0xb0>
 8015906:	3b01      	subs	r3, #1
 8015908:	2b06      	cmp	r3, #6
 801590a:	d83b      	bhi.n	8015984 <_HandleIncomingPacket+0xb0>
 801590c:	a201      	add	r2, pc, #4	; (adr r2, 8015914 <_HandleIncomingPacket+0x40>)
 801590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015912:	bf00      	nop
 8015914:	08015937 	.word	0x08015937
 8015918:	0801593d 	.word	0x0801593d
 801591c:	08015943 	.word	0x08015943
 8015920:	08015949 	.word	0x08015949
 8015924:	0801594f 	.word	0x0801594f
 8015928:	08015955 	.word	0x08015955
 801592c:	0801595b 	.word	0x0801595b
 8015930:	2b7f      	cmp	r3, #127	; 0x7f
 8015932:	d036      	beq.n	80159a2 <_HandleIncomingPacket+0xce>
 8015934:	e026      	b.n	8015984 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8015936:	f000 fba7 	bl	8016088 <SEGGER_SYSVIEW_Start>
      break;
 801593a:	e037      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801593c:	f000 fc5e 	bl	80161fc <SEGGER_SYSVIEW_Stop>
      break;
 8015940:	e034      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8015942:	f000 fe37 	bl	80165b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8015946:	e031      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8015948:	f000 fdfc 	bl	8016544 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801594c:	e02e      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801594e:	f000 fc7b 	bl	8016248 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8015952:	e02b      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8015954:	f000 fff0 	bl	8016938 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8015958:	e028      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801595a:	f000 ffcf 	bl	80168fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801595e:	e025      	b.n	80159ac <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8015960:	4b14      	ldr	r3, [pc, #80]	; (80159b4 <_HandleIncomingPacket+0xe0>)
 8015962:	7e1b      	ldrb	r3, [r3, #24]
 8015964:	4618      	mov	r0, r3
 8015966:	1cfb      	adds	r3, r7, #3
 8015968:	2201      	movs	r2, #1
 801596a:	4619      	mov	r1, r3
 801596c:	f7ff fe00 	bl	8015570 <SEGGER_RTT_ReadNoLock>
 8015970:	4603      	mov	r3, r0
 8015972:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2b00      	cmp	r3, #0
 8015978:	dd15      	ble.n	80159a6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 801597a:	78fb      	ldrb	r3, [r7, #3]
 801597c:	4618      	mov	r0, r3
 801597e:	f000 ff3d 	bl	80167fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8015982:	e010      	b.n	80159a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8015984:	78fb      	ldrb	r3, [r7, #3]
 8015986:	b25b      	sxtb	r3, r3
 8015988:	2b00      	cmp	r3, #0
 801598a:	da0e      	bge.n	80159aa <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801598c:	4b09      	ldr	r3, [pc, #36]	; (80159b4 <_HandleIncomingPacket+0xe0>)
 801598e:	7e1b      	ldrb	r3, [r3, #24]
 8015990:	4618      	mov	r0, r3
 8015992:	1cfb      	adds	r3, r7, #3
 8015994:	2201      	movs	r2, #1
 8015996:	4619      	mov	r1, r3
 8015998:	f7ff fdea 	bl	8015570 <SEGGER_RTT_ReadNoLock>
      }
      break;
 801599c:	e005      	b.n	80159aa <_HandleIncomingPacket+0xd6>
    }
  }
 801599e:	bf00      	nop
 80159a0:	e004      	b.n	80159ac <_HandleIncomingPacket+0xd8>
      break;
 80159a2:	bf00      	nop
 80159a4:	e002      	b.n	80159ac <_HandleIncomingPacket+0xd8>
      break;
 80159a6:	bf00      	nop
 80159a8:	e000      	b.n	80159ac <_HandleIncomingPacket+0xd8>
      break;
 80159aa:	bf00      	nop
}
 80159ac:	bf00      	nop
 80159ae:	3708      	adds	r7, #8
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	20018b18 	.word	0x20018b18

080159b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b08c      	sub	sp, #48	; 0x30
 80159bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80159be:	2301      	movs	r3, #1
 80159c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80159c2:	1d3b      	adds	r3, r7, #4
 80159c4:	3301      	adds	r3, #1
 80159c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159cc:	4b31      	ldr	r3, [pc, #196]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 80159ce:	695b      	ldr	r3, [r3, #20]
 80159d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80159d2:	e00b      	b.n	80159ec <_TrySendOverflowPacket+0x34>
 80159d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d6:	b2da      	uxtb	r2, r3
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	1c59      	adds	r1, r3, #1
 80159dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80159de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80159e2:	b2d2      	uxtb	r2, r2
 80159e4:	701a      	strb	r2, [r3, #0]
 80159e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e8:	09db      	lsrs	r3, r3, #7
 80159ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80159ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ee:	2b7f      	cmp	r3, #127	; 0x7f
 80159f0:	d8f0      	bhi.n	80159d4 <_TrySendOverflowPacket+0x1c>
 80159f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f4:	1c5a      	adds	r2, r3, #1
 80159f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80159f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159fa:	b2d2      	uxtb	r2, r2
 80159fc:	701a      	strb	r2, [r3, #0]
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015a02:	4b25      	ldr	r3, [pc, #148]	; (8015a98 <_TrySendOverflowPacket+0xe0>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8015a08:	4b22      	ldr	r3, [pc, #136]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	69ba      	ldr	r2, [r7, #24]
 8015a0e:	1ad3      	subs	r3, r2, r3
 8015a10:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	627b      	str	r3, [r7, #36]	; 0x24
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	623b      	str	r3, [r7, #32]
 8015a1a:	e00b      	b.n	8015a34 <_TrySendOverflowPacket+0x7c>
 8015a1c:	6a3b      	ldr	r3, [r7, #32]
 8015a1e:	b2da      	uxtb	r2, r3
 8015a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a22:	1c59      	adds	r1, r3, #1
 8015a24:	6279      	str	r1, [r7, #36]	; 0x24
 8015a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015a2a:	b2d2      	uxtb	r2, r2
 8015a2c:	701a      	strb	r2, [r3, #0]
 8015a2e:	6a3b      	ldr	r3, [r7, #32]
 8015a30:	09db      	lsrs	r3, r3, #7
 8015a32:	623b      	str	r3, [r7, #32]
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	2b7f      	cmp	r3, #127	; 0x7f
 8015a38:	d8f0      	bhi.n	8015a1c <_TrySendOverflowPacket+0x64>
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3c:	1c5a      	adds	r2, r3, #1
 8015a3e:	627a      	str	r2, [r7, #36]	; 0x24
 8015a40:	6a3a      	ldr	r2, [r7, #32]
 8015a42:	b2d2      	uxtb	r2, r2
 8015a44:	701a      	strb	r2, [r3, #0]
 8015a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a48:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8015a4a:	4b12      	ldr	r3, [pc, #72]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a4c:	785b      	ldrb	r3, [r3, #1]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	1d3b      	adds	r3, r7, #4
 8015a52:	69fa      	ldr	r2, [r7, #28]
 8015a54:	1ad3      	subs	r3, r2, r3
 8015a56:	461a      	mov	r2, r3
 8015a58:	1d3b      	adds	r3, r7, #4
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	f7ea fbb8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8015a60:	4603      	mov	r3, r0
 8015a62:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d009      	beq.n	8015a7e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8015a6a:	4a0a      	ldr	r2, [pc, #40]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8015a70:	4b08      	ldr	r3, [pc, #32]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	3b01      	subs	r3, #1
 8015a76:	b2da      	uxtb	r2, r3
 8015a78:	4b06      	ldr	r3, [pc, #24]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a7a:	701a      	strb	r2, [r3, #0]
 8015a7c:	e004      	b.n	8015a88 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8015a7e:	4b05      	ldr	r3, [pc, #20]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a80:	695b      	ldr	r3, [r3, #20]
 8015a82:	3301      	adds	r3, #1
 8015a84:	4a03      	ldr	r2, [pc, #12]	; (8015a94 <_TrySendOverflowPacket+0xdc>)
 8015a86:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8015a88:	693b      	ldr	r3, [r7, #16]
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3730      	adds	r7, #48	; 0x30
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	20018b18 	.word	0x20018b18
 8015a98:	e0001004 	.word	0xe0001004

08015a9c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b08a      	sub	sp, #40	; 0x28
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8015aa8:	4b6c      	ldr	r3, [pc, #432]	; (8015c5c <_SendPacket+0x1c0>)
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	2b01      	cmp	r3, #1
 8015aae:	d010      	beq.n	8015ad2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8015ab0:	4b6a      	ldr	r3, [pc, #424]	; (8015c5c <_SendPacket+0x1c0>)
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	f000 80a3 	beq.w	8015c00 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8015aba:	4b68      	ldr	r3, [pc, #416]	; (8015c5c <_SendPacket+0x1c0>)
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d109      	bne.n	8015ad6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8015ac2:	f7ff ff79 	bl	80159b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8015ac6:	4b65      	ldr	r3, [pc, #404]	; (8015c5c <_SendPacket+0x1c0>)
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	f040 809a 	bne.w	8015c04 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8015ad0:	e001      	b.n	8015ad6 <_SendPacket+0x3a>
    goto Send;
 8015ad2:	bf00      	nop
 8015ad4:	e000      	b.n	8015ad8 <_SendPacket+0x3c>
Send:
 8015ad6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b1f      	cmp	r3, #31
 8015adc:	d809      	bhi.n	8015af2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8015ade:	4b5f      	ldr	r3, [pc, #380]	; (8015c5c <_SendPacket+0x1c0>)
 8015ae0:	69da      	ldr	r2, [r3, #28]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8015ae8:	f003 0301 	and.w	r3, r3, #1
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f040 808b 	bne.w	8015c08 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2b17      	cmp	r3, #23
 8015af6:	d807      	bhi.n	8015b08 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	3b01      	subs	r3, #1
 8015afc:	60fb      	str	r3, [r7, #12]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	b2da      	uxtb	r2, r3
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	701a      	strb	r2, [r3, #0]
 8015b06:	e03d      	b.n	8015b84 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	2b7f      	cmp	r3, #127	; 0x7f
 8015b14:	d912      	bls.n	8015b3c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	09da      	lsrs	r2, r3, #7
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	3b01      	subs	r3, #1
 8015b1e:	60fb      	str	r3, [r7, #12]
 8015b20:	b2d2      	uxtb	r2, r2
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8015b26:	69fb      	ldr	r3, [r7, #28]
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	3a01      	subs	r2, #1
 8015b2e:	60fa      	str	r2, [r7, #12]
 8015b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	701a      	strb	r2, [r3, #0]
 8015b3a:	e006      	b.n	8015b4a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	60fb      	str	r3, [r7, #12]
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	b2da      	uxtb	r2, r3
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8015b4e:	d912      	bls.n	8015b76 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	09da      	lsrs	r2, r3, #7
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3b01      	subs	r3, #1
 8015b58:	60fb      	str	r3, [r7, #12]
 8015b5a:	b2d2      	uxtb	r2, r2
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	3a01      	subs	r2, #1
 8015b68:	60fa      	str	r2, [r7, #12]
 8015b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	701a      	strb	r2, [r3, #0]
 8015b74:	e006      	b.n	8015b84 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	3b01      	subs	r3, #1
 8015b7a:	60fb      	str	r3, [r7, #12]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	b2da      	uxtb	r2, r3
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015b84:	4b36      	ldr	r3, [pc, #216]	; (8015c60 <_SendPacket+0x1c4>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8015b8a:	4b34      	ldr	r3, [pc, #208]	; (8015c5c <_SendPacket+0x1c0>)
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	69ba      	ldr	r2, [r7, #24]
 8015b90:	1ad3      	subs	r3, r2, r3
 8015b92:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	627b      	str	r3, [r7, #36]	; 0x24
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	623b      	str	r3, [r7, #32]
 8015b9c:	e00b      	b.n	8015bb6 <_SendPacket+0x11a>
 8015b9e:	6a3b      	ldr	r3, [r7, #32]
 8015ba0:	b2da      	uxtb	r2, r3
 8015ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba4:	1c59      	adds	r1, r3, #1
 8015ba6:	6279      	str	r1, [r7, #36]	; 0x24
 8015ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015bac:	b2d2      	uxtb	r2, r2
 8015bae:	701a      	strb	r2, [r3, #0]
 8015bb0:	6a3b      	ldr	r3, [r7, #32]
 8015bb2:	09db      	lsrs	r3, r3, #7
 8015bb4:	623b      	str	r3, [r7, #32]
 8015bb6:	6a3b      	ldr	r3, [r7, #32]
 8015bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8015bba:	d8f0      	bhi.n	8015b9e <_SendPacket+0x102>
 8015bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbe:	1c5a      	adds	r2, r3, #1
 8015bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8015bc2:	6a3a      	ldr	r2, [r7, #32]
 8015bc4:	b2d2      	uxtb	r2, r2
 8015bc6:	701a      	strb	r2, [r3, #0]
 8015bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8015bcc:	4b23      	ldr	r3, [pc, #140]	; (8015c5c <_SendPacket+0x1c0>)
 8015bce:	785b      	ldrb	r3, [r3, #1]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	68ba      	ldr	r2, [r7, #8]
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	461a      	mov	r2, r3
 8015bda:	68f9      	ldr	r1, [r7, #12]
 8015bdc:	f7ea faf8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8015be0:	4603      	mov	r3, r0
 8015be2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d003      	beq.n	8015bf2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8015bea:	4a1c      	ldr	r2, [pc, #112]	; (8015c5c <_SendPacket+0x1c0>)
 8015bec:	69bb      	ldr	r3, [r7, #24]
 8015bee:	60d3      	str	r3, [r2, #12]
 8015bf0:	e00b      	b.n	8015c0a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8015bf2:	4b1a      	ldr	r3, [pc, #104]	; (8015c5c <_SendPacket+0x1c0>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	b2da      	uxtb	r2, r3
 8015bfa:	4b18      	ldr	r3, [pc, #96]	; (8015c5c <_SendPacket+0x1c0>)
 8015bfc:	701a      	strb	r2, [r3, #0]
 8015bfe:	e004      	b.n	8015c0a <_SendPacket+0x16e>
    goto SendDone;
 8015c00:	bf00      	nop
 8015c02:	e002      	b.n	8015c0a <_SendPacket+0x16e>
      goto SendDone;
 8015c04:	bf00      	nop
 8015c06:	e000      	b.n	8015c0a <_SendPacket+0x16e>
      goto SendDone;
 8015c08:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8015c0a:	4b14      	ldr	r3, [pc, #80]	; (8015c5c <_SendPacket+0x1c0>)
 8015c0c:	7e1b      	ldrb	r3, [r3, #24]
 8015c0e:	4619      	mov	r1, r3
 8015c10:	4a14      	ldr	r2, [pc, #80]	; (8015c64 <_SendPacket+0x1c8>)
 8015c12:	460b      	mov	r3, r1
 8015c14:	005b      	lsls	r3, r3, #1
 8015c16:	440b      	add	r3, r1
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	4413      	add	r3, r2
 8015c1c:	336c      	adds	r3, #108	; 0x6c
 8015c1e:	681a      	ldr	r2, [r3, #0]
 8015c20:	4b0e      	ldr	r3, [pc, #56]	; (8015c5c <_SendPacket+0x1c0>)
 8015c22:	7e1b      	ldrb	r3, [r3, #24]
 8015c24:	4618      	mov	r0, r3
 8015c26:	490f      	ldr	r1, [pc, #60]	; (8015c64 <_SendPacket+0x1c8>)
 8015c28:	4603      	mov	r3, r0
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	4403      	add	r3, r0
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	440b      	add	r3, r1
 8015c32:	3370      	adds	r3, #112	; 0x70
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d00b      	beq.n	8015c52 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8015c3a:	4b08      	ldr	r3, [pc, #32]	; (8015c5c <_SendPacket+0x1c0>)
 8015c3c:	789b      	ldrb	r3, [r3, #2]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d107      	bne.n	8015c52 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8015c42:	4b06      	ldr	r3, [pc, #24]	; (8015c5c <_SendPacket+0x1c0>)
 8015c44:	2201      	movs	r2, #1
 8015c46:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8015c48:	f7ff fe44 	bl	80158d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8015c4c:	4b03      	ldr	r3, [pc, #12]	; (8015c5c <_SendPacket+0x1c0>)
 8015c4e:	2200      	movs	r2, #0
 8015c50:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8015c52:	bf00      	nop
 8015c54:	3728      	adds	r7, #40	; 0x28
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	20018b18 	.word	0x20018b18
 8015c60:	e0001004 	.word	0xe0001004
 8015c64:	2001bc68 	.word	0x2001bc68

08015c68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b086      	sub	sp, #24
 8015c6c:	af02      	add	r7, sp, #8
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	607a      	str	r2, [r7, #4]
 8015c74:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8015c76:	2300      	movs	r3, #0
 8015c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015c7c:	4917      	ldr	r1, [pc, #92]	; (8015cdc <SEGGER_SYSVIEW_Init+0x74>)
 8015c7e:	4818      	ldr	r0, [pc, #96]	; (8015ce0 <SEGGER_SYSVIEW_Init+0x78>)
 8015c80:	f7ff fcfc 	bl	801567c <SEGGER_RTT_AllocUpBuffer>
 8015c84:	4603      	mov	r3, r0
 8015c86:	b2da      	uxtb	r2, r3
 8015c88:	4b16      	ldr	r3, [pc, #88]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015c8a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8015c8c:	4b15      	ldr	r3, [pc, #84]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015c8e:	785a      	ldrb	r2, [r3, #1]
 8015c90:	4b14      	ldr	r3, [pc, #80]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015c92:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8015c94:	4b13      	ldr	r3, [pc, #76]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015c96:	7e1b      	ldrb	r3, [r3, #24]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	9300      	str	r3, [sp, #0]
 8015c9e:	2308      	movs	r3, #8
 8015ca0:	4a11      	ldr	r2, [pc, #68]	; (8015ce8 <SEGGER_SYSVIEW_Init+0x80>)
 8015ca2:	490f      	ldr	r1, [pc, #60]	; (8015ce0 <SEGGER_SYSVIEW_Init+0x78>)
 8015ca4:	f7ff fd6e 	bl	8015784 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8015ca8:	4b0e      	ldr	r3, [pc, #56]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015caa:	2200      	movs	r2, #0
 8015cac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8015cae:	4b0f      	ldr	r3, [pc, #60]	; (8015cec <SEGGER_SYSVIEW_Init+0x84>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	4a0c      	ldr	r2, [pc, #48]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cb4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8015cb6:	4a0b      	ldr	r2, [pc, #44]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8015cbc:	4a09      	ldr	r2, [pc, #36]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8015cc2:	4a08      	ldr	r2, [pc, #32]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8015cc8:	4a06      	ldr	r2, [pc, #24]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8015cce:	4b05      	ldr	r3, [pc, #20]	; (8015ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8015cd4:	bf00      	nop
 8015cd6:	3710      	adds	r7, #16
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	20018710 	.word	0x20018710
 8015ce0:	080188f8 	.word	0x080188f8
 8015ce4:	20018b18 	.word	0x20018b18
 8015ce8:	20018b10 	.word	0x20018b10
 8015cec:	e0001004 	.word	0xe0001004

08015cf0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8015cf8:	4a04      	ldr	r2, [pc, #16]	; (8015d0c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6113      	str	r3, [r2, #16]
}
 8015cfe:	bf00      	nop
 8015d00:	370c      	adds	r7, #12
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	20018b18 	.word	0x20018b18

08015d10 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8015d18:	f3ef 8311 	mrs	r3, BASEPRI
 8015d1c:	f04f 0120 	mov.w	r1, #32
 8015d20:	f381 8811 	msr	BASEPRI, r1
 8015d24:	60fb      	str	r3, [r7, #12]
 8015d26:	4808      	ldr	r0, [pc, #32]	; (8015d48 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8015d28:	f7ff fdc8 	bl	80158bc <_PreparePacket>
 8015d2c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	68b9      	ldr	r1, [r7, #8]
 8015d32:	68b8      	ldr	r0, [r7, #8]
 8015d34:	f7ff feb2 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f383 8811 	msr	BASEPRI, r3
}
 8015d3e:	bf00      	nop
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20018b48 	.word	0x20018b48

08015d4c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b088      	sub	sp, #32
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8015d56:	f3ef 8311 	mrs	r3, BASEPRI
 8015d5a:	f04f 0120 	mov.w	r1, #32
 8015d5e:	f381 8811 	msr	BASEPRI, r1
 8015d62:	617b      	str	r3, [r7, #20]
 8015d64:	4816      	ldr	r0, [pc, #88]	; (8015dc0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8015d66:	f7ff fda9 	bl	80158bc <_PreparePacket>
 8015d6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	61fb      	str	r3, [r7, #28]
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	61bb      	str	r3, [r7, #24]
 8015d78:	e00b      	b.n	8015d92 <SEGGER_SYSVIEW_RecordU32+0x46>
 8015d7a:	69bb      	ldr	r3, [r7, #24]
 8015d7c:	b2da      	uxtb	r2, r3
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	1c59      	adds	r1, r3, #1
 8015d82:	61f9      	str	r1, [r7, #28]
 8015d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015d88:	b2d2      	uxtb	r2, r2
 8015d8a:	701a      	strb	r2, [r3, #0]
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	09db      	lsrs	r3, r3, #7
 8015d90:	61bb      	str	r3, [r7, #24]
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	2b7f      	cmp	r3, #127	; 0x7f
 8015d96:	d8f0      	bhi.n	8015d7a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	1c5a      	adds	r2, r3, #1
 8015d9c:	61fa      	str	r2, [r7, #28]
 8015d9e:	69ba      	ldr	r2, [r7, #24]
 8015da0:	b2d2      	uxtb	r2, r2
 8015da2:	701a      	strb	r2, [r3, #0]
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	68f9      	ldr	r1, [r7, #12]
 8015dac:	6938      	ldr	r0, [r7, #16]
 8015dae:	f7ff fe75 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	f383 8811 	msr	BASEPRI, r3
}
 8015db8:	bf00      	nop
 8015dba:	3720      	adds	r7, #32
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	20018b48 	.word	0x20018b48

08015dc4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b08c      	sub	sp, #48	; 0x30
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8015dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8015dd4:	f04f 0120 	mov.w	r1, #32
 8015dd8:	f381 8811 	msr	BASEPRI, r1
 8015ddc:	61fb      	str	r3, [r7, #28]
 8015dde:	4825      	ldr	r0, [pc, #148]	; (8015e74 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8015de0:	f7ff fd6c 	bl	80158bc <_PreparePacket>
 8015de4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015df2:	e00b      	b.n	8015e0c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8015df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df6:	b2da      	uxtb	r2, r3
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	1c59      	adds	r1, r3, #1
 8015dfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015e02:	b2d2      	uxtb	r2, r2
 8015e04:	701a      	strb	r2, [r3, #0]
 8015e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e08:	09db      	lsrs	r3, r3, #7
 8015e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e10:	d8f0      	bhi.n	8015df4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8015e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e14:	1c5a      	adds	r2, r3, #1
 8015e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e1a:	b2d2      	uxtb	r2, r2
 8015e1c:	701a      	strb	r2, [r3, #0]
 8015e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	627b      	str	r3, [r7, #36]	; 0x24
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	623b      	str	r3, [r7, #32]
 8015e2a:	e00b      	b.n	8015e44 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8015e2c:	6a3b      	ldr	r3, [r7, #32]
 8015e2e:	b2da      	uxtb	r2, r3
 8015e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e32:	1c59      	adds	r1, r3, #1
 8015e34:	6279      	str	r1, [r7, #36]	; 0x24
 8015e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015e3a:	b2d2      	uxtb	r2, r2
 8015e3c:	701a      	strb	r2, [r3, #0]
 8015e3e:	6a3b      	ldr	r3, [r7, #32]
 8015e40:	09db      	lsrs	r3, r3, #7
 8015e42:	623b      	str	r3, [r7, #32]
 8015e44:	6a3b      	ldr	r3, [r7, #32]
 8015e46:	2b7f      	cmp	r3, #127	; 0x7f
 8015e48:	d8f0      	bhi.n	8015e2c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8015e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4c:	1c5a      	adds	r2, r3, #1
 8015e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8015e50:	6a3a      	ldr	r2, [r7, #32]
 8015e52:	b2d2      	uxtb	r2, r2
 8015e54:	701a      	strb	r2, [r3, #0]
 8015e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e58:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015e5a:	68fa      	ldr	r2, [r7, #12]
 8015e5c:	6979      	ldr	r1, [r7, #20]
 8015e5e:	69b8      	ldr	r0, [r7, #24]
 8015e60:	f7ff fe1c 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8015e64:	69fb      	ldr	r3, [r7, #28]
 8015e66:	f383 8811 	msr	BASEPRI, r3
}
 8015e6a:	bf00      	nop
 8015e6c:	3730      	adds	r7, #48	; 0x30
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20018b48 	.word	0x20018b48

08015e78 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b08e      	sub	sp, #56	; 0x38
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8015e86:	f3ef 8311 	mrs	r3, BASEPRI
 8015e8a:	f04f 0120 	mov.w	r1, #32
 8015e8e:	f381 8811 	msr	BASEPRI, r1
 8015e92:	61fb      	str	r3, [r7, #28]
 8015e94:	4832      	ldr	r0, [pc, #200]	; (8015f60 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8015e96:	f7ff fd11 	bl	80158bc <_PreparePacket>
 8015e9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8015ea8:	e00b      	b.n	8015ec2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8015eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eb0:	1c59      	adds	r1, r3, #1
 8015eb2:	6379      	str	r1, [r7, #52]	; 0x34
 8015eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015eb8:	b2d2      	uxtb	r2, r2
 8015eba:	701a      	strb	r2, [r3, #0]
 8015ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ebe:	09db      	lsrs	r3, r3, #7
 8015ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8015ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8015ec6:	d8f0      	bhi.n	8015eaa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8015ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eca:	1c5a      	adds	r2, r3, #1
 8015ecc:	637a      	str	r2, [r7, #52]	; 0x34
 8015ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ed0:	b2d2      	uxtb	r2, r2
 8015ed2:	701a      	strb	r2, [r3, #0]
 8015ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ed6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ee0:	e00b      	b.n	8015efa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8015ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee4:	b2da      	uxtb	r2, r3
 8015ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee8:	1c59      	adds	r1, r3, #1
 8015eea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015ef0:	b2d2      	uxtb	r2, r2
 8015ef2:	701a      	strb	r2, [r3, #0]
 8015ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef6:	09db      	lsrs	r3, r3, #7
 8015ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015efc:	2b7f      	cmp	r3, #127	; 0x7f
 8015efe:	d8f0      	bhi.n	8015ee2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8015f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f02:	1c5a      	adds	r2, r3, #1
 8015f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f08:	b2d2      	uxtb	r2, r2
 8015f0a:	701a      	strb	r2, [r3, #0]
 8015f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	627b      	str	r3, [r7, #36]	; 0x24
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	623b      	str	r3, [r7, #32]
 8015f18:	e00b      	b.n	8015f32 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8015f1a:	6a3b      	ldr	r3, [r7, #32]
 8015f1c:	b2da      	uxtb	r2, r3
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f20:	1c59      	adds	r1, r3, #1
 8015f22:	6279      	str	r1, [r7, #36]	; 0x24
 8015f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015f28:	b2d2      	uxtb	r2, r2
 8015f2a:	701a      	strb	r2, [r3, #0]
 8015f2c:	6a3b      	ldr	r3, [r7, #32]
 8015f2e:	09db      	lsrs	r3, r3, #7
 8015f30:	623b      	str	r3, [r7, #32]
 8015f32:	6a3b      	ldr	r3, [r7, #32]
 8015f34:	2b7f      	cmp	r3, #127	; 0x7f
 8015f36:	d8f0      	bhi.n	8015f1a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8015f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3a:	1c5a      	adds	r2, r3, #1
 8015f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8015f3e:	6a3a      	ldr	r2, [r7, #32]
 8015f40:	b2d2      	uxtb	r2, r2
 8015f42:	701a      	strb	r2, [r3, #0]
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8015f48:	68fa      	ldr	r2, [r7, #12]
 8015f4a:	6979      	ldr	r1, [r7, #20]
 8015f4c:	69b8      	ldr	r0, [r7, #24]
 8015f4e:	f7ff fda5 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	f383 8811 	msr	BASEPRI, r3
}
 8015f58:	bf00      	nop
 8015f5a:	3738      	adds	r7, #56	; 0x38
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	20018b48 	.word	0x20018b48

08015f64 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b090      	sub	sp, #64	; 0x40
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	607a      	str	r2, [r7, #4]
 8015f70:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8015f72:	f3ef 8311 	mrs	r3, BASEPRI
 8015f76:	f04f 0120 	mov.w	r1, #32
 8015f7a:	f381 8811 	msr	BASEPRI, r1
 8015f7e:	61fb      	str	r3, [r7, #28]
 8015f80:	4840      	ldr	r0, [pc, #256]	; (8016084 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8015f82:	f7ff fc9b 	bl	80158bc <_PreparePacket>
 8015f86:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f94:	e00b      	b.n	8015fae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8015f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f98:	b2da      	uxtb	r2, r3
 8015f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f9c:	1c59      	adds	r1, r3, #1
 8015f9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8015fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015fa4:	b2d2      	uxtb	r2, r2
 8015fa6:	701a      	strb	r2, [r3, #0]
 8015fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015faa:	09db      	lsrs	r3, r3, #7
 8015fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8015fb2:	d8f0      	bhi.n	8015f96 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8015fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fb6:	1c5a      	adds	r2, r3, #1
 8015fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fbc:	b2d2      	uxtb	r2, r2
 8015fbe:	701a      	strb	r2, [r3, #0]
 8015fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	633b      	str	r3, [r7, #48]	; 0x30
 8015fcc:	e00b      	b.n	8015fe6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8015fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fd4:	1c59      	adds	r1, r3, #1
 8015fd6:	6379      	str	r1, [r7, #52]	; 0x34
 8015fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015fdc:	b2d2      	uxtb	r2, r2
 8015fde:	701a      	strb	r2, [r3, #0]
 8015fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe2:	09db      	lsrs	r3, r3, #7
 8015fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8015fea:	d8f0      	bhi.n	8015fce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8015fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fee:	1c5a      	adds	r2, r3, #1
 8015ff0:	637a      	str	r2, [r7, #52]	; 0x34
 8015ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ff4:	b2d2      	uxtb	r2, r2
 8015ff6:	701a      	strb	r2, [r3, #0]
 8015ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ffa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	62bb      	str	r3, [r7, #40]	; 0x28
 8016004:	e00b      	b.n	801601e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8016006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016008:	b2da      	uxtb	r2, r3
 801600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600c:	1c59      	adds	r1, r3, #1
 801600e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016014:	b2d2      	uxtb	r2, r2
 8016016:	701a      	strb	r2, [r3, #0]
 8016018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601a:	09db      	lsrs	r3, r3, #7
 801601c:	62bb      	str	r3, [r7, #40]	; 0x28
 801601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016020:	2b7f      	cmp	r3, #127	; 0x7f
 8016022:	d8f0      	bhi.n	8016006 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8016024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016026:	1c5a      	adds	r2, r3, #1
 8016028:	62fa      	str	r2, [r7, #44]	; 0x2c
 801602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801602c:	b2d2      	uxtb	r2, r2
 801602e:	701a      	strb	r2, [r3, #0]
 8016030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016032:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	627b      	str	r3, [r7, #36]	; 0x24
 8016038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801603a:	623b      	str	r3, [r7, #32]
 801603c:	e00b      	b.n	8016056 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801603e:	6a3b      	ldr	r3, [r7, #32]
 8016040:	b2da      	uxtb	r2, r3
 8016042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016044:	1c59      	adds	r1, r3, #1
 8016046:	6279      	str	r1, [r7, #36]	; 0x24
 8016048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801604c:	b2d2      	uxtb	r2, r2
 801604e:	701a      	strb	r2, [r3, #0]
 8016050:	6a3b      	ldr	r3, [r7, #32]
 8016052:	09db      	lsrs	r3, r3, #7
 8016054:	623b      	str	r3, [r7, #32]
 8016056:	6a3b      	ldr	r3, [r7, #32]
 8016058:	2b7f      	cmp	r3, #127	; 0x7f
 801605a:	d8f0      	bhi.n	801603e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	627a      	str	r2, [r7, #36]	; 0x24
 8016062:	6a3a      	ldr	r2, [r7, #32]
 8016064:	b2d2      	uxtb	r2, r2
 8016066:	701a      	strb	r2, [r3, #0]
 8016068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801606a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	6979      	ldr	r1, [r7, #20]
 8016070:	69b8      	ldr	r0, [r7, #24]
 8016072:	f7ff fd13 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8016076:	69fb      	ldr	r3, [r7, #28]
 8016078:	f383 8811 	msr	BASEPRI, r3
}
 801607c:	bf00      	nop
 801607e:	3740      	adds	r7, #64	; 0x40
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	20018b48 	.word	0x20018b48

08016088 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8016088:	b580      	push	{r7, lr}
 801608a:	b08c      	sub	sp, #48	; 0x30
 801608c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801608e:	4b58      	ldr	r3, [pc, #352]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 8016090:	2201      	movs	r2, #1
 8016092:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8016094:	f3ef 8311 	mrs	r3, BASEPRI
 8016098:	f04f 0120 	mov.w	r1, #32
 801609c:	f381 8811 	msr	BASEPRI, r1
 80160a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80160a2:	4b53      	ldr	r3, [pc, #332]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 80160a4:	785b      	ldrb	r3, [r3, #1]
 80160a6:	220a      	movs	r2, #10
 80160a8:	4952      	ldr	r1, [pc, #328]	; (80161f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7ea f890 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80160b6:	200a      	movs	r0, #10
 80160b8:	f7ff fe2a 	bl	8015d10 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80160bc:	f3ef 8311 	mrs	r3, BASEPRI
 80160c0:	f04f 0120 	mov.w	r1, #32
 80160c4:	f381 8811 	msr	BASEPRI, r1
 80160c8:	60bb      	str	r3, [r7, #8]
 80160ca:	484b      	ldr	r0, [pc, #300]	; (80161f8 <SEGGER_SYSVIEW_Start+0x170>)
 80160cc:	f7ff fbf6 	bl	80158bc <_PreparePacket>
 80160d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160da:	4b45      	ldr	r3, [pc, #276]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	62bb      	str	r3, [r7, #40]	; 0x28
 80160e0:	e00b      	b.n	80160fa <SEGGER_SYSVIEW_Start+0x72>
 80160e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e4:	b2da      	uxtb	r2, r3
 80160e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e8:	1c59      	adds	r1, r3, #1
 80160ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80160ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80160f0:	b2d2      	uxtb	r2, r2
 80160f2:	701a      	strb	r2, [r3, #0]
 80160f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f6:	09db      	lsrs	r3, r3, #7
 80160f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80160fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fc:	2b7f      	cmp	r3, #127	; 0x7f
 80160fe:	d8f0      	bhi.n	80160e2 <SEGGER_SYSVIEW_Start+0x5a>
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	1c5a      	adds	r2, r3, #1
 8016104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016108:	b2d2      	uxtb	r2, r2
 801610a:	701a      	strb	r2, [r3, #0]
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	627b      	str	r3, [r7, #36]	; 0x24
 8016114:	4b36      	ldr	r3, [pc, #216]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 8016116:	689b      	ldr	r3, [r3, #8]
 8016118:	623b      	str	r3, [r7, #32]
 801611a:	e00b      	b.n	8016134 <SEGGER_SYSVIEW_Start+0xac>
 801611c:	6a3b      	ldr	r3, [r7, #32]
 801611e:	b2da      	uxtb	r2, r3
 8016120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016122:	1c59      	adds	r1, r3, #1
 8016124:	6279      	str	r1, [r7, #36]	; 0x24
 8016126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801612a:	b2d2      	uxtb	r2, r2
 801612c:	701a      	strb	r2, [r3, #0]
 801612e:	6a3b      	ldr	r3, [r7, #32]
 8016130:	09db      	lsrs	r3, r3, #7
 8016132:	623b      	str	r3, [r7, #32]
 8016134:	6a3b      	ldr	r3, [r7, #32]
 8016136:	2b7f      	cmp	r3, #127	; 0x7f
 8016138:	d8f0      	bhi.n	801611c <SEGGER_SYSVIEW_Start+0x94>
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	1c5a      	adds	r2, r3, #1
 801613e:	627a      	str	r2, [r7, #36]	; 0x24
 8016140:	6a3a      	ldr	r2, [r7, #32]
 8016142:	b2d2      	uxtb	r2, r2
 8016144:	701a      	strb	r2, [r3, #0]
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	61fb      	str	r3, [r7, #28]
 801614e:	4b28      	ldr	r3, [pc, #160]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 8016150:	691b      	ldr	r3, [r3, #16]
 8016152:	61bb      	str	r3, [r7, #24]
 8016154:	e00b      	b.n	801616e <SEGGER_SYSVIEW_Start+0xe6>
 8016156:	69bb      	ldr	r3, [r7, #24]
 8016158:	b2da      	uxtb	r2, r3
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	1c59      	adds	r1, r3, #1
 801615e:	61f9      	str	r1, [r7, #28]
 8016160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016164:	b2d2      	uxtb	r2, r2
 8016166:	701a      	strb	r2, [r3, #0]
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	09db      	lsrs	r3, r3, #7
 801616c:	61bb      	str	r3, [r7, #24]
 801616e:	69bb      	ldr	r3, [r7, #24]
 8016170:	2b7f      	cmp	r3, #127	; 0x7f
 8016172:	d8f0      	bhi.n	8016156 <SEGGER_SYSVIEW_Start+0xce>
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	1c5a      	adds	r2, r3, #1
 8016178:	61fa      	str	r2, [r7, #28]
 801617a:	69ba      	ldr	r2, [r7, #24]
 801617c:	b2d2      	uxtb	r2, r2
 801617e:	701a      	strb	r2, [r3, #0]
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	617b      	str	r3, [r7, #20]
 8016188:	2300      	movs	r3, #0
 801618a:	613b      	str	r3, [r7, #16]
 801618c:	e00b      	b.n	80161a6 <SEGGER_SYSVIEW_Start+0x11e>
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	b2da      	uxtb	r2, r3
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	1c59      	adds	r1, r3, #1
 8016196:	6179      	str	r1, [r7, #20]
 8016198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801619c:	b2d2      	uxtb	r2, r2
 801619e:	701a      	strb	r2, [r3, #0]
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	09db      	lsrs	r3, r3, #7
 80161a4:	613b      	str	r3, [r7, #16]
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	2b7f      	cmp	r3, #127	; 0x7f
 80161aa:	d8f0      	bhi.n	801618e <SEGGER_SYSVIEW_Start+0x106>
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	1c5a      	adds	r2, r3, #1
 80161b0:	617a      	str	r2, [r7, #20]
 80161b2:	693a      	ldr	r2, [r7, #16]
 80161b4:	b2d2      	uxtb	r2, r2
 80161b6:	701a      	strb	r2, [r3, #0]
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80161bc:	2218      	movs	r2, #24
 80161be:	6839      	ldr	r1, [r7, #0]
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f7ff fc6b 	bl	8015a9c <_SendPacket>
      RECORD_END();
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80161cc:	4b08      	ldr	r3, [pc, #32]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 80161ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d002      	beq.n	80161da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80161d4:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <SEGGER_SYSVIEW_Start+0x168>)
 80161d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80161da:	f000 f9eb 	bl	80165b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80161de:	f000 f9b1 	bl	8016544 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80161e2:	f000 fba9 	bl	8016938 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80161e6:	bf00      	nop
 80161e8:	3730      	adds	r7, #48	; 0x30
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}
 80161ee:	bf00      	nop
 80161f0:	20018b18 	.word	0x20018b18
 80161f4:	08018af8 	.word	0x08018af8
 80161f8:	20018b48 	.word	0x20018b48

080161fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8016202:	f3ef 8311 	mrs	r3, BASEPRI
 8016206:	f04f 0120 	mov.w	r1, #32
 801620a:	f381 8811 	msr	BASEPRI, r1
 801620e:	607b      	str	r3, [r7, #4]
 8016210:	480b      	ldr	r0, [pc, #44]	; (8016240 <SEGGER_SYSVIEW_Stop+0x44>)
 8016212:	f7ff fb53 	bl	80158bc <_PreparePacket>
 8016216:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8016218:	4b0a      	ldr	r3, [pc, #40]	; (8016244 <SEGGER_SYSVIEW_Stop+0x48>)
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d007      	beq.n	8016230 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8016220:	220b      	movs	r2, #11
 8016222:	6839      	ldr	r1, [r7, #0]
 8016224:	6838      	ldr	r0, [r7, #0]
 8016226:	f7ff fc39 	bl	8015a9c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801622a:	4b06      	ldr	r3, [pc, #24]	; (8016244 <SEGGER_SYSVIEW_Stop+0x48>)
 801622c:	2200      	movs	r2, #0
 801622e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f383 8811 	msr	BASEPRI, r3
}
 8016236:	bf00      	nop
 8016238:	3708      	adds	r7, #8
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	20018b48 	.word	0x20018b48
 8016244:	20018b18 	.word	0x20018b18

08016248 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8016248:	b580      	push	{r7, lr}
 801624a:	b08c      	sub	sp, #48	; 0x30
 801624c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801624e:	f3ef 8311 	mrs	r3, BASEPRI
 8016252:	f04f 0120 	mov.w	r1, #32
 8016256:	f381 8811 	msr	BASEPRI, r1
 801625a:	60fb      	str	r3, [r7, #12]
 801625c:	4845      	ldr	r0, [pc, #276]	; (8016374 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801625e:	f7ff fb2d 	bl	80158bc <_PreparePacket>
 8016262:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801626c:	4b42      	ldr	r3, [pc, #264]	; (8016378 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	62bb      	str	r3, [r7, #40]	; 0x28
 8016272:	e00b      	b.n	801628c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8016274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016276:	b2da      	uxtb	r2, r3
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	1c59      	adds	r1, r3, #1
 801627c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801627e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016282:	b2d2      	uxtb	r2, r2
 8016284:	701a      	strb	r2, [r3, #0]
 8016286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016288:	09db      	lsrs	r3, r3, #7
 801628a:	62bb      	str	r3, [r7, #40]	; 0x28
 801628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628e:	2b7f      	cmp	r3, #127	; 0x7f
 8016290:	d8f0      	bhi.n	8016274 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8016292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016294:	1c5a      	adds	r2, r3, #1
 8016296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801629a:	b2d2      	uxtb	r2, r2
 801629c:	701a      	strb	r2, [r3, #0]
 801629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	627b      	str	r3, [r7, #36]	; 0x24
 80162a6:	4b34      	ldr	r3, [pc, #208]	; (8016378 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	623b      	str	r3, [r7, #32]
 80162ac:	e00b      	b.n	80162c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80162ae:	6a3b      	ldr	r3, [r7, #32]
 80162b0:	b2da      	uxtb	r2, r3
 80162b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b4:	1c59      	adds	r1, r3, #1
 80162b6:	6279      	str	r1, [r7, #36]	; 0x24
 80162b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80162bc:	b2d2      	uxtb	r2, r2
 80162be:	701a      	strb	r2, [r3, #0]
 80162c0:	6a3b      	ldr	r3, [r7, #32]
 80162c2:	09db      	lsrs	r3, r3, #7
 80162c4:	623b      	str	r3, [r7, #32]
 80162c6:	6a3b      	ldr	r3, [r7, #32]
 80162c8:	2b7f      	cmp	r3, #127	; 0x7f
 80162ca:	d8f0      	bhi.n	80162ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80162cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ce:	1c5a      	adds	r2, r3, #1
 80162d0:	627a      	str	r2, [r7, #36]	; 0x24
 80162d2:	6a3a      	ldr	r2, [r7, #32]
 80162d4:	b2d2      	uxtb	r2, r2
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	61fb      	str	r3, [r7, #28]
 80162e0:	4b25      	ldr	r3, [pc, #148]	; (8016378 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80162e2:	691b      	ldr	r3, [r3, #16]
 80162e4:	61bb      	str	r3, [r7, #24]
 80162e6:	e00b      	b.n	8016300 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	1c59      	adds	r1, r3, #1
 80162f0:	61f9      	str	r1, [r7, #28]
 80162f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80162f6:	b2d2      	uxtb	r2, r2
 80162f8:	701a      	strb	r2, [r3, #0]
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	09db      	lsrs	r3, r3, #7
 80162fe:	61bb      	str	r3, [r7, #24]
 8016300:	69bb      	ldr	r3, [r7, #24]
 8016302:	2b7f      	cmp	r3, #127	; 0x7f
 8016304:	d8f0      	bhi.n	80162e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	1c5a      	adds	r2, r3, #1
 801630a:	61fa      	str	r2, [r7, #28]
 801630c:	69ba      	ldr	r2, [r7, #24]
 801630e:	b2d2      	uxtb	r2, r2
 8016310:	701a      	strb	r2, [r3, #0]
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	617b      	str	r3, [r7, #20]
 801631a:	2300      	movs	r3, #0
 801631c:	613b      	str	r3, [r7, #16]
 801631e:	e00b      	b.n	8016338 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	b2da      	uxtb	r2, r3
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	1c59      	adds	r1, r3, #1
 8016328:	6179      	str	r1, [r7, #20]
 801632a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801632e:	b2d2      	uxtb	r2, r2
 8016330:	701a      	strb	r2, [r3, #0]
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	09db      	lsrs	r3, r3, #7
 8016336:	613b      	str	r3, [r7, #16]
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	2b7f      	cmp	r3, #127	; 0x7f
 801633c:	d8f0      	bhi.n	8016320 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	617a      	str	r2, [r7, #20]
 8016344:	693a      	ldr	r2, [r7, #16]
 8016346:	b2d2      	uxtb	r2, r2
 8016348:	701a      	strb	r2, [r3, #0]
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801634e:	2218      	movs	r2, #24
 8016350:	6879      	ldr	r1, [r7, #4]
 8016352:	68b8      	ldr	r0, [r7, #8]
 8016354:	f7ff fba2 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801635e:	4b06      	ldr	r3, [pc, #24]	; (8016378 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8016360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016362:	2b00      	cmp	r3, #0
 8016364:	d002      	beq.n	801636c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8016366:	4b04      	ldr	r3, [pc, #16]	; (8016378 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8016368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801636a:	4798      	blx	r3
  }
}
 801636c:	bf00      	nop
 801636e:	3730      	adds	r7, #48	; 0x30
 8016370:	46bd      	mov	sp, r7
 8016372:	bd80      	pop	{r7, pc}
 8016374:	20018b48 	.word	0x20018b48
 8016378:	20018b18 	.word	0x20018b18

0801637c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 801637c:	b580      	push	{r7, lr}
 801637e:	b092      	sub	sp, #72	; 0x48
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8016384:	f3ef 8311 	mrs	r3, BASEPRI
 8016388:	f04f 0120 	mov.w	r1, #32
 801638c:	f381 8811 	msr	BASEPRI, r1
 8016390:	617b      	str	r3, [r7, #20]
 8016392:	486a      	ldr	r0, [pc, #424]	; (801653c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8016394:	f7ff fa92 	bl	80158bc <_PreparePacket>
 8016398:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	647b      	str	r3, [r7, #68]	; 0x44
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	4b66      	ldr	r3, [pc, #408]	; (8016540 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80163a8:	691b      	ldr	r3, [r3, #16]
 80163aa:	1ad3      	subs	r3, r2, r3
 80163ac:	643b      	str	r3, [r7, #64]	; 0x40
 80163ae:	e00b      	b.n	80163c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80163b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163b2:	b2da      	uxtb	r2, r3
 80163b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163b6:	1c59      	adds	r1, r3, #1
 80163b8:	6479      	str	r1, [r7, #68]	; 0x44
 80163ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80163be:	b2d2      	uxtb	r2, r2
 80163c0:	701a      	strb	r2, [r3, #0]
 80163c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163c4:	09db      	lsrs	r3, r3, #7
 80163c6:	643b      	str	r3, [r7, #64]	; 0x40
 80163c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ca:	2b7f      	cmp	r3, #127	; 0x7f
 80163cc:	d8f0      	bhi.n	80163b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80163ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163d0:	1c5a      	adds	r2, r3, #1
 80163d2:	647a      	str	r2, [r7, #68]	; 0x44
 80163d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163d6:	b2d2      	uxtb	r2, r2
 80163d8:	701a      	strb	r2, [r3, #0]
 80163da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	689b      	ldr	r3, [r3, #8]
 80163e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80163e8:	e00b      	b.n	8016402 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80163ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ec:	b2da      	uxtb	r2, r3
 80163ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163f0:	1c59      	adds	r1, r3, #1
 80163f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80163f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80163f8:	b2d2      	uxtb	r2, r2
 80163fa:	701a      	strb	r2, [r3, #0]
 80163fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fe:	09db      	lsrs	r3, r3, #7
 8016400:	63bb      	str	r3, [r7, #56]	; 0x38
 8016402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016404:	2b7f      	cmp	r3, #127	; 0x7f
 8016406:	d8f0      	bhi.n	80163ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8016408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801640a:	1c5a      	adds	r2, r3, #1
 801640c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801640e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016410:	b2d2      	uxtb	r2, r2
 8016412:	701a      	strb	r2, [r3, #0]
 8016414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016416:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	2220      	movs	r2, #32
 801641e:	4619      	mov	r1, r3
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f7ff f9fb 	bl	801581c <_EncodeStr>
 8016426:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8016428:	2209      	movs	r2, #9
 801642a:	68f9      	ldr	r1, [r7, #12]
 801642c:	6938      	ldr	r0, [r7, #16]
 801642e:	f7ff fb35 	bl	8015a9c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	637b      	str	r3, [r7, #52]	; 0x34
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681a      	ldr	r2, [r3, #0]
 801643e:	4b40      	ldr	r3, [pc, #256]	; (8016540 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8016440:	691b      	ldr	r3, [r3, #16]
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	633b      	str	r3, [r7, #48]	; 0x30
 8016446:	e00b      	b.n	8016460 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	b2da      	uxtb	r2, r3
 801644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801644e:	1c59      	adds	r1, r3, #1
 8016450:	6379      	str	r1, [r7, #52]	; 0x34
 8016452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016456:	b2d2      	uxtb	r2, r2
 8016458:	701a      	strb	r2, [r3, #0]
 801645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645c:	09db      	lsrs	r3, r3, #7
 801645e:	633b      	str	r3, [r7, #48]	; 0x30
 8016460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016462:	2b7f      	cmp	r3, #127	; 0x7f
 8016464:	d8f0      	bhi.n	8016448 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8016466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016468:	1c5a      	adds	r2, r3, #1
 801646a:	637a      	str	r2, [r7, #52]	; 0x34
 801646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801646e:	b2d2      	uxtb	r2, r2
 8016470:	701a      	strb	r2, [r3, #0]
 8016472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016474:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	62fb      	str	r3, [r7, #44]	; 0x2c
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016480:	e00b      	b.n	801649a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8016482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016484:	b2da      	uxtb	r2, r3
 8016486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016488:	1c59      	adds	r1, r3, #1
 801648a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016490:	b2d2      	uxtb	r2, r2
 8016492:	701a      	strb	r2, [r3, #0]
 8016494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016496:	09db      	lsrs	r3, r3, #7
 8016498:	62bb      	str	r3, [r7, #40]	; 0x28
 801649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649c:	2b7f      	cmp	r3, #127	; 0x7f
 801649e:	d8f0      	bhi.n	8016482 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80164a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a2:	1c5a      	adds	r2, r3, #1
 80164a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164a8:	b2d2      	uxtb	r2, r2
 80164aa:	701a      	strb	r2, [r3, #0]
 80164ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	627b      	str	r3, [r7, #36]	; 0x24
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	691b      	ldr	r3, [r3, #16]
 80164b8:	623b      	str	r3, [r7, #32]
 80164ba:	e00b      	b.n	80164d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80164bc:	6a3b      	ldr	r3, [r7, #32]
 80164be:	b2da      	uxtb	r2, r3
 80164c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c2:	1c59      	adds	r1, r3, #1
 80164c4:	6279      	str	r1, [r7, #36]	; 0x24
 80164c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80164ca:	b2d2      	uxtb	r2, r2
 80164cc:	701a      	strb	r2, [r3, #0]
 80164ce:	6a3b      	ldr	r3, [r7, #32]
 80164d0:	09db      	lsrs	r3, r3, #7
 80164d2:	623b      	str	r3, [r7, #32]
 80164d4:	6a3b      	ldr	r3, [r7, #32]
 80164d6:	2b7f      	cmp	r3, #127	; 0x7f
 80164d8:	d8f0      	bhi.n	80164bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80164da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164dc:	1c5a      	adds	r2, r3, #1
 80164de:	627a      	str	r2, [r7, #36]	; 0x24
 80164e0:	6a3a      	ldr	r2, [r7, #32]
 80164e2:	b2d2      	uxtb	r2, r2
 80164e4:	701a      	strb	r2, [r3, #0]
 80164e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	61fb      	str	r3, [r7, #28]
 80164ee:	2300      	movs	r3, #0
 80164f0:	61bb      	str	r3, [r7, #24]
 80164f2:	e00b      	b.n	801650c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	b2da      	uxtb	r2, r3
 80164f8:	69fb      	ldr	r3, [r7, #28]
 80164fa:	1c59      	adds	r1, r3, #1
 80164fc:	61f9      	str	r1, [r7, #28]
 80164fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016502:	b2d2      	uxtb	r2, r2
 8016504:	701a      	strb	r2, [r3, #0]
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	09db      	lsrs	r3, r3, #7
 801650a:	61bb      	str	r3, [r7, #24]
 801650c:	69bb      	ldr	r3, [r7, #24]
 801650e:	2b7f      	cmp	r3, #127	; 0x7f
 8016510:	d8f0      	bhi.n	80164f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	1c5a      	adds	r2, r3, #1
 8016516:	61fa      	str	r2, [r7, #28]
 8016518:	69ba      	ldr	r2, [r7, #24]
 801651a:	b2d2      	uxtb	r2, r2
 801651c:	701a      	strb	r2, [r3, #0]
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8016522:	2215      	movs	r2, #21
 8016524:	68f9      	ldr	r1, [r7, #12]
 8016526:	6938      	ldr	r0, [r7, #16]
 8016528:	f7ff fab8 	bl	8015a9c <_SendPacket>
  RECORD_END();
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	f383 8811 	msr	BASEPRI, r3
}
 8016532:	bf00      	nop
 8016534:	3748      	adds	r7, #72	; 0x48
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	20018b48 	.word	0x20018b48
 8016540:	20018b18 	.word	0x20018b18

08016544 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8016544:	b580      	push	{r7, lr}
 8016546:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8016548:	4b07      	ldr	r3, [pc, #28]	; (8016568 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801654a:	6a1b      	ldr	r3, [r3, #32]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d008      	beq.n	8016562 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8016550:	4b05      	ldr	r3, [pc, #20]	; (8016568 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8016552:	6a1b      	ldr	r3, [r3, #32]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d003      	beq.n	8016562 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 801655a:	4b03      	ldr	r3, [pc, #12]	; (8016568 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801655c:	6a1b      	ldr	r3, [r3, #32]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	4798      	blx	r3
  }
}
 8016562:	bf00      	nop
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	20018b18 	.word	0x20018b18

0801656c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 801656c:	b580      	push	{r7, lr}
 801656e:	b086      	sub	sp, #24
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8016574:	f3ef 8311 	mrs	r3, BASEPRI
 8016578:	f04f 0120 	mov.w	r1, #32
 801657c:	f381 8811 	msr	BASEPRI, r1
 8016580:	617b      	str	r3, [r7, #20]
 8016582:	480b      	ldr	r0, [pc, #44]	; (80165b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8016584:	f7ff f99a 	bl	80158bc <_PreparePacket>
 8016588:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801658a:	2280      	movs	r2, #128	; 0x80
 801658c:	6879      	ldr	r1, [r7, #4]
 801658e:	6938      	ldr	r0, [r7, #16]
 8016590:	f7ff f944 	bl	801581c <_EncodeStr>
 8016594:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8016596:	220e      	movs	r2, #14
 8016598:	68f9      	ldr	r1, [r7, #12]
 801659a:	6938      	ldr	r0, [r7, #16]
 801659c:	f7ff fa7e 	bl	8015a9c <_SendPacket>
  RECORD_END();
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	f383 8811 	msr	BASEPRI, r3
}
 80165a6:	bf00      	nop
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	20018b48 	.word	0x20018b48

080165b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80165b4:	b590      	push	{r4, r7, lr}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80165ba:	4b15      	ldr	r3, [pc, #84]	; (8016610 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80165bc:	6a1b      	ldr	r3, [r3, #32]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d01a      	beq.n	80165f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80165c2:	4b13      	ldr	r3, [pc, #76]	; (8016610 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80165c4:	6a1b      	ldr	r3, [r3, #32]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d015      	beq.n	80165f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80165cc:	4b10      	ldr	r3, [pc, #64]	; (8016610 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80165ce:	6a1b      	ldr	r3, [r3, #32]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	4798      	blx	r3
 80165d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80165d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80165da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165de:	f04f 0200 	mov.w	r2, #0
 80165e2:	f04f 0300 	mov.w	r3, #0
 80165e6:	000a      	movs	r2, r1
 80165e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80165ea:	4613      	mov	r3, r2
 80165ec:	461a      	mov	r2, r3
 80165ee:	4621      	mov	r1, r4
 80165f0:	200d      	movs	r0, #13
 80165f2:	f7ff fbe7 	bl	8015dc4 <SEGGER_SYSVIEW_RecordU32x2>
 80165f6:	e006      	b.n	8016606 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80165f8:	4b06      	ldr	r3, [pc, #24]	; (8016614 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	4619      	mov	r1, r3
 80165fe:	200c      	movs	r0, #12
 8016600:	f7ff fba4 	bl	8015d4c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8016604:	bf00      	nop
 8016606:	bf00      	nop
 8016608:	370c      	adds	r7, #12
 801660a:	46bd      	mov	sp, r7
 801660c:	bd90      	pop	{r4, r7, pc}
 801660e:	bf00      	nop
 8016610:	20018b18 	.word	0x20018b18
 8016614:	e0001004 	.word	0xe0001004

08016618 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801661e:	f3ef 8311 	mrs	r3, BASEPRI
 8016622:	f04f 0120 	mov.w	r1, #32
 8016626:	f381 8811 	msr	BASEPRI, r1
 801662a:	607b      	str	r3, [r7, #4]
 801662c:	4807      	ldr	r0, [pc, #28]	; (801664c <SEGGER_SYSVIEW_OnIdle+0x34>)
 801662e:	f7ff f945 	bl	80158bc <_PreparePacket>
 8016632:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8016634:	2211      	movs	r2, #17
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	6838      	ldr	r0, [r7, #0]
 801663a:	f7ff fa2f 	bl	8015a9c <_SendPacket>
  RECORD_END();
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f383 8811 	msr	BASEPRI, r3
}
 8016644:	bf00      	nop
 8016646:	3708      	adds	r7, #8
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	20018b48 	.word	0x20018b48

08016650 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8016650:	b580      	push	{r7, lr}
 8016652:	b088      	sub	sp, #32
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8016658:	f3ef 8311 	mrs	r3, BASEPRI
 801665c:	f04f 0120 	mov.w	r1, #32
 8016660:	f381 8811 	msr	BASEPRI, r1
 8016664:	617b      	str	r3, [r7, #20]
 8016666:	4819      	ldr	r0, [pc, #100]	; (80166cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8016668:	f7ff f928 	bl	80158bc <_PreparePacket>
 801666c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8016672:	4b17      	ldr	r3, [pc, #92]	; (80166d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8016674:	691b      	ldr	r3, [r3, #16]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	1ad3      	subs	r3, r2, r3
 801667a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	61fb      	str	r3, [r7, #28]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	61bb      	str	r3, [r7, #24]
 8016684:	e00b      	b.n	801669e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	b2da      	uxtb	r2, r3
 801668a:	69fb      	ldr	r3, [r7, #28]
 801668c:	1c59      	adds	r1, r3, #1
 801668e:	61f9      	str	r1, [r7, #28]
 8016690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016694:	b2d2      	uxtb	r2, r2
 8016696:	701a      	strb	r2, [r3, #0]
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	09db      	lsrs	r3, r3, #7
 801669c:	61bb      	str	r3, [r7, #24]
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	2b7f      	cmp	r3, #127	; 0x7f
 80166a2:	d8f0      	bhi.n	8016686 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	1c5a      	adds	r2, r3, #1
 80166a8:	61fa      	str	r2, [r7, #28]
 80166aa:	69ba      	ldr	r2, [r7, #24]
 80166ac:	b2d2      	uxtb	r2, r2
 80166ae:	701a      	strb	r2, [r3, #0]
 80166b0:	69fb      	ldr	r3, [r7, #28]
 80166b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80166b4:	2208      	movs	r2, #8
 80166b6:	68f9      	ldr	r1, [r7, #12]
 80166b8:	6938      	ldr	r0, [r7, #16]
 80166ba:	f7ff f9ef 	bl	8015a9c <_SendPacket>
  RECORD_END();
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	f383 8811 	msr	BASEPRI, r3
}
 80166c4:	bf00      	nop
 80166c6:	3720      	adds	r7, #32
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	20018b48 	.word	0x20018b48
 80166d0:	20018b18 	.word	0x20018b18

080166d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b088      	sub	sp, #32
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80166dc:	f3ef 8311 	mrs	r3, BASEPRI
 80166e0:	f04f 0120 	mov.w	r1, #32
 80166e4:	f381 8811 	msr	BASEPRI, r1
 80166e8:	617b      	str	r3, [r7, #20]
 80166ea:	4819      	ldr	r0, [pc, #100]	; (8016750 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80166ec:	f7ff f8e6 	bl	80158bc <_PreparePacket>
 80166f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80166f6:	4b17      	ldr	r3, [pc, #92]	; (8016754 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80166f8:	691b      	ldr	r3, [r3, #16]
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	1ad3      	subs	r3, r2, r3
 80166fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	61fb      	str	r3, [r7, #28]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	61bb      	str	r3, [r7, #24]
 8016708:	e00b      	b.n	8016722 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	b2da      	uxtb	r2, r3
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	1c59      	adds	r1, r3, #1
 8016712:	61f9      	str	r1, [r7, #28]
 8016714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016718:	b2d2      	uxtb	r2, r2
 801671a:	701a      	strb	r2, [r3, #0]
 801671c:	69bb      	ldr	r3, [r7, #24]
 801671e:	09db      	lsrs	r3, r3, #7
 8016720:	61bb      	str	r3, [r7, #24]
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	2b7f      	cmp	r3, #127	; 0x7f
 8016726:	d8f0      	bhi.n	801670a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	1c5a      	adds	r2, r3, #1
 801672c:	61fa      	str	r2, [r7, #28]
 801672e:	69ba      	ldr	r2, [r7, #24]
 8016730:	b2d2      	uxtb	r2, r2
 8016732:	701a      	strb	r2, [r3, #0]
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8016738:	2204      	movs	r2, #4
 801673a:	68f9      	ldr	r1, [r7, #12]
 801673c:	6938      	ldr	r0, [r7, #16]
 801673e:	f7ff f9ad 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	f383 8811 	msr	BASEPRI, r3
}
 8016748:	bf00      	nop
 801674a:	3720      	adds	r7, #32
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}
 8016750:	20018b48 	.word	0x20018b48
 8016754:	20018b18 	.word	0x20018b18

08016758 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8016758:	b580      	push	{r7, lr}
 801675a:	b088      	sub	sp, #32
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8016760:	f3ef 8311 	mrs	r3, BASEPRI
 8016764:	f04f 0120 	mov.w	r1, #32
 8016768:	f381 8811 	msr	BASEPRI, r1
 801676c:	617b      	str	r3, [r7, #20]
 801676e:	4819      	ldr	r0, [pc, #100]	; (80167d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8016770:	f7ff f8a4 	bl	80158bc <_PreparePacket>
 8016774:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801677a:	4b17      	ldr	r3, [pc, #92]	; (80167d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	61fb      	str	r3, [r7, #28]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	61bb      	str	r3, [r7, #24]
 801678c:	e00b      	b.n	80167a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 801678e:	69bb      	ldr	r3, [r7, #24]
 8016790:	b2da      	uxtb	r2, r3
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	1c59      	adds	r1, r3, #1
 8016796:	61f9      	str	r1, [r7, #28]
 8016798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801679c:	b2d2      	uxtb	r2, r2
 801679e:	701a      	strb	r2, [r3, #0]
 80167a0:	69bb      	ldr	r3, [r7, #24]
 80167a2:	09db      	lsrs	r3, r3, #7
 80167a4:	61bb      	str	r3, [r7, #24]
 80167a6:	69bb      	ldr	r3, [r7, #24]
 80167a8:	2b7f      	cmp	r3, #127	; 0x7f
 80167aa:	d8f0      	bhi.n	801678e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	1c5a      	adds	r2, r3, #1
 80167b0:	61fa      	str	r2, [r7, #28]
 80167b2:	69ba      	ldr	r2, [r7, #24]
 80167b4:	b2d2      	uxtb	r2, r2
 80167b6:	701a      	strb	r2, [r3, #0]
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80167bc:	2206      	movs	r2, #6
 80167be:	68f9      	ldr	r1, [r7, #12]
 80167c0:	6938      	ldr	r0, [r7, #16]
 80167c2:	f7ff f96b 	bl	8015a9c <_SendPacket>
  RECORD_END();
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	f383 8811 	msr	BASEPRI, r3
}
 80167cc:	bf00      	nop
 80167ce:	3720      	adds	r7, #32
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}
 80167d4:	20018b48 	.word	0x20018b48
 80167d8:	20018b18 	.word	0x20018b18

080167dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80167e4:	4b04      	ldr	r3, [pc, #16]	; (80167f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80167e6:	691b      	ldr	r3, [r3, #16]
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	1ad3      	subs	r3, r2, r3
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	370c      	adds	r7, #12
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr
 80167f8:	20018b18 	.word	0x20018b18

080167fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b08c      	sub	sp, #48	; 0x30
 8016800:	af00      	add	r7, sp, #0
 8016802:	4603      	mov	r3, r0
 8016804:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8016806:	4b3b      	ldr	r3, [pc, #236]	; (80168f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d06d      	beq.n	80168ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801680e:	4b39      	ldr	r3, [pc, #228]	; (80168f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8016814:	2300      	movs	r3, #0
 8016816:	62bb      	str	r3, [r7, #40]	; 0x28
 8016818:	e008      	b.n	801682c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681c:	691b      	ldr	r3, [r3, #16]
 801681e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8016820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016822:	2b00      	cmp	r3, #0
 8016824:	d007      	beq.n	8016836 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8016826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016828:	3301      	adds	r3, #1
 801682a:	62bb      	str	r3, [r7, #40]	; 0x28
 801682c:	79fb      	ldrb	r3, [r7, #7]
 801682e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016830:	429a      	cmp	r2, r3
 8016832:	d3f2      	bcc.n	801681a <SEGGER_SYSVIEW_SendModule+0x1e>
 8016834:	e000      	b.n	8016838 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8016836:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8016838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683a:	2b00      	cmp	r3, #0
 801683c:	d055      	beq.n	80168ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801683e:	f3ef 8311 	mrs	r3, BASEPRI
 8016842:	f04f 0120 	mov.w	r1, #32
 8016846:	f381 8811 	msr	BASEPRI, r1
 801684a:	617b      	str	r3, [r7, #20]
 801684c:	482a      	ldr	r0, [pc, #168]	; (80168f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801684e:	f7ff f835 	bl	80158bc <_PreparePacket>
 8016852:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	627b      	str	r3, [r7, #36]	; 0x24
 801685c:	79fb      	ldrb	r3, [r7, #7]
 801685e:	623b      	str	r3, [r7, #32]
 8016860:	e00b      	b.n	801687a <SEGGER_SYSVIEW_SendModule+0x7e>
 8016862:	6a3b      	ldr	r3, [r7, #32]
 8016864:	b2da      	uxtb	r2, r3
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	1c59      	adds	r1, r3, #1
 801686a:	6279      	str	r1, [r7, #36]	; 0x24
 801686c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016870:	b2d2      	uxtb	r2, r2
 8016872:	701a      	strb	r2, [r3, #0]
 8016874:	6a3b      	ldr	r3, [r7, #32]
 8016876:	09db      	lsrs	r3, r3, #7
 8016878:	623b      	str	r3, [r7, #32]
 801687a:	6a3b      	ldr	r3, [r7, #32]
 801687c:	2b7f      	cmp	r3, #127	; 0x7f
 801687e:	d8f0      	bhi.n	8016862 <SEGGER_SYSVIEW_SendModule+0x66>
 8016880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016882:	1c5a      	adds	r2, r3, #1
 8016884:	627a      	str	r2, [r7, #36]	; 0x24
 8016886:	6a3a      	ldr	r2, [r7, #32]
 8016888:	b2d2      	uxtb	r2, r2
 801688a:	701a      	strb	r2, [r3, #0]
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	61fb      	str	r3, [r7, #28]
 8016894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016896:	689b      	ldr	r3, [r3, #8]
 8016898:	61bb      	str	r3, [r7, #24]
 801689a:	e00b      	b.n	80168b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	b2da      	uxtb	r2, r3
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	1c59      	adds	r1, r3, #1
 80168a4:	61f9      	str	r1, [r7, #28]
 80168a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80168aa:	b2d2      	uxtb	r2, r2
 80168ac:	701a      	strb	r2, [r3, #0]
 80168ae:	69bb      	ldr	r3, [r7, #24]
 80168b0:	09db      	lsrs	r3, r3, #7
 80168b2:	61bb      	str	r3, [r7, #24]
 80168b4:	69bb      	ldr	r3, [r7, #24]
 80168b6:	2b7f      	cmp	r3, #127	; 0x7f
 80168b8:	d8f0      	bhi.n	801689c <SEGGER_SYSVIEW_SendModule+0xa0>
 80168ba:	69fb      	ldr	r3, [r7, #28]
 80168bc:	1c5a      	adds	r2, r3, #1
 80168be:	61fa      	str	r2, [r7, #28]
 80168c0:	69ba      	ldr	r2, [r7, #24]
 80168c2:	b2d2      	uxtb	r2, r2
 80168c4:	701a      	strb	r2, [r3, #0]
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80168ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2280      	movs	r2, #128	; 0x80
 80168d0:	4619      	mov	r1, r3
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	f7fe ffa2 	bl	801581c <_EncodeStr>
 80168d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80168da:	2216      	movs	r2, #22
 80168dc:	68f9      	ldr	r1, [r7, #12]
 80168de:	6938      	ldr	r0, [r7, #16]
 80168e0:	f7ff f8dc 	bl	8015a9c <_SendPacket>
      RECORD_END();
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80168ea:	bf00      	nop
 80168ec:	3730      	adds	r7, #48	; 0x30
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	20018b40 	.word	0x20018b40
 80168f8:	20018b48 	.word	0x20018b48

080168fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8016902:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00f      	beq.n	801692a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801690a:	4b0a      	ldr	r3, [pc, #40]	; (8016934 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	68db      	ldr	r3, [r3, #12]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d002      	beq.n	801691e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	691b      	ldr	r3, [r3, #16]
 8016922:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d1f2      	bne.n	8016910 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801692a:	bf00      	nop
 801692c:	3708      	adds	r7, #8
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	20018b40 	.word	0x20018b40

08016938 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8016938:	b580      	push	{r7, lr}
 801693a:	b086      	sub	sp, #24
 801693c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801693e:	f3ef 8311 	mrs	r3, BASEPRI
 8016942:	f04f 0120 	mov.w	r1, #32
 8016946:	f381 8811 	msr	BASEPRI, r1
 801694a:	60fb      	str	r3, [r7, #12]
 801694c:	4817      	ldr	r0, [pc, #92]	; (80169ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801694e:	f7fe ffb5 	bl	80158bc <_PreparePacket>
 8016952:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	617b      	str	r3, [r7, #20]
 801695c:	4b14      	ldr	r3, [pc, #80]	; (80169b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	613b      	str	r3, [r7, #16]
 8016962:	e00b      	b.n	801697c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	b2da      	uxtb	r2, r3
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	1c59      	adds	r1, r3, #1
 801696c:	6179      	str	r1, [r7, #20]
 801696e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016972:	b2d2      	uxtb	r2, r2
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	09db      	lsrs	r3, r3, #7
 801697a:	613b      	str	r3, [r7, #16]
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	2b7f      	cmp	r3, #127	; 0x7f
 8016980:	d8f0      	bhi.n	8016964 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	1c5a      	adds	r2, r3, #1
 8016986:	617a      	str	r2, [r7, #20]
 8016988:	693a      	ldr	r2, [r7, #16]
 801698a:	b2d2      	uxtb	r2, r2
 801698c:	701a      	strb	r2, [r3, #0]
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8016992:	221b      	movs	r2, #27
 8016994:	6879      	ldr	r1, [r7, #4]
 8016996:	68b8      	ldr	r0, [r7, #8]
 8016998:	f7ff f880 	bl	8015a9c <_SendPacket>
  RECORD_END();
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	f383 8811 	msr	BASEPRI, r3
}
 80169a2:	bf00      	nop
 80169a4:	3718      	adds	r7, #24
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
 80169aa:	bf00      	nop
 80169ac:	20018b48 	.word	0x20018b48
 80169b0:	20018b44 	.word	0x20018b44

080169b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b08a      	sub	sp, #40	; 0x28
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80169bc:	f3ef 8311 	mrs	r3, BASEPRI
 80169c0:	f04f 0120 	mov.w	r1, #32
 80169c4:	f381 8811 	msr	BASEPRI, r1
 80169c8:	617b      	str	r3, [r7, #20]
 80169ca:	4827      	ldr	r0, [pc, #156]	; (8016a68 <SEGGER_SYSVIEW_Warn+0xb4>)
 80169cc:	f7fe ff76 	bl	80158bc <_PreparePacket>
 80169d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80169d2:	2280      	movs	r2, #128	; 0x80
 80169d4:	6879      	ldr	r1, [r7, #4]
 80169d6:	6938      	ldr	r0, [r7, #16]
 80169d8:	f7fe ff20 	bl	801581c <_EncodeStr>
 80169dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	627b      	str	r3, [r7, #36]	; 0x24
 80169e2:	2301      	movs	r3, #1
 80169e4:	623b      	str	r3, [r7, #32]
 80169e6:	e00b      	b.n	8016a00 <SEGGER_SYSVIEW_Warn+0x4c>
 80169e8:	6a3b      	ldr	r3, [r7, #32]
 80169ea:	b2da      	uxtb	r2, r3
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	1c59      	adds	r1, r3, #1
 80169f0:	6279      	str	r1, [r7, #36]	; 0x24
 80169f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80169f6:	b2d2      	uxtb	r2, r2
 80169f8:	701a      	strb	r2, [r3, #0]
 80169fa:	6a3b      	ldr	r3, [r7, #32]
 80169fc:	09db      	lsrs	r3, r3, #7
 80169fe:	623b      	str	r3, [r7, #32]
 8016a00:	6a3b      	ldr	r3, [r7, #32]
 8016a02:	2b7f      	cmp	r3, #127	; 0x7f
 8016a04:	d8f0      	bhi.n	80169e8 <SEGGER_SYSVIEW_Warn+0x34>
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	1c5a      	adds	r2, r3, #1
 8016a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8016a0c:	6a3a      	ldr	r2, [r7, #32]
 8016a0e:	b2d2      	uxtb	r2, r2
 8016a10:	701a      	strb	r2, [r3, #0]
 8016a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	61fb      	str	r3, [r7, #28]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	61bb      	str	r3, [r7, #24]
 8016a1e:	e00b      	b.n	8016a38 <SEGGER_SYSVIEW_Warn+0x84>
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	b2da      	uxtb	r2, r3
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	1c59      	adds	r1, r3, #1
 8016a28:	61f9      	str	r1, [r7, #28]
 8016a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016a2e:	b2d2      	uxtb	r2, r2
 8016a30:	701a      	strb	r2, [r3, #0]
 8016a32:	69bb      	ldr	r3, [r7, #24]
 8016a34:	09db      	lsrs	r3, r3, #7
 8016a36:	61bb      	str	r3, [r7, #24]
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8016a3c:	d8f0      	bhi.n	8016a20 <SEGGER_SYSVIEW_Warn+0x6c>
 8016a3e:	69fb      	ldr	r3, [r7, #28]
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	61fa      	str	r2, [r7, #28]
 8016a44:	69ba      	ldr	r2, [r7, #24]
 8016a46:	b2d2      	uxtb	r2, r2
 8016a48:	701a      	strb	r2, [r3, #0]
 8016a4a:	69fb      	ldr	r3, [r7, #28]
 8016a4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8016a4e:	221a      	movs	r2, #26
 8016a50:	68f9      	ldr	r1, [r7, #12]
 8016a52:	6938      	ldr	r0, [r7, #16]
 8016a54:	f7ff f822 	bl	8015a9c <_SendPacket>
  RECORD_END();
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	f383 8811 	msr	BASEPRI, r3
}
 8016a5e:	bf00      	nop
 8016a60:	3728      	adds	r7, #40	; 0x28
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	20018b48 	.word	0x20018b48

08016a6c <arm_pid_init_f32>:
 8016a6c:	edd0 6a08 	vldr	s13, [r0, #32]
 8016a70:	edd0 7a06 	vldr	s15, [r0, #24]
 8016a74:	ed90 7a07 	vldr	s14, [r0, #28]
 8016a78:	edc0 6a02 	vstr	s13, [r0, #8]
 8016a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016a80:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8016a84:	eef1 7a67 	vneg.f32	s15, s15
 8016a88:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016a8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a90:	ed80 7a00 	vstr	s14, [r0]
 8016a94:	edc0 7a01 	vstr	s15, [r0, #4]
 8016a98:	b901      	cbnz	r1, 8016a9c <arm_pid_init_f32+0x30>
 8016a9a:	4770      	bx	lr
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	60c3      	str	r3, [r0, #12]
 8016aa0:	6103      	str	r3, [r0, #16]
 8016aa2:	6143      	str	r3, [r0, #20]
 8016aa4:	4770      	bx	lr
 8016aa6:	bf00      	nop

08016aa8 <__errno>:
 8016aa8:	4b01      	ldr	r3, [pc, #4]	; (8016ab0 <__errno+0x8>)
 8016aaa:	6818      	ldr	r0, [r3, #0]
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	200012f4 	.word	0x200012f4

08016ab4 <__libc_init_array>:
 8016ab4:	b570      	push	{r4, r5, r6, lr}
 8016ab6:	4d0d      	ldr	r5, [pc, #52]	; (8016aec <__libc_init_array+0x38>)
 8016ab8:	4c0d      	ldr	r4, [pc, #52]	; (8016af0 <__libc_init_array+0x3c>)
 8016aba:	1b64      	subs	r4, r4, r5
 8016abc:	10a4      	asrs	r4, r4, #2
 8016abe:	2600      	movs	r6, #0
 8016ac0:	42a6      	cmp	r6, r4
 8016ac2:	d109      	bne.n	8016ad8 <__libc_init_array+0x24>
 8016ac4:	4d0b      	ldr	r5, [pc, #44]	; (8016af4 <__libc_init_array+0x40>)
 8016ac6:	4c0c      	ldr	r4, [pc, #48]	; (8016af8 <__libc_init_array+0x44>)
 8016ac8:	f001 fe5c 	bl	8018784 <_init>
 8016acc:	1b64      	subs	r4, r4, r5
 8016ace:	10a4      	asrs	r4, r4, #2
 8016ad0:	2600      	movs	r6, #0
 8016ad2:	42a6      	cmp	r6, r4
 8016ad4:	d105      	bne.n	8016ae2 <__libc_init_array+0x2e>
 8016ad6:	bd70      	pop	{r4, r5, r6, pc}
 8016ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016adc:	4798      	blx	r3
 8016ade:	3601      	adds	r6, #1
 8016ae0:	e7ee      	b.n	8016ac0 <__libc_init_array+0xc>
 8016ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ae6:	4798      	blx	r3
 8016ae8:	3601      	adds	r6, #1
 8016aea:	e7f2      	b.n	8016ad2 <__libc_init_array+0x1e>
 8016aec:	08018d78 	.word	0x08018d78
 8016af0:	08018d78 	.word	0x08018d78
 8016af4:	08018d78 	.word	0x08018d78
 8016af8:	08018d7c 	.word	0x08018d7c

08016afc <__retarget_lock_acquire_recursive>:
 8016afc:	4770      	bx	lr

08016afe <__retarget_lock_release_recursive>:
 8016afe:	4770      	bx	lr

08016b00 <memcmp>:
 8016b00:	b530      	push	{r4, r5, lr}
 8016b02:	3901      	subs	r1, #1
 8016b04:	2400      	movs	r4, #0
 8016b06:	42a2      	cmp	r2, r4
 8016b08:	d101      	bne.n	8016b0e <memcmp+0xe>
 8016b0a:	2000      	movs	r0, #0
 8016b0c:	e005      	b.n	8016b1a <memcmp+0x1a>
 8016b0e:	5d03      	ldrb	r3, [r0, r4]
 8016b10:	3401      	adds	r4, #1
 8016b12:	5d0d      	ldrb	r5, [r1, r4]
 8016b14:	42ab      	cmp	r3, r5
 8016b16:	d0f6      	beq.n	8016b06 <memcmp+0x6>
 8016b18:	1b58      	subs	r0, r3, r5
 8016b1a:	bd30      	pop	{r4, r5, pc}

08016b1c <memcpy>:
 8016b1c:	440a      	add	r2, r1
 8016b1e:	4291      	cmp	r1, r2
 8016b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b24:	d100      	bne.n	8016b28 <memcpy+0xc>
 8016b26:	4770      	bx	lr
 8016b28:	b510      	push	{r4, lr}
 8016b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b32:	4291      	cmp	r1, r2
 8016b34:	d1f9      	bne.n	8016b2a <memcpy+0xe>
 8016b36:	bd10      	pop	{r4, pc}

08016b38 <memset>:
 8016b38:	4402      	add	r2, r0
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	4293      	cmp	r3, r2
 8016b3e:	d100      	bne.n	8016b42 <memset+0xa>
 8016b40:	4770      	bx	lr
 8016b42:	f803 1b01 	strb.w	r1, [r3], #1
 8016b46:	e7f9      	b.n	8016b3c <memset+0x4>

08016b48 <cleanup_glue>:
 8016b48:	b538      	push	{r3, r4, r5, lr}
 8016b4a:	460c      	mov	r4, r1
 8016b4c:	6809      	ldr	r1, [r1, #0]
 8016b4e:	4605      	mov	r5, r0
 8016b50:	b109      	cbz	r1, 8016b56 <cleanup_glue+0xe>
 8016b52:	f7ff fff9 	bl	8016b48 <cleanup_glue>
 8016b56:	4621      	mov	r1, r4
 8016b58:	4628      	mov	r0, r5
 8016b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b5e:	f000 b869 	b.w	8016c34 <_free_r>
	...

08016b64 <_reclaim_reent>:
 8016b64:	4b2c      	ldr	r3, [pc, #176]	; (8016c18 <_reclaim_reent+0xb4>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4283      	cmp	r3, r0
 8016b6a:	b570      	push	{r4, r5, r6, lr}
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	d051      	beq.n	8016c14 <_reclaim_reent+0xb0>
 8016b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016b72:	b143      	cbz	r3, 8016b86 <_reclaim_reent+0x22>
 8016b74:	68db      	ldr	r3, [r3, #12]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d14a      	bne.n	8016c10 <_reclaim_reent+0xac>
 8016b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b7c:	6819      	ldr	r1, [r3, #0]
 8016b7e:	b111      	cbz	r1, 8016b86 <_reclaim_reent+0x22>
 8016b80:	4620      	mov	r0, r4
 8016b82:	f000 f857 	bl	8016c34 <_free_r>
 8016b86:	6961      	ldr	r1, [r4, #20]
 8016b88:	b111      	cbz	r1, 8016b90 <_reclaim_reent+0x2c>
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	f000 f852 	bl	8016c34 <_free_r>
 8016b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016b92:	b111      	cbz	r1, 8016b9a <_reclaim_reent+0x36>
 8016b94:	4620      	mov	r0, r4
 8016b96:	f000 f84d 	bl	8016c34 <_free_r>
 8016b9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016b9c:	b111      	cbz	r1, 8016ba4 <_reclaim_reent+0x40>
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f000 f848 	bl	8016c34 <_free_r>
 8016ba4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016ba6:	b111      	cbz	r1, 8016bae <_reclaim_reent+0x4a>
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f000 f843 	bl	8016c34 <_free_r>
 8016bae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016bb0:	b111      	cbz	r1, 8016bb8 <_reclaim_reent+0x54>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	f000 f83e 	bl	8016c34 <_free_r>
 8016bb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016bba:	b111      	cbz	r1, 8016bc2 <_reclaim_reent+0x5e>
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	f000 f839 	bl	8016c34 <_free_r>
 8016bc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016bc4:	b111      	cbz	r1, 8016bcc <_reclaim_reent+0x68>
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f000 f834 	bl	8016c34 <_free_r>
 8016bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bce:	b111      	cbz	r1, 8016bd6 <_reclaim_reent+0x72>
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f000 f82f 	bl	8016c34 <_free_r>
 8016bd6:	69a3      	ldr	r3, [r4, #24]
 8016bd8:	b1e3      	cbz	r3, 8016c14 <_reclaim_reent+0xb0>
 8016bda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016bdc:	4620      	mov	r0, r4
 8016bde:	4798      	blx	r3
 8016be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016be2:	b1b9      	cbz	r1, 8016c14 <_reclaim_reent+0xb0>
 8016be4:	4620      	mov	r0, r4
 8016be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bea:	f7ff bfad 	b.w	8016b48 <cleanup_glue>
 8016bee:	5949      	ldr	r1, [r1, r5]
 8016bf0:	b941      	cbnz	r1, 8016c04 <_reclaim_reent+0xa0>
 8016bf2:	3504      	adds	r5, #4
 8016bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bf6:	2d80      	cmp	r5, #128	; 0x80
 8016bf8:	68d9      	ldr	r1, [r3, #12]
 8016bfa:	d1f8      	bne.n	8016bee <_reclaim_reent+0x8a>
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 f819 	bl	8016c34 <_free_r>
 8016c02:	e7ba      	b.n	8016b7a <_reclaim_reent+0x16>
 8016c04:	680e      	ldr	r6, [r1, #0]
 8016c06:	4620      	mov	r0, r4
 8016c08:	f000 f814 	bl	8016c34 <_free_r>
 8016c0c:	4631      	mov	r1, r6
 8016c0e:	e7ef      	b.n	8016bf0 <_reclaim_reent+0x8c>
 8016c10:	2500      	movs	r5, #0
 8016c12:	e7ef      	b.n	8016bf4 <_reclaim_reent+0x90>
 8016c14:	bd70      	pop	{r4, r5, r6, pc}
 8016c16:	bf00      	nop
 8016c18:	200012f4 	.word	0x200012f4

08016c1c <__malloc_lock>:
 8016c1c:	4801      	ldr	r0, [pc, #4]	; (8016c24 <__malloc_lock+0x8>)
 8016c1e:	f7ff bf6d 	b.w	8016afc <__retarget_lock_acquire_recursive>
 8016c22:	bf00      	nop
 8016c24:	2001bd14 	.word	0x2001bd14

08016c28 <__malloc_unlock>:
 8016c28:	4801      	ldr	r0, [pc, #4]	; (8016c30 <__malloc_unlock+0x8>)
 8016c2a:	f7ff bf68 	b.w	8016afe <__retarget_lock_release_recursive>
 8016c2e:	bf00      	nop
 8016c30:	2001bd14 	.word	0x2001bd14

08016c34 <_free_r>:
 8016c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c36:	2900      	cmp	r1, #0
 8016c38:	d048      	beq.n	8016ccc <_free_r+0x98>
 8016c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c3e:	9001      	str	r0, [sp, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	f1a1 0404 	sub.w	r4, r1, #4
 8016c46:	bfb8      	it	lt
 8016c48:	18e4      	addlt	r4, r4, r3
 8016c4a:	f7ff ffe7 	bl	8016c1c <__malloc_lock>
 8016c4e:	4a20      	ldr	r2, [pc, #128]	; (8016cd0 <_free_r+0x9c>)
 8016c50:	9801      	ldr	r0, [sp, #4]
 8016c52:	6813      	ldr	r3, [r2, #0]
 8016c54:	4615      	mov	r5, r2
 8016c56:	b933      	cbnz	r3, 8016c66 <_free_r+0x32>
 8016c58:	6063      	str	r3, [r4, #4]
 8016c5a:	6014      	str	r4, [r2, #0]
 8016c5c:	b003      	add	sp, #12
 8016c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c62:	f7ff bfe1 	b.w	8016c28 <__malloc_unlock>
 8016c66:	42a3      	cmp	r3, r4
 8016c68:	d90b      	bls.n	8016c82 <_free_r+0x4e>
 8016c6a:	6821      	ldr	r1, [r4, #0]
 8016c6c:	1862      	adds	r2, r4, r1
 8016c6e:	4293      	cmp	r3, r2
 8016c70:	bf04      	itt	eq
 8016c72:	681a      	ldreq	r2, [r3, #0]
 8016c74:	685b      	ldreq	r3, [r3, #4]
 8016c76:	6063      	str	r3, [r4, #4]
 8016c78:	bf04      	itt	eq
 8016c7a:	1852      	addeq	r2, r2, r1
 8016c7c:	6022      	streq	r2, [r4, #0]
 8016c7e:	602c      	str	r4, [r5, #0]
 8016c80:	e7ec      	b.n	8016c5c <_free_r+0x28>
 8016c82:	461a      	mov	r2, r3
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	b10b      	cbz	r3, 8016c8c <_free_r+0x58>
 8016c88:	42a3      	cmp	r3, r4
 8016c8a:	d9fa      	bls.n	8016c82 <_free_r+0x4e>
 8016c8c:	6811      	ldr	r1, [r2, #0]
 8016c8e:	1855      	adds	r5, r2, r1
 8016c90:	42a5      	cmp	r5, r4
 8016c92:	d10b      	bne.n	8016cac <_free_r+0x78>
 8016c94:	6824      	ldr	r4, [r4, #0]
 8016c96:	4421      	add	r1, r4
 8016c98:	1854      	adds	r4, r2, r1
 8016c9a:	42a3      	cmp	r3, r4
 8016c9c:	6011      	str	r1, [r2, #0]
 8016c9e:	d1dd      	bne.n	8016c5c <_free_r+0x28>
 8016ca0:	681c      	ldr	r4, [r3, #0]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	6053      	str	r3, [r2, #4]
 8016ca6:	4421      	add	r1, r4
 8016ca8:	6011      	str	r1, [r2, #0]
 8016caa:	e7d7      	b.n	8016c5c <_free_r+0x28>
 8016cac:	d902      	bls.n	8016cb4 <_free_r+0x80>
 8016cae:	230c      	movs	r3, #12
 8016cb0:	6003      	str	r3, [r0, #0]
 8016cb2:	e7d3      	b.n	8016c5c <_free_r+0x28>
 8016cb4:	6825      	ldr	r5, [r4, #0]
 8016cb6:	1961      	adds	r1, r4, r5
 8016cb8:	428b      	cmp	r3, r1
 8016cba:	bf04      	itt	eq
 8016cbc:	6819      	ldreq	r1, [r3, #0]
 8016cbe:	685b      	ldreq	r3, [r3, #4]
 8016cc0:	6063      	str	r3, [r4, #4]
 8016cc2:	bf04      	itt	eq
 8016cc4:	1949      	addeq	r1, r1, r5
 8016cc6:	6021      	streq	r1, [r4, #0]
 8016cc8:	6054      	str	r4, [r2, #4]
 8016cca:	e7c7      	b.n	8016c5c <_free_r+0x28>
 8016ccc:	b003      	add	sp, #12
 8016cce:	bd30      	pop	{r4, r5, pc}
 8016cd0:	20018c2c 	.word	0x20018c2c
 8016cd4:	00000000 	.word	0x00000000

08016cd8 <floor>:
 8016cd8:	ec51 0b10 	vmov	r0, r1, d0
 8016cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016ce4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016ce8:	2e13      	cmp	r6, #19
 8016cea:	ee10 5a10 	vmov	r5, s0
 8016cee:	ee10 8a10 	vmov	r8, s0
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	dc32      	bgt.n	8016d5c <floor+0x84>
 8016cf6:	2e00      	cmp	r6, #0
 8016cf8:	da14      	bge.n	8016d24 <floor+0x4c>
 8016cfa:	a333      	add	r3, pc, #204	; (adr r3, 8016dc8 <floor+0xf0>)
 8016cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d00:	f7e9 fab6 	bl	8000270 <__adddf3>
 8016d04:	2200      	movs	r2, #0
 8016d06:	2300      	movs	r3, #0
 8016d08:	f7e9 fef8 	bl	8000afc <__aeabi_dcmpgt>
 8016d0c:	b138      	cbz	r0, 8016d1e <floor+0x46>
 8016d0e:	2c00      	cmp	r4, #0
 8016d10:	da57      	bge.n	8016dc2 <floor+0xea>
 8016d12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016d16:	431d      	orrs	r5, r3
 8016d18:	d001      	beq.n	8016d1e <floor+0x46>
 8016d1a:	4c2d      	ldr	r4, [pc, #180]	; (8016dd0 <floor+0xf8>)
 8016d1c:	2500      	movs	r5, #0
 8016d1e:	4621      	mov	r1, r4
 8016d20:	4628      	mov	r0, r5
 8016d22:	e025      	b.n	8016d70 <floor+0x98>
 8016d24:	4f2b      	ldr	r7, [pc, #172]	; (8016dd4 <floor+0xfc>)
 8016d26:	4137      	asrs	r7, r6
 8016d28:	ea01 0307 	and.w	r3, r1, r7
 8016d2c:	4303      	orrs	r3, r0
 8016d2e:	d01f      	beq.n	8016d70 <floor+0x98>
 8016d30:	a325      	add	r3, pc, #148	; (adr r3, 8016dc8 <floor+0xf0>)
 8016d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d36:	f7e9 fa9b 	bl	8000270 <__adddf3>
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	f7e9 fedd 	bl	8000afc <__aeabi_dcmpgt>
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d0eb      	beq.n	8016d1e <floor+0x46>
 8016d46:	2c00      	cmp	r4, #0
 8016d48:	bfbe      	ittt	lt
 8016d4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016d4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8016d52:	19a4      	addlt	r4, r4, r6
 8016d54:	ea24 0407 	bic.w	r4, r4, r7
 8016d58:	2500      	movs	r5, #0
 8016d5a:	e7e0      	b.n	8016d1e <floor+0x46>
 8016d5c:	2e33      	cmp	r6, #51	; 0x33
 8016d5e:	dd0b      	ble.n	8016d78 <floor+0xa0>
 8016d60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016d64:	d104      	bne.n	8016d70 <floor+0x98>
 8016d66:	ee10 2a10 	vmov	r2, s0
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	f7e9 fa80 	bl	8000270 <__adddf3>
 8016d70:	ec41 0b10 	vmov	d0, r0, r1
 8016d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d80:	fa23 f707 	lsr.w	r7, r3, r7
 8016d84:	4207      	tst	r7, r0
 8016d86:	d0f3      	beq.n	8016d70 <floor+0x98>
 8016d88:	a30f      	add	r3, pc, #60	; (adr r3, 8016dc8 <floor+0xf0>)
 8016d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d8e:	f7e9 fa6f 	bl	8000270 <__adddf3>
 8016d92:	2200      	movs	r2, #0
 8016d94:	2300      	movs	r3, #0
 8016d96:	f7e9 feb1 	bl	8000afc <__aeabi_dcmpgt>
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	d0bf      	beq.n	8016d1e <floor+0x46>
 8016d9e:	2c00      	cmp	r4, #0
 8016da0:	da02      	bge.n	8016da8 <floor+0xd0>
 8016da2:	2e14      	cmp	r6, #20
 8016da4:	d103      	bne.n	8016dae <floor+0xd6>
 8016da6:	3401      	adds	r4, #1
 8016da8:	ea25 0507 	bic.w	r5, r5, r7
 8016dac:	e7b7      	b.n	8016d1e <floor+0x46>
 8016dae:	2301      	movs	r3, #1
 8016db0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016db4:	fa03 f606 	lsl.w	r6, r3, r6
 8016db8:	4435      	add	r5, r6
 8016dba:	4545      	cmp	r5, r8
 8016dbc:	bf38      	it	cc
 8016dbe:	18e4      	addcc	r4, r4, r3
 8016dc0:	e7f2      	b.n	8016da8 <floor+0xd0>
 8016dc2:	2500      	movs	r5, #0
 8016dc4:	462c      	mov	r4, r5
 8016dc6:	e7aa      	b.n	8016d1e <floor+0x46>
 8016dc8:	8800759c 	.word	0x8800759c
 8016dcc:	7e37e43c 	.word	0x7e37e43c
 8016dd0:	bff00000 	.word	0xbff00000
 8016dd4:	000fffff 	.word	0x000fffff

08016dd8 <fmax>:
 8016dd8:	b508      	push	{r3, lr}
 8016dda:	ed2d 8b04 	vpush	{d8-d9}
 8016dde:	eeb0 8a40 	vmov.f32	s16, s0
 8016de2:	eef0 8a60 	vmov.f32	s17, s1
 8016de6:	eeb0 9a41 	vmov.f32	s18, s2
 8016dea:	eef0 9a61 	vmov.f32	s19, s3
 8016dee:	f000 f81b 	bl	8016e28 <__fpclassifyd>
 8016df2:	b168      	cbz	r0, 8016e10 <fmax+0x38>
 8016df4:	eeb0 0a49 	vmov.f32	s0, s18
 8016df8:	eef0 0a69 	vmov.f32	s1, s19
 8016dfc:	f000 f814 	bl	8016e28 <__fpclassifyd>
 8016e00:	b150      	cbz	r0, 8016e18 <fmax+0x40>
 8016e02:	ec53 2b19 	vmov	r2, r3, d9
 8016e06:	ec51 0b18 	vmov	r0, r1, d8
 8016e0a:	f7e9 fe77 	bl	8000afc <__aeabi_dcmpgt>
 8016e0e:	b918      	cbnz	r0, 8016e18 <fmax+0x40>
 8016e10:	eeb0 8a49 	vmov.f32	s16, s18
 8016e14:	eef0 8a69 	vmov.f32	s17, s19
 8016e18:	eeb0 0a48 	vmov.f32	s0, s16
 8016e1c:	eef0 0a68 	vmov.f32	s1, s17
 8016e20:	ecbd 8b04 	vpop	{d8-d9}
 8016e24:	bd08      	pop	{r3, pc}
	...

08016e28 <__fpclassifyd>:
 8016e28:	ec51 0b10 	vmov	r0, r1, d0
 8016e2c:	b510      	push	{r4, lr}
 8016e2e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8016e32:	460b      	mov	r3, r1
 8016e34:	d019      	beq.n	8016e6a <__fpclassifyd+0x42>
 8016e36:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8016e3a:	490e      	ldr	r1, [pc, #56]	; (8016e74 <__fpclassifyd+0x4c>)
 8016e3c:	428a      	cmp	r2, r1
 8016e3e:	d90e      	bls.n	8016e5e <__fpclassifyd+0x36>
 8016e40:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8016e44:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8016e48:	428a      	cmp	r2, r1
 8016e4a:	d908      	bls.n	8016e5e <__fpclassifyd+0x36>
 8016e4c:	4a0a      	ldr	r2, [pc, #40]	; (8016e78 <__fpclassifyd+0x50>)
 8016e4e:	4213      	tst	r3, r2
 8016e50:	d007      	beq.n	8016e62 <__fpclassifyd+0x3a>
 8016e52:	4294      	cmp	r4, r2
 8016e54:	d107      	bne.n	8016e66 <__fpclassifyd+0x3e>
 8016e56:	fab0 f080 	clz	r0, r0
 8016e5a:	0940      	lsrs	r0, r0, #5
 8016e5c:	bd10      	pop	{r4, pc}
 8016e5e:	2004      	movs	r0, #4
 8016e60:	e7fc      	b.n	8016e5c <__fpclassifyd+0x34>
 8016e62:	2003      	movs	r0, #3
 8016e64:	e7fa      	b.n	8016e5c <__fpclassifyd+0x34>
 8016e66:	2000      	movs	r0, #0
 8016e68:	e7f8      	b.n	8016e5c <__fpclassifyd+0x34>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	d1ee      	bne.n	8016e4c <__fpclassifyd+0x24>
 8016e6e:	2002      	movs	r0, #2
 8016e70:	e7f4      	b.n	8016e5c <__fpclassifyd+0x34>
 8016e72:	bf00      	nop
 8016e74:	7fdfffff 	.word	0x7fdfffff
 8016e78:	7ff00000 	.word	0x7ff00000
 8016e7c:	00000000 	.word	0x00000000

08016e80 <sin>:
 8016e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e82:	ec53 2b10 	vmov	r2, r3, d0
 8016e86:	4826      	ldr	r0, [pc, #152]	; (8016f20 <sin+0xa0>)
 8016e88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016e8c:	4281      	cmp	r1, r0
 8016e8e:	dc07      	bgt.n	8016ea0 <sin+0x20>
 8016e90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8016f18 <sin+0x98>
 8016e94:	2000      	movs	r0, #0
 8016e96:	f001 fb13 	bl	80184c0 <__kernel_sin>
 8016e9a:	ec51 0b10 	vmov	r0, r1, d0
 8016e9e:	e007      	b.n	8016eb0 <sin+0x30>
 8016ea0:	4820      	ldr	r0, [pc, #128]	; (8016f24 <sin+0xa4>)
 8016ea2:	4281      	cmp	r1, r0
 8016ea4:	dd09      	ble.n	8016eba <sin+0x3a>
 8016ea6:	ee10 0a10 	vmov	r0, s0
 8016eaa:	4619      	mov	r1, r3
 8016eac:	f7e9 f9de 	bl	800026c <__aeabi_dsub>
 8016eb0:	ec41 0b10 	vmov	d0, r0, r1
 8016eb4:	b005      	add	sp, #20
 8016eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016eba:	4668      	mov	r0, sp
 8016ebc:	f000 fc38 	bl	8017730 <__ieee754_rem_pio2>
 8016ec0:	f000 0003 	and.w	r0, r0, #3
 8016ec4:	2801      	cmp	r0, #1
 8016ec6:	d008      	beq.n	8016eda <sin+0x5a>
 8016ec8:	2802      	cmp	r0, #2
 8016eca:	d00d      	beq.n	8016ee8 <sin+0x68>
 8016ecc:	b9d0      	cbnz	r0, 8016f04 <sin+0x84>
 8016ece:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016ed2:	ed9d 0b00 	vldr	d0, [sp]
 8016ed6:	2001      	movs	r0, #1
 8016ed8:	e7dd      	b.n	8016e96 <sin+0x16>
 8016eda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016ede:	ed9d 0b00 	vldr	d0, [sp]
 8016ee2:	f000 fee5 	bl	8017cb0 <__kernel_cos>
 8016ee6:	e7d8      	b.n	8016e9a <sin+0x1a>
 8016ee8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016eec:	ed9d 0b00 	vldr	d0, [sp]
 8016ef0:	2001      	movs	r0, #1
 8016ef2:	f001 fae5 	bl	80184c0 <__kernel_sin>
 8016ef6:	ec53 2b10 	vmov	r2, r3, d0
 8016efa:	ee10 0a10 	vmov	r0, s0
 8016efe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016f02:	e7d5      	b.n	8016eb0 <sin+0x30>
 8016f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016f08:	ed9d 0b00 	vldr	d0, [sp]
 8016f0c:	f000 fed0 	bl	8017cb0 <__kernel_cos>
 8016f10:	e7f1      	b.n	8016ef6 <sin+0x76>
 8016f12:	bf00      	nop
 8016f14:	f3af 8000 	nop.w
	...
 8016f20:	3fe921fb 	.word	0x3fe921fb
 8016f24:	7fefffff 	.word	0x7fefffff

08016f28 <exp>:
 8016f28:	b538      	push	{r3, r4, r5, lr}
 8016f2a:	ed2d 8b02 	vpush	{d8}
 8016f2e:	ec55 4b10 	vmov	r4, r5, d0
 8016f32:	f000 f8c5 	bl	80170c0 <__ieee754_exp>
 8016f36:	4b22      	ldr	r3, [pc, #136]	; (8016fc0 <exp+0x98>)
 8016f38:	eeb0 8a40 	vmov.f32	s16, s0
 8016f3c:	eef0 8a60 	vmov.f32	s17, s1
 8016f40:	f993 3000 	ldrsb.w	r3, [r3]
 8016f44:	3301      	adds	r3, #1
 8016f46:	d012      	beq.n	8016f6e <exp+0x46>
 8016f48:	ec45 4b10 	vmov	d0, r4, r5
 8016f4c:	f001 fb7f 	bl	801864e <finite>
 8016f50:	b168      	cbz	r0, 8016f6e <exp+0x46>
 8016f52:	a313      	add	r3, pc, #76	; (adr r3, 8016fa0 <exp+0x78>)
 8016f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f58:	4620      	mov	r0, r4
 8016f5a:	4629      	mov	r1, r5
 8016f5c:	f7e9 fdce 	bl	8000afc <__aeabi_dcmpgt>
 8016f60:	b160      	cbz	r0, 8016f7c <exp+0x54>
 8016f62:	f7ff fda1 	bl	8016aa8 <__errno>
 8016f66:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8016fa8 <exp+0x80>
 8016f6a:	2322      	movs	r3, #34	; 0x22
 8016f6c:	6003      	str	r3, [r0, #0]
 8016f6e:	eeb0 0a48 	vmov.f32	s0, s16
 8016f72:	eef0 0a68 	vmov.f32	s1, s17
 8016f76:	ecbd 8b02 	vpop	{d8}
 8016f7a:	bd38      	pop	{r3, r4, r5, pc}
 8016f7c:	a30c      	add	r3, pc, #48	; (adr r3, 8016fb0 <exp+0x88>)
 8016f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f82:	4620      	mov	r0, r4
 8016f84:	4629      	mov	r1, r5
 8016f86:	f7e9 fd9b 	bl	8000ac0 <__aeabi_dcmplt>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	d0ef      	beq.n	8016f6e <exp+0x46>
 8016f8e:	f7ff fd8b 	bl	8016aa8 <__errno>
 8016f92:	2322      	movs	r3, #34	; 0x22
 8016f94:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8016fb8 <exp+0x90>
 8016f98:	6003      	str	r3, [r0, #0]
 8016f9a:	e7e8      	b.n	8016f6e <exp+0x46>
 8016f9c:	f3af 8000 	nop.w
 8016fa0:	fefa39ef 	.word	0xfefa39ef
 8016fa4:	40862e42 	.word	0x40862e42
 8016fa8:	00000000 	.word	0x00000000
 8016fac:	7ff00000 	.word	0x7ff00000
 8016fb0:	d52d3051 	.word	0xd52d3051
 8016fb4:	c0874910 	.word	0xc0874910
	...
 8016fc0:	20001358 	.word	0x20001358
 8016fc4:	00000000 	.word	0x00000000

08016fc8 <log>:
 8016fc8:	b538      	push	{r3, r4, r5, lr}
 8016fca:	ed2d 8b02 	vpush	{d8}
 8016fce:	ec55 4b10 	vmov	r4, r5, d0
 8016fd2:	f000 f9f1 	bl	80173b8 <__ieee754_log>
 8016fd6:	4b1e      	ldr	r3, [pc, #120]	; (8017050 <log+0x88>)
 8016fd8:	eeb0 8a40 	vmov.f32	s16, s0
 8016fdc:	eef0 8a60 	vmov.f32	s17, s1
 8016fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8016fe4:	3301      	adds	r3, #1
 8016fe6:	d01a      	beq.n	801701e <log+0x56>
 8016fe8:	4622      	mov	r2, r4
 8016fea:	462b      	mov	r3, r5
 8016fec:	4620      	mov	r0, r4
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f7e9 fd8e 	bl	8000b10 <__aeabi_dcmpun>
 8016ff4:	b998      	cbnz	r0, 801701e <log+0x56>
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	4629      	mov	r1, r5
 8016ffe:	f7e9 fd7d 	bl	8000afc <__aeabi_dcmpgt>
 8017002:	b960      	cbnz	r0, 801701e <log+0x56>
 8017004:	2200      	movs	r2, #0
 8017006:	2300      	movs	r3, #0
 8017008:	4620      	mov	r0, r4
 801700a:	4629      	mov	r1, r5
 801700c:	f7e9 fd4e 	bl	8000aac <__aeabi_dcmpeq>
 8017010:	b160      	cbz	r0, 801702c <log+0x64>
 8017012:	f7ff fd49 	bl	8016aa8 <__errno>
 8017016:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8017048 <log+0x80>
 801701a:	2322      	movs	r3, #34	; 0x22
 801701c:	6003      	str	r3, [r0, #0]
 801701e:	eeb0 0a48 	vmov.f32	s0, s16
 8017022:	eef0 0a68 	vmov.f32	s1, s17
 8017026:	ecbd 8b02 	vpop	{d8}
 801702a:	bd38      	pop	{r3, r4, r5, pc}
 801702c:	f7ff fd3c 	bl	8016aa8 <__errno>
 8017030:	ecbd 8b02 	vpop	{d8}
 8017034:	2321      	movs	r3, #33	; 0x21
 8017036:	6003      	str	r3, [r0, #0]
 8017038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801703c:	4805      	ldr	r0, [pc, #20]	; (8017054 <log+0x8c>)
 801703e:	f001 bb13 	b.w	8018668 <nan>
 8017042:	bf00      	nop
 8017044:	f3af 8000 	nop.w
 8017048:	00000000 	.word	0x00000000
 801704c:	fff00000 	.word	0xfff00000
 8017050:	20001358 	.word	0x20001358
 8017054:	08018b64 	.word	0x08018b64

08017058 <sqrt>:
 8017058:	b538      	push	{r3, r4, r5, lr}
 801705a:	ed2d 8b02 	vpush	{d8}
 801705e:	ec55 4b10 	vmov	r4, r5, d0
 8017062:	f000 fd6f 	bl	8017b44 <__ieee754_sqrt>
 8017066:	4b15      	ldr	r3, [pc, #84]	; (80170bc <sqrt+0x64>)
 8017068:	eeb0 8a40 	vmov.f32	s16, s0
 801706c:	eef0 8a60 	vmov.f32	s17, s1
 8017070:	f993 3000 	ldrsb.w	r3, [r3]
 8017074:	3301      	adds	r3, #1
 8017076:	d019      	beq.n	80170ac <sqrt+0x54>
 8017078:	4622      	mov	r2, r4
 801707a:	462b      	mov	r3, r5
 801707c:	4620      	mov	r0, r4
 801707e:	4629      	mov	r1, r5
 8017080:	f7e9 fd46 	bl	8000b10 <__aeabi_dcmpun>
 8017084:	b990      	cbnz	r0, 80170ac <sqrt+0x54>
 8017086:	2200      	movs	r2, #0
 8017088:	2300      	movs	r3, #0
 801708a:	4620      	mov	r0, r4
 801708c:	4629      	mov	r1, r5
 801708e:	f7e9 fd17 	bl	8000ac0 <__aeabi_dcmplt>
 8017092:	b158      	cbz	r0, 80170ac <sqrt+0x54>
 8017094:	f7ff fd08 	bl	8016aa8 <__errno>
 8017098:	2321      	movs	r3, #33	; 0x21
 801709a:	6003      	str	r3, [r0, #0]
 801709c:	2200      	movs	r2, #0
 801709e:	2300      	movs	r3, #0
 80170a0:	4610      	mov	r0, r2
 80170a2:	4619      	mov	r1, r3
 80170a4:	f7e9 fbc4 	bl	8000830 <__aeabi_ddiv>
 80170a8:	ec41 0b18 	vmov	d8, r0, r1
 80170ac:	eeb0 0a48 	vmov.f32	s0, s16
 80170b0:	eef0 0a68 	vmov.f32	s1, s17
 80170b4:	ecbd 8b02 	vpop	{d8}
 80170b8:	bd38      	pop	{r3, r4, r5, pc}
 80170ba:	bf00      	nop
 80170bc:	20001358 	.word	0x20001358

080170c0 <__ieee754_exp>:
 80170c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170c4:	ec55 4b10 	vmov	r4, r5, d0
 80170c8:	49b1      	ldr	r1, [pc, #708]	; (8017390 <__ieee754_exp+0x2d0>)
 80170ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80170ce:	428b      	cmp	r3, r1
 80170d0:	ed2d 8b04 	vpush	{d8-d9}
 80170d4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80170d8:	d937      	bls.n	801714a <__ieee754_exp+0x8a>
 80170da:	49ae      	ldr	r1, [pc, #696]	; (8017394 <__ieee754_exp+0x2d4>)
 80170dc:	428b      	cmp	r3, r1
 80170de:	d916      	bls.n	801710e <__ieee754_exp+0x4e>
 80170e0:	ee10 3a10 	vmov	r3, s0
 80170e4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80170e8:	4313      	orrs	r3, r2
 80170ea:	d009      	beq.n	8017100 <__ieee754_exp+0x40>
 80170ec:	ee10 2a10 	vmov	r2, s0
 80170f0:	462b      	mov	r3, r5
 80170f2:	4620      	mov	r0, r4
 80170f4:	4629      	mov	r1, r5
 80170f6:	f7e9 f8bb 	bl	8000270 <__adddf3>
 80170fa:	4604      	mov	r4, r0
 80170fc:	460d      	mov	r5, r1
 80170fe:	e000      	b.n	8017102 <__ieee754_exp+0x42>
 8017100:	bb06      	cbnz	r6, 8017144 <__ieee754_exp+0x84>
 8017102:	ecbd 8b04 	vpop	{d8-d9}
 8017106:	ec45 4b10 	vmov	d0, r4, r5
 801710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801710e:	a38a      	add	r3, pc, #552	; (adr r3, 8017338 <__ieee754_exp+0x278>)
 8017110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017114:	ee10 0a10 	vmov	r0, s0
 8017118:	4629      	mov	r1, r5
 801711a:	f7e9 fcef 	bl	8000afc <__aeabi_dcmpgt>
 801711e:	b138      	cbz	r0, 8017130 <__ieee754_exp+0x70>
 8017120:	a387      	add	r3, pc, #540	; (adr r3, 8017340 <__ieee754_exp+0x280>)
 8017122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017126:	4610      	mov	r0, r2
 8017128:	4619      	mov	r1, r3
 801712a:	f7e9 fa57 	bl	80005dc <__aeabi_dmul>
 801712e:	e7e4      	b.n	80170fa <__ieee754_exp+0x3a>
 8017130:	a385      	add	r3, pc, #532	; (adr r3, 8017348 <__ieee754_exp+0x288>)
 8017132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017136:	4620      	mov	r0, r4
 8017138:	4629      	mov	r1, r5
 801713a:	f7e9 fcc1 	bl	8000ac0 <__aeabi_dcmplt>
 801713e:	2800      	cmp	r0, #0
 8017140:	f000 8087 	beq.w	8017252 <__ieee754_exp+0x192>
 8017144:	2400      	movs	r4, #0
 8017146:	2500      	movs	r5, #0
 8017148:	e7db      	b.n	8017102 <__ieee754_exp+0x42>
 801714a:	4a93      	ldr	r2, [pc, #588]	; (8017398 <__ieee754_exp+0x2d8>)
 801714c:	4293      	cmp	r3, r2
 801714e:	f240 80ac 	bls.w	80172aa <__ieee754_exp+0x1ea>
 8017152:	4a92      	ldr	r2, [pc, #584]	; (801739c <__ieee754_exp+0x2dc>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d87c      	bhi.n	8017252 <__ieee754_exp+0x192>
 8017158:	4b91      	ldr	r3, [pc, #580]	; (80173a0 <__ieee754_exp+0x2e0>)
 801715a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017162:	ee10 0a10 	vmov	r0, s0
 8017166:	4629      	mov	r1, r5
 8017168:	f7e9 f880 	bl	800026c <__aeabi_dsub>
 801716c:	4b8d      	ldr	r3, [pc, #564]	; (80173a4 <__ieee754_exp+0x2e4>)
 801716e:	00f7      	lsls	r7, r6, #3
 8017170:	443b      	add	r3, r7
 8017172:	ed93 7b00 	vldr	d7, [r3]
 8017176:	f1c6 0a01 	rsb	sl, r6, #1
 801717a:	4680      	mov	r8, r0
 801717c:	4689      	mov	r9, r1
 801717e:	ebaa 0a06 	sub.w	sl, sl, r6
 8017182:	eeb0 8a47 	vmov.f32	s16, s14
 8017186:	eef0 8a67 	vmov.f32	s17, s15
 801718a:	ec53 2b18 	vmov	r2, r3, d8
 801718e:	4640      	mov	r0, r8
 8017190:	4649      	mov	r1, r9
 8017192:	f7e9 f86b 	bl	800026c <__aeabi_dsub>
 8017196:	4604      	mov	r4, r0
 8017198:	460d      	mov	r5, r1
 801719a:	4622      	mov	r2, r4
 801719c:	462b      	mov	r3, r5
 801719e:	4620      	mov	r0, r4
 80171a0:	4629      	mov	r1, r5
 80171a2:	f7e9 fa1b 	bl	80005dc <__aeabi_dmul>
 80171a6:	a36a      	add	r3, pc, #424	; (adr r3, 8017350 <__ieee754_exp+0x290>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	4606      	mov	r6, r0
 80171ae:	460f      	mov	r7, r1
 80171b0:	f7e9 fa14 	bl	80005dc <__aeabi_dmul>
 80171b4:	a368      	add	r3, pc, #416	; (adr r3, 8017358 <__ieee754_exp+0x298>)
 80171b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ba:	f7e9 f857 	bl	800026c <__aeabi_dsub>
 80171be:	4632      	mov	r2, r6
 80171c0:	463b      	mov	r3, r7
 80171c2:	f7e9 fa0b 	bl	80005dc <__aeabi_dmul>
 80171c6:	a366      	add	r3, pc, #408	; (adr r3, 8017360 <__ieee754_exp+0x2a0>)
 80171c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171cc:	f7e9 f850 	bl	8000270 <__adddf3>
 80171d0:	4632      	mov	r2, r6
 80171d2:	463b      	mov	r3, r7
 80171d4:	f7e9 fa02 	bl	80005dc <__aeabi_dmul>
 80171d8:	a363      	add	r3, pc, #396	; (adr r3, 8017368 <__ieee754_exp+0x2a8>)
 80171da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171de:	f7e9 f845 	bl	800026c <__aeabi_dsub>
 80171e2:	4632      	mov	r2, r6
 80171e4:	463b      	mov	r3, r7
 80171e6:	f7e9 f9f9 	bl	80005dc <__aeabi_dmul>
 80171ea:	a361      	add	r3, pc, #388	; (adr r3, 8017370 <__ieee754_exp+0x2b0>)
 80171ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f0:	f7e9 f83e 	bl	8000270 <__adddf3>
 80171f4:	4632      	mov	r2, r6
 80171f6:	463b      	mov	r3, r7
 80171f8:	f7e9 f9f0 	bl	80005dc <__aeabi_dmul>
 80171fc:	4602      	mov	r2, r0
 80171fe:	460b      	mov	r3, r1
 8017200:	4620      	mov	r0, r4
 8017202:	4629      	mov	r1, r5
 8017204:	f7e9 f832 	bl	800026c <__aeabi_dsub>
 8017208:	4602      	mov	r2, r0
 801720a:	460b      	mov	r3, r1
 801720c:	4606      	mov	r6, r0
 801720e:	460f      	mov	r7, r1
 8017210:	4620      	mov	r0, r4
 8017212:	4629      	mov	r1, r5
 8017214:	f7e9 f9e2 	bl	80005dc <__aeabi_dmul>
 8017218:	ec41 0b19 	vmov	d9, r0, r1
 801721c:	f1ba 0f00 	cmp.w	sl, #0
 8017220:	d15d      	bne.n	80172de <__ieee754_exp+0x21e>
 8017222:	2200      	movs	r2, #0
 8017224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017228:	4630      	mov	r0, r6
 801722a:	4639      	mov	r1, r7
 801722c:	f7e9 f81e 	bl	800026c <__aeabi_dsub>
 8017230:	4602      	mov	r2, r0
 8017232:	460b      	mov	r3, r1
 8017234:	ec51 0b19 	vmov	r0, r1, d9
 8017238:	f7e9 fafa 	bl	8000830 <__aeabi_ddiv>
 801723c:	4622      	mov	r2, r4
 801723e:	462b      	mov	r3, r5
 8017240:	f7e9 f814 	bl	800026c <__aeabi_dsub>
 8017244:	4602      	mov	r2, r0
 8017246:	460b      	mov	r3, r1
 8017248:	2000      	movs	r0, #0
 801724a:	4957      	ldr	r1, [pc, #348]	; (80173a8 <__ieee754_exp+0x2e8>)
 801724c:	f7e9 f80e 	bl	800026c <__aeabi_dsub>
 8017250:	e753      	b.n	80170fa <__ieee754_exp+0x3a>
 8017252:	4856      	ldr	r0, [pc, #344]	; (80173ac <__ieee754_exp+0x2ec>)
 8017254:	a348      	add	r3, pc, #288	; (adr r3, 8017378 <__ieee754_exp+0x2b8>)
 8017256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801725a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801725e:	4629      	mov	r1, r5
 8017260:	4620      	mov	r0, r4
 8017262:	f7e9 f9bb 	bl	80005dc <__aeabi_dmul>
 8017266:	e9d6 2300 	ldrd	r2, r3, [r6]
 801726a:	f7e9 f801 	bl	8000270 <__adddf3>
 801726e:	f7e9 fc65 	bl	8000b3c <__aeabi_d2iz>
 8017272:	4682      	mov	sl, r0
 8017274:	f7e9 f948 	bl	8000508 <__aeabi_i2d>
 8017278:	a341      	add	r3, pc, #260	; (adr r3, 8017380 <__ieee754_exp+0x2c0>)
 801727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727e:	4606      	mov	r6, r0
 8017280:	460f      	mov	r7, r1
 8017282:	f7e9 f9ab 	bl	80005dc <__aeabi_dmul>
 8017286:	4602      	mov	r2, r0
 8017288:	460b      	mov	r3, r1
 801728a:	4620      	mov	r0, r4
 801728c:	4629      	mov	r1, r5
 801728e:	f7e8 ffed 	bl	800026c <__aeabi_dsub>
 8017292:	a33d      	add	r3, pc, #244	; (adr r3, 8017388 <__ieee754_exp+0x2c8>)
 8017294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017298:	4680      	mov	r8, r0
 801729a:	4689      	mov	r9, r1
 801729c:	4630      	mov	r0, r6
 801729e:	4639      	mov	r1, r7
 80172a0:	f7e9 f99c 	bl	80005dc <__aeabi_dmul>
 80172a4:	ec41 0b18 	vmov	d8, r0, r1
 80172a8:	e76f      	b.n	801718a <__ieee754_exp+0xca>
 80172aa:	4a41      	ldr	r2, [pc, #260]	; (80173b0 <__ieee754_exp+0x2f0>)
 80172ac:	4293      	cmp	r3, r2
 80172ae:	d811      	bhi.n	80172d4 <__ieee754_exp+0x214>
 80172b0:	a323      	add	r3, pc, #140	; (adr r3, 8017340 <__ieee754_exp+0x280>)
 80172b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b6:	ee10 0a10 	vmov	r0, s0
 80172ba:	4629      	mov	r1, r5
 80172bc:	f7e8 ffd8 	bl	8000270 <__adddf3>
 80172c0:	4b39      	ldr	r3, [pc, #228]	; (80173a8 <__ieee754_exp+0x2e8>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	f7e9 fc1a 	bl	8000afc <__aeabi_dcmpgt>
 80172c8:	b138      	cbz	r0, 80172da <__ieee754_exp+0x21a>
 80172ca:	4b37      	ldr	r3, [pc, #220]	; (80173a8 <__ieee754_exp+0x2e8>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	4620      	mov	r0, r4
 80172d0:	4629      	mov	r1, r5
 80172d2:	e710      	b.n	80170f6 <__ieee754_exp+0x36>
 80172d4:	f04f 0a00 	mov.w	sl, #0
 80172d8:	e75f      	b.n	801719a <__ieee754_exp+0xda>
 80172da:	4682      	mov	sl, r0
 80172dc:	e75d      	b.n	801719a <__ieee754_exp+0xda>
 80172de:	4632      	mov	r2, r6
 80172e0:	463b      	mov	r3, r7
 80172e2:	2000      	movs	r0, #0
 80172e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80172e8:	f7e8 ffc0 	bl	800026c <__aeabi_dsub>
 80172ec:	4602      	mov	r2, r0
 80172ee:	460b      	mov	r3, r1
 80172f0:	ec51 0b19 	vmov	r0, r1, d9
 80172f4:	f7e9 fa9c 	bl	8000830 <__aeabi_ddiv>
 80172f8:	4602      	mov	r2, r0
 80172fa:	460b      	mov	r3, r1
 80172fc:	ec51 0b18 	vmov	r0, r1, d8
 8017300:	f7e8 ffb4 	bl	800026c <__aeabi_dsub>
 8017304:	4642      	mov	r2, r8
 8017306:	464b      	mov	r3, r9
 8017308:	f7e8 ffb0 	bl	800026c <__aeabi_dsub>
 801730c:	4602      	mov	r2, r0
 801730e:	460b      	mov	r3, r1
 8017310:	2000      	movs	r0, #0
 8017312:	4925      	ldr	r1, [pc, #148]	; (80173a8 <__ieee754_exp+0x2e8>)
 8017314:	f7e8 ffaa 	bl	800026c <__aeabi_dsub>
 8017318:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801731c:	4592      	cmp	sl, r2
 801731e:	db02      	blt.n	8017326 <__ieee754_exp+0x266>
 8017320:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8017324:	e6e9      	b.n	80170fa <__ieee754_exp+0x3a>
 8017326:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801732a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801732e:	2200      	movs	r2, #0
 8017330:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8017334:	e6f9      	b.n	801712a <__ieee754_exp+0x6a>
 8017336:	bf00      	nop
 8017338:	fefa39ef 	.word	0xfefa39ef
 801733c:	40862e42 	.word	0x40862e42
 8017340:	8800759c 	.word	0x8800759c
 8017344:	7e37e43c 	.word	0x7e37e43c
 8017348:	d52d3051 	.word	0xd52d3051
 801734c:	c0874910 	.word	0xc0874910
 8017350:	72bea4d0 	.word	0x72bea4d0
 8017354:	3e663769 	.word	0x3e663769
 8017358:	c5d26bf1 	.word	0xc5d26bf1
 801735c:	3ebbbd41 	.word	0x3ebbbd41
 8017360:	af25de2c 	.word	0xaf25de2c
 8017364:	3f11566a 	.word	0x3f11566a
 8017368:	16bebd93 	.word	0x16bebd93
 801736c:	3f66c16c 	.word	0x3f66c16c
 8017370:	5555553e 	.word	0x5555553e
 8017374:	3fc55555 	.word	0x3fc55555
 8017378:	652b82fe 	.word	0x652b82fe
 801737c:	3ff71547 	.word	0x3ff71547
 8017380:	fee00000 	.word	0xfee00000
 8017384:	3fe62e42 	.word	0x3fe62e42
 8017388:	35793c76 	.word	0x35793c76
 801738c:	3dea39ef 	.word	0x3dea39ef
 8017390:	40862e41 	.word	0x40862e41
 8017394:	7fefffff 	.word	0x7fefffff
 8017398:	3fd62e42 	.word	0x3fd62e42
 801739c:	3ff0a2b1 	.word	0x3ff0a2b1
 80173a0:	08018b78 	.word	0x08018b78
 80173a4:	08018b88 	.word	0x08018b88
 80173a8:	3ff00000 	.word	0x3ff00000
 80173ac:	08018b68 	.word	0x08018b68
 80173b0:	3e2fffff 	.word	0x3e2fffff
 80173b4:	00000000 	.word	0x00000000

080173b8 <__ieee754_log>:
 80173b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173bc:	ec51 0b10 	vmov	r0, r1, d0
 80173c0:	ed2d 8b04 	vpush	{d8-d9}
 80173c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80173c8:	b083      	sub	sp, #12
 80173ca:	460d      	mov	r5, r1
 80173cc:	da29      	bge.n	8017422 <__ieee754_log+0x6a>
 80173ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80173d2:	4303      	orrs	r3, r0
 80173d4:	ee10 2a10 	vmov	r2, s0
 80173d8:	d10c      	bne.n	80173f4 <__ieee754_log+0x3c>
 80173da:	49cf      	ldr	r1, [pc, #828]	; (8017718 <__ieee754_log+0x360>)
 80173dc:	2200      	movs	r2, #0
 80173de:	2300      	movs	r3, #0
 80173e0:	2000      	movs	r0, #0
 80173e2:	f7e9 fa25 	bl	8000830 <__aeabi_ddiv>
 80173e6:	ec41 0b10 	vmov	d0, r0, r1
 80173ea:	b003      	add	sp, #12
 80173ec:	ecbd 8b04 	vpop	{d8-d9}
 80173f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f4:	2900      	cmp	r1, #0
 80173f6:	da05      	bge.n	8017404 <__ieee754_log+0x4c>
 80173f8:	460b      	mov	r3, r1
 80173fa:	f7e8 ff37 	bl	800026c <__aeabi_dsub>
 80173fe:	2200      	movs	r2, #0
 8017400:	2300      	movs	r3, #0
 8017402:	e7ee      	b.n	80173e2 <__ieee754_log+0x2a>
 8017404:	4bc5      	ldr	r3, [pc, #788]	; (801771c <__ieee754_log+0x364>)
 8017406:	2200      	movs	r2, #0
 8017408:	f7e9 f8e8 	bl	80005dc <__aeabi_dmul>
 801740c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8017410:	460d      	mov	r5, r1
 8017412:	4ac3      	ldr	r2, [pc, #780]	; (8017720 <__ieee754_log+0x368>)
 8017414:	4295      	cmp	r5, r2
 8017416:	dd06      	ble.n	8017426 <__ieee754_log+0x6e>
 8017418:	4602      	mov	r2, r0
 801741a:	460b      	mov	r3, r1
 801741c:	f7e8 ff28 	bl	8000270 <__adddf3>
 8017420:	e7e1      	b.n	80173e6 <__ieee754_log+0x2e>
 8017422:	2300      	movs	r3, #0
 8017424:	e7f5      	b.n	8017412 <__ieee754_log+0x5a>
 8017426:	152c      	asrs	r4, r5, #20
 8017428:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801742c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8017430:	441c      	add	r4, r3
 8017432:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8017436:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801743a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801743e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8017442:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8017446:	ea42 0105 	orr.w	r1, r2, r5
 801744a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801744e:	2200      	movs	r2, #0
 8017450:	4bb4      	ldr	r3, [pc, #720]	; (8017724 <__ieee754_log+0x36c>)
 8017452:	f7e8 ff0b 	bl	800026c <__aeabi_dsub>
 8017456:	1cab      	adds	r3, r5, #2
 8017458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801745c:	2b02      	cmp	r3, #2
 801745e:	4682      	mov	sl, r0
 8017460:	468b      	mov	fp, r1
 8017462:	f04f 0200 	mov.w	r2, #0
 8017466:	dc53      	bgt.n	8017510 <__ieee754_log+0x158>
 8017468:	2300      	movs	r3, #0
 801746a:	f7e9 fb1f 	bl	8000aac <__aeabi_dcmpeq>
 801746e:	b1d0      	cbz	r0, 80174a6 <__ieee754_log+0xee>
 8017470:	2c00      	cmp	r4, #0
 8017472:	f000 8122 	beq.w	80176ba <__ieee754_log+0x302>
 8017476:	4620      	mov	r0, r4
 8017478:	f7e9 f846 	bl	8000508 <__aeabi_i2d>
 801747c:	a390      	add	r3, pc, #576	; (adr r3, 80176c0 <__ieee754_log+0x308>)
 801747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017482:	4606      	mov	r6, r0
 8017484:	460f      	mov	r7, r1
 8017486:	f7e9 f8a9 	bl	80005dc <__aeabi_dmul>
 801748a:	a38f      	add	r3, pc, #572	; (adr r3, 80176c8 <__ieee754_log+0x310>)
 801748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017490:	4604      	mov	r4, r0
 8017492:	460d      	mov	r5, r1
 8017494:	4630      	mov	r0, r6
 8017496:	4639      	mov	r1, r7
 8017498:	f7e9 f8a0 	bl	80005dc <__aeabi_dmul>
 801749c:	4602      	mov	r2, r0
 801749e:	460b      	mov	r3, r1
 80174a0:	4620      	mov	r0, r4
 80174a2:	4629      	mov	r1, r5
 80174a4:	e7ba      	b.n	801741c <__ieee754_log+0x64>
 80174a6:	a38a      	add	r3, pc, #552	; (adr r3, 80176d0 <__ieee754_log+0x318>)
 80174a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ac:	4650      	mov	r0, sl
 80174ae:	4659      	mov	r1, fp
 80174b0:	f7e9 f894 	bl	80005dc <__aeabi_dmul>
 80174b4:	4602      	mov	r2, r0
 80174b6:	460b      	mov	r3, r1
 80174b8:	2000      	movs	r0, #0
 80174ba:	499b      	ldr	r1, [pc, #620]	; (8017728 <__ieee754_log+0x370>)
 80174bc:	f7e8 fed6 	bl	800026c <__aeabi_dsub>
 80174c0:	4652      	mov	r2, sl
 80174c2:	4606      	mov	r6, r0
 80174c4:	460f      	mov	r7, r1
 80174c6:	465b      	mov	r3, fp
 80174c8:	4650      	mov	r0, sl
 80174ca:	4659      	mov	r1, fp
 80174cc:	f7e9 f886 	bl	80005dc <__aeabi_dmul>
 80174d0:	4602      	mov	r2, r0
 80174d2:	460b      	mov	r3, r1
 80174d4:	4630      	mov	r0, r6
 80174d6:	4639      	mov	r1, r7
 80174d8:	f7e9 f880 	bl	80005dc <__aeabi_dmul>
 80174dc:	4606      	mov	r6, r0
 80174de:	460f      	mov	r7, r1
 80174e0:	b914      	cbnz	r4, 80174e8 <__ieee754_log+0x130>
 80174e2:	4632      	mov	r2, r6
 80174e4:	463b      	mov	r3, r7
 80174e6:	e0a2      	b.n	801762e <__ieee754_log+0x276>
 80174e8:	4620      	mov	r0, r4
 80174ea:	f7e9 f80d 	bl	8000508 <__aeabi_i2d>
 80174ee:	a374      	add	r3, pc, #464	; (adr r3, 80176c0 <__ieee754_log+0x308>)
 80174f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f4:	4680      	mov	r8, r0
 80174f6:	4689      	mov	r9, r1
 80174f8:	f7e9 f870 	bl	80005dc <__aeabi_dmul>
 80174fc:	a372      	add	r3, pc, #456	; (adr r3, 80176c8 <__ieee754_log+0x310>)
 80174fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017502:	4604      	mov	r4, r0
 8017504:	460d      	mov	r5, r1
 8017506:	4640      	mov	r0, r8
 8017508:	4649      	mov	r1, r9
 801750a:	f7e9 f867 	bl	80005dc <__aeabi_dmul>
 801750e:	e0a7      	b.n	8017660 <__ieee754_log+0x2a8>
 8017510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017514:	f7e8 feac 	bl	8000270 <__adddf3>
 8017518:	4602      	mov	r2, r0
 801751a:	460b      	mov	r3, r1
 801751c:	4650      	mov	r0, sl
 801751e:	4659      	mov	r1, fp
 8017520:	f7e9 f986 	bl	8000830 <__aeabi_ddiv>
 8017524:	ec41 0b18 	vmov	d8, r0, r1
 8017528:	4620      	mov	r0, r4
 801752a:	f7e8 ffed 	bl	8000508 <__aeabi_i2d>
 801752e:	ec53 2b18 	vmov	r2, r3, d8
 8017532:	ec41 0b19 	vmov	d9, r0, r1
 8017536:	ec51 0b18 	vmov	r0, r1, d8
 801753a:	f7e9 f84f 	bl	80005dc <__aeabi_dmul>
 801753e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8017542:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8017546:	9301      	str	r3, [sp, #4]
 8017548:	4602      	mov	r2, r0
 801754a:	460b      	mov	r3, r1
 801754c:	4680      	mov	r8, r0
 801754e:	4689      	mov	r9, r1
 8017550:	f7e9 f844 	bl	80005dc <__aeabi_dmul>
 8017554:	a360      	add	r3, pc, #384	; (adr r3, 80176d8 <__ieee754_log+0x320>)
 8017556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801755a:	4606      	mov	r6, r0
 801755c:	460f      	mov	r7, r1
 801755e:	f7e9 f83d 	bl	80005dc <__aeabi_dmul>
 8017562:	a35f      	add	r3, pc, #380	; (adr r3, 80176e0 <__ieee754_log+0x328>)
 8017564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017568:	f7e8 fe82 	bl	8000270 <__adddf3>
 801756c:	4632      	mov	r2, r6
 801756e:	463b      	mov	r3, r7
 8017570:	f7e9 f834 	bl	80005dc <__aeabi_dmul>
 8017574:	a35c      	add	r3, pc, #368	; (adr r3, 80176e8 <__ieee754_log+0x330>)
 8017576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757a:	f7e8 fe79 	bl	8000270 <__adddf3>
 801757e:	4632      	mov	r2, r6
 8017580:	463b      	mov	r3, r7
 8017582:	f7e9 f82b 	bl	80005dc <__aeabi_dmul>
 8017586:	a35a      	add	r3, pc, #360	; (adr r3, 80176f0 <__ieee754_log+0x338>)
 8017588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758c:	f7e8 fe70 	bl	8000270 <__adddf3>
 8017590:	4642      	mov	r2, r8
 8017592:	464b      	mov	r3, r9
 8017594:	f7e9 f822 	bl	80005dc <__aeabi_dmul>
 8017598:	a357      	add	r3, pc, #348	; (adr r3, 80176f8 <__ieee754_log+0x340>)
 801759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801759e:	4680      	mov	r8, r0
 80175a0:	4689      	mov	r9, r1
 80175a2:	4630      	mov	r0, r6
 80175a4:	4639      	mov	r1, r7
 80175a6:	f7e9 f819 	bl	80005dc <__aeabi_dmul>
 80175aa:	a355      	add	r3, pc, #340	; (adr r3, 8017700 <__ieee754_log+0x348>)
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	f7e8 fe5e 	bl	8000270 <__adddf3>
 80175b4:	4632      	mov	r2, r6
 80175b6:	463b      	mov	r3, r7
 80175b8:	f7e9 f810 	bl	80005dc <__aeabi_dmul>
 80175bc:	a352      	add	r3, pc, #328	; (adr r3, 8017708 <__ieee754_log+0x350>)
 80175be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c2:	f7e8 fe55 	bl	8000270 <__adddf3>
 80175c6:	4632      	mov	r2, r6
 80175c8:	463b      	mov	r3, r7
 80175ca:	f7e9 f807 	bl	80005dc <__aeabi_dmul>
 80175ce:	460b      	mov	r3, r1
 80175d0:	4602      	mov	r2, r0
 80175d2:	4649      	mov	r1, r9
 80175d4:	4640      	mov	r0, r8
 80175d6:	f7e8 fe4b 	bl	8000270 <__adddf3>
 80175da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80175de:	9b01      	ldr	r3, [sp, #4]
 80175e0:	3551      	adds	r5, #81	; 0x51
 80175e2:	431d      	orrs	r5, r3
 80175e4:	2d00      	cmp	r5, #0
 80175e6:	4680      	mov	r8, r0
 80175e8:	4689      	mov	r9, r1
 80175ea:	dd48      	ble.n	801767e <__ieee754_log+0x2c6>
 80175ec:	4b4e      	ldr	r3, [pc, #312]	; (8017728 <__ieee754_log+0x370>)
 80175ee:	2200      	movs	r2, #0
 80175f0:	4650      	mov	r0, sl
 80175f2:	4659      	mov	r1, fp
 80175f4:	f7e8 fff2 	bl	80005dc <__aeabi_dmul>
 80175f8:	4652      	mov	r2, sl
 80175fa:	465b      	mov	r3, fp
 80175fc:	f7e8 ffee 	bl	80005dc <__aeabi_dmul>
 8017600:	4602      	mov	r2, r0
 8017602:	460b      	mov	r3, r1
 8017604:	4606      	mov	r6, r0
 8017606:	460f      	mov	r7, r1
 8017608:	4640      	mov	r0, r8
 801760a:	4649      	mov	r1, r9
 801760c:	f7e8 fe30 	bl	8000270 <__adddf3>
 8017610:	ec53 2b18 	vmov	r2, r3, d8
 8017614:	f7e8 ffe2 	bl	80005dc <__aeabi_dmul>
 8017618:	4680      	mov	r8, r0
 801761a:	4689      	mov	r9, r1
 801761c:	b964      	cbnz	r4, 8017638 <__ieee754_log+0x280>
 801761e:	4602      	mov	r2, r0
 8017620:	460b      	mov	r3, r1
 8017622:	4630      	mov	r0, r6
 8017624:	4639      	mov	r1, r7
 8017626:	f7e8 fe21 	bl	800026c <__aeabi_dsub>
 801762a:	4602      	mov	r2, r0
 801762c:	460b      	mov	r3, r1
 801762e:	4650      	mov	r0, sl
 8017630:	4659      	mov	r1, fp
 8017632:	f7e8 fe1b 	bl	800026c <__aeabi_dsub>
 8017636:	e6d6      	b.n	80173e6 <__ieee754_log+0x2e>
 8017638:	a321      	add	r3, pc, #132	; (adr r3, 80176c0 <__ieee754_log+0x308>)
 801763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763e:	ec51 0b19 	vmov	r0, r1, d9
 8017642:	f7e8 ffcb 	bl	80005dc <__aeabi_dmul>
 8017646:	a320      	add	r3, pc, #128	; (adr r3, 80176c8 <__ieee754_log+0x310>)
 8017648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764c:	4604      	mov	r4, r0
 801764e:	460d      	mov	r5, r1
 8017650:	ec51 0b19 	vmov	r0, r1, d9
 8017654:	f7e8 ffc2 	bl	80005dc <__aeabi_dmul>
 8017658:	4642      	mov	r2, r8
 801765a:	464b      	mov	r3, r9
 801765c:	f7e8 fe08 	bl	8000270 <__adddf3>
 8017660:	4602      	mov	r2, r0
 8017662:	460b      	mov	r3, r1
 8017664:	4630      	mov	r0, r6
 8017666:	4639      	mov	r1, r7
 8017668:	f7e8 fe00 	bl	800026c <__aeabi_dsub>
 801766c:	4652      	mov	r2, sl
 801766e:	465b      	mov	r3, fp
 8017670:	f7e8 fdfc 	bl	800026c <__aeabi_dsub>
 8017674:	4602      	mov	r2, r0
 8017676:	460b      	mov	r3, r1
 8017678:	4620      	mov	r0, r4
 801767a:	4629      	mov	r1, r5
 801767c:	e7d9      	b.n	8017632 <__ieee754_log+0x27a>
 801767e:	4602      	mov	r2, r0
 8017680:	460b      	mov	r3, r1
 8017682:	4650      	mov	r0, sl
 8017684:	4659      	mov	r1, fp
 8017686:	f7e8 fdf1 	bl	800026c <__aeabi_dsub>
 801768a:	ec53 2b18 	vmov	r2, r3, d8
 801768e:	f7e8 ffa5 	bl	80005dc <__aeabi_dmul>
 8017692:	4606      	mov	r6, r0
 8017694:	460f      	mov	r7, r1
 8017696:	2c00      	cmp	r4, #0
 8017698:	f43f af23 	beq.w	80174e2 <__ieee754_log+0x12a>
 801769c:	a308      	add	r3, pc, #32	; (adr r3, 80176c0 <__ieee754_log+0x308>)
 801769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a2:	ec51 0b19 	vmov	r0, r1, d9
 80176a6:	f7e8 ff99 	bl	80005dc <__aeabi_dmul>
 80176aa:	a307      	add	r3, pc, #28	; (adr r3, 80176c8 <__ieee754_log+0x310>)
 80176ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b0:	4604      	mov	r4, r0
 80176b2:	460d      	mov	r5, r1
 80176b4:	ec51 0b19 	vmov	r0, r1, d9
 80176b8:	e727      	b.n	801750a <__ieee754_log+0x152>
 80176ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8017710 <__ieee754_log+0x358>
 80176be:	e694      	b.n	80173ea <__ieee754_log+0x32>
 80176c0:	fee00000 	.word	0xfee00000
 80176c4:	3fe62e42 	.word	0x3fe62e42
 80176c8:	35793c76 	.word	0x35793c76
 80176cc:	3dea39ef 	.word	0x3dea39ef
 80176d0:	55555555 	.word	0x55555555
 80176d4:	3fd55555 	.word	0x3fd55555
 80176d8:	df3e5244 	.word	0xdf3e5244
 80176dc:	3fc2f112 	.word	0x3fc2f112
 80176e0:	96cb03de 	.word	0x96cb03de
 80176e4:	3fc74664 	.word	0x3fc74664
 80176e8:	94229359 	.word	0x94229359
 80176ec:	3fd24924 	.word	0x3fd24924
 80176f0:	55555593 	.word	0x55555593
 80176f4:	3fe55555 	.word	0x3fe55555
 80176f8:	d078c69f 	.word	0xd078c69f
 80176fc:	3fc39a09 	.word	0x3fc39a09
 8017700:	1d8e78af 	.word	0x1d8e78af
 8017704:	3fcc71c5 	.word	0x3fcc71c5
 8017708:	9997fa04 	.word	0x9997fa04
 801770c:	3fd99999 	.word	0x3fd99999
	...
 8017718:	c3500000 	.word	0xc3500000
 801771c:	43500000 	.word	0x43500000
 8017720:	7fefffff 	.word	0x7fefffff
 8017724:	3ff00000 	.word	0x3ff00000
 8017728:	3fe00000 	.word	0x3fe00000
 801772c:	00000000 	.word	0x00000000

08017730 <__ieee754_rem_pio2>:
 8017730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017734:	ed2d 8b02 	vpush	{d8}
 8017738:	ec55 4b10 	vmov	r4, r5, d0
 801773c:	4bca      	ldr	r3, [pc, #808]	; (8017a68 <__ieee754_rem_pio2+0x338>)
 801773e:	b08b      	sub	sp, #44	; 0x2c
 8017740:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8017744:	4598      	cmp	r8, r3
 8017746:	4682      	mov	sl, r0
 8017748:	9502      	str	r5, [sp, #8]
 801774a:	dc08      	bgt.n	801775e <__ieee754_rem_pio2+0x2e>
 801774c:	2200      	movs	r2, #0
 801774e:	2300      	movs	r3, #0
 8017750:	ed80 0b00 	vstr	d0, [r0]
 8017754:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017758:	f04f 0b00 	mov.w	fp, #0
 801775c:	e028      	b.n	80177b0 <__ieee754_rem_pio2+0x80>
 801775e:	4bc3      	ldr	r3, [pc, #780]	; (8017a6c <__ieee754_rem_pio2+0x33c>)
 8017760:	4598      	cmp	r8, r3
 8017762:	dc78      	bgt.n	8017856 <__ieee754_rem_pio2+0x126>
 8017764:	9b02      	ldr	r3, [sp, #8]
 8017766:	4ec2      	ldr	r6, [pc, #776]	; (8017a70 <__ieee754_rem_pio2+0x340>)
 8017768:	2b00      	cmp	r3, #0
 801776a:	ee10 0a10 	vmov	r0, s0
 801776e:	a3b0      	add	r3, pc, #704	; (adr r3, 8017a30 <__ieee754_rem_pio2+0x300>)
 8017770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017774:	4629      	mov	r1, r5
 8017776:	dd39      	ble.n	80177ec <__ieee754_rem_pio2+0xbc>
 8017778:	f7e8 fd78 	bl	800026c <__aeabi_dsub>
 801777c:	45b0      	cmp	r8, r6
 801777e:	4604      	mov	r4, r0
 8017780:	460d      	mov	r5, r1
 8017782:	d01b      	beq.n	80177bc <__ieee754_rem_pio2+0x8c>
 8017784:	a3ac      	add	r3, pc, #688	; (adr r3, 8017a38 <__ieee754_rem_pio2+0x308>)
 8017786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778a:	f7e8 fd6f 	bl	800026c <__aeabi_dsub>
 801778e:	4602      	mov	r2, r0
 8017790:	460b      	mov	r3, r1
 8017792:	e9ca 2300 	strd	r2, r3, [sl]
 8017796:	4620      	mov	r0, r4
 8017798:	4629      	mov	r1, r5
 801779a:	f7e8 fd67 	bl	800026c <__aeabi_dsub>
 801779e:	a3a6      	add	r3, pc, #664	; (adr r3, 8017a38 <__ieee754_rem_pio2+0x308>)
 80177a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a4:	f7e8 fd62 	bl	800026c <__aeabi_dsub>
 80177a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80177ac:	f04f 0b01 	mov.w	fp, #1
 80177b0:	4658      	mov	r0, fp
 80177b2:	b00b      	add	sp, #44	; 0x2c
 80177b4:	ecbd 8b02 	vpop	{d8}
 80177b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8017a40 <__ieee754_rem_pio2+0x310>)
 80177be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c2:	f7e8 fd53 	bl	800026c <__aeabi_dsub>
 80177c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8017a48 <__ieee754_rem_pio2+0x318>)
 80177c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177cc:	4604      	mov	r4, r0
 80177ce:	460d      	mov	r5, r1
 80177d0:	f7e8 fd4c 	bl	800026c <__aeabi_dsub>
 80177d4:	4602      	mov	r2, r0
 80177d6:	460b      	mov	r3, r1
 80177d8:	e9ca 2300 	strd	r2, r3, [sl]
 80177dc:	4620      	mov	r0, r4
 80177de:	4629      	mov	r1, r5
 80177e0:	f7e8 fd44 	bl	800026c <__aeabi_dsub>
 80177e4:	a398      	add	r3, pc, #608	; (adr r3, 8017a48 <__ieee754_rem_pio2+0x318>)
 80177e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ea:	e7db      	b.n	80177a4 <__ieee754_rem_pio2+0x74>
 80177ec:	f7e8 fd40 	bl	8000270 <__adddf3>
 80177f0:	45b0      	cmp	r8, r6
 80177f2:	4604      	mov	r4, r0
 80177f4:	460d      	mov	r5, r1
 80177f6:	d016      	beq.n	8017826 <__ieee754_rem_pio2+0xf6>
 80177f8:	a38f      	add	r3, pc, #572	; (adr r3, 8017a38 <__ieee754_rem_pio2+0x308>)
 80177fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fe:	f7e8 fd37 	bl	8000270 <__adddf3>
 8017802:	4602      	mov	r2, r0
 8017804:	460b      	mov	r3, r1
 8017806:	e9ca 2300 	strd	r2, r3, [sl]
 801780a:	4620      	mov	r0, r4
 801780c:	4629      	mov	r1, r5
 801780e:	f7e8 fd2d 	bl	800026c <__aeabi_dsub>
 8017812:	a389      	add	r3, pc, #548	; (adr r3, 8017a38 <__ieee754_rem_pio2+0x308>)
 8017814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017818:	f7e8 fd2a 	bl	8000270 <__adddf3>
 801781c:	f04f 3bff 	mov.w	fp, #4294967295
 8017820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017824:	e7c4      	b.n	80177b0 <__ieee754_rem_pio2+0x80>
 8017826:	a386      	add	r3, pc, #536	; (adr r3, 8017a40 <__ieee754_rem_pio2+0x310>)
 8017828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801782c:	f7e8 fd20 	bl	8000270 <__adddf3>
 8017830:	a385      	add	r3, pc, #532	; (adr r3, 8017a48 <__ieee754_rem_pio2+0x318>)
 8017832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017836:	4604      	mov	r4, r0
 8017838:	460d      	mov	r5, r1
 801783a:	f7e8 fd19 	bl	8000270 <__adddf3>
 801783e:	4602      	mov	r2, r0
 8017840:	460b      	mov	r3, r1
 8017842:	e9ca 2300 	strd	r2, r3, [sl]
 8017846:	4620      	mov	r0, r4
 8017848:	4629      	mov	r1, r5
 801784a:	f7e8 fd0f 	bl	800026c <__aeabi_dsub>
 801784e:	a37e      	add	r3, pc, #504	; (adr r3, 8017a48 <__ieee754_rem_pio2+0x318>)
 8017850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017854:	e7e0      	b.n	8017818 <__ieee754_rem_pio2+0xe8>
 8017856:	4b87      	ldr	r3, [pc, #540]	; (8017a74 <__ieee754_rem_pio2+0x344>)
 8017858:	4598      	cmp	r8, r3
 801785a:	f300 80d9 	bgt.w	8017a10 <__ieee754_rem_pio2+0x2e0>
 801785e:	f000 feed 	bl	801863c <fabs>
 8017862:	ec55 4b10 	vmov	r4, r5, d0
 8017866:	ee10 0a10 	vmov	r0, s0
 801786a:	a379      	add	r3, pc, #484	; (adr r3, 8017a50 <__ieee754_rem_pio2+0x320>)
 801786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017870:	4629      	mov	r1, r5
 8017872:	f7e8 feb3 	bl	80005dc <__aeabi_dmul>
 8017876:	4b80      	ldr	r3, [pc, #512]	; (8017a78 <__ieee754_rem_pio2+0x348>)
 8017878:	2200      	movs	r2, #0
 801787a:	f7e8 fcf9 	bl	8000270 <__adddf3>
 801787e:	f7e9 f95d 	bl	8000b3c <__aeabi_d2iz>
 8017882:	4683      	mov	fp, r0
 8017884:	f7e8 fe40 	bl	8000508 <__aeabi_i2d>
 8017888:	4602      	mov	r2, r0
 801788a:	460b      	mov	r3, r1
 801788c:	ec43 2b18 	vmov	d8, r2, r3
 8017890:	a367      	add	r3, pc, #412	; (adr r3, 8017a30 <__ieee754_rem_pio2+0x300>)
 8017892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017896:	f7e8 fea1 	bl	80005dc <__aeabi_dmul>
 801789a:	4602      	mov	r2, r0
 801789c:	460b      	mov	r3, r1
 801789e:	4620      	mov	r0, r4
 80178a0:	4629      	mov	r1, r5
 80178a2:	f7e8 fce3 	bl	800026c <__aeabi_dsub>
 80178a6:	a364      	add	r3, pc, #400	; (adr r3, 8017a38 <__ieee754_rem_pio2+0x308>)
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	4606      	mov	r6, r0
 80178ae:	460f      	mov	r7, r1
 80178b0:	ec51 0b18 	vmov	r0, r1, d8
 80178b4:	f7e8 fe92 	bl	80005dc <__aeabi_dmul>
 80178b8:	f1bb 0f1f 	cmp.w	fp, #31
 80178bc:	4604      	mov	r4, r0
 80178be:	460d      	mov	r5, r1
 80178c0:	dc0d      	bgt.n	80178de <__ieee754_rem_pio2+0x1ae>
 80178c2:	4b6e      	ldr	r3, [pc, #440]	; (8017a7c <__ieee754_rem_pio2+0x34c>)
 80178c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80178c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178cc:	4543      	cmp	r3, r8
 80178ce:	d006      	beq.n	80178de <__ieee754_rem_pio2+0x1ae>
 80178d0:	4622      	mov	r2, r4
 80178d2:	462b      	mov	r3, r5
 80178d4:	4630      	mov	r0, r6
 80178d6:	4639      	mov	r1, r7
 80178d8:	f7e8 fcc8 	bl	800026c <__aeabi_dsub>
 80178dc:	e00f      	b.n	80178fe <__ieee754_rem_pio2+0x1ce>
 80178de:	462b      	mov	r3, r5
 80178e0:	4622      	mov	r2, r4
 80178e2:	4630      	mov	r0, r6
 80178e4:	4639      	mov	r1, r7
 80178e6:	f7e8 fcc1 	bl	800026c <__aeabi_dsub>
 80178ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80178ee:	9303      	str	r3, [sp, #12]
 80178f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80178f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80178f8:	f1b8 0f10 	cmp.w	r8, #16
 80178fc:	dc02      	bgt.n	8017904 <__ieee754_rem_pio2+0x1d4>
 80178fe:	e9ca 0100 	strd	r0, r1, [sl]
 8017902:	e039      	b.n	8017978 <__ieee754_rem_pio2+0x248>
 8017904:	a34e      	add	r3, pc, #312	; (adr r3, 8017a40 <__ieee754_rem_pio2+0x310>)
 8017906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790a:	ec51 0b18 	vmov	r0, r1, d8
 801790e:	f7e8 fe65 	bl	80005dc <__aeabi_dmul>
 8017912:	4604      	mov	r4, r0
 8017914:	460d      	mov	r5, r1
 8017916:	4602      	mov	r2, r0
 8017918:	460b      	mov	r3, r1
 801791a:	4630      	mov	r0, r6
 801791c:	4639      	mov	r1, r7
 801791e:	f7e8 fca5 	bl	800026c <__aeabi_dsub>
 8017922:	4602      	mov	r2, r0
 8017924:	460b      	mov	r3, r1
 8017926:	4680      	mov	r8, r0
 8017928:	4689      	mov	r9, r1
 801792a:	4630      	mov	r0, r6
 801792c:	4639      	mov	r1, r7
 801792e:	f7e8 fc9d 	bl	800026c <__aeabi_dsub>
 8017932:	4622      	mov	r2, r4
 8017934:	462b      	mov	r3, r5
 8017936:	f7e8 fc99 	bl	800026c <__aeabi_dsub>
 801793a:	a343      	add	r3, pc, #268	; (adr r3, 8017a48 <__ieee754_rem_pio2+0x318>)
 801793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017940:	4604      	mov	r4, r0
 8017942:	460d      	mov	r5, r1
 8017944:	ec51 0b18 	vmov	r0, r1, d8
 8017948:	f7e8 fe48 	bl	80005dc <__aeabi_dmul>
 801794c:	4622      	mov	r2, r4
 801794e:	462b      	mov	r3, r5
 8017950:	f7e8 fc8c 	bl	800026c <__aeabi_dsub>
 8017954:	4602      	mov	r2, r0
 8017956:	460b      	mov	r3, r1
 8017958:	4604      	mov	r4, r0
 801795a:	460d      	mov	r5, r1
 801795c:	4640      	mov	r0, r8
 801795e:	4649      	mov	r1, r9
 8017960:	f7e8 fc84 	bl	800026c <__aeabi_dsub>
 8017964:	9a03      	ldr	r2, [sp, #12]
 8017966:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801796a:	1ad3      	subs	r3, r2, r3
 801796c:	2b31      	cmp	r3, #49	; 0x31
 801796e:	dc24      	bgt.n	80179ba <__ieee754_rem_pio2+0x28a>
 8017970:	e9ca 0100 	strd	r0, r1, [sl]
 8017974:	4646      	mov	r6, r8
 8017976:	464f      	mov	r7, r9
 8017978:	e9da 8900 	ldrd	r8, r9, [sl]
 801797c:	4630      	mov	r0, r6
 801797e:	4642      	mov	r2, r8
 8017980:	464b      	mov	r3, r9
 8017982:	4639      	mov	r1, r7
 8017984:	f7e8 fc72 	bl	800026c <__aeabi_dsub>
 8017988:	462b      	mov	r3, r5
 801798a:	4622      	mov	r2, r4
 801798c:	f7e8 fc6e 	bl	800026c <__aeabi_dsub>
 8017990:	9b02      	ldr	r3, [sp, #8]
 8017992:	2b00      	cmp	r3, #0
 8017994:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017998:	f6bf af0a 	bge.w	80177b0 <__ieee754_rem_pio2+0x80>
 801799c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80179a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80179a4:	f8ca 8000 	str.w	r8, [sl]
 80179a8:	f8ca 0008 	str.w	r0, [sl, #8]
 80179ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80179b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80179b4:	f1cb 0b00 	rsb	fp, fp, #0
 80179b8:	e6fa      	b.n	80177b0 <__ieee754_rem_pio2+0x80>
 80179ba:	a327      	add	r3, pc, #156	; (adr r3, 8017a58 <__ieee754_rem_pio2+0x328>)
 80179bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c0:	ec51 0b18 	vmov	r0, r1, d8
 80179c4:	f7e8 fe0a 	bl	80005dc <__aeabi_dmul>
 80179c8:	4604      	mov	r4, r0
 80179ca:	460d      	mov	r5, r1
 80179cc:	4602      	mov	r2, r0
 80179ce:	460b      	mov	r3, r1
 80179d0:	4640      	mov	r0, r8
 80179d2:	4649      	mov	r1, r9
 80179d4:	f7e8 fc4a 	bl	800026c <__aeabi_dsub>
 80179d8:	4602      	mov	r2, r0
 80179da:	460b      	mov	r3, r1
 80179dc:	4606      	mov	r6, r0
 80179de:	460f      	mov	r7, r1
 80179e0:	4640      	mov	r0, r8
 80179e2:	4649      	mov	r1, r9
 80179e4:	f7e8 fc42 	bl	800026c <__aeabi_dsub>
 80179e8:	4622      	mov	r2, r4
 80179ea:	462b      	mov	r3, r5
 80179ec:	f7e8 fc3e 	bl	800026c <__aeabi_dsub>
 80179f0:	a31b      	add	r3, pc, #108	; (adr r3, 8017a60 <__ieee754_rem_pio2+0x330>)
 80179f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f6:	4604      	mov	r4, r0
 80179f8:	460d      	mov	r5, r1
 80179fa:	ec51 0b18 	vmov	r0, r1, d8
 80179fe:	f7e8 fded 	bl	80005dc <__aeabi_dmul>
 8017a02:	4622      	mov	r2, r4
 8017a04:	462b      	mov	r3, r5
 8017a06:	f7e8 fc31 	bl	800026c <__aeabi_dsub>
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	460d      	mov	r5, r1
 8017a0e:	e75f      	b.n	80178d0 <__ieee754_rem_pio2+0x1a0>
 8017a10:	4b1b      	ldr	r3, [pc, #108]	; (8017a80 <__ieee754_rem_pio2+0x350>)
 8017a12:	4598      	cmp	r8, r3
 8017a14:	dd36      	ble.n	8017a84 <__ieee754_rem_pio2+0x354>
 8017a16:	ee10 2a10 	vmov	r2, s0
 8017a1a:	462b      	mov	r3, r5
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	4629      	mov	r1, r5
 8017a20:	f7e8 fc24 	bl	800026c <__aeabi_dsub>
 8017a24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017a28:	e9ca 0100 	strd	r0, r1, [sl]
 8017a2c:	e694      	b.n	8017758 <__ieee754_rem_pio2+0x28>
 8017a2e:	bf00      	nop
 8017a30:	54400000 	.word	0x54400000
 8017a34:	3ff921fb 	.word	0x3ff921fb
 8017a38:	1a626331 	.word	0x1a626331
 8017a3c:	3dd0b461 	.word	0x3dd0b461
 8017a40:	1a600000 	.word	0x1a600000
 8017a44:	3dd0b461 	.word	0x3dd0b461
 8017a48:	2e037073 	.word	0x2e037073
 8017a4c:	3ba3198a 	.word	0x3ba3198a
 8017a50:	6dc9c883 	.word	0x6dc9c883
 8017a54:	3fe45f30 	.word	0x3fe45f30
 8017a58:	2e000000 	.word	0x2e000000
 8017a5c:	3ba3198a 	.word	0x3ba3198a
 8017a60:	252049c1 	.word	0x252049c1
 8017a64:	397b839a 	.word	0x397b839a
 8017a68:	3fe921fb 	.word	0x3fe921fb
 8017a6c:	4002d97b 	.word	0x4002d97b
 8017a70:	3ff921fb 	.word	0x3ff921fb
 8017a74:	413921fb 	.word	0x413921fb
 8017a78:	3fe00000 	.word	0x3fe00000
 8017a7c:	08018b98 	.word	0x08018b98
 8017a80:	7fefffff 	.word	0x7fefffff
 8017a84:	ea4f 5428 	mov.w	r4, r8, asr #20
 8017a88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8017a8c:	ee10 0a10 	vmov	r0, s0
 8017a90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8017a94:	ee10 6a10 	vmov	r6, s0
 8017a98:	460f      	mov	r7, r1
 8017a9a:	f7e9 f84f 	bl	8000b3c <__aeabi_d2iz>
 8017a9e:	f7e8 fd33 	bl	8000508 <__aeabi_i2d>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	4630      	mov	r0, r6
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017aae:	f7e8 fbdd 	bl	800026c <__aeabi_dsub>
 8017ab2:	4b22      	ldr	r3, [pc, #136]	; (8017b3c <__ieee754_rem_pio2+0x40c>)
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	f7e8 fd91 	bl	80005dc <__aeabi_dmul>
 8017aba:	460f      	mov	r7, r1
 8017abc:	4606      	mov	r6, r0
 8017abe:	f7e9 f83d 	bl	8000b3c <__aeabi_d2iz>
 8017ac2:	f7e8 fd21 	bl	8000508 <__aeabi_i2d>
 8017ac6:	4602      	mov	r2, r0
 8017ac8:	460b      	mov	r3, r1
 8017aca:	4630      	mov	r0, r6
 8017acc:	4639      	mov	r1, r7
 8017ace:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017ad2:	f7e8 fbcb 	bl	800026c <__aeabi_dsub>
 8017ad6:	4b19      	ldr	r3, [pc, #100]	; (8017b3c <__ieee754_rem_pio2+0x40c>)
 8017ad8:	2200      	movs	r2, #0
 8017ada:	f7e8 fd7f 	bl	80005dc <__aeabi_dmul>
 8017ade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017ae2:	ad04      	add	r5, sp, #16
 8017ae4:	f04f 0803 	mov.w	r8, #3
 8017ae8:	46a9      	mov	r9, r5
 8017aea:	2600      	movs	r6, #0
 8017aec:	2700      	movs	r7, #0
 8017aee:	4632      	mov	r2, r6
 8017af0:	463b      	mov	r3, r7
 8017af2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8017af6:	46c3      	mov	fp, r8
 8017af8:	3d08      	subs	r5, #8
 8017afa:	f108 38ff 	add.w	r8, r8, #4294967295
 8017afe:	f7e8 ffd5 	bl	8000aac <__aeabi_dcmpeq>
 8017b02:	2800      	cmp	r0, #0
 8017b04:	d1f3      	bne.n	8017aee <__ieee754_rem_pio2+0x3be>
 8017b06:	4b0e      	ldr	r3, [pc, #56]	; (8017b40 <__ieee754_rem_pio2+0x410>)
 8017b08:	9301      	str	r3, [sp, #4]
 8017b0a:	2302      	movs	r3, #2
 8017b0c:	9300      	str	r3, [sp, #0]
 8017b0e:	4622      	mov	r2, r4
 8017b10:	465b      	mov	r3, fp
 8017b12:	4651      	mov	r1, sl
 8017b14:	4648      	mov	r0, r9
 8017b16:	f000 f993 	bl	8017e40 <__kernel_rem_pio2>
 8017b1a:	9b02      	ldr	r3, [sp, #8]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	4683      	mov	fp, r0
 8017b20:	f6bf ae46 	bge.w	80177b0 <__ieee754_rem_pio2+0x80>
 8017b24:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017b2c:	f8ca 3004 	str.w	r3, [sl, #4]
 8017b30:	f8da 300c 	ldr.w	r3, [sl, #12]
 8017b34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017b38:	e73a      	b.n	80179b0 <__ieee754_rem_pio2+0x280>
 8017b3a:	bf00      	nop
 8017b3c:	41700000 	.word	0x41700000
 8017b40:	08018c18 	.word	0x08018c18

08017b44 <__ieee754_sqrt>:
 8017b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b48:	ec55 4b10 	vmov	r4, r5, d0
 8017b4c:	4e56      	ldr	r6, [pc, #344]	; (8017ca8 <__ieee754_sqrt+0x164>)
 8017b4e:	43ae      	bics	r6, r5
 8017b50:	ee10 0a10 	vmov	r0, s0
 8017b54:	ee10 3a10 	vmov	r3, s0
 8017b58:	4629      	mov	r1, r5
 8017b5a:	462a      	mov	r2, r5
 8017b5c:	d110      	bne.n	8017b80 <__ieee754_sqrt+0x3c>
 8017b5e:	ee10 2a10 	vmov	r2, s0
 8017b62:	462b      	mov	r3, r5
 8017b64:	f7e8 fd3a 	bl	80005dc <__aeabi_dmul>
 8017b68:	4602      	mov	r2, r0
 8017b6a:	460b      	mov	r3, r1
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	4629      	mov	r1, r5
 8017b70:	f7e8 fb7e 	bl	8000270 <__adddf3>
 8017b74:	4604      	mov	r4, r0
 8017b76:	460d      	mov	r5, r1
 8017b78:	ec45 4b10 	vmov	d0, r4, r5
 8017b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b80:	2d00      	cmp	r5, #0
 8017b82:	dc10      	bgt.n	8017ba6 <__ieee754_sqrt+0x62>
 8017b84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017b88:	4330      	orrs	r0, r6
 8017b8a:	d0f5      	beq.n	8017b78 <__ieee754_sqrt+0x34>
 8017b8c:	b15d      	cbz	r5, 8017ba6 <__ieee754_sqrt+0x62>
 8017b8e:	ee10 2a10 	vmov	r2, s0
 8017b92:	462b      	mov	r3, r5
 8017b94:	ee10 0a10 	vmov	r0, s0
 8017b98:	f7e8 fb68 	bl	800026c <__aeabi_dsub>
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	460b      	mov	r3, r1
 8017ba0:	f7e8 fe46 	bl	8000830 <__aeabi_ddiv>
 8017ba4:	e7e6      	b.n	8017b74 <__ieee754_sqrt+0x30>
 8017ba6:	1509      	asrs	r1, r1, #20
 8017ba8:	d076      	beq.n	8017c98 <__ieee754_sqrt+0x154>
 8017baa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017bae:	07ce      	lsls	r6, r1, #31
 8017bb0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8017bb4:	bf5e      	ittt	pl
 8017bb6:	0fda      	lsrpl	r2, r3, #31
 8017bb8:	005b      	lslpl	r3, r3, #1
 8017bba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8017bbe:	0fda      	lsrs	r2, r3, #31
 8017bc0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8017bc4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017bc8:	2000      	movs	r0, #0
 8017bca:	106d      	asrs	r5, r5, #1
 8017bcc:	005b      	lsls	r3, r3, #1
 8017bce:	f04f 0e16 	mov.w	lr, #22
 8017bd2:	4684      	mov	ip, r0
 8017bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017bd8:	eb0c 0401 	add.w	r4, ip, r1
 8017bdc:	4294      	cmp	r4, r2
 8017bde:	bfde      	ittt	le
 8017be0:	1b12      	suble	r2, r2, r4
 8017be2:	eb04 0c01 	addle.w	ip, r4, r1
 8017be6:	1840      	addle	r0, r0, r1
 8017be8:	0052      	lsls	r2, r2, #1
 8017bea:	f1be 0e01 	subs.w	lr, lr, #1
 8017bee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8017bf2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017bf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017bfa:	d1ed      	bne.n	8017bd8 <__ieee754_sqrt+0x94>
 8017bfc:	4671      	mov	r1, lr
 8017bfe:	2720      	movs	r7, #32
 8017c00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8017c04:	4562      	cmp	r2, ip
 8017c06:	eb04 060e 	add.w	r6, r4, lr
 8017c0a:	dc02      	bgt.n	8017c12 <__ieee754_sqrt+0xce>
 8017c0c:	d113      	bne.n	8017c36 <__ieee754_sqrt+0xf2>
 8017c0e:	429e      	cmp	r6, r3
 8017c10:	d811      	bhi.n	8017c36 <__ieee754_sqrt+0xf2>
 8017c12:	2e00      	cmp	r6, #0
 8017c14:	eb06 0e04 	add.w	lr, r6, r4
 8017c18:	da43      	bge.n	8017ca2 <__ieee754_sqrt+0x15e>
 8017c1a:	f1be 0f00 	cmp.w	lr, #0
 8017c1e:	db40      	blt.n	8017ca2 <__ieee754_sqrt+0x15e>
 8017c20:	f10c 0801 	add.w	r8, ip, #1
 8017c24:	eba2 020c 	sub.w	r2, r2, ip
 8017c28:	429e      	cmp	r6, r3
 8017c2a:	bf88      	it	hi
 8017c2c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017c30:	1b9b      	subs	r3, r3, r6
 8017c32:	4421      	add	r1, r4
 8017c34:	46c4      	mov	ip, r8
 8017c36:	0052      	lsls	r2, r2, #1
 8017c38:	3f01      	subs	r7, #1
 8017c3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8017c3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017c42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017c46:	d1dd      	bne.n	8017c04 <__ieee754_sqrt+0xc0>
 8017c48:	4313      	orrs	r3, r2
 8017c4a:	d006      	beq.n	8017c5a <__ieee754_sqrt+0x116>
 8017c4c:	1c4c      	adds	r4, r1, #1
 8017c4e:	bf13      	iteet	ne
 8017c50:	3101      	addne	r1, #1
 8017c52:	3001      	addeq	r0, #1
 8017c54:	4639      	moveq	r1, r7
 8017c56:	f021 0101 	bicne.w	r1, r1, #1
 8017c5a:	1043      	asrs	r3, r0, #1
 8017c5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8017c60:	0849      	lsrs	r1, r1, #1
 8017c62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8017c66:	07c2      	lsls	r2, r0, #31
 8017c68:	bf48      	it	mi
 8017c6a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8017c6e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8017c72:	460c      	mov	r4, r1
 8017c74:	463d      	mov	r5, r7
 8017c76:	e77f      	b.n	8017b78 <__ieee754_sqrt+0x34>
 8017c78:	0ada      	lsrs	r2, r3, #11
 8017c7a:	3815      	subs	r0, #21
 8017c7c:	055b      	lsls	r3, r3, #21
 8017c7e:	2a00      	cmp	r2, #0
 8017c80:	d0fa      	beq.n	8017c78 <__ieee754_sqrt+0x134>
 8017c82:	02d7      	lsls	r7, r2, #11
 8017c84:	d50a      	bpl.n	8017c9c <__ieee754_sqrt+0x158>
 8017c86:	f1c1 0420 	rsb	r4, r1, #32
 8017c8a:	fa23 f404 	lsr.w	r4, r3, r4
 8017c8e:	1e4d      	subs	r5, r1, #1
 8017c90:	408b      	lsls	r3, r1
 8017c92:	4322      	orrs	r2, r4
 8017c94:	1b41      	subs	r1, r0, r5
 8017c96:	e788      	b.n	8017baa <__ieee754_sqrt+0x66>
 8017c98:	4608      	mov	r0, r1
 8017c9a:	e7f0      	b.n	8017c7e <__ieee754_sqrt+0x13a>
 8017c9c:	0052      	lsls	r2, r2, #1
 8017c9e:	3101      	adds	r1, #1
 8017ca0:	e7ef      	b.n	8017c82 <__ieee754_sqrt+0x13e>
 8017ca2:	46e0      	mov	r8, ip
 8017ca4:	e7be      	b.n	8017c24 <__ieee754_sqrt+0xe0>
 8017ca6:	bf00      	nop
 8017ca8:	7ff00000 	.word	0x7ff00000
 8017cac:	00000000 	.word	0x00000000

08017cb0 <__kernel_cos>:
 8017cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb4:	ec57 6b10 	vmov	r6, r7, d0
 8017cb8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017cbc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8017cc0:	ed8d 1b00 	vstr	d1, [sp]
 8017cc4:	da07      	bge.n	8017cd6 <__kernel_cos+0x26>
 8017cc6:	ee10 0a10 	vmov	r0, s0
 8017cca:	4639      	mov	r1, r7
 8017ccc:	f7e8 ff36 	bl	8000b3c <__aeabi_d2iz>
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	f000 8088 	beq.w	8017de6 <__kernel_cos+0x136>
 8017cd6:	4632      	mov	r2, r6
 8017cd8:	463b      	mov	r3, r7
 8017cda:	4630      	mov	r0, r6
 8017cdc:	4639      	mov	r1, r7
 8017cde:	f7e8 fc7d 	bl	80005dc <__aeabi_dmul>
 8017ce2:	4b51      	ldr	r3, [pc, #324]	; (8017e28 <__kernel_cos+0x178>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	4604      	mov	r4, r0
 8017ce8:	460d      	mov	r5, r1
 8017cea:	f7e8 fc77 	bl	80005dc <__aeabi_dmul>
 8017cee:	a340      	add	r3, pc, #256	; (adr r3, 8017df0 <__kernel_cos+0x140>)
 8017cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf4:	4682      	mov	sl, r0
 8017cf6:	468b      	mov	fp, r1
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	f7e8 fc6e 	bl	80005dc <__aeabi_dmul>
 8017d00:	a33d      	add	r3, pc, #244	; (adr r3, 8017df8 <__kernel_cos+0x148>)
 8017d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d06:	f7e8 fab3 	bl	8000270 <__adddf3>
 8017d0a:	4622      	mov	r2, r4
 8017d0c:	462b      	mov	r3, r5
 8017d0e:	f7e8 fc65 	bl	80005dc <__aeabi_dmul>
 8017d12:	a33b      	add	r3, pc, #236	; (adr r3, 8017e00 <__kernel_cos+0x150>)
 8017d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d18:	f7e8 faa8 	bl	800026c <__aeabi_dsub>
 8017d1c:	4622      	mov	r2, r4
 8017d1e:	462b      	mov	r3, r5
 8017d20:	f7e8 fc5c 	bl	80005dc <__aeabi_dmul>
 8017d24:	a338      	add	r3, pc, #224	; (adr r3, 8017e08 <__kernel_cos+0x158>)
 8017d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d2a:	f7e8 faa1 	bl	8000270 <__adddf3>
 8017d2e:	4622      	mov	r2, r4
 8017d30:	462b      	mov	r3, r5
 8017d32:	f7e8 fc53 	bl	80005dc <__aeabi_dmul>
 8017d36:	a336      	add	r3, pc, #216	; (adr r3, 8017e10 <__kernel_cos+0x160>)
 8017d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3c:	f7e8 fa96 	bl	800026c <__aeabi_dsub>
 8017d40:	4622      	mov	r2, r4
 8017d42:	462b      	mov	r3, r5
 8017d44:	f7e8 fc4a 	bl	80005dc <__aeabi_dmul>
 8017d48:	a333      	add	r3, pc, #204	; (adr r3, 8017e18 <__kernel_cos+0x168>)
 8017d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d4e:	f7e8 fa8f 	bl	8000270 <__adddf3>
 8017d52:	4622      	mov	r2, r4
 8017d54:	462b      	mov	r3, r5
 8017d56:	f7e8 fc41 	bl	80005dc <__aeabi_dmul>
 8017d5a:	4622      	mov	r2, r4
 8017d5c:	462b      	mov	r3, r5
 8017d5e:	f7e8 fc3d 	bl	80005dc <__aeabi_dmul>
 8017d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d66:	4604      	mov	r4, r0
 8017d68:	460d      	mov	r5, r1
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	4639      	mov	r1, r7
 8017d6e:	f7e8 fc35 	bl	80005dc <__aeabi_dmul>
 8017d72:	460b      	mov	r3, r1
 8017d74:	4602      	mov	r2, r0
 8017d76:	4629      	mov	r1, r5
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f7e8 fa77 	bl	800026c <__aeabi_dsub>
 8017d7e:	4b2b      	ldr	r3, [pc, #172]	; (8017e2c <__kernel_cos+0x17c>)
 8017d80:	4598      	cmp	r8, r3
 8017d82:	4606      	mov	r6, r0
 8017d84:	460f      	mov	r7, r1
 8017d86:	dc10      	bgt.n	8017daa <__kernel_cos+0xfa>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	460b      	mov	r3, r1
 8017d8c:	4650      	mov	r0, sl
 8017d8e:	4659      	mov	r1, fp
 8017d90:	f7e8 fa6c 	bl	800026c <__aeabi_dsub>
 8017d94:	460b      	mov	r3, r1
 8017d96:	4926      	ldr	r1, [pc, #152]	; (8017e30 <__kernel_cos+0x180>)
 8017d98:	4602      	mov	r2, r0
 8017d9a:	2000      	movs	r0, #0
 8017d9c:	f7e8 fa66 	bl	800026c <__aeabi_dsub>
 8017da0:	ec41 0b10 	vmov	d0, r0, r1
 8017da4:	b003      	add	sp, #12
 8017da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017daa:	4b22      	ldr	r3, [pc, #136]	; (8017e34 <__kernel_cos+0x184>)
 8017dac:	4920      	ldr	r1, [pc, #128]	; (8017e30 <__kernel_cos+0x180>)
 8017dae:	4598      	cmp	r8, r3
 8017db0:	bfcc      	ite	gt
 8017db2:	4d21      	ldrgt	r5, [pc, #132]	; (8017e38 <__kernel_cos+0x188>)
 8017db4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8017db8:	2400      	movs	r4, #0
 8017dba:	4622      	mov	r2, r4
 8017dbc:	462b      	mov	r3, r5
 8017dbe:	2000      	movs	r0, #0
 8017dc0:	f7e8 fa54 	bl	800026c <__aeabi_dsub>
 8017dc4:	4622      	mov	r2, r4
 8017dc6:	4680      	mov	r8, r0
 8017dc8:	4689      	mov	r9, r1
 8017dca:	462b      	mov	r3, r5
 8017dcc:	4650      	mov	r0, sl
 8017dce:	4659      	mov	r1, fp
 8017dd0:	f7e8 fa4c 	bl	800026c <__aeabi_dsub>
 8017dd4:	4632      	mov	r2, r6
 8017dd6:	463b      	mov	r3, r7
 8017dd8:	f7e8 fa48 	bl	800026c <__aeabi_dsub>
 8017ddc:	4602      	mov	r2, r0
 8017dde:	460b      	mov	r3, r1
 8017de0:	4640      	mov	r0, r8
 8017de2:	4649      	mov	r1, r9
 8017de4:	e7da      	b.n	8017d9c <__kernel_cos+0xec>
 8017de6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8017e20 <__kernel_cos+0x170>
 8017dea:	e7db      	b.n	8017da4 <__kernel_cos+0xf4>
 8017dec:	f3af 8000 	nop.w
 8017df0:	be8838d4 	.word	0xbe8838d4
 8017df4:	bda8fae9 	.word	0xbda8fae9
 8017df8:	bdb4b1c4 	.word	0xbdb4b1c4
 8017dfc:	3e21ee9e 	.word	0x3e21ee9e
 8017e00:	809c52ad 	.word	0x809c52ad
 8017e04:	3e927e4f 	.word	0x3e927e4f
 8017e08:	19cb1590 	.word	0x19cb1590
 8017e0c:	3efa01a0 	.word	0x3efa01a0
 8017e10:	16c15177 	.word	0x16c15177
 8017e14:	3f56c16c 	.word	0x3f56c16c
 8017e18:	5555554c 	.word	0x5555554c
 8017e1c:	3fa55555 	.word	0x3fa55555
 8017e20:	00000000 	.word	0x00000000
 8017e24:	3ff00000 	.word	0x3ff00000
 8017e28:	3fe00000 	.word	0x3fe00000
 8017e2c:	3fd33332 	.word	0x3fd33332
 8017e30:	3ff00000 	.word	0x3ff00000
 8017e34:	3fe90000 	.word	0x3fe90000
 8017e38:	3fd20000 	.word	0x3fd20000
 8017e3c:	00000000 	.word	0x00000000

08017e40 <__kernel_rem_pio2>:
 8017e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e44:	ed2d 8b02 	vpush	{d8}
 8017e48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8017e4c:	f112 0f14 	cmn.w	r2, #20
 8017e50:	9308      	str	r3, [sp, #32]
 8017e52:	9101      	str	r1, [sp, #4]
 8017e54:	4bc6      	ldr	r3, [pc, #792]	; (8018170 <__kernel_rem_pio2+0x330>)
 8017e56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8017e58:	9009      	str	r0, [sp, #36]	; 0x24
 8017e5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e5e:	9304      	str	r3, [sp, #16]
 8017e60:	9b08      	ldr	r3, [sp, #32]
 8017e62:	f103 33ff 	add.w	r3, r3, #4294967295
 8017e66:	bfa8      	it	ge
 8017e68:	1ed4      	subge	r4, r2, #3
 8017e6a:	9306      	str	r3, [sp, #24]
 8017e6c:	bfb2      	itee	lt
 8017e6e:	2400      	movlt	r4, #0
 8017e70:	2318      	movge	r3, #24
 8017e72:	fb94 f4f3 	sdivge	r4, r4, r3
 8017e76:	f06f 0317 	mvn.w	r3, #23
 8017e7a:	fb04 3303 	mla	r3, r4, r3, r3
 8017e7e:	eb03 0a02 	add.w	sl, r3, r2
 8017e82:	9b04      	ldr	r3, [sp, #16]
 8017e84:	9a06      	ldr	r2, [sp, #24]
 8017e86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018160 <__kernel_rem_pio2+0x320>
 8017e8a:	eb03 0802 	add.w	r8, r3, r2
 8017e8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8017e90:	1aa7      	subs	r7, r4, r2
 8017e92:	ae20      	add	r6, sp, #128	; 0x80
 8017e94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017e98:	2500      	movs	r5, #0
 8017e9a:	4545      	cmp	r5, r8
 8017e9c:	dd18      	ble.n	8017ed0 <__kernel_rem_pio2+0x90>
 8017e9e:	9b08      	ldr	r3, [sp, #32]
 8017ea0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017ea4:	aa20      	add	r2, sp, #128	; 0x80
 8017ea6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8018160 <__kernel_rem_pio2+0x320>
 8017eaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8017eae:	f1c3 0301 	rsb	r3, r3, #1
 8017eb2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8017eb6:	9307      	str	r3, [sp, #28]
 8017eb8:	9b07      	ldr	r3, [sp, #28]
 8017eba:	9a04      	ldr	r2, [sp, #16]
 8017ebc:	4443      	add	r3, r8
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	db2f      	blt.n	8017f22 <__kernel_rem_pio2+0xe2>
 8017ec2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017ec6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017eca:	462f      	mov	r7, r5
 8017ecc:	2600      	movs	r6, #0
 8017ece:	e01b      	b.n	8017f08 <__kernel_rem_pio2+0xc8>
 8017ed0:	42ef      	cmn	r7, r5
 8017ed2:	d407      	bmi.n	8017ee4 <__kernel_rem_pio2+0xa4>
 8017ed4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8017ed8:	f7e8 fb16 	bl	8000508 <__aeabi_i2d>
 8017edc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8017ee0:	3501      	adds	r5, #1
 8017ee2:	e7da      	b.n	8017e9a <__kernel_rem_pio2+0x5a>
 8017ee4:	ec51 0b18 	vmov	r0, r1, d8
 8017ee8:	e7f8      	b.n	8017edc <__kernel_rem_pio2+0x9c>
 8017eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017eee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017ef2:	f7e8 fb73 	bl	80005dc <__aeabi_dmul>
 8017ef6:	4602      	mov	r2, r0
 8017ef8:	460b      	mov	r3, r1
 8017efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017efe:	f7e8 f9b7 	bl	8000270 <__adddf3>
 8017f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f06:	3601      	adds	r6, #1
 8017f08:	9b06      	ldr	r3, [sp, #24]
 8017f0a:	429e      	cmp	r6, r3
 8017f0c:	f1a7 0708 	sub.w	r7, r7, #8
 8017f10:	ddeb      	ble.n	8017eea <__kernel_rem_pio2+0xaa>
 8017f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f16:	3508      	adds	r5, #8
 8017f18:	ecab 7b02 	vstmia	fp!, {d7}
 8017f1c:	f108 0801 	add.w	r8, r8, #1
 8017f20:	e7ca      	b.n	8017eb8 <__kernel_rem_pio2+0x78>
 8017f22:	9b04      	ldr	r3, [sp, #16]
 8017f24:	aa0c      	add	r2, sp, #48	; 0x30
 8017f26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f2c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8017f2e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017f32:	9c04      	ldr	r4, [sp, #16]
 8017f34:	930a      	str	r3, [sp, #40]	; 0x28
 8017f36:	ab98      	add	r3, sp, #608	; 0x260
 8017f38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017f3c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8017f40:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8017f44:	f8cd b008 	str.w	fp, [sp, #8]
 8017f48:	4625      	mov	r5, r4
 8017f4a:	2d00      	cmp	r5, #0
 8017f4c:	dc78      	bgt.n	8018040 <__kernel_rem_pio2+0x200>
 8017f4e:	ec47 6b10 	vmov	d0, r6, r7
 8017f52:	4650      	mov	r0, sl
 8017f54:	f000 fb90 	bl	8018678 <scalbn>
 8017f58:	ec57 6b10 	vmov	r6, r7, d0
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017f62:	ee10 0a10 	vmov	r0, s0
 8017f66:	4639      	mov	r1, r7
 8017f68:	f7e8 fb38 	bl	80005dc <__aeabi_dmul>
 8017f6c:	ec41 0b10 	vmov	d0, r0, r1
 8017f70:	f7fe feb2 	bl	8016cd8 <floor>
 8017f74:	4b7f      	ldr	r3, [pc, #508]	; (8018174 <__kernel_rem_pio2+0x334>)
 8017f76:	ec51 0b10 	vmov	r0, r1, d0
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	f7e8 fb2e 	bl	80005dc <__aeabi_dmul>
 8017f80:	4602      	mov	r2, r0
 8017f82:	460b      	mov	r3, r1
 8017f84:	4630      	mov	r0, r6
 8017f86:	4639      	mov	r1, r7
 8017f88:	f7e8 f970 	bl	800026c <__aeabi_dsub>
 8017f8c:	460f      	mov	r7, r1
 8017f8e:	4606      	mov	r6, r0
 8017f90:	f7e8 fdd4 	bl	8000b3c <__aeabi_d2iz>
 8017f94:	9007      	str	r0, [sp, #28]
 8017f96:	f7e8 fab7 	bl	8000508 <__aeabi_i2d>
 8017f9a:	4602      	mov	r2, r0
 8017f9c:	460b      	mov	r3, r1
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	4639      	mov	r1, r7
 8017fa2:	f7e8 f963 	bl	800026c <__aeabi_dsub>
 8017fa6:	f1ba 0f00 	cmp.w	sl, #0
 8017faa:	4606      	mov	r6, r0
 8017fac:	460f      	mov	r7, r1
 8017fae:	dd70      	ble.n	8018092 <__kernel_rem_pio2+0x252>
 8017fb0:	1e62      	subs	r2, r4, #1
 8017fb2:	ab0c      	add	r3, sp, #48	; 0x30
 8017fb4:	9d07      	ldr	r5, [sp, #28]
 8017fb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017fba:	f1ca 0118 	rsb	r1, sl, #24
 8017fbe:	fa40 f301 	asr.w	r3, r0, r1
 8017fc2:	441d      	add	r5, r3
 8017fc4:	408b      	lsls	r3, r1
 8017fc6:	1ac0      	subs	r0, r0, r3
 8017fc8:	ab0c      	add	r3, sp, #48	; 0x30
 8017fca:	9507      	str	r5, [sp, #28]
 8017fcc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8017fd0:	f1ca 0317 	rsb	r3, sl, #23
 8017fd4:	fa40 f303 	asr.w	r3, r0, r3
 8017fd8:	9302      	str	r3, [sp, #8]
 8017fda:	9b02      	ldr	r3, [sp, #8]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	dd66      	ble.n	80180ae <__kernel_rem_pio2+0x26e>
 8017fe0:	9b07      	ldr	r3, [sp, #28]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	9307      	str	r3, [sp, #28]
 8017fe8:	4615      	mov	r5, r2
 8017fea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017fee:	4294      	cmp	r4, r2
 8017ff0:	f300 8099 	bgt.w	8018126 <__kernel_rem_pio2+0x2e6>
 8017ff4:	f1ba 0f00 	cmp.w	sl, #0
 8017ff8:	dd07      	ble.n	801800a <__kernel_rem_pio2+0x1ca>
 8017ffa:	f1ba 0f01 	cmp.w	sl, #1
 8017ffe:	f000 80a5 	beq.w	801814c <__kernel_rem_pio2+0x30c>
 8018002:	f1ba 0f02 	cmp.w	sl, #2
 8018006:	f000 80c1 	beq.w	801818c <__kernel_rem_pio2+0x34c>
 801800a:	9b02      	ldr	r3, [sp, #8]
 801800c:	2b02      	cmp	r3, #2
 801800e:	d14e      	bne.n	80180ae <__kernel_rem_pio2+0x26e>
 8018010:	4632      	mov	r2, r6
 8018012:	463b      	mov	r3, r7
 8018014:	4958      	ldr	r1, [pc, #352]	; (8018178 <__kernel_rem_pio2+0x338>)
 8018016:	2000      	movs	r0, #0
 8018018:	f7e8 f928 	bl	800026c <__aeabi_dsub>
 801801c:	4606      	mov	r6, r0
 801801e:	460f      	mov	r7, r1
 8018020:	2d00      	cmp	r5, #0
 8018022:	d044      	beq.n	80180ae <__kernel_rem_pio2+0x26e>
 8018024:	4650      	mov	r0, sl
 8018026:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018168 <__kernel_rem_pio2+0x328>
 801802a:	f000 fb25 	bl	8018678 <scalbn>
 801802e:	4630      	mov	r0, r6
 8018030:	4639      	mov	r1, r7
 8018032:	ec53 2b10 	vmov	r2, r3, d0
 8018036:	f7e8 f919 	bl	800026c <__aeabi_dsub>
 801803a:	4606      	mov	r6, r0
 801803c:	460f      	mov	r7, r1
 801803e:	e036      	b.n	80180ae <__kernel_rem_pio2+0x26e>
 8018040:	4b4e      	ldr	r3, [pc, #312]	; (801817c <__kernel_rem_pio2+0x33c>)
 8018042:	2200      	movs	r2, #0
 8018044:	4630      	mov	r0, r6
 8018046:	4639      	mov	r1, r7
 8018048:	f7e8 fac8 	bl	80005dc <__aeabi_dmul>
 801804c:	f7e8 fd76 	bl	8000b3c <__aeabi_d2iz>
 8018050:	f7e8 fa5a 	bl	8000508 <__aeabi_i2d>
 8018054:	4b4a      	ldr	r3, [pc, #296]	; (8018180 <__kernel_rem_pio2+0x340>)
 8018056:	2200      	movs	r2, #0
 8018058:	4680      	mov	r8, r0
 801805a:	4689      	mov	r9, r1
 801805c:	f7e8 fabe 	bl	80005dc <__aeabi_dmul>
 8018060:	4602      	mov	r2, r0
 8018062:	460b      	mov	r3, r1
 8018064:	4630      	mov	r0, r6
 8018066:	4639      	mov	r1, r7
 8018068:	f7e8 f900 	bl	800026c <__aeabi_dsub>
 801806c:	f7e8 fd66 	bl	8000b3c <__aeabi_d2iz>
 8018070:	9b02      	ldr	r3, [sp, #8]
 8018072:	f843 0b04 	str.w	r0, [r3], #4
 8018076:	3d01      	subs	r5, #1
 8018078:	9302      	str	r3, [sp, #8]
 801807a:	ab70      	add	r3, sp, #448	; 0x1c0
 801807c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018084:	4640      	mov	r0, r8
 8018086:	4649      	mov	r1, r9
 8018088:	f7e8 f8f2 	bl	8000270 <__adddf3>
 801808c:	4606      	mov	r6, r0
 801808e:	460f      	mov	r7, r1
 8018090:	e75b      	b.n	8017f4a <__kernel_rem_pio2+0x10a>
 8018092:	d105      	bne.n	80180a0 <__kernel_rem_pio2+0x260>
 8018094:	1e63      	subs	r3, r4, #1
 8018096:	aa0c      	add	r2, sp, #48	; 0x30
 8018098:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801809c:	15c3      	asrs	r3, r0, #23
 801809e:	e79b      	b.n	8017fd8 <__kernel_rem_pio2+0x198>
 80180a0:	4b38      	ldr	r3, [pc, #224]	; (8018184 <__kernel_rem_pio2+0x344>)
 80180a2:	2200      	movs	r2, #0
 80180a4:	f7e8 fd20 	bl	8000ae8 <__aeabi_dcmpge>
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d139      	bne.n	8018120 <__kernel_rem_pio2+0x2e0>
 80180ac:	9002      	str	r0, [sp, #8]
 80180ae:	2200      	movs	r2, #0
 80180b0:	2300      	movs	r3, #0
 80180b2:	4630      	mov	r0, r6
 80180b4:	4639      	mov	r1, r7
 80180b6:	f7e8 fcf9 	bl	8000aac <__aeabi_dcmpeq>
 80180ba:	2800      	cmp	r0, #0
 80180bc:	f000 80b4 	beq.w	8018228 <__kernel_rem_pio2+0x3e8>
 80180c0:	f104 3bff 	add.w	fp, r4, #4294967295
 80180c4:	465b      	mov	r3, fp
 80180c6:	2200      	movs	r2, #0
 80180c8:	9904      	ldr	r1, [sp, #16]
 80180ca:	428b      	cmp	r3, r1
 80180cc:	da65      	bge.n	801819a <__kernel_rem_pio2+0x35a>
 80180ce:	2a00      	cmp	r2, #0
 80180d0:	d07b      	beq.n	80181ca <__kernel_rem_pio2+0x38a>
 80180d2:	ab0c      	add	r3, sp, #48	; 0x30
 80180d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80180d8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	f000 80a0 	beq.w	8018222 <__kernel_rem_pio2+0x3e2>
 80180e2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8018168 <__kernel_rem_pio2+0x328>
 80180e6:	4650      	mov	r0, sl
 80180e8:	f000 fac6 	bl	8018678 <scalbn>
 80180ec:	4f23      	ldr	r7, [pc, #140]	; (801817c <__kernel_rem_pio2+0x33c>)
 80180ee:	ec55 4b10 	vmov	r4, r5, d0
 80180f2:	46d8      	mov	r8, fp
 80180f4:	2600      	movs	r6, #0
 80180f6:	f1b8 0f00 	cmp.w	r8, #0
 80180fa:	f280 80cf 	bge.w	801829c <__kernel_rem_pio2+0x45c>
 80180fe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8018160 <__kernel_rem_pio2+0x320>
 8018102:	465f      	mov	r7, fp
 8018104:	f04f 0800 	mov.w	r8, #0
 8018108:	2f00      	cmp	r7, #0
 801810a:	f2c0 80fd 	blt.w	8018308 <__kernel_rem_pio2+0x4c8>
 801810e:	ab70      	add	r3, sp, #448	; 0x1c0
 8018110:	f8df a074 	ldr.w	sl, [pc, #116]	; 8018188 <__kernel_rem_pio2+0x348>
 8018114:	ec55 4b18 	vmov	r4, r5, d8
 8018118:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801811c:	2600      	movs	r6, #0
 801811e:	e0e5      	b.n	80182ec <__kernel_rem_pio2+0x4ac>
 8018120:	2302      	movs	r3, #2
 8018122:	9302      	str	r3, [sp, #8]
 8018124:	e75c      	b.n	8017fe0 <__kernel_rem_pio2+0x1a0>
 8018126:	f8db 3000 	ldr.w	r3, [fp]
 801812a:	b955      	cbnz	r5, 8018142 <__kernel_rem_pio2+0x302>
 801812c:	b123      	cbz	r3, 8018138 <__kernel_rem_pio2+0x2f8>
 801812e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018132:	f8cb 3000 	str.w	r3, [fp]
 8018136:	2301      	movs	r3, #1
 8018138:	3201      	adds	r2, #1
 801813a:	f10b 0b04 	add.w	fp, fp, #4
 801813e:	461d      	mov	r5, r3
 8018140:	e755      	b.n	8017fee <__kernel_rem_pio2+0x1ae>
 8018142:	1acb      	subs	r3, r1, r3
 8018144:	f8cb 3000 	str.w	r3, [fp]
 8018148:	462b      	mov	r3, r5
 801814a:	e7f5      	b.n	8018138 <__kernel_rem_pio2+0x2f8>
 801814c:	1e62      	subs	r2, r4, #1
 801814e:	ab0c      	add	r3, sp, #48	; 0x30
 8018150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018154:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018158:	a90c      	add	r1, sp, #48	; 0x30
 801815a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801815e:	e754      	b.n	801800a <__kernel_rem_pio2+0x1ca>
	...
 801816c:	3ff00000 	.word	0x3ff00000
 8018170:	08018d60 	.word	0x08018d60
 8018174:	40200000 	.word	0x40200000
 8018178:	3ff00000 	.word	0x3ff00000
 801817c:	3e700000 	.word	0x3e700000
 8018180:	41700000 	.word	0x41700000
 8018184:	3fe00000 	.word	0x3fe00000
 8018188:	08018d20 	.word	0x08018d20
 801818c:	1e62      	subs	r2, r4, #1
 801818e:	ab0c      	add	r3, sp, #48	; 0x30
 8018190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018194:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018198:	e7de      	b.n	8018158 <__kernel_rem_pio2+0x318>
 801819a:	a90c      	add	r1, sp, #48	; 0x30
 801819c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80181a0:	3b01      	subs	r3, #1
 80181a2:	430a      	orrs	r2, r1
 80181a4:	e790      	b.n	80180c8 <__kernel_rem_pio2+0x288>
 80181a6:	3301      	adds	r3, #1
 80181a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80181ac:	2900      	cmp	r1, #0
 80181ae:	d0fa      	beq.n	80181a6 <__kernel_rem_pio2+0x366>
 80181b0:	9a08      	ldr	r2, [sp, #32]
 80181b2:	18e3      	adds	r3, r4, r3
 80181b4:	18a6      	adds	r6, r4, r2
 80181b6:	aa20      	add	r2, sp, #128	; 0x80
 80181b8:	1c65      	adds	r5, r4, #1
 80181ba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80181be:	9302      	str	r3, [sp, #8]
 80181c0:	9b02      	ldr	r3, [sp, #8]
 80181c2:	42ab      	cmp	r3, r5
 80181c4:	da04      	bge.n	80181d0 <__kernel_rem_pio2+0x390>
 80181c6:	461c      	mov	r4, r3
 80181c8:	e6b5      	b.n	8017f36 <__kernel_rem_pio2+0xf6>
 80181ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181cc:	2301      	movs	r3, #1
 80181ce:	e7eb      	b.n	80181a8 <__kernel_rem_pio2+0x368>
 80181d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80181d6:	f7e8 f997 	bl	8000508 <__aeabi_i2d>
 80181da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80181de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181e0:	46b3      	mov	fp, r6
 80181e2:	461c      	mov	r4, r3
 80181e4:	2700      	movs	r7, #0
 80181e6:	f04f 0800 	mov.w	r8, #0
 80181ea:	f04f 0900 	mov.w	r9, #0
 80181ee:	9b06      	ldr	r3, [sp, #24]
 80181f0:	429f      	cmp	r7, r3
 80181f2:	dd06      	ble.n	8018202 <__kernel_rem_pio2+0x3c2>
 80181f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80181f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80181fa:	e9c3 8900 	strd	r8, r9, [r3]
 80181fe:	3501      	adds	r5, #1
 8018200:	e7de      	b.n	80181c0 <__kernel_rem_pio2+0x380>
 8018202:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018206:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801820a:	f7e8 f9e7 	bl	80005dc <__aeabi_dmul>
 801820e:	4602      	mov	r2, r0
 8018210:	460b      	mov	r3, r1
 8018212:	4640      	mov	r0, r8
 8018214:	4649      	mov	r1, r9
 8018216:	f7e8 f82b 	bl	8000270 <__adddf3>
 801821a:	3701      	adds	r7, #1
 801821c:	4680      	mov	r8, r0
 801821e:	4689      	mov	r9, r1
 8018220:	e7e5      	b.n	80181ee <__kernel_rem_pio2+0x3ae>
 8018222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018226:	e754      	b.n	80180d2 <__kernel_rem_pio2+0x292>
 8018228:	ec47 6b10 	vmov	d0, r6, r7
 801822c:	f1ca 0000 	rsb	r0, sl, #0
 8018230:	f000 fa22 	bl	8018678 <scalbn>
 8018234:	ec57 6b10 	vmov	r6, r7, d0
 8018238:	4b9f      	ldr	r3, [pc, #636]	; (80184b8 <__kernel_rem_pio2+0x678>)
 801823a:	ee10 0a10 	vmov	r0, s0
 801823e:	2200      	movs	r2, #0
 8018240:	4639      	mov	r1, r7
 8018242:	f7e8 fc51 	bl	8000ae8 <__aeabi_dcmpge>
 8018246:	b300      	cbz	r0, 801828a <__kernel_rem_pio2+0x44a>
 8018248:	4b9c      	ldr	r3, [pc, #624]	; (80184bc <__kernel_rem_pio2+0x67c>)
 801824a:	2200      	movs	r2, #0
 801824c:	4630      	mov	r0, r6
 801824e:	4639      	mov	r1, r7
 8018250:	f7e8 f9c4 	bl	80005dc <__aeabi_dmul>
 8018254:	f7e8 fc72 	bl	8000b3c <__aeabi_d2iz>
 8018258:	4605      	mov	r5, r0
 801825a:	f7e8 f955 	bl	8000508 <__aeabi_i2d>
 801825e:	4b96      	ldr	r3, [pc, #600]	; (80184b8 <__kernel_rem_pio2+0x678>)
 8018260:	2200      	movs	r2, #0
 8018262:	f7e8 f9bb 	bl	80005dc <__aeabi_dmul>
 8018266:	460b      	mov	r3, r1
 8018268:	4602      	mov	r2, r0
 801826a:	4639      	mov	r1, r7
 801826c:	4630      	mov	r0, r6
 801826e:	f7e7 fffd 	bl	800026c <__aeabi_dsub>
 8018272:	f7e8 fc63 	bl	8000b3c <__aeabi_d2iz>
 8018276:	f104 0b01 	add.w	fp, r4, #1
 801827a:	ab0c      	add	r3, sp, #48	; 0x30
 801827c:	f10a 0a18 	add.w	sl, sl, #24
 8018280:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018284:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8018288:	e72b      	b.n	80180e2 <__kernel_rem_pio2+0x2a2>
 801828a:	4630      	mov	r0, r6
 801828c:	4639      	mov	r1, r7
 801828e:	f7e8 fc55 	bl	8000b3c <__aeabi_d2iz>
 8018292:	ab0c      	add	r3, sp, #48	; 0x30
 8018294:	46a3      	mov	fp, r4
 8018296:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801829a:	e722      	b.n	80180e2 <__kernel_rem_pio2+0x2a2>
 801829c:	ab70      	add	r3, sp, #448	; 0x1c0
 801829e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80182a2:	ab0c      	add	r3, sp, #48	; 0x30
 80182a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80182a8:	f7e8 f92e 	bl	8000508 <__aeabi_i2d>
 80182ac:	4622      	mov	r2, r4
 80182ae:	462b      	mov	r3, r5
 80182b0:	f7e8 f994 	bl	80005dc <__aeabi_dmul>
 80182b4:	4632      	mov	r2, r6
 80182b6:	e9c9 0100 	strd	r0, r1, [r9]
 80182ba:	463b      	mov	r3, r7
 80182bc:	4620      	mov	r0, r4
 80182be:	4629      	mov	r1, r5
 80182c0:	f7e8 f98c 	bl	80005dc <__aeabi_dmul>
 80182c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80182c8:	4604      	mov	r4, r0
 80182ca:	460d      	mov	r5, r1
 80182cc:	e713      	b.n	80180f6 <__kernel_rem_pio2+0x2b6>
 80182ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80182d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80182d6:	f7e8 f981 	bl	80005dc <__aeabi_dmul>
 80182da:	4602      	mov	r2, r0
 80182dc:	460b      	mov	r3, r1
 80182de:	4620      	mov	r0, r4
 80182e0:	4629      	mov	r1, r5
 80182e2:	f7e7 ffc5 	bl	8000270 <__adddf3>
 80182e6:	3601      	adds	r6, #1
 80182e8:	4604      	mov	r4, r0
 80182ea:	460d      	mov	r5, r1
 80182ec:	9b04      	ldr	r3, [sp, #16]
 80182ee:	429e      	cmp	r6, r3
 80182f0:	dc01      	bgt.n	80182f6 <__kernel_rem_pio2+0x4b6>
 80182f2:	45b0      	cmp	r8, r6
 80182f4:	daeb      	bge.n	80182ce <__kernel_rem_pio2+0x48e>
 80182f6:	ab48      	add	r3, sp, #288	; 0x120
 80182f8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80182fc:	e9c3 4500 	strd	r4, r5, [r3]
 8018300:	3f01      	subs	r7, #1
 8018302:	f108 0801 	add.w	r8, r8, #1
 8018306:	e6ff      	b.n	8018108 <__kernel_rem_pio2+0x2c8>
 8018308:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801830a:	2b02      	cmp	r3, #2
 801830c:	dc0b      	bgt.n	8018326 <__kernel_rem_pio2+0x4e6>
 801830e:	2b00      	cmp	r3, #0
 8018310:	dc6e      	bgt.n	80183f0 <__kernel_rem_pio2+0x5b0>
 8018312:	d045      	beq.n	80183a0 <__kernel_rem_pio2+0x560>
 8018314:	9b07      	ldr	r3, [sp, #28]
 8018316:	f003 0007 	and.w	r0, r3, #7
 801831a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801831e:	ecbd 8b02 	vpop	{d8}
 8018322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018326:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8018328:	2b03      	cmp	r3, #3
 801832a:	d1f3      	bne.n	8018314 <__kernel_rem_pio2+0x4d4>
 801832c:	ab48      	add	r3, sp, #288	; 0x120
 801832e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8018332:	46d0      	mov	r8, sl
 8018334:	46d9      	mov	r9, fp
 8018336:	f1b9 0f00 	cmp.w	r9, #0
 801833a:	f1a8 0808 	sub.w	r8, r8, #8
 801833e:	dc64      	bgt.n	801840a <__kernel_rem_pio2+0x5ca>
 8018340:	465c      	mov	r4, fp
 8018342:	2c01      	cmp	r4, #1
 8018344:	f1aa 0a08 	sub.w	sl, sl, #8
 8018348:	dc7e      	bgt.n	8018448 <__kernel_rem_pio2+0x608>
 801834a:	2000      	movs	r0, #0
 801834c:	2100      	movs	r1, #0
 801834e:	f1bb 0f01 	cmp.w	fp, #1
 8018352:	f300 8097 	bgt.w	8018484 <__kernel_rem_pio2+0x644>
 8018356:	9b02      	ldr	r3, [sp, #8]
 8018358:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801835c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8018360:	2b00      	cmp	r3, #0
 8018362:	f040 8099 	bne.w	8018498 <__kernel_rem_pio2+0x658>
 8018366:	9b01      	ldr	r3, [sp, #4]
 8018368:	e9c3 5600 	strd	r5, r6, [r3]
 801836c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8018370:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018374:	e7ce      	b.n	8018314 <__kernel_rem_pio2+0x4d4>
 8018376:	ab48      	add	r3, sp, #288	; 0x120
 8018378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018380:	f7e7 ff76 	bl	8000270 <__adddf3>
 8018384:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018388:	f1bb 0f00 	cmp.w	fp, #0
 801838c:	daf3      	bge.n	8018376 <__kernel_rem_pio2+0x536>
 801838e:	9b02      	ldr	r3, [sp, #8]
 8018390:	b113      	cbz	r3, 8018398 <__kernel_rem_pio2+0x558>
 8018392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018396:	4619      	mov	r1, r3
 8018398:	9b01      	ldr	r3, [sp, #4]
 801839a:	e9c3 0100 	strd	r0, r1, [r3]
 801839e:	e7b9      	b.n	8018314 <__kernel_rem_pio2+0x4d4>
 80183a0:	2000      	movs	r0, #0
 80183a2:	2100      	movs	r1, #0
 80183a4:	e7f0      	b.n	8018388 <__kernel_rem_pio2+0x548>
 80183a6:	ab48      	add	r3, sp, #288	; 0x120
 80183a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80183ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b0:	f7e7 ff5e 	bl	8000270 <__adddf3>
 80183b4:	3c01      	subs	r4, #1
 80183b6:	2c00      	cmp	r4, #0
 80183b8:	daf5      	bge.n	80183a6 <__kernel_rem_pio2+0x566>
 80183ba:	9b02      	ldr	r3, [sp, #8]
 80183bc:	b1e3      	cbz	r3, 80183f8 <__kernel_rem_pio2+0x5b8>
 80183be:	4602      	mov	r2, r0
 80183c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80183c4:	9c01      	ldr	r4, [sp, #4]
 80183c6:	e9c4 2300 	strd	r2, r3, [r4]
 80183ca:	4602      	mov	r2, r0
 80183cc:	460b      	mov	r3, r1
 80183ce:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80183d2:	f7e7 ff4b 	bl	800026c <__aeabi_dsub>
 80183d6:	ad4a      	add	r5, sp, #296	; 0x128
 80183d8:	2401      	movs	r4, #1
 80183da:	45a3      	cmp	fp, r4
 80183dc:	da0f      	bge.n	80183fe <__kernel_rem_pio2+0x5be>
 80183de:	9b02      	ldr	r3, [sp, #8]
 80183e0:	b113      	cbz	r3, 80183e8 <__kernel_rem_pio2+0x5a8>
 80183e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80183e6:	4619      	mov	r1, r3
 80183e8:	9b01      	ldr	r3, [sp, #4]
 80183ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80183ee:	e791      	b.n	8018314 <__kernel_rem_pio2+0x4d4>
 80183f0:	465c      	mov	r4, fp
 80183f2:	2000      	movs	r0, #0
 80183f4:	2100      	movs	r1, #0
 80183f6:	e7de      	b.n	80183b6 <__kernel_rem_pio2+0x576>
 80183f8:	4602      	mov	r2, r0
 80183fa:	460b      	mov	r3, r1
 80183fc:	e7e2      	b.n	80183c4 <__kernel_rem_pio2+0x584>
 80183fe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8018402:	f7e7 ff35 	bl	8000270 <__adddf3>
 8018406:	3401      	adds	r4, #1
 8018408:	e7e7      	b.n	80183da <__kernel_rem_pio2+0x59a>
 801840a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801840e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8018412:	4620      	mov	r0, r4
 8018414:	4632      	mov	r2, r6
 8018416:	463b      	mov	r3, r7
 8018418:	4629      	mov	r1, r5
 801841a:	f7e7 ff29 	bl	8000270 <__adddf3>
 801841e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018422:	4602      	mov	r2, r0
 8018424:	460b      	mov	r3, r1
 8018426:	4620      	mov	r0, r4
 8018428:	4629      	mov	r1, r5
 801842a:	f7e7 ff1f 	bl	800026c <__aeabi_dsub>
 801842e:	4632      	mov	r2, r6
 8018430:	463b      	mov	r3, r7
 8018432:	f7e7 ff1d 	bl	8000270 <__adddf3>
 8018436:	ed9d 7b04 	vldr	d7, [sp, #16]
 801843a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801843e:	ed88 7b00 	vstr	d7, [r8]
 8018442:	f109 39ff 	add.w	r9, r9, #4294967295
 8018446:	e776      	b.n	8018336 <__kernel_rem_pio2+0x4f6>
 8018448:	e9da 8900 	ldrd	r8, r9, [sl]
 801844c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8018450:	4640      	mov	r0, r8
 8018452:	4632      	mov	r2, r6
 8018454:	463b      	mov	r3, r7
 8018456:	4649      	mov	r1, r9
 8018458:	f7e7 ff0a 	bl	8000270 <__adddf3>
 801845c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018460:	4602      	mov	r2, r0
 8018462:	460b      	mov	r3, r1
 8018464:	4640      	mov	r0, r8
 8018466:	4649      	mov	r1, r9
 8018468:	f7e7 ff00 	bl	800026c <__aeabi_dsub>
 801846c:	4632      	mov	r2, r6
 801846e:	463b      	mov	r3, r7
 8018470:	f7e7 fefe 	bl	8000270 <__adddf3>
 8018474:	ed9d 7b04 	vldr	d7, [sp, #16]
 8018478:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801847c:	ed8a 7b00 	vstr	d7, [sl]
 8018480:	3c01      	subs	r4, #1
 8018482:	e75e      	b.n	8018342 <__kernel_rem_pio2+0x502>
 8018484:	ab48      	add	r3, sp, #288	; 0x120
 8018486:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848e:	f7e7 feef 	bl	8000270 <__adddf3>
 8018492:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018496:	e75a      	b.n	801834e <__kernel_rem_pio2+0x50e>
 8018498:	9b01      	ldr	r3, [sp, #4]
 801849a:	9a01      	ldr	r2, [sp, #4]
 801849c:	601d      	str	r5, [r3, #0]
 801849e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80184a2:	605c      	str	r4, [r3, #4]
 80184a4:	609f      	str	r7, [r3, #8]
 80184a6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80184aa:	60d3      	str	r3, [r2, #12]
 80184ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184b0:	6110      	str	r0, [r2, #16]
 80184b2:	6153      	str	r3, [r2, #20]
 80184b4:	e72e      	b.n	8018314 <__kernel_rem_pio2+0x4d4>
 80184b6:	bf00      	nop
 80184b8:	41700000 	.word	0x41700000
 80184bc:	3e700000 	.word	0x3e700000

080184c0 <__kernel_sin>:
 80184c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c4:	ed2d 8b04 	vpush	{d8-d9}
 80184c8:	eeb0 8a41 	vmov.f32	s16, s2
 80184cc:	eef0 8a61 	vmov.f32	s17, s3
 80184d0:	ec55 4b10 	vmov	r4, r5, d0
 80184d4:	b083      	sub	sp, #12
 80184d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80184da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80184de:	9001      	str	r0, [sp, #4]
 80184e0:	da06      	bge.n	80184f0 <__kernel_sin+0x30>
 80184e2:	ee10 0a10 	vmov	r0, s0
 80184e6:	4629      	mov	r1, r5
 80184e8:	f7e8 fb28 	bl	8000b3c <__aeabi_d2iz>
 80184ec:	2800      	cmp	r0, #0
 80184ee:	d051      	beq.n	8018594 <__kernel_sin+0xd4>
 80184f0:	4622      	mov	r2, r4
 80184f2:	462b      	mov	r3, r5
 80184f4:	4620      	mov	r0, r4
 80184f6:	4629      	mov	r1, r5
 80184f8:	f7e8 f870 	bl	80005dc <__aeabi_dmul>
 80184fc:	4682      	mov	sl, r0
 80184fe:	468b      	mov	fp, r1
 8018500:	4602      	mov	r2, r0
 8018502:	460b      	mov	r3, r1
 8018504:	4620      	mov	r0, r4
 8018506:	4629      	mov	r1, r5
 8018508:	f7e8 f868 	bl	80005dc <__aeabi_dmul>
 801850c:	a341      	add	r3, pc, #260	; (adr r3, 8018614 <__kernel_sin+0x154>)
 801850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018512:	4680      	mov	r8, r0
 8018514:	4689      	mov	r9, r1
 8018516:	4650      	mov	r0, sl
 8018518:	4659      	mov	r1, fp
 801851a:	f7e8 f85f 	bl	80005dc <__aeabi_dmul>
 801851e:	a33f      	add	r3, pc, #252	; (adr r3, 801861c <__kernel_sin+0x15c>)
 8018520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018524:	f7e7 fea2 	bl	800026c <__aeabi_dsub>
 8018528:	4652      	mov	r2, sl
 801852a:	465b      	mov	r3, fp
 801852c:	f7e8 f856 	bl	80005dc <__aeabi_dmul>
 8018530:	a33c      	add	r3, pc, #240	; (adr r3, 8018624 <__kernel_sin+0x164>)
 8018532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018536:	f7e7 fe9b 	bl	8000270 <__adddf3>
 801853a:	4652      	mov	r2, sl
 801853c:	465b      	mov	r3, fp
 801853e:	f7e8 f84d 	bl	80005dc <__aeabi_dmul>
 8018542:	a33a      	add	r3, pc, #232	; (adr r3, 801862c <__kernel_sin+0x16c>)
 8018544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018548:	f7e7 fe90 	bl	800026c <__aeabi_dsub>
 801854c:	4652      	mov	r2, sl
 801854e:	465b      	mov	r3, fp
 8018550:	f7e8 f844 	bl	80005dc <__aeabi_dmul>
 8018554:	a337      	add	r3, pc, #220	; (adr r3, 8018634 <__kernel_sin+0x174>)
 8018556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855a:	f7e7 fe89 	bl	8000270 <__adddf3>
 801855e:	9b01      	ldr	r3, [sp, #4]
 8018560:	4606      	mov	r6, r0
 8018562:	460f      	mov	r7, r1
 8018564:	b9eb      	cbnz	r3, 80185a2 <__kernel_sin+0xe2>
 8018566:	4602      	mov	r2, r0
 8018568:	460b      	mov	r3, r1
 801856a:	4650      	mov	r0, sl
 801856c:	4659      	mov	r1, fp
 801856e:	f7e8 f835 	bl	80005dc <__aeabi_dmul>
 8018572:	a325      	add	r3, pc, #148	; (adr r3, 8018608 <__kernel_sin+0x148>)
 8018574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018578:	f7e7 fe78 	bl	800026c <__aeabi_dsub>
 801857c:	4642      	mov	r2, r8
 801857e:	464b      	mov	r3, r9
 8018580:	f7e8 f82c 	bl	80005dc <__aeabi_dmul>
 8018584:	4602      	mov	r2, r0
 8018586:	460b      	mov	r3, r1
 8018588:	4620      	mov	r0, r4
 801858a:	4629      	mov	r1, r5
 801858c:	f7e7 fe70 	bl	8000270 <__adddf3>
 8018590:	4604      	mov	r4, r0
 8018592:	460d      	mov	r5, r1
 8018594:	ec45 4b10 	vmov	d0, r4, r5
 8018598:	b003      	add	sp, #12
 801859a:	ecbd 8b04 	vpop	{d8-d9}
 801859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a2:	4b1b      	ldr	r3, [pc, #108]	; (8018610 <__kernel_sin+0x150>)
 80185a4:	ec51 0b18 	vmov	r0, r1, d8
 80185a8:	2200      	movs	r2, #0
 80185aa:	f7e8 f817 	bl	80005dc <__aeabi_dmul>
 80185ae:	4632      	mov	r2, r6
 80185b0:	ec41 0b19 	vmov	d9, r0, r1
 80185b4:	463b      	mov	r3, r7
 80185b6:	4640      	mov	r0, r8
 80185b8:	4649      	mov	r1, r9
 80185ba:	f7e8 f80f 	bl	80005dc <__aeabi_dmul>
 80185be:	4602      	mov	r2, r0
 80185c0:	460b      	mov	r3, r1
 80185c2:	ec51 0b19 	vmov	r0, r1, d9
 80185c6:	f7e7 fe51 	bl	800026c <__aeabi_dsub>
 80185ca:	4652      	mov	r2, sl
 80185cc:	465b      	mov	r3, fp
 80185ce:	f7e8 f805 	bl	80005dc <__aeabi_dmul>
 80185d2:	ec53 2b18 	vmov	r2, r3, d8
 80185d6:	f7e7 fe49 	bl	800026c <__aeabi_dsub>
 80185da:	a30b      	add	r3, pc, #44	; (adr r3, 8018608 <__kernel_sin+0x148>)
 80185dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e0:	4606      	mov	r6, r0
 80185e2:	460f      	mov	r7, r1
 80185e4:	4640      	mov	r0, r8
 80185e6:	4649      	mov	r1, r9
 80185e8:	f7e7 fff8 	bl	80005dc <__aeabi_dmul>
 80185ec:	4602      	mov	r2, r0
 80185ee:	460b      	mov	r3, r1
 80185f0:	4630      	mov	r0, r6
 80185f2:	4639      	mov	r1, r7
 80185f4:	f7e7 fe3c 	bl	8000270 <__adddf3>
 80185f8:	4602      	mov	r2, r0
 80185fa:	460b      	mov	r3, r1
 80185fc:	4620      	mov	r0, r4
 80185fe:	4629      	mov	r1, r5
 8018600:	f7e7 fe34 	bl	800026c <__aeabi_dsub>
 8018604:	e7c4      	b.n	8018590 <__kernel_sin+0xd0>
 8018606:	bf00      	nop
 8018608:	55555549 	.word	0x55555549
 801860c:	3fc55555 	.word	0x3fc55555
 8018610:	3fe00000 	.word	0x3fe00000
 8018614:	5acfd57c 	.word	0x5acfd57c
 8018618:	3de5d93a 	.word	0x3de5d93a
 801861c:	8a2b9ceb 	.word	0x8a2b9ceb
 8018620:	3e5ae5e6 	.word	0x3e5ae5e6
 8018624:	57b1fe7d 	.word	0x57b1fe7d
 8018628:	3ec71de3 	.word	0x3ec71de3
 801862c:	19c161d5 	.word	0x19c161d5
 8018630:	3f2a01a0 	.word	0x3f2a01a0
 8018634:	1110f8a6 	.word	0x1110f8a6
 8018638:	3f811111 	.word	0x3f811111

0801863c <fabs>:
 801863c:	ec51 0b10 	vmov	r0, r1, d0
 8018640:	ee10 2a10 	vmov	r2, s0
 8018644:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018648:	ec43 2b10 	vmov	d0, r2, r3
 801864c:	4770      	bx	lr

0801864e <finite>:
 801864e:	b082      	sub	sp, #8
 8018650:	ed8d 0b00 	vstr	d0, [sp]
 8018654:	9801      	ldr	r0, [sp, #4]
 8018656:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801865a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801865e:	0fc0      	lsrs	r0, r0, #31
 8018660:	b002      	add	sp, #8
 8018662:	4770      	bx	lr
 8018664:	0000      	movs	r0, r0
	...

08018668 <nan>:
 8018668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018670 <nan+0x8>
 801866c:	4770      	bx	lr
 801866e:	bf00      	nop
 8018670:	00000000 	.word	0x00000000
 8018674:	7ff80000 	.word	0x7ff80000

08018678 <scalbn>:
 8018678:	b570      	push	{r4, r5, r6, lr}
 801867a:	ec55 4b10 	vmov	r4, r5, d0
 801867e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018682:	4606      	mov	r6, r0
 8018684:	462b      	mov	r3, r5
 8018686:	b99a      	cbnz	r2, 80186b0 <scalbn+0x38>
 8018688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801868c:	4323      	orrs	r3, r4
 801868e:	d036      	beq.n	80186fe <scalbn+0x86>
 8018690:	4b39      	ldr	r3, [pc, #228]	; (8018778 <scalbn+0x100>)
 8018692:	4629      	mov	r1, r5
 8018694:	ee10 0a10 	vmov	r0, s0
 8018698:	2200      	movs	r2, #0
 801869a:	f7e7 ff9f 	bl	80005dc <__aeabi_dmul>
 801869e:	4b37      	ldr	r3, [pc, #220]	; (801877c <scalbn+0x104>)
 80186a0:	429e      	cmp	r6, r3
 80186a2:	4604      	mov	r4, r0
 80186a4:	460d      	mov	r5, r1
 80186a6:	da10      	bge.n	80186ca <scalbn+0x52>
 80186a8:	a32b      	add	r3, pc, #172	; (adr r3, 8018758 <scalbn+0xe0>)
 80186aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ae:	e03a      	b.n	8018726 <scalbn+0xae>
 80186b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80186b4:	428a      	cmp	r2, r1
 80186b6:	d10c      	bne.n	80186d2 <scalbn+0x5a>
 80186b8:	ee10 2a10 	vmov	r2, s0
 80186bc:	4620      	mov	r0, r4
 80186be:	4629      	mov	r1, r5
 80186c0:	f7e7 fdd6 	bl	8000270 <__adddf3>
 80186c4:	4604      	mov	r4, r0
 80186c6:	460d      	mov	r5, r1
 80186c8:	e019      	b.n	80186fe <scalbn+0x86>
 80186ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80186ce:	460b      	mov	r3, r1
 80186d0:	3a36      	subs	r2, #54	; 0x36
 80186d2:	4432      	add	r2, r6
 80186d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80186d8:	428a      	cmp	r2, r1
 80186da:	dd08      	ble.n	80186ee <scalbn+0x76>
 80186dc:	2d00      	cmp	r5, #0
 80186de:	a120      	add	r1, pc, #128	; (adr r1, 8018760 <scalbn+0xe8>)
 80186e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186e4:	da1c      	bge.n	8018720 <scalbn+0xa8>
 80186e6:	a120      	add	r1, pc, #128	; (adr r1, 8018768 <scalbn+0xf0>)
 80186e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186ec:	e018      	b.n	8018720 <scalbn+0xa8>
 80186ee:	2a00      	cmp	r2, #0
 80186f0:	dd08      	ble.n	8018704 <scalbn+0x8c>
 80186f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80186f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80186fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80186fe:	ec45 4b10 	vmov	d0, r4, r5
 8018702:	bd70      	pop	{r4, r5, r6, pc}
 8018704:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018708:	da19      	bge.n	801873e <scalbn+0xc6>
 801870a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801870e:	429e      	cmp	r6, r3
 8018710:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018714:	dd0a      	ble.n	801872c <scalbn+0xb4>
 8018716:	a112      	add	r1, pc, #72	; (adr r1, 8018760 <scalbn+0xe8>)
 8018718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d1e2      	bne.n	80186e6 <scalbn+0x6e>
 8018720:	a30f      	add	r3, pc, #60	; (adr r3, 8018760 <scalbn+0xe8>)
 8018722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018726:	f7e7 ff59 	bl	80005dc <__aeabi_dmul>
 801872a:	e7cb      	b.n	80186c4 <scalbn+0x4c>
 801872c:	a10a      	add	r1, pc, #40	; (adr r1, 8018758 <scalbn+0xe0>)
 801872e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d0b8      	beq.n	80186a8 <scalbn+0x30>
 8018736:	a10e      	add	r1, pc, #56	; (adr r1, 8018770 <scalbn+0xf8>)
 8018738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801873c:	e7b4      	b.n	80186a8 <scalbn+0x30>
 801873e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018742:	3236      	adds	r2, #54	; 0x36
 8018744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018748:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801874c:	4620      	mov	r0, r4
 801874e:	4b0c      	ldr	r3, [pc, #48]	; (8018780 <scalbn+0x108>)
 8018750:	2200      	movs	r2, #0
 8018752:	e7e8      	b.n	8018726 <scalbn+0xae>
 8018754:	f3af 8000 	nop.w
 8018758:	c2f8f359 	.word	0xc2f8f359
 801875c:	01a56e1f 	.word	0x01a56e1f
 8018760:	8800759c 	.word	0x8800759c
 8018764:	7e37e43c 	.word	0x7e37e43c
 8018768:	8800759c 	.word	0x8800759c
 801876c:	fe37e43c 	.word	0xfe37e43c
 8018770:	c2f8f359 	.word	0xc2f8f359
 8018774:	81a56e1f 	.word	0x81a56e1f
 8018778:	43500000 	.word	0x43500000
 801877c:	ffff3cb0 	.word	0xffff3cb0
 8018780:	3c900000 	.word	0x3c900000

08018784 <_init>:
 8018784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018786:	bf00      	nop
 8018788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801878a:	bc08      	pop	{r3}
 801878c:	469e      	mov	lr, r3
 801878e:	4770      	bx	lr

08018790 <_fini>:
 8018790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018792:	bf00      	nop
 8018794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018796:	bc08      	pop	{r3}
 8018798:	469e      	mov	lr, r3
 801879a:	4770      	bx	lr
